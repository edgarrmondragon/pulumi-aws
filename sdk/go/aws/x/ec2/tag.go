// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an individual EC2 resource tag. This resource should only be used in cases where EC2 resources are created outside the provider (e.g. AMIs), being shared via Resource Access Manager (RAM), or implicitly created by other means (e.g. Transit Gateway VPN Attachments).
//
// > **NOTE:** This tagging resource should not be combined with the providers resource for managing the parent resource. For example, using `ec2.Vpc` and `ec2.Tag` to manage tags of the same VPC will cause a perpetual difference where the `ec2.Vpc` resource will try to remove the tag being added by the `ec2.Tag` resource.
type Tag struct {
	pulumi.CustomResourceState

	// The tag name.
	Key pulumix.Output[string] `pulumi:"key"`
	// The ID of the EC2 resource to manage the tag for.
	ResourceId pulumix.Output[string] `pulumi:"resourceId"`
	// The value of the tag.
	Value pulumix.Output[string] `pulumi:"value"`
}

// NewTag registers a new resource with the given unique name, arguments, and options.
func NewTag(ctx *pulumi.Context,
	name string, args *TagArgs, opts ...pulumi.ResourceOption) (*Tag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tag
	err := ctx.RegisterResource("aws:ec2/tag:Tag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTag gets an existing Tag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagState, opts ...pulumi.ResourceOption) (*Tag, error) {
	var resource Tag
	err := ctx.ReadResource("aws:ec2/tag:Tag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tag resources.
type tagState struct {
	// The tag name.
	Key *string `pulumi:"key"`
	// The ID of the EC2 resource to manage the tag for.
	ResourceId *string `pulumi:"resourceId"`
	// The value of the tag.
	Value *string `pulumi:"value"`
}

type TagState struct {
	// The tag name.
	Key pulumix.Input[*string]
	// The ID of the EC2 resource to manage the tag for.
	ResourceId pulumix.Input[*string]
	// The value of the tag.
	Value pulumix.Input[*string]
}

func (TagState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagState)(nil)).Elem()
}

type tagArgs struct {
	// The tag name.
	Key string `pulumi:"key"`
	// The ID of the EC2 resource to manage the tag for.
	ResourceId string `pulumi:"resourceId"`
	// The value of the tag.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a Tag resource.
type TagArgs struct {
	// The tag name.
	Key pulumix.Input[string]
	// The ID of the EC2 resource to manage the tag for.
	ResourceId pulumix.Input[string]
	// The value of the tag.
	Value pulumix.Input[string]
}

func (TagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagArgs)(nil)).Elem()
}

type TagOutput struct{ *pulumi.OutputState }

func (TagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Tag)(nil)).Elem()
}

func (o TagOutput) ToTagOutput() TagOutput {
	return o
}

func (o TagOutput) ToTagOutputWithContext(ctx context.Context) TagOutput {
	return o
}

func (o TagOutput) ToOutput(ctx context.Context) pulumix.Output[Tag] {
	return pulumix.Output[Tag]{
		OutputState: o.OutputState,
	}
}

// The tag name.
func (o TagOutput) Key() pulumix.Output[string] {
	value := pulumix.Apply[Tag](o, func(v Tag) pulumix.Output[string] { return v.Key })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the EC2 resource to manage the tag for.
func (o TagOutput) ResourceId() pulumix.Output[string] {
	value := pulumix.Apply[Tag](o, func(v Tag) pulumix.Output[string] { return v.ResourceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The value of the tag.
func (o TagOutput) Value() pulumix.Output[string] {
	value := pulumix.Apply[Tag](o, func(v Tag) pulumix.Output[string] { return v.Value })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(TagOutput{})
}
