// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type InsightFilters struct {
	// AWS account ID that a finding is generated in. See String_Filter below for more details.
	AwsAccountIds []InsightFiltersAwsAccountId `pulumi:"awsAccountIds"`
	// The name of the findings provider (company) that owns the solution (product) that generates findings. See String_Filter below for more details.
	CompanyNames []InsightFiltersCompanyName `pulumi:"companyNames"`
	// Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard, such as CIS AWS Foundations. Contains security standard-related finding details. See String Filter below for more details.
	ComplianceStatuses []InsightFiltersComplianceStatus `pulumi:"complianceStatuses"`
	// A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
	Confidences []InsightFiltersConfidence `pulumi:"confidences"`
	// An ISO8601-formatted timestamp that indicates when the security-findings provider captured the potential security issue that a finding captured. See Date Filter below for more details.
	CreatedAts []InsightFiltersCreatedAt `pulumi:"createdAts"`
	// The level of importance assigned to the resources associated with the finding. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
	Criticalities []InsightFiltersCriticality `pulumi:"criticalities"`
	// A finding's description. See String Filter below for more details.
	Descriptions []InsightFiltersDescription `pulumi:"descriptions"`
	// The finding provider value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
	FindingProviderFieldsConfidences []InsightFiltersFindingProviderFieldsConfidence `pulumi:"findingProviderFieldsConfidences"`
	// The finding provider value for the level of importance assigned to the resources associated with the findings. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
	FindingProviderFieldsCriticalities []InsightFiltersFindingProviderFieldsCriticality `pulumi:"findingProviderFieldsCriticalities"`
	// The finding identifier of a related finding that is identified by the finding provider. See String Filter below for more details.
	FindingProviderFieldsRelatedFindingsIds []InsightFiltersFindingProviderFieldsRelatedFindingsId `pulumi:"findingProviderFieldsRelatedFindingsIds"`
	// The ARN of the solution that generated a related finding that is identified by the finding provider. See String Filter below for more details.
	FindingProviderFieldsRelatedFindingsProductArns []InsightFiltersFindingProviderFieldsRelatedFindingsProductArn `pulumi:"findingProviderFieldsRelatedFindingsProductArns"`
	// The finding provider value for the severity label. See String Filter below for more details.
	FindingProviderFieldsSeverityLabels []InsightFiltersFindingProviderFieldsSeverityLabel `pulumi:"findingProviderFieldsSeverityLabels"`
	// The finding provider's original value for the severity. See String Filter below for more details.
	FindingProviderFieldsSeverityOriginals []InsightFiltersFindingProviderFieldsSeverityOriginal `pulumi:"findingProviderFieldsSeverityOriginals"`
	// One or more finding types that the finding provider assigned to the finding. Uses the format of `namespace/category/classifier` that classify a finding. Valid namespace values include: `Software and Configuration Checks`, `TTPs`, `Effects`, `Unusual Behaviors`, and `Sensitive Data Identifications`. See String Filter below for more details.
	FindingProviderFieldsTypes []InsightFiltersFindingProviderFieldsType `pulumi:"findingProviderFieldsTypes"`
	// An ISO8601-formatted timestamp that indicates when the security-findings provider first observed the potential security issue that a finding captured. See Date Filter below for more details.
	FirstObservedAts []InsightFiltersFirstObservedAt `pulumi:"firstObservedAts"`
	// The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. See String Filter below for more details.
	GeneratorIds []InsightFiltersGeneratorId `pulumi:"generatorIds"`
	// The security findings provider-specific identifier for a finding. See String Filter below for more details.
	Ids []InsightFiltersId `pulumi:"ids"`
	// A keyword for a finding. See Keyword Filter below for more details.
	Keywords []InsightFiltersKeyword `pulumi:"keywords"`
	// An ISO8601-formatted timestamp that indicates when the security-findings provider most recently observed the potential security issue that a finding captured. See Date Filter below for more details.
	LastObservedAts []InsightFiltersLastObservedAt `pulumi:"lastObservedAts"`
	// The name of the malware that was observed. See String Filter below for more details.
	MalwareNames []InsightFiltersMalwareName `pulumi:"malwareNames"`
	// The filesystem path of the malware that was observed. See String Filter below for more details.
	MalwarePaths []InsightFiltersMalwarePath `pulumi:"malwarePaths"`
	// The state of the malware that was observed. See String Filter below for more details.
	MalwareStates []InsightFiltersMalwareState `pulumi:"malwareStates"`
	// The type of the malware that was observed. See String Filter below for more details.
	MalwareTypes []InsightFiltersMalwareType `pulumi:"malwareTypes"`
	// The destination domain of network-related information about a finding. See String Filter below for more details.
	NetworkDestinationDomains []InsightFiltersNetworkDestinationDomain `pulumi:"networkDestinationDomains"`
	// The destination IPv4 address of network-related information about a finding. See Ip Filter below for more details.
	NetworkDestinationIpv4s []InsightFiltersNetworkDestinationIpv4 `pulumi:"networkDestinationIpv4s"`
	// The destination IPv6 address of network-related information about a finding. See Ip Filter below for more details.
	NetworkDestinationIpv6s []InsightFiltersNetworkDestinationIpv6 `pulumi:"networkDestinationIpv6s"`
	// The destination port of network-related information about a finding. See Number Filter below for more details.
	NetworkDestinationPorts []InsightFiltersNetworkDestinationPort `pulumi:"networkDestinationPorts"`
	// Indicates the direction of network traffic associated with a finding. See String Filter below for more details.
	NetworkDirections []InsightFiltersNetworkDirection `pulumi:"networkDirections"`
	// The protocol of network-related information about a finding. See String Filter below for more details.
	NetworkProtocols []InsightFiltersNetworkProtocol `pulumi:"networkProtocols"`
	// The source domain of network-related information about a finding. See String Filter below for more details.
	NetworkSourceDomains []InsightFiltersNetworkSourceDomain `pulumi:"networkSourceDomains"`
	// The source IPv4 address of network-related information about a finding. See Ip Filter below for more details.
	NetworkSourceIpv4s []InsightFiltersNetworkSourceIpv4 `pulumi:"networkSourceIpv4s"`
	// The source IPv6 address of network-related information about a finding. See Ip Filter below for more details.
	NetworkSourceIpv6s []InsightFiltersNetworkSourceIpv6 `pulumi:"networkSourceIpv6s"`
	// The source media access control (MAC) address of network-related information about a finding. See String Filter below for more details.
	NetworkSourceMacs []InsightFiltersNetworkSourceMac `pulumi:"networkSourceMacs"`
	// The source port of network-related information about a finding. See Number Filter below for more details.
	NetworkSourcePorts []InsightFiltersNetworkSourcePort `pulumi:"networkSourcePorts"`
	// The text of a note. See String Filter below for more details.
	NoteTexts []InsightFiltersNoteText `pulumi:"noteTexts"`
	// The timestamp of when the note was updated. See Date Filter below for more details.
	NoteUpdatedAts []InsightFiltersNoteUpdatedAt `pulumi:"noteUpdatedAts"`
	// The principal that created a note. See String Filter below for more details.
	NoteUpdatedBies []InsightFiltersNoteUpdatedBy `pulumi:"noteUpdatedBies"`
	// The date/time that the process was launched. See Date Filter below for more details.
	ProcessLaunchedAts []InsightFiltersProcessLaunchedAt `pulumi:"processLaunchedAts"`
	// The name of the process. See String Filter below for more details.
	ProcessNames []InsightFiltersProcessName `pulumi:"processNames"`
	// The parent process ID. See Number Filter below for more details.
	ProcessParentPids []InsightFiltersProcessParentPid `pulumi:"processParentPids"`
	// The path to the process executable. See String Filter below for more details.
	ProcessPaths []InsightFiltersProcessPath `pulumi:"processPaths"`
	// The process ID. See Number Filter below for more details.
	ProcessPids []InsightFiltersProcessPid `pulumi:"processPids"`
	// The date/time that the process was terminated. See Date Filter below for more details.
	ProcessTerminatedAts []InsightFiltersProcessTerminatedAt `pulumi:"processTerminatedAts"`
	// The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub. See String Filter below for more details.
	ProductArns []InsightFiltersProductArn `pulumi:"productArns"`
	// A data type where security-findings providers can include additional solution-specific details that aren't part of the defined `AwsSecurityFinding` format. See Map Filter below for more details.
	ProductFields []InsightFiltersProductField `pulumi:"productFields"`
	// The name of the solution (product) that generates findings. See String Filter below for more details.
	ProductNames []InsightFiltersProductName `pulumi:"productNames"`
	// The recommendation of what to do about the issue described in a finding. See String Filter below for more details.
	RecommendationTexts []InsightFiltersRecommendationText `pulumi:"recommendationTexts"`
	// The updated record state for the finding. See String Filter below for more details.
	RecordStates []InsightFiltersRecordState `pulumi:"recordStates"`
	// The solution-generated identifier for a related finding. See String Filter below for more details.
	RelatedFindingsIds []InsightFiltersRelatedFindingsId `pulumi:"relatedFindingsIds"`
	// The ARN of the solution that generated a related finding. See String Filter below for more details.
	RelatedFindingsProductArns []InsightFiltersRelatedFindingsProductArn `pulumi:"relatedFindingsProductArns"`
	// The IAM profile ARN of the instance. See String Filter below for more details.
	ResourceAwsEc2InstanceIamInstanceProfileArns []InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn `pulumi:"resourceAwsEc2InstanceIamInstanceProfileArns"`
	// The Amazon Machine Image (AMI) ID of the instance. See String Filter below for more details.
	ResourceAwsEc2InstanceImageIds []InsightFiltersResourceAwsEc2InstanceImageId `pulumi:"resourceAwsEc2InstanceImageIds"`
	// The IPv4 addresses associated with the instance. See Ip Filter below for more details.
	ResourceAwsEc2InstanceIpv4Addresses []InsightFiltersResourceAwsEc2InstanceIpv4Address `pulumi:"resourceAwsEc2InstanceIpv4Addresses"`
	// The IPv6 addresses associated with the instance. See Ip Filter below for more details.
	ResourceAwsEc2InstanceIpv6Addresses []InsightFiltersResourceAwsEc2InstanceIpv6Address `pulumi:"resourceAwsEc2InstanceIpv6Addresses"`
	// The key name associated with the instance. See String Filter below for more details.
	ResourceAwsEc2InstanceKeyNames []InsightFiltersResourceAwsEc2InstanceKeyName `pulumi:"resourceAwsEc2InstanceKeyNames"`
	// The date and time the instance was launched. See Date Filter below for more details.
	ResourceAwsEc2InstanceLaunchedAts []InsightFiltersResourceAwsEc2InstanceLaunchedAt `pulumi:"resourceAwsEc2InstanceLaunchedAts"`
	// The identifier of the subnet that the instance was launched in. See String Filter below for more details.
	ResourceAwsEc2InstanceSubnetIds []InsightFiltersResourceAwsEc2InstanceSubnetId `pulumi:"resourceAwsEc2InstanceSubnetIds"`
	// The instance type of the instance. See String Filter below for more details.
	ResourceAwsEc2InstanceTypes []InsightFiltersResourceAwsEc2InstanceType `pulumi:"resourceAwsEc2InstanceTypes"`
	// The identifier of the VPC that the instance was launched in. See String Filter below for more details.
	ResourceAwsEc2InstanceVpcIds []InsightFiltersResourceAwsEc2InstanceVpcId `pulumi:"resourceAwsEc2InstanceVpcIds"`
	// The creation date/time of the IAM access key related to a finding. See Date Filter below for more details.
	ResourceAwsIamAccessKeyCreatedAts []InsightFiltersResourceAwsIamAccessKeyCreatedAt `pulumi:"resourceAwsIamAccessKeyCreatedAts"`
	// The status of the IAM access key related to a finding. See String Filter below for more details.
	ResourceAwsIamAccessKeyStatuses []InsightFiltersResourceAwsIamAccessKeyStatus `pulumi:"resourceAwsIamAccessKeyStatuses"`
	// The user associated with the IAM access key related to a finding. See String Filter below for more details.
	ResourceAwsIamAccessKeyUserNames []InsightFiltersResourceAwsIamAccessKeyUserName `pulumi:"resourceAwsIamAccessKeyUserNames"`
	// The canonical user ID of the owner of the S3 bucket. See String Filter below for more details.
	ResourceAwsS3BucketOwnerIds []InsightFiltersResourceAwsS3BucketOwnerId `pulumi:"resourceAwsS3BucketOwnerIds"`
	// The display name of the owner of the S3 bucket. See String Filter below for more details.
	ResourceAwsS3BucketOwnerNames []InsightFiltersResourceAwsS3BucketOwnerName `pulumi:"resourceAwsS3BucketOwnerNames"`
	// The identifier of the image related to a finding. See String Filter below for more details.
	ResourceContainerImageIds []InsightFiltersResourceContainerImageId `pulumi:"resourceContainerImageIds"`
	// The name of the image related to a finding. See String Filter below for more details.
	ResourceContainerImageNames []InsightFiltersResourceContainerImageName `pulumi:"resourceContainerImageNames"`
	// The date/time that the container was started. See Date Filter below for more details.
	ResourceContainerLaunchedAts []InsightFiltersResourceContainerLaunchedAt `pulumi:"resourceContainerLaunchedAts"`
	// The name of the container related to a finding. See String Filter below for more details.
	ResourceContainerNames []InsightFiltersResourceContainerName `pulumi:"resourceContainerNames"`
	// The details of a resource that doesn't have a specific subfield for the resource type defined. See Map Filter below for more details.
	ResourceDetailsOthers []InsightFiltersResourceDetailsOther `pulumi:"resourceDetailsOthers"`
	// The canonical identifier for the given resource type. See String Filter below for more details.
	ResourceIds []InsightFiltersResourceId `pulumi:"resourceIds"`
	// The canonical AWS partition name that the Region is assigned to. See String Filter below for more details.
	ResourcePartitions []InsightFiltersResourcePartition `pulumi:"resourcePartitions"`
	// The canonical AWS external Region name where this resource is located. See String Filter below for more details.
	ResourceRegions []InsightFiltersResourceRegion `pulumi:"resourceRegions"`
	// A list of AWS tags associated with a resource at the time the finding was processed. See Map Filter below for more details.
	ResourceTags []InsightFiltersResourceTag `pulumi:"resourceTags"`
	// Specifies the type of the resource that details are provided for. See String Filter below for more details.
	ResourceTypes []InsightFiltersResourceType `pulumi:"resourceTypes"`
	// The label of a finding's severity. See String Filter below for more details.
	SeverityLabels []InsightFiltersSeverityLabel `pulumi:"severityLabels"`
	// A URL that links to a page about the current finding in the security-findings provider's solution. See String Filter below for more details.
	SourceUrls []InsightFiltersSourceUrl `pulumi:"sourceUrls"`
	// The category of a threat intelligence indicator. See String Filter below for more details.
	ThreatIntelIndicatorCategories []InsightFiltersThreatIntelIndicatorCategory `pulumi:"threatIntelIndicatorCategories"`
	// The date/time of the last observation of a threat intelligence indicator. See Date Filter below for more details.
	ThreatIntelIndicatorLastObservedAts []InsightFiltersThreatIntelIndicatorLastObservedAt `pulumi:"threatIntelIndicatorLastObservedAts"`
	// The URL for more details from the source of the threat intelligence. See String Filter below for more details.
	ThreatIntelIndicatorSourceUrls []InsightFiltersThreatIntelIndicatorSourceUrl `pulumi:"threatIntelIndicatorSourceUrls"`
	// The source of the threat intelligence. See String Filter below for more details.
	ThreatIntelIndicatorSources []InsightFiltersThreatIntelIndicatorSource `pulumi:"threatIntelIndicatorSources"`
	// The type of a threat intelligence indicator. See String Filter below for more details.
	ThreatIntelIndicatorTypes []InsightFiltersThreatIntelIndicatorType `pulumi:"threatIntelIndicatorTypes"`
	// The value of a threat intelligence indicator. See String Filter below for more details.
	ThreatIntelIndicatorValues []InsightFiltersThreatIntelIndicatorValue `pulumi:"threatIntelIndicatorValues"`
	// A finding's title. See String Filter below for more details.
	Titles []InsightFiltersTitle `pulumi:"titles"`
	// A finding type in the format of `namespace/category/classifier` that classifies a finding. See String Filter below for more details.
	Types []InsightFiltersType `pulumi:"types"`
	// An ISO8601-formatted timestamp that indicates when the security-findings provider last updated the finding record. See Date Filter below for more details.
	UpdatedAts []InsightFiltersUpdatedAt `pulumi:"updatedAts"`
	// A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. See Map Filter below for more details.
	UserDefinedValues []InsightFiltersUserDefinedValue `pulumi:"userDefinedValues"`
	// The veracity of a finding. See String Filter below for more details.
	VerificationStates []InsightFiltersVerificationState `pulumi:"verificationStates"`
	// The status of the investigation into a finding. See Workflow Status Filter below for more details.
	WorkflowStatuses []InsightFiltersWorkflowStatus `pulumi:"workflowStatuses"`
}

type InsightFiltersArgs struct {
	// AWS account ID that a finding is generated in. See String_Filter below for more details.
	AwsAccountIds pulumix.Input[[]*InsightFiltersAwsAccountIdArgs] `pulumi:"awsAccountIds"`
	// The name of the findings provider (company) that owns the solution (product) that generates findings. See String_Filter below for more details.
	CompanyNames pulumix.Input[[]*InsightFiltersCompanyNameArgs] `pulumi:"companyNames"`
	// Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard, such as CIS AWS Foundations. Contains security standard-related finding details. See String Filter below for more details.
	ComplianceStatuses pulumix.Input[[]*InsightFiltersComplianceStatusArgs] `pulumi:"complianceStatuses"`
	// A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
	Confidences pulumix.Input[[]*InsightFiltersConfidenceArgs] `pulumi:"confidences"`
	// An ISO8601-formatted timestamp that indicates when the security-findings provider captured the potential security issue that a finding captured. See Date Filter below for more details.
	CreatedAts pulumix.Input[[]*InsightFiltersCreatedAtArgs] `pulumi:"createdAts"`
	// The level of importance assigned to the resources associated with the finding. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
	Criticalities pulumix.Input[[]*InsightFiltersCriticalityArgs] `pulumi:"criticalities"`
	// A finding's description. See String Filter below for more details.
	Descriptions pulumix.Input[[]*InsightFiltersDescriptionArgs] `pulumi:"descriptions"`
	// The finding provider value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
	FindingProviderFieldsConfidences pulumix.Input[[]*InsightFiltersFindingProviderFieldsConfidenceArgs] `pulumi:"findingProviderFieldsConfidences"`
	// The finding provider value for the level of importance assigned to the resources associated with the findings. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
	FindingProviderFieldsCriticalities pulumix.Input[[]*InsightFiltersFindingProviderFieldsCriticalityArgs] `pulumi:"findingProviderFieldsCriticalities"`
	// The finding identifier of a related finding that is identified by the finding provider. See String Filter below for more details.
	FindingProviderFieldsRelatedFindingsIds pulumix.Input[[]*InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs] `pulumi:"findingProviderFieldsRelatedFindingsIds"`
	// The ARN of the solution that generated a related finding that is identified by the finding provider. See String Filter below for more details.
	FindingProviderFieldsRelatedFindingsProductArns pulumix.Input[[]*InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs] `pulumi:"findingProviderFieldsRelatedFindingsProductArns"`
	// The finding provider value for the severity label. See String Filter below for more details.
	FindingProviderFieldsSeverityLabels pulumix.Input[[]*InsightFiltersFindingProviderFieldsSeverityLabelArgs] `pulumi:"findingProviderFieldsSeverityLabels"`
	// The finding provider's original value for the severity. See String Filter below for more details.
	FindingProviderFieldsSeverityOriginals pulumix.Input[[]*InsightFiltersFindingProviderFieldsSeverityOriginalArgs] `pulumi:"findingProviderFieldsSeverityOriginals"`
	// One or more finding types that the finding provider assigned to the finding. Uses the format of `namespace/category/classifier` that classify a finding. Valid namespace values include: `Software and Configuration Checks`, `TTPs`, `Effects`, `Unusual Behaviors`, and `Sensitive Data Identifications`. See String Filter below for more details.
	FindingProviderFieldsTypes pulumix.Input[[]*InsightFiltersFindingProviderFieldsTypeArgs] `pulumi:"findingProviderFieldsTypes"`
	// An ISO8601-formatted timestamp that indicates when the security-findings provider first observed the potential security issue that a finding captured. See Date Filter below for more details.
	FirstObservedAts pulumix.Input[[]*InsightFiltersFirstObservedAtArgs] `pulumi:"firstObservedAts"`
	// The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. See String Filter below for more details.
	GeneratorIds pulumix.Input[[]*InsightFiltersGeneratorIdArgs] `pulumi:"generatorIds"`
	// The security findings provider-specific identifier for a finding. See String Filter below for more details.
	Ids pulumix.Input[[]*InsightFiltersIdArgs] `pulumi:"ids"`
	// A keyword for a finding. See Keyword Filter below for more details.
	Keywords pulumix.Input[[]*InsightFiltersKeywordArgs] `pulumi:"keywords"`
	// An ISO8601-formatted timestamp that indicates when the security-findings provider most recently observed the potential security issue that a finding captured. See Date Filter below for more details.
	LastObservedAts pulumix.Input[[]*InsightFiltersLastObservedAtArgs] `pulumi:"lastObservedAts"`
	// The name of the malware that was observed. See String Filter below for more details.
	MalwareNames pulumix.Input[[]*InsightFiltersMalwareNameArgs] `pulumi:"malwareNames"`
	// The filesystem path of the malware that was observed. See String Filter below for more details.
	MalwarePaths pulumix.Input[[]*InsightFiltersMalwarePathArgs] `pulumi:"malwarePaths"`
	// The state of the malware that was observed. See String Filter below for more details.
	MalwareStates pulumix.Input[[]*InsightFiltersMalwareStateArgs] `pulumi:"malwareStates"`
	// The type of the malware that was observed. See String Filter below for more details.
	MalwareTypes pulumix.Input[[]*InsightFiltersMalwareTypeArgs] `pulumi:"malwareTypes"`
	// The destination domain of network-related information about a finding. See String Filter below for more details.
	NetworkDestinationDomains pulumix.Input[[]*InsightFiltersNetworkDestinationDomainArgs] `pulumi:"networkDestinationDomains"`
	// The destination IPv4 address of network-related information about a finding. See Ip Filter below for more details.
	NetworkDestinationIpv4s pulumix.Input[[]*InsightFiltersNetworkDestinationIpv4Args] `pulumi:"networkDestinationIpv4s"`
	// The destination IPv6 address of network-related information about a finding. See Ip Filter below for more details.
	NetworkDestinationIpv6s pulumix.Input[[]*InsightFiltersNetworkDestinationIpv6Args] `pulumi:"networkDestinationIpv6s"`
	// The destination port of network-related information about a finding. See Number Filter below for more details.
	NetworkDestinationPorts pulumix.Input[[]*InsightFiltersNetworkDestinationPortArgs] `pulumi:"networkDestinationPorts"`
	// Indicates the direction of network traffic associated with a finding. See String Filter below for more details.
	NetworkDirections pulumix.Input[[]*InsightFiltersNetworkDirectionArgs] `pulumi:"networkDirections"`
	// The protocol of network-related information about a finding. See String Filter below for more details.
	NetworkProtocols pulumix.Input[[]*InsightFiltersNetworkProtocolArgs] `pulumi:"networkProtocols"`
	// The source domain of network-related information about a finding. See String Filter below for more details.
	NetworkSourceDomains pulumix.Input[[]*InsightFiltersNetworkSourceDomainArgs] `pulumi:"networkSourceDomains"`
	// The source IPv4 address of network-related information about a finding. See Ip Filter below for more details.
	NetworkSourceIpv4s pulumix.Input[[]*InsightFiltersNetworkSourceIpv4Args] `pulumi:"networkSourceIpv4s"`
	// The source IPv6 address of network-related information about a finding. See Ip Filter below for more details.
	NetworkSourceIpv6s pulumix.Input[[]*InsightFiltersNetworkSourceIpv6Args] `pulumi:"networkSourceIpv6s"`
	// The source media access control (MAC) address of network-related information about a finding. See String Filter below for more details.
	NetworkSourceMacs pulumix.Input[[]*InsightFiltersNetworkSourceMacArgs] `pulumi:"networkSourceMacs"`
	// The source port of network-related information about a finding. See Number Filter below for more details.
	NetworkSourcePorts pulumix.Input[[]*InsightFiltersNetworkSourcePortArgs] `pulumi:"networkSourcePorts"`
	// The text of a note. See String Filter below for more details.
	NoteTexts pulumix.Input[[]*InsightFiltersNoteTextArgs] `pulumi:"noteTexts"`
	// The timestamp of when the note was updated. See Date Filter below for more details.
	NoteUpdatedAts pulumix.Input[[]*InsightFiltersNoteUpdatedAtArgs] `pulumi:"noteUpdatedAts"`
	// The principal that created a note. See String Filter below for more details.
	NoteUpdatedBies pulumix.Input[[]*InsightFiltersNoteUpdatedByArgs] `pulumi:"noteUpdatedBies"`
	// The date/time that the process was launched. See Date Filter below for more details.
	ProcessLaunchedAts pulumix.Input[[]*InsightFiltersProcessLaunchedAtArgs] `pulumi:"processLaunchedAts"`
	// The name of the process. See String Filter below for more details.
	ProcessNames pulumix.Input[[]*InsightFiltersProcessNameArgs] `pulumi:"processNames"`
	// The parent process ID. See Number Filter below for more details.
	ProcessParentPids pulumix.Input[[]*InsightFiltersProcessParentPidArgs] `pulumi:"processParentPids"`
	// The path to the process executable. See String Filter below for more details.
	ProcessPaths pulumix.Input[[]*InsightFiltersProcessPathArgs] `pulumi:"processPaths"`
	// The process ID. See Number Filter below for more details.
	ProcessPids pulumix.Input[[]*InsightFiltersProcessPidArgs] `pulumi:"processPids"`
	// The date/time that the process was terminated. See Date Filter below for more details.
	ProcessTerminatedAts pulumix.Input[[]*InsightFiltersProcessTerminatedAtArgs] `pulumi:"processTerminatedAts"`
	// The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub. See String Filter below for more details.
	ProductArns pulumix.Input[[]*InsightFiltersProductArnArgs] `pulumi:"productArns"`
	// A data type where security-findings providers can include additional solution-specific details that aren't part of the defined `AwsSecurityFinding` format. See Map Filter below for more details.
	ProductFields pulumix.Input[[]*InsightFiltersProductFieldArgs] `pulumi:"productFields"`
	// The name of the solution (product) that generates findings. See String Filter below for more details.
	ProductNames pulumix.Input[[]*InsightFiltersProductNameArgs] `pulumi:"productNames"`
	// The recommendation of what to do about the issue described in a finding. See String Filter below for more details.
	RecommendationTexts pulumix.Input[[]*InsightFiltersRecommendationTextArgs] `pulumi:"recommendationTexts"`
	// The updated record state for the finding. See String Filter below for more details.
	RecordStates pulumix.Input[[]*InsightFiltersRecordStateArgs] `pulumi:"recordStates"`
	// The solution-generated identifier for a related finding. See String Filter below for more details.
	RelatedFindingsIds pulumix.Input[[]*InsightFiltersRelatedFindingsIdArgs] `pulumi:"relatedFindingsIds"`
	// The ARN of the solution that generated a related finding. See String Filter below for more details.
	RelatedFindingsProductArns pulumix.Input[[]*InsightFiltersRelatedFindingsProductArnArgs] `pulumi:"relatedFindingsProductArns"`
	// The IAM profile ARN of the instance. See String Filter below for more details.
	ResourceAwsEc2InstanceIamInstanceProfileArns pulumix.Input[[]*InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs] `pulumi:"resourceAwsEc2InstanceIamInstanceProfileArns"`
	// The Amazon Machine Image (AMI) ID of the instance. See String Filter below for more details.
	ResourceAwsEc2InstanceImageIds pulumix.Input[[]*InsightFiltersResourceAwsEc2InstanceImageIdArgs] `pulumi:"resourceAwsEc2InstanceImageIds"`
	// The IPv4 addresses associated with the instance. See Ip Filter below for more details.
	ResourceAwsEc2InstanceIpv4Addresses pulumix.Input[[]*InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs] `pulumi:"resourceAwsEc2InstanceIpv4Addresses"`
	// The IPv6 addresses associated with the instance. See Ip Filter below for more details.
	ResourceAwsEc2InstanceIpv6Addresses pulumix.Input[[]*InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs] `pulumi:"resourceAwsEc2InstanceIpv6Addresses"`
	// The key name associated with the instance. See String Filter below for more details.
	ResourceAwsEc2InstanceKeyNames pulumix.Input[[]*InsightFiltersResourceAwsEc2InstanceKeyNameArgs] `pulumi:"resourceAwsEc2InstanceKeyNames"`
	// The date and time the instance was launched. See Date Filter below for more details.
	ResourceAwsEc2InstanceLaunchedAts pulumix.Input[[]*InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs] `pulumi:"resourceAwsEc2InstanceLaunchedAts"`
	// The identifier of the subnet that the instance was launched in. See String Filter below for more details.
	ResourceAwsEc2InstanceSubnetIds pulumix.Input[[]*InsightFiltersResourceAwsEc2InstanceSubnetIdArgs] `pulumi:"resourceAwsEc2InstanceSubnetIds"`
	// The instance type of the instance. See String Filter below for more details.
	ResourceAwsEc2InstanceTypes pulumix.Input[[]*InsightFiltersResourceAwsEc2InstanceTypeArgs] `pulumi:"resourceAwsEc2InstanceTypes"`
	// The identifier of the VPC that the instance was launched in. See String Filter below for more details.
	ResourceAwsEc2InstanceVpcIds pulumix.Input[[]*InsightFiltersResourceAwsEc2InstanceVpcIdArgs] `pulumi:"resourceAwsEc2InstanceVpcIds"`
	// The creation date/time of the IAM access key related to a finding. See Date Filter below for more details.
	ResourceAwsIamAccessKeyCreatedAts pulumix.Input[[]*InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs] `pulumi:"resourceAwsIamAccessKeyCreatedAts"`
	// The status of the IAM access key related to a finding. See String Filter below for more details.
	ResourceAwsIamAccessKeyStatuses pulumix.Input[[]*InsightFiltersResourceAwsIamAccessKeyStatusArgs] `pulumi:"resourceAwsIamAccessKeyStatuses"`
	// The user associated with the IAM access key related to a finding. See String Filter below for more details.
	ResourceAwsIamAccessKeyUserNames pulumix.Input[[]*InsightFiltersResourceAwsIamAccessKeyUserNameArgs] `pulumi:"resourceAwsIamAccessKeyUserNames"`
	// The canonical user ID of the owner of the S3 bucket. See String Filter below for more details.
	ResourceAwsS3BucketOwnerIds pulumix.Input[[]*InsightFiltersResourceAwsS3BucketOwnerIdArgs] `pulumi:"resourceAwsS3BucketOwnerIds"`
	// The display name of the owner of the S3 bucket. See String Filter below for more details.
	ResourceAwsS3BucketOwnerNames pulumix.Input[[]*InsightFiltersResourceAwsS3BucketOwnerNameArgs] `pulumi:"resourceAwsS3BucketOwnerNames"`
	// The identifier of the image related to a finding. See String Filter below for more details.
	ResourceContainerImageIds pulumix.Input[[]*InsightFiltersResourceContainerImageIdArgs] `pulumi:"resourceContainerImageIds"`
	// The name of the image related to a finding. See String Filter below for more details.
	ResourceContainerImageNames pulumix.Input[[]*InsightFiltersResourceContainerImageNameArgs] `pulumi:"resourceContainerImageNames"`
	// The date/time that the container was started. See Date Filter below for more details.
	ResourceContainerLaunchedAts pulumix.Input[[]*InsightFiltersResourceContainerLaunchedAtArgs] `pulumi:"resourceContainerLaunchedAts"`
	// The name of the container related to a finding. See String Filter below for more details.
	ResourceContainerNames pulumix.Input[[]*InsightFiltersResourceContainerNameArgs] `pulumi:"resourceContainerNames"`
	// The details of a resource that doesn't have a specific subfield for the resource type defined. See Map Filter below for more details.
	ResourceDetailsOthers pulumix.Input[[]*InsightFiltersResourceDetailsOtherArgs] `pulumi:"resourceDetailsOthers"`
	// The canonical identifier for the given resource type. See String Filter below for more details.
	ResourceIds pulumix.Input[[]*InsightFiltersResourceIdArgs] `pulumi:"resourceIds"`
	// The canonical AWS partition name that the Region is assigned to. See String Filter below for more details.
	ResourcePartitions pulumix.Input[[]*InsightFiltersResourcePartitionArgs] `pulumi:"resourcePartitions"`
	// The canonical AWS external Region name where this resource is located. See String Filter below for more details.
	ResourceRegions pulumix.Input[[]*InsightFiltersResourceRegionArgs] `pulumi:"resourceRegions"`
	// A list of AWS tags associated with a resource at the time the finding was processed. See Map Filter below for more details.
	ResourceTags pulumix.Input[[]*InsightFiltersResourceTagArgs] `pulumi:"resourceTags"`
	// Specifies the type of the resource that details are provided for. See String Filter below for more details.
	ResourceTypes pulumix.Input[[]*InsightFiltersResourceTypeArgs] `pulumi:"resourceTypes"`
	// The label of a finding's severity. See String Filter below for more details.
	SeverityLabels pulumix.Input[[]*InsightFiltersSeverityLabelArgs] `pulumi:"severityLabels"`
	// A URL that links to a page about the current finding in the security-findings provider's solution. See String Filter below for more details.
	SourceUrls pulumix.Input[[]*InsightFiltersSourceUrlArgs] `pulumi:"sourceUrls"`
	// The category of a threat intelligence indicator. See String Filter below for more details.
	ThreatIntelIndicatorCategories pulumix.Input[[]*InsightFiltersThreatIntelIndicatorCategoryArgs] `pulumi:"threatIntelIndicatorCategories"`
	// The date/time of the last observation of a threat intelligence indicator. See Date Filter below for more details.
	ThreatIntelIndicatorLastObservedAts pulumix.Input[[]*InsightFiltersThreatIntelIndicatorLastObservedAtArgs] `pulumi:"threatIntelIndicatorLastObservedAts"`
	// The URL for more details from the source of the threat intelligence. See String Filter below for more details.
	ThreatIntelIndicatorSourceUrls pulumix.Input[[]*InsightFiltersThreatIntelIndicatorSourceUrlArgs] `pulumi:"threatIntelIndicatorSourceUrls"`
	// The source of the threat intelligence. See String Filter below for more details.
	ThreatIntelIndicatorSources pulumix.Input[[]*InsightFiltersThreatIntelIndicatorSourceArgs] `pulumi:"threatIntelIndicatorSources"`
	// The type of a threat intelligence indicator. See String Filter below for more details.
	ThreatIntelIndicatorTypes pulumix.Input[[]*InsightFiltersThreatIntelIndicatorTypeArgs] `pulumi:"threatIntelIndicatorTypes"`
	// The value of a threat intelligence indicator. See String Filter below for more details.
	ThreatIntelIndicatorValues pulumix.Input[[]*InsightFiltersThreatIntelIndicatorValueArgs] `pulumi:"threatIntelIndicatorValues"`
	// A finding's title. See String Filter below for more details.
	Titles pulumix.Input[[]*InsightFiltersTitleArgs] `pulumi:"titles"`
	// A finding type in the format of `namespace/category/classifier` that classifies a finding. See String Filter below for more details.
	Types pulumix.Input[[]*InsightFiltersTypeArgs] `pulumi:"types"`
	// An ISO8601-formatted timestamp that indicates when the security-findings provider last updated the finding record. See Date Filter below for more details.
	UpdatedAts pulumix.Input[[]*InsightFiltersUpdatedAtArgs] `pulumi:"updatedAts"`
	// A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. See Map Filter below for more details.
	UserDefinedValues pulumix.Input[[]*InsightFiltersUserDefinedValueArgs] `pulumi:"userDefinedValues"`
	// The veracity of a finding. See String Filter below for more details.
	VerificationStates pulumix.Input[[]*InsightFiltersVerificationStateArgs] `pulumi:"verificationStates"`
	// The status of the investigation into a finding. See Workflow Status Filter below for more details.
	WorkflowStatuses pulumix.Input[[]*InsightFiltersWorkflowStatusArgs] `pulumi:"workflowStatuses"`
}

func (InsightFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFilters)(nil)).Elem()
}

func (i InsightFiltersArgs) ToInsightFiltersOutput() InsightFiltersOutput {
	return i.ToInsightFiltersOutputWithContext(context.Background())
}

func (i InsightFiltersArgs) ToInsightFiltersOutputWithContext(ctx context.Context) InsightFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersOutput)
}

func (i *InsightFiltersArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersArgs] {
	return pulumix.Val(i)
}

type InsightFiltersOutput struct{ *pulumi.OutputState }

func (InsightFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFilters)(nil)).Elem()
}

func (o InsightFiltersOutput) ToInsightFiltersOutput() InsightFiltersOutput {
	return o
}

func (o InsightFiltersOutput) ToInsightFiltersOutputWithContext(ctx context.Context) InsightFiltersOutput {
	return o
}

func (o InsightFiltersOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFilters] {
	return pulumix.Output[InsightFilters]{
		OutputState: o.OutputState,
	}
}

// AWS account ID that a finding is generated in. See String_Filter below for more details.
func (o InsightFiltersOutput) AwsAccountIds() pulumix.GArrayOutput[InsightFiltersAwsAccountId, InsightFiltersAwsAccountIdOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersAwsAccountId { return v.AwsAccountIds })
	return pulumix.GArrayOutput[InsightFiltersAwsAccountId, InsightFiltersAwsAccountIdOutput]{OutputState: value.OutputState}
}

// The name of the findings provider (company) that owns the solution (product) that generates findings. See String_Filter below for more details.
func (o InsightFiltersOutput) CompanyNames() pulumix.GArrayOutput[InsightFiltersCompanyName, InsightFiltersCompanyNameOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersCompanyName { return v.CompanyNames })
	return pulumix.GArrayOutput[InsightFiltersCompanyName, InsightFiltersCompanyNameOutput]{OutputState: value.OutputState}
}

// Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard, such as CIS AWS Foundations. Contains security standard-related finding details. See String Filter below for more details.
func (o InsightFiltersOutput) ComplianceStatuses() pulumix.GArrayOutput[InsightFiltersComplianceStatus, InsightFiltersComplianceStatusOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersComplianceStatus { return v.ComplianceStatuses })
	return pulumix.GArrayOutput[InsightFiltersComplianceStatus, InsightFiltersComplianceStatusOutput]{OutputState: value.OutputState}
}

// A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
func (o InsightFiltersOutput) Confidences() pulumix.GArrayOutput[InsightFiltersConfidence, InsightFiltersConfidenceOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersConfidence { return v.Confidences })
	return pulumix.GArrayOutput[InsightFiltersConfidence, InsightFiltersConfidenceOutput]{OutputState: value.OutputState}
}

// An ISO8601-formatted timestamp that indicates when the security-findings provider captured the potential security issue that a finding captured. See Date Filter below for more details.
func (o InsightFiltersOutput) CreatedAts() pulumix.GArrayOutput[InsightFiltersCreatedAt, InsightFiltersCreatedAtOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersCreatedAt { return v.CreatedAts })
	return pulumix.GArrayOutput[InsightFiltersCreatedAt, InsightFiltersCreatedAtOutput]{OutputState: value.OutputState}
}

// The level of importance assigned to the resources associated with the finding. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
func (o InsightFiltersOutput) Criticalities() pulumix.GArrayOutput[InsightFiltersCriticality, InsightFiltersCriticalityOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersCriticality { return v.Criticalities })
	return pulumix.GArrayOutput[InsightFiltersCriticality, InsightFiltersCriticalityOutput]{OutputState: value.OutputState}
}

// A finding's description. See String Filter below for more details.
func (o InsightFiltersOutput) Descriptions() pulumix.GArrayOutput[InsightFiltersDescription, InsightFiltersDescriptionOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersDescription { return v.Descriptions })
	return pulumix.GArrayOutput[InsightFiltersDescription, InsightFiltersDescriptionOutput]{OutputState: value.OutputState}
}

// The finding provider value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
func (o InsightFiltersOutput) FindingProviderFieldsConfidences() pulumix.GArrayOutput[InsightFiltersFindingProviderFieldsConfidence, InsightFiltersFindingProviderFieldsConfidenceOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersFindingProviderFieldsConfidence {
		return v.FindingProviderFieldsConfidences
	})
	return pulumix.GArrayOutput[InsightFiltersFindingProviderFieldsConfidence, InsightFiltersFindingProviderFieldsConfidenceOutput]{OutputState: value.OutputState}
}

// The finding provider value for the level of importance assigned to the resources associated with the findings. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
func (o InsightFiltersOutput) FindingProviderFieldsCriticalities() pulumix.GArrayOutput[InsightFiltersFindingProviderFieldsCriticality, InsightFiltersFindingProviderFieldsCriticalityOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersFindingProviderFieldsCriticality {
		return v.FindingProviderFieldsCriticalities
	})
	return pulumix.GArrayOutput[InsightFiltersFindingProviderFieldsCriticality, InsightFiltersFindingProviderFieldsCriticalityOutput]{OutputState: value.OutputState}
}

// The finding identifier of a related finding that is identified by the finding provider. See String Filter below for more details.
func (o InsightFiltersOutput) FindingProviderFieldsRelatedFindingsIds() pulumix.GArrayOutput[InsightFiltersFindingProviderFieldsRelatedFindingsId, InsightFiltersFindingProviderFieldsRelatedFindingsIdOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersFindingProviderFieldsRelatedFindingsId {
		return v.FindingProviderFieldsRelatedFindingsIds
	})
	return pulumix.GArrayOutput[InsightFiltersFindingProviderFieldsRelatedFindingsId, InsightFiltersFindingProviderFieldsRelatedFindingsIdOutput]{OutputState: value.OutputState}
}

// The ARN of the solution that generated a related finding that is identified by the finding provider. See String Filter below for more details.
func (o InsightFiltersOutput) FindingProviderFieldsRelatedFindingsProductArns() pulumix.GArrayOutput[InsightFiltersFindingProviderFieldsRelatedFindingsProductArn, InsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersFindingProviderFieldsRelatedFindingsProductArn {
		return v.FindingProviderFieldsRelatedFindingsProductArns
	})
	return pulumix.GArrayOutput[InsightFiltersFindingProviderFieldsRelatedFindingsProductArn, InsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput]{OutputState: value.OutputState}
}

// The finding provider value for the severity label. See String Filter below for more details.
func (o InsightFiltersOutput) FindingProviderFieldsSeverityLabels() pulumix.GArrayOutput[InsightFiltersFindingProviderFieldsSeverityLabel, InsightFiltersFindingProviderFieldsSeverityLabelOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersFindingProviderFieldsSeverityLabel {
		return v.FindingProviderFieldsSeverityLabels
	})
	return pulumix.GArrayOutput[InsightFiltersFindingProviderFieldsSeverityLabel, InsightFiltersFindingProviderFieldsSeverityLabelOutput]{OutputState: value.OutputState}
}

// The finding provider's original value for the severity. See String Filter below for more details.
func (o InsightFiltersOutput) FindingProviderFieldsSeverityOriginals() pulumix.GArrayOutput[InsightFiltersFindingProviderFieldsSeverityOriginal, InsightFiltersFindingProviderFieldsSeverityOriginalOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersFindingProviderFieldsSeverityOriginal {
		return v.FindingProviderFieldsSeverityOriginals
	})
	return pulumix.GArrayOutput[InsightFiltersFindingProviderFieldsSeverityOriginal, InsightFiltersFindingProviderFieldsSeverityOriginalOutput]{OutputState: value.OutputState}
}

// One or more finding types that the finding provider assigned to the finding. Uses the format of `namespace/category/classifier` that classify a finding. Valid namespace values include: `Software and Configuration Checks`, `TTPs`, `Effects`, `Unusual Behaviors`, and `Sensitive Data Identifications`. See String Filter below for more details.
func (o InsightFiltersOutput) FindingProviderFieldsTypes() pulumix.GArrayOutput[InsightFiltersFindingProviderFieldsType, InsightFiltersFindingProviderFieldsTypeOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersFindingProviderFieldsType { return v.FindingProviderFieldsTypes })
	return pulumix.GArrayOutput[InsightFiltersFindingProviderFieldsType, InsightFiltersFindingProviderFieldsTypeOutput]{OutputState: value.OutputState}
}

// An ISO8601-formatted timestamp that indicates when the security-findings provider first observed the potential security issue that a finding captured. See Date Filter below for more details.
func (o InsightFiltersOutput) FirstObservedAts() pulumix.GArrayOutput[InsightFiltersFirstObservedAt, InsightFiltersFirstObservedAtOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersFirstObservedAt { return v.FirstObservedAts })
	return pulumix.GArrayOutput[InsightFiltersFirstObservedAt, InsightFiltersFirstObservedAtOutput]{OutputState: value.OutputState}
}

// The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. See String Filter below for more details.
func (o InsightFiltersOutput) GeneratorIds() pulumix.GArrayOutput[InsightFiltersGeneratorId, InsightFiltersGeneratorIdOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersGeneratorId { return v.GeneratorIds })
	return pulumix.GArrayOutput[InsightFiltersGeneratorId, InsightFiltersGeneratorIdOutput]{OutputState: value.OutputState}
}

// The security findings provider-specific identifier for a finding. See String Filter below for more details.
func (o InsightFiltersOutput) Ids() pulumix.GArrayOutput[InsightFiltersId, InsightFiltersIdOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersId { return v.Ids })
	return pulumix.GArrayOutput[InsightFiltersId, InsightFiltersIdOutput]{OutputState: value.OutputState}
}

// A keyword for a finding. See Keyword Filter below for more details.
func (o InsightFiltersOutput) Keywords() pulumix.GArrayOutput[InsightFiltersKeyword, InsightFiltersKeywordOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersKeyword { return v.Keywords })
	return pulumix.GArrayOutput[InsightFiltersKeyword, InsightFiltersKeywordOutput]{OutputState: value.OutputState}
}

// An ISO8601-formatted timestamp that indicates when the security-findings provider most recently observed the potential security issue that a finding captured. See Date Filter below for more details.
func (o InsightFiltersOutput) LastObservedAts() pulumix.GArrayOutput[InsightFiltersLastObservedAt, InsightFiltersLastObservedAtOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersLastObservedAt { return v.LastObservedAts })
	return pulumix.GArrayOutput[InsightFiltersLastObservedAt, InsightFiltersLastObservedAtOutput]{OutputState: value.OutputState}
}

// The name of the malware that was observed. See String Filter below for more details.
func (o InsightFiltersOutput) MalwareNames() pulumix.GArrayOutput[InsightFiltersMalwareName, InsightFiltersMalwareNameOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersMalwareName { return v.MalwareNames })
	return pulumix.GArrayOutput[InsightFiltersMalwareName, InsightFiltersMalwareNameOutput]{OutputState: value.OutputState}
}

// The filesystem path of the malware that was observed. See String Filter below for more details.
func (o InsightFiltersOutput) MalwarePaths() pulumix.GArrayOutput[InsightFiltersMalwarePath, InsightFiltersMalwarePathOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersMalwarePath { return v.MalwarePaths })
	return pulumix.GArrayOutput[InsightFiltersMalwarePath, InsightFiltersMalwarePathOutput]{OutputState: value.OutputState}
}

// The state of the malware that was observed. See String Filter below for more details.
func (o InsightFiltersOutput) MalwareStates() pulumix.GArrayOutput[InsightFiltersMalwareState, InsightFiltersMalwareStateOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersMalwareState { return v.MalwareStates })
	return pulumix.GArrayOutput[InsightFiltersMalwareState, InsightFiltersMalwareStateOutput]{OutputState: value.OutputState}
}

// The type of the malware that was observed. See String Filter below for more details.
func (o InsightFiltersOutput) MalwareTypes() pulumix.GArrayOutput[InsightFiltersMalwareType, InsightFiltersMalwareTypeOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersMalwareType { return v.MalwareTypes })
	return pulumix.GArrayOutput[InsightFiltersMalwareType, InsightFiltersMalwareTypeOutput]{OutputState: value.OutputState}
}

// The destination domain of network-related information about a finding. See String Filter below for more details.
func (o InsightFiltersOutput) NetworkDestinationDomains() pulumix.GArrayOutput[InsightFiltersNetworkDestinationDomain, InsightFiltersNetworkDestinationDomainOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersNetworkDestinationDomain { return v.NetworkDestinationDomains })
	return pulumix.GArrayOutput[InsightFiltersNetworkDestinationDomain, InsightFiltersNetworkDestinationDomainOutput]{OutputState: value.OutputState}
}

// The destination IPv4 address of network-related information about a finding. See Ip Filter below for more details.
func (o InsightFiltersOutput) NetworkDestinationIpv4s() pulumix.GArrayOutput[InsightFiltersNetworkDestinationIpv4, InsightFiltersNetworkDestinationIpv4Output] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersNetworkDestinationIpv4 { return v.NetworkDestinationIpv4s })
	return pulumix.GArrayOutput[InsightFiltersNetworkDestinationIpv4, InsightFiltersNetworkDestinationIpv4Output]{OutputState: value.OutputState}
}

// The destination IPv6 address of network-related information about a finding. See Ip Filter below for more details.
func (o InsightFiltersOutput) NetworkDestinationIpv6s() pulumix.GArrayOutput[InsightFiltersNetworkDestinationIpv6, InsightFiltersNetworkDestinationIpv6Output] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersNetworkDestinationIpv6 { return v.NetworkDestinationIpv6s })
	return pulumix.GArrayOutput[InsightFiltersNetworkDestinationIpv6, InsightFiltersNetworkDestinationIpv6Output]{OutputState: value.OutputState}
}

// The destination port of network-related information about a finding. See Number Filter below for more details.
func (o InsightFiltersOutput) NetworkDestinationPorts() pulumix.GArrayOutput[InsightFiltersNetworkDestinationPort, InsightFiltersNetworkDestinationPortOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersNetworkDestinationPort { return v.NetworkDestinationPorts })
	return pulumix.GArrayOutput[InsightFiltersNetworkDestinationPort, InsightFiltersNetworkDestinationPortOutput]{OutputState: value.OutputState}
}

// Indicates the direction of network traffic associated with a finding. See String Filter below for more details.
func (o InsightFiltersOutput) NetworkDirections() pulumix.GArrayOutput[InsightFiltersNetworkDirection, InsightFiltersNetworkDirectionOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersNetworkDirection { return v.NetworkDirections })
	return pulumix.GArrayOutput[InsightFiltersNetworkDirection, InsightFiltersNetworkDirectionOutput]{OutputState: value.OutputState}
}

// The protocol of network-related information about a finding. See String Filter below for more details.
func (o InsightFiltersOutput) NetworkProtocols() pulumix.GArrayOutput[InsightFiltersNetworkProtocol, InsightFiltersNetworkProtocolOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersNetworkProtocol { return v.NetworkProtocols })
	return pulumix.GArrayOutput[InsightFiltersNetworkProtocol, InsightFiltersNetworkProtocolOutput]{OutputState: value.OutputState}
}

// The source domain of network-related information about a finding. See String Filter below for more details.
func (o InsightFiltersOutput) NetworkSourceDomains() pulumix.GArrayOutput[InsightFiltersNetworkSourceDomain, InsightFiltersNetworkSourceDomainOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersNetworkSourceDomain { return v.NetworkSourceDomains })
	return pulumix.GArrayOutput[InsightFiltersNetworkSourceDomain, InsightFiltersNetworkSourceDomainOutput]{OutputState: value.OutputState}
}

// The source IPv4 address of network-related information about a finding. See Ip Filter below for more details.
func (o InsightFiltersOutput) NetworkSourceIpv4s() pulumix.GArrayOutput[InsightFiltersNetworkSourceIpv4, InsightFiltersNetworkSourceIpv4Output] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersNetworkSourceIpv4 { return v.NetworkSourceIpv4s })
	return pulumix.GArrayOutput[InsightFiltersNetworkSourceIpv4, InsightFiltersNetworkSourceIpv4Output]{OutputState: value.OutputState}
}

// The source IPv6 address of network-related information about a finding. See Ip Filter below for more details.
func (o InsightFiltersOutput) NetworkSourceIpv6s() pulumix.GArrayOutput[InsightFiltersNetworkSourceIpv6, InsightFiltersNetworkSourceIpv6Output] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersNetworkSourceIpv6 { return v.NetworkSourceIpv6s })
	return pulumix.GArrayOutput[InsightFiltersNetworkSourceIpv6, InsightFiltersNetworkSourceIpv6Output]{OutputState: value.OutputState}
}

// The source media access control (MAC) address of network-related information about a finding. See String Filter below for more details.
func (o InsightFiltersOutput) NetworkSourceMacs() pulumix.GArrayOutput[InsightFiltersNetworkSourceMac, InsightFiltersNetworkSourceMacOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersNetworkSourceMac { return v.NetworkSourceMacs })
	return pulumix.GArrayOutput[InsightFiltersNetworkSourceMac, InsightFiltersNetworkSourceMacOutput]{OutputState: value.OutputState}
}

// The source port of network-related information about a finding. See Number Filter below for more details.
func (o InsightFiltersOutput) NetworkSourcePorts() pulumix.GArrayOutput[InsightFiltersNetworkSourcePort, InsightFiltersNetworkSourcePortOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersNetworkSourcePort { return v.NetworkSourcePorts })
	return pulumix.GArrayOutput[InsightFiltersNetworkSourcePort, InsightFiltersNetworkSourcePortOutput]{OutputState: value.OutputState}
}

// The text of a note. See String Filter below for more details.
func (o InsightFiltersOutput) NoteTexts() pulumix.GArrayOutput[InsightFiltersNoteText, InsightFiltersNoteTextOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersNoteText { return v.NoteTexts })
	return pulumix.GArrayOutput[InsightFiltersNoteText, InsightFiltersNoteTextOutput]{OutputState: value.OutputState}
}

// The timestamp of when the note was updated. See Date Filter below for more details.
func (o InsightFiltersOutput) NoteUpdatedAts() pulumix.GArrayOutput[InsightFiltersNoteUpdatedAt, InsightFiltersNoteUpdatedAtOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersNoteUpdatedAt { return v.NoteUpdatedAts })
	return pulumix.GArrayOutput[InsightFiltersNoteUpdatedAt, InsightFiltersNoteUpdatedAtOutput]{OutputState: value.OutputState}
}

// The principal that created a note. See String Filter below for more details.
func (o InsightFiltersOutput) NoteUpdatedBies() pulumix.GArrayOutput[InsightFiltersNoteUpdatedBy, InsightFiltersNoteUpdatedByOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersNoteUpdatedBy { return v.NoteUpdatedBies })
	return pulumix.GArrayOutput[InsightFiltersNoteUpdatedBy, InsightFiltersNoteUpdatedByOutput]{OutputState: value.OutputState}
}

// The date/time that the process was launched. See Date Filter below for more details.
func (o InsightFiltersOutput) ProcessLaunchedAts() pulumix.GArrayOutput[InsightFiltersProcessLaunchedAt, InsightFiltersProcessLaunchedAtOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersProcessLaunchedAt { return v.ProcessLaunchedAts })
	return pulumix.GArrayOutput[InsightFiltersProcessLaunchedAt, InsightFiltersProcessLaunchedAtOutput]{OutputState: value.OutputState}
}

// The name of the process. See String Filter below for more details.
func (o InsightFiltersOutput) ProcessNames() pulumix.GArrayOutput[InsightFiltersProcessName, InsightFiltersProcessNameOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersProcessName { return v.ProcessNames })
	return pulumix.GArrayOutput[InsightFiltersProcessName, InsightFiltersProcessNameOutput]{OutputState: value.OutputState}
}

// The parent process ID. See Number Filter below for more details.
func (o InsightFiltersOutput) ProcessParentPids() pulumix.GArrayOutput[InsightFiltersProcessParentPid, InsightFiltersProcessParentPidOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersProcessParentPid { return v.ProcessParentPids })
	return pulumix.GArrayOutput[InsightFiltersProcessParentPid, InsightFiltersProcessParentPidOutput]{OutputState: value.OutputState}
}

// The path to the process executable. See String Filter below for more details.
func (o InsightFiltersOutput) ProcessPaths() pulumix.GArrayOutput[InsightFiltersProcessPath, InsightFiltersProcessPathOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersProcessPath { return v.ProcessPaths })
	return pulumix.GArrayOutput[InsightFiltersProcessPath, InsightFiltersProcessPathOutput]{OutputState: value.OutputState}
}

// The process ID. See Number Filter below for more details.
func (o InsightFiltersOutput) ProcessPids() pulumix.GArrayOutput[InsightFiltersProcessPid, InsightFiltersProcessPidOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersProcessPid { return v.ProcessPids })
	return pulumix.GArrayOutput[InsightFiltersProcessPid, InsightFiltersProcessPidOutput]{OutputState: value.OutputState}
}

// The date/time that the process was terminated. See Date Filter below for more details.
func (o InsightFiltersOutput) ProcessTerminatedAts() pulumix.GArrayOutput[InsightFiltersProcessTerminatedAt, InsightFiltersProcessTerminatedAtOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersProcessTerminatedAt { return v.ProcessTerminatedAts })
	return pulumix.GArrayOutput[InsightFiltersProcessTerminatedAt, InsightFiltersProcessTerminatedAtOutput]{OutputState: value.OutputState}
}

// The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub. See String Filter below for more details.
func (o InsightFiltersOutput) ProductArns() pulumix.GArrayOutput[InsightFiltersProductArn, InsightFiltersProductArnOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersProductArn { return v.ProductArns })
	return pulumix.GArrayOutput[InsightFiltersProductArn, InsightFiltersProductArnOutput]{OutputState: value.OutputState}
}

// A data type where security-findings providers can include additional solution-specific details that aren't part of the defined `AwsSecurityFinding` format. See Map Filter below for more details.
func (o InsightFiltersOutput) ProductFields() pulumix.GArrayOutput[InsightFiltersProductField, InsightFiltersProductFieldOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersProductField { return v.ProductFields })
	return pulumix.GArrayOutput[InsightFiltersProductField, InsightFiltersProductFieldOutput]{OutputState: value.OutputState}
}

// The name of the solution (product) that generates findings. See String Filter below for more details.
func (o InsightFiltersOutput) ProductNames() pulumix.GArrayOutput[InsightFiltersProductName, InsightFiltersProductNameOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersProductName { return v.ProductNames })
	return pulumix.GArrayOutput[InsightFiltersProductName, InsightFiltersProductNameOutput]{OutputState: value.OutputState}
}

// The recommendation of what to do about the issue described in a finding. See String Filter below for more details.
func (o InsightFiltersOutput) RecommendationTexts() pulumix.GArrayOutput[InsightFiltersRecommendationText, InsightFiltersRecommendationTextOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersRecommendationText { return v.RecommendationTexts })
	return pulumix.GArrayOutput[InsightFiltersRecommendationText, InsightFiltersRecommendationTextOutput]{OutputState: value.OutputState}
}

// The updated record state for the finding. See String Filter below for more details.
func (o InsightFiltersOutput) RecordStates() pulumix.GArrayOutput[InsightFiltersRecordState, InsightFiltersRecordStateOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersRecordState { return v.RecordStates })
	return pulumix.GArrayOutput[InsightFiltersRecordState, InsightFiltersRecordStateOutput]{OutputState: value.OutputState}
}

// The solution-generated identifier for a related finding. See String Filter below for more details.
func (o InsightFiltersOutput) RelatedFindingsIds() pulumix.GArrayOutput[InsightFiltersRelatedFindingsId, InsightFiltersRelatedFindingsIdOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersRelatedFindingsId { return v.RelatedFindingsIds })
	return pulumix.GArrayOutput[InsightFiltersRelatedFindingsId, InsightFiltersRelatedFindingsIdOutput]{OutputState: value.OutputState}
}

// The ARN of the solution that generated a related finding. See String Filter below for more details.
func (o InsightFiltersOutput) RelatedFindingsProductArns() pulumix.GArrayOutput[InsightFiltersRelatedFindingsProductArn, InsightFiltersRelatedFindingsProductArnOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersRelatedFindingsProductArn { return v.RelatedFindingsProductArns })
	return pulumix.GArrayOutput[InsightFiltersRelatedFindingsProductArn, InsightFiltersRelatedFindingsProductArnOutput]{OutputState: value.OutputState}
}

// The IAM profile ARN of the instance. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceAwsEc2InstanceIamInstanceProfileArns() pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn, InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn {
		return v.ResourceAwsEc2InstanceIamInstanceProfileArns
	})
	return pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn, InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput]{OutputState: value.OutputState}
}

// The Amazon Machine Image (AMI) ID of the instance. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceAwsEc2InstanceImageIds() pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceImageId, InsightFiltersResourceAwsEc2InstanceImageIdOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceAwsEc2InstanceImageId {
		return v.ResourceAwsEc2InstanceImageIds
	})
	return pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceImageId, InsightFiltersResourceAwsEc2InstanceImageIdOutput]{OutputState: value.OutputState}
}

// The IPv4 addresses associated with the instance. See Ip Filter below for more details.
func (o InsightFiltersOutput) ResourceAwsEc2InstanceIpv4Addresses() pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceIpv4Address, InsightFiltersResourceAwsEc2InstanceIpv4AddressOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceAwsEc2InstanceIpv4Address {
		return v.ResourceAwsEc2InstanceIpv4Addresses
	})
	return pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceIpv4Address, InsightFiltersResourceAwsEc2InstanceIpv4AddressOutput]{OutputState: value.OutputState}
}

// The IPv6 addresses associated with the instance. See Ip Filter below for more details.
func (o InsightFiltersOutput) ResourceAwsEc2InstanceIpv6Addresses() pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceIpv6Address, InsightFiltersResourceAwsEc2InstanceIpv6AddressOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceAwsEc2InstanceIpv6Address {
		return v.ResourceAwsEc2InstanceIpv6Addresses
	})
	return pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceIpv6Address, InsightFiltersResourceAwsEc2InstanceIpv6AddressOutput]{OutputState: value.OutputState}
}

// The key name associated with the instance. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceAwsEc2InstanceKeyNames() pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceKeyName, InsightFiltersResourceAwsEc2InstanceKeyNameOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceAwsEc2InstanceKeyName {
		return v.ResourceAwsEc2InstanceKeyNames
	})
	return pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceKeyName, InsightFiltersResourceAwsEc2InstanceKeyNameOutput]{OutputState: value.OutputState}
}

// The date and time the instance was launched. See Date Filter below for more details.
func (o InsightFiltersOutput) ResourceAwsEc2InstanceLaunchedAts() pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceLaunchedAt, InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceAwsEc2InstanceLaunchedAt {
		return v.ResourceAwsEc2InstanceLaunchedAts
	})
	return pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceLaunchedAt, InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput]{OutputState: value.OutputState}
}

// The identifier of the subnet that the instance was launched in. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceAwsEc2InstanceSubnetIds() pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceSubnetId, InsightFiltersResourceAwsEc2InstanceSubnetIdOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceAwsEc2InstanceSubnetId {
		return v.ResourceAwsEc2InstanceSubnetIds
	})
	return pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceSubnetId, InsightFiltersResourceAwsEc2InstanceSubnetIdOutput]{OutputState: value.OutputState}
}

// The instance type of the instance. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceAwsEc2InstanceTypes() pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceType, InsightFiltersResourceAwsEc2InstanceTypeOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceAwsEc2InstanceType {
		return v.ResourceAwsEc2InstanceTypes
	})
	return pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceType, InsightFiltersResourceAwsEc2InstanceTypeOutput]{OutputState: value.OutputState}
}

// The identifier of the VPC that the instance was launched in. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceAwsEc2InstanceVpcIds() pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceVpcId, InsightFiltersResourceAwsEc2InstanceVpcIdOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceAwsEc2InstanceVpcId {
		return v.ResourceAwsEc2InstanceVpcIds
	})
	return pulumix.GArrayOutput[InsightFiltersResourceAwsEc2InstanceVpcId, InsightFiltersResourceAwsEc2InstanceVpcIdOutput]{OutputState: value.OutputState}
}

// The creation date/time of the IAM access key related to a finding. See Date Filter below for more details.
func (o InsightFiltersOutput) ResourceAwsIamAccessKeyCreatedAts() pulumix.GArrayOutput[InsightFiltersResourceAwsIamAccessKeyCreatedAt, InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceAwsIamAccessKeyCreatedAt {
		return v.ResourceAwsIamAccessKeyCreatedAts
	})
	return pulumix.GArrayOutput[InsightFiltersResourceAwsIamAccessKeyCreatedAt, InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput]{OutputState: value.OutputState}
}

// The status of the IAM access key related to a finding. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceAwsIamAccessKeyStatuses() pulumix.GArrayOutput[InsightFiltersResourceAwsIamAccessKeyStatus, InsightFiltersResourceAwsIamAccessKeyStatusOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceAwsIamAccessKeyStatus {
		return v.ResourceAwsIamAccessKeyStatuses
	})
	return pulumix.GArrayOutput[InsightFiltersResourceAwsIamAccessKeyStatus, InsightFiltersResourceAwsIamAccessKeyStatusOutput]{OutputState: value.OutputState}
}

// The user associated with the IAM access key related to a finding. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceAwsIamAccessKeyUserNames() pulumix.GArrayOutput[InsightFiltersResourceAwsIamAccessKeyUserName, InsightFiltersResourceAwsIamAccessKeyUserNameOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceAwsIamAccessKeyUserName {
		return v.ResourceAwsIamAccessKeyUserNames
	})
	return pulumix.GArrayOutput[InsightFiltersResourceAwsIamAccessKeyUserName, InsightFiltersResourceAwsIamAccessKeyUserNameOutput]{OutputState: value.OutputState}
}

// The canonical user ID of the owner of the S3 bucket. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceAwsS3BucketOwnerIds() pulumix.GArrayOutput[InsightFiltersResourceAwsS3BucketOwnerId, InsightFiltersResourceAwsS3BucketOwnerIdOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceAwsS3BucketOwnerId {
		return v.ResourceAwsS3BucketOwnerIds
	})
	return pulumix.GArrayOutput[InsightFiltersResourceAwsS3BucketOwnerId, InsightFiltersResourceAwsS3BucketOwnerIdOutput]{OutputState: value.OutputState}
}

// The display name of the owner of the S3 bucket. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceAwsS3BucketOwnerNames() pulumix.GArrayOutput[InsightFiltersResourceAwsS3BucketOwnerName, InsightFiltersResourceAwsS3BucketOwnerNameOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceAwsS3BucketOwnerName {
		return v.ResourceAwsS3BucketOwnerNames
	})
	return pulumix.GArrayOutput[InsightFiltersResourceAwsS3BucketOwnerName, InsightFiltersResourceAwsS3BucketOwnerNameOutput]{OutputState: value.OutputState}
}

// The identifier of the image related to a finding. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceContainerImageIds() pulumix.GArrayOutput[InsightFiltersResourceContainerImageId, InsightFiltersResourceContainerImageIdOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceContainerImageId { return v.ResourceContainerImageIds })
	return pulumix.GArrayOutput[InsightFiltersResourceContainerImageId, InsightFiltersResourceContainerImageIdOutput]{OutputState: value.OutputState}
}

// The name of the image related to a finding. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceContainerImageNames() pulumix.GArrayOutput[InsightFiltersResourceContainerImageName, InsightFiltersResourceContainerImageNameOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceContainerImageName {
		return v.ResourceContainerImageNames
	})
	return pulumix.GArrayOutput[InsightFiltersResourceContainerImageName, InsightFiltersResourceContainerImageNameOutput]{OutputState: value.OutputState}
}

// The date/time that the container was started. See Date Filter below for more details.
func (o InsightFiltersOutput) ResourceContainerLaunchedAts() pulumix.GArrayOutput[InsightFiltersResourceContainerLaunchedAt, InsightFiltersResourceContainerLaunchedAtOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceContainerLaunchedAt {
		return v.ResourceContainerLaunchedAts
	})
	return pulumix.GArrayOutput[InsightFiltersResourceContainerLaunchedAt, InsightFiltersResourceContainerLaunchedAtOutput]{OutputState: value.OutputState}
}

// The name of the container related to a finding. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceContainerNames() pulumix.GArrayOutput[InsightFiltersResourceContainerName, InsightFiltersResourceContainerNameOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceContainerName { return v.ResourceContainerNames })
	return pulumix.GArrayOutput[InsightFiltersResourceContainerName, InsightFiltersResourceContainerNameOutput]{OutputState: value.OutputState}
}

// The details of a resource that doesn't have a specific subfield for the resource type defined. See Map Filter below for more details.
func (o InsightFiltersOutput) ResourceDetailsOthers() pulumix.GArrayOutput[InsightFiltersResourceDetailsOther, InsightFiltersResourceDetailsOtherOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceDetailsOther { return v.ResourceDetailsOthers })
	return pulumix.GArrayOutput[InsightFiltersResourceDetailsOther, InsightFiltersResourceDetailsOtherOutput]{OutputState: value.OutputState}
}

// The canonical identifier for the given resource type. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceIds() pulumix.GArrayOutput[InsightFiltersResourceId, InsightFiltersResourceIdOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceId { return v.ResourceIds })
	return pulumix.GArrayOutput[InsightFiltersResourceId, InsightFiltersResourceIdOutput]{OutputState: value.OutputState}
}

// The canonical AWS partition name that the Region is assigned to. See String Filter below for more details.
func (o InsightFiltersOutput) ResourcePartitions() pulumix.GArrayOutput[InsightFiltersResourcePartition, InsightFiltersResourcePartitionOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourcePartition { return v.ResourcePartitions })
	return pulumix.GArrayOutput[InsightFiltersResourcePartition, InsightFiltersResourcePartitionOutput]{OutputState: value.OutputState}
}

// The canonical AWS external Region name where this resource is located. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceRegions() pulumix.GArrayOutput[InsightFiltersResourceRegion, InsightFiltersResourceRegionOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceRegion { return v.ResourceRegions })
	return pulumix.GArrayOutput[InsightFiltersResourceRegion, InsightFiltersResourceRegionOutput]{OutputState: value.OutputState}
}

// A list of AWS tags associated with a resource at the time the finding was processed. See Map Filter below for more details.
func (o InsightFiltersOutput) ResourceTags() pulumix.GArrayOutput[InsightFiltersResourceTag, InsightFiltersResourceTagOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceTag { return v.ResourceTags })
	return pulumix.GArrayOutput[InsightFiltersResourceTag, InsightFiltersResourceTagOutput]{OutputState: value.OutputState}
}

// Specifies the type of the resource that details are provided for. See String Filter below for more details.
func (o InsightFiltersOutput) ResourceTypes() pulumix.GArrayOutput[InsightFiltersResourceType, InsightFiltersResourceTypeOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersResourceType { return v.ResourceTypes })
	return pulumix.GArrayOutput[InsightFiltersResourceType, InsightFiltersResourceTypeOutput]{OutputState: value.OutputState}
}

// The label of a finding's severity. See String Filter below for more details.
func (o InsightFiltersOutput) SeverityLabels() pulumix.GArrayOutput[InsightFiltersSeverityLabel, InsightFiltersSeverityLabelOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersSeverityLabel { return v.SeverityLabels })
	return pulumix.GArrayOutput[InsightFiltersSeverityLabel, InsightFiltersSeverityLabelOutput]{OutputState: value.OutputState}
}

// A URL that links to a page about the current finding in the security-findings provider's solution. See String Filter below for more details.
func (o InsightFiltersOutput) SourceUrls() pulumix.GArrayOutput[InsightFiltersSourceUrl, InsightFiltersSourceUrlOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersSourceUrl { return v.SourceUrls })
	return pulumix.GArrayOutput[InsightFiltersSourceUrl, InsightFiltersSourceUrlOutput]{OutputState: value.OutputState}
}

// The category of a threat intelligence indicator. See String Filter below for more details.
func (o InsightFiltersOutput) ThreatIntelIndicatorCategories() pulumix.GArrayOutput[InsightFiltersThreatIntelIndicatorCategory, InsightFiltersThreatIntelIndicatorCategoryOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersThreatIntelIndicatorCategory {
		return v.ThreatIntelIndicatorCategories
	})
	return pulumix.GArrayOutput[InsightFiltersThreatIntelIndicatorCategory, InsightFiltersThreatIntelIndicatorCategoryOutput]{OutputState: value.OutputState}
}

// The date/time of the last observation of a threat intelligence indicator. See Date Filter below for more details.
func (o InsightFiltersOutput) ThreatIntelIndicatorLastObservedAts() pulumix.GArrayOutput[InsightFiltersThreatIntelIndicatorLastObservedAt, InsightFiltersThreatIntelIndicatorLastObservedAtOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersThreatIntelIndicatorLastObservedAt {
		return v.ThreatIntelIndicatorLastObservedAts
	})
	return pulumix.GArrayOutput[InsightFiltersThreatIntelIndicatorLastObservedAt, InsightFiltersThreatIntelIndicatorLastObservedAtOutput]{OutputState: value.OutputState}
}

// The URL for more details from the source of the threat intelligence. See String Filter below for more details.
func (o InsightFiltersOutput) ThreatIntelIndicatorSourceUrls() pulumix.GArrayOutput[InsightFiltersThreatIntelIndicatorSourceUrl, InsightFiltersThreatIntelIndicatorSourceUrlOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersThreatIntelIndicatorSourceUrl {
		return v.ThreatIntelIndicatorSourceUrls
	})
	return pulumix.GArrayOutput[InsightFiltersThreatIntelIndicatorSourceUrl, InsightFiltersThreatIntelIndicatorSourceUrlOutput]{OutputState: value.OutputState}
}

// The source of the threat intelligence. See String Filter below for more details.
func (o InsightFiltersOutput) ThreatIntelIndicatorSources() pulumix.GArrayOutput[InsightFiltersThreatIntelIndicatorSource, InsightFiltersThreatIntelIndicatorSourceOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersThreatIntelIndicatorSource {
		return v.ThreatIntelIndicatorSources
	})
	return pulumix.GArrayOutput[InsightFiltersThreatIntelIndicatorSource, InsightFiltersThreatIntelIndicatorSourceOutput]{OutputState: value.OutputState}
}

// The type of a threat intelligence indicator. See String Filter below for more details.
func (o InsightFiltersOutput) ThreatIntelIndicatorTypes() pulumix.GArrayOutput[InsightFiltersThreatIntelIndicatorType, InsightFiltersThreatIntelIndicatorTypeOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersThreatIntelIndicatorType { return v.ThreatIntelIndicatorTypes })
	return pulumix.GArrayOutput[InsightFiltersThreatIntelIndicatorType, InsightFiltersThreatIntelIndicatorTypeOutput]{OutputState: value.OutputState}
}

// The value of a threat intelligence indicator. See String Filter below for more details.
func (o InsightFiltersOutput) ThreatIntelIndicatorValues() pulumix.GArrayOutput[InsightFiltersThreatIntelIndicatorValue, InsightFiltersThreatIntelIndicatorValueOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersThreatIntelIndicatorValue { return v.ThreatIntelIndicatorValues })
	return pulumix.GArrayOutput[InsightFiltersThreatIntelIndicatorValue, InsightFiltersThreatIntelIndicatorValueOutput]{OutputState: value.OutputState}
}

// A finding's title. See String Filter below for more details.
func (o InsightFiltersOutput) Titles() pulumix.GArrayOutput[InsightFiltersTitle, InsightFiltersTitleOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersTitle { return v.Titles })
	return pulumix.GArrayOutput[InsightFiltersTitle, InsightFiltersTitleOutput]{OutputState: value.OutputState}
}

// A finding type in the format of `namespace/category/classifier` that classifies a finding. See String Filter below for more details.
func (o InsightFiltersOutput) Types() pulumix.GArrayOutput[InsightFiltersType, InsightFiltersTypeOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersType { return v.Types })
	return pulumix.GArrayOutput[InsightFiltersType, InsightFiltersTypeOutput]{OutputState: value.OutputState}
}

// An ISO8601-formatted timestamp that indicates when the security-findings provider last updated the finding record. See Date Filter below for more details.
func (o InsightFiltersOutput) UpdatedAts() pulumix.GArrayOutput[InsightFiltersUpdatedAt, InsightFiltersUpdatedAtOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersUpdatedAt { return v.UpdatedAts })
	return pulumix.GArrayOutput[InsightFiltersUpdatedAt, InsightFiltersUpdatedAtOutput]{OutputState: value.OutputState}
}

// A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. See Map Filter below for more details.
func (o InsightFiltersOutput) UserDefinedValues() pulumix.GArrayOutput[InsightFiltersUserDefinedValue, InsightFiltersUserDefinedValueOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersUserDefinedValue { return v.UserDefinedValues })
	return pulumix.GArrayOutput[InsightFiltersUserDefinedValue, InsightFiltersUserDefinedValueOutput]{OutputState: value.OutputState}
}

// The veracity of a finding. See String Filter below for more details.
func (o InsightFiltersOutput) VerificationStates() pulumix.GArrayOutput[InsightFiltersVerificationState, InsightFiltersVerificationStateOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersVerificationState { return v.VerificationStates })
	return pulumix.GArrayOutput[InsightFiltersVerificationState, InsightFiltersVerificationStateOutput]{OutputState: value.OutputState}
}

// The status of the investigation into a finding. See Workflow Status Filter below for more details.
func (o InsightFiltersOutput) WorkflowStatuses() pulumix.GArrayOutput[InsightFiltersWorkflowStatus, InsightFiltersWorkflowStatusOutput] {
	value := pulumix.Apply[InsightFilters](o, func(v InsightFilters) []InsightFiltersWorkflowStatus { return v.WorkflowStatuses })
	return pulumix.GArrayOutput[InsightFiltersWorkflowStatus, InsightFiltersWorkflowStatusOutput]{OutputState: value.OutputState}
}

type InsightFiltersAwsAccountId struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersAwsAccountIdArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersAwsAccountIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersAwsAccountId)(nil)).Elem()
}

func (i InsightFiltersAwsAccountIdArgs) ToInsightFiltersAwsAccountIdOutput() InsightFiltersAwsAccountIdOutput {
	return i.ToInsightFiltersAwsAccountIdOutputWithContext(context.Background())
}

func (i InsightFiltersAwsAccountIdArgs) ToInsightFiltersAwsAccountIdOutputWithContext(ctx context.Context) InsightFiltersAwsAccountIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersAwsAccountIdOutput)
}

func (i *InsightFiltersAwsAccountIdArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersAwsAccountIdArgs] {
	return pulumix.Val(i)
}

type InsightFiltersAwsAccountIdOutput struct{ *pulumi.OutputState }

func (InsightFiltersAwsAccountIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersAwsAccountId)(nil)).Elem()
}

func (o InsightFiltersAwsAccountIdOutput) ToInsightFiltersAwsAccountIdOutput() InsightFiltersAwsAccountIdOutput {
	return o
}

func (o InsightFiltersAwsAccountIdOutput) ToInsightFiltersAwsAccountIdOutputWithContext(ctx context.Context) InsightFiltersAwsAccountIdOutput {
	return o
}

func (o InsightFiltersAwsAccountIdOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersAwsAccountId] {
	return pulumix.Output[InsightFiltersAwsAccountId]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersAwsAccountIdOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersAwsAccountId](o, func(v InsightFiltersAwsAccountId) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersAwsAccountIdOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersAwsAccountId](o, func(v InsightFiltersAwsAccountId) string { return v.Value })
}

type InsightFiltersCompanyName struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersCompanyNameArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersCompanyNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersCompanyName)(nil)).Elem()
}

func (i InsightFiltersCompanyNameArgs) ToInsightFiltersCompanyNameOutput() InsightFiltersCompanyNameOutput {
	return i.ToInsightFiltersCompanyNameOutputWithContext(context.Background())
}

func (i InsightFiltersCompanyNameArgs) ToInsightFiltersCompanyNameOutputWithContext(ctx context.Context) InsightFiltersCompanyNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersCompanyNameOutput)
}

func (i *InsightFiltersCompanyNameArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersCompanyNameArgs] {
	return pulumix.Val(i)
}

type InsightFiltersCompanyNameOutput struct{ *pulumi.OutputState }

func (InsightFiltersCompanyNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersCompanyName)(nil)).Elem()
}

func (o InsightFiltersCompanyNameOutput) ToInsightFiltersCompanyNameOutput() InsightFiltersCompanyNameOutput {
	return o
}

func (o InsightFiltersCompanyNameOutput) ToInsightFiltersCompanyNameOutputWithContext(ctx context.Context) InsightFiltersCompanyNameOutput {
	return o
}

func (o InsightFiltersCompanyNameOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersCompanyName] {
	return pulumix.Output[InsightFiltersCompanyName]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersCompanyNameOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersCompanyName](o, func(v InsightFiltersCompanyName) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersCompanyNameOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersCompanyName](o, func(v InsightFiltersCompanyName) string { return v.Value })
}

type InsightFiltersComplianceStatus struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersComplianceStatusArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersComplianceStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersComplianceStatus)(nil)).Elem()
}

func (i InsightFiltersComplianceStatusArgs) ToInsightFiltersComplianceStatusOutput() InsightFiltersComplianceStatusOutput {
	return i.ToInsightFiltersComplianceStatusOutputWithContext(context.Background())
}

func (i InsightFiltersComplianceStatusArgs) ToInsightFiltersComplianceStatusOutputWithContext(ctx context.Context) InsightFiltersComplianceStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersComplianceStatusOutput)
}

func (i *InsightFiltersComplianceStatusArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersComplianceStatusArgs] {
	return pulumix.Val(i)
}

type InsightFiltersComplianceStatusOutput struct{ *pulumi.OutputState }

func (InsightFiltersComplianceStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersComplianceStatus)(nil)).Elem()
}

func (o InsightFiltersComplianceStatusOutput) ToInsightFiltersComplianceStatusOutput() InsightFiltersComplianceStatusOutput {
	return o
}

func (o InsightFiltersComplianceStatusOutput) ToInsightFiltersComplianceStatusOutputWithContext(ctx context.Context) InsightFiltersComplianceStatusOutput {
	return o
}

func (o InsightFiltersComplianceStatusOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersComplianceStatus] {
	return pulumix.Output[InsightFiltersComplianceStatus]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersComplianceStatusOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersComplianceStatus](o, func(v InsightFiltersComplianceStatus) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersComplianceStatusOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersComplianceStatus](o, func(v InsightFiltersComplianceStatus) string { return v.Value })
}

type InsightFiltersConfidence struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq *string `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte *string `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte *string `pulumi:"lte"`
}

type InsightFiltersConfidenceArgs struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq pulumix.Input[*string] `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte pulumix.Input[*string] `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte pulumix.Input[*string] `pulumi:"lte"`
}

func (InsightFiltersConfidenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersConfidence)(nil)).Elem()
}

func (i InsightFiltersConfidenceArgs) ToInsightFiltersConfidenceOutput() InsightFiltersConfidenceOutput {
	return i.ToInsightFiltersConfidenceOutputWithContext(context.Background())
}

func (i InsightFiltersConfidenceArgs) ToInsightFiltersConfidenceOutputWithContext(ctx context.Context) InsightFiltersConfidenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersConfidenceOutput)
}

func (i *InsightFiltersConfidenceArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersConfidenceArgs] {
	return pulumix.Val(i)
}

type InsightFiltersConfidenceOutput struct{ *pulumi.OutputState }

func (InsightFiltersConfidenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersConfidence)(nil)).Elem()
}

func (o InsightFiltersConfidenceOutput) ToInsightFiltersConfidenceOutput() InsightFiltersConfidenceOutput {
	return o
}

func (o InsightFiltersConfidenceOutput) ToInsightFiltersConfidenceOutputWithContext(ctx context.Context) InsightFiltersConfidenceOutput {
	return o
}

func (o InsightFiltersConfidenceOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersConfidence] {
	return pulumix.Output[InsightFiltersConfidence]{
		OutputState: o.OutputState,
	}
}

// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersConfidenceOutput) Eq() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersConfidence](o, func(v InsightFiltersConfidence) *string { return v.Eq })
}

// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersConfidenceOutput) Gte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersConfidence](o, func(v InsightFiltersConfidence) *string { return v.Gte })
}

// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersConfidenceOutput) Lte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersConfidence](o, func(v InsightFiltersConfidence) *string { return v.Lte })
}

type InsightFiltersCreatedAt struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange *InsightFiltersCreatedAtDateRange `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End *string `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start *string `pulumi:"start"`
}

type InsightFiltersCreatedAtArgs struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange pulumix.Input[*InsightFiltersCreatedAtDateRangeArgs] `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End pulumix.Input[*string] `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start pulumix.Input[*string] `pulumi:"start"`
}

func (InsightFiltersCreatedAtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersCreatedAt)(nil)).Elem()
}

func (i InsightFiltersCreatedAtArgs) ToInsightFiltersCreatedAtOutput() InsightFiltersCreatedAtOutput {
	return i.ToInsightFiltersCreatedAtOutputWithContext(context.Background())
}

func (i InsightFiltersCreatedAtArgs) ToInsightFiltersCreatedAtOutputWithContext(ctx context.Context) InsightFiltersCreatedAtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersCreatedAtOutput)
}

func (i *InsightFiltersCreatedAtArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersCreatedAtArgs] {
	return pulumix.Val(i)
}

type InsightFiltersCreatedAtOutput struct{ *pulumi.OutputState }

func (InsightFiltersCreatedAtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersCreatedAt)(nil)).Elem()
}

func (o InsightFiltersCreatedAtOutput) ToInsightFiltersCreatedAtOutput() InsightFiltersCreatedAtOutput {
	return o
}

func (o InsightFiltersCreatedAtOutput) ToInsightFiltersCreatedAtOutputWithContext(ctx context.Context) InsightFiltersCreatedAtOutput {
	return o
}

func (o InsightFiltersCreatedAtOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersCreatedAt] {
	return pulumix.Output[InsightFiltersCreatedAt]{
		OutputState: o.OutputState,
	}
}

// A configuration block of the date range for the date filter. See dateRange below for more details.
func (o InsightFiltersCreatedAtOutput) DateRange() pulumix.GPtrOutput[InsightFiltersCreatedAtDateRange, InsightFiltersCreatedAtDateRangeOutput] {
	value := pulumix.Apply[InsightFiltersCreatedAt](o, func(v InsightFiltersCreatedAt) *InsightFiltersCreatedAtDateRange { return v.DateRange })
	return pulumix.GPtrOutput[InsightFiltersCreatedAtDateRange, InsightFiltersCreatedAtDateRangeOutput]{OutputState: value.OutputState}
}

// An end date for the date filter. Required with `start` if `dateRange` is not specified.
func (o InsightFiltersCreatedAtOutput) End() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersCreatedAt](o, func(v InsightFiltersCreatedAt) *string { return v.End })
}

// A start date for the date filter. Required with `end` if `dateRange` is not specified.
func (o InsightFiltersCreatedAtOutput) Start() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersCreatedAt](o, func(v InsightFiltersCreatedAt) *string { return v.Start })
}

type InsightFiltersCreatedAtDateRange struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit string `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value int `pulumi:"value"`
}

type InsightFiltersCreatedAtDateRangeArgs struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (InsightFiltersCreatedAtDateRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersCreatedAtDateRange)(nil)).Elem()
}

func (i InsightFiltersCreatedAtDateRangeArgs) ToInsightFiltersCreatedAtDateRangeOutput() InsightFiltersCreatedAtDateRangeOutput {
	return i.ToInsightFiltersCreatedAtDateRangeOutputWithContext(context.Background())
}

func (i InsightFiltersCreatedAtDateRangeArgs) ToInsightFiltersCreatedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersCreatedAtDateRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersCreatedAtDateRangeOutput)
}

func (i *InsightFiltersCreatedAtDateRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersCreatedAtDateRangeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersCreatedAtDateRangeOutput struct{ *pulumi.OutputState }

func (InsightFiltersCreatedAtDateRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersCreatedAtDateRange)(nil)).Elem()
}

func (o InsightFiltersCreatedAtDateRangeOutput) ToInsightFiltersCreatedAtDateRangeOutput() InsightFiltersCreatedAtDateRangeOutput {
	return o
}

func (o InsightFiltersCreatedAtDateRangeOutput) ToInsightFiltersCreatedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersCreatedAtDateRangeOutput {
	return o
}

func (o InsightFiltersCreatedAtDateRangeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersCreatedAtDateRange] {
	return pulumix.Output[InsightFiltersCreatedAtDateRange]{
		OutputState: o.OutputState,
	}
}

// A date range unit for the date filter. Valid values: `DAYS`.
func (o InsightFiltersCreatedAtDateRangeOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersCreatedAtDateRange](o, func(v InsightFiltersCreatedAtDateRange) string { return v.Unit })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersCreatedAtDateRangeOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[InsightFiltersCreatedAtDateRange](o, func(v InsightFiltersCreatedAtDateRange) int { return v.Value })
}

type InsightFiltersCriticality struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq *string `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte *string `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte *string `pulumi:"lte"`
}

type InsightFiltersCriticalityArgs struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq pulumix.Input[*string] `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte pulumix.Input[*string] `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte pulumix.Input[*string] `pulumi:"lte"`
}

func (InsightFiltersCriticalityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersCriticality)(nil)).Elem()
}

func (i InsightFiltersCriticalityArgs) ToInsightFiltersCriticalityOutput() InsightFiltersCriticalityOutput {
	return i.ToInsightFiltersCriticalityOutputWithContext(context.Background())
}

func (i InsightFiltersCriticalityArgs) ToInsightFiltersCriticalityOutputWithContext(ctx context.Context) InsightFiltersCriticalityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersCriticalityOutput)
}

func (i *InsightFiltersCriticalityArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersCriticalityArgs] {
	return pulumix.Val(i)
}

type InsightFiltersCriticalityOutput struct{ *pulumi.OutputState }

func (InsightFiltersCriticalityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersCriticality)(nil)).Elem()
}

func (o InsightFiltersCriticalityOutput) ToInsightFiltersCriticalityOutput() InsightFiltersCriticalityOutput {
	return o
}

func (o InsightFiltersCriticalityOutput) ToInsightFiltersCriticalityOutputWithContext(ctx context.Context) InsightFiltersCriticalityOutput {
	return o
}

func (o InsightFiltersCriticalityOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersCriticality] {
	return pulumix.Output[InsightFiltersCriticality]{
		OutputState: o.OutputState,
	}
}

// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersCriticalityOutput) Eq() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersCriticality](o, func(v InsightFiltersCriticality) *string { return v.Eq })
}

// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersCriticalityOutput) Gte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersCriticality](o, func(v InsightFiltersCriticality) *string { return v.Gte })
}

// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersCriticalityOutput) Lte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersCriticality](o, func(v InsightFiltersCriticality) *string { return v.Lte })
}

type InsightFiltersDescription struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersDescriptionArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersDescription)(nil)).Elem()
}

func (i InsightFiltersDescriptionArgs) ToInsightFiltersDescriptionOutput() InsightFiltersDescriptionOutput {
	return i.ToInsightFiltersDescriptionOutputWithContext(context.Background())
}

func (i InsightFiltersDescriptionArgs) ToInsightFiltersDescriptionOutputWithContext(ctx context.Context) InsightFiltersDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersDescriptionOutput)
}

func (i *InsightFiltersDescriptionArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersDescriptionArgs] {
	return pulumix.Val(i)
}

type InsightFiltersDescriptionOutput struct{ *pulumi.OutputState }

func (InsightFiltersDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersDescription)(nil)).Elem()
}

func (o InsightFiltersDescriptionOutput) ToInsightFiltersDescriptionOutput() InsightFiltersDescriptionOutput {
	return o
}

func (o InsightFiltersDescriptionOutput) ToInsightFiltersDescriptionOutputWithContext(ctx context.Context) InsightFiltersDescriptionOutput {
	return o
}

func (o InsightFiltersDescriptionOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersDescription] {
	return pulumix.Output[InsightFiltersDescription]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersDescriptionOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersDescription](o, func(v InsightFiltersDescription) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersDescriptionOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersDescription](o, func(v InsightFiltersDescription) string { return v.Value })
}

type InsightFiltersFindingProviderFieldsConfidence struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq *string `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte *string `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte *string `pulumi:"lte"`
}

type InsightFiltersFindingProviderFieldsConfidenceArgs struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq pulumix.Input[*string] `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte pulumix.Input[*string] `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte pulumix.Input[*string] `pulumi:"lte"`
}

func (InsightFiltersFindingProviderFieldsConfidenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFindingProviderFieldsConfidence)(nil)).Elem()
}

func (i InsightFiltersFindingProviderFieldsConfidenceArgs) ToInsightFiltersFindingProviderFieldsConfidenceOutput() InsightFiltersFindingProviderFieldsConfidenceOutput {
	return i.ToInsightFiltersFindingProviderFieldsConfidenceOutputWithContext(context.Background())
}

func (i InsightFiltersFindingProviderFieldsConfidenceArgs) ToInsightFiltersFindingProviderFieldsConfidenceOutputWithContext(ctx context.Context) InsightFiltersFindingProviderFieldsConfidenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersFindingProviderFieldsConfidenceOutput)
}

func (i *InsightFiltersFindingProviderFieldsConfidenceArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersFindingProviderFieldsConfidenceArgs] {
	return pulumix.Val(i)
}

type InsightFiltersFindingProviderFieldsConfidenceOutput struct{ *pulumi.OutputState }

func (InsightFiltersFindingProviderFieldsConfidenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFindingProviderFieldsConfidence)(nil)).Elem()
}

func (o InsightFiltersFindingProviderFieldsConfidenceOutput) ToInsightFiltersFindingProviderFieldsConfidenceOutput() InsightFiltersFindingProviderFieldsConfidenceOutput {
	return o
}

func (o InsightFiltersFindingProviderFieldsConfidenceOutput) ToInsightFiltersFindingProviderFieldsConfidenceOutputWithContext(ctx context.Context) InsightFiltersFindingProviderFieldsConfidenceOutput {
	return o
}

func (o InsightFiltersFindingProviderFieldsConfidenceOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersFindingProviderFieldsConfidence] {
	return pulumix.Output[InsightFiltersFindingProviderFieldsConfidence]{
		OutputState: o.OutputState,
	}
}

// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersFindingProviderFieldsConfidenceOutput) Eq() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsConfidence](o, func(v InsightFiltersFindingProviderFieldsConfidence) *string { return v.Eq })
}

// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersFindingProviderFieldsConfidenceOutput) Gte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsConfidence](o, func(v InsightFiltersFindingProviderFieldsConfidence) *string { return v.Gte })
}

// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersFindingProviderFieldsConfidenceOutput) Lte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsConfidence](o, func(v InsightFiltersFindingProviderFieldsConfidence) *string { return v.Lte })
}

type InsightFiltersFindingProviderFieldsCriticality struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq *string `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte *string `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte *string `pulumi:"lte"`
}

type InsightFiltersFindingProviderFieldsCriticalityArgs struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq pulumix.Input[*string] `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte pulumix.Input[*string] `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte pulumix.Input[*string] `pulumi:"lte"`
}

func (InsightFiltersFindingProviderFieldsCriticalityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFindingProviderFieldsCriticality)(nil)).Elem()
}

func (i InsightFiltersFindingProviderFieldsCriticalityArgs) ToInsightFiltersFindingProviderFieldsCriticalityOutput() InsightFiltersFindingProviderFieldsCriticalityOutput {
	return i.ToInsightFiltersFindingProviderFieldsCriticalityOutputWithContext(context.Background())
}

func (i InsightFiltersFindingProviderFieldsCriticalityArgs) ToInsightFiltersFindingProviderFieldsCriticalityOutputWithContext(ctx context.Context) InsightFiltersFindingProviderFieldsCriticalityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersFindingProviderFieldsCriticalityOutput)
}

func (i *InsightFiltersFindingProviderFieldsCriticalityArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersFindingProviderFieldsCriticalityArgs] {
	return pulumix.Val(i)
}

type InsightFiltersFindingProviderFieldsCriticalityOutput struct{ *pulumi.OutputState }

func (InsightFiltersFindingProviderFieldsCriticalityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFindingProviderFieldsCriticality)(nil)).Elem()
}

func (o InsightFiltersFindingProviderFieldsCriticalityOutput) ToInsightFiltersFindingProviderFieldsCriticalityOutput() InsightFiltersFindingProviderFieldsCriticalityOutput {
	return o
}

func (o InsightFiltersFindingProviderFieldsCriticalityOutput) ToInsightFiltersFindingProviderFieldsCriticalityOutputWithContext(ctx context.Context) InsightFiltersFindingProviderFieldsCriticalityOutput {
	return o
}

func (o InsightFiltersFindingProviderFieldsCriticalityOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersFindingProviderFieldsCriticality] {
	return pulumix.Output[InsightFiltersFindingProviderFieldsCriticality]{
		OutputState: o.OutputState,
	}
}

// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersFindingProviderFieldsCriticalityOutput) Eq() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsCriticality](o, func(v InsightFiltersFindingProviderFieldsCriticality) *string { return v.Eq })
}

// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersFindingProviderFieldsCriticalityOutput) Gte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsCriticality](o, func(v InsightFiltersFindingProviderFieldsCriticality) *string { return v.Gte })
}

// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersFindingProviderFieldsCriticalityOutput) Lte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsCriticality](o, func(v InsightFiltersFindingProviderFieldsCriticality) *string { return v.Lte })
}

type InsightFiltersFindingProviderFieldsRelatedFindingsId struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFindingProviderFieldsRelatedFindingsId)(nil)).Elem()
}

func (i InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs) ToInsightFiltersFindingProviderFieldsRelatedFindingsIdOutput() InsightFiltersFindingProviderFieldsRelatedFindingsIdOutput {
	return i.ToInsightFiltersFindingProviderFieldsRelatedFindingsIdOutputWithContext(context.Background())
}

func (i InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs) ToInsightFiltersFindingProviderFieldsRelatedFindingsIdOutputWithContext(ctx context.Context) InsightFiltersFindingProviderFieldsRelatedFindingsIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersFindingProviderFieldsRelatedFindingsIdOutput)
}

func (i *InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs] {
	return pulumix.Val(i)
}

type InsightFiltersFindingProviderFieldsRelatedFindingsIdOutput struct{ *pulumi.OutputState }

func (InsightFiltersFindingProviderFieldsRelatedFindingsIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFindingProviderFieldsRelatedFindingsId)(nil)).Elem()
}

func (o InsightFiltersFindingProviderFieldsRelatedFindingsIdOutput) ToInsightFiltersFindingProviderFieldsRelatedFindingsIdOutput() InsightFiltersFindingProviderFieldsRelatedFindingsIdOutput {
	return o
}

func (o InsightFiltersFindingProviderFieldsRelatedFindingsIdOutput) ToInsightFiltersFindingProviderFieldsRelatedFindingsIdOutputWithContext(ctx context.Context) InsightFiltersFindingProviderFieldsRelatedFindingsIdOutput {
	return o
}

func (o InsightFiltersFindingProviderFieldsRelatedFindingsIdOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersFindingProviderFieldsRelatedFindingsId] {
	return pulumix.Output[InsightFiltersFindingProviderFieldsRelatedFindingsId]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersFindingProviderFieldsRelatedFindingsIdOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsRelatedFindingsId](o, func(v InsightFiltersFindingProviderFieldsRelatedFindingsId) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersFindingProviderFieldsRelatedFindingsIdOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsRelatedFindingsId](o, func(v InsightFiltersFindingProviderFieldsRelatedFindingsId) string { return v.Value })
}

type InsightFiltersFindingProviderFieldsRelatedFindingsProductArn struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFindingProviderFieldsRelatedFindingsProductArn)(nil)).Elem()
}

func (i InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs) ToInsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput() InsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput {
	return i.ToInsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutputWithContext(context.Background())
}

func (i InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs) ToInsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutputWithContext(ctx context.Context) InsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput)
}

func (i *InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs] {
	return pulumix.Val(i)
}

type InsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput struct{ *pulumi.OutputState }

func (InsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFindingProviderFieldsRelatedFindingsProductArn)(nil)).Elem()
}

func (o InsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput) ToInsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput() InsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput {
	return o
}

func (o InsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput) ToInsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutputWithContext(ctx context.Context) InsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput {
	return o
}

func (o InsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersFindingProviderFieldsRelatedFindingsProductArn] {
	return pulumix.Output[InsightFiltersFindingProviderFieldsRelatedFindingsProductArn]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsRelatedFindingsProductArn](o, func(v InsightFiltersFindingProviderFieldsRelatedFindingsProductArn) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsRelatedFindingsProductArn](o, func(v InsightFiltersFindingProviderFieldsRelatedFindingsProductArn) string { return v.Value })
}

type InsightFiltersFindingProviderFieldsSeverityLabel struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersFindingProviderFieldsSeverityLabelArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersFindingProviderFieldsSeverityLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFindingProviderFieldsSeverityLabel)(nil)).Elem()
}

func (i InsightFiltersFindingProviderFieldsSeverityLabelArgs) ToInsightFiltersFindingProviderFieldsSeverityLabelOutput() InsightFiltersFindingProviderFieldsSeverityLabelOutput {
	return i.ToInsightFiltersFindingProviderFieldsSeverityLabelOutputWithContext(context.Background())
}

func (i InsightFiltersFindingProviderFieldsSeverityLabelArgs) ToInsightFiltersFindingProviderFieldsSeverityLabelOutputWithContext(ctx context.Context) InsightFiltersFindingProviderFieldsSeverityLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersFindingProviderFieldsSeverityLabelOutput)
}

func (i *InsightFiltersFindingProviderFieldsSeverityLabelArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersFindingProviderFieldsSeverityLabelArgs] {
	return pulumix.Val(i)
}

type InsightFiltersFindingProviderFieldsSeverityLabelOutput struct{ *pulumi.OutputState }

func (InsightFiltersFindingProviderFieldsSeverityLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFindingProviderFieldsSeverityLabel)(nil)).Elem()
}

func (o InsightFiltersFindingProviderFieldsSeverityLabelOutput) ToInsightFiltersFindingProviderFieldsSeverityLabelOutput() InsightFiltersFindingProviderFieldsSeverityLabelOutput {
	return o
}

func (o InsightFiltersFindingProviderFieldsSeverityLabelOutput) ToInsightFiltersFindingProviderFieldsSeverityLabelOutputWithContext(ctx context.Context) InsightFiltersFindingProviderFieldsSeverityLabelOutput {
	return o
}

func (o InsightFiltersFindingProviderFieldsSeverityLabelOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersFindingProviderFieldsSeverityLabel] {
	return pulumix.Output[InsightFiltersFindingProviderFieldsSeverityLabel]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersFindingProviderFieldsSeverityLabelOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsSeverityLabel](o, func(v InsightFiltersFindingProviderFieldsSeverityLabel) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersFindingProviderFieldsSeverityLabelOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsSeverityLabel](o, func(v InsightFiltersFindingProviderFieldsSeverityLabel) string { return v.Value })
}

type InsightFiltersFindingProviderFieldsSeverityOriginal struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersFindingProviderFieldsSeverityOriginalArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersFindingProviderFieldsSeverityOriginalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFindingProviderFieldsSeverityOriginal)(nil)).Elem()
}

func (i InsightFiltersFindingProviderFieldsSeverityOriginalArgs) ToInsightFiltersFindingProviderFieldsSeverityOriginalOutput() InsightFiltersFindingProviderFieldsSeverityOriginalOutput {
	return i.ToInsightFiltersFindingProviderFieldsSeverityOriginalOutputWithContext(context.Background())
}

func (i InsightFiltersFindingProviderFieldsSeverityOriginalArgs) ToInsightFiltersFindingProviderFieldsSeverityOriginalOutputWithContext(ctx context.Context) InsightFiltersFindingProviderFieldsSeverityOriginalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersFindingProviderFieldsSeverityOriginalOutput)
}

func (i *InsightFiltersFindingProviderFieldsSeverityOriginalArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersFindingProviderFieldsSeverityOriginalArgs] {
	return pulumix.Val(i)
}

type InsightFiltersFindingProviderFieldsSeverityOriginalOutput struct{ *pulumi.OutputState }

func (InsightFiltersFindingProviderFieldsSeverityOriginalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFindingProviderFieldsSeverityOriginal)(nil)).Elem()
}

func (o InsightFiltersFindingProviderFieldsSeverityOriginalOutput) ToInsightFiltersFindingProviderFieldsSeverityOriginalOutput() InsightFiltersFindingProviderFieldsSeverityOriginalOutput {
	return o
}

func (o InsightFiltersFindingProviderFieldsSeverityOriginalOutput) ToInsightFiltersFindingProviderFieldsSeverityOriginalOutputWithContext(ctx context.Context) InsightFiltersFindingProviderFieldsSeverityOriginalOutput {
	return o
}

func (o InsightFiltersFindingProviderFieldsSeverityOriginalOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersFindingProviderFieldsSeverityOriginal] {
	return pulumix.Output[InsightFiltersFindingProviderFieldsSeverityOriginal]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersFindingProviderFieldsSeverityOriginalOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsSeverityOriginal](o, func(v InsightFiltersFindingProviderFieldsSeverityOriginal) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersFindingProviderFieldsSeverityOriginalOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsSeverityOriginal](o, func(v InsightFiltersFindingProviderFieldsSeverityOriginal) string { return v.Value })
}

type InsightFiltersFindingProviderFieldsType struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersFindingProviderFieldsTypeArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersFindingProviderFieldsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFindingProviderFieldsType)(nil)).Elem()
}

func (i InsightFiltersFindingProviderFieldsTypeArgs) ToInsightFiltersFindingProviderFieldsTypeOutput() InsightFiltersFindingProviderFieldsTypeOutput {
	return i.ToInsightFiltersFindingProviderFieldsTypeOutputWithContext(context.Background())
}

func (i InsightFiltersFindingProviderFieldsTypeArgs) ToInsightFiltersFindingProviderFieldsTypeOutputWithContext(ctx context.Context) InsightFiltersFindingProviderFieldsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersFindingProviderFieldsTypeOutput)
}

func (i *InsightFiltersFindingProviderFieldsTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersFindingProviderFieldsTypeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersFindingProviderFieldsTypeOutput struct{ *pulumi.OutputState }

func (InsightFiltersFindingProviderFieldsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFindingProviderFieldsType)(nil)).Elem()
}

func (o InsightFiltersFindingProviderFieldsTypeOutput) ToInsightFiltersFindingProviderFieldsTypeOutput() InsightFiltersFindingProviderFieldsTypeOutput {
	return o
}

func (o InsightFiltersFindingProviderFieldsTypeOutput) ToInsightFiltersFindingProviderFieldsTypeOutputWithContext(ctx context.Context) InsightFiltersFindingProviderFieldsTypeOutput {
	return o
}

func (o InsightFiltersFindingProviderFieldsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersFindingProviderFieldsType] {
	return pulumix.Output[InsightFiltersFindingProviderFieldsType]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersFindingProviderFieldsTypeOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsType](o, func(v InsightFiltersFindingProviderFieldsType) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersFindingProviderFieldsTypeOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersFindingProviderFieldsType](o, func(v InsightFiltersFindingProviderFieldsType) string { return v.Value })
}

type InsightFiltersFirstObservedAt struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange *InsightFiltersFirstObservedAtDateRange `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End *string `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start *string `pulumi:"start"`
}

type InsightFiltersFirstObservedAtArgs struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange pulumix.Input[*InsightFiltersFirstObservedAtDateRangeArgs] `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End pulumix.Input[*string] `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start pulumix.Input[*string] `pulumi:"start"`
}

func (InsightFiltersFirstObservedAtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFirstObservedAt)(nil)).Elem()
}

func (i InsightFiltersFirstObservedAtArgs) ToInsightFiltersFirstObservedAtOutput() InsightFiltersFirstObservedAtOutput {
	return i.ToInsightFiltersFirstObservedAtOutputWithContext(context.Background())
}

func (i InsightFiltersFirstObservedAtArgs) ToInsightFiltersFirstObservedAtOutputWithContext(ctx context.Context) InsightFiltersFirstObservedAtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersFirstObservedAtOutput)
}

func (i *InsightFiltersFirstObservedAtArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersFirstObservedAtArgs] {
	return pulumix.Val(i)
}

type InsightFiltersFirstObservedAtOutput struct{ *pulumi.OutputState }

func (InsightFiltersFirstObservedAtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFirstObservedAt)(nil)).Elem()
}

func (o InsightFiltersFirstObservedAtOutput) ToInsightFiltersFirstObservedAtOutput() InsightFiltersFirstObservedAtOutput {
	return o
}

func (o InsightFiltersFirstObservedAtOutput) ToInsightFiltersFirstObservedAtOutputWithContext(ctx context.Context) InsightFiltersFirstObservedAtOutput {
	return o
}

func (o InsightFiltersFirstObservedAtOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersFirstObservedAt] {
	return pulumix.Output[InsightFiltersFirstObservedAt]{
		OutputState: o.OutputState,
	}
}

// A configuration block of the date range for the date filter. See dateRange below for more details.
func (o InsightFiltersFirstObservedAtOutput) DateRange() pulumix.GPtrOutput[InsightFiltersFirstObservedAtDateRange, InsightFiltersFirstObservedAtDateRangeOutput] {
	value := pulumix.Apply[InsightFiltersFirstObservedAt](o, func(v InsightFiltersFirstObservedAt) *InsightFiltersFirstObservedAtDateRange { return v.DateRange })
	return pulumix.GPtrOutput[InsightFiltersFirstObservedAtDateRange, InsightFiltersFirstObservedAtDateRangeOutput]{OutputState: value.OutputState}
}

// An end date for the date filter. Required with `start` if `dateRange` is not specified.
func (o InsightFiltersFirstObservedAtOutput) End() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersFirstObservedAt](o, func(v InsightFiltersFirstObservedAt) *string { return v.End })
}

// A start date for the date filter. Required with `end` if `dateRange` is not specified.
func (o InsightFiltersFirstObservedAtOutput) Start() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersFirstObservedAt](o, func(v InsightFiltersFirstObservedAt) *string { return v.Start })
}

type InsightFiltersFirstObservedAtDateRange struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit string `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value int `pulumi:"value"`
}

type InsightFiltersFirstObservedAtDateRangeArgs struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (InsightFiltersFirstObservedAtDateRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFirstObservedAtDateRange)(nil)).Elem()
}

func (i InsightFiltersFirstObservedAtDateRangeArgs) ToInsightFiltersFirstObservedAtDateRangeOutput() InsightFiltersFirstObservedAtDateRangeOutput {
	return i.ToInsightFiltersFirstObservedAtDateRangeOutputWithContext(context.Background())
}

func (i InsightFiltersFirstObservedAtDateRangeArgs) ToInsightFiltersFirstObservedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersFirstObservedAtDateRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersFirstObservedAtDateRangeOutput)
}

func (i *InsightFiltersFirstObservedAtDateRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersFirstObservedAtDateRangeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersFirstObservedAtDateRangeOutput struct{ *pulumi.OutputState }

func (InsightFiltersFirstObservedAtDateRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersFirstObservedAtDateRange)(nil)).Elem()
}

func (o InsightFiltersFirstObservedAtDateRangeOutput) ToInsightFiltersFirstObservedAtDateRangeOutput() InsightFiltersFirstObservedAtDateRangeOutput {
	return o
}

func (o InsightFiltersFirstObservedAtDateRangeOutput) ToInsightFiltersFirstObservedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersFirstObservedAtDateRangeOutput {
	return o
}

func (o InsightFiltersFirstObservedAtDateRangeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersFirstObservedAtDateRange] {
	return pulumix.Output[InsightFiltersFirstObservedAtDateRange]{
		OutputState: o.OutputState,
	}
}

// A date range unit for the date filter. Valid values: `DAYS`.
func (o InsightFiltersFirstObservedAtDateRangeOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersFirstObservedAtDateRange](o, func(v InsightFiltersFirstObservedAtDateRange) string { return v.Unit })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersFirstObservedAtDateRangeOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[InsightFiltersFirstObservedAtDateRange](o, func(v InsightFiltersFirstObservedAtDateRange) int { return v.Value })
}

type InsightFiltersGeneratorId struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersGeneratorIdArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersGeneratorIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersGeneratorId)(nil)).Elem()
}

func (i InsightFiltersGeneratorIdArgs) ToInsightFiltersGeneratorIdOutput() InsightFiltersGeneratorIdOutput {
	return i.ToInsightFiltersGeneratorIdOutputWithContext(context.Background())
}

func (i InsightFiltersGeneratorIdArgs) ToInsightFiltersGeneratorIdOutputWithContext(ctx context.Context) InsightFiltersGeneratorIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersGeneratorIdOutput)
}

func (i *InsightFiltersGeneratorIdArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersGeneratorIdArgs] {
	return pulumix.Val(i)
}

type InsightFiltersGeneratorIdOutput struct{ *pulumi.OutputState }

func (InsightFiltersGeneratorIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersGeneratorId)(nil)).Elem()
}

func (o InsightFiltersGeneratorIdOutput) ToInsightFiltersGeneratorIdOutput() InsightFiltersGeneratorIdOutput {
	return o
}

func (o InsightFiltersGeneratorIdOutput) ToInsightFiltersGeneratorIdOutputWithContext(ctx context.Context) InsightFiltersGeneratorIdOutput {
	return o
}

func (o InsightFiltersGeneratorIdOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersGeneratorId] {
	return pulumix.Output[InsightFiltersGeneratorId]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersGeneratorIdOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersGeneratorId](o, func(v InsightFiltersGeneratorId) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersGeneratorIdOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersGeneratorId](o, func(v InsightFiltersGeneratorId) string { return v.Value })
}

type InsightFiltersId struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersIdArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersId)(nil)).Elem()
}

func (i InsightFiltersIdArgs) ToInsightFiltersIdOutput() InsightFiltersIdOutput {
	return i.ToInsightFiltersIdOutputWithContext(context.Background())
}

func (i InsightFiltersIdArgs) ToInsightFiltersIdOutputWithContext(ctx context.Context) InsightFiltersIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersIdOutput)
}

func (i *InsightFiltersIdArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersIdArgs] {
	return pulumix.Val(i)
}

type InsightFiltersIdOutput struct{ *pulumi.OutputState }

func (InsightFiltersIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersId)(nil)).Elem()
}

func (o InsightFiltersIdOutput) ToInsightFiltersIdOutput() InsightFiltersIdOutput {
	return o
}

func (o InsightFiltersIdOutput) ToInsightFiltersIdOutputWithContext(ctx context.Context) InsightFiltersIdOutput {
	return o
}

func (o InsightFiltersIdOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersId] {
	return pulumix.Output[InsightFiltersId]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersIdOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersId](o, func(v InsightFiltersId) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersIdOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersId](o, func(v InsightFiltersId) string { return v.Value })
}

type InsightFiltersKeyword struct {
	// A value for the keyword.
	Value string `pulumi:"value"`
}

type InsightFiltersKeywordArgs struct {
	// A value for the keyword.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersKeywordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersKeyword)(nil)).Elem()
}

func (i InsightFiltersKeywordArgs) ToInsightFiltersKeywordOutput() InsightFiltersKeywordOutput {
	return i.ToInsightFiltersKeywordOutputWithContext(context.Background())
}

func (i InsightFiltersKeywordArgs) ToInsightFiltersKeywordOutputWithContext(ctx context.Context) InsightFiltersKeywordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersKeywordOutput)
}

func (i *InsightFiltersKeywordArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersKeywordArgs] {
	return pulumix.Val(i)
}

type InsightFiltersKeywordOutput struct{ *pulumi.OutputState }

func (InsightFiltersKeywordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersKeyword)(nil)).Elem()
}

func (o InsightFiltersKeywordOutput) ToInsightFiltersKeywordOutput() InsightFiltersKeywordOutput {
	return o
}

func (o InsightFiltersKeywordOutput) ToInsightFiltersKeywordOutputWithContext(ctx context.Context) InsightFiltersKeywordOutput {
	return o
}

func (o InsightFiltersKeywordOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersKeyword] {
	return pulumix.Output[InsightFiltersKeyword]{
		OutputState: o.OutputState,
	}
}

// A value for the keyword.
func (o InsightFiltersKeywordOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersKeyword](o, func(v InsightFiltersKeyword) string { return v.Value })
}

type InsightFiltersLastObservedAt struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange *InsightFiltersLastObservedAtDateRange `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End *string `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start *string `pulumi:"start"`
}

type InsightFiltersLastObservedAtArgs struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange pulumix.Input[*InsightFiltersLastObservedAtDateRangeArgs] `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End pulumix.Input[*string] `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start pulumix.Input[*string] `pulumi:"start"`
}

func (InsightFiltersLastObservedAtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersLastObservedAt)(nil)).Elem()
}

func (i InsightFiltersLastObservedAtArgs) ToInsightFiltersLastObservedAtOutput() InsightFiltersLastObservedAtOutput {
	return i.ToInsightFiltersLastObservedAtOutputWithContext(context.Background())
}

func (i InsightFiltersLastObservedAtArgs) ToInsightFiltersLastObservedAtOutputWithContext(ctx context.Context) InsightFiltersLastObservedAtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersLastObservedAtOutput)
}

func (i *InsightFiltersLastObservedAtArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersLastObservedAtArgs] {
	return pulumix.Val(i)
}

type InsightFiltersLastObservedAtOutput struct{ *pulumi.OutputState }

func (InsightFiltersLastObservedAtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersLastObservedAt)(nil)).Elem()
}

func (o InsightFiltersLastObservedAtOutput) ToInsightFiltersLastObservedAtOutput() InsightFiltersLastObservedAtOutput {
	return o
}

func (o InsightFiltersLastObservedAtOutput) ToInsightFiltersLastObservedAtOutputWithContext(ctx context.Context) InsightFiltersLastObservedAtOutput {
	return o
}

func (o InsightFiltersLastObservedAtOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersLastObservedAt] {
	return pulumix.Output[InsightFiltersLastObservedAt]{
		OutputState: o.OutputState,
	}
}

// A configuration block of the date range for the date filter. See dateRange below for more details.
func (o InsightFiltersLastObservedAtOutput) DateRange() pulumix.GPtrOutput[InsightFiltersLastObservedAtDateRange, InsightFiltersLastObservedAtDateRangeOutput] {
	value := pulumix.Apply[InsightFiltersLastObservedAt](o, func(v InsightFiltersLastObservedAt) *InsightFiltersLastObservedAtDateRange { return v.DateRange })
	return pulumix.GPtrOutput[InsightFiltersLastObservedAtDateRange, InsightFiltersLastObservedAtDateRangeOutput]{OutputState: value.OutputState}
}

// An end date for the date filter. Required with `start` if `dateRange` is not specified.
func (o InsightFiltersLastObservedAtOutput) End() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersLastObservedAt](o, func(v InsightFiltersLastObservedAt) *string { return v.End })
}

// A start date for the date filter. Required with `end` if `dateRange` is not specified.
func (o InsightFiltersLastObservedAtOutput) Start() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersLastObservedAt](o, func(v InsightFiltersLastObservedAt) *string { return v.Start })
}

type InsightFiltersLastObservedAtDateRange struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit string `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value int `pulumi:"value"`
}

type InsightFiltersLastObservedAtDateRangeArgs struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (InsightFiltersLastObservedAtDateRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersLastObservedAtDateRange)(nil)).Elem()
}

func (i InsightFiltersLastObservedAtDateRangeArgs) ToInsightFiltersLastObservedAtDateRangeOutput() InsightFiltersLastObservedAtDateRangeOutput {
	return i.ToInsightFiltersLastObservedAtDateRangeOutputWithContext(context.Background())
}

func (i InsightFiltersLastObservedAtDateRangeArgs) ToInsightFiltersLastObservedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersLastObservedAtDateRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersLastObservedAtDateRangeOutput)
}

func (i *InsightFiltersLastObservedAtDateRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersLastObservedAtDateRangeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersLastObservedAtDateRangeOutput struct{ *pulumi.OutputState }

func (InsightFiltersLastObservedAtDateRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersLastObservedAtDateRange)(nil)).Elem()
}

func (o InsightFiltersLastObservedAtDateRangeOutput) ToInsightFiltersLastObservedAtDateRangeOutput() InsightFiltersLastObservedAtDateRangeOutput {
	return o
}

func (o InsightFiltersLastObservedAtDateRangeOutput) ToInsightFiltersLastObservedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersLastObservedAtDateRangeOutput {
	return o
}

func (o InsightFiltersLastObservedAtDateRangeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersLastObservedAtDateRange] {
	return pulumix.Output[InsightFiltersLastObservedAtDateRange]{
		OutputState: o.OutputState,
	}
}

// A date range unit for the date filter. Valid values: `DAYS`.
func (o InsightFiltersLastObservedAtDateRangeOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersLastObservedAtDateRange](o, func(v InsightFiltersLastObservedAtDateRange) string { return v.Unit })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersLastObservedAtDateRangeOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[InsightFiltersLastObservedAtDateRange](o, func(v InsightFiltersLastObservedAtDateRange) int { return v.Value })
}

type InsightFiltersMalwareName struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersMalwareNameArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersMalwareNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersMalwareName)(nil)).Elem()
}

func (i InsightFiltersMalwareNameArgs) ToInsightFiltersMalwareNameOutput() InsightFiltersMalwareNameOutput {
	return i.ToInsightFiltersMalwareNameOutputWithContext(context.Background())
}

func (i InsightFiltersMalwareNameArgs) ToInsightFiltersMalwareNameOutputWithContext(ctx context.Context) InsightFiltersMalwareNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersMalwareNameOutput)
}

func (i *InsightFiltersMalwareNameArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersMalwareNameArgs] {
	return pulumix.Val(i)
}

type InsightFiltersMalwareNameOutput struct{ *pulumi.OutputState }

func (InsightFiltersMalwareNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersMalwareName)(nil)).Elem()
}

func (o InsightFiltersMalwareNameOutput) ToInsightFiltersMalwareNameOutput() InsightFiltersMalwareNameOutput {
	return o
}

func (o InsightFiltersMalwareNameOutput) ToInsightFiltersMalwareNameOutputWithContext(ctx context.Context) InsightFiltersMalwareNameOutput {
	return o
}

func (o InsightFiltersMalwareNameOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersMalwareName] {
	return pulumix.Output[InsightFiltersMalwareName]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersMalwareNameOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersMalwareName](o, func(v InsightFiltersMalwareName) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersMalwareNameOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersMalwareName](o, func(v InsightFiltersMalwareName) string { return v.Value })
}

type InsightFiltersMalwarePath struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersMalwarePathArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersMalwarePathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersMalwarePath)(nil)).Elem()
}

func (i InsightFiltersMalwarePathArgs) ToInsightFiltersMalwarePathOutput() InsightFiltersMalwarePathOutput {
	return i.ToInsightFiltersMalwarePathOutputWithContext(context.Background())
}

func (i InsightFiltersMalwarePathArgs) ToInsightFiltersMalwarePathOutputWithContext(ctx context.Context) InsightFiltersMalwarePathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersMalwarePathOutput)
}

func (i *InsightFiltersMalwarePathArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersMalwarePathArgs] {
	return pulumix.Val(i)
}

type InsightFiltersMalwarePathOutput struct{ *pulumi.OutputState }

func (InsightFiltersMalwarePathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersMalwarePath)(nil)).Elem()
}

func (o InsightFiltersMalwarePathOutput) ToInsightFiltersMalwarePathOutput() InsightFiltersMalwarePathOutput {
	return o
}

func (o InsightFiltersMalwarePathOutput) ToInsightFiltersMalwarePathOutputWithContext(ctx context.Context) InsightFiltersMalwarePathOutput {
	return o
}

func (o InsightFiltersMalwarePathOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersMalwarePath] {
	return pulumix.Output[InsightFiltersMalwarePath]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersMalwarePathOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersMalwarePath](o, func(v InsightFiltersMalwarePath) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersMalwarePathOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersMalwarePath](o, func(v InsightFiltersMalwarePath) string { return v.Value })
}

type InsightFiltersMalwareState struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersMalwareStateArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersMalwareStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersMalwareState)(nil)).Elem()
}

func (i InsightFiltersMalwareStateArgs) ToInsightFiltersMalwareStateOutput() InsightFiltersMalwareStateOutput {
	return i.ToInsightFiltersMalwareStateOutputWithContext(context.Background())
}

func (i InsightFiltersMalwareStateArgs) ToInsightFiltersMalwareStateOutputWithContext(ctx context.Context) InsightFiltersMalwareStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersMalwareStateOutput)
}

func (i *InsightFiltersMalwareStateArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersMalwareStateArgs] {
	return pulumix.Val(i)
}

type InsightFiltersMalwareStateOutput struct{ *pulumi.OutputState }

func (InsightFiltersMalwareStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersMalwareState)(nil)).Elem()
}

func (o InsightFiltersMalwareStateOutput) ToInsightFiltersMalwareStateOutput() InsightFiltersMalwareStateOutput {
	return o
}

func (o InsightFiltersMalwareStateOutput) ToInsightFiltersMalwareStateOutputWithContext(ctx context.Context) InsightFiltersMalwareStateOutput {
	return o
}

func (o InsightFiltersMalwareStateOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersMalwareState] {
	return pulumix.Output[InsightFiltersMalwareState]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersMalwareStateOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersMalwareState](o, func(v InsightFiltersMalwareState) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersMalwareStateOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersMalwareState](o, func(v InsightFiltersMalwareState) string { return v.Value })
}

type InsightFiltersMalwareType struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersMalwareTypeArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersMalwareTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersMalwareType)(nil)).Elem()
}

func (i InsightFiltersMalwareTypeArgs) ToInsightFiltersMalwareTypeOutput() InsightFiltersMalwareTypeOutput {
	return i.ToInsightFiltersMalwareTypeOutputWithContext(context.Background())
}

func (i InsightFiltersMalwareTypeArgs) ToInsightFiltersMalwareTypeOutputWithContext(ctx context.Context) InsightFiltersMalwareTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersMalwareTypeOutput)
}

func (i *InsightFiltersMalwareTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersMalwareTypeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersMalwareTypeOutput struct{ *pulumi.OutputState }

func (InsightFiltersMalwareTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersMalwareType)(nil)).Elem()
}

func (o InsightFiltersMalwareTypeOutput) ToInsightFiltersMalwareTypeOutput() InsightFiltersMalwareTypeOutput {
	return o
}

func (o InsightFiltersMalwareTypeOutput) ToInsightFiltersMalwareTypeOutputWithContext(ctx context.Context) InsightFiltersMalwareTypeOutput {
	return o
}

func (o InsightFiltersMalwareTypeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersMalwareType] {
	return pulumix.Output[InsightFiltersMalwareType]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersMalwareTypeOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersMalwareType](o, func(v InsightFiltersMalwareType) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersMalwareTypeOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersMalwareType](o, func(v InsightFiltersMalwareType) string { return v.Value })
}

type InsightFiltersNetworkDestinationDomain struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersNetworkDestinationDomainArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersNetworkDestinationDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkDestinationDomain)(nil)).Elem()
}

func (i InsightFiltersNetworkDestinationDomainArgs) ToInsightFiltersNetworkDestinationDomainOutput() InsightFiltersNetworkDestinationDomainOutput {
	return i.ToInsightFiltersNetworkDestinationDomainOutputWithContext(context.Background())
}

func (i InsightFiltersNetworkDestinationDomainArgs) ToInsightFiltersNetworkDestinationDomainOutputWithContext(ctx context.Context) InsightFiltersNetworkDestinationDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersNetworkDestinationDomainOutput)
}

func (i *InsightFiltersNetworkDestinationDomainArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersNetworkDestinationDomainArgs] {
	return pulumix.Val(i)
}

type InsightFiltersNetworkDestinationDomainOutput struct{ *pulumi.OutputState }

func (InsightFiltersNetworkDestinationDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkDestinationDomain)(nil)).Elem()
}

func (o InsightFiltersNetworkDestinationDomainOutput) ToInsightFiltersNetworkDestinationDomainOutput() InsightFiltersNetworkDestinationDomainOutput {
	return o
}

func (o InsightFiltersNetworkDestinationDomainOutput) ToInsightFiltersNetworkDestinationDomainOutputWithContext(ctx context.Context) InsightFiltersNetworkDestinationDomainOutput {
	return o
}

func (o InsightFiltersNetworkDestinationDomainOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersNetworkDestinationDomain] {
	return pulumix.Output[InsightFiltersNetworkDestinationDomain]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersNetworkDestinationDomainOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNetworkDestinationDomain](o, func(v InsightFiltersNetworkDestinationDomain) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersNetworkDestinationDomainOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNetworkDestinationDomain](o, func(v InsightFiltersNetworkDestinationDomain) string { return v.Value })
}

type InsightFiltersNetworkDestinationIpv4 struct {
	// A finding's CIDR value.
	Cidr string `pulumi:"cidr"`
}

type InsightFiltersNetworkDestinationIpv4Args struct {
	// A finding's CIDR value.
	Cidr pulumix.Input[string] `pulumi:"cidr"`
}

func (InsightFiltersNetworkDestinationIpv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkDestinationIpv4)(nil)).Elem()
}

func (i InsightFiltersNetworkDestinationIpv4Args) ToInsightFiltersNetworkDestinationIpv4Output() InsightFiltersNetworkDestinationIpv4Output {
	return i.ToInsightFiltersNetworkDestinationIpv4OutputWithContext(context.Background())
}

func (i InsightFiltersNetworkDestinationIpv4Args) ToInsightFiltersNetworkDestinationIpv4OutputWithContext(ctx context.Context) InsightFiltersNetworkDestinationIpv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersNetworkDestinationIpv4Output)
}

func (i *InsightFiltersNetworkDestinationIpv4Args) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersNetworkDestinationIpv4Args] {
	return pulumix.Val(i)
}

type InsightFiltersNetworkDestinationIpv4Output struct{ *pulumi.OutputState }

func (InsightFiltersNetworkDestinationIpv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkDestinationIpv4)(nil)).Elem()
}

func (o InsightFiltersNetworkDestinationIpv4Output) ToInsightFiltersNetworkDestinationIpv4Output() InsightFiltersNetworkDestinationIpv4Output {
	return o
}

func (o InsightFiltersNetworkDestinationIpv4Output) ToInsightFiltersNetworkDestinationIpv4OutputWithContext(ctx context.Context) InsightFiltersNetworkDestinationIpv4Output {
	return o
}

func (o InsightFiltersNetworkDestinationIpv4Output) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersNetworkDestinationIpv4] {
	return pulumix.Output[InsightFiltersNetworkDestinationIpv4]{
		OutputState: o.OutputState,
	}
}

// A finding's CIDR value.
func (o InsightFiltersNetworkDestinationIpv4Output) Cidr() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNetworkDestinationIpv4](o, func(v InsightFiltersNetworkDestinationIpv4) string { return v.Cidr })
}

type InsightFiltersNetworkDestinationIpv6 struct {
	// A finding's CIDR value.
	Cidr string `pulumi:"cidr"`
}

type InsightFiltersNetworkDestinationIpv6Args struct {
	// A finding's CIDR value.
	Cidr pulumix.Input[string] `pulumi:"cidr"`
}

func (InsightFiltersNetworkDestinationIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkDestinationIpv6)(nil)).Elem()
}

func (i InsightFiltersNetworkDestinationIpv6Args) ToInsightFiltersNetworkDestinationIpv6Output() InsightFiltersNetworkDestinationIpv6Output {
	return i.ToInsightFiltersNetworkDestinationIpv6OutputWithContext(context.Background())
}

func (i InsightFiltersNetworkDestinationIpv6Args) ToInsightFiltersNetworkDestinationIpv6OutputWithContext(ctx context.Context) InsightFiltersNetworkDestinationIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersNetworkDestinationIpv6Output)
}

func (i *InsightFiltersNetworkDestinationIpv6Args) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersNetworkDestinationIpv6Args] {
	return pulumix.Val(i)
}

type InsightFiltersNetworkDestinationIpv6Output struct{ *pulumi.OutputState }

func (InsightFiltersNetworkDestinationIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkDestinationIpv6)(nil)).Elem()
}

func (o InsightFiltersNetworkDestinationIpv6Output) ToInsightFiltersNetworkDestinationIpv6Output() InsightFiltersNetworkDestinationIpv6Output {
	return o
}

func (o InsightFiltersNetworkDestinationIpv6Output) ToInsightFiltersNetworkDestinationIpv6OutputWithContext(ctx context.Context) InsightFiltersNetworkDestinationIpv6Output {
	return o
}

func (o InsightFiltersNetworkDestinationIpv6Output) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersNetworkDestinationIpv6] {
	return pulumix.Output[InsightFiltersNetworkDestinationIpv6]{
		OutputState: o.OutputState,
	}
}

// A finding's CIDR value.
func (o InsightFiltersNetworkDestinationIpv6Output) Cidr() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNetworkDestinationIpv6](o, func(v InsightFiltersNetworkDestinationIpv6) string { return v.Cidr })
}

type InsightFiltersNetworkDestinationPort struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq *string `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte *string `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte *string `pulumi:"lte"`
}

type InsightFiltersNetworkDestinationPortArgs struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq pulumix.Input[*string] `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte pulumix.Input[*string] `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte pulumix.Input[*string] `pulumi:"lte"`
}

func (InsightFiltersNetworkDestinationPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkDestinationPort)(nil)).Elem()
}

func (i InsightFiltersNetworkDestinationPortArgs) ToInsightFiltersNetworkDestinationPortOutput() InsightFiltersNetworkDestinationPortOutput {
	return i.ToInsightFiltersNetworkDestinationPortOutputWithContext(context.Background())
}

func (i InsightFiltersNetworkDestinationPortArgs) ToInsightFiltersNetworkDestinationPortOutputWithContext(ctx context.Context) InsightFiltersNetworkDestinationPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersNetworkDestinationPortOutput)
}

func (i *InsightFiltersNetworkDestinationPortArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersNetworkDestinationPortArgs] {
	return pulumix.Val(i)
}

type InsightFiltersNetworkDestinationPortOutput struct{ *pulumi.OutputState }

func (InsightFiltersNetworkDestinationPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkDestinationPort)(nil)).Elem()
}

func (o InsightFiltersNetworkDestinationPortOutput) ToInsightFiltersNetworkDestinationPortOutput() InsightFiltersNetworkDestinationPortOutput {
	return o
}

func (o InsightFiltersNetworkDestinationPortOutput) ToInsightFiltersNetworkDestinationPortOutputWithContext(ctx context.Context) InsightFiltersNetworkDestinationPortOutput {
	return o
}

func (o InsightFiltersNetworkDestinationPortOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersNetworkDestinationPort] {
	return pulumix.Output[InsightFiltersNetworkDestinationPort]{
		OutputState: o.OutputState,
	}
}

// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersNetworkDestinationPortOutput) Eq() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersNetworkDestinationPort](o, func(v InsightFiltersNetworkDestinationPort) *string { return v.Eq })
}

// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersNetworkDestinationPortOutput) Gte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersNetworkDestinationPort](o, func(v InsightFiltersNetworkDestinationPort) *string { return v.Gte })
}

// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersNetworkDestinationPortOutput) Lte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersNetworkDestinationPort](o, func(v InsightFiltersNetworkDestinationPort) *string { return v.Lte })
}

type InsightFiltersNetworkDirection struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersNetworkDirectionArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersNetworkDirectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkDirection)(nil)).Elem()
}

func (i InsightFiltersNetworkDirectionArgs) ToInsightFiltersNetworkDirectionOutput() InsightFiltersNetworkDirectionOutput {
	return i.ToInsightFiltersNetworkDirectionOutputWithContext(context.Background())
}

func (i InsightFiltersNetworkDirectionArgs) ToInsightFiltersNetworkDirectionOutputWithContext(ctx context.Context) InsightFiltersNetworkDirectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersNetworkDirectionOutput)
}

func (i *InsightFiltersNetworkDirectionArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersNetworkDirectionArgs] {
	return pulumix.Val(i)
}

type InsightFiltersNetworkDirectionOutput struct{ *pulumi.OutputState }

func (InsightFiltersNetworkDirectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkDirection)(nil)).Elem()
}

func (o InsightFiltersNetworkDirectionOutput) ToInsightFiltersNetworkDirectionOutput() InsightFiltersNetworkDirectionOutput {
	return o
}

func (o InsightFiltersNetworkDirectionOutput) ToInsightFiltersNetworkDirectionOutputWithContext(ctx context.Context) InsightFiltersNetworkDirectionOutput {
	return o
}

func (o InsightFiltersNetworkDirectionOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersNetworkDirection] {
	return pulumix.Output[InsightFiltersNetworkDirection]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersNetworkDirectionOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNetworkDirection](o, func(v InsightFiltersNetworkDirection) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersNetworkDirectionOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNetworkDirection](o, func(v InsightFiltersNetworkDirection) string { return v.Value })
}

type InsightFiltersNetworkProtocol struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersNetworkProtocolArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersNetworkProtocolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkProtocol)(nil)).Elem()
}

func (i InsightFiltersNetworkProtocolArgs) ToInsightFiltersNetworkProtocolOutput() InsightFiltersNetworkProtocolOutput {
	return i.ToInsightFiltersNetworkProtocolOutputWithContext(context.Background())
}

func (i InsightFiltersNetworkProtocolArgs) ToInsightFiltersNetworkProtocolOutputWithContext(ctx context.Context) InsightFiltersNetworkProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersNetworkProtocolOutput)
}

func (i *InsightFiltersNetworkProtocolArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersNetworkProtocolArgs] {
	return pulumix.Val(i)
}

type InsightFiltersNetworkProtocolOutput struct{ *pulumi.OutputState }

func (InsightFiltersNetworkProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkProtocol)(nil)).Elem()
}

func (o InsightFiltersNetworkProtocolOutput) ToInsightFiltersNetworkProtocolOutput() InsightFiltersNetworkProtocolOutput {
	return o
}

func (o InsightFiltersNetworkProtocolOutput) ToInsightFiltersNetworkProtocolOutputWithContext(ctx context.Context) InsightFiltersNetworkProtocolOutput {
	return o
}

func (o InsightFiltersNetworkProtocolOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersNetworkProtocol] {
	return pulumix.Output[InsightFiltersNetworkProtocol]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersNetworkProtocolOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNetworkProtocol](o, func(v InsightFiltersNetworkProtocol) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersNetworkProtocolOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNetworkProtocol](o, func(v InsightFiltersNetworkProtocol) string { return v.Value })
}

type InsightFiltersNetworkSourceDomain struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersNetworkSourceDomainArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersNetworkSourceDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkSourceDomain)(nil)).Elem()
}

func (i InsightFiltersNetworkSourceDomainArgs) ToInsightFiltersNetworkSourceDomainOutput() InsightFiltersNetworkSourceDomainOutput {
	return i.ToInsightFiltersNetworkSourceDomainOutputWithContext(context.Background())
}

func (i InsightFiltersNetworkSourceDomainArgs) ToInsightFiltersNetworkSourceDomainOutputWithContext(ctx context.Context) InsightFiltersNetworkSourceDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersNetworkSourceDomainOutput)
}

func (i *InsightFiltersNetworkSourceDomainArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersNetworkSourceDomainArgs] {
	return pulumix.Val(i)
}

type InsightFiltersNetworkSourceDomainOutput struct{ *pulumi.OutputState }

func (InsightFiltersNetworkSourceDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkSourceDomain)(nil)).Elem()
}

func (o InsightFiltersNetworkSourceDomainOutput) ToInsightFiltersNetworkSourceDomainOutput() InsightFiltersNetworkSourceDomainOutput {
	return o
}

func (o InsightFiltersNetworkSourceDomainOutput) ToInsightFiltersNetworkSourceDomainOutputWithContext(ctx context.Context) InsightFiltersNetworkSourceDomainOutput {
	return o
}

func (o InsightFiltersNetworkSourceDomainOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersNetworkSourceDomain] {
	return pulumix.Output[InsightFiltersNetworkSourceDomain]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersNetworkSourceDomainOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNetworkSourceDomain](o, func(v InsightFiltersNetworkSourceDomain) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersNetworkSourceDomainOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNetworkSourceDomain](o, func(v InsightFiltersNetworkSourceDomain) string { return v.Value })
}

type InsightFiltersNetworkSourceIpv4 struct {
	// A finding's CIDR value.
	Cidr string `pulumi:"cidr"`
}

type InsightFiltersNetworkSourceIpv4Args struct {
	// A finding's CIDR value.
	Cidr pulumix.Input[string] `pulumi:"cidr"`
}

func (InsightFiltersNetworkSourceIpv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkSourceIpv4)(nil)).Elem()
}

func (i InsightFiltersNetworkSourceIpv4Args) ToInsightFiltersNetworkSourceIpv4Output() InsightFiltersNetworkSourceIpv4Output {
	return i.ToInsightFiltersNetworkSourceIpv4OutputWithContext(context.Background())
}

func (i InsightFiltersNetworkSourceIpv4Args) ToInsightFiltersNetworkSourceIpv4OutputWithContext(ctx context.Context) InsightFiltersNetworkSourceIpv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersNetworkSourceIpv4Output)
}

func (i *InsightFiltersNetworkSourceIpv4Args) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersNetworkSourceIpv4Args] {
	return pulumix.Val(i)
}

type InsightFiltersNetworkSourceIpv4Output struct{ *pulumi.OutputState }

func (InsightFiltersNetworkSourceIpv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkSourceIpv4)(nil)).Elem()
}

func (o InsightFiltersNetworkSourceIpv4Output) ToInsightFiltersNetworkSourceIpv4Output() InsightFiltersNetworkSourceIpv4Output {
	return o
}

func (o InsightFiltersNetworkSourceIpv4Output) ToInsightFiltersNetworkSourceIpv4OutputWithContext(ctx context.Context) InsightFiltersNetworkSourceIpv4Output {
	return o
}

func (o InsightFiltersNetworkSourceIpv4Output) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersNetworkSourceIpv4] {
	return pulumix.Output[InsightFiltersNetworkSourceIpv4]{
		OutputState: o.OutputState,
	}
}

// A finding's CIDR value.
func (o InsightFiltersNetworkSourceIpv4Output) Cidr() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNetworkSourceIpv4](o, func(v InsightFiltersNetworkSourceIpv4) string { return v.Cidr })
}

type InsightFiltersNetworkSourceIpv6 struct {
	// A finding's CIDR value.
	Cidr string `pulumi:"cidr"`
}

type InsightFiltersNetworkSourceIpv6Args struct {
	// A finding's CIDR value.
	Cidr pulumix.Input[string] `pulumi:"cidr"`
}

func (InsightFiltersNetworkSourceIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkSourceIpv6)(nil)).Elem()
}

func (i InsightFiltersNetworkSourceIpv6Args) ToInsightFiltersNetworkSourceIpv6Output() InsightFiltersNetworkSourceIpv6Output {
	return i.ToInsightFiltersNetworkSourceIpv6OutputWithContext(context.Background())
}

func (i InsightFiltersNetworkSourceIpv6Args) ToInsightFiltersNetworkSourceIpv6OutputWithContext(ctx context.Context) InsightFiltersNetworkSourceIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersNetworkSourceIpv6Output)
}

func (i *InsightFiltersNetworkSourceIpv6Args) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersNetworkSourceIpv6Args] {
	return pulumix.Val(i)
}

type InsightFiltersNetworkSourceIpv6Output struct{ *pulumi.OutputState }

func (InsightFiltersNetworkSourceIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkSourceIpv6)(nil)).Elem()
}

func (o InsightFiltersNetworkSourceIpv6Output) ToInsightFiltersNetworkSourceIpv6Output() InsightFiltersNetworkSourceIpv6Output {
	return o
}

func (o InsightFiltersNetworkSourceIpv6Output) ToInsightFiltersNetworkSourceIpv6OutputWithContext(ctx context.Context) InsightFiltersNetworkSourceIpv6Output {
	return o
}

func (o InsightFiltersNetworkSourceIpv6Output) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersNetworkSourceIpv6] {
	return pulumix.Output[InsightFiltersNetworkSourceIpv6]{
		OutputState: o.OutputState,
	}
}

// A finding's CIDR value.
func (o InsightFiltersNetworkSourceIpv6Output) Cidr() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNetworkSourceIpv6](o, func(v InsightFiltersNetworkSourceIpv6) string { return v.Cidr })
}

type InsightFiltersNetworkSourceMac struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersNetworkSourceMacArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersNetworkSourceMacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkSourceMac)(nil)).Elem()
}

func (i InsightFiltersNetworkSourceMacArgs) ToInsightFiltersNetworkSourceMacOutput() InsightFiltersNetworkSourceMacOutput {
	return i.ToInsightFiltersNetworkSourceMacOutputWithContext(context.Background())
}

func (i InsightFiltersNetworkSourceMacArgs) ToInsightFiltersNetworkSourceMacOutputWithContext(ctx context.Context) InsightFiltersNetworkSourceMacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersNetworkSourceMacOutput)
}

func (i *InsightFiltersNetworkSourceMacArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersNetworkSourceMacArgs] {
	return pulumix.Val(i)
}

type InsightFiltersNetworkSourceMacOutput struct{ *pulumi.OutputState }

func (InsightFiltersNetworkSourceMacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkSourceMac)(nil)).Elem()
}

func (o InsightFiltersNetworkSourceMacOutput) ToInsightFiltersNetworkSourceMacOutput() InsightFiltersNetworkSourceMacOutput {
	return o
}

func (o InsightFiltersNetworkSourceMacOutput) ToInsightFiltersNetworkSourceMacOutputWithContext(ctx context.Context) InsightFiltersNetworkSourceMacOutput {
	return o
}

func (o InsightFiltersNetworkSourceMacOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersNetworkSourceMac] {
	return pulumix.Output[InsightFiltersNetworkSourceMac]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersNetworkSourceMacOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNetworkSourceMac](o, func(v InsightFiltersNetworkSourceMac) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersNetworkSourceMacOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNetworkSourceMac](o, func(v InsightFiltersNetworkSourceMac) string { return v.Value })
}

type InsightFiltersNetworkSourcePort struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq *string `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte *string `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte *string `pulumi:"lte"`
}

type InsightFiltersNetworkSourcePortArgs struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq pulumix.Input[*string] `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte pulumix.Input[*string] `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte pulumix.Input[*string] `pulumi:"lte"`
}

func (InsightFiltersNetworkSourcePortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkSourcePort)(nil)).Elem()
}

func (i InsightFiltersNetworkSourcePortArgs) ToInsightFiltersNetworkSourcePortOutput() InsightFiltersNetworkSourcePortOutput {
	return i.ToInsightFiltersNetworkSourcePortOutputWithContext(context.Background())
}

func (i InsightFiltersNetworkSourcePortArgs) ToInsightFiltersNetworkSourcePortOutputWithContext(ctx context.Context) InsightFiltersNetworkSourcePortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersNetworkSourcePortOutput)
}

func (i *InsightFiltersNetworkSourcePortArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersNetworkSourcePortArgs] {
	return pulumix.Val(i)
}

type InsightFiltersNetworkSourcePortOutput struct{ *pulumi.OutputState }

func (InsightFiltersNetworkSourcePortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNetworkSourcePort)(nil)).Elem()
}

func (o InsightFiltersNetworkSourcePortOutput) ToInsightFiltersNetworkSourcePortOutput() InsightFiltersNetworkSourcePortOutput {
	return o
}

func (o InsightFiltersNetworkSourcePortOutput) ToInsightFiltersNetworkSourcePortOutputWithContext(ctx context.Context) InsightFiltersNetworkSourcePortOutput {
	return o
}

func (o InsightFiltersNetworkSourcePortOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersNetworkSourcePort] {
	return pulumix.Output[InsightFiltersNetworkSourcePort]{
		OutputState: o.OutputState,
	}
}

// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersNetworkSourcePortOutput) Eq() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersNetworkSourcePort](o, func(v InsightFiltersNetworkSourcePort) *string { return v.Eq })
}

// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersNetworkSourcePortOutput) Gte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersNetworkSourcePort](o, func(v InsightFiltersNetworkSourcePort) *string { return v.Gte })
}

// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersNetworkSourcePortOutput) Lte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersNetworkSourcePort](o, func(v InsightFiltersNetworkSourcePort) *string { return v.Lte })
}

type InsightFiltersNoteText struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersNoteTextArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersNoteTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNoteText)(nil)).Elem()
}

func (i InsightFiltersNoteTextArgs) ToInsightFiltersNoteTextOutput() InsightFiltersNoteTextOutput {
	return i.ToInsightFiltersNoteTextOutputWithContext(context.Background())
}

func (i InsightFiltersNoteTextArgs) ToInsightFiltersNoteTextOutputWithContext(ctx context.Context) InsightFiltersNoteTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersNoteTextOutput)
}

func (i *InsightFiltersNoteTextArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersNoteTextArgs] {
	return pulumix.Val(i)
}

type InsightFiltersNoteTextOutput struct{ *pulumi.OutputState }

func (InsightFiltersNoteTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNoteText)(nil)).Elem()
}

func (o InsightFiltersNoteTextOutput) ToInsightFiltersNoteTextOutput() InsightFiltersNoteTextOutput {
	return o
}

func (o InsightFiltersNoteTextOutput) ToInsightFiltersNoteTextOutputWithContext(ctx context.Context) InsightFiltersNoteTextOutput {
	return o
}

func (o InsightFiltersNoteTextOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersNoteText] {
	return pulumix.Output[InsightFiltersNoteText]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersNoteTextOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNoteText](o, func(v InsightFiltersNoteText) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersNoteTextOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNoteText](o, func(v InsightFiltersNoteText) string { return v.Value })
}

type InsightFiltersNoteUpdatedAt struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange *InsightFiltersNoteUpdatedAtDateRange `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End *string `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start *string `pulumi:"start"`
}

type InsightFiltersNoteUpdatedAtArgs struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange pulumix.Input[*InsightFiltersNoteUpdatedAtDateRangeArgs] `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End pulumix.Input[*string] `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start pulumix.Input[*string] `pulumi:"start"`
}

func (InsightFiltersNoteUpdatedAtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNoteUpdatedAt)(nil)).Elem()
}

func (i InsightFiltersNoteUpdatedAtArgs) ToInsightFiltersNoteUpdatedAtOutput() InsightFiltersNoteUpdatedAtOutput {
	return i.ToInsightFiltersNoteUpdatedAtOutputWithContext(context.Background())
}

func (i InsightFiltersNoteUpdatedAtArgs) ToInsightFiltersNoteUpdatedAtOutputWithContext(ctx context.Context) InsightFiltersNoteUpdatedAtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersNoteUpdatedAtOutput)
}

func (i *InsightFiltersNoteUpdatedAtArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersNoteUpdatedAtArgs] {
	return pulumix.Val(i)
}

type InsightFiltersNoteUpdatedAtOutput struct{ *pulumi.OutputState }

func (InsightFiltersNoteUpdatedAtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNoteUpdatedAt)(nil)).Elem()
}

func (o InsightFiltersNoteUpdatedAtOutput) ToInsightFiltersNoteUpdatedAtOutput() InsightFiltersNoteUpdatedAtOutput {
	return o
}

func (o InsightFiltersNoteUpdatedAtOutput) ToInsightFiltersNoteUpdatedAtOutputWithContext(ctx context.Context) InsightFiltersNoteUpdatedAtOutput {
	return o
}

func (o InsightFiltersNoteUpdatedAtOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersNoteUpdatedAt] {
	return pulumix.Output[InsightFiltersNoteUpdatedAt]{
		OutputState: o.OutputState,
	}
}

// A configuration block of the date range for the date filter. See dateRange below for more details.
func (o InsightFiltersNoteUpdatedAtOutput) DateRange() pulumix.GPtrOutput[InsightFiltersNoteUpdatedAtDateRange, InsightFiltersNoteUpdatedAtDateRangeOutput] {
	value := pulumix.Apply[InsightFiltersNoteUpdatedAt](o, func(v InsightFiltersNoteUpdatedAt) *InsightFiltersNoteUpdatedAtDateRange { return v.DateRange })
	return pulumix.GPtrOutput[InsightFiltersNoteUpdatedAtDateRange, InsightFiltersNoteUpdatedAtDateRangeOutput]{OutputState: value.OutputState}
}

// An end date for the date filter. Required with `start` if `dateRange` is not specified.
func (o InsightFiltersNoteUpdatedAtOutput) End() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersNoteUpdatedAt](o, func(v InsightFiltersNoteUpdatedAt) *string { return v.End })
}

// A start date for the date filter. Required with `end` if `dateRange` is not specified.
func (o InsightFiltersNoteUpdatedAtOutput) Start() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersNoteUpdatedAt](o, func(v InsightFiltersNoteUpdatedAt) *string { return v.Start })
}

type InsightFiltersNoteUpdatedAtDateRange struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit string `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value int `pulumi:"value"`
}

type InsightFiltersNoteUpdatedAtDateRangeArgs struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (InsightFiltersNoteUpdatedAtDateRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNoteUpdatedAtDateRange)(nil)).Elem()
}

func (i InsightFiltersNoteUpdatedAtDateRangeArgs) ToInsightFiltersNoteUpdatedAtDateRangeOutput() InsightFiltersNoteUpdatedAtDateRangeOutput {
	return i.ToInsightFiltersNoteUpdatedAtDateRangeOutputWithContext(context.Background())
}

func (i InsightFiltersNoteUpdatedAtDateRangeArgs) ToInsightFiltersNoteUpdatedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersNoteUpdatedAtDateRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersNoteUpdatedAtDateRangeOutput)
}

func (i *InsightFiltersNoteUpdatedAtDateRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersNoteUpdatedAtDateRangeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersNoteUpdatedAtDateRangeOutput struct{ *pulumi.OutputState }

func (InsightFiltersNoteUpdatedAtDateRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNoteUpdatedAtDateRange)(nil)).Elem()
}

func (o InsightFiltersNoteUpdatedAtDateRangeOutput) ToInsightFiltersNoteUpdatedAtDateRangeOutput() InsightFiltersNoteUpdatedAtDateRangeOutput {
	return o
}

func (o InsightFiltersNoteUpdatedAtDateRangeOutput) ToInsightFiltersNoteUpdatedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersNoteUpdatedAtDateRangeOutput {
	return o
}

func (o InsightFiltersNoteUpdatedAtDateRangeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersNoteUpdatedAtDateRange] {
	return pulumix.Output[InsightFiltersNoteUpdatedAtDateRange]{
		OutputState: o.OutputState,
	}
}

// A date range unit for the date filter. Valid values: `DAYS`.
func (o InsightFiltersNoteUpdatedAtDateRangeOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNoteUpdatedAtDateRange](o, func(v InsightFiltersNoteUpdatedAtDateRange) string { return v.Unit })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersNoteUpdatedAtDateRangeOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[InsightFiltersNoteUpdatedAtDateRange](o, func(v InsightFiltersNoteUpdatedAtDateRange) int { return v.Value })
}

type InsightFiltersNoteUpdatedBy struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersNoteUpdatedByArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersNoteUpdatedByArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNoteUpdatedBy)(nil)).Elem()
}

func (i InsightFiltersNoteUpdatedByArgs) ToInsightFiltersNoteUpdatedByOutput() InsightFiltersNoteUpdatedByOutput {
	return i.ToInsightFiltersNoteUpdatedByOutputWithContext(context.Background())
}

func (i InsightFiltersNoteUpdatedByArgs) ToInsightFiltersNoteUpdatedByOutputWithContext(ctx context.Context) InsightFiltersNoteUpdatedByOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersNoteUpdatedByOutput)
}

func (i *InsightFiltersNoteUpdatedByArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersNoteUpdatedByArgs] {
	return pulumix.Val(i)
}

type InsightFiltersNoteUpdatedByOutput struct{ *pulumi.OutputState }

func (InsightFiltersNoteUpdatedByOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersNoteUpdatedBy)(nil)).Elem()
}

func (o InsightFiltersNoteUpdatedByOutput) ToInsightFiltersNoteUpdatedByOutput() InsightFiltersNoteUpdatedByOutput {
	return o
}

func (o InsightFiltersNoteUpdatedByOutput) ToInsightFiltersNoteUpdatedByOutputWithContext(ctx context.Context) InsightFiltersNoteUpdatedByOutput {
	return o
}

func (o InsightFiltersNoteUpdatedByOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersNoteUpdatedBy] {
	return pulumix.Output[InsightFiltersNoteUpdatedBy]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersNoteUpdatedByOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNoteUpdatedBy](o, func(v InsightFiltersNoteUpdatedBy) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersNoteUpdatedByOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersNoteUpdatedBy](o, func(v InsightFiltersNoteUpdatedBy) string { return v.Value })
}

type InsightFiltersProcessLaunchedAt struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange *InsightFiltersProcessLaunchedAtDateRange `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End *string `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start *string `pulumi:"start"`
}

type InsightFiltersProcessLaunchedAtArgs struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange pulumix.Input[*InsightFiltersProcessLaunchedAtDateRangeArgs] `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End pulumix.Input[*string] `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start pulumix.Input[*string] `pulumi:"start"`
}

func (InsightFiltersProcessLaunchedAtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessLaunchedAt)(nil)).Elem()
}

func (i InsightFiltersProcessLaunchedAtArgs) ToInsightFiltersProcessLaunchedAtOutput() InsightFiltersProcessLaunchedAtOutput {
	return i.ToInsightFiltersProcessLaunchedAtOutputWithContext(context.Background())
}

func (i InsightFiltersProcessLaunchedAtArgs) ToInsightFiltersProcessLaunchedAtOutputWithContext(ctx context.Context) InsightFiltersProcessLaunchedAtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersProcessLaunchedAtOutput)
}

func (i *InsightFiltersProcessLaunchedAtArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersProcessLaunchedAtArgs] {
	return pulumix.Val(i)
}

type InsightFiltersProcessLaunchedAtOutput struct{ *pulumi.OutputState }

func (InsightFiltersProcessLaunchedAtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessLaunchedAt)(nil)).Elem()
}

func (o InsightFiltersProcessLaunchedAtOutput) ToInsightFiltersProcessLaunchedAtOutput() InsightFiltersProcessLaunchedAtOutput {
	return o
}

func (o InsightFiltersProcessLaunchedAtOutput) ToInsightFiltersProcessLaunchedAtOutputWithContext(ctx context.Context) InsightFiltersProcessLaunchedAtOutput {
	return o
}

func (o InsightFiltersProcessLaunchedAtOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersProcessLaunchedAt] {
	return pulumix.Output[InsightFiltersProcessLaunchedAt]{
		OutputState: o.OutputState,
	}
}

// A configuration block of the date range for the date filter. See dateRange below for more details.
func (o InsightFiltersProcessLaunchedAtOutput) DateRange() pulumix.GPtrOutput[InsightFiltersProcessLaunchedAtDateRange, InsightFiltersProcessLaunchedAtDateRangeOutput] {
	value := pulumix.Apply[InsightFiltersProcessLaunchedAt](o, func(v InsightFiltersProcessLaunchedAt) *InsightFiltersProcessLaunchedAtDateRange { return v.DateRange })
	return pulumix.GPtrOutput[InsightFiltersProcessLaunchedAtDateRange, InsightFiltersProcessLaunchedAtDateRangeOutput]{OutputState: value.OutputState}
}

// An end date for the date filter. Required with `start` if `dateRange` is not specified.
func (o InsightFiltersProcessLaunchedAtOutput) End() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersProcessLaunchedAt](o, func(v InsightFiltersProcessLaunchedAt) *string { return v.End })
}

// A start date for the date filter. Required with `end` if `dateRange` is not specified.
func (o InsightFiltersProcessLaunchedAtOutput) Start() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersProcessLaunchedAt](o, func(v InsightFiltersProcessLaunchedAt) *string { return v.Start })
}

type InsightFiltersProcessLaunchedAtDateRange struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit string `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value int `pulumi:"value"`
}

type InsightFiltersProcessLaunchedAtDateRangeArgs struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (InsightFiltersProcessLaunchedAtDateRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessLaunchedAtDateRange)(nil)).Elem()
}

func (i InsightFiltersProcessLaunchedAtDateRangeArgs) ToInsightFiltersProcessLaunchedAtDateRangeOutput() InsightFiltersProcessLaunchedAtDateRangeOutput {
	return i.ToInsightFiltersProcessLaunchedAtDateRangeOutputWithContext(context.Background())
}

func (i InsightFiltersProcessLaunchedAtDateRangeArgs) ToInsightFiltersProcessLaunchedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersProcessLaunchedAtDateRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersProcessLaunchedAtDateRangeOutput)
}

func (i *InsightFiltersProcessLaunchedAtDateRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersProcessLaunchedAtDateRangeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersProcessLaunchedAtDateRangeOutput struct{ *pulumi.OutputState }

func (InsightFiltersProcessLaunchedAtDateRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessLaunchedAtDateRange)(nil)).Elem()
}

func (o InsightFiltersProcessLaunchedAtDateRangeOutput) ToInsightFiltersProcessLaunchedAtDateRangeOutput() InsightFiltersProcessLaunchedAtDateRangeOutput {
	return o
}

func (o InsightFiltersProcessLaunchedAtDateRangeOutput) ToInsightFiltersProcessLaunchedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersProcessLaunchedAtDateRangeOutput {
	return o
}

func (o InsightFiltersProcessLaunchedAtDateRangeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersProcessLaunchedAtDateRange] {
	return pulumix.Output[InsightFiltersProcessLaunchedAtDateRange]{
		OutputState: o.OutputState,
	}
}

// A date range unit for the date filter. Valid values: `DAYS`.
func (o InsightFiltersProcessLaunchedAtDateRangeOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersProcessLaunchedAtDateRange](o, func(v InsightFiltersProcessLaunchedAtDateRange) string { return v.Unit })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersProcessLaunchedAtDateRangeOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[InsightFiltersProcessLaunchedAtDateRange](o, func(v InsightFiltersProcessLaunchedAtDateRange) int { return v.Value })
}

type InsightFiltersProcessName struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersProcessNameArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersProcessNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessName)(nil)).Elem()
}

func (i InsightFiltersProcessNameArgs) ToInsightFiltersProcessNameOutput() InsightFiltersProcessNameOutput {
	return i.ToInsightFiltersProcessNameOutputWithContext(context.Background())
}

func (i InsightFiltersProcessNameArgs) ToInsightFiltersProcessNameOutputWithContext(ctx context.Context) InsightFiltersProcessNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersProcessNameOutput)
}

func (i *InsightFiltersProcessNameArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersProcessNameArgs] {
	return pulumix.Val(i)
}

type InsightFiltersProcessNameOutput struct{ *pulumi.OutputState }

func (InsightFiltersProcessNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessName)(nil)).Elem()
}

func (o InsightFiltersProcessNameOutput) ToInsightFiltersProcessNameOutput() InsightFiltersProcessNameOutput {
	return o
}

func (o InsightFiltersProcessNameOutput) ToInsightFiltersProcessNameOutputWithContext(ctx context.Context) InsightFiltersProcessNameOutput {
	return o
}

func (o InsightFiltersProcessNameOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersProcessName] {
	return pulumix.Output[InsightFiltersProcessName]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersProcessNameOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersProcessName](o, func(v InsightFiltersProcessName) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersProcessNameOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersProcessName](o, func(v InsightFiltersProcessName) string { return v.Value })
}

type InsightFiltersProcessParentPid struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq *string `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte *string `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte *string `pulumi:"lte"`
}

type InsightFiltersProcessParentPidArgs struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq pulumix.Input[*string] `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte pulumix.Input[*string] `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte pulumix.Input[*string] `pulumi:"lte"`
}

func (InsightFiltersProcessParentPidArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessParentPid)(nil)).Elem()
}

func (i InsightFiltersProcessParentPidArgs) ToInsightFiltersProcessParentPidOutput() InsightFiltersProcessParentPidOutput {
	return i.ToInsightFiltersProcessParentPidOutputWithContext(context.Background())
}

func (i InsightFiltersProcessParentPidArgs) ToInsightFiltersProcessParentPidOutputWithContext(ctx context.Context) InsightFiltersProcessParentPidOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersProcessParentPidOutput)
}

func (i *InsightFiltersProcessParentPidArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersProcessParentPidArgs] {
	return pulumix.Val(i)
}

type InsightFiltersProcessParentPidOutput struct{ *pulumi.OutputState }

func (InsightFiltersProcessParentPidOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessParentPid)(nil)).Elem()
}

func (o InsightFiltersProcessParentPidOutput) ToInsightFiltersProcessParentPidOutput() InsightFiltersProcessParentPidOutput {
	return o
}

func (o InsightFiltersProcessParentPidOutput) ToInsightFiltersProcessParentPidOutputWithContext(ctx context.Context) InsightFiltersProcessParentPidOutput {
	return o
}

func (o InsightFiltersProcessParentPidOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersProcessParentPid] {
	return pulumix.Output[InsightFiltersProcessParentPid]{
		OutputState: o.OutputState,
	}
}

// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersProcessParentPidOutput) Eq() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersProcessParentPid](o, func(v InsightFiltersProcessParentPid) *string { return v.Eq })
}

// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersProcessParentPidOutput) Gte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersProcessParentPid](o, func(v InsightFiltersProcessParentPid) *string { return v.Gte })
}

// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersProcessParentPidOutput) Lte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersProcessParentPid](o, func(v InsightFiltersProcessParentPid) *string { return v.Lte })
}

type InsightFiltersProcessPath struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersProcessPathArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersProcessPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessPath)(nil)).Elem()
}

func (i InsightFiltersProcessPathArgs) ToInsightFiltersProcessPathOutput() InsightFiltersProcessPathOutput {
	return i.ToInsightFiltersProcessPathOutputWithContext(context.Background())
}

func (i InsightFiltersProcessPathArgs) ToInsightFiltersProcessPathOutputWithContext(ctx context.Context) InsightFiltersProcessPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersProcessPathOutput)
}

func (i *InsightFiltersProcessPathArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersProcessPathArgs] {
	return pulumix.Val(i)
}

type InsightFiltersProcessPathOutput struct{ *pulumi.OutputState }

func (InsightFiltersProcessPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessPath)(nil)).Elem()
}

func (o InsightFiltersProcessPathOutput) ToInsightFiltersProcessPathOutput() InsightFiltersProcessPathOutput {
	return o
}

func (o InsightFiltersProcessPathOutput) ToInsightFiltersProcessPathOutputWithContext(ctx context.Context) InsightFiltersProcessPathOutput {
	return o
}

func (o InsightFiltersProcessPathOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersProcessPath] {
	return pulumix.Output[InsightFiltersProcessPath]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersProcessPathOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersProcessPath](o, func(v InsightFiltersProcessPath) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersProcessPathOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersProcessPath](o, func(v InsightFiltersProcessPath) string { return v.Value })
}

type InsightFiltersProcessPid struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq *string `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte *string `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte *string `pulumi:"lte"`
}

type InsightFiltersProcessPidArgs struct {
	// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
	Eq pulumix.Input[*string] `pulumi:"eq"`
	// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Gte pulumix.Input[*string] `pulumi:"gte"`
	// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
	Lte pulumix.Input[*string] `pulumi:"lte"`
}

func (InsightFiltersProcessPidArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessPid)(nil)).Elem()
}

func (i InsightFiltersProcessPidArgs) ToInsightFiltersProcessPidOutput() InsightFiltersProcessPidOutput {
	return i.ToInsightFiltersProcessPidOutputWithContext(context.Background())
}

func (i InsightFiltersProcessPidArgs) ToInsightFiltersProcessPidOutputWithContext(ctx context.Context) InsightFiltersProcessPidOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersProcessPidOutput)
}

func (i *InsightFiltersProcessPidArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersProcessPidArgs] {
	return pulumix.Val(i)
}

type InsightFiltersProcessPidOutput struct{ *pulumi.OutputState }

func (InsightFiltersProcessPidOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessPid)(nil)).Elem()
}

func (o InsightFiltersProcessPidOutput) ToInsightFiltersProcessPidOutput() InsightFiltersProcessPidOutput {
	return o
}

func (o InsightFiltersProcessPidOutput) ToInsightFiltersProcessPidOutputWithContext(ctx context.Context) InsightFiltersProcessPidOutput {
	return o
}

func (o InsightFiltersProcessPidOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersProcessPid] {
	return pulumix.Output[InsightFiltersProcessPid]{
		OutputState: o.OutputState,
	}
}

// The equal-to condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersProcessPidOutput) Eq() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersProcessPid](o, func(v InsightFiltersProcessPid) *string { return v.Eq })
}

// The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersProcessPidOutput) Gte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersProcessPid](o, func(v InsightFiltersProcessPid) *string { return v.Gte })
}

// The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
func (o InsightFiltersProcessPidOutput) Lte() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersProcessPid](o, func(v InsightFiltersProcessPid) *string { return v.Lte })
}

type InsightFiltersProcessTerminatedAt struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange *InsightFiltersProcessTerminatedAtDateRange `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End *string `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start *string `pulumi:"start"`
}

type InsightFiltersProcessTerminatedAtArgs struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange pulumix.Input[*InsightFiltersProcessTerminatedAtDateRangeArgs] `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End pulumix.Input[*string] `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start pulumix.Input[*string] `pulumi:"start"`
}

func (InsightFiltersProcessTerminatedAtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessTerminatedAt)(nil)).Elem()
}

func (i InsightFiltersProcessTerminatedAtArgs) ToInsightFiltersProcessTerminatedAtOutput() InsightFiltersProcessTerminatedAtOutput {
	return i.ToInsightFiltersProcessTerminatedAtOutputWithContext(context.Background())
}

func (i InsightFiltersProcessTerminatedAtArgs) ToInsightFiltersProcessTerminatedAtOutputWithContext(ctx context.Context) InsightFiltersProcessTerminatedAtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersProcessTerminatedAtOutput)
}

func (i *InsightFiltersProcessTerminatedAtArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersProcessTerminatedAtArgs] {
	return pulumix.Val(i)
}

type InsightFiltersProcessTerminatedAtOutput struct{ *pulumi.OutputState }

func (InsightFiltersProcessTerminatedAtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessTerminatedAt)(nil)).Elem()
}

func (o InsightFiltersProcessTerminatedAtOutput) ToInsightFiltersProcessTerminatedAtOutput() InsightFiltersProcessTerminatedAtOutput {
	return o
}

func (o InsightFiltersProcessTerminatedAtOutput) ToInsightFiltersProcessTerminatedAtOutputWithContext(ctx context.Context) InsightFiltersProcessTerminatedAtOutput {
	return o
}

func (o InsightFiltersProcessTerminatedAtOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersProcessTerminatedAt] {
	return pulumix.Output[InsightFiltersProcessTerminatedAt]{
		OutputState: o.OutputState,
	}
}

// A configuration block of the date range for the date filter. See dateRange below for more details.
func (o InsightFiltersProcessTerminatedAtOutput) DateRange() pulumix.GPtrOutput[InsightFiltersProcessTerminatedAtDateRange, InsightFiltersProcessTerminatedAtDateRangeOutput] {
	value := pulumix.Apply[InsightFiltersProcessTerminatedAt](o, func(v InsightFiltersProcessTerminatedAt) *InsightFiltersProcessTerminatedAtDateRange {
		return v.DateRange
	})
	return pulumix.GPtrOutput[InsightFiltersProcessTerminatedAtDateRange, InsightFiltersProcessTerminatedAtDateRangeOutput]{OutputState: value.OutputState}
}

// An end date for the date filter. Required with `start` if `dateRange` is not specified.
func (o InsightFiltersProcessTerminatedAtOutput) End() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersProcessTerminatedAt](o, func(v InsightFiltersProcessTerminatedAt) *string { return v.End })
}

// A start date for the date filter. Required with `end` if `dateRange` is not specified.
func (o InsightFiltersProcessTerminatedAtOutput) Start() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersProcessTerminatedAt](o, func(v InsightFiltersProcessTerminatedAt) *string { return v.Start })
}

type InsightFiltersProcessTerminatedAtDateRange struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit string `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value int `pulumi:"value"`
}

type InsightFiltersProcessTerminatedAtDateRangeArgs struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (InsightFiltersProcessTerminatedAtDateRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessTerminatedAtDateRange)(nil)).Elem()
}

func (i InsightFiltersProcessTerminatedAtDateRangeArgs) ToInsightFiltersProcessTerminatedAtDateRangeOutput() InsightFiltersProcessTerminatedAtDateRangeOutput {
	return i.ToInsightFiltersProcessTerminatedAtDateRangeOutputWithContext(context.Background())
}

func (i InsightFiltersProcessTerminatedAtDateRangeArgs) ToInsightFiltersProcessTerminatedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersProcessTerminatedAtDateRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersProcessTerminatedAtDateRangeOutput)
}

func (i *InsightFiltersProcessTerminatedAtDateRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersProcessTerminatedAtDateRangeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersProcessTerminatedAtDateRangeOutput struct{ *pulumi.OutputState }

func (InsightFiltersProcessTerminatedAtDateRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProcessTerminatedAtDateRange)(nil)).Elem()
}

func (o InsightFiltersProcessTerminatedAtDateRangeOutput) ToInsightFiltersProcessTerminatedAtDateRangeOutput() InsightFiltersProcessTerminatedAtDateRangeOutput {
	return o
}

func (o InsightFiltersProcessTerminatedAtDateRangeOutput) ToInsightFiltersProcessTerminatedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersProcessTerminatedAtDateRangeOutput {
	return o
}

func (o InsightFiltersProcessTerminatedAtDateRangeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersProcessTerminatedAtDateRange] {
	return pulumix.Output[InsightFiltersProcessTerminatedAtDateRange]{
		OutputState: o.OutputState,
	}
}

// A date range unit for the date filter. Valid values: `DAYS`.
func (o InsightFiltersProcessTerminatedAtDateRangeOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersProcessTerminatedAtDateRange](o, func(v InsightFiltersProcessTerminatedAtDateRange) string { return v.Unit })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersProcessTerminatedAtDateRangeOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[InsightFiltersProcessTerminatedAtDateRange](o, func(v InsightFiltersProcessTerminatedAtDateRange) int { return v.Value })
}

type InsightFiltersProductArn struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersProductArnArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersProductArnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProductArn)(nil)).Elem()
}

func (i InsightFiltersProductArnArgs) ToInsightFiltersProductArnOutput() InsightFiltersProductArnOutput {
	return i.ToInsightFiltersProductArnOutputWithContext(context.Background())
}

func (i InsightFiltersProductArnArgs) ToInsightFiltersProductArnOutputWithContext(ctx context.Context) InsightFiltersProductArnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersProductArnOutput)
}

func (i *InsightFiltersProductArnArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersProductArnArgs] {
	return pulumix.Val(i)
}

type InsightFiltersProductArnOutput struct{ *pulumi.OutputState }

func (InsightFiltersProductArnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProductArn)(nil)).Elem()
}

func (o InsightFiltersProductArnOutput) ToInsightFiltersProductArnOutput() InsightFiltersProductArnOutput {
	return o
}

func (o InsightFiltersProductArnOutput) ToInsightFiltersProductArnOutputWithContext(ctx context.Context) InsightFiltersProductArnOutput {
	return o
}

func (o InsightFiltersProductArnOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersProductArn] {
	return pulumix.Output[InsightFiltersProductArn]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersProductArnOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersProductArn](o, func(v InsightFiltersProductArn) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersProductArnOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersProductArn](o, func(v InsightFiltersProductArn) string { return v.Value })
}

type InsightFiltersProductField struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
	Key string `pulumi:"key"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersProductFieldArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
	Key pulumix.Input[string] `pulumi:"key"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersProductFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProductField)(nil)).Elem()
}

func (i InsightFiltersProductFieldArgs) ToInsightFiltersProductFieldOutput() InsightFiltersProductFieldOutput {
	return i.ToInsightFiltersProductFieldOutputWithContext(context.Background())
}

func (i InsightFiltersProductFieldArgs) ToInsightFiltersProductFieldOutputWithContext(ctx context.Context) InsightFiltersProductFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersProductFieldOutput)
}

func (i *InsightFiltersProductFieldArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersProductFieldArgs] {
	return pulumix.Val(i)
}

type InsightFiltersProductFieldOutput struct{ *pulumi.OutputState }

func (InsightFiltersProductFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProductField)(nil)).Elem()
}

func (o InsightFiltersProductFieldOutput) ToInsightFiltersProductFieldOutput() InsightFiltersProductFieldOutput {
	return o
}

func (o InsightFiltersProductFieldOutput) ToInsightFiltersProductFieldOutputWithContext(ctx context.Context) InsightFiltersProductFieldOutput {
	return o
}

func (o InsightFiltersProductFieldOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersProductField] {
	return pulumix.Output[InsightFiltersProductField]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersProductFieldOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersProductField](o, func(v InsightFiltersProductField) string { return v.Comparison })
}

// The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
func (o InsightFiltersProductFieldOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersProductField](o, func(v InsightFiltersProductField) string { return v.Key })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersProductFieldOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersProductField](o, func(v InsightFiltersProductField) string { return v.Value })
}

type InsightFiltersProductName struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersProductNameArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersProductNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProductName)(nil)).Elem()
}

func (i InsightFiltersProductNameArgs) ToInsightFiltersProductNameOutput() InsightFiltersProductNameOutput {
	return i.ToInsightFiltersProductNameOutputWithContext(context.Background())
}

func (i InsightFiltersProductNameArgs) ToInsightFiltersProductNameOutputWithContext(ctx context.Context) InsightFiltersProductNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersProductNameOutput)
}

func (i *InsightFiltersProductNameArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersProductNameArgs] {
	return pulumix.Val(i)
}

type InsightFiltersProductNameOutput struct{ *pulumi.OutputState }

func (InsightFiltersProductNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersProductName)(nil)).Elem()
}

func (o InsightFiltersProductNameOutput) ToInsightFiltersProductNameOutput() InsightFiltersProductNameOutput {
	return o
}

func (o InsightFiltersProductNameOutput) ToInsightFiltersProductNameOutputWithContext(ctx context.Context) InsightFiltersProductNameOutput {
	return o
}

func (o InsightFiltersProductNameOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersProductName] {
	return pulumix.Output[InsightFiltersProductName]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersProductNameOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersProductName](o, func(v InsightFiltersProductName) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersProductNameOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersProductName](o, func(v InsightFiltersProductName) string { return v.Value })
}

type InsightFiltersRecommendationText struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersRecommendationTextArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersRecommendationTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersRecommendationText)(nil)).Elem()
}

func (i InsightFiltersRecommendationTextArgs) ToInsightFiltersRecommendationTextOutput() InsightFiltersRecommendationTextOutput {
	return i.ToInsightFiltersRecommendationTextOutputWithContext(context.Background())
}

func (i InsightFiltersRecommendationTextArgs) ToInsightFiltersRecommendationTextOutputWithContext(ctx context.Context) InsightFiltersRecommendationTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersRecommendationTextOutput)
}

func (i *InsightFiltersRecommendationTextArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersRecommendationTextArgs] {
	return pulumix.Val(i)
}

type InsightFiltersRecommendationTextOutput struct{ *pulumi.OutputState }

func (InsightFiltersRecommendationTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersRecommendationText)(nil)).Elem()
}

func (o InsightFiltersRecommendationTextOutput) ToInsightFiltersRecommendationTextOutput() InsightFiltersRecommendationTextOutput {
	return o
}

func (o InsightFiltersRecommendationTextOutput) ToInsightFiltersRecommendationTextOutputWithContext(ctx context.Context) InsightFiltersRecommendationTextOutput {
	return o
}

func (o InsightFiltersRecommendationTextOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersRecommendationText] {
	return pulumix.Output[InsightFiltersRecommendationText]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersRecommendationTextOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersRecommendationText](o, func(v InsightFiltersRecommendationText) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersRecommendationTextOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersRecommendationText](o, func(v InsightFiltersRecommendationText) string { return v.Value })
}

type InsightFiltersRecordState struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersRecordStateArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersRecordStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersRecordState)(nil)).Elem()
}

func (i InsightFiltersRecordStateArgs) ToInsightFiltersRecordStateOutput() InsightFiltersRecordStateOutput {
	return i.ToInsightFiltersRecordStateOutputWithContext(context.Background())
}

func (i InsightFiltersRecordStateArgs) ToInsightFiltersRecordStateOutputWithContext(ctx context.Context) InsightFiltersRecordStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersRecordStateOutput)
}

func (i *InsightFiltersRecordStateArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersRecordStateArgs] {
	return pulumix.Val(i)
}

type InsightFiltersRecordStateOutput struct{ *pulumi.OutputState }

func (InsightFiltersRecordStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersRecordState)(nil)).Elem()
}

func (o InsightFiltersRecordStateOutput) ToInsightFiltersRecordStateOutput() InsightFiltersRecordStateOutput {
	return o
}

func (o InsightFiltersRecordStateOutput) ToInsightFiltersRecordStateOutputWithContext(ctx context.Context) InsightFiltersRecordStateOutput {
	return o
}

func (o InsightFiltersRecordStateOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersRecordState] {
	return pulumix.Output[InsightFiltersRecordState]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersRecordStateOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersRecordState](o, func(v InsightFiltersRecordState) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersRecordStateOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersRecordState](o, func(v InsightFiltersRecordState) string { return v.Value })
}

type InsightFiltersRelatedFindingsId struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersRelatedFindingsIdArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersRelatedFindingsIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersRelatedFindingsId)(nil)).Elem()
}

func (i InsightFiltersRelatedFindingsIdArgs) ToInsightFiltersRelatedFindingsIdOutput() InsightFiltersRelatedFindingsIdOutput {
	return i.ToInsightFiltersRelatedFindingsIdOutputWithContext(context.Background())
}

func (i InsightFiltersRelatedFindingsIdArgs) ToInsightFiltersRelatedFindingsIdOutputWithContext(ctx context.Context) InsightFiltersRelatedFindingsIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersRelatedFindingsIdOutput)
}

func (i *InsightFiltersRelatedFindingsIdArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersRelatedFindingsIdArgs] {
	return pulumix.Val(i)
}

type InsightFiltersRelatedFindingsIdOutput struct{ *pulumi.OutputState }

func (InsightFiltersRelatedFindingsIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersRelatedFindingsId)(nil)).Elem()
}

func (o InsightFiltersRelatedFindingsIdOutput) ToInsightFiltersRelatedFindingsIdOutput() InsightFiltersRelatedFindingsIdOutput {
	return o
}

func (o InsightFiltersRelatedFindingsIdOutput) ToInsightFiltersRelatedFindingsIdOutputWithContext(ctx context.Context) InsightFiltersRelatedFindingsIdOutput {
	return o
}

func (o InsightFiltersRelatedFindingsIdOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersRelatedFindingsId] {
	return pulumix.Output[InsightFiltersRelatedFindingsId]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersRelatedFindingsIdOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersRelatedFindingsId](o, func(v InsightFiltersRelatedFindingsId) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersRelatedFindingsIdOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersRelatedFindingsId](o, func(v InsightFiltersRelatedFindingsId) string { return v.Value })
}

type InsightFiltersRelatedFindingsProductArn struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersRelatedFindingsProductArnArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersRelatedFindingsProductArnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersRelatedFindingsProductArn)(nil)).Elem()
}

func (i InsightFiltersRelatedFindingsProductArnArgs) ToInsightFiltersRelatedFindingsProductArnOutput() InsightFiltersRelatedFindingsProductArnOutput {
	return i.ToInsightFiltersRelatedFindingsProductArnOutputWithContext(context.Background())
}

func (i InsightFiltersRelatedFindingsProductArnArgs) ToInsightFiltersRelatedFindingsProductArnOutputWithContext(ctx context.Context) InsightFiltersRelatedFindingsProductArnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersRelatedFindingsProductArnOutput)
}

func (i *InsightFiltersRelatedFindingsProductArnArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersRelatedFindingsProductArnArgs] {
	return pulumix.Val(i)
}

type InsightFiltersRelatedFindingsProductArnOutput struct{ *pulumi.OutputState }

func (InsightFiltersRelatedFindingsProductArnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersRelatedFindingsProductArn)(nil)).Elem()
}

func (o InsightFiltersRelatedFindingsProductArnOutput) ToInsightFiltersRelatedFindingsProductArnOutput() InsightFiltersRelatedFindingsProductArnOutput {
	return o
}

func (o InsightFiltersRelatedFindingsProductArnOutput) ToInsightFiltersRelatedFindingsProductArnOutputWithContext(ctx context.Context) InsightFiltersRelatedFindingsProductArnOutput {
	return o
}

func (o InsightFiltersRelatedFindingsProductArnOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersRelatedFindingsProductArn] {
	return pulumix.Output[InsightFiltersRelatedFindingsProductArn]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersRelatedFindingsProductArnOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersRelatedFindingsProductArn](o, func(v InsightFiltersRelatedFindingsProductArn) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersRelatedFindingsProductArnOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersRelatedFindingsProductArn](o, func(v InsightFiltersRelatedFindingsProductArn) string { return v.Value })
}

type InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn)(nil)).Elem()
}

func (i InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs) ToInsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput() InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput {
	return i.ToInsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs) ToInsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput)
}

func (i *InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn)(nil)).Elem()
}

func (o InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput) ToInsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput() InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput) ToInsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn] {
	return pulumix.Output[InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn](o, func(v InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn](o, func(v InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn) string { return v.Value })
}

type InsightFiltersResourceAwsEc2InstanceImageId struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceAwsEc2InstanceImageIdArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceAwsEc2InstanceImageIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceImageId)(nil)).Elem()
}

func (i InsightFiltersResourceAwsEc2InstanceImageIdArgs) ToInsightFiltersResourceAwsEc2InstanceImageIdOutput() InsightFiltersResourceAwsEc2InstanceImageIdOutput {
	return i.ToInsightFiltersResourceAwsEc2InstanceImageIdOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsEc2InstanceImageIdArgs) ToInsightFiltersResourceAwsEc2InstanceImageIdOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceImageIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsEc2InstanceImageIdOutput)
}

func (i *InsightFiltersResourceAwsEc2InstanceImageIdArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsEc2InstanceImageIdArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsEc2InstanceImageIdOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsEc2InstanceImageIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceImageId)(nil)).Elem()
}

func (o InsightFiltersResourceAwsEc2InstanceImageIdOutput) ToInsightFiltersResourceAwsEc2InstanceImageIdOutput() InsightFiltersResourceAwsEc2InstanceImageIdOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceImageIdOutput) ToInsightFiltersResourceAwsEc2InstanceImageIdOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceImageIdOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceImageIdOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsEc2InstanceImageId] {
	return pulumix.Output[InsightFiltersResourceAwsEc2InstanceImageId]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceAwsEc2InstanceImageIdOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceImageId](o, func(v InsightFiltersResourceAwsEc2InstanceImageId) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceAwsEc2InstanceImageIdOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceImageId](o, func(v InsightFiltersResourceAwsEc2InstanceImageId) string { return v.Value })
}

type InsightFiltersResourceAwsEc2InstanceIpv4Address struct {
	// A finding's CIDR value.
	Cidr string `pulumi:"cidr"`
}

type InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs struct {
	// A finding's CIDR value.
	Cidr pulumix.Input[string] `pulumi:"cidr"`
}

func (InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceIpv4Address)(nil)).Elem()
}

func (i InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs) ToInsightFiltersResourceAwsEc2InstanceIpv4AddressOutput() InsightFiltersResourceAwsEc2InstanceIpv4AddressOutput {
	return i.ToInsightFiltersResourceAwsEc2InstanceIpv4AddressOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs) ToInsightFiltersResourceAwsEc2InstanceIpv4AddressOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceIpv4AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsEc2InstanceIpv4AddressOutput)
}

func (i *InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsEc2InstanceIpv4AddressOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsEc2InstanceIpv4AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceIpv4Address)(nil)).Elem()
}

func (o InsightFiltersResourceAwsEc2InstanceIpv4AddressOutput) ToInsightFiltersResourceAwsEc2InstanceIpv4AddressOutput() InsightFiltersResourceAwsEc2InstanceIpv4AddressOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceIpv4AddressOutput) ToInsightFiltersResourceAwsEc2InstanceIpv4AddressOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceIpv4AddressOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceIpv4AddressOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsEc2InstanceIpv4Address] {
	return pulumix.Output[InsightFiltersResourceAwsEc2InstanceIpv4Address]{
		OutputState: o.OutputState,
	}
}

// A finding's CIDR value.
func (o InsightFiltersResourceAwsEc2InstanceIpv4AddressOutput) Cidr() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceIpv4Address](o, func(v InsightFiltersResourceAwsEc2InstanceIpv4Address) string { return v.Cidr })
}

type InsightFiltersResourceAwsEc2InstanceIpv6Address struct {
	// A finding's CIDR value.
	Cidr string `pulumi:"cidr"`
}

type InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs struct {
	// A finding's CIDR value.
	Cidr pulumix.Input[string] `pulumi:"cidr"`
}

func (InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceIpv6Address)(nil)).Elem()
}

func (i InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs) ToInsightFiltersResourceAwsEc2InstanceIpv6AddressOutput() InsightFiltersResourceAwsEc2InstanceIpv6AddressOutput {
	return i.ToInsightFiltersResourceAwsEc2InstanceIpv6AddressOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs) ToInsightFiltersResourceAwsEc2InstanceIpv6AddressOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceIpv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsEc2InstanceIpv6AddressOutput)
}

func (i *InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsEc2InstanceIpv6AddressOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsEc2InstanceIpv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceIpv6Address)(nil)).Elem()
}

func (o InsightFiltersResourceAwsEc2InstanceIpv6AddressOutput) ToInsightFiltersResourceAwsEc2InstanceIpv6AddressOutput() InsightFiltersResourceAwsEc2InstanceIpv6AddressOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceIpv6AddressOutput) ToInsightFiltersResourceAwsEc2InstanceIpv6AddressOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceIpv6AddressOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceIpv6AddressOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsEc2InstanceIpv6Address] {
	return pulumix.Output[InsightFiltersResourceAwsEc2InstanceIpv6Address]{
		OutputState: o.OutputState,
	}
}

// A finding's CIDR value.
func (o InsightFiltersResourceAwsEc2InstanceIpv6AddressOutput) Cidr() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceIpv6Address](o, func(v InsightFiltersResourceAwsEc2InstanceIpv6Address) string { return v.Cidr })
}

type InsightFiltersResourceAwsEc2InstanceKeyName struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceAwsEc2InstanceKeyNameArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceAwsEc2InstanceKeyNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceKeyName)(nil)).Elem()
}

func (i InsightFiltersResourceAwsEc2InstanceKeyNameArgs) ToInsightFiltersResourceAwsEc2InstanceKeyNameOutput() InsightFiltersResourceAwsEc2InstanceKeyNameOutput {
	return i.ToInsightFiltersResourceAwsEc2InstanceKeyNameOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsEc2InstanceKeyNameArgs) ToInsightFiltersResourceAwsEc2InstanceKeyNameOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceKeyNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsEc2InstanceKeyNameOutput)
}

func (i *InsightFiltersResourceAwsEc2InstanceKeyNameArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsEc2InstanceKeyNameArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsEc2InstanceKeyNameOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsEc2InstanceKeyNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceKeyName)(nil)).Elem()
}

func (o InsightFiltersResourceAwsEc2InstanceKeyNameOutput) ToInsightFiltersResourceAwsEc2InstanceKeyNameOutput() InsightFiltersResourceAwsEc2InstanceKeyNameOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceKeyNameOutput) ToInsightFiltersResourceAwsEc2InstanceKeyNameOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceKeyNameOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceKeyNameOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsEc2InstanceKeyName] {
	return pulumix.Output[InsightFiltersResourceAwsEc2InstanceKeyName]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceAwsEc2InstanceKeyNameOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceKeyName](o, func(v InsightFiltersResourceAwsEc2InstanceKeyName) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceAwsEc2InstanceKeyNameOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceKeyName](o, func(v InsightFiltersResourceAwsEc2InstanceKeyName) string { return v.Value })
}

type InsightFiltersResourceAwsEc2InstanceLaunchedAt struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange *InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End *string `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start *string `pulumi:"start"`
}

type InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange pulumix.Input[*InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs] `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End pulumix.Input[*string] `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start pulumix.Input[*string] `pulumi:"start"`
}

func (InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceLaunchedAt)(nil)).Elem()
}

func (i InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs) ToInsightFiltersResourceAwsEc2InstanceLaunchedAtOutput() InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput {
	return i.ToInsightFiltersResourceAwsEc2InstanceLaunchedAtOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs) ToInsightFiltersResourceAwsEc2InstanceLaunchedAtOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput)
}

func (i *InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceLaunchedAt)(nil)).Elem()
}

func (o InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput) ToInsightFiltersResourceAwsEc2InstanceLaunchedAtOutput() InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput) ToInsightFiltersResourceAwsEc2InstanceLaunchedAtOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsEc2InstanceLaunchedAt] {
	return pulumix.Output[InsightFiltersResourceAwsEc2InstanceLaunchedAt]{
		OutputState: o.OutputState,
	}
}

// A configuration block of the date range for the date filter. See dateRange below for more details.
func (o InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput) DateRange() pulumix.GPtrOutput[InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange, InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput] {
	value := pulumix.Apply[InsightFiltersResourceAwsEc2InstanceLaunchedAt](o, func(v InsightFiltersResourceAwsEc2InstanceLaunchedAt) *InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange {
		return v.DateRange
	})
	return pulumix.GPtrOutput[InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange, InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput]{OutputState: value.OutputState}
}

// An end date for the date filter. Required with `start` if `dateRange` is not specified.
func (o InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput) End() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceLaunchedAt](o, func(v InsightFiltersResourceAwsEc2InstanceLaunchedAt) *string { return v.End })
}

// A start date for the date filter. Required with `end` if `dateRange` is not specified.
func (o InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput) Start() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceLaunchedAt](o, func(v InsightFiltersResourceAwsEc2InstanceLaunchedAt) *string { return v.Start })
}

type InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit string `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value int `pulumi:"value"`
}

type InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange)(nil)).Elem()
}

func (i InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs) ToInsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput() InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput {
	return i.ToInsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs) ToInsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput)
}

func (i *InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange)(nil)).Elem()
}

func (o InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput) ToInsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput() InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput) ToInsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange] {
	return pulumix.Output[InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange]{
		OutputState: o.OutputState,
	}
}

// A date range unit for the date filter. Valid values: `DAYS`.
func (o InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange](o, func(v InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange) string { return v.Unit })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange](o, func(v InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange) int { return v.Value })
}

type InsightFiltersResourceAwsEc2InstanceSubnetId struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceAwsEc2InstanceSubnetIdArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceAwsEc2InstanceSubnetIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceSubnetId)(nil)).Elem()
}

func (i InsightFiltersResourceAwsEc2InstanceSubnetIdArgs) ToInsightFiltersResourceAwsEc2InstanceSubnetIdOutput() InsightFiltersResourceAwsEc2InstanceSubnetIdOutput {
	return i.ToInsightFiltersResourceAwsEc2InstanceSubnetIdOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsEc2InstanceSubnetIdArgs) ToInsightFiltersResourceAwsEc2InstanceSubnetIdOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceSubnetIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsEc2InstanceSubnetIdOutput)
}

func (i *InsightFiltersResourceAwsEc2InstanceSubnetIdArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsEc2InstanceSubnetIdArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsEc2InstanceSubnetIdOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsEc2InstanceSubnetIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceSubnetId)(nil)).Elem()
}

func (o InsightFiltersResourceAwsEc2InstanceSubnetIdOutput) ToInsightFiltersResourceAwsEc2InstanceSubnetIdOutput() InsightFiltersResourceAwsEc2InstanceSubnetIdOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceSubnetIdOutput) ToInsightFiltersResourceAwsEc2InstanceSubnetIdOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceSubnetIdOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceSubnetIdOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsEc2InstanceSubnetId] {
	return pulumix.Output[InsightFiltersResourceAwsEc2InstanceSubnetId]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceAwsEc2InstanceSubnetIdOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceSubnetId](o, func(v InsightFiltersResourceAwsEc2InstanceSubnetId) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceAwsEc2InstanceSubnetIdOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceSubnetId](o, func(v InsightFiltersResourceAwsEc2InstanceSubnetId) string { return v.Value })
}

type InsightFiltersResourceAwsEc2InstanceType struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceAwsEc2InstanceTypeArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceAwsEc2InstanceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceType)(nil)).Elem()
}

func (i InsightFiltersResourceAwsEc2InstanceTypeArgs) ToInsightFiltersResourceAwsEc2InstanceTypeOutput() InsightFiltersResourceAwsEc2InstanceTypeOutput {
	return i.ToInsightFiltersResourceAwsEc2InstanceTypeOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsEc2InstanceTypeArgs) ToInsightFiltersResourceAwsEc2InstanceTypeOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsEc2InstanceTypeOutput)
}

func (i *InsightFiltersResourceAwsEc2InstanceTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsEc2InstanceTypeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsEc2InstanceTypeOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsEc2InstanceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceType)(nil)).Elem()
}

func (o InsightFiltersResourceAwsEc2InstanceTypeOutput) ToInsightFiltersResourceAwsEc2InstanceTypeOutput() InsightFiltersResourceAwsEc2InstanceTypeOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceTypeOutput) ToInsightFiltersResourceAwsEc2InstanceTypeOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceTypeOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceTypeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsEc2InstanceType] {
	return pulumix.Output[InsightFiltersResourceAwsEc2InstanceType]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceAwsEc2InstanceTypeOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceType](o, func(v InsightFiltersResourceAwsEc2InstanceType) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceAwsEc2InstanceTypeOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceType](o, func(v InsightFiltersResourceAwsEc2InstanceType) string { return v.Value })
}

type InsightFiltersResourceAwsEc2InstanceVpcId struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceAwsEc2InstanceVpcIdArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceAwsEc2InstanceVpcIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceVpcId)(nil)).Elem()
}

func (i InsightFiltersResourceAwsEc2InstanceVpcIdArgs) ToInsightFiltersResourceAwsEc2InstanceVpcIdOutput() InsightFiltersResourceAwsEc2InstanceVpcIdOutput {
	return i.ToInsightFiltersResourceAwsEc2InstanceVpcIdOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsEc2InstanceVpcIdArgs) ToInsightFiltersResourceAwsEc2InstanceVpcIdOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceVpcIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsEc2InstanceVpcIdOutput)
}

func (i *InsightFiltersResourceAwsEc2InstanceVpcIdArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsEc2InstanceVpcIdArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsEc2InstanceVpcIdOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsEc2InstanceVpcIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsEc2InstanceVpcId)(nil)).Elem()
}

func (o InsightFiltersResourceAwsEc2InstanceVpcIdOutput) ToInsightFiltersResourceAwsEc2InstanceVpcIdOutput() InsightFiltersResourceAwsEc2InstanceVpcIdOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceVpcIdOutput) ToInsightFiltersResourceAwsEc2InstanceVpcIdOutputWithContext(ctx context.Context) InsightFiltersResourceAwsEc2InstanceVpcIdOutput {
	return o
}

func (o InsightFiltersResourceAwsEc2InstanceVpcIdOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsEc2InstanceVpcId] {
	return pulumix.Output[InsightFiltersResourceAwsEc2InstanceVpcId]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceAwsEc2InstanceVpcIdOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceVpcId](o, func(v InsightFiltersResourceAwsEc2InstanceVpcId) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceAwsEc2InstanceVpcIdOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsEc2InstanceVpcId](o, func(v InsightFiltersResourceAwsEc2InstanceVpcId) string { return v.Value })
}

type InsightFiltersResourceAwsIamAccessKeyCreatedAt struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange *InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End *string `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start *string `pulumi:"start"`
}

type InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange pulumix.Input[*InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs] `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End pulumix.Input[*string] `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start pulumix.Input[*string] `pulumi:"start"`
}

func (InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsIamAccessKeyCreatedAt)(nil)).Elem()
}

func (i InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs) ToInsightFiltersResourceAwsIamAccessKeyCreatedAtOutput() InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput {
	return i.ToInsightFiltersResourceAwsIamAccessKeyCreatedAtOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs) ToInsightFiltersResourceAwsIamAccessKeyCreatedAtOutputWithContext(ctx context.Context) InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput)
}

func (i *InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsIamAccessKeyCreatedAt)(nil)).Elem()
}

func (o InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput) ToInsightFiltersResourceAwsIamAccessKeyCreatedAtOutput() InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput {
	return o
}

func (o InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput) ToInsightFiltersResourceAwsIamAccessKeyCreatedAtOutputWithContext(ctx context.Context) InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput {
	return o
}

func (o InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsIamAccessKeyCreatedAt] {
	return pulumix.Output[InsightFiltersResourceAwsIamAccessKeyCreatedAt]{
		OutputState: o.OutputState,
	}
}

// A configuration block of the date range for the date filter. See dateRange below for more details.
func (o InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput) DateRange() pulumix.GPtrOutput[InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange, InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput] {
	value := pulumix.Apply[InsightFiltersResourceAwsIamAccessKeyCreatedAt](o, func(v InsightFiltersResourceAwsIamAccessKeyCreatedAt) *InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange {
		return v.DateRange
	})
	return pulumix.GPtrOutput[InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange, InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput]{OutputState: value.OutputState}
}

// An end date for the date filter. Required with `start` if `dateRange` is not specified.
func (o InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput) End() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersResourceAwsIamAccessKeyCreatedAt](o, func(v InsightFiltersResourceAwsIamAccessKeyCreatedAt) *string { return v.End })
}

// A start date for the date filter. Required with `end` if `dateRange` is not specified.
func (o InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput) Start() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersResourceAwsIamAccessKeyCreatedAt](o, func(v InsightFiltersResourceAwsIamAccessKeyCreatedAt) *string { return v.Start })
}

type InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit string `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value int `pulumi:"value"`
}

type InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange)(nil)).Elem()
}

func (i InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs) ToInsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput() InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput {
	return i.ToInsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs) ToInsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput)
}

func (i *InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange)(nil)).Elem()
}

func (o InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput) ToInsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput() InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput {
	return o
}

func (o InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput) ToInsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput {
	return o
}

func (o InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange] {
	return pulumix.Output[InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange]{
		OutputState: o.OutputState,
	}
}

// A date range unit for the date filter. Valid values: `DAYS`.
func (o InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange](o, func(v InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange) string { return v.Unit })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange](o, func(v InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange) int { return v.Value })
}

type InsightFiltersResourceAwsIamAccessKeyStatus struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceAwsIamAccessKeyStatusArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceAwsIamAccessKeyStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsIamAccessKeyStatus)(nil)).Elem()
}

func (i InsightFiltersResourceAwsIamAccessKeyStatusArgs) ToInsightFiltersResourceAwsIamAccessKeyStatusOutput() InsightFiltersResourceAwsIamAccessKeyStatusOutput {
	return i.ToInsightFiltersResourceAwsIamAccessKeyStatusOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsIamAccessKeyStatusArgs) ToInsightFiltersResourceAwsIamAccessKeyStatusOutputWithContext(ctx context.Context) InsightFiltersResourceAwsIamAccessKeyStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsIamAccessKeyStatusOutput)
}

func (i *InsightFiltersResourceAwsIamAccessKeyStatusArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsIamAccessKeyStatusArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsIamAccessKeyStatusOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsIamAccessKeyStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsIamAccessKeyStatus)(nil)).Elem()
}

func (o InsightFiltersResourceAwsIamAccessKeyStatusOutput) ToInsightFiltersResourceAwsIamAccessKeyStatusOutput() InsightFiltersResourceAwsIamAccessKeyStatusOutput {
	return o
}

func (o InsightFiltersResourceAwsIamAccessKeyStatusOutput) ToInsightFiltersResourceAwsIamAccessKeyStatusOutputWithContext(ctx context.Context) InsightFiltersResourceAwsIamAccessKeyStatusOutput {
	return o
}

func (o InsightFiltersResourceAwsIamAccessKeyStatusOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsIamAccessKeyStatus] {
	return pulumix.Output[InsightFiltersResourceAwsIamAccessKeyStatus]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceAwsIamAccessKeyStatusOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsIamAccessKeyStatus](o, func(v InsightFiltersResourceAwsIamAccessKeyStatus) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceAwsIamAccessKeyStatusOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsIamAccessKeyStatus](o, func(v InsightFiltersResourceAwsIamAccessKeyStatus) string { return v.Value })
}

type InsightFiltersResourceAwsIamAccessKeyUserName struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceAwsIamAccessKeyUserNameArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceAwsIamAccessKeyUserNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsIamAccessKeyUserName)(nil)).Elem()
}

func (i InsightFiltersResourceAwsIamAccessKeyUserNameArgs) ToInsightFiltersResourceAwsIamAccessKeyUserNameOutput() InsightFiltersResourceAwsIamAccessKeyUserNameOutput {
	return i.ToInsightFiltersResourceAwsIamAccessKeyUserNameOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsIamAccessKeyUserNameArgs) ToInsightFiltersResourceAwsIamAccessKeyUserNameOutputWithContext(ctx context.Context) InsightFiltersResourceAwsIamAccessKeyUserNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsIamAccessKeyUserNameOutput)
}

func (i *InsightFiltersResourceAwsIamAccessKeyUserNameArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsIamAccessKeyUserNameArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsIamAccessKeyUserNameOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsIamAccessKeyUserNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsIamAccessKeyUserName)(nil)).Elem()
}

func (o InsightFiltersResourceAwsIamAccessKeyUserNameOutput) ToInsightFiltersResourceAwsIamAccessKeyUserNameOutput() InsightFiltersResourceAwsIamAccessKeyUserNameOutput {
	return o
}

func (o InsightFiltersResourceAwsIamAccessKeyUserNameOutput) ToInsightFiltersResourceAwsIamAccessKeyUserNameOutputWithContext(ctx context.Context) InsightFiltersResourceAwsIamAccessKeyUserNameOutput {
	return o
}

func (o InsightFiltersResourceAwsIamAccessKeyUserNameOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsIamAccessKeyUserName] {
	return pulumix.Output[InsightFiltersResourceAwsIamAccessKeyUserName]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceAwsIamAccessKeyUserNameOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsIamAccessKeyUserName](o, func(v InsightFiltersResourceAwsIamAccessKeyUserName) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceAwsIamAccessKeyUserNameOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsIamAccessKeyUserName](o, func(v InsightFiltersResourceAwsIamAccessKeyUserName) string { return v.Value })
}

type InsightFiltersResourceAwsS3BucketOwnerId struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceAwsS3BucketOwnerIdArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceAwsS3BucketOwnerIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsS3BucketOwnerId)(nil)).Elem()
}

func (i InsightFiltersResourceAwsS3BucketOwnerIdArgs) ToInsightFiltersResourceAwsS3BucketOwnerIdOutput() InsightFiltersResourceAwsS3BucketOwnerIdOutput {
	return i.ToInsightFiltersResourceAwsS3BucketOwnerIdOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsS3BucketOwnerIdArgs) ToInsightFiltersResourceAwsS3BucketOwnerIdOutputWithContext(ctx context.Context) InsightFiltersResourceAwsS3BucketOwnerIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsS3BucketOwnerIdOutput)
}

func (i *InsightFiltersResourceAwsS3BucketOwnerIdArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsS3BucketOwnerIdArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsS3BucketOwnerIdOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsS3BucketOwnerIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsS3BucketOwnerId)(nil)).Elem()
}

func (o InsightFiltersResourceAwsS3BucketOwnerIdOutput) ToInsightFiltersResourceAwsS3BucketOwnerIdOutput() InsightFiltersResourceAwsS3BucketOwnerIdOutput {
	return o
}

func (o InsightFiltersResourceAwsS3BucketOwnerIdOutput) ToInsightFiltersResourceAwsS3BucketOwnerIdOutputWithContext(ctx context.Context) InsightFiltersResourceAwsS3BucketOwnerIdOutput {
	return o
}

func (o InsightFiltersResourceAwsS3BucketOwnerIdOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsS3BucketOwnerId] {
	return pulumix.Output[InsightFiltersResourceAwsS3BucketOwnerId]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceAwsS3BucketOwnerIdOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsS3BucketOwnerId](o, func(v InsightFiltersResourceAwsS3BucketOwnerId) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceAwsS3BucketOwnerIdOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsS3BucketOwnerId](o, func(v InsightFiltersResourceAwsS3BucketOwnerId) string { return v.Value })
}

type InsightFiltersResourceAwsS3BucketOwnerName struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceAwsS3BucketOwnerNameArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceAwsS3BucketOwnerNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsS3BucketOwnerName)(nil)).Elem()
}

func (i InsightFiltersResourceAwsS3BucketOwnerNameArgs) ToInsightFiltersResourceAwsS3BucketOwnerNameOutput() InsightFiltersResourceAwsS3BucketOwnerNameOutput {
	return i.ToInsightFiltersResourceAwsS3BucketOwnerNameOutputWithContext(context.Background())
}

func (i InsightFiltersResourceAwsS3BucketOwnerNameArgs) ToInsightFiltersResourceAwsS3BucketOwnerNameOutputWithContext(ctx context.Context) InsightFiltersResourceAwsS3BucketOwnerNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceAwsS3BucketOwnerNameOutput)
}

func (i *InsightFiltersResourceAwsS3BucketOwnerNameArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceAwsS3BucketOwnerNameArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceAwsS3BucketOwnerNameOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceAwsS3BucketOwnerNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceAwsS3BucketOwnerName)(nil)).Elem()
}

func (o InsightFiltersResourceAwsS3BucketOwnerNameOutput) ToInsightFiltersResourceAwsS3BucketOwnerNameOutput() InsightFiltersResourceAwsS3BucketOwnerNameOutput {
	return o
}

func (o InsightFiltersResourceAwsS3BucketOwnerNameOutput) ToInsightFiltersResourceAwsS3BucketOwnerNameOutputWithContext(ctx context.Context) InsightFiltersResourceAwsS3BucketOwnerNameOutput {
	return o
}

func (o InsightFiltersResourceAwsS3BucketOwnerNameOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceAwsS3BucketOwnerName] {
	return pulumix.Output[InsightFiltersResourceAwsS3BucketOwnerName]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceAwsS3BucketOwnerNameOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsS3BucketOwnerName](o, func(v InsightFiltersResourceAwsS3BucketOwnerName) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceAwsS3BucketOwnerNameOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceAwsS3BucketOwnerName](o, func(v InsightFiltersResourceAwsS3BucketOwnerName) string { return v.Value })
}

type InsightFiltersResourceContainerImageId struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceContainerImageIdArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceContainerImageIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceContainerImageId)(nil)).Elem()
}

func (i InsightFiltersResourceContainerImageIdArgs) ToInsightFiltersResourceContainerImageIdOutput() InsightFiltersResourceContainerImageIdOutput {
	return i.ToInsightFiltersResourceContainerImageIdOutputWithContext(context.Background())
}

func (i InsightFiltersResourceContainerImageIdArgs) ToInsightFiltersResourceContainerImageIdOutputWithContext(ctx context.Context) InsightFiltersResourceContainerImageIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceContainerImageIdOutput)
}

func (i *InsightFiltersResourceContainerImageIdArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceContainerImageIdArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceContainerImageIdOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceContainerImageIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceContainerImageId)(nil)).Elem()
}

func (o InsightFiltersResourceContainerImageIdOutput) ToInsightFiltersResourceContainerImageIdOutput() InsightFiltersResourceContainerImageIdOutput {
	return o
}

func (o InsightFiltersResourceContainerImageIdOutput) ToInsightFiltersResourceContainerImageIdOutputWithContext(ctx context.Context) InsightFiltersResourceContainerImageIdOutput {
	return o
}

func (o InsightFiltersResourceContainerImageIdOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceContainerImageId] {
	return pulumix.Output[InsightFiltersResourceContainerImageId]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceContainerImageIdOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceContainerImageId](o, func(v InsightFiltersResourceContainerImageId) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceContainerImageIdOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceContainerImageId](o, func(v InsightFiltersResourceContainerImageId) string { return v.Value })
}

type InsightFiltersResourceContainerImageName struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceContainerImageNameArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceContainerImageNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceContainerImageName)(nil)).Elem()
}

func (i InsightFiltersResourceContainerImageNameArgs) ToInsightFiltersResourceContainerImageNameOutput() InsightFiltersResourceContainerImageNameOutput {
	return i.ToInsightFiltersResourceContainerImageNameOutputWithContext(context.Background())
}

func (i InsightFiltersResourceContainerImageNameArgs) ToInsightFiltersResourceContainerImageNameOutputWithContext(ctx context.Context) InsightFiltersResourceContainerImageNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceContainerImageNameOutput)
}

func (i *InsightFiltersResourceContainerImageNameArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceContainerImageNameArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceContainerImageNameOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceContainerImageNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceContainerImageName)(nil)).Elem()
}

func (o InsightFiltersResourceContainerImageNameOutput) ToInsightFiltersResourceContainerImageNameOutput() InsightFiltersResourceContainerImageNameOutput {
	return o
}

func (o InsightFiltersResourceContainerImageNameOutput) ToInsightFiltersResourceContainerImageNameOutputWithContext(ctx context.Context) InsightFiltersResourceContainerImageNameOutput {
	return o
}

func (o InsightFiltersResourceContainerImageNameOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceContainerImageName] {
	return pulumix.Output[InsightFiltersResourceContainerImageName]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceContainerImageNameOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceContainerImageName](o, func(v InsightFiltersResourceContainerImageName) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceContainerImageNameOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceContainerImageName](o, func(v InsightFiltersResourceContainerImageName) string { return v.Value })
}

type InsightFiltersResourceContainerLaunchedAt struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange *InsightFiltersResourceContainerLaunchedAtDateRange `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End *string `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start *string `pulumi:"start"`
}

type InsightFiltersResourceContainerLaunchedAtArgs struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange pulumix.Input[*InsightFiltersResourceContainerLaunchedAtDateRangeArgs] `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End pulumix.Input[*string] `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start pulumix.Input[*string] `pulumi:"start"`
}

func (InsightFiltersResourceContainerLaunchedAtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceContainerLaunchedAt)(nil)).Elem()
}

func (i InsightFiltersResourceContainerLaunchedAtArgs) ToInsightFiltersResourceContainerLaunchedAtOutput() InsightFiltersResourceContainerLaunchedAtOutput {
	return i.ToInsightFiltersResourceContainerLaunchedAtOutputWithContext(context.Background())
}

func (i InsightFiltersResourceContainerLaunchedAtArgs) ToInsightFiltersResourceContainerLaunchedAtOutputWithContext(ctx context.Context) InsightFiltersResourceContainerLaunchedAtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceContainerLaunchedAtOutput)
}

func (i *InsightFiltersResourceContainerLaunchedAtArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceContainerLaunchedAtArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceContainerLaunchedAtOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceContainerLaunchedAtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceContainerLaunchedAt)(nil)).Elem()
}

func (o InsightFiltersResourceContainerLaunchedAtOutput) ToInsightFiltersResourceContainerLaunchedAtOutput() InsightFiltersResourceContainerLaunchedAtOutput {
	return o
}

func (o InsightFiltersResourceContainerLaunchedAtOutput) ToInsightFiltersResourceContainerLaunchedAtOutputWithContext(ctx context.Context) InsightFiltersResourceContainerLaunchedAtOutput {
	return o
}

func (o InsightFiltersResourceContainerLaunchedAtOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceContainerLaunchedAt] {
	return pulumix.Output[InsightFiltersResourceContainerLaunchedAt]{
		OutputState: o.OutputState,
	}
}

// A configuration block of the date range for the date filter. See dateRange below for more details.
func (o InsightFiltersResourceContainerLaunchedAtOutput) DateRange() pulumix.GPtrOutput[InsightFiltersResourceContainerLaunchedAtDateRange, InsightFiltersResourceContainerLaunchedAtDateRangeOutput] {
	value := pulumix.Apply[InsightFiltersResourceContainerLaunchedAt](o, func(v InsightFiltersResourceContainerLaunchedAt) *InsightFiltersResourceContainerLaunchedAtDateRange {
		return v.DateRange
	})
	return pulumix.GPtrOutput[InsightFiltersResourceContainerLaunchedAtDateRange, InsightFiltersResourceContainerLaunchedAtDateRangeOutput]{OutputState: value.OutputState}
}

// An end date for the date filter. Required with `start` if `dateRange` is not specified.
func (o InsightFiltersResourceContainerLaunchedAtOutput) End() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersResourceContainerLaunchedAt](o, func(v InsightFiltersResourceContainerLaunchedAt) *string { return v.End })
}

// A start date for the date filter. Required with `end` if `dateRange` is not specified.
func (o InsightFiltersResourceContainerLaunchedAtOutput) Start() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersResourceContainerLaunchedAt](o, func(v InsightFiltersResourceContainerLaunchedAt) *string { return v.Start })
}

type InsightFiltersResourceContainerLaunchedAtDateRange struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit string `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value int `pulumi:"value"`
}

type InsightFiltersResourceContainerLaunchedAtDateRangeArgs struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (InsightFiltersResourceContainerLaunchedAtDateRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceContainerLaunchedAtDateRange)(nil)).Elem()
}

func (i InsightFiltersResourceContainerLaunchedAtDateRangeArgs) ToInsightFiltersResourceContainerLaunchedAtDateRangeOutput() InsightFiltersResourceContainerLaunchedAtDateRangeOutput {
	return i.ToInsightFiltersResourceContainerLaunchedAtDateRangeOutputWithContext(context.Background())
}

func (i InsightFiltersResourceContainerLaunchedAtDateRangeArgs) ToInsightFiltersResourceContainerLaunchedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersResourceContainerLaunchedAtDateRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceContainerLaunchedAtDateRangeOutput)
}

func (i *InsightFiltersResourceContainerLaunchedAtDateRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceContainerLaunchedAtDateRangeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceContainerLaunchedAtDateRangeOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceContainerLaunchedAtDateRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceContainerLaunchedAtDateRange)(nil)).Elem()
}

func (o InsightFiltersResourceContainerLaunchedAtDateRangeOutput) ToInsightFiltersResourceContainerLaunchedAtDateRangeOutput() InsightFiltersResourceContainerLaunchedAtDateRangeOutput {
	return o
}

func (o InsightFiltersResourceContainerLaunchedAtDateRangeOutput) ToInsightFiltersResourceContainerLaunchedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersResourceContainerLaunchedAtDateRangeOutput {
	return o
}

func (o InsightFiltersResourceContainerLaunchedAtDateRangeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceContainerLaunchedAtDateRange] {
	return pulumix.Output[InsightFiltersResourceContainerLaunchedAtDateRange]{
		OutputState: o.OutputState,
	}
}

// A date range unit for the date filter. Valid values: `DAYS`.
func (o InsightFiltersResourceContainerLaunchedAtDateRangeOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceContainerLaunchedAtDateRange](o, func(v InsightFiltersResourceContainerLaunchedAtDateRange) string { return v.Unit })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceContainerLaunchedAtDateRangeOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[InsightFiltersResourceContainerLaunchedAtDateRange](o, func(v InsightFiltersResourceContainerLaunchedAtDateRange) int { return v.Value })
}

type InsightFiltersResourceContainerName struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceContainerNameArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceContainerNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceContainerName)(nil)).Elem()
}

func (i InsightFiltersResourceContainerNameArgs) ToInsightFiltersResourceContainerNameOutput() InsightFiltersResourceContainerNameOutput {
	return i.ToInsightFiltersResourceContainerNameOutputWithContext(context.Background())
}

func (i InsightFiltersResourceContainerNameArgs) ToInsightFiltersResourceContainerNameOutputWithContext(ctx context.Context) InsightFiltersResourceContainerNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceContainerNameOutput)
}

func (i *InsightFiltersResourceContainerNameArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceContainerNameArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceContainerNameOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceContainerNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceContainerName)(nil)).Elem()
}

func (o InsightFiltersResourceContainerNameOutput) ToInsightFiltersResourceContainerNameOutput() InsightFiltersResourceContainerNameOutput {
	return o
}

func (o InsightFiltersResourceContainerNameOutput) ToInsightFiltersResourceContainerNameOutputWithContext(ctx context.Context) InsightFiltersResourceContainerNameOutput {
	return o
}

func (o InsightFiltersResourceContainerNameOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceContainerName] {
	return pulumix.Output[InsightFiltersResourceContainerName]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceContainerNameOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceContainerName](o, func(v InsightFiltersResourceContainerName) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceContainerNameOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceContainerName](o, func(v InsightFiltersResourceContainerName) string { return v.Value })
}

type InsightFiltersResourceDetailsOther struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
	Key string `pulumi:"key"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceDetailsOtherArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
	Key pulumix.Input[string] `pulumi:"key"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceDetailsOtherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceDetailsOther)(nil)).Elem()
}

func (i InsightFiltersResourceDetailsOtherArgs) ToInsightFiltersResourceDetailsOtherOutput() InsightFiltersResourceDetailsOtherOutput {
	return i.ToInsightFiltersResourceDetailsOtherOutputWithContext(context.Background())
}

func (i InsightFiltersResourceDetailsOtherArgs) ToInsightFiltersResourceDetailsOtherOutputWithContext(ctx context.Context) InsightFiltersResourceDetailsOtherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceDetailsOtherOutput)
}

func (i *InsightFiltersResourceDetailsOtherArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceDetailsOtherArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceDetailsOtherOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceDetailsOtherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceDetailsOther)(nil)).Elem()
}

func (o InsightFiltersResourceDetailsOtherOutput) ToInsightFiltersResourceDetailsOtherOutput() InsightFiltersResourceDetailsOtherOutput {
	return o
}

func (o InsightFiltersResourceDetailsOtherOutput) ToInsightFiltersResourceDetailsOtherOutputWithContext(ctx context.Context) InsightFiltersResourceDetailsOtherOutput {
	return o
}

func (o InsightFiltersResourceDetailsOtherOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceDetailsOther] {
	return pulumix.Output[InsightFiltersResourceDetailsOther]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceDetailsOtherOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceDetailsOther](o, func(v InsightFiltersResourceDetailsOther) string { return v.Comparison })
}

// The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
func (o InsightFiltersResourceDetailsOtherOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceDetailsOther](o, func(v InsightFiltersResourceDetailsOther) string { return v.Key })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceDetailsOtherOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceDetailsOther](o, func(v InsightFiltersResourceDetailsOther) string { return v.Value })
}

type InsightFiltersResourceId struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceIdArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceId)(nil)).Elem()
}

func (i InsightFiltersResourceIdArgs) ToInsightFiltersResourceIdOutput() InsightFiltersResourceIdOutput {
	return i.ToInsightFiltersResourceIdOutputWithContext(context.Background())
}

func (i InsightFiltersResourceIdArgs) ToInsightFiltersResourceIdOutputWithContext(ctx context.Context) InsightFiltersResourceIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceIdOutput)
}

func (i *InsightFiltersResourceIdArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceIdArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceIdOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceId)(nil)).Elem()
}

func (o InsightFiltersResourceIdOutput) ToInsightFiltersResourceIdOutput() InsightFiltersResourceIdOutput {
	return o
}

func (o InsightFiltersResourceIdOutput) ToInsightFiltersResourceIdOutputWithContext(ctx context.Context) InsightFiltersResourceIdOutput {
	return o
}

func (o InsightFiltersResourceIdOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceId] {
	return pulumix.Output[InsightFiltersResourceId]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceIdOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceId](o, func(v InsightFiltersResourceId) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceIdOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceId](o, func(v InsightFiltersResourceId) string { return v.Value })
}

type InsightFiltersResourcePartition struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourcePartitionArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourcePartitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourcePartition)(nil)).Elem()
}

func (i InsightFiltersResourcePartitionArgs) ToInsightFiltersResourcePartitionOutput() InsightFiltersResourcePartitionOutput {
	return i.ToInsightFiltersResourcePartitionOutputWithContext(context.Background())
}

func (i InsightFiltersResourcePartitionArgs) ToInsightFiltersResourcePartitionOutputWithContext(ctx context.Context) InsightFiltersResourcePartitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourcePartitionOutput)
}

func (i *InsightFiltersResourcePartitionArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourcePartitionArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourcePartitionOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourcePartitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourcePartition)(nil)).Elem()
}

func (o InsightFiltersResourcePartitionOutput) ToInsightFiltersResourcePartitionOutput() InsightFiltersResourcePartitionOutput {
	return o
}

func (o InsightFiltersResourcePartitionOutput) ToInsightFiltersResourcePartitionOutputWithContext(ctx context.Context) InsightFiltersResourcePartitionOutput {
	return o
}

func (o InsightFiltersResourcePartitionOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourcePartition] {
	return pulumix.Output[InsightFiltersResourcePartition]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourcePartitionOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourcePartition](o, func(v InsightFiltersResourcePartition) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourcePartitionOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourcePartition](o, func(v InsightFiltersResourcePartition) string { return v.Value })
}

type InsightFiltersResourceRegion struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceRegionArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceRegion)(nil)).Elem()
}

func (i InsightFiltersResourceRegionArgs) ToInsightFiltersResourceRegionOutput() InsightFiltersResourceRegionOutput {
	return i.ToInsightFiltersResourceRegionOutputWithContext(context.Background())
}

func (i InsightFiltersResourceRegionArgs) ToInsightFiltersResourceRegionOutputWithContext(ctx context.Context) InsightFiltersResourceRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceRegionOutput)
}

func (i *InsightFiltersResourceRegionArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceRegionArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceRegionOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceRegion)(nil)).Elem()
}

func (o InsightFiltersResourceRegionOutput) ToInsightFiltersResourceRegionOutput() InsightFiltersResourceRegionOutput {
	return o
}

func (o InsightFiltersResourceRegionOutput) ToInsightFiltersResourceRegionOutputWithContext(ctx context.Context) InsightFiltersResourceRegionOutput {
	return o
}

func (o InsightFiltersResourceRegionOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceRegion] {
	return pulumix.Output[InsightFiltersResourceRegion]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceRegionOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceRegion](o, func(v InsightFiltersResourceRegion) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceRegionOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceRegion](o, func(v InsightFiltersResourceRegion) string { return v.Value })
}

type InsightFiltersResourceTag struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
	Key string `pulumi:"key"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceTagArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
	Key pulumix.Input[string] `pulumi:"key"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceTag)(nil)).Elem()
}

func (i InsightFiltersResourceTagArgs) ToInsightFiltersResourceTagOutput() InsightFiltersResourceTagOutput {
	return i.ToInsightFiltersResourceTagOutputWithContext(context.Background())
}

func (i InsightFiltersResourceTagArgs) ToInsightFiltersResourceTagOutputWithContext(ctx context.Context) InsightFiltersResourceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceTagOutput)
}

func (i *InsightFiltersResourceTagArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceTagArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceTagOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceTag)(nil)).Elem()
}

func (o InsightFiltersResourceTagOutput) ToInsightFiltersResourceTagOutput() InsightFiltersResourceTagOutput {
	return o
}

func (o InsightFiltersResourceTagOutput) ToInsightFiltersResourceTagOutputWithContext(ctx context.Context) InsightFiltersResourceTagOutput {
	return o
}

func (o InsightFiltersResourceTagOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceTag] {
	return pulumix.Output[InsightFiltersResourceTag]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceTagOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceTag](o, func(v InsightFiltersResourceTag) string { return v.Comparison })
}

// The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
func (o InsightFiltersResourceTagOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceTag](o, func(v InsightFiltersResourceTag) string { return v.Key })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceTagOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceTag](o, func(v InsightFiltersResourceTag) string { return v.Value })
}

type InsightFiltersResourceType struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersResourceTypeArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersResourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceType)(nil)).Elem()
}

func (i InsightFiltersResourceTypeArgs) ToInsightFiltersResourceTypeOutput() InsightFiltersResourceTypeOutput {
	return i.ToInsightFiltersResourceTypeOutputWithContext(context.Background())
}

func (i InsightFiltersResourceTypeArgs) ToInsightFiltersResourceTypeOutputWithContext(ctx context.Context) InsightFiltersResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersResourceTypeOutput)
}

func (i *InsightFiltersResourceTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersResourceTypeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersResourceTypeOutput struct{ *pulumi.OutputState }

func (InsightFiltersResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersResourceType)(nil)).Elem()
}

func (o InsightFiltersResourceTypeOutput) ToInsightFiltersResourceTypeOutput() InsightFiltersResourceTypeOutput {
	return o
}

func (o InsightFiltersResourceTypeOutput) ToInsightFiltersResourceTypeOutputWithContext(ctx context.Context) InsightFiltersResourceTypeOutput {
	return o
}

func (o InsightFiltersResourceTypeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersResourceType] {
	return pulumix.Output[InsightFiltersResourceType]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersResourceTypeOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceType](o, func(v InsightFiltersResourceType) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersResourceTypeOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersResourceType](o, func(v InsightFiltersResourceType) string { return v.Value })
}

type InsightFiltersSeverityLabel struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersSeverityLabelArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersSeverityLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersSeverityLabel)(nil)).Elem()
}

func (i InsightFiltersSeverityLabelArgs) ToInsightFiltersSeverityLabelOutput() InsightFiltersSeverityLabelOutput {
	return i.ToInsightFiltersSeverityLabelOutputWithContext(context.Background())
}

func (i InsightFiltersSeverityLabelArgs) ToInsightFiltersSeverityLabelOutputWithContext(ctx context.Context) InsightFiltersSeverityLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersSeverityLabelOutput)
}

func (i *InsightFiltersSeverityLabelArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersSeverityLabelArgs] {
	return pulumix.Val(i)
}

type InsightFiltersSeverityLabelOutput struct{ *pulumi.OutputState }

func (InsightFiltersSeverityLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersSeverityLabel)(nil)).Elem()
}

func (o InsightFiltersSeverityLabelOutput) ToInsightFiltersSeverityLabelOutput() InsightFiltersSeverityLabelOutput {
	return o
}

func (o InsightFiltersSeverityLabelOutput) ToInsightFiltersSeverityLabelOutputWithContext(ctx context.Context) InsightFiltersSeverityLabelOutput {
	return o
}

func (o InsightFiltersSeverityLabelOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersSeverityLabel] {
	return pulumix.Output[InsightFiltersSeverityLabel]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersSeverityLabelOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersSeverityLabel](o, func(v InsightFiltersSeverityLabel) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersSeverityLabelOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersSeverityLabel](o, func(v InsightFiltersSeverityLabel) string { return v.Value })
}

type InsightFiltersSourceUrl struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersSourceUrlArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersSourceUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersSourceUrl)(nil)).Elem()
}

func (i InsightFiltersSourceUrlArgs) ToInsightFiltersSourceUrlOutput() InsightFiltersSourceUrlOutput {
	return i.ToInsightFiltersSourceUrlOutputWithContext(context.Background())
}

func (i InsightFiltersSourceUrlArgs) ToInsightFiltersSourceUrlOutputWithContext(ctx context.Context) InsightFiltersSourceUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersSourceUrlOutput)
}

func (i *InsightFiltersSourceUrlArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersSourceUrlArgs] {
	return pulumix.Val(i)
}

type InsightFiltersSourceUrlOutput struct{ *pulumi.OutputState }

func (InsightFiltersSourceUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersSourceUrl)(nil)).Elem()
}

func (o InsightFiltersSourceUrlOutput) ToInsightFiltersSourceUrlOutput() InsightFiltersSourceUrlOutput {
	return o
}

func (o InsightFiltersSourceUrlOutput) ToInsightFiltersSourceUrlOutputWithContext(ctx context.Context) InsightFiltersSourceUrlOutput {
	return o
}

func (o InsightFiltersSourceUrlOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersSourceUrl] {
	return pulumix.Output[InsightFiltersSourceUrl]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersSourceUrlOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersSourceUrl](o, func(v InsightFiltersSourceUrl) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersSourceUrlOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersSourceUrl](o, func(v InsightFiltersSourceUrl) string { return v.Value })
}

type InsightFiltersThreatIntelIndicatorCategory struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersThreatIntelIndicatorCategoryArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersThreatIntelIndicatorCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersThreatIntelIndicatorCategory)(nil)).Elem()
}

func (i InsightFiltersThreatIntelIndicatorCategoryArgs) ToInsightFiltersThreatIntelIndicatorCategoryOutput() InsightFiltersThreatIntelIndicatorCategoryOutput {
	return i.ToInsightFiltersThreatIntelIndicatorCategoryOutputWithContext(context.Background())
}

func (i InsightFiltersThreatIntelIndicatorCategoryArgs) ToInsightFiltersThreatIntelIndicatorCategoryOutputWithContext(ctx context.Context) InsightFiltersThreatIntelIndicatorCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersThreatIntelIndicatorCategoryOutput)
}

func (i *InsightFiltersThreatIntelIndicatorCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersThreatIntelIndicatorCategoryArgs] {
	return pulumix.Val(i)
}

type InsightFiltersThreatIntelIndicatorCategoryOutput struct{ *pulumi.OutputState }

func (InsightFiltersThreatIntelIndicatorCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersThreatIntelIndicatorCategory)(nil)).Elem()
}

func (o InsightFiltersThreatIntelIndicatorCategoryOutput) ToInsightFiltersThreatIntelIndicatorCategoryOutput() InsightFiltersThreatIntelIndicatorCategoryOutput {
	return o
}

func (o InsightFiltersThreatIntelIndicatorCategoryOutput) ToInsightFiltersThreatIntelIndicatorCategoryOutputWithContext(ctx context.Context) InsightFiltersThreatIntelIndicatorCategoryOutput {
	return o
}

func (o InsightFiltersThreatIntelIndicatorCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersThreatIntelIndicatorCategory] {
	return pulumix.Output[InsightFiltersThreatIntelIndicatorCategory]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersThreatIntelIndicatorCategoryOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersThreatIntelIndicatorCategory](o, func(v InsightFiltersThreatIntelIndicatorCategory) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersThreatIntelIndicatorCategoryOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersThreatIntelIndicatorCategory](o, func(v InsightFiltersThreatIntelIndicatorCategory) string { return v.Value })
}

type InsightFiltersThreatIntelIndicatorLastObservedAt struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange *InsightFiltersThreatIntelIndicatorLastObservedAtDateRange `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End *string `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start *string `pulumi:"start"`
}

type InsightFiltersThreatIntelIndicatorLastObservedAtArgs struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange pulumix.Input[*InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs] `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End pulumix.Input[*string] `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start pulumix.Input[*string] `pulumi:"start"`
}

func (InsightFiltersThreatIntelIndicatorLastObservedAtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersThreatIntelIndicatorLastObservedAt)(nil)).Elem()
}

func (i InsightFiltersThreatIntelIndicatorLastObservedAtArgs) ToInsightFiltersThreatIntelIndicatorLastObservedAtOutput() InsightFiltersThreatIntelIndicatorLastObservedAtOutput {
	return i.ToInsightFiltersThreatIntelIndicatorLastObservedAtOutputWithContext(context.Background())
}

func (i InsightFiltersThreatIntelIndicatorLastObservedAtArgs) ToInsightFiltersThreatIntelIndicatorLastObservedAtOutputWithContext(ctx context.Context) InsightFiltersThreatIntelIndicatorLastObservedAtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersThreatIntelIndicatorLastObservedAtOutput)
}

func (i *InsightFiltersThreatIntelIndicatorLastObservedAtArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersThreatIntelIndicatorLastObservedAtArgs] {
	return pulumix.Val(i)
}

type InsightFiltersThreatIntelIndicatorLastObservedAtOutput struct{ *pulumi.OutputState }

func (InsightFiltersThreatIntelIndicatorLastObservedAtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersThreatIntelIndicatorLastObservedAt)(nil)).Elem()
}

func (o InsightFiltersThreatIntelIndicatorLastObservedAtOutput) ToInsightFiltersThreatIntelIndicatorLastObservedAtOutput() InsightFiltersThreatIntelIndicatorLastObservedAtOutput {
	return o
}

func (o InsightFiltersThreatIntelIndicatorLastObservedAtOutput) ToInsightFiltersThreatIntelIndicatorLastObservedAtOutputWithContext(ctx context.Context) InsightFiltersThreatIntelIndicatorLastObservedAtOutput {
	return o
}

func (o InsightFiltersThreatIntelIndicatorLastObservedAtOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersThreatIntelIndicatorLastObservedAt] {
	return pulumix.Output[InsightFiltersThreatIntelIndicatorLastObservedAt]{
		OutputState: o.OutputState,
	}
}

// A configuration block of the date range for the date filter. See dateRange below for more details.
func (o InsightFiltersThreatIntelIndicatorLastObservedAtOutput) DateRange() pulumix.GPtrOutput[InsightFiltersThreatIntelIndicatorLastObservedAtDateRange, InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput] {
	value := pulumix.Apply[InsightFiltersThreatIntelIndicatorLastObservedAt](o, func(v InsightFiltersThreatIntelIndicatorLastObservedAt) *InsightFiltersThreatIntelIndicatorLastObservedAtDateRange {
		return v.DateRange
	})
	return pulumix.GPtrOutput[InsightFiltersThreatIntelIndicatorLastObservedAtDateRange, InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput]{OutputState: value.OutputState}
}

// An end date for the date filter. Required with `start` if `dateRange` is not specified.
func (o InsightFiltersThreatIntelIndicatorLastObservedAtOutput) End() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersThreatIntelIndicatorLastObservedAt](o, func(v InsightFiltersThreatIntelIndicatorLastObservedAt) *string { return v.End })
}

// A start date for the date filter. Required with `end` if `dateRange` is not specified.
func (o InsightFiltersThreatIntelIndicatorLastObservedAtOutput) Start() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersThreatIntelIndicatorLastObservedAt](o, func(v InsightFiltersThreatIntelIndicatorLastObservedAt) *string { return v.Start })
}

type InsightFiltersThreatIntelIndicatorLastObservedAtDateRange struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit string `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value int `pulumi:"value"`
}

type InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersThreatIntelIndicatorLastObservedAtDateRange)(nil)).Elem()
}

func (i InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs) ToInsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput() InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput {
	return i.ToInsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutputWithContext(context.Background())
}

func (i InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs) ToInsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput)
}

func (i *InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput struct{ *pulumi.OutputState }

func (InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersThreatIntelIndicatorLastObservedAtDateRange)(nil)).Elem()
}

func (o InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput) ToInsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput() InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput {
	return o
}

func (o InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput) ToInsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput {
	return o
}

func (o InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersThreatIntelIndicatorLastObservedAtDateRange] {
	return pulumix.Output[InsightFiltersThreatIntelIndicatorLastObservedAtDateRange]{
		OutputState: o.OutputState,
	}
}

// A date range unit for the date filter. Valid values: `DAYS`.
func (o InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersThreatIntelIndicatorLastObservedAtDateRange](o, func(v InsightFiltersThreatIntelIndicatorLastObservedAtDateRange) string { return v.Unit })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[InsightFiltersThreatIntelIndicatorLastObservedAtDateRange](o, func(v InsightFiltersThreatIntelIndicatorLastObservedAtDateRange) int { return v.Value })
}

type InsightFiltersThreatIntelIndicatorSource struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersThreatIntelIndicatorSourceArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersThreatIntelIndicatorSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersThreatIntelIndicatorSource)(nil)).Elem()
}

func (i InsightFiltersThreatIntelIndicatorSourceArgs) ToInsightFiltersThreatIntelIndicatorSourceOutput() InsightFiltersThreatIntelIndicatorSourceOutput {
	return i.ToInsightFiltersThreatIntelIndicatorSourceOutputWithContext(context.Background())
}

func (i InsightFiltersThreatIntelIndicatorSourceArgs) ToInsightFiltersThreatIntelIndicatorSourceOutputWithContext(ctx context.Context) InsightFiltersThreatIntelIndicatorSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersThreatIntelIndicatorSourceOutput)
}

func (i *InsightFiltersThreatIntelIndicatorSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersThreatIntelIndicatorSourceArgs] {
	return pulumix.Val(i)
}

type InsightFiltersThreatIntelIndicatorSourceOutput struct{ *pulumi.OutputState }

func (InsightFiltersThreatIntelIndicatorSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersThreatIntelIndicatorSource)(nil)).Elem()
}

func (o InsightFiltersThreatIntelIndicatorSourceOutput) ToInsightFiltersThreatIntelIndicatorSourceOutput() InsightFiltersThreatIntelIndicatorSourceOutput {
	return o
}

func (o InsightFiltersThreatIntelIndicatorSourceOutput) ToInsightFiltersThreatIntelIndicatorSourceOutputWithContext(ctx context.Context) InsightFiltersThreatIntelIndicatorSourceOutput {
	return o
}

func (o InsightFiltersThreatIntelIndicatorSourceOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersThreatIntelIndicatorSource] {
	return pulumix.Output[InsightFiltersThreatIntelIndicatorSource]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersThreatIntelIndicatorSourceOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersThreatIntelIndicatorSource](o, func(v InsightFiltersThreatIntelIndicatorSource) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersThreatIntelIndicatorSourceOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersThreatIntelIndicatorSource](o, func(v InsightFiltersThreatIntelIndicatorSource) string { return v.Value })
}

type InsightFiltersThreatIntelIndicatorSourceUrl struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersThreatIntelIndicatorSourceUrlArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersThreatIntelIndicatorSourceUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersThreatIntelIndicatorSourceUrl)(nil)).Elem()
}

func (i InsightFiltersThreatIntelIndicatorSourceUrlArgs) ToInsightFiltersThreatIntelIndicatorSourceUrlOutput() InsightFiltersThreatIntelIndicatorSourceUrlOutput {
	return i.ToInsightFiltersThreatIntelIndicatorSourceUrlOutputWithContext(context.Background())
}

func (i InsightFiltersThreatIntelIndicatorSourceUrlArgs) ToInsightFiltersThreatIntelIndicatorSourceUrlOutputWithContext(ctx context.Context) InsightFiltersThreatIntelIndicatorSourceUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersThreatIntelIndicatorSourceUrlOutput)
}

func (i *InsightFiltersThreatIntelIndicatorSourceUrlArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersThreatIntelIndicatorSourceUrlArgs] {
	return pulumix.Val(i)
}

type InsightFiltersThreatIntelIndicatorSourceUrlOutput struct{ *pulumi.OutputState }

func (InsightFiltersThreatIntelIndicatorSourceUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersThreatIntelIndicatorSourceUrl)(nil)).Elem()
}

func (o InsightFiltersThreatIntelIndicatorSourceUrlOutput) ToInsightFiltersThreatIntelIndicatorSourceUrlOutput() InsightFiltersThreatIntelIndicatorSourceUrlOutput {
	return o
}

func (o InsightFiltersThreatIntelIndicatorSourceUrlOutput) ToInsightFiltersThreatIntelIndicatorSourceUrlOutputWithContext(ctx context.Context) InsightFiltersThreatIntelIndicatorSourceUrlOutput {
	return o
}

func (o InsightFiltersThreatIntelIndicatorSourceUrlOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersThreatIntelIndicatorSourceUrl] {
	return pulumix.Output[InsightFiltersThreatIntelIndicatorSourceUrl]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersThreatIntelIndicatorSourceUrlOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersThreatIntelIndicatorSourceUrl](o, func(v InsightFiltersThreatIntelIndicatorSourceUrl) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersThreatIntelIndicatorSourceUrlOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersThreatIntelIndicatorSourceUrl](o, func(v InsightFiltersThreatIntelIndicatorSourceUrl) string { return v.Value })
}

type InsightFiltersThreatIntelIndicatorType struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersThreatIntelIndicatorTypeArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersThreatIntelIndicatorTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersThreatIntelIndicatorType)(nil)).Elem()
}

func (i InsightFiltersThreatIntelIndicatorTypeArgs) ToInsightFiltersThreatIntelIndicatorTypeOutput() InsightFiltersThreatIntelIndicatorTypeOutput {
	return i.ToInsightFiltersThreatIntelIndicatorTypeOutputWithContext(context.Background())
}

func (i InsightFiltersThreatIntelIndicatorTypeArgs) ToInsightFiltersThreatIntelIndicatorTypeOutputWithContext(ctx context.Context) InsightFiltersThreatIntelIndicatorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersThreatIntelIndicatorTypeOutput)
}

func (i *InsightFiltersThreatIntelIndicatorTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersThreatIntelIndicatorTypeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersThreatIntelIndicatorTypeOutput struct{ *pulumi.OutputState }

func (InsightFiltersThreatIntelIndicatorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersThreatIntelIndicatorType)(nil)).Elem()
}

func (o InsightFiltersThreatIntelIndicatorTypeOutput) ToInsightFiltersThreatIntelIndicatorTypeOutput() InsightFiltersThreatIntelIndicatorTypeOutput {
	return o
}

func (o InsightFiltersThreatIntelIndicatorTypeOutput) ToInsightFiltersThreatIntelIndicatorTypeOutputWithContext(ctx context.Context) InsightFiltersThreatIntelIndicatorTypeOutput {
	return o
}

func (o InsightFiltersThreatIntelIndicatorTypeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersThreatIntelIndicatorType] {
	return pulumix.Output[InsightFiltersThreatIntelIndicatorType]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersThreatIntelIndicatorTypeOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersThreatIntelIndicatorType](o, func(v InsightFiltersThreatIntelIndicatorType) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersThreatIntelIndicatorTypeOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersThreatIntelIndicatorType](o, func(v InsightFiltersThreatIntelIndicatorType) string { return v.Value })
}

type InsightFiltersThreatIntelIndicatorValue struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersThreatIntelIndicatorValueArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersThreatIntelIndicatorValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersThreatIntelIndicatorValue)(nil)).Elem()
}

func (i InsightFiltersThreatIntelIndicatorValueArgs) ToInsightFiltersThreatIntelIndicatorValueOutput() InsightFiltersThreatIntelIndicatorValueOutput {
	return i.ToInsightFiltersThreatIntelIndicatorValueOutputWithContext(context.Background())
}

func (i InsightFiltersThreatIntelIndicatorValueArgs) ToInsightFiltersThreatIntelIndicatorValueOutputWithContext(ctx context.Context) InsightFiltersThreatIntelIndicatorValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersThreatIntelIndicatorValueOutput)
}

func (i *InsightFiltersThreatIntelIndicatorValueArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersThreatIntelIndicatorValueArgs] {
	return pulumix.Val(i)
}

type InsightFiltersThreatIntelIndicatorValueOutput struct{ *pulumi.OutputState }

func (InsightFiltersThreatIntelIndicatorValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersThreatIntelIndicatorValue)(nil)).Elem()
}

func (o InsightFiltersThreatIntelIndicatorValueOutput) ToInsightFiltersThreatIntelIndicatorValueOutput() InsightFiltersThreatIntelIndicatorValueOutput {
	return o
}

func (o InsightFiltersThreatIntelIndicatorValueOutput) ToInsightFiltersThreatIntelIndicatorValueOutputWithContext(ctx context.Context) InsightFiltersThreatIntelIndicatorValueOutput {
	return o
}

func (o InsightFiltersThreatIntelIndicatorValueOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersThreatIntelIndicatorValue] {
	return pulumix.Output[InsightFiltersThreatIntelIndicatorValue]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersThreatIntelIndicatorValueOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersThreatIntelIndicatorValue](o, func(v InsightFiltersThreatIntelIndicatorValue) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersThreatIntelIndicatorValueOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersThreatIntelIndicatorValue](o, func(v InsightFiltersThreatIntelIndicatorValue) string { return v.Value })
}

type InsightFiltersTitle struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersTitleArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersTitleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersTitle)(nil)).Elem()
}

func (i InsightFiltersTitleArgs) ToInsightFiltersTitleOutput() InsightFiltersTitleOutput {
	return i.ToInsightFiltersTitleOutputWithContext(context.Background())
}

func (i InsightFiltersTitleArgs) ToInsightFiltersTitleOutputWithContext(ctx context.Context) InsightFiltersTitleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersTitleOutput)
}

func (i *InsightFiltersTitleArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersTitleArgs] {
	return pulumix.Val(i)
}

type InsightFiltersTitleOutput struct{ *pulumi.OutputState }

func (InsightFiltersTitleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersTitle)(nil)).Elem()
}

func (o InsightFiltersTitleOutput) ToInsightFiltersTitleOutput() InsightFiltersTitleOutput {
	return o
}

func (o InsightFiltersTitleOutput) ToInsightFiltersTitleOutputWithContext(ctx context.Context) InsightFiltersTitleOutput {
	return o
}

func (o InsightFiltersTitleOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersTitle] {
	return pulumix.Output[InsightFiltersTitle]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersTitleOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersTitle](o, func(v InsightFiltersTitle) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersTitleOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersTitle](o, func(v InsightFiltersTitle) string { return v.Value })
}

type InsightFiltersType struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersTypeArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersType)(nil)).Elem()
}

func (i InsightFiltersTypeArgs) ToInsightFiltersTypeOutput() InsightFiltersTypeOutput {
	return i.ToInsightFiltersTypeOutputWithContext(context.Background())
}

func (i InsightFiltersTypeArgs) ToInsightFiltersTypeOutputWithContext(ctx context.Context) InsightFiltersTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersTypeOutput)
}

func (i *InsightFiltersTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersTypeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersTypeOutput struct{ *pulumi.OutputState }

func (InsightFiltersTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersType)(nil)).Elem()
}

func (o InsightFiltersTypeOutput) ToInsightFiltersTypeOutput() InsightFiltersTypeOutput {
	return o
}

func (o InsightFiltersTypeOutput) ToInsightFiltersTypeOutputWithContext(ctx context.Context) InsightFiltersTypeOutput {
	return o
}

func (o InsightFiltersTypeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersType] {
	return pulumix.Output[InsightFiltersType]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersTypeOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersType](o, func(v InsightFiltersType) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersTypeOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersType](o, func(v InsightFiltersType) string { return v.Value })
}

type InsightFiltersUpdatedAt struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange *InsightFiltersUpdatedAtDateRange `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End *string `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start *string `pulumi:"start"`
}

type InsightFiltersUpdatedAtArgs struct {
	// A configuration block of the date range for the date filter. See dateRange below for more details.
	DateRange pulumix.Input[*InsightFiltersUpdatedAtDateRangeArgs] `pulumi:"dateRange"`
	// An end date for the date filter. Required with `start` if `dateRange` is not specified.
	End pulumix.Input[*string] `pulumi:"end"`
	// A start date for the date filter. Required with `end` if `dateRange` is not specified.
	Start pulumix.Input[*string] `pulumi:"start"`
}

func (InsightFiltersUpdatedAtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersUpdatedAt)(nil)).Elem()
}

func (i InsightFiltersUpdatedAtArgs) ToInsightFiltersUpdatedAtOutput() InsightFiltersUpdatedAtOutput {
	return i.ToInsightFiltersUpdatedAtOutputWithContext(context.Background())
}

func (i InsightFiltersUpdatedAtArgs) ToInsightFiltersUpdatedAtOutputWithContext(ctx context.Context) InsightFiltersUpdatedAtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersUpdatedAtOutput)
}

func (i *InsightFiltersUpdatedAtArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersUpdatedAtArgs] {
	return pulumix.Val(i)
}

type InsightFiltersUpdatedAtOutput struct{ *pulumi.OutputState }

func (InsightFiltersUpdatedAtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersUpdatedAt)(nil)).Elem()
}

func (o InsightFiltersUpdatedAtOutput) ToInsightFiltersUpdatedAtOutput() InsightFiltersUpdatedAtOutput {
	return o
}

func (o InsightFiltersUpdatedAtOutput) ToInsightFiltersUpdatedAtOutputWithContext(ctx context.Context) InsightFiltersUpdatedAtOutput {
	return o
}

func (o InsightFiltersUpdatedAtOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersUpdatedAt] {
	return pulumix.Output[InsightFiltersUpdatedAt]{
		OutputState: o.OutputState,
	}
}

// A configuration block of the date range for the date filter. See dateRange below for more details.
func (o InsightFiltersUpdatedAtOutput) DateRange() pulumix.GPtrOutput[InsightFiltersUpdatedAtDateRange, InsightFiltersUpdatedAtDateRangeOutput] {
	value := pulumix.Apply[InsightFiltersUpdatedAt](o, func(v InsightFiltersUpdatedAt) *InsightFiltersUpdatedAtDateRange { return v.DateRange })
	return pulumix.GPtrOutput[InsightFiltersUpdatedAtDateRange, InsightFiltersUpdatedAtDateRangeOutput]{OutputState: value.OutputState}
}

// An end date for the date filter. Required with `start` if `dateRange` is not specified.
func (o InsightFiltersUpdatedAtOutput) End() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersUpdatedAt](o, func(v InsightFiltersUpdatedAt) *string { return v.End })
}

// A start date for the date filter. Required with `end` if `dateRange` is not specified.
func (o InsightFiltersUpdatedAtOutput) Start() pulumix.Output[*string] {
	return pulumix.Apply[InsightFiltersUpdatedAt](o, func(v InsightFiltersUpdatedAt) *string { return v.Start })
}

type InsightFiltersUpdatedAtDateRange struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit string `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value int `pulumi:"value"`
}

type InsightFiltersUpdatedAtDateRangeArgs struct {
	// A date range unit for the date filter. Valid values: `DAYS`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (InsightFiltersUpdatedAtDateRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersUpdatedAtDateRange)(nil)).Elem()
}

func (i InsightFiltersUpdatedAtDateRangeArgs) ToInsightFiltersUpdatedAtDateRangeOutput() InsightFiltersUpdatedAtDateRangeOutput {
	return i.ToInsightFiltersUpdatedAtDateRangeOutputWithContext(context.Background())
}

func (i InsightFiltersUpdatedAtDateRangeArgs) ToInsightFiltersUpdatedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersUpdatedAtDateRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersUpdatedAtDateRangeOutput)
}

func (i *InsightFiltersUpdatedAtDateRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersUpdatedAtDateRangeArgs] {
	return pulumix.Val(i)
}

type InsightFiltersUpdatedAtDateRangeOutput struct{ *pulumi.OutputState }

func (InsightFiltersUpdatedAtDateRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersUpdatedAtDateRange)(nil)).Elem()
}

func (o InsightFiltersUpdatedAtDateRangeOutput) ToInsightFiltersUpdatedAtDateRangeOutput() InsightFiltersUpdatedAtDateRangeOutput {
	return o
}

func (o InsightFiltersUpdatedAtDateRangeOutput) ToInsightFiltersUpdatedAtDateRangeOutputWithContext(ctx context.Context) InsightFiltersUpdatedAtDateRangeOutput {
	return o
}

func (o InsightFiltersUpdatedAtDateRangeOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersUpdatedAtDateRange] {
	return pulumix.Output[InsightFiltersUpdatedAtDateRange]{
		OutputState: o.OutputState,
	}
}

// A date range unit for the date filter. Valid values: `DAYS`.
func (o InsightFiltersUpdatedAtDateRangeOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersUpdatedAtDateRange](o, func(v InsightFiltersUpdatedAtDateRange) string { return v.Unit })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersUpdatedAtDateRangeOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[InsightFiltersUpdatedAtDateRange](o, func(v InsightFiltersUpdatedAtDateRange) int { return v.Value })
}

type InsightFiltersUserDefinedValue struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
	Key string `pulumi:"key"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersUserDefinedValueArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
	Key pulumix.Input[string] `pulumi:"key"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersUserDefinedValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersUserDefinedValue)(nil)).Elem()
}

func (i InsightFiltersUserDefinedValueArgs) ToInsightFiltersUserDefinedValueOutput() InsightFiltersUserDefinedValueOutput {
	return i.ToInsightFiltersUserDefinedValueOutputWithContext(context.Background())
}

func (i InsightFiltersUserDefinedValueArgs) ToInsightFiltersUserDefinedValueOutputWithContext(ctx context.Context) InsightFiltersUserDefinedValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersUserDefinedValueOutput)
}

func (i *InsightFiltersUserDefinedValueArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersUserDefinedValueArgs] {
	return pulumix.Val(i)
}

type InsightFiltersUserDefinedValueOutput struct{ *pulumi.OutputState }

func (InsightFiltersUserDefinedValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersUserDefinedValue)(nil)).Elem()
}

func (o InsightFiltersUserDefinedValueOutput) ToInsightFiltersUserDefinedValueOutput() InsightFiltersUserDefinedValueOutput {
	return o
}

func (o InsightFiltersUserDefinedValueOutput) ToInsightFiltersUserDefinedValueOutputWithContext(ctx context.Context) InsightFiltersUserDefinedValueOutput {
	return o
}

func (o InsightFiltersUserDefinedValueOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersUserDefinedValue] {
	return pulumix.Output[InsightFiltersUserDefinedValue]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersUserDefinedValueOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersUserDefinedValue](o, func(v InsightFiltersUserDefinedValue) string { return v.Comparison })
}

// The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
func (o InsightFiltersUserDefinedValueOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersUserDefinedValue](o, func(v InsightFiltersUserDefinedValue) string { return v.Key })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersUserDefinedValueOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersUserDefinedValue](o, func(v InsightFiltersUserDefinedValue) string { return v.Value })
}

type InsightFiltersVerificationState struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersVerificationStateArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersVerificationStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersVerificationState)(nil)).Elem()
}

func (i InsightFiltersVerificationStateArgs) ToInsightFiltersVerificationStateOutput() InsightFiltersVerificationStateOutput {
	return i.ToInsightFiltersVerificationStateOutputWithContext(context.Background())
}

func (i InsightFiltersVerificationStateArgs) ToInsightFiltersVerificationStateOutputWithContext(ctx context.Context) InsightFiltersVerificationStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersVerificationStateOutput)
}

func (i *InsightFiltersVerificationStateArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersVerificationStateArgs] {
	return pulumix.Val(i)
}

type InsightFiltersVerificationStateOutput struct{ *pulumi.OutputState }

func (InsightFiltersVerificationStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersVerificationState)(nil)).Elem()
}

func (o InsightFiltersVerificationStateOutput) ToInsightFiltersVerificationStateOutput() InsightFiltersVerificationStateOutput {
	return o
}

func (o InsightFiltersVerificationStateOutput) ToInsightFiltersVerificationStateOutputWithContext(ctx context.Context) InsightFiltersVerificationStateOutput {
	return o
}

func (o InsightFiltersVerificationStateOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersVerificationState] {
	return pulumix.Output[InsightFiltersVerificationState]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersVerificationStateOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersVerificationState](o, func(v InsightFiltersVerificationState) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersVerificationStateOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersVerificationState](o, func(v InsightFiltersVerificationState) string { return v.Value })
}

type InsightFiltersWorkflowStatus struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison string `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value string `pulumi:"value"`
}

type InsightFiltersWorkflowStatusArgs struct {
	// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
	Comparison pulumix.Input[string] `pulumi:"comparison"`
	// A date range value for the date filter, provided as an Integer.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (InsightFiltersWorkflowStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersWorkflowStatus)(nil)).Elem()
}

func (i InsightFiltersWorkflowStatusArgs) ToInsightFiltersWorkflowStatusOutput() InsightFiltersWorkflowStatusOutput {
	return i.ToInsightFiltersWorkflowStatusOutputWithContext(context.Background())
}

func (i InsightFiltersWorkflowStatusArgs) ToInsightFiltersWorkflowStatusOutputWithContext(ctx context.Context) InsightFiltersWorkflowStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightFiltersWorkflowStatusOutput)
}

func (i *InsightFiltersWorkflowStatusArgs) ToOutput(ctx context.Context) pulumix.Output[*InsightFiltersWorkflowStatusArgs] {
	return pulumix.Val(i)
}

type InsightFiltersWorkflowStatusOutput struct{ *pulumi.OutputState }

func (InsightFiltersWorkflowStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightFiltersWorkflowStatus)(nil)).Elem()
}

func (o InsightFiltersWorkflowStatusOutput) ToInsightFiltersWorkflowStatusOutput() InsightFiltersWorkflowStatusOutput {
	return o
}

func (o InsightFiltersWorkflowStatusOutput) ToInsightFiltersWorkflowStatusOutputWithContext(ctx context.Context) InsightFiltersWorkflowStatusOutput {
	return o
}

func (o InsightFiltersWorkflowStatusOutput) ToOutput(ctx context.Context) pulumix.Output[InsightFiltersWorkflowStatus] {
	return pulumix.Output[InsightFiltersWorkflowStatus]{
		OutputState: o.OutputState,
	}
}

// The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
func (o InsightFiltersWorkflowStatusOutput) Comparison() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersWorkflowStatus](o, func(v InsightFiltersWorkflowStatus) string { return v.Comparison })
}

// A date range value for the date filter, provided as an Integer.
func (o InsightFiltersWorkflowStatusOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[InsightFiltersWorkflowStatus](o, func(v InsightFiltersWorkflowStatus) string { return v.Value })
}

func init() {
	pulumi.RegisterOutputType(InsightFiltersOutput{})
	pulumi.RegisterOutputType(InsightFiltersAwsAccountIdOutput{})
	pulumi.RegisterOutputType(InsightFiltersCompanyNameOutput{})
	pulumi.RegisterOutputType(InsightFiltersComplianceStatusOutput{})
	pulumi.RegisterOutputType(InsightFiltersConfidenceOutput{})
	pulumi.RegisterOutputType(InsightFiltersCreatedAtOutput{})
	pulumi.RegisterOutputType(InsightFiltersCreatedAtDateRangeOutput{})
	pulumi.RegisterOutputType(InsightFiltersCriticalityOutput{})
	pulumi.RegisterOutputType(InsightFiltersDescriptionOutput{})
	pulumi.RegisterOutputType(InsightFiltersFindingProviderFieldsConfidenceOutput{})
	pulumi.RegisterOutputType(InsightFiltersFindingProviderFieldsCriticalityOutput{})
	pulumi.RegisterOutputType(InsightFiltersFindingProviderFieldsRelatedFindingsIdOutput{})
	pulumi.RegisterOutputType(InsightFiltersFindingProviderFieldsRelatedFindingsProductArnOutput{})
	pulumi.RegisterOutputType(InsightFiltersFindingProviderFieldsSeverityLabelOutput{})
	pulumi.RegisterOutputType(InsightFiltersFindingProviderFieldsSeverityOriginalOutput{})
	pulumi.RegisterOutputType(InsightFiltersFindingProviderFieldsTypeOutput{})
	pulumi.RegisterOutputType(InsightFiltersFirstObservedAtOutput{})
	pulumi.RegisterOutputType(InsightFiltersFirstObservedAtDateRangeOutput{})
	pulumi.RegisterOutputType(InsightFiltersGeneratorIdOutput{})
	pulumi.RegisterOutputType(InsightFiltersIdOutput{})
	pulumi.RegisterOutputType(InsightFiltersKeywordOutput{})
	pulumi.RegisterOutputType(InsightFiltersLastObservedAtOutput{})
	pulumi.RegisterOutputType(InsightFiltersLastObservedAtDateRangeOutput{})
	pulumi.RegisterOutputType(InsightFiltersMalwareNameOutput{})
	pulumi.RegisterOutputType(InsightFiltersMalwarePathOutput{})
	pulumi.RegisterOutputType(InsightFiltersMalwareStateOutput{})
	pulumi.RegisterOutputType(InsightFiltersMalwareTypeOutput{})
	pulumi.RegisterOutputType(InsightFiltersNetworkDestinationDomainOutput{})
	pulumi.RegisterOutputType(InsightFiltersNetworkDestinationIpv4Output{})
	pulumi.RegisterOutputType(InsightFiltersNetworkDestinationIpv6Output{})
	pulumi.RegisterOutputType(InsightFiltersNetworkDestinationPortOutput{})
	pulumi.RegisterOutputType(InsightFiltersNetworkDirectionOutput{})
	pulumi.RegisterOutputType(InsightFiltersNetworkProtocolOutput{})
	pulumi.RegisterOutputType(InsightFiltersNetworkSourceDomainOutput{})
	pulumi.RegisterOutputType(InsightFiltersNetworkSourceIpv4Output{})
	pulumi.RegisterOutputType(InsightFiltersNetworkSourceIpv6Output{})
	pulumi.RegisterOutputType(InsightFiltersNetworkSourceMacOutput{})
	pulumi.RegisterOutputType(InsightFiltersNetworkSourcePortOutput{})
	pulumi.RegisterOutputType(InsightFiltersNoteTextOutput{})
	pulumi.RegisterOutputType(InsightFiltersNoteUpdatedAtOutput{})
	pulumi.RegisterOutputType(InsightFiltersNoteUpdatedAtDateRangeOutput{})
	pulumi.RegisterOutputType(InsightFiltersNoteUpdatedByOutput{})
	pulumi.RegisterOutputType(InsightFiltersProcessLaunchedAtOutput{})
	pulumi.RegisterOutputType(InsightFiltersProcessLaunchedAtDateRangeOutput{})
	pulumi.RegisterOutputType(InsightFiltersProcessNameOutput{})
	pulumi.RegisterOutputType(InsightFiltersProcessParentPidOutput{})
	pulumi.RegisterOutputType(InsightFiltersProcessPathOutput{})
	pulumi.RegisterOutputType(InsightFiltersProcessPidOutput{})
	pulumi.RegisterOutputType(InsightFiltersProcessTerminatedAtOutput{})
	pulumi.RegisterOutputType(InsightFiltersProcessTerminatedAtDateRangeOutput{})
	pulumi.RegisterOutputType(InsightFiltersProductArnOutput{})
	pulumi.RegisterOutputType(InsightFiltersProductFieldOutput{})
	pulumi.RegisterOutputType(InsightFiltersProductNameOutput{})
	pulumi.RegisterOutputType(InsightFiltersRecommendationTextOutput{})
	pulumi.RegisterOutputType(InsightFiltersRecordStateOutput{})
	pulumi.RegisterOutputType(InsightFiltersRelatedFindingsIdOutput{})
	pulumi.RegisterOutputType(InsightFiltersRelatedFindingsProductArnOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsEc2InstanceImageIdOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsEc2InstanceIpv4AddressOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsEc2InstanceIpv6AddressOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsEc2InstanceKeyNameOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsEc2InstanceLaunchedAtOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsEc2InstanceSubnetIdOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsEc2InstanceTypeOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsEc2InstanceVpcIdOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsIamAccessKeyCreatedAtOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsIamAccessKeyStatusOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsIamAccessKeyUserNameOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsS3BucketOwnerIdOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceAwsS3BucketOwnerNameOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceContainerImageIdOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceContainerImageNameOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceContainerLaunchedAtOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceContainerLaunchedAtDateRangeOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceContainerNameOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceDetailsOtherOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceIdOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourcePartitionOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceRegionOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceTagOutput{})
	pulumi.RegisterOutputType(InsightFiltersResourceTypeOutput{})
	pulumi.RegisterOutputType(InsightFiltersSeverityLabelOutput{})
	pulumi.RegisterOutputType(InsightFiltersSourceUrlOutput{})
	pulumi.RegisterOutputType(InsightFiltersThreatIntelIndicatorCategoryOutput{})
	pulumi.RegisterOutputType(InsightFiltersThreatIntelIndicatorLastObservedAtOutput{})
	pulumi.RegisterOutputType(InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeOutput{})
	pulumi.RegisterOutputType(InsightFiltersThreatIntelIndicatorSourceOutput{})
	pulumi.RegisterOutputType(InsightFiltersThreatIntelIndicatorSourceUrlOutput{})
	pulumi.RegisterOutputType(InsightFiltersThreatIntelIndicatorTypeOutput{})
	pulumi.RegisterOutputType(InsightFiltersThreatIntelIndicatorValueOutput{})
	pulumi.RegisterOutputType(InsightFiltersTitleOutput{})
	pulumi.RegisterOutputType(InsightFiltersTypeOutput{})
	pulumi.RegisterOutputType(InsightFiltersUpdatedAtOutput{})
	pulumi.RegisterOutputType(InsightFiltersUpdatedAtDateRangeOutput{})
	pulumi.RegisterOutputType(InsightFiltersUserDefinedValueOutput{})
	pulumi.RegisterOutputType(InsightFiltersVerificationStateOutput{})
	pulumi.RegisterOutputType(InsightFiltersWorkflowStatusOutput{})
}
