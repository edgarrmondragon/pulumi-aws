// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emrcontainers

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about an EMR Containers (EMR on EKS) Virtual Cluster.
func LookupVirtualCluster(ctx *pulumi.Context, args *LookupVirtualClusterArgs, opts ...pulumi.InvokeOption) (*LookupVirtualClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVirtualClusterResult
	err := ctx.Invoke("aws:emrcontainers/getVirtualCluster:getVirtualCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVirtualCluster.
type LookupVirtualClusterArgs struct {
	// Key-value mapping of resource tags.
	Tags map[string]string `pulumi:"tags"`
	// ID of the cluster.
	VirtualClusterId string `pulumi:"virtualClusterId"`
}

// A collection of values returned by getVirtualCluster.
type LookupVirtualClusterResult struct {
	// ARN of the cluster.
	Arn string `pulumi:"arn"`
	// Nested attribute containing information about the underlying container provider (EKS cluster) for your EMR Containers cluster.
	ContainerProviders []GetVirtualClusterContainerProvider `pulumi:"containerProviders"`
	// Unix epoch time stamp in seconds for when the cluster was created.
	CreatedAt string `pulumi:"createdAt"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the cluster.
	Name string `pulumi:"name"`
	// Status of the EKS cluster. One of `RUNNING`, `TERMINATING`, `TERMINATED`, `ARRESTED`.
	State string `pulumi:"state"`
	// Key-value mapping of resource tags.
	Tags             map[string]string `pulumi:"tags"`
	VirtualClusterId string            `pulumi:"virtualClusterId"`
}

func LookupVirtualClusterOutput(ctx *pulumi.Context, args LookupVirtualClusterOutputArgs, opts ...pulumi.InvokeOption) LookupVirtualClusterResultOutput {
	outputResult := pulumix.ApplyErr[*LookupVirtualClusterArgs](args.ToOutput(), func(plainArgs *LookupVirtualClusterArgs) (*LookupVirtualClusterResult, error) {
		return LookupVirtualCluster(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupVirtualClusterResultOutput, *LookupVirtualClusterResult](outputResult)
}

// A collection of arguments for invoking getVirtualCluster.
type LookupVirtualClusterOutputArgs struct {
	// Key-value mapping of resource tags.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// ID of the cluster.
	VirtualClusterId pulumix.Input[string] `pulumi:"virtualClusterId"`
}

func (args LookupVirtualClusterOutputArgs) ToOutput() pulumix.Output[*LookupVirtualClusterArgs] {
	allArgs := pulumix.All(
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.VirtualClusterId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupVirtualClusterArgs {
		return &LookupVirtualClusterArgs{
			Tags:             resolvedArgs[0].(map[string]string),
			VirtualClusterId: resolvedArgs[1].(string),
		}
	})
}

type LookupVirtualClusterResultOutput struct{ *pulumi.OutputState }

func (LookupVirtualClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualClusterResult)(nil)).Elem()
}

func (o LookupVirtualClusterResultOutput) ToOutput(context.Context) pulumix.Output[*LookupVirtualClusterResult] {
	return pulumix.Output[*LookupVirtualClusterResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVirtualClusterResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualClusterResult](o, func(v *LookupVirtualClusterResult) string { return v.Arn })
}

func (o LookupVirtualClusterResultOutput) ContainerProviders() pulumix.GArrayOutput[GetVirtualClusterContainerProvider, GetVirtualClusterContainerProviderOutput] {
	value := pulumix.Apply[*LookupVirtualClusterResult](o, func(v *LookupVirtualClusterResult) []GetVirtualClusterContainerProvider { return v.ContainerProviders })
	return pulumix.GArrayOutput[GetVirtualClusterContainerProvider, GetVirtualClusterContainerProviderOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVirtualClusterResultOutput) CreatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualClusterResult](o, func(v *LookupVirtualClusterResult) string { return v.CreatedAt })
}

func (o LookupVirtualClusterResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualClusterResult](o, func(v *LookupVirtualClusterResult) string { return v.Id })
}

func (o LookupVirtualClusterResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualClusterResult](o, func(v *LookupVirtualClusterResult) string { return v.Name })
}

func (o LookupVirtualClusterResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualClusterResult](o, func(v *LookupVirtualClusterResult) string { return v.State })
}

func (o LookupVirtualClusterResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupVirtualClusterResult](o, func(v *LookupVirtualClusterResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVirtualClusterResultOutput) VirtualClusterId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualClusterResult](o, func(v *LookupVirtualClusterResult) string { return v.VirtualClusterId })
}
