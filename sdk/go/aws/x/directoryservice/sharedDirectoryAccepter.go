// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Accepts a shared directory in a consumer account.
//
// > **NOTE:** Destroying this resource removes the shared directory from the consumer account only.
type SharedDirectoryAccepter struct {
	pulumi.CustomResourceState

	// Method used when sharing a directory (i.e., `ORGANIZATIONS` or `HANDSHAKE`).
	Method pulumix.Output[string] `pulumi:"method"`
	// Message sent by the directory owner to the directory consumer to help the directory consumer administrator determine whether to approve or reject the share invitation.
	Notes pulumix.Output[string] `pulumi:"notes"`
	// Account identifier of the directory owner.
	OwnerAccountId pulumix.Output[string] `pulumi:"ownerAccountId"`
	// Identifier of the Managed Microsoft AD directory from the perspective of the directory owner.
	OwnerDirectoryId pulumix.Output[string] `pulumi:"ownerDirectoryId"`
	// Identifier of the directory that is stored in the directory consumer account that corresponds to the shared directory in the owner account.
	SharedDirectoryId pulumix.Output[string] `pulumi:"sharedDirectoryId"`
}

// NewSharedDirectoryAccepter registers a new resource with the given unique name, arguments, and options.
func NewSharedDirectoryAccepter(ctx *pulumi.Context,
	name string, args *SharedDirectoryAccepterArgs, opts ...pulumi.ResourceOption) (*SharedDirectoryAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SharedDirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'SharedDirectoryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SharedDirectoryAccepter
	err := ctx.RegisterResource("aws:directoryservice/sharedDirectoryAccepter:SharedDirectoryAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSharedDirectoryAccepter gets an existing SharedDirectoryAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSharedDirectoryAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SharedDirectoryAccepterState, opts ...pulumi.ResourceOption) (*SharedDirectoryAccepter, error) {
	var resource SharedDirectoryAccepter
	err := ctx.ReadResource("aws:directoryservice/sharedDirectoryAccepter:SharedDirectoryAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SharedDirectoryAccepter resources.
type sharedDirectoryAccepterState struct {
	// Method used when sharing a directory (i.e., `ORGANIZATIONS` or `HANDSHAKE`).
	Method *string `pulumi:"method"`
	// Message sent by the directory owner to the directory consumer to help the directory consumer administrator determine whether to approve or reject the share invitation.
	Notes *string `pulumi:"notes"`
	// Account identifier of the directory owner.
	OwnerAccountId *string `pulumi:"ownerAccountId"`
	// Identifier of the Managed Microsoft AD directory from the perspective of the directory owner.
	OwnerDirectoryId *string `pulumi:"ownerDirectoryId"`
	// Identifier of the directory that is stored in the directory consumer account that corresponds to the shared directory in the owner account.
	SharedDirectoryId *string `pulumi:"sharedDirectoryId"`
}

type SharedDirectoryAccepterState struct {
	// Method used when sharing a directory (i.e., `ORGANIZATIONS` or `HANDSHAKE`).
	Method pulumix.Input[*string]
	// Message sent by the directory owner to the directory consumer to help the directory consumer administrator determine whether to approve or reject the share invitation.
	Notes pulumix.Input[*string]
	// Account identifier of the directory owner.
	OwnerAccountId pulumix.Input[*string]
	// Identifier of the Managed Microsoft AD directory from the perspective of the directory owner.
	OwnerDirectoryId pulumix.Input[*string]
	// Identifier of the directory that is stored in the directory consumer account that corresponds to the shared directory in the owner account.
	SharedDirectoryId pulumix.Input[*string]
}

func (SharedDirectoryAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedDirectoryAccepterState)(nil)).Elem()
}

type sharedDirectoryAccepterArgs struct {
	// Identifier of the directory that is stored in the directory consumer account that corresponds to the shared directory in the owner account.
	SharedDirectoryId string `pulumi:"sharedDirectoryId"`
}

// The set of arguments for constructing a SharedDirectoryAccepter resource.
type SharedDirectoryAccepterArgs struct {
	// Identifier of the directory that is stored in the directory consumer account that corresponds to the shared directory in the owner account.
	SharedDirectoryId pulumix.Input[string]
}

func (SharedDirectoryAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedDirectoryAccepterArgs)(nil)).Elem()
}

type SharedDirectoryAccepterOutput struct{ *pulumi.OutputState }

func (SharedDirectoryAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedDirectoryAccepter)(nil)).Elem()
}

func (o SharedDirectoryAccepterOutput) ToSharedDirectoryAccepterOutput() SharedDirectoryAccepterOutput {
	return o
}

func (o SharedDirectoryAccepterOutput) ToSharedDirectoryAccepterOutputWithContext(ctx context.Context) SharedDirectoryAccepterOutput {
	return o
}

func (o SharedDirectoryAccepterOutput) ToOutput(ctx context.Context) pulumix.Output[SharedDirectoryAccepter] {
	return pulumix.Output[SharedDirectoryAccepter]{
		OutputState: o.OutputState,
	}
}

// Method used when sharing a directory (i.e., `ORGANIZATIONS` or `HANDSHAKE`).
func (o SharedDirectoryAccepterOutput) Method() pulumix.Output[string] {
	value := pulumix.Apply[SharedDirectoryAccepter](o, func(v SharedDirectoryAccepter) pulumix.Output[string] { return v.Method })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Message sent by the directory owner to the directory consumer to help the directory consumer administrator determine whether to approve or reject the share invitation.
func (o SharedDirectoryAccepterOutput) Notes() pulumix.Output[string] {
	value := pulumix.Apply[SharedDirectoryAccepter](o, func(v SharedDirectoryAccepter) pulumix.Output[string] { return v.Notes })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Account identifier of the directory owner.
func (o SharedDirectoryAccepterOutput) OwnerAccountId() pulumix.Output[string] {
	value := pulumix.Apply[SharedDirectoryAccepter](o, func(v SharedDirectoryAccepter) pulumix.Output[string] { return v.OwnerAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identifier of the Managed Microsoft AD directory from the perspective of the directory owner.
func (o SharedDirectoryAccepterOutput) OwnerDirectoryId() pulumix.Output[string] {
	value := pulumix.Apply[SharedDirectoryAccepter](o, func(v SharedDirectoryAccepter) pulumix.Output[string] { return v.OwnerDirectoryId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identifier of the directory that is stored in the directory consumer account that corresponds to the shared directory in the owner account.
func (o SharedDirectoryAccepterOutput) SharedDirectoryId() pulumix.Output[string] {
	value := pulumix.Apply[SharedDirectoryAccepter](o, func(v SharedDirectoryAccepter) pulumix.Output[string] { return v.SharedDirectoryId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SharedDirectoryAccepterOutput{})
}
