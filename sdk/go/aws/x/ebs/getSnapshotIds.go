// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get a list of EBS Snapshot IDs matching the specified
// criteria.
func GetSnapshotIds(ctx *pulumi.Context, args *GetSnapshotIdsArgs, opts ...pulumi.InvokeOption) (*GetSnapshotIdsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSnapshotIdsResult
	err := ctx.Invoke("aws:ebs/getSnapshotIds:getSnapshotIds", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSnapshotIds.
type GetSnapshotIdsArgs struct {
	// One or more name/value pairs to filter off of. There are
	// several valid keys, for a full reference, check out
	// [describe-volumes in the AWS CLI reference][1].
	Filters []GetSnapshotIdsFilter `pulumi:"filters"`
	// Returns the snapshots owned by the specified owner id. Multiple owners can be specified.
	Owners []string `pulumi:"owners"`
	// One or more AWS accounts IDs that can create volumes from the snapshot.
	RestorableByUserIds []string `pulumi:"restorableByUserIds"`
}

// A collection of values returned by getSnapshotIds.
type GetSnapshotIdsResult struct {
	Filters []GetSnapshotIdsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Set of EBS snapshot IDs, sorted by creation time in descending order.
	Ids                 []string `pulumi:"ids"`
	Owners              []string `pulumi:"owners"`
	RestorableByUserIds []string `pulumi:"restorableByUserIds"`
}

func GetSnapshotIdsOutput(ctx *pulumi.Context, args GetSnapshotIdsOutputArgs, opts ...pulumi.InvokeOption) GetSnapshotIdsResultOutput {
	outputResult := pulumix.ApplyErr[*GetSnapshotIdsArgs](args.ToOutput(), func(plainArgs *GetSnapshotIdsArgs) (*GetSnapshotIdsResult, error) {
		return GetSnapshotIds(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetSnapshotIdsResultOutput, *GetSnapshotIdsResult](outputResult)
}

// A collection of arguments for invoking getSnapshotIds.
type GetSnapshotIdsOutputArgs struct {
	// One or more name/value pairs to filter off of. There are
	// several valid keys, for a full reference, check out
	// [describe-volumes in the AWS CLI reference][1].
	Filters pulumix.Input[[]*GetSnapshotIdsFilterArgs] `pulumi:"filters"`
	// Returns the snapshots owned by the specified owner id. Multiple owners can be specified.
	Owners pulumix.Input[[]string] `pulumi:"owners"`
	// One or more AWS accounts IDs that can create volumes from the snapshot.
	RestorableByUserIds pulumix.Input[[]string] `pulumi:"restorableByUserIds"`
}

func (args GetSnapshotIdsOutputArgs) ToOutput() pulumix.Output[*GetSnapshotIdsArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Owners.ToOutput(context.Background()).AsAny(),
		args.RestorableByUserIds.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetSnapshotIdsArgs {
		return &GetSnapshotIdsArgs{
			Filters:             resolvedArgs[0].([]GetSnapshotIdsFilter),
			Owners:              resolvedArgs[1].([]string),
			RestorableByUserIds: resolvedArgs[2].([]string),
		}
	})
}

type GetSnapshotIdsResultOutput struct{ *pulumi.OutputState }

func (GetSnapshotIdsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotIdsResult)(nil)).Elem()
}

func (o GetSnapshotIdsResultOutput) ToOutput(context.Context) pulumix.Output[*GetSnapshotIdsResult] {
	return pulumix.Output[*GetSnapshotIdsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetSnapshotIdsResultOutput) Filters() pulumix.GArrayOutput[GetSnapshotIdsFilter, GetSnapshotIdsFilterOutput] {
	value := pulumix.Apply[*GetSnapshotIdsResult](o, func(v *GetSnapshotIdsResult) []GetSnapshotIdsFilter { return v.Filters })
	return pulumix.GArrayOutput[GetSnapshotIdsFilter, GetSnapshotIdsFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetSnapshotIdsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetSnapshotIdsResult](o, func(v *GetSnapshotIdsResult) string { return v.Id })
}

func (o GetSnapshotIdsResultOutput) Ids() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetSnapshotIdsResult](o, func(v *GetSnapshotIdsResult) []string { return v.Ids })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetSnapshotIdsResultOutput) Owners() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetSnapshotIdsResult](o, func(v *GetSnapshotIdsResult) []string { return v.Owners })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetSnapshotIdsResultOutput) RestorableByUserIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetSnapshotIdsResult](o, func(v *GetSnapshotIdsResult) []string { return v.RestorableByUserIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
