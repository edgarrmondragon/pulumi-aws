// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage a [default subnet](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html#default-vpc-basics) in the current region.
//
// **This is an advanced resource** and has special caveats to be aware of when using it. Please read this document in its entirety before using this resource.
//
// The `ec2.DefaultSubnet` resource behaves differently from normal resources in that if a default subnet exists in the specified Availability Zone, this provider does not _create_ this resource, but instead "adopts" it into management.
// If no default subnet exists, this provider creates a new default subnet.
// By default, `pulumi destroy` does not delete the default subnet but does remove the resource from the state.
// Set the `forceDestroy` argument to `true` to delete the default subnet.
type DefaultSubnet struct {
	pulumi.CustomResourceState

	Arn                         pulumix.Output[string] `pulumi:"arn"`
	AssignIpv6AddressOnCreation pulumix.Output[*bool]  `pulumi:"assignIpv6AddressOnCreation"`
	// is required
	// * The `availabilityZoneId`, `cidrBlock` and `vpcId` arguments become computed attributes
	// * The default value for `mapPublicIpOnLaunch` is `true`
	//
	// This resource supports the following additional arguments:
	AvailabilityZone pulumix.Output[string] `pulumi:"availabilityZone"`
	// The AZ ID of the subnet
	AvailabilityZoneId pulumix.Output[string] `pulumi:"availabilityZoneId"`
	// The IPv4 CIDR block assigned to the subnet
	CidrBlock                               pulumix.Output[string]  `pulumi:"cidrBlock"`
	CustomerOwnedIpv4Pool                   pulumix.Output[*string] `pulumi:"customerOwnedIpv4Pool"`
	EnableDns64                             pulumix.Output[*bool]   `pulumi:"enableDns64"`
	EnableLniAtDeviceIndex                  pulumix.Output[int]     `pulumi:"enableLniAtDeviceIndex"`
	EnableResourceNameDnsARecordOnLaunch    pulumix.Output[*bool]   `pulumi:"enableResourceNameDnsARecordOnLaunch"`
	EnableResourceNameDnsAaaaRecordOnLaunch pulumix.Output[*bool]   `pulumi:"enableResourceNameDnsAaaaRecordOnLaunch"`
	ExistingDefaultSubnet                   pulumix.Output[bool]    `pulumi:"existingDefaultSubnet"`
	// Whether destroying the resource deletes the default subnet. Default: `false`
	ForceDestroy                   pulumix.Output[*bool]     `pulumi:"forceDestroy"`
	Ipv6CidrBlock                  pulumix.Output[string]    `pulumi:"ipv6CidrBlock"`
	Ipv6CidrBlockAssociationId     pulumix.Output[string]    `pulumi:"ipv6CidrBlockAssociationId"`
	Ipv6Native                     pulumix.Output[*bool]     `pulumi:"ipv6Native"`
	MapCustomerOwnedIpOnLaunch     pulumix.Output[*bool]     `pulumi:"mapCustomerOwnedIpOnLaunch"`
	MapPublicIpOnLaunch            pulumix.Output[*bool]     `pulumi:"mapPublicIpOnLaunch"`
	OutpostArn                     pulumix.Output[string]    `pulumi:"outpostArn"`
	OwnerId                        pulumix.Output[string]    `pulumi:"ownerId"`
	PrivateDnsHostnameTypeOnLaunch pulumix.Output[string]    `pulumi:"privateDnsHostnameTypeOnLaunch"`
	Tags                           pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll                        pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The ID of the VPC the subnet is in
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewDefaultSubnet registers a new resource with the given unique name, arguments, and options.
func NewDefaultSubnet(ctx *pulumi.Context,
	name string, args *DefaultSubnetArgs, opts ...pulumi.ResourceOption) (*DefaultSubnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DefaultSubnet
	err := ctx.RegisterResource("aws:ec2/defaultSubnet:DefaultSubnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefaultSubnet gets an existing DefaultSubnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefaultSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefaultSubnetState, opts ...pulumi.ResourceOption) (*DefaultSubnet, error) {
	var resource DefaultSubnet
	err := ctx.ReadResource("aws:ec2/defaultSubnet:DefaultSubnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DefaultSubnet resources.
type defaultSubnetState struct {
	Arn                         *string `pulumi:"arn"`
	AssignIpv6AddressOnCreation *bool   `pulumi:"assignIpv6AddressOnCreation"`
	// is required
	// * The `availabilityZoneId`, `cidrBlock` and `vpcId` arguments become computed attributes
	// * The default value for `mapPublicIpOnLaunch` is `true`
	//
	// This resource supports the following additional arguments:
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The AZ ID of the subnet
	AvailabilityZoneId *string `pulumi:"availabilityZoneId"`
	// The IPv4 CIDR block assigned to the subnet
	CidrBlock                               *string `pulumi:"cidrBlock"`
	CustomerOwnedIpv4Pool                   *string `pulumi:"customerOwnedIpv4Pool"`
	EnableDns64                             *bool   `pulumi:"enableDns64"`
	EnableLniAtDeviceIndex                  *int    `pulumi:"enableLniAtDeviceIndex"`
	EnableResourceNameDnsARecordOnLaunch    *bool   `pulumi:"enableResourceNameDnsARecordOnLaunch"`
	EnableResourceNameDnsAaaaRecordOnLaunch *bool   `pulumi:"enableResourceNameDnsAaaaRecordOnLaunch"`
	ExistingDefaultSubnet                   *bool   `pulumi:"existingDefaultSubnet"`
	// Whether destroying the resource deletes the default subnet. Default: `false`
	ForceDestroy                   *bool             `pulumi:"forceDestroy"`
	Ipv6CidrBlock                  *string           `pulumi:"ipv6CidrBlock"`
	Ipv6CidrBlockAssociationId     *string           `pulumi:"ipv6CidrBlockAssociationId"`
	Ipv6Native                     *bool             `pulumi:"ipv6Native"`
	MapCustomerOwnedIpOnLaunch     *bool             `pulumi:"mapCustomerOwnedIpOnLaunch"`
	MapPublicIpOnLaunch            *bool             `pulumi:"mapPublicIpOnLaunch"`
	OutpostArn                     *string           `pulumi:"outpostArn"`
	OwnerId                        *string           `pulumi:"ownerId"`
	PrivateDnsHostnameTypeOnLaunch *string           `pulumi:"privateDnsHostnameTypeOnLaunch"`
	Tags                           map[string]string `pulumi:"tags"`
	TagsAll                        map[string]string `pulumi:"tagsAll"`
	// The ID of the VPC the subnet is in
	VpcId *string `pulumi:"vpcId"`
}

type DefaultSubnetState struct {
	Arn                         pulumix.Input[*string]
	AssignIpv6AddressOnCreation pulumix.Input[*bool]
	// is required
	// * The `availabilityZoneId`, `cidrBlock` and `vpcId` arguments become computed attributes
	// * The default value for `mapPublicIpOnLaunch` is `true`
	//
	// This resource supports the following additional arguments:
	AvailabilityZone pulumix.Input[*string]
	// The AZ ID of the subnet
	AvailabilityZoneId pulumix.Input[*string]
	// The IPv4 CIDR block assigned to the subnet
	CidrBlock                               pulumix.Input[*string]
	CustomerOwnedIpv4Pool                   pulumix.Input[*string]
	EnableDns64                             pulumix.Input[*bool]
	EnableLniAtDeviceIndex                  pulumix.Input[*int]
	EnableResourceNameDnsARecordOnLaunch    pulumix.Input[*bool]
	EnableResourceNameDnsAaaaRecordOnLaunch pulumix.Input[*bool]
	ExistingDefaultSubnet                   pulumix.Input[*bool]
	// Whether destroying the resource deletes the default subnet. Default: `false`
	ForceDestroy                   pulumix.Input[*bool]
	Ipv6CidrBlock                  pulumix.Input[*string]
	Ipv6CidrBlockAssociationId     pulumix.Input[*string]
	Ipv6Native                     pulumix.Input[*bool]
	MapCustomerOwnedIpOnLaunch     pulumix.Input[*bool]
	MapPublicIpOnLaunch            pulumix.Input[*bool]
	OutpostArn                     pulumix.Input[*string]
	OwnerId                        pulumix.Input[*string]
	PrivateDnsHostnameTypeOnLaunch pulumix.Input[*string]
	Tags                           pulumix.Input[map[string]string]
	TagsAll                        pulumix.Input[map[string]string]
	// The ID of the VPC the subnet is in
	VpcId pulumix.Input[*string]
}

func (DefaultSubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultSubnetState)(nil)).Elem()
}

type defaultSubnetArgs struct {
	AssignIpv6AddressOnCreation *bool `pulumi:"assignIpv6AddressOnCreation"`
	// is required
	// * The `availabilityZoneId`, `cidrBlock` and `vpcId` arguments become computed attributes
	// * The default value for `mapPublicIpOnLaunch` is `true`
	//
	// This resource supports the following additional arguments:
	AvailabilityZone                        string  `pulumi:"availabilityZone"`
	CustomerOwnedIpv4Pool                   *string `pulumi:"customerOwnedIpv4Pool"`
	EnableDns64                             *bool   `pulumi:"enableDns64"`
	EnableResourceNameDnsARecordOnLaunch    *bool   `pulumi:"enableResourceNameDnsARecordOnLaunch"`
	EnableResourceNameDnsAaaaRecordOnLaunch *bool   `pulumi:"enableResourceNameDnsAaaaRecordOnLaunch"`
	// Whether destroying the resource deletes the default subnet. Default: `false`
	ForceDestroy                   *bool             `pulumi:"forceDestroy"`
	Ipv6CidrBlock                  *string           `pulumi:"ipv6CidrBlock"`
	Ipv6Native                     *bool             `pulumi:"ipv6Native"`
	MapCustomerOwnedIpOnLaunch     *bool             `pulumi:"mapCustomerOwnedIpOnLaunch"`
	MapPublicIpOnLaunch            *bool             `pulumi:"mapPublicIpOnLaunch"`
	PrivateDnsHostnameTypeOnLaunch *string           `pulumi:"privateDnsHostnameTypeOnLaunch"`
	Tags                           map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DefaultSubnet resource.
type DefaultSubnetArgs struct {
	AssignIpv6AddressOnCreation pulumix.Input[*bool]
	// is required
	// * The `availabilityZoneId`, `cidrBlock` and `vpcId` arguments become computed attributes
	// * The default value for `mapPublicIpOnLaunch` is `true`
	//
	// This resource supports the following additional arguments:
	AvailabilityZone                        pulumix.Input[string]
	CustomerOwnedIpv4Pool                   pulumix.Input[*string]
	EnableDns64                             pulumix.Input[*bool]
	EnableResourceNameDnsARecordOnLaunch    pulumix.Input[*bool]
	EnableResourceNameDnsAaaaRecordOnLaunch pulumix.Input[*bool]
	// Whether destroying the resource deletes the default subnet. Default: `false`
	ForceDestroy                   pulumix.Input[*bool]
	Ipv6CidrBlock                  pulumix.Input[*string]
	Ipv6Native                     pulumix.Input[*bool]
	MapCustomerOwnedIpOnLaunch     pulumix.Input[*bool]
	MapPublicIpOnLaunch            pulumix.Input[*bool]
	PrivateDnsHostnameTypeOnLaunch pulumix.Input[*string]
	Tags                           pulumix.Input[map[string]string]
}

func (DefaultSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultSubnetArgs)(nil)).Elem()
}

type DefaultSubnetOutput struct{ *pulumi.OutputState }

func (DefaultSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultSubnet)(nil)).Elem()
}

func (o DefaultSubnetOutput) ToDefaultSubnetOutput() DefaultSubnetOutput {
	return o
}

func (o DefaultSubnetOutput) ToDefaultSubnetOutputWithContext(ctx context.Context) DefaultSubnetOutput {
	return o
}

func (o DefaultSubnetOutput) ToOutput(ctx context.Context) pulumix.Output[DefaultSubnet] {
	return pulumix.Output[DefaultSubnet]{
		OutputState: o.OutputState,
	}
}

func (o DefaultSubnetOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o DefaultSubnetOutput) AssignIpv6AddressOnCreation() pulumix.Output[*bool] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[*bool] { return v.AssignIpv6AddressOnCreation })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// is required
// * The `availabilityZoneId`, `cidrBlock` and `vpcId` arguments become computed attributes
// * The default value for `mapPublicIpOnLaunch` is `true`
//
// This resource supports the following additional arguments:
func (o DefaultSubnetOutput) AvailabilityZone() pulumix.Output[string] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[string] { return v.AvailabilityZone })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The AZ ID of the subnet
func (o DefaultSubnetOutput) AvailabilityZoneId() pulumix.Output[string] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[string] { return v.AvailabilityZoneId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IPv4 CIDR block assigned to the subnet
func (o DefaultSubnetOutput) CidrBlock() pulumix.Output[string] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[string] { return v.CidrBlock })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o DefaultSubnetOutput) CustomerOwnedIpv4Pool() pulumix.Output[*string] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[*string] { return v.CustomerOwnedIpv4Pool })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o DefaultSubnetOutput) EnableDns64() pulumix.Output[*bool] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[*bool] { return v.EnableDns64 })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func (o DefaultSubnetOutput) EnableLniAtDeviceIndex() pulumix.Output[int] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[int] { return v.EnableLniAtDeviceIndex })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func (o DefaultSubnetOutput) EnableResourceNameDnsARecordOnLaunch() pulumix.Output[*bool] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[*bool] { return v.EnableResourceNameDnsARecordOnLaunch })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func (o DefaultSubnetOutput) EnableResourceNameDnsAaaaRecordOnLaunch() pulumix.Output[*bool] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[*bool] { return v.EnableResourceNameDnsAaaaRecordOnLaunch })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func (o DefaultSubnetOutput) ExistingDefaultSubnet() pulumix.Output[bool] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[bool] { return v.ExistingDefaultSubnet })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Whether destroying the resource deletes the default subnet. Default: `false`
func (o DefaultSubnetOutput) ForceDestroy() pulumix.Output[*bool] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[*bool] { return v.ForceDestroy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func (o DefaultSubnetOutput) Ipv6CidrBlock() pulumix.Output[string] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[string] { return v.Ipv6CidrBlock })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o DefaultSubnetOutput) Ipv6CidrBlockAssociationId() pulumix.Output[string] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[string] { return v.Ipv6CidrBlockAssociationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o DefaultSubnetOutput) Ipv6Native() pulumix.Output[*bool] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[*bool] { return v.Ipv6Native })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func (o DefaultSubnetOutput) MapCustomerOwnedIpOnLaunch() pulumix.Output[*bool] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[*bool] { return v.MapCustomerOwnedIpOnLaunch })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func (o DefaultSubnetOutput) MapPublicIpOnLaunch() pulumix.Output[*bool] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[*bool] { return v.MapPublicIpOnLaunch })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func (o DefaultSubnetOutput) OutpostArn() pulumix.Output[string] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[string] { return v.OutpostArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o DefaultSubnetOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o DefaultSubnetOutput) PrivateDnsHostnameTypeOnLaunch() pulumix.Output[string] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[string] { return v.PrivateDnsHostnameTypeOnLaunch })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o DefaultSubnetOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o DefaultSubnetOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of the VPC the subnet is in
func (o DefaultSubnetOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[DefaultSubnet](o, func(v DefaultSubnet) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DefaultSubnetOutput{})
}
