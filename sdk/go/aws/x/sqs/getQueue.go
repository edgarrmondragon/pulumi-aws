// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the ARN and URL of queue in AWS Simple Queue Service (SQS).
// By using this data source, you can reference SQS queues without having to hardcode
// the ARNs as input.
func LookupQueue(ctx *pulumi.Context, args *LookupQueueArgs, opts ...pulumi.InvokeOption) (*LookupQueueResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupQueueResult
	err := ctx.Invoke("aws:sqs/getQueue:getQueue", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQueue.
type LookupQueueArgs struct {
	// Name of the queue to match.
	Name string `pulumi:"name"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getQueue.
type LookupQueueResult struct {
	// ARN of the queue.
	Arn string `pulumi:"arn"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
	// URL of the queue.
	Url string `pulumi:"url"`
}

func LookupQueueOutput(ctx *pulumi.Context, args LookupQueueOutputArgs, opts ...pulumi.InvokeOption) LookupQueueResultOutput {
	outputResult := pulumix.ApplyErr[*LookupQueueArgs](args.ToOutput(), func(plainArgs *LookupQueueArgs) (*LookupQueueResult, error) {
		return LookupQueue(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupQueueResultOutput, *LookupQueueResult](outputResult)
}

// A collection of arguments for invoking getQueue.
type LookupQueueOutputArgs struct {
	// Name of the queue to match.
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of tags for the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupQueueOutputArgs) ToOutput() pulumix.Output[*LookupQueueArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupQueueArgs {
		return &LookupQueueArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupQueueResultOutput struct{ *pulumi.OutputState }

func (LookupQueueResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQueueResult)(nil)).Elem()
}

func (o LookupQueueResultOutput) ToOutput(context.Context) pulumix.Output[*LookupQueueResult] {
	return pulumix.Output[*LookupQueueResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupQueueResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupQueueResult](o, func(v *LookupQueueResult) string { return v.Arn })
}

func (o LookupQueueResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupQueueResult](o, func(v *LookupQueueResult) string { return v.Id })
}

func (o LookupQueueResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupQueueResult](o, func(v *LookupQueueResult) string { return v.Name })
}

func (o LookupQueueResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupQueueResult](o, func(v *LookupQueueResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupQueueResultOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[*LookupQueueResult](o, func(v *LookupQueueResult) string { return v.Url })
}
