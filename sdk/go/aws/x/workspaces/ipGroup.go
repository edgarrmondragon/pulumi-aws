// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an IP access control group in AWS WorkSpaces Service
type IpGroup struct {
	pulumi.CustomResourceState

	// The description of the IP group.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The name of the IP group.
	Name pulumix.Output[string] `pulumi:"name"`
	// One or more pairs specifying the IP group rule (in CIDR format) from which web requests originate.
	Rules pulumix.GArrayOutput[IpGroupRule, IpGroupRuleOutput] `pulumi:"rules"`
	// A map of tags assigned to the WorkSpaces directory. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewIpGroup registers a new resource with the given unique name, arguments, and options.
func NewIpGroup(ctx *pulumi.Context,
	name string, args *IpGroupArgs, opts ...pulumi.ResourceOption) (*IpGroup, error) {
	if args == nil {
		args = &IpGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpGroup
	err := ctx.RegisterResource("aws:workspaces/ipGroup:IpGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpGroup gets an existing IpGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpGroupState, opts ...pulumi.ResourceOption) (*IpGroup, error) {
	var resource IpGroup
	err := ctx.ReadResource("aws:workspaces/ipGroup:IpGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpGroup resources.
type ipGroupState struct {
	// The description of the IP group.
	Description *string `pulumi:"description"`
	// The name of the IP group.
	Name *string `pulumi:"name"`
	// One or more pairs specifying the IP group rule (in CIDR format) from which web requests originate.
	Rules []IpGroupRule `pulumi:"rules"`
	// A map of tags assigned to the WorkSpaces directory. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type IpGroupState struct {
	// The description of the IP group.
	Description pulumix.Input[*string]
	// The name of the IP group.
	Name pulumix.Input[*string]
	// One or more pairs specifying the IP group rule (in CIDR format) from which web requests originate.
	Rules pulumix.Input[[]*IpGroupRuleArgs]
	// A map of tags assigned to the WorkSpaces directory. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (IpGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipGroupState)(nil)).Elem()
}

type ipGroupArgs struct {
	// The description of the IP group.
	Description *string `pulumi:"description"`
	// The name of the IP group.
	Name *string `pulumi:"name"`
	// One or more pairs specifying the IP group rule (in CIDR format) from which web requests originate.
	Rules []IpGroupRule `pulumi:"rules"`
	// A map of tags assigned to the WorkSpaces directory. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a IpGroup resource.
type IpGroupArgs struct {
	// The description of the IP group.
	Description pulumix.Input[*string]
	// The name of the IP group.
	Name pulumix.Input[*string]
	// One or more pairs specifying the IP group rule (in CIDR format) from which web requests originate.
	Rules pulumix.Input[[]*IpGroupRuleArgs]
	// A map of tags assigned to the WorkSpaces directory. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (IpGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipGroupArgs)(nil)).Elem()
}

type IpGroupOutput struct{ *pulumi.OutputState }

func (IpGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpGroup)(nil)).Elem()
}

func (o IpGroupOutput) ToIpGroupOutput() IpGroupOutput {
	return o
}

func (o IpGroupOutput) ToIpGroupOutputWithContext(ctx context.Context) IpGroupOutput {
	return o
}

func (o IpGroupOutput) ToOutput(ctx context.Context) pulumix.Output[IpGroup] {
	return pulumix.Output[IpGroup]{
		OutputState: o.OutputState,
	}
}

// The description of the IP group.
func (o IpGroupOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[IpGroup](o, func(v IpGroup) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the IP group.
func (o IpGroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[IpGroup](o, func(v IpGroup) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// One or more pairs specifying the IP group rule (in CIDR format) from which web requests originate.
func (o IpGroupOutput) Rules() pulumix.GArrayOutput[IpGroupRule, IpGroupRuleOutput] {
	value := pulumix.Apply[IpGroup](o, func(v IpGroup) pulumix.GArrayOutput[IpGroupRule, IpGroupRuleOutput] { return v.Rules })
	unwrapped := pulumix.Flatten[[]IpGroupRule, pulumix.GArrayOutput[IpGroupRule, IpGroupRuleOutput]](value)
	return pulumix.GArrayOutput[IpGroupRule, IpGroupRuleOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the WorkSpaces directory. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o IpGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[IpGroup](o, func(v IpGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o IpGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[IpGroup](o, func(v IpGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(IpGroupOutput{})
}
