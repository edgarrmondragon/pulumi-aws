// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rum

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudWatch RUM App Monitor resource.
type AppMonitor struct {
	pulumi.CustomResourceState

	// configuration data for the app monitor. See appMonitorConfiguration below.
	AppMonitorConfiguration pulumix.GPtrOutput[AppMonitorAppMonitorConfiguration, AppMonitorAppMonitorConfigurationOutput] `pulumi:"appMonitorConfiguration"`
	// The unique ID of the app monitor. Useful for JS templates.
	AppMonitorId pulumix.Output[string] `pulumi:"appMonitorId"`
	// The Amazon Resource Name (ARN) specifying the app monitor.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED`. See customEvents below.
	CustomEvents pulumix.GPtrOutput[AppMonitorCustomEvents, AppMonitorCustomEventsOutput] `pulumi:"customEvents"`
	// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is `false`.
	CwLogEnabled pulumix.Output[*bool] `pulumi:"cwLogEnabled"`
	// The name of the log group where the copies are stored.
	CwLogGroup pulumix.Output[string] `pulumi:"cwLogGroup"`
	// The top-level internet domain name for which your application has administrative authority.
	Domain pulumix.Output[string] `pulumi:"domain"`
	// The name of the log stream.
	Name pulumix.Output[string] `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewAppMonitor registers a new resource with the given unique name, arguments, and options.
func NewAppMonitor(ctx *pulumi.Context,
	name string, args *AppMonitorArgs, opts ...pulumi.ResourceOption) (*AppMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppMonitor
	err := ctx.RegisterResource("aws:rum/appMonitor:AppMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppMonitor gets an existing AppMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppMonitorState, opts ...pulumi.ResourceOption) (*AppMonitor, error) {
	var resource AppMonitor
	err := ctx.ReadResource("aws:rum/appMonitor:AppMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppMonitor resources.
type appMonitorState struct {
	// configuration data for the app monitor. See appMonitorConfiguration below.
	AppMonitorConfiguration *AppMonitorAppMonitorConfiguration `pulumi:"appMonitorConfiguration"`
	// The unique ID of the app monitor. Useful for JS templates.
	AppMonitorId *string `pulumi:"appMonitorId"`
	// The Amazon Resource Name (ARN) specifying the app monitor.
	Arn *string `pulumi:"arn"`
	// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED`. See customEvents below.
	CustomEvents *AppMonitorCustomEvents `pulumi:"customEvents"`
	// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is `false`.
	CwLogEnabled *bool `pulumi:"cwLogEnabled"`
	// The name of the log group where the copies are stored.
	CwLogGroup *string `pulumi:"cwLogGroup"`
	// The top-level internet domain name for which your application has administrative authority.
	Domain *string `pulumi:"domain"`
	// The name of the log stream.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type AppMonitorState struct {
	// configuration data for the app monitor. See appMonitorConfiguration below.
	AppMonitorConfiguration pulumix.Input[*AppMonitorAppMonitorConfigurationArgs]
	// The unique ID of the app monitor. Useful for JS templates.
	AppMonitorId pulumix.Input[*string]
	// The Amazon Resource Name (ARN) specifying the app monitor.
	Arn pulumix.Input[*string]
	// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED`. See customEvents below.
	CustomEvents pulumix.Input[*AppMonitorCustomEventsArgs]
	// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is `false`.
	CwLogEnabled pulumix.Input[*bool]
	// The name of the log group where the copies are stored.
	CwLogGroup pulumix.Input[*string]
	// The top-level internet domain name for which your application has administrative authority.
	Domain pulumix.Input[*string]
	// The name of the log stream.
	Name pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (AppMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*appMonitorState)(nil)).Elem()
}

type appMonitorArgs struct {
	// configuration data for the app monitor. See appMonitorConfiguration below.
	AppMonitorConfiguration *AppMonitorAppMonitorConfiguration `pulumi:"appMonitorConfiguration"`
	// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED`. See customEvents below.
	CustomEvents *AppMonitorCustomEvents `pulumi:"customEvents"`
	// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is `false`.
	CwLogEnabled *bool `pulumi:"cwLogEnabled"`
	// The top-level internet domain name for which your application has administrative authority.
	Domain string `pulumi:"domain"`
	// The name of the log stream.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AppMonitor resource.
type AppMonitorArgs struct {
	// configuration data for the app monitor. See appMonitorConfiguration below.
	AppMonitorConfiguration pulumix.Input[*AppMonitorAppMonitorConfigurationArgs]
	// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED`. See customEvents below.
	CustomEvents pulumix.Input[*AppMonitorCustomEventsArgs]
	// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is `false`.
	CwLogEnabled pulumix.Input[*bool]
	// The top-level internet domain name for which your application has administrative authority.
	Domain pulumix.Input[string]
	// The name of the log stream.
	Name pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (AppMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appMonitorArgs)(nil)).Elem()
}

type AppMonitorOutput struct{ *pulumi.OutputState }

func (AppMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitor)(nil)).Elem()
}

func (o AppMonitorOutput) ToAppMonitorOutput() AppMonitorOutput {
	return o
}

func (o AppMonitorOutput) ToAppMonitorOutputWithContext(ctx context.Context) AppMonitorOutput {
	return o
}

func (o AppMonitorOutput) ToOutput(ctx context.Context) pulumix.Output[AppMonitor] {
	return pulumix.Output[AppMonitor]{
		OutputState: o.OutputState,
	}
}

// configuration data for the app monitor. See appMonitorConfiguration below.
func (o AppMonitorOutput) AppMonitorConfiguration() pulumix.GPtrOutput[AppMonitorAppMonitorConfiguration, AppMonitorAppMonitorConfigurationOutput] {
	value := pulumix.Apply[AppMonitor](o, func(v AppMonitor) pulumix.GPtrOutput[AppMonitorAppMonitorConfiguration, AppMonitorAppMonitorConfigurationOutput] {
		return v.AppMonitorConfiguration
	})
	unwrapped := pulumix.Flatten[*AppMonitorAppMonitorConfiguration, pulumix.GPtrOutput[AppMonitorAppMonitorConfiguration, AppMonitorAppMonitorConfigurationOutput]](value)
	return pulumix.GPtrOutput[AppMonitorAppMonitorConfiguration, AppMonitorAppMonitorConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The unique ID of the app monitor. Useful for JS templates.
func (o AppMonitorOutput) AppMonitorId() pulumix.Output[string] {
	value := pulumix.Apply[AppMonitor](o, func(v AppMonitor) pulumix.Output[string] { return v.AppMonitorId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) specifying the app monitor.
func (o AppMonitorOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[AppMonitor](o, func(v AppMonitor) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED`. See customEvents below.
func (o AppMonitorOutput) CustomEvents() pulumix.GPtrOutput[AppMonitorCustomEvents, AppMonitorCustomEventsOutput] {
	value := pulumix.Apply[AppMonitor](o, func(v AppMonitor) pulumix.GPtrOutput[AppMonitorCustomEvents, AppMonitorCustomEventsOutput] {
		return v.CustomEvents
	})
	unwrapped := pulumix.Flatten[*AppMonitorCustomEvents, pulumix.GPtrOutput[AppMonitorCustomEvents, AppMonitorCustomEventsOutput]](value)
	return pulumix.GPtrOutput[AppMonitorCustomEvents, AppMonitorCustomEventsOutput]{OutputState: unwrapped.OutputState}
}

// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is `false`.
func (o AppMonitorOutput) CwLogEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[AppMonitor](o, func(v AppMonitor) pulumix.Output[*bool] { return v.CwLogEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The name of the log group where the copies are stored.
func (o AppMonitorOutput) CwLogGroup() pulumix.Output[string] {
	value := pulumix.Apply[AppMonitor](o, func(v AppMonitor) pulumix.Output[string] { return v.CwLogGroup })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The top-level internet domain name for which your application has administrative authority.
func (o AppMonitorOutput) Domain() pulumix.Output[string] {
	value := pulumix.Apply[AppMonitor](o, func(v AppMonitor) pulumix.Output[string] { return v.Domain })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the log stream.
func (o AppMonitorOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[AppMonitor](o, func(v AppMonitor) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AppMonitorOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[AppMonitor](o, func(v AppMonitor) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o AppMonitorOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[AppMonitor](o, func(v AppMonitor) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(AppMonitorOutput{})
}
