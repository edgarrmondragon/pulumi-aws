// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ExperimentTemplateAction struct {
	// ID of the action. To find out what actions are supported see [AWS FIS actions reference](https://docs.aws.amazon.com/fis/latest/userguide/fis-actions-reference.html).
	ActionId string `pulumi:"actionId"`
	// Description of the action.
	Description *string `pulumi:"description"`
	// Friendly name of the action.
	Name string `pulumi:"name"`
	// Parameter(s) for the action, if applicable. See below.
	Parameters []ExperimentTemplateActionParameter `pulumi:"parameters"`
	// Set of action names that must complete before this action can be executed.
	StartAfters []string `pulumi:"startAfters"`
	// Action's target, if applicable. See below.
	Target *ExperimentTemplateActionTarget `pulumi:"target"`
}

type ExperimentTemplateActionArgs struct {
	// ID of the action. To find out what actions are supported see [AWS FIS actions reference](https://docs.aws.amazon.com/fis/latest/userguide/fis-actions-reference.html).
	ActionId pulumix.Input[string] `pulumi:"actionId"`
	// Description of the action.
	Description pulumix.Input[*string] `pulumi:"description"`
	// Friendly name of the action.
	Name pulumix.Input[string] `pulumi:"name"`
	// Parameter(s) for the action, if applicable. See below.
	Parameters pulumix.Input[[]*ExperimentTemplateActionParameterArgs] `pulumi:"parameters"`
	// Set of action names that must complete before this action can be executed.
	StartAfters pulumix.Input[[]string] `pulumi:"startAfters"`
	// Action's target, if applicable. See below.
	Target pulumix.Input[*ExperimentTemplateActionTargetArgs] `pulumi:"target"`
}

func (ExperimentTemplateActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateAction)(nil)).Elem()
}

func (i ExperimentTemplateActionArgs) ToExperimentTemplateActionOutput() ExperimentTemplateActionOutput {
	return i.ToExperimentTemplateActionOutputWithContext(context.Background())
}

func (i ExperimentTemplateActionArgs) ToExperimentTemplateActionOutputWithContext(ctx context.Context) ExperimentTemplateActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateActionOutput)
}

func (i *ExperimentTemplateActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ExperimentTemplateActionArgs] {
	return pulumix.Val(i)
}

type ExperimentTemplateActionOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateAction)(nil)).Elem()
}

func (o ExperimentTemplateActionOutput) ToExperimentTemplateActionOutput() ExperimentTemplateActionOutput {
	return o
}

func (o ExperimentTemplateActionOutput) ToExperimentTemplateActionOutputWithContext(ctx context.Context) ExperimentTemplateActionOutput {
	return o
}

func (o ExperimentTemplateActionOutput) ToOutput(ctx context.Context) pulumix.Output[ExperimentTemplateAction] {
	return pulumix.Output[ExperimentTemplateAction]{
		OutputState: o.OutputState,
	}
}

// ID of the action. To find out what actions are supported see [AWS FIS actions reference](https://docs.aws.amazon.com/fis/latest/userguide/fis-actions-reference.html).
func (o ExperimentTemplateActionOutput) ActionId() pulumix.Output[string] {
	return pulumix.Apply[ExperimentTemplateAction](o, func(v ExperimentTemplateAction) string { return v.ActionId })
}

// Description of the action.
func (o ExperimentTemplateActionOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[ExperimentTemplateAction](o, func(v ExperimentTemplateAction) *string { return v.Description })
}

// Friendly name of the action.
func (o ExperimentTemplateActionOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ExperimentTemplateAction](o, func(v ExperimentTemplateAction) string { return v.Name })
}

// Parameter(s) for the action, if applicable. See below.
func (o ExperimentTemplateActionOutput) Parameters() pulumix.GArrayOutput[ExperimentTemplateActionParameter, ExperimentTemplateActionParameterOutput] {
	value := pulumix.Apply[ExperimentTemplateAction](o, func(v ExperimentTemplateAction) []ExperimentTemplateActionParameter { return v.Parameters })
	return pulumix.GArrayOutput[ExperimentTemplateActionParameter, ExperimentTemplateActionParameterOutput]{OutputState: value.OutputState}
}

// Set of action names that must complete before this action can be executed.
func (o ExperimentTemplateActionOutput) StartAfters() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ExperimentTemplateAction](o, func(v ExperimentTemplateAction) []string { return v.StartAfters })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Action's target, if applicable. See below.
func (o ExperimentTemplateActionOutput) Target() pulumix.GPtrOutput[ExperimentTemplateActionTarget, ExperimentTemplateActionTargetOutput] {
	value := pulumix.Apply[ExperimentTemplateAction](o, func(v ExperimentTemplateAction) *ExperimentTemplateActionTarget { return v.Target })
	return pulumix.GPtrOutput[ExperimentTemplateActionTarget, ExperimentTemplateActionTargetOutput]{OutputState: value.OutputState}
}

type ExperimentTemplateActionParameter struct {
	// Parameter name.
	Key string `pulumi:"key"`
	// Parameter value.
	//
	// For a list of parameters supported by each action, see [AWS FIS actions reference](https://docs.aws.amazon.com/fis/latest/userguide/fis-actions-reference.html).
	Value string `pulumi:"value"`
}

type ExperimentTemplateActionParameterArgs struct {
	// Parameter name.
	Key pulumix.Input[string] `pulumi:"key"`
	// Parameter value.
	//
	// For a list of parameters supported by each action, see [AWS FIS actions reference](https://docs.aws.amazon.com/fis/latest/userguide/fis-actions-reference.html).
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ExperimentTemplateActionParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateActionParameter)(nil)).Elem()
}

func (i ExperimentTemplateActionParameterArgs) ToExperimentTemplateActionParameterOutput() ExperimentTemplateActionParameterOutput {
	return i.ToExperimentTemplateActionParameterOutputWithContext(context.Background())
}

func (i ExperimentTemplateActionParameterArgs) ToExperimentTemplateActionParameterOutputWithContext(ctx context.Context) ExperimentTemplateActionParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateActionParameterOutput)
}

func (i *ExperimentTemplateActionParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*ExperimentTemplateActionParameterArgs] {
	return pulumix.Val(i)
}

type ExperimentTemplateActionParameterOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateActionParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateActionParameter)(nil)).Elem()
}

func (o ExperimentTemplateActionParameterOutput) ToExperimentTemplateActionParameterOutput() ExperimentTemplateActionParameterOutput {
	return o
}

func (o ExperimentTemplateActionParameterOutput) ToExperimentTemplateActionParameterOutputWithContext(ctx context.Context) ExperimentTemplateActionParameterOutput {
	return o
}

func (o ExperimentTemplateActionParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ExperimentTemplateActionParameter] {
	return pulumix.Output[ExperimentTemplateActionParameter]{
		OutputState: o.OutputState,
	}
}

// Parameter name.
func (o ExperimentTemplateActionParameterOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[ExperimentTemplateActionParameter](o, func(v ExperimentTemplateActionParameter) string { return v.Key })
}

// Parameter value.
//
// For a list of parameters supported by each action, see [AWS FIS actions reference](https://docs.aws.amazon.com/fis/latest/userguide/fis-actions-reference.html).
func (o ExperimentTemplateActionParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ExperimentTemplateActionParameter](o, func(v ExperimentTemplateActionParameter) string { return v.Value })
}

type ExperimentTemplateActionTarget struct {
	// Target type. Valid values are `Cluster` (EKS Cluster), `Clusters` (ECS Clusters), `DBInstances` (RDS DB Instances), `Instances` (EC2 Instances), `Nodegroups` (EKS Node groups), `Roles` (IAM Roles), `SpotInstances` (EC2 Spot Instances), `Subnets` (VPC Subnets), `Volumes` (EBS Volumes) , `Pods` (EKS Pods), `Tasks` (ECS Tasks). See the [documentation](https://docs.aws.amazon.com/fis/latest/userguide/actions.html#action-targets) for more details.
	Key string `pulumi:"key"`
	// Target name, referencing a corresponding target.
	Value string `pulumi:"value"`
}

type ExperimentTemplateActionTargetArgs struct {
	// Target type. Valid values are `Cluster` (EKS Cluster), `Clusters` (ECS Clusters), `DBInstances` (RDS DB Instances), `Instances` (EC2 Instances), `Nodegroups` (EKS Node groups), `Roles` (IAM Roles), `SpotInstances` (EC2 Spot Instances), `Subnets` (VPC Subnets), `Volumes` (EBS Volumes) , `Pods` (EKS Pods), `Tasks` (ECS Tasks). See the [documentation](https://docs.aws.amazon.com/fis/latest/userguide/actions.html#action-targets) for more details.
	Key pulumix.Input[string] `pulumi:"key"`
	// Target name, referencing a corresponding target.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ExperimentTemplateActionTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateActionTarget)(nil)).Elem()
}

func (i ExperimentTemplateActionTargetArgs) ToExperimentTemplateActionTargetOutput() ExperimentTemplateActionTargetOutput {
	return i.ToExperimentTemplateActionTargetOutputWithContext(context.Background())
}

func (i ExperimentTemplateActionTargetArgs) ToExperimentTemplateActionTargetOutputWithContext(ctx context.Context) ExperimentTemplateActionTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateActionTargetOutput)
}

func (i *ExperimentTemplateActionTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*ExperimentTemplateActionTargetArgs] {
	return pulumix.Val(i)
}

type ExperimentTemplateActionTargetOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateActionTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateActionTarget)(nil)).Elem()
}

func (o ExperimentTemplateActionTargetOutput) ToExperimentTemplateActionTargetOutput() ExperimentTemplateActionTargetOutput {
	return o
}

func (o ExperimentTemplateActionTargetOutput) ToExperimentTemplateActionTargetOutputWithContext(ctx context.Context) ExperimentTemplateActionTargetOutput {
	return o
}

func (o ExperimentTemplateActionTargetOutput) ToOutput(ctx context.Context) pulumix.Output[ExperimentTemplateActionTarget] {
	return pulumix.Output[ExperimentTemplateActionTarget]{
		OutputState: o.OutputState,
	}
}

// Target type. Valid values are `Cluster` (EKS Cluster), `Clusters` (ECS Clusters), `DBInstances` (RDS DB Instances), `Instances` (EC2 Instances), `Nodegroups` (EKS Node groups), `Roles` (IAM Roles), `SpotInstances` (EC2 Spot Instances), `Subnets` (VPC Subnets), `Volumes` (EBS Volumes) , `Pods` (EKS Pods), `Tasks` (ECS Tasks). See the [documentation](https://docs.aws.amazon.com/fis/latest/userguide/actions.html#action-targets) for more details.
func (o ExperimentTemplateActionTargetOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[ExperimentTemplateActionTarget](o, func(v ExperimentTemplateActionTarget) string { return v.Key })
}

// Target name, referencing a corresponding target.
func (o ExperimentTemplateActionTargetOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ExperimentTemplateActionTarget](o, func(v ExperimentTemplateActionTarget) string { return v.Value })
}

type ExperimentTemplateLogConfiguration struct {
	// The configuration for experiment logging to Amazon CloudWatch Logs. See below.
	CloudwatchLogsConfiguration *ExperimentTemplateLogConfigurationCloudwatchLogsConfiguration `pulumi:"cloudwatchLogsConfiguration"`
	// The schema version. See [documentation](https://docs.aws.amazon.com/fis/latest/userguide/monitoring-logging.html#experiment-log-schema) for the list of schema versions.
	LogSchemaVersion int `pulumi:"logSchemaVersion"`
	// The configuration for experiment logging to Amazon S3. See below.
	S3Configuration *ExperimentTemplateLogConfigurationS3Configuration `pulumi:"s3Configuration"`
}

type ExperimentTemplateLogConfigurationArgs struct {
	// The configuration for experiment logging to Amazon CloudWatch Logs. See below.
	CloudwatchLogsConfiguration pulumix.Input[*ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationArgs] `pulumi:"cloudwatchLogsConfiguration"`
	// The schema version. See [documentation](https://docs.aws.amazon.com/fis/latest/userguide/monitoring-logging.html#experiment-log-schema) for the list of schema versions.
	LogSchemaVersion pulumix.Input[int] `pulumi:"logSchemaVersion"`
	// The configuration for experiment logging to Amazon S3. See below.
	S3Configuration pulumix.Input[*ExperimentTemplateLogConfigurationS3ConfigurationArgs] `pulumi:"s3Configuration"`
}

func (ExperimentTemplateLogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateLogConfiguration)(nil)).Elem()
}

func (i ExperimentTemplateLogConfigurationArgs) ToExperimentTemplateLogConfigurationOutput() ExperimentTemplateLogConfigurationOutput {
	return i.ToExperimentTemplateLogConfigurationOutputWithContext(context.Background())
}

func (i ExperimentTemplateLogConfigurationArgs) ToExperimentTemplateLogConfigurationOutputWithContext(ctx context.Context) ExperimentTemplateLogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateLogConfigurationOutput)
}

func (i *ExperimentTemplateLogConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ExperimentTemplateLogConfigurationArgs] {
	return pulumix.Val(i)
}

type ExperimentTemplateLogConfigurationOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateLogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateLogConfiguration)(nil)).Elem()
}

func (o ExperimentTemplateLogConfigurationOutput) ToExperimentTemplateLogConfigurationOutput() ExperimentTemplateLogConfigurationOutput {
	return o
}

func (o ExperimentTemplateLogConfigurationOutput) ToExperimentTemplateLogConfigurationOutputWithContext(ctx context.Context) ExperimentTemplateLogConfigurationOutput {
	return o
}

func (o ExperimentTemplateLogConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ExperimentTemplateLogConfiguration] {
	return pulumix.Output[ExperimentTemplateLogConfiguration]{
		OutputState: o.OutputState,
	}
}

// The configuration for experiment logging to Amazon CloudWatch Logs. See below.
func (o ExperimentTemplateLogConfigurationOutput) CloudwatchLogsConfiguration() pulumix.GPtrOutput[ExperimentTemplateLogConfigurationCloudwatchLogsConfiguration, ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput] {
	value := pulumix.Apply[ExperimentTemplateLogConfiguration](o, func(v ExperimentTemplateLogConfiguration) *ExperimentTemplateLogConfigurationCloudwatchLogsConfiguration {
		return v.CloudwatchLogsConfiguration
	})
	return pulumix.GPtrOutput[ExperimentTemplateLogConfigurationCloudwatchLogsConfiguration, ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput]{OutputState: value.OutputState}
}

// The schema version. See [documentation](https://docs.aws.amazon.com/fis/latest/userguide/monitoring-logging.html#experiment-log-schema) for the list of schema versions.
func (o ExperimentTemplateLogConfigurationOutput) LogSchemaVersion() pulumix.Output[int] {
	return pulumix.Apply[ExperimentTemplateLogConfiguration](o, func(v ExperimentTemplateLogConfiguration) int { return v.LogSchemaVersion })
}

// The configuration for experiment logging to Amazon S3. See below.
func (o ExperimentTemplateLogConfigurationOutput) S3Configuration() pulumix.GPtrOutput[ExperimentTemplateLogConfigurationS3Configuration, ExperimentTemplateLogConfigurationS3ConfigurationOutput] {
	value := pulumix.Apply[ExperimentTemplateLogConfiguration](o, func(v ExperimentTemplateLogConfiguration) *ExperimentTemplateLogConfigurationS3Configuration {
		return v.S3Configuration
	})
	return pulumix.GPtrOutput[ExperimentTemplateLogConfigurationS3Configuration, ExperimentTemplateLogConfigurationS3ConfigurationOutput]{OutputState: value.OutputState}
}

type ExperimentTemplateLogConfigurationCloudwatchLogsConfiguration struct {
	// The Amazon Resource Name (ARN) of the destination Amazon CloudWatch Logs log group.
	LogGroupArn string `pulumi:"logGroupArn"`
}

type ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationArgs struct {
	// The Amazon Resource Name (ARN) of the destination Amazon CloudWatch Logs log group.
	LogGroupArn pulumix.Input[string] `pulumi:"logGroupArn"`
}

func (ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateLogConfigurationCloudwatchLogsConfiguration)(nil)).Elem()
}

func (i ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationArgs) ToExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput() ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput {
	return i.ToExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutputWithContext(context.Background())
}

func (i ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationArgs) ToExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutputWithContext(ctx context.Context) ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput)
}

func (i *ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationArgs] {
	return pulumix.Val(i)
}

type ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateLogConfigurationCloudwatchLogsConfiguration)(nil)).Elem()
}

func (o ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput) ToExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput() ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput {
	return o
}

func (o ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput) ToExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutputWithContext(ctx context.Context) ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput {
	return o
}

func (o ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ExperimentTemplateLogConfigurationCloudwatchLogsConfiguration] {
	return pulumix.Output[ExperimentTemplateLogConfigurationCloudwatchLogsConfiguration]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the destination Amazon CloudWatch Logs log group.
func (o ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput) LogGroupArn() pulumix.Output[string] {
	return pulumix.Apply[ExperimentTemplateLogConfigurationCloudwatchLogsConfiguration](o, func(v ExperimentTemplateLogConfigurationCloudwatchLogsConfiguration) string { return v.LogGroupArn })
}

type ExperimentTemplateLogConfigurationS3Configuration struct {
	// The name of the destination bucket.
	BucketName string `pulumi:"bucketName"`
	// The bucket prefix.
	Prefix *string `pulumi:"prefix"`
}

type ExperimentTemplateLogConfigurationS3ConfigurationArgs struct {
	// The name of the destination bucket.
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// The bucket prefix.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
}

func (ExperimentTemplateLogConfigurationS3ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateLogConfigurationS3Configuration)(nil)).Elem()
}

func (i ExperimentTemplateLogConfigurationS3ConfigurationArgs) ToExperimentTemplateLogConfigurationS3ConfigurationOutput() ExperimentTemplateLogConfigurationS3ConfigurationOutput {
	return i.ToExperimentTemplateLogConfigurationS3ConfigurationOutputWithContext(context.Background())
}

func (i ExperimentTemplateLogConfigurationS3ConfigurationArgs) ToExperimentTemplateLogConfigurationS3ConfigurationOutputWithContext(ctx context.Context) ExperimentTemplateLogConfigurationS3ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateLogConfigurationS3ConfigurationOutput)
}

func (i *ExperimentTemplateLogConfigurationS3ConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ExperimentTemplateLogConfigurationS3ConfigurationArgs] {
	return pulumix.Val(i)
}

type ExperimentTemplateLogConfigurationS3ConfigurationOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateLogConfigurationS3ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateLogConfigurationS3Configuration)(nil)).Elem()
}

func (o ExperimentTemplateLogConfigurationS3ConfigurationOutput) ToExperimentTemplateLogConfigurationS3ConfigurationOutput() ExperimentTemplateLogConfigurationS3ConfigurationOutput {
	return o
}

func (o ExperimentTemplateLogConfigurationS3ConfigurationOutput) ToExperimentTemplateLogConfigurationS3ConfigurationOutputWithContext(ctx context.Context) ExperimentTemplateLogConfigurationS3ConfigurationOutput {
	return o
}

func (o ExperimentTemplateLogConfigurationS3ConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ExperimentTemplateLogConfigurationS3Configuration] {
	return pulumix.Output[ExperimentTemplateLogConfigurationS3Configuration]{
		OutputState: o.OutputState,
	}
}

// The name of the destination bucket.
func (o ExperimentTemplateLogConfigurationS3ConfigurationOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[ExperimentTemplateLogConfigurationS3Configuration](o, func(v ExperimentTemplateLogConfigurationS3Configuration) string { return v.BucketName })
}

// The bucket prefix.
func (o ExperimentTemplateLogConfigurationS3ConfigurationOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[ExperimentTemplateLogConfigurationS3Configuration](o, func(v ExperimentTemplateLogConfigurationS3Configuration) *string { return v.Prefix })
}

type ExperimentTemplateStopCondition struct {
	// Source of the condition. One of `none`, `aws:cloudwatch:alarm`.
	Source string `pulumi:"source"`
	// ARN of the CloudWatch alarm. Required if the source is a CloudWatch alarm.
	Value *string `pulumi:"value"`
}

type ExperimentTemplateStopConditionArgs struct {
	// Source of the condition. One of `none`, `aws:cloudwatch:alarm`.
	Source pulumix.Input[string] `pulumi:"source"`
	// ARN of the CloudWatch alarm. Required if the source is a CloudWatch alarm.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (ExperimentTemplateStopConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateStopCondition)(nil)).Elem()
}

func (i ExperimentTemplateStopConditionArgs) ToExperimentTemplateStopConditionOutput() ExperimentTemplateStopConditionOutput {
	return i.ToExperimentTemplateStopConditionOutputWithContext(context.Background())
}

func (i ExperimentTemplateStopConditionArgs) ToExperimentTemplateStopConditionOutputWithContext(ctx context.Context) ExperimentTemplateStopConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateStopConditionOutput)
}

func (i *ExperimentTemplateStopConditionArgs) ToOutput(ctx context.Context) pulumix.Output[*ExperimentTemplateStopConditionArgs] {
	return pulumix.Val(i)
}

type ExperimentTemplateStopConditionOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateStopConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateStopCondition)(nil)).Elem()
}

func (o ExperimentTemplateStopConditionOutput) ToExperimentTemplateStopConditionOutput() ExperimentTemplateStopConditionOutput {
	return o
}

func (o ExperimentTemplateStopConditionOutput) ToExperimentTemplateStopConditionOutputWithContext(ctx context.Context) ExperimentTemplateStopConditionOutput {
	return o
}

func (o ExperimentTemplateStopConditionOutput) ToOutput(ctx context.Context) pulumix.Output[ExperimentTemplateStopCondition] {
	return pulumix.Output[ExperimentTemplateStopCondition]{
		OutputState: o.OutputState,
	}
}

// Source of the condition. One of `none`, `aws:cloudwatch:alarm`.
func (o ExperimentTemplateStopConditionOutput) Source() pulumix.Output[string] {
	return pulumix.Apply[ExperimentTemplateStopCondition](o, func(v ExperimentTemplateStopCondition) string { return v.Source })
}

// ARN of the CloudWatch alarm. Required if the source is a CloudWatch alarm.
func (o ExperimentTemplateStopConditionOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[ExperimentTemplateStopCondition](o, func(v ExperimentTemplateStopCondition) *string { return v.Value })
}

type ExperimentTemplateTarget struct {
	// Filter(s) for the target. Filters can be used to select resources based on specific attributes returned by the respective describe action of the resource type. For more information, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#target-filters). See below.
	Filters []ExperimentTemplateTargetFilter `pulumi:"filters"`
	// Friendly name given to the target.
	Name string `pulumi:"name"`
	// The resource type parameters.
	//
	// > **NOTE:** The `target` configuration block requires either `resourceArns` or `resourceTag`.
	Parameters map[string]string `pulumi:"parameters"`
	// Set of ARNs of the resources to target with an action. Conflicts with `resourceTag`.
	ResourceArns []string `pulumi:"resourceArns"`
	// Tag(s) the resources need to have to be considered a valid target for an action. Conflicts with `resourceArns`. See below.
	ResourceTags []ExperimentTemplateTargetResourceTag `pulumi:"resourceTags"`
	// AWS resource type. The resource type must be supported for the specified action. To find out what resource types are supported, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#resource-types).
	ResourceType string `pulumi:"resourceType"`
	// Scopes the identified resources. Valid values are `ALL` (all identified resources), `COUNT(n)` (randomly select `n` of the identified resources), `PERCENT(n)` (randomly select `n` percent of the identified resources).
	SelectionMode string `pulumi:"selectionMode"`
}

type ExperimentTemplateTargetArgs struct {
	// Filter(s) for the target. Filters can be used to select resources based on specific attributes returned by the respective describe action of the resource type. For more information, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#target-filters). See below.
	Filters pulumix.Input[[]*ExperimentTemplateTargetFilterArgs] `pulumi:"filters"`
	// Friendly name given to the target.
	Name pulumix.Input[string] `pulumi:"name"`
	// The resource type parameters.
	//
	// > **NOTE:** The `target` configuration block requires either `resourceArns` or `resourceTag`.
	Parameters pulumix.Input[map[string]string] `pulumi:"parameters"`
	// Set of ARNs of the resources to target with an action. Conflicts with `resourceTag`.
	ResourceArns pulumix.Input[[]string] `pulumi:"resourceArns"`
	// Tag(s) the resources need to have to be considered a valid target for an action. Conflicts with `resourceArns`. See below.
	ResourceTags pulumix.Input[[]*ExperimentTemplateTargetResourceTagArgs] `pulumi:"resourceTags"`
	// AWS resource type. The resource type must be supported for the specified action. To find out what resource types are supported, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#resource-types).
	ResourceType pulumix.Input[string] `pulumi:"resourceType"`
	// Scopes the identified resources. Valid values are `ALL` (all identified resources), `COUNT(n)` (randomly select `n` of the identified resources), `PERCENT(n)` (randomly select `n` percent of the identified resources).
	SelectionMode pulumix.Input[string] `pulumi:"selectionMode"`
}

func (ExperimentTemplateTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateTarget)(nil)).Elem()
}

func (i ExperimentTemplateTargetArgs) ToExperimentTemplateTargetOutput() ExperimentTemplateTargetOutput {
	return i.ToExperimentTemplateTargetOutputWithContext(context.Background())
}

func (i ExperimentTemplateTargetArgs) ToExperimentTemplateTargetOutputWithContext(ctx context.Context) ExperimentTemplateTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateTargetOutput)
}

func (i *ExperimentTemplateTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*ExperimentTemplateTargetArgs] {
	return pulumix.Val(i)
}

type ExperimentTemplateTargetOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateTarget)(nil)).Elem()
}

func (o ExperimentTemplateTargetOutput) ToExperimentTemplateTargetOutput() ExperimentTemplateTargetOutput {
	return o
}

func (o ExperimentTemplateTargetOutput) ToExperimentTemplateTargetOutputWithContext(ctx context.Context) ExperimentTemplateTargetOutput {
	return o
}

func (o ExperimentTemplateTargetOutput) ToOutput(ctx context.Context) pulumix.Output[ExperimentTemplateTarget] {
	return pulumix.Output[ExperimentTemplateTarget]{
		OutputState: o.OutputState,
	}
}

// Filter(s) for the target. Filters can be used to select resources based on specific attributes returned by the respective describe action of the resource type. For more information, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#target-filters). See below.
func (o ExperimentTemplateTargetOutput) Filters() pulumix.GArrayOutput[ExperimentTemplateTargetFilter, ExperimentTemplateTargetFilterOutput] {
	value := pulumix.Apply[ExperimentTemplateTarget](o, func(v ExperimentTemplateTarget) []ExperimentTemplateTargetFilter { return v.Filters })
	return pulumix.GArrayOutput[ExperimentTemplateTargetFilter, ExperimentTemplateTargetFilterOutput]{OutputState: value.OutputState}
}

// Friendly name given to the target.
func (o ExperimentTemplateTargetOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ExperimentTemplateTarget](o, func(v ExperimentTemplateTarget) string { return v.Name })
}

// The resource type parameters.
//
// > **NOTE:** The `target` configuration block requires either `resourceArns` or `resourceTag`.
func (o ExperimentTemplateTargetOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[ExperimentTemplateTarget](o, func(v ExperimentTemplateTarget) map[string]string { return v.Parameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Set of ARNs of the resources to target with an action. Conflicts with `resourceTag`.
func (o ExperimentTemplateTargetOutput) ResourceArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ExperimentTemplateTarget](o, func(v ExperimentTemplateTarget) []string { return v.ResourceArns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Tag(s) the resources need to have to be considered a valid target for an action. Conflicts with `resourceArns`. See below.
func (o ExperimentTemplateTargetOutput) ResourceTags() pulumix.GArrayOutput[ExperimentTemplateTargetResourceTag, ExperimentTemplateTargetResourceTagOutput] {
	value := pulumix.Apply[ExperimentTemplateTarget](o, func(v ExperimentTemplateTarget) []ExperimentTemplateTargetResourceTag { return v.ResourceTags })
	return pulumix.GArrayOutput[ExperimentTemplateTargetResourceTag, ExperimentTemplateTargetResourceTagOutput]{OutputState: value.OutputState}
}

// AWS resource type. The resource type must be supported for the specified action. To find out what resource types are supported, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#resource-types).
func (o ExperimentTemplateTargetOutput) ResourceType() pulumix.Output[string] {
	return pulumix.Apply[ExperimentTemplateTarget](o, func(v ExperimentTemplateTarget) string { return v.ResourceType })
}

// Scopes the identified resources. Valid values are `ALL` (all identified resources), `COUNT(n)` (randomly select `n` of the identified resources), `PERCENT(n)` (randomly select `n` percent of the identified resources).
func (o ExperimentTemplateTargetOutput) SelectionMode() pulumix.Output[string] {
	return pulumix.Apply[ExperimentTemplateTarget](o, func(v ExperimentTemplateTarget) string { return v.SelectionMode })
}

type ExperimentTemplateTargetFilter struct {
	// Attribute path for the filter.
	Path string `pulumi:"path"`
	// Set of attribute values for the filter.
	//
	// > **NOTE:** Values specified in a `filter` are joined with an `OR` clause, while values across multiple `filter` blocks are joined with an `AND` clause. For more information, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#target-filters).
	Values []string `pulumi:"values"`
}

type ExperimentTemplateTargetFilterArgs struct {
	// Attribute path for the filter.
	Path pulumix.Input[string] `pulumi:"path"`
	// Set of attribute values for the filter.
	//
	// > **NOTE:** Values specified in a `filter` are joined with an `OR` clause, while values across multiple `filter` blocks are joined with an `AND` clause. For more information, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#target-filters).
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (ExperimentTemplateTargetFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateTargetFilter)(nil)).Elem()
}

func (i ExperimentTemplateTargetFilterArgs) ToExperimentTemplateTargetFilterOutput() ExperimentTemplateTargetFilterOutput {
	return i.ToExperimentTemplateTargetFilterOutputWithContext(context.Background())
}

func (i ExperimentTemplateTargetFilterArgs) ToExperimentTemplateTargetFilterOutputWithContext(ctx context.Context) ExperimentTemplateTargetFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateTargetFilterOutput)
}

func (i *ExperimentTemplateTargetFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*ExperimentTemplateTargetFilterArgs] {
	return pulumix.Val(i)
}

type ExperimentTemplateTargetFilterOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateTargetFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateTargetFilter)(nil)).Elem()
}

func (o ExperimentTemplateTargetFilterOutput) ToExperimentTemplateTargetFilterOutput() ExperimentTemplateTargetFilterOutput {
	return o
}

func (o ExperimentTemplateTargetFilterOutput) ToExperimentTemplateTargetFilterOutputWithContext(ctx context.Context) ExperimentTemplateTargetFilterOutput {
	return o
}

func (o ExperimentTemplateTargetFilterOutput) ToOutput(ctx context.Context) pulumix.Output[ExperimentTemplateTargetFilter] {
	return pulumix.Output[ExperimentTemplateTargetFilter]{
		OutputState: o.OutputState,
	}
}

// Attribute path for the filter.
func (o ExperimentTemplateTargetFilterOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[ExperimentTemplateTargetFilter](o, func(v ExperimentTemplateTargetFilter) string { return v.Path })
}

// Set of attribute values for the filter.
//
// > **NOTE:** Values specified in a `filter` are joined with an `OR` clause, while values across multiple `filter` blocks are joined with an `AND` clause. For more information, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#target-filters).
func (o ExperimentTemplateTargetFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ExperimentTemplateTargetFilter](o, func(v ExperimentTemplateTargetFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ExperimentTemplateTargetResourceTag struct {
	// Tag key.
	Key string `pulumi:"key"`
	// Tag value.
	Value string `pulumi:"value"`
}

type ExperimentTemplateTargetResourceTagArgs struct {
	// Tag key.
	Key pulumix.Input[string] `pulumi:"key"`
	// Tag value.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ExperimentTemplateTargetResourceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateTargetResourceTag)(nil)).Elem()
}

func (i ExperimentTemplateTargetResourceTagArgs) ToExperimentTemplateTargetResourceTagOutput() ExperimentTemplateTargetResourceTagOutput {
	return i.ToExperimentTemplateTargetResourceTagOutputWithContext(context.Background())
}

func (i ExperimentTemplateTargetResourceTagArgs) ToExperimentTemplateTargetResourceTagOutputWithContext(ctx context.Context) ExperimentTemplateTargetResourceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateTargetResourceTagOutput)
}

func (i *ExperimentTemplateTargetResourceTagArgs) ToOutput(ctx context.Context) pulumix.Output[*ExperimentTemplateTargetResourceTagArgs] {
	return pulumix.Val(i)
}

type ExperimentTemplateTargetResourceTagOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateTargetResourceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateTargetResourceTag)(nil)).Elem()
}

func (o ExperimentTemplateTargetResourceTagOutput) ToExperimentTemplateTargetResourceTagOutput() ExperimentTemplateTargetResourceTagOutput {
	return o
}

func (o ExperimentTemplateTargetResourceTagOutput) ToExperimentTemplateTargetResourceTagOutputWithContext(ctx context.Context) ExperimentTemplateTargetResourceTagOutput {
	return o
}

func (o ExperimentTemplateTargetResourceTagOutput) ToOutput(ctx context.Context) pulumix.Output[ExperimentTemplateTargetResourceTag] {
	return pulumix.Output[ExperimentTemplateTargetResourceTag]{
		OutputState: o.OutputState,
	}
}

// Tag key.
func (o ExperimentTemplateTargetResourceTagOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[ExperimentTemplateTargetResourceTag](o, func(v ExperimentTemplateTargetResourceTag) string { return v.Key })
}

// Tag value.
func (o ExperimentTemplateTargetResourceTagOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ExperimentTemplateTargetResourceTag](o, func(v ExperimentTemplateTargetResourceTag) string { return v.Value })
}

func init() {
	pulumi.RegisterOutputType(ExperimentTemplateActionOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateActionParameterOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateActionTargetOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateLogConfigurationOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateLogConfigurationCloudwatchLogsConfigurationOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateLogConfigurationS3ConfigurationOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateStopConditionOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateTargetOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateTargetFilterOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateTargetResourceTagOutput{})
}
