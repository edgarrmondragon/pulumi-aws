// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a Location Service Tracker.
func LookupTracker(ctx *pulumi.Context, args *LookupTrackerArgs, opts ...pulumi.InvokeOption) (*LookupTrackerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTrackerResult
	err := ctx.Invoke("aws:location/getTracker:getTracker", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTracker.
type LookupTrackerArgs struct {
	// Key-value map of resource tags for the tracker.
	Tags map[string]string `pulumi:"tags"`
	// Name of the tracker resource.
	TrackerName string `pulumi:"trackerName"`
}

// A collection of values returned by getTracker.
type LookupTrackerResult struct {
	// Timestamp for when the tracker resource was created in ISO 8601 format.
	CreateTime string `pulumi:"createTime"`
	// Optional description for the tracker resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// Position filtering method of the tracker resource.
	PositionFiltering string `pulumi:"positionFiltering"`
	// Key-value map of resource tags for the tracker.
	Tags map[string]string `pulumi:"tags"`
	// ARN for the tracker resource. Used when you need to specify a resource across all AWS.
	TrackerArn  string `pulumi:"trackerArn"`
	TrackerName string `pulumi:"trackerName"`
	// Timestamp for when the tracker resource was last updated in ISO 8601 format.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupTrackerOutput(ctx *pulumi.Context, args LookupTrackerOutputArgs, opts ...pulumi.InvokeOption) LookupTrackerResultOutput {
	outputResult := pulumix.ApplyErr[*LookupTrackerArgs](args.ToOutput(), func(plainArgs *LookupTrackerArgs) (*LookupTrackerResult, error) {
		return LookupTracker(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupTrackerResultOutput, *LookupTrackerResult](outputResult)
}

// A collection of arguments for invoking getTracker.
type LookupTrackerOutputArgs struct {
	// Key-value map of resource tags for the tracker.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Name of the tracker resource.
	TrackerName pulumix.Input[string] `pulumi:"trackerName"`
}

func (args LookupTrackerOutputArgs) ToOutput() pulumix.Output[*LookupTrackerArgs] {
	allArgs := pulumix.All(
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.TrackerName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupTrackerArgs {
		return &LookupTrackerArgs{
			Tags:        resolvedArgs[0].(map[string]string),
			TrackerName: resolvedArgs[1].(string),
		}
	})
}

type LookupTrackerResultOutput struct{ *pulumi.OutputState }

func (LookupTrackerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrackerResult)(nil)).Elem()
}

func (o LookupTrackerResultOutput) ToOutput(context.Context) pulumix.Output[*LookupTrackerResult] {
	return pulumix.Output[*LookupTrackerResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupTrackerResultOutput) CreateTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupTrackerResult](o, func(v *LookupTrackerResult) string { return v.CreateTime })
}

func (o LookupTrackerResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupTrackerResult](o, func(v *LookupTrackerResult) string { return v.Description })
}

func (o LookupTrackerResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupTrackerResult](o, func(v *LookupTrackerResult) string { return v.Id })
}

func (o LookupTrackerResultOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupTrackerResult](o, func(v *LookupTrackerResult) string { return v.KmsKeyId })
}

func (o LookupTrackerResultOutput) PositionFiltering() pulumix.Output[string] {
	return pulumix.Apply[*LookupTrackerResult](o, func(v *LookupTrackerResult) string { return v.PositionFiltering })
}

func (o LookupTrackerResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupTrackerResult](o, func(v *LookupTrackerResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupTrackerResultOutput) TrackerArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupTrackerResult](o, func(v *LookupTrackerResult) string { return v.TrackerArn })
}

func (o LookupTrackerResultOutput) TrackerName() pulumix.Output[string] {
	return pulumix.Apply[*LookupTrackerResult](o, func(v *LookupTrackerResult) string { return v.TrackerName })
}

func (o LookupTrackerResultOutput) UpdateTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupTrackerResult](o, func(v *LookupTrackerResult) string { return v.UpdateTime })
}
