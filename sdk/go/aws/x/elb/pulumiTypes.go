// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type LoadBalancerAccessLogs struct {
	// The S3 bucket name to store the logs in.
	Bucket string `pulumi:"bucket"`
	// The S3 bucket prefix. Logs are stored in the root if not configured.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// Boolean to enable / disable `accessLogs`. Default is `true`
	Enabled *bool `pulumi:"enabled"`
	// The publishing interval in minutes. Valid values: `5` and `60`. Default: `60`
	Interval *int `pulumi:"interval"`
}

type LoadBalancerAccessLogsArgs struct {
	// The S3 bucket name to store the logs in.
	Bucket pulumix.Input[string] `pulumi:"bucket"`
	// The S3 bucket prefix. Logs are stored in the root if not configured.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// Boolean to enable / disable `accessLogs`. Default is `true`
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The publishing interval in minutes. Valid values: `5` and `60`. Default: `60`
	Interval pulumix.Input[*int] `pulumi:"interval"`
}

func (LoadBalancerAccessLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerAccessLogs)(nil)).Elem()
}

func (i LoadBalancerAccessLogsArgs) ToLoadBalancerAccessLogsOutput() LoadBalancerAccessLogsOutput {
	return i.ToLoadBalancerAccessLogsOutputWithContext(context.Background())
}

func (i LoadBalancerAccessLogsArgs) ToLoadBalancerAccessLogsOutputWithContext(ctx context.Context) LoadBalancerAccessLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerAccessLogsOutput)
}

func (i *LoadBalancerAccessLogsArgs) ToOutput(ctx context.Context) pulumix.Output[*LoadBalancerAccessLogsArgs] {
	return pulumix.Val(i)
}

type LoadBalancerAccessLogsOutput struct{ *pulumi.OutputState }

func (LoadBalancerAccessLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerAccessLogs)(nil)).Elem()
}

func (o LoadBalancerAccessLogsOutput) ToLoadBalancerAccessLogsOutput() LoadBalancerAccessLogsOutput {
	return o
}

func (o LoadBalancerAccessLogsOutput) ToLoadBalancerAccessLogsOutputWithContext(ctx context.Context) LoadBalancerAccessLogsOutput {
	return o
}

func (o LoadBalancerAccessLogsOutput) ToOutput(ctx context.Context) pulumix.Output[LoadBalancerAccessLogs] {
	return pulumix.Output[LoadBalancerAccessLogs]{
		OutputState: o.OutputState,
	}
}

// The S3 bucket name to store the logs in.
func (o LoadBalancerAccessLogsOutput) Bucket() pulumix.Output[string] {
	return pulumix.Apply[LoadBalancerAccessLogs](o, func(v LoadBalancerAccessLogs) string { return v.Bucket })
}

// The S3 bucket prefix. Logs are stored in the root if not configured.
func (o LoadBalancerAccessLogsOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[LoadBalancerAccessLogs](o, func(v LoadBalancerAccessLogs) *string { return v.BucketPrefix })
}

// Boolean to enable / disable `accessLogs`. Default is `true`
func (o LoadBalancerAccessLogsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[LoadBalancerAccessLogs](o, func(v LoadBalancerAccessLogs) *bool { return v.Enabled })
}

// The publishing interval in minutes. Valid values: `5` and `60`. Default: `60`
func (o LoadBalancerAccessLogsOutput) Interval() pulumix.Output[*int] {
	return pulumix.Apply[LoadBalancerAccessLogs](o, func(v LoadBalancerAccessLogs) *int { return v.Interval })
}

type LoadBalancerHealthCheck struct {
	// The number of checks before the instance is declared healthy.
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// The interval between checks.
	Interval int `pulumi:"interval"`
	// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
	// values are:
	Target string `pulumi:"target"`
	// The length of time before the check times out.
	Timeout int `pulumi:"timeout"`
	// The number of checks before the instance is declared unhealthy.
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
}

type LoadBalancerHealthCheckArgs struct {
	// The number of checks before the instance is declared healthy.
	HealthyThreshold pulumix.Input[int] `pulumi:"healthyThreshold"`
	// The interval between checks.
	Interval pulumix.Input[int] `pulumi:"interval"`
	// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
	// values are:
	Target pulumix.Input[string] `pulumi:"target"`
	// The length of time before the check times out.
	Timeout pulumix.Input[int] `pulumi:"timeout"`
	// The number of checks before the instance is declared unhealthy.
	UnhealthyThreshold pulumix.Input[int] `pulumi:"unhealthyThreshold"`
}

func (LoadBalancerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerHealthCheck)(nil)).Elem()
}

func (i LoadBalancerHealthCheckArgs) ToLoadBalancerHealthCheckOutput() LoadBalancerHealthCheckOutput {
	return i.ToLoadBalancerHealthCheckOutputWithContext(context.Background())
}

func (i LoadBalancerHealthCheckArgs) ToLoadBalancerHealthCheckOutputWithContext(ctx context.Context) LoadBalancerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthCheckOutput)
}

func (i *LoadBalancerHealthCheckArgs) ToOutput(ctx context.Context) pulumix.Output[*LoadBalancerHealthCheckArgs] {
	return pulumix.Val(i)
}

type LoadBalancerHealthCheckOutput struct{ *pulumi.OutputState }

func (LoadBalancerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerHealthCheck)(nil)).Elem()
}

func (o LoadBalancerHealthCheckOutput) ToLoadBalancerHealthCheckOutput() LoadBalancerHealthCheckOutput {
	return o
}

func (o LoadBalancerHealthCheckOutput) ToLoadBalancerHealthCheckOutputWithContext(ctx context.Context) LoadBalancerHealthCheckOutput {
	return o
}

func (o LoadBalancerHealthCheckOutput) ToOutput(ctx context.Context) pulumix.Output[LoadBalancerHealthCheck] {
	return pulumix.Output[LoadBalancerHealthCheck]{
		OutputState: o.OutputState,
	}
}

// The number of checks before the instance is declared healthy.
func (o LoadBalancerHealthCheckOutput) HealthyThreshold() pulumix.Output[int] {
	return pulumix.Apply[LoadBalancerHealthCheck](o, func(v LoadBalancerHealthCheck) int { return v.HealthyThreshold })
}

// The interval between checks.
func (o LoadBalancerHealthCheckOutput) Interval() pulumix.Output[int] {
	return pulumix.Apply[LoadBalancerHealthCheck](o, func(v LoadBalancerHealthCheck) int { return v.Interval })
}

// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
// values are:
func (o LoadBalancerHealthCheckOutput) Target() pulumix.Output[string] {
	return pulumix.Apply[LoadBalancerHealthCheck](o, func(v LoadBalancerHealthCheck) string { return v.Target })
}

// The length of time before the check times out.
func (o LoadBalancerHealthCheckOutput) Timeout() pulumix.Output[int] {
	return pulumix.Apply[LoadBalancerHealthCheck](o, func(v LoadBalancerHealthCheck) int { return v.Timeout })
}

// The number of checks before the instance is declared unhealthy.
func (o LoadBalancerHealthCheckOutput) UnhealthyThreshold() pulumix.Output[int] {
	return pulumix.Apply[LoadBalancerHealthCheck](o, func(v LoadBalancerHealthCheck) int { return v.UnhealthyThreshold })
}

type LoadBalancerListener struct {
	// The port on the instance to route to
	InstancePort int `pulumi:"instancePort"`
	// The protocol to use to the instance. Valid
	// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
	InstanceProtocol string `pulumi:"instanceProtocol"`
	// The port to listen on for the load balancer
	LbPort int `pulumi:"lbPort"`
	// The protocol to listen on. Valid values are `HTTP`,
	// `HTTPS`, `TCP`, or `SSL`
	LbProtocol string `pulumi:"lbProtocol"`
	// The ARN of an SSL certificate you have
	// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
	SslCertificateId *string `pulumi:"sslCertificateId"`
}

type LoadBalancerListenerArgs struct {
	// The port on the instance to route to
	InstancePort pulumix.Input[int] `pulumi:"instancePort"`
	// The protocol to use to the instance. Valid
	// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
	InstanceProtocol pulumix.Input[string] `pulumi:"instanceProtocol"`
	// The port to listen on for the load balancer
	LbPort pulumix.Input[int] `pulumi:"lbPort"`
	// The protocol to listen on. Valid values are `HTTP`,
	// `HTTPS`, `TCP`, or `SSL`
	LbProtocol pulumix.Input[string] `pulumi:"lbProtocol"`
	// The ARN of an SSL certificate you have
	// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
	SslCertificateId pulumix.Input[*string] `pulumi:"sslCertificateId"`
}

func (LoadBalancerListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerListener)(nil)).Elem()
}

func (i LoadBalancerListenerArgs) ToLoadBalancerListenerOutput() LoadBalancerListenerOutput {
	return i.ToLoadBalancerListenerOutputWithContext(context.Background())
}

func (i LoadBalancerListenerArgs) ToLoadBalancerListenerOutputWithContext(ctx context.Context) LoadBalancerListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerListenerOutput)
}

func (i *LoadBalancerListenerArgs) ToOutput(ctx context.Context) pulumix.Output[*LoadBalancerListenerArgs] {
	return pulumix.Val(i)
}

type LoadBalancerListenerOutput struct{ *pulumi.OutputState }

func (LoadBalancerListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerListener)(nil)).Elem()
}

func (o LoadBalancerListenerOutput) ToLoadBalancerListenerOutput() LoadBalancerListenerOutput {
	return o
}

func (o LoadBalancerListenerOutput) ToLoadBalancerListenerOutputWithContext(ctx context.Context) LoadBalancerListenerOutput {
	return o
}

func (o LoadBalancerListenerOutput) ToOutput(ctx context.Context) pulumix.Output[LoadBalancerListener] {
	return pulumix.Output[LoadBalancerListener]{
		OutputState: o.OutputState,
	}
}

// The port on the instance to route to
func (o LoadBalancerListenerOutput) InstancePort() pulumix.Output[int] {
	return pulumix.Apply[LoadBalancerListener](o, func(v LoadBalancerListener) int { return v.InstancePort })
}

// The protocol to use to the instance. Valid
// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
func (o LoadBalancerListenerOutput) InstanceProtocol() pulumix.Output[string] {
	return pulumix.Apply[LoadBalancerListener](o, func(v LoadBalancerListener) string { return v.InstanceProtocol })
}

// The port to listen on for the load balancer
func (o LoadBalancerListenerOutput) LbPort() pulumix.Output[int] {
	return pulumix.Apply[LoadBalancerListener](o, func(v LoadBalancerListener) int { return v.LbPort })
}

// The protocol to listen on. Valid values are `HTTP`,
// `HTTPS`, `TCP`, or `SSL`
func (o LoadBalancerListenerOutput) LbProtocol() pulumix.Output[string] {
	return pulumix.Apply[LoadBalancerListener](o, func(v LoadBalancerListener) string { return v.LbProtocol })
}

// The ARN of an SSL certificate you have
// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
func (o LoadBalancerListenerOutput) SslCertificateId() pulumix.Output[*string] {
	return pulumix.Apply[LoadBalancerListener](o, func(v LoadBalancerListener) *string { return v.SslCertificateId })
}

type LoadBalancerPolicyPolicyAttribute struct {
	Name  *string `pulumi:"name"`
	Value *string `pulumi:"value"`
}

type LoadBalancerPolicyPolicyAttributeArgs struct {
	Name  pulumix.Input[*string] `pulumi:"name"`
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (LoadBalancerPolicyPolicyAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPolicyPolicyAttribute)(nil)).Elem()
}

func (i LoadBalancerPolicyPolicyAttributeArgs) ToLoadBalancerPolicyPolicyAttributeOutput() LoadBalancerPolicyPolicyAttributeOutput {
	return i.ToLoadBalancerPolicyPolicyAttributeOutputWithContext(context.Background())
}

func (i LoadBalancerPolicyPolicyAttributeArgs) ToLoadBalancerPolicyPolicyAttributeOutputWithContext(ctx context.Context) LoadBalancerPolicyPolicyAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPolicyPolicyAttributeOutput)
}

func (i *LoadBalancerPolicyPolicyAttributeArgs) ToOutput(ctx context.Context) pulumix.Output[*LoadBalancerPolicyPolicyAttributeArgs] {
	return pulumix.Val(i)
}

type LoadBalancerPolicyPolicyAttributeOutput struct{ *pulumi.OutputState }

func (LoadBalancerPolicyPolicyAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPolicyPolicyAttribute)(nil)).Elem()
}

func (o LoadBalancerPolicyPolicyAttributeOutput) ToLoadBalancerPolicyPolicyAttributeOutput() LoadBalancerPolicyPolicyAttributeOutput {
	return o
}

func (o LoadBalancerPolicyPolicyAttributeOutput) ToLoadBalancerPolicyPolicyAttributeOutputWithContext(ctx context.Context) LoadBalancerPolicyPolicyAttributeOutput {
	return o
}

func (o LoadBalancerPolicyPolicyAttributeOutput) ToOutput(ctx context.Context) pulumix.Output[LoadBalancerPolicyPolicyAttribute] {
	return pulumix.Output[LoadBalancerPolicyPolicyAttribute]{
		OutputState: o.OutputState,
	}
}

func (o LoadBalancerPolicyPolicyAttributeOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[LoadBalancerPolicyPolicyAttribute](o, func(v LoadBalancerPolicyPolicyAttribute) *string { return v.Name })
}

func (o LoadBalancerPolicyPolicyAttributeOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[LoadBalancerPolicyPolicyAttribute](o, func(v LoadBalancerPolicyPolicyAttribute) *string { return v.Value })
}

type SslNegotiationPolicyAttribute struct {
	// The name of the attribute
	Name string `pulumi:"name"`
	// The value of the attribute
	Value string `pulumi:"value"`
}

type SslNegotiationPolicyAttributeArgs struct {
	// The name of the attribute
	Name pulumix.Input[string] `pulumi:"name"`
	// The value of the attribute
	Value pulumix.Input[string] `pulumi:"value"`
}

func (SslNegotiationPolicyAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslNegotiationPolicyAttribute)(nil)).Elem()
}

func (i SslNegotiationPolicyAttributeArgs) ToSslNegotiationPolicyAttributeOutput() SslNegotiationPolicyAttributeOutput {
	return i.ToSslNegotiationPolicyAttributeOutputWithContext(context.Background())
}

func (i SslNegotiationPolicyAttributeArgs) ToSslNegotiationPolicyAttributeOutputWithContext(ctx context.Context) SslNegotiationPolicyAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslNegotiationPolicyAttributeOutput)
}

func (i *SslNegotiationPolicyAttributeArgs) ToOutput(ctx context.Context) pulumix.Output[*SslNegotiationPolicyAttributeArgs] {
	return pulumix.Val(i)
}

type SslNegotiationPolicyAttributeOutput struct{ *pulumi.OutputState }

func (SslNegotiationPolicyAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslNegotiationPolicyAttribute)(nil)).Elem()
}

func (o SslNegotiationPolicyAttributeOutput) ToSslNegotiationPolicyAttributeOutput() SslNegotiationPolicyAttributeOutput {
	return o
}

func (o SslNegotiationPolicyAttributeOutput) ToSslNegotiationPolicyAttributeOutputWithContext(ctx context.Context) SslNegotiationPolicyAttributeOutput {
	return o
}

func (o SslNegotiationPolicyAttributeOutput) ToOutput(ctx context.Context) pulumix.Output[SslNegotiationPolicyAttribute] {
	return pulumix.Output[SslNegotiationPolicyAttribute]{
		OutputState: o.OutputState,
	}
}

// The name of the attribute
func (o SslNegotiationPolicyAttributeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[SslNegotiationPolicyAttribute](o, func(v SslNegotiationPolicyAttribute) string { return v.Name })
}

// The value of the attribute
func (o SslNegotiationPolicyAttributeOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[SslNegotiationPolicyAttribute](o, func(v SslNegotiationPolicyAttribute) string { return v.Value })
}

type GetLoadBalancerAccessLogs struct {
	Bucket       string `pulumi:"bucket"`
	BucketPrefix string `pulumi:"bucketPrefix"`
	Enabled      bool   `pulumi:"enabled"`
	Interval     int    `pulumi:"interval"`
}

type GetLoadBalancerAccessLogsArgs struct {
	Bucket       pulumix.Input[string] `pulumi:"bucket"`
	BucketPrefix pulumix.Input[string] `pulumi:"bucketPrefix"`
	Enabled      pulumix.Input[bool]   `pulumi:"enabled"`
	Interval     pulumix.Input[int]    `pulumi:"interval"`
}

func (GetLoadBalancerAccessLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerAccessLogs)(nil)).Elem()
}

func (i GetLoadBalancerAccessLogsArgs) ToGetLoadBalancerAccessLogsOutput() GetLoadBalancerAccessLogsOutput {
	return i.ToGetLoadBalancerAccessLogsOutputWithContext(context.Background())
}

func (i GetLoadBalancerAccessLogsArgs) ToGetLoadBalancerAccessLogsOutputWithContext(ctx context.Context) GetLoadBalancerAccessLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerAccessLogsOutput)
}

func (i *GetLoadBalancerAccessLogsArgs) ToOutput(ctx context.Context) pulumix.Output[*GetLoadBalancerAccessLogsArgs] {
	return pulumix.Val(i)
}

type GetLoadBalancerAccessLogsOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerAccessLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerAccessLogs)(nil)).Elem()
}

func (o GetLoadBalancerAccessLogsOutput) ToGetLoadBalancerAccessLogsOutput() GetLoadBalancerAccessLogsOutput {
	return o
}

func (o GetLoadBalancerAccessLogsOutput) ToGetLoadBalancerAccessLogsOutputWithContext(ctx context.Context) GetLoadBalancerAccessLogsOutput {
	return o
}

func (o GetLoadBalancerAccessLogsOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoadBalancerAccessLogs] {
	return pulumix.Output[GetLoadBalancerAccessLogs]{
		OutputState: o.OutputState,
	}
}

func (o GetLoadBalancerAccessLogsOutput) Bucket() pulumix.Output[string] {
	return pulumix.Apply[GetLoadBalancerAccessLogs](o, func(v GetLoadBalancerAccessLogs) string { return v.Bucket })
}

func (o GetLoadBalancerAccessLogsOutput) BucketPrefix() pulumix.Output[string] {
	return pulumix.Apply[GetLoadBalancerAccessLogs](o, func(v GetLoadBalancerAccessLogs) string { return v.BucketPrefix })
}

func (o GetLoadBalancerAccessLogsOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetLoadBalancerAccessLogs](o, func(v GetLoadBalancerAccessLogs) bool { return v.Enabled })
}

func (o GetLoadBalancerAccessLogsOutput) Interval() pulumix.Output[int] {
	return pulumix.Apply[GetLoadBalancerAccessLogs](o, func(v GetLoadBalancerAccessLogs) int { return v.Interval })
}

type GetLoadBalancerHealthCheck struct {
	HealthyThreshold   int    `pulumi:"healthyThreshold"`
	Interval           int    `pulumi:"interval"`
	Target             string `pulumi:"target"`
	Timeout            int    `pulumi:"timeout"`
	UnhealthyThreshold int    `pulumi:"unhealthyThreshold"`
}

type GetLoadBalancerHealthCheckArgs struct {
	HealthyThreshold   pulumix.Input[int]    `pulumi:"healthyThreshold"`
	Interval           pulumix.Input[int]    `pulumi:"interval"`
	Target             pulumix.Input[string] `pulumi:"target"`
	Timeout            pulumix.Input[int]    `pulumi:"timeout"`
	UnhealthyThreshold pulumix.Input[int]    `pulumi:"unhealthyThreshold"`
}

func (GetLoadBalancerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerHealthCheck)(nil)).Elem()
}

func (i GetLoadBalancerHealthCheckArgs) ToGetLoadBalancerHealthCheckOutput() GetLoadBalancerHealthCheckOutput {
	return i.ToGetLoadBalancerHealthCheckOutputWithContext(context.Background())
}

func (i GetLoadBalancerHealthCheckArgs) ToGetLoadBalancerHealthCheckOutputWithContext(ctx context.Context) GetLoadBalancerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerHealthCheckOutput)
}

func (i *GetLoadBalancerHealthCheckArgs) ToOutput(ctx context.Context) pulumix.Output[*GetLoadBalancerHealthCheckArgs] {
	return pulumix.Val(i)
}

type GetLoadBalancerHealthCheckOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerHealthCheck)(nil)).Elem()
}

func (o GetLoadBalancerHealthCheckOutput) ToGetLoadBalancerHealthCheckOutput() GetLoadBalancerHealthCheckOutput {
	return o
}

func (o GetLoadBalancerHealthCheckOutput) ToGetLoadBalancerHealthCheckOutputWithContext(ctx context.Context) GetLoadBalancerHealthCheckOutput {
	return o
}

func (o GetLoadBalancerHealthCheckOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoadBalancerHealthCheck] {
	return pulumix.Output[GetLoadBalancerHealthCheck]{
		OutputState: o.OutputState,
	}
}

func (o GetLoadBalancerHealthCheckOutput) HealthyThreshold() pulumix.Output[int] {
	return pulumix.Apply[GetLoadBalancerHealthCheck](o, func(v GetLoadBalancerHealthCheck) int { return v.HealthyThreshold })
}

func (o GetLoadBalancerHealthCheckOutput) Interval() pulumix.Output[int] {
	return pulumix.Apply[GetLoadBalancerHealthCheck](o, func(v GetLoadBalancerHealthCheck) int { return v.Interval })
}

func (o GetLoadBalancerHealthCheckOutput) Target() pulumix.Output[string] {
	return pulumix.Apply[GetLoadBalancerHealthCheck](o, func(v GetLoadBalancerHealthCheck) string { return v.Target })
}

func (o GetLoadBalancerHealthCheckOutput) Timeout() pulumix.Output[int] {
	return pulumix.Apply[GetLoadBalancerHealthCheck](o, func(v GetLoadBalancerHealthCheck) int { return v.Timeout })
}

func (o GetLoadBalancerHealthCheckOutput) UnhealthyThreshold() pulumix.Output[int] {
	return pulumix.Apply[GetLoadBalancerHealthCheck](o, func(v GetLoadBalancerHealthCheck) int { return v.UnhealthyThreshold })
}

type GetLoadBalancerListener struct {
	InstancePort     int    `pulumi:"instancePort"`
	InstanceProtocol string `pulumi:"instanceProtocol"`
	LbPort           int    `pulumi:"lbPort"`
	LbProtocol       string `pulumi:"lbProtocol"`
	SslCertificateId string `pulumi:"sslCertificateId"`
}

type GetLoadBalancerListenerArgs struct {
	InstancePort     pulumix.Input[int]    `pulumi:"instancePort"`
	InstanceProtocol pulumix.Input[string] `pulumi:"instanceProtocol"`
	LbPort           pulumix.Input[int]    `pulumi:"lbPort"`
	LbProtocol       pulumix.Input[string] `pulumi:"lbProtocol"`
	SslCertificateId pulumix.Input[string] `pulumi:"sslCertificateId"`
}

func (GetLoadBalancerListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerListener)(nil)).Elem()
}

func (i GetLoadBalancerListenerArgs) ToGetLoadBalancerListenerOutput() GetLoadBalancerListenerOutput {
	return i.ToGetLoadBalancerListenerOutputWithContext(context.Background())
}

func (i GetLoadBalancerListenerArgs) ToGetLoadBalancerListenerOutputWithContext(ctx context.Context) GetLoadBalancerListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerListenerOutput)
}

func (i *GetLoadBalancerListenerArgs) ToOutput(ctx context.Context) pulumix.Output[*GetLoadBalancerListenerArgs] {
	return pulumix.Val(i)
}

type GetLoadBalancerListenerOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerListener)(nil)).Elem()
}

func (o GetLoadBalancerListenerOutput) ToGetLoadBalancerListenerOutput() GetLoadBalancerListenerOutput {
	return o
}

func (o GetLoadBalancerListenerOutput) ToGetLoadBalancerListenerOutputWithContext(ctx context.Context) GetLoadBalancerListenerOutput {
	return o
}

func (o GetLoadBalancerListenerOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoadBalancerListener] {
	return pulumix.Output[GetLoadBalancerListener]{
		OutputState: o.OutputState,
	}
}

func (o GetLoadBalancerListenerOutput) InstancePort() pulumix.Output[int] {
	return pulumix.Apply[GetLoadBalancerListener](o, func(v GetLoadBalancerListener) int { return v.InstancePort })
}

func (o GetLoadBalancerListenerOutput) InstanceProtocol() pulumix.Output[string] {
	return pulumix.Apply[GetLoadBalancerListener](o, func(v GetLoadBalancerListener) string { return v.InstanceProtocol })
}

func (o GetLoadBalancerListenerOutput) LbPort() pulumix.Output[int] {
	return pulumix.Apply[GetLoadBalancerListener](o, func(v GetLoadBalancerListener) int { return v.LbPort })
}

func (o GetLoadBalancerListenerOutput) LbProtocol() pulumix.Output[string] {
	return pulumix.Apply[GetLoadBalancerListener](o, func(v GetLoadBalancerListener) string { return v.LbProtocol })
}

func (o GetLoadBalancerListenerOutput) SslCertificateId() pulumix.Output[string] {
	return pulumix.Apply[GetLoadBalancerListener](o, func(v GetLoadBalancerListener) string { return v.SslCertificateId })
}

func init() {
	pulumi.RegisterOutputType(LoadBalancerAccessLogsOutput{})
	pulumi.RegisterOutputType(LoadBalancerHealthCheckOutput{})
	pulumi.RegisterOutputType(LoadBalancerListenerOutput{})
	pulumi.RegisterOutputType(LoadBalancerPolicyPolicyAttributeOutput{})
	pulumi.RegisterOutputType(SslNegotiationPolicyAttributeOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerAccessLogsOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerHealthCheckOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerListenerOutput{})
}
