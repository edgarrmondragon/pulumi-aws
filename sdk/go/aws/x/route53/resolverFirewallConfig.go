// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Route 53 Resolver DNS Firewall config resource.
type ResolverFirewallConfig struct {
	pulumi.CustomResourceState

	// Determines how Route 53 Resolver handles queries during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall blocks queries that it is unable to evaluate properly. If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them. Valid values: `ENABLED`, `DISABLED`.
	FirewallFailOpen pulumix.Output[string] `pulumi:"firewallFailOpen"`
	// The AWS account ID of the owner of the VPC that this firewall configuration applies to.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// The ID of the VPC that the configuration is for.
	ResourceId pulumix.Output[string] `pulumi:"resourceId"`
}

// NewResolverFirewallConfig registers a new resource with the given unique name, arguments, and options.
func NewResolverFirewallConfig(ctx *pulumi.Context,
	name string, args *ResolverFirewallConfigArgs, opts ...pulumi.ResourceOption) (*ResolverFirewallConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResolverFirewallConfig
	err := ctx.RegisterResource("aws:route53/resolverFirewallConfig:ResolverFirewallConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverFirewallConfig gets an existing ResolverFirewallConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverFirewallConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverFirewallConfigState, opts ...pulumi.ResourceOption) (*ResolverFirewallConfig, error) {
	var resource ResolverFirewallConfig
	err := ctx.ReadResource("aws:route53/resolverFirewallConfig:ResolverFirewallConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverFirewallConfig resources.
type resolverFirewallConfigState struct {
	// Determines how Route 53 Resolver handles queries during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall blocks queries that it is unable to evaluate properly. If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them. Valid values: `ENABLED`, `DISABLED`.
	FirewallFailOpen *string `pulumi:"firewallFailOpen"`
	// The AWS account ID of the owner of the VPC that this firewall configuration applies to.
	OwnerId *string `pulumi:"ownerId"`
	// The ID of the VPC that the configuration is for.
	ResourceId *string `pulumi:"resourceId"`
}

type ResolverFirewallConfigState struct {
	// Determines how Route 53 Resolver handles queries during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall blocks queries that it is unable to evaluate properly. If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them. Valid values: `ENABLED`, `DISABLED`.
	FirewallFailOpen pulumix.Input[*string]
	// The AWS account ID of the owner of the VPC that this firewall configuration applies to.
	OwnerId pulumix.Input[*string]
	// The ID of the VPC that the configuration is for.
	ResourceId pulumix.Input[*string]
}

func (ResolverFirewallConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverFirewallConfigState)(nil)).Elem()
}

type resolverFirewallConfigArgs struct {
	// Determines how Route 53 Resolver handles queries during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall blocks queries that it is unable to evaluate properly. If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them. Valid values: `ENABLED`, `DISABLED`.
	FirewallFailOpen *string `pulumi:"firewallFailOpen"`
	// The ID of the VPC that the configuration is for.
	ResourceId string `pulumi:"resourceId"`
}

// The set of arguments for constructing a ResolverFirewallConfig resource.
type ResolverFirewallConfigArgs struct {
	// Determines how Route 53 Resolver handles queries during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall blocks queries that it is unable to evaluate properly. If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them. Valid values: `ENABLED`, `DISABLED`.
	FirewallFailOpen pulumix.Input[*string]
	// The ID of the VPC that the configuration is for.
	ResourceId pulumix.Input[string]
}

func (ResolverFirewallConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverFirewallConfigArgs)(nil)).Elem()
}

type ResolverFirewallConfigOutput struct{ *pulumi.OutputState }

func (ResolverFirewallConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverFirewallConfig)(nil)).Elem()
}

func (o ResolverFirewallConfigOutput) ToResolverFirewallConfigOutput() ResolverFirewallConfigOutput {
	return o
}

func (o ResolverFirewallConfigOutput) ToResolverFirewallConfigOutputWithContext(ctx context.Context) ResolverFirewallConfigOutput {
	return o
}

func (o ResolverFirewallConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ResolverFirewallConfig] {
	return pulumix.Output[ResolverFirewallConfig]{
		OutputState: o.OutputState,
	}
}

// Determines how Route 53 Resolver handles queries during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall blocks queries that it is unable to evaluate properly. If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them. Valid values: `ENABLED`, `DISABLED`.
func (o ResolverFirewallConfigOutput) FirewallFailOpen() pulumix.Output[string] {
	value := pulumix.Apply[ResolverFirewallConfig](o, func(v ResolverFirewallConfig) pulumix.Output[string] { return v.FirewallFailOpen })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The AWS account ID of the owner of the VPC that this firewall configuration applies to.
func (o ResolverFirewallConfigOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[ResolverFirewallConfig](o, func(v ResolverFirewallConfig) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the VPC that the configuration is for.
func (o ResolverFirewallConfigOutput) ResourceId() pulumix.Output[string] {
	value := pulumix.Apply[ResolverFirewallConfig](o, func(v ResolverFirewallConfig) pulumix.Output[string] { return v.ResourceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ResolverFirewallConfigOutput{})
}
