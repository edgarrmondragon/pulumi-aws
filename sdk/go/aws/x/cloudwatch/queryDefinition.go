// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudWatch Logs query definition resource.
type QueryDefinition struct {
	pulumi.CustomResourceState

	// Specific log groups to use with the query.
	LogGroupNames pulumix.ArrayOutput[string] `pulumi:"logGroupNames"`
	// The name of the query.
	Name pulumix.Output[string] `pulumi:"name"`
	// The query definition ID.
	QueryDefinitionId pulumix.Output[string] `pulumi:"queryDefinitionId"`
	// The query to save. You can read more about CloudWatch Logs Query Syntax in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
	QueryString pulumix.Output[string] `pulumi:"queryString"`
}

// NewQueryDefinition registers a new resource with the given unique name, arguments, and options.
func NewQueryDefinition(ctx *pulumi.Context,
	name string, args *QueryDefinitionArgs, opts ...pulumi.ResourceOption) (*QueryDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.QueryString == nil {
		return nil, errors.New("invalid value for required argument 'QueryString'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource QueryDefinition
	err := ctx.RegisterResource("aws:cloudwatch/queryDefinition:QueryDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueryDefinition gets an existing QueryDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueryDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueryDefinitionState, opts ...pulumi.ResourceOption) (*QueryDefinition, error) {
	var resource QueryDefinition
	err := ctx.ReadResource("aws:cloudwatch/queryDefinition:QueryDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueryDefinition resources.
type queryDefinitionState struct {
	// Specific log groups to use with the query.
	LogGroupNames []string `pulumi:"logGroupNames"`
	// The name of the query.
	Name *string `pulumi:"name"`
	// The query definition ID.
	QueryDefinitionId *string `pulumi:"queryDefinitionId"`
	// The query to save. You can read more about CloudWatch Logs Query Syntax in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
	QueryString *string `pulumi:"queryString"`
}

type QueryDefinitionState struct {
	// Specific log groups to use with the query.
	LogGroupNames pulumix.Input[[]string]
	// The name of the query.
	Name pulumix.Input[*string]
	// The query definition ID.
	QueryDefinitionId pulumix.Input[*string]
	// The query to save. You can read more about CloudWatch Logs Query Syntax in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
	QueryString pulumix.Input[*string]
}

func (QueryDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*queryDefinitionState)(nil)).Elem()
}

type queryDefinitionArgs struct {
	// Specific log groups to use with the query.
	LogGroupNames []string `pulumi:"logGroupNames"`
	// The name of the query.
	Name *string `pulumi:"name"`
	// The query to save. You can read more about CloudWatch Logs Query Syntax in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
	QueryString string `pulumi:"queryString"`
}

// The set of arguments for constructing a QueryDefinition resource.
type QueryDefinitionArgs struct {
	// Specific log groups to use with the query.
	LogGroupNames pulumix.Input[[]string]
	// The name of the query.
	Name pulumix.Input[*string]
	// The query to save. You can read more about CloudWatch Logs Query Syntax in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
	QueryString pulumix.Input[string]
}

func (QueryDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queryDefinitionArgs)(nil)).Elem()
}

type QueryDefinitionOutput struct{ *pulumi.OutputState }

func (QueryDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDefinition)(nil)).Elem()
}

func (o QueryDefinitionOutput) ToQueryDefinitionOutput() QueryDefinitionOutput {
	return o
}

func (o QueryDefinitionOutput) ToQueryDefinitionOutputWithContext(ctx context.Context) QueryDefinitionOutput {
	return o
}

func (o QueryDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[QueryDefinition] {
	return pulumix.Output[QueryDefinition]{
		OutputState: o.OutputState,
	}
}

// Specific log groups to use with the query.
func (o QueryDefinitionOutput) LogGroupNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[QueryDefinition](o, func(v QueryDefinition) pulumix.ArrayOutput[string] { return v.LogGroupNames })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The name of the query.
func (o QueryDefinitionOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[QueryDefinition](o, func(v QueryDefinition) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The query definition ID.
func (o QueryDefinitionOutput) QueryDefinitionId() pulumix.Output[string] {
	value := pulumix.Apply[QueryDefinition](o, func(v QueryDefinition) pulumix.Output[string] { return v.QueryDefinitionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The query to save. You can read more about CloudWatch Logs Query Syntax in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
func (o QueryDefinitionOutput) QueryString() pulumix.Output[string] {
	value := pulumix.Apply[QueryDefinition](o, func(v QueryDefinition) pulumix.Output[string] { return v.QueryString })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(QueryDefinitionOutput{})
}
