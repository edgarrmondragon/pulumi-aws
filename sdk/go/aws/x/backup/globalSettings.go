// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Backup Global Settings resource.
type GlobalSettings struct {
	pulumi.CustomResourceState

	// A list of resources along with the opt-in preferences for the account.
	GlobalSettings pulumix.MapOutput[string] `pulumi:"globalSettings"`
}

// NewGlobalSettings registers a new resource with the given unique name, arguments, and options.
func NewGlobalSettings(ctx *pulumi.Context,
	name string, args *GlobalSettingsArgs, opts ...pulumi.ResourceOption) (*GlobalSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlobalSettings == nil {
		return nil, errors.New("invalid value for required argument 'GlobalSettings'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GlobalSettings
	err := ctx.RegisterResource("aws:backup/globalSettings:GlobalSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobalSettings gets an existing GlobalSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalSettingsState, opts ...pulumi.ResourceOption) (*GlobalSettings, error) {
	var resource GlobalSettings
	err := ctx.ReadResource("aws:backup/globalSettings:GlobalSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlobalSettings resources.
type globalSettingsState struct {
	// A list of resources along with the opt-in preferences for the account.
	GlobalSettings map[string]string `pulumi:"globalSettings"`
}

type GlobalSettingsState struct {
	// A list of resources along with the opt-in preferences for the account.
	GlobalSettings pulumix.Input[map[string]string]
}

func (GlobalSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*globalSettingsState)(nil)).Elem()
}

type globalSettingsArgs struct {
	// A list of resources along with the opt-in preferences for the account.
	GlobalSettings map[string]string `pulumi:"globalSettings"`
}

// The set of arguments for constructing a GlobalSettings resource.
type GlobalSettingsArgs struct {
	// A list of resources along with the opt-in preferences for the account.
	GlobalSettings pulumix.Input[map[string]string]
}

func (GlobalSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*globalSettingsArgs)(nil)).Elem()
}

type GlobalSettingsOutput struct{ *pulumi.OutputState }

func (GlobalSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalSettings)(nil)).Elem()
}

func (o GlobalSettingsOutput) ToGlobalSettingsOutput() GlobalSettingsOutput {
	return o
}

func (o GlobalSettingsOutput) ToGlobalSettingsOutputWithContext(ctx context.Context) GlobalSettingsOutput {
	return o
}

func (o GlobalSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[GlobalSettings] {
	return pulumix.Output[GlobalSettings]{
		OutputState: o.OutputState,
	}
}

// A list of resources along with the opt-in preferences for the account.
func (o GlobalSettingsOutput) GlobalSettings() pulumix.MapOutput[string] {
	value := pulumix.Apply[GlobalSettings](o, func(v GlobalSettings) pulumix.MapOutput[string] { return v.GlobalSettings })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(GlobalSettingsOutput{})
}
