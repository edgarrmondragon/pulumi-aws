// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acmpca

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get information on a Certificate issued by a AWS Certificate Manager Private Certificate Authority.
func LookupCertificate(ctx *pulumi.Context, args *LookupCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificateResult
	err := ctx.Invoke("aws:acmpca/getCertificate:getCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateArgs struct {
	// ARN of the certificate issued by the private certificate authority.
	Arn string `pulumi:"arn"`
	// ARN of the certificate authority.
	CertificateAuthorityArn string `pulumi:"certificateAuthorityArn"`
}

// A collection of values returned by getCertificate.
type LookupCertificateResult struct {
	Arn string `pulumi:"arn"`
	// PEM-encoded certificate value.
	Certificate             string `pulumi:"certificate"`
	CertificateAuthorityArn string `pulumi:"certificateAuthorityArn"`
	// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA.
	CertificateChain string `pulumi:"certificateChain"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func LookupCertificateOutput(ctx *pulumi.Context, args LookupCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateResultOutput {
	outputResult := pulumix.ApplyErr[*LookupCertificateArgs](args.ToOutput(), func(plainArgs *LookupCertificateArgs) (*LookupCertificateResult, error) {
		return LookupCertificate(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupCertificateResultOutput, *LookupCertificateResult](outputResult)
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateOutputArgs struct {
	// ARN of the certificate issued by the private certificate authority.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// ARN of the certificate authority.
	CertificateAuthorityArn pulumix.Input[string] `pulumi:"certificateAuthorityArn"`
}

func (args LookupCertificateOutputArgs) ToOutput() pulumix.Output[*LookupCertificateArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.CertificateAuthorityArn.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupCertificateArgs {
		return &LookupCertificateArgs{
			Arn:                     resolvedArgs[0].(string),
			CertificateAuthorityArn: resolvedArgs[1].(string),
		}
	})
}

type LookupCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateResult)(nil)).Elem()
}

func (o LookupCertificateResultOutput) ToOutput(context.Context) pulumix.Output[*LookupCertificateResult] {
	return pulumix.Output[*LookupCertificateResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupCertificateResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) string { return v.Arn })
}

func (o LookupCertificateResultOutput) Certificate() pulumix.Output[string] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) string { return v.Certificate })
}

func (o LookupCertificateResultOutput) CertificateAuthorityArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) string { return v.CertificateAuthorityArn })
}

func (o LookupCertificateResultOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) string { return v.CertificateChain })
}

func (o LookupCertificateResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) string { return v.Id })
}
