// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an network ACL resource. You might set up network ACLs with rules similar
// to your security groups in order to add an additional layer of security to your VPC.
//
// > **NOTE on Network ACLs and Network ACL Rules:** This provider currently
// provides both a standalone Network ACL Rule resource and a Network ACL resource with rules
// defined in-line. At this time you cannot use a Network ACL with in-line rules
// in conjunction with any Network ACL Rule resources. Doing so will cause
// a conflict of rule settings and will overwrite rules.
//
// > **NOTE on Network ACLs and Network ACL Associations:** the provider provides both a standalone network ACL association
// resource and a network ACL resource with a `subnetIds` attribute. Do not use the same subnet ID in both a network ACL
// resource and a network ACL association resource. Doing so will cause a conflict of associations and will overwrite the association.
type NetworkAcl struct {
	pulumi.CustomResourceState

	// The ARN of the network ACL
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Specifies an egress rule. Parameters defined below.
	Egress pulumix.GArrayOutput[NetworkAclEgress, NetworkAclEgressOutput] `pulumi:"egress"`
	// Specifies an ingress rule. Parameters defined below.
	Ingress pulumix.GArrayOutput[NetworkAclIngress, NetworkAclIngressOutput] `pulumi:"ingress"`
	// The ID of the AWS account that owns the network ACL.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// A list of Subnet IDs to apply the ACL to
	SubnetIds pulumix.ArrayOutput[string] `pulumi:"subnetIds"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The ID of the associated VPC.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewNetworkAcl registers a new resource with the given unique name, arguments, and options.
func NewNetworkAcl(ctx *pulumi.Context,
	name string, args *NetworkAclArgs, opts ...pulumi.ResourceOption) (*NetworkAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkAcl
	err := ctx.RegisterResource("aws:ec2/networkAcl:NetworkAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAcl gets an existing NetworkAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAclState, opts ...pulumi.ResourceOption) (*NetworkAcl, error) {
	var resource NetworkAcl
	err := ctx.ReadResource("aws:ec2/networkAcl:NetworkAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAcl resources.
type networkAclState struct {
	// The ARN of the network ACL
	Arn *string `pulumi:"arn"`
	// Specifies an egress rule. Parameters defined below.
	Egress []NetworkAclEgress `pulumi:"egress"`
	// Specifies an ingress rule. Parameters defined below.
	Ingress []NetworkAclIngress `pulumi:"ingress"`
	// The ID of the AWS account that owns the network ACL.
	OwnerId *string `pulumi:"ownerId"`
	// A list of Subnet IDs to apply the ACL to
	SubnetIds []string `pulumi:"subnetIds"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ID of the associated VPC.
	VpcId *string `pulumi:"vpcId"`
}

type NetworkAclState struct {
	// The ARN of the network ACL
	Arn pulumix.Input[*string]
	// Specifies an egress rule. Parameters defined below.
	Egress pulumix.Input[[]*NetworkAclEgressArgs]
	// Specifies an ingress rule. Parameters defined below.
	Ingress pulumix.Input[[]*NetworkAclIngressArgs]
	// The ID of the AWS account that owns the network ACL.
	OwnerId pulumix.Input[*string]
	// A list of Subnet IDs to apply the ACL to
	SubnetIds pulumix.Input[[]string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The ID of the associated VPC.
	VpcId pulumix.Input[*string]
}

func (NetworkAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclState)(nil)).Elem()
}

type networkAclArgs struct {
	// Specifies an egress rule. Parameters defined below.
	Egress []NetworkAclEgress `pulumi:"egress"`
	// Specifies an ingress rule. Parameters defined below.
	Ingress []NetworkAclIngress `pulumi:"ingress"`
	// A list of Subnet IDs to apply the ACL to
	SubnetIds []string `pulumi:"subnetIds"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the associated VPC.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a NetworkAcl resource.
type NetworkAclArgs struct {
	// Specifies an egress rule. Parameters defined below.
	Egress pulumix.Input[[]*NetworkAclEgressArgs]
	// Specifies an ingress rule. Parameters defined below.
	Ingress pulumix.Input[[]*NetworkAclIngressArgs]
	// A list of Subnet IDs to apply the ACL to
	SubnetIds pulumix.Input[[]string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The ID of the associated VPC.
	VpcId pulumix.Input[string]
}

func (NetworkAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclArgs)(nil)).Elem()
}

type NetworkAclOutput struct{ *pulumi.OutputState }

func (NetworkAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAcl)(nil)).Elem()
}

func (o NetworkAclOutput) ToNetworkAclOutput() NetworkAclOutput {
	return o
}

func (o NetworkAclOutput) ToNetworkAclOutputWithContext(ctx context.Context) NetworkAclOutput {
	return o
}

func (o NetworkAclOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkAcl] {
	return pulumix.Output[NetworkAcl]{
		OutputState: o.OutputState,
	}
}

// The ARN of the network ACL
func (o NetworkAclOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[NetworkAcl](o, func(v NetworkAcl) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies an egress rule. Parameters defined below.
func (o NetworkAclOutput) Egress() pulumix.GArrayOutput[NetworkAclEgress, NetworkAclEgressOutput] {
	value := pulumix.Apply[NetworkAcl](o, func(v NetworkAcl) pulumix.GArrayOutput[NetworkAclEgress, NetworkAclEgressOutput] { return v.Egress })
	unwrapped := pulumix.Flatten[[]NetworkAclEgress, pulumix.GArrayOutput[NetworkAclEgress, NetworkAclEgressOutput]](value)
	return pulumix.GArrayOutput[NetworkAclEgress, NetworkAclEgressOutput]{OutputState: unwrapped.OutputState}
}

// Specifies an ingress rule. Parameters defined below.
func (o NetworkAclOutput) Ingress() pulumix.GArrayOutput[NetworkAclIngress, NetworkAclIngressOutput] {
	value := pulumix.Apply[NetworkAcl](o, func(v NetworkAcl) pulumix.GArrayOutput[NetworkAclIngress, NetworkAclIngressOutput] { return v.Ingress })
	unwrapped := pulumix.Flatten[[]NetworkAclIngress, pulumix.GArrayOutput[NetworkAclIngress, NetworkAclIngressOutput]](value)
	return pulumix.GArrayOutput[NetworkAclIngress, NetworkAclIngressOutput]{OutputState: unwrapped.OutputState}
}

// The ID of the AWS account that owns the network ACL.
func (o NetworkAclOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[NetworkAcl](o, func(v NetworkAcl) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of Subnet IDs to apply the ACL to
func (o NetworkAclOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NetworkAcl](o, func(v NetworkAcl) pulumix.ArrayOutput[string] { return v.SubnetIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o NetworkAclOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[NetworkAcl](o, func(v NetworkAcl) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o NetworkAclOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[NetworkAcl](o, func(v NetworkAcl) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of the associated VPC.
func (o NetworkAclOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[NetworkAcl](o, func(v NetworkAcl) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(NetworkAclOutput{})
}
