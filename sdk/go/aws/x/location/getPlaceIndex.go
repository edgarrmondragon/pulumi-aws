// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a Location Service Place Index.
func LookupPlaceIndex(ctx *pulumi.Context, args *LookupPlaceIndexArgs, opts ...pulumi.InvokeOption) (*LookupPlaceIndexResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPlaceIndexResult
	err := ctx.Invoke("aws:location/getPlaceIndex:getPlaceIndex", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlaceIndex.
type LookupPlaceIndexArgs struct {
	// Name of the place index resource.
	IndexName string `pulumi:"indexName"`
	// Key-value map of resource tags for the place index.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getPlaceIndex.
type LookupPlaceIndexResult struct {
	// Timestamp for when the place index resource was created in ISO 8601 format.
	CreateTime string `pulumi:"createTime"`
	// Data provider of geospatial data.
	DataSource string `pulumi:"dataSource"`
	// List of configurations that specify data storage option for requesting Places.
	DataSourceConfigurations []GetPlaceIndexDataSourceConfiguration `pulumi:"dataSourceConfigurations"`
	// Optional description for the place index resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN for the place index resource.
	IndexArn  string `pulumi:"indexArn"`
	IndexName string `pulumi:"indexName"`
	// Key-value map of resource tags for the place index.
	Tags map[string]string `pulumi:"tags"`
	// Timestamp for when the place index resource was last updated in ISO 8601 format.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupPlaceIndexOutput(ctx *pulumi.Context, args LookupPlaceIndexOutputArgs, opts ...pulumi.InvokeOption) LookupPlaceIndexResultOutput {
	outputResult := pulumix.ApplyErr[*LookupPlaceIndexArgs](args.ToOutput(), func(plainArgs *LookupPlaceIndexArgs) (*LookupPlaceIndexResult, error) {
		return LookupPlaceIndex(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupPlaceIndexResultOutput, *LookupPlaceIndexResult](outputResult)
}

// A collection of arguments for invoking getPlaceIndex.
type LookupPlaceIndexOutputArgs struct {
	// Name of the place index resource.
	IndexName pulumix.Input[string] `pulumi:"indexName"`
	// Key-value map of resource tags for the place index.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupPlaceIndexOutputArgs) ToOutput() pulumix.Output[*LookupPlaceIndexArgs] {
	allArgs := pulumix.All(
		args.IndexName.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupPlaceIndexArgs {
		return &LookupPlaceIndexArgs{
			IndexName: resolvedArgs[0].(string),
			Tags:      resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupPlaceIndexResultOutput struct{ *pulumi.OutputState }

func (LookupPlaceIndexResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlaceIndexResult)(nil)).Elem()
}

func (o LookupPlaceIndexResultOutput) ToOutput(context.Context) pulumix.Output[*LookupPlaceIndexResult] {
	return pulumix.Output[*LookupPlaceIndexResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupPlaceIndexResultOutput) CreateTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupPlaceIndexResult](o, func(v *LookupPlaceIndexResult) string { return v.CreateTime })
}

func (o LookupPlaceIndexResultOutput) DataSource() pulumix.Output[string] {
	return pulumix.Apply[*LookupPlaceIndexResult](o, func(v *LookupPlaceIndexResult) string { return v.DataSource })
}

func (o LookupPlaceIndexResultOutput) DataSourceConfigurations() pulumix.GArrayOutput[GetPlaceIndexDataSourceConfiguration, GetPlaceIndexDataSourceConfigurationOutput] {
	value := pulumix.Apply[*LookupPlaceIndexResult](o, func(v *LookupPlaceIndexResult) []GetPlaceIndexDataSourceConfiguration {
		return v.DataSourceConfigurations
	})
	return pulumix.GArrayOutput[GetPlaceIndexDataSourceConfiguration, GetPlaceIndexDataSourceConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupPlaceIndexResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupPlaceIndexResult](o, func(v *LookupPlaceIndexResult) string { return v.Description })
}

func (o LookupPlaceIndexResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupPlaceIndexResult](o, func(v *LookupPlaceIndexResult) string { return v.Id })
}

func (o LookupPlaceIndexResultOutput) IndexArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupPlaceIndexResult](o, func(v *LookupPlaceIndexResult) string { return v.IndexArn })
}

func (o LookupPlaceIndexResultOutput) IndexName() pulumix.Output[string] {
	return pulumix.Apply[*LookupPlaceIndexResult](o, func(v *LookupPlaceIndexResult) string { return v.IndexName })
}

func (o LookupPlaceIndexResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupPlaceIndexResult](o, func(v *LookupPlaceIndexResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupPlaceIndexResultOutput) UpdateTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupPlaceIndexResult](o, func(v *LookupPlaceIndexResult) string { return v.UpdateTime })
}
