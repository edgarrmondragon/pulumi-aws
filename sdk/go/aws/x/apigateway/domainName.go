// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Registers a custom domain name for use with AWS API Gateway. Additional information about this functionality
// can be found in the [API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html).
//
// This resource just establishes ownership of and the TLS settings for
// a particular domain name. An API can be attached to a particular path
// under the registered domain name using
// the `apigateway.BasePathMapping` resource.
//
// API Gateway domains can be defined as either 'edge-optimized' or 'regional'.  In an edge-optimized configuration,
// API Gateway internally creates and manages a CloudFront distribution to route requests on the given hostname. In
// addition to this resource it's necessary to create a DNS record corresponding to the given domain name which is an alias
// (either Route53 alias or traditional CNAME) to the Cloudfront domain name exported in the `cloudfrontDomainName`
// attribute.
//
// In a regional configuration, API Gateway does not create a CloudFront distribution to route requests to the API, though
// a distribution can be created if needed. In either case, it is necessary to create a DNS record corresponding to the
// given domain name which is an alias (either Route53 alias or traditional CNAME) to the regional domain name exported in
// the `regionalDomainName` attribute.
//
// > **Note:** API Gateway requires the use of AWS Certificate Manager (ACM) certificates instead of Identity and Access Management (IAM) certificates in regions that support ACM. Regions that support ACM can be found in the [Regions and Endpoints Documentation](https://docs.aws.amazon.com/general/latest/gr/rande.html#acm_region). To import an existing private key and certificate into ACM or request an ACM certificate, see the `acm.Certificate` resource.
//
// > **Note:** The `apigateway.DomainName` resource expects dependency on the `acm.CertificateValidation` as
// only verified certificates can be used. This can be made either explicitly by adding the
// `dependsOn = [aws_acm_certificate_validation.cert]` attribute. Or implicitly by referring certificate ARN
// from the validation resource where it will be available after the resource creation:
// `regionalCertificateArn = aws_acm_certificate_validation.cert.certificate_arn`.
type DomainName struct {
	pulumi.CustomResourceState

	// ARN of domain name.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with `certificateName`, `certificateBody`, `certificateChain`, `certificatePrivateKey`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificateArn pulumix.Output[*string] `pulumi:"certificateArn"`
	// Certificate issued for the domain name being registered, in PEM format. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificateBody pulumix.Output[*string] `pulumi:"certificateBody"`
	// Certificate for the CA that issued the certificate, along with any intermediate CA certificates required to create an unbroken chain to a certificate trusted by the intended API clients. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificateChain pulumix.Output[*string] `pulumi:"certificateChain"`
	// Unique name to use when registering this certificate as an IAM server certificate. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`. Required if `certificateArn` is not set.
	CertificateName pulumix.Output[*string] `pulumi:"certificateName"`
	// Private key associated with the domain certificate given in `certificateBody`. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificatePrivateKey pulumix.Output[*string] `pulumi:"certificatePrivateKey"`
	// Upload date associated with the domain certificate.
	CertificateUploadDate pulumix.Output[string] `pulumi:"certificateUploadDate"`
	// Hostname created by Cloudfront to represent the distribution that implements this domain name mapping.
	CloudfrontDomainName pulumix.Output[string] `pulumi:"cloudfrontDomainName"`
	// For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`) that can be used to create a Route53 alias record for the distribution.
	CloudfrontZoneId pulumix.Output[string] `pulumi:"cloudfrontZoneId"`
	// Fully-qualified domain name to register.
	DomainName pulumix.Output[string] `pulumi:"domainName"`
	// Configuration block defining API endpoint information including type. See below.
	EndpointConfiguration pulumix.GPtrOutput[DomainNameEndpointConfiguration, DomainNameEndpointConfigurationOutput] `pulumi:"endpointConfiguration"`
	// Mutual TLS authentication configuration for the domain name. See below.
	MutualTlsAuthentication pulumix.GPtrOutput[DomainNameMutualTlsAuthentication, DomainNameMutualTlsAuthenticationOutput] `pulumi:"mutualTlsAuthentication"`
	// ARN of the AWS-issued certificate used to validate custom domain ownership (when `certificateArn` is issued via an ACM Private CA or `mutualTlsAuthentication` is configured with an ACM-imported certificate.)
	OwnershipVerificationCertificateArn pulumix.Output[string] `pulumi:"ownershipVerificationCertificateArn"`
	// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and `certificatePrivateKey`.
	//
	// When uploading a certificate, the following arguments are supported:
	RegionalCertificateArn pulumix.Output[*string] `pulumi:"regionalCertificateArn"`
	// User-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and `certificatePrivateKey`.
	RegionalCertificateName pulumix.Output[*string] `pulumi:"regionalCertificateName"`
	// Hostname for the custom domain's regional endpoint.
	RegionalDomainName pulumix.Output[string] `pulumi:"regionalDomainName"`
	// Hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
	RegionalZoneId pulumix.Output[string] `pulumi:"regionalZoneId"`
	// Transport Layer Security (TLS) version + cipher suite for this DomainName. Valid values are `TLS_1_0` and `TLS_1_2`. Must be configured to perform drift detection.
	SecurityPolicy pulumix.Output[string] `pulumi:"securityPolicy"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// When referencing an AWS-managed certificate, the following arguments are supported:
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewDomainName registers a new resource with the given unique name, arguments, and options.
func NewDomainName(ctx *pulumi.Context,
	name string, args *DomainNameArgs, opts ...pulumi.ResourceOption) (*DomainName, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.CertificatePrivateKey != nil {
		untypedSecretValue := pulumi.ToSecret(args.CertificatePrivateKey.ToOutput(ctx.Context()).Untyped())
		args.CertificatePrivateKey = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"certificatePrivateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainName
	err := ctx.RegisterResource("aws:apigateway/domainName:DomainName", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainName gets an existing DomainName resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainName(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainNameState, opts ...pulumi.ResourceOption) (*DomainName, error) {
	var resource DomainName
	err := ctx.ReadResource("aws:apigateway/domainName:DomainName", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainName resources.
type domainNameState struct {
	// ARN of domain name.
	Arn *string `pulumi:"arn"`
	// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with `certificateName`, `certificateBody`, `certificateChain`, `certificatePrivateKey`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificateArn *string `pulumi:"certificateArn"`
	// Certificate issued for the domain name being registered, in PEM format. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificateBody *string `pulumi:"certificateBody"`
	// Certificate for the CA that issued the certificate, along with any intermediate CA certificates required to create an unbroken chain to a certificate trusted by the intended API clients. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificateChain *string `pulumi:"certificateChain"`
	// Unique name to use when registering this certificate as an IAM server certificate. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`. Required if `certificateArn` is not set.
	CertificateName *string `pulumi:"certificateName"`
	// Private key associated with the domain certificate given in `certificateBody`. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificatePrivateKey *string `pulumi:"certificatePrivateKey"`
	// Upload date associated with the domain certificate.
	CertificateUploadDate *string `pulumi:"certificateUploadDate"`
	// Hostname created by Cloudfront to represent the distribution that implements this domain name mapping.
	CloudfrontDomainName *string `pulumi:"cloudfrontDomainName"`
	// For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`) that can be used to create a Route53 alias record for the distribution.
	CloudfrontZoneId *string `pulumi:"cloudfrontZoneId"`
	// Fully-qualified domain name to register.
	DomainName *string `pulumi:"domainName"`
	// Configuration block defining API endpoint information including type. See below.
	EndpointConfiguration *DomainNameEndpointConfiguration `pulumi:"endpointConfiguration"`
	// Mutual TLS authentication configuration for the domain name. See below.
	MutualTlsAuthentication *DomainNameMutualTlsAuthentication `pulumi:"mutualTlsAuthentication"`
	// ARN of the AWS-issued certificate used to validate custom domain ownership (when `certificateArn` is issued via an ACM Private CA or `mutualTlsAuthentication` is configured with an ACM-imported certificate.)
	OwnershipVerificationCertificateArn *string `pulumi:"ownershipVerificationCertificateArn"`
	// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and `certificatePrivateKey`.
	//
	// When uploading a certificate, the following arguments are supported:
	RegionalCertificateArn *string `pulumi:"regionalCertificateArn"`
	// User-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and `certificatePrivateKey`.
	RegionalCertificateName *string `pulumi:"regionalCertificateName"`
	// Hostname for the custom domain's regional endpoint.
	RegionalDomainName *string `pulumi:"regionalDomainName"`
	// Hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
	RegionalZoneId *string `pulumi:"regionalZoneId"`
	// Transport Layer Security (TLS) version + cipher suite for this DomainName. Valid values are `TLS_1_0` and `TLS_1_2`. Must be configured to perform drift detection.
	SecurityPolicy *string `pulumi:"securityPolicy"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// When referencing an AWS-managed certificate, the following arguments are supported:
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type DomainNameState struct {
	// ARN of domain name.
	Arn pulumix.Input[*string]
	// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with `certificateName`, `certificateBody`, `certificateChain`, `certificatePrivateKey`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificateArn pulumix.Input[*string]
	// Certificate issued for the domain name being registered, in PEM format. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificateBody pulumix.Input[*string]
	// Certificate for the CA that issued the certificate, along with any intermediate CA certificates required to create an unbroken chain to a certificate trusted by the intended API clients. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificateChain pulumix.Input[*string]
	// Unique name to use when registering this certificate as an IAM server certificate. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`. Required if `certificateArn` is not set.
	CertificateName pulumix.Input[*string]
	// Private key associated with the domain certificate given in `certificateBody`. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificatePrivateKey pulumix.Input[*string]
	// Upload date associated with the domain certificate.
	CertificateUploadDate pulumix.Input[*string]
	// Hostname created by Cloudfront to represent the distribution that implements this domain name mapping.
	CloudfrontDomainName pulumix.Input[*string]
	// For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`) that can be used to create a Route53 alias record for the distribution.
	CloudfrontZoneId pulumix.Input[*string]
	// Fully-qualified domain name to register.
	DomainName pulumix.Input[*string]
	// Configuration block defining API endpoint information including type. See below.
	EndpointConfiguration pulumix.Input[*DomainNameEndpointConfigurationArgs]
	// Mutual TLS authentication configuration for the domain name. See below.
	MutualTlsAuthentication pulumix.Input[*DomainNameMutualTlsAuthenticationArgs]
	// ARN of the AWS-issued certificate used to validate custom domain ownership (when `certificateArn` is issued via an ACM Private CA or `mutualTlsAuthentication` is configured with an ACM-imported certificate.)
	OwnershipVerificationCertificateArn pulumix.Input[*string]
	// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and `certificatePrivateKey`.
	//
	// When uploading a certificate, the following arguments are supported:
	RegionalCertificateArn pulumix.Input[*string]
	// User-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and `certificatePrivateKey`.
	RegionalCertificateName pulumix.Input[*string]
	// Hostname for the custom domain's regional endpoint.
	RegionalDomainName pulumix.Input[*string]
	// Hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
	RegionalZoneId pulumix.Input[*string]
	// Transport Layer Security (TLS) version + cipher suite for this DomainName. Valid values are `TLS_1_0` and `TLS_1_2`. Must be configured to perform drift detection.
	SecurityPolicy pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// When referencing an AWS-managed certificate, the following arguments are supported:
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (DomainNameState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainNameState)(nil)).Elem()
}

type domainNameArgs struct {
	// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with `certificateName`, `certificateBody`, `certificateChain`, `certificatePrivateKey`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificateArn *string `pulumi:"certificateArn"`
	// Certificate issued for the domain name being registered, in PEM format. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificateBody *string `pulumi:"certificateBody"`
	// Certificate for the CA that issued the certificate, along with any intermediate CA certificates required to create an unbroken chain to a certificate trusted by the intended API clients. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificateChain *string `pulumi:"certificateChain"`
	// Unique name to use when registering this certificate as an IAM server certificate. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`. Required if `certificateArn` is not set.
	CertificateName *string `pulumi:"certificateName"`
	// Private key associated with the domain certificate given in `certificateBody`. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificatePrivateKey *string `pulumi:"certificatePrivateKey"`
	// Fully-qualified domain name to register.
	DomainName string `pulumi:"domainName"`
	// Configuration block defining API endpoint information including type. See below.
	EndpointConfiguration *DomainNameEndpointConfiguration `pulumi:"endpointConfiguration"`
	// Mutual TLS authentication configuration for the domain name. See below.
	MutualTlsAuthentication *DomainNameMutualTlsAuthentication `pulumi:"mutualTlsAuthentication"`
	// ARN of the AWS-issued certificate used to validate custom domain ownership (when `certificateArn` is issued via an ACM Private CA or `mutualTlsAuthentication` is configured with an ACM-imported certificate.)
	OwnershipVerificationCertificateArn *string `pulumi:"ownershipVerificationCertificateArn"`
	// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and `certificatePrivateKey`.
	//
	// When uploading a certificate, the following arguments are supported:
	RegionalCertificateArn *string `pulumi:"regionalCertificateArn"`
	// User-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and `certificatePrivateKey`.
	RegionalCertificateName *string `pulumi:"regionalCertificateName"`
	// Transport Layer Security (TLS) version + cipher suite for this DomainName. Valid values are `TLS_1_0` and `TLS_1_2`. Must be configured to perform drift detection.
	SecurityPolicy *string `pulumi:"securityPolicy"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// When referencing an AWS-managed certificate, the following arguments are supported:
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DomainName resource.
type DomainNameArgs struct {
	// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with `certificateName`, `certificateBody`, `certificateChain`, `certificatePrivateKey`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificateArn pulumix.Input[*string]
	// Certificate issued for the domain name being registered, in PEM format. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificateBody pulumix.Input[*string]
	// Certificate for the CA that issued the certificate, along with any intermediate CA certificates required to create an unbroken chain to a certificate trusted by the intended API clients. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificateChain pulumix.Input[*string]
	// Unique name to use when registering this certificate as an IAM server certificate. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`. Required if `certificateArn` is not set.
	CertificateName pulumix.Input[*string]
	// Private key associated with the domain certificate given in `certificateBody`. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
	CertificatePrivateKey pulumix.Input[*string]
	// Fully-qualified domain name to register.
	DomainName pulumix.Input[string]
	// Configuration block defining API endpoint information including type. See below.
	EndpointConfiguration pulumix.Input[*DomainNameEndpointConfigurationArgs]
	// Mutual TLS authentication configuration for the domain name. See below.
	MutualTlsAuthentication pulumix.Input[*DomainNameMutualTlsAuthenticationArgs]
	// ARN of the AWS-issued certificate used to validate custom domain ownership (when `certificateArn` is issued via an ACM Private CA or `mutualTlsAuthentication` is configured with an ACM-imported certificate.)
	OwnershipVerificationCertificateArn pulumix.Input[*string]
	// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and `certificatePrivateKey`.
	//
	// When uploading a certificate, the following arguments are supported:
	RegionalCertificateArn pulumix.Input[*string]
	// User-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and `certificatePrivateKey`.
	RegionalCertificateName pulumix.Input[*string]
	// Transport Layer Security (TLS) version + cipher suite for this DomainName. Valid values are `TLS_1_0` and `TLS_1_2`. Must be configured to perform drift detection.
	SecurityPolicy pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// When referencing an AWS-managed certificate, the following arguments are supported:
	Tags pulumix.Input[map[string]string]
}

func (DomainNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainNameArgs)(nil)).Elem()
}

type DomainNameOutput struct{ *pulumi.OutputState }

func (DomainNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainName)(nil)).Elem()
}

func (o DomainNameOutput) ToDomainNameOutput() DomainNameOutput {
	return o
}

func (o DomainNameOutput) ToDomainNameOutputWithContext(ctx context.Context) DomainNameOutput {
	return o
}

func (o DomainNameOutput) ToOutput(ctx context.Context) pulumix.Output[DomainName] {
	return pulumix.Output[DomainName]{
		OutputState: o.OutputState,
	}
}

// ARN of domain name.
func (o DomainNameOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with `certificateName`, `certificateBody`, `certificateChain`, `certificatePrivateKey`, `regionalCertificateArn`, and `regionalCertificateName`.
func (o DomainNameOutput) CertificateArn() pulumix.Output[*string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[*string] { return v.CertificateArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Certificate issued for the domain name being registered, in PEM format. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
func (o DomainNameOutput) CertificateBody() pulumix.Output[*string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[*string] { return v.CertificateBody })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Certificate for the CA that issued the certificate, along with any intermediate CA certificates required to create an unbroken chain to a certificate trusted by the intended API clients. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
func (o DomainNameOutput) CertificateChain() pulumix.Output[*string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[*string] { return v.CertificateChain })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Unique name to use when registering this certificate as an IAM server certificate. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`. Required if `certificateArn` is not set.
func (o DomainNameOutput) CertificateName() pulumix.Output[*string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[*string] { return v.CertificateName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Private key associated with the domain certificate given in `certificateBody`. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
func (o DomainNameOutput) CertificatePrivateKey() pulumix.Output[*string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[*string] { return v.CertificatePrivateKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Upload date associated with the domain certificate.
func (o DomainNameOutput) CertificateUploadDate() pulumix.Output[string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[string] { return v.CertificateUploadDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Hostname created by Cloudfront to represent the distribution that implements this domain name mapping.
func (o DomainNameOutput) CloudfrontDomainName() pulumix.Output[string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[string] { return v.CloudfrontDomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`) that can be used to create a Route53 alias record for the distribution.
func (o DomainNameOutput) CloudfrontZoneId() pulumix.Output[string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[string] { return v.CloudfrontZoneId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Fully-qualified domain name to register.
func (o DomainNameOutput) DomainName() pulumix.Output[string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[string] { return v.DomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block defining API endpoint information including type. See below.
func (o DomainNameOutput) EndpointConfiguration() pulumix.GPtrOutput[DomainNameEndpointConfiguration, DomainNameEndpointConfigurationOutput] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.GPtrOutput[DomainNameEndpointConfiguration, DomainNameEndpointConfigurationOutput] {
		return v.EndpointConfiguration
	})
	unwrapped := pulumix.Flatten[*DomainNameEndpointConfiguration, pulumix.GPtrOutput[DomainNameEndpointConfiguration, DomainNameEndpointConfigurationOutput]](value)
	return pulumix.GPtrOutput[DomainNameEndpointConfiguration, DomainNameEndpointConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Mutual TLS authentication configuration for the domain name. See below.
func (o DomainNameOutput) MutualTlsAuthentication() pulumix.GPtrOutput[DomainNameMutualTlsAuthentication, DomainNameMutualTlsAuthenticationOutput] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.GPtrOutput[DomainNameMutualTlsAuthentication, DomainNameMutualTlsAuthenticationOutput] {
		return v.MutualTlsAuthentication
	})
	unwrapped := pulumix.Flatten[*DomainNameMutualTlsAuthentication, pulumix.GPtrOutput[DomainNameMutualTlsAuthentication, DomainNameMutualTlsAuthenticationOutput]](value)
	return pulumix.GPtrOutput[DomainNameMutualTlsAuthentication, DomainNameMutualTlsAuthenticationOutput]{OutputState: unwrapped.OutputState}
}

// ARN of the AWS-issued certificate used to validate custom domain ownership (when `certificateArn` is issued via an ACM Private CA or `mutualTlsAuthentication` is configured with an ACM-imported certificate.)
func (o DomainNameOutput) OwnershipVerificationCertificateArn() pulumix.Output[string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[string] { return v.OwnershipVerificationCertificateArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and `certificatePrivateKey`.
//
// When uploading a certificate, the following arguments are supported:
func (o DomainNameOutput) RegionalCertificateArn() pulumix.Output[*string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[*string] { return v.RegionalCertificateArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// User-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and `certificatePrivateKey`.
func (o DomainNameOutput) RegionalCertificateName() pulumix.Output[*string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[*string] { return v.RegionalCertificateName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Hostname for the custom domain's regional endpoint.
func (o DomainNameOutput) RegionalDomainName() pulumix.Output[string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[string] { return v.RegionalDomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
func (o DomainNameOutput) RegionalZoneId() pulumix.Output[string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[string] { return v.RegionalZoneId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Transport Layer Security (TLS) version + cipher suite for this DomainName. Valid values are `TLS_1_0` and `TLS_1_2`. Must be configured to perform drift detection.
func (o DomainNameOutput) SecurityPolicy() pulumix.Output[string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[string] { return v.SecurityPolicy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
//
// When referencing an AWS-managed certificate, the following arguments are supported:
func (o DomainNameOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o DomainNameOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(DomainNameOutput{})
}
