// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appconfig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Associates an AppConfig Extension with a Resource.
type ExtensionAssociation struct {
	pulumi.CustomResourceState

	// ARN of the AppConfig Extension Association.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The ARN of the extension defined in the association.
	ExtensionArn pulumix.Output[string] `pulumi:"extensionArn"`
	// The version number for the extension defined in the association.
	ExtensionVersion pulumix.Output[int] `pulumi:"extensionVersion"`
	// The parameter names and values defined for the association.
	Parameters pulumix.MapOutput[string] `pulumi:"parameters"`
	// The ARN of the application, configuration profile, or environment to associate with the extension.
	ResourceArn pulumix.Output[string] `pulumi:"resourceArn"`
}

// NewExtensionAssociation registers a new resource with the given unique name, arguments, and options.
func NewExtensionAssociation(ctx *pulumi.Context,
	name string, args *ExtensionAssociationArgs, opts ...pulumi.ResourceOption) (*ExtensionAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtensionArn == nil {
		return nil, errors.New("invalid value for required argument 'ExtensionArn'")
	}
	if args.ResourceArn == nil {
		return nil, errors.New("invalid value for required argument 'ResourceArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExtensionAssociation
	err := ctx.RegisterResource("aws:appconfig/extensionAssociation:ExtensionAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtensionAssociation gets an existing ExtensionAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtensionAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtensionAssociationState, opts ...pulumi.ResourceOption) (*ExtensionAssociation, error) {
	var resource ExtensionAssociation
	err := ctx.ReadResource("aws:appconfig/extensionAssociation:ExtensionAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExtensionAssociation resources.
type extensionAssociationState struct {
	// ARN of the AppConfig Extension Association.
	Arn *string `pulumi:"arn"`
	// The ARN of the extension defined in the association.
	ExtensionArn *string `pulumi:"extensionArn"`
	// The version number for the extension defined in the association.
	ExtensionVersion *int `pulumi:"extensionVersion"`
	// The parameter names and values defined for the association.
	Parameters map[string]string `pulumi:"parameters"`
	// The ARN of the application, configuration profile, or environment to associate with the extension.
	ResourceArn *string `pulumi:"resourceArn"`
}

type ExtensionAssociationState struct {
	// ARN of the AppConfig Extension Association.
	Arn pulumix.Input[*string]
	// The ARN of the extension defined in the association.
	ExtensionArn pulumix.Input[*string]
	// The version number for the extension defined in the association.
	ExtensionVersion pulumix.Input[*int]
	// The parameter names and values defined for the association.
	Parameters pulumix.Input[map[string]string]
	// The ARN of the application, configuration profile, or environment to associate with the extension.
	ResourceArn pulumix.Input[*string]
}

func (ExtensionAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionAssociationState)(nil)).Elem()
}

type extensionAssociationArgs struct {
	// The ARN of the extension defined in the association.
	ExtensionArn string `pulumi:"extensionArn"`
	// The parameter names and values defined for the association.
	Parameters map[string]string `pulumi:"parameters"`
	// The ARN of the application, configuration profile, or environment to associate with the extension.
	ResourceArn string `pulumi:"resourceArn"`
}

// The set of arguments for constructing a ExtensionAssociation resource.
type ExtensionAssociationArgs struct {
	// The ARN of the extension defined in the association.
	ExtensionArn pulumix.Input[string]
	// The parameter names and values defined for the association.
	Parameters pulumix.Input[map[string]string]
	// The ARN of the application, configuration profile, or environment to associate with the extension.
	ResourceArn pulumix.Input[string]
}

func (ExtensionAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionAssociationArgs)(nil)).Elem()
}

type ExtensionAssociationOutput struct{ *pulumi.OutputState }

func (ExtensionAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionAssociation)(nil)).Elem()
}

func (o ExtensionAssociationOutput) ToExtensionAssociationOutput() ExtensionAssociationOutput {
	return o
}

func (o ExtensionAssociationOutput) ToExtensionAssociationOutputWithContext(ctx context.Context) ExtensionAssociationOutput {
	return o
}

func (o ExtensionAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[ExtensionAssociation] {
	return pulumix.Output[ExtensionAssociation]{
		OutputState: o.OutputState,
	}
}

// ARN of the AppConfig Extension Association.
func (o ExtensionAssociationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ExtensionAssociation](o, func(v ExtensionAssociation) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the extension defined in the association.
func (o ExtensionAssociationOutput) ExtensionArn() pulumix.Output[string] {
	value := pulumix.Apply[ExtensionAssociation](o, func(v ExtensionAssociation) pulumix.Output[string] { return v.ExtensionArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The version number for the extension defined in the association.
func (o ExtensionAssociationOutput) ExtensionVersion() pulumix.Output[int] {
	value := pulumix.Apply[ExtensionAssociation](o, func(v ExtensionAssociation) pulumix.Output[int] { return v.ExtensionVersion })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The parameter names and values defined for the association.
func (o ExtensionAssociationOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[ExtensionAssociation](o, func(v ExtensionAssociation) pulumix.MapOutput[string] { return v.Parameters })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The ARN of the application, configuration profile, or environment to associate with the extension.
func (o ExtensionAssociationOutput) ResourceArn() pulumix.Output[string] {
	value := pulumix.Apply[ExtensionAssociation](o, func(v ExtensionAssociation) pulumix.Output[string] { return v.ResourceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ExtensionAssociationOutput{})
}
