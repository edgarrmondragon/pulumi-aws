// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Connect User Hierarchy Group.
func LookupUserHierarchyGroup(ctx *pulumi.Context, args *LookupUserHierarchyGroupArgs, opts ...pulumi.InvokeOption) (*LookupUserHierarchyGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserHierarchyGroupResult
	err := ctx.Invoke("aws:connect/getUserHierarchyGroup:getUserHierarchyGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserHierarchyGroup.
type LookupUserHierarchyGroupArgs struct {
	// Returns information on a specific hierarchy group by hierarchy group id
	HierarchyGroupId *string `pulumi:"hierarchyGroupId"`
	// Reference to the hosting Amazon Connect Instance
	InstanceId string `pulumi:"instanceId"`
	// Returns information on a specific hierarchy group by name
	Name *string `pulumi:"name"`
	// Map of tags to assign to the hierarchy group.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getUserHierarchyGroup.
type LookupUserHierarchyGroupResult struct {
	// ARN of the hierarchy group.
	Arn              string `pulumi:"arn"`
	HierarchyGroupId string `pulumi:"hierarchyGroupId"`
	// Block that contains information about the levels in the hierarchy group. The `hierarchyPath` block is documented below.
	HierarchyPaths []GetUserHierarchyGroupHierarchyPath `pulumi:"hierarchyPaths"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	// Identifier of the level in the hierarchy group.
	LevelId string `pulumi:"levelId"`
	// Name of the hierarchy group.
	Name string `pulumi:"name"`
	// Map of tags to assign to the hierarchy group.
	Tags map[string]string `pulumi:"tags"`
}

func LookupUserHierarchyGroupOutput(ctx *pulumi.Context, args LookupUserHierarchyGroupOutputArgs, opts ...pulumi.InvokeOption) LookupUserHierarchyGroupResultOutput {
	outputResult := pulumix.ApplyErr[*LookupUserHierarchyGroupArgs](args.ToOutput(), func(plainArgs *LookupUserHierarchyGroupArgs) (*LookupUserHierarchyGroupResult, error) {
		return LookupUserHierarchyGroup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupUserHierarchyGroupResultOutput, *LookupUserHierarchyGroupResult](outputResult)
}

// A collection of arguments for invoking getUserHierarchyGroup.
type LookupUserHierarchyGroupOutputArgs struct {
	// Returns information on a specific hierarchy group by hierarchy group id
	HierarchyGroupId pulumix.Input[*string] `pulumi:"hierarchyGroupId"`
	// Reference to the hosting Amazon Connect Instance
	InstanceId pulumix.Input[string] `pulumi:"instanceId"`
	// Returns information on a specific hierarchy group by name
	Name pulumix.Input[*string] `pulumi:"name"`
	// Map of tags to assign to the hierarchy group.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupUserHierarchyGroupOutputArgs) ToOutput() pulumix.Output[*LookupUserHierarchyGroupArgs] {
	allArgs := pulumix.All(
		args.HierarchyGroupId.ToOutput(context.Background()).AsAny(),
		args.InstanceId.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupUserHierarchyGroupArgs {
		return &LookupUserHierarchyGroupArgs{
			HierarchyGroupId: resolvedArgs[0].(*string),
			InstanceId:       resolvedArgs[1].(string),
			Name:             resolvedArgs[2].(*string),
			Tags:             resolvedArgs[3].(map[string]string),
		}
	})
}

type LookupUserHierarchyGroupResultOutput struct{ *pulumi.OutputState }

func (LookupUserHierarchyGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserHierarchyGroupResult)(nil)).Elem()
}

func (o LookupUserHierarchyGroupResultOutput) ToOutput(context.Context) pulumix.Output[*LookupUserHierarchyGroupResult] {
	return pulumix.Output[*LookupUserHierarchyGroupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupUserHierarchyGroupResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserHierarchyGroupResult](o, func(v *LookupUserHierarchyGroupResult) string { return v.Arn })
}

func (o LookupUserHierarchyGroupResultOutput) HierarchyGroupId() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserHierarchyGroupResult](o, func(v *LookupUserHierarchyGroupResult) string { return v.HierarchyGroupId })
}

func (o LookupUserHierarchyGroupResultOutput) HierarchyPaths() pulumix.GArrayOutput[GetUserHierarchyGroupHierarchyPath, GetUserHierarchyGroupHierarchyPathOutput] {
	value := pulumix.Apply[*LookupUserHierarchyGroupResult](o, func(v *LookupUserHierarchyGroupResult) []GetUserHierarchyGroupHierarchyPath { return v.HierarchyPaths })
	return pulumix.GArrayOutput[GetUserHierarchyGroupHierarchyPath, GetUserHierarchyGroupHierarchyPathOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserHierarchyGroupResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserHierarchyGroupResult](o, func(v *LookupUserHierarchyGroupResult) string { return v.Id })
}

func (o LookupUserHierarchyGroupResultOutput) InstanceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserHierarchyGroupResult](o, func(v *LookupUserHierarchyGroupResult) string { return v.InstanceId })
}

func (o LookupUserHierarchyGroupResultOutput) LevelId() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserHierarchyGroupResult](o, func(v *LookupUserHierarchyGroupResult) string { return v.LevelId })
}

func (o LookupUserHierarchyGroupResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserHierarchyGroupResult](o, func(v *LookupUserHierarchyGroupResult) string { return v.Name })
}

func (o LookupUserHierarchyGroupResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupUserHierarchyGroupResult](o, func(v *LookupUserHierarchyGroupResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
