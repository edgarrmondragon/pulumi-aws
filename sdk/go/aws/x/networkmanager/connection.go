// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a connection between two devices.
// The devices can be a physical or virtual appliance that connects to a third-party appliance in a VPC, or a physical appliance that connects to another physical appliance in an on-premises network.
type Connection struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the connection.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The ID of the second device in the connection.
	ConnectedDeviceId pulumix.Output[string] `pulumi:"connectedDeviceId"`
	// The ID of the link for the second device.
	ConnectedLinkId pulumix.Output[*string] `pulumi:"connectedLinkId"`
	// A description of the connection.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The ID of the first device in the connection.
	DeviceId pulumix.Output[string] `pulumi:"deviceId"`
	// The ID of the global network.
	GlobalNetworkId pulumix.Output[string] `pulumi:"globalNetworkId"`
	// The ID of the link for the first device.
	LinkId pulumix.Output[*string] `pulumi:"linkId"`
	// Key-value tags for the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectedDeviceId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectedDeviceId'")
	}
	if args.DeviceId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceId'")
	}
	if args.GlobalNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'GlobalNetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connection
	err := ctx.RegisterResource("aws:networkmanager/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("aws:networkmanager/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	// The Amazon Resource Name (ARN) of the connection.
	Arn *string `pulumi:"arn"`
	// The ID of the second device in the connection.
	ConnectedDeviceId *string `pulumi:"connectedDeviceId"`
	// The ID of the link for the second device.
	ConnectedLinkId *string `pulumi:"connectedLinkId"`
	// A description of the connection.
	Description *string `pulumi:"description"`
	// The ID of the first device in the connection.
	DeviceId *string `pulumi:"deviceId"`
	// The ID of the global network.
	GlobalNetworkId *string `pulumi:"globalNetworkId"`
	// The ID of the link for the first device.
	LinkId *string `pulumi:"linkId"`
	// Key-value tags for the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ConnectionState struct {
	// The Amazon Resource Name (ARN) of the connection.
	Arn pulumix.Input[*string]
	// The ID of the second device in the connection.
	ConnectedDeviceId pulumix.Input[*string]
	// The ID of the link for the second device.
	ConnectedLinkId pulumix.Input[*string]
	// A description of the connection.
	Description pulumix.Input[*string]
	// The ID of the first device in the connection.
	DeviceId pulumix.Input[*string]
	// The ID of the global network.
	GlobalNetworkId pulumix.Input[*string]
	// The ID of the link for the first device.
	LinkId pulumix.Input[*string]
	// Key-value tags for the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// The ID of the second device in the connection.
	ConnectedDeviceId string `pulumi:"connectedDeviceId"`
	// The ID of the link for the second device.
	ConnectedLinkId *string `pulumi:"connectedLinkId"`
	// A description of the connection.
	Description *string `pulumi:"description"`
	// The ID of the first device in the connection.
	DeviceId string `pulumi:"deviceId"`
	// The ID of the global network.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// The ID of the link for the first device.
	LinkId *string `pulumi:"linkId"`
	// Key-value tags for the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// The ID of the second device in the connection.
	ConnectedDeviceId pulumix.Input[string]
	// The ID of the link for the second device.
	ConnectedLinkId pulumix.Input[*string]
	// A description of the connection.
	Description pulumix.Input[*string]
	// The ID of the first device in the connection.
	DeviceId pulumix.Input[string]
	// The ID of the global network.
	GlobalNetworkId pulumix.Input[string]
	// The ID of the link for the first device.
	LinkId pulumix.Input[*string]
	// Key-value tags for the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[Connection] {
	return pulumix.Output[Connection]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the connection.
func (o ConnectionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Connection](o, func(v Connection) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the second device in the connection.
func (o ConnectionOutput) ConnectedDeviceId() pulumix.Output[string] {
	value := pulumix.Apply[Connection](o, func(v Connection) pulumix.Output[string] { return v.ConnectedDeviceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the link for the second device.
func (o ConnectionOutput) ConnectedLinkId() pulumix.Output[*string] {
	value := pulumix.Apply[Connection](o, func(v Connection) pulumix.Output[*string] { return v.ConnectedLinkId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A description of the connection.
func (o ConnectionOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Connection](o, func(v Connection) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the first device in the connection.
func (o ConnectionOutput) DeviceId() pulumix.Output[string] {
	value := pulumix.Apply[Connection](o, func(v Connection) pulumix.Output[string] { return v.DeviceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the global network.
func (o ConnectionOutput) GlobalNetworkId() pulumix.Output[string] {
	value := pulumix.Apply[Connection](o, func(v Connection) pulumix.Output[string] { return v.GlobalNetworkId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the link for the first device.
func (o ConnectionOutput) LinkId() pulumix.Output[*string] {
	value := pulumix.Apply[Connection](o, func(v Connection) pulumix.Output[*string] { return v.LinkId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Key-value tags for the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ConnectionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Connection](o, func(v Connection) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ConnectionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Connection](o, func(v Connection) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ConnectionOutput{})
}
