// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Connect Routing Profile.
func LookupRoutingProfile(ctx *pulumi.Context, args *LookupRoutingProfileArgs, opts ...pulumi.InvokeOption) (*LookupRoutingProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRoutingProfileResult
	err := ctx.Invoke("aws:connect/getRoutingProfile:getRoutingProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRoutingProfile.
type LookupRoutingProfileArgs struct {
	// Reference to the hosting Amazon Connect Instance
	InstanceId string `pulumi:"instanceId"`
	// Returns information on a specific Routing Profile by name
	Name *string `pulumi:"name"`
	// Returns information on a specific Routing Profile by Routing Profile id
	RoutingProfileId *string `pulumi:"routingProfileId"`
	// Map of tags to assign to the Routing Profile.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getRoutingProfile.
type LookupRoutingProfileResult struct {
	// ARN of the Routing Profile.
	Arn string `pulumi:"arn"`
	// Specifies the default outbound queue for the Routing Profile.
	DefaultOutboundQueueId string `pulumi:"defaultOutboundQueueId"`
	// Description of the Routing Profile.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	// One or more `mediaConcurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `mediaConcurrencies` block is documented below.
	MediaConcurrencies []GetRoutingProfileMediaConcurrency `pulumi:"mediaConcurrencies"`
	Name               string                              `pulumi:"name"`
	// One or more `queueConfigs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queueConfigs` block is documented below.
	QueueConfigs     []GetRoutingProfileQueueConfig `pulumi:"queueConfigs"`
	RoutingProfileId string                         `pulumi:"routingProfileId"`
	// Map of tags to assign to the Routing Profile.
	Tags map[string]string `pulumi:"tags"`
}

func LookupRoutingProfileOutput(ctx *pulumi.Context, args LookupRoutingProfileOutputArgs, opts ...pulumi.InvokeOption) LookupRoutingProfileResultOutput {
	outputResult := pulumix.ApplyErr[*LookupRoutingProfileArgs](args.ToOutput(), func(plainArgs *LookupRoutingProfileArgs) (*LookupRoutingProfileResult, error) {
		return LookupRoutingProfile(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupRoutingProfileResultOutput, *LookupRoutingProfileResult](outputResult)
}

// A collection of arguments for invoking getRoutingProfile.
type LookupRoutingProfileOutputArgs struct {
	// Reference to the hosting Amazon Connect Instance
	InstanceId pulumix.Input[string] `pulumi:"instanceId"`
	// Returns information on a specific Routing Profile by name
	Name pulumix.Input[*string] `pulumi:"name"`
	// Returns information on a specific Routing Profile by Routing Profile id
	RoutingProfileId pulumix.Input[*string] `pulumi:"routingProfileId"`
	// Map of tags to assign to the Routing Profile.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupRoutingProfileOutputArgs) ToOutput() pulumix.Output[*LookupRoutingProfileArgs] {
	allArgs := pulumix.All(
		args.InstanceId.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.RoutingProfileId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupRoutingProfileArgs {
		return &LookupRoutingProfileArgs{
			InstanceId:       resolvedArgs[0].(string),
			Name:             resolvedArgs[1].(*string),
			RoutingProfileId: resolvedArgs[2].(*string),
			Tags:             resolvedArgs[3].(map[string]string),
		}
	})
}

type LookupRoutingProfileResultOutput struct{ *pulumi.OutputState }

func (LookupRoutingProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoutingProfileResult)(nil)).Elem()
}

func (o LookupRoutingProfileResultOutput) ToOutput(context.Context) pulumix.Output[*LookupRoutingProfileResult] {
	return pulumix.Output[*LookupRoutingProfileResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupRoutingProfileResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoutingProfileResult](o, func(v *LookupRoutingProfileResult) string { return v.Arn })
}

func (o LookupRoutingProfileResultOutput) DefaultOutboundQueueId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoutingProfileResult](o, func(v *LookupRoutingProfileResult) string { return v.DefaultOutboundQueueId })
}

func (o LookupRoutingProfileResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoutingProfileResult](o, func(v *LookupRoutingProfileResult) string { return v.Description })
}

func (o LookupRoutingProfileResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoutingProfileResult](o, func(v *LookupRoutingProfileResult) string { return v.Id })
}

func (o LookupRoutingProfileResultOutput) InstanceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoutingProfileResult](o, func(v *LookupRoutingProfileResult) string { return v.InstanceId })
}

func (o LookupRoutingProfileResultOutput) MediaConcurrencies() pulumix.GArrayOutput[GetRoutingProfileMediaConcurrency, GetRoutingProfileMediaConcurrencyOutput] {
	value := pulumix.Apply[*LookupRoutingProfileResult](o, func(v *LookupRoutingProfileResult) []GetRoutingProfileMediaConcurrency { return v.MediaConcurrencies })
	return pulumix.GArrayOutput[GetRoutingProfileMediaConcurrency, GetRoutingProfileMediaConcurrencyOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupRoutingProfileResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoutingProfileResult](o, func(v *LookupRoutingProfileResult) string { return v.Name })
}

func (o LookupRoutingProfileResultOutput) QueueConfigs() pulumix.GArrayOutput[GetRoutingProfileQueueConfig, GetRoutingProfileQueueConfigOutput] {
	value := pulumix.Apply[*LookupRoutingProfileResult](o, func(v *LookupRoutingProfileResult) []GetRoutingProfileQueueConfig { return v.QueueConfigs })
	return pulumix.GArrayOutput[GetRoutingProfileQueueConfig, GetRoutingProfileQueueConfigOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupRoutingProfileResultOutput) RoutingProfileId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoutingProfileResult](o, func(v *LookupRoutingProfileResult) string { return v.RoutingProfileId })
}

func (o LookupRoutingProfileResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupRoutingProfileResult](o, func(v *LookupRoutingProfileResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
