// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package xray

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates and manages an AWS XRay Group.
type Group struct {
	pulumi.CustomResourceState

	// The ARN of the Group.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The filter expression defining criteria by which to group traces. more info can be found in official [docs](https://docs.aws.amazon.com/xray/latest/devguide/xray-console-filters.html).
	FilterExpression pulumix.Output[string] `pulumi:"filterExpression"`
	// The name of the group.
	GroupName pulumix.Output[string] `pulumi:"groupName"`
	// Configuration options for enabling insights.
	InsightsConfiguration pulumix.GPtrOutput[GroupInsightsConfiguration, GroupInsightsConfigurationOutput] `pulumi:"insightsConfiguration"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FilterExpression == nil {
		return nil, errors.New("invalid value for required argument 'FilterExpression'")
	}
	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Group
	err := ctx.RegisterResource("aws:xray/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("aws:xray/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	// The ARN of the Group.
	Arn *string `pulumi:"arn"`
	// The filter expression defining criteria by which to group traces. more info can be found in official [docs](https://docs.aws.amazon.com/xray/latest/devguide/xray-console-filters.html).
	FilterExpression *string `pulumi:"filterExpression"`
	// The name of the group.
	GroupName *string `pulumi:"groupName"`
	// Configuration options for enabling insights.
	InsightsConfiguration *GroupInsightsConfiguration `pulumi:"insightsConfiguration"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type GroupState struct {
	// The ARN of the Group.
	Arn pulumix.Input[*string]
	// The filter expression defining criteria by which to group traces. more info can be found in official [docs](https://docs.aws.amazon.com/xray/latest/devguide/xray-console-filters.html).
	FilterExpression pulumix.Input[*string]
	// The name of the group.
	GroupName pulumix.Input[*string]
	// Configuration options for enabling insights.
	InsightsConfiguration pulumix.Input[*GroupInsightsConfigurationArgs]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	// The filter expression defining criteria by which to group traces. more info can be found in official [docs](https://docs.aws.amazon.com/xray/latest/devguide/xray-console-filters.html).
	FilterExpression string `pulumi:"filterExpression"`
	// The name of the group.
	GroupName string `pulumi:"groupName"`
	// Configuration options for enabling insights.
	InsightsConfiguration *GroupInsightsConfiguration `pulumi:"insightsConfiguration"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// The filter expression defining criteria by which to group traces. more info can be found in official [docs](https://docs.aws.amazon.com/xray/latest/devguide/xray-console-filters.html).
	FilterExpression pulumix.Input[string]
	// The name of the group.
	GroupName pulumix.Input[string]
	// Configuration options for enabling insights.
	InsightsConfiguration pulumix.Input[*GroupInsightsConfigurationArgs]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

func (o GroupOutput) ToOutput(ctx context.Context) pulumix.Output[Group] {
	return pulumix.Output[Group]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Group.
func (o GroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The filter expression defining criteria by which to group traces. more info can be found in official [docs](https://docs.aws.amazon.com/xray/latest/devguide/xray-console-filters.html).
func (o GroupOutput) FilterExpression() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.FilterExpression })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the group.
func (o GroupOutput) GroupName() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.GroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration options for enabling insights.
func (o GroupOutput) InsightsConfiguration() pulumix.GPtrOutput[GroupInsightsConfiguration, GroupInsightsConfigurationOutput] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.GPtrOutput[GroupInsightsConfiguration, GroupInsightsConfigurationOutput] {
		return v.InsightsConfiguration
	})
	unwrapped := pulumix.Flatten[*GroupInsightsConfiguration, pulumix.GPtrOutput[GroupInsightsConfiguration, GroupInsightsConfigurationOutput]](value)
	return pulumix.GPtrOutput[GroupInsightsConfiguration, GroupInsightsConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
func (o GroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o GroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(GroupOutput{})
}
