// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages the capacity providers of an ECS Cluster.
//
// More information about capacity providers can be found in the [ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-capacity-providers.html).
type ClusterCapacityProviders struct {
	pulumi.CustomResourceState

	// Set of names of one or more capacity providers to associate with the cluster. Valid values also include `FARGATE` and `FARGATE_SPOT`.
	CapacityProviders pulumix.ArrayOutput[string] `pulumi:"capacityProviders"`
	// Name of the ECS cluster to manage capacity providers for.
	ClusterName pulumix.Output[string] `pulumi:"clusterName"`
	// Set of capacity provider strategies to use by default for the cluster. Detailed below.
	DefaultCapacityProviderStrategies pulumix.GArrayOutput[ClusterCapacityProvidersDefaultCapacityProviderStrategy, ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput] `pulumi:"defaultCapacityProviderStrategies"`
}

// NewClusterCapacityProviders registers a new resource with the given unique name, arguments, and options.
func NewClusterCapacityProviders(ctx *pulumi.Context,
	name string, args *ClusterCapacityProvidersArgs, opts ...pulumi.ResourceOption) (*ClusterCapacityProviders, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterCapacityProviders
	err := ctx.RegisterResource("aws:ecs/clusterCapacityProviders:ClusterCapacityProviders", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterCapacityProviders gets an existing ClusterCapacityProviders resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterCapacityProviders(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterCapacityProvidersState, opts ...pulumi.ResourceOption) (*ClusterCapacityProviders, error) {
	var resource ClusterCapacityProviders
	err := ctx.ReadResource("aws:ecs/clusterCapacityProviders:ClusterCapacityProviders", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterCapacityProviders resources.
type clusterCapacityProvidersState struct {
	// Set of names of one or more capacity providers to associate with the cluster. Valid values also include `FARGATE` and `FARGATE_SPOT`.
	CapacityProviders []string `pulumi:"capacityProviders"`
	// Name of the ECS cluster to manage capacity providers for.
	ClusterName *string `pulumi:"clusterName"`
	// Set of capacity provider strategies to use by default for the cluster. Detailed below.
	DefaultCapacityProviderStrategies []ClusterCapacityProvidersDefaultCapacityProviderStrategy `pulumi:"defaultCapacityProviderStrategies"`
}

type ClusterCapacityProvidersState struct {
	// Set of names of one or more capacity providers to associate with the cluster. Valid values also include `FARGATE` and `FARGATE_SPOT`.
	CapacityProviders pulumix.Input[[]string]
	// Name of the ECS cluster to manage capacity providers for.
	ClusterName pulumix.Input[*string]
	// Set of capacity provider strategies to use by default for the cluster. Detailed below.
	DefaultCapacityProviderStrategies pulumix.Input[[]*ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs]
}

func (ClusterCapacityProvidersState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterCapacityProvidersState)(nil)).Elem()
}

type clusterCapacityProvidersArgs struct {
	// Set of names of one or more capacity providers to associate with the cluster. Valid values also include `FARGATE` and `FARGATE_SPOT`.
	CapacityProviders []string `pulumi:"capacityProviders"`
	// Name of the ECS cluster to manage capacity providers for.
	ClusterName string `pulumi:"clusterName"`
	// Set of capacity provider strategies to use by default for the cluster. Detailed below.
	DefaultCapacityProviderStrategies []ClusterCapacityProvidersDefaultCapacityProviderStrategy `pulumi:"defaultCapacityProviderStrategies"`
}

// The set of arguments for constructing a ClusterCapacityProviders resource.
type ClusterCapacityProvidersArgs struct {
	// Set of names of one or more capacity providers to associate with the cluster. Valid values also include `FARGATE` and `FARGATE_SPOT`.
	CapacityProviders pulumix.Input[[]string]
	// Name of the ECS cluster to manage capacity providers for.
	ClusterName pulumix.Input[string]
	// Set of capacity provider strategies to use by default for the cluster. Detailed below.
	DefaultCapacityProviderStrategies pulumix.Input[[]*ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs]
}

func (ClusterCapacityProvidersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterCapacityProvidersArgs)(nil)).Elem()
}

type ClusterCapacityProvidersOutput struct{ *pulumi.OutputState }

func (ClusterCapacityProvidersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCapacityProviders)(nil)).Elem()
}

func (o ClusterCapacityProvidersOutput) ToClusterCapacityProvidersOutput() ClusterCapacityProvidersOutput {
	return o
}

func (o ClusterCapacityProvidersOutput) ToClusterCapacityProvidersOutputWithContext(ctx context.Context) ClusterCapacityProvidersOutput {
	return o
}

func (o ClusterCapacityProvidersOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterCapacityProviders] {
	return pulumix.Output[ClusterCapacityProviders]{
		OutputState: o.OutputState,
	}
}

// Set of names of one or more capacity providers to associate with the cluster. Valid values also include `FARGATE` and `FARGATE_SPOT`.
func (o ClusterCapacityProvidersOutput) CapacityProviders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClusterCapacityProviders](o, func(v ClusterCapacityProviders) pulumix.ArrayOutput[string] { return v.CapacityProviders })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Name of the ECS cluster to manage capacity providers for.
func (o ClusterCapacityProvidersOutput) ClusterName() pulumix.Output[string] {
	value := pulumix.Apply[ClusterCapacityProviders](o, func(v ClusterCapacityProviders) pulumix.Output[string] { return v.ClusterName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set of capacity provider strategies to use by default for the cluster. Detailed below.
func (o ClusterCapacityProvidersOutput) DefaultCapacityProviderStrategies() pulumix.GArrayOutput[ClusterCapacityProvidersDefaultCapacityProviderStrategy, ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput] {
	value := pulumix.Apply[ClusterCapacityProviders](o, func(v ClusterCapacityProviders) pulumix.GArrayOutput[ClusterCapacityProvidersDefaultCapacityProviderStrategy, ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput] {
		return v.DefaultCapacityProviderStrategies
	})
	unwrapped := pulumix.Flatten[[]ClusterCapacityProvidersDefaultCapacityProviderStrategy, pulumix.GArrayOutput[ClusterCapacityProvidersDefaultCapacityProviderStrategy, ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput]](value)
	return pulumix.GArrayOutput[ClusterCapacityProvidersDefaultCapacityProviderStrategy, ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ClusterCapacityProvidersOutput{})
}
