// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticache

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Associate an existing ElastiCache user and an existing user group.
//
// > **NOTE:** The provider will detect changes in the `elasticache.UserGroup` since `elasticache.UserGroupAssociation` changes the user IDs associated with the user group. You can ignore these changes with the `ignoreChanges` option as shown in the example.
type UserGroupAssociation struct {
	pulumi.CustomResourceState

	// ID of the user group.
	UserGroupId pulumix.Output[string] `pulumi:"userGroupId"`
	// ID of the user to associated with the user group.
	UserId pulumix.Output[string] `pulumi:"userId"`
}

// NewUserGroupAssociation registers a new resource with the given unique name, arguments, and options.
func NewUserGroupAssociation(ctx *pulumi.Context,
	name string, args *UserGroupAssociationArgs, opts ...pulumi.ResourceOption) (*UserGroupAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserGroupId == nil {
		return nil, errors.New("invalid value for required argument 'UserGroupId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserGroupAssociation
	err := ctx.RegisterResource("aws:elasticache/userGroupAssociation:UserGroupAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroupAssociation gets an existing UserGroupAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroupAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupAssociationState, opts ...pulumi.ResourceOption) (*UserGroupAssociation, error) {
	var resource UserGroupAssociation
	err := ctx.ReadResource("aws:elasticache/userGroupAssociation:UserGroupAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroupAssociation resources.
type userGroupAssociationState struct {
	// ID of the user group.
	UserGroupId *string `pulumi:"userGroupId"`
	// ID of the user to associated with the user group.
	UserId *string `pulumi:"userId"`
}

type UserGroupAssociationState struct {
	// ID of the user group.
	UserGroupId pulumix.Input[*string]
	// ID of the user to associated with the user group.
	UserId pulumix.Input[*string]
}

func (UserGroupAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupAssociationState)(nil)).Elem()
}

type userGroupAssociationArgs struct {
	// ID of the user group.
	UserGroupId string `pulumi:"userGroupId"`
	// ID of the user to associated with the user group.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UserGroupAssociation resource.
type UserGroupAssociationArgs struct {
	// ID of the user group.
	UserGroupId pulumix.Input[string]
	// ID of the user to associated with the user group.
	UserId pulumix.Input[string]
}

func (UserGroupAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupAssociationArgs)(nil)).Elem()
}

type UserGroupAssociationOutput struct{ *pulumi.OutputState }

func (UserGroupAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupAssociation)(nil)).Elem()
}

func (o UserGroupAssociationOutput) ToUserGroupAssociationOutput() UserGroupAssociationOutput {
	return o
}

func (o UserGroupAssociationOutput) ToUserGroupAssociationOutputWithContext(ctx context.Context) UserGroupAssociationOutput {
	return o
}

func (o UserGroupAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[UserGroupAssociation] {
	return pulumix.Output[UserGroupAssociation]{
		OutputState: o.OutputState,
	}
}

// ID of the user group.
func (o UserGroupAssociationOutput) UserGroupId() pulumix.Output[string] {
	value := pulumix.Apply[UserGroupAssociation](o, func(v UserGroupAssociation) pulumix.Output[string] { return v.UserGroupId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the user to associated with the user group.
func (o UserGroupAssociationOutput) UserId() pulumix.Output[string] {
	value := pulumix.Apply[UserGroupAssociation](o, func(v UserGroupAssociation) pulumix.Output[string] { return v.UserId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(UserGroupAssociationOutput{})
}
