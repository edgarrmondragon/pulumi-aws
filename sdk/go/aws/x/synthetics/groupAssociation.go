// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synthetics

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Synthetics Group Association resource.
type GroupAssociation struct {
	pulumi.CustomResourceState

	// ARN of the canary.
	CanaryArn pulumix.Output[string] `pulumi:"canaryArn"`
	GroupArn  pulumix.Output[string] `pulumi:"groupArn"`
	// ID of the Group.
	GroupId pulumix.Output[string] `pulumi:"groupId"`
	// Name of the group that the canary will be associated with.
	GroupName pulumix.Output[string] `pulumi:"groupName"`
}

// NewGroupAssociation registers a new resource with the given unique name, arguments, and options.
func NewGroupAssociation(ctx *pulumi.Context,
	name string, args *GroupAssociationArgs, opts ...pulumi.ResourceOption) (*GroupAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CanaryArn == nil {
		return nil, errors.New("invalid value for required argument 'CanaryArn'")
	}
	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupAssociation
	err := ctx.RegisterResource("aws:synthetics/groupAssociation:GroupAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupAssociation gets an existing GroupAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupAssociationState, opts ...pulumi.ResourceOption) (*GroupAssociation, error) {
	var resource GroupAssociation
	err := ctx.ReadResource("aws:synthetics/groupAssociation:GroupAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupAssociation resources.
type groupAssociationState struct {
	// ARN of the canary.
	CanaryArn *string `pulumi:"canaryArn"`
	GroupArn  *string `pulumi:"groupArn"`
	// ID of the Group.
	GroupId *string `pulumi:"groupId"`
	// Name of the group that the canary will be associated with.
	GroupName *string `pulumi:"groupName"`
}

type GroupAssociationState struct {
	// ARN of the canary.
	CanaryArn pulumix.Input[*string]
	GroupArn  pulumix.Input[*string]
	// ID of the Group.
	GroupId pulumix.Input[*string]
	// Name of the group that the canary will be associated with.
	GroupName pulumix.Input[*string]
}

func (GroupAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupAssociationState)(nil)).Elem()
}

type groupAssociationArgs struct {
	// ARN of the canary.
	CanaryArn string `pulumi:"canaryArn"`
	// Name of the group that the canary will be associated with.
	GroupName string `pulumi:"groupName"`
}

// The set of arguments for constructing a GroupAssociation resource.
type GroupAssociationArgs struct {
	// ARN of the canary.
	CanaryArn pulumix.Input[string]
	// Name of the group that the canary will be associated with.
	GroupName pulumix.Input[string]
}

func (GroupAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupAssociationArgs)(nil)).Elem()
}

type GroupAssociationOutput struct{ *pulumi.OutputState }

func (GroupAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupAssociation)(nil)).Elem()
}

func (o GroupAssociationOutput) ToGroupAssociationOutput() GroupAssociationOutput {
	return o
}

func (o GroupAssociationOutput) ToGroupAssociationOutputWithContext(ctx context.Context) GroupAssociationOutput {
	return o
}

func (o GroupAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[GroupAssociation] {
	return pulumix.Output[GroupAssociation]{
		OutputState: o.OutputState,
	}
}

// ARN of the canary.
func (o GroupAssociationOutput) CanaryArn() pulumix.Output[string] {
	value := pulumix.Apply[GroupAssociation](o, func(v GroupAssociation) pulumix.Output[string] { return v.CanaryArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o GroupAssociationOutput) GroupArn() pulumix.Output[string] {
	value := pulumix.Apply[GroupAssociation](o, func(v GroupAssociation) pulumix.Output[string] { return v.GroupArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the Group.
func (o GroupAssociationOutput) GroupId() pulumix.Output[string] {
	value := pulumix.Apply[GroupAssociation](o, func(v GroupAssociation) pulumix.Output[string] { return v.GroupId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the group that the canary will be associated with.
func (o GroupAssociationOutput) GroupName() pulumix.Output[string] {
	value := pulumix.Apply[GroupAssociation](o, func(v GroupAssociation) pulumix.Output[string] { return v.GroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(GroupAssociationOutput{})
}
