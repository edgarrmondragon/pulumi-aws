// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Information about Redshift Orderable Clusters and valid parameter combinations.
func GetOrderableCluster(ctx *pulumi.Context, args *GetOrderableClusterArgs, opts ...pulumi.InvokeOption) (*GetOrderableClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetOrderableClusterResult
	err := ctx.Invoke("aws:redshift/getOrderableCluster:getOrderableCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOrderableCluster.
type GetOrderableClusterArgs struct {
	// Reshift Cluster typeE.g., `multi-node` or `single-node`
	ClusterType *string `pulumi:"clusterType"`
	// Redshift Cluster versionE.g., `1.0`
	ClusterVersion *string `pulumi:"clusterVersion"`
	// Redshift Cluster node typeE.g., `dc2.8xlarge`
	NodeType *string `pulumi:"nodeType"`
	// Ordered list of preferred Redshift Cluster node types. The first match in this list will be returned. If no preferred matches are found and the original search returned more than one result, an error is returned.
	PreferredNodeTypes []string `pulumi:"preferredNodeTypes"`
}

// A collection of values returned by getOrderableCluster.
type GetOrderableClusterResult struct {
	// List of Availability Zone names where the Redshift Cluster is available.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	ClusterType       string   `pulumi:"clusterType"`
	ClusterVersion    string   `pulumi:"clusterVersion"`
	// The provider-assigned unique ID for this managed resource.
	Id                 string   `pulumi:"id"`
	NodeType           string   `pulumi:"nodeType"`
	PreferredNodeTypes []string `pulumi:"preferredNodeTypes"`
}

func GetOrderableClusterOutput(ctx *pulumi.Context, args GetOrderableClusterOutputArgs, opts ...pulumi.InvokeOption) GetOrderableClusterResultOutput {
	outputResult := pulumix.ApplyErr[*GetOrderableClusterArgs](args.ToOutput(), func(plainArgs *GetOrderableClusterArgs) (*GetOrderableClusterResult, error) {
		return GetOrderableCluster(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetOrderableClusterResultOutput, *GetOrderableClusterResult](outputResult)
}

// A collection of arguments for invoking getOrderableCluster.
type GetOrderableClusterOutputArgs struct {
	// Reshift Cluster typeE.g., `multi-node` or `single-node`
	ClusterType pulumix.Input[*string] `pulumi:"clusterType"`
	// Redshift Cluster versionE.g., `1.0`
	ClusterVersion pulumix.Input[*string] `pulumi:"clusterVersion"`
	// Redshift Cluster node typeE.g., `dc2.8xlarge`
	NodeType pulumix.Input[*string] `pulumi:"nodeType"`
	// Ordered list of preferred Redshift Cluster node types. The first match in this list will be returned. If no preferred matches are found and the original search returned more than one result, an error is returned.
	PreferredNodeTypes pulumix.Input[[]string] `pulumi:"preferredNodeTypes"`
}

func (args GetOrderableClusterOutputArgs) ToOutput() pulumix.Output[*GetOrderableClusterArgs] {
	allArgs := pulumix.All(
		args.ClusterType.ToOutput(context.Background()).AsAny(),
		args.ClusterVersion.ToOutput(context.Background()).AsAny(),
		args.NodeType.ToOutput(context.Background()).AsAny(),
		args.PreferredNodeTypes.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetOrderableClusterArgs {
		return &GetOrderableClusterArgs{
			ClusterType:        resolvedArgs[0].(*string),
			ClusterVersion:     resolvedArgs[1].(*string),
			NodeType:           resolvedArgs[2].(*string),
			PreferredNodeTypes: resolvedArgs[3].([]string),
		}
	})
}

type GetOrderableClusterResultOutput struct{ *pulumi.OutputState }

func (GetOrderableClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrderableClusterResult)(nil)).Elem()
}

func (o GetOrderableClusterResultOutput) ToOutput(context.Context) pulumix.Output[*GetOrderableClusterResult] {
	return pulumix.Output[*GetOrderableClusterResult]{
		OutputState: o.OutputState,
	}
}

func (o GetOrderableClusterResultOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetOrderableClusterResult](o, func(v *GetOrderableClusterResult) []string { return v.AvailabilityZones })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetOrderableClusterResultOutput) ClusterType() pulumix.Output[string] {
	return pulumix.Apply[*GetOrderableClusterResult](o, func(v *GetOrderableClusterResult) string { return v.ClusterType })
}

func (o GetOrderableClusterResultOutput) ClusterVersion() pulumix.Output[string] {
	return pulumix.Apply[*GetOrderableClusterResult](o, func(v *GetOrderableClusterResult) string { return v.ClusterVersion })
}

func (o GetOrderableClusterResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetOrderableClusterResult](o, func(v *GetOrderableClusterResult) string { return v.Id })
}

func (o GetOrderableClusterResultOutput) NodeType() pulumix.Output[string] {
	return pulumix.Apply[*GetOrderableClusterResult](o, func(v *GetOrderableClusterResult) string { return v.NodeType })
}

func (o GetOrderableClusterResultOutput) PreferredNodeTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetOrderableClusterResult](o, func(v *GetOrderableClusterResult) []string { return v.PreferredNodeTypes })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
