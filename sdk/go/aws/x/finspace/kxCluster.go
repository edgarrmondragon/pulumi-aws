// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package finspace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS FinSpace Kx Cluster.
type KxCluster struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) identifier of the KX cluster.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
	AutoScalingConfiguration pulumix.GPtrOutput[KxClusterAutoScalingConfiguration, KxClusterAutoScalingConfigurationOutput] `pulumi:"autoScalingConfiguration"`
	// The availability zone identifiers for the requested regions. Required when `azMode` is set to SINGLE.
	AvailabilityZoneId pulumix.Output[*string] `pulumi:"availabilityZoneId"`
	// The number of availability zones you want to assign per cluster. This can be one of the following:
	// * SINGLE - Assigns one availability zone per cluster.
	// * MULTI - Assigns all the availability zones per cluster.
	AzMode pulumix.Output[string] `pulumi:"azMode"`
	// Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
	CacheStorageConfigurations pulumix.GArrayOutput[KxClusterCacheStorageConfiguration, KxClusterCacheStorageConfigurationOutput] `pulumi:"cacheStorageConfigurations"`
	// Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
	CapacityConfiguration pulumix.GPtrOutput[KxClusterCapacityConfiguration, KxClusterCapacityConfigurationOutput] `pulumi:"capacityConfiguration"`
	// Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
	Code pulumix.GPtrOutput[KxClusterCode, KxClusterCodeOutput] `pulumi:"code"`
	// List of key-value pairs to make available inside the cluster.
	CommandLineArguments pulumix.MapOutput[string] `pulumi:"commandLineArguments"`
	// Timestamp at which the cluster is created in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
	CreatedTimestamp pulumix.Output[string] `pulumi:"createdTimestamp"`
	// KX database that will be available for querying. Defined below.
	Databases pulumix.GArrayOutput[KxClusterDatabase, KxClusterDatabaseOutput] `pulumi:"databases"`
	// Description of the cluster.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Unique identifier for the KX environment.
	EnvironmentId pulumix.Output[string] `pulumi:"environmentId"`
	// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
	ExecutionRole pulumix.Output[*string] `pulumi:"executionRole"`
	// Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
	InitializationScript pulumix.Output[*string] `pulumi:"initializationScript"`
	// Last timestamp at which the cluster was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
	LastModifiedTimestamp pulumix.Output[string] `pulumi:"lastModifiedTimestamp"`
	// Unique name for the cluster that you want to create.
	Name pulumix.Output[string] `pulumi:"name"`
	// Version of FinSpace Managed kdb to run.
	ReleaseLabel pulumix.Output[string] `pulumi:"releaseLabel"`
	// Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
	SavedownStorageConfiguration pulumix.GPtrOutput[KxClusterSavedownStorageConfiguration, KxClusterSavedownStorageConfigurationOutput] `pulumi:"savedownStorageConfiguration"`
	Status                       pulumix.Output[string]                                                                                 `pulumi:"status"`
	StatusReason                 pulumix.Output[string]                                                                                 `pulumi:"statusReason"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Type of KDB database. The following types are available:
	// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
	// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
	// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
	Type pulumix.Output[string] `pulumi:"type"`
	// Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
	//
	// The following arguments are optional:
	VpcConfiguration pulumix.GPtrOutput[KxClusterVpcConfiguration, KxClusterVpcConfigurationOutput] `pulumi:"vpcConfiguration"`
}

// NewKxCluster registers a new resource with the given unique name, arguments, and options.
func NewKxCluster(ctx *pulumi.Context,
	name string, args *KxClusterArgs, opts ...pulumi.ResourceOption) (*KxCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AzMode == nil {
		return nil, errors.New("invalid value for required argument 'AzMode'")
	}
	if args.CapacityConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'CapacityConfiguration'")
	}
	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.ReleaseLabel == nil {
		return nil, errors.New("invalid value for required argument 'ReleaseLabel'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.VpcConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'VpcConfiguration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KxCluster
	err := ctx.RegisterResource("aws:finspace/kxCluster:KxCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKxCluster gets an existing KxCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKxCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KxClusterState, opts ...pulumi.ResourceOption) (*KxCluster, error) {
	var resource KxCluster
	err := ctx.ReadResource("aws:finspace/kxCluster:KxCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KxCluster resources.
type kxClusterState struct {
	// Amazon Resource Name (ARN) identifier of the KX cluster.
	Arn *string `pulumi:"arn"`
	// Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
	AutoScalingConfiguration *KxClusterAutoScalingConfiguration `pulumi:"autoScalingConfiguration"`
	// The availability zone identifiers for the requested regions. Required when `azMode` is set to SINGLE.
	AvailabilityZoneId *string `pulumi:"availabilityZoneId"`
	// The number of availability zones you want to assign per cluster. This can be one of the following:
	// * SINGLE - Assigns one availability zone per cluster.
	// * MULTI - Assigns all the availability zones per cluster.
	AzMode *string `pulumi:"azMode"`
	// Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
	CacheStorageConfigurations []KxClusterCacheStorageConfiguration `pulumi:"cacheStorageConfigurations"`
	// Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
	CapacityConfiguration *KxClusterCapacityConfiguration `pulumi:"capacityConfiguration"`
	// Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
	Code *KxClusterCode `pulumi:"code"`
	// List of key-value pairs to make available inside the cluster.
	CommandLineArguments map[string]string `pulumi:"commandLineArguments"`
	// Timestamp at which the cluster is created in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
	CreatedTimestamp *string `pulumi:"createdTimestamp"`
	// KX database that will be available for querying. Defined below.
	Databases []KxClusterDatabase `pulumi:"databases"`
	// Description of the cluster.
	Description *string `pulumi:"description"`
	// Unique identifier for the KX environment.
	EnvironmentId *string `pulumi:"environmentId"`
	// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
	ExecutionRole *string `pulumi:"executionRole"`
	// Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
	InitializationScript *string `pulumi:"initializationScript"`
	// Last timestamp at which the cluster was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
	LastModifiedTimestamp *string `pulumi:"lastModifiedTimestamp"`
	// Unique name for the cluster that you want to create.
	Name *string `pulumi:"name"`
	// Version of FinSpace Managed kdb to run.
	ReleaseLabel *string `pulumi:"releaseLabel"`
	// Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
	SavedownStorageConfiguration *KxClusterSavedownStorageConfiguration `pulumi:"savedownStorageConfiguration"`
	Status                       *string                                `pulumi:"status"`
	StatusReason                 *string                                `pulumi:"statusReason"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Type of KDB database. The following types are available:
	// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
	// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
	// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
	Type *string `pulumi:"type"`
	// Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
	//
	// The following arguments are optional:
	VpcConfiguration *KxClusterVpcConfiguration `pulumi:"vpcConfiguration"`
}

type KxClusterState struct {
	// Amazon Resource Name (ARN) identifier of the KX cluster.
	Arn pulumix.Input[*string]
	// Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
	AutoScalingConfiguration pulumix.Input[*KxClusterAutoScalingConfigurationArgs]
	// The availability zone identifiers for the requested regions. Required when `azMode` is set to SINGLE.
	AvailabilityZoneId pulumix.Input[*string]
	// The number of availability zones you want to assign per cluster. This can be one of the following:
	// * SINGLE - Assigns one availability zone per cluster.
	// * MULTI - Assigns all the availability zones per cluster.
	AzMode pulumix.Input[*string]
	// Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
	CacheStorageConfigurations pulumix.Input[[]*KxClusterCacheStorageConfigurationArgs]
	// Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
	CapacityConfiguration pulumix.Input[*KxClusterCapacityConfigurationArgs]
	// Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
	Code pulumix.Input[*KxClusterCodeArgs]
	// List of key-value pairs to make available inside the cluster.
	CommandLineArguments pulumix.Input[map[string]string]
	// Timestamp at which the cluster is created in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
	CreatedTimestamp pulumix.Input[*string]
	// KX database that will be available for querying. Defined below.
	Databases pulumix.Input[[]*KxClusterDatabaseArgs]
	// Description of the cluster.
	Description pulumix.Input[*string]
	// Unique identifier for the KX environment.
	EnvironmentId pulumix.Input[*string]
	// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
	ExecutionRole pulumix.Input[*string]
	// Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
	InitializationScript pulumix.Input[*string]
	// Last timestamp at which the cluster was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
	LastModifiedTimestamp pulumix.Input[*string]
	// Unique name for the cluster that you want to create.
	Name pulumix.Input[*string]
	// Version of FinSpace Managed kdb to run.
	ReleaseLabel pulumix.Input[*string]
	// Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
	SavedownStorageConfiguration pulumix.Input[*KxClusterSavedownStorageConfigurationArgs]
	Status                       pulumix.Input[*string]
	StatusReason                 pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Type of KDB database. The following types are available:
	// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
	// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
	// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
	Type pulumix.Input[*string]
	// Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
	//
	// The following arguments are optional:
	VpcConfiguration pulumix.Input[*KxClusterVpcConfigurationArgs]
}

func (KxClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*kxClusterState)(nil)).Elem()
}

type kxClusterArgs struct {
	// Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
	AutoScalingConfiguration *KxClusterAutoScalingConfiguration `pulumi:"autoScalingConfiguration"`
	// The availability zone identifiers for the requested regions. Required when `azMode` is set to SINGLE.
	AvailabilityZoneId *string `pulumi:"availabilityZoneId"`
	// The number of availability zones you want to assign per cluster. This can be one of the following:
	// * SINGLE - Assigns one availability zone per cluster.
	// * MULTI - Assigns all the availability zones per cluster.
	AzMode string `pulumi:"azMode"`
	// Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
	CacheStorageConfigurations []KxClusterCacheStorageConfiguration `pulumi:"cacheStorageConfigurations"`
	// Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
	CapacityConfiguration KxClusterCapacityConfiguration `pulumi:"capacityConfiguration"`
	// Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
	Code *KxClusterCode `pulumi:"code"`
	// List of key-value pairs to make available inside the cluster.
	CommandLineArguments map[string]string `pulumi:"commandLineArguments"`
	// KX database that will be available for querying. Defined below.
	Databases []KxClusterDatabase `pulumi:"databases"`
	// Description of the cluster.
	Description *string `pulumi:"description"`
	// Unique identifier for the KX environment.
	EnvironmentId string `pulumi:"environmentId"`
	// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
	ExecutionRole *string `pulumi:"executionRole"`
	// Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
	InitializationScript *string `pulumi:"initializationScript"`
	// Unique name for the cluster that you want to create.
	Name *string `pulumi:"name"`
	// Version of FinSpace Managed kdb to run.
	ReleaseLabel string `pulumi:"releaseLabel"`
	// Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
	SavedownStorageConfiguration *KxClusterSavedownStorageConfiguration `pulumi:"savedownStorageConfiguration"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Type of KDB database. The following types are available:
	// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
	// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
	// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
	Type string `pulumi:"type"`
	// Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
	//
	// The following arguments are optional:
	VpcConfiguration KxClusterVpcConfiguration `pulumi:"vpcConfiguration"`
}

// The set of arguments for constructing a KxCluster resource.
type KxClusterArgs struct {
	// Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
	AutoScalingConfiguration pulumix.Input[*KxClusterAutoScalingConfigurationArgs]
	// The availability zone identifiers for the requested regions. Required when `azMode` is set to SINGLE.
	AvailabilityZoneId pulumix.Input[*string]
	// The number of availability zones you want to assign per cluster. This can be one of the following:
	// * SINGLE - Assigns one availability zone per cluster.
	// * MULTI - Assigns all the availability zones per cluster.
	AzMode pulumix.Input[string]
	// Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
	CacheStorageConfigurations pulumix.Input[[]*KxClusterCacheStorageConfigurationArgs]
	// Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
	CapacityConfiguration pulumix.Input[*KxClusterCapacityConfigurationArgs]
	// Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
	Code pulumix.Input[*KxClusterCodeArgs]
	// List of key-value pairs to make available inside the cluster.
	CommandLineArguments pulumix.Input[map[string]string]
	// KX database that will be available for querying. Defined below.
	Databases pulumix.Input[[]*KxClusterDatabaseArgs]
	// Description of the cluster.
	Description pulumix.Input[*string]
	// Unique identifier for the KX environment.
	EnvironmentId pulumix.Input[string]
	// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
	ExecutionRole pulumix.Input[*string]
	// Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
	InitializationScript pulumix.Input[*string]
	// Unique name for the cluster that you want to create.
	Name pulumix.Input[*string]
	// Version of FinSpace Managed kdb to run.
	ReleaseLabel pulumix.Input[string]
	// Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
	SavedownStorageConfiguration pulumix.Input[*KxClusterSavedownStorageConfigurationArgs]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Type of KDB database. The following types are available:
	// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
	// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
	// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
	Type pulumix.Input[string]
	// Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
	//
	// The following arguments are optional:
	VpcConfiguration pulumix.Input[*KxClusterVpcConfigurationArgs]
}

func (KxClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kxClusterArgs)(nil)).Elem()
}

type KxClusterOutput struct{ *pulumi.OutputState }

func (KxClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KxCluster)(nil)).Elem()
}

func (o KxClusterOutput) ToKxClusterOutput() KxClusterOutput {
	return o
}

func (o KxClusterOutput) ToKxClusterOutputWithContext(ctx context.Context) KxClusterOutput {
	return o
}

func (o KxClusterOutput) ToOutput(ctx context.Context) pulumix.Output[KxCluster] {
	return pulumix.Output[KxCluster]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) identifier of the KX cluster.
func (o KxClusterOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
func (o KxClusterOutput) AutoScalingConfiguration() pulumix.GPtrOutput[KxClusterAutoScalingConfiguration, KxClusterAutoScalingConfigurationOutput] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.GPtrOutput[KxClusterAutoScalingConfiguration, KxClusterAutoScalingConfigurationOutput] {
		return v.AutoScalingConfiguration
	})
	unwrapped := pulumix.Flatten[*KxClusterAutoScalingConfiguration, pulumix.GPtrOutput[KxClusterAutoScalingConfiguration, KxClusterAutoScalingConfigurationOutput]](value)
	return pulumix.GPtrOutput[KxClusterAutoScalingConfiguration, KxClusterAutoScalingConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The availability zone identifiers for the requested regions. Required when `azMode` is set to SINGLE.
func (o KxClusterOutput) AvailabilityZoneId() pulumix.Output[*string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.Output[*string] { return v.AvailabilityZoneId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The number of availability zones you want to assign per cluster. This can be one of the following:
// * SINGLE - Assigns one availability zone per cluster.
// * MULTI - Assigns all the availability zones per cluster.
func (o KxClusterOutput) AzMode() pulumix.Output[string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.Output[string] { return v.AzMode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
func (o KxClusterOutput) CacheStorageConfigurations() pulumix.GArrayOutput[KxClusterCacheStorageConfiguration, KxClusterCacheStorageConfigurationOutput] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.GArrayOutput[KxClusterCacheStorageConfiguration, KxClusterCacheStorageConfigurationOutput] {
		return v.CacheStorageConfigurations
	})
	unwrapped := pulumix.Flatten[[]KxClusterCacheStorageConfiguration, pulumix.GArrayOutput[KxClusterCacheStorageConfiguration, KxClusterCacheStorageConfigurationOutput]](value)
	return pulumix.GArrayOutput[KxClusterCacheStorageConfiguration, KxClusterCacheStorageConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
func (o KxClusterOutput) CapacityConfiguration() pulumix.GPtrOutput[KxClusterCapacityConfiguration, KxClusterCapacityConfigurationOutput] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.GPtrOutput[KxClusterCapacityConfiguration, KxClusterCapacityConfigurationOutput] {
		return v.CapacityConfiguration
	})
	unwrapped := pulumix.Flatten[*KxClusterCapacityConfiguration, pulumix.GPtrOutput[KxClusterCapacityConfiguration, KxClusterCapacityConfigurationOutput]](value)
	return pulumix.GPtrOutput[KxClusterCapacityConfiguration, KxClusterCapacityConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
func (o KxClusterOutput) Code() pulumix.GPtrOutput[KxClusterCode, KxClusterCodeOutput] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.GPtrOutput[KxClusterCode, KxClusterCodeOutput] { return v.Code })
	unwrapped := pulumix.Flatten[*KxClusterCode, pulumix.GPtrOutput[KxClusterCode, KxClusterCodeOutput]](value)
	return pulumix.GPtrOutput[KxClusterCode, KxClusterCodeOutput]{OutputState: unwrapped.OutputState}
}

// List of key-value pairs to make available inside the cluster.
func (o KxClusterOutput) CommandLineArguments() pulumix.MapOutput[string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.MapOutput[string] { return v.CommandLineArguments })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Timestamp at which the cluster is created in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
func (o KxClusterOutput) CreatedTimestamp() pulumix.Output[string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.Output[string] { return v.CreatedTimestamp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// KX database that will be available for querying. Defined below.
func (o KxClusterOutput) Databases() pulumix.GArrayOutput[KxClusterDatabase, KxClusterDatabaseOutput] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.GArrayOutput[KxClusterDatabase, KxClusterDatabaseOutput] { return v.Databases })
	unwrapped := pulumix.Flatten[[]KxClusterDatabase, pulumix.GArrayOutput[KxClusterDatabase, KxClusterDatabaseOutput]](value)
	return pulumix.GArrayOutput[KxClusterDatabase, KxClusterDatabaseOutput]{OutputState: unwrapped.OutputState}
}

// Description of the cluster.
func (o KxClusterOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Unique identifier for the KX environment.
func (o KxClusterOutput) EnvironmentId() pulumix.Output[string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.Output[string] { return v.EnvironmentId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
func (o KxClusterOutput) ExecutionRole() pulumix.Output[*string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.Output[*string] { return v.ExecutionRole })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
func (o KxClusterOutput) InitializationScript() pulumix.Output[*string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.Output[*string] { return v.InitializationScript })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Last timestamp at which the cluster was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
func (o KxClusterOutput) LastModifiedTimestamp() pulumix.Output[string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.Output[string] { return v.LastModifiedTimestamp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique name for the cluster that you want to create.
func (o KxClusterOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Version of FinSpace Managed kdb to run.
func (o KxClusterOutput) ReleaseLabel() pulumix.Output[string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.Output[string] { return v.ReleaseLabel })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
func (o KxClusterOutput) SavedownStorageConfiguration() pulumix.GPtrOutput[KxClusterSavedownStorageConfiguration, KxClusterSavedownStorageConfigurationOutput] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.GPtrOutput[KxClusterSavedownStorageConfiguration, KxClusterSavedownStorageConfigurationOutput] {
		return v.SavedownStorageConfiguration
	})
	unwrapped := pulumix.Flatten[*KxClusterSavedownStorageConfiguration, pulumix.GPtrOutput[KxClusterSavedownStorageConfiguration, KxClusterSavedownStorageConfigurationOutput]](value)
	return pulumix.GPtrOutput[KxClusterSavedownStorageConfiguration, KxClusterSavedownStorageConfigurationOutput]{OutputState: unwrapped.OutputState}
}

func (o KxClusterOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o KxClusterOutput) StatusReason() pulumix.Output[string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.Output[string] { return v.StatusReason })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o KxClusterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o KxClusterOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Type of KDB database. The following types are available:
// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
func (o KxClusterOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
//
// The following arguments are optional:
func (o KxClusterOutput) VpcConfiguration() pulumix.GPtrOutput[KxClusterVpcConfiguration, KxClusterVpcConfigurationOutput] {
	value := pulumix.Apply[KxCluster](o, func(v KxCluster) pulumix.GPtrOutput[KxClusterVpcConfiguration, KxClusterVpcConfigurationOutput] {
		return v.VpcConfiguration
	})
	unwrapped := pulumix.Flatten[*KxClusterVpcConfiguration, pulumix.GPtrOutput[KxClusterVpcConfiguration, KxClusterVpcConfigurationOutput]](value)
	return pulumix.GPtrOutput[KxClusterVpcConfiguration, KxClusterVpcConfigurationOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(KxClusterOutput{})
}
