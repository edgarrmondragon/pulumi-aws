// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a MemoryDB Subnet Group.
//
// More information about subnet groups can be found in the [MemoryDB User Guide](https://docs.aws.amazon.com/memorydb/latest/devguide/subnetgroups.html).
type SubnetGroup struct {
	pulumi.CustomResourceState

	// The ARN of the subnet group.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Description for the subnet group.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Name of the subnet group. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[string] `pulumi:"namePrefix"`
	// Set of VPC Subnet ID-s for the subnet group. At least one subnet must be provided.
	//
	// The following arguments are optional:
	SubnetIds pulumix.ArrayOutput[string] `pulumi:"subnetIds"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The VPC in which the subnet group exists.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewSubnetGroup registers a new resource with the given unique name, arguments, and options.
func NewSubnetGroup(ctx *pulumi.Context,
	name string, args *SubnetGroupArgs, opts ...pulumi.ResourceOption) (*SubnetGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubnetGroup
	err := ctx.RegisterResource("aws:memorydb/subnetGroup:SubnetGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnetGroup gets an existing SubnetGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetGroupState, opts ...pulumi.ResourceOption) (*SubnetGroup, error) {
	var resource SubnetGroup
	err := ctx.ReadResource("aws:memorydb/subnetGroup:SubnetGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubnetGroup resources.
type subnetGroupState struct {
	// The ARN of the subnet group.
	Arn *string `pulumi:"arn"`
	// Description for the subnet group.
	Description *string `pulumi:"description"`
	// Name of the subnet group. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Set of VPC Subnet ID-s for the subnet group. At least one subnet must be provided.
	//
	// The following arguments are optional:
	SubnetIds []string `pulumi:"subnetIds"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The VPC in which the subnet group exists.
	VpcId *string `pulumi:"vpcId"`
}

type SubnetGroupState struct {
	// The ARN of the subnet group.
	Arn pulumix.Input[*string]
	// Description for the subnet group.
	Description pulumix.Input[*string]
	// Name of the subnet group. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// Set of VPC Subnet ID-s for the subnet group. At least one subnet must be provided.
	//
	// The following arguments are optional:
	SubnetIds pulumix.Input[[]string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The VPC in which the subnet group exists.
	VpcId pulumix.Input[*string]
}

func (SubnetGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetGroupState)(nil)).Elem()
}

type subnetGroupArgs struct {
	// Description for the subnet group.
	Description *string `pulumi:"description"`
	// Name of the subnet group. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Set of VPC Subnet ID-s for the subnet group. At least one subnet must be provided.
	//
	// The following arguments are optional:
	SubnetIds []string `pulumi:"subnetIds"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SubnetGroup resource.
type SubnetGroupArgs struct {
	// Description for the subnet group.
	Description pulumix.Input[*string]
	// Name of the subnet group. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// Set of VPC Subnet ID-s for the subnet group. At least one subnet must be provided.
	//
	// The following arguments are optional:
	SubnetIds pulumix.Input[[]string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (SubnetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetGroupArgs)(nil)).Elem()
}

type SubnetGroupOutput struct{ *pulumi.OutputState }

func (SubnetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetGroup)(nil)).Elem()
}

func (o SubnetGroupOutput) ToSubnetGroupOutput() SubnetGroupOutput {
	return o
}

func (o SubnetGroupOutput) ToSubnetGroupOutputWithContext(ctx context.Context) SubnetGroupOutput {
	return o
}

func (o SubnetGroupOutput) ToOutput(ctx context.Context) pulumix.Output[SubnetGroup] {
	return pulumix.Output[SubnetGroup]{
		OutputState: o.OutputState,
	}
}

// The ARN of the subnet group.
func (o SubnetGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[SubnetGroup](o, func(v SubnetGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description for the subnet group.
func (o SubnetGroupOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[SubnetGroup](o, func(v SubnetGroup) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the subnet group. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o SubnetGroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[SubnetGroup](o, func(v SubnetGroup) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o SubnetGroupOutput) NamePrefix() pulumix.Output[string] {
	value := pulumix.Apply[SubnetGroup](o, func(v SubnetGroup) pulumix.Output[string] { return v.NamePrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set of VPC Subnet ID-s for the subnet group. At least one subnet must be provided.
//
// The following arguments are optional:
func (o SubnetGroupOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SubnetGroup](o, func(v SubnetGroup) pulumix.ArrayOutput[string] { return v.SubnetIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SubnetGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[SubnetGroup](o, func(v SubnetGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SubnetGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[SubnetGroup](o, func(v SubnetGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The VPC in which the subnet group exists.
func (o SubnetGroupOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[SubnetGroup](o, func(v SubnetGroup) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SubnetGroupOutput{})
}
