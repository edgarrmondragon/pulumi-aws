// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataexchange

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage AWS Data Exchange Revisions.
type Revision struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name of this data set.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// An optional comment about the revision.
	Comment pulumix.Output[*string] `pulumi:"comment"`
	// The dataset id.
	DataSetId pulumix.Output[string] `pulumi:"dataSetId"`
	// The Id of the revision.
	RevisionId pulumix.Output[string] `pulumi:"revisionId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewRevision registers a new resource with the given unique name, arguments, and options.
func NewRevision(ctx *pulumi.Context,
	name string, args *RevisionArgs, opts ...pulumi.ResourceOption) (*Revision, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSetId == nil {
		return nil, errors.New("invalid value for required argument 'DataSetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Revision
	err := ctx.RegisterResource("aws:dataexchange/revision:Revision", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRevision gets an existing Revision resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRevision(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RevisionState, opts ...pulumi.ResourceOption) (*Revision, error) {
	var resource Revision
	err := ctx.ReadResource("aws:dataexchange/revision:Revision", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Revision resources.
type revisionState struct {
	// The Amazon Resource Name of this data set.
	Arn *string `pulumi:"arn"`
	// An optional comment about the revision.
	Comment *string `pulumi:"comment"`
	// The dataset id.
	DataSetId *string `pulumi:"dataSetId"`
	// The Id of the revision.
	RevisionId *string `pulumi:"revisionId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type RevisionState struct {
	// The Amazon Resource Name of this data set.
	Arn pulumix.Input[*string]
	// An optional comment about the revision.
	Comment pulumix.Input[*string]
	// The dataset id.
	DataSetId pulumix.Input[*string]
	// The Id of the revision.
	RevisionId pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (RevisionState) ElementType() reflect.Type {
	return reflect.TypeOf((*revisionState)(nil)).Elem()
}

type revisionArgs struct {
	// An optional comment about the revision.
	Comment *string `pulumi:"comment"`
	// The dataset id.
	DataSetId string `pulumi:"dataSetId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Revision resource.
type RevisionArgs struct {
	// An optional comment about the revision.
	Comment pulumix.Input[*string]
	// The dataset id.
	DataSetId pulumix.Input[string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (RevisionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*revisionArgs)(nil)).Elem()
}

type RevisionOutput struct{ *pulumi.OutputState }

func (RevisionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Revision)(nil)).Elem()
}

func (o RevisionOutput) ToRevisionOutput() RevisionOutput {
	return o
}

func (o RevisionOutput) ToRevisionOutputWithContext(ctx context.Context) RevisionOutput {
	return o
}

func (o RevisionOutput) ToOutput(ctx context.Context) pulumix.Output[Revision] {
	return pulumix.Output[Revision]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name of this data set.
func (o RevisionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Revision](o, func(v Revision) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An optional comment about the revision.
func (o RevisionOutput) Comment() pulumix.Output[*string] {
	value := pulumix.Apply[Revision](o, func(v Revision) pulumix.Output[*string] { return v.Comment })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The dataset id.
func (o RevisionOutput) DataSetId() pulumix.Output[string] {
	value := pulumix.Apply[Revision](o, func(v Revision) pulumix.Output[string] { return v.DataSetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Id of the revision.
func (o RevisionOutput) RevisionId() pulumix.Output[string] {
	value := pulumix.Apply[Revision](o, func(v Revision) pulumix.Output[string] { return v.RevisionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RevisionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Revision](o, func(v Revision) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RevisionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Revision](o, func(v Revision) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(RevisionOutput{})
}
