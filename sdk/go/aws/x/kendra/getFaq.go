// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Kendra Faq.
func LookupFaq(ctx *pulumi.Context, args *LookupFaqArgs, opts ...pulumi.InvokeOption) (*LookupFaqResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFaqResult
	err := ctx.Invoke("aws:kendra/getFaq:getFaq", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFaq.
type LookupFaqArgs struct {
	// Identifier of the FAQ.
	FaqId string `pulumi:"faqId"`
	// Identifier of the index that contains the FAQ.
	IndexId string `pulumi:"indexId"`
	// Metadata that helps organize the FAQs you create.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getFaq.
type LookupFaqResult struct {
	// ARN of the FAQ.
	Arn string `pulumi:"arn"`
	// Unix datetime that the faq was created.
	CreatedAt string `pulumi:"createdAt"`
	// Description of the FAQ.
	Description string `pulumi:"description"`
	// When the `status` field value is `FAILED`, this contains a message that explains why.
	ErrorMessage string `pulumi:"errorMessage"`
	FaqId        string `pulumi:"faqId"`
	// File format used by the input files for the FAQ. Valid Values are `CSV`, `CSV_WITH_HEADER`, `JSON`.
	FileFormat string `pulumi:"fileFormat"`
	// The provider-assigned unique ID for this managed resource.
	Id      string `pulumi:"id"`
	IndexId string `pulumi:"indexId"`
	// Code for a language. This shows a supported language for the FAQ document. For more information on supported languages, including their codes, see [Adding documents in languages other than English](https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html).
	LanguageCode string `pulumi:"languageCode"`
	// Name of the FAQ.
	Name string `pulumi:"name"`
	// ARN of a role with permission to access the S3 bucket that contains the FAQs. For more information, see [IAM Roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
	RoleArn string `pulumi:"roleArn"`
	// S3 location of the FAQ input data. Detailed below.
	S3Paths []GetFaqS3Path `pulumi:"s3Paths"`
	// Status of the FAQ. It is ready to use when the status is ACTIVE.
	Status string `pulumi:"status"`
	// Metadata that helps organize the FAQs you create.
	Tags map[string]string `pulumi:"tags"`
	// Date and time that the FAQ was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupFaqOutput(ctx *pulumi.Context, args LookupFaqOutputArgs, opts ...pulumi.InvokeOption) LookupFaqResultOutput {
	outputResult := pulumix.ApplyErr[*LookupFaqArgs](args.ToOutput(), func(plainArgs *LookupFaqArgs) (*LookupFaqResult, error) {
		return LookupFaq(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupFaqResultOutput, *LookupFaqResult](outputResult)
}

// A collection of arguments for invoking getFaq.
type LookupFaqOutputArgs struct {
	// Identifier of the FAQ.
	FaqId pulumix.Input[string] `pulumi:"faqId"`
	// Identifier of the index that contains the FAQ.
	IndexId pulumix.Input[string] `pulumi:"indexId"`
	// Metadata that helps organize the FAQs you create.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupFaqOutputArgs) ToOutput() pulumix.Output[*LookupFaqArgs] {
	allArgs := pulumix.All(
		args.FaqId.ToOutput(context.Background()).AsAny(),
		args.IndexId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupFaqArgs {
		return &LookupFaqArgs{
			FaqId:   resolvedArgs[0].(string),
			IndexId: resolvedArgs[1].(string),
			Tags:    resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupFaqResultOutput struct{ *pulumi.OutputState }

func (LookupFaqResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFaqResult)(nil)).Elem()
}

func (o LookupFaqResultOutput) ToOutput(context.Context) pulumix.Output[*LookupFaqResult] {
	return pulumix.Output[*LookupFaqResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupFaqResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupFaqResult](o, func(v *LookupFaqResult) string { return v.Arn })
}

func (o LookupFaqResultOutput) CreatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupFaqResult](o, func(v *LookupFaqResult) string { return v.CreatedAt })
}

func (o LookupFaqResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupFaqResult](o, func(v *LookupFaqResult) string { return v.Description })
}

func (o LookupFaqResultOutput) ErrorMessage() pulumix.Output[string] {
	return pulumix.Apply[*LookupFaqResult](o, func(v *LookupFaqResult) string { return v.ErrorMessage })
}

func (o LookupFaqResultOutput) FaqId() pulumix.Output[string] {
	return pulumix.Apply[*LookupFaqResult](o, func(v *LookupFaqResult) string { return v.FaqId })
}

func (o LookupFaqResultOutput) FileFormat() pulumix.Output[string] {
	return pulumix.Apply[*LookupFaqResult](o, func(v *LookupFaqResult) string { return v.FileFormat })
}

func (o LookupFaqResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupFaqResult](o, func(v *LookupFaqResult) string { return v.Id })
}

func (o LookupFaqResultOutput) IndexId() pulumix.Output[string] {
	return pulumix.Apply[*LookupFaqResult](o, func(v *LookupFaqResult) string { return v.IndexId })
}

func (o LookupFaqResultOutput) LanguageCode() pulumix.Output[string] {
	return pulumix.Apply[*LookupFaqResult](o, func(v *LookupFaqResult) string { return v.LanguageCode })
}

func (o LookupFaqResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupFaqResult](o, func(v *LookupFaqResult) string { return v.Name })
}

func (o LookupFaqResultOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupFaqResult](o, func(v *LookupFaqResult) string { return v.RoleArn })
}

func (o LookupFaqResultOutput) S3Paths() pulumix.GArrayOutput[GetFaqS3Path, GetFaqS3PathOutput] {
	value := pulumix.Apply[*LookupFaqResult](o, func(v *LookupFaqResult) []GetFaqS3Path { return v.S3Paths })
	return pulumix.GArrayOutput[GetFaqS3Path, GetFaqS3PathOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupFaqResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupFaqResult](o, func(v *LookupFaqResult) string { return v.Status })
}

func (o LookupFaqResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupFaqResult](o, func(v *LookupFaqResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupFaqResultOutput) UpdatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupFaqResult](o, func(v *LookupFaqResult) string { return v.UpdatedAt })
}
