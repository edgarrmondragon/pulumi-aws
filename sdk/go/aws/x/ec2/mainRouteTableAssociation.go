// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource for managing the main routing table of a VPC.
//
// > **NOTE:** **Do not** use both `ec2.DefaultRouteTable` to manage a default route table **and** `ec2.MainRouteTableAssociation` with the same VPC due to possible route conflicts. See ec2.DefaultRouteTable documentation for more details.
// For more information, see the Amazon VPC User Guide on [Route Tables](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html). For information about managing normal route tables in the provider, see `ec2.RouteTable`.
type MainRouteTableAssociation struct {
	pulumi.CustomResourceState

	// Used internally, see **Notes** below
	OriginalRouteTableId pulumix.Output[string] `pulumi:"originalRouteTableId"`
	// The ID of the Route Table to set as the new
	// main route table for the target VPC
	RouteTableId pulumix.Output[string] `pulumi:"routeTableId"`
	// The ID of the VPC whose main route table should be set
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewMainRouteTableAssociation registers a new resource with the given unique name, arguments, and options.
func NewMainRouteTableAssociation(ctx *pulumi.Context,
	name string, args *MainRouteTableAssociationArgs, opts ...pulumi.ResourceOption) (*MainRouteTableAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MainRouteTableAssociation
	err := ctx.RegisterResource("aws:ec2/mainRouteTableAssociation:MainRouteTableAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMainRouteTableAssociation gets an existing MainRouteTableAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMainRouteTableAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MainRouteTableAssociationState, opts ...pulumi.ResourceOption) (*MainRouteTableAssociation, error) {
	var resource MainRouteTableAssociation
	err := ctx.ReadResource("aws:ec2/mainRouteTableAssociation:MainRouteTableAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MainRouteTableAssociation resources.
type mainRouteTableAssociationState struct {
	// Used internally, see **Notes** below
	OriginalRouteTableId *string `pulumi:"originalRouteTableId"`
	// The ID of the Route Table to set as the new
	// main route table for the target VPC
	RouteTableId *string `pulumi:"routeTableId"`
	// The ID of the VPC whose main route table should be set
	VpcId *string `pulumi:"vpcId"`
}

type MainRouteTableAssociationState struct {
	// Used internally, see **Notes** below
	OriginalRouteTableId pulumix.Input[*string]
	// The ID of the Route Table to set as the new
	// main route table for the target VPC
	RouteTableId pulumix.Input[*string]
	// The ID of the VPC whose main route table should be set
	VpcId pulumix.Input[*string]
}

func (MainRouteTableAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*mainRouteTableAssociationState)(nil)).Elem()
}

type mainRouteTableAssociationArgs struct {
	// The ID of the Route Table to set as the new
	// main route table for the target VPC
	RouteTableId string `pulumi:"routeTableId"`
	// The ID of the VPC whose main route table should be set
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a MainRouteTableAssociation resource.
type MainRouteTableAssociationArgs struct {
	// The ID of the Route Table to set as the new
	// main route table for the target VPC
	RouteTableId pulumix.Input[string]
	// The ID of the VPC whose main route table should be set
	VpcId pulumix.Input[string]
}

func (MainRouteTableAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mainRouteTableAssociationArgs)(nil)).Elem()
}

type MainRouteTableAssociationOutput struct{ *pulumi.OutputState }

func (MainRouteTableAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MainRouteTableAssociation)(nil)).Elem()
}

func (o MainRouteTableAssociationOutput) ToMainRouteTableAssociationOutput() MainRouteTableAssociationOutput {
	return o
}

func (o MainRouteTableAssociationOutput) ToMainRouteTableAssociationOutputWithContext(ctx context.Context) MainRouteTableAssociationOutput {
	return o
}

func (o MainRouteTableAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[MainRouteTableAssociation] {
	return pulumix.Output[MainRouteTableAssociation]{
		OutputState: o.OutputState,
	}
}

// Used internally, see **Notes** below
func (o MainRouteTableAssociationOutput) OriginalRouteTableId() pulumix.Output[string] {
	value := pulumix.Apply[MainRouteTableAssociation](o, func(v MainRouteTableAssociation) pulumix.Output[string] { return v.OriginalRouteTableId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the Route Table to set as the new
// main route table for the target VPC
func (o MainRouteTableAssociationOutput) RouteTableId() pulumix.Output[string] {
	value := pulumix.Apply[MainRouteTableAssociation](o, func(v MainRouteTableAssociation) pulumix.Output[string] { return v.RouteTableId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the VPC whose main route table should be set
func (o MainRouteTableAssociationOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[MainRouteTableAssociation](o, func(v MainRouteTableAssociation) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MainRouteTableAssociationOutput{})
}
