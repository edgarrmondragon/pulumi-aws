// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appflow

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ConnectorProfileConnectorProfileConfig struct {
	// The connector-specific credentials required by each connector. See Connector Profile Credentials for more details.
	ConnectorProfileCredentials ConnectorProfileConnectorProfileConfigConnectorProfileCredentials `pulumi:"connectorProfileCredentials"`
	// The connector-specific properties of the profile configuration. See Connector Profile Properties for more details.
	ConnectorProfileProperties ConnectorProfileConnectorProfileConfigConnectorProfileProperties `pulumi:"connectorProfileProperties"`
}

type ConnectorProfileConnectorProfileConfigArgs struct {
	// The connector-specific credentials required by each connector. See Connector Profile Credentials for more details.
	ConnectorProfileCredentials pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsArgs] `pulumi:"connectorProfileCredentials"`
	// The connector-specific properties of the profile configuration. See Connector Profile Properties for more details.
	ConnectorProfileProperties pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesArgs] `pulumi:"connectorProfileProperties"`
}

func (ConnectorProfileConnectorProfileConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfig)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigArgs) ToConnectorProfileConnectorProfileConfigOutput() ConnectorProfileConnectorProfileConfigOutput {
	return i.ToConnectorProfileConnectorProfileConfigOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigArgs) ToConnectorProfileConnectorProfileConfigOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigOutput)
}

func (i *ConnectorProfileConnectorProfileConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfig)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigOutput) ToConnectorProfileConnectorProfileConfigOutput() ConnectorProfileConnectorProfileConfigOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigOutput) ToConnectorProfileConnectorProfileConfigOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfig] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfig]{
		OutputState: o.OutputState,
	}
}

// The connector-specific credentials required by each connector. See Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigOutput) ConnectorProfileCredentials() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfig](o, func(v ConnectorProfileConnectorProfileConfig) ConnectorProfileConnectorProfileConfigConnectorProfileCredentials {
		return v.ConnectorProfileCredentials
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput]{OutputState: value.OutputState}
}

// The connector-specific properties of the profile configuration. See Connector Profile Properties for more details.
func (o ConnectorProfileConnectorProfileConfigOutput) ConnectorProfileProperties() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileProperties, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfig](o, func(v ConnectorProfileConnectorProfileConfig) ConnectorProfileConnectorProfileConfigConnectorProfileProperties {
		return v.ConnectorProfileProperties
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileProperties, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput]{OutputState: value.OutputState}
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentials struct {
	// The connector-specific credentials required when using Amplitude. See Amplitude Connector Profile Credentials for more details.
	Amplitude *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitude `pulumi:"amplitude"`
	// The connector-specific profile credentials required when using the custom connector. See Custom Connector Profile Credentials for more details.
	CustomConnector *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector `pulumi:"customConnector"`
	// Connector-specific credentials required when using Datadog. See Datadog Connector Profile Credentials for more details.
	Datadog *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadog `pulumi:"datadog"`
	// The connector-specific credentials required when using Dynatrace. See Dynatrace Connector Profile Credentials for more details.
	Dynatrace *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatrace `pulumi:"dynatrace"`
	// The connector-specific credentials required when using Google Analytics. See Google Analytics Connector Profile Credentials for more details.
	GoogleAnalytics *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics `pulumi:"googleAnalytics"`
	// The connector-specific credentials required when using Amazon Honeycode. See Honeycode Connector Profile Credentials for more details.
	Honeycode *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycode `pulumi:"honeycode"`
	// The connector-specific credentials required when using Infor Nexus. See Infor Nexus Connector Profile Credentials for more details.
	InforNexus *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus `pulumi:"inforNexus"`
	// Connector-specific credentials required when using Marketo. See Marketo Connector Profile Credentials for more details.
	Marketo *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo `pulumi:"marketo"`
	// Connector-specific credentials required when using Amazon Redshift. See Redshift Connector Profile Credentials for more details.
	Redshift *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshift `pulumi:"redshift"`
	// The connector-specific credentials required when using Salesforce. See Salesforce Connector Profile Credentials for more details.
	Salesforce *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce `pulumi:"salesforce"`
	// The connector-specific credentials required when using SAPOData. See SAPOData Connector Profile Credentials for more details.
	SapoData *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoData `pulumi:"sapoData"`
	// The connector-specific credentials required when using ServiceNow. See ServiceNow Connector Profile Credentials for more details.
	ServiceNow *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNow `pulumi:"serviceNow"`
	// Connector-specific credentials required when using Singular. See Singular Connector Profile Credentials for more details.
	Singular *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingular `pulumi:"singular"`
	// Connector-specific credentials required when using Slack. See Slack Connector Profile Credentials for more details.
	Slack *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack `pulumi:"slack"`
	// The connector-specific credentials required when using Snowflake. See Snowflake Connector Profile Credentials for more details.
	Snowflake *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflake `pulumi:"snowflake"`
	// The connector-specific credentials required when using Trend Micro. See Trend Micro Connector Profile Credentials for more details.
	Trendmicro *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicro `pulumi:"trendmicro"`
	// Connector-specific credentials required when using Veeva. See Veeva Connector Profile Credentials for more details.
	Veeva *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeeva `pulumi:"veeva"`
	// Connector-specific credentials required when using Zendesk. See Zendesk Connector Profile Credentials for more details.
	Zendesk *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk `pulumi:"zendesk"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsArgs struct {
	// The connector-specific credentials required when using Amplitude. See Amplitude Connector Profile Credentials for more details.
	Amplitude pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeArgs] `pulumi:"amplitude"`
	// The connector-specific profile credentials required when using the custom connector. See Custom Connector Profile Credentials for more details.
	CustomConnector pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorArgs] `pulumi:"customConnector"`
	// Connector-specific credentials required when using Datadog. See Datadog Connector Profile Credentials for more details.
	Datadog pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogArgs] `pulumi:"datadog"`
	// The connector-specific credentials required when using Dynatrace. See Dynatrace Connector Profile Credentials for more details.
	Dynatrace pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceArgs] `pulumi:"dynatrace"`
	// The connector-specific credentials required when using Google Analytics. See Google Analytics Connector Profile Credentials for more details.
	GoogleAnalytics pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsArgs] `pulumi:"googleAnalytics"`
	// The connector-specific credentials required when using Amazon Honeycode. See Honeycode Connector Profile Credentials for more details.
	Honeycode pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeArgs] `pulumi:"honeycode"`
	// The connector-specific credentials required when using Infor Nexus. See Infor Nexus Connector Profile Credentials for more details.
	InforNexus pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusArgs] `pulumi:"inforNexus"`
	// Connector-specific credentials required when using Marketo. See Marketo Connector Profile Credentials for more details.
	Marketo pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoArgs] `pulumi:"marketo"`
	// Connector-specific credentials required when using Amazon Redshift. See Redshift Connector Profile Credentials for more details.
	Redshift pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftArgs] `pulumi:"redshift"`
	// The connector-specific credentials required when using Salesforce. See Salesforce Connector Profile Credentials for more details.
	Salesforce pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceArgs] `pulumi:"salesforce"`
	// The connector-specific credentials required when using SAPOData. See SAPOData Connector Profile Credentials for more details.
	SapoData pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataArgs] `pulumi:"sapoData"`
	// The connector-specific credentials required when using ServiceNow. See ServiceNow Connector Profile Credentials for more details.
	ServiceNow pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowArgs] `pulumi:"serviceNow"`
	// Connector-specific credentials required when using Singular. See Singular Connector Profile Credentials for more details.
	Singular pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularArgs] `pulumi:"singular"`
	// Connector-specific credentials required when using Slack. See Slack Connector Profile Credentials for more details.
	Slack pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackArgs] `pulumi:"slack"`
	// The connector-specific credentials required when using Snowflake. See Snowflake Connector Profile Credentials for more details.
	Snowflake pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeArgs] `pulumi:"snowflake"`
	// The connector-specific credentials required when using Trend Micro. See Trend Micro Connector Profile Credentials for more details.
	Trendmicro pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroArgs] `pulumi:"trendmicro"`
	// Connector-specific credentials required when using Veeva. See Veeva Connector Profile Credentials for more details.
	Veeva pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaArgs] `pulumi:"veeva"`
	// Connector-specific credentials required when using Zendesk. See Zendesk Connector Profile Credentials for more details.
	Zendesk pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskArgs] `pulumi:"zendesk"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentials)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentials)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials]{
		OutputState: o.OutputState,
	}
}

// The connector-specific credentials required when using Amplitude. See Amplitude Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) Amplitude() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitude, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitude {
		return v.Amplitude
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitude, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput]{OutputState: value.OutputState}
}

// The connector-specific profile credentials required when using the custom connector. See Custom Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) CustomConnector() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector {
		return v.CustomConnector
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput]{OutputState: value.OutputState}
}

// Connector-specific credentials required when using Datadog. See Datadog Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) Datadog() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadog, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadog {
		return v.Datadog
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadog, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput]{OutputState: value.OutputState}
}

// The connector-specific credentials required when using Dynatrace. See Dynatrace Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) Dynatrace() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatrace, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatrace {
		return v.Dynatrace
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatrace, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput]{OutputState: value.OutputState}
}

// The connector-specific credentials required when using Google Analytics. See Google Analytics Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) GoogleAnalytics() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics {
		return v.GoogleAnalytics
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput]{OutputState: value.OutputState}
}

// The connector-specific credentials required when using Amazon Honeycode. See Honeycode Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) Honeycode() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycode, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycode {
		return v.Honeycode
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycode, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput]{OutputState: value.OutputState}
}

// The connector-specific credentials required when using Infor Nexus. See Infor Nexus Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) InforNexus() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus {
		return v.InforNexus
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput]{OutputState: value.OutputState}
}

// Connector-specific credentials required when using Marketo. See Marketo Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) Marketo() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo {
		return v.Marketo
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput]{OutputState: value.OutputState}
}

// Connector-specific credentials required when using Amazon Redshift. See Redshift Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) Redshift() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshift, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshift {
		return v.Redshift
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshift, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput]{OutputState: value.OutputState}
}

// The connector-specific credentials required when using Salesforce. See Salesforce Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) Salesforce() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce {
		return v.Salesforce
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput]{OutputState: value.OutputState}
}

// The connector-specific credentials required when using SAPOData. See SAPOData Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) SapoData() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoData, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoData {
		return v.SapoData
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoData, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput]{OutputState: value.OutputState}
}

// The connector-specific credentials required when using ServiceNow. See ServiceNow Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) ServiceNow() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNow, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNow {
		return v.ServiceNow
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNow, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput]{OutputState: value.OutputState}
}

// Connector-specific credentials required when using Singular. See Singular Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) Singular() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingular, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingular {
		return v.Singular
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingular, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput]{OutputState: value.OutputState}
}

// Connector-specific credentials required when using Slack. See Slack Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) Slack() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack {
		return v.Slack
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput]{OutputState: value.OutputState}
}

// The connector-specific credentials required when using Snowflake. See Snowflake Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) Snowflake() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflake, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflake {
		return v.Snowflake
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflake, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput]{OutputState: value.OutputState}
}

// The connector-specific credentials required when using Trend Micro. See Trend Micro Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) Trendmicro() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicro, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicro {
		return v.Trendmicro
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicro, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput]{OutputState: value.OutputState}
}

// Connector-specific credentials required when using Veeva. See Veeva Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) Veeva() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeeva, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeeva {
		return v.Veeva
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeeva, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput]{OutputState: value.OutputState}
}

// Connector-specific credentials required when using Zendesk. See Zendesk Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput) Zendesk() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk {
		return v.Zendesk
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput]{OutputState: value.OutputState}
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitude struct {
	// Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
	ApiKey string `pulumi:"apiKey"`
	// The Secret Access Key portion of the credentials.
	SecretKey string `pulumi:"secretKey"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeArgs struct {
	// Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
	ApiKey pulumix.Input[string] `pulumi:"apiKey"`
	// The Secret Access Key portion of the credentials.
	SecretKey pulumix.Input[string] `pulumi:"secretKey"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitude)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitude)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitude] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitude]{
		OutputState: o.OutputState,
	}
}

// Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput) ApiKey() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitude](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitude) string {
		return v.ApiKey
	})
}

// The Secret Access Key portion of the credentials.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput) SecretKey() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitude](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitude) string {
		return v.SecretKey
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector struct {
	// Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
	ApiKey *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKey `pulumi:"apiKey"`
	// The authentication type that the custom connector uses for authenticating while creating a connector profile. One of: `APIKEY`, `BASIC`, `CUSTOM`, `OAUTH2`.
	AuthenticationType string `pulumi:"authenticationType"`
	// Basic credentials that are required for the authentication of the user.
	Basic *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasic `pulumi:"basic"`
	// If the connector uses the custom authentication mechanism, this holds the required credentials.
	Custom *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustom `pulumi:"custom"`
	// OAuth 2.0 credentials required for the authentication of the user.
	Oauth2 *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2 `pulumi:"oauth2"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorArgs struct {
	// Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
	ApiKey pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyArgs] `pulumi:"apiKey"`
	// The authentication type that the custom connector uses for authenticating while creating a connector profile. One of: `APIKEY`, `BASIC`, `CUSTOM`, `OAUTH2`.
	AuthenticationType pulumix.Input[string] `pulumi:"authenticationType"`
	// Basic credentials that are required for the authentication of the user.
	Basic pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicArgs] `pulumi:"basic"`
	// If the connector uses the custom authentication mechanism, this holds the required credentials.
	Custom pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomArgs] `pulumi:"custom"`
	// OAuth 2.0 credentials required for the authentication of the user.
	Oauth2 pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Args] `pulumi:"oauth2"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector]{
		OutputState: o.OutputState,
	}
}

// Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput) ApiKey() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKey, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKey {
		return v.ApiKey
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKey, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput]{OutputState: value.OutputState}
}

// The authentication type that the custom connector uses for authenticating while creating a connector profile. One of: `APIKEY`, `BASIC`, `CUSTOM`, `OAUTH2`.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput) AuthenticationType() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector) string {
		return v.AuthenticationType
	})
}

// Basic credentials that are required for the authentication of the user.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput) Basic() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasic, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasic {
		return v.Basic
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasic, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput]{OutputState: value.OutputState}
}

// If the connector uses the custom authentication mechanism, this holds the required credentials.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput) Custom() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustom, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustom {
		return v.Custom
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustom, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput]{OutputState: value.OutputState}
}

// OAuth 2.0 credentials required for the authentication of the user.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput) Oauth2() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnector) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2 {
		return v.Oauth2
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output]{OutputState: value.OutputState}
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKey struct {
	// Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
	ApiKey string `pulumi:"apiKey"`
	// The API secret key required for API key authentication.
	ApiSecretKey *string `pulumi:"apiSecretKey"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyArgs struct {
	// Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
	ApiKey pulumix.Input[string] `pulumi:"apiKey"`
	// The API secret key required for API key authentication.
	ApiSecretKey pulumix.Input[*string] `pulumi:"apiSecretKey"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKey)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKey)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKey] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKey]{
		OutputState: o.OutputState,
	}
}

// Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput) ApiKey() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKey](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKey) string {
		return v.ApiKey
	})
}

// The API secret key required for API key authentication.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput) ApiSecretKey() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKey](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKey) *string {
		return v.ApiSecretKey
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasic struct {
	// The password to use to connect to a resource.
	Password string `pulumi:"password"`
	// The username to use to connect to a resource.
	Username string `pulumi:"username"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicArgs struct {
	// The password to use to connect to a resource.
	Password pulumix.Input[string] `pulumi:"password"`
	// The username to use to connect to a resource.
	Username pulumix.Input[string] `pulumi:"username"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasic)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasic)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasic] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasic]{
		OutputState: o.OutputState,
	}
}

// The password to use to connect to a resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput) Password() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasic](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasic) string {
		return v.Password
	})
}

// The username to use to connect to a resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasic](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasic) string {
		return v.Username
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustom struct {
	// A map that holds custom authentication credentials.
	CredentialsMap map[string]string `pulumi:"credentialsMap"`
	// The custom authentication type that the connector uses.
	CustomAuthenticationType string `pulumi:"customAuthenticationType"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomArgs struct {
	// A map that holds custom authentication credentials.
	CredentialsMap pulumix.Input[map[string]string] `pulumi:"credentialsMap"`
	// The custom authentication type that the connector uses.
	CustomAuthenticationType pulumix.Input[string] `pulumi:"customAuthenticationType"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustom)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustom)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustom] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustom]{
		OutputState: o.OutputState,
	}
}

// A map that holds custom authentication credentials.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput) CredentialsMap() pulumix.MapOutput[string] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustom](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustom) map[string]string {
		return v.CredentialsMap
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The custom authentication type that the connector uses.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput) CustomAuthenticationType() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustom](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustom) string {
		return v.CustomAuthenticationType
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2 struct {
	// The access token used to access the connector on your behalf.
	AccessToken *string `pulumi:"accessToken"`
	// The identifier for the desired client.
	ClientId *string `pulumi:"clientId"`
	// The client secret used by the OAuth client to authenticate to the authorization server.
	ClientSecret *string `pulumi:"clientSecret"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequest `pulumi:"oauthRequest"`
	// The refresh token used to refresh an expired access token.
	RefreshToken *string `pulumi:"refreshToken"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Args struct {
	// The access token used to access the connector on your behalf.
	AccessToken pulumix.Input[*string] `pulumi:"accessToken"`
	// The identifier for the desired client.
	ClientId pulumix.Input[*string] `pulumi:"clientId"`
	// The client secret used by the OAuth client to authenticate to the authorization server.
	ClientSecret pulumix.Input[*string] `pulumi:"clientSecret"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestArgs] `pulumi:"oauthRequest"`
	// The refresh token used to refresh an expired access token.
	RefreshToken pulumix.Input[*string] `pulumi:"refreshToken"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Args) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Args) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Args) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Args] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2]{
		OutputState: o.OutputState,
	}
}

// The access token used to access the connector on your behalf.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output) AccessToken() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2) *string {
		return v.AccessToken
	})
}

// The identifier for the desired client.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output) ClientId() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2) *string {
		return v.ClientId
	})
}

// The client secret used by the OAuth client to authenticate to the authorization server.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output) ClientSecret() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2) *string {
		return v.ClientSecret
	})
}

// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output) OauthRequest() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequest {
		return v.OauthRequest
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput]{OutputState: value.OutputState}
}

// The refresh token used to refresh an expired access token.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output) RefreshToken() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2) *string {
		return v.RefreshToken
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequest struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode *string `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri *string `pulumi:"redirectUri"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestArgs struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode pulumix.Input[*string] `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri pulumix.Input[*string] `pulumi:"redirectUri"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequest)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequest)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequest] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequest]{
		OutputState: o.OutputState,
	}
}

// The code provided by the connector when it has been authenticated via the connected app.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput) AuthCode() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequest) *string {
		return v.AuthCode
	})
}

// The URL to which the authentication server redirects the browser after authorization has been granted.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput) RedirectUri() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequest) *string {
		return v.RedirectUri
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadog struct {
	// Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
	ApiKey string `pulumi:"apiKey"`
	// Application keys, in conjunction with your API key, give you full access to Datadog’s programmatic API. Application keys are associated with the user account that created them. The application key is used to log all requests made to the API.
	ApplicationKey string `pulumi:"applicationKey"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogArgs struct {
	// Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
	ApiKey pulumix.Input[string] `pulumi:"apiKey"`
	// Application keys, in conjunction with your API key, give you full access to Datadog’s programmatic API. Application keys are associated with the user account that created them. The application key is used to log all requests made to the API.
	ApplicationKey pulumix.Input[string] `pulumi:"applicationKey"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadog)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadog)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadog] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadog]{
		OutputState: o.OutputState,
	}
}

// Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput) ApiKey() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadog](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadog) string {
		return v.ApiKey
	})
}

// Application keys, in conjunction with your API key, give you full access to Datadog’s programmatic API. Application keys are associated with the user account that created them. The application key is used to log all requests made to the API.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput) ApplicationKey() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadog](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadog) string {
		return v.ApplicationKey
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatrace struct {
	// The API tokens used by Dynatrace API to authenticate various API calls.
	ApiToken string `pulumi:"apiToken"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceArgs struct {
	// The API tokens used by Dynatrace API to authenticate various API calls.
	ApiToken pulumix.Input[string] `pulumi:"apiToken"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatrace)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatrace)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatrace] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatrace]{
		OutputState: o.OutputState,
	}
}

// The API tokens used by Dynatrace API to authenticate various API calls.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput) ApiToken() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatrace](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatrace) string {
		return v.ApiToken
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics struct {
	// The access token used to access the connector on your behalf.
	AccessToken *string `pulumi:"accessToken"`
	// The identifier for the desired client.
	ClientId string `pulumi:"clientId"`
	// The client secret used by the OAuth client to authenticate to the authorization server.
	ClientSecret string `pulumi:"clientSecret"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequest `pulumi:"oauthRequest"`
	// The refresh token used to refresh an expired access token.
	RefreshToken *string `pulumi:"refreshToken"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsArgs struct {
	// The access token used to access the connector on your behalf.
	AccessToken pulumix.Input[*string] `pulumi:"accessToken"`
	// The identifier for the desired client.
	ClientId pulumix.Input[string] `pulumi:"clientId"`
	// The client secret used by the OAuth client to authenticate to the authorization server.
	ClientSecret pulumix.Input[string] `pulumi:"clientSecret"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestArgs] `pulumi:"oauthRequest"`
	// The refresh token used to refresh an expired access token.
	RefreshToken pulumix.Input[*string] `pulumi:"refreshToken"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics]{
		OutputState: o.OutputState,
	}
}

// The access token used to access the connector on your behalf.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput) AccessToken() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics) *string {
		return v.AccessToken
	})
}

// The identifier for the desired client.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput) ClientId() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics) string {
		return v.ClientId
	})
}

// The client secret used by the OAuth client to authenticate to the authorization server.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput) ClientSecret() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics) string {
		return v.ClientSecret
	})
}

// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput) OauthRequest() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequest {
		return v.OauthRequest
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput]{OutputState: value.OutputState}
}

// The refresh token used to refresh an expired access token.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput) RefreshToken() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalytics) *string {
		return v.RefreshToken
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequest struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode *string `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri *string `pulumi:"redirectUri"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestArgs struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode pulumix.Input[*string] `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri pulumix.Input[*string] `pulumi:"redirectUri"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequest)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequest)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequest] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequest]{
		OutputState: o.OutputState,
	}
}

// The code provided by the connector when it has been authenticated via the connected app.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput) AuthCode() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequest) *string {
		return v.AuthCode
	})
}

// The URL to which the authentication server redirects the browser after authorization has been granted.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput) RedirectUri() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequest) *string {
		return v.RedirectUri
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycode struct {
	// The access token used to access the connector on your behalf.
	AccessToken *string `pulumi:"accessToken"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequest `pulumi:"oauthRequest"`
	// The refresh token used to refresh an expired access token.
	RefreshToken *string `pulumi:"refreshToken"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeArgs struct {
	// The access token used to access the connector on your behalf.
	AccessToken pulumix.Input[*string] `pulumi:"accessToken"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestArgs] `pulumi:"oauthRequest"`
	// The refresh token used to refresh an expired access token.
	RefreshToken pulumix.Input[*string] `pulumi:"refreshToken"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycode)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycode)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycode] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycode]{
		OutputState: o.OutputState,
	}
}

// The access token used to access the connector on your behalf.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput) AccessToken() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycode](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycode) *string {
		return v.AccessToken
	})
}

// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput) OauthRequest() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycode](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycode) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequest {
		return v.OauthRequest
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput]{OutputState: value.OutputState}
}

// The refresh token used to refresh an expired access token.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput) RefreshToken() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycode](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycode) *string {
		return v.RefreshToken
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequest struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode *string `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri *string `pulumi:"redirectUri"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestArgs struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode pulumix.Input[*string] `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri pulumix.Input[*string] `pulumi:"redirectUri"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequest)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequest)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequest] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequest]{
		OutputState: o.OutputState,
	}
}

// The code provided by the connector when it has been authenticated via the connected app.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput) AuthCode() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequest) *string {
		return v.AuthCode
	})
}

// The URL to which the authentication server redirects the browser after authorization has been granted.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput) RedirectUri() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequest) *string {
		return v.RedirectUri
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus struct {
	// The Access Key portion of the credentials.
	AccessKeyId string `pulumi:"accessKeyId"`
	// Encryption keys used to encrypt data.
	Datakey string `pulumi:"datakey"`
	// The secret key used to sign requests.
	SecretAccessKey string `pulumi:"secretAccessKey"`
	// Identifier for the user.
	UserId string `pulumi:"userId"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusArgs struct {
	// The Access Key portion of the credentials.
	AccessKeyId pulumix.Input[string] `pulumi:"accessKeyId"`
	// Encryption keys used to encrypt data.
	Datakey pulumix.Input[string] `pulumi:"datakey"`
	// The secret key used to sign requests.
	SecretAccessKey pulumix.Input[string] `pulumi:"secretAccessKey"`
	// Identifier for the user.
	UserId pulumix.Input[string] `pulumi:"userId"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus]{
		OutputState: o.OutputState,
	}
}

// The Access Key portion of the credentials.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput) AccessKeyId() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus) string {
		return v.AccessKeyId
	})
}

// Encryption keys used to encrypt data.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput) Datakey() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus) string {
		return v.Datakey
	})
}

// The secret key used to sign requests.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput) SecretAccessKey() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus) string {
		return v.SecretAccessKey
	})
}

// Identifier for the user.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput) UserId() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexus) string {
		return v.UserId
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo struct {
	// The access token used to access the connector on your behalf.
	AccessToken *string `pulumi:"accessToken"`
	// The identifier for the desired client.
	ClientId string `pulumi:"clientId"`
	// The client secret used by the OAuth client to authenticate to the authorization server.
	ClientSecret string `pulumi:"clientSecret"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequest `pulumi:"oauthRequest"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoArgs struct {
	// The access token used to access the connector on your behalf.
	AccessToken pulumix.Input[*string] `pulumi:"accessToken"`
	// The identifier for the desired client.
	ClientId pulumix.Input[string] `pulumi:"clientId"`
	// The client secret used by the OAuth client to authenticate to the authorization server.
	ClientSecret pulumix.Input[string] `pulumi:"clientSecret"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestArgs] `pulumi:"oauthRequest"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo]{
		OutputState: o.OutputState,
	}
}

// The access token used to access the connector on your behalf.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput) AccessToken() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo) *string {
		return v.AccessToken
	})
}

// The identifier for the desired client.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput) ClientId() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo) string {
		return v.ClientId
	})
}

// The client secret used by the OAuth client to authenticate to the authorization server.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput) ClientSecret() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo) string {
		return v.ClientSecret
	})
}

// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput) OauthRequest() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketo) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequest {
		return v.OauthRequest
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput]{OutputState: value.OutputState}
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequest struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode *string `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri *string `pulumi:"redirectUri"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestArgs struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode pulumix.Input[*string] `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri pulumix.Input[*string] `pulumi:"redirectUri"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequest)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequest)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequest] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequest]{
		OutputState: o.OutputState,
	}
}

// The code provided by the connector when it has been authenticated via the connected app.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput) AuthCode() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequest) *string {
		return v.AuthCode
	})
}

// The URL to which the authentication server redirects the browser after authorization has been granted.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput) RedirectUri() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequest) *string {
		return v.RedirectUri
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshift struct {
	// The password to use to connect to a resource.
	Password string `pulumi:"password"`
	// The username to use to connect to a resource.
	Username string `pulumi:"username"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftArgs struct {
	// The password to use to connect to a resource.
	Password pulumix.Input[string] `pulumi:"password"`
	// The username to use to connect to a resource.
	Username pulumix.Input[string] `pulumi:"username"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshift)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshift)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshift] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshift]{
		OutputState: o.OutputState,
	}
}

// The password to use to connect to a resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput) Password() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshift](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshift) string {
		return v.Password
	})
}

// The username to use to connect to a resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshift](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshift) string {
		return v.Username
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce struct {
	// The access token used to access the connector on your behalf.
	AccessToken *string `pulumi:"accessToken"`
	// The secret manager ARN, which contains the client ID and client secret of the connected app.
	ClientCredentialsArn *string `pulumi:"clientCredentialsArn"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest `pulumi:"oauthRequest"`
	// The refresh token used to refresh an expired access token.
	RefreshToken *string `pulumi:"refreshToken"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceArgs struct {
	// The access token used to access the connector on your behalf.
	AccessToken pulumix.Input[*string] `pulumi:"accessToken"`
	// The secret manager ARN, which contains the client ID and client secret of the connected app.
	ClientCredentialsArn pulumix.Input[*string] `pulumi:"clientCredentialsArn"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestArgs] `pulumi:"oauthRequest"`
	// The refresh token used to refresh an expired access token.
	RefreshToken pulumix.Input[*string] `pulumi:"refreshToken"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce]{
		OutputState: o.OutputState,
	}
}

// The access token used to access the connector on your behalf.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput) AccessToken() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce) *string {
		return v.AccessToken
	})
}

// The secret manager ARN, which contains the client ID and client secret of the connected app.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput) ClientCredentialsArn() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce) *string {
		return v.ClientCredentialsArn
	})
}

// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput) OauthRequest() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest {
		return v.OauthRequest
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput]{OutputState: value.OutputState}
}

// The refresh token used to refresh an expired access token.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput) RefreshToken() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce) *string {
		return v.RefreshToken
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode *string `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri *string `pulumi:"redirectUri"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestArgs struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode pulumix.Input[*string] `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri pulumix.Input[*string] `pulumi:"redirectUri"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest]{
		OutputState: o.OutputState,
	}
}

// The code provided by the connector when it has been authenticated via the connected app.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput) AuthCode() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest) *string {
		return v.AuthCode
	})
}

// The URL to which the authentication server redirects the browser after authorization has been granted.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput) RedirectUri() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest) *string {
		return v.RedirectUri
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoData struct {
	// The SAPOData basic authentication credentials.
	BasicAuthCredentials *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentials `pulumi:"basicAuthCredentials"`
	// The SAPOData OAuth type authentication credentials.
	OauthCredentials *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials `pulumi:"oauthCredentials"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataArgs struct {
	// The SAPOData basic authentication credentials.
	BasicAuthCredentials pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsArgs] `pulumi:"basicAuthCredentials"`
	// The SAPOData OAuth type authentication credentials.
	OauthCredentials pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsArgs] `pulumi:"oauthCredentials"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoData)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoData)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoData] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoData]{
		OutputState: o.OutputState,
	}
}

// The SAPOData basic authentication credentials.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput) BasicAuthCredentials() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentials, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoData](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoData) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentials {
		return v.BasicAuthCredentials
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentials, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput]{OutputState: value.OutputState}
}

// The SAPOData OAuth type authentication credentials.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput) OauthCredentials() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoData](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoData) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials {
		return v.OauthCredentials
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput]{OutputState: value.OutputState}
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentials struct {
	// The password to use to connect to a resource.
	Password string `pulumi:"password"`
	// The username to use to connect to a resource.
	Username string `pulumi:"username"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsArgs struct {
	// The password to use to connect to a resource.
	Password pulumix.Input[string] `pulumi:"password"`
	// The username to use to connect to a resource.
	Username pulumix.Input[string] `pulumi:"username"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentials)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentials)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentials] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentials]{
		OutputState: o.OutputState,
	}
}

// The password to use to connect to a resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput) Password() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentials) string {
		return v.Password
	})
}

// The username to use to connect to a resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentials) string {
		return v.Username
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials struct {
	// The access token used to access the connector on your behalf.
	AccessToken *string `pulumi:"accessToken"`
	// The identifier for the desired client.
	ClientId string `pulumi:"clientId"`
	// The client secret used by the OAuth client to authenticate to the authorization server.
	ClientSecret string `pulumi:"clientSecret"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequest `pulumi:"oauthRequest"`
	// The refresh token used to refresh an expired access token.
	RefreshToken *string `pulumi:"refreshToken"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsArgs struct {
	// The access token used to access the connector on your behalf.
	AccessToken pulumix.Input[*string] `pulumi:"accessToken"`
	// The identifier for the desired client.
	ClientId pulumix.Input[string] `pulumi:"clientId"`
	// The client secret used by the OAuth client to authenticate to the authorization server.
	ClientSecret pulumix.Input[string] `pulumi:"clientSecret"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestArgs] `pulumi:"oauthRequest"`
	// The refresh token used to refresh an expired access token.
	RefreshToken pulumix.Input[*string] `pulumi:"refreshToken"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials]{
		OutputState: o.OutputState,
	}
}

// The access token used to access the connector on your behalf.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput) AccessToken() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials) *string {
		return v.AccessToken
	})
}

// The identifier for the desired client.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput) ClientId() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials) string {
		return v.ClientId
	})
}

// The client secret used by the OAuth client to authenticate to the authorization server.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput) ClientSecret() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials) string {
		return v.ClientSecret
	})
}

// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput) OauthRequest() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequest {
		return v.OauthRequest
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput]{OutputState: value.OutputState}
}

// The refresh token used to refresh an expired access token.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput) RefreshToken() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentials) *string {
		return v.RefreshToken
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequest struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode *string `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri *string `pulumi:"redirectUri"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestArgs struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode pulumix.Input[*string] `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri pulumix.Input[*string] `pulumi:"redirectUri"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequest)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequest)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequest] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequest]{
		OutputState: o.OutputState,
	}
}

// The code provided by the connector when it has been authenticated via the connected app.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput) AuthCode() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequest) *string {
		return v.AuthCode
	})
}

// The URL to which the authentication server redirects the browser after authorization has been granted.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput) RedirectUri() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequest) *string {
		return v.RedirectUri
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNow struct {
	// The password to use to connect to a resource.
	Password string `pulumi:"password"`
	// The username to use to connect to a resource.
	Username string `pulumi:"username"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowArgs struct {
	// The password to use to connect to a resource.
	Password pulumix.Input[string] `pulumi:"password"`
	// The username to use to connect to a resource.
	Username pulumix.Input[string] `pulumi:"username"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNow)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNow)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNow] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNow]{
		OutputState: o.OutputState,
	}
}

// The password to use to connect to a resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput) Password() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNow](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNow) string {
		return v.Password
	})
}

// The username to use to connect to a resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNow](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNow) string {
		return v.Username
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingular struct {
	// Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
	ApiKey string `pulumi:"apiKey"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularArgs struct {
	// Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
	ApiKey pulumix.Input[string] `pulumi:"apiKey"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingular)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingular)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingular] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingular]{
		OutputState: o.OutputState,
	}
}

// Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput) ApiKey() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingular](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingular) string {
		return v.ApiKey
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack struct {
	// The access token used to access the connector on your behalf.
	AccessToken *string `pulumi:"accessToken"`
	// The identifier for the desired client.
	ClientId string `pulumi:"clientId"`
	// The client secret used by the OAuth client to authenticate to the authorization server.
	ClientSecret string `pulumi:"clientSecret"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequest `pulumi:"oauthRequest"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackArgs struct {
	// The access token used to access the connector on your behalf.
	AccessToken pulumix.Input[*string] `pulumi:"accessToken"`
	// The identifier for the desired client.
	ClientId pulumix.Input[string] `pulumi:"clientId"`
	// The client secret used by the OAuth client to authenticate to the authorization server.
	ClientSecret pulumix.Input[string] `pulumi:"clientSecret"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestArgs] `pulumi:"oauthRequest"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack]{
		OutputState: o.OutputState,
	}
}

// The access token used to access the connector on your behalf.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput) AccessToken() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack) *string {
		return v.AccessToken
	})
}

// The identifier for the desired client.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput) ClientId() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack) string {
		return v.ClientId
	})
}

// The client secret used by the OAuth client to authenticate to the authorization server.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput) ClientSecret() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack) string {
		return v.ClientSecret
	})
}

// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput) OauthRequest() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlack) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequest {
		return v.OauthRequest
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput]{OutputState: value.OutputState}
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequest struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode *string `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri *string `pulumi:"redirectUri"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestArgs struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode pulumix.Input[*string] `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri pulumix.Input[*string] `pulumi:"redirectUri"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequest)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequest)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequest] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequest]{
		OutputState: o.OutputState,
	}
}

// The code provided by the connector when it has been authenticated via the connected app.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput) AuthCode() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequest) *string {
		return v.AuthCode
	})
}

// The URL to which the authentication server redirects the browser after authorization has been granted.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput) RedirectUri() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequest) *string {
		return v.RedirectUri
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflake struct {
	// The password to use to connect to a resource.
	Password string `pulumi:"password"`
	// The username to use to connect to a resource.
	Username string `pulumi:"username"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeArgs struct {
	// The password to use to connect to a resource.
	Password pulumix.Input[string] `pulumi:"password"`
	// The username to use to connect to a resource.
	Username pulumix.Input[string] `pulumi:"username"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflake)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflake)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflake] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflake]{
		OutputState: o.OutputState,
	}
}

// The password to use to connect to a resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput) Password() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflake](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflake) string {
		return v.Password
	})
}

// The username to use to connect to a resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflake](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflake) string {
		return v.Username
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicro struct {
	// The API secret key required for API key authentication.
	ApiSecretKey string `pulumi:"apiSecretKey"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroArgs struct {
	// The API secret key required for API key authentication.
	ApiSecretKey pulumix.Input[string] `pulumi:"apiSecretKey"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicro)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicro)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicro] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicro]{
		OutputState: o.OutputState,
	}
}

// The API secret key required for API key authentication.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput) ApiSecretKey() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicro](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicro) string {
		return v.ApiSecretKey
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeeva struct {
	// The password to use to connect to a resource.
	Password string `pulumi:"password"`
	// The username to use to connect to a resource.
	Username string `pulumi:"username"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaArgs struct {
	// The password to use to connect to a resource.
	Password pulumix.Input[string] `pulumi:"password"`
	// The username to use to connect to a resource.
	Username pulumix.Input[string] `pulumi:"username"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeeva)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeeva)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeeva] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeeva]{
		OutputState: o.OutputState,
	}
}

// The password to use to connect to a resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput) Password() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeeva](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeeva) string {
		return v.Password
	})
}

// The username to use to connect to a resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeeva](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeeva) string {
		return v.Username
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk struct {
	// The access token used to access the connector on your behalf.
	AccessToken *string `pulumi:"accessToken"`
	// The identifier for the desired client.
	ClientId string `pulumi:"clientId"`
	// The client secret used by the OAuth client to authenticate to the authorization server.
	ClientSecret string `pulumi:"clientSecret"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequest `pulumi:"oauthRequest"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskArgs struct {
	// The access token used to access the connector on your behalf.
	AccessToken pulumix.Input[*string] `pulumi:"accessToken"`
	// The identifier for the desired client.
	ClientId pulumix.Input[string] `pulumi:"clientId"`
	// The client secret used by the OAuth client to authenticate to the authorization server.
	ClientSecret pulumix.Input[string] `pulumi:"clientSecret"`
	// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
	OauthRequest pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestArgs] `pulumi:"oauthRequest"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk]{
		OutputState: o.OutputState,
	}
}

// The access token used to access the connector on your behalf.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput) AccessToken() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk) *string {
		return v.AccessToken
	})
}

// The identifier for the desired client.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput) ClientId() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk) string {
		return v.ClientId
	})
}

// The client secret used by the OAuth client to authenticate to the authorization server.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput) ClientSecret() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk) string {
		return v.ClientSecret
	})
}

// Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput) OauthRequest() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendesk) *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequest {
		return v.OauthRequest
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequest, ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput]{OutputState: value.OutputState}
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequest struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode *string `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri *string `pulumi:"redirectUri"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestArgs struct {
	// The code provided by the connector when it has been authenticated via the connected app.
	AuthCode pulumix.Input[*string] `pulumi:"authCode"`
	// The URL to which the authentication server redirects the browser after authorization has been granted.
	RedirectUri pulumix.Input[*string] `pulumi:"redirectUri"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequest)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestArgs) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequest)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput() ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput) ToConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequest] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequest]{
		OutputState: o.OutputState,
	}
}

// The code provided by the connector when it has been authenticated via the connected app.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput) AuthCode() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequest) *string {
		return v.AuthCode
	})
}

// The URL to which the authentication server redirects the browser after authorization has been granted.
func (o ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput) RedirectUri() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequest](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequest) *string {
		return v.RedirectUri
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfileProperties struct {
	// The connector-specific credentials required when using Amplitude. See Amplitude Connector Profile Credentials for more details.
	Amplitude *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitude `pulumi:"amplitude"`
	// The connector-specific profile properties required when using the custom connector. See Custom Connector Profile Properties for more details.
	CustomConnector *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnector `pulumi:"customConnector"`
	// Connector-specific properties required when using Datadog. See Generic Connector Profile Properties for more details.
	Datadog *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadog `pulumi:"datadog"`
	// The connector-specific properties required when using Dynatrace. See Generic Connector Profile Properties for more details.
	Dynatrace *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatrace `pulumi:"dynatrace"`
	// The connector-specific credentials required when using Google Analytics. See Google Analytics Connector Profile Credentials for more details.
	GoogleAnalytics *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalytics `pulumi:"googleAnalytics"`
	// The connector-specific credentials required when using Amazon Honeycode. See Honeycode Connector Profile Credentials for more details.
	Honeycode *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycode `pulumi:"honeycode"`
	// The connector-specific properties required when using Infor Nexus. See Generic Connector Profile Properties for more details.
	InforNexus *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexus `pulumi:"inforNexus"`
	// Connector-specific properties required when using Marketo. See Generic Connector Profile Properties for more details.
	Marketo *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketo `pulumi:"marketo"`
	// Connector-specific properties required when using Amazon Redshift. See Redshift Connector Profile Properties for more details.
	Redshift *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift `pulumi:"redshift"`
	// The connector-specific properties required when using Salesforce. See Salesforce Connector Profile Properties for more details.
	Salesforce *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce `pulumi:"salesforce"`
	// The connector-specific properties required when using SAPOData. See SAPOData Connector Profile Properties for more details.
	SapoData *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData `pulumi:"sapoData"`
	// The connector-specific properties required when using ServiceNow. See Generic Connector Profile Properties for more details.
	ServiceNow *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNow `pulumi:"serviceNow"`
	// Connector-specific credentials required when using Singular. See Singular Connector Profile Credentials for more details.
	Singular *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingular `pulumi:"singular"`
	// Connector-specific properties required when using Slack. See Generic Connector Profile Properties for more details.
	Slack *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlack `pulumi:"slack"`
	// The connector-specific properties required when using Snowflake. See Snowflake Connector Profile Properties for more details.
	Snowflake *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake `pulumi:"snowflake"`
	// The connector-specific credentials required when using Trend Micro. See Trend Micro Connector Profile Credentials for more details.
	Trendmicro *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicro `pulumi:"trendmicro"`
	// Connector-specific properties required when using Veeva. See Generic Connector Profile Properties for more details.
	Veeva *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeeva `pulumi:"veeva"`
	// Connector-specific properties required when using Zendesk. See Generic Connector Profile Properties for more details.
	Zendesk *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendesk `pulumi:"zendesk"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesArgs struct {
	// The connector-specific credentials required when using Amplitude. See Amplitude Connector Profile Credentials for more details.
	Amplitude pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeArgs] `pulumi:"amplitude"`
	// The connector-specific profile properties required when using the custom connector. See Custom Connector Profile Properties for more details.
	CustomConnector pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorArgs] `pulumi:"customConnector"`
	// Connector-specific properties required when using Datadog. See Generic Connector Profile Properties for more details.
	Datadog pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogArgs] `pulumi:"datadog"`
	// The connector-specific properties required when using Dynatrace. See Generic Connector Profile Properties for more details.
	Dynatrace pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceArgs] `pulumi:"dynatrace"`
	// The connector-specific credentials required when using Google Analytics. See Google Analytics Connector Profile Credentials for more details.
	GoogleAnalytics pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsArgs] `pulumi:"googleAnalytics"`
	// The connector-specific credentials required when using Amazon Honeycode. See Honeycode Connector Profile Credentials for more details.
	Honeycode pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeArgs] `pulumi:"honeycode"`
	// The connector-specific properties required when using Infor Nexus. See Generic Connector Profile Properties for more details.
	InforNexus pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusArgs] `pulumi:"inforNexus"`
	// Connector-specific properties required when using Marketo. See Generic Connector Profile Properties for more details.
	Marketo pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoArgs] `pulumi:"marketo"`
	// Connector-specific properties required when using Amazon Redshift. See Redshift Connector Profile Properties for more details.
	Redshift pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftArgs] `pulumi:"redshift"`
	// The connector-specific properties required when using Salesforce. See Salesforce Connector Profile Properties for more details.
	Salesforce pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceArgs] `pulumi:"salesforce"`
	// The connector-specific properties required when using SAPOData. See SAPOData Connector Profile Properties for more details.
	SapoData pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataArgs] `pulumi:"sapoData"`
	// The connector-specific properties required when using ServiceNow. See Generic Connector Profile Properties for more details.
	ServiceNow pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowArgs] `pulumi:"serviceNow"`
	// Connector-specific credentials required when using Singular. See Singular Connector Profile Credentials for more details.
	Singular pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularArgs] `pulumi:"singular"`
	// Connector-specific properties required when using Slack. See Generic Connector Profile Properties for more details.
	Slack pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackArgs] `pulumi:"slack"`
	// The connector-specific properties required when using Snowflake. See Snowflake Connector Profile Properties for more details.
	Snowflake pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeArgs] `pulumi:"snowflake"`
	// The connector-specific credentials required when using Trend Micro. See Trend Micro Connector Profile Credentials for more details.
	Trendmicro pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroArgs] `pulumi:"trendmicro"`
	// Connector-specific properties required when using Veeva. See Generic Connector Profile Properties for more details.
	Veeva pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaArgs] `pulumi:"veeva"`
	// Connector-specific properties required when using Zendesk. See Generic Connector Profile Properties for more details.
	Zendesk pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskArgs] `pulumi:"zendesk"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileProperties)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfileProperties)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileProperties] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfileProperties]{
		OutputState: o.OutputState,
	}
}

// The connector-specific credentials required when using Amplitude. See Amplitude Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) Amplitude() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitude, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitude {
		return v.Amplitude
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitude, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutput]{OutputState: value.OutputState}
}

// The connector-specific profile properties required when using the custom connector. See Custom Connector Profile Properties for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) CustomConnector() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnector, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnector {
		return v.CustomConnector
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnector, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput]{OutputState: value.OutputState}
}

// Connector-specific properties required when using Datadog. See Generic Connector Profile Properties for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) Datadog() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadog, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadog {
		return v.Datadog
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadog, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput]{OutputState: value.OutputState}
}

// The connector-specific properties required when using Dynatrace. See Generic Connector Profile Properties for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) Dynatrace() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatrace, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatrace {
		return v.Dynatrace
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatrace, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput]{OutputState: value.OutputState}
}

// The connector-specific credentials required when using Google Analytics. See Google Analytics Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) GoogleAnalytics() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalytics, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalytics {
		return v.GoogleAnalytics
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalytics, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutput]{OutputState: value.OutputState}
}

// The connector-specific credentials required when using Amazon Honeycode. See Honeycode Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) Honeycode() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycode, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycode {
		return v.Honeycode
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycode, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutput]{OutputState: value.OutputState}
}

// The connector-specific properties required when using Infor Nexus. See Generic Connector Profile Properties for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) InforNexus() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexus, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexus {
		return v.InforNexus
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexus, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput]{OutputState: value.OutputState}
}

// Connector-specific properties required when using Marketo. See Generic Connector Profile Properties for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) Marketo() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketo, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketo {
		return v.Marketo
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketo, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput]{OutputState: value.OutputState}
}

// Connector-specific properties required when using Amazon Redshift. See Redshift Connector Profile Properties for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) Redshift() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift {
		return v.Redshift
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput]{OutputState: value.OutputState}
}

// The connector-specific properties required when using Salesforce. See Salesforce Connector Profile Properties for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) Salesforce() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce {
		return v.Salesforce
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput]{OutputState: value.OutputState}
}

// The connector-specific properties required when using SAPOData. See SAPOData Connector Profile Properties for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) SapoData() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData {
		return v.SapoData
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput]{OutputState: value.OutputState}
}

// The connector-specific properties required when using ServiceNow. See Generic Connector Profile Properties for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) ServiceNow() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNow, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNow {
		return v.ServiceNow
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNow, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput]{OutputState: value.OutputState}
}

// Connector-specific credentials required when using Singular. See Singular Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) Singular() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingular, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingular {
		return v.Singular
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingular, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutput]{OutputState: value.OutputState}
}

// Connector-specific properties required when using Slack. See Generic Connector Profile Properties for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) Slack() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlack, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlack {
		return v.Slack
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlack, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput]{OutputState: value.OutputState}
}

// The connector-specific properties required when using Snowflake. See Snowflake Connector Profile Properties for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) Snowflake() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake {
		return v.Snowflake
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput]{OutputState: value.OutputState}
}

// The connector-specific credentials required when using Trend Micro. See Trend Micro Connector Profile Credentials for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) Trendmicro() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicro, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicro {
		return v.Trendmicro
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicro, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutput]{OutputState: value.OutputState}
}

// Connector-specific properties required when using Veeva. See Generic Connector Profile Properties for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) Veeva() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeeva, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeeva {
		return v.Veeva
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeeva, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput]{OutputState: value.OutputState}
}

// Connector-specific properties required when using Zendesk. See Generic Connector Profile Properties for more details.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput) Zendesk() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendesk, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfileProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfileProperties) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendesk {
		return v.Zendesk
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendesk, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput]{OutputState: value.OutputState}
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitude struct {
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeArgs struct {
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitude)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitude)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitude] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitude]{
		OutputState: o.OutputState,
	}
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnector struct {
	// The OAuth 2.0 properties required for OAuth 2.0 authentication.
	Oauth2Properties *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2Properties `pulumi:"oauth2Properties"`
	// A map of properties that are required to create a profile for the custom connector.
	ProfileProperties map[string]string `pulumi:"profileProperties"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorArgs struct {
	// The OAuth 2.0 properties required for OAuth 2.0 authentication.
	Oauth2Properties pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesArgs] `pulumi:"oauth2Properties"`
	// A map of properties that are required to create a profile for the custom connector.
	ProfileProperties pulumix.Input[map[string]string] `pulumi:"profileProperties"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnector)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnector)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnector] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnector]{
		OutputState: o.OutputState,
	}
}

// The OAuth 2.0 properties required for OAuth 2.0 authentication.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput) Oauth2Properties() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2Properties, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnector](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnector) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2Properties {
		return v.Oauth2Properties
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2Properties, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput]{OutputState: value.OutputState}
}

// A map of properties that are required to create a profile for the custom connector.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput) ProfileProperties() pulumix.MapOutput[string] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnector](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnector) map[string]string {
		return v.ProfileProperties
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2Properties struct {
	// The OAuth 2.0 grant type used by connector for OAuth 2.0 authentication. One of: `AUTHORIZATION_CODE`, `CLIENT_CREDENTIALS`.
	Oauth2GrantType string `pulumi:"oauth2GrantType"`
	// The token URL required for OAuth 2.0 authentication.
	TokenUrl string `pulumi:"tokenUrl"`
	// Associates your token URL with a map of properties that you define. Use this parameter to provide any additional details that the connector requires to authenticate your request.
	TokenUrlCustomProperties map[string]string `pulumi:"tokenUrlCustomProperties"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesArgs struct {
	// The OAuth 2.0 grant type used by connector for OAuth 2.0 authentication. One of: `AUTHORIZATION_CODE`, `CLIENT_CREDENTIALS`.
	Oauth2GrantType pulumix.Input[string] `pulumi:"oauth2GrantType"`
	// The token URL required for OAuth 2.0 authentication.
	TokenUrl pulumix.Input[string] `pulumi:"tokenUrl"`
	// Associates your token URL with a map of properties that you define. Use this parameter to provide any additional details that the connector requires to authenticate your request.
	TokenUrlCustomProperties pulumix.Input[map[string]string] `pulumi:"tokenUrlCustomProperties"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2Properties)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2Properties)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2Properties] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2Properties]{
		OutputState: o.OutputState,
	}
}

// The OAuth 2.0 grant type used by connector for OAuth 2.0 authentication. One of: `AUTHORIZATION_CODE`, `CLIENT_CREDENTIALS`.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput) Oauth2GrantType() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2Properties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2Properties) string {
		return v.Oauth2GrantType
	})
}

// The token URL required for OAuth 2.0 authentication.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput) TokenUrl() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2Properties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2Properties) string {
		return v.TokenUrl
	})
}

// Associates your token URL with a map of properties that you define. Use this parameter to provide any additional details that the connector requires to authenticate your request.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput) TokenUrlCustomProperties() pulumix.MapOutput[string] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2Properties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2Properties) map[string]string {
		return v.TokenUrlCustomProperties
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadog struct {
	// The location of the Datadog resource.
	InstanceUrl string `pulumi:"instanceUrl"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogArgs struct {
	// The location of the Datadog resource.
	InstanceUrl pulumix.Input[string] `pulumi:"instanceUrl"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadog)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadog)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadog] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadog]{
		OutputState: o.OutputState,
	}
}

// The location of the Datadog resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput) InstanceUrl() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadog](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadog) string {
		return v.InstanceUrl
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatrace struct {
	// The location of the Datadog resource.
	InstanceUrl string `pulumi:"instanceUrl"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceArgs struct {
	// The location of the Datadog resource.
	InstanceUrl pulumix.Input[string] `pulumi:"instanceUrl"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatrace)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatrace)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatrace] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatrace]{
		OutputState: o.OutputState,
	}
}

// The location of the Datadog resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput) InstanceUrl() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatrace](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatrace) string {
		return v.InstanceUrl
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalytics struct {
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsArgs struct {
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalytics)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalytics)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalytics] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalytics]{
		OutputState: o.OutputState,
	}
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycode struct {
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeArgs struct {
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycode)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycode)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycode] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycode]{
		OutputState: o.OutputState,
	}
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexus struct {
	// The location of the Datadog resource.
	InstanceUrl string `pulumi:"instanceUrl"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusArgs struct {
	// The location of the Datadog resource.
	InstanceUrl pulumix.Input[string] `pulumi:"instanceUrl"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexus)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexus)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexus] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexus]{
		OutputState: o.OutputState,
	}
}

// The location of the Datadog resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput) InstanceUrl() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexus](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexus) string {
		return v.InstanceUrl
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketo struct {
	// The location of the Datadog resource.
	InstanceUrl string `pulumi:"instanceUrl"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoArgs struct {
	// The location of the Datadog resource.
	InstanceUrl pulumix.Input[string] `pulumi:"instanceUrl"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketo)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketo)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketo] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketo]{
		OutputState: o.OutputState,
	}
}

// The location of the Datadog resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput) InstanceUrl() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketo](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketo) string {
		return v.InstanceUrl
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift struct {
	// A name for the associated Amazon S3 bucket.
	BucketName string `pulumi:"bucketName"`
	// The object key for the destination bucket in which Amazon AppFlow places the files.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// The unique ID that's assigned to an Amazon Redshift cluster.
	ClusterIdentifier *string `pulumi:"clusterIdentifier"`
	// ARN of the IAM role that permits AppFlow to access the database through Data API.
	DataApiRoleArn *string `pulumi:"dataApiRoleArn"`
	// The name of an Amazon Redshift database.
	DatabaseName *string `pulumi:"databaseName"`
	// The JDBC URL of the Amazon Redshift cluster.
	DatabaseUrl *string `pulumi:"databaseUrl"`
	// ARN of the IAM role.
	RoleArn string `pulumi:"roleArn"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftArgs struct {
	// A name for the associated Amazon S3 bucket.
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// The object key for the destination bucket in which Amazon AppFlow places the files.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// The unique ID that's assigned to an Amazon Redshift cluster.
	ClusterIdentifier pulumix.Input[*string] `pulumi:"clusterIdentifier"`
	// ARN of the IAM role that permits AppFlow to access the database through Data API.
	DataApiRoleArn pulumix.Input[*string] `pulumi:"dataApiRoleArn"`
	// The name of an Amazon Redshift database.
	DatabaseName pulumix.Input[*string] `pulumi:"databaseName"`
	// The JDBC URL of the Amazon Redshift cluster.
	DatabaseUrl pulumix.Input[*string] `pulumi:"databaseUrl"`
	// ARN of the IAM role.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift]{
		OutputState: o.OutputState,
	}
}

// A name for the associated Amazon S3 bucket.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift) string {
		return v.BucketName
	})
}

// The object key for the destination bucket in which Amazon AppFlow places the files.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift) *string {
		return v.BucketPrefix
	})
}

// The unique ID that's assigned to an Amazon Redshift cluster.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput) ClusterIdentifier() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift) *string {
		return v.ClusterIdentifier
	})
}

// ARN of the IAM role that permits AppFlow to access the database through Data API.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput) DataApiRoleArn() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift) *string {
		return v.DataApiRoleArn
	})
}

// The name of an Amazon Redshift database.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput) DatabaseName() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift) *string {
		return v.DatabaseName
	})
}

// The JDBC URL of the Amazon Redshift cluster.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput) DatabaseUrl() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift) *string {
		return v.DatabaseUrl
	})
}

// ARN of the IAM role.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshift) string {
		return v.RoleArn
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce struct {
	// The location of the Datadog resource.
	InstanceUrl *string `pulumi:"instanceUrl"`
	// Indicates whether the connector profile applies to a sandbox or production environment.
	IsSandboxEnvironment *bool `pulumi:"isSandboxEnvironment"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceArgs struct {
	// The location of the Datadog resource.
	InstanceUrl pulumix.Input[*string] `pulumi:"instanceUrl"`
	// Indicates whether the connector profile applies to a sandbox or production environment.
	IsSandboxEnvironment pulumix.Input[*bool] `pulumi:"isSandboxEnvironment"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce]{
		OutputState: o.OutputState,
	}
}

// The location of the Datadog resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput) InstanceUrl() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce) *string {
		return v.InstanceUrl
	})
}

// Indicates whether the connector profile applies to a sandbox or production environment.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput) IsSandboxEnvironment() pulumix.Output[*bool] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce) *bool {
		return v.IsSandboxEnvironment
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData struct {
	// The location of the SAPOData resource.
	ApplicationHostUrl string `pulumi:"applicationHostUrl"`
	// The application path to catalog service.
	ApplicationServicePath string `pulumi:"applicationServicePath"`
	// The client number for the client creating the connection.
	ClientNumber string `pulumi:"clientNumber"`
	// The logon language of SAPOData instance.
	LogonLanguage *string `pulumi:"logonLanguage"`
	// The SAPOData OAuth properties required for OAuth type authentication.
	OauthProperties *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties `pulumi:"oauthProperties"`
	// The port number of the SAPOData instance.
	PortNumber int `pulumi:"portNumber"`
	// The SAPOData Private Link service name to be used for private data transfers.
	PrivateLinkServiceName *string `pulumi:"privateLinkServiceName"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataArgs struct {
	// The location of the SAPOData resource.
	ApplicationHostUrl pulumix.Input[string] `pulumi:"applicationHostUrl"`
	// The application path to catalog service.
	ApplicationServicePath pulumix.Input[string] `pulumi:"applicationServicePath"`
	// The client number for the client creating the connection.
	ClientNumber pulumix.Input[string] `pulumi:"clientNumber"`
	// The logon language of SAPOData instance.
	LogonLanguage pulumix.Input[*string] `pulumi:"logonLanguage"`
	// The SAPOData OAuth properties required for OAuth type authentication.
	OauthProperties pulumix.Input[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs] `pulumi:"oauthProperties"`
	// The port number of the SAPOData instance.
	PortNumber pulumix.Input[int] `pulumi:"portNumber"`
	// The SAPOData Private Link service name to be used for private data transfers.
	PrivateLinkServiceName pulumix.Input[*string] `pulumi:"privateLinkServiceName"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData]{
		OutputState: o.OutputState,
	}
}

// The location of the SAPOData resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput) ApplicationHostUrl() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData) string {
		return v.ApplicationHostUrl
	})
}

// The application path to catalog service.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput) ApplicationServicePath() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData) string {
		return v.ApplicationServicePath
	})
}

// The client number for the client creating the connection.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput) ClientNumber() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData) string {
		return v.ClientNumber
	})
}

// The logon language of SAPOData instance.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput) LogonLanguage() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData) *string {
		return v.LogonLanguage
	})
}

// The SAPOData OAuth properties required for OAuth type authentication.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput) OauthProperties() pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData) *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties {
		return v.OauthProperties
	})
	return pulumix.GPtrOutput[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties, ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput]{OutputState: value.OutputState}
}

// The port number of the SAPOData instance.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput) PortNumber() pulumix.Output[int] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData) int {
		return v.PortNumber
	})
}

// The SAPOData Private Link service name to be used for private data transfers.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput) PrivateLinkServiceName() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData) *string {
		return v.PrivateLinkServiceName
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties struct {
	// The authorization code url required to redirect to SAP Login Page to fetch authorization code for OAuth type authentication.
	AuthCodeUrl string `pulumi:"authCodeUrl"`
	// The OAuth scopes required for OAuth type authentication.
	OauthScopes []string `pulumi:"oauthScopes"`
	// The token URL required for OAuth 2.0 authentication.
	TokenUrl string `pulumi:"tokenUrl"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs struct {
	// The authorization code url required to redirect to SAP Login Page to fetch authorization code for OAuth type authentication.
	AuthCodeUrl pulumix.Input[string] `pulumi:"authCodeUrl"`
	// The OAuth scopes required for OAuth type authentication.
	OauthScopes pulumix.Input[[]string] `pulumi:"oauthScopes"`
	// The token URL required for OAuth 2.0 authentication.
	TokenUrl pulumix.Input[string] `pulumi:"tokenUrl"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties]{
		OutputState: o.OutputState,
	}
}

// The authorization code url required to redirect to SAP Login Page to fetch authorization code for OAuth type authentication.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput) AuthCodeUrl() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties) string {
		return v.AuthCodeUrl
	})
}

// The OAuth scopes required for OAuth type authentication.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput) OauthScopes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties) []string {
		return v.OauthScopes
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The token URL required for OAuth 2.0 authentication.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput) TokenUrl() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties) string {
		return v.TokenUrl
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNow struct {
	// The location of the Datadog resource.
	InstanceUrl string `pulumi:"instanceUrl"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowArgs struct {
	// The location of the Datadog resource.
	InstanceUrl pulumix.Input[string] `pulumi:"instanceUrl"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNow)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNow)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNow] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNow]{
		OutputState: o.OutputState,
	}
}

// The location of the Datadog resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput) InstanceUrl() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNow](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNow) string {
		return v.InstanceUrl
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingular struct {
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularArgs struct {
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingular)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingular)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingular] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingular]{
		OutputState: o.OutputState,
	}
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlack struct {
	// The location of the Datadog resource.
	InstanceUrl string `pulumi:"instanceUrl"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackArgs struct {
	// The location of the Datadog resource.
	InstanceUrl pulumix.Input[string] `pulumi:"instanceUrl"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlack)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlack)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlack] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlack]{
		OutputState: o.OutputState,
	}
}

// The location of the Datadog resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput) InstanceUrl() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlack](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlack) string {
		return v.InstanceUrl
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake struct {
	// The name of the account.
	AccountName *string `pulumi:"accountName"`
	// A name for the associated Amazon S3 bucket.
	BucketName string `pulumi:"bucketName"`
	// The object key for the destination bucket in which Amazon AppFlow places the files.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// The SAPOData Private Link service name to be used for private data transfers.
	PrivateLinkServiceName *string `pulumi:"privateLinkServiceName"`
	// AWS Region of the Snowflake account.
	Region *string `pulumi:"region"`
	// Name of the Amazon S3 stage that was created while setting up an Amazon S3 stage in the Snowflake account. This is written in the following format: `<Database>.<Schema>.<Stage Name>`.
	Stage string `pulumi:"stage"`
	// The name of the Snowflake warehouse.
	Warehouse string `pulumi:"warehouse"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeArgs struct {
	// The name of the account.
	AccountName pulumix.Input[*string] `pulumi:"accountName"`
	// A name for the associated Amazon S3 bucket.
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// The object key for the destination bucket in which Amazon AppFlow places the files.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// The SAPOData Private Link service name to be used for private data transfers.
	PrivateLinkServiceName pulumix.Input[*string] `pulumi:"privateLinkServiceName"`
	// AWS Region of the Snowflake account.
	Region pulumix.Input[*string] `pulumi:"region"`
	// Name of the Amazon S3 stage that was created while setting up an Amazon S3 stage in the Snowflake account. This is written in the following format: `<Database>.<Schema>.<Stage Name>`.
	Stage pulumix.Input[string] `pulumi:"stage"`
	// The name of the Snowflake warehouse.
	Warehouse pulumix.Input[string] `pulumi:"warehouse"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake]{
		OutputState: o.OutputState,
	}
}

// The name of the account.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput) AccountName() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake) *string {
		return v.AccountName
	})
}

// A name for the associated Amazon S3 bucket.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake) string {
		return v.BucketName
	})
}

// The object key for the destination bucket in which Amazon AppFlow places the files.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake) *string {
		return v.BucketPrefix
	})
}

// The SAPOData Private Link service name to be used for private data transfers.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput) PrivateLinkServiceName() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake) *string {
		return v.PrivateLinkServiceName
	})
}

// AWS Region of the Snowflake account.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake) *string {
		return v.Region
	})
}

// Name of the Amazon S3 stage that was created while setting up an Amazon S3 stage in the Snowflake account. This is written in the following format: `<Database>.<Schema>.<Stage Name>`.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput) Stage() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake) string {
		return v.Stage
	})
}

// The name of the Snowflake warehouse.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput) Warehouse() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflake) string {
		return v.Warehouse
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicro struct {
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroArgs struct {
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicro)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicro)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicro] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicro]{
		OutputState: o.OutputState,
	}
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeeva struct {
	// The location of the Datadog resource.
	InstanceUrl string `pulumi:"instanceUrl"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaArgs struct {
	// The location of the Datadog resource.
	InstanceUrl pulumix.Input[string] `pulumi:"instanceUrl"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeeva)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeeva)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeeva] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeeva]{
		OutputState: o.OutputState,
	}
}

// The location of the Datadog resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput) InstanceUrl() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeeva](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeeva) string {
		return v.InstanceUrl
	})
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendesk struct {
	// The location of the Datadog resource.
	InstanceUrl string `pulumi:"instanceUrl"`
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskArgs struct {
	// The location of the Datadog resource.
	InstanceUrl pulumix.Input[string] `pulumi:"instanceUrl"`
}

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendesk)(nil)).Elem()
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput {
	return i.ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutputWithContext(context.Background())
}

func (i ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskArgs) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput)
}

func (i *ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskArgs] {
	return pulumix.Val(i)
}

type ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendesk)(nil)).Elem()
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput() ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput) ToConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutputWithContext(ctx context.Context) ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput {
	return o
}

func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendesk] {
	return pulumix.Output[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendesk]{
		OutputState: o.OutputState,
	}
}

// The location of the Datadog resource.
func (o ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput) InstanceUrl() pulumix.Output[string] {
	return pulumix.Apply[ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendesk](o, func(v ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendesk) string {
		return v.InstanceUrl
	})
}

type FlowDestinationFlowConfig struct {
	// API version that the destination connector uses.
	ApiVersion *string `pulumi:"apiVersion"`
	// Name of the connector profile. This name must be unique for each connector profile in the AWS account.
	ConnectorProfileName *string `pulumi:"connectorProfileName"`
	// Type of connector, such as Salesforce, Amplitude, and so on. Valid values are `Salesforce`, `Singular`, `Slack`, `Redshift`, `S3`, `Marketo`, `Googleanalytics`, `Zendesk`, `Servicenow`, `Datadog`, `Trendmicro`, `Snowflake`, `Dynatrace`, `Infornexus`, `Amplitude`, `Veeva`, `EventBridge`, `LookoutMetrics`, `Upsolver`, `Honeycode`, `CustomerProfiles`, `SAPOData`, and `CustomConnector`.
	ConnectorType string `pulumi:"connectorType"`
	// This stores the information that is required to query a particular connector. See Destination Connector Properties for more information.
	DestinationConnectorProperties FlowDestinationFlowConfigDestinationConnectorProperties `pulumi:"destinationConnectorProperties"`
}

type FlowDestinationFlowConfigArgs struct {
	// API version that the destination connector uses.
	ApiVersion pulumix.Input[*string] `pulumi:"apiVersion"`
	// Name of the connector profile. This name must be unique for each connector profile in the AWS account.
	ConnectorProfileName pulumix.Input[*string] `pulumi:"connectorProfileName"`
	// Type of connector, such as Salesforce, Amplitude, and so on. Valid values are `Salesforce`, `Singular`, `Slack`, `Redshift`, `S3`, `Marketo`, `Googleanalytics`, `Zendesk`, `Servicenow`, `Datadog`, `Trendmicro`, `Snowflake`, `Dynatrace`, `Infornexus`, `Amplitude`, `Veeva`, `EventBridge`, `LookoutMetrics`, `Upsolver`, `Honeycode`, `CustomerProfiles`, `SAPOData`, and `CustomConnector`.
	ConnectorType pulumix.Input[string] `pulumi:"connectorType"`
	// This stores the information that is required to query a particular connector. See Destination Connector Properties for more information.
	DestinationConnectorProperties pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesArgs] `pulumi:"destinationConnectorProperties"`
}

func (FlowDestinationFlowConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigArgs) ToFlowDestinationFlowConfigOutput() FlowDestinationFlowConfigOutput {
	return i.ToFlowDestinationFlowConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigArgs) ToFlowDestinationFlowConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigOutput)
}

func (i *FlowDestinationFlowConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigOutput) ToFlowDestinationFlowConfigOutput() FlowDestinationFlowConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigOutput) ToFlowDestinationFlowConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfig] {
	return pulumix.Output[FlowDestinationFlowConfig]{
		OutputState: o.OutputState,
	}
}

// API version that the destination connector uses.
func (o FlowDestinationFlowConfigOutput) ApiVersion() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfig](o, func(v FlowDestinationFlowConfig) *string { return v.ApiVersion })
}

// Name of the connector profile. This name must be unique for each connector profile in the AWS account.
func (o FlowDestinationFlowConfigOutput) ConnectorProfileName() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfig](o, func(v FlowDestinationFlowConfig) *string { return v.ConnectorProfileName })
}

// Type of connector, such as Salesforce, Amplitude, and so on. Valid values are `Salesforce`, `Singular`, `Slack`, `Redshift`, `S3`, `Marketo`, `Googleanalytics`, `Zendesk`, `Servicenow`, `Datadog`, `Trendmicro`, `Snowflake`, `Dynatrace`, `Infornexus`, `Amplitude`, `Veeva`, `EventBridge`, `LookoutMetrics`, `Upsolver`, `Honeycode`, `CustomerProfiles`, `SAPOData`, and `CustomConnector`.
func (o FlowDestinationFlowConfigOutput) ConnectorType() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfig](o, func(v FlowDestinationFlowConfig) string { return v.ConnectorType })
}

// This stores the information that is required to query a particular connector. See Destination Connector Properties for more information.
func (o FlowDestinationFlowConfigOutput) DestinationConnectorProperties() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorProperties, FlowDestinationFlowConfigDestinationConnectorPropertiesOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfig](o, func(v FlowDestinationFlowConfig) FlowDestinationFlowConfigDestinationConnectorProperties {
		return v.DestinationConnectorProperties
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorProperties, FlowDestinationFlowConfigDestinationConnectorPropertiesOutput]{OutputState: value.OutputState}
}

type FlowDestinationFlowConfigDestinationConnectorProperties struct {
	// Properties that are required to query the custom Connector. See Custom Connector Destination Properties for more details.
	CustomConnector *FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector `pulumi:"customConnector"`
	// Properties that are required to query Amazon Connect Customer Profiles. See Customer Profiles Destination Properties for more details.
	CustomerProfiles *FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfiles `pulumi:"customerProfiles"`
	// Properties that are required to query Amazon EventBridge. See Generic Destination Properties for more details.
	EventBridge *FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridge `pulumi:"eventBridge"`
	// Properties that are required to query Amazon Honeycode. See Generic Destination Properties for more details.
	Honeycode      *FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycode      `pulumi:"honeycode"`
	LookoutMetrics *FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetrics `pulumi:"lookoutMetrics"`
	// Properties that are required to query Marketo. See Generic Destination Properties for more details.
	Marketo *FlowDestinationFlowConfigDestinationConnectorPropertiesMarketo `pulumi:"marketo"`
	// Properties that are required to query Amazon Redshift. See Redshift Destination Properties for more details.
	Redshift *FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift `pulumi:"redshift"`
	// Properties that are required to query Amazon S3. See S3 Destination Properties for more details.
	S3 *FlowDestinationFlowConfigDestinationConnectorPropertiesS3 `pulumi:"s3"`
	// Properties that are required to query Salesforce. See Salesforce Destination Properties for more details.
	Salesforce *FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce `pulumi:"salesforce"`
	// Properties that are required to query SAPOData. See SAPOData Destination Properties for more details.
	SapoData *FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData `pulumi:"sapoData"`
	// Properties that are required to query Snowflake. See Snowflake Destination Properties for more details.
	Snowflake *FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake `pulumi:"snowflake"`
	// Properties that are required to query Upsolver. See Upsolver Destination Properties for more details.
	Upsolver *FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolver `pulumi:"upsolver"`
	// Properties that are required to query Zendesk. See Zendesk Destination Properties for more details.
	Zendesk *FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk `pulumi:"zendesk"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesArgs struct {
	// Properties that are required to query the custom Connector. See Custom Connector Destination Properties for more details.
	CustomConnector pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs] `pulumi:"customConnector"`
	// Properties that are required to query Amazon Connect Customer Profiles. See Customer Profiles Destination Properties for more details.
	CustomerProfiles pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesArgs] `pulumi:"customerProfiles"`
	// Properties that are required to query Amazon EventBridge. See Generic Destination Properties for more details.
	EventBridge pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeArgs] `pulumi:"eventBridge"`
	// Properties that are required to query Amazon Honeycode. See Generic Destination Properties for more details.
	Honeycode      pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeArgs]      `pulumi:"honeycode"`
	LookoutMetrics pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsArgs] `pulumi:"lookoutMetrics"`
	// Properties that are required to query Marketo. See Generic Destination Properties for more details.
	Marketo pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoArgs] `pulumi:"marketo"`
	// Properties that are required to query Amazon Redshift. See Redshift Destination Properties for more details.
	Redshift pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftArgs] `pulumi:"redshift"`
	// Properties that are required to query Amazon S3. See S3 Destination Properties for more details.
	S3 pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesS3Args] `pulumi:"s3"`
	// Properties that are required to query Salesforce. See Salesforce Destination Properties for more details.
	Salesforce pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceArgs] `pulumi:"salesforce"`
	// Properties that are required to query SAPOData. See SAPOData Destination Properties for more details.
	SapoData pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs] `pulumi:"sapoData"`
	// Properties that are required to query Snowflake. See Snowflake Destination Properties for more details.
	Snowflake pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeArgs] `pulumi:"snowflake"`
	// Properties that are required to query Upsolver. See Upsolver Destination Properties for more details.
	Upsolver pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverArgs] `pulumi:"upsolver"`
	// Properties that are required to query Zendesk. See Zendesk Destination Properties for more details.
	Zendesk pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskArgs] `pulumi:"zendesk"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorProperties)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorProperties)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorProperties] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorProperties]{
		OutputState: o.OutputState,
	}
}

// Properties that are required to query the custom Connector. See Custom Connector Destination Properties for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) CustomConnector() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector, FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorProperties](o, func(v FlowDestinationFlowConfigDestinationConnectorProperties) *FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector {
		return v.CustomConnector
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector, FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput]{OutputState: value.OutputState}
}

// Properties that are required to query Amazon Connect Customer Profiles. See Customer Profiles Destination Properties for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) CustomerProfiles() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfiles, FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorProperties](o, func(v FlowDestinationFlowConfigDestinationConnectorProperties) *FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfiles {
		return v.CustomerProfiles
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfiles, FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput]{OutputState: value.OutputState}
}

// Properties that are required to query Amazon EventBridge. See Generic Destination Properties for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) EventBridge() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridge, FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorProperties](o, func(v FlowDestinationFlowConfigDestinationConnectorProperties) *FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridge {
		return v.EventBridge
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridge, FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput]{OutputState: value.OutputState}
}

// Properties that are required to query Amazon Honeycode. See Generic Destination Properties for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) Honeycode() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycode, FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorProperties](o, func(v FlowDestinationFlowConfigDestinationConnectorProperties) *FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycode {
		return v.Honeycode
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycode, FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput]{OutputState: value.OutputState}
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) LookoutMetrics() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetrics, FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorProperties](o, func(v FlowDestinationFlowConfigDestinationConnectorProperties) *FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetrics {
		return v.LookoutMetrics
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetrics, FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutput]{OutputState: value.OutputState}
}

// Properties that are required to query Marketo. See Generic Destination Properties for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) Marketo() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesMarketo, FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorProperties](o, func(v FlowDestinationFlowConfigDestinationConnectorProperties) *FlowDestinationFlowConfigDestinationConnectorPropertiesMarketo {
		return v.Marketo
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesMarketo, FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput]{OutputState: value.OutputState}
}

// Properties that are required to query Amazon Redshift. See Redshift Destination Properties for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) Redshift() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift, FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorProperties](o, func(v FlowDestinationFlowConfigDestinationConnectorProperties) *FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift {
		return v.Redshift
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift, FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput]{OutputState: value.OutputState}
}

// Properties that are required to query Amazon S3. See S3 Destination Properties for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) S3() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesS3, FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorProperties](o, func(v FlowDestinationFlowConfigDestinationConnectorProperties) *FlowDestinationFlowConfigDestinationConnectorPropertiesS3 {
		return v.S3
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesS3, FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output]{OutputState: value.OutputState}
}

// Properties that are required to query Salesforce. See Salesforce Destination Properties for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) Salesforce() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce, FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorProperties](o, func(v FlowDestinationFlowConfigDestinationConnectorProperties) *FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce {
		return v.Salesforce
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce, FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput]{OutputState: value.OutputState}
}

// Properties that are required to query SAPOData. See SAPOData Destination Properties for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) SapoData() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData, FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorProperties](o, func(v FlowDestinationFlowConfigDestinationConnectorProperties) *FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData {
		return v.SapoData
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData, FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput]{OutputState: value.OutputState}
}

// Properties that are required to query Snowflake. See Snowflake Destination Properties for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) Snowflake() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake, FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorProperties](o, func(v FlowDestinationFlowConfigDestinationConnectorProperties) *FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake {
		return v.Snowflake
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake, FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput]{OutputState: value.OutputState}
}

// Properties that are required to query Upsolver. See Upsolver Destination Properties for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) Upsolver() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolver, FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorProperties](o, func(v FlowDestinationFlowConfigDestinationConnectorProperties) *FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolver {
		return v.Upsolver
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolver, FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput]{OutputState: value.OutputState}
}

// Properties that are required to query Zendesk. See Zendesk Destination Properties for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesOutput) Zendesk() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk, FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorProperties](o, func(v FlowDestinationFlowConfigDestinationConnectorProperties) *FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk {
		return v.Zendesk
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk, FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput]{OutputState: value.OutputState}
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector struct {
	// Custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
	CustomProperties map[string]string `pulumi:"customProperties"`
	// Entity specified in the custom connector as a destination in the flow.
	EntityName string `pulumi:"entityName"`
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig *FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfig `pulumi:"errorHandlingConfig"`
	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	IdFieldNames []string `pulumi:"idFieldNames"`
	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
	WriteOperationType *string `pulumi:"writeOperationType"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs struct {
	// Custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
	CustomProperties pulumix.Input[map[string]string] `pulumi:"customProperties"`
	// Entity specified in the custom connector as a destination in the flow.
	EntityName pulumix.Input[string] `pulumi:"entityName"`
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs] `pulumi:"errorHandlingConfig"`
	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	IdFieldNames pulumix.Input[[]string] `pulumi:"idFieldNames"`
	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
	WriteOperationType pulumix.Input[*string] `pulumi:"writeOperationType"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector]{
		OutputState: o.OutputState,
	}
}

// Custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput) CustomProperties() pulumix.MapOutput[string] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector) map[string]string {
		return v.CustomProperties
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Entity specified in the custom connector as a destination in the flow.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput) EntityName() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector) string {
		return v.EntityName
	})
}

// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput) ErrorHandlingConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector) *FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfig {
		return v.ErrorHandlingConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput]{OutputState: value.OutputState}
}

// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput) IdFieldNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector) []string {
		return v.IdFieldNames
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput) WriteOperationType() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnector) *string {
		return v.WriteOperationType
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfig struct {
	// Name of the Amazon S3 bucket.
	BucketName *string `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError *bool `pulumi:"failOnFirstDestinationError"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs struct {
	// Name of the Amazon S3 bucket.
	BucketName pulumix.Input[*string] `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError pulumix.Input[*bool] `pulumi:"failOnFirstDestinationError"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfig]{
		OutputState: o.OutputState,
	}
}

// Name of the Amazon S3 bucket.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput) BucketName() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfig) *string {
		return v.BucketName
	})
}

// Amazon S3 bucket prefix.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfig) *string {
		return v.BucketPrefix
	})
}

// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput) FailOnFirstDestinationError() pulumix.Output[*bool] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfig) *bool {
		return v.FailOnFirstDestinationError
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfiles struct {
	// Unique name of the Amazon Connect Customer Profiles domain.
	DomainName string `pulumi:"domainName"`
	// Object specified in the Amazon Connect Customer Profiles flow destination.
	ObjectTypeName *string `pulumi:"objectTypeName"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesArgs struct {
	// Unique name of the Amazon Connect Customer Profiles domain.
	DomainName pulumix.Input[string] `pulumi:"domainName"`
	// Object specified in the Amazon Connect Customer Profiles flow destination.
	ObjectTypeName pulumix.Input[*string] `pulumi:"objectTypeName"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfiles)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfiles)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfiles] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfiles]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Amazon Connect Customer Profiles domain.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput) DomainName() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfiles](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfiles) string {
		return v.DomainName
	})
}

// Object specified in the Amazon Connect Customer Profiles flow destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput) ObjectTypeName() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfiles](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfiles) *string {
		return v.ObjectTypeName
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridge struct {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig *FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfig `pulumi:"errorHandlingConfig"`
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeArgs struct {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigArgs] `pulumi:"errorHandlingConfig"`
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridge)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridge)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridge] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridge]{
		OutputState: o.OutputState,
	}
}

// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput) ErrorHandlingConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridge](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridge) *FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfig {
		return v.ErrorHandlingConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput]{OutputState: value.OutputState}
}

// Object specified in the flow destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridge](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridge) string { return v.Object })
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfig struct {
	// Name of the Amazon S3 bucket.
	BucketName *string `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError *bool `pulumi:"failOnFirstDestinationError"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigArgs struct {
	// Name of the Amazon S3 bucket.
	BucketName pulumix.Input[*string] `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError pulumix.Input[*bool] `pulumi:"failOnFirstDestinationError"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfig]{
		OutputState: o.OutputState,
	}
}

// Name of the Amazon S3 bucket.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput) BucketName() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfig) *string {
		return v.BucketName
	})
}

// Amazon S3 bucket prefix.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfig) *string {
		return v.BucketPrefix
	})
}

// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput) FailOnFirstDestinationError() pulumix.Output[*bool] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfig) *bool {
		return v.FailOnFirstDestinationError
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycode struct {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig *FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfig `pulumi:"errorHandlingConfig"`
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeArgs struct {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigArgs] `pulumi:"errorHandlingConfig"`
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycode)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycode)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycode] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycode]{
		OutputState: o.OutputState,
	}
}

// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput) ErrorHandlingConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycode](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycode) *FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfig {
		return v.ErrorHandlingConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput]{OutputState: value.OutputState}
}

// Object specified in the flow destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycode](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycode) string { return v.Object })
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfig struct {
	// Name of the Amazon S3 bucket.
	BucketName *string `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError *bool `pulumi:"failOnFirstDestinationError"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigArgs struct {
	// Name of the Amazon S3 bucket.
	BucketName pulumix.Input[*string] `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError pulumix.Input[*bool] `pulumi:"failOnFirstDestinationError"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfig]{
		OutputState: o.OutputState,
	}
}

// Name of the Amazon S3 bucket.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput) BucketName() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfig) *string {
		return v.BucketName
	})
}

// Amazon S3 bucket prefix.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfig) *string {
		return v.BucketPrefix
	})
}

// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput) FailOnFirstDestinationError() pulumix.Output[*bool] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfig) *bool {
		return v.FailOnFirstDestinationError
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetrics struct {
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsArgs struct {
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetrics)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetrics)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetrics] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetrics]{
		OutputState: o.OutputState,
	}
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesMarketo struct {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig *FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfig `pulumi:"errorHandlingConfig"`
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoArgs struct {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigArgs] `pulumi:"errorHandlingConfig"`
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesMarketo)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesMarketo)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesMarketo] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesMarketo]{
		OutputState: o.OutputState,
	}
}

// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput) ErrorHandlingConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesMarketo](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesMarketo) *FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfig {
		return v.ErrorHandlingConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput]{OutputState: value.OutputState}
}

// Object specified in the flow destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesMarketo](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesMarketo) string { return v.Object })
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfig struct {
	// Name of the Amazon S3 bucket.
	BucketName *string `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError *bool `pulumi:"failOnFirstDestinationError"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigArgs struct {
	// Name of the Amazon S3 bucket.
	BucketName pulumix.Input[*string] `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError pulumix.Input[*bool] `pulumi:"failOnFirstDestinationError"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfig]{
		OutputState: o.OutputState,
	}
}

// Name of the Amazon S3 bucket.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput) BucketName() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfig) *string {
		return v.BucketName
	})
}

// Amazon S3 bucket prefix.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfig) *string {
		return v.BucketPrefix
	})
}

// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput) FailOnFirstDestinationError() pulumix.Output[*bool] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfig) *bool {
		return v.FailOnFirstDestinationError
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift struct {
	// Object key for the bucket in which Amazon AppFlow places the destination files.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig *FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfig `pulumi:"errorHandlingConfig"`
	// Intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
	IntermediateBucketName string `pulumi:"intermediateBucketName"`
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftArgs struct {
	// Object key for the bucket in which Amazon AppFlow places the destination files.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigArgs] `pulumi:"errorHandlingConfig"`
	// Intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
	IntermediateBucketName pulumix.Input[string] `pulumi:"intermediateBucketName"`
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift]{
		OutputState: o.OutputState,
	}
}

// Object key for the bucket in which Amazon AppFlow places the destination files.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift) *string { return v.BucketPrefix })
}

// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput) ErrorHandlingConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift) *FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfig {
		return v.ErrorHandlingConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput]{OutputState: value.OutputState}
}

// Intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput) IntermediateBucketName() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift) string {
		return v.IntermediateBucketName
	})
}

// Object specified in the flow destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesRedshift) string { return v.Object })
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfig struct {
	// Name of the Amazon S3 bucket.
	BucketName *string `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError *bool `pulumi:"failOnFirstDestinationError"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigArgs struct {
	// Name of the Amazon S3 bucket.
	BucketName pulumix.Input[*string] `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError pulumix.Input[*bool] `pulumi:"failOnFirstDestinationError"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfig]{
		OutputState: o.OutputState,
	}
}

// Name of the Amazon S3 bucket.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput) BucketName() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfig) *string {
		return v.BucketName
	})
}

// Amazon S3 bucket prefix.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfig) *string {
		return v.BucketPrefix
	})
}

// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput) FailOnFirstDestinationError() pulumix.Output[*bool] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfig) *bool {
		return v.FailOnFirstDestinationError
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesS3 struct {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	BucketName string `pulumi:"bucketName"`
	// Object key for the bucket in which Amazon AppFlow places the destination files.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// Configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
	S3OutputFormatConfig *FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig `pulumi:"s3OutputFormatConfig"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesS3Args struct {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// Object key for the bucket in which Amazon AppFlow places the destination files.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// Configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
	S3OutputFormatConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigArgs] `pulumi:"s3OutputFormatConfig"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesS3)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesS3Args) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3Output() FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3OutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesS3Args) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3OutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesS3Args) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesS3Args] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesS3)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3Output() FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3OutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesS3] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesS3]{
		OutputState: o.OutputState,
	}
}

// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output) BucketName() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesS3](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesS3) string { return v.BucketName })
}

// Object key for the bucket in which Amazon AppFlow places the destination files.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesS3](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesS3) *string { return v.BucketPrefix })
}

// Configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output) S3OutputFormatConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesS3](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesS3) *FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig {
		return v.S3OutputFormatConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput]{OutputState: value.OutputState}
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig struct {
	// Aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
	AggregationConfig *FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfig `pulumi:"aggregationConfig"`
	// File type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are `CSV`, `JSON`, and `PARQUET`.
	FileType *string `pulumi:"fileType"`
	// Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
	PrefixConfig *FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfig `pulumi:"prefixConfig"`
	// Whether the data types from the source system need to be preserved (Only valid for `Parquet` file type)
	PreserveSourceDataTyping *bool `pulumi:"preserveSourceDataTyping"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigArgs struct {
	// Aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
	AggregationConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigArgs] `pulumi:"aggregationConfig"`
	// File type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are `CSV`, `JSON`, and `PARQUET`.
	FileType pulumix.Input[*string] `pulumi:"fileType"`
	// Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
	PrefixConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigArgs] `pulumi:"prefixConfig"`
	// Whether the data types from the source system need to be preserved (Only valid for `Parquet` file type)
	PreserveSourceDataTyping pulumix.Input[*bool] `pulumi:"preserveSourceDataTyping"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig]{
		OutputState: o.OutputState,
	}
}

// Aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput) AggregationConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig) *FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfig {
		return v.AggregationConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput]{OutputState: value.OutputState}
}

// File type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are `CSV`, `JSON`, and `PARQUET`.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput) FileType() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig) *string {
		return v.FileType
	})
}

// Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput) PrefixConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig) *FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfig {
		return v.PrefixConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput]{OutputState: value.OutputState}
}

// Whether the data types from the source system need to be preserved (Only valid for `Parquet` file type)
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput) PreserveSourceDataTyping() pulumix.Output[*bool] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfig) *bool {
		return v.PreserveSourceDataTyping
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfig struct {
	// Whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are `None` and `SingleFile`.
	AggregationType *string `pulumi:"aggregationType"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigArgs struct {
	// Whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are `None` and `SingleFile`.
	AggregationType pulumix.Input[*string] `pulumi:"aggregationType"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfig]{
		OutputState: o.OutputState,
	}
}

// Whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are `None` and `SingleFile`.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput) AggregationType() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfig) *string {
		return v.AggregationType
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfig struct {
	// Determines the level of granularity that's included in the prefix. Valid values are `YEAR`, `MONTH`, `DAY`, `HOUR`, and `MINUTE`.
	PrefixFormat *string `pulumi:"prefixFormat"`
	// Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are `FILENAME`, `PATH`, and `PATH_AND_FILENAME`.
	PrefixType *string `pulumi:"prefixType"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigArgs struct {
	// Determines the level of granularity that's included in the prefix. Valid values are `YEAR`, `MONTH`, `DAY`, `HOUR`, and `MINUTE`.
	PrefixFormat pulumix.Input[*string] `pulumi:"prefixFormat"`
	// Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are `FILENAME`, `PATH`, and `PATH_AND_FILENAME`.
	PrefixType pulumix.Input[*string] `pulumi:"prefixType"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfig]{
		OutputState: o.OutputState,
	}
}

// Determines the level of granularity that's included in the prefix. Valid values are `YEAR`, `MONTH`, `DAY`, `HOUR`, and `MINUTE`.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput) PrefixFormat() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfig) *string {
		return v.PrefixFormat
	})
}

// Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are `FILENAME`, `PATH`, and `PATH_AND_FILENAME`.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput) PrefixType() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfig) *string {
		return v.PrefixType
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce struct {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig *FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfig `pulumi:"errorHandlingConfig"`
	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	IdFieldNames []string `pulumi:"idFieldNames"`
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
	WriteOperationType *string `pulumi:"writeOperationType"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceArgs struct {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigArgs] `pulumi:"errorHandlingConfig"`
	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	IdFieldNames pulumix.Input[[]string] `pulumi:"idFieldNames"`
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
	WriteOperationType pulumix.Input[*string] `pulumi:"writeOperationType"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce]{
		OutputState: o.OutputState,
	}
}

// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput) ErrorHandlingConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce) *FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfig {
		return v.ErrorHandlingConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput]{OutputState: value.OutputState}
}

// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput) IdFieldNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce) []string {
		return v.IdFieldNames
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Object specified in the flow destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce) string { return v.Object })
}

// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput) WriteOperationType() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforce) *string {
		return v.WriteOperationType
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfig struct {
	// Name of the Amazon S3 bucket.
	BucketName *string `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError *bool `pulumi:"failOnFirstDestinationError"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigArgs struct {
	// Name of the Amazon S3 bucket.
	BucketName pulumix.Input[*string] `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError pulumix.Input[*bool] `pulumi:"failOnFirstDestinationError"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfig]{
		OutputState: o.OutputState,
	}
}

// Name of the Amazon S3 bucket.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput) BucketName() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfig) *string {
		return v.BucketName
	})
}

// Amazon S3 bucket prefix.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfig) *string {
		return v.BucketPrefix
	})
}

// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput) FailOnFirstDestinationError() pulumix.Output[*bool] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfig) *bool {
		return v.FailOnFirstDestinationError
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData struct {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig *FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfig `pulumi:"errorHandlingConfig"`
	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	IdFieldNames []string `pulumi:"idFieldNames"`
	// Object path specified in the SAPOData flow destination.
	ObjectPath string `pulumi:"objectPath"`
	// Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data. See Success Response Handling Config for more details.
	SuccessResponseHandlingConfig *FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfig `pulumi:"successResponseHandlingConfig"`
	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
	WriteOperationType *string `pulumi:"writeOperationType"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs struct {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs] `pulumi:"errorHandlingConfig"`
	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	IdFieldNames pulumix.Input[[]string] `pulumi:"idFieldNames"`
	// Object path specified in the SAPOData flow destination.
	ObjectPath pulumix.Input[string] `pulumi:"objectPath"`
	// Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data. See Success Response Handling Config for more details.
	SuccessResponseHandlingConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs] `pulumi:"successResponseHandlingConfig"`
	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
	WriteOperationType pulumix.Input[*string] `pulumi:"writeOperationType"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData]{
		OutputState: o.OutputState,
	}
}

// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput) ErrorHandlingConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData) *FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfig {
		return v.ErrorHandlingConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput]{OutputState: value.OutputState}
}

// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput) IdFieldNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData) []string {
		return v.IdFieldNames
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Object path specified in the SAPOData flow destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput) ObjectPath() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData) string { return v.ObjectPath })
}

// Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data. See Success Response Handling Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput) SuccessResponseHandlingConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData) *FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfig {
		return v.SuccessResponseHandlingConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput]{OutputState: value.OutputState}
}

// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput) WriteOperationType() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSapoData) *string {
		return v.WriteOperationType
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfig struct {
	// Name of the Amazon S3 bucket.
	BucketName *string `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError *bool `pulumi:"failOnFirstDestinationError"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs struct {
	// Name of the Amazon S3 bucket.
	BucketName pulumix.Input[*string] `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError pulumix.Input[*bool] `pulumi:"failOnFirstDestinationError"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfig]{
		OutputState: o.OutputState,
	}
}

// Name of the Amazon S3 bucket.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput) BucketName() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfig) *string {
		return v.BucketName
	})
}

// Amazon S3 bucket prefix.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfig) *string {
		return v.BucketPrefix
	})
}

// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput) FailOnFirstDestinationError() pulumix.Output[*bool] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfig) *bool {
		return v.FailOnFirstDestinationError
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfig struct {
	// Name of the Amazon S3 bucket.
	BucketName *string `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix *string `pulumi:"bucketPrefix"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs struct {
	// Name of the Amazon S3 bucket.
	BucketName pulumix.Input[*string] `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfig]{
		OutputState: o.OutputState,
	}
}

// Name of the Amazon S3 bucket.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput) BucketName() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfig) *string {
		return v.BucketName
	})
}

// Amazon S3 bucket prefix.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfig) *string {
		return v.BucketPrefix
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake struct {
	// Object key for the bucket in which Amazon AppFlow places the destination files.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig *FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfig `pulumi:"errorHandlingConfig"`
	// Intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
	IntermediateBucketName string `pulumi:"intermediateBucketName"`
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeArgs struct {
	// Object key for the bucket in which Amazon AppFlow places the destination files.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigArgs] `pulumi:"errorHandlingConfig"`
	// Intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
	IntermediateBucketName pulumix.Input[string] `pulumi:"intermediateBucketName"`
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake]{
		OutputState: o.OutputState,
	}
}

// Object key for the bucket in which Amazon AppFlow places the destination files.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake) *string {
		return v.BucketPrefix
	})
}

// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput) ErrorHandlingConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake) *FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfig {
		return v.ErrorHandlingConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput]{OutputState: value.OutputState}
}

// Intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput) IntermediateBucketName() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake) string {
		return v.IntermediateBucketName
	})
}

// Object specified in the flow destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflake) string { return v.Object })
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfig struct {
	// Name of the Amazon S3 bucket.
	BucketName *string `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError *bool `pulumi:"failOnFirstDestinationError"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigArgs struct {
	// Name of the Amazon S3 bucket.
	BucketName pulumix.Input[*string] `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError pulumix.Input[*bool] `pulumi:"failOnFirstDestinationError"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfig]{
		OutputState: o.OutputState,
	}
}

// Name of the Amazon S3 bucket.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput) BucketName() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfig) *string {
		return v.BucketName
	})
}

// Amazon S3 bucket prefix.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfig) *string {
		return v.BucketPrefix
	})
}

// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput) FailOnFirstDestinationError() pulumix.Output[*bool] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfig) *bool {
		return v.FailOnFirstDestinationError
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolver struct {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	BucketName string `pulumi:"bucketName"`
	// Object key for the bucket in which Amazon AppFlow places the destination files.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// Configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
	S3OutputFormatConfig FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfig `pulumi:"s3OutputFormatConfig"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverArgs struct {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// Object key for the bucket in which Amazon AppFlow places the destination files.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// Configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
	S3OutputFormatConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigArgs] `pulumi:"s3OutputFormatConfig"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolver)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolver)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolver] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolver]{
		OutputState: o.OutputState,
	}
}

// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolver](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolver) string { return v.BucketName })
}

// Object key for the bucket in which Amazon AppFlow places the destination files.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolver](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolver) *string { return v.BucketPrefix })
}

// Configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput) S3OutputFormatConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolver](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolver) FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfig {
		return v.S3OutputFormatConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput]{OutputState: value.OutputState}
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfig struct {
	// Aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
	AggregationConfig *FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfig `pulumi:"aggregationConfig"`
	// File type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are `CSV`, `JSON`, and `PARQUET`.
	FileType *string `pulumi:"fileType"`
	// Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
	PrefixConfig FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfig `pulumi:"prefixConfig"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigArgs struct {
	// Aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
	AggregationConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigArgs] `pulumi:"aggregationConfig"`
	// File type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are `CSV`, `JSON`, and `PARQUET`.
	FileType pulumix.Input[*string] `pulumi:"fileType"`
	// Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
	PrefixConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigArgs] `pulumi:"prefixConfig"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfig]{
		OutputState: o.OutputState,
	}
}

// Aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput) AggregationConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfig) *FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfig {
		return v.AggregationConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput]{OutputState: value.OutputState}
}

// File type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are `CSV`, `JSON`, and `PARQUET`.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput) FileType() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfig) *string {
		return v.FileType
	})
}

// Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput) PrefixConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfig) FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfig {
		return v.PrefixConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput]{OutputState: value.OutputState}
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfig struct {
	// Whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are `None` and `SingleFile`.
	AggregationType *string `pulumi:"aggregationType"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigArgs struct {
	// Whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are `None` and `SingleFile`.
	AggregationType pulumix.Input[*string] `pulumi:"aggregationType"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfig]{
		OutputState: o.OutputState,
	}
}

// Whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are `None` and `SingleFile`.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput) AggregationType() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfig) *string {
		return v.AggregationType
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfig struct {
	// Determines the level of granularity that's included in the prefix. Valid values are `YEAR`, `MONTH`, `DAY`, `HOUR`, and `MINUTE`.
	PrefixFormat *string `pulumi:"prefixFormat"`
	// Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are `FILENAME`, `PATH`, and `PATH_AND_FILENAME`.
	PrefixType string `pulumi:"prefixType"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigArgs struct {
	// Determines the level of granularity that's included in the prefix. Valid values are `YEAR`, `MONTH`, `DAY`, `HOUR`, and `MINUTE`.
	PrefixFormat pulumix.Input[*string] `pulumi:"prefixFormat"`
	// Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are `FILENAME`, `PATH`, and `PATH_AND_FILENAME`.
	PrefixType pulumix.Input[string] `pulumi:"prefixType"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfig]{
		OutputState: o.OutputState,
	}
}

// Determines the level of granularity that's included in the prefix. Valid values are `YEAR`, `MONTH`, `DAY`, `HOUR`, and `MINUTE`.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput) PrefixFormat() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfig) *string {
		return v.PrefixFormat
	})
}

// Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are `FILENAME`, `PATH`, and `PATH_AND_FILENAME`.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput) PrefixType() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfig) string {
		return v.PrefixType
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk struct {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig *FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfig `pulumi:"errorHandlingConfig"`
	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	IdFieldNames []string `pulumi:"idFieldNames"`
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
	WriteOperationType *string `pulumi:"writeOperationType"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskArgs struct {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	ErrorHandlingConfig pulumix.Input[*FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigArgs] `pulumi:"errorHandlingConfig"`
	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	IdFieldNames pulumix.Input[[]string] `pulumi:"idFieldNames"`
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
	WriteOperationType pulumix.Input[*string] `pulumi:"writeOperationType"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk]{
		OutputState: o.OutputState,
	}
}

// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput) ErrorHandlingConfig() pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk) *FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfig {
		return v.ErrorHandlingConfig
	})
	return pulumix.GPtrOutput[FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfig, FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput]{OutputState: value.OutputState}
}

// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput) IdFieldNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk) []string { return v.IdFieldNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Object specified in the flow destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk) string { return v.Object })
}

// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput) WriteOperationType() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesZendesk) *string {
		return v.WriteOperationType
	})
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfig struct {
	// Name of the Amazon S3 bucket.
	BucketName *string `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError *bool `pulumi:"failOnFirstDestinationError"`
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigArgs struct {
	// Name of the Amazon S3 bucket.
	BucketName pulumix.Input[*string] `pulumi:"bucketName"`
	// Amazon S3 bucket prefix.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	FailOnFirstDestinationError pulumix.Input[*bool] `pulumi:"failOnFirstDestinationError"`
}

func (FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfig)(nil)).Elem()
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput {
	return i.ToFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutputWithContext(context.Background())
}

func (i FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigArgs) ToFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput)
}

func (i *FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigArgs] {
	return pulumix.Val(i)
}

type FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput struct{ *pulumi.OutputState }

func (FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfig)(nil)).Elem()
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput() FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput) ToFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutputWithContext(ctx context.Context) FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput {
	return o
}

func (o FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfig] {
	return pulumix.Output[FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfig]{
		OutputState: o.OutputState,
	}
}

// Name of the Amazon S3 bucket.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput) BucketName() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfig) *string {
		return v.BucketName
	})
}

// Amazon S3 bucket prefix.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfig) *string {
		return v.BucketPrefix
	})
}

// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
func (o FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput) FailOnFirstDestinationError() pulumix.Output[*bool] {
	return pulumix.Apply[FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfig](o, func(v FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfig) *bool {
		return v.FailOnFirstDestinationError
	})
}

type FlowSourceFlowConfig struct {
	// API version that the destination connector uses.
	ApiVersion *string `pulumi:"apiVersion"`
	// Name of the connector profile. This name must be unique for each connector profile in the AWS account.
	ConnectorProfileName *string `pulumi:"connectorProfileName"`
	// Type of connector, such as Salesforce, Amplitude, and so on. Valid values are `Salesforce`, `Singular`, `Slack`, `Redshift`, `S3`, `Marketo`, `Googleanalytics`, `Zendesk`, `Servicenow`, `Datadog`, `Trendmicro`, `Snowflake`, `Dynatrace`, `Infornexus`, `Amplitude`, `Veeva`, `EventBridge`, `LookoutMetrics`, `Upsolver`, `Honeycode`, `CustomerProfiles`, `SAPOData`, and `CustomConnector`.
	ConnectorType string `pulumi:"connectorType"`
	// Defines the configuration for a scheduled incremental data pull. If a valid configuration is provided, the fields specified in the configuration are used when querying for the incremental data pull. See Incremental Pull Config for more details.
	IncrementalPullConfig *FlowSourceFlowConfigIncrementalPullConfig `pulumi:"incrementalPullConfig"`
	// Information that is required to query a particular source connector. See Source Connector Properties for details.
	SourceConnectorProperties FlowSourceFlowConfigSourceConnectorProperties `pulumi:"sourceConnectorProperties"`
}

type FlowSourceFlowConfigArgs struct {
	// API version that the destination connector uses.
	ApiVersion pulumix.Input[*string] `pulumi:"apiVersion"`
	// Name of the connector profile. This name must be unique for each connector profile in the AWS account.
	ConnectorProfileName pulumix.Input[*string] `pulumi:"connectorProfileName"`
	// Type of connector, such as Salesforce, Amplitude, and so on. Valid values are `Salesforce`, `Singular`, `Slack`, `Redshift`, `S3`, `Marketo`, `Googleanalytics`, `Zendesk`, `Servicenow`, `Datadog`, `Trendmicro`, `Snowflake`, `Dynatrace`, `Infornexus`, `Amplitude`, `Veeva`, `EventBridge`, `LookoutMetrics`, `Upsolver`, `Honeycode`, `CustomerProfiles`, `SAPOData`, and `CustomConnector`.
	ConnectorType pulumix.Input[string] `pulumi:"connectorType"`
	// Defines the configuration for a scheduled incremental data pull. If a valid configuration is provided, the fields specified in the configuration are used when querying for the incremental data pull. See Incremental Pull Config for more details.
	IncrementalPullConfig pulumix.Input[*FlowSourceFlowConfigIncrementalPullConfigArgs] `pulumi:"incrementalPullConfig"`
	// Information that is required to query a particular source connector. See Source Connector Properties for details.
	SourceConnectorProperties pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesArgs] `pulumi:"sourceConnectorProperties"`
}

func (FlowSourceFlowConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfig)(nil)).Elem()
}

func (i FlowSourceFlowConfigArgs) ToFlowSourceFlowConfigOutput() FlowSourceFlowConfigOutput {
	return i.ToFlowSourceFlowConfigOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigArgs) ToFlowSourceFlowConfigOutputWithContext(ctx context.Context) FlowSourceFlowConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigOutput)
}

func (i *FlowSourceFlowConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfig)(nil)).Elem()
}

func (o FlowSourceFlowConfigOutput) ToFlowSourceFlowConfigOutput() FlowSourceFlowConfigOutput {
	return o
}

func (o FlowSourceFlowConfigOutput) ToFlowSourceFlowConfigOutputWithContext(ctx context.Context) FlowSourceFlowConfigOutput {
	return o
}

func (o FlowSourceFlowConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfig] {
	return pulumix.Output[FlowSourceFlowConfig]{
		OutputState: o.OutputState,
	}
}

// API version that the destination connector uses.
func (o FlowSourceFlowConfigOutput) ApiVersion() pulumix.Output[*string] {
	return pulumix.Apply[FlowSourceFlowConfig](o, func(v FlowSourceFlowConfig) *string { return v.ApiVersion })
}

// Name of the connector profile. This name must be unique for each connector profile in the AWS account.
func (o FlowSourceFlowConfigOutput) ConnectorProfileName() pulumix.Output[*string] {
	return pulumix.Apply[FlowSourceFlowConfig](o, func(v FlowSourceFlowConfig) *string { return v.ConnectorProfileName })
}

// Type of connector, such as Salesforce, Amplitude, and so on. Valid values are `Salesforce`, `Singular`, `Slack`, `Redshift`, `S3`, `Marketo`, `Googleanalytics`, `Zendesk`, `Servicenow`, `Datadog`, `Trendmicro`, `Snowflake`, `Dynatrace`, `Infornexus`, `Amplitude`, `Veeva`, `EventBridge`, `LookoutMetrics`, `Upsolver`, `Honeycode`, `CustomerProfiles`, `SAPOData`, and `CustomConnector`.
func (o FlowSourceFlowConfigOutput) ConnectorType() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfig](o, func(v FlowSourceFlowConfig) string { return v.ConnectorType })
}

// Defines the configuration for a scheduled incremental data pull. If a valid configuration is provided, the fields specified in the configuration are used when querying for the incremental data pull. See Incremental Pull Config for more details.
func (o FlowSourceFlowConfigOutput) IncrementalPullConfig() pulumix.GPtrOutput[FlowSourceFlowConfigIncrementalPullConfig, FlowSourceFlowConfigIncrementalPullConfigOutput] {
	value := pulumix.Apply[FlowSourceFlowConfig](o, func(v FlowSourceFlowConfig) *FlowSourceFlowConfigIncrementalPullConfig {
		return v.IncrementalPullConfig
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigIncrementalPullConfig, FlowSourceFlowConfigIncrementalPullConfigOutput]{OutputState: value.OutputState}
}

// Information that is required to query a particular source connector. See Source Connector Properties for details.
func (o FlowSourceFlowConfigOutput) SourceConnectorProperties() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorProperties, FlowSourceFlowConfigSourceConnectorPropertiesOutput] {
	value := pulumix.Apply[FlowSourceFlowConfig](o, func(v FlowSourceFlowConfig) FlowSourceFlowConfigSourceConnectorProperties {
		return v.SourceConnectorProperties
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorProperties, FlowSourceFlowConfigSourceConnectorPropertiesOutput]{OutputState: value.OutputState}
}

type FlowSourceFlowConfigIncrementalPullConfig struct {
	// Field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source.
	DatetimeTypeFieldName *string `pulumi:"datetimeTypeFieldName"`
}

type FlowSourceFlowConfigIncrementalPullConfigArgs struct {
	// Field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source.
	DatetimeTypeFieldName pulumix.Input[*string] `pulumi:"datetimeTypeFieldName"`
}

func (FlowSourceFlowConfigIncrementalPullConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigIncrementalPullConfig)(nil)).Elem()
}

func (i FlowSourceFlowConfigIncrementalPullConfigArgs) ToFlowSourceFlowConfigIncrementalPullConfigOutput() FlowSourceFlowConfigIncrementalPullConfigOutput {
	return i.ToFlowSourceFlowConfigIncrementalPullConfigOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigIncrementalPullConfigArgs) ToFlowSourceFlowConfigIncrementalPullConfigOutputWithContext(ctx context.Context) FlowSourceFlowConfigIncrementalPullConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigIncrementalPullConfigOutput)
}

func (i *FlowSourceFlowConfigIncrementalPullConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigIncrementalPullConfigArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigIncrementalPullConfigOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigIncrementalPullConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigIncrementalPullConfig)(nil)).Elem()
}

func (o FlowSourceFlowConfigIncrementalPullConfigOutput) ToFlowSourceFlowConfigIncrementalPullConfigOutput() FlowSourceFlowConfigIncrementalPullConfigOutput {
	return o
}

func (o FlowSourceFlowConfigIncrementalPullConfigOutput) ToFlowSourceFlowConfigIncrementalPullConfigOutputWithContext(ctx context.Context) FlowSourceFlowConfigIncrementalPullConfigOutput {
	return o
}

func (o FlowSourceFlowConfigIncrementalPullConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigIncrementalPullConfig] {
	return pulumix.Output[FlowSourceFlowConfigIncrementalPullConfig]{
		OutputState: o.OutputState,
	}
}

// Field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source.
func (o FlowSourceFlowConfigIncrementalPullConfigOutput) DatetimeTypeFieldName() pulumix.Output[*string] {
	return pulumix.Apply[FlowSourceFlowConfigIncrementalPullConfig](o, func(v FlowSourceFlowConfigIncrementalPullConfig) *string { return v.DatetimeTypeFieldName })
}

type FlowSourceFlowConfigSourceConnectorProperties struct {
	// Information that is required for querying Amplitude. See Generic Source Properties for more details.
	Amplitude *FlowSourceFlowConfigSourceConnectorPropertiesAmplitude `pulumi:"amplitude"`
	// Properties that are applied when the custom connector is being used as a source. See Custom Connector Source Properties.
	CustomConnector *FlowSourceFlowConfigSourceConnectorPropertiesCustomConnector `pulumi:"customConnector"`
	// Information that is required for querying Datadog. See Generic Source Properties for more details.
	Datadog *FlowSourceFlowConfigSourceConnectorPropertiesDatadog `pulumi:"datadog"`
	// Operation to be performed on the provided Dynatrace source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Dynatrace *FlowSourceFlowConfigSourceConnectorPropertiesDynatrace `pulumi:"dynatrace"`
	// Operation to be performed on the provided Google Analytics source fields. Valid values are `PROJECTION` and `BETWEEN`.
	GoogleAnalytics *FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalytics `pulumi:"googleAnalytics"`
	// Information that is required for querying Infor Nexus. See Generic Source Properties for more details.
	InforNexus *FlowSourceFlowConfigSourceConnectorPropertiesInforNexus `pulumi:"inforNexus"`
	// Information that is required for querying Marketo. See Generic Source Properties for more details.
	Marketo *FlowSourceFlowConfigSourceConnectorPropertiesMarketo `pulumi:"marketo"`
	// Information that is required for querying Amazon S3. See S3 Source Properties for more details.
	S3 *FlowSourceFlowConfigSourceConnectorPropertiesS3 `pulumi:"s3"`
	// Information that is required for querying Salesforce. See Salesforce Source Properties for more details.
	Salesforce *FlowSourceFlowConfigSourceConnectorPropertiesSalesforce `pulumi:"salesforce"`
	// Information that is required for querying SAPOData as a flow source. See SAPO Source Properties for more details.
	SapoData *FlowSourceFlowConfigSourceConnectorPropertiesSapoData `pulumi:"sapoData"`
	// Information that is required for querying ServiceNow. See Generic Source Properties for more details.
	ServiceNow *FlowSourceFlowConfigSourceConnectorPropertiesServiceNow `pulumi:"serviceNow"`
	// Information that is required for querying Singular. See Generic Source Properties for more details.
	Singular *FlowSourceFlowConfigSourceConnectorPropertiesSingular `pulumi:"singular"`
	// Information that is required for querying Slack. See Generic Source Properties for more details.
	Slack *FlowSourceFlowConfigSourceConnectorPropertiesSlack `pulumi:"slack"`
	// Operation to be performed on the provided Trend Micro source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Trendmicro *FlowSourceFlowConfigSourceConnectorPropertiesTrendmicro `pulumi:"trendmicro"`
	// Information that is required for querying Veeva. See Veeva Source Properties for more details.
	Veeva *FlowSourceFlowConfigSourceConnectorPropertiesVeeva `pulumi:"veeva"`
	// Information that is required for querying Zendesk. See Generic Source Properties for more details.
	Zendesk *FlowSourceFlowConfigSourceConnectorPropertiesZendesk `pulumi:"zendesk"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesArgs struct {
	// Information that is required for querying Amplitude. See Generic Source Properties for more details.
	Amplitude pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs] `pulumi:"amplitude"`
	// Properties that are applied when the custom connector is being used as a source. See Custom Connector Source Properties.
	CustomConnector pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs] `pulumi:"customConnector"`
	// Information that is required for querying Datadog. See Generic Source Properties for more details.
	Datadog pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs] `pulumi:"datadog"`
	// Operation to be performed on the provided Dynatrace source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Dynatrace pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs] `pulumi:"dynatrace"`
	// Operation to be performed on the provided Google Analytics source fields. Valid values are `PROJECTION` and `BETWEEN`.
	GoogleAnalytics pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs] `pulumi:"googleAnalytics"`
	// Information that is required for querying Infor Nexus. See Generic Source Properties for more details.
	InforNexus pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs] `pulumi:"inforNexus"`
	// Information that is required for querying Marketo. See Generic Source Properties for more details.
	Marketo pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs] `pulumi:"marketo"`
	// Information that is required for querying Amazon S3. See S3 Source Properties for more details.
	S3 pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesS3Args] `pulumi:"s3"`
	// Information that is required for querying Salesforce. See Salesforce Source Properties for more details.
	Salesforce pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs] `pulumi:"salesforce"`
	// Information that is required for querying SAPOData as a flow source. See SAPO Source Properties for more details.
	SapoData pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs] `pulumi:"sapoData"`
	// Information that is required for querying ServiceNow. See Generic Source Properties for more details.
	ServiceNow pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs] `pulumi:"serviceNow"`
	// Information that is required for querying Singular. See Generic Source Properties for more details.
	Singular pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs] `pulumi:"singular"`
	// Information that is required for querying Slack. See Generic Source Properties for more details.
	Slack pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs] `pulumi:"slack"`
	// Operation to be performed on the provided Trend Micro source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Trendmicro pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs] `pulumi:"trendmicro"`
	// Information that is required for querying Veeva. See Veeva Source Properties for more details.
	Veeva pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs] `pulumi:"veeva"`
	// Information that is required for querying Zendesk. See Generic Source Properties for more details.
	Zendesk pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs] `pulumi:"zendesk"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorProperties)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesOutput() FlowSourceFlowConfigSourceConnectorPropertiesOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorProperties)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesOutput() FlowSourceFlowConfigSourceConnectorPropertiesOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorProperties] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorProperties]{
		OutputState: o.OutputState,
	}
}

// Information that is required for querying Amplitude. See Generic Source Properties for more details.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) Amplitude() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesAmplitude, FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesAmplitude {
		return v.Amplitude
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesAmplitude, FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput]{OutputState: value.OutputState}
}

// Properties that are applied when the custom connector is being used as a source. See Custom Connector Source Properties.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) CustomConnector() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesCustomConnector, FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesCustomConnector {
		return v.CustomConnector
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesCustomConnector, FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput]{OutputState: value.OutputState}
}

// Information that is required for querying Datadog. See Generic Source Properties for more details.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) Datadog() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesDatadog, FlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesDatadog {
		return v.Datadog
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesDatadog, FlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput]{OutputState: value.OutputState}
}

// Operation to be performed on the provided Dynatrace source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) Dynatrace() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesDynatrace, FlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesDynatrace {
		return v.Dynatrace
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesDynatrace, FlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput]{OutputState: value.OutputState}
}

// Operation to be performed on the provided Google Analytics source fields. Valid values are `PROJECTION` and `BETWEEN`.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) GoogleAnalytics() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalytics, FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalytics {
		return v.GoogleAnalytics
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalytics, FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput]{OutputState: value.OutputState}
}

// Information that is required for querying Infor Nexus. See Generic Source Properties for more details.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) InforNexus() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesInforNexus, FlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesInforNexus {
		return v.InforNexus
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesInforNexus, FlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput]{OutputState: value.OutputState}
}

// Information that is required for querying Marketo. See Generic Source Properties for more details.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) Marketo() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesMarketo, FlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesMarketo {
		return v.Marketo
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesMarketo, FlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput]{OutputState: value.OutputState}
}

// Information that is required for querying Amazon S3. See S3 Source Properties for more details.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) S3() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesS3, FlowSourceFlowConfigSourceConnectorPropertiesS3Output] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesS3 {
		return v.S3
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesS3, FlowSourceFlowConfigSourceConnectorPropertiesS3Output]{OutputState: value.OutputState}
}

// Information that is required for querying Salesforce. See Salesforce Source Properties for more details.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) Salesforce() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesSalesforce, FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesSalesforce {
		return v.Salesforce
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesSalesforce, FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput]{OutputState: value.OutputState}
}

// Information that is required for querying SAPOData as a flow source. See SAPO Source Properties for more details.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) SapoData() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesSapoData, FlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesSapoData {
		return v.SapoData
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesSapoData, FlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput]{OutputState: value.OutputState}
}

// Information that is required for querying ServiceNow. See Generic Source Properties for more details.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) ServiceNow() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesServiceNow, FlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesServiceNow {
		return v.ServiceNow
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesServiceNow, FlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput]{OutputState: value.OutputState}
}

// Information that is required for querying Singular. See Generic Source Properties for more details.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) Singular() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesSingular, FlowSourceFlowConfigSourceConnectorPropertiesSingularOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesSingular {
		return v.Singular
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesSingular, FlowSourceFlowConfigSourceConnectorPropertiesSingularOutput]{OutputState: value.OutputState}
}

// Information that is required for querying Slack. See Generic Source Properties for more details.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) Slack() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesSlack, FlowSourceFlowConfigSourceConnectorPropertiesSlackOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesSlack {
		return v.Slack
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesSlack, FlowSourceFlowConfigSourceConnectorPropertiesSlackOutput]{OutputState: value.OutputState}
}

// Operation to be performed on the provided Trend Micro source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) Trendmicro() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesTrendmicro, FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesTrendmicro {
		return v.Trendmicro
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesTrendmicro, FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput]{OutputState: value.OutputState}
}

// Information that is required for querying Veeva. See Veeva Source Properties for more details.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) Veeva() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesVeeva, FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesVeeva {
		return v.Veeva
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesVeeva, FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput]{OutputState: value.OutputState}
}

// Information that is required for querying Zendesk. See Generic Source Properties for more details.
func (o FlowSourceFlowConfigSourceConnectorPropertiesOutput) Zendesk() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesZendesk, FlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorProperties](o, func(v FlowSourceFlowConfigSourceConnectorProperties) *FlowSourceFlowConfigSourceConnectorPropertiesZendesk {
		return v.Zendesk
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesZendesk, FlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput]{OutputState: value.OutputState}
}

type FlowSourceFlowConfigSourceConnectorPropertiesAmplitude struct {
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs struct {
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesAmplitude)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput() FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesAmplitude)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput() FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesAmplitude] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesAmplitude]{
		OutputState: o.OutputState,
	}
}

// Object specified in the flow destination.
func (o FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesAmplitude](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesAmplitude) string { return v.Object })
}

type FlowSourceFlowConfigSourceConnectorPropertiesCustomConnector struct {
	// Custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
	CustomProperties map[string]string `pulumi:"customProperties"`
	// Entity specified in the custom connector as a destination in the flow.
	EntityName string `pulumi:"entityName"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs struct {
	// Custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
	CustomProperties pulumix.Input[map[string]string] `pulumi:"customProperties"`
	// Entity specified in the custom connector as a destination in the flow.
	EntityName pulumix.Input[string] `pulumi:"entityName"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesCustomConnector)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput() FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesCustomConnector)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput() FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesCustomConnector] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesCustomConnector]{
		OutputState: o.OutputState,
	}
}

// Custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
func (o FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput) CustomProperties() pulumix.MapOutput[string] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesCustomConnector](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesCustomConnector) map[string]string {
		return v.CustomProperties
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Entity specified in the custom connector as a destination in the flow.
func (o FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput) EntityName() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesCustomConnector](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesCustomConnector) string { return v.EntityName })
}

type FlowSourceFlowConfigSourceConnectorPropertiesDatadog struct {
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs struct {
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesDatadog)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput() FlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesDatadogOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesDatadogOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesDatadog)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput() FlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesDatadogOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesDatadog] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesDatadog]{
		OutputState: o.OutputState,
	}
}

// Object specified in the flow destination.
func (o FlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesDatadog](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesDatadog) string { return v.Object })
}

type FlowSourceFlowConfigSourceConnectorPropertiesDynatrace struct {
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs struct {
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesDynatrace)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput() FlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesDynatrace)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput() FlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesDynatrace] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesDynatrace]{
		OutputState: o.OutputState,
	}
}

// Object specified in the flow destination.
func (o FlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesDynatrace](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesDynatrace) string { return v.Object })
}

type FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalytics struct {
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs struct {
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalytics)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput() FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalytics)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput() FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalytics] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalytics]{
		OutputState: o.OutputState,
	}
}

// Object specified in the flow destination.
func (o FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalytics](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalytics) string { return v.Object })
}

type FlowSourceFlowConfigSourceConnectorPropertiesInforNexus struct {
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs struct {
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesInforNexus)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput() FlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesInforNexus)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput() FlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesInforNexus] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesInforNexus]{
		OutputState: o.OutputState,
	}
}

// Object specified in the flow destination.
func (o FlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesInforNexus](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesInforNexus) string { return v.Object })
}

type FlowSourceFlowConfigSourceConnectorPropertiesMarketo struct {
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs struct {
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesMarketo)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput() FlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesMarketoOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesMarketoOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesMarketo)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput() FlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesMarketoOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesMarketo] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesMarketo]{
		OutputState: o.OutputState,
	}
}

// Object specified in the flow destination.
func (o FlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesMarketo](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesMarketo) string { return v.Object })
}

type FlowSourceFlowConfigSourceConnectorPropertiesS3 struct {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	BucketName string `pulumi:"bucketName"`
	// Object key for the bucket in which Amazon AppFlow places the destination files.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// When you use Amazon S3 as the source, the configuration format that you provide the flow input data. See S3 Input Format Config for details.
	S3InputFormatConfig *FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfig `pulumi:"s3InputFormatConfig"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesS3Args struct {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// Object key for the bucket in which Amazon AppFlow places the destination files.
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// When you use Amazon S3 as the source, the configuration format that you provide the flow input data. See S3 Input Format Config for details.
	S3InputFormatConfig pulumix.Input[*FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigArgs] `pulumi:"s3InputFormatConfig"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesS3)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesS3Args) ToFlowSourceFlowConfigSourceConnectorPropertiesS3Output() FlowSourceFlowConfigSourceConnectorPropertiesS3Output {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesS3OutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesS3Args) ToFlowSourceFlowConfigSourceConnectorPropertiesS3OutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesS3Output)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesS3Args) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesS3Args] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesS3Output struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesS3)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesS3Output) ToFlowSourceFlowConfigSourceConnectorPropertiesS3Output() FlowSourceFlowConfigSourceConnectorPropertiesS3Output {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesS3Output) ToFlowSourceFlowConfigSourceConnectorPropertiesS3OutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesS3Output {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesS3Output) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesS3] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesS3]{
		OutputState: o.OutputState,
	}
}

// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
func (o FlowSourceFlowConfigSourceConnectorPropertiesS3Output) BucketName() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesS3](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesS3) string { return v.BucketName })
}

// Object key for the bucket in which Amazon AppFlow places the destination files.
func (o FlowSourceFlowConfigSourceConnectorPropertiesS3Output) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesS3](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesS3) *string { return v.BucketPrefix })
}

// When you use Amazon S3 as the source, the configuration format that you provide the flow input data. See S3 Input Format Config for details.
func (o FlowSourceFlowConfigSourceConnectorPropertiesS3Output) S3InputFormatConfig() pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfig, FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput] {
	value := pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesS3](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesS3) *FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfig {
		return v.S3InputFormatConfig
	})
	return pulumix.GPtrOutput[FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfig, FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput]{OutputState: value.OutputState}
}

type FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfig struct {
	// File type that Amazon AppFlow gets from your Amazon S3 bucket. Valid values are `CSV` and `JSON`.
	S3InputFileType *string `pulumi:"s3InputFileType"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigArgs struct {
	// File type that Amazon AppFlow gets from your Amazon S3 bucket. Valid values are `CSV` and `JSON`.
	S3InputFileType pulumix.Input[*string] `pulumi:"s3InputFileType"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfig)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput() FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfig)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput() FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfig] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfig]{
		OutputState: o.OutputState,
	}
}

// File type that Amazon AppFlow gets from your Amazon S3 bucket. Valid values are `CSV` and `JSON`.
func (o FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput) S3InputFileType() pulumix.Output[*string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfig](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfig) *string {
		return v.S3InputFileType
	})
}

type FlowSourceFlowConfigSourceConnectorPropertiesSalesforce struct {
	// Flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow.
	EnableDynamicFieldUpdate *bool `pulumi:"enableDynamicFieldUpdate"`
	// Whether Amazon AppFlow includes deleted files in the flow run.
	IncludeDeletedRecords *bool `pulumi:"includeDeletedRecords"`
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs struct {
	// Flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow.
	EnableDynamicFieldUpdate pulumix.Input[*bool] `pulumi:"enableDynamicFieldUpdate"`
	// Whether Amazon AppFlow includes deleted files in the flow run.
	IncludeDeletedRecords pulumix.Input[*bool] `pulumi:"includeDeletedRecords"`
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesSalesforce)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput() FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesSalesforce)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput() FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesSalesforce] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesSalesforce]{
		OutputState: o.OutputState,
	}
}

// Flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow.
func (o FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput) EnableDynamicFieldUpdate() pulumix.Output[*bool] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesSalesforce](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesSalesforce) *bool {
		return v.EnableDynamicFieldUpdate
	})
}

// Whether Amazon AppFlow includes deleted files in the flow run.
func (o FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput) IncludeDeletedRecords() pulumix.Output[*bool] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesSalesforce](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesSalesforce) *bool { return v.IncludeDeletedRecords })
}

// Object specified in the flow destination.
func (o FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesSalesforce](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesSalesforce) string { return v.Object })
}

type FlowSourceFlowConfigSourceConnectorPropertiesSapoData struct {
	// Object path specified in the SAPOData flow destination.
	ObjectPath string `pulumi:"objectPath"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs struct {
	// Object path specified in the SAPOData flow destination.
	ObjectPath pulumix.Input[string] `pulumi:"objectPath"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesSapoData)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput() FlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesSapoData)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput() FlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesSapoData] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesSapoData]{
		OutputState: o.OutputState,
	}
}

// Object path specified in the SAPOData flow destination.
func (o FlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput) ObjectPath() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesSapoData](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesSapoData) string { return v.ObjectPath })
}

type FlowSourceFlowConfigSourceConnectorPropertiesServiceNow struct {
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs struct {
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesServiceNow)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput() FlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesServiceNow)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput() FlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesServiceNow] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesServiceNow]{
		OutputState: o.OutputState,
	}
}

// Object specified in the flow destination.
func (o FlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesServiceNow](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesServiceNow) string { return v.Object })
}

type FlowSourceFlowConfigSourceConnectorPropertiesSingular struct {
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs struct {
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesSingular)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesSingularOutput() FlowSourceFlowConfigSourceConnectorPropertiesSingularOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesSingularOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesSingularOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesSingularOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesSingularOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesSingularOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesSingularOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesSingular)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesSingularOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesSingularOutput() FlowSourceFlowConfigSourceConnectorPropertiesSingularOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesSingularOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesSingularOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesSingularOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesSingularOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesSingular] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesSingular]{
		OutputState: o.OutputState,
	}
}

// Object specified in the flow destination.
func (o FlowSourceFlowConfigSourceConnectorPropertiesSingularOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesSingular](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesSingular) string { return v.Object })
}

type FlowSourceFlowConfigSourceConnectorPropertiesSlack struct {
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs struct {
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesSlack)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesSlackOutput() FlowSourceFlowConfigSourceConnectorPropertiesSlackOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesSlackOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesSlackOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesSlackOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesSlackOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesSlack)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesSlackOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesSlackOutput() FlowSourceFlowConfigSourceConnectorPropertiesSlackOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesSlackOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesSlackOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesSlackOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesSlackOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesSlack] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesSlack]{
		OutputState: o.OutputState,
	}
}

// Object specified in the flow destination.
func (o FlowSourceFlowConfigSourceConnectorPropertiesSlackOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesSlack](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesSlack) string { return v.Object })
}

type FlowSourceFlowConfigSourceConnectorPropertiesTrendmicro struct {
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs struct {
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesTrendmicro)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput() FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesTrendmicro)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput() FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesTrendmicro] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesTrendmicro]{
		OutputState: o.OutputState,
	}
}

// Object specified in the flow destination.
func (o FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesTrendmicro](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesTrendmicro) string { return v.Object })
}

type FlowSourceFlowConfigSourceConnectorPropertiesVeeva struct {
	// Document type specified in the Veeva document extract flow.
	DocumentType *string `pulumi:"documentType"`
	// Boolean value to include All Versions of files in Veeva document extract flow.
	IncludeAllVersions *bool `pulumi:"includeAllVersions"`
	// Boolean value to include file renditions in Veeva document extract flow.
	IncludeRenditions *bool `pulumi:"includeRenditions"`
	// Boolean value to include source files in Veeva document extract flow.
	IncludeSourceFiles *bool `pulumi:"includeSourceFiles"`
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs struct {
	// Document type specified in the Veeva document extract flow.
	DocumentType pulumix.Input[*string] `pulumi:"documentType"`
	// Boolean value to include All Versions of files in Veeva document extract flow.
	IncludeAllVersions pulumix.Input[*bool] `pulumi:"includeAllVersions"`
	// Boolean value to include file renditions in Veeva document extract flow.
	IncludeRenditions pulumix.Input[*bool] `pulumi:"includeRenditions"`
	// Boolean value to include source files in Veeva document extract flow.
	IncludeSourceFiles pulumix.Input[*bool] `pulumi:"includeSourceFiles"`
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesVeeva)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput() FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesVeevaOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesVeevaOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesVeeva)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput() FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesVeevaOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesVeeva] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesVeeva]{
		OutputState: o.OutputState,
	}
}

// Document type specified in the Veeva document extract flow.
func (o FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput) DocumentType() pulumix.Output[*string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesVeeva](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesVeeva) *string { return v.DocumentType })
}

// Boolean value to include All Versions of files in Veeva document extract flow.
func (o FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput) IncludeAllVersions() pulumix.Output[*bool] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesVeeva](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesVeeva) *bool { return v.IncludeAllVersions })
}

// Boolean value to include file renditions in Veeva document extract flow.
func (o FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput) IncludeRenditions() pulumix.Output[*bool] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesVeeva](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesVeeva) *bool { return v.IncludeRenditions })
}

// Boolean value to include source files in Veeva document extract flow.
func (o FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput) IncludeSourceFiles() pulumix.Output[*bool] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesVeeva](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesVeeva) *bool { return v.IncludeSourceFiles })
}

// Object specified in the flow destination.
func (o FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesVeeva](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesVeeva) string { return v.Object })
}

type FlowSourceFlowConfigSourceConnectorPropertiesZendesk struct {
	// Object specified in the flow destination.
	Object string `pulumi:"object"`
}

type FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs struct {
	// Object specified in the flow destination.
	Object pulumix.Input[string] `pulumi:"object"`
}

func (FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesZendesk)(nil)).Elem()
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput() FlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput {
	return i.ToFlowSourceFlowConfigSourceConnectorPropertiesZendeskOutputWithContext(context.Background())
}

func (i FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs) ToFlowSourceFlowConfigSourceConnectorPropertiesZendeskOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput)
}

func (i *FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs] {
	return pulumix.Val(i)
}

type FlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput struct{ *pulumi.OutputState }

func (FlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceFlowConfigSourceConnectorPropertiesZendesk)(nil)).Elem()
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput() FlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput) ToFlowSourceFlowConfigSourceConnectorPropertiesZendeskOutputWithContext(ctx context.Context) FlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput {
	return o
}

func (o FlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesZendesk] {
	return pulumix.Output[FlowSourceFlowConfigSourceConnectorPropertiesZendesk]{
		OutputState: o.OutputState,
	}
}

// Object specified in the flow destination.
func (o FlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput) Object() pulumix.Output[string] {
	return pulumix.Apply[FlowSourceFlowConfigSourceConnectorPropertiesZendesk](o, func(v FlowSourceFlowConfigSourceConnectorPropertiesZendesk) string { return v.Object })
}

type FlowTask struct {
	// Operation to be performed on the provided source fields. See Connector Operator for details.
	ConnectorOperators []FlowTaskConnectorOperator `pulumi:"connectorOperators"`
	// Field in a destination connector, or a field value against which Amazon AppFlow validates a source field.
	DestinationField *string `pulumi:"destinationField"`
	// Source fields to which a particular task is applied.
	SourceFields []string `pulumi:"sourceFields"`
	// Map used to store task-related information. The execution service looks for particular information based on the `TaskType`. Valid keys are `VALUE`, `VALUES`, `DATA_TYPE`, `UPPER_BOUND`, `LOWER_BOUND`, `SOURCE_DATA_TYPE`, `DESTINATION_DATA_TYPE`, `VALIDATION_ACTION`, `MASK_VALUE`, `MASK_LENGTH`, `TRUNCATE_LENGTH`, `MATH_OPERATION_FIELDS_ORDER`, `CONCAT_FORMAT`, `SUBFIELD_CATEGORY_MAP`, and `EXCLUDE_SOURCE_FIELDS_LIST`.
	TaskProperties map[string]string `pulumi:"taskProperties"`
	// Particular task implementation that Amazon AppFlow performs. Valid values are `Arithmetic`, `Filter`, `Map`, `Map_all`, `Mask`, `Merge`, `Passthrough`, `Truncate`, and `Validate`.
	TaskType string `pulumi:"taskType"`
}

type FlowTaskArgs struct {
	// Operation to be performed on the provided source fields. See Connector Operator for details.
	ConnectorOperators pulumix.Input[[]*FlowTaskConnectorOperatorArgs] `pulumi:"connectorOperators"`
	// Field in a destination connector, or a field value against which Amazon AppFlow validates a source field.
	DestinationField pulumix.Input[*string] `pulumi:"destinationField"`
	// Source fields to which a particular task is applied.
	SourceFields pulumix.Input[[]string] `pulumi:"sourceFields"`
	// Map used to store task-related information. The execution service looks for particular information based on the `TaskType`. Valid keys are `VALUE`, `VALUES`, `DATA_TYPE`, `UPPER_BOUND`, `LOWER_BOUND`, `SOURCE_DATA_TYPE`, `DESTINATION_DATA_TYPE`, `VALIDATION_ACTION`, `MASK_VALUE`, `MASK_LENGTH`, `TRUNCATE_LENGTH`, `MATH_OPERATION_FIELDS_ORDER`, `CONCAT_FORMAT`, `SUBFIELD_CATEGORY_MAP`, and `EXCLUDE_SOURCE_FIELDS_LIST`.
	TaskProperties pulumix.Input[map[string]string] `pulumi:"taskProperties"`
	// Particular task implementation that Amazon AppFlow performs. Valid values are `Arithmetic`, `Filter`, `Map`, `Map_all`, `Mask`, `Merge`, `Passthrough`, `Truncate`, and `Validate`.
	TaskType pulumix.Input[string] `pulumi:"taskType"`
}

func (FlowTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTask)(nil)).Elem()
}

func (i FlowTaskArgs) ToFlowTaskOutput() FlowTaskOutput {
	return i.ToFlowTaskOutputWithContext(context.Background())
}

func (i FlowTaskArgs) ToFlowTaskOutputWithContext(ctx context.Context) FlowTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowTaskOutput)
}

func (i *FlowTaskArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowTaskArgs] {
	return pulumix.Val(i)
}

type FlowTaskOutput struct{ *pulumi.OutputState }

func (FlowTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTask)(nil)).Elem()
}

func (o FlowTaskOutput) ToFlowTaskOutput() FlowTaskOutput {
	return o
}

func (o FlowTaskOutput) ToFlowTaskOutputWithContext(ctx context.Context) FlowTaskOutput {
	return o
}

func (o FlowTaskOutput) ToOutput(ctx context.Context) pulumix.Output[FlowTask] {
	return pulumix.Output[FlowTask]{
		OutputState: o.OutputState,
	}
}

// Operation to be performed on the provided source fields. See Connector Operator for details.
func (o FlowTaskOutput) ConnectorOperators() pulumix.GArrayOutput[FlowTaskConnectorOperator, FlowTaskConnectorOperatorOutput] {
	value := pulumix.Apply[FlowTask](o, func(v FlowTask) []FlowTaskConnectorOperator { return v.ConnectorOperators })
	return pulumix.GArrayOutput[FlowTaskConnectorOperator, FlowTaskConnectorOperatorOutput]{OutputState: value.OutputState}
}

// Field in a destination connector, or a field value against which Amazon AppFlow validates a source field.
func (o FlowTaskOutput) DestinationField() pulumix.Output[*string] {
	return pulumix.Apply[FlowTask](o, func(v FlowTask) *string { return v.DestinationField })
}

// Source fields to which a particular task is applied.
func (o FlowTaskOutput) SourceFields() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FlowTask](o, func(v FlowTask) []string { return v.SourceFields })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Map used to store task-related information. The execution service looks for particular information based on the `TaskType`. Valid keys are `VALUE`, `VALUES`, `DATA_TYPE`, `UPPER_BOUND`, `LOWER_BOUND`, `SOURCE_DATA_TYPE`, `DESTINATION_DATA_TYPE`, `VALIDATION_ACTION`, `MASK_VALUE`, `MASK_LENGTH`, `TRUNCATE_LENGTH`, `MATH_OPERATION_FIELDS_ORDER`, `CONCAT_FORMAT`, `SUBFIELD_CATEGORY_MAP`, and `EXCLUDE_SOURCE_FIELDS_LIST`.
func (o FlowTaskOutput) TaskProperties() pulumix.MapOutput[string] {
	value := pulumix.Apply[FlowTask](o, func(v FlowTask) map[string]string { return v.TaskProperties })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Particular task implementation that Amazon AppFlow performs. Valid values are `Arithmetic`, `Filter`, `Map`, `Map_all`, `Mask`, `Merge`, `Passthrough`, `Truncate`, and `Validate`.
func (o FlowTaskOutput) TaskType() pulumix.Output[string] {
	return pulumix.Apply[FlowTask](o, func(v FlowTask) string { return v.TaskType })
}

type FlowTaskConnectorOperator struct {
	// Operation to be performed on the provided Amplitude source fields. The only valid value is `BETWEEN`.
	Amplitude *string `pulumi:"amplitude"`
	// Operators supported by the custom connector. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	CustomConnector *string `pulumi:"customConnector"`
	// Operation to be performed on the provided Datadog source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Datadog *string `pulumi:"datadog"`
	// Operation to be performed on the provided Dynatrace source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Dynatrace *string `pulumi:"dynatrace"`
	// Operation to be performed on the provided Google Analytics source fields. Valid values are `PROJECTION` and `BETWEEN`.
	GoogleAnalytics *string `pulumi:"googleAnalytics"`
	// Operation to be performed on the provided Infor Nexus source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	InforNexus *string `pulumi:"inforNexus"`
	// Operation to be performed on the provided Marketo source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Marketo *string `pulumi:"marketo"`
	// Operation to be performed on the provided Amazon S3 source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	S3 *string `pulumi:"s3"`
	// Operation to be performed on the provided Salesforce source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Salesforce *string `pulumi:"salesforce"`
	// Operation to be performed on the provided SAPOData source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	SapoData *string `pulumi:"sapoData"`
	// Operation to be performed on the provided ServiceNow source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	ServiceNow *string `pulumi:"serviceNow"`
	// Operation to be performed on the provided Singular source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Singular *string `pulumi:"singular"`
	// Operation to be performed on the provided Slack source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Slack *string `pulumi:"slack"`
	// Operation to be performed on the provided Trend Micro source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Trendmicro *string `pulumi:"trendmicro"`
	// Operation to be performed on the provided Veeva source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Veeva *string `pulumi:"veeva"`
	// Operation to be performed on the provided Zendesk source fields. Valid values are `PROJECTION`, `GREATER_THAN`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Zendesk *string `pulumi:"zendesk"`
}

type FlowTaskConnectorOperatorArgs struct {
	// Operation to be performed on the provided Amplitude source fields. The only valid value is `BETWEEN`.
	Amplitude pulumix.Input[*string] `pulumi:"amplitude"`
	// Operators supported by the custom connector. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	CustomConnector pulumix.Input[*string] `pulumi:"customConnector"`
	// Operation to be performed on the provided Datadog source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Datadog pulumix.Input[*string] `pulumi:"datadog"`
	// Operation to be performed on the provided Dynatrace source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Dynatrace pulumix.Input[*string] `pulumi:"dynatrace"`
	// Operation to be performed on the provided Google Analytics source fields. Valid values are `PROJECTION` and `BETWEEN`.
	GoogleAnalytics pulumix.Input[*string] `pulumi:"googleAnalytics"`
	// Operation to be performed on the provided Infor Nexus source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	InforNexus pulumix.Input[*string] `pulumi:"inforNexus"`
	// Operation to be performed on the provided Marketo source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Marketo pulumix.Input[*string] `pulumi:"marketo"`
	// Operation to be performed on the provided Amazon S3 source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	S3 pulumix.Input[*string] `pulumi:"s3"`
	// Operation to be performed on the provided Salesforce source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Salesforce pulumix.Input[*string] `pulumi:"salesforce"`
	// Operation to be performed on the provided SAPOData source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	SapoData pulumix.Input[*string] `pulumi:"sapoData"`
	// Operation to be performed on the provided ServiceNow source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	ServiceNow pulumix.Input[*string] `pulumi:"serviceNow"`
	// Operation to be performed on the provided Singular source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Singular pulumix.Input[*string] `pulumi:"singular"`
	// Operation to be performed on the provided Slack source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Slack pulumix.Input[*string] `pulumi:"slack"`
	// Operation to be performed on the provided Trend Micro source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Trendmicro pulumix.Input[*string] `pulumi:"trendmicro"`
	// Operation to be performed on the provided Veeva source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Veeva pulumix.Input[*string] `pulumi:"veeva"`
	// Operation to be performed on the provided Zendesk source fields. Valid values are `PROJECTION`, `GREATER_THAN`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
	Zendesk pulumix.Input[*string] `pulumi:"zendesk"`
}

func (FlowTaskConnectorOperatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTaskConnectorOperator)(nil)).Elem()
}

func (i FlowTaskConnectorOperatorArgs) ToFlowTaskConnectorOperatorOutput() FlowTaskConnectorOperatorOutput {
	return i.ToFlowTaskConnectorOperatorOutputWithContext(context.Background())
}

func (i FlowTaskConnectorOperatorArgs) ToFlowTaskConnectorOperatorOutputWithContext(ctx context.Context) FlowTaskConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowTaskConnectorOperatorOutput)
}

func (i *FlowTaskConnectorOperatorArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowTaskConnectorOperatorArgs] {
	return pulumix.Val(i)
}

type FlowTaskConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowTaskConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTaskConnectorOperator)(nil)).Elem()
}

func (o FlowTaskConnectorOperatorOutput) ToFlowTaskConnectorOperatorOutput() FlowTaskConnectorOperatorOutput {
	return o
}

func (o FlowTaskConnectorOperatorOutput) ToFlowTaskConnectorOperatorOutputWithContext(ctx context.Context) FlowTaskConnectorOperatorOutput {
	return o
}

func (o FlowTaskConnectorOperatorOutput) ToOutput(ctx context.Context) pulumix.Output[FlowTaskConnectorOperator] {
	return pulumix.Output[FlowTaskConnectorOperator]{
		OutputState: o.OutputState,
	}
}

// Operation to be performed on the provided Amplitude source fields. The only valid value is `BETWEEN`.
func (o FlowTaskConnectorOperatorOutput) Amplitude() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.Amplitude })
}

// Operators supported by the custom connector. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowTaskConnectorOperatorOutput) CustomConnector() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.CustomConnector })
}

// Operation to be performed on the provided Datadog source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowTaskConnectorOperatorOutput) Datadog() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.Datadog })
}

// Operation to be performed on the provided Dynatrace source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowTaskConnectorOperatorOutput) Dynatrace() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.Dynatrace })
}

// Operation to be performed on the provided Google Analytics source fields. Valid values are `PROJECTION` and `BETWEEN`.
func (o FlowTaskConnectorOperatorOutput) GoogleAnalytics() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.GoogleAnalytics })
}

// Operation to be performed on the provided Infor Nexus source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowTaskConnectorOperatorOutput) InforNexus() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.InforNexus })
}

// Operation to be performed on the provided Marketo source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowTaskConnectorOperatorOutput) Marketo() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.Marketo })
}

// Operation to be performed on the provided Amazon S3 source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowTaskConnectorOperatorOutput) S3() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.S3 })
}

// Operation to be performed on the provided Salesforce source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowTaskConnectorOperatorOutput) Salesforce() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.Salesforce })
}

// Operation to be performed on the provided SAPOData source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowTaskConnectorOperatorOutput) SapoData() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.SapoData })
}

// Operation to be performed on the provided ServiceNow source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowTaskConnectorOperatorOutput) ServiceNow() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.ServiceNow })
}

// Operation to be performed on the provided Singular source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowTaskConnectorOperatorOutput) Singular() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.Singular })
}

// Operation to be performed on the provided Slack source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowTaskConnectorOperatorOutput) Slack() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.Slack })
}

// Operation to be performed on the provided Trend Micro source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowTaskConnectorOperatorOutput) Trendmicro() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.Trendmicro })
}

// Operation to be performed on the provided Veeva source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowTaskConnectorOperatorOutput) Veeva() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.Veeva })
}

// Operation to be performed on the provided Zendesk source fields. Valid values are `PROJECTION`, `GREATER_THAN`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
func (o FlowTaskConnectorOperatorOutput) Zendesk() pulumix.Output[*string] {
	return pulumix.Apply[FlowTaskConnectorOperator](o, func(v FlowTaskConnectorOperator) *string { return v.Zendesk })
}

type FlowTriggerConfig struct {
	// Configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the `Scheduled` trigger type. See Scheduled Trigger Properties for details.
	TriggerProperties *FlowTriggerConfigTriggerProperties `pulumi:"triggerProperties"`
	// Type of flow trigger. Valid values are `Scheduled`, `Event`, and `OnDemand`.
	TriggerType string `pulumi:"triggerType"`
}

type FlowTriggerConfigArgs struct {
	// Configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the `Scheduled` trigger type. See Scheduled Trigger Properties for details.
	TriggerProperties pulumix.Input[*FlowTriggerConfigTriggerPropertiesArgs] `pulumi:"triggerProperties"`
	// Type of flow trigger. Valid values are `Scheduled`, `Event`, and `OnDemand`.
	TriggerType pulumix.Input[string] `pulumi:"triggerType"`
}

func (FlowTriggerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTriggerConfig)(nil)).Elem()
}

func (i FlowTriggerConfigArgs) ToFlowTriggerConfigOutput() FlowTriggerConfigOutput {
	return i.ToFlowTriggerConfigOutputWithContext(context.Background())
}

func (i FlowTriggerConfigArgs) ToFlowTriggerConfigOutputWithContext(ctx context.Context) FlowTriggerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowTriggerConfigOutput)
}

func (i *FlowTriggerConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowTriggerConfigArgs] {
	return pulumix.Val(i)
}

type FlowTriggerConfigOutput struct{ *pulumi.OutputState }

func (FlowTriggerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTriggerConfig)(nil)).Elem()
}

func (o FlowTriggerConfigOutput) ToFlowTriggerConfigOutput() FlowTriggerConfigOutput {
	return o
}

func (o FlowTriggerConfigOutput) ToFlowTriggerConfigOutputWithContext(ctx context.Context) FlowTriggerConfigOutput {
	return o
}

func (o FlowTriggerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FlowTriggerConfig] {
	return pulumix.Output[FlowTriggerConfig]{
		OutputState: o.OutputState,
	}
}

// Configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the `Scheduled` trigger type. See Scheduled Trigger Properties for details.
func (o FlowTriggerConfigOutput) TriggerProperties() pulumix.GPtrOutput[FlowTriggerConfigTriggerProperties, FlowTriggerConfigTriggerPropertiesOutput] {
	value := pulumix.Apply[FlowTriggerConfig](o, func(v FlowTriggerConfig) *FlowTriggerConfigTriggerProperties { return v.TriggerProperties })
	return pulumix.GPtrOutput[FlowTriggerConfigTriggerProperties, FlowTriggerConfigTriggerPropertiesOutput]{OutputState: value.OutputState}
}

// Type of flow trigger. Valid values are `Scheduled`, `Event`, and `OnDemand`.
func (o FlowTriggerConfigOutput) TriggerType() pulumix.Output[string] {
	return pulumix.Apply[FlowTriggerConfig](o, func(v FlowTriggerConfig) string { return v.TriggerType })
}

type FlowTriggerConfigTriggerProperties struct {
	Scheduled *FlowTriggerConfigTriggerPropertiesScheduled `pulumi:"scheduled"`
}

type FlowTriggerConfigTriggerPropertiesArgs struct {
	Scheduled pulumix.Input[*FlowTriggerConfigTriggerPropertiesScheduledArgs] `pulumi:"scheduled"`
}

func (FlowTriggerConfigTriggerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTriggerConfigTriggerProperties)(nil)).Elem()
}

func (i FlowTriggerConfigTriggerPropertiesArgs) ToFlowTriggerConfigTriggerPropertiesOutput() FlowTriggerConfigTriggerPropertiesOutput {
	return i.ToFlowTriggerConfigTriggerPropertiesOutputWithContext(context.Background())
}

func (i FlowTriggerConfigTriggerPropertiesArgs) ToFlowTriggerConfigTriggerPropertiesOutputWithContext(ctx context.Context) FlowTriggerConfigTriggerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowTriggerConfigTriggerPropertiesOutput)
}

func (i *FlowTriggerConfigTriggerPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowTriggerConfigTriggerPropertiesArgs] {
	return pulumix.Val(i)
}

type FlowTriggerConfigTriggerPropertiesOutput struct{ *pulumi.OutputState }

func (FlowTriggerConfigTriggerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTriggerConfigTriggerProperties)(nil)).Elem()
}

func (o FlowTriggerConfigTriggerPropertiesOutput) ToFlowTriggerConfigTriggerPropertiesOutput() FlowTriggerConfigTriggerPropertiesOutput {
	return o
}

func (o FlowTriggerConfigTriggerPropertiesOutput) ToFlowTriggerConfigTriggerPropertiesOutputWithContext(ctx context.Context) FlowTriggerConfigTriggerPropertiesOutput {
	return o
}

func (o FlowTriggerConfigTriggerPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[FlowTriggerConfigTriggerProperties] {
	return pulumix.Output[FlowTriggerConfigTriggerProperties]{
		OutputState: o.OutputState,
	}
}

func (o FlowTriggerConfigTriggerPropertiesOutput) Scheduled() pulumix.GPtrOutput[FlowTriggerConfigTriggerPropertiesScheduled, FlowTriggerConfigTriggerPropertiesScheduledOutput] {
	value := pulumix.Apply[FlowTriggerConfigTriggerProperties](o, func(v FlowTriggerConfigTriggerProperties) *FlowTriggerConfigTriggerPropertiesScheduled {
		return v.Scheduled
	})
	return pulumix.GPtrOutput[FlowTriggerConfigTriggerPropertiesScheduled, FlowTriggerConfigTriggerPropertiesScheduledOutput]{OutputState: value.OutputState}
}

type FlowTriggerConfigTriggerPropertiesScheduled struct {
	// Whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. Valid values are `Incremental` and `Complete`.
	DataPullMode *string `pulumi:"dataPullMode"`
	// Date range for the records to import from the connector in the first flow run. Must be a valid RFC3339 timestamp.
	FirstExecutionFrom *string `pulumi:"firstExecutionFrom"`
	// Scheduled end time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
	ScheduleEndTime *string `pulumi:"scheduleEndTime"`
	// Scheduling expression that determines the rate at which the schedule will run, for example `rate(5minutes)`.
	ScheduleExpression string `pulumi:"scheduleExpression"`
	// Optional offset that is added to the time interval for a schedule-triggered flow. Maximum value of 36000.
	ScheduleOffset *int `pulumi:"scheduleOffset"`
	// Scheduled start time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
	ScheduleStartTime *string `pulumi:"scheduleStartTime"`
	// Time zone used when referring to the date and time of a scheduled-triggered flow, such as `America/New_York`.
	Timezone *string `pulumi:"timezone"`
}

type FlowTriggerConfigTriggerPropertiesScheduledArgs struct {
	// Whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. Valid values are `Incremental` and `Complete`.
	DataPullMode pulumix.Input[*string] `pulumi:"dataPullMode"`
	// Date range for the records to import from the connector in the first flow run. Must be a valid RFC3339 timestamp.
	FirstExecutionFrom pulumix.Input[*string] `pulumi:"firstExecutionFrom"`
	// Scheduled end time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
	ScheduleEndTime pulumix.Input[*string] `pulumi:"scheduleEndTime"`
	// Scheduling expression that determines the rate at which the schedule will run, for example `rate(5minutes)`.
	ScheduleExpression pulumix.Input[string] `pulumi:"scheduleExpression"`
	// Optional offset that is added to the time interval for a schedule-triggered flow. Maximum value of 36000.
	ScheduleOffset pulumix.Input[*int] `pulumi:"scheduleOffset"`
	// Scheduled start time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
	ScheduleStartTime pulumix.Input[*string] `pulumi:"scheduleStartTime"`
	// Time zone used when referring to the date and time of a scheduled-triggered flow, such as `America/New_York`.
	Timezone pulumix.Input[*string] `pulumi:"timezone"`
}

func (FlowTriggerConfigTriggerPropertiesScheduledArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTriggerConfigTriggerPropertiesScheduled)(nil)).Elem()
}

func (i FlowTriggerConfigTriggerPropertiesScheduledArgs) ToFlowTriggerConfigTriggerPropertiesScheduledOutput() FlowTriggerConfigTriggerPropertiesScheduledOutput {
	return i.ToFlowTriggerConfigTriggerPropertiesScheduledOutputWithContext(context.Background())
}

func (i FlowTriggerConfigTriggerPropertiesScheduledArgs) ToFlowTriggerConfigTriggerPropertiesScheduledOutputWithContext(ctx context.Context) FlowTriggerConfigTriggerPropertiesScheduledOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowTriggerConfigTriggerPropertiesScheduledOutput)
}

func (i *FlowTriggerConfigTriggerPropertiesScheduledArgs) ToOutput(ctx context.Context) pulumix.Output[*FlowTriggerConfigTriggerPropertiesScheduledArgs] {
	return pulumix.Val(i)
}

type FlowTriggerConfigTriggerPropertiesScheduledOutput struct{ *pulumi.OutputState }

func (FlowTriggerConfigTriggerPropertiesScheduledOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTriggerConfigTriggerPropertiesScheduled)(nil)).Elem()
}

func (o FlowTriggerConfigTriggerPropertiesScheduledOutput) ToFlowTriggerConfigTriggerPropertiesScheduledOutput() FlowTriggerConfigTriggerPropertiesScheduledOutput {
	return o
}

func (o FlowTriggerConfigTriggerPropertiesScheduledOutput) ToFlowTriggerConfigTriggerPropertiesScheduledOutputWithContext(ctx context.Context) FlowTriggerConfigTriggerPropertiesScheduledOutput {
	return o
}

func (o FlowTriggerConfigTriggerPropertiesScheduledOutput) ToOutput(ctx context.Context) pulumix.Output[FlowTriggerConfigTriggerPropertiesScheduled] {
	return pulumix.Output[FlowTriggerConfigTriggerPropertiesScheduled]{
		OutputState: o.OutputState,
	}
}

// Whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. Valid values are `Incremental` and `Complete`.
func (o FlowTriggerConfigTriggerPropertiesScheduledOutput) DataPullMode() pulumix.Output[*string] {
	return pulumix.Apply[FlowTriggerConfigTriggerPropertiesScheduled](o, func(v FlowTriggerConfigTriggerPropertiesScheduled) *string { return v.DataPullMode })
}

// Date range for the records to import from the connector in the first flow run. Must be a valid RFC3339 timestamp.
func (o FlowTriggerConfigTriggerPropertiesScheduledOutput) FirstExecutionFrom() pulumix.Output[*string] {
	return pulumix.Apply[FlowTriggerConfigTriggerPropertiesScheduled](o, func(v FlowTriggerConfigTriggerPropertiesScheduled) *string { return v.FirstExecutionFrom })
}

// Scheduled end time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
func (o FlowTriggerConfigTriggerPropertiesScheduledOutput) ScheduleEndTime() pulumix.Output[*string] {
	return pulumix.Apply[FlowTriggerConfigTriggerPropertiesScheduled](o, func(v FlowTriggerConfigTriggerPropertiesScheduled) *string { return v.ScheduleEndTime })
}

// Scheduling expression that determines the rate at which the schedule will run, for example `rate(5minutes)`.
func (o FlowTriggerConfigTriggerPropertiesScheduledOutput) ScheduleExpression() pulumix.Output[string] {
	return pulumix.Apply[FlowTriggerConfigTriggerPropertiesScheduled](o, func(v FlowTriggerConfigTriggerPropertiesScheduled) string { return v.ScheduleExpression })
}

// Optional offset that is added to the time interval for a schedule-triggered flow. Maximum value of 36000.
func (o FlowTriggerConfigTriggerPropertiesScheduledOutput) ScheduleOffset() pulumix.Output[*int] {
	return pulumix.Apply[FlowTriggerConfigTriggerPropertiesScheduled](o, func(v FlowTriggerConfigTriggerPropertiesScheduled) *int { return v.ScheduleOffset })
}

// Scheduled start time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
func (o FlowTriggerConfigTriggerPropertiesScheduledOutput) ScheduleStartTime() pulumix.Output[*string] {
	return pulumix.Apply[FlowTriggerConfigTriggerPropertiesScheduled](o, func(v FlowTriggerConfigTriggerPropertiesScheduled) *string { return v.ScheduleStartTime })
}

// Time zone used when referring to the date and time of a scheduled-triggered flow, such as `America/New_York`.
func (o FlowTriggerConfigTriggerPropertiesScheduledOutput) Timezone() pulumix.Output[*string] {
	return pulumix.Apply[FlowTriggerConfigTriggerPropertiesScheduled](o, func(v FlowTriggerConfigTriggerPropertiesScheduled) *string { return v.Timezone })
}

func init() {
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Output{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesS3Output{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutput{})
	pulumi.RegisterOutputType(FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigIncrementalPullConfigOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesDatadogOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesMarketoOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesS3Output{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesSingularOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesSlackOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesVeevaOutput{})
	pulumi.RegisterOutputType(FlowSourceFlowConfigSourceConnectorPropertiesZendeskOutput{})
	pulumi.RegisterOutputType(FlowTaskOutput{})
	pulumi.RegisterOutputType(FlowTaskConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowTriggerConfigOutput{})
	pulumi.RegisterOutputType(FlowTriggerConfigTriggerPropertiesOutput{})
	pulumi.RegisterOutputType(FlowTriggerConfigTriggerPropertiesScheduledOutput{})
}
