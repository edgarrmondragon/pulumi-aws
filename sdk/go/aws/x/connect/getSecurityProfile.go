// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Connect Security Profile.
func LookupSecurityProfile(ctx *pulumi.Context, args *LookupSecurityProfileArgs, opts ...pulumi.InvokeOption) (*LookupSecurityProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSecurityProfileResult
	err := ctx.Invoke("aws:connect/getSecurityProfile:getSecurityProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityProfile.
type LookupSecurityProfileArgs struct {
	// Reference to the hosting Amazon Connect Instance
	InstanceId string `pulumi:"instanceId"`
	// Returns information on a specific Security Profile by name
	Name *string `pulumi:"name"`
	// Returns information on a specific Security Profile by Security Profile id
	SecurityProfileId *string `pulumi:"securityProfileId"`
	// Map of tags to assign to the Security Profile.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getSecurityProfile.
type LookupSecurityProfileResult struct {
	// ARN of the Security Profile.
	Arn string `pulumi:"arn"`
	// Description of the Security Profile.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	Name       string `pulumi:"name"`
	// The organization resource identifier for the security profile.
	OrganizationResourceId string `pulumi:"organizationResourceId"`
	// List of permissions assigned to the security profile.
	Permissions       []string `pulumi:"permissions"`
	SecurityProfileId string   `pulumi:"securityProfileId"`
	// Map of tags to assign to the Security Profile.
	Tags map[string]string `pulumi:"tags"`
}

func LookupSecurityProfileOutput(ctx *pulumi.Context, args LookupSecurityProfileOutputArgs, opts ...pulumi.InvokeOption) LookupSecurityProfileResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSecurityProfileArgs](args.ToOutput(), func(plainArgs *LookupSecurityProfileArgs) (*LookupSecurityProfileResult, error) {
		return LookupSecurityProfile(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSecurityProfileResultOutput, *LookupSecurityProfileResult](outputResult)
}

// A collection of arguments for invoking getSecurityProfile.
type LookupSecurityProfileOutputArgs struct {
	// Reference to the hosting Amazon Connect Instance
	InstanceId pulumix.Input[string] `pulumi:"instanceId"`
	// Returns information on a specific Security Profile by name
	Name pulumix.Input[*string] `pulumi:"name"`
	// Returns information on a specific Security Profile by Security Profile id
	SecurityProfileId pulumix.Input[*string] `pulumi:"securityProfileId"`
	// Map of tags to assign to the Security Profile.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupSecurityProfileOutputArgs) ToOutput() pulumix.Output[*LookupSecurityProfileArgs] {
	allArgs := pulumix.All(
		args.InstanceId.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.SecurityProfileId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSecurityProfileArgs {
		return &LookupSecurityProfileArgs{
			InstanceId:        resolvedArgs[0].(string),
			Name:              resolvedArgs[1].(*string),
			SecurityProfileId: resolvedArgs[2].(*string),
			Tags:              resolvedArgs[3].(map[string]string),
		}
	})
}

type LookupSecurityProfileResultOutput struct{ *pulumi.OutputState }

func (LookupSecurityProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityProfileResult)(nil)).Elem()
}

func (o LookupSecurityProfileResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSecurityProfileResult] {
	return pulumix.Output[*LookupSecurityProfileResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSecurityProfileResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecurityProfileResult](o, func(v *LookupSecurityProfileResult) string { return v.Arn })
}

func (o LookupSecurityProfileResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecurityProfileResult](o, func(v *LookupSecurityProfileResult) string { return v.Description })
}

func (o LookupSecurityProfileResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecurityProfileResult](o, func(v *LookupSecurityProfileResult) string { return v.Id })
}

func (o LookupSecurityProfileResultOutput) InstanceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecurityProfileResult](o, func(v *LookupSecurityProfileResult) string { return v.InstanceId })
}

func (o LookupSecurityProfileResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecurityProfileResult](o, func(v *LookupSecurityProfileResult) string { return v.Name })
}

func (o LookupSecurityProfileResultOutput) OrganizationResourceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecurityProfileResult](o, func(v *LookupSecurityProfileResult) string { return v.OrganizationResourceId })
}

func (o LookupSecurityProfileResultOutput) Permissions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupSecurityProfileResult](o, func(v *LookupSecurityProfileResult) []string { return v.Permissions })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupSecurityProfileResultOutput) SecurityProfileId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecurityProfileResult](o, func(v *LookupSecurityProfileResult) string { return v.SecurityProfileId })
}

func (o LookupSecurityProfileResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupSecurityProfileResult](o, func(v *LookupSecurityProfileResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
