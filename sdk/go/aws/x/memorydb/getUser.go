// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a MemoryDB User.
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("aws:memorydb/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// Map of tags assigned to the subnet group.
	Tags map[string]string `pulumi:"tags"`
	// Name of the user.
	UserName string `pulumi:"userName"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// Access permissions string used for this user.
	AccessString string `pulumi:"accessString"`
	// ARN of the user.
	Arn string `pulumi:"arn"`
	// Denotes the user's authentication properties.
	AuthenticationModes []GetUserAuthenticationMode `pulumi:"authenticationModes"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The minimum engine version supported for the user.
	MinimumEngineVersion string `pulumi:"minimumEngineVersion"`
	// Map of tags assigned to the subnet group.
	Tags     map[string]string `pulumi:"tags"`
	UserName string            `pulumi:"userName"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	outputResult := pulumix.ApplyErr[*LookupUserArgs](args.ToOutput(), func(plainArgs *LookupUserArgs) (*LookupUserResult, error) {
		return LookupUser(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupUserResultOutput, *LookupUserResult](outputResult)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// Map of tags assigned to the subnet group.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Name of the user.
	UserName pulumix.Input[string] `pulumi:"userName"`
}

func (args LookupUserOutputArgs) ToOutput() pulumix.Output[*LookupUserArgs] {
	allArgs := pulumix.All(
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.UserName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupUserArgs {
		return &LookupUserArgs{
			Tags:     resolvedArgs[0].(map[string]string),
			UserName: resolvedArgs[1].(string),
		}
	})
}

type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToOutput(context.Context) pulumix.Output[*LookupUserResult] {
	return pulumix.Output[*LookupUserResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupUserResultOutput) AccessString() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.AccessString })
}

func (o LookupUserResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.Arn })
}

func (o LookupUserResultOutput) AuthenticationModes() pulumix.GArrayOutput[GetUserAuthenticationMode, GetUserAuthenticationModeOutput] {
	value := pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) []GetUserAuthenticationMode { return v.AuthenticationModes })
	return pulumix.GArrayOutput[GetUserAuthenticationMode, GetUserAuthenticationModeOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.Id })
}

func (o LookupUserResultOutput) MinimumEngineVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.MinimumEngineVersion })
}

func (o LookupUserResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserResultOutput) UserName() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.UserName })
}
