// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about an EKS Node Group.
func LookupNodeGroup(ctx *pulumi.Context, args *LookupNodeGroupArgs, opts ...pulumi.InvokeOption) (*LookupNodeGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNodeGroupResult
	err := ctx.Invoke("aws:eks/getNodeGroup:getNodeGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNodeGroup.
type LookupNodeGroupArgs struct {
	// Name of the cluster.
	ClusterName string `pulumi:"clusterName"`
	// Name of the node group.
	NodeGroupName string `pulumi:"nodeGroupName"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getNodeGroup.
type LookupNodeGroupResult struct {
	// Type of Amazon Machine Image (AMI) associated with the EKS Node Group.
	AmiType string `pulumi:"amiType"`
	// ARN of the EKS Node Group.
	Arn string `pulumi:"arn"`
	// Type of capacity associated with the EKS Node Group. Valid values: `ON_DEMAND`, `SPOT`.
	CapacityType string `pulumi:"capacityType"`
	ClusterName  string `pulumi:"clusterName"`
	// Disk size in GiB for worker nodes.
	DiskSize int `pulumi:"diskSize"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Set of instance types associated with the EKS Node Group.
	InstanceTypes []string `pulumi:"instanceTypes"`
	// Key-value map of Kubernetes labels. Only labels that are applied with the EKS API are managed by this argument. Other Kubernetes labels applied to the EKS Node Group will not be managed.
	Labels map[string]string `pulumi:"labels"`
	// Nested attribute containing information about the launch template used to create the EKS Node Group.
	LaunchTemplates []GetNodeGroupLaunchTemplate `pulumi:"launchTemplates"`
	NodeGroupName   string                       `pulumi:"nodeGroupName"`
	// ARN of the IAM Role that provides permissions for the EKS Node Group.
	NodeRoleArn string `pulumi:"nodeRoleArn"`
	// AMI version of the EKS Node Group.
	ReleaseVersion string `pulumi:"releaseVersion"`
	// Configuration block with remote access settings.
	RemoteAccesses []GetNodeGroupRemoteAccess `pulumi:"remoteAccesses"`
	// List of objects containing information about underlying resources.
	Resources []GetNodeGroupResource `pulumi:"resources"`
	// Configuration block with scaling settings.
	ScalingConfigs []GetNodeGroupScalingConfig `pulumi:"scalingConfigs"`
	// Status of the EKS Node Group.
	Status string `pulumi:"status"`
	// Identifiers of EC2 Subnets to associate with the EKS Node Group.
	SubnetIds []string `pulumi:"subnetIds"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
	// List of objects containing information about taints applied to the nodes in the EKS Node Group.
	Taints []GetNodeGroupTaint `pulumi:"taints"`
	// Kubernetes version.
	Version string `pulumi:"version"`
}

func LookupNodeGroupOutput(ctx *pulumi.Context, args LookupNodeGroupOutputArgs, opts ...pulumi.InvokeOption) LookupNodeGroupResultOutput {
	outputResult := pulumix.ApplyErr[*LookupNodeGroupArgs](args.ToOutput(), func(plainArgs *LookupNodeGroupArgs) (*LookupNodeGroupResult, error) {
		return LookupNodeGroup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupNodeGroupResultOutput, *LookupNodeGroupResult](outputResult)
}

// A collection of arguments for invoking getNodeGroup.
type LookupNodeGroupOutputArgs struct {
	// Name of the cluster.
	ClusterName pulumix.Input[string] `pulumi:"clusterName"`
	// Name of the node group.
	NodeGroupName pulumix.Input[string] `pulumi:"nodeGroupName"`
	// Key-value map of resource tags.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupNodeGroupOutputArgs) ToOutput() pulumix.Output[*LookupNodeGroupArgs] {
	allArgs := pulumix.All(
		args.ClusterName.ToOutput(context.Background()).AsAny(),
		args.NodeGroupName.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupNodeGroupArgs {
		return &LookupNodeGroupArgs{
			ClusterName:   resolvedArgs[0].(string),
			NodeGroupName: resolvedArgs[1].(string),
			Tags:          resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupNodeGroupResultOutput struct{ *pulumi.OutputState }

func (LookupNodeGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNodeGroupResult)(nil)).Elem()
}

func (o LookupNodeGroupResultOutput) ToOutput(context.Context) pulumix.Output[*LookupNodeGroupResult] {
	return pulumix.Output[*LookupNodeGroupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupNodeGroupResultOutput) AmiType() pulumix.Output[string] {
	return pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) string { return v.AmiType })
}

func (o LookupNodeGroupResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) string { return v.Arn })
}

func (o LookupNodeGroupResultOutput) CapacityType() pulumix.Output[string] {
	return pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) string { return v.CapacityType })
}

func (o LookupNodeGroupResultOutput) ClusterName() pulumix.Output[string] {
	return pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) string { return v.ClusterName })
}

func (o LookupNodeGroupResultOutput) DiskSize() pulumix.Output[int] {
	return pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) int { return v.DiskSize })
}

func (o LookupNodeGroupResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) string { return v.Id })
}

func (o LookupNodeGroupResultOutput) InstanceTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) []string { return v.InstanceTypes })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupNodeGroupResultOutput) Labels() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) map[string]string { return v.Labels })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupNodeGroupResultOutput) LaunchTemplates() pulumix.GArrayOutput[GetNodeGroupLaunchTemplate, GetNodeGroupLaunchTemplateOutput] {
	value := pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) []GetNodeGroupLaunchTemplate { return v.LaunchTemplates })
	return pulumix.GArrayOutput[GetNodeGroupLaunchTemplate, GetNodeGroupLaunchTemplateOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupNodeGroupResultOutput) NodeGroupName() pulumix.Output[string] {
	return pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) string { return v.NodeGroupName })
}

func (o LookupNodeGroupResultOutput) NodeRoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) string { return v.NodeRoleArn })
}

func (o LookupNodeGroupResultOutput) ReleaseVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) string { return v.ReleaseVersion })
}

func (o LookupNodeGroupResultOutput) RemoteAccesses() pulumix.GArrayOutput[GetNodeGroupRemoteAccess, GetNodeGroupRemoteAccessOutput] {
	value := pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) []GetNodeGroupRemoteAccess { return v.RemoteAccesses })
	return pulumix.GArrayOutput[GetNodeGroupRemoteAccess, GetNodeGroupRemoteAccessOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupNodeGroupResultOutput) Resources() pulumix.GArrayOutput[GetNodeGroupResource, GetNodeGroupResourceOutput] {
	value := pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) []GetNodeGroupResource { return v.Resources })
	return pulumix.GArrayOutput[GetNodeGroupResource, GetNodeGroupResourceOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupNodeGroupResultOutput) ScalingConfigs() pulumix.GArrayOutput[GetNodeGroupScalingConfig, GetNodeGroupScalingConfigOutput] {
	value := pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) []GetNodeGroupScalingConfig { return v.ScalingConfigs })
	return pulumix.GArrayOutput[GetNodeGroupScalingConfig, GetNodeGroupScalingConfigOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupNodeGroupResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) string { return v.Status })
}

func (o LookupNodeGroupResultOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupNodeGroupResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupNodeGroupResultOutput) Taints() pulumix.GArrayOutput[GetNodeGroupTaint, GetNodeGroupTaintOutput] {
	value := pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) []GetNodeGroupTaint { return v.Taints })
	return pulumix.GArrayOutput[GetNodeGroupTaint, GetNodeGroupTaintOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupNodeGroupResultOutput) Version() pulumix.Output[string] {
	return pulumix.Apply[*LookupNodeGroupResult](o, func(v *LookupNodeGroupResult) string { return v.Version })
}
