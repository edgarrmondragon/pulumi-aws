// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a managed prefix list resource.
//
// > **NOTE on Managed Prefix Lists and Managed Prefix List Entries:** The provider
// currently provides both a standalone Managed Prefix List Entry resource (a single entry),
// and a Managed Prefix List resource with entries defined in-line. At this time you
// cannot use a Managed Prefix List with in-line rules in conjunction with any Managed
// Prefix List Entry resources. Doing so will cause a conflict of entries and will overwrite entries.
//
// > **NOTE on `maxEntries`:** When you reference a Prefix List in a resource,
// the maximum number of entries for the prefix lists counts as the same number of rules
// or entries for the resource. For example, if you create a prefix list with a maximum
// of 20 entries and you reference that prefix list in a security group rule, this counts
// as 20 rules for the security group.
type ManagedPrefixList struct {
	pulumi.CustomResourceState

	// Address family (`IPv4` or `IPv6`) of this prefix list.
	AddressFamily pulumix.Output[string] `pulumi:"addressFamily"`
	// ARN of the prefix list.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Configuration block for prefix list entry. Detailed below. Different entries may have overlapping CIDR blocks, but a particular CIDR should not be duplicated.
	Entries pulumix.GArrayOutput[ManagedPrefixListEntryType, ManagedPrefixListEntryTypeOutput] `pulumi:"entries"`
	// Maximum number of entries that this prefix list can contain.
	MaxEntries pulumix.Output[int] `pulumi:"maxEntries"`
	// Name of this resource. The name must not start with `com.amazonaws`.
	Name pulumix.Output[string] `pulumi:"name"`
	// ID of the AWS account that owns this prefix list.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Latest version of this prefix list.
	Version pulumix.Output[int] `pulumi:"version"`
}

// NewManagedPrefixList registers a new resource with the given unique name, arguments, and options.
func NewManagedPrefixList(ctx *pulumi.Context,
	name string, args *ManagedPrefixListArgs, opts ...pulumi.ResourceOption) (*ManagedPrefixList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressFamily == nil {
		return nil, errors.New("invalid value for required argument 'AddressFamily'")
	}
	if args.MaxEntries == nil {
		return nil, errors.New("invalid value for required argument 'MaxEntries'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedPrefixList
	err := ctx.RegisterResource("aws:ec2/managedPrefixList:ManagedPrefixList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedPrefixList gets an existing ManagedPrefixList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedPrefixList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedPrefixListState, opts ...pulumi.ResourceOption) (*ManagedPrefixList, error) {
	var resource ManagedPrefixList
	err := ctx.ReadResource("aws:ec2/managedPrefixList:ManagedPrefixList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedPrefixList resources.
type managedPrefixListState struct {
	// Address family (`IPv4` or `IPv6`) of this prefix list.
	AddressFamily *string `pulumi:"addressFamily"`
	// ARN of the prefix list.
	Arn *string `pulumi:"arn"`
	// Configuration block for prefix list entry. Detailed below. Different entries may have overlapping CIDR blocks, but a particular CIDR should not be duplicated.
	Entries []ManagedPrefixListEntryType `pulumi:"entries"`
	// Maximum number of entries that this prefix list can contain.
	MaxEntries *int `pulumi:"maxEntries"`
	// Name of this resource. The name must not start with `com.amazonaws`.
	Name *string `pulumi:"name"`
	// ID of the AWS account that owns this prefix list.
	OwnerId *string `pulumi:"ownerId"`
	// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Latest version of this prefix list.
	Version *int `pulumi:"version"`
}

type ManagedPrefixListState struct {
	// Address family (`IPv4` or `IPv6`) of this prefix list.
	AddressFamily pulumix.Input[*string]
	// ARN of the prefix list.
	Arn pulumix.Input[*string]
	// Configuration block for prefix list entry. Detailed below. Different entries may have overlapping CIDR blocks, but a particular CIDR should not be duplicated.
	Entries pulumix.Input[[]*ManagedPrefixListEntryTypeArgs]
	// Maximum number of entries that this prefix list can contain.
	MaxEntries pulumix.Input[*int]
	// Name of this resource. The name must not start with `com.amazonaws`.
	Name pulumix.Input[*string]
	// ID of the AWS account that owns this prefix list.
	OwnerId pulumix.Input[*string]
	// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Latest version of this prefix list.
	Version pulumix.Input[*int]
}

func (ManagedPrefixListState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedPrefixListState)(nil)).Elem()
}

type managedPrefixListArgs struct {
	// Address family (`IPv4` or `IPv6`) of this prefix list.
	AddressFamily string `pulumi:"addressFamily"`
	// Configuration block for prefix list entry. Detailed below. Different entries may have overlapping CIDR blocks, but a particular CIDR should not be duplicated.
	Entries []ManagedPrefixListEntryType `pulumi:"entries"`
	// Maximum number of entries that this prefix list can contain.
	MaxEntries int `pulumi:"maxEntries"`
	// Name of this resource. The name must not start with `com.amazonaws`.
	Name *string `pulumi:"name"`
	// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ManagedPrefixList resource.
type ManagedPrefixListArgs struct {
	// Address family (`IPv4` or `IPv6`) of this prefix list.
	AddressFamily pulumix.Input[string]
	// Configuration block for prefix list entry. Detailed below. Different entries may have overlapping CIDR blocks, but a particular CIDR should not be duplicated.
	Entries pulumix.Input[[]*ManagedPrefixListEntryTypeArgs]
	// Maximum number of entries that this prefix list can contain.
	MaxEntries pulumix.Input[int]
	// Name of this resource. The name must not start with `com.amazonaws`.
	Name pulumix.Input[*string]
	// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ManagedPrefixListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedPrefixListArgs)(nil)).Elem()
}

type ManagedPrefixListOutput struct{ *pulumi.OutputState }

func (ManagedPrefixListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrefixList)(nil)).Elem()
}

func (o ManagedPrefixListOutput) ToManagedPrefixListOutput() ManagedPrefixListOutput {
	return o
}

func (o ManagedPrefixListOutput) ToManagedPrefixListOutputWithContext(ctx context.Context) ManagedPrefixListOutput {
	return o
}

func (o ManagedPrefixListOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedPrefixList] {
	return pulumix.Output[ManagedPrefixList]{
		OutputState: o.OutputState,
	}
}

// Address family (`IPv4` or `IPv6`) of this prefix list.
func (o ManagedPrefixListOutput) AddressFamily() pulumix.Output[string] {
	value := pulumix.Apply[ManagedPrefixList](o, func(v ManagedPrefixList) pulumix.Output[string] { return v.AddressFamily })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the prefix list.
func (o ManagedPrefixListOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ManagedPrefixList](o, func(v ManagedPrefixList) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for prefix list entry. Detailed below. Different entries may have overlapping CIDR blocks, but a particular CIDR should not be duplicated.
func (o ManagedPrefixListOutput) Entries() pulumix.GArrayOutput[ManagedPrefixListEntryType, ManagedPrefixListEntryTypeOutput] {
	value := pulumix.Apply[ManagedPrefixList](o, func(v ManagedPrefixList) pulumix.GArrayOutput[ManagedPrefixListEntryType, ManagedPrefixListEntryTypeOutput] {
		return v.Entries
	})
	unwrapped := pulumix.Flatten[[]ManagedPrefixListEntryType, pulumix.GArrayOutput[ManagedPrefixListEntryType, ManagedPrefixListEntryTypeOutput]](value)
	return pulumix.GArrayOutput[ManagedPrefixListEntryType, ManagedPrefixListEntryTypeOutput]{OutputState: unwrapped.OutputState}
}

// Maximum number of entries that this prefix list can contain.
func (o ManagedPrefixListOutput) MaxEntries() pulumix.Output[int] {
	value := pulumix.Apply[ManagedPrefixList](o, func(v ManagedPrefixList) pulumix.Output[int] { return v.MaxEntries })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Name of this resource. The name must not start with `com.amazonaws`.
func (o ManagedPrefixListOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ManagedPrefixList](o, func(v ManagedPrefixList) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the AWS account that owns this prefix list.
func (o ManagedPrefixListOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[ManagedPrefixList](o, func(v ManagedPrefixList) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ManagedPrefixListOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ManagedPrefixList](o, func(v ManagedPrefixList) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ManagedPrefixListOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ManagedPrefixList](o, func(v ManagedPrefixList) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Latest version of this prefix list.
func (o ManagedPrefixListOutput) Version() pulumix.Output[int] {
	value := pulumix.Apply[ManagedPrefixList](o, func(v ManagedPrefixList) pulumix.Output[int] { return v.Version })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(ManagedPrefixListOutput{})
}
