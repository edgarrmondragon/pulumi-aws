// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// An Amazon Lightsail container service is a highly scalable compute and networking resource on which you can deploy, run,
// and manage containers. For more information, see
// [Container services in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-services).
//
// > **Note:** For more information about the AWS Regions in which you can create Amazon Lightsail container services,
// see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail).
type ContainerService struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the container service.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The Availability Zone. Follows the format us-east-2a (case-sensitive).
	AvailabilityZone pulumix.Output[string] `pulumi:"availabilityZone"`
	CreatedAt        pulumix.Output[string] `pulumi:"createdAt"`
	// A Boolean value indicating whether the container service is disabled. Defaults to `false`.
	IsDisabled pulumix.Output[*bool] `pulumi:"isDisabled"`
	// The name for the container service. Names must be of length 1 to 63, and be
	// unique within each AWS Region in your Lightsail account.
	Name pulumix.Output[string] `pulumi:"name"`
	// The power specification for the container service. The power specifies the amount of memory,
	// the number of vCPUs, and the monthly price of each node of the container service.
	// Possible values: `nano`, `micro`, `small`, `medium`, `large`, `xlarge`.
	Power pulumix.Output[string] `pulumi:"power"`
	// The ID of the power of the container service.
	PowerId pulumix.Output[string] `pulumi:"powerId"`
	// The principal ARN of the container service. The principal ARN can be used to create a trust
	// relationship between your standard AWS account and your Lightsail container service. This allows you to give your
	// service permission to access resources in your standard AWS account.
	PrincipalArn pulumix.Output[string] `pulumi:"principalArn"`
	// The private domain name of the container service. The private domain name is accessible only
	// by other resources within the default virtual private cloud (VPC) of your Lightsail account.
	PrivateDomainName pulumix.Output[string] `pulumi:"privateDomainName"`
	// An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See Private Registry Access below for more details.
	PrivateRegistryAccess pulumix.GPtrOutput[ContainerServicePrivateRegistryAccess, ContainerServicePrivateRegistryAccessOutput] `pulumi:"privateRegistryAccess"`
	// The public domain names to use with the container service, such as example.com
	// and www.example.com. You can specify up to four public domain names for a container service. The domain names that you
	// specify are used when you create a deployment with a container configured as the public endpoint of your container
	// service. If you don't specify public domain names, then you can use the default domain of the container service.
	// Defined below.
	PublicDomainNames pulumix.GPtrOutput[ContainerServicePublicDomainNames, ContainerServicePublicDomainNamesOutput] `pulumi:"publicDomainNames"`
	// The Lightsail resource type of the container service (i.e., ContainerService).
	ResourceType pulumix.Output[string] `pulumi:"resourceType"`
	// The scale specification for the container service. The scale specifies the allocated compute
	// nodes of the container service.
	Scale pulumix.Output[int] `pulumi:"scale"`
	// The current state of the container service.
	State pulumix.Output[string] `pulumi:"state"`
	// Map of container service tags. To tag at launch, specify the tags in the Launch Template. If
	// configured with a provider
	// `defaultTags` configuration block
	// present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider
	// `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The publicly accessible URL of the container service. If no public endpoint is specified in the
	// currentDeployment, this URL returns a 404 response.
	Url pulumix.Output[string] `pulumi:"url"`
}

// NewContainerService registers a new resource with the given unique name, arguments, and options.
func NewContainerService(ctx *pulumi.Context,
	name string, args *ContainerServiceArgs, opts ...pulumi.ResourceOption) (*ContainerService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Power == nil {
		return nil, errors.New("invalid value for required argument 'Power'")
	}
	if args.Scale == nil {
		return nil, errors.New("invalid value for required argument 'Scale'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContainerService
	err := ctx.RegisterResource("aws:lightsail/containerService:ContainerService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerService gets an existing ContainerService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerServiceState, opts ...pulumi.ResourceOption) (*ContainerService, error) {
	var resource ContainerService
	err := ctx.ReadResource("aws:lightsail/containerService:ContainerService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerService resources.
type containerServiceState struct {
	// The Amazon Resource Name (ARN) of the container service.
	Arn *string `pulumi:"arn"`
	// The Availability Zone. Follows the format us-east-2a (case-sensitive).
	AvailabilityZone *string `pulumi:"availabilityZone"`
	CreatedAt        *string `pulumi:"createdAt"`
	// A Boolean value indicating whether the container service is disabled. Defaults to `false`.
	IsDisabled *bool `pulumi:"isDisabled"`
	// The name for the container service. Names must be of length 1 to 63, and be
	// unique within each AWS Region in your Lightsail account.
	Name *string `pulumi:"name"`
	// The power specification for the container service. The power specifies the amount of memory,
	// the number of vCPUs, and the monthly price of each node of the container service.
	// Possible values: `nano`, `micro`, `small`, `medium`, `large`, `xlarge`.
	Power *string `pulumi:"power"`
	// The ID of the power of the container service.
	PowerId *string `pulumi:"powerId"`
	// The principal ARN of the container service. The principal ARN can be used to create a trust
	// relationship between your standard AWS account and your Lightsail container service. This allows you to give your
	// service permission to access resources in your standard AWS account.
	PrincipalArn *string `pulumi:"principalArn"`
	// The private domain name of the container service. The private domain name is accessible only
	// by other resources within the default virtual private cloud (VPC) of your Lightsail account.
	PrivateDomainName *string `pulumi:"privateDomainName"`
	// An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See Private Registry Access below for more details.
	PrivateRegistryAccess *ContainerServicePrivateRegistryAccess `pulumi:"privateRegistryAccess"`
	// The public domain names to use with the container service, such as example.com
	// and www.example.com. You can specify up to four public domain names for a container service. The domain names that you
	// specify are used when you create a deployment with a container configured as the public endpoint of your container
	// service. If you don't specify public domain names, then you can use the default domain of the container service.
	// Defined below.
	PublicDomainNames *ContainerServicePublicDomainNames `pulumi:"publicDomainNames"`
	// The Lightsail resource type of the container service (i.e., ContainerService).
	ResourceType *string `pulumi:"resourceType"`
	// The scale specification for the container service. The scale specifies the allocated compute
	// nodes of the container service.
	Scale *int `pulumi:"scale"`
	// The current state of the container service.
	State *string `pulumi:"state"`
	// Map of container service tags. To tag at launch, specify the tags in the Launch Template. If
	// configured with a provider
	// `defaultTags` configuration block
	// present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider
	// `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The publicly accessible URL of the container service. If no public endpoint is specified in the
	// currentDeployment, this URL returns a 404 response.
	Url *string `pulumi:"url"`
}

type ContainerServiceState struct {
	// The Amazon Resource Name (ARN) of the container service.
	Arn pulumix.Input[*string]
	// The Availability Zone. Follows the format us-east-2a (case-sensitive).
	AvailabilityZone pulumix.Input[*string]
	CreatedAt        pulumix.Input[*string]
	// A Boolean value indicating whether the container service is disabled. Defaults to `false`.
	IsDisabled pulumix.Input[*bool]
	// The name for the container service. Names must be of length 1 to 63, and be
	// unique within each AWS Region in your Lightsail account.
	Name pulumix.Input[*string]
	// The power specification for the container service. The power specifies the amount of memory,
	// the number of vCPUs, and the monthly price of each node of the container service.
	// Possible values: `nano`, `micro`, `small`, `medium`, `large`, `xlarge`.
	Power pulumix.Input[*string]
	// The ID of the power of the container service.
	PowerId pulumix.Input[*string]
	// The principal ARN of the container service. The principal ARN can be used to create a trust
	// relationship between your standard AWS account and your Lightsail container service. This allows you to give your
	// service permission to access resources in your standard AWS account.
	PrincipalArn pulumix.Input[*string]
	// The private domain name of the container service. The private domain name is accessible only
	// by other resources within the default virtual private cloud (VPC) of your Lightsail account.
	PrivateDomainName pulumix.Input[*string]
	// An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See Private Registry Access below for more details.
	PrivateRegistryAccess pulumix.Input[*ContainerServicePrivateRegistryAccessArgs]
	// The public domain names to use with the container service, such as example.com
	// and www.example.com. You can specify up to four public domain names for a container service. The domain names that you
	// specify are used when you create a deployment with a container configured as the public endpoint of your container
	// service. If you don't specify public domain names, then you can use the default domain of the container service.
	// Defined below.
	PublicDomainNames pulumix.Input[*ContainerServicePublicDomainNamesArgs]
	// The Lightsail resource type of the container service (i.e., ContainerService).
	ResourceType pulumix.Input[*string]
	// The scale specification for the container service. The scale specifies the allocated compute
	// nodes of the container service.
	Scale pulumix.Input[*int]
	// The current state of the container service.
	State pulumix.Input[*string]
	// Map of container service tags. To tag at launch, specify the tags in the Launch Template. If
	// configured with a provider
	// `defaultTags` configuration block
	// present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider
	// `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The publicly accessible URL of the container service. If no public endpoint is specified in the
	// currentDeployment, this URL returns a 404 response.
	Url pulumix.Input[*string]
}

func (ContainerServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerServiceState)(nil)).Elem()
}

type containerServiceArgs struct {
	// A Boolean value indicating whether the container service is disabled. Defaults to `false`.
	IsDisabled *bool `pulumi:"isDisabled"`
	// The name for the container service. Names must be of length 1 to 63, and be
	// unique within each AWS Region in your Lightsail account.
	Name *string `pulumi:"name"`
	// The power specification for the container service. The power specifies the amount of memory,
	// the number of vCPUs, and the monthly price of each node of the container service.
	// Possible values: `nano`, `micro`, `small`, `medium`, `large`, `xlarge`.
	Power string `pulumi:"power"`
	// An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See Private Registry Access below for more details.
	PrivateRegistryAccess *ContainerServicePrivateRegistryAccess `pulumi:"privateRegistryAccess"`
	// The public domain names to use with the container service, such as example.com
	// and www.example.com. You can specify up to four public domain names for a container service. The domain names that you
	// specify are used when you create a deployment with a container configured as the public endpoint of your container
	// service. If you don't specify public domain names, then you can use the default domain of the container service.
	// Defined below.
	PublicDomainNames *ContainerServicePublicDomainNames `pulumi:"publicDomainNames"`
	// The scale specification for the container service. The scale specifies the allocated compute
	// nodes of the container service.
	Scale int `pulumi:"scale"`
	// Map of container service tags. To tag at launch, specify the tags in the Launch Template. If
	// configured with a provider
	// `defaultTags` configuration block
	// present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ContainerService resource.
type ContainerServiceArgs struct {
	// A Boolean value indicating whether the container service is disabled. Defaults to `false`.
	IsDisabled pulumix.Input[*bool]
	// The name for the container service. Names must be of length 1 to 63, and be
	// unique within each AWS Region in your Lightsail account.
	Name pulumix.Input[*string]
	// The power specification for the container service. The power specifies the amount of memory,
	// the number of vCPUs, and the monthly price of each node of the container service.
	// Possible values: `nano`, `micro`, `small`, `medium`, `large`, `xlarge`.
	Power pulumix.Input[string]
	// An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See Private Registry Access below for more details.
	PrivateRegistryAccess pulumix.Input[*ContainerServicePrivateRegistryAccessArgs]
	// The public domain names to use with the container service, such as example.com
	// and www.example.com. You can specify up to four public domain names for a container service. The domain names that you
	// specify are used when you create a deployment with a container configured as the public endpoint of your container
	// service. If you don't specify public domain names, then you can use the default domain of the container service.
	// Defined below.
	PublicDomainNames pulumix.Input[*ContainerServicePublicDomainNamesArgs]
	// The scale specification for the container service. The scale specifies the allocated compute
	// nodes of the container service.
	Scale pulumix.Input[int]
	// Map of container service tags. To tag at launch, specify the tags in the Launch Template. If
	// configured with a provider
	// `defaultTags` configuration block
	// present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ContainerServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerServiceArgs)(nil)).Elem()
}

type ContainerServiceOutput struct{ *pulumi.OutputState }

func (ContainerServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerService)(nil)).Elem()
}

func (o ContainerServiceOutput) ToContainerServiceOutput() ContainerServiceOutput {
	return o
}

func (o ContainerServiceOutput) ToContainerServiceOutputWithContext(ctx context.Context) ContainerServiceOutput {
	return o
}

func (o ContainerServiceOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerService] {
	return pulumix.Output[ContainerService]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the container service.
func (o ContainerServiceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Availability Zone. Follows the format us-east-2a (case-sensitive).
func (o ContainerServiceOutput) AvailabilityZone() pulumix.Output[string] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.Output[string] { return v.AvailabilityZone })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ContainerServiceOutput) CreatedAt() pulumix.Output[string] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.Output[string] { return v.CreatedAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A Boolean value indicating whether the container service is disabled. Defaults to `false`.
func (o ContainerServiceOutput) IsDisabled() pulumix.Output[*bool] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.Output[*bool] { return v.IsDisabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The name for the container service. Names must be of length 1 to 63, and be
// unique within each AWS Region in your Lightsail account.
func (o ContainerServiceOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The power specification for the container service. The power specifies the amount of memory,
// the number of vCPUs, and the monthly price of each node of the container service.
// Possible values: `nano`, `micro`, `small`, `medium`, `large`, `xlarge`.
func (o ContainerServiceOutput) Power() pulumix.Output[string] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.Output[string] { return v.Power })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the power of the container service.
func (o ContainerServiceOutput) PowerId() pulumix.Output[string] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.Output[string] { return v.PowerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The principal ARN of the container service. The principal ARN can be used to create a trust
// relationship between your standard AWS account and your Lightsail container service. This allows you to give your
// service permission to access resources in your standard AWS account.
func (o ContainerServiceOutput) PrincipalArn() pulumix.Output[string] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.Output[string] { return v.PrincipalArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The private domain name of the container service. The private domain name is accessible only
// by other resources within the default virtual private cloud (VPC) of your Lightsail account.
func (o ContainerServiceOutput) PrivateDomainName() pulumix.Output[string] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.Output[string] { return v.PrivateDomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See Private Registry Access below for more details.
func (o ContainerServiceOutput) PrivateRegistryAccess() pulumix.GPtrOutput[ContainerServicePrivateRegistryAccess, ContainerServicePrivateRegistryAccessOutput] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.GPtrOutput[ContainerServicePrivateRegistryAccess, ContainerServicePrivateRegistryAccessOutput] {
		return v.PrivateRegistryAccess
	})
	unwrapped := pulumix.Flatten[*ContainerServicePrivateRegistryAccess, pulumix.GPtrOutput[ContainerServicePrivateRegistryAccess, ContainerServicePrivateRegistryAccessOutput]](value)
	return pulumix.GPtrOutput[ContainerServicePrivateRegistryAccess, ContainerServicePrivateRegistryAccessOutput]{OutputState: unwrapped.OutputState}
}

// The public domain names to use with the container service, such as example.com
// and www.example.com. You can specify up to four public domain names for a container service. The domain names that you
// specify are used when you create a deployment with a container configured as the public endpoint of your container
// service. If you don't specify public domain names, then you can use the default domain of the container service.
// Defined below.
func (o ContainerServiceOutput) PublicDomainNames() pulumix.GPtrOutput[ContainerServicePublicDomainNames, ContainerServicePublicDomainNamesOutput] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.GPtrOutput[ContainerServicePublicDomainNames, ContainerServicePublicDomainNamesOutput] {
		return v.PublicDomainNames
	})
	unwrapped := pulumix.Flatten[*ContainerServicePublicDomainNames, pulumix.GPtrOutput[ContainerServicePublicDomainNames, ContainerServicePublicDomainNamesOutput]](value)
	return pulumix.GPtrOutput[ContainerServicePublicDomainNames, ContainerServicePublicDomainNamesOutput]{OutputState: unwrapped.OutputState}
}

// The Lightsail resource type of the container service (i.e., ContainerService).
func (o ContainerServiceOutput) ResourceType() pulumix.Output[string] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.Output[string] { return v.ResourceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The scale specification for the container service. The scale specifies the allocated compute
// nodes of the container service.
func (o ContainerServiceOutput) Scale() pulumix.Output[int] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.Output[int] { return v.Scale })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The current state of the container service.
func (o ContainerServiceOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of container service tags. To tag at launch, specify the tags in the Launch Template. If
// configured with a provider
// `defaultTags` configuration block
// present, tags with matching keys will overwrite those defined at the provider-level.
func (o ContainerServiceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider
// `defaultTags` configuration block.
func (o ContainerServiceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The publicly accessible URL of the container service. If no public endpoint is specified in the
// currentDeployment, this URL returns a 404 response.
func (o ContainerServiceOutput) Url() pulumix.Output[string] {
	value := pulumix.Apply[ContainerService](o, func(v ContainerService) pulumix.Output[string] { return v.Url })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ContainerServiceOutput{})
}
