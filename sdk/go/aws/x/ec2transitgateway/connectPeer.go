// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an EC2 Transit Gateway Connect Peer.
type ConnectPeer struct {
	pulumi.CustomResourceState

	// EC2 Transit Gateway Connect Peer ARN
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The BGP ASN number assigned customer device. If not provided, it will use the same BGP ASN as is associated with Transit Gateway.
	BgpAsn pulumix.Output[string] `pulumi:"bgpAsn"`
	// The IP address assigned to customer device, which is used as BGP IP address.
	BgpPeerAddress pulumix.Output[string] `pulumi:"bgpPeerAddress"`
	// The IP addresses assigned to Transit Gateway, which are used as BGP IP addresses.
	BgpTransitGatewayAddresses pulumix.ArrayOutput[string] `pulumi:"bgpTransitGatewayAddresses"`
	// The CIDR block that will be used for addressing within the tunnel. It must contain exactly one IPv4 CIDR block and up to one IPv6 CIDR block. The IPv4 CIDR block must be /29 size and must be within 169.254.0.0/16 range, with exception of: 169.254.0.0/29, 169.254.1.0/29, 169.254.2.0/29, 169.254.3.0/29, 169.254.4.0/29, 169.254.5.0/29, 169.254.169.248/29. The IPv6 CIDR block must be /125 size and must be within fd00::/8. The first IP from each CIDR block is assigned for customer gateway, the second and third is for Transit Gateway (An example: from range 169.254.100.0/29, .1 is assigned to customer gateway and .2 and .3 are assigned to Transit Gateway)
	InsideCidrBlocks pulumix.ArrayOutput[string] `pulumi:"insideCidrBlocks"`
	// The IP addressed assigned to customer device, which will be used as tunnel endpoint. It can be IPv4 or IPv6 address, but must be the same address family as `transitGatewayAddress`
	PeerAddress pulumix.Output[string] `pulumi:"peerAddress"`
	// Key-value tags for the EC2 Transit Gateway Connect Peer. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The IP address assigned to Transit Gateway, which will be used as tunnel endpoint. This address must be from associated Transit Gateway CIDR block. The address must be from the same address family as `peerAddress`. If not set explicitly, it will be selected from associated Transit Gateway CIDR blocks
	TransitGatewayAddress pulumix.Output[string] `pulumi:"transitGatewayAddress"`
	// The Transit Gateway Connect
	TransitGatewayAttachmentId pulumix.Output[string] `pulumi:"transitGatewayAttachmentId"`
}

// NewConnectPeer registers a new resource with the given unique name, arguments, and options.
func NewConnectPeer(ctx *pulumi.Context,
	name string, args *ConnectPeerArgs, opts ...pulumi.ResourceOption) (*ConnectPeer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InsideCidrBlocks == nil {
		return nil, errors.New("invalid value for required argument 'InsideCidrBlocks'")
	}
	if args.PeerAddress == nil {
		return nil, errors.New("invalid value for required argument 'PeerAddress'")
	}
	if args.TransitGatewayAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayAttachmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectPeer
	err := ctx.RegisterResource("aws:ec2transitgateway/connectPeer:ConnectPeer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectPeer gets an existing ConnectPeer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectPeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectPeerState, opts ...pulumi.ResourceOption) (*ConnectPeer, error) {
	var resource ConnectPeer
	err := ctx.ReadResource("aws:ec2transitgateway/connectPeer:ConnectPeer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectPeer resources.
type connectPeerState struct {
	// EC2 Transit Gateway Connect Peer ARN
	Arn *string `pulumi:"arn"`
	// The BGP ASN number assigned customer device. If not provided, it will use the same BGP ASN as is associated with Transit Gateway.
	BgpAsn *string `pulumi:"bgpAsn"`
	// The IP address assigned to customer device, which is used as BGP IP address.
	BgpPeerAddress *string `pulumi:"bgpPeerAddress"`
	// The IP addresses assigned to Transit Gateway, which are used as BGP IP addresses.
	BgpTransitGatewayAddresses []string `pulumi:"bgpTransitGatewayAddresses"`
	// The CIDR block that will be used for addressing within the tunnel. It must contain exactly one IPv4 CIDR block and up to one IPv6 CIDR block. The IPv4 CIDR block must be /29 size and must be within 169.254.0.0/16 range, with exception of: 169.254.0.0/29, 169.254.1.0/29, 169.254.2.0/29, 169.254.3.0/29, 169.254.4.0/29, 169.254.5.0/29, 169.254.169.248/29. The IPv6 CIDR block must be /125 size and must be within fd00::/8. The first IP from each CIDR block is assigned for customer gateway, the second and third is for Transit Gateway (An example: from range 169.254.100.0/29, .1 is assigned to customer gateway and .2 and .3 are assigned to Transit Gateway)
	InsideCidrBlocks []string `pulumi:"insideCidrBlocks"`
	// The IP addressed assigned to customer device, which will be used as tunnel endpoint. It can be IPv4 or IPv6 address, but must be the same address family as `transitGatewayAddress`
	PeerAddress *string `pulumi:"peerAddress"`
	// Key-value tags for the EC2 Transit Gateway Connect Peer. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The IP address assigned to Transit Gateway, which will be used as tunnel endpoint. This address must be from associated Transit Gateway CIDR block. The address must be from the same address family as `peerAddress`. If not set explicitly, it will be selected from associated Transit Gateway CIDR blocks
	TransitGatewayAddress *string `pulumi:"transitGatewayAddress"`
	// The Transit Gateway Connect
	TransitGatewayAttachmentId *string `pulumi:"transitGatewayAttachmentId"`
}

type ConnectPeerState struct {
	// EC2 Transit Gateway Connect Peer ARN
	Arn pulumix.Input[*string]
	// The BGP ASN number assigned customer device. If not provided, it will use the same BGP ASN as is associated with Transit Gateway.
	BgpAsn pulumix.Input[*string]
	// The IP address assigned to customer device, which is used as BGP IP address.
	BgpPeerAddress pulumix.Input[*string]
	// The IP addresses assigned to Transit Gateway, which are used as BGP IP addresses.
	BgpTransitGatewayAddresses pulumix.Input[[]string]
	// The CIDR block that will be used for addressing within the tunnel. It must contain exactly one IPv4 CIDR block and up to one IPv6 CIDR block. The IPv4 CIDR block must be /29 size and must be within 169.254.0.0/16 range, with exception of: 169.254.0.0/29, 169.254.1.0/29, 169.254.2.0/29, 169.254.3.0/29, 169.254.4.0/29, 169.254.5.0/29, 169.254.169.248/29. The IPv6 CIDR block must be /125 size and must be within fd00::/8. The first IP from each CIDR block is assigned for customer gateway, the second and third is for Transit Gateway (An example: from range 169.254.100.0/29, .1 is assigned to customer gateway and .2 and .3 are assigned to Transit Gateway)
	InsideCidrBlocks pulumix.Input[[]string]
	// The IP addressed assigned to customer device, which will be used as tunnel endpoint. It can be IPv4 or IPv6 address, but must be the same address family as `transitGatewayAddress`
	PeerAddress pulumix.Input[*string]
	// Key-value tags for the EC2 Transit Gateway Connect Peer. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The IP address assigned to Transit Gateway, which will be used as tunnel endpoint. This address must be from associated Transit Gateway CIDR block. The address must be from the same address family as `peerAddress`. If not set explicitly, it will be selected from associated Transit Gateway CIDR blocks
	TransitGatewayAddress pulumix.Input[*string]
	// The Transit Gateway Connect
	TransitGatewayAttachmentId pulumix.Input[*string]
}

func (ConnectPeerState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectPeerState)(nil)).Elem()
}

type connectPeerArgs struct {
	// The BGP ASN number assigned customer device. If not provided, it will use the same BGP ASN as is associated with Transit Gateway.
	BgpAsn *string `pulumi:"bgpAsn"`
	// The CIDR block that will be used for addressing within the tunnel. It must contain exactly one IPv4 CIDR block and up to one IPv6 CIDR block. The IPv4 CIDR block must be /29 size and must be within 169.254.0.0/16 range, with exception of: 169.254.0.0/29, 169.254.1.0/29, 169.254.2.0/29, 169.254.3.0/29, 169.254.4.0/29, 169.254.5.0/29, 169.254.169.248/29. The IPv6 CIDR block must be /125 size and must be within fd00::/8. The first IP from each CIDR block is assigned for customer gateway, the second and third is for Transit Gateway (An example: from range 169.254.100.0/29, .1 is assigned to customer gateway and .2 and .3 are assigned to Transit Gateway)
	InsideCidrBlocks []string `pulumi:"insideCidrBlocks"`
	// The IP addressed assigned to customer device, which will be used as tunnel endpoint. It can be IPv4 or IPv6 address, but must be the same address family as `transitGatewayAddress`
	PeerAddress string `pulumi:"peerAddress"`
	// Key-value tags for the EC2 Transit Gateway Connect Peer. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The IP address assigned to Transit Gateway, which will be used as tunnel endpoint. This address must be from associated Transit Gateway CIDR block. The address must be from the same address family as `peerAddress`. If not set explicitly, it will be selected from associated Transit Gateway CIDR blocks
	TransitGatewayAddress *string `pulumi:"transitGatewayAddress"`
	// The Transit Gateway Connect
	TransitGatewayAttachmentId string `pulumi:"transitGatewayAttachmentId"`
}

// The set of arguments for constructing a ConnectPeer resource.
type ConnectPeerArgs struct {
	// The BGP ASN number assigned customer device. If not provided, it will use the same BGP ASN as is associated with Transit Gateway.
	BgpAsn pulumix.Input[*string]
	// The CIDR block that will be used for addressing within the tunnel. It must contain exactly one IPv4 CIDR block and up to one IPv6 CIDR block. The IPv4 CIDR block must be /29 size and must be within 169.254.0.0/16 range, with exception of: 169.254.0.0/29, 169.254.1.0/29, 169.254.2.0/29, 169.254.3.0/29, 169.254.4.0/29, 169.254.5.0/29, 169.254.169.248/29. The IPv6 CIDR block must be /125 size and must be within fd00::/8. The first IP from each CIDR block is assigned for customer gateway, the second and third is for Transit Gateway (An example: from range 169.254.100.0/29, .1 is assigned to customer gateway and .2 and .3 are assigned to Transit Gateway)
	InsideCidrBlocks pulumix.Input[[]string]
	// The IP addressed assigned to customer device, which will be used as tunnel endpoint. It can be IPv4 or IPv6 address, but must be the same address family as `transitGatewayAddress`
	PeerAddress pulumix.Input[string]
	// Key-value tags for the EC2 Transit Gateway Connect Peer. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The IP address assigned to Transit Gateway, which will be used as tunnel endpoint. This address must be from associated Transit Gateway CIDR block. The address must be from the same address family as `peerAddress`. If not set explicitly, it will be selected from associated Transit Gateway CIDR blocks
	TransitGatewayAddress pulumix.Input[*string]
	// The Transit Gateway Connect
	TransitGatewayAttachmentId pulumix.Input[string]
}

func (ConnectPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectPeerArgs)(nil)).Elem()
}

type ConnectPeerOutput struct{ *pulumi.OutputState }

func (ConnectPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectPeer)(nil)).Elem()
}

func (o ConnectPeerOutput) ToConnectPeerOutput() ConnectPeerOutput {
	return o
}

func (o ConnectPeerOutput) ToConnectPeerOutputWithContext(ctx context.Context) ConnectPeerOutput {
	return o
}

func (o ConnectPeerOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectPeer] {
	return pulumix.Output[ConnectPeer]{
		OutputState: o.OutputState,
	}
}

// EC2 Transit Gateway Connect Peer ARN
func (o ConnectPeerOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ConnectPeer](o, func(v ConnectPeer) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The BGP ASN number assigned customer device. If not provided, it will use the same BGP ASN as is associated with Transit Gateway.
func (o ConnectPeerOutput) BgpAsn() pulumix.Output[string] {
	value := pulumix.Apply[ConnectPeer](o, func(v ConnectPeer) pulumix.Output[string] { return v.BgpAsn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IP address assigned to customer device, which is used as BGP IP address.
func (o ConnectPeerOutput) BgpPeerAddress() pulumix.Output[string] {
	value := pulumix.Apply[ConnectPeer](o, func(v ConnectPeer) pulumix.Output[string] { return v.BgpPeerAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IP addresses assigned to Transit Gateway, which are used as BGP IP addresses.
func (o ConnectPeerOutput) BgpTransitGatewayAddresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ConnectPeer](o, func(v ConnectPeer) pulumix.ArrayOutput[string] { return v.BgpTransitGatewayAddresses })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The CIDR block that will be used for addressing within the tunnel. It must contain exactly one IPv4 CIDR block and up to one IPv6 CIDR block. The IPv4 CIDR block must be /29 size and must be within 169.254.0.0/16 range, with exception of: 169.254.0.0/29, 169.254.1.0/29, 169.254.2.0/29, 169.254.3.0/29, 169.254.4.0/29, 169.254.5.0/29, 169.254.169.248/29. The IPv6 CIDR block must be /125 size and must be within fd00::/8. The first IP from each CIDR block is assigned for customer gateway, the second and third is for Transit Gateway (An example: from range 169.254.100.0/29, .1 is assigned to customer gateway and .2 and .3 are assigned to Transit Gateway)
func (o ConnectPeerOutput) InsideCidrBlocks() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ConnectPeer](o, func(v ConnectPeer) pulumix.ArrayOutput[string] { return v.InsideCidrBlocks })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The IP addressed assigned to customer device, which will be used as tunnel endpoint. It can be IPv4 or IPv6 address, but must be the same address family as `transitGatewayAddress`
func (o ConnectPeerOutput) PeerAddress() pulumix.Output[string] {
	value := pulumix.Apply[ConnectPeer](o, func(v ConnectPeer) pulumix.Output[string] { return v.PeerAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value tags for the EC2 Transit Gateway Connect Peer. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ConnectPeerOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ConnectPeer](o, func(v ConnectPeer) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ConnectPeerOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ConnectPeer](o, func(v ConnectPeer) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The IP address assigned to Transit Gateway, which will be used as tunnel endpoint. This address must be from associated Transit Gateway CIDR block. The address must be from the same address family as `peerAddress`. If not set explicitly, it will be selected from associated Transit Gateway CIDR blocks
func (o ConnectPeerOutput) TransitGatewayAddress() pulumix.Output[string] {
	value := pulumix.Apply[ConnectPeer](o, func(v ConnectPeer) pulumix.Output[string] { return v.TransitGatewayAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Transit Gateway Connect
func (o ConnectPeerOutput) TransitGatewayAttachmentId() pulumix.Output[string] {
	value := pulumix.Apply[ConnectPeer](o, func(v ConnectPeer) pulumix.Output[string] { return v.TransitGatewayAttachmentId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ConnectPeerOutput{})
}
