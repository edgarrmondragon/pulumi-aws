// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3control

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage an S3 Control Bucket Lifecycle Configuration.
//
// > **NOTE:** Each S3 Control Bucket can only have one Lifecycle Configuration. Using multiple of this resource against the same S3 Control Bucket will result in perpetual differences each provider run.
//
// > This functionality is for managing [S3 on Outposts](https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html). To manage S3 Bucket Lifecycle Configurations in an AWS Partition, see the `s3.BucketV2` resource.
type BucketLifecycleConfiguration struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the bucket.
	Bucket pulumix.Output[string] `pulumi:"bucket"`
	// Configuration block(s) containing lifecycle rules for the bucket.
	Rules pulumix.GArrayOutput[BucketLifecycleConfigurationRule, BucketLifecycleConfigurationRuleOutput] `pulumi:"rules"`
}

// NewBucketLifecycleConfiguration registers a new resource with the given unique name, arguments, and options.
func NewBucketLifecycleConfiguration(ctx *pulumi.Context,
	name string, args *BucketLifecycleConfigurationArgs, opts ...pulumi.ResourceOption) (*BucketLifecycleConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketLifecycleConfiguration
	err := ctx.RegisterResource("aws:s3control/bucketLifecycleConfiguration:BucketLifecycleConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketLifecycleConfiguration gets an existing BucketLifecycleConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketLifecycleConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketLifecycleConfigurationState, opts ...pulumi.ResourceOption) (*BucketLifecycleConfiguration, error) {
	var resource BucketLifecycleConfiguration
	err := ctx.ReadResource("aws:s3control/bucketLifecycleConfiguration:BucketLifecycleConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketLifecycleConfiguration resources.
type bucketLifecycleConfigurationState struct {
	// Amazon Resource Name (ARN) of the bucket.
	Bucket *string `pulumi:"bucket"`
	// Configuration block(s) containing lifecycle rules for the bucket.
	Rules []BucketLifecycleConfigurationRule `pulumi:"rules"`
}

type BucketLifecycleConfigurationState struct {
	// Amazon Resource Name (ARN) of the bucket.
	Bucket pulumix.Input[*string]
	// Configuration block(s) containing lifecycle rules for the bucket.
	Rules pulumix.Input[[]*BucketLifecycleConfigurationRuleArgs]
}

func (BucketLifecycleConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLifecycleConfigurationState)(nil)).Elem()
}

type bucketLifecycleConfigurationArgs struct {
	// Amazon Resource Name (ARN) of the bucket.
	Bucket string `pulumi:"bucket"`
	// Configuration block(s) containing lifecycle rules for the bucket.
	Rules []BucketLifecycleConfigurationRule `pulumi:"rules"`
}

// The set of arguments for constructing a BucketLifecycleConfiguration resource.
type BucketLifecycleConfigurationArgs struct {
	// Amazon Resource Name (ARN) of the bucket.
	Bucket pulumix.Input[string]
	// Configuration block(s) containing lifecycle rules for the bucket.
	Rules pulumix.Input[[]*BucketLifecycleConfigurationRuleArgs]
}

func (BucketLifecycleConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLifecycleConfigurationArgs)(nil)).Elem()
}

type BucketLifecycleConfigurationOutput struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfiguration)(nil)).Elem()
}

func (o BucketLifecycleConfigurationOutput) ToBucketLifecycleConfigurationOutput() BucketLifecycleConfigurationOutput {
	return o
}

func (o BucketLifecycleConfigurationOutput) ToBucketLifecycleConfigurationOutputWithContext(ctx context.Context) BucketLifecycleConfigurationOutput {
	return o
}

func (o BucketLifecycleConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleConfiguration] {
	return pulumix.Output[BucketLifecycleConfiguration]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the bucket.
func (o BucketLifecycleConfigurationOutput) Bucket() pulumix.Output[string] {
	value := pulumix.Apply[BucketLifecycleConfiguration](o, func(v BucketLifecycleConfiguration) pulumix.Output[string] { return v.Bucket })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block(s) containing lifecycle rules for the bucket.
func (o BucketLifecycleConfigurationOutput) Rules() pulumix.GArrayOutput[BucketLifecycleConfigurationRule, BucketLifecycleConfigurationRuleOutput] {
	value := pulumix.Apply[BucketLifecycleConfiguration](o, func(v BucketLifecycleConfiguration) pulumix.GArrayOutput[BucketLifecycleConfigurationRule, BucketLifecycleConfigurationRuleOutput] {
		return v.Rules
	})
	unwrapped := pulumix.Flatten[[]BucketLifecycleConfigurationRule, pulumix.GArrayOutput[BucketLifecycleConfigurationRule, BucketLifecycleConfigurationRuleOutput]](value)
	return pulumix.GArrayOutput[BucketLifecycleConfigurationRule, BucketLifecycleConfigurationRuleOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(BucketLifecycleConfigurationOutput{})
}
