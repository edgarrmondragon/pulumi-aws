// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages the accepter's side of an EC2 Transit Gateway VPC Attachment.
//
// When a cross-account (requester's AWS account differs from the accepter's AWS account) EC2 Transit Gateway VPC Attachment
// is created, an EC2 Transit Gateway VPC Attachment resource is automatically created in the accepter's account.
// The requester can use the `ec2transitgateway.VpcAttachment` resource to manage its side of the connection
// and the accepter can use the `ec2transitgateway.VpcAttachmentAccepter` resource to "adopt" its side of the
// connection into management.
type VpcAttachmentAccepter struct {
	pulumi.CustomResourceState

	// Whether Appliance Mode support is enabled. Valid values: `disable`, `enable`.
	ApplianceModeSupport pulumix.Output[string] `pulumi:"applianceModeSupport"`
	// Whether DNS support is enabled. Valid values: `disable`, `enable`.
	DnsSupport pulumix.Output[string] `pulumi:"dnsSupport"`
	// Whether IPv6 support is enabled. Valid values: `disable`, `enable`.
	Ipv6Support pulumix.Output[string] `pulumi:"ipv6Support"`
	// Identifiers of EC2 Subnets.
	SubnetIds pulumix.ArrayOutput[string] `pulumi:"subnetIds"`
	// Key-value tags for the EC2 Transit Gateway VPC Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The ID of the EC2 Transit Gateway Attachment to manage.
	TransitGatewayAttachmentId pulumix.Output[string] `pulumi:"transitGatewayAttachmentId"`
	// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
	TransitGatewayDefaultRouteTableAssociation pulumix.Output[*bool] `pulumi:"transitGatewayDefaultRouteTableAssociation"`
	// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
	TransitGatewayDefaultRouteTablePropagation pulumix.Output[*bool] `pulumi:"transitGatewayDefaultRouteTablePropagation"`
	// Identifier of EC2 Transit Gateway.
	TransitGatewayId pulumix.Output[string] `pulumi:"transitGatewayId"`
	// Identifier of EC2 VPC.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
	// Identifier of the AWS account that owns the EC2 VPC.
	VpcOwnerId pulumix.Output[string] `pulumi:"vpcOwnerId"`
}

// NewVpcAttachmentAccepter registers a new resource with the given unique name, arguments, and options.
func NewVpcAttachmentAccepter(ctx *pulumi.Context,
	name string, args *VpcAttachmentAccepterArgs, opts ...pulumi.ResourceOption) (*VpcAttachmentAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitGatewayAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayAttachmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcAttachmentAccepter
	err := ctx.RegisterResource("aws:ec2transitgateway/vpcAttachmentAccepter:VpcAttachmentAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcAttachmentAccepter gets an existing VpcAttachmentAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcAttachmentAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcAttachmentAccepterState, opts ...pulumi.ResourceOption) (*VpcAttachmentAccepter, error) {
	var resource VpcAttachmentAccepter
	err := ctx.ReadResource("aws:ec2transitgateway/vpcAttachmentAccepter:VpcAttachmentAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcAttachmentAccepter resources.
type vpcAttachmentAccepterState struct {
	// Whether Appliance Mode support is enabled. Valid values: `disable`, `enable`.
	ApplianceModeSupport *string `pulumi:"applianceModeSupport"`
	// Whether DNS support is enabled. Valid values: `disable`, `enable`.
	DnsSupport *string `pulumi:"dnsSupport"`
	// Whether IPv6 support is enabled. Valid values: `disable`, `enable`.
	Ipv6Support *string `pulumi:"ipv6Support"`
	// Identifiers of EC2 Subnets.
	SubnetIds []string `pulumi:"subnetIds"`
	// Key-value tags for the EC2 Transit Gateway VPC Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ID of the EC2 Transit Gateway Attachment to manage.
	TransitGatewayAttachmentId *string `pulumi:"transitGatewayAttachmentId"`
	// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
	TransitGatewayDefaultRouteTableAssociation *bool `pulumi:"transitGatewayDefaultRouteTableAssociation"`
	// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
	TransitGatewayDefaultRouteTablePropagation *bool `pulumi:"transitGatewayDefaultRouteTablePropagation"`
	// Identifier of EC2 Transit Gateway.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
	// Identifier of EC2 VPC.
	VpcId *string `pulumi:"vpcId"`
	// Identifier of the AWS account that owns the EC2 VPC.
	VpcOwnerId *string `pulumi:"vpcOwnerId"`
}

type VpcAttachmentAccepterState struct {
	// Whether Appliance Mode support is enabled. Valid values: `disable`, `enable`.
	ApplianceModeSupport pulumix.Input[*string]
	// Whether DNS support is enabled. Valid values: `disable`, `enable`.
	DnsSupport pulumix.Input[*string]
	// Whether IPv6 support is enabled. Valid values: `disable`, `enable`.
	Ipv6Support pulumix.Input[*string]
	// Identifiers of EC2 Subnets.
	SubnetIds pulumix.Input[[]string]
	// Key-value tags for the EC2 Transit Gateway VPC Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The ID of the EC2 Transit Gateway Attachment to manage.
	TransitGatewayAttachmentId pulumix.Input[*string]
	// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
	TransitGatewayDefaultRouteTableAssociation pulumix.Input[*bool]
	// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
	TransitGatewayDefaultRouteTablePropagation pulumix.Input[*bool]
	// Identifier of EC2 Transit Gateway.
	TransitGatewayId pulumix.Input[*string]
	// Identifier of EC2 VPC.
	VpcId pulumix.Input[*string]
	// Identifier of the AWS account that owns the EC2 VPC.
	VpcOwnerId pulumix.Input[*string]
}

func (VpcAttachmentAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcAttachmentAccepterState)(nil)).Elem()
}

type vpcAttachmentAccepterArgs struct {
	// Key-value tags for the EC2 Transit Gateway VPC Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the EC2 Transit Gateway Attachment to manage.
	TransitGatewayAttachmentId string `pulumi:"transitGatewayAttachmentId"`
	// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
	TransitGatewayDefaultRouteTableAssociation *bool `pulumi:"transitGatewayDefaultRouteTableAssociation"`
	// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
	TransitGatewayDefaultRouteTablePropagation *bool `pulumi:"transitGatewayDefaultRouteTablePropagation"`
}

// The set of arguments for constructing a VpcAttachmentAccepter resource.
type VpcAttachmentAccepterArgs struct {
	// Key-value tags for the EC2 Transit Gateway VPC Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The ID of the EC2 Transit Gateway Attachment to manage.
	TransitGatewayAttachmentId pulumix.Input[string]
	// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
	TransitGatewayDefaultRouteTableAssociation pulumix.Input[*bool]
	// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
	TransitGatewayDefaultRouteTablePropagation pulumix.Input[*bool]
}

func (VpcAttachmentAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcAttachmentAccepterArgs)(nil)).Elem()
}

type VpcAttachmentAccepterOutput struct{ *pulumi.OutputState }

func (VpcAttachmentAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcAttachmentAccepter)(nil)).Elem()
}

func (o VpcAttachmentAccepterOutput) ToVpcAttachmentAccepterOutput() VpcAttachmentAccepterOutput {
	return o
}

func (o VpcAttachmentAccepterOutput) ToVpcAttachmentAccepterOutputWithContext(ctx context.Context) VpcAttachmentAccepterOutput {
	return o
}

func (o VpcAttachmentAccepterOutput) ToOutput(ctx context.Context) pulumix.Output[VpcAttachmentAccepter] {
	return pulumix.Output[VpcAttachmentAccepter]{
		OutputState: o.OutputState,
	}
}

// Whether Appliance Mode support is enabled. Valid values: `disable`, `enable`.
func (o VpcAttachmentAccepterOutput) ApplianceModeSupport() pulumix.Output[string] {
	value := pulumix.Apply[VpcAttachmentAccepter](o, func(v VpcAttachmentAccepter) pulumix.Output[string] { return v.ApplianceModeSupport })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether DNS support is enabled. Valid values: `disable`, `enable`.
func (o VpcAttachmentAccepterOutput) DnsSupport() pulumix.Output[string] {
	value := pulumix.Apply[VpcAttachmentAccepter](o, func(v VpcAttachmentAccepter) pulumix.Output[string] { return v.DnsSupport })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether IPv6 support is enabled. Valid values: `disable`, `enable`.
func (o VpcAttachmentAccepterOutput) Ipv6Support() pulumix.Output[string] {
	value := pulumix.Apply[VpcAttachmentAccepter](o, func(v VpcAttachmentAccepter) pulumix.Output[string] { return v.Ipv6Support })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identifiers of EC2 Subnets.
func (o VpcAttachmentAccepterOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcAttachmentAccepter](o, func(v VpcAttachmentAccepter) pulumix.ArrayOutput[string] { return v.SubnetIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Key-value tags for the EC2 Transit Gateway VPC Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VpcAttachmentAccepterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcAttachmentAccepter](o, func(v VpcAttachmentAccepter) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VpcAttachmentAccepterOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcAttachmentAccepter](o, func(v VpcAttachmentAccepter) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of the EC2 Transit Gateway Attachment to manage.
func (o VpcAttachmentAccepterOutput) TransitGatewayAttachmentId() pulumix.Output[string] {
	value := pulumix.Apply[VpcAttachmentAccepter](o, func(v VpcAttachmentAccepter) pulumix.Output[string] { return v.TransitGatewayAttachmentId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
func (o VpcAttachmentAccepterOutput) TransitGatewayDefaultRouteTableAssociation() pulumix.Output[*bool] {
	value := pulumix.Apply[VpcAttachmentAccepter](o, func(v VpcAttachmentAccepter) pulumix.Output[*bool] {
		return v.TransitGatewayDefaultRouteTableAssociation
	})
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
func (o VpcAttachmentAccepterOutput) TransitGatewayDefaultRouteTablePropagation() pulumix.Output[*bool] {
	value := pulumix.Apply[VpcAttachmentAccepter](o, func(v VpcAttachmentAccepter) pulumix.Output[*bool] {
		return v.TransitGatewayDefaultRouteTablePropagation
	})
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Identifier of EC2 Transit Gateway.
func (o VpcAttachmentAccepterOutput) TransitGatewayId() pulumix.Output[string] {
	value := pulumix.Apply[VpcAttachmentAccepter](o, func(v VpcAttachmentAccepter) pulumix.Output[string] { return v.TransitGatewayId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identifier of EC2 VPC.
func (o VpcAttachmentAccepterOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[VpcAttachmentAccepter](o, func(v VpcAttachmentAccepter) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identifier of the AWS account that owns the EC2 VPC.
func (o VpcAttachmentAccepterOutput) VpcOwnerId() pulumix.Output[string] {
	value := pulumix.Apply[VpcAttachmentAccepter](o, func(v VpcAttachmentAccepter) pulumix.Output[string] { return v.VpcOwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VpcAttachmentAccepterOutput{})
}
