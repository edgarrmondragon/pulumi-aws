// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AccessPointPosixUser struct {
	// POSIX group ID used for all file system operations using this access point.
	Gid int `pulumi:"gid"`
	// Secondary POSIX group IDs used for all file system operations using this access point.
	SecondaryGids []int `pulumi:"secondaryGids"`
	// POSIX user ID used for all file system operations using this access point.
	Uid int `pulumi:"uid"`
}

type AccessPointPosixUserArgs struct {
	// POSIX group ID used for all file system operations using this access point.
	Gid pulumix.Input[int] `pulumi:"gid"`
	// Secondary POSIX group IDs used for all file system operations using this access point.
	SecondaryGids pulumix.Input[[]int] `pulumi:"secondaryGids"`
	// POSIX user ID used for all file system operations using this access point.
	Uid pulumix.Input[int] `pulumi:"uid"`
}

func (AccessPointPosixUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointPosixUser)(nil)).Elem()
}

func (i AccessPointPosixUserArgs) ToAccessPointPosixUserOutput() AccessPointPosixUserOutput {
	return i.ToAccessPointPosixUserOutputWithContext(context.Background())
}

func (i AccessPointPosixUserArgs) ToAccessPointPosixUserOutputWithContext(ctx context.Context) AccessPointPosixUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointPosixUserOutput)
}

func (i *AccessPointPosixUserArgs) ToOutput(ctx context.Context) pulumix.Output[*AccessPointPosixUserArgs] {
	return pulumix.Val(i)
}

type AccessPointPosixUserOutput struct{ *pulumi.OutputState }

func (AccessPointPosixUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointPosixUser)(nil)).Elem()
}

func (o AccessPointPosixUserOutput) ToAccessPointPosixUserOutput() AccessPointPosixUserOutput {
	return o
}

func (o AccessPointPosixUserOutput) ToAccessPointPosixUserOutputWithContext(ctx context.Context) AccessPointPosixUserOutput {
	return o
}

func (o AccessPointPosixUserOutput) ToOutput(ctx context.Context) pulumix.Output[AccessPointPosixUser] {
	return pulumix.Output[AccessPointPosixUser]{
		OutputState: o.OutputState,
	}
}

// POSIX group ID used for all file system operations using this access point.
func (o AccessPointPosixUserOutput) Gid() pulumix.Output[int] {
	return pulumix.Apply[AccessPointPosixUser](o, func(v AccessPointPosixUser) int { return v.Gid })
}

// Secondary POSIX group IDs used for all file system operations using this access point.
func (o AccessPointPosixUserOutput) SecondaryGids() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[AccessPointPosixUser](o, func(v AccessPointPosixUser) []int { return v.SecondaryGids })
	return pulumix.ArrayOutput[int]{OutputState: value.OutputState}
}

// POSIX user ID used for all file system operations using this access point.
func (o AccessPointPosixUserOutput) Uid() pulumix.Output[int] {
	return pulumix.Apply[AccessPointPosixUser](o, func(v AccessPointPosixUser) int { return v.Uid })
}

type AccessPointRootDirectory struct {
	// POSIX IDs and permissions to apply to the access point's Root Directory. See Creation Info below.
	CreationInfo *AccessPointRootDirectoryCreationInfo `pulumi:"creationInfo"`
	// Path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide `creationInfo`.
	Path *string `pulumi:"path"`
}

type AccessPointRootDirectoryArgs struct {
	// POSIX IDs and permissions to apply to the access point's Root Directory. See Creation Info below.
	CreationInfo pulumix.Input[*AccessPointRootDirectoryCreationInfoArgs] `pulumi:"creationInfo"`
	// Path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide `creationInfo`.
	Path pulumix.Input[*string] `pulumi:"path"`
}

func (AccessPointRootDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointRootDirectory)(nil)).Elem()
}

func (i AccessPointRootDirectoryArgs) ToAccessPointRootDirectoryOutput() AccessPointRootDirectoryOutput {
	return i.ToAccessPointRootDirectoryOutputWithContext(context.Background())
}

func (i AccessPointRootDirectoryArgs) ToAccessPointRootDirectoryOutputWithContext(ctx context.Context) AccessPointRootDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointRootDirectoryOutput)
}

func (i *AccessPointRootDirectoryArgs) ToOutput(ctx context.Context) pulumix.Output[*AccessPointRootDirectoryArgs] {
	return pulumix.Val(i)
}

type AccessPointRootDirectoryOutput struct{ *pulumi.OutputState }

func (AccessPointRootDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointRootDirectory)(nil)).Elem()
}

func (o AccessPointRootDirectoryOutput) ToAccessPointRootDirectoryOutput() AccessPointRootDirectoryOutput {
	return o
}

func (o AccessPointRootDirectoryOutput) ToAccessPointRootDirectoryOutputWithContext(ctx context.Context) AccessPointRootDirectoryOutput {
	return o
}

func (o AccessPointRootDirectoryOutput) ToOutput(ctx context.Context) pulumix.Output[AccessPointRootDirectory] {
	return pulumix.Output[AccessPointRootDirectory]{
		OutputState: o.OutputState,
	}
}

// POSIX IDs and permissions to apply to the access point's Root Directory. See Creation Info below.
func (o AccessPointRootDirectoryOutput) CreationInfo() pulumix.GPtrOutput[AccessPointRootDirectoryCreationInfo, AccessPointRootDirectoryCreationInfoOutput] {
	value := pulumix.Apply[AccessPointRootDirectory](o, func(v AccessPointRootDirectory) *AccessPointRootDirectoryCreationInfo { return v.CreationInfo })
	return pulumix.GPtrOutput[AccessPointRootDirectoryCreationInfo, AccessPointRootDirectoryCreationInfoOutput]{OutputState: value.OutputState}
}

// Path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide `creationInfo`.
func (o AccessPointRootDirectoryOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[AccessPointRootDirectory](o, func(v AccessPointRootDirectory) *string { return v.Path })
}

type AccessPointRootDirectoryCreationInfo struct {
	// POSIX group ID to apply to the `rootDirectory`.
	OwnerGid int `pulumi:"ownerGid"`
	// POSIX user ID to apply to the `rootDirectory`.
	OwnerUid int `pulumi:"ownerUid"`
	// POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
	Permissions string `pulumi:"permissions"`
}

type AccessPointRootDirectoryCreationInfoArgs struct {
	// POSIX group ID to apply to the `rootDirectory`.
	OwnerGid pulumix.Input[int] `pulumi:"ownerGid"`
	// POSIX user ID to apply to the `rootDirectory`.
	OwnerUid pulumix.Input[int] `pulumi:"ownerUid"`
	// POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
	Permissions pulumix.Input[string] `pulumi:"permissions"`
}

func (AccessPointRootDirectoryCreationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointRootDirectoryCreationInfo)(nil)).Elem()
}

func (i AccessPointRootDirectoryCreationInfoArgs) ToAccessPointRootDirectoryCreationInfoOutput() AccessPointRootDirectoryCreationInfoOutput {
	return i.ToAccessPointRootDirectoryCreationInfoOutputWithContext(context.Background())
}

func (i AccessPointRootDirectoryCreationInfoArgs) ToAccessPointRootDirectoryCreationInfoOutputWithContext(ctx context.Context) AccessPointRootDirectoryCreationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointRootDirectoryCreationInfoOutput)
}

func (i *AccessPointRootDirectoryCreationInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*AccessPointRootDirectoryCreationInfoArgs] {
	return pulumix.Val(i)
}

type AccessPointRootDirectoryCreationInfoOutput struct{ *pulumi.OutputState }

func (AccessPointRootDirectoryCreationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointRootDirectoryCreationInfo)(nil)).Elem()
}

func (o AccessPointRootDirectoryCreationInfoOutput) ToAccessPointRootDirectoryCreationInfoOutput() AccessPointRootDirectoryCreationInfoOutput {
	return o
}

func (o AccessPointRootDirectoryCreationInfoOutput) ToAccessPointRootDirectoryCreationInfoOutputWithContext(ctx context.Context) AccessPointRootDirectoryCreationInfoOutput {
	return o
}

func (o AccessPointRootDirectoryCreationInfoOutput) ToOutput(ctx context.Context) pulumix.Output[AccessPointRootDirectoryCreationInfo] {
	return pulumix.Output[AccessPointRootDirectoryCreationInfo]{
		OutputState: o.OutputState,
	}
}

// POSIX group ID to apply to the `rootDirectory`.
func (o AccessPointRootDirectoryCreationInfoOutput) OwnerGid() pulumix.Output[int] {
	return pulumix.Apply[AccessPointRootDirectoryCreationInfo](o, func(v AccessPointRootDirectoryCreationInfo) int { return v.OwnerGid })
}

// POSIX user ID to apply to the `rootDirectory`.
func (o AccessPointRootDirectoryCreationInfoOutput) OwnerUid() pulumix.Output[int] {
	return pulumix.Apply[AccessPointRootDirectoryCreationInfo](o, func(v AccessPointRootDirectoryCreationInfo) int { return v.OwnerUid })
}

// POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
func (o AccessPointRootDirectoryCreationInfoOutput) Permissions() pulumix.Output[string] {
	return pulumix.Apply[AccessPointRootDirectoryCreationInfo](o, func(v AccessPointRootDirectoryCreationInfo) string { return v.Permissions })
}

type BackupPolicyBackupPolicy struct {
	// A status of the backup policy. Valid values: `ENABLED`, `DISABLED`.
	Status string `pulumi:"status"`
}

type BackupPolicyBackupPolicyArgs struct {
	// A status of the backup policy. Valid values: `ENABLED`, `DISABLED`.
	Status pulumix.Input[string] `pulumi:"status"`
}

func (BackupPolicyBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupPolicyBackupPolicy)(nil)).Elem()
}

func (i BackupPolicyBackupPolicyArgs) ToBackupPolicyBackupPolicyOutput() BackupPolicyBackupPolicyOutput {
	return i.ToBackupPolicyBackupPolicyOutputWithContext(context.Background())
}

func (i BackupPolicyBackupPolicyArgs) ToBackupPolicyBackupPolicyOutputWithContext(ctx context.Context) BackupPolicyBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPolicyBackupPolicyOutput)
}

func (i *BackupPolicyBackupPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*BackupPolicyBackupPolicyArgs] {
	return pulumix.Val(i)
}

type BackupPolicyBackupPolicyOutput struct{ *pulumi.OutputState }

func (BackupPolicyBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupPolicyBackupPolicy)(nil)).Elem()
}

func (o BackupPolicyBackupPolicyOutput) ToBackupPolicyBackupPolicyOutput() BackupPolicyBackupPolicyOutput {
	return o
}

func (o BackupPolicyBackupPolicyOutput) ToBackupPolicyBackupPolicyOutputWithContext(ctx context.Context) BackupPolicyBackupPolicyOutput {
	return o
}

func (o BackupPolicyBackupPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[BackupPolicyBackupPolicy] {
	return pulumix.Output[BackupPolicyBackupPolicy]{
		OutputState: o.OutputState,
	}
}

// A status of the backup policy. Valid values: `ENABLED`, `DISABLED`.
func (o BackupPolicyBackupPolicyOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[BackupPolicyBackupPolicy](o, func(v BackupPolicyBackupPolicy) string { return v.Status })
}

type FileSystemLifecyclePolicy struct {
	// Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`.
	TransitionToIa *string `pulumi:"transitionToIa"`
	// Describes the policy used to transition a file from infequent access storage to primary storage. Valid values: `AFTER_1_ACCESS`.
	TransitionToPrimaryStorageClass *string `pulumi:"transitionToPrimaryStorageClass"`
}

type FileSystemLifecyclePolicyArgs struct {
	// Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`.
	TransitionToIa pulumix.Input[*string] `pulumi:"transitionToIa"`
	// Describes the policy used to transition a file from infequent access storage to primary storage. Valid values: `AFTER_1_ACCESS`.
	TransitionToPrimaryStorageClass pulumix.Input[*string] `pulumi:"transitionToPrimaryStorageClass"`
}

func (FileSystemLifecyclePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemLifecyclePolicy)(nil)).Elem()
}

func (i FileSystemLifecyclePolicyArgs) ToFileSystemLifecyclePolicyOutput() FileSystemLifecyclePolicyOutput {
	return i.ToFileSystemLifecyclePolicyOutputWithContext(context.Background())
}

func (i FileSystemLifecyclePolicyArgs) ToFileSystemLifecyclePolicyOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemLifecyclePolicyOutput)
}

func (i *FileSystemLifecyclePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*FileSystemLifecyclePolicyArgs] {
	return pulumix.Val(i)
}

type FileSystemLifecyclePolicyOutput struct{ *pulumi.OutputState }

func (FileSystemLifecyclePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemLifecyclePolicy)(nil)).Elem()
}

func (o FileSystemLifecyclePolicyOutput) ToFileSystemLifecyclePolicyOutput() FileSystemLifecyclePolicyOutput {
	return o
}

func (o FileSystemLifecyclePolicyOutput) ToFileSystemLifecyclePolicyOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyOutput {
	return o
}

func (o FileSystemLifecyclePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[FileSystemLifecyclePolicy] {
	return pulumix.Output[FileSystemLifecyclePolicy]{
		OutputState: o.OutputState,
	}
}

// Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`.
func (o FileSystemLifecyclePolicyOutput) TransitionToIa() pulumix.Output[*string] {
	return pulumix.Apply[FileSystemLifecyclePolicy](o, func(v FileSystemLifecyclePolicy) *string { return v.TransitionToIa })
}

// Describes the policy used to transition a file from infequent access storage to primary storage. Valid values: `AFTER_1_ACCESS`.
func (o FileSystemLifecyclePolicyOutput) TransitionToPrimaryStorageClass() pulumix.Output[*string] {
	return pulumix.Apply[FileSystemLifecyclePolicy](o, func(v FileSystemLifecyclePolicy) *string { return v.TransitionToPrimaryStorageClass })
}

type FileSystemSizeInByte struct {
	// The latest known metered size (in bytes) of data stored in the file system.
	Value *int `pulumi:"value"`
	// The latest known metered size (in bytes) of data stored in the Infrequent Access storage class.
	ValueInIa *int `pulumi:"valueInIa"`
	// The latest known metered size (in bytes) of data stored in the Standard storage class.
	ValueInStandard *int `pulumi:"valueInStandard"`
}

type FileSystemSizeInByteArgs struct {
	// The latest known metered size (in bytes) of data stored in the file system.
	Value pulumix.Input[*int] `pulumi:"value"`
	// The latest known metered size (in bytes) of data stored in the Infrequent Access storage class.
	ValueInIa pulumix.Input[*int] `pulumi:"valueInIa"`
	// The latest known metered size (in bytes) of data stored in the Standard storage class.
	ValueInStandard pulumix.Input[*int] `pulumi:"valueInStandard"`
}

func (FileSystemSizeInByteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemSizeInByte)(nil)).Elem()
}

func (i FileSystemSizeInByteArgs) ToFileSystemSizeInByteOutput() FileSystemSizeInByteOutput {
	return i.ToFileSystemSizeInByteOutputWithContext(context.Background())
}

func (i FileSystemSizeInByteArgs) ToFileSystemSizeInByteOutputWithContext(ctx context.Context) FileSystemSizeInByteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemSizeInByteOutput)
}

func (i *FileSystemSizeInByteArgs) ToOutput(ctx context.Context) pulumix.Output[*FileSystemSizeInByteArgs] {
	return pulumix.Val(i)
}

type FileSystemSizeInByteOutput struct{ *pulumi.OutputState }

func (FileSystemSizeInByteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemSizeInByte)(nil)).Elem()
}

func (o FileSystemSizeInByteOutput) ToFileSystemSizeInByteOutput() FileSystemSizeInByteOutput {
	return o
}

func (o FileSystemSizeInByteOutput) ToFileSystemSizeInByteOutputWithContext(ctx context.Context) FileSystemSizeInByteOutput {
	return o
}

func (o FileSystemSizeInByteOutput) ToOutput(ctx context.Context) pulumix.Output[FileSystemSizeInByte] {
	return pulumix.Output[FileSystemSizeInByte]{
		OutputState: o.OutputState,
	}
}

// The latest known metered size (in bytes) of data stored in the file system.
func (o FileSystemSizeInByteOutput) Value() pulumix.Output[*int] {
	return pulumix.Apply[FileSystemSizeInByte](o, func(v FileSystemSizeInByte) *int { return v.Value })
}

// The latest known metered size (in bytes) of data stored in the Infrequent Access storage class.
func (o FileSystemSizeInByteOutput) ValueInIa() pulumix.Output[*int] {
	return pulumix.Apply[FileSystemSizeInByte](o, func(v FileSystemSizeInByte) *int { return v.ValueInIa })
}

// The latest known metered size (in bytes) of data stored in the Standard storage class.
func (o FileSystemSizeInByteOutput) ValueInStandard() pulumix.Output[*int] {
	return pulumix.Apply[FileSystemSizeInByte](o, func(v FileSystemSizeInByte) *int { return v.ValueInStandard })
}

type ReplicationConfigurationDestination struct {
	// The availability zone in which the replica should be created. If specified, the replica will be created with One Zone storage. If omitted, regional storage will be used.
	AvailabilityZoneName *string `pulumi:"availabilityZoneName"`
	FileSystemId         *string `pulumi:"fileSystemId"`
	// The Key ID, ARN, alias, or alias ARN of the KMS key that should be used to encrypt the replica file system. If omitted, the default KMS key for EFS `/aws/elasticfilesystem` will be used.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The region in which the replica should be created.
	Region *string `pulumi:"region"`
	Status *string `pulumi:"status"`
}

type ReplicationConfigurationDestinationArgs struct {
	// The availability zone in which the replica should be created. If specified, the replica will be created with One Zone storage. If omitted, regional storage will be used.
	AvailabilityZoneName pulumix.Input[*string] `pulumi:"availabilityZoneName"`
	FileSystemId         pulumix.Input[*string] `pulumi:"fileSystemId"`
	// The Key ID, ARN, alias, or alias ARN of the KMS key that should be used to encrypt the replica file system. If omitted, the default KMS key for EFS `/aws/elasticfilesystem` will be used.
	KmsKeyId pulumix.Input[*string] `pulumi:"kmsKeyId"`
	// The region in which the replica should be created.
	Region pulumix.Input[*string] `pulumi:"region"`
	Status pulumix.Input[*string] `pulumi:"status"`
}

func (ReplicationConfigurationDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationDestination)(nil)).Elem()
}

func (i ReplicationConfigurationDestinationArgs) ToReplicationConfigurationDestinationOutput() ReplicationConfigurationDestinationOutput {
	return i.ToReplicationConfigurationDestinationOutputWithContext(context.Background())
}

func (i ReplicationConfigurationDestinationArgs) ToReplicationConfigurationDestinationOutputWithContext(ctx context.Context) ReplicationConfigurationDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationDestinationOutput)
}

func (i *ReplicationConfigurationDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*ReplicationConfigurationDestinationArgs] {
	return pulumix.Val(i)
}

type ReplicationConfigurationDestinationOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationDestination)(nil)).Elem()
}

func (o ReplicationConfigurationDestinationOutput) ToReplicationConfigurationDestinationOutput() ReplicationConfigurationDestinationOutput {
	return o
}

func (o ReplicationConfigurationDestinationOutput) ToReplicationConfigurationDestinationOutputWithContext(ctx context.Context) ReplicationConfigurationDestinationOutput {
	return o
}

func (o ReplicationConfigurationDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicationConfigurationDestination] {
	return pulumix.Output[ReplicationConfigurationDestination]{
		OutputState: o.OutputState,
	}
}

// The availability zone in which the replica should be created. If specified, the replica will be created with One Zone storage. If omitted, regional storage will be used.
func (o ReplicationConfigurationDestinationOutput) AvailabilityZoneName() pulumix.Output[*string] {
	return pulumix.Apply[ReplicationConfigurationDestination](o, func(v ReplicationConfigurationDestination) *string { return v.AvailabilityZoneName })
}

func (o ReplicationConfigurationDestinationOutput) FileSystemId() pulumix.Output[*string] {
	return pulumix.Apply[ReplicationConfigurationDestination](o, func(v ReplicationConfigurationDestination) *string { return v.FileSystemId })
}

// The Key ID, ARN, alias, or alias ARN of the KMS key that should be used to encrypt the replica file system. If omitted, the default KMS key for EFS `/aws/elasticfilesystem` will be used.
func (o ReplicationConfigurationDestinationOutput) KmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[ReplicationConfigurationDestination](o, func(v ReplicationConfigurationDestination) *string { return v.KmsKeyId })
}

// The region in which the replica should be created.
func (o ReplicationConfigurationDestinationOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[ReplicationConfigurationDestination](o, func(v ReplicationConfigurationDestination) *string { return v.Region })
}

func (o ReplicationConfigurationDestinationOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[ReplicationConfigurationDestination](o, func(v ReplicationConfigurationDestination) *string { return v.Status })
}

type GetAccessPointPosixUser struct {
	// Group ID
	Gid int `pulumi:"gid"`
	// Secondary group IDs
	SecondaryGids []int `pulumi:"secondaryGids"`
	// User Id
	Uid int `pulumi:"uid"`
}

type GetAccessPointPosixUserArgs struct {
	// Group ID
	Gid pulumix.Input[int] `pulumi:"gid"`
	// Secondary group IDs
	SecondaryGids pulumix.Input[[]int] `pulumi:"secondaryGids"`
	// User Id
	Uid pulumix.Input[int] `pulumi:"uid"`
}

func (GetAccessPointPosixUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessPointPosixUser)(nil)).Elem()
}

func (i GetAccessPointPosixUserArgs) ToGetAccessPointPosixUserOutput() GetAccessPointPosixUserOutput {
	return i.ToGetAccessPointPosixUserOutputWithContext(context.Background())
}

func (i GetAccessPointPosixUserArgs) ToGetAccessPointPosixUserOutputWithContext(ctx context.Context) GetAccessPointPosixUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccessPointPosixUserOutput)
}

func (i *GetAccessPointPosixUserArgs) ToOutput(ctx context.Context) pulumix.Output[*GetAccessPointPosixUserArgs] {
	return pulumix.Val(i)
}

type GetAccessPointPosixUserOutput struct{ *pulumi.OutputState }

func (GetAccessPointPosixUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessPointPosixUser)(nil)).Elem()
}

func (o GetAccessPointPosixUserOutput) ToGetAccessPointPosixUserOutput() GetAccessPointPosixUserOutput {
	return o
}

func (o GetAccessPointPosixUserOutput) ToGetAccessPointPosixUserOutputWithContext(ctx context.Context) GetAccessPointPosixUserOutput {
	return o
}

func (o GetAccessPointPosixUserOutput) ToOutput(ctx context.Context) pulumix.Output[GetAccessPointPosixUser] {
	return pulumix.Output[GetAccessPointPosixUser]{
		OutputState: o.OutputState,
	}
}

// Group ID
func (o GetAccessPointPosixUserOutput) Gid() pulumix.Output[int] {
	return pulumix.Apply[GetAccessPointPosixUser](o, func(v GetAccessPointPosixUser) int { return v.Gid })
}

// Secondary group IDs
func (o GetAccessPointPosixUserOutput) SecondaryGids() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[GetAccessPointPosixUser](o, func(v GetAccessPointPosixUser) []int { return v.SecondaryGids })
	return pulumix.ArrayOutput[int]{OutputState: value.OutputState}
}

// User Id
func (o GetAccessPointPosixUserOutput) Uid() pulumix.Output[int] {
	return pulumix.Apply[GetAccessPointPosixUser](o, func(v GetAccessPointPosixUser) int { return v.Uid })
}

type GetAccessPointRootDirectory struct {
	// Single element list containing information on the creation permissions of the directory
	CreationInfos []GetAccessPointRootDirectoryCreationInfo `pulumi:"creationInfos"`
	// Path exposed as the root directory
	Path string `pulumi:"path"`
}

type GetAccessPointRootDirectoryArgs struct {
	// Single element list containing information on the creation permissions of the directory
	CreationInfos pulumix.Input[[]*GetAccessPointRootDirectoryCreationInfoArgs] `pulumi:"creationInfos"`
	// Path exposed as the root directory
	Path pulumix.Input[string] `pulumi:"path"`
}

func (GetAccessPointRootDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessPointRootDirectory)(nil)).Elem()
}

func (i GetAccessPointRootDirectoryArgs) ToGetAccessPointRootDirectoryOutput() GetAccessPointRootDirectoryOutput {
	return i.ToGetAccessPointRootDirectoryOutputWithContext(context.Background())
}

func (i GetAccessPointRootDirectoryArgs) ToGetAccessPointRootDirectoryOutputWithContext(ctx context.Context) GetAccessPointRootDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccessPointRootDirectoryOutput)
}

func (i *GetAccessPointRootDirectoryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetAccessPointRootDirectoryArgs] {
	return pulumix.Val(i)
}

type GetAccessPointRootDirectoryOutput struct{ *pulumi.OutputState }

func (GetAccessPointRootDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessPointRootDirectory)(nil)).Elem()
}

func (o GetAccessPointRootDirectoryOutput) ToGetAccessPointRootDirectoryOutput() GetAccessPointRootDirectoryOutput {
	return o
}

func (o GetAccessPointRootDirectoryOutput) ToGetAccessPointRootDirectoryOutputWithContext(ctx context.Context) GetAccessPointRootDirectoryOutput {
	return o
}

func (o GetAccessPointRootDirectoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetAccessPointRootDirectory] {
	return pulumix.Output[GetAccessPointRootDirectory]{
		OutputState: o.OutputState,
	}
}

// Single element list containing information on the creation permissions of the directory
func (o GetAccessPointRootDirectoryOutput) CreationInfos() pulumix.GArrayOutput[GetAccessPointRootDirectoryCreationInfo, GetAccessPointRootDirectoryCreationInfoOutput] {
	value := pulumix.Apply[GetAccessPointRootDirectory](o, func(v GetAccessPointRootDirectory) []GetAccessPointRootDirectoryCreationInfo { return v.CreationInfos })
	return pulumix.GArrayOutput[GetAccessPointRootDirectoryCreationInfo, GetAccessPointRootDirectoryCreationInfoOutput]{OutputState: value.OutputState}
}

// Path exposed as the root directory
func (o GetAccessPointRootDirectoryOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[GetAccessPointRootDirectory](o, func(v GetAccessPointRootDirectory) string { return v.Path })
}

type GetAccessPointRootDirectoryCreationInfo struct {
	// POSIX owner group ID
	OwnerGid int `pulumi:"ownerGid"`
	// POSIX owner user ID
	OwnerUid int `pulumi:"ownerUid"`
	// POSIX permissions mode
	Permissions string `pulumi:"permissions"`
}

type GetAccessPointRootDirectoryCreationInfoArgs struct {
	// POSIX owner group ID
	OwnerGid pulumix.Input[int] `pulumi:"ownerGid"`
	// POSIX owner user ID
	OwnerUid pulumix.Input[int] `pulumi:"ownerUid"`
	// POSIX permissions mode
	Permissions pulumix.Input[string] `pulumi:"permissions"`
}

func (GetAccessPointRootDirectoryCreationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessPointRootDirectoryCreationInfo)(nil)).Elem()
}

func (i GetAccessPointRootDirectoryCreationInfoArgs) ToGetAccessPointRootDirectoryCreationInfoOutput() GetAccessPointRootDirectoryCreationInfoOutput {
	return i.ToGetAccessPointRootDirectoryCreationInfoOutputWithContext(context.Background())
}

func (i GetAccessPointRootDirectoryCreationInfoArgs) ToGetAccessPointRootDirectoryCreationInfoOutputWithContext(ctx context.Context) GetAccessPointRootDirectoryCreationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccessPointRootDirectoryCreationInfoOutput)
}

func (i *GetAccessPointRootDirectoryCreationInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*GetAccessPointRootDirectoryCreationInfoArgs] {
	return pulumix.Val(i)
}

type GetAccessPointRootDirectoryCreationInfoOutput struct{ *pulumi.OutputState }

func (GetAccessPointRootDirectoryCreationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessPointRootDirectoryCreationInfo)(nil)).Elem()
}

func (o GetAccessPointRootDirectoryCreationInfoOutput) ToGetAccessPointRootDirectoryCreationInfoOutput() GetAccessPointRootDirectoryCreationInfoOutput {
	return o
}

func (o GetAccessPointRootDirectoryCreationInfoOutput) ToGetAccessPointRootDirectoryCreationInfoOutputWithContext(ctx context.Context) GetAccessPointRootDirectoryCreationInfoOutput {
	return o
}

func (o GetAccessPointRootDirectoryCreationInfoOutput) ToOutput(ctx context.Context) pulumix.Output[GetAccessPointRootDirectoryCreationInfo] {
	return pulumix.Output[GetAccessPointRootDirectoryCreationInfo]{
		OutputState: o.OutputState,
	}
}

// POSIX owner group ID
func (o GetAccessPointRootDirectoryCreationInfoOutput) OwnerGid() pulumix.Output[int] {
	return pulumix.Apply[GetAccessPointRootDirectoryCreationInfo](o, func(v GetAccessPointRootDirectoryCreationInfo) int { return v.OwnerGid })
}

// POSIX owner user ID
func (o GetAccessPointRootDirectoryCreationInfoOutput) OwnerUid() pulumix.Output[int] {
	return pulumix.Apply[GetAccessPointRootDirectoryCreationInfo](o, func(v GetAccessPointRootDirectoryCreationInfo) int { return v.OwnerUid })
}

// POSIX permissions mode
func (o GetAccessPointRootDirectoryCreationInfoOutput) Permissions() pulumix.Output[string] {
	return pulumix.Apply[GetAccessPointRootDirectoryCreationInfo](o, func(v GetAccessPointRootDirectoryCreationInfo) string { return v.Permissions })
}

type GetFileSystemLifecyclePolicy struct {
	TransitionToIa                  string `pulumi:"transitionToIa"`
	TransitionToPrimaryStorageClass string `pulumi:"transitionToPrimaryStorageClass"`
}

type GetFileSystemLifecyclePolicyArgs struct {
	TransitionToIa                  pulumix.Input[string] `pulumi:"transitionToIa"`
	TransitionToPrimaryStorageClass pulumix.Input[string] `pulumi:"transitionToPrimaryStorageClass"`
}

func (GetFileSystemLifecyclePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFileSystemLifecyclePolicy)(nil)).Elem()
}

func (i GetFileSystemLifecyclePolicyArgs) ToGetFileSystemLifecyclePolicyOutput() GetFileSystemLifecyclePolicyOutput {
	return i.ToGetFileSystemLifecyclePolicyOutputWithContext(context.Background())
}

func (i GetFileSystemLifecyclePolicyArgs) ToGetFileSystemLifecyclePolicyOutputWithContext(ctx context.Context) GetFileSystemLifecyclePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFileSystemLifecyclePolicyOutput)
}

func (i *GetFileSystemLifecyclePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetFileSystemLifecyclePolicyArgs] {
	return pulumix.Val(i)
}

type GetFileSystemLifecyclePolicyOutput struct{ *pulumi.OutputState }

func (GetFileSystemLifecyclePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFileSystemLifecyclePolicy)(nil)).Elem()
}

func (o GetFileSystemLifecyclePolicyOutput) ToGetFileSystemLifecyclePolicyOutput() GetFileSystemLifecyclePolicyOutput {
	return o
}

func (o GetFileSystemLifecyclePolicyOutput) ToGetFileSystemLifecyclePolicyOutputWithContext(ctx context.Context) GetFileSystemLifecyclePolicyOutput {
	return o
}

func (o GetFileSystemLifecyclePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetFileSystemLifecyclePolicy] {
	return pulumix.Output[GetFileSystemLifecyclePolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetFileSystemLifecyclePolicyOutput) TransitionToIa() pulumix.Output[string] {
	return pulumix.Apply[GetFileSystemLifecyclePolicy](o, func(v GetFileSystemLifecyclePolicy) string { return v.TransitionToIa })
}

func (o GetFileSystemLifecyclePolicyOutput) TransitionToPrimaryStorageClass() pulumix.Output[string] {
	return pulumix.Apply[GetFileSystemLifecyclePolicy](o, func(v GetFileSystemLifecyclePolicy) string { return v.TransitionToPrimaryStorageClass })
}

func init() {
	pulumi.RegisterOutputType(AccessPointPosixUserOutput{})
	pulumi.RegisterOutputType(AccessPointRootDirectoryOutput{})
	pulumi.RegisterOutputType(AccessPointRootDirectoryCreationInfoOutput{})
	pulumi.RegisterOutputType(BackupPolicyBackupPolicyOutput{})
	pulumi.RegisterOutputType(FileSystemLifecyclePolicyOutput{})
	pulumi.RegisterOutputType(FileSystemSizeInByteOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationDestinationOutput{})
	pulumi.RegisterOutputType(GetAccessPointPosixUserOutput{})
	pulumi.RegisterOutputType(GetAccessPointRootDirectoryOutput{})
	pulumi.RegisterOutputType(GetAccessPointRootDirectoryCreationInfoOutput{})
	pulumi.RegisterOutputType(GetFileSystemLifecyclePolicyOutput{})
}
