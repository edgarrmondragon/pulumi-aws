// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS DMS (Database Migration) Replication Task.
func LookupReplicationTask(ctx *pulumi.Context, args *LookupReplicationTaskArgs, opts ...pulumi.InvokeOption) (*LookupReplicationTaskResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupReplicationTaskResult
	err := ctx.Invoke("aws:dms/getReplicationTask:getReplicationTask", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReplicationTask.
type LookupReplicationTaskArgs struct {
	// The replication task identifier.
	//
	// - Must contain from 1 to 255 alphanumeric characters or hyphens.
	// - First character must be a letter.
	// - Cannot end with a hyphen.
	// - Cannot contain two consecutive hyphens.
	ReplicationTaskId string            `pulumi:"replicationTaskId"`
	Tags              map[string]string `pulumi:"tags"`
}

// A collection of values returned by getReplicationTask.
type LookupReplicationTaskResult struct {
	// (Conflicts with `cdcStartTime`) Indicates when you want a change data capture (CDC) operation to start. The value can be in date, checkpoint, or LSN/SCN format depending on the source engine. For more information, see [Determining a CDC native start point](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Task.CDC.html#CHAP_Task.CDC.StartPoint.Native).
	CdcStartPosition string `pulumi:"cdcStartPosition"`
	// (Conflicts with `cdcStartPosition`) The Unix timestamp integer for the start of the Change Data Capture (CDC) operation.
	CdcStartTime string `pulumi:"cdcStartTime"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The migration type. Can be one of `full-load | cdc | full-load-and-cdc`.
	MigrationType string `pulumi:"migrationType"`
	// The Amazon Resource Name (ARN) of the replication instance.
	ReplicationInstanceArn string `pulumi:"replicationInstanceArn"`
	// The Amazon Resource Name (ARN) for the replication task.
	ReplicationTaskArn string `pulumi:"replicationTaskArn"`
	ReplicationTaskId  string `pulumi:"replicationTaskId"`
	// An escaped JSON string that contains the task settings. For a complete list of task settings, see [Task Settings for AWS Database Migration Service Tasks](http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TaskSettings.html).
	ReplicationTaskSettings string `pulumi:"replicationTaskSettings"`
	// The Amazon Resource Name (ARN) string that uniquely identifies the source endpoint.
	SourceEndpointArn string `pulumi:"sourceEndpointArn"`
	// Whether to run or stop the replication task.
	StartReplicationTask bool `pulumi:"startReplicationTask"`
	// Replication Task status.
	Status string `pulumi:"status"`
	// An escaped JSON string that contains the table mappings. For information on table mapping see [Using Table Mapping with an AWS Database Migration Service Task to Select and Filter Data](http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TableMapping.html)
	TableMappings string            `pulumi:"tableMappings"`
	Tags          map[string]string `pulumi:"tags"`
	// The Amazon Resource Name (ARN) string that uniquely identifies the target endpoint.
	TargetEndpointArn string `pulumi:"targetEndpointArn"`
}

func LookupReplicationTaskOutput(ctx *pulumi.Context, args LookupReplicationTaskOutputArgs, opts ...pulumi.InvokeOption) LookupReplicationTaskResultOutput {
	outputResult := pulumix.ApplyErr[*LookupReplicationTaskArgs](args.ToOutput(), func(plainArgs *LookupReplicationTaskArgs) (*LookupReplicationTaskResult, error) {
		return LookupReplicationTask(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupReplicationTaskResultOutput, *LookupReplicationTaskResult](outputResult)
}

// A collection of arguments for invoking getReplicationTask.
type LookupReplicationTaskOutputArgs struct {
	// The replication task identifier.
	//
	// - Must contain from 1 to 255 alphanumeric characters or hyphens.
	// - First character must be a letter.
	// - Cannot end with a hyphen.
	// - Cannot contain two consecutive hyphens.
	ReplicationTaskId pulumix.Input[string]            `pulumi:"replicationTaskId"`
	Tags              pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupReplicationTaskOutputArgs) ToOutput() pulumix.Output[*LookupReplicationTaskArgs] {
	allArgs := pulumix.All(
		args.ReplicationTaskId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupReplicationTaskArgs {
		return &LookupReplicationTaskArgs{
			ReplicationTaskId: resolvedArgs[0].(string),
			Tags:              resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupReplicationTaskResultOutput struct{ *pulumi.OutputState }

func (LookupReplicationTaskResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReplicationTaskResult)(nil)).Elem()
}

func (o LookupReplicationTaskResultOutput) ToOutput(context.Context) pulumix.Output[*LookupReplicationTaskResult] {
	return pulumix.Output[*LookupReplicationTaskResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupReplicationTaskResultOutput) CdcStartPosition() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationTaskResult](o, func(v *LookupReplicationTaskResult) string { return v.CdcStartPosition })
}

func (o LookupReplicationTaskResultOutput) CdcStartTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationTaskResult](o, func(v *LookupReplicationTaskResult) string { return v.CdcStartTime })
}

func (o LookupReplicationTaskResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationTaskResult](o, func(v *LookupReplicationTaskResult) string { return v.Id })
}

func (o LookupReplicationTaskResultOutput) MigrationType() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationTaskResult](o, func(v *LookupReplicationTaskResult) string { return v.MigrationType })
}

func (o LookupReplicationTaskResultOutput) ReplicationInstanceArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationTaskResult](o, func(v *LookupReplicationTaskResult) string { return v.ReplicationInstanceArn })
}

func (o LookupReplicationTaskResultOutput) ReplicationTaskArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationTaskResult](o, func(v *LookupReplicationTaskResult) string { return v.ReplicationTaskArn })
}

func (o LookupReplicationTaskResultOutput) ReplicationTaskId() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationTaskResult](o, func(v *LookupReplicationTaskResult) string { return v.ReplicationTaskId })
}

func (o LookupReplicationTaskResultOutput) ReplicationTaskSettings() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationTaskResult](o, func(v *LookupReplicationTaskResult) string { return v.ReplicationTaskSettings })
}

func (o LookupReplicationTaskResultOutput) SourceEndpointArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationTaskResult](o, func(v *LookupReplicationTaskResult) string { return v.SourceEndpointArn })
}

func (o LookupReplicationTaskResultOutput) StartReplicationTask() pulumix.Output[bool] {
	return pulumix.Apply[*LookupReplicationTaskResult](o, func(v *LookupReplicationTaskResult) bool { return v.StartReplicationTask })
}

func (o LookupReplicationTaskResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationTaskResult](o, func(v *LookupReplicationTaskResult) string { return v.Status })
}

func (o LookupReplicationTaskResultOutput) TableMappings() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationTaskResult](o, func(v *LookupReplicationTaskResult) string { return v.TableMappings })
}

func (o LookupReplicationTaskResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupReplicationTaskResult](o, func(v *LookupReplicationTaskResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupReplicationTaskResultOutput) TargetEndpointArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationTaskResult](o, func(v *LookupReplicationTaskResult) string { return v.TargetEndpointArn })
}
