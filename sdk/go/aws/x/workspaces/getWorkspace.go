// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about a workspace in [AWS Workspaces](https://docs.aws.amazon.com/workspaces/latest/adminguide/amazon-workspaces.html) Service.
func LookupWorkspace(ctx *pulumi.Context, args *LookupWorkspaceArgs, opts ...pulumi.InvokeOption) (*LookupWorkspaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkspaceResult
	err := ctx.Invoke("aws:workspaces/getWorkspace:getWorkspace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorkspace.
type LookupWorkspaceArgs struct {
	// ID of the directory for the WorkSpace. You have to specify `userName` along with `directoryId`. You cannot combine this parameter with `workspaceId`.
	DirectoryId *string `pulumi:"directoryId"`
	// Tags for the WorkSpace.
	Tags map[string]string `pulumi:"tags"`
	// User name of the user for the WorkSpace. This user name must exist in the directory for the WorkSpace. You cannot combine this parameter with `workspaceId`.
	UserName *string `pulumi:"userName"`
	// ID of the WorkSpace. You cannot combine this parameter with `directoryId`.
	WorkspaceId *string `pulumi:"workspaceId"`
}

// A collection of values returned by getWorkspace.
type LookupWorkspaceResult struct {
	BundleId string `pulumi:"bundleId"`
	// Name of the WorkSpace, as seen by the operating system.
	ComputerName string `pulumi:"computerName"`
	DirectoryId  string `pulumi:"directoryId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// IP address of the WorkSpace.
	IpAddress                   string `pulumi:"ipAddress"`
	RootVolumeEncryptionEnabled bool   `pulumi:"rootVolumeEncryptionEnabled"`
	// Operational state of the WorkSpace.
	State                       string                          `pulumi:"state"`
	Tags                        map[string]string               `pulumi:"tags"`
	UserName                    string                          `pulumi:"userName"`
	UserVolumeEncryptionEnabled bool                            `pulumi:"userVolumeEncryptionEnabled"`
	VolumeEncryptionKey         string                          `pulumi:"volumeEncryptionKey"`
	WorkspaceId                 string                          `pulumi:"workspaceId"`
	WorkspaceProperties         []GetWorkspaceWorkspaceProperty `pulumi:"workspaceProperties"`
}

func LookupWorkspaceOutput(ctx *pulumi.Context, args LookupWorkspaceOutputArgs, opts ...pulumi.InvokeOption) LookupWorkspaceResultOutput {
	outputResult := pulumix.ApplyErr[*LookupWorkspaceArgs](args.ToOutput(), func(plainArgs *LookupWorkspaceArgs) (*LookupWorkspaceResult, error) {
		return LookupWorkspace(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupWorkspaceResultOutput, *LookupWorkspaceResult](outputResult)
}

// A collection of arguments for invoking getWorkspace.
type LookupWorkspaceOutputArgs struct {
	// ID of the directory for the WorkSpace. You have to specify `userName` along with `directoryId`. You cannot combine this parameter with `workspaceId`.
	DirectoryId pulumix.Input[*string] `pulumi:"directoryId"`
	// Tags for the WorkSpace.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// User name of the user for the WorkSpace. This user name must exist in the directory for the WorkSpace. You cannot combine this parameter with `workspaceId`.
	UserName pulumix.Input[*string] `pulumi:"userName"`
	// ID of the WorkSpace. You cannot combine this parameter with `directoryId`.
	WorkspaceId pulumix.Input[*string] `pulumi:"workspaceId"`
}

func (args LookupWorkspaceOutputArgs) ToOutput() pulumix.Output[*LookupWorkspaceArgs] {
	allArgs := pulumix.All(
		args.DirectoryId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.UserName.ToOutput(context.Background()).AsAny(),
		args.WorkspaceId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupWorkspaceArgs {
		return &LookupWorkspaceArgs{
			DirectoryId: resolvedArgs[0].(*string),
			Tags:        resolvedArgs[1].(map[string]string),
			UserName:    resolvedArgs[2].(*string),
			WorkspaceId: resolvedArgs[3].(*string),
		}
	})
}

type LookupWorkspaceResultOutput struct{ *pulumi.OutputState }

func (LookupWorkspaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkspaceResult)(nil)).Elem()
}

func (o LookupWorkspaceResultOutput) ToOutput(context.Context) pulumix.Output[*LookupWorkspaceResult] {
	return pulumix.Output[*LookupWorkspaceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupWorkspaceResultOutput) BundleId() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.BundleId })
}

func (o LookupWorkspaceResultOutput) ComputerName() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.ComputerName })
}

func (o LookupWorkspaceResultOutput) DirectoryId() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.DirectoryId })
}

func (o LookupWorkspaceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.Id })
}

func (o LookupWorkspaceResultOutput) IpAddress() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.IpAddress })
}

func (o LookupWorkspaceResultOutput) RootVolumeEncryptionEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) bool { return v.RootVolumeEncryptionEnabled })
}

func (o LookupWorkspaceResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.State })
}

func (o LookupWorkspaceResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupWorkspaceResultOutput) UserName() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.UserName })
}

func (o LookupWorkspaceResultOutput) UserVolumeEncryptionEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) bool { return v.UserVolumeEncryptionEnabled })
}

func (o LookupWorkspaceResultOutput) VolumeEncryptionKey() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.VolumeEncryptionKey })
}

func (o LookupWorkspaceResultOutput) WorkspaceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.WorkspaceId })
}

func (o LookupWorkspaceResultOutput) WorkspaceProperties() pulumix.GArrayOutput[GetWorkspaceWorkspaceProperty, GetWorkspaceWorkspacePropertyOutput] {
	value := pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) []GetWorkspaceWorkspaceProperty { return v.WorkspaceProperties })
	return pulumix.GArrayOutput[GetWorkspaceWorkspaceProperty, GetWorkspaceWorkspacePropertyOutput]{
		OutputState: value.OutputState,
	}
}
