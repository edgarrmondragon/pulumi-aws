// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package athena

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type DatabaseAclConfiguration struct {
	// Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is `BUCKET_OWNER_FULL_CONTROL`.
	//
	// > **NOTE:** When Athena queries are executed, result files may be created in the specified bucket. Consider using `forceDestroy` on the bucket too in order to avoid any problems when destroying the bucket.
	S3AclOption string `pulumi:"s3AclOption"`
}

type DatabaseAclConfigurationArgs struct {
	// Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is `BUCKET_OWNER_FULL_CONTROL`.
	//
	// > **NOTE:** When Athena queries are executed, result files may be created in the specified bucket. Consider using `forceDestroy` on the bucket too in order to avoid any problems when destroying the bucket.
	S3AclOption pulumix.Input[string] `pulumi:"s3AclOption"`
}

func (DatabaseAclConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAclConfiguration)(nil)).Elem()
}

func (i DatabaseAclConfigurationArgs) ToDatabaseAclConfigurationOutput() DatabaseAclConfigurationOutput {
	return i.ToDatabaseAclConfigurationOutputWithContext(context.Background())
}

func (i DatabaseAclConfigurationArgs) ToDatabaseAclConfigurationOutputWithContext(ctx context.Context) DatabaseAclConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseAclConfigurationOutput)
}

func (i *DatabaseAclConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DatabaseAclConfigurationArgs] {
	return pulumix.Val(i)
}

type DatabaseAclConfigurationOutput struct{ *pulumi.OutputState }

func (DatabaseAclConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAclConfiguration)(nil)).Elem()
}

func (o DatabaseAclConfigurationOutput) ToDatabaseAclConfigurationOutput() DatabaseAclConfigurationOutput {
	return o
}

func (o DatabaseAclConfigurationOutput) ToDatabaseAclConfigurationOutputWithContext(ctx context.Context) DatabaseAclConfigurationOutput {
	return o
}

func (o DatabaseAclConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseAclConfiguration] {
	return pulumix.Output[DatabaseAclConfiguration]{
		OutputState: o.OutputState,
	}
}

// Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is `BUCKET_OWNER_FULL_CONTROL`.
//
// > **NOTE:** When Athena queries are executed, result files may be created in the specified bucket. Consider using `forceDestroy` on the bucket too in order to avoid any problems when destroying the bucket.
func (o DatabaseAclConfigurationOutput) S3AclOption() pulumix.Output[string] {
	return pulumix.Apply[DatabaseAclConfiguration](o, func(v DatabaseAclConfiguration) string { return v.S3AclOption })
}

type DatabaseEncryptionConfiguration struct {
	// Type of key; one of `SSE_S3`, `SSE_KMS`, `CSE_KMS`
	EncryptionOption string `pulumi:"encryptionOption"`
	// KMS key ARN or ID; required for key types `SSE_KMS` and `CSE_KMS`.
	KmsKey *string `pulumi:"kmsKey"`
}

type DatabaseEncryptionConfigurationArgs struct {
	// Type of key; one of `SSE_S3`, `SSE_KMS`, `CSE_KMS`
	EncryptionOption pulumix.Input[string] `pulumi:"encryptionOption"`
	// KMS key ARN or ID; required for key types `SSE_KMS` and `CSE_KMS`.
	KmsKey pulumix.Input[*string] `pulumi:"kmsKey"`
}

func (DatabaseEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEncryptionConfiguration)(nil)).Elem()
}

func (i DatabaseEncryptionConfigurationArgs) ToDatabaseEncryptionConfigurationOutput() DatabaseEncryptionConfigurationOutput {
	return i.ToDatabaseEncryptionConfigurationOutputWithContext(context.Background())
}

func (i DatabaseEncryptionConfigurationArgs) ToDatabaseEncryptionConfigurationOutputWithContext(ctx context.Context) DatabaseEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionConfigurationOutput)
}

func (i *DatabaseEncryptionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DatabaseEncryptionConfigurationArgs] {
	return pulumix.Val(i)
}

type DatabaseEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (DatabaseEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEncryptionConfiguration)(nil)).Elem()
}

func (o DatabaseEncryptionConfigurationOutput) ToDatabaseEncryptionConfigurationOutput() DatabaseEncryptionConfigurationOutput {
	return o
}

func (o DatabaseEncryptionConfigurationOutput) ToDatabaseEncryptionConfigurationOutputWithContext(ctx context.Context) DatabaseEncryptionConfigurationOutput {
	return o
}

func (o DatabaseEncryptionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseEncryptionConfiguration] {
	return pulumix.Output[DatabaseEncryptionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Type of key; one of `SSE_S3`, `SSE_KMS`, `CSE_KMS`
func (o DatabaseEncryptionConfigurationOutput) EncryptionOption() pulumix.Output[string] {
	return pulumix.Apply[DatabaseEncryptionConfiguration](o, func(v DatabaseEncryptionConfiguration) string { return v.EncryptionOption })
}

// KMS key ARN or ID; required for key types `SSE_KMS` and `CSE_KMS`.
func (o DatabaseEncryptionConfigurationOutput) KmsKey() pulumix.Output[*string] {
	return pulumix.Apply[DatabaseEncryptionConfiguration](o, func(v DatabaseEncryptionConfiguration) *string { return v.KmsKey })
}

type WorkgroupConfiguration struct {
	// Integer for the upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan. Must be at least `10485760`.
	BytesScannedCutoffPerQuery *int `pulumi:"bytesScannedCutoffPerQuery"`
	// Boolean whether the settings for the workgroup override client-side settings. For more information, see [Workgroup Settings Override Client-Side Settings](https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html). Defaults to `true`.
	EnforceWorkgroupConfiguration *bool `pulumi:"enforceWorkgroupConfiguration"`
	// Configuration block for the Athena Engine Versioning. For more information, see [Athena Engine Versioning](https://docs.aws.amazon.com/athena/latest/ug/engine-versions.html). See Engine Version below.
	EngineVersion *WorkgroupConfigurationEngineVersion `pulumi:"engineVersion"`
	// Role used in a notebook session for accessing the user's resources.
	ExecutionRole *string `pulumi:"executionRole"`
	// Boolean whether Amazon CloudWatch metrics are enabled for the workgroup. Defaults to `true`.
	PublishCloudwatchMetricsEnabled *bool `pulumi:"publishCloudwatchMetricsEnabled"`
	// If set to true , allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false , workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is false . For more information about Requester Pays buckets, see [Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html) in the Amazon Simple Storage Service Developer Guide.
	RequesterPaysEnabled *bool `pulumi:"requesterPaysEnabled"`
	// Configuration block with result settings. See Result Configuration below.
	ResultConfiguration *WorkgroupConfigurationResultConfiguration `pulumi:"resultConfiguration"`
}

type WorkgroupConfigurationArgs struct {
	// Integer for the upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan. Must be at least `10485760`.
	BytesScannedCutoffPerQuery pulumix.Input[*int] `pulumi:"bytesScannedCutoffPerQuery"`
	// Boolean whether the settings for the workgroup override client-side settings. For more information, see [Workgroup Settings Override Client-Side Settings](https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html). Defaults to `true`.
	EnforceWorkgroupConfiguration pulumix.Input[*bool] `pulumi:"enforceWorkgroupConfiguration"`
	// Configuration block for the Athena Engine Versioning. For more information, see [Athena Engine Versioning](https://docs.aws.amazon.com/athena/latest/ug/engine-versions.html). See Engine Version below.
	EngineVersion pulumix.Input[*WorkgroupConfigurationEngineVersionArgs] `pulumi:"engineVersion"`
	// Role used in a notebook session for accessing the user's resources.
	ExecutionRole pulumix.Input[*string] `pulumi:"executionRole"`
	// Boolean whether Amazon CloudWatch metrics are enabled for the workgroup. Defaults to `true`.
	PublishCloudwatchMetricsEnabled pulumix.Input[*bool] `pulumi:"publishCloudwatchMetricsEnabled"`
	// If set to true , allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false , workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is false . For more information about Requester Pays buckets, see [Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html) in the Amazon Simple Storage Service Developer Guide.
	RequesterPaysEnabled pulumix.Input[*bool] `pulumi:"requesterPaysEnabled"`
	// Configuration block with result settings. See Result Configuration below.
	ResultConfiguration pulumix.Input[*WorkgroupConfigurationResultConfigurationArgs] `pulumi:"resultConfiguration"`
}

func (WorkgroupConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupConfiguration)(nil)).Elem()
}

func (i WorkgroupConfigurationArgs) ToWorkgroupConfigurationOutput() WorkgroupConfigurationOutput {
	return i.ToWorkgroupConfigurationOutputWithContext(context.Background())
}

func (i WorkgroupConfigurationArgs) ToWorkgroupConfigurationOutputWithContext(ctx context.Context) WorkgroupConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupConfigurationOutput)
}

func (i *WorkgroupConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkgroupConfigurationArgs] {
	return pulumix.Val(i)
}

type WorkgroupConfigurationOutput struct{ *pulumi.OutputState }

func (WorkgroupConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupConfiguration)(nil)).Elem()
}

func (o WorkgroupConfigurationOutput) ToWorkgroupConfigurationOutput() WorkgroupConfigurationOutput {
	return o
}

func (o WorkgroupConfigurationOutput) ToWorkgroupConfigurationOutputWithContext(ctx context.Context) WorkgroupConfigurationOutput {
	return o
}

func (o WorkgroupConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkgroupConfiguration] {
	return pulumix.Output[WorkgroupConfiguration]{
		OutputState: o.OutputState,
	}
}

// Integer for the upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan. Must be at least `10485760`.
func (o WorkgroupConfigurationOutput) BytesScannedCutoffPerQuery() pulumix.Output[*int] {
	return pulumix.Apply[WorkgroupConfiguration](o, func(v WorkgroupConfiguration) *int { return v.BytesScannedCutoffPerQuery })
}

// Boolean whether the settings for the workgroup override client-side settings. For more information, see [Workgroup Settings Override Client-Side Settings](https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html). Defaults to `true`.
func (o WorkgroupConfigurationOutput) EnforceWorkgroupConfiguration() pulumix.Output[*bool] {
	return pulumix.Apply[WorkgroupConfiguration](o, func(v WorkgroupConfiguration) *bool { return v.EnforceWorkgroupConfiguration })
}

// Configuration block for the Athena Engine Versioning. For more information, see [Athena Engine Versioning](https://docs.aws.amazon.com/athena/latest/ug/engine-versions.html). See Engine Version below.
func (o WorkgroupConfigurationOutput) EngineVersion() pulumix.GPtrOutput[WorkgroupConfigurationEngineVersion, WorkgroupConfigurationEngineVersionOutput] {
	value := pulumix.Apply[WorkgroupConfiguration](o, func(v WorkgroupConfiguration) *WorkgroupConfigurationEngineVersion { return v.EngineVersion })
	return pulumix.GPtrOutput[WorkgroupConfigurationEngineVersion, WorkgroupConfigurationEngineVersionOutput]{OutputState: value.OutputState}
}

// Role used in a notebook session for accessing the user's resources.
func (o WorkgroupConfigurationOutput) ExecutionRole() pulumix.Output[*string] {
	return pulumix.Apply[WorkgroupConfiguration](o, func(v WorkgroupConfiguration) *string { return v.ExecutionRole })
}

// Boolean whether Amazon CloudWatch metrics are enabled for the workgroup. Defaults to `true`.
func (o WorkgroupConfigurationOutput) PublishCloudwatchMetricsEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[WorkgroupConfiguration](o, func(v WorkgroupConfiguration) *bool { return v.PublishCloudwatchMetricsEnabled })
}

// If set to true , allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false , workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is false . For more information about Requester Pays buckets, see [Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html) in the Amazon Simple Storage Service Developer Guide.
func (o WorkgroupConfigurationOutput) RequesterPaysEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[WorkgroupConfiguration](o, func(v WorkgroupConfiguration) *bool { return v.RequesterPaysEnabled })
}

// Configuration block with result settings. See Result Configuration below.
func (o WorkgroupConfigurationOutput) ResultConfiguration() pulumix.GPtrOutput[WorkgroupConfigurationResultConfiguration, WorkgroupConfigurationResultConfigurationOutput] {
	value := pulumix.Apply[WorkgroupConfiguration](o, func(v WorkgroupConfiguration) *WorkgroupConfigurationResultConfiguration {
		return v.ResultConfiguration
	})
	return pulumix.GPtrOutput[WorkgroupConfigurationResultConfiguration, WorkgroupConfigurationResultConfigurationOutput]{OutputState: value.OutputState}
}

type WorkgroupConfigurationEngineVersion struct {
	// The engine version on which the query runs. If `selectedEngineVersion` is set to `AUTO`, the effective engine version is chosen by Athena.
	EffectiveEngineVersion *string `pulumi:"effectiveEngineVersion"`
	// Requested engine version. Defaults to `AUTO`.
	SelectedEngineVersion *string `pulumi:"selectedEngineVersion"`
}

type WorkgroupConfigurationEngineVersionArgs struct {
	// The engine version on which the query runs. If `selectedEngineVersion` is set to `AUTO`, the effective engine version is chosen by Athena.
	EffectiveEngineVersion pulumix.Input[*string] `pulumi:"effectiveEngineVersion"`
	// Requested engine version. Defaults to `AUTO`.
	SelectedEngineVersion pulumix.Input[*string] `pulumi:"selectedEngineVersion"`
}

func (WorkgroupConfigurationEngineVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupConfigurationEngineVersion)(nil)).Elem()
}

func (i WorkgroupConfigurationEngineVersionArgs) ToWorkgroupConfigurationEngineVersionOutput() WorkgroupConfigurationEngineVersionOutput {
	return i.ToWorkgroupConfigurationEngineVersionOutputWithContext(context.Background())
}

func (i WorkgroupConfigurationEngineVersionArgs) ToWorkgroupConfigurationEngineVersionOutputWithContext(ctx context.Context) WorkgroupConfigurationEngineVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupConfigurationEngineVersionOutput)
}

func (i *WorkgroupConfigurationEngineVersionArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkgroupConfigurationEngineVersionArgs] {
	return pulumix.Val(i)
}

type WorkgroupConfigurationEngineVersionOutput struct{ *pulumi.OutputState }

func (WorkgroupConfigurationEngineVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupConfigurationEngineVersion)(nil)).Elem()
}

func (o WorkgroupConfigurationEngineVersionOutput) ToWorkgroupConfigurationEngineVersionOutput() WorkgroupConfigurationEngineVersionOutput {
	return o
}

func (o WorkgroupConfigurationEngineVersionOutput) ToWorkgroupConfigurationEngineVersionOutputWithContext(ctx context.Context) WorkgroupConfigurationEngineVersionOutput {
	return o
}

func (o WorkgroupConfigurationEngineVersionOutput) ToOutput(ctx context.Context) pulumix.Output[WorkgroupConfigurationEngineVersion] {
	return pulumix.Output[WorkgroupConfigurationEngineVersion]{
		OutputState: o.OutputState,
	}
}

// The engine version on which the query runs. If `selectedEngineVersion` is set to `AUTO`, the effective engine version is chosen by Athena.
func (o WorkgroupConfigurationEngineVersionOutput) EffectiveEngineVersion() pulumix.Output[*string] {
	return pulumix.Apply[WorkgroupConfigurationEngineVersion](o, func(v WorkgroupConfigurationEngineVersion) *string { return v.EffectiveEngineVersion })
}

// Requested engine version. Defaults to `AUTO`.
func (o WorkgroupConfigurationEngineVersionOutput) SelectedEngineVersion() pulumix.Output[*string] {
	return pulumix.Apply[WorkgroupConfigurationEngineVersion](o, func(v WorkgroupConfigurationEngineVersion) *string { return v.SelectedEngineVersion })
}

type WorkgroupConfigurationResultConfiguration struct {
	// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
	AclConfiguration *WorkgroupConfigurationResultConfigurationAclConfiguration `pulumi:"aclConfiguration"`
	// Configuration block with encryption settings. See Encryption Configuration below.
	EncryptionConfiguration *WorkgroupConfigurationResultConfigurationEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// Location in Amazon S3 where your query results are stored, such as `s3://path/to/query/bucket/`. For more information, see [Queries and Query Result Files](https://docs.aws.amazon.com/athena/latest/ug/querying.html).
	OutputLocation *string `pulumi:"outputLocation"`
}

type WorkgroupConfigurationResultConfigurationArgs struct {
	// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
	AclConfiguration pulumix.Input[*WorkgroupConfigurationResultConfigurationAclConfigurationArgs] `pulumi:"aclConfiguration"`
	// Configuration block with encryption settings. See Encryption Configuration below.
	EncryptionConfiguration pulumix.Input[*WorkgroupConfigurationResultConfigurationEncryptionConfigurationArgs] `pulumi:"encryptionConfiguration"`
	// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
	ExpectedBucketOwner pulumix.Input[*string] `pulumi:"expectedBucketOwner"`
	// Location in Amazon S3 where your query results are stored, such as `s3://path/to/query/bucket/`. For more information, see [Queries and Query Result Files](https://docs.aws.amazon.com/athena/latest/ug/querying.html).
	OutputLocation pulumix.Input[*string] `pulumi:"outputLocation"`
}

func (WorkgroupConfigurationResultConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupConfigurationResultConfiguration)(nil)).Elem()
}

func (i WorkgroupConfigurationResultConfigurationArgs) ToWorkgroupConfigurationResultConfigurationOutput() WorkgroupConfigurationResultConfigurationOutput {
	return i.ToWorkgroupConfigurationResultConfigurationOutputWithContext(context.Background())
}

func (i WorkgroupConfigurationResultConfigurationArgs) ToWorkgroupConfigurationResultConfigurationOutputWithContext(ctx context.Context) WorkgroupConfigurationResultConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupConfigurationResultConfigurationOutput)
}

func (i *WorkgroupConfigurationResultConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkgroupConfigurationResultConfigurationArgs] {
	return pulumix.Val(i)
}

type WorkgroupConfigurationResultConfigurationOutput struct{ *pulumi.OutputState }

func (WorkgroupConfigurationResultConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupConfigurationResultConfiguration)(nil)).Elem()
}

func (o WorkgroupConfigurationResultConfigurationOutput) ToWorkgroupConfigurationResultConfigurationOutput() WorkgroupConfigurationResultConfigurationOutput {
	return o
}

func (o WorkgroupConfigurationResultConfigurationOutput) ToWorkgroupConfigurationResultConfigurationOutputWithContext(ctx context.Context) WorkgroupConfigurationResultConfigurationOutput {
	return o
}

func (o WorkgroupConfigurationResultConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkgroupConfigurationResultConfiguration] {
	return pulumix.Output[WorkgroupConfigurationResultConfiguration]{
		OutputState: o.OutputState,
	}
}

// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
func (o WorkgroupConfigurationResultConfigurationOutput) AclConfiguration() pulumix.GPtrOutput[WorkgroupConfigurationResultConfigurationAclConfiguration, WorkgroupConfigurationResultConfigurationAclConfigurationOutput] {
	value := pulumix.Apply[WorkgroupConfigurationResultConfiguration](o, func(v WorkgroupConfigurationResultConfiguration) *WorkgroupConfigurationResultConfigurationAclConfiguration {
		return v.AclConfiguration
	})
	return pulumix.GPtrOutput[WorkgroupConfigurationResultConfigurationAclConfiguration, WorkgroupConfigurationResultConfigurationAclConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration block with encryption settings. See Encryption Configuration below.
func (o WorkgroupConfigurationResultConfigurationOutput) EncryptionConfiguration() pulumix.GPtrOutput[WorkgroupConfigurationResultConfigurationEncryptionConfiguration, WorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput] {
	value := pulumix.Apply[WorkgroupConfigurationResultConfiguration](o, func(v WorkgroupConfigurationResultConfiguration) *WorkgroupConfigurationResultConfigurationEncryptionConfiguration {
		return v.EncryptionConfiguration
	})
	return pulumix.GPtrOutput[WorkgroupConfigurationResultConfigurationEncryptionConfiguration, WorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput]{OutputState: value.OutputState}
}

// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
func (o WorkgroupConfigurationResultConfigurationOutput) ExpectedBucketOwner() pulumix.Output[*string] {
	return pulumix.Apply[WorkgroupConfigurationResultConfiguration](o, func(v WorkgroupConfigurationResultConfiguration) *string { return v.ExpectedBucketOwner })
}

// Location in Amazon S3 where your query results are stored, such as `s3://path/to/query/bucket/`. For more information, see [Queries and Query Result Files](https://docs.aws.amazon.com/athena/latest/ug/querying.html).
func (o WorkgroupConfigurationResultConfigurationOutput) OutputLocation() pulumix.Output[*string] {
	return pulumix.Apply[WorkgroupConfigurationResultConfiguration](o, func(v WorkgroupConfigurationResultConfiguration) *string { return v.OutputLocation })
}

type WorkgroupConfigurationResultConfigurationAclConfiguration struct {
	// Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is `BUCKET_OWNER_FULL_CONTROL`.
	S3AclOption string `pulumi:"s3AclOption"`
}

type WorkgroupConfigurationResultConfigurationAclConfigurationArgs struct {
	// Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is `BUCKET_OWNER_FULL_CONTROL`.
	S3AclOption pulumix.Input[string] `pulumi:"s3AclOption"`
}

func (WorkgroupConfigurationResultConfigurationAclConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupConfigurationResultConfigurationAclConfiguration)(nil)).Elem()
}

func (i WorkgroupConfigurationResultConfigurationAclConfigurationArgs) ToWorkgroupConfigurationResultConfigurationAclConfigurationOutput() WorkgroupConfigurationResultConfigurationAclConfigurationOutput {
	return i.ToWorkgroupConfigurationResultConfigurationAclConfigurationOutputWithContext(context.Background())
}

func (i WorkgroupConfigurationResultConfigurationAclConfigurationArgs) ToWorkgroupConfigurationResultConfigurationAclConfigurationOutputWithContext(ctx context.Context) WorkgroupConfigurationResultConfigurationAclConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupConfigurationResultConfigurationAclConfigurationOutput)
}

func (i *WorkgroupConfigurationResultConfigurationAclConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkgroupConfigurationResultConfigurationAclConfigurationArgs] {
	return pulumix.Val(i)
}

type WorkgroupConfigurationResultConfigurationAclConfigurationOutput struct{ *pulumi.OutputState }

func (WorkgroupConfigurationResultConfigurationAclConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupConfigurationResultConfigurationAclConfiguration)(nil)).Elem()
}

func (o WorkgroupConfigurationResultConfigurationAclConfigurationOutput) ToWorkgroupConfigurationResultConfigurationAclConfigurationOutput() WorkgroupConfigurationResultConfigurationAclConfigurationOutput {
	return o
}

func (o WorkgroupConfigurationResultConfigurationAclConfigurationOutput) ToWorkgroupConfigurationResultConfigurationAclConfigurationOutputWithContext(ctx context.Context) WorkgroupConfigurationResultConfigurationAclConfigurationOutput {
	return o
}

func (o WorkgroupConfigurationResultConfigurationAclConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkgroupConfigurationResultConfigurationAclConfiguration] {
	return pulumix.Output[WorkgroupConfigurationResultConfigurationAclConfiguration]{
		OutputState: o.OutputState,
	}
}

// Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is `BUCKET_OWNER_FULL_CONTROL`.
func (o WorkgroupConfigurationResultConfigurationAclConfigurationOutput) S3AclOption() pulumix.Output[string] {
	return pulumix.Apply[WorkgroupConfigurationResultConfigurationAclConfiguration](o, func(v WorkgroupConfigurationResultConfigurationAclConfiguration) string { return v.S3AclOption })
}

type WorkgroupConfigurationResultConfigurationEncryptionConfiguration struct {
	// Whether Amazon S3 server-side encryption with Amazon S3-managed keys (`SSE_S3`), server-side encryption with KMS-managed keys (`SSE_KMS`), or client-side encryption with KMS-managed keys (`CSE_KMS`) is used. If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup.
	EncryptionOption *string `pulumi:"encryptionOption"`
	// For `SSE_KMS` and `CSE_KMS`, this is the KMS key ARN.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
}

type WorkgroupConfigurationResultConfigurationEncryptionConfigurationArgs struct {
	// Whether Amazon S3 server-side encryption with Amazon S3-managed keys (`SSE_S3`), server-side encryption with KMS-managed keys (`SSE_KMS`), or client-side encryption with KMS-managed keys (`CSE_KMS`) is used. If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup.
	EncryptionOption pulumix.Input[*string] `pulumi:"encryptionOption"`
	// For `SSE_KMS` and `CSE_KMS`, this is the KMS key ARN.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
}

func (WorkgroupConfigurationResultConfigurationEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupConfigurationResultConfigurationEncryptionConfiguration)(nil)).Elem()
}

func (i WorkgroupConfigurationResultConfigurationEncryptionConfigurationArgs) ToWorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput() WorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput {
	return i.ToWorkgroupConfigurationResultConfigurationEncryptionConfigurationOutputWithContext(context.Background())
}

func (i WorkgroupConfigurationResultConfigurationEncryptionConfigurationArgs) ToWorkgroupConfigurationResultConfigurationEncryptionConfigurationOutputWithContext(ctx context.Context) WorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput)
}

func (i *WorkgroupConfigurationResultConfigurationEncryptionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkgroupConfigurationResultConfigurationEncryptionConfigurationArgs] {
	return pulumix.Val(i)
}

type WorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (WorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupConfigurationResultConfigurationEncryptionConfiguration)(nil)).Elem()
}

func (o WorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput) ToWorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput() WorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput {
	return o
}

func (o WorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput) ToWorkgroupConfigurationResultConfigurationEncryptionConfigurationOutputWithContext(ctx context.Context) WorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput {
	return o
}

func (o WorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkgroupConfigurationResultConfigurationEncryptionConfiguration] {
	return pulumix.Output[WorkgroupConfigurationResultConfigurationEncryptionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Whether Amazon S3 server-side encryption with Amazon S3-managed keys (`SSE_S3`), server-side encryption with KMS-managed keys (`SSE_KMS`), or client-side encryption with KMS-managed keys (`CSE_KMS`) is used. If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup.
func (o WorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput) EncryptionOption() pulumix.Output[*string] {
	return pulumix.Apply[WorkgroupConfigurationResultConfigurationEncryptionConfiguration](o, func(v WorkgroupConfigurationResultConfigurationEncryptionConfiguration) *string {
		return v.EncryptionOption
	})
}

// For `SSE_KMS` and `CSE_KMS`, this is the KMS key ARN.
func (o WorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[WorkgroupConfigurationResultConfigurationEncryptionConfiguration](o, func(v WorkgroupConfigurationResultConfigurationEncryptionConfiguration) *string { return v.KmsKeyArn })
}

func init() {
	pulumi.RegisterOutputType(DatabaseAclConfigurationOutput{})
	pulumi.RegisterOutputType(DatabaseEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(WorkgroupConfigurationOutput{})
	pulumi.RegisterOutputType(WorkgroupConfigurationEngineVersionOutput{})
	pulumi.RegisterOutputType(WorkgroupConfigurationResultConfigurationOutput{})
	pulumi.RegisterOutputType(WorkgroupConfigurationResultConfigurationAclConfigurationOutput{})
	pulumi.RegisterOutputType(WorkgroupConfigurationResultConfigurationEncryptionConfigurationOutput{})
}
