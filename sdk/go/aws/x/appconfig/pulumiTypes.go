// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appconfig

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ConfigurationProfileValidator struct {
	// Either the JSON Schema content or the ARN of an AWS Lambda function.
	Content *string `pulumi:"content"`
	// Type of validator. Valid values: `JSON_SCHEMA` and `LAMBDA`.
	Type string `pulumi:"type"`
}

type ConfigurationProfileValidatorArgs struct {
	// Either the JSON Schema content or the ARN of an AWS Lambda function.
	Content pulumix.Input[*string] `pulumi:"content"`
	// Type of validator. Valid values: `JSON_SCHEMA` and `LAMBDA`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (ConfigurationProfileValidatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationProfileValidator)(nil)).Elem()
}

func (i ConfigurationProfileValidatorArgs) ToConfigurationProfileValidatorOutput() ConfigurationProfileValidatorOutput {
	return i.ToConfigurationProfileValidatorOutputWithContext(context.Background())
}

func (i ConfigurationProfileValidatorArgs) ToConfigurationProfileValidatorOutputWithContext(ctx context.Context) ConfigurationProfileValidatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationProfileValidatorOutput)
}

func (i *ConfigurationProfileValidatorArgs) ToOutput(ctx context.Context) pulumix.Output[*ConfigurationProfileValidatorArgs] {
	return pulumix.Val(i)
}

type ConfigurationProfileValidatorOutput struct{ *pulumi.OutputState }

func (ConfigurationProfileValidatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationProfileValidator)(nil)).Elem()
}

func (o ConfigurationProfileValidatorOutput) ToConfigurationProfileValidatorOutput() ConfigurationProfileValidatorOutput {
	return o
}

func (o ConfigurationProfileValidatorOutput) ToConfigurationProfileValidatorOutputWithContext(ctx context.Context) ConfigurationProfileValidatorOutput {
	return o
}

func (o ConfigurationProfileValidatorOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigurationProfileValidator] {
	return pulumix.Output[ConfigurationProfileValidator]{
		OutputState: o.OutputState,
	}
}

// Either the JSON Schema content or the ARN of an AWS Lambda function.
func (o ConfigurationProfileValidatorOutput) Content() pulumix.Output[*string] {
	return pulumix.Apply[ConfigurationProfileValidator](o, func(v ConfigurationProfileValidator) *string { return v.Content })
}

// Type of validator. Valid values: `JSON_SCHEMA` and `LAMBDA`.
func (o ConfigurationProfileValidatorOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ConfigurationProfileValidator](o, func(v ConfigurationProfileValidator) string { return v.Type })
}

type EnvironmentMonitor struct {
	// ARN of the Amazon CloudWatch alarm.
	AlarmArn string `pulumi:"alarmArn"`
	// ARN of an IAM role for AWS AppConfig to monitor `alarmArn`.
	AlarmRoleArn *string `pulumi:"alarmRoleArn"`
}

type EnvironmentMonitorArgs struct {
	// ARN of the Amazon CloudWatch alarm.
	AlarmArn pulumix.Input[string] `pulumi:"alarmArn"`
	// ARN of an IAM role for AWS AppConfig to monitor `alarmArn`.
	AlarmRoleArn pulumix.Input[*string] `pulumi:"alarmRoleArn"`
}

func (EnvironmentMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentMonitor)(nil)).Elem()
}

func (i EnvironmentMonitorArgs) ToEnvironmentMonitorOutput() EnvironmentMonitorOutput {
	return i.ToEnvironmentMonitorOutputWithContext(context.Background())
}

func (i EnvironmentMonitorArgs) ToEnvironmentMonitorOutputWithContext(ctx context.Context) EnvironmentMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentMonitorOutput)
}

func (i *EnvironmentMonitorArgs) ToOutput(ctx context.Context) pulumix.Output[*EnvironmentMonitorArgs] {
	return pulumix.Val(i)
}

type EnvironmentMonitorOutput struct{ *pulumi.OutputState }

func (EnvironmentMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentMonitor)(nil)).Elem()
}

func (o EnvironmentMonitorOutput) ToEnvironmentMonitorOutput() EnvironmentMonitorOutput {
	return o
}

func (o EnvironmentMonitorOutput) ToEnvironmentMonitorOutputWithContext(ctx context.Context) EnvironmentMonitorOutput {
	return o
}

func (o EnvironmentMonitorOutput) ToOutput(ctx context.Context) pulumix.Output[EnvironmentMonitor] {
	return pulumix.Output[EnvironmentMonitor]{
		OutputState: o.OutputState,
	}
}

// ARN of the Amazon CloudWatch alarm.
func (o EnvironmentMonitorOutput) AlarmArn() pulumix.Output[string] {
	return pulumix.Apply[EnvironmentMonitor](o, func(v EnvironmentMonitor) string { return v.AlarmArn })
}

// ARN of an IAM role for AWS AppConfig to monitor `alarmArn`.
func (o EnvironmentMonitorOutput) AlarmRoleArn() pulumix.Output[*string] {
	return pulumix.Apply[EnvironmentMonitor](o, func(v EnvironmentMonitor) *string { return v.AlarmRoleArn })
}

type EventIntegrationEventFilter struct {
	// Source of the events.
	Source string `pulumi:"source"`
}

type EventIntegrationEventFilterArgs struct {
	// Source of the events.
	Source pulumix.Input[string] `pulumi:"source"`
}

func (EventIntegrationEventFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventIntegrationEventFilter)(nil)).Elem()
}

func (i EventIntegrationEventFilterArgs) ToEventIntegrationEventFilterOutput() EventIntegrationEventFilterOutput {
	return i.ToEventIntegrationEventFilterOutputWithContext(context.Background())
}

func (i EventIntegrationEventFilterArgs) ToEventIntegrationEventFilterOutputWithContext(ctx context.Context) EventIntegrationEventFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationEventFilterOutput)
}

func (i *EventIntegrationEventFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*EventIntegrationEventFilterArgs] {
	return pulumix.Val(i)
}

type EventIntegrationEventFilterOutput struct{ *pulumi.OutputState }

func (EventIntegrationEventFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventIntegrationEventFilter)(nil)).Elem()
}

func (o EventIntegrationEventFilterOutput) ToEventIntegrationEventFilterOutput() EventIntegrationEventFilterOutput {
	return o
}

func (o EventIntegrationEventFilterOutput) ToEventIntegrationEventFilterOutputWithContext(ctx context.Context) EventIntegrationEventFilterOutput {
	return o
}

func (o EventIntegrationEventFilterOutput) ToOutput(ctx context.Context) pulumix.Output[EventIntegrationEventFilter] {
	return pulumix.Output[EventIntegrationEventFilter]{
		OutputState: o.OutputState,
	}
}

// Source of the events.
func (o EventIntegrationEventFilterOutput) Source() pulumix.Output[string] {
	return pulumix.Apply[EventIntegrationEventFilter](o, func(v EventIntegrationEventFilter) string { return v.Source })
}

type ExtensionActionPoint struct {
	// An action defines the tasks the extension performs during the AppConfig workflow. Detailed below.
	Actions []ExtensionActionPointAction `pulumi:"actions"`
	// The point at which to perform the defined actions. Valid points are `PRE_CREATE_HOSTED_CONFIGURATION_VERSION`, `PRE_START_DEPLOYMENT`, `ON_DEPLOYMENT_START`, `ON_DEPLOYMENT_STEP`, `ON_DEPLOYMENT_BAKING`, `ON_DEPLOYMENT_COMPLETE`, `ON_DEPLOYMENT_ROLLED_BACK`.
	Point string `pulumi:"point"`
}

type ExtensionActionPointArgs struct {
	// An action defines the tasks the extension performs during the AppConfig workflow. Detailed below.
	Actions pulumix.Input[[]*ExtensionActionPointActionArgs] `pulumi:"actions"`
	// The point at which to perform the defined actions. Valid points are `PRE_CREATE_HOSTED_CONFIGURATION_VERSION`, `PRE_START_DEPLOYMENT`, `ON_DEPLOYMENT_START`, `ON_DEPLOYMENT_STEP`, `ON_DEPLOYMENT_BAKING`, `ON_DEPLOYMENT_COMPLETE`, `ON_DEPLOYMENT_ROLLED_BACK`.
	Point pulumix.Input[string] `pulumi:"point"`
}

func (ExtensionActionPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionActionPoint)(nil)).Elem()
}

func (i ExtensionActionPointArgs) ToExtensionActionPointOutput() ExtensionActionPointOutput {
	return i.ToExtensionActionPointOutputWithContext(context.Background())
}

func (i ExtensionActionPointArgs) ToExtensionActionPointOutputWithContext(ctx context.Context) ExtensionActionPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionActionPointOutput)
}

func (i *ExtensionActionPointArgs) ToOutput(ctx context.Context) pulumix.Output[*ExtensionActionPointArgs] {
	return pulumix.Val(i)
}

type ExtensionActionPointOutput struct{ *pulumi.OutputState }

func (ExtensionActionPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionActionPoint)(nil)).Elem()
}

func (o ExtensionActionPointOutput) ToExtensionActionPointOutput() ExtensionActionPointOutput {
	return o
}

func (o ExtensionActionPointOutput) ToExtensionActionPointOutputWithContext(ctx context.Context) ExtensionActionPointOutput {
	return o
}

func (o ExtensionActionPointOutput) ToOutput(ctx context.Context) pulumix.Output[ExtensionActionPoint] {
	return pulumix.Output[ExtensionActionPoint]{
		OutputState: o.OutputState,
	}
}

// An action defines the tasks the extension performs during the AppConfig workflow. Detailed below.
func (o ExtensionActionPointOutput) Actions() pulumix.GArrayOutput[ExtensionActionPointAction, ExtensionActionPointActionOutput] {
	value := pulumix.Apply[ExtensionActionPoint](o, func(v ExtensionActionPoint) []ExtensionActionPointAction { return v.Actions })
	return pulumix.GArrayOutput[ExtensionActionPointAction, ExtensionActionPointActionOutput]{OutputState: value.OutputState}
}

// The point at which to perform the defined actions. Valid points are `PRE_CREATE_HOSTED_CONFIGURATION_VERSION`, `PRE_START_DEPLOYMENT`, `ON_DEPLOYMENT_START`, `ON_DEPLOYMENT_STEP`, `ON_DEPLOYMENT_BAKING`, `ON_DEPLOYMENT_COMPLETE`, `ON_DEPLOYMENT_ROLLED_BACK`.
func (o ExtensionActionPointOutput) Point() pulumix.Output[string] {
	return pulumix.Apply[ExtensionActionPoint](o, func(v ExtensionActionPoint) string { return v.Point })
}

type ExtensionActionPointAction struct {
	// Information about the action.
	Description *string `pulumi:"description"`
	// The action name.
	Name string `pulumi:"name"`
	// An Amazon Resource Name (ARN) for an Identity and Access Management assume role.
	RoleArn string `pulumi:"roleArn"`
	// The extension URI associated to the action point in the extension definition. The URI can be an Amazon Resource Name (ARN) for one of the following: an Lambda function, an Amazon Simple Queue Service queue, an Amazon Simple Notification Service topic, or the Amazon EventBridge default event bus.
	Uri string `pulumi:"uri"`
}

type ExtensionActionPointActionArgs struct {
	// Information about the action.
	Description pulumix.Input[*string] `pulumi:"description"`
	// The action name.
	Name pulumix.Input[string] `pulumi:"name"`
	// An Amazon Resource Name (ARN) for an Identity and Access Management assume role.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The extension URI associated to the action point in the extension definition. The URI can be an Amazon Resource Name (ARN) for one of the following: an Lambda function, an Amazon Simple Queue Service queue, an Amazon Simple Notification Service topic, or the Amazon EventBridge default event bus.
	Uri pulumix.Input[string] `pulumi:"uri"`
}

func (ExtensionActionPointActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionActionPointAction)(nil)).Elem()
}

func (i ExtensionActionPointActionArgs) ToExtensionActionPointActionOutput() ExtensionActionPointActionOutput {
	return i.ToExtensionActionPointActionOutputWithContext(context.Background())
}

func (i ExtensionActionPointActionArgs) ToExtensionActionPointActionOutputWithContext(ctx context.Context) ExtensionActionPointActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionActionPointActionOutput)
}

func (i *ExtensionActionPointActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ExtensionActionPointActionArgs] {
	return pulumix.Val(i)
}

type ExtensionActionPointActionOutput struct{ *pulumi.OutputState }

func (ExtensionActionPointActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionActionPointAction)(nil)).Elem()
}

func (o ExtensionActionPointActionOutput) ToExtensionActionPointActionOutput() ExtensionActionPointActionOutput {
	return o
}

func (o ExtensionActionPointActionOutput) ToExtensionActionPointActionOutputWithContext(ctx context.Context) ExtensionActionPointActionOutput {
	return o
}

func (o ExtensionActionPointActionOutput) ToOutput(ctx context.Context) pulumix.Output[ExtensionActionPointAction] {
	return pulumix.Output[ExtensionActionPointAction]{
		OutputState: o.OutputState,
	}
}

// Information about the action.
func (o ExtensionActionPointActionOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[ExtensionActionPointAction](o, func(v ExtensionActionPointAction) *string { return v.Description })
}

// The action name.
func (o ExtensionActionPointActionOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ExtensionActionPointAction](o, func(v ExtensionActionPointAction) string { return v.Name })
}

// An Amazon Resource Name (ARN) for an Identity and Access Management assume role.
func (o ExtensionActionPointActionOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[ExtensionActionPointAction](o, func(v ExtensionActionPointAction) string { return v.RoleArn })
}

// The extension URI associated to the action point in the extension definition. The URI can be an Amazon Resource Name (ARN) for one of the following: an Lambda function, an Amazon Simple Queue Service queue, an Amazon Simple Notification Service topic, or the Amazon EventBridge default event bus.
func (o ExtensionActionPointActionOutput) Uri() pulumix.Output[string] {
	return pulumix.Apply[ExtensionActionPointAction](o, func(v ExtensionActionPointAction) string { return v.Uri })
}

type ExtensionParameter struct {
	// Information about the parameter.
	Description *string `pulumi:"description"`
	// The parameter name.
	Name string `pulumi:"name"`
	// Determines if a parameter value must be specified in the extension association.
	Required *bool `pulumi:"required"`
}

type ExtensionParameterArgs struct {
	// Information about the parameter.
	Description pulumix.Input[*string] `pulumi:"description"`
	// The parameter name.
	Name pulumix.Input[string] `pulumi:"name"`
	// Determines if a parameter value must be specified in the extension association.
	Required pulumix.Input[*bool] `pulumi:"required"`
}

func (ExtensionParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionParameter)(nil)).Elem()
}

func (i ExtensionParameterArgs) ToExtensionParameterOutput() ExtensionParameterOutput {
	return i.ToExtensionParameterOutputWithContext(context.Background())
}

func (i ExtensionParameterArgs) ToExtensionParameterOutputWithContext(ctx context.Context) ExtensionParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionParameterOutput)
}

func (i *ExtensionParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*ExtensionParameterArgs] {
	return pulumix.Val(i)
}

type ExtensionParameterOutput struct{ *pulumi.OutputState }

func (ExtensionParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionParameter)(nil)).Elem()
}

func (o ExtensionParameterOutput) ToExtensionParameterOutput() ExtensionParameterOutput {
	return o
}

func (o ExtensionParameterOutput) ToExtensionParameterOutputWithContext(ctx context.Context) ExtensionParameterOutput {
	return o
}

func (o ExtensionParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ExtensionParameter] {
	return pulumix.Output[ExtensionParameter]{
		OutputState: o.OutputState,
	}
}

// Information about the parameter.
func (o ExtensionParameterOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[ExtensionParameter](o, func(v ExtensionParameter) *string { return v.Description })
}

// The parameter name.
func (o ExtensionParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ExtensionParameter](o, func(v ExtensionParameter) string { return v.Name })
}

// Determines if a parameter value must be specified in the extension association.
func (o ExtensionParameterOutput) Required() pulumix.Output[*bool] {
	return pulumix.Apply[ExtensionParameter](o, func(v ExtensionParameter) *bool { return v.Required })
}

type GetConfigurationProfileValidator struct {
	// Either the JSON Schema content or the ARN of an AWS Lambda function.
	Content string `pulumi:"content"`
	// Type of validator. Valid values: JSON_SCHEMA and LAMBDA.
	Type string `pulumi:"type"`
}

type GetConfigurationProfileValidatorArgs struct {
	// Either the JSON Schema content or the ARN of an AWS Lambda function.
	Content pulumix.Input[string] `pulumi:"content"`
	// Type of validator. Valid values: JSON_SCHEMA and LAMBDA.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (GetConfigurationProfileValidatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConfigurationProfileValidator)(nil)).Elem()
}

func (i GetConfigurationProfileValidatorArgs) ToGetConfigurationProfileValidatorOutput() GetConfigurationProfileValidatorOutput {
	return i.ToGetConfigurationProfileValidatorOutputWithContext(context.Background())
}

func (i GetConfigurationProfileValidatorArgs) ToGetConfigurationProfileValidatorOutputWithContext(ctx context.Context) GetConfigurationProfileValidatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConfigurationProfileValidatorOutput)
}

func (i *GetConfigurationProfileValidatorArgs) ToOutput(ctx context.Context) pulumix.Output[*GetConfigurationProfileValidatorArgs] {
	return pulumix.Val(i)
}

type GetConfigurationProfileValidatorOutput struct{ *pulumi.OutputState }

func (GetConfigurationProfileValidatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConfigurationProfileValidator)(nil)).Elem()
}

func (o GetConfigurationProfileValidatorOutput) ToGetConfigurationProfileValidatorOutput() GetConfigurationProfileValidatorOutput {
	return o
}

func (o GetConfigurationProfileValidatorOutput) ToGetConfigurationProfileValidatorOutputWithContext(ctx context.Context) GetConfigurationProfileValidatorOutput {
	return o
}

func (o GetConfigurationProfileValidatorOutput) ToOutput(ctx context.Context) pulumix.Output[GetConfigurationProfileValidator] {
	return pulumix.Output[GetConfigurationProfileValidator]{
		OutputState: o.OutputState,
	}
}

// Either the JSON Schema content or the ARN of an AWS Lambda function.
func (o GetConfigurationProfileValidatorOutput) Content() pulumix.Output[string] {
	return pulumix.Apply[GetConfigurationProfileValidator](o, func(v GetConfigurationProfileValidator) string { return v.Content })
}

// Type of validator. Valid values: JSON_SCHEMA and LAMBDA.
func (o GetConfigurationProfileValidatorOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetConfigurationProfileValidator](o, func(v GetConfigurationProfileValidator) string { return v.Type })
}

type GetEnvironmentMonitor struct {
	// ARN of the Amazon CloudWatch alarm.
	AlarmArn string `pulumi:"alarmArn"`
	// ARN of an IAM role for AWS AppConfig to monitor.
	AlarmRoleArn string `pulumi:"alarmRoleArn"`
}

type GetEnvironmentMonitorArgs struct {
	// ARN of the Amazon CloudWatch alarm.
	AlarmArn pulumix.Input[string] `pulumi:"alarmArn"`
	// ARN of an IAM role for AWS AppConfig to monitor.
	AlarmRoleArn pulumix.Input[string] `pulumi:"alarmRoleArn"`
}

func (GetEnvironmentMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentMonitor)(nil)).Elem()
}

func (i GetEnvironmentMonitorArgs) ToGetEnvironmentMonitorOutput() GetEnvironmentMonitorOutput {
	return i.ToGetEnvironmentMonitorOutputWithContext(context.Background())
}

func (i GetEnvironmentMonitorArgs) ToGetEnvironmentMonitorOutputWithContext(ctx context.Context) GetEnvironmentMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEnvironmentMonitorOutput)
}

func (i *GetEnvironmentMonitorArgs) ToOutput(ctx context.Context) pulumix.Output[*GetEnvironmentMonitorArgs] {
	return pulumix.Val(i)
}

type GetEnvironmentMonitorOutput struct{ *pulumi.OutputState }

func (GetEnvironmentMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentMonitor)(nil)).Elem()
}

func (o GetEnvironmentMonitorOutput) ToGetEnvironmentMonitorOutput() GetEnvironmentMonitorOutput {
	return o
}

func (o GetEnvironmentMonitorOutput) ToGetEnvironmentMonitorOutputWithContext(ctx context.Context) GetEnvironmentMonitorOutput {
	return o
}

func (o GetEnvironmentMonitorOutput) ToOutput(ctx context.Context) pulumix.Output[GetEnvironmentMonitor] {
	return pulumix.Output[GetEnvironmentMonitor]{
		OutputState: o.OutputState,
	}
}

// ARN of the Amazon CloudWatch alarm.
func (o GetEnvironmentMonitorOutput) AlarmArn() pulumix.Output[string] {
	return pulumix.Apply[GetEnvironmentMonitor](o, func(v GetEnvironmentMonitor) string { return v.AlarmArn })
}

// ARN of an IAM role for AWS AppConfig to monitor.
func (o GetEnvironmentMonitorOutput) AlarmRoleArn() pulumix.Output[string] {
	return pulumix.Apply[GetEnvironmentMonitor](o, func(v GetEnvironmentMonitor) string { return v.AlarmRoleArn })
}

func init() {
	pulumi.RegisterOutputType(ConfigurationProfileValidatorOutput{})
	pulumi.RegisterOutputType(EnvironmentMonitorOutput{})
	pulumi.RegisterOutputType(EventIntegrationEventFilterOutput{})
	pulumi.RegisterOutputType(ExtensionActionPointOutput{})
	pulumi.RegisterOutputType(ExtensionActionPointActionOutput{})
	pulumi.RegisterOutputType(ExtensionParameterOutput{})
	pulumi.RegisterOutputType(GetConfigurationProfileValidatorOutput{})
	pulumi.RegisterOutputType(GetEnvironmentMonitorOutput{})
}
