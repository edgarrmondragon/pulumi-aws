// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type BrokerConfiguration struct {
	// The Configuration ID.
	Id *string `pulumi:"id"`
	// Revision of the Configuration.
	Revision *int `pulumi:"revision"`
}

type BrokerConfigurationArgs struct {
	// The Configuration ID.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Revision of the Configuration.
	Revision pulumix.Input[*int] `pulumi:"revision"`
}

func (BrokerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerConfiguration)(nil)).Elem()
}

func (i BrokerConfigurationArgs) ToBrokerConfigurationOutput() BrokerConfigurationOutput {
	return i.ToBrokerConfigurationOutputWithContext(context.Background())
}

func (i BrokerConfigurationArgs) ToBrokerConfigurationOutputWithContext(ctx context.Context) BrokerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationOutput)
}

func (i *BrokerConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*BrokerConfigurationArgs] {
	return pulumix.Val(i)
}

type BrokerConfigurationOutput struct{ *pulumi.OutputState }

func (BrokerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerConfiguration)(nil)).Elem()
}

func (o BrokerConfigurationOutput) ToBrokerConfigurationOutput() BrokerConfigurationOutput {
	return o
}

func (o BrokerConfigurationOutput) ToBrokerConfigurationOutputWithContext(ctx context.Context) BrokerConfigurationOutput {
	return o
}

func (o BrokerConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[BrokerConfiguration] {
	return pulumix.Output[BrokerConfiguration]{
		OutputState: o.OutputState,
	}
}

// The Configuration ID.
func (o BrokerConfigurationOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[BrokerConfiguration](o, func(v BrokerConfiguration) *string { return v.Id })
}

// Revision of the Configuration.
func (o BrokerConfigurationOutput) Revision() pulumix.Output[*int] {
	return pulumix.Apply[BrokerConfiguration](o, func(v BrokerConfiguration) *int { return v.Revision })
}

type BrokerEncryptionOptions struct {
	// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS-managed CMKs or customer-managed CMKs are in use, this value must be configured.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Whether to enable an AWS-owned KMS CMK that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS-managed CMK aliased to `aws/mq` in your account.
	UseAwsOwnedKey *bool `pulumi:"useAwsOwnedKey"`
}

type BrokerEncryptionOptionsArgs struct {
	// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS-managed CMKs or customer-managed CMKs are in use, this value must be configured.
	KmsKeyId pulumix.Input[*string] `pulumi:"kmsKeyId"`
	// Whether to enable an AWS-owned KMS CMK that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS-managed CMK aliased to `aws/mq` in your account.
	UseAwsOwnedKey pulumix.Input[*bool] `pulumi:"useAwsOwnedKey"`
}

func (BrokerEncryptionOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerEncryptionOptions)(nil)).Elem()
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsOutput() BrokerEncryptionOptionsOutput {
	return i.ToBrokerEncryptionOptionsOutputWithContext(context.Background())
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsOutputWithContext(ctx context.Context) BrokerEncryptionOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsOutput)
}

func (i *BrokerEncryptionOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*BrokerEncryptionOptionsArgs] {
	return pulumix.Val(i)
}

type BrokerEncryptionOptionsOutput struct{ *pulumi.OutputState }

func (BrokerEncryptionOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerEncryptionOptions)(nil)).Elem()
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsOutput() BrokerEncryptionOptionsOutput {
	return o
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsOutputWithContext(ctx context.Context) BrokerEncryptionOptionsOutput {
	return o
}

func (o BrokerEncryptionOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[BrokerEncryptionOptions] {
	return pulumix.Output[BrokerEncryptionOptions]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS-managed CMKs or customer-managed CMKs are in use, this value must be configured.
func (o BrokerEncryptionOptionsOutput) KmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[BrokerEncryptionOptions](o, func(v BrokerEncryptionOptions) *string { return v.KmsKeyId })
}

// Whether to enable an AWS-owned KMS CMK that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS-managed CMK aliased to `aws/mq` in your account.
func (o BrokerEncryptionOptionsOutput) UseAwsOwnedKey() pulumix.Output[*bool] {
	return pulumix.Apply[BrokerEncryptionOptions](o, func(v BrokerEncryptionOptions) *bool { return v.UseAwsOwnedKey })
}

type BrokerInstance struct {
	ConsoleUrl *string  `pulumi:"consoleUrl"`
	Endpoints  []string `pulumi:"endpoints"`
	IpAddress  *string  `pulumi:"ipAddress"`
}

type BrokerInstanceArgs struct {
	ConsoleUrl pulumix.Input[*string]  `pulumi:"consoleUrl"`
	Endpoints  pulumix.Input[[]string] `pulumi:"endpoints"`
	IpAddress  pulumix.Input[*string]  `pulumi:"ipAddress"`
}

func (BrokerInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerInstance)(nil)).Elem()
}

func (i BrokerInstanceArgs) ToBrokerInstanceOutput() BrokerInstanceOutput {
	return i.ToBrokerInstanceOutputWithContext(context.Background())
}

func (i BrokerInstanceArgs) ToBrokerInstanceOutputWithContext(ctx context.Context) BrokerInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerInstanceOutput)
}

func (i *BrokerInstanceArgs) ToOutput(ctx context.Context) pulumix.Output[*BrokerInstanceArgs] {
	return pulumix.Val(i)
}

type BrokerInstanceOutput struct{ *pulumi.OutputState }

func (BrokerInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerInstance)(nil)).Elem()
}

func (o BrokerInstanceOutput) ToBrokerInstanceOutput() BrokerInstanceOutput {
	return o
}

func (o BrokerInstanceOutput) ToBrokerInstanceOutputWithContext(ctx context.Context) BrokerInstanceOutput {
	return o
}

func (o BrokerInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[BrokerInstance] {
	return pulumix.Output[BrokerInstance]{
		OutputState: o.OutputState,
	}
}

func (o BrokerInstanceOutput) ConsoleUrl() pulumix.Output[*string] {
	return pulumix.Apply[BrokerInstance](o, func(v BrokerInstance) *string { return v.ConsoleUrl })
}

func (o BrokerInstanceOutput) Endpoints() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BrokerInstance](o, func(v BrokerInstance) []string { return v.Endpoints })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o BrokerInstanceOutput) IpAddress() pulumix.Output[*string] {
	return pulumix.Apply[BrokerInstance](o, func(v BrokerInstance) *string { return v.IpAddress })
}

type BrokerLdapServerMetadata struct {
	// List of a fully qualified domain name of the LDAP server and an optional failover server.
	Hosts []string `pulumi:"hosts"`
	// Fully qualified name of the directory to search for a user’s groups.
	RoleBase *string `pulumi:"roleBase"`
	// Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
	RoleName *string `pulumi:"roleName"`
	// Search criteria for groups.
	RoleSearchMatching *string `pulumi:"roleSearchMatching"`
	// Whether the directory search scope is the entire sub-tree.
	RoleSearchSubtree *bool `pulumi:"roleSearchSubtree"`
	// Service account password.
	ServiceAccountPassword *string `pulumi:"serviceAccountPassword"`
	// Service account username.
	ServiceAccountUsername *string `pulumi:"serviceAccountUsername"`
	// Fully qualified name of the directory where you want to search for users.
	UserBase *string `pulumi:"userBase"`
	// Specifies the name of the LDAP attribute for the user group membership.
	UserRoleName *string `pulumi:"userRoleName"`
	// Search criteria for users.
	UserSearchMatching *string `pulumi:"userSearchMatching"`
	// Whether the directory search scope is the entire sub-tree.
	UserSearchSubtree *bool `pulumi:"userSearchSubtree"`
}

type BrokerLdapServerMetadataArgs struct {
	// List of a fully qualified domain name of the LDAP server and an optional failover server.
	Hosts pulumix.Input[[]string] `pulumi:"hosts"`
	// Fully qualified name of the directory to search for a user’s groups.
	RoleBase pulumix.Input[*string] `pulumi:"roleBase"`
	// Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
	RoleName pulumix.Input[*string] `pulumi:"roleName"`
	// Search criteria for groups.
	RoleSearchMatching pulumix.Input[*string] `pulumi:"roleSearchMatching"`
	// Whether the directory search scope is the entire sub-tree.
	RoleSearchSubtree pulumix.Input[*bool] `pulumi:"roleSearchSubtree"`
	// Service account password.
	ServiceAccountPassword pulumix.Input[*string] `pulumi:"serviceAccountPassword"`
	// Service account username.
	ServiceAccountUsername pulumix.Input[*string] `pulumi:"serviceAccountUsername"`
	// Fully qualified name of the directory where you want to search for users.
	UserBase pulumix.Input[*string] `pulumi:"userBase"`
	// Specifies the name of the LDAP attribute for the user group membership.
	UserRoleName pulumix.Input[*string] `pulumi:"userRoleName"`
	// Search criteria for users.
	UserSearchMatching pulumix.Input[*string] `pulumi:"userSearchMatching"`
	// Whether the directory search scope is the entire sub-tree.
	UserSearchSubtree pulumix.Input[*bool] `pulumi:"userSearchSubtree"`
}

func (BrokerLdapServerMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLdapServerMetadata)(nil)).Elem()
}

func (i BrokerLdapServerMetadataArgs) ToBrokerLdapServerMetadataOutput() BrokerLdapServerMetadataOutput {
	return i.ToBrokerLdapServerMetadataOutputWithContext(context.Background())
}

func (i BrokerLdapServerMetadataArgs) ToBrokerLdapServerMetadataOutputWithContext(ctx context.Context) BrokerLdapServerMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLdapServerMetadataOutput)
}

func (i *BrokerLdapServerMetadataArgs) ToOutput(ctx context.Context) pulumix.Output[*BrokerLdapServerMetadataArgs] {
	return pulumix.Val(i)
}

type BrokerLdapServerMetadataOutput struct{ *pulumi.OutputState }

func (BrokerLdapServerMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLdapServerMetadata)(nil)).Elem()
}

func (o BrokerLdapServerMetadataOutput) ToBrokerLdapServerMetadataOutput() BrokerLdapServerMetadataOutput {
	return o
}

func (o BrokerLdapServerMetadataOutput) ToBrokerLdapServerMetadataOutputWithContext(ctx context.Context) BrokerLdapServerMetadataOutput {
	return o
}

func (o BrokerLdapServerMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[BrokerLdapServerMetadata] {
	return pulumix.Output[BrokerLdapServerMetadata]{
		OutputState: o.OutputState,
	}
}

// List of a fully qualified domain name of the LDAP server and an optional failover server.
func (o BrokerLdapServerMetadataOutput) Hosts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BrokerLdapServerMetadata](o, func(v BrokerLdapServerMetadata) []string { return v.Hosts })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Fully qualified name of the directory to search for a user’s groups.
func (o BrokerLdapServerMetadataOutput) RoleBase() pulumix.Output[*string] {
	return pulumix.Apply[BrokerLdapServerMetadata](o, func(v BrokerLdapServerMetadata) *string { return v.RoleBase })
}

// Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
func (o BrokerLdapServerMetadataOutput) RoleName() pulumix.Output[*string] {
	return pulumix.Apply[BrokerLdapServerMetadata](o, func(v BrokerLdapServerMetadata) *string { return v.RoleName })
}

// Search criteria for groups.
func (o BrokerLdapServerMetadataOutput) RoleSearchMatching() pulumix.Output[*string] {
	return pulumix.Apply[BrokerLdapServerMetadata](o, func(v BrokerLdapServerMetadata) *string { return v.RoleSearchMatching })
}

// Whether the directory search scope is the entire sub-tree.
func (o BrokerLdapServerMetadataOutput) RoleSearchSubtree() pulumix.Output[*bool] {
	return pulumix.Apply[BrokerLdapServerMetadata](o, func(v BrokerLdapServerMetadata) *bool { return v.RoleSearchSubtree })
}

// Service account password.
func (o BrokerLdapServerMetadataOutput) ServiceAccountPassword() pulumix.Output[*string] {
	return pulumix.Apply[BrokerLdapServerMetadata](o, func(v BrokerLdapServerMetadata) *string { return v.ServiceAccountPassword })
}

// Service account username.
func (o BrokerLdapServerMetadataOutput) ServiceAccountUsername() pulumix.Output[*string] {
	return pulumix.Apply[BrokerLdapServerMetadata](o, func(v BrokerLdapServerMetadata) *string { return v.ServiceAccountUsername })
}

// Fully qualified name of the directory where you want to search for users.
func (o BrokerLdapServerMetadataOutput) UserBase() pulumix.Output[*string] {
	return pulumix.Apply[BrokerLdapServerMetadata](o, func(v BrokerLdapServerMetadata) *string { return v.UserBase })
}

// Specifies the name of the LDAP attribute for the user group membership.
func (o BrokerLdapServerMetadataOutput) UserRoleName() pulumix.Output[*string] {
	return pulumix.Apply[BrokerLdapServerMetadata](o, func(v BrokerLdapServerMetadata) *string { return v.UserRoleName })
}

// Search criteria for users.
func (o BrokerLdapServerMetadataOutput) UserSearchMatching() pulumix.Output[*string] {
	return pulumix.Apply[BrokerLdapServerMetadata](o, func(v BrokerLdapServerMetadata) *string { return v.UserSearchMatching })
}

// Whether the directory search scope is the entire sub-tree.
func (o BrokerLdapServerMetadataOutput) UserSearchSubtree() pulumix.Output[*bool] {
	return pulumix.Apply[BrokerLdapServerMetadata](o, func(v BrokerLdapServerMetadata) *bool { return v.UserSearchSubtree })
}

type BrokerLogs struct {
	// Enables audit logging. Auditing is only possible for `engineType` of `ActiveMQ`. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
	Audit *bool `pulumi:"audit"`
	// Enables general logging via CloudWatch. Defaults to `false`.
	General *bool `pulumi:"general"`
}

type BrokerLogsArgs struct {
	// Enables audit logging. Auditing is only possible for `engineType` of `ActiveMQ`. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
	Audit pulumix.Input[*bool] `pulumi:"audit"`
	// Enables general logging via CloudWatch. Defaults to `false`.
	General pulumix.Input[*bool] `pulumi:"general"`
}

func (BrokerLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLogs)(nil)).Elem()
}

func (i BrokerLogsArgs) ToBrokerLogsOutput() BrokerLogsOutput {
	return i.ToBrokerLogsOutputWithContext(context.Background())
}

func (i BrokerLogsArgs) ToBrokerLogsOutputWithContext(ctx context.Context) BrokerLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogsOutput)
}

func (i *BrokerLogsArgs) ToOutput(ctx context.Context) pulumix.Output[*BrokerLogsArgs] {
	return pulumix.Val(i)
}

type BrokerLogsOutput struct{ *pulumi.OutputState }

func (BrokerLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLogs)(nil)).Elem()
}

func (o BrokerLogsOutput) ToBrokerLogsOutput() BrokerLogsOutput {
	return o
}

func (o BrokerLogsOutput) ToBrokerLogsOutputWithContext(ctx context.Context) BrokerLogsOutput {
	return o
}

func (o BrokerLogsOutput) ToOutput(ctx context.Context) pulumix.Output[BrokerLogs] {
	return pulumix.Output[BrokerLogs]{
		OutputState: o.OutputState,
	}
}

// Enables audit logging. Auditing is only possible for `engineType` of `ActiveMQ`. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
func (o BrokerLogsOutput) Audit() pulumix.Output[*bool] {
	return pulumix.Apply[BrokerLogs](o, func(v BrokerLogs) *bool { return v.Audit })
}

// Enables general logging via CloudWatch. Defaults to `false`.
func (o BrokerLogsOutput) General() pulumix.Output[*bool] {
	return pulumix.Apply[BrokerLogs](o, func(v BrokerLogs) *bool { return v.General })
}

type BrokerMaintenanceWindowStartTime struct {
	// Day of the week, e.g., `MONDAY`, `TUESDAY`, or `WEDNESDAY`.
	DayOfWeek string `pulumi:"dayOfWeek"`
	// Time, in 24-hour format, e.g., `02:00`.
	TimeOfDay string `pulumi:"timeOfDay"`
	// Time zone in either the Country/City format or the UTC offset format, e.g., `CET`.
	TimeZone string `pulumi:"timeZone"`
}

type BrokerMaintenanceWindowStartTimeArgs struct {
	// Day of the week, e.g., `MONDAY`, `TUESDAY`, or `WEDNESDAY`.
	DayOfWeek pulumix.Input[string] `pulumi:"dayOfWeek"`
	// Time, in 24-hour format, e.g., `02:00`.
	TimeOfDay pulumix.Input[string] `pulumi:"timeOfDay"`
	// Time zone in either the Country/City format or the UTC offset format, e.g., `CET`.
	TimeZone pulumix.Input[string] `pulumi:"timeZone"`
}

func (BrokerMaintenanceWindowStartTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (i BrokerMaintenanceWindowStartTimeArgs) ToBrokerMaintenanceWindowStartTimeOutput() BrokerMaintenanceWindowStartTimeOutput {
	return i.ToBrokerMaintenanceWindowStartTimeOutputWithContext(context.Background())
}

func (i BrokerMaintenanceWindowStartTimeArgs) ToBrokerMaintenanceWindowStartTimeOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowStartTimeOutput)
}

func (i *BrokerMaintenanceWindowStartTimeArgs) ToOutput(ctx context.Context) pulumix.Output[*BrokerMaintenanceWindowStartTimeArgs] {
	return pulumix.Val(i)
}

type BrokerMaintenanceWindowStartTimeOutput struct{ *pulumi.OutputState }

func (BrokerMaintenanceWindowStartTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (o BrokerMaintenanceWindowStartTimeOutput) ToBrokerMaintenanceWindowStartTimeOutput() BrokerMaintenanceWindowStartTimeOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimeOutput) ToBrokerMaintenanceWindowStartTimeOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimeOutput) ToOutput(ctx context.Context) pulumix.Output[BrokerMaintenanceWindowStartTime] {
	return pulumix.Output[BrokerMaintenanceWindowStartTime]{
		OutputState: o.OutputState,
	}
}

// Day of the week, e.g., `MONDAY`, `TUESDAY`, or `WEDNESDAY`.
func (o BrokerMaintenanceWindowStartTimeOutput) DayOfWeek() pulumix.Output[string] {
	return pulumix.Apply[BrokerMaintenanceWindowStartTime](o, func(v BrokerMaintenanceWindowStartTime) string { return v.DayOfWeek })
}

// Time, in 24-hour format, e.g., `02:00`.
func (o BrokerMaintenanceWindowStartTimeOutput) TimeOfDay() pulumix.Output[string] {
	return pulumix.Apply[BrokerMaintenanceWindowStartTime](o, func(v BrokerMaintenanceWindowStartTime) string { return v.TimeOfDay })
}

// Time zone in either the Country/City format or the UTC offset format, e.g., `CET`.
func (o BrokerMaintenanceWindowStartTimeOutput) TimeZone() pulumix.Output[string] {
	return pulumix.Apply[BrokerMaintenanceWindowStartTime](o, func(v BrokerMaintenanceWindowStartTime) string { return v.TimeZone })
}

type BrokerUser struct {
	// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user. Applies to `engineType` of `ActiveMQ` only.
	ConsoleAccess *bool `pulumi:"consoleAccess"`
	// List of groups (20 maximum) to which the ActiveMQ user belongs. Applies to `engineType` of `ActiveMQ` only.
	Groups []string `pulumi:"groups"`
	// Password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
	Password string `pulumi:"password"`
	// Whether to set set replication user. Defaults to `false`.
	ReplicationUser *bool `pulumi:"replicationUser"`
	// Username of the user.
	//
	// > **NOTE:** AWS currently does not support updating RabbitMQ users. Updates to users can only be in the RabbitMQ UI.
	Username string `pulumi:"username"`
}

type BrokerUserArgs struct {
	// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user. Applies to `engineType` of `ActiveMQ` only.
	ConsoleAccess pulumix.Input[*bool] `pulumi:"consoleAccess"`
	// List of groups (20 maximum) to which the ActiveMQ user belongs. Applies to `engineType` of `ActiveMQ` only.
	Groups pulumix.Input[[]string] `pulumi:"groups"`
	// Password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
	Password pulumix.Input[string] `pulumi:"password"`
	// Whether to set set replication user. Defaults to `false`.
	ReplicationUser pulumix.Input[*bool] `pulumi:"replicationUser"`
	// Username of the user.
	//
	// > **NOTE:** AWS currently does not support updating RabbitMQ users. Updates to users can only be in the RabbitMQ UI.
	Username pulumix.Input[string] `pulumi:"username"`
}

func (BrokerUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerUser)(nil)).Elem()
}

func (i BrokerUserArgs) ToBrokerUserOutput() BrokerUserOutput {
	return i.ToBrokerUserOutputWithContext(context.Background())
}

func (i BrokerUserArgs) ToBrokerUserOutputWithContext(ctx context.Context) BrokerUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerUserOutput)
}

func (i *BrokerUserArgs) ToOutput(ctx context.Context) pulumix.Output[*BrokerUserArgs] {
	return pulumix.Val(i)
}

type BrokerUserOutput struct{ *pulumi.OutputState }

func (BrokerUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerUser)(nil)).Elem()
}

func (o BrokerUserOutput) ToBrokerUserOutput() BrokerUserOutput {
	return o
}

func (o BrokerUserOutput) ToBrokerUserOutputWithContext(ctx context.Context) BrokerUserOutput {
	return o
}

func (o BrokerUserOutput) ToOutput(ctx context.Context) pulumix.Output[BrokerUser] {
	return pulumix.Output[BrokerUser]{
		OutputState: o.OutputState,
	}
}

// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user. Applies to `engineType` of `ActiveMQ` only.
func (o BrokerUserOutput) ConsoleAccess() pulumix.Output[*bool] {
	return pulumix.Apply[BrokerUser](o, func(v BrokerUser) *bool { return v.ConsoleAccess })
}

// List of groups (20 maximum) to which the ActiveMQ user belongs. Applies to `engineType` of `ActiveMQ` only.
func (o BrokerUserOutput) Groups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BrokerUser](o, func(v BrokerUser) []string { return v.Groups })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
func (o BrokerUserOutput) Password() pulumix.Output[string] {
	return pulumix.Apply[BrokerUser](o, func(v BrokerUser) string { return v.Password })
}

// Whether to set set replication user. Defaults to `false`.
func (o BrokerUserOutput) ReplicationUser() pulumix.Output[*bool] {
	return pulumix.Apply[BrokerUser](o, func(v BrokerUser) *bool { return v.ReplicationUser })
}

// Username of the user.
//
// > **NOTE:** AWS currently does not support updating RabbitMQ users. Updates to users can only be in the RabbitMQ UI.
func (o BrokerUserOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[BrokerUser](o, func(v BrokerUser) string { return v.Username })
}

type GetBrokerConfiguration struct {
	Id       string `pulumi:"id"`
	Revision int    `pulumi:"revision"`
}

type GetBrokerConfigurationArgs struct {
	Id       pulumix.Input[string] `pulumi:"id"`
	Revision pulumix.Input[int]    `pulumi:"revision"`
}

func (GetBrokerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerConfiguration)(nil)).Elem()
}

func (i GetBrokerConfigurationArgs) ToGetBrokerConfigurationOutput() GetBrokerConfigurationOutput {
	return i.ToGetBrokerConfigurationOutputWithContext(context.Background())
}

func (i GetBrokerConfigurationArgs) ToGetBrokerConfigurationOutputWithContext(ctx context.Context) GetBrokerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerConfigurationOutput)
}

func (i *GetBrokerConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBrokerConfigurationArgs] {
	return pulumix.Val(i)
}

type GetBrokerConfigurationOutput struct{ *pulumi.OutputState }

func (GetBrokerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerConfiguration)(nil)).Elem()
}

func (o GetBrokerConfigurationOutput) ToGetBrokerConfigurationOutput() GetBrokerConfigurationOutput {
	return o
}

func (o GetBrokerConfigurationOutput) ToGetBrokerConfigurationOutputWithContext(ctx context.Context) GetBrokerConfigurationOutput {
	return o
}

func (o GetBrokerConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetBrokerConfiguration] {
	return pulumix.Output[GetBrokerConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GetBrokerConfigurationOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerConfiguration](o, func(v GetBrokerConfiguration) string { return v.Id })
}

func (o GetBrokerConfigurationOutput) Revision() pulumix.Output[int] {
	return pulumix.Apply[GetBrokerConfiguration](o, func(v GetBrokerConfiguration) int { return v.Revision })
}

type GetBrokerEncryptionOption struct {
	KmsKeyId       string `pulumi:"kmsKeyId"`
	UseAwsOwnedKey bool   `pulumi:"useAwsOwnedKey"`
}

type GetBrokerEncryptionOptionArgs struct {
	KmsKeyId       pulumix.Input[string] `pulumi:"kmsKeyId"`
	UseAwsOwnedKey pulumix.Input[bool]   `pulumi:"useAwsOwnedKey"`
}

func (GetBrokerEncryptionOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerEncryptionOption)(nil)).Elem()
}

func (i GetBrokerEncryptionOptionArgs) ToGetBrokerEncryptionOptionOutput() GetBrokerEncryptionOptionOutput {
	return i.ToGetBrokerEncryptionOptionOutputWithContext(context.Background())
}

func (i GetBrokerEncryptionOptionArgs) ToGetBrokerEncryptionOptionOutputWithContext(ctx context.Context) GetBrokerEncryptionOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerEncryptionOptionOutput)
}

func (i *GetBrokerEncryptionOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBrokerEncryptionOptionArgs] {
	return pulumix.Val(i)
}

type GetBrokerEncryptionOptionOutput struct{ *pulumi.OutputState }

func (GetBrokerEncryptionOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerEncryptionOption)(nil)).Elem()
}

func (o GetBrokerEncryptionOptionOutput) ToGetBrokerEncryptionOptionOutput() GetBrokerEncryptionOptionOutput {
	return o
}

func (o GetBrokerEncryptionOptionOutput) ToGetBrokerEncryptionOptionOutputWithContext(ctx context.Context) GetBrokerEncryptionOptionOutput {
	return o
}

func (o GetBrokerEncryptionOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetBrokerEncryptionOption] {
	return pulumix.Output[GetBrokerEncryptionOption]{
		OutputState: o.OutputState,
	}
}

func (o GetBrokerEncryptionOptionOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerEncryptionOption](o, func(v GetBrokerEncryptionOption) string { return v.KmsKeyId })
}

func (o GetBrokerEncryptionOptionOutput) UseAwsOwnedKey() pulumix.Output[bool] {
	return pulumix.Apply[GetBrokerEncryptionOption](o, func(v GetBrokerEncryptionOption) bool { return v.UseAwsOwnedKey })
}

type GetBrokerInstance struct {
	ConsoleUrl string   `pulumi:"consoleUrl"`
	Endpoints  []string `pulumi:"endpoints"`
	IpAddress  string   `pulumi:"ipAddress"`
}

type GetBrokerInstanceArgs struct {
	ConsoleUrl pulumix.Input[string]   `pulumi:"consoleUrl"`
	Endpoints  pulumix.Input[[]string] `pulumi:"endpoints"`
	IpAddress  pulumix.Input[string]   `pulumi:"ipAddress"`
}

func (GetBrokerInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerInstance)(nil)).Elem()
}

func (i GetBrokerInstanceArgs) ToGetBrokerInstanceOutput() GetBrokerInstanceOutput {
	return i.ToGetBrokerInstanceOutputWithContext(context.Background())
}

func (i GetBrokerInstanceArgs) ToGetBrokerInstanceOutputWithContext(ctx context.Context) GetBrokerInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerInstanceOutput)
}

func (i *GetBrokerInstanceArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBrokerInstanceArgs] {
	return pulumix.Val(i)
}

type GetBrokerInstanceOutput struct{ *pulumi.OutputState }

func (GetBrokerInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerInstance)(nil)).Elem()
}

func (o GetBrokerInstanceOutput) ToGetBrokerInstanceOutput() GetBrokerInstanceOutput {
	return o
}

func (o GetBrokerInstanceOutput) ToGetBrokerInstanceOutputWithContext(ctx context.Context) GetBrokerInstanceOutput {
	return o
}

func (o GetBrokerInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[GetBrokerInstance] {
	return pulumix.Output[GetBrokerInstance]{
		OutputState: o.OutputState,
	}
}

func (o GetBrokerInstanceOutput) ConsoleUrl() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerInstance](o, func(v GetBrokerInstance) string { return v.ConsoleUrl })
}

func (o GetBrokerInstanceOutput) Endpoints() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetBrokerInstance](o, func(v GetBrokerInstance) []string { return v.Endpoints })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetBrokerInstanceOutput) IpAddress() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerInstance](o, func(v GetBrokerInstance) string { return v.IpAddress })
}

type GetBrokerLdapServerMetadata struct {
	Hosts                  []string `pulumi:"hosts"`
	RoleBase               string   `pulumi:"roleBase"`
	RoleName               string   `pulumi:"roleName"`
	RoleSearchMatching     string   `pulumi:"roleSearchMatching"`
	RoleSearchSubtree      bool     `pulumi:"roleSearchSubtree"`
	ServiceAccountPassword string   `pulumi:"serviceAccountPassword"`
	ServiceAccountUsername string   `pulumi:"serviceAccountUsername"`
	UserBase               string   `pulumi:"userBase"`
	UserRoleName           string   `pulumi:"userRoleName"`
	UserSearchMatching     string   `pulumi:"userSearchMatching"`
	UserSearchSubtree      bool     `pulumi:"userSearchSubtree"`
}

type GetBrokerLdapServerMetadataArgs struct {
	Hosts                  pulumix.Input[[]string] `pulumi:"hosts"`
	RoleBase               pulumix.Input[string]   `pulumi:"roleBase"`
	RoleName               pulumix.Input[string]   `pulumi:"roleName"`
	RoleSearchMatching     pulumix.Input[string]   `pulumi:"roleSearchMatching"`
	RoleSearchSubtree      pulumix.Input[bool]     `pulumi:"roleSearchSubtree"`
	ServiceAccountPassword pulumix.Input[string]   `pulumi:"serviceAccountPassword"`
	ServiceAccountUsername pulumix.Input[string]   `pulumi:"serviceAccountUsername"`
	UserBase               pulumix.Input[string]   `pulumi:"userBase"`
	UserRoleName           pulumix.Input[string]   `pulumi:"userRoleName"`
	UserSearchMatching     pulumix.Input[string]   `pulumi:"userSearchMatching"`
	UserSearchSubtree      pulumix.Input[bool]     `pulumi:"userSearchSubtree"`
}

func (GetBrokerLdapServerMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerLdapServerMetadata)(nil)).Elem()
}

func (i GetBrokerLdapServerMetadataArgs) ToGetBrokerLdapServerMetadataOutput() GetBrokerLdapServerMetadataOutput {
	return i.ToGetBrokerLdapServerMetadataOutputWithContext(context.Background())
}

func (i GetBrokerLdapServerMetadataArgs) ToGetBrokerLdapServerMetadataOutputWithContext(ctx context.Context) GetBrokerLdapServerMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerLdapServerMetadataOutput)
}

func (i *GetBrokerLdapServerMetadataArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBrokerLdapServerMetadataArgs] {
	return pulumix.Val(i)
}

type GetBrokerLdapServerMetadataOutput struct{ *pulumi.OutputState }

func (GetBrokerLdapServerMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerLdapServerMetadata)(nil)).Elem()
}

func (o GetBrokerLdapServerMetadataOutput) ToGetBrokerLdapServerMetadataOutput() GetBrokerLdapServerMetadataOutput {
	return o
}

func (o GetBrokerLdapServerMetadataOutput) ToGetBrokerLdapServerMetadataOutputWithContext(ctx context.Context) GetBrokerLdapServerMetadataOutput {
	return o
}

func (o GetBrokerLdapServerMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[GetBrokerLdapServerMetadata] {
	return pulumix.Output[GetBrokerLdapServerMetadata]{
		OutputState: o.OutputState,
	}
}

func (o GetBrokerLdapServerMetadataOutput) Hosts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetBrokerLdapServerMetadata](o, func(v GetBrokerLdapServerMetadata) []string { return v.Hosts })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetBrokerLdapServerMetadataOutput) RoleBase() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerLdapServerMetadata](o, func(v GetBrokerLdapServerMetadata) string { return v.RoleBase })
}

func (o GetBrokerLdapServerMetadataOutput) RoleName() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerLdapServerMetadata](o, func(v GetBrokerLdapServerMetadata) string { return v.RoleName })
}

func (o GetBrokerLdapServerMetadataOutput) RoleSearchMatching() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerLdapServerMetadata](o, func(v GetBrokerLdapServerMetadata) string { return v.RoleSearchMatching })
}

func (o GetBrokerLdapServerMetadataOutput) RoleSearchSubtree() pulumix.Output[bool] {
	return pulumix.Apply[GetBrokerLdapServerMetadata](o, func(v GetBrokerLdapServerMetadata) bool { return v.RoleSearchSubtree })
}

func (o GetBrokerLdapServerMetadataOutput) ServiceAccountPassword() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerLdapServerMetadata](o, func(v GetBrokerLdapServerMetadata) string { return v.ServiceAccountPassword })
}

func (o GetBrokerLdapServerMetadataOutput) ServiceAccountUsername() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerLdapServerMetadata](o, func(v GetBrokerLdapServerMetadata) string { return v.ServiceAccountUsername })
}

func (o GetBrokerLdapServerMetadataOutput) UserBase() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerLdapServerMetadata](o, func(v GetBrokerLdapServerMetadata) string { return v.UserBase })
}

func (o GetBrokerLdapServerMetadataOutput) UserRoleName() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerLdapServerMetadata](o, func(v GetBrokerLdapServerMetadata) string { return v.UserRoleName })
}

func (o GetBrokerLdapServerMetadataOutput) UserSearchMatching() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerLdapServerMetadata](o, func(v GetBrokerLdapServerMetadata) string { return v.UserSearchMatching })
}

func (o GetBrokerLdapServerMetadataOutput) UserSearchSubtree() pulumix.Output[bool] {
	return pulumix.Apply[GetBrokerLdapServerMetadata](o, func(v GetBrokerLdapServerMetadata) bool { return v.UserSearchSubtree })
}

type GetBrokerLogs struct {
	Audit   bool `pulumi:"audit"`
	General bool `pulumi:"general"`
}

type GetBrokerLogsArgs struct {
	Audit   pulumix.Input[bool] `pulumi:"audit"`
	General pulumix.Input[bool] `pulumi:"general"`
}

func (GetBrokerLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerLogs)(nil)).Elem()
}

func (i GetBrokerLogsArgs) ToGetBrokerLogsOutput() GetBrokerLogsOutput {
	return i.ToGetBrokerLogsOutputWithContext(context.Background())
}

func (i GetBrokerLogsArgs) ToGetBrokerLogsOutputWithContext(ctx context.Context) GetBrokerLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerLogsOutput)
}

func (i *GetBrokerLogsArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBrokerLogsArgs] {
	return pulumix.Val(i)
}

type GetBrokerLogsOutput struct{ *pulumi.OutputState }

func (GetBrokerLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerLogs)(nil)).Elem()
}

func (o GetBrokerLogsOutput) ToGetBrokerLogsOutput() GetBrokerLogsOutput {
	return o
}

func (o GetBrokerLogsOutput) ToGetBrokerLogsOutputWithContext(ctx context.Context) GetBrokerLogsOutput {
	return o
}

func (o GetBrokerLogsOutput) ToOutput(ctx context.Context) pulumix.Output[GetBrokerLogs] {
	return pulumix.Output[GetBrokerLogs]{
		OutputState: o.OutputState,
	}
}

func (o GetBrokerLogsOutput) Audit() pulumix.Output[bool] {
	return pulumix.Apply[GetBrokerLogs](o, func(v GetBrokerLogs) bool { return v.Audit })
}

func (o GetBrokerLogsOutput) General() pulumix.Output[bool] {
	return pulumix.Apply[GetBrokerLogs](o, func(v GetBrokerLogs) bool { return v.General })
}

type GetBrokerMaintenanceWindowStartTime struct {
	DayOfWeek string `pulumi:"dayOfWeek"`
	TimeOfDay string `pulumi:"timeOfDay"`
	TimeZone  string `pulumi:"timeZone"`
}

type GetBrokerMaintenanceWindowStartTimeArgs struct {
	DayOfWeek pulumix.Input[string] `pulumi:"dayOfWeek"`
	TimeOfDay pulumix.Input[string] `pulumi:"timeOfDay"`
	TimeZone  pulumix.Input[string] `pulumi:"timeZone"`
}

func (GetBrokerMaintenanceWindowStartTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (i GetBrokerMaintenanceWindowStartTimeArgs) ToGetBrokerMaintenanceWindowStartTimeOutput() GetBrokerMaintenanceWindowStartTimeOutput {
	return i.ToGetBrokerMaintenanceWindowStartTimeOutputWithContext(context.Background())
}

func (i GetBrokerMaintenanceWindowStartTimeArgs) ToGetBrokerMaintenanceWindowStartTimeOutputWithContext(ctx context.Context) GetBrokerMaintenanceWindowStartTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerMaintenanceWindowStartTimeOutput)
}

func (i *GetBrokerMaintenanceWindowStartTimeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBrokerMaintenanceWindowStartTimeArgs] {
	return pulumix.Val(i)
}

type GetBrokerMaintenanceWindowStartTimeOutput struct{ *pulumi.OutputState }

func (GetBrokerMaintenanceWindowStartTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) ToGetBrokerMaintenanceWindowStartTimeOutput() GetBrokerMaintenanceWindowStartTimeOutput {
	return o
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) ToGetBrokerMaintenanceWindowStartTimeOutputWithContext(ctx context.Context) GetBrokerMaintenanceWindowStartTimeOutput {
	return o
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) ToOutput(ctx context.Context) pulumix.Output[GetBrokerMaintenanceWindowStartTime] {
	return pulumix.Output[GetBrokerMaintenanceWindowStartTime]{
		OutputState: o.OutputState,
	}
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) DayOfWeek() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerMaintenanceWindowStartTime](o, func(v GetBrokerMaintenanceWindowStartTime) string { return v.DayOfWeek })
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) TimeOfDay() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerMaintenanceWindowStartTime](o, func(v GetBrokerMaintenanceWindowStartTime) string { return v.TimeOfDay })
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) TimeZone() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerMaintenanceWindowStartTime](o, func(v GetBrokerMaintenanceWindowStartTime) string { return v.TimeZone })
}

type GetBrokerUser struct {
	ConsoleAccess   bool     `pulumi:"consoleAccess"`
	Groups          []string `pulumi:"groups"`
	ReplicationUser bool     `pulumi:"replicationUser"`
	Username        string   `pulumi:"username"`
}

type GetBrokerUserArgs struct {
	ConsoleAccess   pulumix.Input[bool]     `pulumi:"consoleAccess"`
	Groups          pulumix.Input[[]string] `pulumi:"groups"`
	ReplicationUser pulumix.Input[bool]     `pulumi:"replicationUser"`
	Username        pulumix.Input[string]   `pulumi:"username"`
}

func (GetBrokerUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerUser)(nil)).Elem()
}

func (i GetBrokerUserArgs) ToGetBrokerUserOutput() GetBrokerUserOutput {
	return i.ToGetBrokerUserOutputWithContext(context.Background())
}

func (i GetBrokerUserArgs) ToGetBrokerUserOutputWithContext(ctx context.Context) GetBrokerUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerUserOutput)
}

func (i *GetBrokerUserArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBrokerUserArgs] {
	return pulumix.Val(i)
}

type GetBrokerUserOutput struct{ *pulumi.OutputState }

func (GetBrokerUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerUser)(nil)).Elem()
}

func (o GetBrokerUserOutput) ToGetBrokerUserOutput() GetBrokerUserOutput {
	return o
}

func (o GetBrokerUserOutput) ToGetBrokerUserOutputWithContext(ctx context.Context) GetBrokerUserOutput {
	return o
}

func (o GetBrokerUserOutput) ToOutput(ctx context.Context) pulumix.Output[GetBrokerUser] {
	return pulumix.Output[GetBrokerUser]{
		OutputState: o.OutputState,
	}
}

func (o GetBrokerUserOutput) ConsoleAccess() pulumix.Output[bool] {
	return pulumix.Apply[GetBrokerUser](o, func(v GetBrokerUser) bool { return v.ConsoleAccess })
}

func (o GetBrokerUserOutput) Groups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetBrokerUser](o, func(v GetBrokerUser) []string { return v.Groups })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetBrokerUserOutput) ReplicationUser() pulumix.Output[bool] {
	return pulumix.Apply[GetBrokerUser](o, func(v GetBrokerUser) bool { return v.ReplicationUser })
}

func (o GetBrokerUserOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerUser](o, func(v GetBrokerUser) string { return v.Username })
}

type GetInstanceTypeOfferingsBrokerInstanceOption struct {
	// List of available AZs. See Availability Zones. below
	AvailabilityZones []GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZone `pulumi:"availabilityZones"`
	// Filter response by engine type.
	EngineType string `pulumi:"engineType"`
	// Filter response by host instance type.
	HostInstanceType string `pulumi:"hostInstanceType"`
	// Filter response by storage type.
	StorageType string `pulumi:"storageType"`
	// The list of supported deployment modes.
	SupportedDeploymentModes []string `pulumi:"supportedDeploymentModes"`
	// The list of supported engine versions.
	SupportedEngineVersions []string `pulumi:"supportedEngineVersions"`
}

type GetInstanceTypeOfferingsBrokerInstanceOptionArgs struct {
	// List of available AZs. See Availability Zones. below
	AvailabilityZones pulumix.Input[[]*GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneArgs] `pulumi:"availabilityZones"`
	// Filter response by engine type.
	EngineType pulumix.Input[string] `pulumi:"engineType"`
	// Filter response by host instance type.
	HostInstanceType pulumix.Input[string] `pulumi:"hostInstanceType"`
	// Filter response by storage type.
	StorageType pulumix.Input[string] `pulumi:"storageType"`
	// The list of supported deployment modes.
	SupportedDeploymentModes pulumix.Input[[]string] `pulumi:"supportedDeploymentModes"`
	// The list of supported engine versions.
	SupportedEngineVersions pulumix.Input[[]string] `pulumi:"supportedEngineVersions"`
}

func (GetInstanceTypeOfferingsBrokerInstanceOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypeOfferingsBrokerInstanceOption)(nil)).Elem()
}

func (i GetInstanceTypeOfferingsBrokerInstanceOptionArgs) ToGetInstanceTypeOfferingsBrokerInstanceOptionOutput() GetInstanceTypeOfferingsBrokerInstanceOptionOutput {
	return i.ToGetInstanceTypeOfferingsBrokerInstanceOptionOutputWithContext(context.Background())
}

func (i GetInstanceTypeOfferingsBrokerInstanceOptionArgs) ToGetInstanceTypeOfferingsBrokerInstanceOptionOutputWithContext(ctx context.Context) GetInstanceTypeOfferingsBrokerInstanceOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypeOfferingsBrokerInstanceOptionOutput)
}

func (i *GetInstanceTypeOfferingsBrokerInstanceOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInstanceTypeOfferingsBrokerInstanceOptionArgs] {
	return pulumix.Val(i)
}

type GetInstanceTypeOfferingsBrokerInstanceOptionOutput struct{ *pulumi.OutputState }

func (GetInstanceTypeOfferingsBrokerInstanceOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypeOfferingsBrokerInstanceOption)(nil)).Elem()
}

func (o GetInstanceTypeOfferingsBrokerInstanceOptionOutput) ToGetInstanceTypeOfferingsBrokerInstanceOptionOutput() GetInstanceTypeOfferingsBrokerInstanceOptionOutput {
	return o
}

func (o GetInstanceTypeOfferingsBrokerInstanceOptionOutput) ToGetInstanceTypeOfferingsBrokerInstanceOptionOutputWithContext(ctx context.Context) GetInstanceTypeOfferingsBrokerInstanceOptionOutput {
	return o
}

func (o GetInstanceTypeOfferingsBrokerInstanceOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceTypeOfferingsBrokerInstanceOption] {
	return pulumix.Output[GetInstanceTypeOfferingsBrokerInstanceOption]{
		OutputState: o.OutputState,
	}
}

// List of available AZs. See Availability Zones. below
func (o GetInstanceTypeOfferingsBrokerInstanceOptionOutput) AvailabilityZones() pulumix.GArrayOutput[GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZone, GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput] {
	value := pulumix.Apply[GetInstanceTypeOfferingsBrokerInstanceOption](o, func(v GetInstanceTypeOfferingsBrokerInstanceOption) []GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZone {
		return v.AvailabilityZones
	})
	return pulumix.GArrayOutput[GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZone, GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput]{OutputState: value.OutputState}
}

// Filter response by engine type.
func (o GetInstanceTypeOfferingsBrokerInstanceOptionOutput) EngineType() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceTypeOfferingsBrokerInstanceOption](o, func(v GetInstanceTypeOfferingsBrokerInstanceOption) string { return v.EngineType })
}

// Filter response by host instance type.
func (o GetInstanceTypeOfferingsBrokerInstanceOptionOutput) HostInstanceType() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceTypeOfferingsBrokerInstanceOption](o, func(v GetInstanceTypeOfferingsBrokerInstanceOption) string { return v.HostInstanceType })
}

// Filter response by storage type.
func (o GetInstanceTypeOfferingsBrokerInstanceOptionOutput) StorageType() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceTypeOfferingsBrokerInstanceOption](o, func(v GetInstanceTypeOfferingsBrokerInstanceOption) string { return v.StorageType })
}

// The list of supported deployment modes.
func (o GetInstanceTypeOfferingsBrokerInstanceOptionOutput) SupportedDeploymentModes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetInstanceTypeOfferingsBrokerInstanceOption](o, func(v GetInstanceTypeOfferingsBrokerInstanceOption) []string { return v.SupportedDeploymentModes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The list of supported engine versions.
func (o GetInstanceTypeOfferingsBrokerInstanceOptionOutput) SupportedEngineVersions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetInstanceTypeOfferingsBrokerInstanceOption](o, func(v GetInstanceTypeOfferingsBrokerInstanceOption) []string { return v.SupportedEngineVersions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZone struct {
	// Name of the Availability Zone.
	Name string `pulumi:"name"`
}

type GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneArgs struct {
	// Name of the Availability Zone.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZone)(nil)).Elem()
}

func (i GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneArgs) ToGetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput() GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput {
	return i.ToGetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutputWithContext(context.Background())
}

func (i GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneArgs) ToGetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutputWithContext(ctx context.Context) GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput)
}

func (i *GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneArgs] {
	return pulumix.Val(i)
}

type GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput struct{ *pulumi.OutputState }

func (GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZone)(nil)).Elem()
}

func (o GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput) ToGetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput() GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput {
	return o
}

func (o GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput) ToGetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutputWithContext(ctx context.Context) GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput {
	return o
}

func (o GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZone] {
	return pulumix.Output[GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZone]{
		OutputState: o.OutputState,
	}
}

// Name of the Availability Zone.
func (o GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZone](o, func(v GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZone) string { return v.Name })
}

func init() {
	pulumi.RegisterOutputType(BrokerConfigurationOutput{})
	pulumi.RegisterOutputType(BrokerEncryptionOptionsOutput{})
	pulumi.RegisterOutputType(BrokerInstanceOutput{})
	pulumi.RegisterOutputType(BrokerLdapServerMetadataOutput{})
	pulumi.RegisterOutputType(BrokerLogsOutput{})
	pulumi.RegisterOutputType(BrokerMaintenanceWindowStartTimeOutput{})
	pulumi.RegisterOutputType(BrokerUserOutput{})
	pulumi.RegisterOutputType(GetBrokerConfigurationOutput{})
	pulumi.RegisterOutputType(GetBrokerEncryptionOptionOutput{})
	pulumi.RegisterOutputType(GetBrokerInstanceOutput{})
	pulumi.RegisterOutputType(GetBrokerLdapServerMetadataOutput{})
	pulumi.RegisterOutputType(GetBrokerLogsOutput{})
	pulumi.RegisterOutputType(GetBrokerMaintenanceWindowStartTimeOutput{})
	pulumi.RegisterOutputType(GetBrokerUserOutput{})
	pulumi.RegisterOutputType(GetInstanceTypeOfferingsBrokerInstanceOptionOutput{})
	pulumi.RegisterOutputType(GetInstanceTypeOfferingsBrokerInstanceOptionAvailabilityZoneOutput{})
}
