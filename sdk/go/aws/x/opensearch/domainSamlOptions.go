// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages SAML authentication options for an AWS OpenSearch Domain.
type DomainSamlOptions struct {
	pulumi.CustomResourceState

	// Name of the domain.
	//
	// The following arguments are optional:
	DomainName pulumix.Output[string] `pulumi:"domainName"`
	// SAML authentication options for an AWS OpenSearch Domain.
	SamlOptions pulumix.GPtrOutput[DomainSamlOptionsSamlOptions, DomainSamlOptionsSamlOptionsOutput] `pulumi:"samlOptions"`
}

// NewDomainSamlOptions registers a new resource with the given unique name, arguments, and options.
func NewDomainSamlOptions(ctx *pulumi.Context,
	name string, args *DomainSamlOptionsArgs, opts ...pulumi.ResourceOption) (*DomainSamlOptions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainSamlOptions
	err := ctx.RegisterResource("aws:opensearch/domainSamlOptions:DomainSamlOptions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainSamlOptions gets an existing DomainSamlOptions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainSamlOptions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainSamlOptionsState, opts ...pulumi.ResourceOption) (*DomainSamlOptions, error) {
	var resource DomainSamlOptions
	err := ctx.ReadResource("aws:opensearch/domainSamlOptions:DomainSamlOptions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainSamlOptions resources.
type domainSamlOptionsState struct {
	// Name of the domain.
	//
	// The following arguments are optional:
	DomainName *string `pulumi:"domainName"`
	// SAML authentication options for an AWS OpenSearch Domain.
	SamlOptions *DomainSamlOptionsSamlOptions `pulumi:"samlOptions"`
}

type DomainSamlOptionsState struct {
	// Name of the domain.
	//
	// The following arguments are optional:
	DomainName pulumix.Input[*string]
	// SAML authentication options for an AWS OpenSearch Domain.
	SamlOptions pulumix.Input[*DomainSamlOptionsSamlOptionsArgs]
}

func (DomainSamlOptionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainSamlOptionsState)(nil)).Elem()
}

type domainSamlOptionsArgs struct {
	// Name of the domain.
	//
	// The following arguments are optional:
	DomainName string `pulumi:"domainName"`
	// SAML authentication options for an AWS OpenSearch Domain.
	SamlOptions *DomainSamlOptionsSamlOptions `pulumi:"samlOptions"`
}

// The set of arguments for constructing a DomainSamlOptions resource.
type DomainSamlOptionsArgs struct {
	// Name of the domain.
	//
	// The following arguments are optional:
	DomainName pulumix.Input[string]
	// SAML authentication options for an AWS OpenSearch Domain.
	SamlOptions pulumix.Input[*DomainSamlOptionsSamlOptionsArgs]
}

func (DomainSamlOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainSamlOptionsArgs)(nil)).Elem()
}

type DomainSamlOptionsOutput struct{ *pulumi.OutputState }

func (DomainSamlOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSamlOptions)(nil)).Elem()
}

func (o DomainSamlOptionsOutput) ToDomainSamlOptionsOutput() DomainSamlOptionsOutput {
	return o
}

func (o DomainSamlOptionsOutput) ToDomainSamlOptionsOutputWithContext(ctx context.Context) DomainSamlOptionsOutput {
	return o
}

func (o DomainSamlOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[DomainSamlOptions] {
	return pulumix.Output[DomainSamlOptions]{
		OutputState: o.OutputState,
	}
}

// Name of the domain.
//
// The following arguments are optional:
func (o DomainSamlOptionsOutput) DomainName() pulumix.Output[string] {
	value := pulumix.Apply[DomainSamlOptions](o, func(v DomainSamlOptions) pulumix.Output[string] { return v.DomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// SAML authentication options for an AWS OpenSearch Domain.
func (o DomainSamlOptionsOutput) SamlOptions() pulumix.GPtrOutput[DomainSamlOptionsSamlOptions, DomainSamlOptionsSamlOptionsOutput] {
	value := pulumix.Apply[DomainSamlOptions](o, func(v DomainSamlOptions) pulumix.GPtrOutput[DomainSamlOptionsSamlOptions, DomainSamlOptionsSamlOptionsOutput] {
		return v.SamlOptions
	})
	unwrapped := pulumix.Flatten[*DomainSamlOptionsSamlOptions, pulumix.GPtrOutput[DomainSamlOptionsSamlOptions, DomainSamlOptionsSamlOptionsOutput]](value)
	return pulumix.GPtrOutput[DomainSamlOptionsSamlOptions, DomainSamlOptionsSamlOptionsOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(DomainSamlOptionsOutput{})
}
