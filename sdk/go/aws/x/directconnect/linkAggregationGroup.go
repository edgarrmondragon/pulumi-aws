// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Direct Connect LAG. Connections can be added to the LAG via the `directconnect.Connection` and `directconnect.ConnectionAssociation` resources.
//
// > *NOTE:* When creating a LAG, if no existing connection is specified, Direct Connect will create a connection and this provider will remove this unmanaged connection during resource creation.
type LinkAggregationGroup struct {
	pulumi.CustomResourceState

	// The ARN of the LAG.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The ID of an existing dedicated connection to migrate to the LAG.
	ConnectionId pulumix.Output[*string] `pulumi:"connectionId"`
	// The bandwidth of the individual physical connections bundled by the LAG. Valid values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps and 100Gbps. Case sensitive.
	ConnectionsBandwidth pulumix.Output[string] `pulumi:"connectionsBandwidth"`
	// A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are *not* recoverable.
	ForceDestroy pulumix.Output[*bool] `pulumi:"forceDestroy"`
	// Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).
	HasLogicalRedundancy pulumix.Output[string] `pulumi:"hasLogicalRedundancy"`
	// Indicates whether jumbo frames (9001 MTU) are supported.
	JumboFrameCapable pulumix.Output[bool] `pulumi:"jumboFrameCapable"`
	// The AWS Direct Connect location in which the LAG should be allocated. See [DescribeLocations](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html) for the list of AWS Direct Connect locations. Use `locationCode`.
	Location pulumix.Output[string] `pulumi:"location"`
	// The name of the LAG.
	Name pulumix.Output[string] `pulumi:"name"`
	// The ID of the AWS account that owns the LAG.
	OwnerAccountId pulumix.Output[string] `pulumi:"ownerAccountId"`
	// The name of the service provider associated with the LAG.
	ProviderName pulumix.Output[string] `pulumi:"providerName"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewLinkAggregationGroup registers a new resource with the given unique name, arguments, and options.
func NewLinkAggregationGroup(ctx *pulumi.Context,
	name string, args *LinkAggregationGroupArgs, opts ...pulumi.ResourceOption) (*LinkAggregationGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionsBandwidth == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionsBandwidth'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LinkAggregationGroup
	err := ctx.RegisterResource("aws:directconnect/linkAggregationGroup:LinkAggregationGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkAggregationGroup gets an existing LinkAggregationGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkAggregationGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkAggregationGroupState, opts ...pulumi.ResourceOption) (*LinkAggregationGroup, error) {
	var resource LinkAggregationGroup
	err := ctx.ReadResource("aws:directconnect/linkAggregationGroup:LinkAggregationGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkAggregationGroup resources.
type linkAggregationGroupState struct {
	// The ARN of the LAG.
	Arn *string `pulumi:"arn"`
	// The ID of an existing dedicated connection to migrate to the LAG.
	ConnectionId *string `pulumi:"connectionId"`
	// The bandwidth of the individual physical connections bundled by the LAG. Valid values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps and 100Gbps. Case sensitive.
	ConnectionsBandwidth *string `pulumi:"connectionsBandwidth"`
	// A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are *not* recoverable.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).
	HasLogicalRedundancy *string `pulumi:"hasLogicalRedundancy"`
	// Indicates whether jumbo frames (9001 MTU) are supported.
	JumboFrameCapable *bool `pulumi:"jumboFrameCapable"`
	// The AWS Direct Connect location in which the LAG should be allocated. See [DescribeLocations](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html) for the list of AWS Direct Connect locations. Use `locationCode`.
	Location *string `pulumi:"location"`
	// The name of the LAG.
	Name *string `pulumi:"name"`
	// The ID of the AWS account that owns the LAG.
	OwnerAccountId *string `pulumi:"ownerAccountId"`
	// The name of the service provider associated with the LAG.
	ProviderName *string `pulumi:"providerName"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type LinkAggregationGroupState struct {
	// The ARN of the LAG.
	Arn pulumix.Input[*string]
	// The ID of an existing dedicated connection to migrate to the LAG.
	ConnectionId pulumix.Input[*string]
	// The bandwidth of the individual physical connections bundled by the LAG. Valid values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps and 100Gbps. Case sensitive.
	ConnectionsBandwidth pulumix.Input[*string]
	// A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are *not* recoverable.
	ForceDestroy pulumix.Input[*bool]
	// Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).
	HasLogicalRedundancy pulumix.Input[*string]
	// Indicates whether jumbo frames (9001 MTU) are supported.
	JumboFrameCapable pulumix.Input[*bool]
	// The AWS Direct Connect location in which the LAG should be allocated. See [DescribeLocations](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html) for the list of AWS Direct Connect locations. Use `locationCode`.
	Location pulumix.Input[*string]
	// The name of the LAG.
	Name pulumix.Input[*string]
	// The ID of the AWS account that owns the LAG.
	OwnerAccountId pulumix.Input[*string]
	// The name of the service provider associated with the LAG.
	ProviderName pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (LinkAggregationGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkAggregationGroupState)(nil)).Elem()
}

type linkAggregationGroupArgs struct {
	// The ID of an existing dedicated connection to migrate to the LAG.
	ConnectionId *string `pulumi:"connectionId"`
	// The bandwidth of the individual physical connections bundled by the LAG. Valid values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps and 100Gbps. Case sensitive.
	ConnectionsBandwidth string `pulumi:"connectionsBandwidth"`
	// A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are *not* recoverable.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// The AWS Direct Connect location in which the LAG should be allocated. See [DescribeLocations](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html) for the list of AWS Direct Connect locations. Use `locationCode`.
	Location string `pulumi:"location"`
	// The name of the LAG.
	Name *string `pulumi:"name"`
	// The name of the service provider associated with the LAG.
	ProviderName *string `pulumi:"providerName"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LinkAggregationGroup resource.
type LinkAggregationGroupArgs struct {
	// The ID of an existing dedicated connection to migrate to the LAG.
	ConnectionId pulumix.Input[*string]
	// The bandwidth of the individual physical connections bundled by the LAG. Valid values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps and 100Gbps. Case sensitive.
	ConnectionsBandwidth pulumix.Input[string]
	// A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are *not* recoverable.
	ForceDestroy pulumix.Input[*bool]
	// The AWS Direct Connect location in which the LAG should be allocated. See [DescribeLocations](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html) for the list of AWS Direct Connect locations. Use `locationCode`.
	Location pulumix.Input[string]
	// The name of the LAG.
	Name pulumix.Input[*string]
	// The name of the service provider associated with the LAG.
	ProviderName pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (LinkAggregationGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkAggregationGroupArgs)(nil)).Elem()
}

type LinkAggregationGroupOutput struct{ *pulumi.OutputState }

func (LinkAggregationGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkAggregationGroup)(nil)).Elem()
}

func (o LinkAggregationGroupOutput) ToLinkAggregationGroupOutput() LinkAggregationGroupOutput {
	return o
}

func (o LinkAggregationGroupOutput) ToLinkAggregationGroupOutputWithContext(ctx context.Context) LinkAggregationGroupOutput {
	return o
}

func (o LinkAggregationGroupOutput) ToOutput(ctx context.Context) pulumix.Output[LinkAggregationGroup] {
	return pulumix.Output[LinkAggregationGroup]{
		OutputState: o.OutputState,
	}
}

// The ARN of the LAG.
func (o LinkAggregationGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[LinkAggregationGroup](o, func(v LinkAggregationGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of an existing dedicated connection to migrate to the LAG.
func (o LinkAggregationGroupOutput) ConnectionId() pulumix.Output[*string] {
	value := pulumix.Apply[LinkAggregationGroup](o, func(v LinkAggregationGroup) pulumix.Output[*string] { return v.ConnectionId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The bandwidth of the individual physical connections bundled by the LAG. Valid values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps and 100Gbps. Case sensitive.
func (o LinkAggregationGroupOutput) ConnectionsBandwidth() pulumix.Output[string] {
	value := pulumix.Apply[LinkAggregationGroup](o, func(v LinkAggregationGroup) pulumix.Output[string] { return v.ConnectionsBandwidth })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are *not* recoverable.
func (o LinkAggregationGroupOutput) ForceDestroy() pulumix.Output[*bool] {
	value := pulumix.Apply[LinkAggregationGroup](o, func(v LinkAggregationGroup) pulumix.Output[*bool] { return v.ForceDestroy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).
func (o LinkAggregationGroupOutput) HasLogicalRedundancy() pulumix.Output[string] {
	value := pulumix.Apply[LinkAggregationGroup](o, func(v LinkAggregationGroup) pulumix.Output[string] { return v.HasLogicalRedundancy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether jumbo frames (9001 MTU) are supported.
func (o LinkAggregationGroupOutput) JumboFrameCapable() pulumix.Output[bool] {
	value := pulumix.Apply[LinkAggregationGroup](o, func(v LinkAggregationGroup) pulumix.Output[bool] { return v.JumboFrameCapable })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The AWS Direct Connect location in which the LAG should be allocated. See [DescribeLocations](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html) for the list of AWS Direct Connect locations. Use `locationCode`.
func (o LinkAggregationGroupOutput) Location() pulumix.Output[string] {
	value := pulumix.Apply[LinkAggregationGroup](o, func(v LinkAggregationGroup) pulumix.Output[string] { return v.Location })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the LAG.
func (o LinkAggregationGroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[LinkAggregationGroup](o, func(v LinkAggregationGroup) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the AWS account that owns the LAG.
func (o LinkAggregationGroupOutput) OwnerAccountId() pulumix.Output[string] {
	value := pulumix.Apply[LinkAggregationGroup](o, func(v LinkAggregationGroup) pulumix.Output[string] { return v.OwnerAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the service provider associated with the LAG.
func (o LinkAggregationGroupOutput) ProviderName() pulumix.Output[string] {
	value := pulumix.Apply[LinkAggregationGroup](o, func(v LinkAggregationGroup) pulumix.Output[string] { return v.ProviderName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LinkAggregationGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[LinkAggregationGroup](o, func(v LinkAggregationGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o LinkAggregationGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[LinkAggregationGroup](o, func(v LinkAggregationGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(LinkAggregationGroupOutput{})
}
