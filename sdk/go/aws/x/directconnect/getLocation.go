// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a specific AWS Direct Connect location in the current AWS Region.
// These are the locations that can be specified when configuring `directconnect.Connection` or `directconnect.LinkAggregationGroup` resources.
//
// > **Note:** This data source is different from the `directconnect.getLocations` data source which retrieves information about all the AWS Direct Connect locations in the current AWS Region.
func GetLocation(ctx *pulumi.Context, args *GetLocationArgs, opts ...pulumi.InvokeOption) (*GetLocationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLocationResult
	err := ctx.Invoke("aws:directconnect/getLocation:getLocation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLocation.
type GetLocationArgs struct {
	// Code for the location to retrieve.
	LocationCode string `pulumi:"locationCode"`
}

// A collection of values returned by getLocation.
type GetLocationResult struct {
	// The available MAC Security (MACsec) port speeds for the location.
	AvailableMacsecPortSpeeds []string `pulumi:"availableMacsecPortSpeeds"`
	// The available port speeds for the location.
	AvailablePortSpeeds []string `pulumi:"availablePortSpeeds"`
	// Names of the service providers for the location.
	AvailableProviders []string `pulumi:"availableProviders"`
	// The provider-assigned unique ID for this managed resource.
	Id           string `pulumi:"id"`
	LocationCode string `pulumi:"locationCode"`
	// Name of the location. This includes the name of the colocation partner and the physical site of the building.
	LocationName string `pulumi:"locationName"`
}

func GetLocationOutput(ctx *pulumi.Context, args GetLocationOutputArgs, opts ...pulumi.InvokeOption) GetLocationResultOutput {
	outputResult := pulumix.ApplyErr[*GetLocationArgs](args.ToOutput(), func(plainArgs *GetLocationArgs) (*GetLocationResult, error) {
		return GetLocation(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetLocationResultOutput, *GetLocationResult](outputResult)
}

// A collection of arguments for invoking getLocation.
type GetLocationOutputArgs struct {
	// Code for the location to retrieve.
	LocationCode pulumix.Input[string] `pulumi:"locationCode"`
}

func (args GetLocationOutputArgs) ToOutput() pulumix.Output[*GetLocationArgs] {
	allArgs := pulumix.All(
		args.LocationCode.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetLocationArgs {
		return &GetLocationArgs{
			LocationCode: resolvedArgs[0].(string),
		}
	})
}

type GetLocationResultOutput struct{ *pulumi.OutputState }

func (GetLocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLocationResult)(nil)).Elem()
}

func (o GetLocationResultOutput) ToOutput(context.Context) pulumix.Output[*GetLocationResult] {
	return pulumix.Output[*GetLocationResult]{
		OutputState: o.OutputState,
	}
}

func (o GetLocationResultOutput) AvailableMacsecPortSpeeds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetLocationResult](o, func(v *GetLocationResult) []string { return v.AvailableMacsecPortSpeeds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetLocationResultOutput) AvailablePortSpeeds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetLocationResult](o, func(v *GetLocationResult) []string { return v.AvailablePortSpeeds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetLocationResultOutput) AvailableProviders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetLocationResult](o, func(v *GetLocationResult) []string { return v.AvailableProviders })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetLocationResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetLocationResult](o, func(v *GetLocationResult) string { return v.Id })
}

func (o GetLocationResultOutput) LocationCode() pulumix.Output[string] {
	return pulumix.Apply[*GetLocationResult](o, func(v *GetLocationResult) string { return v.LocationCode })
}

func (o GetLocationResultOutput) LocationName() pulumix.Output[string] {
	return pulumix.Apply[*GetLocationResult](o, func(v *GetLocationResult) string { return v.LocationName })
}
