// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an API Gateway Request Validator.
type RequestValidator struct {
	pulumi.CustomResourceState

	// Name of the request validator
	Name pulumix.Output[string] `pulumi:"name"`
	// ID of the associated Rest API
	RestApi pulumix.Output[string] `pulumi:"restApi"`
	// Boolean whether to validate request body. Defaults to `false`.
	ValidateRequestBody pulumix.Output[*bool] `pulumi:"validateRequestBody"`
	// Boolean whether to validate request parameters. Defaults to `false`.
	ValidateRequestParameters pulumix.Output[*bool] `pulumi:"validateRequestParameters"`
}

// NewRequestValidator registers a new resource with the given unique name, arguments, and options.
func NewRequestValidator(ctx *pulumi.Context,
	name string, args *RequestValidatorArgs, opts ...pulumi.ResourceOption) (*RequestValidator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RestApi == nil {
		return nil, errors.New("invalid value for required argument 'RestApi'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RequestValidator
	err := ctx.RegisterResource("aws:apigateway/requestValidator:RequestValidator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRequestValidator gets an existing RequestValidator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRequestValidator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RequestValidatorState, opts ...pulumi.ResourceOption) (*RequestValidator, error) {
	var resource RequestValidator
	err := ctx.ReadResource("aws:apigateway/requestValidator:RequestValidator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RequestValidator resources.
type requestValidatorState struct {
	// Name of the request validator
	Name *string `pulumi:"name"`
	// ID of the associated Rest API
	RestApi interface{} `pulumi:"restApi"`
	// Boolean whether to validate request body. Defaults to `false`.
	ValidateRequestBody *bool `pulumi:"validateRequestBody"`
	// Boolean whether to validate request parameters. Defaults to `false`.
	ValidateRequestParameters *bool `pulumi:"validateRequestParameters"`
}

type RequestValidatorState struct {
	// Name of the request validator
	Name pulumix.Input[*string]
	// ID of the associated Rest API
	RestApi pulumix.Input[*any]
	// Boolean whether to validate request body. Defaults to `false`.
	ValidateRequestBody pulumix.Input[*bool]
	// Boolean whether to validate request parameters. Defaults to `false`.
	ValidateRequestParameters pulumix.Input[*bool]
}

func (RequestValidatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*requestValidatorState)(nil)).Elem()
}

type requestValidatorArgs struct {
	// Name of the request validator
	Name *string `pulumi:"name"`
	// ID of the associated Rest API
	RestApi interface{} `pulumi:"restApi"`
	// Boolean whether to validate request body. Defaults to `false`.
	ValidateRequestBody *bool `pulumi:"validateRequestBody"`
	// Boolean whether to validate request parameters. Defaults to `false`.
	ValidateRequestParameters *bool `pulumi:"validateRequestParameters"`
}

// The set of arguments for constructing a RequestValidator resource.
type RequestValidatorArgs struct {
	// Name of the request validator
	Name pulumix.Input[*string]
	// ID of the associated Rest API
	RestApi pulumix.Input[any]
	// Boolean whether to validate request body. Defaults to `false`.
	ValidateRequestBody pulumix.Input[*bool]
	// Boolean whether to validate request parameters. Defaults to `false`.
	ValidateRequestParameters pulumix.Input[*bool]
}

func (RequestValidatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*requestValidatorArgs)(nil)).Elem()
}

type RequestValidatorOutput struct{ *pulumi.OutputState }

func (RequestValidatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestValidator)(nil)).Elem()
}

func (o RequestValidatorOutput) ToRequestValidatorOutput() RequestValidatorOutput {
	return o
}

func (o RequestValidatorOutput) ToRequestValidatorOutputWithContext(ctx context.Context) RequestValidatorOutput {
	return o
}

func (o RequestValidatorOutput) ToOutput(ctx context.Context) pulumix.Output[RequestValidator] {
	return pulumix.Output[RequestValidator]{
		OutputState: o.OutputState,
	}
}

// Name of the request validator
func (o RequestValidatorOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[RequestValidator](o, func(v RequestValidator) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the associated Rest API
func (o RequestValidatorOutput) RestApi() pulumix.Output[string] {
	value := pulumix.Apply[RequestValidator](o, func(v RequestValidator) pulumix.Output[string] { return v.RestApi })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Boolean whether to validate request body. Defaults to `false`.
func (o RequestValidatorOutput) ValidateRequestBody() pulumix.Output[*bool] {
	value := pulumix.Apply[RequestValidator](o, func(v RequestValidator) pulumix.Output[*bool] { return v.ValidateRequestBody })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Boolean whether to validate request parameters. Defaults to `false`.
func (o RequestValidatorOutput) ValidateRequestParameters() pulumix.Output[*bool] {
	value := pulumix.Apply[RequestValidator](o, func(v RequestValidator) pulumix.Output[*bool] { return v.ValidateRequestParameters })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(RequestValidatorOutput{})
}
