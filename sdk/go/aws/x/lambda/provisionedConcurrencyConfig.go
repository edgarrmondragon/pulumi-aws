// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Lambda Provisioned Concurrency Configuration.
//
// > **NOTE:** Setting `skipDestroy` to `true` means that the AWS Provider will _not_ destroy a provisioned concurrency configuration, even when running `pulumi destroy`. The configuration is thus an intentional dangling resource that is _not_ managed by Pulumi and may incur extra expense in your AWS account.
type ProvisionedConcurrencyConfig struct {
	pulumi.CustomResourceState

	// Name or Amazon Resource Name (ARN) of the Lambda Function.
	FunctionName pulumix.Output[string] `pulumi:"functionName"`
	// Amount of capacity to allocate. Must be greater than or equal to `1`.
	ProvisionedConcurrentExecutions pulumix.Output[int] `pulumi:"provisionedConcurrentExecutions"`
	// Lambda Function version or Lambda Alias name.
	//
	// The following arguments are optional:
	Qualifier pulumix.Output[string] `pulumi:"qualifier"`
	// Whether to retain the provisoned concurrency configuration upon destruction. Defaults to `false`. If set to `true`, the resource in simply removed from state instead.
	SkipDestroy pulumix.Output[*bool] `pulumi:"skipDestroy"`
}

// NewProvisionedConcurrencyConfig registers a new resource with the given unique name, arguments, and options.
func NewProvisionedConcurrencyConfig(ctx *pulumi.Context,
	name string, args *ProvisionedConcurrencyConfigArgs, opts ...pulumi.ResourceOption) (*ProvisionedConcurrencyConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	if args.ProvisionedConcurrentExecutions == nil {
		return nil, errors.New("invalid value for required argument 'ProvisionedConcurrentExecutions'")
	}
	if args.Qualifier == nil {
		return nil, errors.New("invalid value for required argument 'Qualifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProvisionedConcurrencyConfig
	err := ctx.RegisterResource("aws:lambda/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProvisionedConcurrencyConfig gets an existing ProvisionedConcurrencyConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProvisionedConcurrencyConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProvisionedConcurrencyConfigState, opts ...pulumi.ResourceOption) (*ProvisionedConcurrencyConfig, error) {
	var resource ProvisionedConcurrencyConfig
	err := ctx.ReadResource("aws:lambda/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProvisionedConcurrencyConfig resources.
type provisionedConcurrencyConfigState struct {
	// Name or Amazon Resource Name (ARN) of the Lambda Function.
	FunctionName *string `pulumi:"functionName"`
	// Amount of capacity to allocate. Must be greater than or equal to `1`.
	ProvisionedConcurrentExecutions *int `pulumi:"provisionedConcurrentExecutions"`
	// Lambda Function version or Lambda Alias name.
	//
	// The following arguments are optional:
	Qualifier *string `pulumi:"qualifier"`
	// Whether to retain the provisoned concurrency configuration upon destruction. Defaults to `false`. If set to `true`, the resource in simply removed from state instead.
	SkipDestroy *bool `pulumi:"skipDestroy"`
}

type ProvisionedConcurrencyConfigState struct {
	// Name or Amazon Resource Name (ARN) of the Lambda Function.
	FunctionName pulumix.Input[*string]
	// Amount of capacity to allocate. Must be greater than or equal to `1`.
	ProvisionedConcurrentExecutions pulumix.Input[*int]
	// Lambda Function version or Lambda Alias name.
	//
	// The following arguments are optional:
	Qualifier pulumix.Input[*string]
	// Whether to retain the provisoned concurrency configuration upon destruction. Defaults to `false`. If set to `true`, the resource in simply removed from state instead.
	SkipDestroy pulumix.Input[*bool]
}

func (ProvisionedConcurrencyConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*provisionedConcurrencyConfigState)(nil)).Elem()
}

type provisionedConcurrencyConfigArgs struct {
	// Name or Amazon Resource Name (ARN) of the Lambda Function.
	FunctionName string `pulumi:"functionName"`
	// Amount of capacity to allocate. Must be greater than or equal to `1`.
	ProvisionedConcurrentExecutions int `pulumi:"provisionedConcurrentExecutions"`
	// Lambda Function version or Lambda Alias name.
	//
	// The following arguments are optional:
	Qualifier string `pulumi:"qualifier"`
	// Whether to retain the provisoned concurrency configuration upon destruction. Defaults to `false`. If set to `true`, the resource in simply removed from state instead.
	SkipDestroy *bool `pulumi:"skipDestroy"`
}

// The set of arguments for constructing a ProvisionedConcurrencyConfig resource.
type ProvisionedConcurrencyConfigArgs struct {
	// Name or Amazon Resource Name (ARN) of the Lambda Function.
	FunctionName pulumix.Input[string]
	// Amount of capacity to allocate. Must be greater than or equal to `1`.
	ProvisionedConcurrentExecutions pulumix.Input[int]
	// Lambda Function version or Lambda Alias name.
	//
	// The following arguments are optional:
	Qualifier pulumix.Input[string]
	// Whether to retain the provisoned concurrency configuration upon destruction. Defaults to `false`. If set to `true`, the resource in simply removed from state instead.
	SkipDestroy pulumix.Input[*bool]
}

func (ProvisionedConcurrencyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*provisionedConcurrencyConfigArgs)(nil)).Elem()
}

type ProvisionedConcurrencyConfigOutput struct{ *pulumi.OutputState }

func (ProvisionedConcurrencyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedConcurrencyConfig)(nil)).Elem()
}

func (o ProvisionedConcurrencyConfigOutput) ToProvisionedConcurrencyConfigOutput() ProvisionedConcurrencyConfigOutput {
	return o
}

func (o ProvisionedConcurrencyConfigOutput) ToProvisionedConcurrencyConfigOutputWithContext(ctx context.Context) ProvisionedConcurrencyConfigOutput {
	return o
}

func (o ProvisionedConcurrencyConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ProvisionedConcurrencyConfig] {
	return pulumix.Output[ProvisionedConcurrencyConfig]{
		OutputState: o.OutputState,
	}
}

// Name or Amazon Resource Name (ARN) of the Lambda Function.
func (o ProvisionedConcurrencyConfigOutput) FunctionName() pulumix.Output[string] {
	value := pulumix.Apply[ProvisionedConcurrencyConfig](o, func(v ProvisionedConcurrencyConfig) pulumix.Output[string] { return v.FunctionName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amount of capacity to allocate. Must be greater than or equal to `1`.
func (o ProvisionedConcurrencyConfigOutput) ProvisionedConcurrentExecutions() pulumix.Output[int] {
	value := pulumix.Apply[ProvisionedConcurrencyConfig](o, func(v ProvisionedConcurrencyConfig) pulumix.Output[int] { return v.ProvisionedConcurrentExecutions })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Lambda Function version or Lambda Alias name.
//
// The following arguments are optional:
func (o ProvisionedConcurrencyConfigOutput) Qualifier() pulumix.Output[string] {
	value := pulumix.Apply[ProvisionedConcurrencyConfig](o, func(v ProvisionedConcurrencyConfig) pulumix.Output[string] { return v.Qualifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to retain the provisoned concurrency configuration upon destruction. Defaults to `false`. If set to `true`, the resource in simply removed from state instead.
func (o ProvisionedConcurrencyConfigOutput) SkipDestroy() pulumix.Output[*bool] {
	value := pulumix.Apply[ProvisionedConcurrencyConfig](o, func(v ProvisionedConcurrencyConfig) pulumix.Output[*bool] { return v.SkipDestroy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(ProvisionedConcurrencyConfigOutput{})
}
