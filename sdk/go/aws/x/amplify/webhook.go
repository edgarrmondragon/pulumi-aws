// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplify

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Amplify Webhook resource.
type Webhook struct {
	pulumi.CustomResourceState

	// Unique ID for an Amplify app.
	AppId pulumix.Output[string] `pulumi:"appId"`
	// ARN for the webhook.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Name for a branch that is part of the Amplify app.
	BranchName pulumix.Output[string] `pulumi:"branchName"`
	// Description for a webhook.
	Description pulumix.Output[*string] `pulumi:"description"`
	// URL of the webhook.
	Url pulumix.Output[string] `pulumi:"url"`
}

// NewWebhook registers a new resource with the given unique name, arguments, and options.
func NewWebhook(ctx *pulumi.Context,
	name string, args *WebhookArgs, opts ...pulumi.ResourceOption) (*Webhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.BranchName == nil {
		return nil, errors.New("invalid value for required argument 'BranchName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Webhook
	err := ctx.RegisterResource("aws:amplify/webhook:Webhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebhook gets an existing Webhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebhookState, opts ...pulumi.ResourceOption) (*Webhook, error) {
	var resource Webhook
	err := ctx.ReadResource("aws:amplify/webhook:Webhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Webhook resources.
type webhookState struct {
	// Unique ID for an Amplify app.
	AppId *string `pulumi:"appId"`
	// ARN for the webhook.
	Arn *string `pulumi:"arn"`
	// Name for a branch that is part of the Amplify app.
	BranchName *string `pulumi:"branchName"`
	// Description for a webhook.
	Description *string `pulumi:"description"`
	// URL of the webhook.
	Url *string `pulumi:"url"`
}

type WebhookState struct {
	// Unique ID for an Amplify app.
	AppId pulumix.Input[*string]
	// ARN for the webhook.
	Arn pulumix.Input[*string]
	// Name for a branch that is part of the Amplify app.
	BranchName pulumix.Input[*string]
	// Description for a webhook.
	Description pulumix.Input[*string]
	// URL of the webhook.
	Url pulumix.Input[*string]
}

func (WebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookState)(nil)).Elem()
}

type webhookArgs struct {
	// Unique ID for an Amplify app.
	AppId string `pulumi:"appId"`
	// Name for a branch that is part of the Amplify app.
	BranchName string `pulumi:"branchName"`
	// Description for a webhook.
	Description *string `pulumi:"description"`
}

// The set of arguments for constructing a Webhook resource.
type WebhookArgs struct {
	// Unique ID for an Amplify app.
	AppId pulumix.Input[string]
	// Name for a branch that is part of the Amplify app.
	BranchName pulumix.Input[string]
	// Description for a webhook.
	Description pulumix.Input[*string]
}

func (WebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookArgs)(nil)).Elem()
}

type WebhookOutput struct{ *pulumi.OutputState }

func (WebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Webhook)(nil)).Elem()
}

func (o WebhookOutput) ToWebhookOutput() WebhookOutput {
	return o
}

func (o WebhookOutput) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return o
}

func (o WebhookOutput) ToOutput(ctx context.Context) pulumix.Output[Webhook] {
	return pulumix.Output[Webhook]{
		OutputState: o.OutputState,
	}
}

// Unique ID for an Amplify app.
func (o WebhookOutput) AppId() pulumix.Output[string] {
	value := pulumix.Apply[Webhook](o, func(v Webhook) pulumix.Output[string] { return v.AppId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN for the webhook.
func (o WebhookOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Webhook](o, func(v Webhook) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name for a branch that is part of the Amplify app.
func (o WebhookOutput) BranchName() pulumix.Output[string] {
	value := pulumix.Apply[Webhook](o, func(v Webhook) pulumix.Output[string] { return v.BranchName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description for a webhook.
func (o WebhookOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Webhook](o, func(v Webhook) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// URL of the webhook.
func (o WebhookOutput) Url() pulumix.Output[string] {
	value := pulumix.Apply[Webhook](o, func(v Webhook) pulumix.Output[string] { return v.Url })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(WebhookOutput{})
}
