// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `route53.ResolverQueryLogConfig` provides details about a specific Route53 Resolver Query Logging Configuration.
func GetQueryLogConfig(ctx *pulumi.Context, args *GetQueryLogConfigArgs, opts ...pulumi.InvokeOption) (*GetQueryLogConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetQueryLogConfigResult
	err := ctx.Invoke("aws:route53/getQueryLogConfig:getQueryLogConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQueryLogConfig.
type GetQueryLogConfigArgs struct {
	// One or more name/value pairs to use as filters. There are
	// several valid keys, for a full reference, check out
	// [Route53resolver Filter value in the AWS API reference][1].
	//
	// In addition to all arguments above, the following attributes are exported:
	Filters []GetQueryLogConfigFilter `pulumi:"filters"`
	// The name of the query logging configuration.
	Name *string `pulumi:"name"`
	// ID of the Route53 Resolver Query Logging Configuration.
	ResolverQueryLogConfigId *string `pulumi:"resolverQueryLogConfigId"`
	// Map of tags to assign to the service.
	//
	// [1]: https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_Filter.html
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getQueryLogConfig.
type GetQueryLogConfigResult struct {
	Arn            string                    `pulumi:"arn"`
	DestinationArn string                    `pulumi:"destinationArn"`
	Filters        []GetQueryLogConfigFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                       string            `pulumi:"id"`
	Name                     *string           `pulumi:"name"`
	OwnerId                  string            `pulumi:"ownerId"`
	ResolverQueryLogConfigId *string           `pulumi:"resolverQueryLogConfigId"`
	ShareStatus              string            `pulumi:"shareStatus"`
	Tags                     map[string]string `pulumi:"tags"`
}

func GetQueryLogConfigOutput(ctx *pulumi.Context, args GetQueryLogConfigOutputArgs, opts ...pulumi.InvokeOption) GetQueryLogConfigResultOutput {
	outputResult := pulumix.ApplyErr[*GetQueryLogConfigArgs](args.ToOutput(), func(plainArgs *GetQueryLogConfigArgs) (*GetQueryLogConfigResult, error) {
		return GetQueryLogConfig(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetQueryLogConfigResultOutput, *GetQueryLogConfigResult](outputResult)
}

// A collection of arguments for invoking getQueryLogConfig.
type GetQueryLogConfigOutputArgs struct {
	// One or more name/value pairs to use as filters. There are
	// several valid keys, for a full reference, check out
	// [Route53resolver Filter value in the AWS API reference][1].
	//
	// In addition to all arguments above, the following attributes are exported:
	Filters pulumix.Input[[]*GetQueryLogConfigFilterArgs] `pulumi:"filters"`
	// The name of the query logging configuration.
	Name pulumix.Input[*string] `pulumi:"name"`
	// ID of the Route53 Resolver Query Logging Configuration.
	ResolverQueryLogConfigId pulumix.Input[*string] `pulumi:"resolverQueryLogConfigId"`
	// Map of tags to assign to the service.
	//
	// [1]: https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_Filter.html
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetQueryLogConfigOutputArgs) ToOutput() pulumix.Output[*GetQueryLogConfigArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.ResolverQueryLogConfigId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetQueryLogConfigArgs {
		return &GetQueryLogConfigArgs{
			Filters:                  resolvedArgs[0].([]GetQueryLogConfigFilter),
			Name:                     resolvedArgs[1].(*string),
			ResolverQueryLogConfigId: resolvedArgs[2].(*string),
			Tags:                     resolvedArgs[3].(map[string]string),
		}
	})
}

type GetQueryLogConfigResultOutput struct{ *pulumi.OutputState }

func (GetQueryLogConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueryLogConfigResult)(nil)).Elem()
}

func (o GetQueryLogConfigResultOutput) ToOutput(context.Context) pulumix.Output[*GetQueryLogConfigResult] {
	return pulumix.Output[*GetQueryLogConfigResult]{
		OutputState: o.OutputState,
	}
}

func (o GetQueryLogConfigResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*GetQueryLogConfigResult](o, func(v *GetQueryLogConfigResult) string { return v.Arn })
}

func (o GetQueryLogConfigResultOutput) DestinationArn() pulumix.Output[string] {
	return pulumix.Apply[*GetQueryLogConfigResult](o, func(v *GetQueryLogConfigResult) string { return v.DestinationArn })
}

func (o GetQueryLogConfigResultOutput) Filters() pulumix.GArrayOutput[GetQueryLogConfigFilter, GetQueryLogConfigFilterOutput] {
	value := pulumix.Apply[*GetQueryLogConfigResult](o, func(v *GetQueryLogConfigResult) []GetQueryLogConfigFilter { return v.Filters })
	return pulumix.GArrayOutput[GetQueryLogConfigFilter, GetQueryLogConfigFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetQueryLogConfigResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetQueryLogConfigResult](o, func(v *GetQueryLogConfigResult) string { return v.Id })
}

func (o GetQueryLogConfigResultOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[*GetQueryLogConfigResult](o, func(v *GetQueryLogConfigResult) *string { return v.Name })
}

func (o GetQueryLogConfigResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*GetQueryLogConfigResult](o, func(v *GetQueryLogConfigResult) string { return v.OwnerId })
}

func (o GetQueryLogConfigResultOutput) ResolverQueryLogConfigId() pulumix.Output[*string] {
	return pulumix.Apply[*GetQueryLogConfigResult](o, func(v *GetQueryLogConfigResult) *string { return v.ResolverQueryLogConfigId })
}

func (o GetQueryLogConfigResultOutput) ShareStatus() pulumix.Output[string] {
	return pulumix.Apply[*GetQueryLogConfigResult](o, func(v *GetQueryLogConfigResult) string { return v.ShareStatus })
}

func (o GetQueryLogConfigResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetQueryLogConfigResult](o, func(v *GetQueryLogConfigResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
