// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package athena

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Athena data catalog.
//
// More information about Athena and Athena data catalogs can be found in the [Athena User Guide](https://docs.aws.amazon.com/athena/latest/ug/what-is.html).
//
// > **Tip:** for a more detailed explanation on the usage of `parameters`, see the [DataCatalog API documentation](https://docs.aws.amazon.com/athena/latest/APIReference/API_DataCatalog.html)
type DataCatalog struct {
	pulumi.CustomResourceState

	// ARN of the data catalog.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Description of the data catalog.
	Description pulumix.Output[string] `pulumi:"description"`
	// Name of the data catalog. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
	Name pulumix.Output[string] `pulumi:"name"`
	// Key value pairs that specifies the Lambda function or functions to use for the data catalog. The mapping used depends on the catalog type.
	Parameters pulumix.MapOutput[string] `pulumi:"parameters"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Type of data catalog: `LAMBDA` for a federated catalog, `GLUE` for AWS Glue Catalog, or `HIVE` for an external hive metastore.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewDataCatalog registers a new resource with the given unique name, arguments, and options.
func NewDataCatalog(ctx *pulumi.Context,
	name string, args *DataCatalogArgs, opts ...pulumi.ResourceOption) (*DataCatalog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataCatalog
	err := ctx.RegisterResource("aws:athena/dataCatalog:DataCatalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataCatalog gets an existing DataCatalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataCatalogState, opts ...pulumi.ResourceOption) (*DataCatalog, error) {
	var resource DataCatalog
	err := ctx.ReadResource("aws:athena/dataCatalog:DataCatalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataCatalog resources.
type dataCatalogState struct {
	// ARN of the data catalog.
	Arn *string `pulumi:"arn"`
	// Description of the data catalog.
	Description *string `pulumi:"description"`
	// Name of the data catalog. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
	Name *string `pulumi:"name"`
	// Key value pairs that specifies the Lambda function or functions to use for the data catalog. The mapping used depends on the catalog type.
	Parameters map[string]string `pulumi:"parameters"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Type of data catalog: `LAMBDA` for a federated catalog, `GLUE` for AWS Glue Catalog, or `HIVE` for an external hive metastore.
	Type *string `pulumi:"type"`
}

type DataCatalogState struct {
	// ARN of the data catalog.
	Arn pulumix.Input[*string]
	// Description of the data catalog.
	Description pulumix.Input[*string]
	// Name of the data catalog. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
	Name pulumix.Input[*string]
	// Key value pairs that specifies the Lambda function or functions to use for the data catalog. The mapping used depends on the catalog type.
	Parameters pulumix.Input[map[string]string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Type of data catalog: `LAMBDA` for a federated catalog, `GLUE` for AWS Glue Catalog, or `HIVE` for an external hive metastore.
	Type pulumix.Input[*string]
}

func (DataCatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogState)(nil)).Elem()
}

type dataCatalogArgs struct {
	// Description of the data catalog.
	Description string `pulumi:"description"`
	// Name of the data catalog. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
	Name *string `pulumi:"name"`
	// Key value pairs that specifies the Lambda function or functions to use for the data catalog. The mapping used depends on the catalog type.
	Parameters map[string]string `pulumi:"parameters"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Type of data catalog: `LAMBDA` for a federated catalog, `GLUE` for AWS Glue Catalog, or `HIVE` for an external hive metastore.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DataCatalog resource.
type DataCatalogArgs struct {
	// Description of the data catalog.
	Description pulumix.Input[string]
	// Name of the data catalog. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
	Name pulumix.Input[*string]
	// Key value pairs that specifies the Lambda function or functions to use for the data catalog. The mapping used depends on the catalog type.
	Parameters pulumix.Input[map[string]string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Type of data catalog: `LAMBDA` for a federated catalog, `GLUE` for AWS Glue Catalog, or `HIVE` for an external hive metastore.
	Type pulumix.Input[string]
}

func (DataCatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogArgs)(nil)).Elem()
}

type DataCatalogOutput struct{ *pulumi.OutputState }

func (DataCatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalog)(nil)).Elem()
}

func (o DataCatalogOutput) ToDataCatalogOutput() DataCatalogOutput {
	return o
}

func (o DataCatalogOutput) ToDataCatalogOutputWithContext(ctx context.Context) DataCatalogOutput {
	return o
}

func (o DataCatalogOutput) ToOutput(ctx context.Context) pulumix.Output[DataCatalog] {
	return pulumix.Output[DataCatalog]{
		OutputState: o.OutputState,
	}
}

// ARN of the data catalog.
func (o DataCatalogOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DataCatalog](o, func(v DataCatalog) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the data catalog.
func (o DataCatalogOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[DataCatalog](o, func(v DataCatalog) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the data catalog. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
func (o DataCatalogOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[DataCatalog](o, func(v DataCatalog) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key value pairs that specifies the Lambda function or functions to use for the data catalog. The mapping used depends on the catalog type.
func (o DataCatalogOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[DataCatalog](o, func(v DataCatalog) pulumix.MapOutput[string] { return v.Parameters })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DataCatalogOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[DataCatalog](o, func(v DataCatalog) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o DataCatalogOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[DataCatalog](o, func(v DataCatalog) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Type of data catalog: `LAMBDA` for a federated catalog, `GLUE` for AWS Glue Catalog, or `HIVE` for an external hive metastore.
func (o DataCatalogOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[DataCatalog](o, func(v DataCatalog) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DataCatalogOutput{})
}
