// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package globalaccelerator

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AcceleratorAttributes struct {
	// Indicates whether flow logs are enabled. Defaults to `false`. Valid values: `true`, `false`.
	FlowLogsEnabled *bool `pulumi:"flowLogsEnabled"`
	// The name of the Amazon S3 bucket for the flow logs. Required if `flowLogsEnabled` is `true`.
	FlowLogsS3Bucket *string `pulumi:"flowLogsS3Bucket"`
	// The prefix for the location in the Amazon S3 bucket for the flow logs. Required if `flowLogsEnabled` is `true`.
	FlowLogsS3Prefix *string `pulumi:"flowLogsS3Prefix"`
}

type AcceleratorAttributesArgs struct {
	// Indicates whether flow logs are enabled. Defaults to `false`. Valid values: `true`, `false`.
	FlowLogsEnabled pulumix.Input[*bool] `pulumi:"flowLogsEnabled"`
	// The name of the Amazon S3 bucket for the flow logs. Required if `flowLogsEnabled` is `true`.
	FlowLogsS3Bucket pulumix.Input[*string] `pulumi:"flowLogsS3Bucket"`
	// The prefix for the location in the Amazon S3 bucket for the flow logs. Required if `flowLogsEnabled` is `true`.
	FlowLogsS3Prefix pulumix.Input[*string] `pulumi:"flowLogsS3Prefix"`
}

func (AcceleratorAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorAttributes)(nil)).Elem()
}

func (i AcceleratorAttributesArgs) ToAcceleratorAttributesOutput() AcceleratorAttributesOutput {
	return i.ToAcceleratorAttributesOutputWithContext(context.Background())
}

func (i AcceleratorAttributesArgs) ToAcceleratorAttributesOutputWithContext(ctx context.Context) AcceleratorAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorAttributesOutput)
}

func (i *AcceleratorAttributesArgs) ToOutput(ctx context.Context) pulumix.Output[*AcceleratorAttributesArgs] {
	return pulumix.Val(i)
}

type AcceleratorAttributesOutput struct{ *pulumi.OutputState }

func (AcceleratorAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorAttributes)(nil)).Elem()
}

func (o AcceleratorAttributesOutput) ToAcceleratorAttributesOutput() AcceleratorAttributesOutput {
	return o
}

func (o AcceleratorAttributesOutput) ToAcceleratorAttributesOutputWithContext(ctx context.Context) AcceleratorAttributesOutput {
	return o
}

func (o AcceleratorAttributesOutput) ToOutput(ctx context.Context) pulumix.Output[AcceleratorAttributes] {
	return pulumix.Output[AcceleratorAttributes]{
		OutputState: o.OutputState,
	}
}

// Indicates whether flow logs are enabled. Defaults to `false`. Valid values: `true`, `false`.
func (o AcceleratorAttributesOutput) FlowLogsEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[AcceleratorAttributes](o, func(v AcceleratorAttributes) *bool { return v.FlowLogsEnabled })
}

// The name of the Amazon S3 bucket for the flow logs. Required if `flowLogsEnabled` is `true`.
func (o AcceleratorAttributesOutput) FlowLogsS3Bucket() pulumix.Output[*string] {
	return pulumix.Apply[AcceleratorAttributes](o, func(v AcceleratorAttributes) *string { return v.FlowLogsS3Bucket })
}

// The prefix for the location in the Amazon S3 bucket for the flow logs. Required if `flowLogsEnabled` is `true`.
func (o AcceleratorAttributesOutput) FlowLogsS3Prefix() pulumix.Output[*string] {
	return pulumix.Apply[AcceleratorAttributes](o, func(v AcceleratorAttributes) *string { return v.FlowLogsS3Prefix })
}

type AcceleratorIpSet struct {
	// The IP addresses to use for BYOIP accelerators. If not specified, the service assigns IP addresses. Valid values: 1 or 2 IPv4 addresses.
	IpAddresses []string `pulumi:"ipAddresses"`
	// The type of IP addresses included in this IP set.
	IpFamily *string `pulumi:"ipFamily"`
}

type AcceleratorIpSetArgs struct {
	// The IP addresses to use for BYOIP accelerators. If not specified, the service assigns IP addresses. Valid values: 1 or 2 IPv4 addresses.
	IpAddresses pulumix.Input[[]string] `pulumi:"ipAddresses"`
	// The type of IP addresses included in this IP set.
	IpFamily pulumix.Input[*string] `pulumi:"ipFamily"`
}

func (AcceleratorIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorIpSet)(nil)).Elem()
}

func (i AcceleratorIpSetArgs) ToAcceleratorIpSetOutput() AcceleratorIpSetOutput {
	return i.ToAcceleratorIpSetOutputWithContext(context.Background())
}

func (i AcceleratorIpSetArgs) ToAcceleratorIpSetOutputWithContext(ctx context.Context) AcceleratorIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorIpSetOutput)
}

func (i *AcceleratorIpSetArgs) ToOutput(ctx context.Context) pulumix.Output[*AcceleratorIpSetArgs] {
	return pulumix.Val(i)
}

type AcceleratorIpSetOutput struct{ *pulumi.OutputState }

func (AcceleratorIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorIpSet)(nil)).Elem()
}

func (o AcceleratorIpSetOutput) ToAcceleratorIpSetOutput() AcceleratorIpSetOutput {
	return o
}

func (o AcceleratorIpSetOutput) ToAcceleratorIpSetOutputWithContext(ctx context.Context) AcceleratorIpSetOutput {
	return o
}

func (o AcceleratorIpSetOutput) ToOutput(ctx context.Context) pulumix.Output[AcceleratorIpSet] {
	return pulumix.Output[AcceleratorIpSet]{
		OutputState: o.OutputState,
	}
}

// The IP addresses to use for BYOIP accelerators. If not specified, the service assigns IP addresses. Valid values: 1 or 2 IPv4 addresses.
func (o AcceleratorIpSetOutput) IpAddresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AcceleratorIpSet](o, func(v AcceleratorIpSet) []string { return v.IpAddresses })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The type of IP addresses included in this IP set.
func (o AcceleratorIpSetOutput) IpFamily() pulumix.Output[*string] {
	return pulumix.Apply[AcceleratorIpSet](o, func(v AcceleratorIpSet) *string { return v.IpFamily })
}

type CustomRoutingAcceleratorAttributes struct {
	// Indicates whether flow logs are enabled. Defaults to `false`. Valid values: `true`, `false`.
	FlowLogsEnabled *bool `pulumi:"flowLogsEnabled"`
	// The name of the Amazon S3 bucket for the flow logs. Required if `flowLogsEnabled` is `true`.
	FlowLogsS3Bucket *string `pulumi:"flowLogsS3Bucket"`
	// The prefix for the location in the Amazon S3 bucket for the flow logs. Required if `flowLogsEnabled` is `true`.
	FlowLogsS3Prefix *string `pulumi:"flowLogsS3Prefix"`
}

type CustomRoutingAcceleratorAttributesArgs struct {
	// Indicates whether flow logs are enabled. Defaults to `false`. Valid values: `true`, `false`.
	FlowLogsEnabled pulumix.Input[*bool] `pulumi:"flowLogsEnabled"`
	// The name of the Amazon S3 bucket for the flow logs. Required if `flowLogsEnabled` is `true`.
	FlowLogsS3Bucket pulumix.Input[*string] `pulumi:"flowLogsS3Bucket"`
	// The prefix for the location in the Amazon S3 bucket for the flow logs. Required if `flowLogsEnabled` is `true`.
	FlowLogsS3Prefix pulumix.Input[*string] `pulumi:"flowLogsS3Prefix"`
}

func (CustomRoutingAcceleratorAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRoutingAcceleratorAttributes)(nil)).Elem()
}

func (i CustomRoutingAcceleratorAttributesArgs) ToCustomRoutingAcceleratorAttributesOutput() CustomRoutingAcceleratorAttributesOutput {
	return i.ToCustomRoutingAcceleratorAttributesOutputWithContext(context.Background())
}

func (i CustomRoutingAcceleratorAttributesArgs) ToCustomRoutingAcceleratorAttributesOutputWithContext(ctx context.Context) CustomRoutingAcceleratorAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomRoutingAcceleratorAttributesOutput)
}

func (i *CustomRoutingAcceleratorAttributesArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomRoutingAcceleratorAttributesArgs] {
	return pulumix.Val(i)
}

type CustomRoutingAcceleratorAttributesOutput struct{ *pulumi.OutputState }

func (CustomRoutingAcceleratorAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRoutingAcceleratorAttributes)(nil)).Elem()
}

func (o CustomRoutingAcceleratorAttributesOutput) ToCustomRoutingAcceleratorAttributesOutput() CustomRoutingAcceleratorAttributesOutput {
	return o
}

func (o CustomRoutingAcceleratorAttributesOutput) ToCustomRoutingAcceleratorAttributesOutputWithContext(ctx context.Context) CustomRoutingAcceleratorAttributesOutput {
	return o
}

func (o CustomRoutingAcceleratorAttributesOutput) ToOutput(ctx context.Context) pulumix.Output[CustomRoutingAcceleratorAttributes] {
	return pulumix.Output[CustomRoutingAcceleratorAttributes]{
		OutputState: o.OutputState,
	}
}

// Indicates whether flow logs are enabled. Defaults to `false`. Valid values: `true`, `false`.
func (o CustomRoutingAcceleratorAttributesOutput) FlowLogsEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[CustomRoutingAcceleratorAttributes](o, func(v CustomRoutingAcceleratorAttributes) *bool { return v.FlowLogsEnabled })
}

// The name of the Amazon S3 bucket for the flow logs. Required if `flowLogsEnabled` is `true`.
func (o CustomRoutingAcceleratorAttributesOutput) FlowLogsS3Bucket() pulumix.Output[*string] {
	return pulumix.Apply[CustomRoutingAcceleratorAttributes](o, func(v CustomRoutingAcceleratorAttributes) *string { return v.FlowLogsS3Bucket })
}

// The prefix for the location in the Amazon S3 bucket for the flow logs. Required if `flowLogsEnabled` is `true`.
func (o CustomRoutingAcceleratorAttributesOutput) FlowLogsS3Prefix() pulumix.Output[*string] {
	return pulumix.Apply[CustomRoutingAcceleratorAttributes](o, func(v CustomRoutingAcceleratorAttributes) *string { return v.FlowLogsS3Prefix })
}

type CustomRoutingAcceleratorIpSet struct {
	// The IP addresses to use for BYOIP accelerators. If not specified, the service assigns IP addresses. Valid values: 1 or 2 IPv4 addresses.
	IpAddresses []string `pulumi:"ipAddresses"`
	// The type of IP addresses included in this IP set.
	IpFamily *string `pulumi:"ipFamily"`
}

type CustomRoutingAcceleratorIpSetArgs struct {
	// The IP addresses to use for BYOIP accelerators. If not specified, the service assigns IP addresses. Valid values: 1 or 2 IPv4 addresses.
	IpAddresses pulumix.Input[[]string] `pulumi:"ipAddresses"`
	// The type of IP addresses included in this IP set.
	IpFamily pulumix.Input[*string] `pulumi:"ipFamily"`
}

func (CustomRoutingAcceleratorIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRoutingAcceleratorIpSet)(nil)).Elem()
}

func (i CustomRoutingAcceleratorIpSetArgs) ToCustomRoutingAcceleratorIpSetOutput() CustomRoutingAcceleratorIpSetOutput {
	return i.ToCustomRoutingAcceleratorIpSetOutputWithContext(context.Background())
}

func (i CustomRoutingAcceleratorIpSetArgs) ToCustomRoutingAcceleratorIpSetOutputWithContext(ctx context.Context) CustomRoutingAcceleratorIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomRoutingAcceleratorIpSetOutput)
}

func (i *CustomRoutingAcceleratorIpSetArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomRoutingAcceleratorIpSetArgs] {
	return pulumix.Val(i)
}

type CustomRoutingAcceleratorIpSetOutput struct{ *pulumi.OutputState }

func (CustomRoutingAcceleratorIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRoutingAcceleratorIpSet)(nil)).Elem()
}

func (o CustomRoutingAcceleratorIpSetOutput) ToCustomRoutingAcceleratorIpSetOutput() CustomRoutingAcceleratorIpSetOutput {
	return o
}

func (o CustomRoutingAcceleratorIpSetOutput) ToCustomRoutingAcceleratorIpSetOutputWithContext(ctx context.Context) CustomRoutingAcceleratorIpSetOutput {
	return o
}

func (o CustomRoutingAcceleratorIpSetOutput) ToOutput(ctx context.Context) pulumix.Output[CustomRoutingAcceleratorIpSet] {
	return pulumix.Output[CustomRoutingAcceleratorIpSet]{
		OutputState: o.OutputState,
	}
}

// The IP addresses to use for BYOIP accelerators. If not specified, the service assigns IP addresses. Valid values: 1 or 2 IPv4 addresses.
func (o CustomRoutingAcceleratorIpSetOutput) IpAddresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CustomRoutingAcceleratorIpSet](o, func(v CustomRoutingAcceleratorIpSet) []string { return v.IpAddresses })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The type of IP addresses included in this IP set.
func (o CustomRoutingAcceleratorIpSetOutput) IpFamily() pulumix.Output[*string] {
	return pulumix.Apply[CustomRoutingAcceleratorIpSet](o, func(v CustomRoutingAcceleratorIpSet) *string { return v.IpFamily })
}

type CustomRoutingEndpointGroupDestinationConfiguration struct {
	// The first port, inclusive, in the range of ports for the endpoint group that is associated with a custom routing accelerator.
	FromPort int `pulumi:"fromPort"`
	// The protocol for the endpoint group that is associated with a custom routing accelerator. The protocol can be either `"TCP"` or `"UDP"`.
	Protocols []string `pulumi:"protocols"`
	// The last port, inclusive, in the range of ports for the endpoint group that is associated with a custom routing accelerator.
	ToPort int `pulumi:"toPort"`
}

type CustomRoutingEndpointGroupDestinationConfigurationArgs struct {
	// The first port, inclusive, in the range of ports for the endpoint group that is associated with a custom routing accelerator.
	FromPort pulumix.Input[int] `pulumi:"fromPort"`
	// The protocol for the endpoint group that is associated with a custom routing accelerator. The protocol can be either `"TCP"` or `"UDP"`.
	Protocols pulumix.Input[[]string] `pulumi:"protocols"`
	// The last port, inclusive, in the range of ports for the endpoint group that is associated with a custom routing accelerator.
	ToPort pulumix.Input[int] `pulumi:"toPort"`
}

func (CustomRoutingEndpointGroupDestinationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRoutingEndpointGroupDestinationConfiguration)(nil)).Elem()
}

func (i CustomRoutingEndpointGroupDestinationConfigurationArgs) ToCustomRoutingEndpointGroupDestinationConfigurationOutput() CustomRoutingEndpointGroupDestinationConfigurationOutput {
	return i.ToCustomRoutingEndpointGroupDestinationConfigurationOutputWithContext(context.Background())
}

func (i CustomRoutingEndpointGroupDestinationConfigurationArgs) ToCustomRoutingEndpointGroupDestinationConfigurationOutputWithContext(ctx context.Context) CustomRoutingEndpointGroupDestinationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomRoutingEndpointGroupDestinationConfigurationOutput)
}

func (i *CustomRoutingEndpointGroupDestinationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomRoutingEndpointGroupDestinationConfigurationArgs] {
	return pulumix.Val(i)
}

type CustomRoutingEndpointGroupDestinationConfigurationOutput struct{ *pulumi.OutputState }

func (CustomRoutingEndpointGroupDestinationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRoutingEndpointGroupDestinationConfiguration)(nil)).Elem()
}

func (o CustomRoutingEndpointGroupDestinationConfigurationOutput) ToCustomRoutingEndpointGroupDestinationConfigurationOutput() CustomRoutingEndpointGroupDestinationConfigurationOutput {
	return o
}

func (o CustomRoutingEndpointGroupDestinationConfigurationOutput) ToCustomRoutingEndpointGroupDestinationConfigurationOutputWithContext(ctx context.Context) CustomRoutingEndpointGroupDestinationConfigurationOutput {
	return o
}

func (o CustomRoutingEndpointGroupDestinationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[CustomRoutingEndpointGroupDestinationConfiguration] {
	return pulumix.Output[CustomRoutingEndpointGroupDestinationConfiguration]{
		OutputState: o.OutputState,
	}
}

// The first port, inclusive, in the range of ports for the endpoint group that is associated with a custom routing accelerator.
func (o CustomRoutingEndpointGroupDestinationConfigurationOutput) FromPort() pulumix.Output[int] {
	return pulumix.Apply[CustomRoutingEndpointGroupDestinationConfiguration](o, func(v CustomRoutingEndpointGroupDestinationConfiguration) int { return v.FromPort })
}

// The protocol for the endpoint group that is associated with a custom routing accelerator. The protocol can be either `"TCP"` or `"UDP"`.
func (o CustomRoutingEndpointGroupDestinationConfigurationOutput) Protocols() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CustomRoutingEndpointGroupDestinationConfiguration](o, func(v CustomRoutingEndpointGroupDestinationConfiguration) []string { return v.Protocols })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The last port, inclusive, in the range of ports for the endpoint group that is associated with a custom routing accelerator.
func (o CustomRoutingEndpointGroupDestinationConfigurationOutput) ToPort() pulumix.Output[int] {
	return pulumix.Apply[CustomRoutingEndpointGroupDestinationConfiguration](o, func(v CustomRoutingEndpointGroupDestinationConfiguration) int { return v.ToPort })
}

type CustomRoutingEndpointGroupEndpointConfiguration struct {
	// An ID for the endpoint. For custom routing accelerators, this is the virtual private cloud (VPC) subnet ID.
	EndpointId *string `pulumi:"endpointId"`
}

type CustomRoutingEndpointGroupEndpointConfigurationArgs struct {
	// An ID for the endpoint. For custom routing accelerators, this is the virtual private cloud (VPC) subnet ID.
	EndpointId pulumix.Input[*string] `pulumi:"endpointId"`
}

func (CustomRoutingEndpointGroupEndpointConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRoutingEndpointGroupEndpointConfiguration)(nil)).Elem()
}

func (i CustomRoutingEndpointGroupEndpointConfigurationArgs) ToCustomRoutingEndpointGroupEndpointConfigurationOutput() CustomRoutingEndpointGroupEndpointConfigurationOutput {
	return i.ToCustomRoutingEndpointGroupEndpointConfigurationOutputWithContext(context.Background())
}

func (i CustomRoutingEndpointGroupEndpointConfigurationArgs) ToCustomRoutingEndpointGroupEndpointConfigurationOutputWithContext(ctx context.Context) CustomRoutingEndpointGroupEndpointConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomRoutingEndpointGroupEndpointConfigurationOutput)
}

func (i *CustomRoutingEndpointGroupEndpointConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomRoutingEndpointGroupEndpointConfigurationArgs] {
	return pulumix.Val(i)
}

type CustomRoutingEndpointGroupEndpointConfigurationOutput struct{ *pulumi.OutputState }

func (CustomRoutingEndpointGroupEndpointConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRoutingEndpointGroupEndpointConfiguration)(nil)).Elem()
}

func (o CustomRoutingEndpointGroupEndpointConfigurationOutput) ToCustomRoutingEndpointGroupEndpointConfigurationOutput() CustomRoutingEndpointGroupEndpointConfigurationOutput {
	return o
}

func (o CustomRoutingEndpointGroupEndpointConfigurationOutput) ToCustomRoutingEndpointGroupEndpointConfigurationOutputWithContext(ctx context.Context) CustomRoutingEndpointGroupEndpointConfigurationOutput {
	return o
}

func (o CustomRoutingEndpointGroupEndpointConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[CustomRoutingEndpointGroupEndpointConfiguration] {
	return pulumix.Output[CustomRoutingEndpointGroupEndpointConfiguration]{
		OutputState: o.OutputState,
	}
}

// An ID for the endpoint. For custom routing accelerators, this is the virtual private cloud (VPC) subnet ID.
func (o CustomRoutingEndpointGroupEndpointConfigurationOutput) EndpointId() pulumix.Output[*string] {
	return pulumix.Apply[CustomRoutingEndpointGroupEndpointConfiguration](o, func(v CustomRoutingEndpointGroupEndpointConfiguration) *string { return v.EndpointId })
}

type CustomRoutingListenerPortRange struct {
	// The first port in the range of ports, inclusive.
	FromPort *int `pulumi:"fromPort"`
	// The last port in the range of ports, inclusive.
	ToPort *int `pulumi:"toPort"`
}

type CustomRoutingListenerPortRangeArgs struct {
	// The first port in the range of ports, inclusive.
	FromPort pulumix.Input[*int] `pulumi:"fromPort"`
	// The last port in the range of ports, inclusive.
	ToPort pulumix.Input[*int] `pulumi:"toPort"`
}

func (CustomRoutingListenerPortRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRoutingListenerPortRange)(nil)).Elem()
}

func (i CustomRoutingListenerPortRangeArgs) ToCustomRoutingListenerPortRangeOutput() CustomRoutingListenerPortRangeOutput {
	return i.ToCustomRoutingListenerPortRangeOutputWithContext(context.Background())
}

func (i CustomRoutingListenerPortRangeArgs) ToCustomRoutingListenerPortRangeOutputWithContext(ctx context.Context) CustomRoutingListenerPortRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomRoutingListenerPortRangeOutput)
}

func (i *CustomRoutingListenerPortRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomRoutingListenerPortRangeArgs] {
	return pulumix.Val(i)
}

type CustomRoutingListenerPortRangeOutput struct{ *pulumi.OutputState }

func (CustomRoutingListenerPortRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRoutingListenerPortRange)(nil)).Elem()
}

func (o CustomRoutingListenerPortRangeOutput) ToCustomRoutingListenerPortRangeOutput() CustomRoutingListenerPortRangeOutput {
	return o
}

func (o CustomRoutingListenerPortRangeOutput) ToCustomRoutingListenerPortRangeOutputWithContext(ctx context.Context) CustomRoutingListenerPortRangeOutput {
	return o
}

func (o CustomRoutingListenerPortRangeOutput) ToOutput(ctx context.Context) pulumix.Output[CustomRoutingListenerPortRange] {
	return pulumix.Output[CustomRoutingListenerPortRange]{
		OutputState: o.OutputState,
	}
}

// The first port in the range of ports, inclusive.
func (o CustomRoutingListenerPortRangeOutput) FromPort() pulumix.Output[*int] {
	return pulumix.Apply[CustomRoutingListenerPortRange](o, func(v CustomRoutingListenerPortRange) *int { return v.FromPort })
}

// The last port in the range of ports, inclusive.
func (o CustomRoutingListenerPortRangeOutput) ToPort() pulumix.Output[*int] {
	return pulumix.Apply[CustomRoutingListenerPortRange](o, func(v CustomRoutingListenerPortRange) *int { return v.ToPort })
}

type EndpointGroupEndpointConfiguration struct {
	// Indicates whether client IP address preservation is enabled for an Application Load Balancer endpoint. See the [AWS documentation](https://docs.aws.amazon.com/global-accelerator/latest/dg/preserve-client-ip-address.html) for more details. The default value is `false`.
	// **Note:** When client IP address preservation is enabled, the Global Accelerator service creates an EC2 Security Group in the VPC named `GlobalAccelerator` that must be deleted (potentially outside of the provider) before the VPC will successfully delete. If this EC2 Security Group is not deleted, the provider will retry the VPC deletion for a few minutes before reporting a `DependencyViolation` error. This cannot be resolved by re-running the provider.
	ClientIpPreservationEnabled *bool `pulumi:"clientIpPreservationEnabled"`
	// An ID for the endpoint. If the endpoint is a Network Load Balancer or Application Load Balancer, this is the Amazon Resource Name (ARN) of the resource. If the endpoint is an Elastic IP address, this is the Elastic IP address allocation ID.
	EndpointId *string `pulumi:"endpointId"`
	// The weight associated with the endpoint. When you add weights to endpoints, you configure AWS Global Accelerator to route traffic based on proportions that you specify.
	Weight *int `pulumi:"weight"`
}

type EndpointGroupEndpointConfigurationArgs struct {
	// Indicates whether client IP address preservation is enabled for an Application Load Balancer endpoint. See the [AWS documentation](https://docs.aws.amazon.com/global-accelerator/latest/dg/preserve-client-ip-address.html) for more details. The default value is `false`.
	// **Note:** When client IP address preservation is enabled, the Global Accelerator service creates an EC2 Security Group in the VPC named `GlobalAccelerator` that must be deleted (potentially outside of the provider) before the VPC will successfully delete. If this EC2 Security Group is not deleted, the provider will retry the VPC deletion for a few minutes before reporting a `DependencyViolation` error. This cannot be resolved by re-running the provider.
	ClientIpPreservationEnabled pulumix.Input[*bool] `pulumi:"clientIpPreservationEnabled"`
	// An ID for the endpoint. If the endpoint is a Network Load Balancer or Application Load Balancer, this is the Amazon Resource Name (ARN) of the resource. If the endpoint is an Elastic IP address, this is the Elastic IP address allocation ID.
	EndpointId pulumix.Input[*string] `pulumi:"endpointId"`
	// The weight associated with the endpoint. When you add weights to endpoints, you configure AWS Global Accelerator to route traffic based on proportions that you specify.
	Weight pulumix.Input[*int] `pulumi:"weight"`
}

func (EndpointGroupEndpointConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointGroupEndpointConfiguration)(nil)).Elem()
}

func (i EndpointGroupEndpointConfigurationArgs) ToEndpointGroupEndpointConfigurationOutput() EndpointGroupEndpointConfigurationOutput {
	return i.ToEndpointGroupEndpointConfigurationOutputWithContext(context.Background())
}

func (i EndpointGroupEndpointConfigurationArgs) ToEndpointGroupEndpointConfigurationOutputWithContext(ctx context.Context) EndpointGroupEndpointConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointGroupEndpointConfigurationOutput)
}

func (i *EndpointGroupEndpointConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointGroupEndpointConfigurationArgs] {
	return pulumix.Val(i)
}

type EndpointGroupEndpointConfigurationOutput struct{ *pulumi.OutputState }

func (EndpointGroupEndpointConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointGroupEndpointConfiguration)(nil)).Elem()
}

func (o EndpointGroupEndpointConfigurationOutput) ToEndpointGroupEndpointConfigurationOutput() EndpointGroupEndpointConfigurationOutput {
	return o
}

func (o EndpointGroupEndpointConfigurationOutput) ToEndpointGroupEndpointConfigurationOutputWithContext(ctx context.Context) EndpointGroupEndpointConfigurationOutput {
	return o
}

func (o EndpointGroupEndpointConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointGroupEndpointConfiguration] {
	return pulumix.Output[EndpointGroupEndpointConfiguration]{
		OutputState: o.OutputState,
	}
}

// Indicates whether client IP address preservation is enabled for an Application Load Balancer endpoint. See the [AWS documentation](https://docs.aws.amazon.com/global-accelerator/latest/dg/preserve-client-ip-address.html) for more details. The default value is `false`.
// **Note:** When client IP address preservation is enabled, the Global Accelerator service creates an EC2 Security Group in the VPC named `GlobalAccelerator` that must be deleted (potentially outside of the provider) before the VPC will successfully delete. If this EC2 Security Group is not deleted, the provider will retry the VPC deletion for a few minutes before reporting a `DependencyViolation` error. This cannot be resolved by re-running the provider.
func (o EndpointGroupEndpointConfigurationOutput) ClientIpPreservationEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointGroupEndpointConfiguration](o, func(v EndpointGroupEndpointConfiguration) *bool { return v.ClientIpPreservationEnabled })
}

// An ID for the endpoint. If the endpoint is a Network Load Balancer or Application Load Balancer, this is the Amazon Resource Name (ARN) of the resource. If the endpoint is an Elastic IP address, this is the Elastic IP address allocation ID.
func (o EndpointGroupEndpointConfigurationOutput) EndpointId() pulumix.Output[*string] {
	return pulumix.Apply[EndpointGroupEndpointConfiguration](o, func(v EndpointGroupEndpointConfiguration) *string { return v.EndpointId })
}

// The weight associated with the endpoint. When you add weights to endpoints, you configure AWS Global Accelerator to route traffic based on proportions that you specify.
func (o EndpointGroupEndpointConfigurationOutput) Weight() pulumix.Output[*int] {
	return pulumix.Apply[EndpointGroupEndpointConfiguration](o, func(v EndpointGroupEndpointConfiguration) *int { return v.Weight })
}

type EndpointGroupPortOverride struct {
	// The endpoint port that you want a listener port to be mapped to. This is the port on the endpoint, such as the Application Load Balancer or Amazon EC2 instance.
	EndpointPort int `pulumi:"endpointPort"`
	// The listener port that you want to map to a specific endpoint port. This is the port that user traffic arrives to the Global Accelerator on.
	ListenerPort int `pulumi:"listenerPort"`
}

type EndpointGroupPortOverrideArgs struct {
	// The endpoint port that you want a listener port to be mapped to. This is the port on the endpoint, such as the Application Load Balancer or Amazon EC2 instance.
	EndpointPort pulumix.Input[int] `pulumi:"endpointPort"`
	// The listener port that you want to map to a specific endpoint port. This is the port that user traffic arrives to the Global Accelerator on.
	ListenerPort pulumix.Input[int] `pulumi:"listenerPort"`
}

func (EndpointGroupPortOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointGroupPortOverride)(nil)).Elem()
}

func (i EndpointGroupPortOverrideArgs) ToEndpointGroupPortOverrideOutput() EndpointGroupPortOverrideOutput {
	return i.ToEndpointGroupPortOverrideOutputWithContext(context.Background())
}

func (i EndpointGroupPortOverrideArgs) ToEndpointGroupPortOverrideOutputWithContext(ctx context.Context) EndpointGroupPortOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointGroupPortOverrideOutput)
}

func (i *EndpointGroupPortOverrideArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointGroupPortOverrideArgs] {
	return pulumix.Val(i)
}

type EndpointGroupPortOverrideOutput struct{ *pulumi.OutputState }

func (EndpointGroupPortOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointGroupPortOverride)(nil)).Elem()
}

func (o EndpointGroupPortOverrideOutput) ToEndpointGroupPortOverrideOutput() EndpointGroupPortOverrideOutput {
	return o
}

func (o EndpointGroupPortOverrideOutput) ToEndpointGroupPortOverrideOutputWithContext(ctx context.Context) EndpointGroupPortOverrideOutput {
	return o
}

func (o EndpointGroupPortOverrideOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointGroupPortOverride] {
	return pulumix.Output[EndpointGroupPortOverride]{
		OutputState: o.OutputState,
	}
}

// The endpoint port that you want a listener port to be mapped to. This is the port on the endpoint, such as the Application Load Balancer or Amazon EC2 instance.
func (o EndpointGroupPortOverrideOutput) EndpointPort() pulumix.Output[int] {
	return pulumix.Apply[EndpointGroupPortOverride](o, func(v EndpointGroupPortOverride) int { return v.EndpointPort })
}

// The listener port that you want to map to a specific endpoint port. This is the port that user traffic arrives to the Global Accelerator on.
func (o EndpointGroupPortOverrideOutput) ListenerPort() pulumix.Output[int] {
	return pulumix.Apply[EndpointGroupPortOverride](o, func(v EndpointGroupPortOverride) int { return v.ListenerPort })
}

type ListenerPortRange struct {
	// The first port in the range of ports, inclusive.
	FromPort *int `pulumi:"fromPort"`
	// The last port in the range of ports, inclusive.
	ToPort *int `pulumi:"toPort"`
}

type ListenerPortRangeArgs struct {
	// The first port in the range of ports, inclusive.
	FromPort pulumix.Input[*int] `pulumi:"fromPort"`
	// The last port in the range of ports, inclusive.
	ToPort pulumix.Input[*int] `pulumi:"toPort"`
}

func (ListenerPortRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerPortRange)(nil)).Elem()
}

func (i ListenerPortRangeArgs) ToListenerPortRangeOutput() ListenerPortRangeOutput {
	return i.ToListenerPortRangeOutputWithContext(context.Background())
}

func (i ListenerPortRangeArgs) ToListenerPortRangeOutputWithContext(ctx context.Context) ListenerPortRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerPortRangeOutput)
}

func (i *ListenerPortRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerPortRangeArgs] {
	return pulumix.Val(i)
}

type ListenerPortRangeOutput struct{ *pulumi.OutputState }

func (ListenerPortRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerPortRange)(nil)).Elem()
}

func (o ListenerPortRangeOutput) ToListenerPortRangeOutput() ListenerPortRangeOutput {
	return o
}

func (o ListenerPortRangeOutput) ToListenerPortRangeOutputWithContext(ctx context.Context) ListenerPortRangeOutput {
	return o
}

func (o ListenerPortRangeOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerPortRange] {
	return pulumix.Output[ListenerPortRange]{
		OutputState: o.OutputState,
	}
}

// The first port in the range of ports, inclusive.
func (o ListenerPortRangeOutput) FromPort() pulumix.Output[*int] {
	return pulumix.Apply[ListenerPortRange](o, func(v ListenerPortRange) *int { return v.FromPort })
}

// The last port in the range of ports, inclusive.
func (o ListenerPortRangeOutput) ToPort() pulumix.Output[*int] {
	return pulumix.Apply[ListenerPortRange](o, func(v ListenerPortRange) *int { return v.ToPort })
}

type GetAcceleratorAttribute struct {
	FlowLogsEnabled  bool   `pulumi:"flowLogsEnabled"`
	FlowLogsS3Bucket string `pulumi:"flowLogsS3Bucket"`
	FlowLogsS3Prefix string `pulumi:"flowLogsS3Prefix"`
}

type GetAcceleratorAttributeArgs struct {
	FlowLogsEnabled  pulumix.Input[bool]   `pulumi:"flowLogsEnabled"`
	FlowLogsS3Bucket pulumix.Input[string] `pulumi:"flowLogsS3Bucket"`
	FlowLogsS3Prefix pulumix.Input[string] `pulumi:"flowLogsS3Prefix"`
}

func (GetAcceleratorAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAcceleratorAttribute)(nil)).Elem()
}

func (i GetAcceleratorAttributeArgs) ToGetAcceleratorAttributeOutput() GetAcceleratorAttributeOutput {
	return i.ToGetAcceleratorAttributeOutputWithContext(context.Background())
}

func (i GetAcceleratorAttributeArgs) ToGetAcceleratorAttributeOutputWithContext(ctx context.Context) GetAcceleratorAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAcceleratorAttributeOutput)
}

func (i *GetAcceleratorAttributeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetAcceleratorAttributeArgs] {
	return pulumix.Val(i)
}

type GetAcceleratorAttributeOutput struct{ *pulumi.OutputState }

func (GetAcceleratorAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAcceleratorAttribute)(nil)).Elem()
}

func (o GetAcceleratorAttributeOutput) ToGetAcceleratorAttributeOutput() GetAcceleratorAttributeOutput {
	return o
}

func (o GetAcceleratorAttributeOutput) ToGetAcceleratorAttributeOutputWithContext(ctx context.Context) GetAcceleratorAttributeOutput {
	return o
}

func (o GetAcceleratorAttributeOutput) ToOutput(ctx context.Context) pulumix.Output[GetAcceleratorAttribute] {
	return pulumix.Output[GetAcceleratorAttribute]{
		OutputState: o.OutputState,
	}
}

func (o GetAcceleratorAttributeOutput) FlowLogsEnabled() pulumix.Output[bool] {
	return pulumix.Apply[GetAcceleratorAttribute](o, func(v GetAcceleratorAttribute) bool { return v.FlowLogsEnabled })
}

func (o GetAcceleratorAttributeOutput) FlowLogsS3Bucket() pulumix.Output[string] {
	return pulumix.Apply[GetAcceleratorAttribute](o, func(v GetAcceleratorAttribute) string { return v.FlowLogsS3Bucket })
}

func (o GetAcceleratorAttributeOutput) FlowLogsS3Prefix() pulumix.Output[string] {
	return pulumix.Apply[GetAcceleratorAttribute](o, func(v GetAcceleratorAttribute) string { return v.FlowLogsS3Prefix })
}

type GetAcceleratorIpSet struct {
	IpAddresses []string `pulumi:"ipAddresses"`
	IpFamily    string   `pulumi:"ipFamily"`
}

type GetAcceleratorIpSetArgs struct {
	IpAddresses pulumix.Input[[]string] `pulumi:"ipAddresses"`
	IpFamily    pulumix.Input[string]   `pulumi:"ipFamily"`
}

func (GetAcceleratorIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAcceleratorIpSet)(nil)).Elem()
}

func (i GetAcceleratorIpSetArgs) ToGetAcceleratorIpSetOutput() GetAcceleratorIpSetOutput {
	return i.ToGetAcceleratorIpSetOutputWithContext(context.Background())
}

func (i GetAcceleratorIpSetArgs) ToGetAcceleratorIpSetOutputWithContext(ctx context.Context) GetAcceleratorIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAcceleratorIpSetOutput)
}

func (i *GetAcceleratorIpSetArgs) ToOutput(ctx context.Context) pulumix.Output[*GetAcceleratorIpSetArgs] {
	return pulumix.Val(i)
}

type GetAcceleratorIpSetOutput struct{ *pulumi.OutputState }

func (GetAcceleratorIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAcceleratorIpSet)(nil)).Elem()
}

func (o GetAcceleratorIpSetOutput) ToGetAcceleratorIpSetOutput() GetAcceleratorIpSetOutput {
	return o
}

func (o GetAcceleratorIpSetOutput) ToGetAcceleratorIpSetOutputWithContext(ctx context.Context) GetAcceleratorIpSetOutput {
	return o
}

func (o GetAcceleratorIpSetOutput) ToOutput(ctx context.Context) pulumix.Output[GetAcceleratorIpSet] {
	return pulumix.Output[GetAcceleratorIpSet]{
		OutputState: o.OutputState,
	}
}

func (o GetAcceleratorIpSetOutput) IpAddresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetAcceleratorIpSet](o, func(v GetAcceleratorIpSet) []string { return v.IpAddresses })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetAcceleratorIpSetOutput) IpFamily() pulumix.Output[string] {
	return pulumix.Apply[GetAcceleratorIpSet](o, func(v GetAcceleratorIpSet) string { return v.IpFamily })
}

type GetCustomRoutingAcceleratorAttribute struct {
	FlowLogsEnabled  bool   `pulumi:"flowLogsEnabled"`
	FlowLogsS3Bucket string `pulumi:"flowLogsS3Bucket"`
	FlowLogsS3Prefix string `pulumi:"flowLogsS3Prefix"`
}

type GetCustomRoutingAcceleratorAttributeArgs struct {
	FlowLogsEnabled  pulumix.Input[bool]   `pulumi:"flowLogsEnabled"`
	FlowLogsS3Bucket pulumix.Input[string] `pulumi:"flowLogsS3Bucket"`
	FlowLogsS3Prefix pulumix.Input[string] `pulumi:"flowLogsS3Prefix"`
}

func (GetCustomRoutingAcceleratorAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCustomRoutingAcceleratorAttribute)(nil)).Elem()
}

func (i GetCustomRoutingAcceleratorAttributeArgs) ToGetCustomRoutingAcceleratorAttributeOutput() GetCustomRoutingAcceleratorAttributeOutput {
	return i.ToGetCustomRoutingAcceleratorAttributeOutputWithContext(context.Background())
}

func (i GetCustomRoutingAcceleratorAttributeArgs) ToGetCustomRoutingAcceleratorAttributeOutputWithContext(ctx context.Context) GetCustomRoutingAcceleratorAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCustomRoutingAcceleratorAttributeOutput)
}

func (i *GetCustomRoutingAcceleratorAttributeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCustomRoutingAcceleratorAttributeArgs] {
	return pulumix.Val(i)
}

type GetCustomRoutingAcceleratorAttributeOutput struct{ *pulumi.OutputState }

func (GetCustomRoutingAcceleratorAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCustomRoutingAcceleratorAttribute)(nil)).Elem()
}

func (o GetCustomRoutingAcceleratorAttributeOutput) ToGetCustomRoutingAcceleratorAttributeOutput() GetCustomRoutingAcceleratorAttributeOutput {
	return o
}

func (o GetCustomRoutingAcceleratorAttributeOutput) ToGetCustomRoutingAcceleratorAttributeOutputWithContext(ctx context.Context) GetCustomRoutingAcceleratorAttributeOutput {
	return o
}

func (o GetCustomRoutingAcceleratorAttributeOutput) ToOutput(ctx context.Context) pulumix.Output[GetCustomRoutingAcceleratorAttribute] {
	return pulumix.Output[GetCustomRoutingAcceleratorAttribute]{
		OutputState: o.OutputState,
	}
}

func (o GetCustomRoutingAcceleratorAttributeOutput) FlowLogsEnabled() pulumix.Output[bool] {
	return pulumix.Apply[GetCustomRoutingAcceleratorAttribute](o, func(v GetCustomRoutingAcceleratorAttribute) bool { return v.FlowLogsEnabled })
}

func (o GetCustomRoutingAcceleratorAttributeOutput) FlowLogsS3Bucket() pulumix.Output[string] {
	return pulumix.Apply[GetCustomRoutingAcceleratorAttribute](o, func(v GetCustomRoutingAcceleratorAttribute) string { return v.FlowLogsS3Bucket })
}

func (o GetCustomRoutingAcceleratorAttributeOutput) FlowLogsS3Prefix() pulumix.Output[string] {
	return pulumix.Apply[GetCustomRoutingAcceleratorAttribute](o, func(v GetCustomRoutingAcceleratorAttribute) string { return v.FlowLogsS3Prefix })
}

type GetCustomRoutingAcceleratorIpSet struct {
	IpAddresses []string `pulumi:"ipAddresses"`
	IpFamily    string   `pulumi:"ipFamily"`
}

type GetCustomRoutingAcceleratorIpSetArgs struct {
	IpAddresses pulumix.Input[[]string] `pulumi:"ipAddresses"`
	IpFamily    pulumix.Input[string]   `pulumi:"ipFamily"`
}

func (GetCustomRoutingAcceleratorIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCustomRoutingAcceleratorIpSet)(nil)).Elem()
}

func (i GetCustomRoutingAcceleratorIpSetArgs) ToGetCustomRoutingAcceleratorIpSetOutput() GetCustomRoutingAcceleratorIpSetOutput {
	return i.ToGetCustomRoutingAcceleratorIpSetOutputWithContext(context.Background())
}

func (i GetCustomRoutingAcceleratorIpSetArgs) ToGetCustomRoutingAcceleratorIpSetOutputWithContext(ctx context.Context) GetCustomRoutingAcceleratorIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCustomRoutingAcceleratorIpSetOutput)
}

func (i *GetCustomRoutingAcceleratorIpSetArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCustomRoutingAcceleratorIpSetArgs] {
	return pulumix.Val(i)
}

type GetCustomRoutingAcceleratorIpSetOutput struct{ *pulumi.OutputState }

func (GetCustomRoutingAcceleratorIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCustomRoutingAcceleratorIpSet)(nil)).Elem()
}

func (o GetCustomRoutingAcceleratorIpSetOutput) ToGetCustomRoutingAcceleratorIpSetOutput() GetCustomRoutingAcceleratorIpSetOutput {
	return o
}

func (o GetCustomRoutingAcceleratorIpSetOutput) ToGetCustomRoutingAcceleratorIpSetOutputWithContext(ctx context.Context) GetCustomRoutingAcceleratorIpSetOutput {
	return o
}

func (o GetCustomRoutingAcceleratorIpSetOutput) ToOutput(ctx context.Context) pulumix.Output[GetCustomRoutingAcceleratorIpSet] {
	return pulumix.Output[GetCustomRoutingAcceleratorIpSet]{
		OutputState: o.OutputState,
	}
}

func (o GetCustomRoutingAcceleratorIpSetOutput) IpAddresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCustomRoutingAcceleratorIpSet](o, func(v GetCustomRoutingAcceleratorIpSet) []string { return v.IpAddresses })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetCustomRoutingAcceleratorIpSetOutput) IpFamily() pulumix.Output[string] {
	return pulumix.Apply[GetCustomRoutingAcceleratorIpSet](o, func(v GetCustomRoutingAcceleratorIpSet) string { return v.IpFamily })
}

func init() {
	pulumi.RegisterOutputType(AcceleratorAttributesOutput{})
	pulumi.RegisterOutputType(AcceleratorIpSetOutput{})
	pulumi.RegisterOutputType(CustomRoutingAcceleratorAttributesOutput{})
	pulumi.RegisterOutputType(CustomRoutingAcceleratorIpSetOutput{})
	pulumi.RegisterOutputType(CustomRoutingEndpointGroupDestinationConfigurationOutput{})
	pulumi.RegisterOutputType(CustomRoutingEndpointGroupEndpointConfigurationOutput{})
	pulumi.RegisterOutputType(CustomRoutingListenerPortRangeOutput{})
	pulumi.RegisterOutputType(EndpointGroupEndpointConfigurationOutput{})
	pulumi.RegisterOutputType(EndpointGroupPortOverrideOutput{})
	pulumi.RegisterOutputType(ListenerPortRangeOutput{})
	pulumi.RegisterOutputType(GetAcceleratorAttributeOutput{})
	pulumi.RegisterOutputType(GetAcceleratorIpSetOutput{})
	pulumi.RegisterOutputType(GetCustomRoutingAcceleratorAttributeOutput{})
	pulumi.RegisterOutputType(GetCustomRoutingAcceleratorIpSetOutput{})
}
