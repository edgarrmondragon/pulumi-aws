// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a replica of an existing EFS file system in the same or another region. Creating this resource causes the source EFS file system to be replicated to a new read-only destination EFS file system. Deleting this resource will cause the replication from source to destination to stop and the destination file system will no longer be read only.
//
// > **NOTE:** Deleting this resource does **not** delete the destination file system that was created.
type ReplicationConfiguration struct {
	pulumi.CustomResourceState

	// When the replication configuration was created.
	CreationTime pulumix.Output[string] `pulumi:"creationTime"`
	// A destination configuration block (documented below).
	Destination pulumix.GPtrOutput[ReplicationConfigurationDestination, ReplicationConfigurationDestinationOutput] `pulumi:"destination"`
	// The Amazon Resource Name (ARN) of the original source Amazon EFS file system in the replication configuration.
	OriginalSourceFileSystemArn pulumix.Output[string] `pulumi:"originalSourceFileSystemArn"`
	// The Amazon Resource Name (ARN) of the current source file system in the replication configuration.
	SourceFileSystemArn pulumix.Output[string] `pulumi:"sourceFileSystemArn"`
	// The ID of the file system that is to be replicated.
	SourceFileSystemId pulumix.Output[string] `pulumi:"sourceFileSystemId"`
	// The AWS Region in which the source Amazon EFS file system is located.
	// * `destination[0].file_system_id` - The fs ID of the replica.
	// * `destination[0].status` - The status of the replication.
	SourceFileSystemRegion pulumix.Output[string] `pulumi:"sourceFileSystemRegion"`
}

// NewReplicationConfiguration registers a new resource with the given unique name, arguments, and options.
func NewReplicationConfiguration(ctx *pulumi.Context,
	name string, args *ReplicationConfigurationArgs, opts ...pulumi.ResourceOption) (*ReplicationConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.SourceFileSystemId == nil {
		return nil, errors.New("invalid value for required argument 'SourceFileSystemId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReplicationConfiguration
	err := ctx.RegisterResource("aws:efs/replicationConfiguration:ReplicationConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicationConfiguration gets an existing ReplicationConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicationConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicationConfigurationState, opts ...pulumi.ResourceOption) (*ReplicationConfiguration, error) {
	var resource ReplicationConfiguration
	err := ctx.ReadResource("aws:efs/replicationConfiguration:ReplicationConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplicationConfiguration resources.
type replicationConfigurationState struct {
	// When the replication configuration was created.
	CreationTime *string `pulumi:"creationTime"`
	// A destination configuration block (documented below).
	Destination *ReplicationConfigurationDestination `pulumi:"destination"`
	// The Amazon Resource Name (ARN) of the original source Amazon EFS file system in the replication configuration.
	OriginalSourceFileSystemArn *string `pulumi:"originalSourceFileSystemArn"`
	// The Amazon Resource Name (ARN) of the current source file system in the replication configuration.
	SourceFileSystemArn *string `pulumi:"sourceFileSystemArn"`
	// The ID of the file system that is to be replicated.
	SourceFileSystemId *string `pulumi:"sourceFileSystemId"`
	// The AWS Region in which the source Amazon EFS file system is located.
	// * `destination[0].file_system_id` - The fs ID of the replica.
	// * `destination[0].status` - The status of the replication.
	SourceFileSystemRegion *string `pulumi:"sourceFileSystemRegion"`
}

type ReplicationConfigurationState struct {
	// When the replication configuration was created.
	CreationTime pulumix.Input[*string]
	// A destination configuration block (documented below).
	Destination pulumix.Input[*ReplicationConfigurationDestinationArgs]
	// The Amazon Resource Name (ARN) of the original source Amazon EFS file system in the replication configuration.
	OriginalSourceFileSystemArn pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the current source file system in the replication configuration.
	SourceFileSystemArn pulumix.Input[*string]
	// The ID of the file system that is to be replicated.
	SourceFileSystemId pulumix.Input[*string]
	// The AWS Region in which the source Amazon EFS file system is located.
	// * `destination[0].file_system_id` - The fs ID of the replica.
	// * `destination[0].status` - The status of the replication.
	SourceFileSystemRegion pulumix.Input[*string]
}

func (ReplicationConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationConfigurationState)(nil)).Elem()
}

type replicationConfigurationArgs struct {
	// A destination configuration block (documented below).
	Destination ReplicationConfigurationDestination `pulumi:"destination"`
	// The ID of the file system that is to be replicated.
	SourceFileSystemId string `pulumi:"sourceFileSystemId"`
}

// The set of arguments for constructing a ReplicationConfiguration resource.
type ReplicationConfigurationArgs struct {
	// A destination configuration block (documented below).
	Destination pulumix.Input[*ReplicationConfigurationDestinationArgs]
	// The ID of the file system that is to be replicated.
	SourceFileSystemId pulumix.Input[string]
}

func (ReplicationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationConfigurationArgs)(nil)).Elem()
}

type ReplicationConfigurationOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfiguration)(nil)).Elem()
}

func (o ReplicationConfigurationOutput) ToReplicationConfigurationOutput() ReplicationConfigurationOutput {
	return o
}

func (o ReplicationConfigurationOutput) ToReplicationConfigurationOutputWithContext(ctx context.Context) ReplicationConfigurationOutput {
	return o
}

func (o ReplicationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicationConfiguration] {
	return pulumix.Output[ReplicationConfiguration]{
		OutputState: o.OutputState,
	}
}

// When the replication configuration was created.
func (o ReplicationConfigurationOutput) CreationTime() pulumix.Output[string] {
	value := pulumix.Apply[ReplicationConfiguration](o, func(v ReplicationConfiguration) pulumix.Output[string] { return v.CreationTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A destination configuration block (documented below).
func (o ReplicationConfigurationOutput) Destination() pulumix.GPtrOutput[ReplicationConfigurationDestination, ReplicationConfigurationDestinationOutput] {
	value := pulumix.Apply[ReplicationConfiguration](o, func(v ReplicationConfiguration) pulumix.GPtrOutput[ReplicationConfigurationDestination, ReplicationConfigurationDestinationOutput] {
		return v.Destination
	})
	unwrapped := pulumix.Flatten[*ReplicationConfigurationDestination, pulumix.GPtrOutput[ReplicationConfigurationDestination, ReplicationConfigurationDestinationOutput]](value)
	return pulumix.GPtrOutput[ReplicationConfigurationDestination, ReplicationConfigurationDestinationOutput]{OutputState: unwrapped.OutputState}
}

// The Amazon Resource Name (ARN) of the original source Amazon EFS file system in the replication configuration.
func (o ReplicationConfigurationOutput) OriginalSourceFileSystemArn() pulumix.Output[string] {
	value := pulumix.Apply[ReplicationConfiguration](o, func(v ReplicationConfiguration) pulumix.Output[string] { return v.OriginalSourceFileSystemArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) of the current source file system in the replication configuration.
func (o ReplicationConfigurationOutput) SourceFileSystemArn() pulumix.Output[string] {
	value := pulumix.Apply[ReplicationConfiguration](o, func(v ReplicationConfiguration) pulumix.Output[string] { return v.SourceFileSystemArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the file system that is to be replicated.
func (o ReplicationConfigurationOutput) SourceFileSystemId() pulumix.Output[string] {
	value := pulumix.Apply[ReplicationConfiguration](o, func(v ReplicationConfiguration) pulumix.Output[string] { return v.SourceFileSystemId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The AWS Region in which the source Amazon EFS file system is located.
// * `destination[0].file_system_id` - The fs ID of the replica.
// * `destination[0].status` - The status of the replication.
func (o ReplicationConfigurationOutput) SourceFileSystemRegion() pulumix.Output[string] {
	value := pulumix.Apply[ReplicationConfiguration](o, func(v ReplicationConfiguration) pulumix.Output[string] { return v.SourceFileSystemRegion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ReplicationConfigurationOutput{})
}
