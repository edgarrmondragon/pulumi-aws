// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package neptune

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A Cluster Instance Resource defines attributes that are specific to a single instance in a Neptune Cluster.
//
// You can simply add neptune instances and Neptune manages the replication. You can use the count
// meta-parameter to make multiple instances and join them all to the same Neptune Cluster, or you may specify different Cluster Instance resources with various `instanceClass` sizes.
type ClusterInstance struct {
	pulumi.CustomResourceState

	// The hostname of the instance. See also `endpoint` and `port`.
	Address pulumix.Output[string] `pulumi:"address"`
	// Specifies whether any instance modifications
	// are applied immediately, or during the next maintenance window. Default is`false`.
	ApplyImmediately pulumix.Output[bool] `pulumi:"applyImmediately"`
	// Amazon Resource Name (ARN) of neptune instance
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Indicates that minor engine upgrades will be applied automatically to the instance during the maintenance window. Default is `true`.
	AutoMinorVersionUpgrade pulumix.Output[*bool] `pulumi:"autoMinorVersionUpgrade"`
	// The EC2 Availability Zone that the neptune instance is created in.
	AvailabilityZone pulumix.Output[string] `pulumi:"availabilityZone"`
	// The identifier of the `neptune.Cluster` in which to launch this instance.
	ClusterIdentifier pulumix.Output[string] `pulumi:"clusterIdentifier"`
	// The region-unique, immutable identifier for the neptune instance.
	DbiResourceId pulumix.Output[string] `pulumi:"dbiResourceId"`
	// The connection endpoint in `address:port` format.
	Endpoint pulumix.Output[string] `pulumi:"endpoint"`
	// The name of the database engine to be used for the neptune instance. Defaults to `neptune`. Valid Values: `neptune`.
	Engine pulumix.Output[*string] `pulumi:"engine"`
	// The neptune engine version.
	EngineVersion pulumix.Output[string] `pulumi:"engineVersion"`
	// The identifier for the neptune instance, if omitted, this provider will assign a random, unique identifier.
	Identifier pulumix.Output[string] `pulumi:"identifier"`
	// Creates a unique identifier beginning with the specified prefix. Conflicts with `identifier`.
	IdentifierPrefix pulumix.Output[string] `pulumi:"identifierPrefix"`
	// The instance class to use.
	InstanceClass pulumix.Output[string] `pulumi:"instanceClass"`
	// The ARN for the KMS encryption key if one is set to the neptune cluster.
	KmsKeyArn pulumix.Output[string] `pulumi:"kmsKeyArn"`
	// The name of the neptune parameter group to associate with this instance.
	NeptuneParameterGroupName pulumix.Output[*string] `pulumi:"neptuneParameterGroupName"`
	// A subnet group to associate with this neptune instance. **NOTE:** This must match the `neptuneSubnetGroupName` of the attached `neptune.Cluster`.
	NeptuneSubnetGroupName pulumix.Output[string] `pulumi:"neptuneSubnetGroupName"`
	// The port on which the DB accepts connections. Defaults to `8182`.
	Port pulumix.Output[*int] `pulumi:"port"`
	// The daily time range during which automated backups are created if automated backups are enabled. Eg: "04:00-09:00"
	PreferredBackupWindow pulumix.Output[string] `pulumi:"preferredBackupWindow"`
	// The window to perform maintenance in.
	// Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00".
	PreferredMaintenanceWindow pulumix.Output[string] `pulumi:"preferredMaintenanceWindow"`
	// Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoter to writer.
	PromotionTier pulumix.Output[*int] `pulumi:"promotionTier"`
	// Bool to control if instance is publicly accessible. Default is `false`.
	PubliclyAccessible pulumix.Output[*bool] `pulumi:"publiclyAccessible"`
	// Specifies whether the neptune cluster is encrypted.
	StorageEncrypted pulumix.Output[bool] `pulumi:"storageEncrypted"`
	// A map of tags to assign to the instance. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Boolean indicating if this instance is writable. `False` indicates this instance is a read replica.
	Writer pulumix.Output[bool] `pulumi:"writer"`
}

// NewClusterInstance registers a new resource with the given unique name, arguments, and options.
func NewClusterInstance(ctx *pulumi.Context,
	name string, args *ClusterInstanceArgs, opts ...pulumi.ResourceOption) (*ClusterInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ClusterIdentifier'")
	}
	if args.InstanceClass == nil {
		return nil, errors.New("invalid value for required argument 'InstanceClass'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterInstance
	err := ctx.RegisterResource("aws:neptune/clusterInstance:ClusterInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterInstance gets an existing ClusterInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterInstanceState, opts ...pulumi.ResourceOption) (*ClusterInstance, error) {
	var resource ClusterInstance
	err := ctx.ReadResource("aws:neptune/clusterInstance:ClusterInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterInstance resources.
type clusterInstanceState struct {
	// The hostname of the instance. See also `endpoint` and `port`.
	Address *string `pulumi:"address"`
	// Specifies whether any instance modifications
	// are applied immediately, or during the next maintenance window. Default is`false`.
	ApplyImmediately *bool `pulumi:"applyImmediately"`
	// Amazon Resource Name (ARN) of neptune instance
	Arn *string `pulumi:"arn"`
	// Indicates that minor engine upgrades will be applied automatically to the instance during the maintenance window. Default is `true`.
	AutoMinorVersionUpgrade *bool `pulumi:"autoMinorVersionUpgrade"`
	// The EC2 Availability Zone that the neptune instance is created in.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The identifier of the `neptune.Cluster` in which to launch this instance.
	ClusterIdentifier *string `pulumi:"clusterIdentifier"`
	// The region-unique, immutable identifier for the neptune instance.
	DbiResourceId *string `pulumi:"dbiResourceId"`
	// The connection endpoint in `address:port` format.
	Endpoint *string `pulumi:"endpoint"`
	// The name of the database engine to be used for the neptune instance. Defaults to `neptune`. Valid Values: `neptune`.
	Engine *string `pulumi:"engine"`
	// The neptune engine version.
	EngineVersion *string `pulumi:"engineVersion"`
	// The identifier for the neptune instance, if omitted, this provider will assign a random, unique identifier.
	Identifier *string `pulumi:"identifier"`
	// Creates a unique identifier beginning with the specified prefix. Conflicts with `identifier`.
	IdentifierPrefix *string `pulumi:"identifierPrefix"`
	// The instance class to use.
	InstanceClass *string `pulumi:"instanceClass"`
	// The ARN for the KMS encryption key if one is set to the neptune cluster.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The name of the neptune parameter group to associate with this instance.
	NeptuneParameterGroupName *string `pulumi:"neptuneParameterGroupName"`
	// A subnet group to associate with this neptune instance. **NOTE:** This must match the `neptuneSubnetGroupName` of the attached `neptune.Cluster`.
	NeptuneSubnetGroupName *string `pulumi:"neptuneSubnetGroupName"`
	// The port on which the DB accepts connections. Defaults to `8182`.
	Port *int `pulumi:"port"`
	// The daily time range during which automated backups are created if automated backups are enabled. Eg: "04:00-09:00"
	PreferredBackupWindow *string `pulumi:"preferredBackupWindow"`
	// The window to perform maintenance in.
	// Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00".
	PreferredMaintenanceWindow *string `pulumi:"preferredMaintenanceWindow"`
	// Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoter to writer.
	PromotionTier *int `pulumi:"promotionTier"`
	// Bool to control if instance is publicly accessible. Default is `false`.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// Specifies whether the neptune cluster is encrypted.
	StorageEncrypted *bool `pulumi:"storageEncrypted"`
	// A map of tags to assign to the instance. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Boolean indicating if this instance is writable. `False` indicates this instance is a read replica.
	Writer *bool `pulumi:"writer"`
}

type ClusterInstanceState struct {
	// The hostname of the instance. See also `endpoint` and `port`.
	Address pulumix.Input[*string]
	// Specifies whether any instance modifications
	// are applied immediately, or during the next maintenance window. Default is`false`.
	ApplyImmediately pulumix.Input[*bool]
	// Amazon Resource Name (ARN) of neptune instance
	Arn pulumix.Input[*string]
	// Indicates that minor engine upgrades will be applied automatically to the instance during the maintenance window. Default is `true`.
	AutoMinorVersionUpgrade pulumix.Input[*bool]
	// The EC2 Availability Zone that the neptune instance is created in.
	AvailabilityZone pulumix.Input[*string]
	// The identifier of the `neptune.Cluster` in which to launch this instance.
	ClusterIdentifier pulumix.Input[*string]
	// The region-unique, immutable identifier for the neptune instance.
	DbiResourceId pulumix.Input[*string]
	// The connection endpoint in `address:port` format.
	Endpoint pulumix.Input[*string]
	// The name of the database engine to be used for the neptune instance. Defaults to `neptune`. Valid Values: `neptune`.
	Engine pulumix.Input[*string]
	// The neptune engine version.
	EngineVersion pulumix.Input[*string]
	// The identifier for the neptune instance, if omitted, this provider will assign a random, unique identifier.
	Identifier pulumix.Input[*string]
	// Creates a unique identifier beginning with the specified prefix. Conflicts with `identifier`.
	IdentifierPrefix pulumix.Input[*string]
	// The instance class to use.
	InstanceClass pulumix.Input[*string]
	// The ARN for the KMS encryption key if one is set to the neptune cluster.
	KmsKeyArn pulumix.Input[*string]
	// The name of the neptune parameter group to associate with this instance.
	NeptuneParameterGroupName pulumix.Input[*string]
	// A subnet group to associate with this neptune instance. **NOTE:** This must match the `neptuneSubnetGroupName` of the attached `neptune.Cluster`.
	NeptuneSubnetGroupName pulumix.Input[*string]
	// The port on which the DB accepts connections. Defaults to `8182`.
	Port pulumix.Input[*int]
	// The daily time range during which automated backups are created if automated backups are enabled. Eg: "04:00-09:00"
	PreferredBackupWindow pulumix.Input[*string]
	// The window to perform maintenance in.
	// Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00".
	PreferredMaintenanceWindow pulumix.Input[*string]
	// Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoter to writer.
	PromotionTier pulumix.Input[*int]
	// Bool to control if instance is publicly accessible. Default is `false`.
	PubliclyAccessible pulumix.Input[*bool]
	// Specifies whether the neptune cluster is encrypted.
	StorageEncrypted pulumix.Input[*bool]
	// A map of tags to assign to the instance. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Boolean indicating if this instance is writable. `False` indicates this instance is a read replica.
	Writer pulumix.Input[*bool]
}

func (ClusterInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterInstanceState)(nil)).Elem()
}

type clusterInstanceArgs struct {
	// Specifies whether any instance modifications
	// are applied immediately, or during the next maintenance window. Default is`false`.
	ApplyImmediately *bool `pulumi:"applyImmediately"`
	// Indicates that minor engine upgrades will be applied automatically to the instance during the maintenance window. Default is `true`.
	AutoMinorVersionUpgrade *bool `pulumi:"autoMinorVersionUpgrade"`
	// The EC2 Availability Zone that the neptune instance is created in.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The identifier of the `neptune.Cluster` in which to launch this instance.
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
	// The name of the database engine to be used for the neptune instance. Defaults to `neptune`. Valid Values: `neptune`.
	Engine *string `pulumi:"engine"`
	// The neptune engine version.
	EngineVersion *string `pulumi:"engineVersion"`
	// The identifier for the neptune instance, if omitted, this provider will assign a random, unique identifier.
	Identifier *string `pulumi:"identifier"`
	// Creates a unique identifier beginning with the specified prefix. Conflicts with `identifier`.
	IdentifierPrefix *string `pulumi:"identifierPrefix"`
	// The instance class to use.
	InstanceClass string `pulumi:"instanceClass"`
	// The name of the neptune parameter group to associate with this instance.
	NeptuneParameterGroupName *string `pulumi:"neptuneParameterGroupName"`
	// A subnet group to associate with this neptune instance. **NOTE:** This must match the `neptuneSubnetGroupName` of the attached `neptune.Cluster`.
	NeptuneSubnetGroupName *string `pulumi:"neptuneSubnetGroupName"`
	// The port on which the DB accepts connections. Defaults to `8182`.
	Port *int `pulumi:"port"`
	// The daily time range during which automated backups are created if automated backups are enabled. Eg: "04:00-09:00"
	PreferredBackupWindow *string `pulumi:"preferredBackupWindow"`
	// The window to perform maintenance in.
	// Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00".
	PreferredMaintenanceWindow *string `pulumi:"preferredMaintenanceWindow"`
	// Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoter to writer.
	PromotionTier *int `pulumi:"promotionTier"`
	// Bool to control if instance is publicly accessible. Default is `false`.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// A map of tags to assign to the instance. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ClusterInstance resource.
type ClusterInstanceArgs struct {
	// Specifies whether any instance modifications
	// are applied immediately, or during the next maintenance window. Default is`false`.
	ApplyImmediately pulumix.Input[*bool]
	// Indicates that minor engine upgrades will be applied automatically to the instance during the maintenance window. Default is `true`.
	AutoMinorVersionUpgrade pulumix.Input[*bool]
	// The EC2 Availability Zone that the neptune instance is created in.
	AvailabilityZone pulumix.Input[*string]
	// The identifier of the `neptune.Cluster` in which to launch this instance.
	ClusterIdentifier pulumix.Input[string]
	// The name of the database engine to be used for the neptune instance. Defaults to `neptune`. Valid Values: `neptune`.
	Engine pulumix.Input[*string]
	// The neptune engine version.
	EngineVersion pulumix.Input[*string]
	// The identifier for the neptune instance, if omitted, this provider will assign a random, unique identifier.
	Identifier pulumix.Input[*string]
	// Creates a unique identifier beginning with the specified prefix. Conflicts with `identifier`.
	IdentifierPrefix pulumix.Input[*string]
	// The instance class to use.
	InstanceClass pulumix.Input[string]
	// The name of the neptune parameter group to associate with this instance.
	NeptuneParameterGroupName pulumix.Input[*string]
	// A subnet group to associate with this neptune instance. **NOTE:** This must match the `neptuneSubnetGroupName` of the attached `neptune.Cluster`.
	NeptuneSubnetGroupName pulumix.Input[*string]
	// The port on which the DB accepts connections. Defaults to `8182`.
	Port pulumix.Input[*int]
	// The daily time range during which automated backups are created if automated backups are enabled. Eg: "04:00-09:00"
	PreferredBackupWindow pulumix.Input[*string]
	// The window to perform maintenance in.
	// Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00".
	PreferredMaintenanceWindow pulumix.Input[*string]
	// Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoter to writer.
	PromotionTier pulumix.Input[*int]
	// Bool to control if instance is publicly accessible. Default is `false`.
	PubliclyAccessible pulumix.Input[*bool]
	// A map of tags to assign to the instance. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ClusterInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterInstanceArgs)(nil)).Elem()
}

type ClusterInstanceOutput struct{ *pulumi.OutputState }

func (ClusterInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterInstance)(nil)).Elem()
}

func (o ClusterInstanceOutput) ToClusterInstanceOutput() ClusterInstanceOutput {
	return o
}

func (o ClusterInstanceOutput) ToClusterInstanceOutputWithContext(ctx context.Context) ClusterInstanceOutput {
	return o
}

func (o ClusterInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterInstance] {
	return pulumix.Output[ClusterInstance]{
		OutputState: o.OutputState,
	}
}

// The hostname of the instance. See also `endpoint` and `port`.
func (o ClusterInstanceOutput) Address() pulumix.Output[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[string] { return v.Address })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies whether any instance modifications
// are applied immediately, or during the next maintenance window. Default is`false`.
func (o ClusterInstanceOutput) ApplyImmediately() pulumix.Output[bool] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[bool] { return v.ApplyImmediately })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Amazon Resource Name (ARN) of neptune instance
func (o ClusterInstanceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates that minor engine upgrades will be applied automatically to the instance during the maintenance window. Default is `true`.
func (o ClusterInstanceOutput) AutoMinorVersionUpgrade() pulumix.Output[*bool] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[*bool] { return v.AutoMinorVersionUpgrade })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The EC2 Availability Zone that the neptune instance is created in.
func (o ClusterInstanceOutput) AvailabilityZone() pulumix.Output[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[string] { return v.AvailabilityZone })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The identifier of the `neptune.Cluster` in which to launch this instance.
func (o ClusterInstanceOutput) ClusterIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[string] { return v.ClusterIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The region-unique, immutable identifier for the neptune instance.
func (o ClusterInstanceOutput) DbiResourceId() pulumix.Output[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[string] { return v.DbiResourceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The connection endpoint in `address:port` format.
func (o ClusterInstanceOutput) Endpoint() pulumix.Output[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[string] { return v.Endpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the database engine to be used for the neptune instance. Defaults to `neptune`. Valid Values: `neptune`.
func (o ClusterInstanceOutput) Engine() pulumix.Output[*string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[*string] { return v.Engine })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The neptune engine version.
func (o ClusterInstanceOutput) EngineVersion() pulumix.Output[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[string] { return v.EngineVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The identifier for the neptune instance, if omitted, this provider will assign a random, unique identifier.
func (o ClusterInstanceOutput) Identifier() pulumix.Output[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[string] { return v.Identifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique identifier beginning with the specified prefix. Conflicts with `identifier`.
func (o ClusterInstanceOutput) IdentifierPrefix() pulumix.Output[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[string] { return v.IdentifierPrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The instance class to use.
func (o ClusterInstanceOutput) InstanceClass() pulumix.Output[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[string] { return v.InstanceClass })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN for the KMS encryption key if one is set to the neptune cluster.
func (o ClusterInstanceOutput) KmsKeyArn() pulumix.Output[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[string] { return v.KmsKeyArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the neptune parameter group to associate with this instance.
func (o ClusterInstanceOutput) NeptuneParameterGroupName() pulumix.Output[*string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[*string] { return v.NeptuneParameterGroupName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A subnet group to associate with this neptune instance. **NOTE:** This must match the `neptuneSubnetGroupName` of the attached `neptune.Cluster`.
func (o ClusterInstanceOutput) NeptuneSubnetGroupName() pulumix.Output[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[string] { return v.NeptuneSubnetGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The port on which the DB accepts connections. Defaults to `8182`.
func (o ClusterInstanceOutput) Port() pulumix.Output[*int] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[*int] { return v.Port })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The daily time range during which automated backups are created if automated backups are enabled. Eg: "04:00-09:00"
func (o ClusterInstanceOutput) PreferredBackupWindow() pulumix.Output[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[string] { return v.PreferredBackupWindow })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The window to perform maintenance in.
// Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00".
func (o ClusterInstanceOutput) PreferredMaintenanceWindow() pulumix.Output[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[string] { return v.PreferredMaintenanceWindow })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoter to writer.
func (o ClusterInstanceOutput) PromotionTier() pulumix.Output[*int] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[*int] { return v.PromotionTier })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Bool to control if instance is publicly accessible. Default is `false`.
func (o ClusterInstanceOutput) PubliclyAccessible() pulumix.Output[*bool] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[*bool] { return v.PubliclyAccessible })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Specifies whether the neptune cluster is encrypted.
func (o ClusterInstanceOutput) StorageEncrypted() pulumix.Output[bool] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[bool] { return v.StorageEncrypted })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// A map of tags to assign to the instance. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ClusterInstanceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ClusterInstanceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Boolean indicating if this instance is writable. `False` indicates this instance is a read replica.
func (o ClusterInstanceOutput) Writer() pulumix.Output[bool] {
	value := pulumix.Apply[ClusterInstance](o, func(v ClusterInstance) pulumix.Output[bool] { return v.Writer })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

func init() {
	pulumi.RegisterOutputType(ClusterInstanceOutput{})
}
