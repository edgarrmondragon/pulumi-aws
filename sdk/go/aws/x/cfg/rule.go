// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Config Rule.
//
// > **Note:** Config Rule requires an existing Configuration Recorder to be present. Use of `dependsOn` is recommended (as shown below) to avoid race conditions.
type Rule struct {
	pulumi.CustomResourceState

	// The ARN of the config rule
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Description of the rule
	Description pulumix.Output[*string] `pulumi:"description"`
	// A string in JSON format that is passed to the AWS Config rule Lambda function.
	InputParameters pulumix.Output[*string] `pulumi:"inputParameters"`
	// The maximum frequency with which AWS Config runs evaluations for a rule.
	MaximumExecutionFrequency pulumix.Output[*string] `pulumi:"maximumExecutionFrequency"`
	// The name of the rule
	Name pulumix.Output[string] `pulumi:"name"`
	// The ID of the config rule
	RuleId pulumix.Output[string] `pulumi:"ruleId"`
	// Scope defines which resources can trigger an evaluation for the rule. See Source Below.
	Scope pulumix.GPtrOutput[RuleScope, RuleScopeOutput] `pulumi:"scope"`
	// Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Scope Below.
	Source pulumix.GPtrOutput[RuleSource, RuleSourceOutput] `pulumi:"source"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOption) (*Rule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rule
	err := ctx.RegisterResource("aws:cfg/rule:Rule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleState, opts ...pulumi.ResourceOption) (*Rule, error) {
	var resource Rule
	err := ctx.ReadResource("aws:cfg/rule:Rule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rule resources.
type ruleState struct {
	// The ARN of the config rule
	Arn *string `pulumi:"arn"`
	// Description of the rule
	Description *string `pulumi:"description"`
	// A string in JSON format that is passed to the AWS Config rule Lambda function.
	InputParameters *string `pulumi:"inputParameters"`
	// The maximum frequency with which AWS Config runs evaluations for a rule.
	MaximumExecutionFrequency *string `pulumi:"maximumExecutionFrequency"`
	// The name of the rule
	Name *string `pulumi:"name"`
	// The ID of the config rule
	RuleId *string `pulumi:"ruleId"`
	// Scope defines which resources can trigger an evaluation for the rule. See Source Below.
	Scope *RuleScope `pulumi:"scope"`
	// Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Scope Below.
	Source *RuleSource `pulumi:"source"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type RuleState struct {
	// The ARN of the config rule
	Arn pulumix.Input[*string]
	// Description of the rule
	Description pulumix.Input[*string]
	// A string in JSON format that is passed to the AWS Config rule Lambda function.
	InputParameters pulumix.Input[*string]
	// The maximum frequency with which AWS Config runs evaluations for a rule.
	MaximumExecutionFrequency pulumix.Input[*string]
	// The name of the rule
	Name pulumix.Input[*string]
	// The ID of the config rule
	RuleId pulumix.Input[*string]
	// Scope defines which resources can trigger an evaluation for the rule. See Source Below.
	Scope pulumix.Input[*RuleScopeArgs]
	// Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Scope Below.
	Source pulumix.Input[*RuleSourceArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (RuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleState)(nil)).Elem()
}

type ruleArgs struct {
	// Description of the rule
	Description *string `pulumi:"description"`
	// A string in JSON format that is passed to the AWS Config rule Lambda function.
	InputParameters *string `pulumi:"inputParameters"`
	// The maximum frequency with which AWS Config runs evaluations for a rule.
	MaximumExecutionFrequency *string `pulumi:"maximumExecutionFrequency"`
	// The name of the rule
	Name *string `pulumi:"name"`
	// Scope defines which resources can trigger an evaluation for the rule. See Source Below.
	Scope *RuleScope `pulumi:"scope"`
	// Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Scope Below.
	Source RuleSource `pulumi:"source"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	// Description of the rule
	Description pulumix.Input[*string]
	// A string in JSON format that is passed to the AWS Config rule Lambda function.
	InputParameters pulumix.Input[*string]
	// The maximum frequency with which AWS Config runs evaluations for a rule.
	MaximumExecutionFrequency pulumix.Input[*string]
	// The name of the rule
	Name pulumix.Input[*string]
	// Scope defines which resources can trigger an evaluation for the rule. See Source Below.
	Scope pulumix.Input[*RuleScopeArgs]
	// Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Scope Below.
	Source pulumix.Input[*RuleSourceArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleArgs)(nil)).Elem()
}

type RuleOutput struct{ *pulumi.OutputState }

func (RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Rule)(nil)).Elem()
}

func (o RuleOutput) ToRuleOutput() RuleOutput {
	return o
}

func (o RuleOutput) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return o
}

func (o RuleOutput) ToOutput(ctx context.Context) pulumix.Output[Rule] {
	return pulumix.Output[Rule]{
		OutputState: o.OutputState,
	}
}

// The ARN of the config rule
func (o RuleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the rule
func (o RuleOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A string in JSON format that is passed to the AWS Config rule Lambda function.
func (o RuleOutput) InputParameters() pulumix.Output[*string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.Output[*string] { return v.InputParameters })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The maximum frequency with which AWS Config runs evaluations for a rule.
func (o RuleOutput) MaximumExecutionFrequency() pulumix.Output[*string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.Output[*string] { return v.MaximumExecutionFrequency })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the rule
func (o RuleOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the config rule
func (o RuleOutput) RuleId() pulumix.Output[string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.Output[string] { return v.RuleId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Scope defines which resources can trigger an evaluation for the rule. See Source Below.
func (o RuleOutput) Scope() pulumix.GPtrOutput[RuleScope, RuleScopeOutput] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.GPtrOutput[RuleScope, RuleScopeOutput] { return v.Scope })
	unwrapped := pulumix.Flatten[*RuleScope, pulumix.GPtrOutput[RuleScope, RuleScopeOutput]](value)
	return pulumix.GPtrOutput[RuleScope, RuleScopeOutput]{OutputState: unwrapped.OutputState}
}

// Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Scope Below.
func (o RuleOutput) Source() pulumix.GPtrOutput[RuleSource, RuleSourceOutput] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.GPtrOutput[RuleSource, RuleSourceOutput] { return v.Source })
	unwrapped := pulumix.Flatten[*RuleSource, pulumix.GPtrOutput[RuleSource, RuleSourceOutput]](value)
	return pulumix.GPtrOutput[RuleSource, RuleSourceOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RuleOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RuleOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(RuleOutput{})
}
