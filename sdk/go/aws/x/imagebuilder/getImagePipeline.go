// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about an Image Builder Image Pipeline.
func LookupImagePipeline(ctx *pulumi.Context, args *LookupImagePipelineArgs, opts ...pulumi.InvokeOption) (*LookupImagePipelineResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupImagePipelineResult
	err := ctx.Invoke("aws:imagebuilder/getImagePipeline:getImagePipeline", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImagePipeline.
type LookupImagePipelineArgs struct {
	// ARN of the image pipeline.
	Arn string `pulumi:"arn"`
	// Key-value map of resource tags for the image pipeline.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getImagePipeline.
type LookupImagePipelineResult struct {
	Arn string `pulumi:"arn"`
	// ARN of the container recipe.
	ContainerRecipeArn string `pulumi:"containerRecipeArn"`
	// Date the image pipeline was created.
	DateCreated string `pulumi:"dateCreated"`
	// Date the image pipeline was last run.
	DateLastRun string `pulumi:"dateLastRun"`
	// Date the image pipeline will run next.
	DateNextRun string `pulumi:"dateNextRun"`
	// Date the image pipeline was updated.
	DateUpdated string `pulumi:"dateUpdated"`
	// Description of the image pipeline.
	Description string `pulumi:"description"`
	// ARN of the Image Builder Distribution Configuration.
	DistributionConfigurationArn string `pulumi:"distributionConfigurationArn"`
	// Whether additional information about the image being created is collected.
	EnhancedImageMetadataEnabled bool `pulumi:"enhancedImageMetadataEnabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN of the image recipe.
	ImageRecipeArn              string                                       `pulumi:"imageRecipeArn"`
	ImageScanningConfigurations []GetImagePipelineImageScanningConfiguration `pulumi:"imageScanningConfigurations"`
	// List of an object with image tests configuration.
	ImageTestsConfigurations []GetImagePipelineImageTestsConfiguration `pulumi:"imageTestsConfigurations"`
	// ARN of the Image Builder Infrastructure Configuration.
	InfrastructureConfigurationArn string `pulumi:"infrastructureConfigurationArn"`
	// Name of the image pipeline.
	Name string `pulumi:"name"`
	// Platform of the image pipeline.
	Platform string `pulumi:"platform"`
	// List of an object with schedule settings.
	Schedules []GetImagePipelineSchedule `pulumi:"schedules"`
	// Status of the image pipeline.
	Status string `pulumi:"status"`
	// Key-value map of resource tags for the image pipeline.
	Tags map[string]string `pulumi:"tags"`
}

func LookupImagePipelineOutput(ctx *pulumi.Context, args LookupImagePipelineOutputArgs, opts ...pulumi.InvokeOption) LookupImagePipelineResultOutput {
	outputResult := pulumix.ApplyErr[*LookupImagePipelineArgs](args.ToOutput(), func(plainArgs *LookupImagePipelineArgs) (*LookupImagePipelineResult, error) {
		return LookupImagePipeline(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupImagePipelineResultOutput, *LookupImagePipelineResult](outputResult)
}

// A collection of arguments for invoking getImagePipeline.
type LookupImagePipelineOutputArgs struct {
	// ARN of the image pipeline.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Key-value map of resource tags for the image pipeline.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupImagePipelineOutputArgs) ToOutput() pulumix.Output[*LookupImagePipelineArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupImagePipelineArgs {
		return &LookupImagePipelineArgs{
			Arn:  resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupImagePipelineResultOutput struct{ *pulumi.OutputState }

func (LookupImagePipelineResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImagePipelineResult)(nil)).Elem()
}

func (o LookupImagePipelineResultOutput) ToOutput(context.Context) pulumix.Output[*LookupImagePipelineResult] {
	return pulumix.Output[*LookupImagePipelineResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupImagePipelineResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) string { return v.Arn })
}

func (o LookupImagePipelineResultOutput) ContainerRecipeArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) string { return v.ContainerRecipeArn })
}

func (o LookupImagePipelineResultOutput) DateCreated() pulumix.Output[string] {
	return pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) string { return v.DateCreated })
}

func (o LookupImagePipelineResultOutput) DateLastRun() pulumix.Output[string] {
	return pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) string { return v.DateLastRun })
}

func (o LookupImagePipelineResultOutput) DateNextRun() pulumix.Output[string] {
	return pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) string { return v.DateNextRun })
}

func (o LookupImagePipelineResultOutput) DateUpdated() pulumix.Output[string] {
	return pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) string { return v.DateUpdated })
}

func (o LookupImagePipelineResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) string { return v.Description })
}

func (o LookupImagePipelineResultOutput) DistributionConfigurationArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) string { return v.DistributionConfigurationArn })
}

func (o LookupImagePipelineResultOutput) EnhancedImageMetadataEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) bool { return v.EnhancedImageMetadataEnabled })
}

func (o LookupImagePipelineResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) string { return v.Id })
}

func (o LookupImagePipelineResultOutput) ImageRecipeArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) string { return v.ImageRecipeArn })
}

func (o LookupImagePipelineResultOutput) ImageScanningConfigurations() pulumix.GArrayOutput[GetImagePipelineImageScanningConfiguration, GetImagePipelineImageScanningConfigurationOutput] {
	value := pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) []GetImagePipelineImageScanningConfiguration {
		return v.ImageScanningConfigurations
	})
	return pulumix.GArrayOutput[GetImagePipelineImageScanningConfiguration, GetImagePipelineImageScanningConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupImagePipelineResultOutput) ImageTestsConfigurations() pulumix.GArrayOutput[GetImagePipelineImageTestsConfiguration, GetImagePipelineImageTestsConfigurationOutput] {
	value := pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) []GetImagePipelineImageTestsConfiguration {
		return v.ImageTestsConfigurations
	})
	return pulumix.GArrayOutput[GetImagePipelineImageTestsConfiguration, GetImagePipelineImageTestsConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupImagePipelineResultOutput) InfrastructureConfigurationArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) string { return v.InfrastructureConfigurationArn })
}

func (o LookupImagePipelineResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) string { return v.Name })
}

func (o LookupImagePipelineResultOutput) Platform() pulumix.Output[string] {
	return pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) string { return v.Platform })
}

func (o LookupImagePipelineResultOutput) Schedules() pulumix.GArrayOutput[GetImagePipelineSchedule, GetImagePipelineScheduleOutput] {
	value := pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) []GetImagePipelineSchedule { return v.Schedules })
	return pulumix.GArrayOutput[GetImagePipelineSchedule, GetImagePipelineScheduleOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupImagePipelineResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) string { return v.Status })
}

func (o LookupImagePipelineResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupImagePipelineResult](o, func(v *LookupImagePipelineResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
