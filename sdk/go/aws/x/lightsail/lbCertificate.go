// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a Lightsail load balancer Certificate resource.
type LbCertificate struct {
	pulumi.CustomResourceState

	// The ARN of the lightsail certificate.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The timestamp when the instance was created.
	CreatedAt pulumix.Output[string] `pulumi:"createdAt"`
	// The domain name (e.g., example.com) for your SSL/TLS certificate.
	DomainName              pulumix.Output[string]                                                                               `pulumi:"domainName"`
	DomainValidationRecords pulumix.GArrayOutput[LbCertificateDomainValidationRecord, LbCertificateDomainValidationRecordOutput] `pulumi:"domainValidationRecords"`
	// The load balancer name where you want to create the SSL/TLS certificate.
	LbName pulumix.Output[string] `pulumi:"lbName"`
	// The SSL/TLS certificate name.
	Name pulumix.Output[string] `pulumi:"name"`
	// Set of domains that should be SANs in the issued certificate. `domainName` attribute is automatically added as a Subject Alternative Name.
	SubjectAlternativeNames pulumix.ArrayOutput[string] `pulumi:"subjectAlternativeNames"`
	SupportCode             pulumix.Output[string]      `pulumi:"supportCode"`
}

// NewLbCertificate registers a new resource with the given unique name, arguments, and options.
func NewLbCertificate(ctx *pulumi.Context,
	name string, args *LbCertificateArgs, opts ...pulumi.ResourceOption) (*LbCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LbName == nil {
		return nil, errors.New("invalid value for required argument 'LbName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LbCertificate
	err := ctx.RegisterResource("aws:lightsail/lbCertificate:LbCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbCertificate gets an existing LbCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbCertificateState, opts ...pulumi.ResourceOption) (*LbCertificate, error) {
	var resource LbCertificate
	err := ctx.ReadResource("aws:lightsail/lbCertificate:LbCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbCertificate resources.
type lbCertificateState struct {
	// The ARN of the lightsail certificate.
	Arn *string `pulumi:"arn"`
	// The timestamp when the instance was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The domain name (e.g., example.com) for your SSL/TLS certificate.
	DomainName              *string                               `pulumi:"domainName"`
	DomainValidationRecords []LbCertificateDomainValidationRecord `pulumi:"domainValidationRecords"`
	// The load balancer name where you want to create the SSL/TLS certificate.
	LbName *string `pulumi:"lbName"`
	// The SSL/TLS certificate name.
	Name *string `pulumi:"name"`
	// Set of domains that should be SANs in the issued certificate. `domainName` attribute is automatically added as a Subject Alternative Name.
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
	SupportCode             *string  `pulumi:"supportCode"`
}

type LbCertificateState struct {
	// The ARN of the lightsail certificate.
	Arn pulumix.Input[*string]
	// The timestamp when the instance was created.
	CreatedAt pulumix.Input[*string]
	// The domain name (e.g., example.com) for your SSL/TLS certificate.
	DomainName              pulumix.Input[*string]
	DomainValidationRecords pulumix.Input[[]*LbCertificateDomainValidationRecordArgs]
	// The load balancer name where you want to create the SSL/TLS certificate.
	LbName pulumix.Input[*string]
	// The SSL/TLS certificate name.
	Name pulumix.Input[*string]
	// Set of domains that should be SANs in the issued certificate. `domainName` attribute is automatically added as a Subject Alternative Name.
	SubjectAlternativeNames pulumix.Input[[]string]
	SupportCode             pulumix.Input[*string]
}

func (LbCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbCertificateState)(nil)).Elem()
}

type lbCertificateArgs struct {
	// The domain name (e.g., example.com) for your SSL/TLS certificate.
	DomainName *string `pulumi:"domainName"`
	// The load balancer name where you want to create the SSL/TLS certificate.
	LbName string `pulumi:"lbName"`
	// The SSL/TLS certificate name.
	Name *string `pulumi:"name"`
	// Set of domains that should be SANs in the issued certificate. `domainName` attribute is automatically added as a Subject Alternative Name.
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
}

// The set of arguments for constructing a LbCertificate resource.
type LbCertificateArgs struct {
	// The domain name (e.g., example.com) for your SSL/TLS certificate.
	DomainName pulumix.Input[*string]
	// The load balancer name where you want to create the SSL/TLS certificate.
	LbName pulumix.Input[string]
	// The SSL/TLS certificate name.
	Name pulumix.Input[*string]
	// Set of domains that should be SANs in the issued certificate. `domainName` attribute is automatically added as a Subject Alternative Name.
	SubjectAlternativeNames pulumix.Input[[]string]
}

func (LbCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbCertificateArgs)(nil)).Elem()
}

type LbCertificateOutput struct{ *pulumi.OutputState }

func (LbCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbCertificate)(nil)).Elem()
}

func (o LbCertificateOutput) ToLbCertificateOutput() LbCertificateOutput {
	return o
}

func (o LbCertificateOutput) ToLbCertificateOutputWithContext(ctx context.Context) LbCertificateOutput {
	return o
}

func (o LbCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[LbCertificate] {
	return pulumix.Output[LbCertificate]{
		OutputState: o.OutputState,
	}
}

// The ARN of the lightsail certificate.
func (o LbCertificateOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[LbCertificate](o, func(v LbCertificate) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The timestamp when the instance was created.
func (o LbCertificateOutput) CreatedAt() pulumix.Output[string] {
	value := pulumix.Apply[LbCertificate](o, func(v LbCertificate) pulumix.Output[string] { return v.CreatedAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The domain name (e.g., example.com) for your SSL/TLS certificate.
func (o LbCertificateOutput) DomainName() pulumix.Output[string] {
	value := pulumix.Apply[LbCertificate](o, func(v LbCertificate) pulumix.Output[string] { return v.DomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o LbCertificateOutput) DomainValidationRecords() pulumix.GArrayOutput[LbCertificateDomainValidationRecord, LbCertificateDomainValidationRecordOutput] {
	value := pulumix.Apply[LbCertificate](o, func(v LbCertificate) pulumix.GArrayOutput[LbCertificateDomainValidationRecord, LbCertificateDomainValidationRecordOutput] {
		return v.DomainValidationRecords
	})
	unwrapped := pulumix.Flatten[[]LbCertificateDomainValidationRecord, pulumix.GArrayOutput[LbCertificateDomainValidationRecord, LbCertificateDomainValidationRecordOutput]](value)
	return pulumix.GArrayOutput[LbCertificateDomainValidationRecord, LbCertificateDomainValidationRecordOutput]{OutputState: unwrapped.OutputState}
}

// The load balancer name where you want to create the SSL/TLS certificate.
func (o LbCertificateOutput) LbName() pulumix.Output[string] {
	value := pulumix.Apply[LbCertificate](o, func(v LbCertificate) pulumix.Output[string] { return v.LbName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The SSL/TLS certificate name.
func (o LbCertificateOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[LbCertificate](o, func(v LbCertificate) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set of domains that should be SANs in the issued certificate. `domainName` attribute is automatically added as a Subject Alternative Name.
func (o LbCertificateOutput) SubjectAlternativeNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LbCertificate](o, func(v LbCertificate) pulumix.ArrayOutput[string] { return v.SubjectAlternativeNames })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o LbCertificateOutput) SupportCode() pulumix.Output[string] {
	value := pulumix.Apply[LbCertificate](o, func(v LbCertificate) pulumix.Output[string] { return v.SupportCode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LbCertificateOutput{})
}
