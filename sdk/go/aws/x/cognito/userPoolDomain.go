// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Cognito User Pool Domain resource.
type UserPoolDomain struct {
	pulumi.CustomResourceState

	// The AWS account ID for the user pool owner.
	AwsAccountId pulumix.Output[string] `pulumi:"awsAccountId"`
	// The ARN of an ISSUED ACM certificate in us-east-1 for a custom domain.
	CertificateArn pulumix.Output[*string] `pulumi:"certificateArn"`
	// The Amazon CloudFront endpoint (e.g. `dpp0gtxikpq3y.cloudfront.net`) that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.
	CloudfrontDistribution pulumix.Output[string] `pulumi:"cloudfrontDistribution"`
	// The URL of the CloudFront distribution. This is required to generate the ALIAS `route53.Record`
	CloudfrontDistributionArn pulumix.Output[string] `pulumi:"cloudfrontDistributionArn"`
	// The Route 53 hosted zone ID of the CloudFront distribution.
	CloudfrontDistributionZoneId pulumix.Output[string] `pulumi:"cloudfrontDistributionZoneId"`
	// For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
	Domain pulumix.Output[string] `pulumi:"domain"`
	// The S3 bucket where the static files for this domain are stored.
	S3Bucket pulumix.Output[string] `pulumi:"s3Bucket"`
	// The user pool ID.
	UserPoolId pulumix.Output[string] `pulumi:"userPoolId"`
	// The app version.
	Version pulumix.Output[string] `pulumi:"version"`
}

// NewUserPoolDomain registers a new resource with the given unique name, arguments, and options.
func NewUserPoolDomain(ctx *pulumi.Context,
	name string, args *UserPoolDomainArgs, opts ...pulumi.ResourceOption) (*UserPoolDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserPoolDomain
	err := ctx.RegisterResource("aws:cognito/userPoolDomain:UserPoolDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPoolDomain gets an existing UserPoolDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPoolDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPoolDomainState, opts ...pulumi.ResourceOption) (*UserPoolDomain, error) {
	var resource UserPoolDomain
	err := ctx.ReadResource("aws:cognito/userPoolDomain:UserPoolDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPoolDomain resources.
type userPoolDomainState struct {
	// The AWS account ID for the user pool owner.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// The ARN of an ISSUED ACM certificate in us-east-1 for a custom domain.
	CertificateArn *string `pulumi:"certificateArn"`
	// The Amazon CloudFront endpoint (e.g. `dpp0gtxikpq3y.cloudfront.net`) that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.
	CloudfrontDistribution *string `pulumi:"cloudfrontDistribution"`
	// The URL of the CloudFront distribution. This is required to generate the ALIAS `route53.Record`
	CloudfrontDistributionArn *string `pulumi:"cloudfrontDistributionArn"`
	// The Route 53 hosted zone ID of the CloudFront distribution.
	CloudfrontDistributionZoneId *string `pulumi:"cloudfrontDistributionZoneId"`
	// For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
	Domain *string `pulumi:"domain"`
	// The S3 bucket where the static files for this domain are stored.
	S3Bucket *string `pulumi:"s3Bucket"`
	// The user pool ID.
	UserPoolId *string `pulumi:"userPoolId"`
	// The app version.
	Version *string `pulumi:"version"`
}

type UserPoolDomainState struct {
	// The AWS account ID for the user pool owner.
	AwsAccountId pulumix.Input[*string]
	// The ARN of an ISSUED ACM certificate in us-east-1 for a custom domain.
	CertificateArn pulumix.Input[*string]
	// The Amazon CloudFront endpoint (e.g. `dpp0gtxikpq3y.cloudfront.net`) that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.
	CloudfrontDistribution pulumix.Input[*string]
	// The URL of the CloudFront distribution. This is required to generate the ALIAS `route53.Record`
	CloudfrontDistributionArn pulumix.Input[*string]
	// The Route 53 hosted zone ID of the CloudFront distribution.
	CloudfrontDistributionZoneId pulumix.Input[*string]
	// For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
	Domain pulumix.Input[*string]
	// The S3 bucket where the static files for this domain are stored.
	S3Bucket pulumix.Input[*string]
	// The user pool ID.
	UserPoolId pulumix.Input[*string]
	// The app version.
	Version pulumix.Input[*string]
}

func (UserPoolDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolDomainState)(nil)).Elem()
}

type userPoolDomainArgs struct {
	// The ARN of an ISSUED ACM certificate in us-east-1 for a custom domain.
	CertificateArn *string `pulumi:"certificateArn"`
	// For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
	Domain string `pulumi:"domain"`
	// The user pool ID.
	UserPoolId string `pulumi:"userPoolId"`
}

// The set of arguments for constructing a UserPoolDomain resource.
type UserPoolDomainArgs struct {
	// The ARN of an ISSUED ACM certificate in us-east-1 for a custom domain.
	CertificateArn pulumix.Input[*string]
	// For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
	Domain pulumix.Input[string]
	// The user pool ID.
	UserPoolId pulumix.Input[string]
}

func (UserPoolDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolDomainArgs)(nil)).Elem()
}

type UserPoolDomainOutput struct{ *pulumi.OutputState }

func (UserPoolDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolDomain)(nil)).Elem()
}

func (o UserPoolDomainOutput) ToUserPoolDomainOutput() UserPoolDomainOutput {
	return o
}

func (o UserPoolDomainOutput) ToUserPoolDomainOutputWithContext(ctx context.Context) UserPoolDomainOutput {
	return o
}

func (o UserPoolDomainOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolDomain] {
	return pulumix.Output[UserPoolDomain]{
		OutputState: o.OutputState,
	}
}

// The AWS account ID for the user pool owner.
func (o UserPoolDomainOutput) AwsAccountId() pulumix.Output[string] {
	value := pulumix.Apply[UserPoolDomain](o, func(v UserPoolDomain) pulumix.Output[string] { return v.AwsAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of an ISSUED ACM certificate in us-east-1 for a custom domain.
func (o UserPoolDomainOutput) CertificateArn() pulumix.Output[*string] {
	value := pulumix.Apply[UserPoolDomain](o, func(v UserPoolDomain) pulumix.Output[*string] { return v.CertificateArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Amazon CloudFront endpoint (e.g. `dpp0gtxikpq3y.cloudfront.net`) that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.
func (o UserPoolDomainOutput) CloudfrontDistribution() pulumix.Output[string] {
	value := pulumix.Apply[UserPoolDomain](o, func(v UserPoolDomain) pulumix.Output[string] { return v.CloudfrontDistribution })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The URL of the CloudFront distribution. This is required to generate the ALIAS `route53.Record`
func (o UserPoolDomainOutput) CloudfrontDistributionArn() pulumix.Output[string] {
	value := pulumix.Apply[UserPoolDomain](o, func(v UserPoolDomain) pulumix.Output[string] { return v.CloudfrontDistributionArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Route 53 hosted zone ID of the CloudFront distribution.
func (o UserPoolDomainOutput) CloudfrontDistributionZoneId() pulumix.Output[string] {
	value := pulumix.Apply[UserPoolDomain](o, func(v UserPoolDomain) pulumix.Output[string] { return v.CloudfrontDistributionZoneId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
func (o UserPoolDomainOutput) Domain() pulumix.Output[string] {
	value := pulumix.Apply[UserPoolDomain](o, func(v UserPoolDomain) pulumix.Output[string] { return v.Domain })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The S3 bucket where the static files for this domain are stored.
func (o UserPoolDomainOutput) S3Bucket() pulumix.Output[string] {
	value := pulumix.Apply[UserPoolDomain](o, func(v UserPoolDomain) pulumix.Output[string] { return v.S3Bucket })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The user pool ID.
func (o UserPoolDomainOutput) UserPoolId() pulumix.Output[string] {
	value := pulumix.Apply[UserPoolDomain](o, func(v UserPoolDomain) pulumix.Output[string] { return v.UserPoolId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The app version.
func (o UserPoolDomainOutput) Version() pulumix.Output[string] {
	value := pulumix.Apply[UserPoolDomain](o, func(v UserPoolDomain) pulumix.Output[string] { return v.Version })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(UserPoolDomainOutput{})
}
