// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evidently

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudWatch Evidently Project resource.
type Project struct {
	pulumi.CustomResourceState

	// The number of ongoing experiments currently in the project.
	ActiveExperimentCount pulumix.Output[int] `pulumi:"activeExperimentCount"`
	// The number of ongoing launches currently in the project.
	ActiveLaunchCount pulumix.Output[int] `pulumi:"activeLaunchCount"`
	// The ARN of the project.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The date and time that the project is created.
	CreatedTime pulumix.Output[string] `pulumi:"createdTime"`
	// A block that contains information about where Evidently is to store evaluation events for longer term storage, if you choose to do so. If you choose not to store these events, Evidently deletes them after using them to produce metrics and other experiment results that you can view. See below.
	DataDelivery pulumix.GPtrOutput[ProjectDataDelivery, ProjectDataDeliveryOutput] `pulumi:"dataDelivery"`
	// Specifies the description of the project.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The number of experiments currently in the project. This includes all experiments that have been created and not deleted, whether they are ongoing or not.
	ExperimentCount pulumix.Output[int] `pulumi:"experimentCount"`
	// The number of features currently in the project.
	FeatureCount pulumix.Output[int] `pulumi:"featureCount"`
	// The date and time that the project was most recently updated.
	LastUpdatedTime pulumix.Output[string] `pulumi:"lastUpdatedTime"`
	// The number of launches currently in the project. This includes all launches that have been created and not deleted, whether they are ongoing or not.
	LaunchCount pulumix.Output[int] `pulumi:"launchCount"`
	// A name for the project.
	Name pulumix.Output[string] `pulumi:"name"`
	// The current state of the project. Valid values are `AVAILABLE` and `UPDATING`.
	Status pulumix.Output[string] `pulumi:"status"`
	// Tags to apply to the project. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		args = &ProjectArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("aws:evidently/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("aws:evidently/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// The number of ongoing experiments currently in the project.
	ActiveExperimentCount *int `pulumi:"activeExperimentCount"`
	// The number of ongoing launches currently in the project.
	ActiveLaunchCount *int `pulumi:"activeLaunchCount"`
	// The ARN of the project.
	Arn *string `pulumi:"arn"`
	// The date and time that the project is created.
	CreatedTime *string `pulumi:"createdTime"`
	// A block that contains information about where Evidently is to store evaluation events for longer term storage, if you choose to do so. If you choose not to store these events, Evidently deletes them after using them to produce metrics and other experiment results that you can view. See below.
	DataDelivery *ProjectDataDelivery `pulumi:"dataDelivery"`
	// Specifies the description of the project.
	Description *string `pulumi:"description"`
	// The number of experiments currently in the project. This includes all experiments that have been created and not deleted, whether they are ongoing or not.
	ExperimentCount *int `pulumi:"experimentCount"`
	// The number of features currently in the project.
	FeatureCount *int `pulumi:"featureCount"`
	// The date and time that the project was most recently updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The number of launches currently in the project. This includes all launches that have been created and not deleted, whether they are ongoing or not.
	LaunchCount *int `pulumi:"launchCount"`
	// A name for the project.
	Name *string `pulumi:"name"`
	// The current state of the project. Valid values are `AVAILABLE` and `UPDATING`.
	Status *string `pulumi:"status"`
	// Tags to apply to the project. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ProjectState struct {
	// The number of ongoing experiments currently in the project.
	ActiveExperimentCount pulumix.Input[*int]
	// The number of ongoing launches currently in the project.
	ActiveLaunchCount pulumix.Input[*int]
	// The ARN of the project.
	Arn pulumix.Input[*string]
	// The date and time that the project is created.
	CreatedTime pulumix.Input[*string]
	// A block that contains information about where Evidently is to store evaluation events for longer term storage, if you choose to do so. If you choose not to store these events, Evidently deletes them after using them to produce metrics and other experiment results that you can view. See below.
	DataDelivery pulumix.Input[*ProjectDataDeliveryArgs]
	// Specifies the description of the project.
	Description pulumix.Input[*string]
	// The number of experiments currently in the project. This includes all experiments that have been created and not deleted, whether they are ongoing or not.
	ExperimentCount pulumix.Input[*int]
	// The number of features currently in the project.
	FeatureCount pulumix.Input[*int]
	// The date and time that the project was most recently updated.
	LastUpdatedTime pulumix.Input[*string]
	// The number of launches currently in the project. This includes all launches that have been created and not deleted, whether they are ongoing or not.
	LaunchCount pulumix.Input[*int]
	// A name for the project.
	Name pulumix.Input[*string]
	// The current state of the project. Valid values are `AVAILABLE` and `UPDATING`.
	Status pulumix.Input[*string]
	// Tags to apply to the project. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// A block that contains information about where Evidently is to store evaluation events for longer term storage, if you choose to do so. If you choose not to store these events, Evidently deletes them after using them to produce metrics and other experiment results that you can view. See below.
	DataDelivery *ProjectDataDelivery `pulumi:"dataDelivery"`
	// Specifies the description of the project.
	Description *string `pulumi:"description"`
	// A name for the project.
	Name *string `pulumi:"name"`
	// Tags to apply to the project. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// A block that contains information about where Evidently is to store evaluation events for longer term storage, if you choose to do so. If you choose not to store these events, Evidently deletes them after using them to produce metrics and other experiment results that you can view. See below.
	DataDelivery pulumix.Input[*ProjectDataDeliveryArgs]
	// Specifies the description of the project.
	Description pulumix.Input[*string]
	// A name for the project.
	Name pulumix.Input[*string]
	// Tags to apply to the project. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

func (o ProjectOutput) ToOutput(ctx context.Context) pulumix.Output[Project] {
	return pulumix.Output[Project]{
		OutputState: o.OutputState,
	}
}

// The number of ongoing experiments currently in the project.
func (o ProjectOutput) ActiveExperimentCount() pulumix.Output[int] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[int] { return v.ActiveExperimentCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The number of ongoing launches currently in the project.
func (o ProjectOutput) ActiveLaunchCount() pulumix.Output[int] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[int] { return v.ActiveLaunchCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The ARN of the project.
func (o ProjectOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The date and time that the project is created.
func (o ProjectOutput) CreatedTime() pulumix.Output[string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[string] { return v.CreatedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A block that contains information about where Evidently is to store evaluation events for longer term storage, if you choose to do so. If you choose not to store these events, Evidently deletes them after using them to produce metrics and other experiment results that you can view. See below.
func (o ProjectOutput) DataDelivery() pulumix.GPtrOutput[ProjectDataDelivery, ProjectDataDeliveryOutput] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.GPtrOutput[ProjectDataDelivery, ProjectDataDeliveryOutput] {
		return v.DataDelivery
	})
	unwrapped := pulumix.Flatten[*ProjectDataDelivery, pulumix.GPtrOutput[ProjectDataDelivery, ProjectDataDeliveryOutput]](value)
	return pulumix.GPtrOutput[ProjectDataDelivery, ProjectDataDeliveryOutput]{OutputState: unwrapped.OutputState}
}

// Specifies the description of the project.
func (o ProjectOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The number of experiments currently in the project. This includes all experiments that have been created and not deleted, whether they are ongoing or not.
func (o ProjectOutput) ExperimentCount() pulumix.Output[int] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[int] { return v.ExperimentCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The number of features currently in the project.
func (o ProjectOutput) FeatureCount() pulumix.Output[int] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[int] { return v.FeatureCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The date and time that the project was most recently updated.
func (o ProjectOutput) LastUpdatedTime() pulumix.Output[string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[string] { return v.LastUpdatedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The number of launches currently in the project. This includes all launches that have been created and not deleted, whether they are ongoing or not.
func (o ProjectOutput) LaunchCount() pulumix.Output[int] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[int] { return v.LaunchCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// A name for the project.
func (o ProjectOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The current state of the project. Valid values are `AVAILABLE` and `UPDATING`.
func (o ProjectOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Tags to apply to the project. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ProjectOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ProjectOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ProjectOutput{})
}
