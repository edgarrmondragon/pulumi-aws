// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Kendra block list used for query suggestions for an index.
func LookupQuerySuggestionsBlockList(ctx *pulumi.Context, args *LookupQuerySuggestionsBlockListArgs, opts ...pulumi.InvokeOption) (*LookupQuerySuggestionsBlockListResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupQuerySuggestionsBlockListResult
	err := ctx.Invoke("aws:kendra/getQuerySuggestionsBlockList:getQuerySuggestionsBlockList", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQuerySuggestionsBlockList.
type LookupQuerySuggestionsBlockListArgs struct {
	// Identifier of the index that contains the block list.
	IndexId string `pulumi:"indexId"`
	// Identifier of the block list.
	QuerySuggestionsBlockListId string `pulumi:"querySuggestionsBlockListId"`
	// Metadata that helps organize the block list you create.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getQuerySuggestionsBlockList.
type LookupQuerySuggestionsBlockListResult struct {
	// ARN of the block list.
	Arn string `pulumi:"arn"`
	// Date-time a block list was created.
	CreatedAt string `pulumi:"createdAt"`
	// Description for the block list.
	Description string `pulumi:"description"`
	// Error message containing details if there are issues processing the block list.
	ErrorMessage string `pulumi:"errorMessage"`
	// Current size of the block list text file in S3.
	FileSizeBytes int `pulumi:"fileSizeBytes"`
	// The provider-assigned unique ID for this managed resource.
	Id      string `pulumi:"id"`
	IndexId string `pulumi:"indexId"`
	// Current number of valid, non-empty words or phrases in the block list text file.
	ItemCount int `pulumi:"itemCount"`
	// Name of the block list.
	Name                        string `pulumi:"name"`
	QuerySuggestionsBlockListId string `pulumi:"querySuggestionsBlockListId"`
	// ARN of a role with permission to access the S3 bucket that contains the block list. For more information, see [IAM Roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
	RoleArn string `pulumi:"roleArn"`
	// S3 location of the block list input data. Detailed below.
	SourceS3Paths []GetQuerySuggestionsBlockListSourceS3Path `pulumi:"sourceS3Paths"`
	// Current status of the block list. When the value is `ACTIVE`, the block list is ready for use.
	Status string `pulumi:"status"`
	// Metadata that helps organize the block list you create.
	Tags map[string]string `pulumi:"tags"`
	// Date and time that the block list was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupQuerySuggestionsBlockListOutput(ctx *pulumi.Context, args LookupQuerySuggestionsBlockListOutputArgs, opts ...pulumi.InvokeOption) LookupQuerySuggestionsBlockListResultOutput {
	outputResult := pulumix.ApplyErr[*LookupQuerySuggestionsBlockListArgs](args.ToOutput(), func(plainArgs *LookupQuerySuggestionsBlockListArgs) (*LookupQuerySuggestionsBlockListResult, error) {
		return LookupQuerySuggestionsBlockList(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupQuerySuggestionsBlockListResultOutput, *LookupQuerySuggestionsBlockListResult](outputResult)
}

// A collection of arguments for invoking getQuerySuggestionsBlockList.
type LookupQuerySuggestionsBlockListOutputArgs struct {
	// Identifier of the index that contains the block list.
	IndexId pulumix.Input[string] `pulumi:"indexId"`
	// Identifier of the block list.
	QuerySuggestionsBlockListId pulumix.Input[string] `pulumi:"querySuggestionsBlockListId"`
	// Metadata that helps organize the block list you create.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupQuerySuggestionsBlockListOutputArgs) ToOutput() pulumix.Output[*LookupQuerySuggestionsBlockListArgs] {
	allArgs := pulumix.All(
		args.IndexId.ToOutput(context.Background()).AsAny(),
		args.QuerySuggestionsBlockListId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupQuerySuggestionsBlockListArgs {
		return &LookupQuerySuggestionsBlockListArgs{
			IndexId:                     resolvedArgs[0].(string),
			QuerySuggestionsBlockListId: resolvedArgs[1].(string),
			Tags:                        resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupQuerySuggestionsBlockListResultOutput struct{ *pulumi.OutputState }

func (LookupQuerySuggestionsBlockListResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQuerySuggestionsBlockListResult)(nil)).Elem()
}

func (o LookupQuerySuggestionsBlockListResultOutput) ToOutput(context.Context) pulumix.Output[*LookupQuerySuggestionsBlockListResult] {
	return pulumix.Output[*LookupQuerySuggestionsBlockListResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupQuerySuggestionsBlockListResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuerySuggestionsBlockListResult](o, func(v *LookupQuerySuggestionsBlockListResult) string { return v.Arn })
}

func (o LookupQuerySuggestionsBlockListResultOutput) CreatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuerySuggestionsBlockListResult](o, func(v *LookupQuerySuggestionsBlockListResult) string { return v.CreatedAt })
}

func (o LookupQuerySuggestionsBlockListResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuerySuggestionsBlockListResult](o, func(v *LookupQuerySuggestionsBlockListResult) string { return v.Description })
}

func (o LookupQuerySuggestionsBlockListResultOutput) ErrorMessage() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuerySuggestionsBlockListResult](o, func(v *LookupQuerySuggestionsBlockListResult) string { return v.ErrorMessage })
}

func (o LookupQuerySuggestionsBlockListResultOutput) FileSizeBytes() pulumix.Output[int] {
	return pulumix.Apply[*LookupQuerySuggestionsBlockListResult](o, func(v *LookupQuerySuggestionsBlockListResult) int { return v.FileSizeBytes })
}

func (o LookupQuerySuggestionsBlockListResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuerySuggestionsBlockListResult](o, func(v *LookupQuerySuggestionsBlockListResult) string { return v.Id })
}

func (o LookupQuerySuggestionsBlockListResultOutput) IndexId() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuerySuggestionsBlockListResult](o, func(v *LookupQuerySuggestionsBlockListResult) string { return v.IndexId })
}

func (o LookupQuerySuggestionsBlockListResultOutput) ItemCount() pulumix.Output[int] {
	return pulumix.Apply[*LookupQuerySuggestionsBlockListResult](o, func(v *LookupQuerySuggestionsBlockListResult) int { return v.ItemCount })
}

func (o LookupQuerySuggestionsBlockListResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuerySuggestionsBlockListResult](o, func(v *LookupQuerySuggestionsBlockListResult) string { return v.Name })
}

func (o LookupQuerySuggestionsBlockListResultOutput) QuerySuggestionsBlockListId() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuerySuggestionsBlockListResult](o, func(v *LookupQuerySuggestionsBlockListResult) string { return v.QuerySuggestionsBlockListId })
}

func (o LookupQuerySuggestionsBlockListResultOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuerySuggestionsBlockListResult](o, func(v *LookupQuerySuggestionsBlockListResult) string { return v.RoleArn })
}

func (o LookupQuerySuggestionsBlockListResultOutput) SourceS3Paths() pulumix.GArrayOutput[GetQuerySuggestionsBlockListSourceS3Path, GetQuerySuggestionsBlockListSourceS3PathOutput] {
	value := pulumix.Apply[*LookupQuerySuggestionsBlockListResult](o, func(v *LookupQuerySuggestionsBlockListResult) []GetQuerySuggestionsBlockListSourceS3Path {
		return v.SourceS3Paths
	})
	return pulumix.GArrayOutput[GetQuerySuggestionsBlockListSourceS3Path, GetQuerySuggestionsBlockListSourceS3PathOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupQuerySuggestionsBlockListResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuerySuggestionsBlockListResult](o, func(v *LookupQuerySuggestionsBlockListResult) string { return v.Status })
}

func (o LookupQuerySuggestionsBlockListResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupQuerySuggestionsBlockListResult](o, func(v *LookupQuerySuggestionsBlockListResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupQuerySuggestionsBlockListResultOutput) UpdatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuerySuggestionsBlockListResult](o, func(v *LookupQuerySuggestionsBlockListResult) string { return v.UpdatedAt })
}
