// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a GameLift Fleet resource.
type Fleet struct {
	pulumi.CustomResourceState

	// Fleet ARN.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Build ARN.
	BuildArn pulumix.Output[string] `pulumi:"buildArn"`
	// ID of the GameLift Build to be deployed on the fleet.
	BuildId pulumix.Output[*string] `pulumi:"buildId"`
	// Prompts GameLift to generate a TLS/SSL certificate for the fleet. See certificate_configuration.
	CertificateConfiguration pulumix.GPtrOutput[FleetCertificateConfiguration, FleetCertificateConfigurationOutput] `pulumi:"certificateConfiguration"`
	// Human-readable description of the fleet.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. See below.
	Ec2InboundPermissions pulumix.GArrayOutput[FleetEc2InboundPermission, FleetEc2InboundPermissionOutput] `pulumi:"ec2InboundPermissions"`
	// Name of an EC2 instance typeE.g., `t2.micro`
	Ec2InstanceType pulumix.Output[string] `pulumi:"ec2InstanceType"`
	// Type of fleet. This value must be `ON_DEMAND` or `SPOT`. Defaults to `ON_DEMAND`.
	FleetType pulumix.Output[*string] `pulumi:"fleetType"`
	// ARN of an IAM role that instances in the fleet can assume.
	InstanceRoleArn pulumix.Output[*string]     `pulumi:"instanceRoleArn"`
	LogPaths        pulumix.ArrayOutput[string] `pulumi:"logPaths"`
	// List of names of metric groups to add this fleet to. A metric group tracks metrics across all fleets in the group. Defaults to `default`.
	MetricGroups pulumix.ArrayOutput[string] `pulumi:"metricGroups"`
	// The name of the fleet.
	Name pulumix.Output[string] `pulumi:"name"`
	// Game session protection policy to apply to all instances in this fleetE.g., `FullProtection`. Defaults to `NoProtection`.
	NewGameSessionProtectionPolicy pulumix.Output[*string] `pulumi:"newGameSessionProtectionPolicy"`
	// Operating system of the fleet's computing resources.
	OperatingSystem pulumix.Output[string] `pulumi:"operatingSystem"`
	// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
	ResourceCreationLimitPolicy pulumix.GPtrOutput[FleetResourceCreationLimitPolicy, FleetResourceCreationLimitPolicyOutput] `pulumi:"resourceCreationLimitPolicy"`
	// Instructions for launching server processes on each instance in the fleet. See below.
	RuntimeConfiguration pulumix.GPtrOutput[FleetRuntimeConfiguration, FleetRuntimeConfigurationOutput] `pulumi:"runtimeConfiguration"`
	// Script ARN.
	ScriptArn pulumix.Output[string] `pulumi:"scriptArn"`
	// ID of the GameLift Script to be deployed on the fleet.
	ScriptId pulumix.Output[*string] `pulumi:"scriptId"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewFleet registers a new resource with the given unique name, arguments, and options.
func NewFleet(ctx *pulumi.Context,
	name string, args *FleetArgs, opts ...pulumi.ResourceOption) (*Fleet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ec2InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'Ec2InstanceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Fleet
	err := ctx.RegisterResource("aws:gamelift/fleet:Fleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleet gets an existing Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetState, opts ...pulumi.ResourceOption) (*Fleet, error) {
	var resource Fleet
	err := ctx.ReadResource("aws:gamelift/fleet:Fleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fleet resources.
type fleetState struct {
	// Fleet ARN.
	Arn *string `pulumi:"arn"`
	// Build ARN.
	BuildArn *string `pulumi:"buildArn"`
	// ID of the GameLift Build to be deployed on the fleet.
	BuildId *string `pulumi:"buildId"`
	// Prompts GameLift to generate a TLS/SSL certificate for the fleet. See certificate_configuration.
	CertificateConfiguration *FleetCertificateConfiguration `pulumi:"certificateConfiguration"`
	// Human-readable description of the fleet.
	Description *string `pulumi:"description"`
	// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. See below.
	Ec2InboundPermissions []FleetEc2InboundPermission `pulumi:"ec2InboundPermissions"`
	// Name of an EC2 instance typeE.g., `t2.micro`
	Ec2InstanceType *string `pulumi:"ec2InstanceType"`
	// Type of fleet. This value must be `ON_DEMAND` or `SPOT`. Defaults to `ON_DEMAND`.
	FleetType *string `pulumi:"fleetType"`
	// ARN of an IAM role that instances in the fleet can assume.
	InstanceRoleArn *string  `pulumi:"instanceRoleArn"`
	LogPaths        []string `pulumi:"logPaths"`
	// List of names of metric groups to add this fleet to. A metric group tracks metrics across all fleets in the group. Defaults to `default`.
	MetricGroups []string `pulumi:"metricGroups"`
	// The name of the fleet.
	Name *string `pulumi:"name"`
	// Game session protection policy to apply to all instances in this fleetE.g., `FullProtection`. Defaults to `NoProtection`.
	NewGameSessionProtectionPolicy *string `pulumi:"newGameSessionProtectionPolicy"`
	// Operating system of the fleet's computing resources.
	OperatingSystem *string `pulumi:"operatingSystem"`
	// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
	ResourceCreationLimitPolicy *FleetResourceCreationLimitPolicy `pulumi:"resourceCreationLimitPolicy"`
	// Instructions for launching server processes on each instance in the fleet. See below.
	RuntimeConfiguration *FleetRuntimeConfiguration `pulumi:"runtimeConfiguration"`
	// Script ARN.
	ScriptArn *string `pulumi:"scriptArn"`
	// ID of the GameLift Script to be deployed on the fleet.
	ScriptId *string `pulumi:"scriptId"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type FleetState struct {
	// Fleet ARN.
	Arn pulumix.Input[*string]
	// Build ARN.
	BuildArn pulumix.Input[*string]
	// ID of the GameLift Build to be deployed on the fleet.
	BuildId pulumix.Input[*string]
	// Prompts GameLift to generate a TLS/SSL certificate for the fleet. See certificate_configuration.
	CertificateConfiguration pulumix.Input[*FleetCertificateConfigurationArgs]
	// Human-readable description of the fleet.
	Description pulumix.Input[*string]
	// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. See below.
	Ec2InboundPermissions pulumix.Input[[]*FleetEc2InboundPermissionArgs]
	// Name of an EC2 instance typeE.g., `t2.micro`
	Ec2InstanceType pulumix.Input[*string]
	// Type of fleet. This value must be `ON_DEMAND` or `SPOT`. Defaults to `ON_DEMAND`.
	FleetType pulumix.Input[*string]
	// ARN of an IAM role that instances in the fleet can assume.
	InstanceRoleArn pulumix.Input[*string]
	LogPaths        pulumix.Input[[]string]
	// List of names of metric groups to add this fleet to. A metric group tracks metrics across all fleets in the group. Defaults to `default`.
	MetricGroups pulumix.Input[[]string]
	// The name of the fleet.
	Name pulumix.Input[*string]
	// Game session protection policy to apply to all instances in this fleetE.g., `FullProtection`. Defaults to `NoProtection`.
	NewGameSessionProtectionPolicy pulumix.Input[*string]
	// Operating system of the fleet's computing resources.
	OperatingSystem pulumix.Input[*string]
	// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
	ResourceCreationLimitPolicy pulumix.Input[*FleetResourceCreationLimitPolicyArgs]
	// Instructions for launching server processes on each instance in the fleet. See below.
	RuntimeConfiguration pulumix.Input[*FleetRuntimeConfigurationArgs]
	// Script ARN.
	ScriptArn pulumix.Input[*string]
	// ID of the GameLift Script to be deployed on the fleet.
	ScriptId pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (FleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetState)(nil)).Elem()
}

type fleetArgs struct {
	// ID of the GameLift Build to be deployed on the fleet.
	BuildId *string `pulumi:"buildId"`
	// Prompts GameLift to generate a TLS/SSL certificate for the fleet. See certificate_configuration.
	CertificateConfiguration *FleetCertificateConfiguration `pulumi:"certificateConfiguration"`
	// Human-readable description of the fleet.
	Description *string `pulumi:"description"`
	// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. See below.
	Ec2InboundPermissions []FleetEc2InboundPermission `pulumi:"ec2InboundPermissions"`
	// Name of an EC2 instance typeE.g., `t2.micro`
	Ec2InstanceType string `pulumi:"ec2InstanceType"`
	// Type of fleet. This value must be `ON_DEMAND` or `SPOT`. Defaults to `ON_DEMAND`.
	FleetType *string `pulumi:"fleetType"`
	// ARN of an IAM role that instances in the fleet can assume.
	InstanceRoleArn *string `pulumi:"instanceRoleArn"`
	// List of names of metric groups to add this fleet to. A metric group tracks metrics across all fleets in the group. Defaults to `default`.
	MetricGroups []string `pulumi:"metricGroups"`
	// The name of the fleet.
	Name *string `pulumi:"name"`
	// Game session protection policy to apply to all instances in this fleetE.g., `FullProtection`. Defaults to `NoProtection`.
	NewGameSessionProtectionPolicy *string `pulumi:"newGameSessionProtectionPolicy"`
	// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
	ResourceCreationLimitPolicy *FleetResourceCreationLimitPolicy `pulumi:"resourceCreationLimitPolicy"`
	// Instructions for launching server processes on each instance in the fleet. See below.
	RuntimeConfiguration *FleetRuntimeConfiguration `pulumi:"runtimeConfiguration"`
	// ID of the GameLift Script to be deployed on the fleet.
	ScriptId *string `pulumi:"scriptId"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Fleet resource.
type FleetArgs struct {
	// ID of the GameLift Build to be deployed on the fleet.
	BuildId pulumix.Input[*string]
	// Prompts GameLift to generate a TLS/SSL certificate for the fleet. See certificate_configuration.
	CertificateConfiguration pulumix.Input[*FleetCertificateConfigurationArgs]
	// Human-readable description of the fleet.
	Description pulumix.Input[*string]
	// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. See below.
	Ec2InboundPermissions pulumix.Input[[]*FleetEc2InboundPermissionArgs]
	// Name of an EC2 instance typeE.g., `t2.micro`
	Ec2InstanceType pulumix.Input[string]
	// Type of fleet. This value must be `ON_DEMAND` or `SPOT`. Defaults to `ON_DEMAND`.
	FleetType pulumix.Input[*string]
	// ARN of an IAM role that instances in the fleet can assume.
	InstanceRoleArn pulumix.Input[*string]
	// List of names of metric groups to add this fleet to. A metric group tracks metrics across all fleets in the group. Defaults to `default`.
	MetricGroups pulumix.Input[[]string]
	// The name of the fleet.
	Name pulumix.Input[*string]
	// Game session protection policy to apply to all instances in this fleetE.g., `FullProtection`. Defaults to `NoProtection`.
	NewGameSessionProtectionPolicy pulumix.Input[*string]
	// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
	ResourceCreationLimitPolicy pulumix.Input[*FleetResourceCreationLimitPolicyArgs]
	// Instructions for launching server processes on each instance in the fleet. See below.
	RuntimeConfiguration pulumix.Input[*FleetRuntimeConfigurationArgs]
	// ID of the GameLift Script to be deployed on the fleet.
	ScriptId pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (FleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetArgs)(nil)).Elem()
}

type FleetOutput struct{ *pulumi.OutputState }

func (FleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Fleet)(nil)).Elem()
}

func (o FleetOutput) ToFleetOutput() FleetOutput {
	return o
}

func (o FleetOutput) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return o
}

func (o FleetOutput) ToOutput(ctx context.Context) pulumix.Output[Fleet] {
	return pulumix.Output[Fleet]{
		OutputState: o.OutputState,
	}
}

// Fleet ARN.
func (o FleetOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Build ARN.
func (o FleetOutput) BuildArn() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.BuildArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the GameLift Build to be deployed on the fleet.
func (o FleetOutput) BuildId() pulumix.Output[*string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[*string] { return v.BuildId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Prompts GameLift to generate a TLS/SSL certificate for the fleet. See certificate_configuration.
func (o FleetOutput) CertificateConfiguration() pulumix.GPtrOutput[FleetCertificateConfiguration, FleetCertificateConfigurationOutput] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.GPtrOutput[FleetCertificateConfiguration, FleetCertificateConfigurationOutput] {
		return v.CertificateConfiguration
	})
	unwrapped := pulumix.Flatten[*FleetCertificateConfiguration, pulumix.GPtrOutput[FleetCertificateConfiguration, FleetCertificateConfigurationOutput]](value)
	return pulumix.GPtrOutput[FleetCertificateConfiguration, FleetCertificateConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Human-readable description of the fleet.
func (o FleetOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. See below.
func (o FleetOutput) Ec2InboundPermissions() pulumix.GArrayOutput[FleetEc2InboundPermission, FleetEc2InboundPermissionOutput] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.GArrayOutput[FleetEc2InboundPermission, FleetEc2InboundPermissionOutput] {
		return v.Ec2InboundPermissions
	})
	unwrapped := pulumix.Flatten[[]FleetEc2InboundPermission, pulumix.GArrayOutput[FleetEc2InboundPermission, FleetEc2InboundPermissionOutput]](value)
	return pulumix.GArrayOutput[FleetEc2InboundPermission, FleetEc2InboundPermissionOutput]{OutputState: unwrapped.OutputState}
}

// Name of an EC2 instance typeE.g., `t2.micro`
func (o FleetOutput) Ec2InstanceType() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.Ec2InstanceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Type of fleet. This value must be `ON_DEMAND` or `SPOT`. Defaults to `ON_DEMAND`.
func (o FleetOutput) FleetType() pulumix.Output[*string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[*string] { return v.FleetType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ARN of an IAM role that instances in the fleet can assume.
func (o FleetOutput) InstanceRoleArn() pulumix.Output[*string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[*string] { return v.InstanceRoleArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o FleetOutput) LogPaths() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.ArrayOutput[string] { return v.LogPaths })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// List of names of metric groups to add this fleet to. A metric group tracks metrics across all fleets in the group. Defaults to `default`.
func (o FleetOutput) MetricGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.ArrayOutput[string] { return v.MetricGroups })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The name of the fleet.
func (o FleetOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Game session protection policy to apply to all instances in this fleetE.g., `FullProtection`. Defaults to `NoProtection`.
func (o FleetOutput) NewGameSessionProtectionPolicy() pulumix.Output[*string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[*string] { return v.NewGameSessionProtectionPolicy })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Operating system of the fleet's computing resources.
func (o FleetOutput) OperatingSystem() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.OperatingSystem })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
func (o FleetOutput) ResourceCreationLimitPolicy() pulumix.GPtrOutput[FleetResourceCreationLimitPolicy, FleetResourceCreationLimitPolicyOutput] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.GPtrOutput[FleetResourceCreationLimitPolicy, FleetResourceCreationLimitPolicyOutput] {
		return v.ResourceCreationLimitPolicy
	})
	unwrapped := pulumix.Flatten[*FleetResourceCreationLimitPolicy, pulumix.GPtrOutput[FleetResourceCreationLimitPolicy, FleetResourceCreationLimitPolicyOutput]](value)
	return pulumix.GPtrOutput[FleetResourceCreationLimitPolicy, FleetResourceCreationLimitPolicyOutput]{OutputState: unwrapped.OutputState}
}

// Instructions for launching server processes on each instance in the fleet. See below.
func (o FleetOutput) RuntimeConfiguration() pulumix.GPtrOutput[FleetRuntimeConfiguration, FleetRuntimeConfigurationOutput] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.GPtrOutput[FleetRuntimeConfiguration, FleetRuntimeConfigurationOutput] {
		return v.RuntimeConfiguration
	})
	unwrapped := pulumix.Flatten[*FleetRuntimeConfiguration, pulumix.GPtrOutput[FleetRuntimeConfiguration, FleetRuntimeConfigurationOutput]](value)
	return pulumix.GPtrOutput[FleetRuntimeConfiguration, FleetRuntimeConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Script ARN.
func (o FleetOutput) ScriptArn() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.ScriptArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the GameLift Script to be deployed on the fleet.
func (o FleetOutput) ScriptId() pulumix.Output[*string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[*string] { return v.ScriptId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FleetOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o FleetOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(FleetOutput{})
}
