// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Glue Schema resource.
type Schema struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the schema.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The compatibility mode of the schema. Values values are: `NONE`, `DISABLED`, `BACKWARD`, `BACKWARD_ALL`, `FORWARD`, `FORWARD_ALL`, `FULL`, and `FULL_ALL`.
	Compatibility pulumix.Output[string] `pulumi:"compatibility"`
	// The data format of the schema definition. Valid values are `AVRO`, `JSON` and `PROTOBUF`.
	DataFormat pulumix.Output[string] `pulumi:"dataFormat"`
	// A description of the schema.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The latest version of the schema associated with the returned schema definition.
	LatestSchemaVersion pulumix.Output[int] `pulumi:"latestSchemaVersion"`
	// The next version of the schema associated with the returned schema definition.
	NextSchemaVersion pulumix.Output[int] `pulumi:"nextSchemaVersion"`
	// The ARN of the Glue Registry to create the schema in.
	RegistryArn pulumix.Output[string] `pulumi:"registryArn"`
	// The name of the Glue Registry.
	RegistryName pulumix.Output[string] `pulumi:"registryName"`
	// The version number of the checkpoint (the last time the compatibility mode was changed).
	SchemaCheckpoint pulumix.Output[int] `pulumi:"schemaCheckpoint"`
	// The schema definition using the `dataFormat` setting for `schemaName`.
	SchemaDefinition pulumix.Output[string] `pulumi:"schemaDefinition"`
	// The Name of the schema.
	SchemaName pulumix.Output[string] `pulumi:"schemaName"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewSchema registers a new resource with the given unique name, arguments, and options.
func NewSchema(ctx *pulumi.Context,
	name string, args *SchemaArgs, opts ...pulumi.ResourceOption) (*Schema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Compatibility == nil {
		return nil, errors.New("invalid value for required argument 'Compatibility'")
	}
	if args.DataFormat == nil {
		return nil, errors.New("invalid value for required argument 'DataFormat'")
	}
	if args.SchemaDefinition == nil {
		return nil, errors.New("invalid value for required argument 'SchemaDefinition'")
	}
	if args.SchemaName == nil {
		return nil, errors.New("invalid value for required argument 'SchemaName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Schema
	err := ctx.RegisterResource("aws:glue/schema:Schema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchema gets an existing Schema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaState, opts ...pulumi.ResourceOption) (*Schema, error) {
	var resource Schema
	err := ctx.ReadResource("aws:glue/schema:Schema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schema resources.
type schemaState struct {
	// Amazon Resource Name (ARN) of the schema.
	Arn *string `pulumi:"arn"`
	// The compatibility mode of the schema. Values values are: `NONE`, `DISABLED`, `BACKWARD`, `BACKWARD_ALL`, `FORWARD`, `FORWARD_ALL`, `FULL`, and `FULL_ALL`.
	Compatibility *string `pulumi:"compatibility"`
	// The data format of the schema definition. Valid values are `AVRO`, `JSON` and `PROTOBUF`.
	DataFormat *string `pulumi:"dataFormat"`
	// A description of the schema.
	Description *string `pulumi:"description"`
	// The latest version of the schema associated with the returned schema definition.
	LatestSchemaVersion *int `pulumi:"latestSchemaVersion"`
	// The next version of the schema associated with the returned schema definition.
	NextSchemaVersion *int `pulumi:"nextSchemaVersion"`
	// The ARN of the Glue Registry to create the schema in.
	RegistryArn *string `pulumi:"registryArn"`
	// The name of the Glue Registry.
	RegistryName *string `pulumi:"registryName"`
	// The version number of the checkpoint (the last time the compatibility mode was changed).
	SchemaCheckpoint *int `pulumi:"schemaCheckpoint"`
	// The schema definition using the `dataFormat` setting for `schemaName`.
	SchemaDefinition *string `pulumi:"schemaDefinition"`
	// The Name of the schema.
	SchemaName *string `pulumi:"schemaName"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type SchemaState struct {
	// Amazon Resource Name (ARN) of the schema.
	Arn pulumix.Input[*string]
	// The compatibility mode of the schema. Values values are: `NONE`, `DISABLED`, `BACKWARD`, `BACKWARD_ALL`, `FORWARD`, `FORWARD_ALL`, `FULL`, and `FULL_ALL`.
	Compatibility pulumix.Input[*string]
	// The data format of the schema definition. Valid values are `AVRO`, `JSON` and `PROTOBUF`.
	DataFormat pulumix.Input[*string]
	// A description of the schema.
	Description pulumix.Input[*string]
	// The latest version of the schema associated with the returned schema definition.
	LatestSchemaVersion pulumix.Input[*int]
	// The next version of the schema associated with the returned schema definition.
	NextSchemaVersion pulumix.Input[*int]
	// The ARN of the Glue Registry to create the schema in.
	RegistryArn pulumix.Input[*string]
	// The name of the Glue Registry.
	RegistryName pulumix.Input[*string]
	// The version number of the checkpoint (the last time the compatibility mode was changed).
	SchemaCheckpoint pulumix.Input[*int]
	// The schema definition using the `dataFormat` setting for `schemaName`.
	SchemaDefinition pulumix.Input[*string]
	// The Name of the schema.
	SchemaName pulumix.Input[*string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (SchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaState)(nil)).Elem()
}

type schemaArgs struct {
	// The compatibility mode of the schema. Values values are: `NONE`, `DISABLED`, `BACKWARD`, `BACKWARD_ALL`, `FORWARD`, `FORWARD_ALL`, `FULL`, and `FULL_ALL`.
	Compatibility string `pulumi:"compatibility"`
	// The data format of the schema definition. Valid values are `AVRO`, `JSON` and `PROTOBUF`.
	DataFormat string `pulumi:"dataFormat"`
	// A description of the schema.
	Description *string `pulumi:"description"`
	// The ARN of the Glue Registry to create the schema in.
	RegistryArn *string `pulumi:"registryArn"`
	// The schema definition using the `dataFormat` setting for `schemaName`.
	SchemaDefinition string `pulumi:"schemaDefinition"`
	// The Name of the schema.
	SchemaName string `pulumi:"schemaName"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Schema resource.
type SchemaArgs struct {
	// The compatibility mode of the schema. Values values are: `NONE`, `DISABLED`, `BACKWARD`, `BACKWARD_ALL`, `FORWARD`, `FORWARD_ALL`, `FULL`, and `FULL_ALL`.
	Compatibility pulumix.Input[string]
	// The data format of the schema definition. Valid values are `AVRO`, `JSON` and `PROTOBUF`.
	DataFormat pulumix.Input[string]
	// A description of the schema.
	Description pulumix.Input[*string]
	// The ARN of the Glue Registry to create the schema in.
	RegistryArn pulumix.Input[*string]
	// The schema definition using the `dataFormat` setting for `schemaName`.
	SchemaDefinition pulumix.Input[string]
	// The Name of the schema.
	SchemaName pulumix.Input[string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (SchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaArgs)(nil)).Elem()
}

type SchemaOutput struct{ *pulumi.OutputState }

func (SchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Schema)(nil)).Elem()
}

func (o SchemaOutput) ToSchemaOutput() SchemaOutput {
	return o
}

func (o SchemaOutput) ToSchemaOutputWithContext(ctx context.Context) SchemaOutput {
	return o
}

func (o SchemaOutput) ToOutput(ctx context.Context) pulumix.Output[Schema] {
	return pulumix.Output[Schema]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the schema.
func (o SchemaOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The compatibility mode of the schema. Values values are: `NONE`, `DISABLED`, `BACKWARD`, `BACKWARD_ALL`, `FORWARD`, `FORWARD_ALL`, `FULL`, and `FULL_ALL`.
func (o SchemaOutput) Compatibility() pulumix.Output[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[string] { return v.Compatibility })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The data format of the schema definition. Valid values are `AVRO`, `JSON` and `PROTOBUF`.
func (o SchemaOutput) DataFormat() pulumix.Output[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[string] { return v.DataFormat })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description of the schema.
func (o SchemaOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The latest version of the schema associated with the returned schema definition.
func (o SchemaOutput) LatestSchemaVersion() pulumix.Output[int] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[int] { return v.LatestSchemaVersion })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The next version of the schema associated with the returned schema definition.
func (o SchemaOutput) NextSchemaVersion() pulumix.Output[int] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[int] { return v.NextSchemaVersion })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The ARN of the Glue Registry to create the schema in.
func (o SchemaOutput) RegistryArn() pulumix.Output[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[string] { return v.RegistryArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Glue Registry.
func (o SchemaOutput) RegistryName() pulumix.Output[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[string] { return v.RegistryName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The version number of the checkpoint (the last time the compatibility mode was changed).
func (o SchemaOutput) SchemaCheckpoint() pulumix.Output[int] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[int] { return v.SchemaCheckpoint })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The schema definition using the `dataFormat` setting for `schemaName`.
func (o SchemaOutput) SchemaDefinition() pulumix.Output[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[string] { return v.SchemaDefinition })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Name of the schema.
func (o SchemaOutput) SchemaName() pulumix.Output[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[string] { return v.SchemaName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SchemaOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SchemaOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(SchemaOutput{})
}
