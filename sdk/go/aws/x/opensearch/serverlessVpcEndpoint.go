// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS OpenSearchServerless VPC Endpoint.
type ServerlessVpcEndpoint struct {
	pulumi.CustomResourceState

	// Name of the interface endpoint.
	Name pulumix.Output[string] `pulumi:"name"`
	// One or more security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint. Up to 5 security groups can be provided.
	SecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"securityGroupIds"`
	// One or more subnet IDs from which you'll access OpenSearch Serverless. Up to 6 subnets can be provided.
	SubnetIds pulumix.ArrayOutput[string]                                                            `pulumi:"subnetIds"`
	Timeouts  pulumix.GPtrOutput[ServerlessVpcEndpointTimeouts, ServerlessVpcEndpointTimeoutsOutput] `pulumi:"timeouts"`
	// ID of the VPC from which you'll access OpenSearch Serverless.
	//
	// The following arguments are optional:
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewServerlessVpcEndpoint registers a new resource with the given unique name, arguments, and options.
func NewServerlessVpcEndpoint(ctx *pulumi.Context,
	name string, args *ServerlessVpcEndpointArgs, opts ...pulumi.ResourceOption) (*ServerlessVpcEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerlessVpcEndpoint
	err := ctx.RegisterResource("aws:opensearch/serverlessVpcEndpoint:ServerlessVpcEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerlessVpcEndpoint gets an existing ServerlessVpcEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerlessVpcEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerlessVpcEndpointState, opts ...pulumi.ResourceOption) (*ServerlessVpcEndpoint, error) {
	var resource ServerlessVpcEndpoint
	err := ctx.ReadResource("aws:opensearch/serverlessVpcEndpoint:ServerlessVpcEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerlessVpcEndpoint resources.
type serverlessVpcEndpointState struct {
	// Name of the interface endpoint.
	Name *string `pulumi:"name"`
	// One or more security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint. Up to 5 security groups can be provided.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// One or more subnet IDs from which you'll access OpenSearch Serverless. Up to 6 subnets can be provided.
	SubnetIds []string                       `pulumi:"subnetIds"`
	Timeouts  *ServerlessVpcEndpointTimeouts `pulumi:"timeouts"`
	// ID of the VPC from which you'll access OpenSearch Serverless.
	//
	// The following arguments are optional:
	VpcId *string `pulumi:"vpcId"`
}

type ServerlessVpcEndpointState struct {
	// Name of the interface endpoint.
	Name pulumix.Input[*string]
	// One or more security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint. Up to 5 security groups can be provided.
	SecurityGroupIds pulumix.Input[[]string]
	// One or more subnet IDs from which you'll access OpenSearch Serverless. Up to 6 subnets can be provided.
	SubnetIds pulumix.Input[[]string]
	Timeouts  pulumix.Input[*ServerlessVpcEndpointTimeoutsArgs]
	// ID of the VPC from which you'll access OpenSearch Serverless.
	//
	// The following arguments are optional:
	VpcId pulumix.Input[*string]
}

func (ServerlessVpcEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessVpcEndpointState)(nil)).Elem()
}

type serverlessVpcEndpointArgs struct {
	// Name of the interface endpoint.
	Name *string `pulumi:"name"`
	// One or more security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint. Up to 5 security groups can be provided.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// One or more subnet IDs from which you'll access OpenSearch Serverless. Up to 6 subnets can be provided.
	SubnetIds []string                       `pulumi:"subnetIds"`
	Timeouts  *ServerlessVpcEndpointTimeouts `pulumi:"timeouts"`
	// ID of the VPC from which you'll access OpenSearch Serverless.
	//
	// The following arguments are optional:
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a ServerlessVpcEndpoint resource.
type ServerlessVpcEndpointArgs struct {
	// Name of the interface endpoint.
	Name pulumix.Input[*string]
	// One or more security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint. Up to 5 security groups can be provided.
	SecurityGroupIds pulumix.Input[[]string]
	// One or more subnet IDs from which you'll access OpenSearch Serverless. Up to 6 subnets can be provided.
	SubnetIds pulumix.Input[[]string]
	Timeouts  pulumix.Input[*ServerlessVpcEndpointTimeoutsArgs]
	// ID of the VPC from which you'll access OpenSearch Serverless.
	//
	// The following arguments are optional:
	VpcId pulumix.Input[string]
}

func (ServerlessVpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessVpcEndpointArgs)(nil)).Elem()
}

type ServerlessVpcEndpointOutput struct{ *pulumi.OutputState }

func (ServerlessVpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessVpcEndpoint)(nil)).Elem()
}

func (o ServerlessVpcEndpointOutput) ToServerlessVpcEndpointOutput() ServerlessVpcEndpointOutput {
	return o
}

func (o ServerlessVpcEndpointOutput) ToServerlessVpcEndpointOutputWithContext(ctx context.Context) ServerlessVpcEndpointOutput {
	return o
}

func (o ServerlessVpcEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[ServerlessVpcEndpoint] {
	return pulumix.Output[ServerlessVpcEndpoint]{
		OutputState: o.OutputState,
	}
}

// Name of the interface endpoint.
func (o ServerlessVpcEndpointOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessVpcEndpoint](o, func(v ServerlessVpcEndpoint) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// One or more security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint. Up to 5 security groups can be provided.
func (o ServerlessVpcEndpointOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ServerlessVpcEndpoint](o, func(v ServerlessVpcEndpoint) pulumix.ArrayOutput[string] { return v.SecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// One or more subnet IDs from which you'll access OpenSearch Serverless. Up to 6 subnets can be provided.
func (o ServerlessVpcEndpointOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ServerlessVpcEndpoint](o, func(v ServerlessVpcEndpoint) pulumix.ArrayOutput[string] { return v.SubnetIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o ServerlessVpcEndpointOutput) Timeouts() pulumix.GPtrOutput[ServerlessVpcEndpointTimeouts, ServerlessVpcEndpointTimeoutsOutput] {
	value := pulumix.Apply[ServerlessVpcEndpoint](o, func(v ServerlessVpcEndpoint) pulumix.GPtrOutput[ServerlessVpcEndpointTimeouts, ServerlessVpcEndpointTimeoutsOutput] {
		return v.Timeouts
	})
	unwrapped := pulumix.Flatten[*ServerlessVpcEndpointTimeouts, pulumix.GPtrOutput[ServerlessVpcEndpointTimeouts, ServerlessVpcEndpointTimeoutsOutput]](value)
	return pulumix.GPtrOutput[ServerlessVpcEndpointTimeouts, ServerlessVpcEndpointTimeoutsOutput]{OutputState: unwrapped.OutputState}
}

// ID of the VPC from which you'll access OpenSearch Serverless.
//
// The following arguments are optional:
func (o ServerlessVpcEndpointOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessVpcEndpoint](o, func(v ServerlessVpcEndpoint) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ServerlessVpcEndpointOutput{})
}
