// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages the accepter's side of an EC2 Transit Gateway Peering Attachment.
type PeeringAttachmentAccepter struct {
	pulumi.CustomResourceState

	// Identifier of the AWS account that owns the EC2 TGW peering.
	PeerAccountId pulumix.Output[string] `pulumi:"peerAccountId"`
	PeerRegion    pulumix.Output[string] `pulumi:"peerRegion"`
	// Identifier of EC2 Transit Gateway to peer with.
	PeerTransitGatewayId pulumix.Output[string] `pulumi:"peerTransitGatewayId"`
	// Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The ID of the EC2 Transit Gateway Peering Attachment to manage.
	TransitGatewayAttachmentId pulumix.Output[string] `pulumi:"transitGatewayAttachmentId"`
	// Identifier of EC2 Transit Gateway.
	TransitGatewayId pulumix.Output[string] `pulumi:"transitGatewayId"`
}

// NewPeeringAttachmentAccepter registers a new resource with the given unique name, arguments, and options.
func NewPeeringAttachmentAccepter(ctx *pulumi.Context,
	name string, args *PeeringAttachmentAccepterArgs, opts ...pulumi.ResourceOption) (*PeeringAttachmentAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitGatewayAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayAttachmentId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:ec2/transitGatewayPeeringAttachmentAccepter:TransitGatewayPeeringAttachmentAccepter"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PeeringAttachmentAccepter
	err := ctx.RegisterResource("aws:ec2transitgateway/peeringAttachmentAccepter:PeeringAttachmentAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeeringAttachmentAccepter gets an existing PeeringAttachmentAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeeringAttachmentAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeeringAttachmentAccepterState, opts ...pulumi.ResourceOption) (*PeeringAttachmentAccepter, error) {
	var resource PeeringAttachmentAccepter
	err := ctx.ReadResource("aws:ec2transitgateway/peeringAttachmentAccepter:PeeringAttachmentAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PeeringAttachmentAccepter resources.
type peeringAttachmentAccepterState struct {
	// Identifier of the AWS account that owns the EC2 TGW peering.
	PeerAccountId *string `pulumi:"peerAccountId"`
	PeerRegion    *string `pulumi:"peerRegion"`
	// Identifier of EC2 Transit Gateway to peer with.
	PeerTransitGatewayId *string `pulumi:"peerTransitGatewayId"`
	// Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ID of the EC2 Transit Gateway Peering Attachment to manage.
	TransitGatewayAttachmentId *string `pulumi:"transitGatewayAttachmentId"`
	// Identifier of EC2 Transit Gateway.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
}

type PeeringAttachmentAccepterState struct {
	// Identifier of the AWS account that owns the EC2 TGW peering.
	PeerAccountId pulumix.Input[*string]
	PeerRegion    pulumix.Input[*string]
	// Identifier of EC2 Transit Gateway to peer with.
	PeerTransitGatewayId pulumix.Input[*string]
	// Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The ID of the EC2 Transit Gateway Peering Attachment to manage.
	TransitGatewayAttachmentId pulumix.Input[*string]
	// Identifier of EC2 Transit Gateway.
	TransitGatewayId pulumix.Input[*string]
}

func (PeeringAttachmentAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringAttachmentAccepterState)(nil)).Elem()
}

type peeringAttachmentAccepterArgs struct {
	// Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the EC2 Transit Gateway Peering Attachment to manage.
	TransitGatewayAttachmentId string `pulumi:"transitGatewayAttachmentId"`
}

// The set of arguments for constructing a PeeringAttachmentAccepter resource.
type PeeringAttachmentAccepterArgs struct {
	// Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The ID of the EC2 Transit Gateway Peering Attachment to manage.
	TransitGatewayAttachmentId pulumix.Input[string]
}

func (PeeringAttachmentAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringAttachmentAccepterArgs)(nil)).Elem()
}

type PeeringAttachmentAccepterOutput struct{ *pulumi.OutputState }

func (PeeringAttachmentAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringAttachmentAccepter)(nil)).Elem()
}

func (o PeeringAttachmentAccepterOutput) ToPeeringAttachmentAccepterOutput() PeeringAttachmentAccepterOutput {
	return o
}

func (o PeeringAttachmentAccepterOutput) ToPeeringAttachmentAccepterOutputWithContext(ctx context.Context) PeeringAttachmentAccepterOutput {
	return o
}

func (o PeeringAttachmentAccepterOutput) ToOutput(ctx context.Context) pulumix.Output[PeeringAttachmentAccepter] {
	return pulumix.Output[PeeringAttachmentAccepter]{
		OutputState: o.OutputState,
	}
}

// Identifier of the AWS account that owns the EC2 TGW peering.
func (o PeeringAttachmentAccepterOutput) PeerAccountId() pulumix.Output[string] {
	value := pulumix.Apply[PeeringAttachmentAccepter](o, func(v PeeringAttachmentAccepter) pulumix.Output[string] { return v.PeerAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o PeeringAttachmentAccepterOutput) PeerRegion() pulumix.Output[string] {
	value := pulumix.Apply[PeeringAttachmentAccepter](o, func(v PeeringAttachmentAccepter) pulumix.Output[string] { return v.PeerRegion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identifier of EC2 Transit Gateway to peer with.
func (o PeeringAttachmentAccepterOutput) PeerTransitGatewayId() pulumix.Output[string] {
	value := pulumix.Apply[PeeringAttachmentAccepter](o, func(v PeeringAttachmentAccepter) pulumix.Output[string] { return v.PeerTransitGatewayId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PeeringAttachmentAccepterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[PeeringAttachmentAccepter](o, func(v PeeringAttachmentAccepter) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o PeeringAttachmentAccepterOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[PeeringAttachmentAccepter](o, func(v PeeringAttachmentAccepter) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of the EC2 Transit Gateway Peering Attachment to manage.
func (o PeeringAttachmentAccepterOutput) TransitGatewayAttachmentId() pulumix.Output[string] {
	value := pulumix.Apply[PeeringAttachmentAccepter](o, func(v PeeringAttachmentAccepter) pulumix.Output[string] { return v.TransitGatewayAttachmentId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identifier of EC2 Transit Gateway.
func (o PeeringAttachmentAccepterOutput) TransitGatewayId() pulumix.Output[string] {
	value := pulumix.Apply[PeeringAttachmentAccepter](o, func(v PeeringAttachmentAccepter) pulumix.Output[string] { return v.TransitGatewayId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(PeeringAttachmentAccepterOutput{})
}
