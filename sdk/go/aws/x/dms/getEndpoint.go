// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS DMS (Database Migration) Endpoint.
func LookupEndpoint(ctx *pulumi.Context, args *LookupEndpointArgs, opts ...pulumi.InvokeOption) (*LookupEndpointResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEndpointResult
	err := ctx.Invoke("aws:dms/getEndpoint:getEndpoint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEndpoint.
type LookupEndpointArgs struct {
	// Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
	EndpointId string            `pulumi:"endpointId"`
	Tags       map[string]string `pulumi:"tags"`
}

// A collection of values returned by getEndpoint.
type LookupEndpointResult struct {
	CertificateArn            string                            `pulumi:"certificateArn"`
	DatabaseName              string                            `pulumi:"databaseName"`
	ElasticsearchSettings     []GetEndpointElasticsearchSetting `pulumi:"elasticsearchSettings"`
	EndpointArn               string                            `pulumi:"endpointArn"`
	EndpointId                string                            `pulumi:"endpointId"`
	EndpointType              string                            `pulumi:"endpointType"`
	EngineName                string                            `pulumi:"engineName"`
	ExtraConnectionAttributes string                            `pulumi:"extraConnectionAttributes"`
	// The provider-assigned unique ID for this managed resource.
	Id                          string                       `pulumi:"id"`
	KafkaSettings               []GetEndpointKafkaSetting    `pulumi:"kafkaSettings"`
	KinesisSettings             []GetEndpointKinesisSetting  `pulumi:"kinesisSettings"`
	KmsKeyArn                   string                       `pulumi:"kmsKeyArn"`
	MongodbSettings             []GetEndpointMongodbSetting  `pulumi:"mongodbSettings"`
	Password                    string                       `pulumi:"password"`
	Port                        int                          `pulumi:"port"`
	RedisSettings               []GetEndpointRedisSetting    `pulumi:"redisSettings"`
	RedshiftSettings            []GetEndpointRedshiftSetting `pulumi:"redshiftSettings"`
	S3Settings                  []GetEndpointS3Setting       `pulumi:"s3Settings"`
	SecretsManagerAccessRoleArn string                       `pulumi:"secretsManagerAccessRoleArn"`
	SecretsManagerArn           string                       `pulumi:"secretsManagerArn"`
	ServerName                  string                       `pulumi:"serverName"`
	ServiceAccessRole           string                       `pulumi:"serviceAccessRole"`
	SslMode                     string                       `pulumi:"sslMode"`
	Tags                        map[string]string            `pulumi:"tags"`
	Username                    string                       `pulumi:"username"`
}

func LookupEndpointOutput(ctx *pulumi.Context, args LookupEndpointOutputArgs, opts ...pulumi.InvokeOption) LookupEndpointResultOutput {
	outputResult := pulumix.ApplyErr[*LookupEndpointArgs](args.ToOutput(), func(plainArgs *LookupEndpointArgs) (*LookupEndpointResult, error) {
		return LookupEndpoint(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupEndpointResultOutput, *LookupEndpointResult](outputResult)
}

// A collection of arguments for invoking getEndpoint.
type LookupEndpointOutputArgs struct {
	// Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
	EndpointId pulumix.Input[string]            `pulumi:"endpointId"`
	Tags       pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupEndpointOutputArgs) ToOutput() pulumix.Output[*LookupEndpointArgs] {
	allArgs := pulumix.All(
		args.EndpointId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupEndpointArgs {
		return &LookupEndpointArgs{
			EndpointId: resolvedArgs[0].(string),
			Tags:       resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupEndpointResultOutput struct{ *pulumi.OutputState }

func (LookupEndpointResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEndpointResult)(nil)).Elem()
}

func (o LookupEndpointResultOutput) ToOutput(context.Context) pulumix.Output[*LookupEndpointResult] {
	return pulumix.Output[*LookupEndpointResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupEndpointResultOutput) CertificateArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.CertificateArn })
}

func (o LookupEndpointResultOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.DatabaseName })
}

func (o LookupEndpointResultOutput) ElasticsearchSettings() pulumix.GArrayOutput[GetEndpointElasticsearchSetting, GetEndpointElasticsearchSettingOutput] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) []GetEndpointElasticsearchSetting { return v.ElasticsearchSettings })
	return pulumix.GArrayOutput[GetEndpointElasticsearchSetting, GetEndpointElasticsearchSettingOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) EndpointArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.EndpointArn })
}

func (o LookupEndpointResultOutput) EndpointId() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.EndpointId })
}

func (o LookupEndpointResultOutput) EndpointType() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.EndpointType })
}

func (o LookupEndpointResultOutput) EngineName() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.EngineName })
}

func (o LookupEndpointResultOutput) ExtraConnectionAttributes() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.ExtraConnectionAttributes })
}

func (o LookupEndpointResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.Id })
}

func (o LookupEndpointResultOutput) KafkaSettings() pulumix.GArrayOutput[GetEndpointKafkaSetting, GetEndpointKafkaSettingOutput] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) []GetEndpointKafkaSetting { return v.KafkaSettings })
	return pulumix.GArrayOutput[GetEndpointKafkaSetting, GetEndpointKafkaSettingOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) KinesisSettings() pulumix.GArrayOutput[GetEndpointKinesisSetting, GetEndpointKinesisSettingOutput] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) []GetEndpointKinesisSetting { return v.KinesisSettings })
	return pulumix.GArrayOutput[GetEndpointKinesisSetting, GetEndpointKinesisSettingOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) KmsKeyArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.KmsKeyArn })
}

func (o LookupEndpointResultOutput) MongodbSettings() pulumix.GArrayOutput[GetEndpointMongodbSetting, GetEndpointMongodbSettingOutput] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) []GetEndpointMongodbSetting { return v.MongodbSettings })
	return pulumix.GArrayOutput[GetEndpointMongodbSetting, GetEndpointMongodbSettingOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) Password() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.Password })
}

func (o LookupEndpointResultOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) int { return v.Port })
}

func (o LookupEndpointResultOutput) RedisSettings() pulumix.GArrayOutput[GetEndpointRedisSetting, GetEndpointRedisSettingOutput] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) []GetEndpointRedisSetting { return v.RedisSettings })
	return pulumix.GArrayOutput[GetEndpointRedisSetting, GetEndpointRedisSettingOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) RedshiftSettings() pulumix.GArrayOutput[GetEndpointRedshiftSetting, GetEndpointRedshiftSettingOutput] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) []GetEndpointRedshiftSetting { return v.RedshiftSettings })
	return pulumix.GArrayOutput[GetEndpointRedshiftSetting, GetEndpointRedshiftSettingOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) S3Settings() pulumix.GArrayOutput[GetEndpointS3Setting, GetEndpointS3SettingOutput] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) []GetEndpointS3Setting { return v.S3Settings })
	return pulumix.GArrayOutput[GetEndpointS3Setting, GetEndpointS3SettingOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) SecretsManagerAccessRoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.SecretsManagerAccessRoleArn })
}

func (o LookupEndpointResultOutput) SecretsManagerArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.SecretsManagerArn })
}

func (o LookupEndpointResultOutput) ServerName() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.ServerName })
}

func (o LookupEndpointResultOutput) ServiceAccessRole() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.ServiceAccessRole })
}

func (o LookupEndpointResultOutput) SslMode() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.SslMode })
}

func (o LookupEndpointResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.Username })
}
