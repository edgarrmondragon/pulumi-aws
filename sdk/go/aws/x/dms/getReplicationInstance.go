// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS DMS (Database Migration) Replication Instance.
func LookupReplicationInstance(ctx *pulumi.Context, args *LookupReplicationInstanceArgs, opts ...pulumi.InvokeOption) (*LookupReplicationInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupReplicationInstanceResult
	err := ctx.Invoke("aws:dms/getReplicationInstance:getReplicationInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReplicationInstance.
type LookupReplicationInstanceArgs struct {
	// The replication instance identifier.
	ReplicationInstanceId string            `pulumi:"replicationInstanceId"`
	Tags                  map[string]string `pulumi:"tags"`
}

// A collection of values returned by getReplicationInstance.
type LookupReplicationInstanceResult struct {
	// The amount of storage (in gigabytes) to be initially allocated for the replication instance.
	AllocatedStorage int `pulumi:"allocatedStorage"`
	// Indicates that minor engine upgrades will be applied automatically to the replication instance during the maintenance window.
	AutoMinorVersionUpgrade bool `pulumi:"autoMinorVersionUpgrade"`
	// The EC2 Availability Zone that the replication instance will be created in.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The engine version number of the replication instance.
	EngineVersion string `pulumi:"engineVersion"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Amazon Resource Name (ARN) for the KMS key used to encrypt the connection parameters.
	KmsKeyArn string `pulumi:"kmsKeyArn"`
	// Specifies if the replication instance is a multi-az deployment.
	MultiAz bool `pulumi:"multiAz"`
	// The type of IP address protocol used by the replication instance.
	NetworkType string `pulumi:"networkType"`
	// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
	PreferredMaintenanceWindow string `pulumi:"preferredMaintenanceWindow"`
	// Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address.
	PubliclyAccessible bool `pulumi:"publiclyAccessible"`
	// The Amazon Resource Name (ARN) of the replication instance.
	ReplicationInstanceArn string `pulumi:"replicationInstanceArn"`
	// The compute and memory capacity of the replication instance as specified by the replication instance class. See [AWS DMS User Guide](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.Types.html) for information on instance classes.
	ReplicationInstanceClass string `pulumi:"replicationInstanceClass"`
	ReplicationInstanceId    string `pulumi:"replicationInstanceId"`
	// A list of the private IP addresses of the replication instance.
	ReplicationInstancePrivateIps []string `pulumi:"replicationInstancePrivateIps"`
	// A list of the public IP addresses of the replication instance.
	ReplicationInstancePublicIps []string `pulumi:"replicationInstancePublicIps"`
	// A subnet group to associate with the replication instance.
	ReplicationSubnetGroupId string            `pulumi:"replicationSubnetGroupId"`
	Tags                     map[string]string `pulumi:"tags"`
	// A set of VPC security group IDs that are used with the replication instance.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
}

func LookupReplicationInstanceOutput(ctx *pulumi.Context, args LookupReplicationInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupReplicationInstanceResultOutput {
	outputResult := pulumix.ApplyErr[*LookupReplicationInstanceArgs](args.ToOutput(), func(plainArgs *LookupReplicationInstanceArgs) (*LookupReplicationInstanceResult, error) {
		return LookupReplicationInstance(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupReplicationInstanceResultOutput, *LookupReplicationInstanceResult](outputResult)
}

// A collection of arguments for invoking getReplicationInstance.
type LookupReplicationInstanceOutputArgs struct {
	// The replication instance identifier.
	ReplicationInstanceId pulumix.Input[string]            `pulumi:"replicationInstanceId"`
	Tags                  pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupReplicationInstanceOutputArgs) ToOutput() pulumix.Output[*LookupReplicationInstanceArgs] {
	allArgs := pulumix.All(
		args.ReplicationInstanceId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupReplicationInstanceArgs {
		return &LookupReplicationInstanceArgs{
			ReplicationInstanceId: resolvedArgs[0].(string),
			Tags:                  resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupReplicationInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupReplicationInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReplicationInstanceResult)(nil)).Elem()
}

func (o LookupReplicationInstanceResultOutput) ToOutput(context.Context) pulumix.Output[*LookupReplicationInstanceResult] {
	return pulumix.Output[*LookupReplicationInstanceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupReplicationInstanceResultOutput) AllocatedStorage() pulumix.Output[int] {
	return pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) int { return v.AllocatedStorage })
}

func (o LookupReplicationInstanceResultOutput) AutoMinorVersionUpgrade() pulumix.Output[bool] {
	return pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) bool { return v.AutoMinorVersionUpgrade })
}

func (o LookupReplicationInstanceResultOutput) AvailabilityZone() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) string { return v.AvailabilityZone })
}

func (o LookupReplicationInstanceResultOutput) EngineVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) string { return v.EngineVersion })
}

func (o LookupReplicationInstanceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) string { return v.Id })
}

func (o LookupReplicationInstanceResultOutput) KmsKeyArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) string { return v.KmsKeyArn })
}

func (o LookupReplicationInstanceResultOutput) MultiAz() pulumix.Output[bool] {
	return pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) bool { return v.MultiAz })
}

func (o LookupReplicationInstanceResultOutput) NetworkType() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) string { return v.NetworkType })
}

func (o LookupReplicationInstanceResultOutput) PreferredMaintenanceWindow() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) string { return v.PreferredMaintenanceWindow })
}

func (o LookupReplicationInstanceResultOutput) PubliclyAccessible() pulumix.Output[bool] {
	return pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) bool { return v.PubliclyAccessible })
}

func (o LookupReplicationInstanceResultOutput) ReplicationInstanceArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) string { return v.ReplicationInstanceArn })
}

func (o LookupReplicationInstanceResultOutput) ReplicationInstanceClass() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) string { return v.ReplicationInstanceClass })
}

func (o LookupReplicationInstanceResultOutput) ReplicationInstanceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) string { return v.ReplicationInstanceId })
}

func (o LookupReplicationInstanceResultOutput) ReplicationInstancePrivateIps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) []string { return v.ReplicationInstancePrivateIps })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupReplicationInstanceResultOutput) ReplicationInstancePublicIps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) []string { return v.ReplicationInstancePublicIps })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupReplicationInstanceResultOutput) ReplicationSubnetGroupId() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) string { return v.ReplicationSubnetGroupId })
}

func (o LookupReplicationInstanceResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupReplicationInstanceResultOutput) VpcSecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupReplicationInstanceResult](o, func(v *LookupReplicationInstanceResult) []string { return v.VpcSecurityGroupIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
