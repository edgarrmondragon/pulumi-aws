// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a workspace in [AWS Workspaces](https://docs.aws.amazon.com/workspaces/latest/adminguide/amazon-workspaces.html) Service
//
// > **NOTE:** AWS WorkSpaces service requires [`workspaces_DefaultRole`](https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-access-control.html#create-default-role) IAM role to operate normally.
type Workspace struct {
	pulumi.CustomResourceState

	// The ID of the bundle for the WorkSpace.
	BundleId pulumix.Output[string] `pulumi:"bundleId"`
	// The name of the WorkSpace, as seen by the operating system.
	ComputerName pulumix.Output[string] `pulumi:"computerName"`
	// The ID of the directory for the WorkSpace.
	DirectoryId pulumix.Output[string] `pulumi:"directoryId"`
	// The IP address of the WorkSpace.
	IpAddress pulumix.Output[string] `pulumi:"ipAddress"`
	// Indicates whether the data stored on the root volume is encrypted.
	RootVolumeEncryptionEnabled pulumix.Output[*bool] `pulumi:"rootVolumeEncryptionEnabled"`
	// The operational state of the WorkSpace.
	State pulumix.Output[string] `pulumi:"state"`
	// The tags for the WorkSpace. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The user name of the user for the WorkSpace. This user name must exist in the directory for the WorkSpace.
	UserName pulumix.Output[string] `pulumi:"userName"`
	// Indicates whether the data stored on the user volume is encrypted.
	UserVolumeEncryptionEnabled pulumix.Output[*bool] `pulumi:"userVolumeEncryptionEnabled"`
	// The symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.
	VolumeEncryptionKey pulumix.Output[*string] `pulumi:"volumeEncryptionKey"`
	// The WorkSpace properties.
	WorkspaceProperties pulumix.GPtrOutput[WorkspaceWorkspaceProperties, WorkspaceWorkspacePropertiesOutput] `pulumi:"workspaceProperties"`
}

// NewWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceArgs, opts ...pulumi.ResourceOption) (*Workspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BundleId == nil {
		return nil, errors.New("invalid value for required argument 'BundleId'")
	}
	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workspace
	err := ctx.RegisterResource("aws:workspaces/workspace:Workspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspace gets an existing Workspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceState, opts ...pulumi.ResourceOption) (*Workspace, error) {
	var resource Workspace
	err := ctx.ReadResource("aws:workspaces/workspace:Workspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workspace resources.
type workspaceState struct {
	// The ID of the bundle for the WorkSpace.
	BundleId *string `pulumi:"bundleId"`
	// The name of the WorkSpace, as seen by the operating system.
	ComputerName *string `pulumi:"computerName"`
	// The ID of the directory for the WorkSpace.
	DirectoryId *string `pulumi:"directoryId"`
	// The IP address of the WorkSpace.
	IpAddress *string `pulumi:"ipAddress"`
	// Indicates whether the data stored on the root volume is encrypted.
	RootVolumeEncryptionEnabled *bool `pulumi:"rootVolumeEncryptionEnabled"`
	// The operational state of the WorkSpace.
	State *string `pulumi:"state"`
	// The tags for the WorkSpace. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The user name of the user for the WorkSpace. This user name must exist in the directory for the WorkSpace.
	UserName *string `pulumi:"userName"`
	// Indicates whether the data stored on the user volume is encrypted.
	UserVolumeEncryptionEnabled *bool `pulumi:"userVolumeEncryptionEnabled"`
	// The symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.
	VolumeEncryptionKey *string `pulumi:"volumeEncryptionKey"`
	// The WorkSpace properties.
	WorkspaceProperties *WorkspaceWorkspaceProperties `pulumi:"workspaceProperties"`
}

type WorkspaceState struct {
	// The ID of the bundle for the WorkSpace.
	BundleId pulumix.Input[*string]
	// The name of the WorkSpace, as seen by the operating system.
	ComputerName pulumix.Input[*string]
	// The ID of the directory for the WorkSpace.
	DirectoryId pulumix.Input[*string]
	// The IP address of the WorkSpace.
	IpAddress pulumix.Input[*string]
	// Indicates whether the data stored on the root volume is encrypted.
	RootVolumeEncryptionEnabled pulumix.Input[*bool]
	// The operational state of the WorkSpace.
	State pulumix.Input[*string]
	// The tags for the WorkSpace. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The user name of the user for the WorkSpace. This user name must exist in the directory for the WorkSpace.
	UserName pulumix.Input[*string]
	// Indicates whether the data stored on the user volume is encrypted.
	UserVolumeEncryptionEnabled pulumix.Input[*bool]
	// The symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.
	VolumeEncryptionKey pulumix.Input[*string]
	// The WorkSpace properties.
	WorkspaceProperties pulumix.Input[*WorkspaceWorkspacePropertiesArgs]
}

func (WorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceState)(nil)).Elem()
}

type workspaceArgs struct {
	// The ID of the bundle for the WorkSpace.
	BundleId string `pulumi:"bundleId"`
	// The ID of the directory for the WorkSpace.
	DirectoryId string `pulumi:"directoryId"`
	// Indicates whether the data stored on the root volume is encrypted.
	RootVolumeEncryptionEnabled *bool `pulumi:"rootVolumeEncryptionEnabled"`
	// The tags for the WorkSpace. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The user name of the user for the WorkSpace. This user name must exist in the directory for the WorkSpace.
	UserName string `pulumi:"userName"`
	// Indicates whether the data stored on the user volume is encrypted.
	UserVolumeEncryptionEnabled *bool `pulumi:"userVolumeEncryptionEnabled"`
	// The symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.
	VolumeEncryptionKey *string `pulumi:"volumeEncryptionKey"`
	// The WorkSpace properties.
	WorkspaceProperties *WorkspaceWorkspaceProperties `pulumi:"workspaceProperties"`
}

// The set of arguments for constructing a Workspace resource.
type WorkspaceArgs struct {
	// The ID of the bundle for the WorkSpace.
	BundleId pulumix.Input[string]
	// The ID of the directory for the WorkSpace.
	DirectoryId pulumix.Input[string]
	// Indicates whether the data stored on the root volume is encrypted.
	RootVolumeEncryptionEnabled pulumix.Input[*bool]
	// The tags for the WorkSpace. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The user name of the user for the WorkSpace. This user name must exist in the directory for the WorkSpace.
	UserName pulumix.Input[string]
	// Indicates whether the data stored on the user volume is encrypted.
	UserVolumeEncryptionEnabled pulumix.Input[*bool]
	// The symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.
	VolumeEncryptionKey pulumix.Input[*string]
	// The WorkSpace properties.
	WorkspaceProperties pulumix.Input[*WorkspaceWorkspacePropertiesArgs]
}

func (WorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceArgs)(nil)).Elem()
}

type WorkspaceOutput struct{ *pulumi.OutputState }

func (WorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Workspace)(nil)).Elem()
}

func (o WorkspaceOutput) ToWorkspaceOutput() WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) ToOutput(ctx context.Context) pulumix.Output[Workspace] {
	return pulumix.Output[Workspace]{
		OutputState: o.OutputState,
	}
}

// The ID of the bundle for the WorkSpace.
func (o WorkspaceOutput) BundleId() pulumix.Output[string] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.Output[string] { return v.BundleId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the WorkSpace, as seen by the operating system.
func (o WorkspaceOutput) ComputerName() pulumix.Output[string] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.Output[string] { return v.ComputerName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the directory for the WorkSpace.
func (o WorkspaceOutput) DirectoryId() pulumix.Output[string] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.Output[string] { return v.DirectoryId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IP address of the WorkSpace.
func (o WorkspaceOutput) IpAddress() pulumix.Output[string] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.Output[string] { return v.IpAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether the data stored on the root volume is encrypted.
func (o WorkspaceOutput) RootVolumeEncryptionEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.Output[*bool] { return v.RootVolumeEncryptionEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The operational state of the WorkSpace.
func (o WorkspaceOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The tags for the WorkSpace. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o WorkspaceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o WorkspaceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The user name of the user for the WorkSpace. This user name must exist in the directory for the WorkSpace.
func (o WorkspaceOutput) UserName() pulumix.Output[string] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.Output[string] { return v.UserName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether the data stored on the user volume is encrypted.
func (o WorkspaceOutput) UserVolumeEncryptionEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.Output[*bool] { return v.UserVolumeEncryptionEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.
func (o WorkspaceOutput) VolumeEncryptionKey() pulumix.Output[*string] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.Output[*string] { return v.VolumeEncryptionKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The WorkSpace properties.
func (o WorkspaceOutput) WorkspaceProperties() pulumix.GPtrOutput[WorkspaceWorkspaceProperties, WorkspaceWorkspacePropertiesOutput] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.GPtrOutput[WorkspaceWorkspaceProperties, WorkspaceWorkspacePropertiesOutput] {
		return v.WorkspaceProperties
	})
	unwrapped := pulumix.Flatten[*WorkspaceWorkspaceProperties, pulumix.GPtrOutput[WorkspaceWorkspaceProperties, WorkspaceWorkspacePropertiesOutput]](value)
	return pulumix.GPtrOutput[WorkspaceWorkspaceProperties, WorkspaceWorkspacePropertiesOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(WorkspaceOutput{})
}
