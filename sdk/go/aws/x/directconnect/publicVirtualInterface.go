// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Direct Connect public virtual interface resource.
type PublicVirtualInterface struct {
	pulumi.CustomResourceState

	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily pulumix.Output[string] `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress pulumix.Output[string] `pulumi:"amazonAddress"`
	AmazonSideAsn pulumix.Output[string] `pulumi:"amazonSideAsn"`
	// The ARN of the virtual interface.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The Direct Connect endpoint on which the virtual interface terminates.
	AwsDevice pulumix.Output[string] `pulumi:"awsDevice"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumix.Output[int] `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey pulumix.Output[string] `pulumi:"bgpAuthKey"`
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId pulumix.Output[string] `pulumi:"connectionId"`
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress pulumix.Output[string] `pulumi:"customerAddress"`
	// The name for the virtual interface.
	Name pulumix.Output[string] `pulumi:"name"`
	// A list of routes to be advertised to the AWS network in this region.
	RouteFilterPrefixes pulumix.ArrayOutput[string] `pulumi:"routeFilterPrefixes"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The VLAN ID.
	Vlan pulumix.Output[int] `pulumi:"vlan"`
}

// NewPublicVirtualInterface registers a new resource with the given unique name, arguments, and options.
func NewPublicVirtualInterface(ctx *pulumi.Context,
	name string, args *PublicVirtualInterfaceArgs, opts ...pulumi.ResourceOption) (*PublicVirtualInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressFamily == nil {
		return nil, errors.New("invalid value for required argument 'AddressFamily'")
	}
	if args.BgpAsn == nil {
		return nil, errors.New("invalid value for required argument 'BgpAsn'")
	}
	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.RouteFilterPrefixes == nil {
		return nil, errors.New("invalid value for required argument 'RouteFilterPrefixes'")
	}
	if args.Vlan == nil {
		return nil, errors.New("invalid value for required argument 'Vlan'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PublicVirtualInterface
	err := ctx.RegisterResource("aws:directconnect/publicVirtualInterface:PublicVirtualInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublicVirtualInterface gets an existing PublicVirtualInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublicVirtualInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublicVirtualInterfaceState, opts ...pulumi.ResourceOption) (*PublicVirtualInterface, error) {
	var resource PublicVirtualInterface
	err := ctx.ReadResource("aws:directconnect/publicVirtualInterface:PublicVirtualInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublicVirtualInterface resources.
type publicVirtualInterfaceState struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily *string `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress *string `pulumi:"amazonAddress"`
	AmazonSideAsn *string `pulumi:"amazonSideAsn"`
	// The ARN of the virtual interface.
	Arn *string `pulumi:"arn"`
	// The Direct Connect endpoint on which the virtual interface terminates.
	AwsDevice *string `pulumi:"awsDevice"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn *int `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey *string `pulumi:"bgpAuthKey"`
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId *string `pulumi:"connectionId"`
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress *string `pulumi:"customerAddress"`
	// The name for the virtual interface.
	Name *string `pulumi:"name"`
	// A list of routes to be advertised to the AWS network in this region.
	RouteFilterPrefixes []string `pulumi:"routeFilterPrefixes"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The VLAN ID.
	Vlan *int `pulumi:"vlan"`
}

type PublicVirtualInterfaceState struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily pulumix.Input[*string]
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress pulumix.Input[*string]
	AmazonSideAsn pulumix.Input[*string]
	// The ARN of the virtual interface.
	Arn pulumix.Input[*string]
	// The Direct Connect endpoint on which the virtual interface terminates.
	AwsDevice pulumix.Input[*string]
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumix.Input[*int]
	// The authentication key for BGP configuration.
	BgpAuthKey pulumix.Input[*string]
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId pulumix.Input[*string]
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress pulumix.Input[*string]
	// The name for the virtual interface.
	Name pulumix.Input[*string]
	// A list of routes to be advertised to the AWS network in this region.
	RouteFilterPrefixes pulumix.Input[[]string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The VLAN ID.
	Vlan pulumix.Input[*int]
}

func (PublicVirtualInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*publicVirtualInterfaceState)(nil)).Elem()
}

type publicVirtualInterfaceArgs struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily string `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress *string `pulumi:"amazonAddress"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn int `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey *string `pulumi:"bgpAuthKey"`
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId string `pulumi:"connectionId"`
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress *string `pulumi:"customerAddress"`
	// The name for the virtual interface.
	Name *string `pulumi:"name"`
	// A list of routes to be advertised to the AWS network in this region.
	RouteFilterPrefixes []string `pulumi:"routeFilterPrefixes"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The VLAN ID.
	Vlan int `pulumi:"vlan"`
}

// The set of arguments for constructing a PublicVirtualInterface resource.
type PublicVirtualInterfaceArgs struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily pulumix.Input[string]
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress pulumix.Input[*string]
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumix.Input[int]
	// The authentication key for BGP configuration.
	BgpAuthKey pulumix.Input[*string]
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId pulumix.Input[string]
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress pulumix.Input[*string]
	// The name for the virtual interface.
	Name pulumix.Input[*string]
	// A list of routes to be advertised to the AWS network in this region.
	RouteFilterPrefixes pulumix.Input[[]string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The VLAN ID.
	Vlan pulumix.Input[int]
}

func (PublicVirtualInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publicVirtualInterfaceArgs)(nil)).Elem()
}

type PublicVirtualInterfaceOutput struct{ *pulumi.OutputState }

func (PublicVirtualInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicVirtualInterface)(nil)).Elem()
}

func (o PublicVirtualInterfaceOutput) ToPublicVirtualInterfaceOutput() PublicVirtualInterfaceOutput {
	return o
}

func (o PublicVirtualInterfaceOutput) ToPublicVirtualInterfaceOutputWithContext(ctx context.Context) PublicVirtualInterfaceOutput {
	return o
}

func (o PublicVirtualInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[PublicVirtualInterface] {
	return pulumix.Output[PublicVirtualInterface]{
		OutputState: o.OutputState,
	}
}

// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
func (o PublicVirtualInterfaceOutput) AddressFamily() pulumix.Output[string] {
	value := pulumix.Apply[PublicVirtualInterface](o, func(v PublicVirtualInterface) pulumix.Output[string] { return v.AddressFamily })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
func (o PublicVirtualInterfaceOutput) AmazonAddress() pulumix.Output[string] {
	value := pulumix.Apply[PublicVirtualInterface](o, func(v PublicVirtualInterface) pulumix.Output[string] { return v.AmazonAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o PublicVirtualInterfaceOutput) AmazonSideAsn() pulumix.Output[string] {
	value := pulumix.Apply[PublicVirtualInterface](o, func(v PublicVirtualInterface) pulumix.Output[string] { return v.AmazonSideAsn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the virtual interface.
func (o PublicVirtualInterfaceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[PublicVirtualInterface](o, func(v PublicVirtualInterface) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Direct Connect endpoint on which the virtual interface terminates.
func (o PublicVirtualInterfaceOutput) AwsDevice() pulumix.Output[string] {
	value := pulumix.Apply[PublicVirtualInterface](o, func(v PublicVirtualInterface) pulumix.Output[string] { return v.AwsDevice })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
func (o PublicVirtualInterfaceOutput) BgpAsn() pulumix.Output[int] {
	value := pulumix.Apply[PublicVirtualInterface](o, func(v PublicVirtualInterface) pulumix.Output[int] { return v.BgpAsn })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The authentication key for BGP configuration.
func (o PublicVirtualInterfaceOutput) BgpAuthKey() pulumix.Output[string] {
	value := pulumix.Apply[PublicVirtualInterface](o, func(v PublicVirtualInterface) pulumix.Output[string] { return v.BgpAuthKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
func (o PublicVirtualInterfaceOutput) ConnectionId() pulumix.Output[string] {
	value := pulumix.Apply[PublicVirtualInterface](o, func(v PublicVirtualInterface) pulumix.Output[string] { return v.ConnectionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
func (o PublicVirtualInterfaceOutput) CustomerAddress() pulumix.Output[string] {
	value := pulumix.Apply[PublicVirtualInterface](o, func(v PublicVirtualInterface) pulumix.Output[string] { return v.CustomerAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name for the virtual interface.
func (o PublicVirtualInterfaceOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[PublicVirtualInterface](o, func(v PublicVirtualInterface) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of routes to be advertised to the AWS network in this region.
func (o PublicVirtualInterfaceOutput) RouteFilterPrefixes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PublicVirtualInterface](o, func(v PublicVirtualInterface) pulumix.ArrayOutput[string] { return v.RouteFilterPrefixes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PublicVirtualInterfaceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[PublicVirtualInterface](o, func(v PublicVirtualInterface) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o PublicVirtualInterfaceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[PublicVirtualInterface](o, func(v PublicVirtualInterface) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The VLAN ID.
func (o PublicVirtualInterfaceOutput) Vlan() pulumix.Output[int] {
	value := pulumix.Apply[PublicVirtualInterface](o, func(v PublicVirtualInterface) pulumix.Output[int] { return v.Vlan })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(PublicVirtualInterfaceOutput{})
}
