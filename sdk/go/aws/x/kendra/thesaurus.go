// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendra

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Kendra Thesaurus.
type Thesaurus struct {
	pulumi.CustomResourceState

	// ARN of the thesaurus.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The description for a thesaurus.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The identifier of the index for a thesaurus.
	IndexId pulumix.Output[string] `pulumi:"indexId"`
	// The name for the thesaurus.
	Name pulumix.Output[string] `pulumi:"name"`
	// The IAM (Identity and Access Management) role used to access the thesaurus file in S3.
	RoleArn pulumix.Output[string] `pulumi:"roleArn"`
	// The S3 path where your thesaurus file sits in S3. Detailed below.
	//
	// The `sourceS3Path` configuration block supports the following arguments:
	SourceS3Path pulumix.GPtrOutput[ThesaurusSourceS3Path, ThesaurusSourceS3PathOutput] `pulumi:"sourceS3Path"`
	// The current status of the thesaurus.
	Status pulumix.Output[string] `pulumi:"status"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll     pulumix.MapOutput[string] `pulumi:"tagsAll"`
	ThesaurusId pulumix.Output[string]    `pulumi:"thesaurusId"`
}

// NewThesaurus registers a new resource with the given unique name, arguments, and options.
func NewThesaurus(ctx *pulumi.Context,
	name string, args *ThesaurusArgs, opts ...pulumi.ResourceOption) (*Thesaurus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IndexId == nil {
		return nil, errors.New("invalid value for required argument 'IndexId'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.SourceS3Path == nil {
		return nil, errors.New("invalid value for required argument 'SourceS3Path'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Thesaurus
	err := ctx.RegisterResource("aws:kendra/thesaurus:Thesaurus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetThesaurus gets an existing Thesaurus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetThesaurus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ThesaurusState, opts ...pulumi.ResourceOption) (*Thesaurus, error) {
	var resource Thesaurus
	err := ctx.ReadResource("aws:kendra/thesaurus:Thesaurus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Thesaurus resources.
type thesaurusState struct {
	// ARN of the thesaurus.
	Arn *string `pulumi:"arn"`
	// The description for a thesaurus.
	Description *string `pulumi:"description"`
	// The identifier of the index for a thesaurus.
	IndexId *string `pulumi:"indexId"`
	// The name for the thesaurus.
	Name *string `pulumi:"name"`
	// The IAM (Identity and Access Management) role used to access the thesaurus file in S3.
	RoleArn *string `pulumi:"roleArn"`
	// The S3 path where your thesaurus file sits in S3. Detailed below.
	//
	// The `sourceS3Path` configuration block supports the following arguments:
	SourceS3Path *ThesaurusSourceS3Path `pulumi:"sourceS3Path"`
	// The current status of the thesaurus.
	Status *string `pulumi:"status"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll     map[string]string `pulumi:"tagsAll"`
	ThesaurusId *string           `pulumi:"thesaurusId"`
}

type ThesaurusState struct {
	// ARN of the thesaurus.
	Arn pulumix.Input[*string]
	// The description for a thesaurus.
	Description pulumix.Input[*string]
	// The identifier of the index for a thesaurus.
	IndexId pulumix.Input[*string]
	// The name for the thesaurus.
	Name pulumix.Input[*string]
	// The IAM (Identity and Access Management) role used to access the thesaurus file in S3.
	RoleArn pulumix.Input[*string]
	// The S3 path where your thesaurus file sits in S3. Detailed below.
	//
	// The `sourceS3Path` configuration block supports the following arguments:
	SourceS3Path pulumix.Input[*ThesaurusSourceS3PathArgs]
	// The current status of the thesaurus.
	Status pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll     pulumix.Input[map[string]string]
	ThesaurusId pulumix.Input[*string]
}

func (ThesaurusState) ElementType() reflect.Type {
	return reflect.TypeOf((*thesaurusState)(nil)).Elem()
}

type thesaurusArgs struct {
	// The description for a thesaurus.
	Description *string `pulumi:"description"`
	// The identifier of the index for a thesaurus.
	IndexId string `pulumi:"indexId"`
	// The name for the thesaurus.
	Name *string `pulumi:"name"`
	// The IAM (Identity and Access Management) role used to access the thesaurus file in S3.
	RoleArn string `pulumi:"roleArn"`
	// The S3 path where your thesaurus file sits in S3. Detailed below.
	//
	// The `sourceS3Path` configuration block supports the following arguments:
	SourceS3Path ThesaurusSourceS3Path `pulumi:"sourceS3Path"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Thesaurus resource.
type ThesaurusArgs struct {
	// The description for a thesaurus.
	Description pulumix.Input[*string]
	// The identifier of the index for a thesaurus.
	IndexId pulumix.Input[string]
	// The name for the thesaurus.
	Name pulumix.Input[*string]
	// The IAM (Identity and Access Management) role used to access the thesaurus file in S3.
	RoleArn pulumix.Input[string]
	// The S3 path where your thesaurus file sits in S3. Detailed below.
	//
	// The `sourceS3Path` configuration block supports the following arguments:
	SourceS3Path pulumix.Input[*ThesaurusSourceS3PathArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ThesaurusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*thesaurusArgs)(nil)).Elem()
}

type ThesaurusOutput struct{ *pulumi.OutputState }

func (ThesaurusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Thesaurus)(nil)).Elem()
}

func (o ThesaurusOutput) ToThesaurusOutput() ThesaurusOutput {
	return o
}

func (o ThesaurusOutput) ToThesaurusOutputWithContext(ctx context.Context) ThesaurusOutput {
	return o
}

func (o ThesaurusOutput) ToOutput(ctx context.Context) pulumix.Output[Thesaurus] {
	return pulumix.Output[Thesaurus]{
		OutputState: o.OutputState,
	}
}

// ARN of the thesaurus.
func (o ThesaurusOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Thesaurus](o, func(v Thesaurus) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The description for a thesaurus.
func (o ThesaurusOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Thesaurus](o, func(v Thesaurus) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The identifier of the index for a thesaurus.
func (o ThesaurusOutput) IndexId() pulumix.Output[string] {
	value := pulumix.Apply[Thesaurus](o, func(v Thesaurus) pulumix.Output[string] { return v.IndexId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name for the thesaurus.
func (o ThesaurusOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Thesaurus](o, func(v Thesaurus) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IAM (Identity and Access Management) role used to access the thesaurus file in S3.
func (o ThesaurusOutput) RoleArn() pulumix.Output[string] {
	value := pulumix.Apply[Thesaurus](o, func(v Thesaurus) pulumix.Output[string] { return v.RoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The S3 path where your thesaurus file sits in S3. Detailed below.
//
// The `sourceS3Path` configuration block supports the following arguments:
func (o ThesaurusOutput) SourceS3Path() pulumix.GPtrOutput[ThesaurusSourceS3Path, ThesaurusSourceS3PathOutput] {
	value := pulumix.Apply[Thesaurus](o, func(v Thesaurus) pulumix.GPtrOutput[ThesaurusSourceS3Path, ThesaurusSourceS3PathOutput] {
		return v.SourceS3Path
	})
	unwrapped := pulumix.Flatten[*ThesaurusSourceS3Path, pulumix.GPtrOutput[ThesaurusSourceS3Path, ThesaurusSourceS3PathOutput]](value)
	return pulumix.GPtrOutput[ThesaurusSourceS3Path, ThesaurusSourceS3PathOutput]{OutputState: unwrapped.OutputState}
}

// The current status of the thesaurus.
func (o ThesaurusOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Thesaurus](o, func(v Thesaurus) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ThesaurusOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Thesaurus](o, func(v Thesaurus) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ThesaurusOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Thesaurus](o, func(v Thesaurus) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o ThesaurusOutput) ThesaurusId() pulumix.Output[string] {
	value := pulumix.Apply[Thesaurus](o, func(v Thesaurus) pulumix.Output[string] { return v.ThesaurusId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ThesaurusOutput{})
}
