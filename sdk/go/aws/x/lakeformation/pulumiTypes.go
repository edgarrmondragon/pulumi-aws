// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lakeformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type DataLakeSettingsCreateDatabaseDefaultPermission struct {
	// List of permissions that are granted to the principal. Valid values may include `ALL`, `SELECT`, `ALTER`, `DROP`, `DELETE`, `INSERT`, `DESCRIBE`, and `CREATE_TABLE`. For more details, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
	Permissions []string `pulumi:"permissions"`
	// Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set `principal` to `IAM_ALLOWED_PRINCIPALS` and `permissions` to `["ALL"]`.
	Principal *string `pulumi:"principal"`
}

type DataLakeSettingsCreateDatabaseDefaultPermissionArgs struct {
	// List of permissions that are granted to the principal. Valid values may include `ALL`, `SELECT`, `ALTER`, `DROP`, `DELETE`, `INSERT`, `DESCRIBE`, and `CREATE_TABLE`. For more details, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
	Permissions pulumix.Input[[]string] `pulumi:"permissions"`
	// Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set `principal` to `IAM_ALLOWED_PRINCIPALS` and `permissions` to `["ALL"]`.
	Principal pulumix.Input[*string] `pulumi:"principal"`
}

func (DataLakeSettingsCreateDatabaseDefaultPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeSettingsCreateDatabaseDefaultPermission)(nil)).Elem()
}

func (i DataLakeSettingsCreateDatabaseDefaultPermissionArgs) ToDataLakeSettingsCreateDatabaseDefaultPermissionOutput() DataLakeSettingsCreateDatabaseDefaultPermissionOutput {
	return i.ToDataLakeSettingsCreateDatabaseDefaultPermissionOutputWithContext(context.Background())
}

func (i DataLakeSettingsCreateDatabaseDefaultPermissionArgs) ToDataLakeSettingsCreateDatabaseDefaultPermissionOutputWithContext(ctx context.Context) DataLakeSettingsCreateDatabaseDefaultPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeSettingsCreateDatabaseDefaultPermissionOutput)
}

func (i *DataLakeSettingsCreateDatabaseDefaultPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*DataLakeSettingsCreateDatabaseDefaultPermissionArgs] {
	return pulumix.Val(i)
}

type DataLakeSettingsCreateDatabaseDefaultPermissionOutput struct{ *pulumi.OutputState }

func (DataLakeSettingsCreateDatabaseDefaultPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeSettingsCreateDatabaseDefaultPermission)(nil)).Elem()
}

func (o DataLakeSettingsCreateDatabaseDefaultPermissionOutput) ToDataLakeSettingsCreateDatabaseDefaultPermissionOutput() DataLakeSettingsCreateDatabaseDefaultPermissionOutput {
	return o
}

func (o DataLakeSettingsCreateDatabaseDefaultPermissionOutput) ToDataLakeSettingsCreateDatabaseDefaultPermissionOutputWithContext(ctx context.Context) DataLakeSettingsCreateDatabaseDefaultPermissionOutput {
	return o
}

func (o DataLakeSettingsCreateDatabaseDefaultPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[DataLakeSettingsCreateDatabaseDefaultPermission] {
	return pulumix.Output[DataLakeSettingsCreateDatabaseDefaultPermission]{
		OutputState: o.OutputState,
	}
}

// List of permissions that are granted to the principal. Valid values may include `ALL`, `SELECT`, `ALTER`, `DROP`, `DELETE`, `INSERT`, `DESCRIBE`, and `CREATE_TABLE`. For more details, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
func (o DataLakeSettingsCreateDatabaseDefaultPermissionOutput) Permissions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DataLakeSettingsCreateDatabaseDefaultPermission](o, func(v DataLakeSettingsCreateDatabaseDefaultPermission) []string { return v.Permissions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set `principal` to `IAM_ALLOWED_PRINCIPALS` and `permissions` to `["ALL"]`.
func (o DataLakeSettingsCreateDatabaseDefaultPermissionOutput) Principal() pulumix.Output[*string] {
	return pulumix.Apply[DataLakeSettingsCreateDatabaseDefaultPermission](o, func(v DataLakeSettingsCreateDatabaseDefaultPermission) *string { return v.Principal })
}

type DataLakeSettingsCreateTableDefaultPermission struct {
	// List of permissions that are granted to the principal. Valid values may include `ALL`, `SELECT`, `ALTER`, `DROP`, `DELETE`, `INSERT`, and `DESCRIBE`. For more details, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
	Permissions []string `pulumi:"permissions"`
	// Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set `principal` to `IAM_ALLOWED_PRINCIPALS` and `permissions` to `["ALL"]`.
	Principal *string `pulumi:"principal"`
}

type DataLakeSettingsCreateTableDefaultPermissionArgs struct {
	// List of permissions that are granted to the principal. Valid values may include `ALL`, `SELECT`, `ALTER`, `DROP`, `DELETE`, `INSERT`, and `DESCRIBE`. For more details, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
	Permissions pulumix.Input[[]string] `pulumi:"permissions"`
	// Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set `principal` to `IAM_ALLOWED_PRINCIPALS` and `permissions` to `["ALL"]`.
	Principal pulumix.Input[*string] `pulumi:"principal"`
}

func (DataLakeSettingsCreateTableDefaultPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeSettingsCreateTableDefaultPermission)(nil)).Elem()
}

func (i DataLakeSettingsCreateTableDefaultPermissionArgs) ToDataLakeSettingsCreateTableDefaultPermissionOutput() DataLakeSettingsCreateTableDefaultPermissionOutput {
	return i.ToDataLakeSettingsCreateTableDefaultPermissionOutputWithContext(context.Background())
}

func (i DataLakeSettingsCreateTableDefaultPermissionArgs) ToDataLakeSettingsCreateTableDefaultPermissionOutputWithContext(ctx context.Context) DataLakeSettingsCreateTableDefaultPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeSettingsCreateTableDefaultPermissionOutput)
}

func (i *DataLakeSettingsCreateTableDefaultPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*DataLakeSettingsCreateTableDefaultPermissionArgs] {
	return pulumix.Val(i)
}

type DataLakeSettingsCreateTableDefaultPermissionOutput struct{ *pulumi.OutputState }

func (DataLakeSettingsCreateTableDefaultPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeSettingsCreateTableDefaultPermission)(nil)).Elem()
}

func (o DataLakeSettingsCreateTableDefaultPermissionOutput) ToDataLakeSettingsCreateTableDefaultPermissionOutput() DataLakeSettingsCreateTableDefaultPermissionOutput {
	return o
}

func (o DataLakeSettingsCreateTableDefaultPermissionOutput) ToDataLakeSettingsCreateTableDefaultPermissionOutputWithContext(ctx context.Context) DataLakeSettingsCreateTableDefaultPermissionOutput {
	return o
}

func (o DataLakeSettingsCreateTableDefaultPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[DataLakeSettingsCreateTableDefaultPermission] {
	return pulumix.Output[DataLakeSettingsCreateTableDefaultPermission]{
		OutputState: o.OutputState,
	}
}

// List of permissions that are granted to the principal. Valid values may include `ALL`, `SELECT`, `ALTER`, `DROP`, `DELETE`, `INSERT`, and `DESCRIBE`. For more details, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
func (o DataLakeSettingsCreateTableDefaultPermissionOutput) Permissions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DataLakeSettingsCreateTableDefaultPermission](o, func(v DataLakeSettingsCreateTableDefaultPermission) []string { return v.Permissions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set `principal` to `IAM_ALLOWED_PRINCIPALS` and `permissions` to `["ALL"]`.
func (o DataLakeSettingsCreateTableDefaultPermissionOutput) Principal() pulumix.Output[*string] {
	return pulumix.Apply[DataLakeSettingsCreateTableDefaultPermission](o, func(v DataLakeSettingsCreateTableDefaultPermission) *string { return v.Principal })
}

type PermissionsDataLocation struct {
	// Amazon Resource Name (ARN) that uniquely identifies the data location resource.
	//
	// The following argument is optional:
	Arn string `pulumi:"arn"`
	// Identifier for the Data Catalog where the location is registered with Lake Formation. By default, it is the account ID of the caller.
	CatalogId *string `pulumi:"catalogId"`
}

type PermissionsDataLocationArgs struct {
	// Amazon Resource Name (ARN) that uniquely identifies the data location resource.
	//
	// The following argument is optional:
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Identifier for the Data Catalog where the location is registered with Lake Formation. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[*string] `pulumi:"catalogId"`
}

func (PermissionsDataLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsDataLocation)(nil)).Elem()
}

func (i PermissionsDataLocationArgs) ToPermissionsDataLocationOutput() PermissionsDataLocationOutput {
	return i.ToPermissionsDataLocationOutputWithContext(context.Background())
}

func (i PermissionsDataLocationArgs) ToPermissionsDataLocationOutputWithContext(ctx context.Context) PermissionsDataLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsDataLocationOutput)
}

func (i *PermissionsDataLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*PermissionsDataLocationArgs] {
	return pulumix.Val(i)
}

type PermissionsDataLocationOutput struct{ *pulumi.OutputState }

func (PermissionsDataLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsDataLocation)(nil)).Elem()
}

func (o PermissionsDataLocationOutput) ToPermissionsDataLocationOutput() PermissionsDataLocationOutput {
	return o
}

func (o PermissionsDataLocationOutput) ToPermissionsDataLocationOutputWithContext(ctx context.Context) PermissionsDataLocationOutput {
	return o
}

func (o PermissionsDataLocationOutput) ToOutput(ctx context.Context) pulumix.Output[PermissionsDataLocation] {
	return pulumix.Output[PermissionsDataLocation]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) that uniquely identifies the data location resource.
//
// The following argument is optional:
func (o PermissionsDataLocationOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[PermissionsDataLocation](o, func(v PermissionsDataLocation) string { return v.Arn })
}

// Identifier for the Data Catalog where the location is registered with Lake Formation. By default, it is the account ID of the caller.
func (o PermissionsDataLocationOutput) CatalogId() pulumix.Output[*string] {
	return pulumix.Apply[PermissionsDataLocation](o, func(v PermissionsDataLocation) *string { return v.CatalogId })
}

type PermissionsDatabase struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId *string `pulumi:"catalogId"`
	// Name of the database resource. Unique to the Data Catalog.
	//
	// The following argument is optional:
	Name string `pulumi:"name"`
}

type PermissionsDatabaseArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[*string] `pulumi:"catalogId"`
	// Name of the database resource. Unique to the Data Catalog.
	//
	// The following argument is optional:
	Name pulumix.Input[string] `pulumi:"name"`
}

func (PermissionsDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsDatabase)(nil)).Elem()
}

func (i PermissionsDatabaseArgs) ToPermissionsDatabaseOutput() PermissionsDatabaseOutput {
	return i.ToPermissionsDatabaseOutputWithContext(context.Background())
}

func (i PermissionsDatabaseArgs) ToPermissionsDatabaseOutputWithContext(ctx context.Context) PermissionsDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsDatabaseOutput)
}

func (i *PermissionsDatabaseArgs) ToOutput(ctx context.Context) pulumix.Output[*PermissionsDatabaseArgs] {
	return pulumix.Val(i)
}

type PermissionsDatabaseOutput struct{ *pulumi.OutputState }

func (PermissionsDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsDatabase)(nil)).Elem()
}

func (o PermissionsDatabaseOutput) ToPermissionsDatabaseOutput() PermissionsDatabaseOutput {
	return o
}

func (o PermissionsDatabaseOutput) ToPermissionsDatabaseOutputWithContext(ctx context.Context) PermissionsDatabaseOutput {
	return o
}

func (o PermissionsDatabaseOutput) ToOutput(ctx context.Context) pulumix.Output[PermissionsDatabase] {
	return pulumix.Output[PermissionsDatabase]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Data Catalog. By default, it is the account ID of the caller.
func (o PermissionsDatabaseOutput) CatalogId() pulumix.Output[*string] {
	return pulumix.Apply[PermissionsDatabase](o, func(v PermissionsDatabase) *string { return v.CatalogId })
}

// Name of the database resource. Unique to the Data Catalog.
//
// The following argument is optional:
func (o PermissionsDatabaseOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[PermissionsDatabase](o, func(v PermissionsDatabase) string { return v.Name })
}

type PermissionsLfTag struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId *string `pulumi:"catalogId"`
	// The key-name for the tag.
	Key string `pulumi:"key"`
	// A list of possible values an attribute can take.
	//
	// The following argument is optional:
	Values []string `pulumi:"values"`
}

type PermissionsLfTagArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[*string] `pulumi:"catalogId"`
	// The key-name for the tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// A list of possible values an attribute can take.
	//
	// The following argument is optional:
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (PermissionsLfTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsLfTag)(nil)).Elem()
}

func (i PermissionsLfTagArgs) ToPermissionsLfTagOutput() PermissionsLfTagOutput {
	return i.ToPermissionsLfTagOutputWithContext(context.Background())
}

func (i PermissionsLfTagArgs) ToPermissionsLfTagOutputWithContext(ctx context.Context) PermissionsLfTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsLfTagOutput)
}

func (i *PermissionsLfTagArgs) ToOutput(ctx context.Context) pulumix.Output[*PermissionsLfTagArgs] {
	return pulumix.Val(i)
}

type PermissionsLfTagOutput struct{ *pulumi.OutputState }

func (PermissionsLfTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsLfTag)(nil)).Elem()
}

func (o PermissionsLfTagOutput) ToPermissionsLfTagOutput() PermissionsLfTagOutput {
	return o
}

func (o PermissionsLfTagOutput) ToPermissionsLfTagOutputWithContext(ctx context.Context) PermissionsLfTagOutput {
	return o
}

func (o PermissionsLfTagOutput) ToOutput(ctx context.Context) pulumix.Output[PermissionsLfTag] {
	return pulumix.Output[PermissionsLfTag]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Data Catalog. By default, it is the account ID of the caller.
func (o PermissionsLfTagOutput) CatalogId() pulumix.Output[*string] {
	return pulumix.Apply[PermissionsLfTag](o, func(v PermissionsLfTag) *string { return v.CatalogId })
}

// The key-name for the tag.
func (o PermissionsLfTagOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[PermissionsLfTag](o, func(v PermissionsLfTag) string { return v.Key })
}

// A list of possible values an attribute can take.
//
// The following argument is optional:
func (o PermissionsLfTagOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PermissionsLfTag](o, func(v PermissionsLfTag) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type PermissionsLfTagPolicy struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId *string `pulumi:"catalogId"`
	// A list of tag conditions that apply to the resource's tag policy. Configuration block for tag conditions that apply to the policy. See `expression` below.
	//
	// The following argument is optional:
	Expressions []PermissionsLfTagPolicyExpression `pulumi:"expressions"`
	// The resource type for which the tag policy applies. Valid values are `DATABASE` and `TABLE`.
	ResourceType string `pulumi:"resourceType"`
}

type PermissionsLfTagPolicyArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[*string] `pulumi:"catalogId"`
	// A list of tag conditions that apply to the resource's tag policy. Configuration block for tag conditions that apply to the policy. See `expression` below.
	//
	// The following argument is optional:
	Expressions pulumix.Input[[]*PermissionsLfTagPolicyExpressionArgs] `pulumi:"expressions"`
	// The resource type for which the tag policy applies. Valid values are `DATABASE` and `TABLE`.
	ResourceType pulumix.Input[string] `pulumi:"resourceType"`
}

func (PermissionsLfTagPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsLfTagPolicy)(nil)).Elem()
}

func (i PermissionsLfTagPolicyArgs) ToPermissionsLfTagPolicyOutput() PermissionsLfTagPolicyOutput {
	return i.ToPermissionsLfTagPolicyOutputWithContext(context.Background())
}

func (i PermissionsLfTagPolicyArgs) ToPermissionsLfTagPolicyOutputWithContext(ctx context.Context) PermissionsLfTagPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsLfTagPolicyOutput)
}

func (i *PermissionsLfTagPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*PermissionsLfTagPolicyArgs] {
	return pulumix.Val(i)
}

type PermissionsLfTagPolicyOutput struct{ *pulumi.OutputState }

func (PermissionsLfTagPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsLfTagPolicy)(nil)).Elem()
}

func (o PermissionsLfTagPolicyOutput) ToPermissionsLfTagPolicyOutput() PermissionsLfTagPolicyOutput {
	return o
}

func (o PermissionsLfTagPolicyOutput) ToPermissionsLfTagPolicyOutputWithContext(ctx context.Context) PermissionsLfTagPolicyOutput {
	return o
}

func (o PermissionsLfTagPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[PermissionsLfTagPolicy] {
	return pulumix.Output[PermissionsLfTagPolicy]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Data Catalog. By default, it is the account ID of the caller.
func (o PermissionsLfTagPolicyOutput) CatalogId() pulumix.Output[*string] {
	return pulumix.Apply[PermissionsLfTagPolicy](o, func(v PermissionsLfTagPolicy) *string { return v.CatalogId })
}

// A list of tag conditions that apply to the resource's tag policy. Configuration block for tag conditions that apply to the policy. See `expression` below.
//
// The following argument is optional:
func (o PermissionsLfTagPolicyOutput) Expressions() pulumix.GArrayOutput[PermissionsLfTagPolicyExpression, PermissionsLfTagPolicyExpressionOutput] {
	value := pulumix.Apply[PermissionsLfTagPolicy](o, func(v PermissionsLfTagPolicy) []PermissionsLfTagPolicyExpression { return v.Expressions })
	return pulumix.GArrayOutput[PermissionsLfTagPolicyExpression, PermissionsLfTagPolicyExpressionOutput]{OutputState: value.OutputState}
}

// The resource type for which the tag policy applies. Valid values are `DATABASE` and `TABLE`.
func (o PermissionsLfTagPolicyOutput) ResourceType() pulumix.Output[string] {
	return pulumix.Apply[PermissionsLfTagPolicy](o, func(v PermissionsLfTagPolicy) string { return v.ResourceType })
}

type PermissionsLfTagPolicyExpression struct {
	// The key-name of an LF-Tag.
	Key string `pulumi:"key"`
	// A list of possible values of an LF-Tag.
	Values []string `pulumi:"values"`
}

type PermissionsLfTagPolicyExpressionArgs struct {
	// The key-name of an LF-Tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// A list of possible values of an LF-Tag.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (PermissionsLfTagPolicyExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsLfTagPolicyExpression)(nil)).Elem()
}

func (i PermissionsLfTagPolicyExpressionArgs) ToPermissionsLfTagPolicyExpressionOutput() PermissionsLfTagPolicyExpressionOutput {
	return i.ToPermissionsLfTagPolicyExpressionOutputWithContext(context.Background())
}

func (i PermissionsLfTagPolicyExpressionArgs) ToPermissionsLfTagPolicyExpressionOutputWithContext(ctx context.Context) PermissionsLfTagPolicyExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsLfTagPolicyExpressionOutput)
}

func (i *PermissionsLfTagPolicyExpressionArgs) ToOutput(ctx context.Context) pulumix.Output[*PermissionsLfTagPolicyExpressionArgs] {
	return pulumix.Val(i)
}

type PermissionsLfTagPolicyExpressionOutput struct{ *pulumi.OutputState }

func (PermissionsLfTagPolicyExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsLfTagPolicyExpression)(nil)).Elem()
}

func (o PermissionsLfTagPolicyExpressionOutput) ToPermissionsLfTagPolicyExpressionOutput() PermissionsLfTagPolicyExpressionOutput {
	return o
}

func (o PermissionsLfTagPolicyExpressionOutput) ToPermissionsLfTagPolicyExpressionOutputWithContext(ctx context.Context) PermissionsLfTagPolicyExpressionOutput {
	return o
}

func (o PermissionsLfTagPolicyExpressionOutput) ToOutput(ctx context.Context) pulumix.Output[PermissionsLfTagPolicyExpression] {
	return pulumix.Output[PermissionsLfTagPolicyExpression]{
		OutputState: o.OutputState,
	}
}

// The key-name of an LF-Tag.
func (o PermissionsLfTagPolicyExpressionOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[PermissionsLfTagPolicyExpression](o, func(v PermissionsLfTagPolicyExpression) string { return v.Key })
}

// A list of possible values of an LF-Tag.
func (o PermissionsLfTagPolicyExpressionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PermissionsLfTagPolicyExpression](o, func(v PermissionsLfTagPolicyExpression) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type PermissionsTable struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId *string `pulumi:"catalogId"`
	// Name of the database for the table. Unique to a Data Catalog.
	DatabaseName string `pulumi:"databaseName"`
	// Name of the table.
	Name *string `pulumi:"name"`
	// Whether to use a wildcard representing every table under a database. Defaults to `false`.
	//
	// The following arguments are optional:
	Wildcard *bool `pulumi:"wildcard"`
}

type PermissionsTableArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[*string] `pulumi:"catalogId"`
	// Name of the database for the table. Unique to a Data Catalog.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// Name of the table.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Whether to use a wildcard representing every table under a database. Defaults to `false`.
	//
	// The following arguments are optional:
	Wildcard pulumix.Input[*bool] `pulumi:"wildcard"`
}

func (PermissionsTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsTable)(nil)).Elem()
}

func (i PermissionsTableArgs) ToPermissionsTableOutput() PermissionsTableOutput {
	return i.ToPermissionsTableOutputWithContext(context.Background())
}

func (i PermissionsTableArgs) ToPermissionsTableOutputWithContext(ctx context.Context) PermissionsTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsTableOutput)
}

func (i *PermissionsTableArgs) ToOutput(ctx context.Context) pulumix.Output[*PermissionsTableArgs] {
	return pulumix.Val(i)
}

type PermissionsTableOutput struct{ *pulumi.OutputState }

func (PermissionsTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsTable)(nil)).Elem()
}

func (o PermissionsTableOutput) ToPermissionsTableOutput() PermissionsTableOutput {
	return o
}

func (o PermissionsTableOutput) ToPermissionsTableOutputWithContext(ctx context.Context) PermissionsTableOutput {
	return o
}

func (o PermissionsTableOutput) ToOutput(ctx context.Context) pulumix.Output[PermissionsTable] {
	return pulumix.Output[PermissionsTable]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Data Catalog. By default, it is the account ID of the caller.
func (o PermissionsTableOutput) CatalogId() pulumix.Output[*string] {
	return pulumix.Apply[PermissionsTable](o, func(v PermissionsTable) *string { return v.CatalogId })
}

// Name of the database for the table. Unique to a Data Catalog.
func (o PermissionsTableOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[PermissionsTable](o, func(v PermissionsTable) string { return v.DatabaseName })
}

// Name of the table.
func (o PermissionsTableOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[PermissionsTable](o, func(v PermissionsTable) *string { return v.Name })
}

// Whether to use a wildcard representing every table under a database. Defaults to `false`.
//
// The following arguments are optional:
func (o PermissionsTableOutput) Wildcard() pulumix.Output[*bool] {
	return pulumix.Apply[PermissionsTable](o, func(v PermissionsTable) *bool { return v.Wildcard })
}

type PermissionsTableWithColumns struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId *string `pulumi:"catalogId"`
	// Set of column names for the table.
	ColumnNames []string `pulumi:"columnNames"`
	// Name of the database for the table with columns resource. Unique to the Data Catalog.
	DatabaseName string `pulumi:"databaseName"`
	// Set of column names for the table to exclude. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
	ExcludedColumnNames []string `pulumi:"excludedColumnNames"`
	// Name of the table resource.
	Name string `pulumi:"name"`
	// Whether to use a column wildcard. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
	//
	// The following arguments are optional:
	Wildcard *bool `pulumi:"wildcard"`
}

type PermissionsTableWithColumnsArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[*string] `pulumi:"catalogId"`
	// Set of column names for the table.
	ColumnNames pulumix.Input[[]string] `pulumi:"columnNames"`
	// Name of the database for the table with columns resource. Unique to the Data Catalog.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// Set of column names for the table to exclude. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
	ExcludedColumnNames pulumix.Input[[]string] `pulumi:"excludedColumnNames"`
	// Name of the table resource.
	Name pulumix.Input[string] `pulumi:"name"`
	// Whether to use a column wildcard. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
	//
	// The following arguments are optional:
	Wildcard pulumix.Input[*bool] `pulumi:"wildcard"`
}

func (PermissionsTableWithColumnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsTableWithColumns)(nil)).Elem()
}

func (i PermissionsTableWithColumnsArgs) ToPermissionsTableWithColumnsOutput() PermissionsTableWithColumnsOutput {
	return i.ToPermissionsTableWithColumnsOutputWithContext(context.Background())
}

func (i PermissionsTableWithColumnsArgs) ToPermissionsTableWithColumnsOutputWithContext(ctx context.Context) PermissionsTableWithColumnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsTableWithColumnsOutput)
}

func (i *PermissionsTableWithColumnsArgs) ToOutput(ctx context.Context) pulumix.Output[*PermissionsTableWithColumnsArgs] {
	return pulumix.Val(i)
}

type PermissionsTableWithColumnsOutput struct{ *pulumi.OutputState }

func (PermissionsTableWithColumnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsTableWithColumns)(nil)).Elem()
}

func (o PermissionsTableWithColumnsOutput) ToPermissionsTableWithColumnsOutput() PermissionsTableWithColumnsOutput {
	return o
}

func (o PermissionsTableWithColumnsOutput) ToPermissionsTableWithColumnsOutputWithContext(ctx context.Context) PermissionsTableWithColumnsOutput {
	return o
}

func (o PermissionsTableWithColumnsOutput) ToOutput(ctx context.Context) pulumix.Output[PermissionsTableWithColumns] {
	return pulumix.Output[PermissionsTableWithColumns]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Data Catalog. By default, it is the account ID of the caller.
func (o PermissionsTableWithColumnsOutput) CatalogId() pulumix.Output[*string] {
	return pulumix.Apply[PermissionsTableWithColumns](o, func(v PermissionsTableWithColumns) *string { return v.CatalogId })
}

// Set of column names for the table.
func (o PermissionsTableWithColumnsOutput) ColumnNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PermissionsTableWithColumns](o, func(v PermissionsTableWithColumns) []string { return v.ColumnNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Name of the database for the table with columns resource. Unique to the Data Catalog.
func (o PermissionsTableWithColumnsOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[PermissionsTableWithColumns](o, func(v PermissionsTableWithColumns) string { return v.DatabaseName })
}

// Set of column names for the table to exclude. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
func (o PermissionsTableWithColumnsOutput) ExcludedColumnNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PermissionsTableWithColumns](o, func(v PermissionsTableWithColumns) []string { return v.ExcludedColumnNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Name of the table resource.
func (o PermissionsTableWithColumnsOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[PermissionsTableWithColumns](o, func(v PermissionsTableWithColumns) string { return v.Name })
}

// Whether to use a column wildcard. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
//
// The following arguments are optional:
func (o PermissionsTableWithColumnsOutput) Wildcard() pulumix.Output[*bool] {
	return pulumix.Apply[PermissionsTableWithColumns](o, func(v PermissionsTableWithColumns) *bool { return v.Wildcard })
}

type ResourceLfTagsDatabase struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId *string `pulumi:"catalogId"`
	// Name of the database resource. Unique to the Data Catalog.
	//
	// The following argument is optional:
	Name string `pulumi:"name"`
}

type ResourceLfTagsDatabaseArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[*string] `pulumi:"catalogId"`
	// Name of the database resource. Unique to the Data Catalog.
	//
	// The following argument is optional:
	Name pulumix.Input[string] `pulumi:"name"`
}

func (ResourceLfTagsDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLfTagsDatabase)(nil)).Elem()
}

func (i ResourceLfTagsDatabaseArgs) ToResourceLfTagsDatabaseOutput() ResourceLfTagsDatabaseOutput {
	return i.ToResourceLfTagsDatabaseOutputWithContext(context.Background())
}

func (i ResourceLfTagsDatabaseArgs) ToResourceLfTagsDatabaseOutputWithContext(ctx context.Context) ResourceLfTagsDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLfTagsDatabaseOutput)
}

func (i *ResourceLfTagsDatabaseArgs) ToOutput(ctx context.Context) pulumix.Output[*ResourceLfTagsDatabaseArgs] {
	return pulumix.Val(i)
}

type ResourceLfTagsDatabaseOutput struct{ *pulumi.OutputState }

func (ResourceLfTagsDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLfTagsDatabase)(nil)).Elem()
}

func (o ResourceLfTagsDatabaseOutput) ToResourceLfTagsDatabaseOutput() ResourceLfTagsDatabaseOutput {
	return o
}

func (o ResourceLfTagsDatabaseOutput) ToResourceLfTagsDatabaseOutputWithContext(ctx context.Context) ResourceLfTagsDatabaseOutput {
	return o
}

func (o ResourceLfTagsDatabaseOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceLfTagsDatabase] {
	return pulumix.Output[ResourceLfTagsDatabase]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Data Catalog. By default, it is the account ID of the caller.
func (o ResourceLfTagsDatabaseOutput) CatalogId() pulumix.Output[*string] {
	return pulumix.Apply[ResourceLfTagsDatabase](o, func(v ResourceLfTagsDatabase) *string { return v.CatalogId })
}

// Name of the database resource. Unique to the Data Catalog.
//
// The following argument is optional:
func (o ResourceLfTagsDatabaseOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ResourceLfTagsDatabase](o, func(v ResourceLfTagsDatabase) string { return v.Name })
}

type ResourceLfTagsLfTag struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId *string `pulumi:"catalogId"`
	// Key name for an existing LF-tag.
	Key string `pulumi:"key"`
	// Value from the possible values for the LF-tag.
	//
	// The following argument is optional:
	Value string `pulumi:"value"`
}

type ResourceLfTagsLfTagArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[*string] `pulumi:"catalogId"`
	// Key name for an existing LF-tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// Value from the possible values for the LF-tag.
	//
	// The following argument is optional:
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ResourceLfTagsLfTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLfTagsLfTag)(nil)).Elem()
}

func (i ResourceLfTagsLfTagArgs) ToResourceLfTagsLfTagOutput() ResourceLfTagsLfTagOutput {
	return i.ToResourceLfTagsLfTagOutputWithContext(context.Background())
}

func (i ResourceLfTagsLfTagArgs) ToResourceLfTagsLfTagOutputWithContext(ctx context.Context) ResourceLfTagsLfTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLfTagsLfTagOutput)
}

func (i *ResourceLfTagsLfTagArgs) ToOutput(ctx context.Context) pulumix.Output[*ResourceLfTagsLfTagArgs] {
	return pulumix.Val(i)
}

type ResourceLfTagsLfTagOutput struct{ *pulumi.OutputState }

func (ResourceLfTagsLfTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLfTagsLfTag)(nil)).Elem()
}

func (o ResourceLfTagsLfTagOutput) ToResourceLfTagsLfTagOutput() ResourceLfTagsLfTagOutput {
	return o
}

func (o ResourceLfTagsLfTagOutput) ToResourceLfTagsLfTagOutputWithContext(ctx context.Context) ResourceLfTagsLfTagOutput {
	return o
}

func (o ResourceLfTagsLfTagOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceLfTagsLfTag] {
	return pulumix.Output[ResourceLfTagsLfTag]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Data Catalog. By default, it is the account ID of the caller.
func (o ResourceLfTagsLfTagOutput) CatalogId() pulumix.Output[*string] {
	return pulumix.Apply[ResourceLfTagsLfTag](o, func(v ResourceLfTagsLfTag) *string { return v.CatalogId })
}

// Key name for an existing LF-tag.
func (o ResourceLfTagsLfTagOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[ResourceLfTagsLfTag](o, func(v ResourceLfTagsLfTag) string { return v.Key })
}

// Value from the possible values for the LF-tag.
//
// The following argument is optional:
func (o ResourceLfTagsLfTagOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ResourceLfTagsLfTag](o, func(v ResourceLfTagsLfTag) string { return v.Value })
}

type ResourceLfTagsTable struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId *string `pulumi:"catalogId"`
	// Name of the database for the table. Unique to a Data Catalog.
	DatabaseName string `pulumi:"databaseName"`
	// Name of the table.
	Name *string `pulumi:"name"`
	// Whether to use a wildcard representing every table under a database. Defaults to `false`.
	//
	// The following arguments are optional:
	Wildcard *bool `pulumi:"wildcard"`
}

type ResourceLfTagsTableArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[*string] `pulumi:"catalogId"`
	// Name of the database for the table. Unique to a Data Catalog.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// Name of the table.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Whether to use a wildcard representing every table under a database. Defaults to `false`.
	//
	// The following arguments are optional:
	Wildcard pulumix.Input[*bool] `pulumi:"wildcard"`
}

func (ResourceLfTagsTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLfTagsTable)(nil)).Elem()
}

func (i ResourceLfTagsTableArgs) ToResourceLfTagsTableOutput() ResourceLfTagsTableOutput {
	return i.ToResourceLfTagsTableOutputWithContext(context.Background())
}

func (i ResourceLfTagsTableArgs) ToResourceLfTagsTableOutputWithContext(ctx context.Context) ResourceLfTagsTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLfTagsTableOutput)
}

func (i *ResourceLfTagsTableArgs) ToOutput(ctx context.Context) pulumix.Output[*ResourceLfTagsTableArgs] {
	return pulumix.Val(i)
}

type ResourceLfTagsTableOutput struct{ *pulumi.OutputState }

func (ResourceLfTagsTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLfTagsTable)(nil)).Elem()
}

func (o ResourceLfTagsTableOutput) ToResourceLfTagsTableOutput() ResourceLfTagsTableOutput {
	return o
}

func (o ResourceLfTagsTableOutput) ToResourceLfTagsTableOutputWithContext(ctx context.Context) ResourceLfTagsTableOutput {
	return o
}

func (o ResourceLfTagsTableOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceLfTagsTable] {
	return pulumix.Output[ResourceLfTagsTable]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Data Catalog. By default, it is the account ID of the caller.
func (o ResourceLfTagsTableOutput) CatalogId() pulumix.Output[*string] {
	return pulumix.Apply[ResourceLfTagsTable](o, func(v ResourceLfTagsTable) *string { return v.CatalogId })
}

// Name of the database for the table. Unique to a Data Catalog.
func (o ResourceLfTagsTableOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[ResourceLfTagsTable](o, func(v ResourceLfTagsTable) string { return v.DatabaseName })
}

// Name of the table.
func (o ResourceLfTagsTableOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[ResourceLfTagsTable](o, func(v ResourceLfTagsTable) *string { return v.Name })
}

// Whether to use a wildcard representing every table under a database. Defaults to `false`.
//
// The following arguments are optional:
func (o ResourceLfTagsTableOutput) Wildcard() pulumix.Output[*bool] {
	return pulumix.Apply[ResourceLfTagsTable](o, func(v ResourceLfTagsTable) *bool { return v.Wildcard })
}

type ResourceLfTagsTableWithColumns struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId *string `pulumi:"catalogId"`
	// Set of column names for the table.
	ColumnNames []string `pulumi:"columnNames"`
	// Name of the database for the table with columns resource. Unique to the Data Catalog.
	DatabaseName string `pulumi:"databaseName"`
	// Set of column names for the table to exclude. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
	ExcludedColumnNames []string `pulumi:"excludedColumnNames"`
	// Name of the table resource.
	Name string `pulumi:"name"`
	// Whether to use a column wildcard. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
	//
	// The following arguments are optional:
	Wildcard *bool `pulumi:"wildcard"`
}

type ResourceLfTagsTableWithColumnsArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[*string] `pulumi:"catalogId"`
	// Set of column names for the table.
	ColumnNames pulumix.Input[[]string] `pulumi:"columnNames"`
	// Name of the database for the table with columns resource. Unique to the Data Catalog.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// Set of column names for the table to exclude. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
	ExcludedColumnNames pulumix.Input[[]string] `pulumi:"excludedColumnNames"`
	// Name of the table resource.
	Name pulumix.Input[string] `pulumi:"name"`
	// Whether to use a column wildcard. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
	//
	// The following arguments are optional:
	Wildcard pulumix.Input[*bool] `pulumi:"wildcard"`
}

func (ResourceLfTagsTableWithColumnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLfTagsTableWithColumns)(nil)).Elem()
}

func (i ResourceLfTagsTableWithColumnsArgs) ToResourceLfTagsTableWithColumnsOutput() ResourceLfTagsTableWithColumnsOutput {
	return i.ToResourceLfTagsTableWithColumnsOutputWithContext(context.Background())
}

func (i ResourceLfTagsTableWithColumnsArgs) ToResourceLfTagsTableWithColumnsOutputWithContext(ctx context.Context) ResourceLfTagsTableWithColumnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLfTagsTableWithColumnsOutput)
}

func (i *ResourceLfTagsTableWithColumnsArgs) ToOutput(ctx context.Context) pulumix.Output[*ResourceLfTagsTableWithColumnsArgs] {
	return pulumix.Val(i)
}

type ResourceLfTagsTableWithColumnsOutput struct{ *pulumi.OutputState }

func (ResourceLfTagsTableWithColumnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLfTagsTableWithColumns)(nil)).Elem()
}

func (o ResourceLfTagsTableWithColumnsOutput) ToResourceLfTagsTableWithColumnsOutput() ResourceLfTagsTableWithColumnsOutput {
	return o
}

func (o ResourceLfTagsTableWithColumnsOutput) ToResourceLfTagsTableWithColumnsOutputWithContext(ctx context.Context) ResourceLfTagsTableWithColumnsOutput {
	return o
}

func (o ResourceLfTagsTableWithColumnsOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceLfTagsTableWithColumns] {
	return pulumix.Output[ResourceLfTagsTableWithColumns]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Data Catalog. By default, it is the account ID of the caller.
func (o ResourceLfTagsTableWithColumnsOutput) CatalogId() pulumix.Output[*string] {
	return pulumix.Apply[ResourceLfTagsTableWithColumns](o, func(v ResourceLfTagsTableWithColumns) *string { return v.CatalogId })
}

// Set of column names for the table.
func (o ResourceLfTagsTableWithColumnsOutput) ColumnNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ResourceLfTagsTableWithColumns](o, func(v ResourceLfTagsTableWithColumns) []string { return v.ColumnNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Name of the database for the table with columns resource. Unique to the Data Catalog.
func (o ResourceLfTagsTableWithColumnsOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[ResourceLfTagsTableWithColumns](o, func(v ResourceLfTagsTableWithColumns) string { return v.DatabaseName })
}

// Set of column names for the table to exclude. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
func (o ResourceLfTagsTableWithColumnsOutput) ExcludedColumnNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ResourceLfTagsTableWithColumns](o, func(v ResourceLfTagsTableWithColumns) []string { return v.ExcludedColumnNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Name of the table resource.
func (o ResourceLfTagsTableWithColumnsOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ResourceLfTagsTableWithColumns](o, func(v ResourceLfTagsTableWithColumns) string { return v.Name })
}

// Whether to use a column wildcard. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
//
// The following arguments are optional:
func (o ResourceLfTagsTableWithColumnsOutput) Wildcard() pulumix.Output[*bool] {
	return pulumix.Apply[ResourceLfTagsTableWithColumns](o, func(v ResourceLfTagsTableWithColumns) *bool { return v.Wildcard })
}

type GetDataLakeSettingsCreateDatabaseDefaultPermission struct {
	// List of permissions granted to the principal.
	Permissions []string `pulumi:"permissions"`
	// Principal who is granted permissions.
	Principal string `pulumi:"principal"`
}

type GetDataLakeSettingsCreateDatabaseDefaultPermissionArgs struct {
	// List of permissions granted to the principal.
	Permissions pulumix.Input[[]string] `pulumi:"permissions"`
	// Principal who is granted permissions.
	Principal pulumix.Input[string] `pulumi:"principal"`
}

func (GetDataLakeSettingsCreateDatabaseDefaultPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataLakeSettingsCreateDatabaseDefaultPermission)(nil)).Elem()
}

func (i GetDataLakeSettingsCreateDatabaseDefaultPermissionArgs) ToGetDataLakeSettingsCreateDatabaseDefaultPermissionOutput() GetDataLakeSettingsCreateDatabaseDefaultPermissionOutput {
	return i.ToGetDataLakeSettingsCreateDatabaseDefaultPermissionOutputWithContext(context.Background())
}

func (i GetDataLakeSettingsCreateDatabaseDefaultPermissionArgs) ToGetDataLakeSettingsCreateDatabaseDefaultPermissionOutputWithContext(ctx context.Context) GetDataLakeSettingsCreateDatabaseDefaultPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataLakeSettingsCreateDatabaseDefaultPermissionOutput)
}

func (i *GetDataLakeSettingsCreateDatabaseDefaultPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataLakeSettingsCreateDatabaseDefaultPermissionArgs] {
	return pulumix.Val(i)
}

type GetDataLakeSettingsCreateDatabaseDefaultPermissionOutput struct{ *pulumi.OutputState }

func (GetDataLakeSettingsCreateDatabaseDefaultPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataLakeSettingsCreateDatabaseDefaultPermission)(nil)).Elem()
}

func (o GetDataLakeSettingsCreateDatabaseDefaultPermissionOutput) ToGetDataLakeSettingsCreateDatabaseDefaultPermissionOutput() GetDataLakeSettingsCreateDatabaseDefaultPermissionOutput {
	return o
}

func (o GetDataLakeSettingsCreateDatabaseDefaultPermissionOutput) ToGetDataLakeSettingsCreateDatabaseDefaultPermissionOutputWithContext(ctx context.Context) GetDataLakeSettingsCreateDatabaseDefaultPermissionOutput {
	return o
}

func (o GetDataLakeSettingsCreateDatabaseDefaultPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataLakeSettingsCreateDatabaseDefaultPermission] {
	return pulumix.Output[GetDataLakeSettingsCreateDatabaseDefaultPermission]{
		OutputState: o.OutputState,
	}
}

// List of permissions granted to the principal.
func (o GetDataLakeSettingsCreateDatabaseDefaultPermissionOutput) Permissions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDataLakeSettingsCreateDatabaseDefaultPermission](o, func(v GetDataLakeSettingsCreateDatabaseDefaultPermission) []string { return v.Permissions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Principal who is granted permissions.
func (o GetDataLakeSettingsCreateDatabaseDefaultPermissionOutput) Principal() pulumix.Output[string] {
	return pulumix.Apply[GetDataLakeSettingsCreateDatabaseDefaultPermission](o, func(v GetDataLakeSettingsCreateDatabaseDefaultPermission) string { return v.Principal })
}

type GetDataLakeSettingsCreateTableDefaultPermission struct {
	// List of permissions granted to the principal.
	Permissions []string `pulumi:"permissions"`
	// Principal who is granted permissions.
	Principal string `pulumi:"principal"`
}

type GetDataLakeSettingsCreateTableDefaultPermissionArgs struct {
	// List of permissions granted to the principal.
	Permissions pulumix.Input[[]string] `pulumi:"permissions"`
	// Principal who is granted permissions.
	Principal pulumix.Input[string] `pulumi:"principal"`
}

func (GetDataLakeSettingsCreateTableDefaultPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataLakeSettingsCreateTableDefaultPermission)(nil)).Elem()
}

func (i GetDataLakeSettingsCreateTableDefaultPermissionArgs) ToGetDataLakeSettingsCreateTableDefaultPermissionOutput() GetDataLakeSettingsCreateTableDefaultPermissionOutput {
	return i.ToGetDataLakeSettingsCreateTableDefaultPermissionOutputWithContext(context.Background())
}

func (i GetDataLakeSettingsCreateTableDefaultPermissionArgs) ToGetDataLakeSettingsCreateTableDefaultPermissionOutputWithContext(ctx context.Context) GetDataLakeSettingsCreateTableDefaultPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataLakeSettingsCreateTableDefaultPermissionOutput)
}

func (i *GetDataLakeSettingsCreateTableDefaultPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataLakeSettingsCreateTableDefaultPermissionArgs] {
	return pulumix.Val(i)
}

type GetDataLakeSettingsCreateTableDefaultPermissionOutput struct{ *pulumi.OutputState }

func (GetDataLakeSettingsCreateTableDefaultPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataLakeSettingsCreateTableDefaultPermission)(nil)).Elem()
}

func (o GetDataLakeSettingsCreateTableDefaultPermissionOutput) ToGetDataLakeSettingsCreateTableDefaultPermissionOutput() GetDataLakeSettingsCreateTableDefaultPermissionOutput {
	return o
}

func (o GetDataLakeSettingsCreateTableDefaultPermissionOutput) ToGetDataLakeSettingsCreateTableDefaultPermissionOutputWithContext(ctx context.Context) GetDataLakeSettingsCreateTableDefaultPermissionOutput {
	return o
}

func (o GetDataLakeSettingsCreateTableDefaultPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataLakeSettingsCreateTableDefaultPermission] {
	return pulumix.Output[GetDataLakeSettingsCreateTableDefaultPermission]{
		OutputState: o.OutputState,
	}
}

// List of permissions granted to the principal.
func (o GetDataLakeSettingsCreateTableDefaultPermissionOutput) Permissions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDataLakeSettingsCreateTableDefaultPermission](o, func(v GetDataLakeSettingsCreateTableDefaultPermission) []string { return v.Permissions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Principal who is granted permissions.
func (o GetDataLakeSettingsCreateTableDefaultPermissionOutput) Principal() pulumix.Output[string] {
	return pulumix.Apply[GetDataLakeSettingsCreateTableDefaultPermission](o, func(v GetDataLakeSettingsCreateTableDefaultPermission) string { return v.Principal })
}

type GetPermissionsDataLocation struct {
	// ARN that uniquely identifies the data location resource.
	//
	// The following argument is optional:
	Arn string `pulumi:"arn"`
	// Identifier for the Data Catalog where the location is registered with Lake Formation. By default, it is the account ID of the caller.
	CatalogId string `pulumi:"catalogId"`
}

type GetPermissionsDataLocationArgs struct {
	// ARN that uniquely identifies the data location resource.
	//
	// The following argument is optional:
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Identifier for the Data Catalog where the location is registered with Lake Formation. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[string] `pulumi:"catalogId"`
}

func (GetPermissionsDataLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsDataLocation)(nil)).Elem()
}

func (i GetPermissionsDataLocationArgs) ToGetPermissionsDataLocationOutput() GetPermissionsDataLocationOutput {
	return i.ToGetPermissionsDataLocationOutputWithContext(context.Background())
}

func (i GetPermissionsDataLocationArgs) ToGetPermissionsDataLocationOutputWithContext(ctx context.Context) GetPermissionsDataLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionsDataLocationOutput)
}

func (i *GetPermissionsDataLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPermissionsDataLocationArgs] {
	return pulumix.Val(i)
}

type GetPermissionsDataLocationOutput struct{ *pulumi.OutputState }

func (GetPermissionsDataLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsDataLocation)(nil)).Elem()
}

func (o GetPermissionsDataLocationOutput) ToGetPermissionsDataLocationOutput() GetPermissionsDataLocationOutput {
	return o
}

func (o GetPermissionsDataLocationOutput) ToGetPermissionsDataLocationOutputWithContext(ctx context.Context) GetPermissionsDataLocationOutput {
	return o
}

func (o GetPermissionsDataLocationOutput) ToOutput(ctx context.Context) pulumix.Output[GetPermissionsDataLocation] {
	return pulumix.Output[GetPermissionsDataLocation]{
		OutputState: o.OutputState,
	}
}

// ARN that uniquely identifies the data location resource.
//
// The following argument is optional:
func (o GetPermissionsDataLocationOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetPermissionsDataLocation](o, func(v GetPermissionsDataLocation) string { return v.Arn })
}

// Identifier for the Data Catalog where the location is registered with Lake Formation. By default, it is the account ID of the caller.
func (o GetPermissionsDataLocationOutput) CatalogId() pulumix.Output[string] {
	return pulumix.Apply[GetPermissionsDataLocation](o, func(v GetPermissionsDataLocation) string { return v.CatalogId })
}

type GetPermissionsDatabase struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId string `pulumi:"catalogId"`
	// Name of the database resource. Unique to the Data Catalog.
	//
	// The following argument is optional:
	Name string `pulumi:"name"`
}

type GetPermissionsDatabaseArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[string] `pulumi:"catalogId"`
	// Name of the database resource. Unique to the Data Catalog.
	//
	// The following argument is optional:
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetPermissionsDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsDatabase)(nil)).Elem()
}

func (i GetPermissionsDatabaseArgs) ToGetPermissionsDatabaseOutput() GetPermissionsDatabaseOutput {
	return i.ToGetPermissionsDatabaseOutputWithContext(context.Background())
}

func (i GetPermissionsDatabaseArgs) ToGetPermissionsDatabaseOutputWithContext(ctx context.Context) GetPermissionsDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionsDatabaseOutput)
}

func (i *GetPermissionsDatabaseArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPermissionsDatabaseArgs] {
	return pulumix.Val(i)
}

type GetPermissionsDatabaseOutput struct{ *pulumi.OutputState }

func (GetPermissionsDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsDatabase)(nil)).Elem()
}

func (o GetPermissionsDatabaseOutput) ToGetPermissionsDatabaseOutput() GetPermissionsDatabaseOutput {
	return o
}

func (o GetPermissionsDatabaseOutput) ToGetPermissionsDatabaseOutputWithContext(ctx context.Context) GetPermissionsDatabaseOutput {
	return o
}

func (o GetPermissionsDatabaseOutput) ToOutput(ctx context.Context) pulumix.Output[GetPermissionsDatabase] {
	return pulumix.Output[GetPermissionsDatabase]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Data Catalog. By default, it is the account ID of the caller.
func (o GetPermissionsDatabaseOutput) CatalogId() pulumix.Output[string] {
	return pulumix.Apply[GetPermissionsDatabase](o, func(v GetPermissionsDatabase) string { return v.CatalogId })
}

// Name of the database resource. Unique to the Data Catalog.
//
// The following argument is optional:
func (o GetPermissionsDatabaseOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetPermissionsDatabase](o, func(v GetPermissionsDatabase) string { return v.Name })
}

type GetPermissionsLfTag struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId string `pulumi:"catalogId"`
	// Key-name for the tag.
	Key string `pulumi:"key"`
	// List of possible values an attribute can take.
	//
	// The following argument is optional:
	Values []string `pulumi:"values"`
}

type GetPermissionsLfTagArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[string] `pulumi:"catalogId"`
	// Key-name for the tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// List of possible values an attribute can take.
	//
	// The following argument is optional:
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetPermissionsLfTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsLfTag)(nil)).Elem()
}

func (i GetPermissionsLfTagArgs) ToGetPermissionsLfTagOutput() GetPermissionsLfTagOutput {
	return i.ToGetPermissionsLfTagOutputWithContext(context.Background())
}

func (i GetPermissionsLfTagArgs) ToGetPermissionsLfTagOutputWithContext(ctx context.Context) GetPermissionsLfTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionsLfTagOutput)
}

func (i *GetPermissionsLfTagArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPermissionsLfTagArgs] {
	return pulumix.Val(i)
}

type GetPermissionsLfTagOutput struct{ *pulumi.OutputState }

func (GetPermissionsLfTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsLfTag)(nil)).Elem()
}

func (o GetPermissionsLfTagOutput) ToGetPermissionsLfTagOutput() GetPermissionsLfTagOutput {
	return o
}

func (o GetPermissionsLfTagOutput) ToGetPermissionsLfTagOutputWithContext(ctx context.Context) GetPermissionsLfTagOutput {
	return o
}

func (o GetPermissionsLfTagOutput) ToOutput(ctx context.Context) pulumix.Output[GetPermissionsLfTag] {
	return pulumix.Output[GetPermissionsLfTag]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Data Catalog. By default, it is the account ID of the caller.
func (o GetPermissionsLfTagOutput) CatalogId() pulumix.Output[string] {
	return pulumix.Apply[GetPermissionsLfTag](o, func(v GetPermissionsLfTag) string { return v.CatalogId })
}

// Key-name for the tag.
func (o GetPermissionsLfTagOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetPermissionsLfTag](o, func(v GetPermissionsLfTag) string { return v.Key })
}

// List of possible values an attribute can take.
//
// The following argument is optional:
func (o GetPermissionsLfTagOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPermissionsLfTag](o, func(v GetPermissionsLfTag) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetPermissionsLfTagPolicy struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId string `pulumi:"catalogId"`
	// List of tag conditions that apply to the resource's tag policy. Configuration block for tag conditions that apply to the policy. See `expression` below.
	//
	// The following argument is optional:
	Expressions []GetPermissionsLfTagPolicyExpression `pulumi:"expressions"`
	// Resource type for which the tag policy applies. Valid values are `DATABASE` and `TABLE`.
	ResourceType string `pulumi:"resourceType"`
}

type GetPermissionsLfTagPolicyArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[string] `pulumi:"catalogId"`
	// List of tag conditions that apply to the resource's tag policy. Configuration block for tag conditions that apply to the policy. See `expression` below.
	//
	// The following argument is optional:
	Expressions pulumix.Input[[]*GetPermissionsLfTagPolicyExpressionArgs] `pulumi:"expressions"`
	// Resource type for which the tag policy applies. Valid values are `DATABASE` and `TABLE`.
	ResourceType pulumix.Input[string] `pulumi:"resourceType"`
}

func (GetPermissionsLfTagPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsLfTagPolicy)(nil)).Elem()
}

func (i GetPermissionsLfTagPolicyArgs) ToGetPermissionsLfTagPolicyOutput() GetPermissionsLfTagPolicyOutput {
	return i.ToGetPermissionsLfTagPolicyOutputWithContext(context.Background())
}

func (i GetPermissionsLfTagPolicyArgs) ToGetPermissionsLfTagPolicyOutputWithContext(ctx context.Context) GetPermissionsLfTagPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionsLfTagPolicyOutput)
}

func (i *GetPermissionsLfTagPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPermissionsLfTagPolicyArgs] {
	return pulumix.Val(i)
}

type GetPermissionsLfTagPolicyOutput struct{ *pulumi.OutputState }

func (GetPermissionsLfTagPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsLfTagPolicy)(nil)).Elem()
}

func (o GetPermissionsLfTagPolicyOutput) ToGetPermissionsLfTagPolicyOutput() GetPermissionsLfTagPolicyOutput {
	return o
}

func (o GetPermissionsLfTagPolicyOutput) ToGetPermissionsLfTagPolicyOutputWithContext(ctx context.Context) GetPermissionsLfTagPolicyOutput {
	return o
}

func (o GetPermissionsLfTagPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetPermissionsLfTagPolicy] {
	return pulumix.Output[GetPermissionsLfTagPolicy]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Data Catalog. By default, it is the account ID of the caller.
func (o GetPermissionsLfTagPolicyOutput) CatalogId() pulumix.Output[string] {
	return pulumix.Apply[GetPermissionsLfTagPolicy](o, func(v GetPermissionsLfTagPolicy) string { return v.CatalogId })
}

// List of tag conditions that apply to the resource's tag policy. Configuration block for tag conditions that apply to the policy. See `expression` below.
//
// The following argument is optional:
func (o GetPermissionsLfTagPolicyOutput) Expressions() pulumix.GArrayOutput[GetPermissionsLfTagPolicyExpression, GetPermissionsLfTagPolicyExpressionOutput] {
	value := pulumix.Apply[GetPermissionsLfTagPolicy](o, func(v GetPermissionsLfTagPolicy) []GetPermissionsLfTagPolicyExpression { return v.Expressions })
	return pulumix.GArrayOutput[GetPermissionsLfTagPolicyExpression, GetPermissionsLfTagPolicyExpressionOutput]{OutputState: value.OutputState}
}

// Resource type for which the tag policy applies. Valid values are `DATABASE` and `TABLE`.
func (o GetPermissionsLfTagPolicyOutput) ResourceType() pulumix.Output[string] {
	return pulumix.Apply[GetPermissionsLfTagPolicy](o, func(v GetPermissionsLfTagPolicy) string { return v.ResourceType })
}

type GetPermissionsLfTagPolicyExpression struct {
	// Key-name of an LF-Tag.
	Key string `pulumi:"key"`
	// List of possible values of an LF-Tag.
	Values []string `pulumi:"values"`
}

type GetPermissionsLfTagPolicyExpressionArgs struct {
	// Key-name of an LF-Tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// List of possible values of an LF-Tag.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetPermissionsLfTagPolicyExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsLfTagPolicyExpression)(nil)).Elem()
}

func (i GetPermissionsLfTagPolicyExpressionArgs) ToGetPermissionsLfTagPolicyExpressionOutput() GetPermissionsLfTagPolicyExpressionOutput {
	return i.ToGetPermissionsLfTagPolicyExpressionOutputWithContext(context.Background())
}

func (i GetPermissionsLfTagPolicyExpressionArgs) ToGetPermissionsLfTagPolicyExpressionOutputWithContext(ctx context.Context) GetPermissionsLfTagPolicyExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionsLfTagPolicyExpressionOutput)
}

func (i *GetPermissionsLfTagPolicyExpressionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPermissionsLfTagPolicyExpressionArgs] {
	return pulumix.Val(i)
}

type GetPermissionsLfTagPolicyExpressionOutput struct{ *pulumi.OutputState }

func (GetPermissionsLfTagPolicyExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsLfTagPolicyExpression)(nil)).Elem()
}

func (o GetPermissionsLfTagPolicyExpressionOutput) ToGetPermissionsLfTagPolicyExpressionOutput() GetPermissionsLfTagPolicyExpressionOutput {
	return o
}

func (o GetPermissionsLfTagPolicyExpressionOutput) ToGetPermissionsLfTagPolicyExpressionOutputWithContext(ctx context.Context) GetPermissionsLfTagPolicyExpressionOutput {
	return o
}

func (o GetPermissionsLfTagPolicyExpressionOutput) ToOutput(ctx context.Context) pulumix.Output[GetPermissionsLfTagPolicyExpression] {
	return pulumix.Output[GetPermissionsLfTagPolicyExpression]{
		OutputState: o.OutputState,
	}
}

// Key-name of an LF-Tag.
func (o GetPermissionsLfTagPolicyExpressionOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetPermissionsLfTagPolicyExpression](o, func(v GetPermissionsLfTagPolicyExpression) string { return v.Key })
}

// List of possible values of an LF-Tag.
func (o GetPermissionsLfTagPolicyExpressionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPermissionsLfTagPolicyExpression](o, func(v GetPermissionsLfTagPolicyExpression) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetPermissionsTable struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId string `pulumi:"catalogId"`
	// Name of the database for the table. Unique to a Data Catalog.
	//
	// The following arguments are optional:
	DatabaseName string `pulumi:"databaseName"`
	// Name of the table. At least one of `name` or `wildcard` is required.
	Name string `pulumi:"name"`
	// Whether to use a wildcard representing every table under a database. At least one of `name` or `wildcard` is required. Defaults to `false`.
	Wildcard *bool `pulumi:"wildcard"`
}

type GetPermissionsTableArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[string] `pulumi:"catalogId"`
	// Name of the database for the table. Unique to a Data Catalog.
	//
	// The following arguments are optional:
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// Name of the table. At least one of `name` or `wildcard` is required.
	Name pulumix.Input[string] `pulumi:"name"`
	// Whether to use a wildcard representing every table under a database. At least one of `name` or `wildcard` is required. Defaults to `false`.
	Wildcard pulumix.Input[*bool] `pulumi:"wildcard"`
}

func (GetPermissionsTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsTable)(nil)).Elem()
}

func (i GetPermissionsTableArgs) ToGetPermissionsTableOutput() GetPermissionsTableOutput {
	return i.ToGetPermissionsTableOutputWithContext(context.Background())
}

func (i GetPermissionsTableArgs) ToGetPermissionsTableOutputWithContext(ctx context.Context) GetPermissionsTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionsTableOutput)
}

func (i *GetPermissionsTableArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPermissionsTableArgs] {
	return pulumix.Val(i)
}

type GetPermissionsTableOutput struct{ *pulumi.OutputState }

func (GetPermissionsTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsTable)(nil)).Elem()
}

func (o GetPermissionsTableOutput) ToGetPermissionsTableOutput() GetPermissionsTableOutput {
	return o
}

func (o GetPermissionsTableOutput) ToGetPermissionsTableOutputWithContext(ctx context.Context) GetPermissionsTableOutput {
	return o
}

func (o GetPermissionsTableOutput) ToOutput(ctx context.Context) pulumix.Output[GetPermissionsTable] {
	return pulumix.Output[GetPermissionsTable]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Data Catalog. By default, it is the account ID of the caller.
func (o GetPermissionsTableOutput) CatalogId() pulumix.Output[string] {
	return pulumix.Apply[GetPermissionsTable](o, func(v GetPermissionsTable) string { return v.CatalogId })
}

// Name of the database for the table. Unique to a Data Catalog.
//
// The following arguments are optional:
func (o GetPermissionsTableOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[GetPermissionsTable](o, func(v GetPermissionsTable) string { return v.DatabaseName })
}

// Name of the table. At least one of `name` or `wildcard` is required.
func (o GetPermissionsTableOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetPermissionsTable](o, func(v GetPermissionsTable) string { return v.Name })
}

// Whether to use a wildcard representing every table under a database. At least one of `name` or `wildcard` is required. Defaults to `false`.
func (o GetPermissionsTableOutput) Wildcard() pulumix.Output[*bool] {
	return pulumix.Apply[GetPermissionsTable](o, func(v GetPermissionsTable) *bool { return v.Wildcard })
}

type GetPermissionsTableWithColumns struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId string `pulumi:"catalogId"`
	// Set of column names for the table. At least one of `columnNames` or `excludedColumnNames` is required.
	ColumnNames []string `pulumi:"columnNames"`
	// Name of the database for the table with columns resource. Unique to the Data Catalog.
	DatabaseName string `pulumi:"databaseName"`
	// Set of column names for the table to exclude. At least one of `columnNames` or `excludedColumnNames` is required.
	ExcludedColumnNames []string `pulumi:"excludedColumnNames"`
	// Name of the table resource.
	//
	// The following arguments are optional:
	Name string `pulumi:"name"`
	// Whether to use a wildcard representing every table under a database. At least one of `name` or `wildcard` is required. Defaults to `false`.
	Wildcard *bool `pulumi:"wildcard"`
}

type GetPermissionsTableWithColumnsArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumix.Input[string] `pulumi:"catalogId"`
	// Set of column names for the table. At least one of `columnNames` or `excludedColumnNames` is required.
	ColumnNames pulumix.Input[[]string] `pulumi:"columnNames"`
	// Name of the database for the table with columns resource. Unique to the Data Catalog.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// Set of column names for the table to exclude. At least one of `columnNames` or `excludedColumnNames` is required.
	ExcludedColumnNames pulumix.Input[[]string] `pulumi:"excludedColumnNames"`
	// Name of the table resource.
	//
	// The following arguments are optional:
	Name pulumix.Input[string] `pulumi:"name"`
	// Whether to use a wildcard representing every table under a database. At least one of `name` or `wildcard` is required. Defaults to `false`.
	Wildcard pulumix.Input[*bool] `pulumi:"wildcard"`
}

func (GetPermissionsTableWithColumnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsTableWithColumns)(nil)).Elem()
}

func (i GetPermissionsTableWithColumnsArgs) ToGetPermissionsTableWithColumnsOutput() GetPermissionsTableWithColumnsOutput {
	return i.ToGetPermissionsTableWithColumnsOutputWithContext(context.Background())
}

func (i GetPermissionsTableWithColumnsArgs) ToGetPermissionsTableWithColumnsOutputWithContext(ctx context.Context) GetPermissionsTableWithColumnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPermissionsTableWithColumnsOutput)
}

func (i *GetPermissionsTableWithColumnsArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPermissionsTableWithColumnsArgs] {
	return pulumix.Val(i)
}

type GetPermissionsTableWithColumnsOutput struct{ *pulumi.OutputState }

func (GetPermissionsTableWithColumnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsTableWithColumns)(nil)).Elem()
}

func (o GetPermissionsTableWithColumnsOutput) ToGetPermissionsTableWithColumnsOutput() GetPermissionsTableWithColumnsOutput {
	return o
}

func (o GetPermissionsTableWithColumnsOutput) ToGetPermissionsTableWithColumnsOutputWithContext(ctx context.Context) GetPermissionsTableWithColumnsOutput {
	return o
}

func (o GetPermissionsTableWithColumnsOutput) ToOutput(ctx context.Context) pulumix.Output[GetPermissionsTableWithColumns] {
	return pulumix.Output[GetPermissionsTableWithColumns]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Data Catalog. By default, it is the account ID of the caller.
func (o GetPermissionsTableWithColumnsOutput) CatalogId() pulumix.Output[string] {
	return pulumix.Apply[GetPermissionsTableWithColumns](o, func(v GetPermissionsTableWithColumns) string { return v.CatalogId })
}

// Set of column names for the table. At least one of `columnNames` or `excludedColumnNames` is required.
func (o GetPermissionsTableWithColumnsOutput) ColumnNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPermissionsTableWithColumns](o, func(v GetPermissionsTableWithColumns) []string { return v.ColumnNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Name of the database for the table with columns resource. Unique to the Data Catalog.
func (o GetPermissionsTableWithColumnsOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[GetPermissionsTableWithColumns](o, func(v GetPermissionsTableWithColumns) string { return v.DatabaseName })
}

// Set of column names for the table to exclude. At least one of `columnNames` or `excludedColumnNames` is required.
func (o GetPermissionsTableWithColumnsOutput) ExcludedColumnNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPermissionsTableWithColumns](o, func(v GetPermissionsTableWithColumns) []string { return v.ExcludedColumnNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Name of the table resource.
//
// The following arguments are optional:
func (o GetPermissionsTableWithColumnsOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetPermissionsTableWithColumns](o, func(v GetPermissionsTableWithColumns) string { return v.Name })
}

// Whether to use a wildcard representing every table under a database. At least one of `name` or `wildcard` is required. Defaults to `false`.
func (o GetPermissionsTableWithColumnsOutput) Wildcard() pulumix.Output[*bool] {
	return pulumix.Apply[GetPermissionsTableWithColumns](o, func(v GetPermissionsTableWithColumns) *bool { return v.Wildcard })
}

func init() {
	pulumi.RegisterOutputType(DataLakeSettingsCreateDatabaseDefaultPermissionOutput{})
	pulumi.RegisterOutputType(DataLakeSettingsCreateTableDefaultPermissionOutput{})
	pulumi.RegisterOutputType(PermissionsDataLocationOutput{})
	pulumi.RegisterOutputType(PermissionsDatabaseOutput{})
	pulumi.RegisterOutputType(PermissionsLfTagOutput{})
	pulumi.RegisterOutputType(PermissionsLfTagPolicyOutput{})
	pulumi.RegisterOutputType(PermissionsLfTagPolicyExpressionOutput{})
	pulumi.RegisterOutputType(PermissionsTableOutput{})
	pulumi.RegisterOutputType(PermissionsTableWithColumnsOutput{})
	pulumi.RegisterOutputType(ResourceLfTagsDatabaseOutput{})
	pulumi.RegisterOutputType(ResourceLfTagsLfTagOutput{})
	pulumi.RegisterOutputType(ResourceLfTagsTableOutput{})
	pulumi.RegisterOutputType(ResourceLfTagsTableWithColumnsOutput{})
	pulumi.RegisterOutputType(GetDataLakeSettingsCreateDatabaseDefaultPermissionOutput{})
	pulumi.RegisterOutputType(GetDataLakeSettingsCreateTableDefaultPermissionOutput{})
	pulumi.RegisterOutputType(GetPermissionsDataLocationOutput{})
	pulumi.RegisterOutputType(GetPermissionsDatabaseOutput{})
	pulumi.RegisterOutputType(GetPermissionsLfTagOutput{})
	pulumi.RegisterOutputType(GetPermissionsLfTagPolicyOutput{})
	pulumi.RegisterOutputType(GetPermissionsLfTagPolicyExpressionOutput{})
	pulumi.RegisterOutputType(GetPermissionsTableOutput{})
	pulumi.RegisterOutputType(GetPermissionsTableWithColumnsOutput{})
}
