// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Kendra Experience.
func LookupExperience(ctx *pulumi.Context, args *LookupExperienceArgs, opts ...pulumi.InvokeOption) (*LookupExperienceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupExperienceResult
	err := ctx.Invoke("aws:kendra/getExperience:getExperience", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getExperience.
type LookupExperienceArgs struct {
	// Identifier of the Experience.
	ExperienceId string `pulumi:"experienceId"`
	// Identifier of the index that contains the Experience.
	IndexId string `pulumi:"indexId"`
}

// A collection of values returned by getExperience.
type LookupExperienceResult struct {
	// ARN of the Experience.
	Arn string `pulumi:"arn"`
	// Block that specifies the configuration information for your Amazon Kendra Experience. This includes `contentSourceConfiguration`, which specifies the data source IDs and/or FAQ IDs, and `userIdentityConfiguration`, which specifies the user or group information to grant access to your Amazon Kendra Experience. Documented below.
	Configurations []GetExperienceConfiguration `pulumi:"configurations"`
	// Unix datetime that the Experience was created.
	CreatedAt string `pulumi:"createdAt"`
	// Description of the Experience.
	Description string `pulumi:"description"`
	// Shows the endpoint URLs for your Amazon Kendra Experiences. The URLs are unique and fully hosted by AWS. Documented below.
	Endpoints []GetExperienceEndpoint `pulumi:"endpoints"`
	// Reason your Amazon Kendra Experience could not properly process.
	ErrorMessage string `pulumi:"errorMessage"`
	ExperienceId string `pulumi:"experienceId"`
	// The provider-assigned unique ID for this managed resource.
	Id      string `pulumi:"id"`
	IndexId string `pulumi:"indexId"`
	// Name of the Experience.
	Name string `pulumi:"name"`
	// Shows the ARN of a role with permission to access `Query` API, `QuerySuggestions` API, `SubmitFeedback` API, and AWS SSO that stores your user and group information.
	RoleArn string `pulumi:"roleArn"`
	// Current processing status of your Amazon Kendra Experience. When the status is `ACTIVE`, your Amazon Kendra Experience is ready to use. When the status is `FAILED`, the `errorMessage` field contains the reason that this failed.
	Status string `pulumi:"status"`
	// Date and time that the Experience was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupExperienceOutput(ctx *pulumi.Context, args LookupExperienceOutputArgs, opts ...pulumi.InvokeOption) LookupExperienceResultOutput {
	outputResult := pulumix.ApplyErr[*LookupExperienceArgs](args.ToOutput(), func(plainArgs *LookupExperienceArgs) (*LookupExperienceResult, error) {
		return LookupExperience(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupExperienceResultOutput, *LookupExperienceResult](outputResult)
}

// A collection of arguments for invoking getExperience.
type LookupExperienceOutputArgs struct {
	// Identifier of the Experience.
	ExperienceId pulumix.Input[string] `pulumi:"experienceId"`
	// Identifier of the index that contains the Experience.
	IndexId pulumix.Input[string] `pulumi:"indexId"`
}

func (args LookupExperienceOutputArgs) ToOutput() pulumix.Output[*LookupExperienceArgs] {
	allArgs := pulumix.All(
		args.ExperienceId.ToOutput(context.Background()).AsAny(),
		args.IndexId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupExperienceArgs {
		return &LookupExperienceArgs{
			ExperienceId: resolvedArgs[0].(string),
			IndexId:      resolvedArgs[1].(string),
		}
	})
}

type LookupExperienceResultOutput struct{ *pulumi.OutputState }

func (LookupExperienceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupExperienceResult)(nil)).Elem()
}

func (o LookupExperienceResultOutput) ToOutput(context.Context) pulumix.Output[*LookupExperienceResult] {
	return pulumix.Output[*LookupExperienceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupExperienceResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupExperienceResult](o, func(v *LookupExperienceResult) string { return v.Arn })
}

func (o LookupExperienceResultOutput) Configurations() pulumix.GArrayOutput[GetExperienceConfiguration, GetExperienceConfigurationOutput] {
	value := pulumix.Apply[*LookupExperienceResult](o, func(v *LookupExperienceResult) []GetExperienceConfiguration { return v.Configurations })
	return pulumix.GArrayOutput[GetExperienceConfiguration, GetExperienceConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupExperienceResultOutput) CreatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupExperienceResult](o, func(v *LookupExperienceResult) string { return v.CreatedAt })
}

func (o LookupExperienceResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupExperienceResult](o, func(v *LookupExperienceResult) string { return v.Description })
}

func (o LookupExperienceResultOutput) Endpoints() pulumix.GArrayOutput[GetExperienceEndpoint, GetExperienceEndpointOutput] {
	value := pulumix.Apply[*LookupExperienceResult](o, func(v *LookupExperienceResult) []GetExperienceEndpoint { return v.Endpoints })
	return pulumix.GArrayOutput[GetExperienceEndpoint, GetExperienceEndpointOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupExperienceResultOutput) ErrorMessage() pulumix.Output[string] {
	return pulumix.Apply[*LookupExperienceResult](o, func(v *LookupExperienceResult) string { return v.ErrorMessage })
}

func (o LookupExperienceResultOutput) ExperienceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupExperienceResult](o, func(v *LookupExperienceResult) string { return v.ExperienceId })
}

func (o LookupExperienceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupExperienceResult](o, func(v *LookupExperienceResult) string { return v.Id })
}

func (o LookupExperienceResultOutput) IndexId() pulumix.Output[string] {
	return pulumix.Apply[*LookupExperienceResult](o, func(v *LookupExperienceResult) string { return v.IndexId })
}

func (o LookupExperienceResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupExperienceResult](o, func(v *LookupExperienceResult) string { return v.Name })
}

func (o LookupExperienceResultOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupExperienceResult](o, func(v *LookupExperienceResult) string { return v.RoleArn })
}

func (o LookupExperienceResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupExperienceResult](o, func(v *LookupExperienceResult) string { return v.Status })
}

func (o LookupExperienceResultOutput) UpdatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupExperienceResult](o, func(v *LookupExperienceResult) string { return v.UpdatedAt })
}
