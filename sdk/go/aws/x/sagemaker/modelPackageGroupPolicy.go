// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a SageMaker Model Package Group Policy resource.
type ModelPackageGroupPolicy struct {
	pulumi.CustomResourceState

	// The name of the model package group.
	ModelPackageGroupName pulumix.Output[string] `pulumi:"modelPackageGroupName"`
	ResourcePolicy        pulumix.Output[string] `pulumi:"resourcePolicy"`
}

// NewModelPackageGroupPolicy registers a new resource with the given unique name, arguments, and options.
func NewModelPackageGroupPolicy(ctx *pulumi.Context,
	name string, args *ModelPackageGroupPolicyArgs, opts ...pulumi.ResourceOption) (*ModelPackageGroupPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ModelPackageGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ModelPackageGroupName'")
	}
	if args.ResourcePolicy == nil {
		return nil, errors.New("invalid value for required argument 'ResourcePolicy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ModelPackageGroupPolicy
	err := ctx.RegisterResource("aws:sagemaker/modelPackageGroupPolicy:ModelPackageGroupPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModelPackageGroupPolicy gets an existing ModelPackageGroupPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModelPackageGroupPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelPackageGroupPolicyState, opts ...pulumi.ResourceOption) (*ModelPackageGroupPolicy, error) {
	var resource ModelPackageGroupPolicy
	err := ctx.ReadResource("aws:sagemaker/modelPackageGroupPolicy:ModelPackageGroupPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ModelPackageGroupPolicy resources.
type modelPackageGroupPolicyState struct {
	// The name of the model package group.
	ModelPackageGroupName *string `pulumi:"modelPackageGroupName"`
	ResourcePolicy        *string `pulumi:"resourcePolicy"`
}

type ModelPackageGroupPolicyState struct {
	// The name of the model package group.
	ModelPackageGroupName pulumix.Input[*string]
	ResourcePolicy        pulumix.Input[*string]
}

func (ModelPackageGroupPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelPackageGroupPolicyState)(nil)).Elem()
}

type modelPackageGroupPolicyArgs struct {
	// The name of the model package group.
	ModelPackageGroupName string `pulumi:"modelPackageGroupName"`
	ResourcePolicy        string `pulumi:"resourcePolicy"`
}

// The set of arguments for constructing a ModelPackageGroupPolicy resource.
type ModelPackageGroupPolicyArgs struct {
	// The name of the model package group.
	ModelPackageGroupName pulumix.Input[string]
	ResourcePolicy        pulumix.Input[string]
}

func (ModelPackageGroupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelPackageGroupPolicyArgs)(nil)).Elem()
}

type ModelPackageGroupPolicyOutput struct{ *pulumi.OutputState }

func (ModelPackageGroupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelPackageGroupPolicy)(nil)).Elem()
}

func (o ModelPackageGroupPolicyOutput) ToModelPackageGroupPolicyOutput() ModelPackageGroupPolicyOutput {
	return o
}

func (o ModelPackageGroupPolicyOutput) ToModelPackageGroupPolicyOutputWithContext(ctx context.Context) ModelPackageGroupPolicyOutput {
	return o
}

func (o ModelPackageGroupPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ModelPackageGroupPolicy] {
	return pulumix.Output[ModelPackageGroupPolicy]{
		OutputState: o.OutputState,
	}
}

// The name of the model package group.
func (o ModelPackageGroupPolicyOutput) ModelPackageGroupName() pulumix.Output[string] {
	value := pulumix.Apply[ModelPackageGroupPolicy](o, func(v ModelPackageGroupPolicy) pulumix.Output[string] { return v.ModelPackageGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ModelPackageGroupPolicyOutput) ResourcePolicy() pulumix.Output[string] {
	value := pulumix.Apply[ModelPackageGroupPolicy](o, func(v ModelPackageGroupPolicy) pulumix.Output[string] { return v.ResourcePolicy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ModelPackageGroupPolicyOutput{})
}
