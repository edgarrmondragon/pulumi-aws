// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Amazon Managed Grafana workspace license association resource.
type LicenseAssociation struct {
	pulumi.CustomResourceState

	// If `licenseType` is set to `ENTERPRISE_FREE_TRIAL`, this is the expiration date of the free trial.
	FreeTrialExpiration pulumix.Output[string] `pulumi:"freeTrialExpiration"`
	// If `licenseType` is set to `ENTERPRISE`, this is the expiration date of the enterprise license.
	LicenseExpiration pulumix.Output[string] `pulumi:"licenseExpiration"`
	// The type of license for the workspace license association. Valid values are `ENTERPRISE` and `ENTERPRISE_FREE_TRIAL`.
	LicenseType pulumix.Output[string] `pulumi:"licenseType"`
	// The workspace id.
	WorkspaceId pulumix.Output[string] `pulumi:"workspaceId"`
}

// NewLicenseAssociation registers a new resource with the given unique name, arguments, and options.
func NewLicenseAssociation(ctx *pulumi.Context,
	name string, args *LicenseAssociationArgs, opts ...pulumi.ResourceOption) (*LicenseAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LicenseType == nil {
		return nil, errors.New("invalid value for required argument 'LicenseType'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicenseAssociation
	err := ctx.RegisterResource("aws:grafana/licenseAssociation:LicenseAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseAssociation gets an existing LicenseAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseAssociationState, opts ...pulumi.ResourceOption) (*LicenseAssociation, error) {
	var resource LicenseAssociation
	err := ctx.ReadResource("aws:grafana/licenseAssociation:LicenseAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseAssociation resources.
type licenseAssociationState struct {
	// If `licenseType` is set to `ENTERPRISE_FREE_TRIAL`, this is the expiration date of the free trial.
	FreeTrialExpiration *string `pulumi:"freeTrialExpiration"`
	// If `licenseType` is set to `ENTERPRISE`, this is the expiration date of the enterprise license.
	LicenseExpiration *string `pulumi:"licenseExpiration"`
	// The type of license for the workspace license association. Valid values are `ENTERPRISE` and `ENTERPRISE_FREE_TRIAL`.
	LicenseType *string `pulumi:"licenseType"`
	// The workspace id.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type LicenseAssociationState struct {
	// If `licenseType` is set to `ENTERPRISE_FREE_TRIAL`, this is the expiration date of the free trial.
	FreeTrialExpiration pulumix.Input[*string]
	// If `licenseType` is set to `ENTERPRISE`, this is the expiration date of the enterprise license.
	LicenseExpiration pulumix.Input[*string]
	// The type of license for the workspace license association. Valid values are `ENTERPRISE` and `ENTERPRISE_FREE_TRIAL`.
	LicenseType pulumix.Input[*string]
	// The workspace id.
	WorkspaceId pulumix.Input[*string]
}

func (LicenseAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseAssociationState)(nil)).Elem()
}

type licenseAssociationArgs struct {
	// The type of license for the workspace license association. Valid values are `ENTERPRISE` and `ENTERPRISE_FREE_TRIAL`.
	LicenseType string `pulumi:"licenseType"`
	// The workspace id.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a LicenseAssociation resource.
type LicenseAssociationArgs struct {
	// The type of license for the workspace license association. Valid values are `ENTERPRISE` and `ENTERPRISE_FREE_TRIAL`.
	LicenseType pulumix.Input[string]
	// The workspace id.
	WorkspaceId pulumix.Input[string]
}

func (LicenseAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseAssociationArgs)(nil)).Elem()
}

type LicenseAssociationOutput struct{ *pulumi.OutputState }

func (LicenseAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseAssociation)(nil)).Elem()
}

func (o LicenseAssociationOutput) ToLicenseAssociationOutput() LicenseAssociationOutput {
	return o
}

func (o LicenseAssociationOutput) ToLicenseAssociationOutputWithContext(ctx context.Context) LicenseAssociationOutput {
	return o
}

func (o LicenseAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[LicenseAssociation] {
	return pulumix.Output[LicenseAssociation]{
		OutputState: o.OutputState,
	}
}

// If `licenseType` is set to `ENTERPRISE_FREE_TRIAL`, this is the expiration date of the free trial.
func (o LicenseAssociationOutput) FreeTrialExpiration() pulumix.Output[string] {
	value := pulumix.Apply[LicenseAssociation](o, func(v LicenseAssociation) pulumix.Output[string] { return v.FreeTrialExpiration })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If `licenseType` is set to `ENTERPRISE`, this is the expiration date of the enterprise license.
func (o LicenseAssociationOutput) LicenseExpiration() pulumix.Output[string] {
	value := pulumix.Apply[LicenseAssociation](o, func(v LicenseAssociation) pulumix.Output[string] { return v.LicenseExpiration })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of license for the workspace license association. Valid values are `ENTERPRISE` and `ENTERPRISE_FREE_TRIAL`.
func (o LicenseAssociationOutput) LicenseType() pulumix.Output[string] {
	value := pulumix.Apply[LicenseAssociation](o, func(v LicenseAssociation) pulumix.Output[string] { return v.LicenseType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The workspace id.
func (o LicenseAssociationOutput) WorkspaceId() pulumix.Output[string] {
	value := pulumix.Apply[LicenseAssociation](o, func(v LicenseAssociation) pulumix.Output[string] { return v.WorkspaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LicenseAssociationOutput{})
}
