// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Allows the specified Amazon Connect instance to access the specified Amazon Lex (V1) bot. For more information see
// [Amazon Connect: Getting Started](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-get-started.html) and [Add an Amazon Lex bot](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-lex.html).
//
// > **NOTE:** This resource only currently supports Amazon Lex (V1) Associations.
type BotAssociation struct {
	pulumi.CustomResourceState

	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId pulumix.Output[string] `pulumi:"instanceId"`
	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	LexBot pulumix.GPtrOutput[BotAssociationLexBot, BotAssociationLexBotOutput] `pulumi:"lexBot"`
}

// NewBotAssociation registers a new resource with the given unique name, arguments, and options.
func NewBotAssociation(ctx *pulumi.Context,
	name string, args *BotAssociationArgs, opts ...pulumi.ResourceOption) (*BotAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.LexBot == nil {
		return nil, errors.New("invalid value for required argument 'LexBot'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BotAssociation
	err := ctx.RegisterResource("aws:connect/botAssociation:BotAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotAssociation gets an existing BotAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotAssociationState, opts ...pulumi.ResourceOption) (*BotAssociation, error) {
	var resource BotAssociation
	err := ctx.ReadResource("aws:connect/botAssociation:BotAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotAssociation resources.
type botAssociationState struct {
	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	LexBot *BotAssociationLexBot `pulumi:"lexBot"`
}

type BotAssociationState struct {
	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId pulumix.Input[*string]
	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	LexBot pulumix.Input[*BotAssociationLexBotArgs]
}

func (BotAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*botAssociationState)(nil)).Elem()
}

type botAssociationArgs struct {
	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId string `pulumi:"instanceId"`
	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	LexBot BotAssociationLexBot `pulumi:"lexBot"`
}

// The set of arguments for constructing a BotAssociation resource.
type BotAssociationArgs struct {
	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId pulumix.Input[string]
	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	LexBot pulumix.Input[*BotAssociationLexBotArgs]
}

func (BotAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botAssociationArgs)(nil)).Elem()
}

type BotAssociationOutput struct{ *pulumi.OutputState }

func (BotAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BotAssociation)(nil)).Elem()
}

func (o BotAssociationOutput) ToBotAssociationOutput() BotAssociationOutput {
	return o
}

func (o BotAssociationOutput) ToBotAssociationOutputWithContext(ctx context.Context) BotAssociationOutput {
	return o
}

func (o BotAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[BotAssociation] {
	return pulumix.Output[BotAssociation]{
		OutputState: o.OutputState,
	}
}

// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
func (o BotAssociationOutput) InstanceId() pulumix.Output[string] {
	value := pulumix.Apply[BotAssociation](o, func(v BotAssociation) pulumix.Output[string] { return v.InstanceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration information of an Amazon Lex (V1) bot. Detailed below.
func (o BotAssociationOutput) LexBot() pulumix.GPtrOutput[BotAssociationLexBot, BotAssociationLexBotOutput] {
	value := pulumix.Apply[BotAssociation](o, func(v BotAssociation) pulumix.GPtrOutput[BotAssociationLexBot, BotAssociationLexBotOutput] {
		return v.LexBot
	})
	unwrapped := pulumix.Flatten[*BotAssociationLexBot, pulumix.GPtrOutput[BotAssociationLexBot, BotAssociationLexBotOutput]](value)
	return pulumix.GPtrOutput[BotAssociationLexBot, BotAssociationLexBotOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(BotAssociationOutput{})
}
