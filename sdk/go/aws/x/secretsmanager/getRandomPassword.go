// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretsmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Generate a random password.
func GetRandomPassword(ctx *pulumi.Context, args *GetRandomPasswordArgs, opts ...pulumi.InvokeOption) (*GetRandomPasswordResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRandomPasswordResult
	err := ctx.Invoke("aws:secretsmanager/getRandomPassword:getRandomPassword", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRandomPassword.
type GetRandomPasswordArgs struct {
	// String of the characters that you don't want in the password.
	ExcludeCharacters *string `pulumi:"excludeCharacters"`
	// Specifies whether to exclude lowercase letters from the password.
	ExcludeLowercase *bool `pulumi:"excludeLowercase"`
	// Specifies whether to exclude numbers from the password.
	ExcludeNumbers *bool `pulumi:"excludeNumbers"`
	// Specifies whether to exclude the following punctuation characters from the password: ``! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~ .``
	ExcludePunctuation *bool `pulumi:"excludePunctuation"`
	// Specifies whether to exclude uppercase letters from the password.
	ExcludeUppercase *bool `pulumi:"excludeUppercase"`
	// Specifies whether to include the space character.
	IncludeSpace *bool `pulumi:"includeSpace"`
	// Length of the password.
	PasswordLength *int `pulumi:"passwordLength"`
	// Random password.
	RandomPassword *string `pulumi:"randomPassword"`
	// Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation.
	RequireEachIncludedType *bool `pulumi:"requireEachIncludedType"`
}

// A collection of values returned by getRandomPassword.
type GetRandomPasswordResult struct {
	ExcludeCharacters  *string `pulumi:"excludeCharacters"`
	ExcludeLowercase   *bool   `pulumi:"excludeLowercase"`
	ExcludeNumbers     *bool   `pulumi:"excludeNumbers"`
	ExcludePunctuation *bool   `pulumi:"excludePunctuation"`
	ExcludeUppercase   *bool   `pulumi:"excludeUppercase"`
	// The provider-assigned unique ID for this managed resource.
	Id             string `pulumi:"id"`
	IncludeSpace   *bool  `pulumi:"includeSpace"`
	PasswordLength *int   `pulumi:"passwordLength"`
	// Random password.
	RandomPassword          string `pulumi:"randomPassword"`
	RequireEachIncludedType *bool  `pulumi:"requireEachIncludedType"`
}

func GetRandomPasswordOutput(ctx *pulumi.Context, args GetRandomPasswordOutputArgs, opts ...pulumi.InvokeOption) GetRandomPasswordResultOutput {
	outputResult := pulumix.ApplyErr[*GetRandomPasswordArgs](args.ToOutput(), func(plainArgs *GetRandomPasswordArgs) (*GetRandomPasswordResult, error) {
		return GetRandomPassword(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetRandomPasswordResultOutput, *GetRandomPasswordResult](outputResult)
}

// A collection of arguments for invoking getRandomPassword.
type GetRandomPasswordOutputArgs struct {
	// String of the characters that you don't want in the password.
	ExcludeCharacters pulumix.Input[*string] `pulumi:"excludeCharacters"`
	// Specifies whether to exclude lowercase letters from the password.
	ExcludeLowercase pulumix.Input[*bool] `pulumi:"excludeLowercase"`
	// Specifies whether to exclude numbers from the password.
	ExcludeNumbers pulumix.Input[*bool] `pulumi:"excludeNumbers"`
	// Specifies whether to exclude the following punctuation characters from the password: ``! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~ .``
	ExcludePunctuation pulumix.Input[*bool] `pulumi:"excludePunctuation"`
	// Specifies whether to exclude uppercase letters from the password.
	ExcludeUppercase pulumix.Input[*bool] `pulumi:"excludeUppercase"`
	// Specifies whether to include the space character.
	IncludeSpace pulumix.Input[*bool] `pulumi:"includeSpace"`
	// Length of the password.
	PasswordLength pulumix.Input[*int] `pulumi:"passwordLength"`
	// Random password.
	RandomPassword pulumix.Input[*string] `pulumi:"randomPassword"`
	// Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation.
	RequireEachIncludedType pulumix.Input[*bool] `pulumi:"requireEachIncludedType"`
}

func (args GetRandomPasswordOutputArgs) ToOutput() pulumix.Output[*GetRandomPasswordArgs] {
	allArgs := pulumix.All(
		args.ExcludeCharacters.ToOutput(context.Background()).AsAny(),
		args.ExcludeLowercase.ToOutput(context.Background()).AsAny(),
		args.ExcludeNumbers.ToOutput(context.Background()).AsAny(),
		args.ExcludePunctuation.ToOutput(context.Background()).AsAny(),
		args.ExcludeUppercase.ToOutput(context.Background()).AsAny(),
		args.IncludeSpace.ToOutput(context.Background()).AsAny(),
		args.PasswordLength.ToOutput(context.Background()).AsAny(),
		args.RandomPassword.ToOutput(context.Background()).AsAny(),
		args.RequireEachIncludedType.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetRandomPasswordArgs {
		return &GetRandomPasswordArgs{
			ExcludeCharacters:       resolvedArgs[0].(*string),
			ExcludeLowercase:        resolvedArgs[1].(*bool),
			ExcludeNumbers:          resolvedArgs[2].(*bool),
			ExcludePunctuation:      resolvedArgs[3].(*bool),
			ExcludeUppercase:        resolvedArgs[4].(*bool),
			IncludeSpace:            resolvedArgs[5].(*bool),
			PasswordLength:          resolvedArgs[6].(*int),
			RandomPassword:          resolvedArgs[7].(*string),
			RequireEachIncludedType: resolvedArgs[8].(*bool),
		}
	})
}

type GetRandomPasswordResultOutput struct{ *pulumi.OutputState }

func (GetRandomPasswordResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRandomPasswordResult)(nil)).Elem()
}

func (o GetRandomPasswordResultOutput) ToOutput(context.Context) pulumix.Output[*GetRandomPasswordResult] {
	return pulumix.Output[*GetRandomPasswordResult]{
		OutputState: o.OutputState,
	}
}

func (o GetRandomPasswordResultOutput) ExcludeCharacters() pulumix.Output[*string] {
	return pulumix.Apply[*GetRandomPasswordResult](o, func(v *GetRandomPasswordResult) *string { return v.ExcludeCharacters })
}

func (o GetRandomPasswordResultOutput) ExcludeLowercase() pulumix.Output[*bool] {
	return pulumix.Apply[*GetRandomPasswordResult](o, func(v *GetRandomPasswordResult) *bool { return v.ExcludeLowercase })
}

func (o GetRandomPasswordResultOutput) ExcludeNumbers() pulumix.Output[*bool] {
	return pulumix.Apply[*GetRandomPasswordResult](o, func(v *GetRandomPasswordResult) *bool { return v.ExcludeNumbers })
}

func (o GetRandomPasswordResultOutput) ExcludePunctuation() pulumix.Output[*bool] {
	return pulumix.Apply[*GetRandomPasswordResult](o, func(v *GetRandomPasswordResult) *bool { return v.ExcludePunctuation })
}

func (o GetRandomPasswordResultOutput) ExcludeUppercase() pulumix.Output[*bool] {
	return pulumix.Apply[*GetRandomPasswordResult](o, func(v *GetRandomPasswordResult) *bool { return v.ExcludeUppercase })
}

func (o GetRandomPasswordResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetRandomPasswordResult](o, func(v *GetRandomPasswordResult) string { return v.Id })
}

func (o GetRandomPasswordResultOutput) IncludeSpace() pulumix.Output[*bool] {
	return pulumix.Apply[*GetRandomPasswordResult](o, func(v *GetRandomPasswordResult) *bool { return v.IncludeSpace })
}

func (o GetRandomPasswordResultOutput) PasswordLength() pulumix.Output[*int] {
	return pulumix.Apply[*GetRandomPasswordResult](o, func(v *GetRandomPasswordResult) *int { return v.PasswordLength })
}

func (o GetRandomPasswordResultOutput) RandomPassword() pulumix.Output[string] {
	return pulumix.Apply[*GetRandomPasswordResult](o, func(v *GetRandomPasswordResult) string { return v.RandomPassword })
}

func (o GetRandomPasswordResultOutput) RequireEachIncludedType() pulumix.Output[*bool] {
	return pulumix.Apply[*GetRandomPasswordResult](o, func(v *GetRandomPasswordResult) *bool { return v.RequireEachIncludedType })
}
