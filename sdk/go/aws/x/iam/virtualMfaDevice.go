// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an IAM Virtual MFA Device.
//
// > **Note:** All attributes will be stored in the raw state as plain-text.
// **Note:** A virtual MFA device cannot be directly associated with an IAM User from the provider.
//
//	To associate the virtual MFA device with a user and enable it, use the code returned in either `base32StringSeed` or `qrCodePng` to generate TOTP authentication codes.
//	The authentication codes can then be used with the AWS CLI command [`aws iam enable-mfa-device`](https://docs.aws.amazon.com/cli/latest/reference/iam/enable-mfa-device.html) or the AWS API call [`EnableMFADevice`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_EnableMFADevice.html).
type VirtualMfaDevice struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) specifying the virtual mfa device.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The base32 seed defined as specified in [RFC3548](https://tools.ietf.org/html/rfc3548.txt). The `base32StringSeed` is base64-encoded.
	Base32StringSeed pulumix.Output[string] `pulumi:"base32StringSeed"`
	// The date and time when the virtual MFA device was enabled.
	EnableDate pulumix.Output[string] `pulumi:"enableDate"`
	// The path for the virtual MFA device.
	Path pulumix.Output[*string] `pulumi:"path"`
	// A QR code PNG image that encodes `otpauth://totp/$virtualMFADeviceName@$AccountName?secret=$Base32String` where `$virtualMFADeviceName` is one of the create call arguments. AccountName is the user name if set (otherwise, the account ID), and Base32String is the seed in base32 format.
	QrCodePng pulumix.Output[string] `pulumi:"qrCodePng"`
	// Map of resource tags for the virtual mfa device. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The associated IAM User name if the virtual MFA device is enabled.
	UserName pulumix.Output[string] `pulumi:"userName"`
	// The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.
	VirtualMfaDeviceName pulumix.Output[string] `pulumi:"virtualMfaDeviceName"`
}

// NewVirtualMfaDevice registers a new resource with the given unique name, arguments, and options.
func NewVirtualMfaDevice(ctx *pulumi.Context,
	name string, args *VirtualMfaDeviceArgs, opts ...pulumi.ResourceOption) (*VirtualMfaDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VirtualMfaDeviceName == nil {
		return nil, errors.New("invalid value for required argument 'VirtualMfaDeviceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualMfaDevice
	err := ctx.RegisterResource("aws:iam/virtualMfaDevice:VirtualMfaDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMfaDevice gets an existing VirtualMfaDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMfaDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMfaDeviceState, opts ...pulumi.ResourceOption) (*VirtualMfaDevice, error) {
	var resource VirtualMfaDevice
	err := ctx.ReadResource("aws:iam/virtualMfaDevice:VirtualMfaDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMfaDevice resources.
type virtualMfaDeviceState struct {
	// The Amazon Resource Name (ARN) specifying the virtual mfa device.
	Arn *string `pulumi:"arn"`
	// The base32 seed defined as specified in [RFC3548](https://tools.ietf.org/html/rfc3548.txt). The `base32StringSeed` is base64-encoded.
	Base32StringSeed *string `pulumi:"base32StringSeed"`
	// The date and time when the virtual MFA device was enabled.
	EnableDate *string `pulumi:"enableDate"`
	// The path for the virtual MFA device.
	Path *string `pulumi:"path"`
	// A QR code PNG image that encodes `otpauth://totp/$virtualMFADeviceName@$AccountName?secret=$Base32String` where `$virtualMFADeviceName` is one of the create call arguments. AccountName is the user name if set (otherwise, the account ID), and Base32String is the seed in base32 format.
	QrCodePng *string `pulumi:"qrCodePng"`
	// Map of resource tags for the virtual mfa device. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The associated IAM User name if the virtual MFA device is enabled.
	UserName *string `pulumi:"userName"`
	// The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.
	VirtualMfaDeviceName *string `pulumi:"virtualMfaDeviceName"`
}

type VirtualMfaDeviceState struct {
	// The Amazon Resource Name (ARN) specifying the virtual mfa device.
	Arn pulumix.Input[*string]
	// The base32 seed defined as specified in [RFC3548](https://tools.ietf.org/html/rfc3548.txt). The `base32StringSeed` is base64-encoded.
	Base32StringSeed pulumix.Input[*string]
	// The date and time when the virtual MFA device was enabled.
	EnableDate pulumix.Input[*string]
	// The path for the virtual MFA device.
	Path pulumix.Input[*string]
	// A QR code PNG image that encodes `otpauth://totp/$virtualMFADeviceName@$AccountName?secret=$Base32String` where `$virtualMFADeviceName` is one of the create call arguments. AccountName is the user name if set (otherwise, the account ID), and Base32String is the seed in base32 format.
	QrCodePng pulumix.Input[*string]
	// Map of resource tags for the virtual mfa device. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The associated IAM User name if the virtual MFA device is enabled.
	UserName pulumix.Input[*string]
	// The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.
	VirtualMfaDeviceName pulumix.Input[*string]
}

func (VirtualMfaDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMfaDeviceState)(nil)).Elem()
}

type virtualMfaDeviceArgs struct {
	// The path for the virtual MFA device.
	Path *string `pulumi:"path"`
	// Map of resource tags for the virtual mfa device. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.
	VirtualMfaDeviceName string `pulumi:"virtualMfaDeviceName"`
}

// The set of arguments for constructing a VirtualMfaDevice resource.
type VirtualMfaDeviceArgs struct {
	// The path for the virtual MFA device.
	Path pulumix.Input[*string]
	// Map of resource tags for the virtual mfa device. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.
	VirtualMfaDeviceName pulumix.Input[string]
}

func (VirtualMfaDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMfaDeviceArgs)(nil)).Elem()
}

type VirtualMfaDeviceOutput struct{ *pulumi.OutputState }

func (VirtualMfaDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMfaDevice)(nil)).Elem()
}

func (o VirtualMfaDeviceOutput) ToVirtualMfaDeviceOutput() VirtualMfaDeviceOutput {
	return o
}

func (o VirtualMfaDeviceOutput) ToVirtualMfaDeviceOutputWithContext(ctx context.Context) VirtualMfaDeviceOutput {
	return o
}

func (o VirtualMfaDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMfaDevice] {
	return pulumix.Output[VirtualMfaDevice]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) specifying the virtual mfa device.
func (o VirtualMfaDeviceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[VirtualMfaDevice](o, func(v VirtualMfaDevice) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The base32 seed defined as specified in [RFC3548](https://tools.ietf.org/html/rfc3548.txt). The `base32StringSeed` is base64-encoded.
func (o VirtualMfaDeviceOutput) Base32StringSeed() pulumix.Output[string] {
	value := pulumix.Apply[VirtualMfaDevice](o, func(v VirtualMfaDevice) pulumix.Output[string] { return v.Base32StringSeed })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The date and time when the virtual MFA device was enabled.
func (o VirtualMfaDeviceOutput) EnableDate() pulumix.Output[string] {
	value := pulumix.Apply[VirtualMfaDevice](o, func(v VirtualMfaDevice) pulumix.Output[string] { return v.EnableDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The path for the virtual MFA device.
func (o VirtualMfaDeviceOutput) Path() pulumix.Output[*string] {
	value := pulumix.Apply[VirtualMfaDevice](o, func(v VirtualMfaDevice) pulumix.Output[*string] { return v.Path })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A QR code PNG image that encodes `otpauth://totp/$virtualMFADeviceName@$AccountName?secret=$Base32String` where `$virtualMFADeviceName` is one of the create call arguments. AccountName is the user name if set (otherwise, the account ID), and Base32String is the seed in base32 format.
func (o VirtualMfaDeviceOutput) QrCodePng() pulumix.Output[string] {
	value := pulumix.Apply[VirtualMfaDevice](o, func(v VirtualMfaDevice) pulumix.Output[string] { return v.QrCodePng })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of resource tags for the virtual mfa device. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VirtualMfaDeviceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VirtualMfaDevice](o, func(v VirtualMfaDevice) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VirtualMfaDeviceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VirtualMfaDevice](o, func(v VirtualMfaDevice) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The associated IAM User name if the virtual MFA device is enabled.
func (o VirtualMfaDeviceOutput) UserName() pulumix.Output[string] {
	value := pulumix.Apply[VirtualMfaDevice](o, func(v VirtualMfaDevice) pulumix.Output[string] { return v.UserName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.
func (o VirtualMfaDeviceOutput) VirtualMfaDeviceName() pulumix.Output[string] {
	value := pulumix.Apply[VirtualMfaDevice](o, func(v VirtualMfaDevice) pulumix.Output[string] { return v.VirtualMfaDeviceName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VirtualMfaDeviceOutput{})
}
