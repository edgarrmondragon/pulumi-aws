// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codestarnotifications

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CodeStar Notifications Rule.
type NotificationRule struct {
	pulumi.CustomResourceState

	// The codestar notification rule ARN.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The level of detail to include in the notifications for this resource. Possible values are `BASIC` and `FULL`.
	DetailType pulumix.Output[string] `pulumi:"detailType"`
	// A list of event types associated with this notification rule.
	// For list of allowed events see [here](https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api).
	EventTypeIds pulumix.ArrayOutput[string] `pulumi:"eventTypeIds"`
	// The name of notification rule.
	Name pulumix.Output[string] `pulumi:"name"`
	// The ARN of the resource to associate with the notification rule.
	Resource pulumix.Output[string] `pulumi:"resource"`
	// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
	Status pulumix.Output[*string] `pulumi:"status"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Configuration blocks containing notification target information. Can be specified multiple times. At least one target must be specified on creation.
	Targets pulumix.GArrayOutput[NotificationRuleTarget, NotificationRuleTargetOutput] `pulumi:"targets"`
}

// NewNotificationRule registers a new resource with the given unique name, arguments, and options.
func NewNotificationRule(ctx *pulumi.Context,
	name string, args *NotificationRuleArgs, opts ...pulumi.ResourceOption) (*NotificationRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DetailType == nil {
		return nil, errors.New("invalid value for required argument 'DetailType'")
	}
	if args.EventTypeIds == nil {
		return nil, errors.New("invalid value for required argument 'EventTypeIds'")
	}
	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NotificationRule
	err := ctx.RegisterResource("aws:codestarnotifications/notificationRule:NotificationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationRule gets an existing NotificationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationRuleState, opts ...pulumi.ResourceOption) (*NotificationRule, error) {
	var resource NotificationRule
	err := ctx.ReadResource("aws:codestarnotifications/notificationRule:NotificationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationRule resources.
type notificationRuleState struct {
	// The codestar notification rule ARN.
	Arn *string `pulumi:"arn"`
	// The level of detail to include in the notifications for this resource. Possible values are `BASIC` and `FULL`.
	DetailType *string `pulumi:"detailType"`
	// A list of event types associated with this notification rule.
	// For list of allowed events see [here](https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api).
	EventTypeIds []string `pulumi:"eventTypeIds"`
	// The name of notification rule.
	Name *string `pulumi:"name"`
	// The ARN of the resource to associate with the notification rule.
	Resource *string `pulumi:"resource"`
	// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
	Status *string `pulumi:"status"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Configuration blocks containing notification target information. Can be specified multiple times. At least one target must be specified on creation.
	Targets []NotificationRuleTarget `pulumi:"targets"`
}

type NotificationRuleState struct {
	// The codestar notification rule ARN.
	Arn pulumix.Input[*string]
	// The level of detail to include in the notifications for this resource. Possible values are `BASIC` and `FULL`.
	DetailType pulumix.Input[*string]
	// A list of event types associated with this notification rule.
	// For list of allowed events see [here](https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api).
	EventTypeIds pulumix.Input[[]string]
	// The name of notification rule.
	Name pulumix.Input[*string]
	// The ARN of the resource to associate with the notification rule.
	Resource pulumix.Input[*string]
	// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
	Status pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Configuration blocks containing notification target information. Can be specified multiple times. At least one target must be specified on creation.
	Targets pulumix.Input[[]*NotificationRuleTargetArgs]
}

func (NotificationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationRuleState)(nil)).Elem()
}

type notificationRuleArgs struct {
	// The level of detail to include in the notifications for this resource. Possible values are `BASIC` and `FULL`.
	DetailType string `pulumi:"detailType"`
	// A list of event types associated with this notification rule.
	// For list of allowed events see [here](https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api).
	EventTypeIds []string `pulumi:"eventTypeIds"`
	// The name of notification rule.
	Name *string `pulumi:"name"`
	// The ARN of the resource to associate with the notification rule.
	Resource string `pulumi:"resource"`
	// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
	Status *string `pulumi:"status"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Configuration blocks containing notification target information. Can be specified multiple times. At least one target must be specified on creation.
	Targets []NotificationRuleTarget `pulumi:"targets"`
}

// The set of arguments for constructing a NotificationRule resource.
type NotificationRuleArgs struct {
	// The level of detail to include in the notifications for this resource. Possible values are `BASIC` and `FULL`.
	DetailType pulumix.Input[string]
	// A list of event types associated with this notification rule.
	// For list of allowed events see [here](https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api).
	EventTypeIds pulumix.Input[[]string]
	// The name of notification rule.
	Name pulumix.Input[*string]
	// The ARN of the resource to associate with the notification rule.
	Resource pulumix.Input[string]
	// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
	Status pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Configuration blocks containing notification target information. Can be specified multiple times. At least one target must be specified on creation.
	Targets pulumix.Input[[]*NotificationRuleTargetArgs]
}

func (NotificationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationRuleArgs)(nil)).Elem()
}

type NotificationRuleOutput struct{ *pulumi.OutputState }

func (NotificationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRule)(nil)).Elem()
}

func (o NotificationRuleOutput) ToNotificationRuleOutput() NotificationRuleOutput {
	return o
}

func (o NotificationRuleOutput) ToNotificationRuleOutputWithContext(ctx context.Context) NotificationRuleOutput {
	return o
}

func (o NotificationRuleOutput) ToOutput(ctx context.Context) pulumix.Output[NotificationRule] {
	return pulumix.Output[NotificationRule]{
		OutputState: o.OutputState,
	}
}

// The codestar notification rule ARN.
func (o NotificationRuleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[NotificationRule](o, func(v NotificationRule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The level of detail to include in the notifications for this resource. Possible values are `BASIC` and `FULL`.
func (o NotificationRuleOutput) DetailType() pulumix.Output[string] {
	value := pulumix.Apply[NotificationRule](o, func(v NotificationRule) pulumix.Output[string] { return v.DetailType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of event types associated with this notification rule.
// For list of allowed events see [here](https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api).
func (o NotificationRuleOutput) EventTypeIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NotificationRule](o, func(v NotificationRule) pulumix.ArrayOutput[string] { return v.EventTypeIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The name of notification rule.
func (o NotificationRuleOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[NotificationRule](o, func(v NotificationRule) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the resource to associate with the notification rule.
func (o NotificationRuleOutput) Resource() pulumix.Output[string] {
	value := pulumix.Apply[NotificationRule](o, func(v NotificationRule) pulumix.Output[string] { return v.Resource })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
func (o NotificationRuleOutput) Status() pulumix.Output[*string] {
	value := pulumix.Apply[NotificationRule](o, func(v NotificationRule) pulumix.Output[*string] { return v.Status })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o NotificationRuleOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[NotificationRule](o, func(v NotificationRule) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o NotificationRuleOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[NotificationRule](o, func(v NotificationRule) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Configuration blocks containing notification target information. Can be specified multiple times. At least one target must be specified on creation.
func (o NotificationRuleOutput) Targets() pulumix.GArrayOutput[NotificationRuleTarget, NotificationRuleTargetOutput] {
	value := pulumix.Apply[NotificationRule](o, func(v NotificationRule) pulumix.GArrayOutput[NotificationRuleTarget, NotificationRuleTargetOutput] {
		return v.Targets
	})
	unwrapped := pulumix.Flatten[[]NotificationRuleTarget, pulumix.GArrayOutput[NotificationRuleTarget, NotificationRuleTargetOutput]](value)
	return pulumix.GArrayOutput[NotificationRuleTarget, NotificationRuleTargetOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(NotificationRuleOutput{})
}
