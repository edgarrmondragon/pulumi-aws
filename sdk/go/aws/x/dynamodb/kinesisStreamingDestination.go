// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Enables a [Kinesis streaming destination](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/kds.html) for data replication of a DynamoDB table.
type KinesisStreamingDestination struct {
	pulumi.CustomResourceState

	// The ARN for a Kinesis data stream. This must exist in the same account and region as the DynamoDB table.
	StreamArn pulumix.Output[string] `pulumi:"streamArn"`
	// The name of the DynamoDB table. There
	// can only be one Kinesis streaming destination for a given DynamoDB table.
	TableName pulumix.Output[string] `pulumi:"tableName"`
}

// NewKinesisStreamingDestination registers a new resource with the given unique name, arguments, and options.
func NewKinesisStreamingDestination(ctx *pulumi.Context,
	name string, args *KinesisStreamingDestinationArgs, opts ...pulumi.ResourceOption) (*KinesisStreamingDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StreamArn == nil {
		return nil, errors.New("invalid value for required argument 'StreamArn'")
	}
	if args.TableName == nil {
		return nil, errors.New("invalid value for required argument 'TableName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KinesisStreamingDestination
	err := ctx.RegisterResource("aws:dynamodb/kinesisStreamingDestination:KinesisStreamingDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKinesisStreamingDestination gets an existing KinesisStreamingDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKinesisStreamingDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KinesisStreamingDestinationState, opts ...pulumi.ResourceOption) (*KinesisStreamingDestination, error) {
	var resource KinesisStreamingDestination
	err := ctx.ReadResource("aws:dynamodb/kinesisStreamingDestination:KinesisStreamingDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KinesisStreamingDestination resources.
type kinesisStreamingDestinationState struct {
	// The ARN for a Kinesis data stream. This must exist in the same account and region as the DynamoDB table.
	StreamArn *string `pulumi:"streamArn"`
	// The name of the DynamoDB table. There
	// can only be one Kinesis streaming destination for a given DynamoDB table.
	TableName *string `pulumi:"tableName"`
}

type KinesisStreamingDestinationState struct {
	// The ARN for a Kinesis data stream. This must exist in the same account and region as the DynamoDB table.
	StreamArn pulumix.Input[*string]
	// The name of the DynamoDB table. There
	// can only be one Kinesis streaming destination for a given DynamoDB table.
	TableName pulumix.Input[*string]
}

func (KinesisStreamingDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*kinesisStreamingDestinationState)(nil)).Elem()
}

type kinesisStreamingDestinationArgs struct {
	// The ARN for a Kinesis data stream. This must exist in the same account and region as the DynamoDB table.
	StreamArn string `pulumi:"streamArn"`
	// The name of the DynamoDB table. There
	// can only be one Kinesis streaming destination for a given DynamoDB table.
	TableName string `pulumi:"tableName"`
}

// The set of arguments for constructing a KinesisStreamingDestination resource.
type KinesisStreamingDestinationArgs struct {
	// The ARN for a Kinesis data stream. This must exist in the same account and region as the DynamoDB table.
	StreamArn pulumix.Input[string]
	// The name of the DynamoDB table. There
	// can only be one Kinesis streaming destination for a given DynamoDB table.
	TableName pulumix.Input[string]
}

func (KinesisStreamingDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kinesisStreamingDestinationArgs)(nil)).Elem()
}

type KinesisStreamingDestinationOutput struct{ *pulumi.OutputState }

func (KinesisStreamingDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KinesisStreamingDestination)(nil)).Elem()
}

func (o KinesisStreamingDestinationOutput) ToKinesisStreamingDestinationOutput() KinesisStreamingDestinationOutput {
	return o
}

func (o KinesisStreamingDestinationOutput) ToKinesisStreamingDestinationOutputWithContext(ctx context.Context) KinesisStreamingDestinationOutput {
	return o
}

func (o KinesisStreamingDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[KinesisStreamingDestination] {
	return pulumix.Output[KinesisStreamingDestination]{
		OutputState: o.OutputState,
	}
}

// The ARN for a Kinesis data stream. This must exist in the same account and region as the DynamoDB table.
func (o KinesisStreamingDestinationOutput) StreamArn() pulumix.Output[string] {
	value := pulumix.Apply[KinesisStreamingDestination](o, func(v KinesisStreamingDestination) pulumix.Output[string] { return v.StreamArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the DynamoDB table. There
// can only be one Kinesis streaming destination for a given DynamoDB table.
func (o KinesisStreamingDestinationOutput) TableName() pulumix.Output[string] {
	value := pulumix.Apply[KinesisStreamingDestination](o, func(v KinesisStreamingDestination) pulumix.Output[string] { return v.TableName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(KinesisStreamingDestinationOutput{})
}
