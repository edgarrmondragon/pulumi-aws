// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type GetLicenseGrantsFilter struct {
	// Name of the field to filter by, as defined by
	// [the underlying AWS API](https://docs.aws.amazon.com/license-manager/latest/APIReference/API_ListReceivedGrants.html#API_ListReceivedGrants_RequestSyntax).
	// For example, if filtering using `ProductSKU`, use:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/licensemanager"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := licensemanager.GetLicenseGrants(ctx, &licensemanager.GetLicenseGrantsArgs{
	// 			Filters: []licensemanager.GetLicenseGrantsFilter{
	// 				{
	// 					Name: "ProductSKU",
	// 					Values: []string{
	// 						"",
	// 					},
	// 				},
	// 			},
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given field.
	Values []string `pulumi:"values"`
}

type GetLicenseGrantsFilterArgs struct {
	// Name of the field to filter by, as defined by
	// [the underlying AWS API](https://docs.aws.amazon.com/license-manager/latest/APIReference/API_ListReceivedGrants.html#API_ListReceivedGrants_RequestSyntax).
	// For example, if filtering using `ProductSKU`, use:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/licensemanager"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := licensemanager.GetLicenseGrants(ctx, &licensemanager.GetLicenseGrantsArgs{
	// 			Filters: []licensemanager.GetLicenseGrantsFilter{
	// 				{
	// 					Name: "ProductSKU",
	// 					Values: []string{
	// 						"",
	// 					},
	// 				},
	// 			},
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of values that are accepted for the given field.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetLicenseGrantsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicenseGrantsFilter)(nil)).Elem()
}

func (i GetLicenseGrantsFilterArgs) ToGetLicenseGrantsFilterOutput() GetLicenseGrantsFilterOutput {
	return i.ToGetLicenseGrantsFilterOutputWithContext(context.Background())
}

func (i GetLicenseGrantsFilterArgs) ToGetLicenseGrantsFilterOutputWithContext(ctx context.Context) GetLicenseGrantsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLicenseGrantsFilterOutput)
}

func (i *GetLicenseGrantsFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetLicenseGrantsFilterArgs] {
	return pulumix.Val(i)
}

type GetLicenseGrantsFilterOutput struct{ *pulumi.OutputState }

func (GetLicenseGrantsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicenseGrantsFilter)(nil)).Elem()
}

func (o GetLicenseGrantsFilterOutput) ToGetLicenseGrantsFilterOutput() GetLicenseGrantsFilterOutput {
	return o
}

func (o GetLicenseGrantsFilterOutput) ToGetLicenseGrantsFilterOutputWithContext(ctx context.Context) GetLicenseGrantsFilterOutput {
	return o
}

func (o GetLicenseGrantsFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetLicenseGrantsFilter] {
	return pulumix.Output[GetLicenseGrantsFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the field to filter by, as defined by
// [the underlying AWS API](https://docs.aws.amazon.com/license-manager/latest/APIReference/API_ListReceivedGrants.html#API_ListReceivedGrants_RequestSyntax).
// For example, if filtering using `ProductSKU`, use:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/licensemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := licensemanager.GetLicenseGrants(ctx, &licensemanager.GetLicenseGrantsArgs{
//				Filters: []licensemanager.GetLicenseGrantsFilter{
//					{
//						Name: "ProductSKU",
//						Values: []string{
//							"",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func (o GetLicenseGrantsFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetLicenseGrantsFilter](o, func(v GetLicenseGrantsFilter) string { return v.Name })
}

// Set of values that are accepted for the given field.
func (o GetLicenseGrantsFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetLicenseGrantsFilter](o, func(v GetLicenseGrantsFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetReceivedLicenseConsumptionConfiguration struct {
	// Details about a borrow configuration. Detailed below
	BorrowConfigurations []GetReceivedLicenseConsumptionConfigurationBorrowConfiguration `pulumi:"borrowConfigurations"`
	// Details about a provisional configuration. Detailed below
	ProvisionalConfigurations []GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration `pulumi:"provisionalConfigurations"`
	RenewType                 string                                                               `pulumi:"renewType"`
}

type GetReceivedLicenseConsumptionConfigurationArgs struct {
	// Details about a borrow configuration. Detailed below
	BorrowConfigurations pulumix.Input[[]*GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs] `pulumi:"borrowConfigurations"`
	// Details about a provisional configuration. Detailed below
	ProvisionalConfigurations pulumix.Input[[]*GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs] `pulumi:"provisionalConfigurations"`
	RenewType                 pulumix.Input[string]                                                                    `pulumi:"renewType"`
}

func (GetReceivedLicenseConsumptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseConsumptionConfiguration)(nil)).Elem()
}

func (i GetReceivedLicenseConsumptionConfigurationArgs) ToGetReceivedLicenseConsumptionConfigurationOutput() GetReceivedLicenseConsumptionConfigurationOutput {
	return i.ToGetReceivedLicenseConsumptionConfigurationOutputWithContext(context.Background())
}

func (i GetReceivedLicenseConsumptionConfigurationArgs) ToGetReceivedLicenseConsumptionConfigurationOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseConsumptionConfigurationOutput)
}

func (i *GetReceivedLicenseConsumptionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetReceivedLicenseConsumptionConfigurationArgs] {
	return pulumix.Val(i)
}

type GetReceivedLicenseConsumptionConfigurationOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseConsumptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseConsumptionConfiguration)(nil)).Elem()
}

func (o GetReceivedLicenseConsumptionConfigurationOutput) ToGetReceivedLicenseConsumptionConfigurationOutput() GetReceivedLicenseConsumptionConfigurationOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationOutput) ToGetReceivedLicenseConsumptionConfigurationOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseConsumptionConfiguration] {
	return pulumix.Output[GetReceivedLicenseConsumptionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Details about a borrow configuration. Detailed below
func (o GetReceivedLicenseConsumptionConfigurationOutput) BorrowConfigurations() pulumix.GArrayOutput[GetReceivedLicenseConsumptionConfigurationBorrowConfiguration, GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput] {
	value := pulumix.Apply[GetReceivedLicenseConsumptionConfiguration](o, func(v GetReceivedLicenseConsumptionConfiguration) []GetReceivedLicenseConsumptionConfigurationBorrowConfiguration {
		return v.BorrowConfigurations
	})
	return pulumix.GArrayOutput[GetReceivedLicenseConsumptionConfigurationBorrowConfiguration, GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput]{OutputState: value.OutputState}
}

// Details about a provisional configuration. Detailed below
func (o GetReceivedLicenseConsumptionConfigurationOutput) ProvisionalConfigurations() pulumix.GArrayOutput[GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration, GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput] {
	value := pulumix.Apply[GetReceivedLicenseConsumptionConfiguration](o, func(v GetReceivedLicenseConsumptionConfiguration) []GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration {
		return v.ProvisionalConfigurations
	})
	return pulumix.GArrayOutput[GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration, GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput]{OutputState: value.OutputState}
}

func (o GetReceivedLicenseConsumptionConfigurationOutput) RenewType() pulumix.Output[string] {
	return pulumix.Apply[GetReceivedLicenseConsumptionConfiguration](o, func(v GetReceivedLicenseConsumptionConfiguration) string { return v.RenewType })
}

type GetReceivedLicenseConsumptionConfigurationBorrowConfiguration struct {
	// Indicates whether early check-ins are allowed.
	AllowEarlyCheckIn bool `pulumi:"allowEarlyCheckIn"`
	// Maximum time for the provisional configuration, in minutes.
	MaxTimeToLiveInMinutes int `pulumi:"maxTimeToLiveInMinutes"`
}

type GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs struct {
	// Indicates whether early check-ins are allowed.
	AllowEarlyCheckIn pulumix.Input[bool] `pulumi:"allowEarlyCheckIn"`
	// Maximum time for the provisional configuration, in minutes.
	MaxTimeToLiveInMinutes pulumix.Input[int] `pulumi:"maxTimeToLiveInMinutes"`
}

func (GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseConsumptionConfigurationBorrowConfiguration)(nil)).Elem()
}

func (i GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs) ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput() GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput {
	return i.ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutputWithContext(context.Background())
}

func (i GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs) ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput)
}

func (i *GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs] {
	return pulumix.Val(i)
}

type GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseConsumptionConfigurationBorrowConfiguration)(nil)).Elem()
}

func (o GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput) ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput() GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput) ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseConsumptionConfigurationBorrowConfiguration] {
	return pulumix.Output[GetReceivedLicenseConsumptionConfigurationBorrowConfiguration]{
		OutputState: o.OutputState,
	}
}

// Indicates whether early check-ins are allowed.
func (o GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput) AllowEarlyCheckIn() pulumix.Output[bool] {
	return pulumix.Apply[GetReceivedLicenseConsumptionConfigurationBorrowConfiguration](o, func(v GetReceivedLicenseConsumptionConfigurationBorrowConfiguration) bool { return v.AllowEarlyCheckIn })
}

// Maximum time for the provisional configuration, in minutes.
func (o GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput) MaxTimeToLiveInMinutes() pulumix.Output[int] {
	return pulumix.Apply[GetReceivedLicenseConsumptionConfigurationBorrowConfiguration](o, func(v GetReceivedLicenseConsumptionConfigurationBorrowConfiguration) int {
		return v.MaxTimeToLiveInMinutes
	})
}

type GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration struct {
	// Maximum time for the provisional configuration, in minutes.
	MaxTimeToLiveInMinutes int `pulumi:"maxTimeToLiveInMinutes"`
}

type GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs struct {
	// Maximum time for the provisional configuration, in minutes.
	MaxTimeToLiveInMinutes pulumix.Input[int] `pulumi:"maxTimeToLiveInMinutes"`
}

func (GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration)(nil)).Elem()
}

func (i GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs) ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput() GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput {
	return i.ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutputWithContext(context.Background())
}

func (i GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs) ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput)
}

func (i *GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs] {
	return pulumix.Val(i)
}

type GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration)(nil)).Elem()
}

func (o GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput) ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput() GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput) ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration] {
	return pulumix.Output[GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration]{
		OutputState: o.OutputState,
	}
}

// Maximum time for the provisional configuration, in minutes.
func (o GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput) MaxTimeToLiveInMinutes() pulumix.Output[int] {
	return pulumix.Apply[GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration](o, func(v GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration) int {
		return v.MaxTimeToLiveInMinutes
	})
}

type GetReceivedLicenseEntitlement struct {
	// Indicates whether check-ins are allowed.
	AllowCheckIn bool `pulumi:"allowCheckIn"`
	// Maximum entitlement count. Use if the unit is not None.
	MaxCount int `pulumi:"maxCount"`
	// The key name.
	Name string `pulumi:"name"`
	// Entitlement unit.
	Unit string `pulumi:"unit"`
	// The value.
	Value string `pulumi:"value"`
}

type GetReceivedLicenseEntitlementArgs struct {
	// Indicates whether check-ins are allowed.
	AllowCheckIn pulumix.Input[bool] `pulumi:"allowCheckIn"`
	// Maximum entitlement count. Use if the unit is not None.
	MaxCount pulumix.Input[int] `pulumi:"maxCount"`
	// The key name.
	Name pulumix.Input[string] `pulumi:"name"`
	// Entitlement unit.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// The value.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetReceivedLicenseEntitlementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseEntitlement)(nil)).Elem()
}

func (i GetReceivedLicenseEntitlementArgs) ToGetReceivedLicenseEntitlementOutput() GetReceivedLicenseEntitlementOutput {
	return i.ToGetReceivedLicenseEntitlementOutputWithContext(context.Background())
}

func (i GetReceivedLicenseEntitlementArgs) ToGetReceivedLicenseEntitlementOutputWithContext(ctx context.Context) GetReceivedLicenseEntitlementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseEntitlementOutput)
}

func (i *GetReceivedLicenseEntitlementArgs) ToOutput(ctx context.Context) pulumix.Output[*GetReceivedLicenseEntitlementArgs] {
	return pulumix.Val(i)
}

type GetReceivedLicenseEntitlementOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseEntitlementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseEntitlement)(nil)).Elem()
}

func (o GetReceivedLicenseEntitlementOutput) ToGetReceivedLicenseEntitlementOutput() GetReceivedLicenseEntitlementOutput {
	return o
}

func (o GetReceivedLicenseEntitlementOutput) ToGetReceivedLicenseEntitlementOutputWithContext(ctx context.Context) GetReceivedLicenseEntitlementOutput {
	return o
}

func (o GetReceivedLicenseEntitlementOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseEntitlement] {
	return pulumix.Output[GetReceivedLicenseEntitlement]{
		OutputState: o.OutputState,
	}
}

// Indicates whether check-ins are allowed.
func (o GetReceivedLicenseEntitlementOutput) AllowCheckIn() pulumix.Output[bool] {
	return pulumix.Apply[GetReceivedLicenseEntitlement](o, func(v GetReceivedLicenseEntitlement) bool { return v.AllowCheckIn })
}

// Maximum entitlement count. Use if the unit is not None.
func (o GetReceivedLicenseEntitlementOutput) MaxCount() pulumix.Output[int] {
	return pulumix.Apply[GetReceivedLicenseEntitlement](o, func(v GetReceivedLicenseEntitlement) int { return v.MaxCount })
}

// The key name.
func (o GetReceivedLicenseEntitlementOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetReceivedLicenseEntitlement](o, func(v GetReceivedLicenseEntitlement) string { return v.Name })
}

// Entitlement unit.
func (o GetReceivedLicenseEntitlementOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetReceivedLicenseEntitlement](o, func(v GetReceivedLicenseEntitlement) string { return v.Unit })
}

// The value.
func (o GetReceivedLicenseEntitlementOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetReceivedLicenseEntitlement](o, func(v GetReceivedLicenseEntitlement) string { return v.Value })
}

type GetReceivedLicenseIssuer struct {
	// Issuer key fingerprint.
	KeyFingerprint string `pulumi:"keyFingerprint"`
	// The key name.
	Name string `pulumi:"name"`
	// Asymmetric KMS key from AWS Key Management Service. The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
	SignKey string `pulumi:"signKey"`
}

type GetReceivedLicenseIssuerArgs struct {
	// Issuer key fingerprint.
	KeyFingerprint pulumix.Input[string] `pulumi:"keyFingerprint"`
	// The key name.
	Name pulumix.Input[string] `pulumi:"name"`
	// Asymmetric KMS key from AWS Key Management Service. The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
	SignKey pulumix.Input[string] `pulumi:"signKey"`
}

func (GetReceivedLicenseIssuerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseIssuer)(nil)).Elem()
}

func (i GetReceivedLicenseIssuerArgs) ToGetReceivedLicenseIssuerOutput() GetReceivedLicenseIssuerOutput {
	return i.ToGetReceivedLicenseIssuerOutputWithContext(context.Background())
}

func (i GetReceivedLicenseIssuerArgs) ToGetReceivedLicenseIssuerOutputWithContext(ctx context.Context) GetReceivedLicenseIssuerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseIssuerOutput)
}

func (i *GetReceivedLicenseIssuerArgs) ToOutput(ctx context.Context) pulumix.Output[*GetReceivedLicenseIssuerArgs] {
	return pulumix.Val(i)
}

type GetReceivedLicenseIssuerOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseIssuerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseIssuer)(nil)).Elem()
}

func (o GetReceivedLicenseIssuerOutput) ToGetReceivedLicenseIssuerOutput() GetReceivedLicenseIssuerOutput {
	return o
}

func (o GetReceivedLicenseIssuerOutput) ToGetReceivedLicenseIssuerOutputWithContext(ctx context.Context) GetReceivedLicenseIssuerOutput {
	return o
}

func (o GetReceivedLicenseIssuerOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseIssuer] {
	return pulumix.Output[GetReceivedLicenseIssuer]{
		OutputState: o.OutputState,
	}
}

// Issuer key fingerprint.
func (o GetReceivedLicenseIssuerOutput) KeyFingerprint() pulumix.Output[string] {
	return pulumix.Apply[GetReceivedLicenseIssuer](o, func(v GetReceivedLicenseIssuer) string { return v.KeyFingerprint })
}

// The key name.
func (o GetReceivedLicenseIssuerOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetReceivedLicenseIssuer](o, func(v GetReceivedLicenseIssuer) string { return v.Name })
}

// Asymmetric KMS key from AWS Key Management Service. The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
func (o GetReceivedLicenseIssuerOutput) SignKey() pulumix.Output[string] {
	return pulumix.Apply[GetReceivedLicenseIssuer](o, func(v GetReceivedLicenseIssuer) string { return v.SignKey })
}

type GetReceivedLicenseLicenseMetadata struct {
	// The key name.
	Name string `pulumi:"name"`
	// The value.
	Value string `pulumi:"value"`
}

type GetReceivedLicenseLicenseMetadataArgs struct {
	// The key name.
	Name pulumix.Input[string] `pulumi:"name"`
	// The value.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetReceivedLicenseLicenseMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseLicenseMetadata)(nil)).Elem()
}

func (i GetReceivedLicenseLicenseMetadataArgs) ToGetReceivedLicenseLicenseMetadataOutput() GetReceivedLicenseLicenseMetadataOutput {
	return i.ToGetReceivedLicenseLicenseMetadataOutputWithContext(context.Background())
}

func (i GetReceivedLicenseLicenseMetadataArgs) ToGetReceivedLicenseLicenseMetadataOutputWithContext(ctx context.Context) GetReceivedLicenseLicenseMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseLicenseMetadataOutput)
}

func (i *GetReceivedLicenseLicenseMetadataArgs) ToOutput(ctx context.Context) pulumix.Output[*GetReceivedLicenseLicenseMetadataArgs] {
	return pulumix.Val(i)
}

type GetReceivedLicenseLicenseMetadataOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseLicenseMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseLicenseMetadata)(nil)).Elem()
}

func (o GetReceivedLicenseLicenseMetadataOutput) ToGetReceivedLicenseLicenseMetadataOutput() GetReceivedLicenseLicenseMetadataOutput {
	return o
}

func (o GetReceivedLicenseLicenseMetadataOutput) ToGetReceivedLicenseLicenseMetadataOutputWithContext(ctx context.Context) GetReceivedLicenseLicenseMetadataOutput {
	return o
}

func (o GetReceivedLicenseLicenseMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseLicenseMetadata] {
	return pulumix.Output[GetReceivedLicenseLicenseMetadata]{
		OutputState: o.OutputState,
	}
}

// The key name.
func (o GetReceivedLicenseLicenseMetadataOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetReceivedLicenseLicenseMetadata](o, func(v GetReceivedLicenseLicenseMetadata) string { return v.Name })
}

// The value.
func (o GetReceivedLicenseLicenseMetadataOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetReceivedLicenseLicenseMetadata](o, func(v GetReceivedLicenseLicenseMetadata) string { return v.Value })
}

type GetReceivedLicenseReceivedMetadata struct {
	// A list of allowed operations.
	AllowedOperations []string `pulumi:"allowedOperations"`
	// Received status.
	ReceivedStatus string `pulumi:"receivedStatus"`
	// Received status reason.
	ReceivedStatusReason string `pulumi:"receivedStatusReason"`
}

type GetReceivedLicenseReceivedMetadataArgs struct {
	// A list of allowed operations.
	AllowedOperations pulumix.Input[[]string] `pulumi:"allowedOperations"`
	// Received status.
	ReceivedStatus pulumix.Input[string] `pulumi:"receivedStatus"`
	// Received status reason.
	ReceivedStatusReason pulumix.Input[string] `pulumi:"receivedStatusReason"`
}

func (GetReceivedLicenseReceivedMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseReceivedMetadata)(nil)).Elem()
}

func (i GetReceivedLicenseReceivedMetadataArgs) ToGetReceivedLicenseReceivedMetadataOutput() GetReceivedLicenseReceivedMetadataOutput {
	return i.ToGetReceivedLicenseReceivedMetadataOutputWithContext(context.Background())
}

func (i GetReceivedLicenseReceivedMetadataArgs) ToGetReceivedLicenseReceivedMetadataOutputWithContext(ctx context.Context) GetReceivedLicenseReceivedMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseReceivedMetadataOutput)
}

func (i *GetReceivedLicenseReceivedMetadataArgs) ToOutput(ctx context.Context) pulumix.Output[*GetReceivedLicenseReceivedMetadataArgs] {
	return pulumix.Val(i)
}

type GetReceivedLicenseReceivedMetadataOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseReceivedMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseReceivedMetadata)(nil)).Elem()
}

func (o GetReceivedLicenseReceivedMetadataOutput) ToGetReceivedLicenseReceivedMetadataOutput() GetReceivedLicenseReceivedMetadataOutput {
	return o
}

func (o GetReceivedLicenseReceivedMetadataOutput) ToGetReceivedLicenseReceivedMetadataOutputWithContext(ctx context.Context) GetReceivedLicenseReceivedMetadataOutput {
	return o
}

func (o GetReceivedLicenseReceivedMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseReceivedMetadata] {
	return pulumix.Output[GetReceivedLicenseReceivedMetadata]{
		OutputState: o.OutputState,
	}
}

// A list of allowed operations.
func (o GetReceivedLicenseReceivedMetadataOutput) AllowedOperations() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetReceivedLicenseReceivedMetadata](o, func(v GetReceivedLicenseReceivedMetadata) []string { return v.AllowedOperations })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Received status.
func (o GetReceivedLicenseReceivedMetadataOutput) ReceivedStatus() pulumix.Output[string] {
	return pulumix.Apply[GetReceivedLicenseReceivedMetadata](o, func(v GetReceivedLicenseReceivedMetadata) string { return v.ReceivedStatus })
}

// Received status reason.
func (o GetReceivedLicenseReceivedMetadataOutput) ReceivedStatusReason() pulumix.Output[string] {
	return pulumix.Apply[GetReceivedLicenseReceivedMetadata](o, func(v GetReceivedLicenseReceivedMetadata) string { return v.ReceivedStatusReason })
}

type GetReceivedLicenseValidity struct {
	// Start of the validity time range.
	Begin string `pulumi:"begin"`
	// End of the validity time range.
	End string `pulumi:"end"`
}

type GetReceivedLicenseValidityArgs struct {
	// Start of the validity time range.
	Begin pulumix.Input[string] `pulumi:"begin"`
	// End of the validity time range.
	End pulumix.Input[string] `pulumi:"end"`
}

func (GetReceivedLicenseValidityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseValidity)(nil)).Elem()
}

func (i GetReceivedLicenseValidityArgs) ToGetReceivedLicenseValidityOutput() GetReceivedLicenseValidityOutput {
	return i.ToGetReceivedLicenseValidityOutputWithContext(context.Background())
}

func (i GetReceivedLicenseValidityArgs) ToGetReceivedLicenseValidityOutputWithContext(ctx context.Context) GetReceivedLicenseValidityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseValidityOutput)
}

func (i *GetReceivedLicenseValidityArgs) ToOutput(ctx context.Context) pulumix.Output[*GetReceivedLicenseValidityArgs] {
	return pulumix.Val(i)
}

type GetReceivedLicenseValidityOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseValidityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseValidity)(nil)).Elem()
}

func (o GetReceivedLicenseValidityOutput) ToGetReceivedLicenseValidityOutput() GetReceivedLicenseValidityOutput {
	return o
}

func (o GetReceivedLicenseValidityOutput) ToGetReceivedLicenseValidityOutputWithContext(ctx context.Context) GetReceivedLicenseValidityOutput {
	return o
}

func (o GetReceivedLicenseValidityOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseValidity] {
	return pulumix.Output[GetReceivedLicenseValidity]{
		OutputState: o.OutputState,
	}
}

// Start of the validity time range.
func (o GetReceivedLicenseValidityOutput) Begin() pulumix.Output[string] {
	return pulumix.Apply[GetReceivedLicenseValidity](o, func(v GetReceivedLicenseValidity) string { return v.Begin })
}

// End of the validity time range.
func (o GetReceivedLicenseValidityOutput) End() pulumix.Output[string] {
	return pulumix.Apply[GetReceivedLicenseValidity](o, func(v GetReceivedLicenseValidity) string { return v.End })
}

type GetReceivedLicensesFilter struct {
	// Name of the field to filter by, as defined by
	// [the underlying AWS API](https://docs.aws.amazon.com/license-manager/latest/APIReference/API_ListReceivedLicenses.html#API_ListReceivedLicenses_RequestSyntax).
	// For example, if filtering using `ProductSKU`, use:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/licensemanager"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := licensemanager.GetReceivedLicenses(ctx, &licensemanager.GetReceivedLicensesArgs{
	// 			Filters: []licensemanager.GetReceivedLicensesFilter{
	// 				{
	// 					Name: "ProductSKU",
	// 					Values: []string{
	// 						"",
	// 					},
	// 				},
	// 			},
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given field.
	Values []string `pulumi:"values"`
}

type GetReceivedLicensesFilterArgs struct {
	// Name of the field to filter by, as defined by
	// [the underlying AWS API](https://docs.aws.amazon.com/license-manager/latest/APIReference/API_ListReceivedLicenses.html#API_ListReceivedLicenses_RequestSyntax).
	// For example, if filtering using `ProductSKU`, use:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/licensemanager"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := licensemanager.GetReceivedLicenses(ctx, &licensemanager.GetReceivedLicensesArgs{
	// 			Filters: []licensemanager.GetReceivedLicensesFilter{
	// 				{
	// 					Name: "ProductSKU",
	// 					Values: []string{
	// 						"",
	// 					},
	// 				},
	// 			},
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of values that are accepted for the given field.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetReceivedLicensesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicensesFilter)(nil)).Elem()
}

func (i GetReceivedLicensesFilterArgs) ToGetReceivedLicensesFilterOutput() GetReceivedLicensesFilterOutput {
	return i.ToGetReceivedLicensesFilterOutputWithContext(context.Background())
}

func (i GetReceivedLicensesFilterArgs) ToGetReceivedLicensesFilterOutputWithContext(ctx context.Context) GetReceivedLicensesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicensesFilterOutput)
}

func (i *GetReceivedLicensesFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetReceivedLicensesFilterArgs] {
	return pulumix.Val(i)
}

type GetReceivedLicensesFilterOutput struct{ *pulumi.OutputState }

func (GetReceivedLicensesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicensesFilter)(nil)).Elem()
}

func (o GetReceivedLicensesFilterOutput) ToGetReceivedLicensesFilterOutput() GetReceivedLicensesFilterOutput {
	return o
}

func (o GetReceivedLicensesFilterOutput) ToGetReceivedLicensesFilterOutputWithContext(ctx context.Context) GetReceivedLicensesFilterOutput {
	return o
}

func (o GetReceivedLicensesFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicensesFilter] {
	return pulumix.Output[GetReceivedLicensesFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the field to filter by, as defined by
// [the underlying AWS API](https://docs.aws.amazon.com/license-manager/latest/APIReference/API_ListReceivedLicenses.html#API_ListReceivedLicenses_RequestSyntax).
// For example, if filtering using `ProductSKU`, use:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/licensemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := licensemanager.GetReceivedLicenses(ctx, &licensemanager.GetReceivedLicensesArgs{
//				Filters: []licensemanager.GetReceivedLicensesFilter{
//					{
//						Name: "ProductSKU",
//						Values: []string{
//							"",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func (o GetReceivedLicensesFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetReceivedLicensesFilter](o, func(v GetReceivedLicensesFilter) string { return v.Name })
}

// Set of values that are accepted for the given field.
func (o GetReceivedLicensesFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetReceivedLicensesFilter](o, func(v GetReceivedLicensesFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func init() {
	pulumi.RegisterOutputType(GetLicenseGrantsFilterOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseConsumptionConfigurationOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseEntitlementOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseIssuerOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseLicenseMetadataOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseReceivedMetadataOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseValidityOutput{})
	pulumi.RegisterOutputType(GetReceivedLicensesFilterOutput{})
}
