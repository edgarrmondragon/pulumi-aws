// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// > **Note:** `alb.LoadBalancer` is known as `lb.LoadBalancer`. The functionality is identical.
//
// Provides information about a Load Balancer.
//
// This data source can prove useful when a module accepts an LB as an input
// variable and needs to, for example, determine the security groups associated
// with it, etc.
func LookupLoadBalancer(ctx *pulumi.Context, args *LookupLoadBalancerArgs, opts ...pulumi.InvokeOption) (*LookupLoadBalancerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLoadBalancerResult
	err := ctx.Invoke("aws:alb/getLoadBalancer:getLoadBalancer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLoadBalancer.
type LookupLoadBalancerArgs struct {
	// Full ARN of the load balancer.
	Arn *string `pulumi:"arn"`
	// Unique name of the load balancer.
	Name *string `pulumi:"name"`
	// Mapping of tags, each pair of which must exactly match a pair on the desired load balancer.
	//
	// > **NOTE:** When both `arn` and `name` are specified, `arn` takes precedence. `tags` has lowest precedence.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getLoadBalancer.
type LookupLoadBalancerResult struct {
	AccessLogs                            GetLoadBalancerAccessLogs `pulumi:"accessLogs"`
	Arn                                   string                    `pulumi:"arn"`
	ArnSuffix                             string                    `pulumi:"arnSuffix"`
	CustomerOwnedIpv4Pool                 string                    `pulumi:"customerOwnedIpv4Pool"`
	DesyncMitigationMode                  string                    `pulumi:"desyncMitigationMode"`
	DnsName                               string                    `pulumi:"dnsName"`
	DropInvalidHeaderFields               bool                      `pulumi:"dropInvalidHeaderFields"`
	EnableCrossZoneLoadBalancing          bool                      `pulumi:"enableCrossZoneLoadBalancing"`
	EnableDeletionProtection              bool                      `pulumi:"enableDeletionProtection"`
	EnableHttp2                           bool                      `pulumi:"enableHttp2"`
	EnableTlsVersionAndCipherSuiteHeaders bool                      `pulumi:"enableTlsVersionAndCipherSuiteHeaders"`
	EnableWafFailOpen                     bool                      `pulumi:"enableWafFailOpen"`
	EnableXffClientPort                   bool                      `pulumi:"enableXffClientPort"`
	// The provider-assigned unique ID for this managed resource.
	Id                      string                         `pulumi:"id"`
	IdleTimeout             int                            `pulumi:"idleTimeout"`
	Internal                bool                           `pulumi:"internal"`
	IpAddressType           string                         `pulumi:"ipAddressType"`
	LoadBalancerType        string                         `pulumi:"loadBalancerType"`
	Name                    string                         `pulumi:"name"`
	PreserveHostHeader      bool                           `pulumi:"preserveHostHeader"`
	SecurityGroups          []string                       `pulumi:"securityGroups"`
	SubnetMappings          []GetLoadBalancerSubnetMapping `pulumi:"subnetMappings"`
	Subnets                 []string                       `pulumi:"subnets"`
	Tags                    map[string]string              `pulumi:"tags"`
	VpcId                   string                         `pulumi:"vpcId"`
	XffHeaderProcessingMode string                         `pulumi:"xffHeaderProcessingMode"`
	ZoneId                  string                         `pulumi:"zoneId"`
}

func LookupLoadBalancerOutput(ctx *pulumi.Context, args LookupLoadBalancerOutputArgs, opts ...pulumi.InvokeOption) LookupLoadBalancerResultOutput {
	outputResult := pulumix.ApplyErr[*LookupLoadBalancerArgs](args.ToOutput(), func(plainArgs *LookupLoadBalancerArgs) (*LookupLoadBalancerResult, error) {
		return LookupLoadBalancer(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupLoadBalancerResultOutput, *LookupLoadBalancerResult](outputResult)
}

// A collection of arguments for invoking getLoadBalancer.
type LookupLoadBalancerOutputArgs struct {
	// Full ARN of the load balancer.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// Unique name of the load balancer.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Mapping of tags, each pair of which must exactly match a pair on the desired load balancer.
	//
	// > **NOTE:** When both `arn` and `name` are specified, `arn` takes precedence. `tags` has lowest precedence.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupLoadBalancerOutputArgs) ToOutput() pulumix.Output[*LookupLoadBalancerArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupLoadBalancerArgs {
		return &LookupLoadBalancerArgs{
			Arn:  resolvedArgs[0].(*string),
			Name: resolvedArgs[1].(*string),
			Tags: resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupLoadBalancerResultOutput struct{ *pulumi.OutputState }

func (LookupLoadBalancerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerResult)(nil)).Elem()
}

func (o LookupLoadBalancerResultOutput) ToOutput(context.Context) pulumix.Output[*LookupLoadBalancerResult] {
	return pulumix.Output[*LookupLoadBalancerResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupLoadBalancerResultOutput) AccessLogs() pulumix.GPtrOutput[GetLoadBalancerAccessLogs, GetLoadBalancerAccessLogsOutput] {
	value := pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) GetLoadBalancerAccessLogs { return v.AccessLogs })
	return pulumix.GPtrOutput[GetLoadBalancerAccessLogs, GetLoadBalancerAccessLogsOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupLoadBalancerResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.Arn })
}

func (o LookupLoadBalancerResultOutput) ArnSuffix() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.ArnSuffix })
}

func (o LookupLoadBalancerResultOutput) CustomerOwnedIpv4Pool() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.CustomerOwnedIpv4Pool })
}

func (o LookupLoadBalancerResultOutput) DesyncMitigationMode() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.DesyncMitigationMode })
}

func (o LookupLoadBalancerResultOutput) DnsName() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.DnsName })
}

func (o LookupLoadBalancerResultOutput) DropInvalidHeaderFields() pulumix.Output[bool] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) bool { return v.DropInvalidHeaderFields })
}

func (o LookupLoadBalancerResultOutput) EnableCrossZoneLoadBalancing() pulumix.Output[bool] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) bool { return v.EnableCrossZoneLoadBalancing })
}

func (o LookupLoadBalancerResultOutput) EnableDeletionProtection() pulumix.Output[bool] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) bool { return v.EnableDeletionProtection })
}

func (o LookupLoadBalancerResultOutput) EnableHttp2() pulumix.Output[bool] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) bool { return v.EnableHttp2 })
}

func (o LookupLoadBalancerResultOutput) EnableTlsVersionAndCipherSuiteHeaders() pulumix.Output[bool] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) bool { return v.EnableTlsVersionAndCipherSuiteHeaders })
}

func (o LookupLoadBalancerResultOutput) EnableWafFailOpen() pulumix.Output[bool] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) bool { return v.EnableWafFailOpen })
}

func (o LookupLoadBalancerResultOutput) EnableXffClientPort() pulumix.Output[bool] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) bool { return v.EnableXffClientPort })
}

func (o LookupLoadBalancerResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.Id })
}

func (o LookupLoadBalancerResultOutput) IdleTimeout() pulumix.Output[int] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) int { return v.IdleTimeout })
}

func (o LookupLoadBalancerResultOutput) Internal() pulumix.Output[bool] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) bool { return v.Internal })
}

func (o LookupLoadBalancerResultOutput) IpAddressType() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.IpAddressType })
}

func (o LookupLoadBalancerResultOutput) LoadBalancerType() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.LoadBalancerType })
}

func (o LookupLoadBalancerResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.Name })
}

func (o LookupLoadBalancerResultOutput) PreserveHostHeader() pulumix.Output[bool] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) bool { return v.PreserveHostHeader })
}

func (o LookupLoadBalancerResultOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) []string { return v.SecurityGroups })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupLoadBalancerResultOutput) SubnetMappings() pulumix.GArrayOutput[GetLoadBalancerSubnetMapping, GetLoadBalancerSubnetMappingOutput] {
	value := pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) []GetLoadBalancerSubnetMapping { return v.SubnetMappings })
	return pulumix.GArrayOutput[GetLoadBalancerSubnetMapping, GetLoadBalancerSubnetMappingOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupLoadBalancerResultOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) []string { return v.Subnets })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupLoadBalancerResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupLoadBalancerResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.VpcId })
}

func (o LookupLoadBalancerResultOutput) XffHeaderProcessingMode() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.XffHeaderProcessingMode })
}

func (o LookupLoadBalancerResultOutput) ZoneId() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.ZoneId })
}
