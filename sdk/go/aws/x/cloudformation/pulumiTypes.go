// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type CloudFormationTypeLoggingConfig struct {
	// Name of the CloudWatch Log Group where CloudFormation sends error logging information when invoking the type's handlers.
	LogGroupName string `pulumi:"logGroupName"`
	// Amazon Resource Name (ARN) of the IAM Role CloudFormation assumes when sending error logging information to CloudWatch Logs.
	LogRoleArn string `pulumi:"logRoleArn"`
}

type CloudFormationTypeLoggingConfigArgs struct {
	// Name of the CloudWatch Log Group where CloudFormation sends error logging information when invoking the type's handlers.
	LogGroupName pulumix.Input[string] `pulumi:"logGroupName"`
	// Amazon Resource Name (ARN) of the IAM Role CloudFormation assumes when sending error logging information to CloudWatch Logs.
	LogRoleArn pulumix.Input[string] `pulumi:"logRoleArn"`
}

func (CloudFormationTypeLoggingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudFormationTypeLoggingConfig)(nil)).Elem()
}

func (i CloudFormationTypeLoggingConfigArgs) ToCloudFormationTypeLoggingConfigOutput() CloudFormationTypeLoggingConfigOutput {
	return i.ToCloudFormationTypeLoggingConfigOutputWithContext(context.Background())
}

func (i CloudFormationTypeLoggingConfigArgs) ToCloudFormationTypeLoggingConfigOutputWithContext(ctx context.Context) CloudFormationTypeLoggingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudFormationTypeLoggingConfigOutput)
}

func (i *CloudFormationTypeLoggingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*CloudFormationTypeLoggingConfigArgs] {
	return pulumix.Val(i)
}

type CloudFormationTypeLoggingConfigOutput struct{ *pulumi.OutputState }

func (CloudFormationTypeLoggingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudFormationTypeLoggingConfig)(nil)).Elem()
}

func (o CloudFormationTypeLoggingConfigOutput) ToCloudFormationTypeLoggingConfigOutput() CloudFormationTypeLoggingConfigOutput {
	return o
}

func (o CloudFormationTypeLoggingConfigOutput) ToCloudFormationTypeLoggingConfigOutputWithContext(ctx context.Context) CloudFormationTypeLoggingConfigOutput {
	return o
}

func (o CloudFormationTypeLoggingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[CloudFormationTypeLoggingConfig] {
	return pulumix.Output[CloudFormationTypeLoggingConfig]{
		OutputState: o.OutputState,
	}
}

// Name of the CloudWatch Log Group where CloudFormation sends error logging information when invoking the type's handlers.
func (o CloudFormationTypeLoggingConfigOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[CloudFormationTypeLoggingConfig](o, func(v CloudFormationTypeLoggingConfig) string { return v.LogGroupName })
}

// Amazon Resource Name (ARN) of the IAM Role CloudFormation assumes when sending error logging information to CloudWatch Logs.
func (o CloudFormationTypeLoggingConfigOutput) LogRoleArn() pulumix.Output[string] {
	return pulumix.Apply[CloudFormationTypeLoggingConfig](o, func(v CloudFormationTypeLoggingConfig) string { return v.LogRoleArn })
}

type StackSetAutoDeployment struct {
	// Whether or not auto-deployment is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Whether or not to retain stacks when the account is removed.
	RetainStacksOnAccountRemoval *bool `pulumi:"retainStacksOnAccountRemoval"`
}

type StackSetAutoDeploymentArgs struct {
	// Whether or not auto-deployment is enabled.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Whether or not to retain stacks when the account is removed.
	RetainStacksOnAccountRemoval pulumix.Input[*bool] `pulumi:"retainStacksOnAccountRemoval"`
}

func (StackSetAutoDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetAutoDeployment)(nil)).Elem()
}

func (i StackSetAutoDeploymentArgs) ToStackSetAutoDeploymentOutput() StackSetAutoDeploymentOutput {
	return i.ToStackSetAutoDeploymentOutputWithContext(context.Background())
}

func (i StackSetAutoDeploymentArgs) ToStackSetAutoDeploymentOutputWithContext(ctx context.Context) StackSetAutoDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetAutoDeploymentOutput)
}

func (i *StackSetAutoDeploymentArgs) ToOutput(ctx context.Context) pulumix.Output[*StackSetAutoDeploymentArgs] {
	return pulumix.Val(i)
}

type StackSetAutoDeploymentOutput struct{ *pulumi.OutputState }

func (StackSetAutoDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetAutoDeployment)(nil)).Elem()
}

func (o StackSetAutoDeploymentOutput) ToStackSetAutoDeploymentOutput() StackSetAutoDeploymentOutput {
	return o
}

func (o StackSetAutoDeploymentOutput) ToStackSetAutoDeploymentOutputWithContext(ctx context.Context) StackSetAutoDeploymentOutput {
	return o
}

func (o StackSetAutoDeploymentOutput) ToOutput(ctx context.Context) pulumix.Output[StackSetAutoDeployment] {
	return pulumix.Output[StackSetAutoDeployment]{
		OutputState: o.OutputState,
	}
}

// Whether or not auto-deployment is enabled.
func (o StackSetAutoDeploymentOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[StackSetAutoDeployment](o, func(v StackSetAutoDeployment) *bool { return v.Enabled })
}

// Whether or not to retain stacks when the account is removed.
func (o StackSetAutoDeploymentOutput) RetainStacksOnAccountRemoval() pulumix.Output[*bool] {
	return pulumix.Apply[StackSetAutoDeployment](o, func(v StackSetAutoDeployment) *bool { return v.RetainStacksOnAccountRemoval })
}

type StackSetInstanceDeploymentTargets struct {
	// The organization root ID or organizational unit (OU) IDs to which StackSets deploys.
	OrganizationalUnitIds []string `pulumi:"organizationalUnitIds"`
}

type StackSetInstanceDeploymentTargetsArgs struct {
	// The organization root ID or organizational unit (OU) IDs to which StackSets deploys.
	OrganizationalUnitIds pulumix.Input[[]string] `pulumi:"organizationalUnitIds"`
}

func (StackSetInstanceDeploymentTargetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetInstanceDeploymentTargets)(nil)).Elem()
}

func (i StackSetInstanceDeploymentTargetsArgs) ToStackSetInstanceDeploymentTargetsOutput() StackSetInstanceDeploymentTargetsOutput {
	return i.ToStackSetInstanceDeploymentTargetsOutputWithContext(context.Background())
}

func (i StackSetInstanceDeploymentTargetsArgs) ToStackSetInstanceDeploymentTargetsOutputWithContext(ctx context.Context) StackSetInstanceDeploymentTargetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetInstanceDeploymentTargetsOutput)
}

func (i *StackSetInstanceDeploymentTargetsArgs) ToOutput(ctx context.Context) pulumix.Output[*StackSetInstanceDeploymentTargetsArgs] {
	return pulumix.Val(i)
}

type StackSetInstanceDeploymentTargetsOutput struct{ *pulumi.OutputState }

func (StackSetInstanceDeploymentTargetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetInstanceDeploymentTargets)(nil)).Elem()
}

func (o StackSetInstanceDeploymentTargetsOutput) ToStackSetInstanceDeploymentTargetsOutput() StackSetInstanceDeploymentTargetsOutput {
	return o
}

func (o StackSetInstanceDeploymentTargetsOutput) ToStackSetInstanceDeploymentTargetsOutputWithContext(ctx context.Context) StackSetInstanceDeploymentTargetsOutput {
	return o
}

func (o StackSetInstanceDeploymentTargetsOutput) ToOutput(ctx context.Context) pulumix.Output[StackSetInstanceDeploymentTargets] {
	return pulumix.Output[StackSetInstanceDeploymentTargets]{
		OutputState: o.OutputState,
	}
}

// The organization root ID or organizational unit (OU) IDs to which StackSets deploys.
func (o StackSetInstanceDeploymentTargetsOutput) OrganizationalUnitIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[StackSetInstanceDeploymentTargets](o, func(v StackSetInstanceDeploymentTargets) []string { return v.OrganizationalUnitIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type StackSetInstanceOperationPreferences struct {
	// The number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureToleranceCount *int `pulumi:"failureToleranceCount"`
	// The percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureTolerancePercentage *int `pulumi:"failureTolerancePercentage"`
	// The maximum number of accounts in which to perform this operation at one time.
	MaxConcurrentCount *int `pulumi:"maxConcurrentCount"`
	// The maximum percentage of accounts in which to perform this operation at one time.
	MaxConcurrentPercentage *int `pulumi:"maxConcurrentPercentage"`
	// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time. Valid values are `SEQUENTIAL` and `PARALLEL`.
	RegionConcurrencyType *string `pulumi:"regionConcurrencyType"`
	// The order of the Regions in where you want to perform the stack operation.
	RegionOrders []string `pulumi:"regionOrders"`
}

type StackSetInstanceOperationPreferencesArgs struct {
	// The number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureToleranceCount pulumix.Input[*int] `pulumi:"failureToleranceCount"`
	// The percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureTolerancePercentage pulumix.Input[*int] `pulumi:"failureTolerancePercentage"`
	// The maximum number of accounts in which to perform this operation at one time.
	MaxConcurrentCount pulumix.Input[*int] `pulumi:"maxConcurrentCount"`
	// The maximum percentage of accounts in which to perform this operation at one time.
	MaxConcurrentPercentage pulumix.Input[*int] `pulumi:"maxConcurrentPercentage"`
	// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time. Valid values are `SEQUENTIAL` and `PARALLEL`.
	RegionConcurrencyType pulumix.Input[*string] `pulumi:"regionConcurrencyType"`
	// The order of the Regions in where you want to perform the stack operation.
	RegionOrders pulumix.Input[[]string] `pulumi:"regionOrders"`
}

func (StackSetInstanceOperationPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetInstanceOperationPreferences)(nil)).Elem()
}

func (i StackSetInstanceOperationPreferencesArgs) ToStackSetInstanceOperationPreferencesOutput() StackSetInstanceOperationPreferencesOutput {
	return i.ToStackSetInstanceOperationPreferencesOutputWithContext(context.Background())
}

func (i StackSetInstanceOperationPreferencesArgs) ToStackSetInstanceOperationPreferencesOutputWithContext(ctx context.Context) StackSetInstanceOperationPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetInstanceOperationPreferencesOutput)
}

func (i *StackSetInstanceOperationPreferencesArgs) ToOutput(ctx context.Context) pulumix.Output[*StackSetInstanceOperationPreferencesArgs] {
	return pulumix.Val(i)
}

type StackSetInstanceOperationPreferencesOutput struct{ *pulumi.OutputState }

func (StackSetInstanceOperationPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetInstanceOperationPreferences)(nil)).Elem()
}

func (o StackSetInstanceOperationPreferencesOutput) ToStackSetInstanceOperationPreferencesOutput() StackSetInstanceOperationPreferencesOutput {
	return o
}

func (o StackSetInstanceOperationPreferencesOutput) ToStackSetInstanceOperationPreferencesOutputWithContext(ctx context.Context) StackSetInstanceOperationPreferencesOutput {
	return o
}

func (o StackSetInstanceOperationPreferencesOutput) ToOutput(ctx context.Context) pulumix.Output[StackSetInstanceOperationPreferences] {
	return pulumix.Output[StackSetInstanceOperationPreferences]{
		OutputState: o.OutputState,
	}
}

// The number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
func (o StackSetInstanceOperationPreferencesOutput) FailureToleranceCount() pulumix.Output[*int] {
	return pulumix.Apply[StackSetInstanceOperationPreferences](o, func(v StackSetInstanceOperationPreferences) *int { return v.FailureToleranceCount })
}

// The percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
func (o StackSetInstanceOperationPreferencesOutput) FailureTolerancePercentage() pulumix.Output[*int] {
	return pulumix.Apply[StackSetInstanceOperationPreferences](o, func(v StackSetInstanceOperationPreferences) *int { return v.FailureTolerancePercentage })
}

// The maximum number of accounts in which to perform this operation at one time.
func (o StackSetInstanceOperationPreferencesOutput) MaxConcurrentCount() pulumix.Output[*int] {
	return pulumix.Apply[StackSetInstanceOperationPreferences](o, func(v StackSetInstanceOperationPreferences) *int { return v.MaxConcurrentCount })
}

// The maximum percentage of accounts in which to perform this operation at one time.
func (o StackSetInstanceOperationPreferencesOutput) MaxConcurrentPercentage() pulumix.Output[*int] {
	return pulumix.Apply[StackSetInstanceOperationPreferences](o, func(v StackSetInstanceOperationPreferences) *int { return v.MaxConcurrentPercentage })
}

// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time. Valid values are `SEQUENTIAL` and `PARALLEL`.
func (o StackSetInstanceOperationPreferencesOutput) RegionConcurrencyType() pulumix.Output[*string] {
	return pulumix.Apply[StackSetInstanceOperationPreferences](o, func(v StackSetInstanceOperationPreferences) *string { return v.RegionConcurrencyType })
}

// The order of the Regions in where you want to perform the stack operation.
func (o StackSetInstanceOperationPreferencesOutput) RegionOrders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[StackSetInstanceOperationPreferences](o, func(v StackSetInstanceOperationPreferences) []string { return v.RegionOrders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type StackSetInstanceStackInstanceSummary struct {
	// Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.
	AccountId *string `pulumi:"accountId"`
	// Organizational unit ID in which the stack is deployed.
	OrganizationalUnitId *string `pulumi:"organizationalUnitId"`
	// Stack identifier.
	StackId *string `pulumi:"stackId"`
}

type StackSetInstanceStackInstanceSummaryArgs struct {
	// Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.
	AccountId pulumix.Input[*string] `pulumi:"accountId"`
	// Organizational unit ID in which the stack is deployed.
	OrganizationalUnitId pulumix.Input[*string] `pulumi:"organizationalUnitId"`
	// Stack identifier.
	StackId pulumix.Input[*string] `pulumi:"stackId"`
}

func (StackSetInstanceStackInstanceSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetInstanceStackInstanceSummary)(nil)).Elem()
}

func (i StackSetInstanceStackInstanceSummaryArgs) ToStackSetInstanceStackInstanceSummaryOutput() StackSetInstanceStackInstanceSummaryOutput {
	return i.ToStackSetInstanceStackInstanceSummaryOutputWithContext(context.Background())
}

func (i StackSetInstanceStackInstanceSummaryArgs) ToStackSetInstanceStackInstanceSummaryOutputWithContext(ctx context.Context) StackSetInstanceStackInstanceSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetInstanceStackInstanceSummaryOutput)
}

func (i *StackSetInstanceStackInstanceSummaryArgs) ToOutput(ctx context.Context) pulumix.Output[*StackSetInstanceStackInstanceSummaryArgs] {
	return pulumix.Val(i)
}

type StackSetInstanceStackInstanceSummaryOutput struct{ *pulumi.OutputState }

func (StackSetInstanceStackInstanceSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetInstanceStackInstanceSummary)(nil)).Elem()
}

func (o StackSetInstanceStackInstanceSummaryOutput) ToStackSetInstanceStackInstanceSummaryOutput() StackSetInstanceStackInstanceSummaryOutput {
	return o
}

func (o StackSetInstanceStackInstanceSummaryOutput) ToStackSetInstanceStackInstanceSummaryOutputWithContext(ctx context.Context) StackSetInstanceStackInstanceSummaryOutput {
	return o
}

func (o StackSetInstanceStackInstanceSummaryOutput) ToOutput(ctx context.Context) pulumix.Output[StackSetInstanceStackInstanceSummary] {
	return pulumix.Output[StackSetInstanceStackInstanceSummary]{
		OutputState: o.OutputState,
	}
}

// Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.
func (o StackSetInstanceStackInstanceSummaryOutput) AccountId() pulumix.Output[*string] {
	return pulumix.Apply[StackSetInstanceStackInstanceSummary](o, func(v StackSetInstanceStackInstanceSummary) *string { return v.AccountId })
}

// Organizational unit ID in which the stack is deployed.
func (o StackSetInstanceStackInstanceSummaryOutput) OrganizationalUnitId() pulumix.Output[*string] {
	return pulumix.Apply[StackSetInstanceStackInstanceSummary](o, func(v StackSetInstanceStackInstanceSummary) *string { return v.OrganizationalUnitId })
}

// Stack identifier.
func (o StackSetInstanceStackInstanceSummaryOutput) StackId() pulumix.Output[*string] {
	return pulumix.Apply[StackSetInstanceStackInstanceSummary](o, func(v StackSetInstanceStackInstanceSummary) *string { return v.StackId })
}

type StackSetManagedExecution struct {
	// When set to true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order. Default is false.
	Active *bool `pulumi:"active"`
}

type StackSetManagedExecutionArgs struct {
	// When set to true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order. Default is false.
	Active pulumix.Input[*bool] `pulumi:"active"`
}

func (StackSetManagedExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetManagedExecution)(nil)).Elem()
}

func (i StackSetManagedExecutionArgs) ToStackSetManagedExecutionOutput() StackSetManagedExecutionOutput {
	return i.ToStackSetManagedExecutionOutputWithContext(context.Background())
}

func (i StackSetManagedExecutionArgs) ToStackSetManagedExecutionOutputWithContext(ctx context.Context) StackSetManagedExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetManagedExecutionOutput)
}

func (i *StackSetManagedExecutionArgs) ToOutput(ctx context.Context) pulumix.Output[*StackSetManagedExecutionArgs] {
	return pulumix.Val(i)
}

type StackSetManagedExecutionOutput struct{ *pulumi.OutputState }

func (StackSetManagedExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetManagedExecution)(nil)).Elem()
}

func (o StackSetManagedExecutionOutput) ToStackSetManagedExecutionOutput() StackSetManagedExecutionOutput {
	return o
}

func (o StackSetManagedExecutionOutput) ToStackSetManagedExecutionOutputWithContext(ctx context.Context) StackSetManagedExecutionOutput {
	return o
}

func (o StackSetManagedExecutionOutput) ToOutput(ctx context.Context) pulumix.Output[StackSetManagedExecution] {
	return pulumix.Output[StackSetManagedExecution]{
		OutputState: o.OutputState,
	}
}

// When set to true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order. Default is false.
func (o StackSetManagedExecutionOutput) Active() pulumix.Output[*bool] {
	return pulumix.Apply[StackSetManagedExecution](o, func(v StackSetManagedExecution) *bool { return v.Active })
}

type StackSetOperationPreferences struct {
	// The number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureToleranceCount *int `pulumi:"failureToleranceCount"`
	// The percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureTolerancePercentage *int `pulumi:"failureTolerancePercentage"`
	// The maximum number of accounts in which to perform this operation at one time.
	MaxConcurrentCount *int `pulumi:"maxConcurrentCount"`
	// The maximum percentage of accounts in which to perform this operation at one time.
	MaxConcurrentPercentage *int `pulumi:"maxConcurrentPercentage"`
	// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
	RegionConcurrencyType *string `pulumi:"regionConcurrencyType"`
	// The order of the Regions in where you want to perform the stack operation.
	RegionOrders []string `pulumi:"regionOrders"`
}

type StackSetOperationPreferencesArgs struct {
	// The number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureToleranceCount pulumix.Input[*int] `pulumi:"failureToleranceCount"`
	// The percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureTolerancePercentage pulumix.Input[*int] `pulumi:"failureTolerancePercentage"`
	// The maximum number of accounts in which to perform this operation at one time.
	MaxConcurrentCount pulumix.Input[*int] `pulumi:"maxConcurrentCount"`
	// The maximum percentage of accounts in which to perform this operation at one time.
	MaxConcurrentPercentage pulumix.Input[*int] `pulumi:"maxConcurrentPercentage"`
	// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
	RegionConcurrencyType pulumix.Input[*string] `pulumi:"regionConcurrencyType"`
	// The order of the Regions in where you want to perform the stack operation.
	RegionOrders pulumix.Input[[]string] `pulumi:"regionOrders"`
}

func (StackSetOperationPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetOperationPreferences)(nil)).Elem()
}

func (i StackSetOperationPreferencesArgs) ToStackSetOperationPreferencesOutput() StackSetOperationPreferencesOutput {
	return i.ToStackSetOperationPreferencesOutputWithContext(context.Background())
}

func (i StackSetOperationPreferencesArgs) ToStackSetOperationPreferencesOutputWithContext(ctx context.Context) StackSetOperationPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetOperationPreferencesOutput)
}

func (i *StackSetOperationPreferencesArgs) ToOutput(ctx context.Context) pulumix.Output[*StackSetOperationPreferencesArgs] {
	return pulumix.Val(i)
}

type StackSetOperationPreferencesOutput struct{ *pulumi.OutputState }

func (StackSetOperationPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetOperationPreferences)(nil)).Elem()
}

func (o StackSetOperationPreferencesOutput) ToStackSetOperationPreferencesOutput() StackSetOperationPreferencesOutput {
	return o
}

func (o StackSetOperationPreferencesOutput) ToStackSetOperationPreferencesOutputWithContext(ctx context.Context) StackSetOperationPreferencesOutput {
	return o
}

func (o StackSetOperationPreferencesOutput) ToOutput(ctx context.Context) pulumix.Output[StackSetOperationPreferences] {
	return pulumix.Output[StackSetOperationPreferences]{
		OutputState: o.OutputState,
	}
}

// The number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
func (o StackSetOperationPreferencesOutput) FailureToleranceCount() pulumix.Output[*int] {
	return pulumix.Apply[StackSetOperationPreferences](o, func(v StackSetOperationPreferences) *int { return v.FailureToleranceCount })
}

// The percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
func (o StackSetOperationPreferencesOutput) FailureTolerancePercentage() pulumix.Output[*int] {
	return pulumix.Apply[StackSetOperationPreferences](o, func(v StackSetOperationPreferences) *int { return v.FailureTolerancePercentage })
}

// The maximum number of accounts in which to perform this operation at one time.
func (o StackSetOperationPreferencesOutput) MaxConcurrentCount() pulumix.Output[*int] {
	return pulumix.Apply[StackSetOperationPreferences](o, func(v StackSetOperationPreferences) *int { return v.MaxConcurrentCount })
}

// The maximum percentage of accounts in which to perform this operation at one time.
func (o StackSetOperationPreferencesOutput) MaxConcurrentPercentage() pulumix.Output[*int] {
	return pulumix.Apply[StackSetOperationPreferences](o, func(v StackSetOperationPreferences) *int { return v.MaxConcurrentPercentage })
}

// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
func (o StackSetOperationPreferencesOutput) RegionConcurrencyType() pulumix.Output[*string] {
	return pulumix.Apply[StackSetOperationPreferences](o, func(v StackSetOperationPreferences) *string { return v.RegionConcurrencyType })
}

// The order of the Regions in where you want to perform the stack operation.
func (o StackSetOperationPreferencesOutput) RegionOrders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[StackSetOperationPreferences](o, func(v StackSetOperationPreferences) []string { return v.RegionOrders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCloudFormationTypeLoggingConfig struct {
	// Name of the CloudWatch Log Group where CloudFormation sends error logging information when invoking the type's handlers.
	LogGroupName string `pulumi:"logGroupName"`
	// ARN of the IAM Role CloudFormation assumes when sending error logging information to CloudWatch Logs.
	LogRoleArn string `pulumi:"logRoleArn"`
}

type GetCloudFormationTypeLoggingConfigArgs struct {
	// Name of the CloudWatch Log Group where CloudFormation sends error logging information when invoking the type's handlers.
	LogGroupName pulumix.Input[string] `pulumi:"logGroupName"`
	// ARN of the IAM Role CloudFormation assumes when sending error logging information to CloudWatch Logs.
	LogRoleArn pulumix.Input[string] `pulumi:"logRoleArn"`
}

func (GetCloudFormationTypeLoggingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCloudFormationTypeLoggingConfig)(nil)).Elem()
}

func (i GetCloudFormationTypeLoggingConfigArgs) ToGetCloudFormationTypeLoggingConfigOutput() GetCloudFormationTypeLoggingConfigOutput {
	return i.ToGetCloudFormationTypeLoggingConfigOutputWithContext(context.Background())
}

func (i GetCloudFormationTypeLoggingConfigArgs) ToGetCloudFormationTypeLoggingConfigOutputWithContext(ctx context.Context) GetCloudFormationTypeLoggingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCloudFormationTypeLoggingConfigOutput)
}

func (i *GetCloudFormationTypeLoggingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCloudFormationTypeLoggingConfigArgs] {
	return pulumix.Val(i)
}

type GetCloudFormationTypeLoggingConfigOutput struct{ *pulumi.OutputState }

func (GetCloudFormationTypeLoggingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCloudFormationTypeLoggingConfig)(nil)).Elem()
}

func (o GetCloudFormationTypeLoggingConfigOutput) ToGetCloudFormationTypeLoggingConfigOutput() GetCloudFormationTypeLoggingConfigOutput {
	return o
}

func (o GetCloudFormationTypeLoggingConfigOutput) ToGetCloudFormationTypeLoggingConfigOutputWithContext(ctx context.Context) GetCloudFormationTypeLoggingConfigOutput {
	return o
}

func (o GetCloudFormationTypeLoggingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetCloudFormationTypeLoggingConfig] {
	return pulumix.Output[GetCloudFormationTypeLoggingConfig]{
		OutputState: o.OutputState,
	}
}

// Name of the CloudWatch Log Group where CloudFormation sends error logging information when invoking the type's handlers.
func (o GetCloudFormationTypeLoggingConfigOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[GetCloudFormationTypeLoggingConfig](o, func(v GetCloudFormationTypeLoggingConfig) string { return v.LogGroupName })
}

// ARN of the IAM Role CloudFormation assumes when sending error logging information to CloudWatch Logs.
func (o GetCloudFormationTypeLoggingConfigOutput) LogRoleArn() pulumix.Output[string] {
	return pulumix.Apply[GetCloudFormationTypeLoggingConfig](o, func(v GetCloudFormationTypeLoggingConfig) string { return v.LogRoleArn })
}

func init() {
	pulumi.RegisterOutputType(CloudFormationTypeLoggingConfigOutput{})
	pulumi.RegisterOutputType(StackSetAutoDeploymentOutput{})
	pulumi.RegisterOutputType(StackSetInstanceDeploymentTargetsOutput{})
	pulumi.RegisterOutputType(StackSetInstanceOperationPreferencesOutput{})
	pulumi.RegisterOutputType(StackSetInstanceStackInstanceSummaryOutput{})
	pulumi.RegisterOutputType(StackSetManagedExecutionOutput{})
	pulumi.RegisterOutputType(StackSetOperationPreferencesOutput{})
	pulumi.RegisterOutputType(GetCloudFormationTypeLoggingConfigOutput{})
}
