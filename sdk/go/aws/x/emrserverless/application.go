// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emrserverless

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an EMR Serverless Application.
type Application struct {
	pulumi.CustomResourceState

	// The CPU architecture of an application. Valid values are `ARM64` or `X86_64`. Default value is `X86_64`.
	Architecture pulumix.Output[*string] `pulumi:"architecture"`
	// ARN of the cluster.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The configuration for an application to automatically start on job submission.
	AutoStartConfiguration pulumix.GPtrOutput[ApplicationAutoStartConfiguration, ApplicationAutoStartConfigurationOutput] `pulumi:"autoStartConfiguration"`
	// The configuration for an application to automatically stop after a certain amount of time being idle.
	AutoStopConfiguration pulumix.GPtrOutput[ApplicationAutoStopConfiguration, ApplicationAutoStopConfigurationOutput] `pulumi:"autoStopConfiguration"`
	// The image configuration applied to all worker types.
	ImageConfiguration pulumix.GPtrOutput[ApplicationImageConfiguration, ApplicationImageConfigurationOutput] `pulumi:"imageConfiguration"`
	// The capacity to initialize when the application is created.
	InitialCapacities pulumix.GArrayOutput[ApplicationInitialCapacity, ApplicationInitialCapacityOutput] `pulumi:"initialCapacities"`
	// The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
	MaximumCapacity pulumix.GPtrOutput[ApplicationMaximumCapacity, ApplicationMaximumCapacityOutput] `pulumi:"maximumCapacity"`
	// The name of the application.
	Name pulumix.Output[string] `pulumi:"name"`
	// The network configuration for customer VPC connectivity.
	NetworkConfiguration pulumix.GPtrOutput[ApplicationNetworkConfiguration, ApplicationNetworkConfigurationOutput] `pulumi:"networkConfiguration"`
	// The EMR release version associated with the application.
	ReleaseLabel pulumix.Output[string] `pulumi:"releaseLabel"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The type of application you want to start, such as `spark` or `hive`.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReleaseLabel == nil {
		return nil, errors.New("invalid value for required argument 'ReleaseLabel'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("aws:emrserverless/application:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws:emrserverless/application:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
	// The CPU architecture of an application. Valid values are `ARM64` or `X86_64`. Default value is `X86_64`.
	Architecture *string `pulumi:"architecture"`
	// ARN of the cluster.
	Arn *string `pulumi:"arn"`
	// The configuration for an application to automatically start on job submission.
	AutoStartConfiguration *ApplicationAutoStartConfiguration `pulumi:"autoStartConfiguration"`
	// The configuration for an application to automatically stop after a certain amount of time being idle.
	AutoStopConfiguration *ApplicationAutoStopConfiguration `pulumi:"autoStopConfiguration"`
	// The image configuration applied to all worker types.
	ImageConfiguration *ApplicationImageConfiguration `pulumi:"imageConfiguration"`
	// The capacity to initialize when the application is created.
	InitialCapacities []ApplicationInitialCapacity `pulumi:"initialCapacities"`
	// The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
	MaximumCapacity *ApplicationMaximumCapacity `pulumi:"maximumCapacity"`
	// The name of the application.
	Name *string `pulumi:"name"`
	// The network configuration for customer VPC connectivity.
	NetworkConfiguration *ApplicationNetworkConfiguration `pulumi:"networkConfiguration"`
	// The EMR release version associated with the application.
	ReleaseLabel *string `pulumi:"releaseLabel"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The type of application you want to start, such as `spark` or `hive`.
	Type *string `pulumi:"type"`
}

type ApplicationState struct {
	// The CPU architecture of an application. Valid values are `ARM64` or `X86_64`. Default value is `X86_64`.
	Architecture pulumix.Input[*string]
	// ARN of the cluster.
	Arn pulumix.Input[*string]
	// The configuration for an application to automatically start on job submission.
	AutoStartConfiguration pulumix.Input[*ApplicationAutoStartConfigurationArgs]
	// The configuration for an application to automatically stop after a certain amount of time being idle.
	AutoStopConfiguration pulumix.Input[*ApplicationAutoStopConfigurationArgs]
	// The image configuration applied to all worker types.
	ImageConfiguration pulumix.Input[*ApplicationImageConfigurationArgs]
	// The capacity to initialize when the application is created.
	InitialCapacities pulumix.Input[[]*ApplicationInitialCapacityArgs]
	// The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
	MaximumCapacity pulumix.Input[*ApplicationMaximumCapacityArgs]
	// The name of the application.
	Name pulumix.Input[*string]
	// The network configuration for customer VPC connectivity.
	NetworkConfiguration pulumix.Input[*ApplicationNetworkConfigurationArgs]
	// The EMR release version associated with the application.
	ReleaseLabel pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The type of application you want to start, such as `spark` or `hive`.
	Type pulumix.Input[*string]
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// The CPU architecture of an application. Valid values are `ARM64` or `X86_64`. Default value is `X86_64`.
	Architecture *string `pulumi:"architecture"`
	// The configuration for an application to automatically start on job submission.
	AutoStartConfiguration *ApplicationAutoStartConfiguration `pulumi:"autoStartConfiguration"`
	// The configuration for an application to automatically stop after a certain amount of time being idle.
	AutoStopConfiguration *ApplicationAutoStopConfiguration `pulumi:"autoStopConfiguration"`
	// The image configuration applied to all worker types.
	ImageConfiguration *ApplicationImageConfiguration `pulumi:"imageConfiguration"`
	// The capacity to initialize when the application is created.
	InitialCapacities []ApplicationInitialCapacity `pulumi:"initialCapacities"`
	// The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
	MaximumCapacity *ApplicationMaximumCapacity `pulumi:"maximumCapacity"`
	// The name of the application.
	Name *string `pulumi:"name"`
	// The network configuration for customer VPC connectivity.
	NetworkConfiguration *ApplicationNetworkConfiguration `pulumi:"networkConfiguration"`
	// The EMR release version associated with the application.
	ReleaseLabel string `pulumi:"releaseLabel"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
	// The type of application you want to start, such as `spark` or `hive`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// The CPU architecture of an application. Valid values are `ARM64` or `X86_64`. Default value is `X86_64`.
	Architecture pulumix.Input[*string]
	// The configuration for an application to automatically start on job submission.
	AutoStartConfiguration pulumix.Input[*ApplicationAutoStartConfigurationArgs]
	// The configuration for an application to automatically stop after a certain amount of time being idle.
	AutoStopConfiguration pulumix.Input[*ApplicationAutoStopConfigurationArgs]
	// The image configuration applied to all worker types.
	ImageConfiguration pulumix.Input[*ApplicationImageConfigurationArgs]
	// The capacity to initialize when the application is created.
	InitialCapacities pulumix.Input[[]*ApplicationInitialCapacityArgs]
	// The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
	MaximumCapacity pulumix.Input[*ApplicationMaximumCapacityArgs]
	// The name of the application.
	Name pulumix.Input[*string]
	// The network configuration for customer VPC connectivity.
	NetworkConfiguration pulumix.Input[*ApplicationNetworkConfigurationArgs]
	// The EMR release version associated with the application.
	ReleaseLabel pulumix.Input[string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
	// The type of application you want to start, such as `spark` or `hive`.
	Type pulumix.Input[string]
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToOutput(ctx context.Context) pulumix.Output[Application] {
	return pulumix.Output[Application]{
		OutputState: o.OutputState,
	}
}

// The CPU architecture of an application. Valid values are `ARM64` or `X86_64`. Default value is `X86_64`.
func (o ApplicationOutput) Architecture() pulumix.Output[*string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[*string] { return v.Architecture })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ARN of the cluster.
func (o ApplicationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The configuration for an application to automatically start on job submission.
func (o ApplicationOutput) AutoStartConfiguration() pulumix.GPtrOutput[ApplicationAutoStartConfiguration, ApplicationAutoStartConfigurationOutput] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.GPtrOutput[ApplicationAutoStartConfiguration, ApplicationAutoStartConfigurationOutput] {
		return v.AutoStartConfiguration
	})
	unwrapped := pulumix.Flatten[*ApplicationAutoStartConfiguration, pulumix.GPtrOutput[ApplicationAutoStartConfiguration, ApplicationAutoStartConfigurationOutput]](value)
	return pulumix.GPtrOutput[ApplicationAutoStartConfiguration, ApplicationAutoStartConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The configuration for an application to automatically stop after a certain amount of time being idle.
func (o ApplicationOutput) AutoStopConfiguration() pulumix.GPtrOutput[ApplicationAutoStopConfiguration, ApplicationAutoStopConfigurationOutput] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.GPtrOutput[ApplicationAutoStopConfiguration, ApplicationAutoStopConfigurationOutput] {
		return v.AutoStopConfiguration
	})
	unwrapped := pulumix.Flatten[*ApplicationAutoStopConfiguration, pulumix.GPtrOutput[ApplicationAutoStopConfiguration, ApplicationAutoStopConfigurationOutput]](value)
	return pulumix.GPtrOutput[ApplicationAutoStopConfiguration, ApplicationAutoStopConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The image configuration applied to all worker types.
func (o ApplicationOutput) ImageConfiguration() pulumix.GPtrOutput[ApplicationImageConfiguration, ApplicationImageConfigurationOutput] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.GPtrOutput[ApplicationImageConfiguration, ApplicationImageConfigurationOutput] {
		return v.ImageConfiguration
	})
	unwrapped := pulumix.Flatten[*ApplicationImageConfiguration, pulumix.GPtrOutput[ApplicationImageConfiguration, ApplicationImageConfigurationOutput]](value)
	return pulumix.GPtrOutput[ApplicationImageConfiguration, ApplicationImageConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The capacity to initialize when the application is created.
func (o ApplicationOutput) InitialCapacities() pulumix.GArrayOutput[ApplicationInitialCapacity, ApplicationInitialCapacityOutput] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.GArrayOutput[ApplicationInitialCapacity, ApplicationInitialCapacityOutput] {
		return v.InitialCapacities
	})
	unwrapped := pulumix.Flatten[[]ApplicationInitialCapacity, pulumix.GArrayOutput[ApplicationInitialCapacity, ApplicationInitialCapacityOutput]](value)
	return pulumix.GArrayOutput[ApplicationInitialCapacity, ApplicationInitialCapacityOutput]{OutputState: unwrapped.OutputState}
}

// The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
func (o ApplicationOutput) MaximumCapacity() pulumix.GPtrOutput[ApplicationMaximumCapacity, ApplicationMaximumCapacityOutput] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.GPtrOutput[ApplicationMaximumCapacity, ApplicationMaximumCapacityOutput] {
		return v.MaximumCapacity
	})
	unwrapped := pulumix.Flatten[*ApplicationMaximumCapacity, pulumix.GPtrOutput[ApplicationMaximumCapacity, ApplicationMaximumCapacityOutput]](value)
	return pulumix.GPtrOutput[ApplicationMaximumCapacity, ApplicationMaximumCapacityOutput]{OutputState: unwrapped.OutputState}
}

// The name of the application.
func (o ApplicationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The network configuration for customer VPC connectivity.
func (o ApplicationOutput) NetworkConfiguration() pulumix.GPtrOutput[ApplicationNetworkConfiguration, ApplicationNetworkConfigurationOutput] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.GPtrOutput[ApplicationNetworkConfiguration, ApplicationNetworkConfigurationOutput] {
		return v.NetworkConfiguration
	})
	unwrapped := pulumix.Flatten[*ApplicationNetworkConfiguration, pulumix.GPtrOutput[ApplicationNetworkConfiguration, ApplicationNetworkConfigurationOutput]](value)
	return pulumix.GPtrOutput[ApplicationNetworkConfiguration, ApplicationNetworkConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The EMR release version associated with the application.
func (o ApplicationOutput) ReleaseLabel() pulumix.Output[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[string] { return v.ReleaseLabel })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
func (o ApplicationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ApplicationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The type of application you want to start, such as `spark` or `hive`.
func (o ApplicationOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ApplicationOutput{})
}
