// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a VPC Endpoint Policy resource.
type VpcEndpointPolicy struct {
	pulumi.CustomResourceState

	// A policy to attach to the endpoint that controls access to the service. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details.
	Policy pulumix.Output[string] `pulumi:"policy"`
	// The VPC Endpoint ID.
	VpcEndpointId pulumix.Output[string] `pulumi:"vpcEndpointId"`
}

// NewVpcEndpointPolicy registers a new resource with the given unique name, arguments, and options.
func NewVpcEndpointPolicy(ctx *pulumi.Context,
	name string, args *VpcEndpointPolicyArgs, opts ...pulumi.ResourceOption) (*VpcEndpointPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcEndpointId == nil {
		return nil, errors.New("invalid value for required argument 'VpcEndpointId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcEndpointPolicy
	err := ctx.RegisterResource("aws:ec2/vpcEndpointPolicy:VpcEndpointPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcEndpointPolicy gets an existing VpcEndpointPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcEndpointPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcEndpointPolicyState, opts ...pulumi.ResourceOption) (*VpcEndpointPolicy, error) {
	var resource VpcEndpointPolicy
	err := ctx.ReadResource("aws:ec2/vpcEndpointPolicy:VpcEndpointPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcEndpointPolicy resources.
type vpcEndpointPolicyState struct {
	// A policy to attach to the endpoint that controls access to the service. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details.
	Policy *string `pulumi:"policy"`
	// The VPC Endpoint ID.
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
}

type VpcEndpointPolicyState struct {
	// A policy to attach to the endpoint that controls access to the service. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details.
	Policy pulumix.Input[*string]
	// The VPC Endpoint ID.
	VpcEndpointId pulumix.Input[*string]
}

func (VpcEndpointPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointPolicyState)(nil)).Elem()
}

type vpcEndpointPolicyArgs struct {
	// A policy to attach to the endpoint that controls access to the service. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details.
	Policy *string `pulumi:"policy"`
	// The VPC Endpoint ID.
	VpcEndpointId string `pulumi:"vpcEndpointId"`
}

// The set of arguments for constructing a VpcEndpointPolicy resource.
type VpcEndpointPolicyArgs struct {
	// A policy to attach to the endpoint that controls access to the service. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details.
	Policy pulumix.Input[*string]
	// The VPC Endpoint ID.
	VpcEndpointId pulumix.Input[string]
}

func (VpcEndpointPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointPolicyArgs)(nil)).Elem()
}

type VpcEndpointPolicyOutput struct{ *pulumi.OutputState }

func (VpcEndpointPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcEndpointPolicy)(nil)).Elem()
}

func (o VpcEndpointPolicyOutput) ToVpcEndpointPolicyOutput() VpcEndpointPolicyOutput {
	return o
}

func (o VpcEndpointPolicyOutput) ToVpcEndpointPolicyOutputWithContext(ctx context.Context) VpcEndpointPolicyOutput {
	return o
}

func (o VpcEndpointPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[VpcEndpointPolicy] {
	return pulumix.Output[VpcEndpointPolicy]{
		OutputState: o.OutputState,
	}
}

// A policy to attach to the endpoint that controls access to the service. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details.
func (o VpcEndpointPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpointPolicy](o, func(v VpcEndpointPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The VPC Endpoint ID.
func (o VpcEndpointPolicyOutput) VpcEndpointId() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpointPolicy](o, func(v VpcEndpointPolicy) pulumix.Output[string] { return v.VpcEndpointId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VpcEndpointPolicyOutput{})
}
