// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `getRegion` provides details about a specific AWS region.
//
// As well as validating a given region name this resource can be used to
// discover the name of the region configured within the provider. The latter
// can be useful in a child module which is inheriting an AWS provider
// configuration from its parent module.
func GetRegion(ctx *pulumi.Context, args *GetRegionArgs, opts ...pulumi.InvokeOption) (*GetRegionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRegionResult
	err := ctx.Invoke("aws:index/getRegion:getRegion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegion.
type GetRegionArgs struct {
	// EC2 endpoint of the region to select.
	Endpoint *string `pulumi:"endpoint"`
	Id       *string `pulumi:"id"`
	// Full name of the region to select.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getRegion.
type GetRegionResult struct {
	// Region's description in this format: "Location (Region name)".
	Description string `pulumi:"description"`
	// EC2 endpoint for the selected region.
	Endpoint string `pulumi:"endpoint"`
	Id       string `pulumi:"id"`
	// Name of the selected region.
	Name string `pulumi:"name"`
}

func GetRegionOutput(ctx *pulumi.Context, args GetRegionOutputArgs, opts ...pulumi.InvokeOption) GetRegionResultOutput {
	outputResult := pulumix.ApplyErr[*GetRegionArgs](args.ToOutput(), func(plainArgs *GetRegionArgs) (*GetRegionResult, error) {
		return GetRegion(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetRegionResultOutput, *GetRegionResult](outputResult)
}

// A collection of arguments for invoking getRegion.
type GetRegionOutputArgs struct {
	// EC2 endpoint of the region to select.
	Endpoint pulumix.Input[*string] `pulumi:"endpoint"`
	Id       pulumix.Input[*string] `pulumi:"id"`
	// Full name of the region to select.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (args GetRegionOutputArgs) ToOutput() pulumix.Output[*GetRegionArgs] {
	allArgs := pulumix.All(
		args.Endpoint.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetRegionArgs {
		return &GetRegionArgs{
			Endpoint: resolvedArgs[0].(*string),
			Id:       resolvedArgs[1].(*string),
			Name:     resolvedArgs[2].(*string),
		}
	})
}

type GetRegionResultOutput struct{ *pulumi.OutputState }

func (GetRegionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionResult)(nil)).Elem()
}

func (o GetRegionResultOutput) ToOutput(context.Context) pulumix.Output[*GetRegionResult] {
	return pulumix.Output[*GetRegionResult]{
		OutputState: o.OutputState,
	}
}

func (o GetRegionResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*GetRegionResult](o, func(v *GetRegionResult) string { return v.Description })
}

func (o GetRegionResultOutput) Endpoint() pulumix.Output[string] {
	return pulumix.Apply[*GetRegionResult](o, func(v *GetRegionResult) string { return v.Endpoint })
}

func (o GetRegionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetRegionResult](o, func(v *GetRegionResult) string { return v.Id })
}

func (o GetRegionResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*GetRegionResult](o, func(v *GetRegionResult) string { return v.Name })
}
