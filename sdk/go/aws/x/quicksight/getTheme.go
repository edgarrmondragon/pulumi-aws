// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS QuickSight Theme.
func LookupTheme(ctx *pulumi.Context, args *LookupThemeArgs, opts ...pulumi.InvokeOption) (*LookupThemeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupThemeResult
	err := ctx.Invoke("aws:quicksight/getTheme:getTheme", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTheme.
type LookupThemeArgs struct {
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	Tags map[string]string `pulumi:"tags"`
	// Identifier of the theme.
	//
	// The following arguments are optional:
	ThemeId string `pulumi:"themeId"`
}

// A collection of values returned by getTheme.
type LookupThemeResult struct {
	// ARN of the theme.
	Arn          string `pulumi:"arn"`
	AwsAccountId string `pulumi:"awsAccountId"`
	// The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight.
	BaseThemeId string `pulumi:"baseThemeId"`
	// The theme configuration, which contains the theme display properties. See configuration.
	Configurations []GetThemeConfiguration `pulumi:"configurations"`
	// The time that the theme was created.
	CreatedTime string `pulumi:"createdTime"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The time that the theme was last updated.
	LastUpdatedTime string `pulumi:"lastUpdatedTime"`
	// Display name of the theme.
	Name string `pulumi:"name"`
	// A set of resource permissions on the theme. See permissions.
	Permissions []GetThemePermission `pulumi:"permissions"`
	// The theme creation status.
	Status string `pulumi:"status"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	Tags    map[string]string `pulumi:"tags"`
	ThemeId string            `pulumi:"themeId"`
	// A description of the current theme version being created/updated.
	VersionDescription string `pulumi:"versionDescription"`
	// The version number of the theme version.
	VersionNumber int `pulumi:"versionNumber"`
}

func LookupThemeOutput(ctx *pulumi.Context, args LookupThemeOutputArgs, opts ...pulumi.InvokeOption) LookupThemeResultOutput {
	outputResult := pulumix.ApplyErr[*LookupThemeArgs](args.ToOutput(), func(plainArgs *LookupThemeArgs) (*LookupThemeResult, error) {
		return LookupTheme(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupThemeResultOutput, *LookupThemeResult](outputResult)
}

// A collection of arguments for invoking getTheme.
type LookupThemeOutputArgs struct {
	// AWS account ID.
	AwsAccountId pulumix.Input[*string] `pulumi:"awsAccountId"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Identifier of the theme.
	//
	// The following arguments are optional:
	ThemeId pulumix.Input[string] `pulumi:"themeId"`
}

func (args LookupThemeOutputArgs) ToOutput() pulumix.Output[*LookupThemeArgs] {
	allArgs := pulumix.All(
		args.AwsAccountId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.ThemeId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupThemeArgs {
		return &LookupThemeArgs{
			AwsAccountId: resolvedArgs[0].(*string),
			Tags:         resolvedArgs[1].(map[string]string),
			ThemeId:      resolvedArgs[2].(string),
		}
	})
}

type LookupThemeResultOutput struct{ *pulumi.OutputState }

func (LookupThemeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupThemeResult)(nil)).Elem()
}

func (o LookupThemeResultOutput) ToOutput(context.Context) pulumix.Output[*LookupThemeResult] {
	return pulumix.Output[*LookupThemeResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupThemeResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupThemeResult](o, func(v *LookupThemeResult) string { return v.Arn })
}

func (o LookupThemeResultOutput) AwsAccountId() pulumix.Output[string] {
	return pulumix.Apply[*LookupThemeResult](o, func(v *LookupThemeResult) string { return v.AwsAccountId })
}

func (o LookupThemeResultOutput) BaseThemeId() pulumix.Output[string] {
	return pulumix.Apply[*LookupThemeResult](o, func(v *LookupThemeResult) string { return v.BaseThemeId })
}

func (o LookupThemeResultOutput) Configurations() pulumix.GArrayOutput[GetThemeConfiguration, GetThemeConfigurationOutput] {
	value := pulumix.Apply[*LookupThemeResult](o, func(v *LookupThemeResult) []GetThemeConfiguration { return v.Configurations })
	return pulumix.GArrayOutput[GetThemeConfiguration, GetThemeConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupThemeResultOutput) CreatedTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupThemeResult](o, func(v *LookupThemeResult) string { return v.CreatedTime })
}

func (o LookupThemeResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupThemeResult](o, func(v *LookupThemeResult) string { return v.Id })
}

func (o LookupThemeResultOutput) LastUpdatedTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupThemeResult](o, func(v *LookupThemeResult) string { return v.LastUpdatedTime })
}

func (o LookupThemeResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupThemeResult](o, func(v *LookupThemeResult) string { return v.Name })
}

func (o LookupThemeResultOutput) Permissions() pulumix.GArrayOutput[GetThemePermission, GetThemePermissionOutput] {
	value := pulumix.Apply[*LookupThemeResult](o, func(v *LookupThemeResult) []GetThemePermission { return v.Permissions })
	return pulumix.GArrayOutput[GetThemePermission, GetThemePermissionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupThemeResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupThemeResult](o, func(v *LookupThemeResult) string { return v.Status })
}

func (o LookupThemeResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupThemeResult](o, func(v *LookupThemeResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupThemeResultOutput) ThemeId() pulumix.Output[string] {
	return pulumix.Apply[*LookupThemeResult](o, func(v *LookupThemeResult) string { return v.ThemeId })
}

func (o LookupThemeResultOutput) VersionDescription() pulumix.Output[string] {
	return pulumix.Apply[*LookupThemeResult](o, func(v *LookupThemeResult) string { return v.VersionDescription })
}

func (o LookupThemeResultOutput) VersionNumber() pulumix.Output[int] {
	return pulumix.Apply[*LookupThemeResult](o, func(v *LookupThemeResult) int { return v.VersionNumber })
}
