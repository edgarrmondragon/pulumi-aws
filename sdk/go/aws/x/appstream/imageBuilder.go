// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appstream

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AppStream image builder.
type ImageBuilder struct {
	pulumi.CustomResourceState

	// Set of interface VPC endpoint (interface endpoint) objects. Maximum of 4. See below.
	AccessEndpoints pulumix.GArrayOutput[ImageBuilderAccessEndpoint, ImageBuilderAccessEndpointOutput] `pulumi:"accessEndpoints"`
	// Version of the AppStream 2.0 agent to use for this image builder.
	AppstreamAgentVersion pulumix.Output[string] `pulumi:"appstreamAgentVersion"`
	// ARN of the appstream image builder.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Date and time, in UTC and extended RFC 3339 format, when the image builder was created.
	CreatedTime pulumix.Output[string] `pulumi:"createdTime"`
	// Description to display.
	Description pulumix.Output[string] `pulumi:"description"`
	// Human-readable friendly name for the AppStream image builder.
	DisplayName pulumix.Output[string] `pulumi:"displayName"`
	// Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.
	DomainJoinInfo pulumix.GPtrOutput[ImageBuilderDomainJoinInfo, ImageBuilderDomainJoinInfoOutput] `pulumi:"domainJoinInfo"`
	// Enables or disables default internet access for the image builder.
	EnableDefaultInternetAccess pulumix.Output[bool] `pulumi:"enableDefaultInternetAccess"`
	// ARN of the IAM role to apply to the image builder.
	IamRoleArn pulumix.Output[string] `pulumi:"iamRoleArn"`
	// ARN of the public, private, or shared image to use.
	ImageArn pulumix.Output[string] `pulumi:"imageArn"`
	// Name of the image used to create the image builder.
	ImageName pulumix.Output[string] `pulumi:"imageName"`
	// Instance type to use when launching the image builder.
	InstanceType pulumix.Output[string] `pulumi:"instanceType"`
	// Unique name for the image builder.
	//
	// The following arguments are optional:
	Name pulumix.Output[string] `pulumi:"name"`
	// State of the image builder. Can be: `PENDING`, `UPDATING_AGENT`, `RUNNING`, `STOPPING`, `STOPPED`, `REBOOTING`, `SNAPSHOTTING`, `DELETING`, `FAILED`, `UPDATING`, `PENDING_QUALIFICATION`
	State pulumix.Output[string] `pulumi:"state"`
	// Map of tags to assign to the instance. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Configuration block for the VPC configuration for the image builder. See below.
	VpcConfig pulumix.GPtrOutput[ImageBuilderVpcConfig, ImageBuilderVpcConfigOutput] `pulumi:"vpcConfig"`
}

// NewImageBuilder registers a new resource with the given unique name, arguments, and options.
func NewImageBuilder(ctx *pulumi.Context,
	name string, args *ImageBuilderArgs, opts ...pulumi.ResourceOption) (*ImageBuilder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImageBuilder
	err := ctx.RegisterResource("aws:appstream/imageBuilder:ImageBuilder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageBuilder gets an existing ImageBuilder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageBuilder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageBuilderState, opts ...pulumi.ResourceOption) (*ImageBuilder, error) {
	var resource ImageBuilder
	err := ctx.ReadResource("aws:appstream/imageBuilder:ImageBuilder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageBuilder resources.
type imageBuilderState struct {
	// Set of interface VPC endpoint (interface endpoint) objects. Maximum of 4. See below.
	AccessEndpoints []ImageBuilderAccessEndpoint `pulumi:"accessEndpoints"`
	// Version of the AppStream 2.0 agent to use for this image builder.
	AppstreamAgentVersion *string `pulumi:"appstreamAgentVersion"`
	// ARN of the appstream image builder.
	Arn *string `pulumi:"arn"`
	// Date and time, in UTC and extended RFC 3339 format, when the image builder was created.
	CreatedTime *string `pulumi:"createdTime"`
	// Description to display.
	Description *string `pulumi:"description"`
	// Human-readable friendly name for the AppStream image builder.
	DisplayName *string `pulumi:"displayName"`
	// Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.
	DomainJoinInfo *ImageBuilderDomainJoinInfo `pulumi:"domainJoinInfo"`
	// Enables or disables default internet access for the image builder.
	EnableDefaultInternetAccess *bool `pulumi:"enableDefaultInternetAccess"`
	// ARN of the IAM role to apply to the image builder.
	IamRoleArn *string `pulumi:"iamRoleArn"`
	// ARN of the public, private, or shared image to use.
	ImageArn *string `pulumi:"imageArn"`
	// Name of the image used to create the image builder.
	ImageName *string `pulumi:"imageName"`
	// Instance type to use when launching the image builder.
	InstanceType *string `pulumi:"instanceType"`
	// Unique name for the image builder.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// State of the image builder. Can be: `PENDING`, `UPDATING_AGENT`, `RUNNING`, `STOPPING`, `STOPPED`, `REBOOTING`, `SNAPSHOTTING`, `DELETING`, `FAILED`, `UPDATING`, `PENDING_QUALIFICATION`
	State *string `pulumi:"state"`
	// Map of tags to assign to the instance. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Configuration block for the VPC configuration for the image builder. See below.
	VpcConfig *ImageBuilderVpcConfig `pulumi:"vpcConfig"`
}

type ImageBuilderState struct {
	// Set of interface VPC endpoint (interface endpoint) objects. Maximum of 4. See below.
	AccessEndpoints pulumix.Input[[]*ImageBuilderAccessEndpointArgs]
	// Version of the AppStream 2.0 agent to use for this image builder.
	AppstreamAgentVersion pulumix.Input[*string]
	// ARN of the appstream image builder.
	Arn pulumix.Input[*string]
	// Date and time, in UTC and extended RFC 3339 format, when the image builder was created.
	CreatedTime pulumix.Input[*string]
	// Description to display.
	Description pulumix.Input[*string]
	// Human-readable friendly name for the AppStream image builder.
	DisplayName pulumix.Input[*string]
	// Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.
	DomainJoinInfo pulumix.Input[*ImageBuilderDomainJoinInfoArgs]
	// Enables or disables default internet access for the image builder.
	EnableDefaultInternetAccess pulumix.Input[*bool]
	// ARN of the IAM role to apply to the image builder.
	IamRoleArn pulumix.Input[*string]
	// ARN of the public, private, or shared image to use.
	ImageArn pulumix.Input[*string]
	// Name of the image used to create the image builder.
	ImageName pulumix.Input[*string]
	// Instance type to use when launching the image builder.
	InstanceType pulumix.Input[*string]
	// Unique name for the image builder.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// State of the image builder. Can be: `PENDING`, `UPDATING_AGENT`, `RUNNING`, `STOPPING`, `STOPPED`, `REBOOTING`, `SNAPSHOTTING`, `DELETING`, `FAILED`, `UPDATING`, `PENDING_QUALIFICATION`
	State pulumix.Input[*string]
	// Map of tags to assign to the instance. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Configuration block for the VPC configuration for the image builder. See below.
	VpcConfig pulumix.Input[*ImageBuilderVpcConfigArgs]
}

func (ImageBuilderState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageBuilderState)(nil)).Elem()
}

type imageBuilderArgs struct {
	// Set of interface VPC endpoint (interface endpoint) objects. Maximum of 4. See below.
	AccessEndpoints []ImageBuilderAccessEndpoint `pulumi:"accessEndpoints"`
	// Version of the AppStream 2.0 agent to use for this image builder.
	AppstreamAgentVersion *string `pulumi:"appstreamAgentVersion"`
	// Description to display.
	Description *string `pulumi:"description"`
	// Human-readable friendly name for the AppStream image builder.
	DisplayName *string `pulumi:"displayName"`
	// Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.
	DomainJoinInfo *ImageBuilderDomainJoinInfo `pulumi:"domainJoinInfo"`
	// Enables or disables default internet access for the image builder.
	EnableDefaultInternetAccess *bool `pulumi:"enableDefaultInternetAccess"`
	// ARN of the IAM role to apply to the image builder.
	IamRoleArn *string `pulumi:"iamRoleArn"`
	// ARN of the public, private, or shared image to use.
	ImageArn *string `pulumi:"imageArn"`
	// Name of the image used to create the image builder.
	ImageName *string `pulumi:"imageName"`
	// Instance type to use when launching the image builder.
	InstanceType string `pulumi:"instanceType"`
	// Unique name for the image builder.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Map of tags to assign to the instance. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Configuration block for the VPC configuration for the image builder. See below.
	VpcConfig *ImageBuilderVpcConfig `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a ImageBuilder resource.
type ImageBuilderArgs struct {
	// Set of interface VPC endpoint (interface endpoint) objects. Maximum of 4. See below.
	AccessEndpoints pulumix.Input[[]*ImageBuilderAccessEndpointArgs]
	// Version of the AppStream 2.0 agent to use for this image builder.
	AppstreamAgentVersion pulumix.Input[*string]
	// Description to display.
	Description pulumix.Input[*string]
	// Human-readable friendly name for the AppStream image builder.
	DisplayName pulumix.Input[*string]
	// Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.
	DomainJoinInfo pulumix.Input[*ImageBuilderDomainJoinInfoArgs]
	// Enables or disables default internet access for the image builder.
	EnableDefaultInternetAccess pulumix.Input[*bool]
	// ARN of the IAM role to apply to the image builder.
	IamRoleArn pulumix.Input[*string]
	// ARN of the public, private, or shared image to use.
	ImageArn pulumix.Input[*string]
	// Name of the image used to create the image builder.
	ImageName pulumix.Input[*string]
	// Instance type to use when launching the image builder.
	InstanceType pulumix.Input[string]
	// Unique name for the image builder.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Map of tags to assign to the instance. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Configuration block for the VPC configuration for the image builder. See below.
	VpcConfig pulumix.Input[*ImageBuilderVpcConfigArgs]
}

func (ImageBuilderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageBuilderArgs)(nil)).Elem()
}

type ImageBuilderOutput struct{ *pulumi.OutputState }

func (ImageBuilderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageBuilder)(nil)).Elem()
}

func (o ImageBuilderOutput) ToImageBuilderOutput() ImageBuilderOutput {
	return o
}

func (o ImageBuilderOutput) ToImageBuilderOutputWithContext(ctx context.Context) ImageBuilderOutput {
	return o
}

func (o ImageBuilderOutput) ToOutput(ctx context.Context) pulumix.Output[ImageBuilder] {
	return pulumix.Output[ImageBuilder]{
		OutputState: o.OutputState,
	}
}

// Set of interface VPC endpoint (interface endpoint) objects. Maximum of 4. See below.
func (o ImageBuilderOutput) AccessEndpoints() pulumix.GArrayOutput[ImageBuilderAccessEndpoint, ImageBuilderAccessEndpointOutput] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.GArrayOutput[ImageBuilderAccessEndpoint, ImageBuilderAccessEndpointOutput] {
		return v.AccessEndpoints
	})
	unwrapped := pulumix.Flatten[[]ImageBuilderAccessEndpoint, pulumix.GArrayOutput[ImageBuilderAccessEndpoint, ImageBuilderAccessEndpointOutput]](value)
	return pulumix.GArrayOutput[ImageBuilderAccessEndpoint, ImageBuilderAccessEndpointOutput]{OutputState: unwrapped.OutputState}
}

// Version of the AppStream 2.0 agent to use for this image builder.
func (o ImageBuilderOutput) AppstreamAgentVersion() pulumix.Output[string] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.Output[string] { return v.AppstreamAgentVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the appstream image builder.
func (o ImageBuilderOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date and time, in UTC and extended RFC 3339 format, when the image builder was created.
func (o ImageBuilderOutput) CreatedTime() pulumix.Output[string] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.Output[string] { return v.CreatedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description to display.
func (o ImageBuilderOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Human-readable friendly name for the AppStream image builder.
func (o ImageBuilderOutput) DisplayName() pulumix.Output[string] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.Output[string] { return v.DisplayName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.
func (o ImageBuilderOutput) DomainJoinInfo() pulumix.GPtrOutput[ImageBuilderDomainJoinInfo, ImageBuilderDomainJoinInfoOutput] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.GPtrOutput[ImageBuilderDomainJoinInfo, ImageBuilderDomainJoinInfoOutput] {
		return v.DomainJoinInfo
	})
	unwrapped := pulumix.Flatten[*ImageBuilderDomainJoinInfo, pulumix.GPtrOutput[ImageBuilderDomainJoinInfo, ImageBuilderDomainJoinInfoOutput]](value)
	return pulumix.GPtrOutput[ImageBuilderDomainJoinInfo, ImageBuilderDomainJoinInfoOutput]{OutputState: unwrapped.OutputState}
}

// Enables or disables default internet access for the image builder.
func (o ImageBuilderOutput) EnableDefaultInternetAccess() pulumix.Output[bool] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.Output[bool] { return v.EnableDefaultInternetAccess })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// ARN of the IAM role to apply to the image builder.
func (o ImageBuilderOutput) IamRoleArn() pulumix.Output[string] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.Output[string] { return v.IamRoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the public, private, or shared image to use.
func (o ImageBuilderOutput) ImageArn() pulumix.Output[string] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.Output[string] { return v.ImageArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the image used to create the image builder.
func (o ImageBuilderOutput) ImageName() pulumix.Output[string] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.Output[string] { return v.ImageName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Instance type to use when launching the image builder.
func (o ImageBuilderOutput) InstanceType() pulumix.Output[string] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.Output[string] { return v.InstanceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique name for the image builder.
//
// The following arguments are optional:
func (o ImageBuilderOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// State of the image builder. Can be: `PENDING`, `UPDATING_AGENT`, `RUNNING`, `STOPPING`, `STOPPED`, `REBOOTING`, `SNAPSHOTTING`, `DELETING`, `FAILED`, `UPDATING`, `PENDING_QUALIFICATION`
func (o ImageBuilderOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of tags to assign to the instance. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ImageBuilderOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ImageBuilderOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Configuration block for the VPC configuration for the image builder. See below.
func (o ImageBuilderOutput) VpcConfig() pulumix.GPtrOutput[ImageBuilderVpcConfig, ImageBuilderVpcConfigOutput] {
	value := pulumix.Apply[ImageBuilder](o, func(v ImageBuilder) pulumix.GPtrOutput[ImageBuilderVpcConfig, ImageBuilderVpcConfigOutput] {
		return v.VpcConfig
	})
	unwrapped := pulumix.Flatten[*ImageBuilderVpcConfig, pulumix.GPtrOutput[ImageBuilderVpcConfig, ImageBuilderVpcConfigOutput]](value)
	return pulumix.GPtrOutput[ImageBuilderVpcConfig, ImageBuilderVpcConfigOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ImageBuilderOutput{})
}
