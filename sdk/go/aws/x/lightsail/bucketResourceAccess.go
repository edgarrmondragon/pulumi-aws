// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a lightsail resource access to a bucket.
type BucketResourceAccess struct {
	pulumi.CustomResourceState

	// The name of the bucket to grant access to.
	BucketName pulumix.Output[string] `pulumi:"bucketName"`
	// The name of the resource to be granted bucket access.
	ResourceName pulumix.Output[string] `pulumi:"resourceName"`
}

// NewBucketResourceAccess registers a new resource with the given unique name, arguments, and options.
func NewBucketResourceAccess(ctx *pulumi.Context,
	name string, args *BucketResourceAccessArgs, opts ...pulumi.ResourceOption) (*BucketResourceAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	if args.ResourceName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketResourceAccess
	err := ctx.RegisterResource("aws:lightsail/bucketResourceAccess:BucketResourceAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketResourceAccess gets an existing BucketResourceAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketResourceAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketResourceAccessState, opts ...pulumi.ResourceOption) (*BucketResourceAccess, error) {
	var resource BucketResourceAccess
	err := ctx.ReadResource("aws:lightsail/bucketResourceAccess:BucketResourceAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketResourceAccess resources.
type bucketResourceAccessState struct {
	// The name of the bucket to grant access to.
	BucketName *string `pulumi:"bucketName"`
	// The name of the resource to be granted bucket access.
	ResourceName *string `pulumi:"resourceName"`
}

type BucketResourceAccessState struct {
	// The name of the bucket to grant access to.
	BucketName pulumix.Input[*string]
	// The name of the resource to be granted bucket access.
	ResourceName pulumix.Input[*string]
}

func (BucketResourceAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketResourceAccessState)(nil)).Elem()
}

type bucketResourceAccessArgs struct {
	// The name of the bucket to grant access to.
	BucketName string `pulumi:"bucketName"`
	// The name of the resource to be granted bucket access.
	ResourceName string `pulumi:"resourceName"`
}

// The set of arguments for constructing a BucketResourceAccess resource.
type BucketResourceAccessArgs struct {
	// The name of the bucket to grant access to.
	BucketName pulumix.Input[string]
	// The name of the resource to be granted bucket access.
	ResourceName pulumix.Input[string]
}

func (BucketResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketResourceAccessArgs)(nil)).Elem()
}

type BucketResourceAccessOutput struct{ *pulumi.OutputState }

func (BucketResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketResourceAccess)(nil)).Elem()
}

func (o BucketResourceAccessOutput) ToBucketResourceAccessOutput() BucketResourceAccessOutput {
	return o
}

func (o BucketResourceAccessOutput) ToBucketResourceAccessOutputWithContext(ctx context.Context) BucketResourceAccessOutput {
	return o
}

func (o BucketResourceAccessOutput) ToOutput(ctx context.Context) pulumix.Output[BucketResourceAccess] {
	return pulumix.Output[BucketResourceAccess]{
		OutputState: o.OutputState,
	}
}

// The name of the bucket to grant access to.
func (o BucketResourceAccessOutput) BucketName() pulumix.Output[string] {
	value := pulumix.Apply[BucketResourceAccess](o, func(v BucketResourceAccess) pulumix.Output[string] { return v.BucketName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the resource to be granted bucket access.
func (o BucketResourceAccessOutput) ResourceName() pulumix.Output[string] {
	value := pulumix.Apply[BucketResourceAccess](o, func(v BucketResourceAccess) pulumix.Output[string] { return v.ResourceName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(BucketResourceAccessOutput{})
}
