// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `ec2.Eip` provides details about a specific Elastic IP.
func GetElasticIp(ctx *pulumi.Context, args *GetElasticIpArgs, opts ...pulumi.InvokeOption) (*GetElasticIpResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetElasticIpResult
	err := ctx.Invoke("aws:ec2/getElasticIp:getElasticIp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getElasticIp.
type GetElasticIpArgs struct {
	// One or more name/value pairs to use as filters. There are several valid keys, for a full reference, check out the [EC2 API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAddresses.html).
	Filters []GetElasticIpFilter `pulumi:"filters"`
	// Allocation ID of the specific VPC EIP to retrieve. If a classic EIP is required, do NOT set `id`, only set `publicIp`
	Id *string `pulumi:"id"`
	// Public IP of the specific EIP to retrieve.
	PublicIp *string `pulumi:"publicIp"`
	// Map of tags, each pair of which must exactly match a pair on the desired Elastic IP
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getElasticIp.
type GetElasticIpResult struct {
	// ID representing the association of the address with an instance in a VPC.
	AssociationId string `pulumi:"associationId"`
	// Carrier IP address.
	CarrierIp string `pulumi:"carrierIp"`
	// Customer Owned IP.
	CustomerOwnedIp string `pulumi:"customerOwnedIp"`
	// The ID of a Customer Owned IP Pool. For more on customer owned IP addressed check out [Customer-owned IP addresses guide](https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing)
	CustomerOwnedIpv4Pool string `pulumi:"customerOwnedIpv4Pool"`
	// Whether the address is for use in EC2-Classic (standard) or in a VPC (vpc).
	Domain  string               `pulumi:"domain"`
	Filters []GetElasticIpFilter `pulumi:"filters"`
	// If VPC Elastic IP, the allocation identifier. If EC2-Classic Elastic IP, the public IP address.
	Id string `pulumi:"id"`
	// ID of the instance that the address is associated with (if any).
	InstanceId string `pulumi:"instanceId"`
	// The ID of the network interface.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The ID of the AWS account that owns the network interface.
	NetworkInterfaceOwnerId string `pulumi:"networkInterfaceOwnerId"`
	// Private DNS associated with the Elastic IP address.
	PrivateDns string `pulumi:"privateDns"`
	// Private IP address associated with the Elastic IP address.
	PrivateIp string `pulumi:"privateIp"`
	// Public DNS associated with the Elastic IP address.
	PublicDns string `pulumi:"publicDns"`
	// Public IP address of Elastic IP.
	PublicIp string `pulumi:"publicIp"`
	// ID of an address pool.
	PublicIpv4Pool string `pulumi:"publicIpv4Pool"`
	// Key-value map of tags associated with Elastic IP.
	Tags map[string]string `pulumi:"tags"`
}

func GetElasticIpOutput(ctx *pulumi.Context, args GetElasticIpOutputArgs, opts ...pulumi.InvokeOption) GetElasticIpResultOutput {
	outputResult := pulumix.ApplyErr[*GetElasticIpArgs](args.ToOutput(), func(plainArgs *GetElasticIpArgs) (*GetElasticIpResult, error) {
		return GetElasticIp(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetElasticIpResultOutput, *GetElasticIpResult](outputResult)
}

// A collection of arguments for invoking getElasticIp.
type GetElasticIpOutputArgs struct {
	// One or more name/value pairs to use as filters. There are several valid keys, for a full reference, check out the [EC2 API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAddresses.html).
	Filters pulumix.Input[[]*GetElasticIpFilterArgs] `pulumi:"filters"`
	// Allocation ID of the specific VPC EIP to retrieve. If a classic EIP is required, do NOT set `id`, only set `publicIp`
	Id pulumix.Input[*string] `pulumi:"id"`
	// Public IP of the specific EIP to retrieve.
	PublicIp pulumix.Input[*string] `pulumi:"publicIp"`
	// Map of tags, each pair of which must exactly match a pair on the desired Elastic IP
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetElasticIpOutputArgs) ToOutput() pulumix.Output[*GetElasticIpArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.PublicIp.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetElasticIpArgs {
		return &GetElasticIpArgs{
			Filters:  resolvedArgs[0].([]GetElasticIpFilter),
			Id:       resolvedArgs[1].(*string),
			PublicIp: resolvedArgs[2].(*string),
			Tags:     resolvedArgs[3].(map[string]string),
		}
	})
}

type GetElasticIpResultOutput struct{ *pulumi.OutputState }

func (GetElasticIpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetElasticIpResult)(nil)).Elem()
}

func (o GetElasticIpResultOutput) ToOutput(context.Context) pulumix.Output[*GetElasticIpResult] {
	return pulumix.Output[*GetElasticIpResult]{
		OutputState: o.OutputState,
	}
}

func (o GetElasticIpResultOutput) AssociationId() pulumix.Output[string] {
	return pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) string { return v.AssociationId })
}

func (o GetElasticIpResultOutput) CarrierIp() pulumix.Output[string] {
	return pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) string { return v.CarrierIp })
}

func (o GetElasticIpResultOutput) CustomerOwnedIp() pulumix.Output[string] {
	return pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) string { return v.CustomerOwnedIp })
}

func (o GetElasticIpResultOutput) CustomerOwnedIpv4Pool() pulumix.Output[string] {
	return pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) string { return v.CustomerOwnedIpv4Pool })
}

func (o GetElasticIpResultOutput) Domain() pulumix.Output[string] {
	return pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) string { return v.Domain })
}

func (o GetElasticIpResultOutput) Filters() pulumix.GArrayOutput[GetElasticIpFilter, GetElasticIpFilterOutput] {
	value := pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) []GetElasticIpFilter { return v.Filters })
	return pulumix.GArrayOutput[GetElasticIpFilter, GetElasticIpFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetElasticIpResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) string { return v.Id })
}

func (o GetElasticIpResultOutput) InstanceId() pulumix.Output[string] {
	return pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) string { return v.InstanceId })
}

func (o GetElasticIpResultOutput) NetworkInterfaceId() pulumix.Output[string] {
	return pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) string { return v.NetworkInterfaceId })
}

func (o GetElasticIpResultOutput) NetworkInterfaceOwnerId() pulumix.Output[string] {
	return pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) string { return v.NetworkInterfaceOwnerId })
}

func (o GetElasticIpResultOutput) PrivateDns() pulumix.Output[string] {
	return pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) string { return v.PrivateDns })
}

func (o GetElasticIpResultOutput) PrivateIp() pulumix.Output[string] {
	return pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) string { return v.PrivateIp })
}

func (o GetElasticIpResultOutput) PublicDns() pulumix.Output[string] {
	return pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) string { return v.PublicDns })
}

func (o GetElasticIpResultOutput) PublicIp() pulumix.Output[string] {
	return pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) string { return v.PublicIp })
}

func (o GetElasticIpResultOutput) PublicIpv4Pool() pulumix.Output[string] {
	return pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) string { return v.PublicIpv4Pool })
}

func (o GetElasticIpResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetElasticIpResult](o, func(v *GetElasticIpResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
