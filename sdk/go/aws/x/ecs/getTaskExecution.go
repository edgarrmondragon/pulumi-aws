// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS ECS (Elastic Container) Task Execution. This data source calls the [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) API, allowing execution of one-time tasks that don't fit a standard resource lifecycle. See the feature request issue for additional context.
//
// > **NOTE on preview operations:** This data source calls the `RunTask` API on every read operation, which means new task(s) may be created from a `pulumi preview` command if all attributes are known. Placing this functionality behind a data source is an intentional trade off to enable use cases requiring a one-time task execution without relying on provisioners. Caution should be taken to ensure the data source is only executed once, or that the resulting tasks can safely run in parallel.
func GetTaskExecution(ctx *pulumi.Context, args *GetTaskExecutionArgs, opts ...pulumi.InvokeOption) (*GetTaskExecutionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTaskExecutionResult
	err := ctx.Invoke("aws:ecs/getTaskExecution:getTaskExecution", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTaskExecution.
type GetTaskExecutionArgs struct {
	// Set of capacity provider strategies to use for the cluster. See below.
	CapacityProviderStrategies []GetTaskExecutionCapacityProviderStrategy `pulumi:"capacityProviderStrategies"`
	// Short name or full Amazon Resource Name (ARN) of the cluster to run the task on.
	Cluster string `pulumi:"cluster"`
	// Number of instantiations of the specified task to place on your cluster. You can specify up to 10 tasks for each call.
	DesiredCount *int `pulumi:"desiredCount"`
	// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
	EnableEcsManagedTags *bool `pulumi:"enableEcsManagedTags"`
	// Specifies whether to enable Amazon ECS Exec for the tasks within the service.
	EnableExecuteCommand *bool `pulumi:"enableExecuteCommand"`
	// Name of the task group to associate with the task. The default value is the family name of the task definition.
	Group *string `pulumi:"group"`
	// Launch type on which to run your service. Valid values are `EC2`, `FARGATE`, and `EXTERNAL`.
	LaunchType *string `pulumi:"launchType"`
	// Network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.
	NetworkConfiguration *GetTaskExecutionNetworkConfiguration `pulumi:"networkConfiguration"`
	// A list of container overrides that specify the name of a container in the specified task definition and the overrides it should receive.
	Overrides *GetTaskExecutionOverrides `pulumi:"overrides"`
	// An array of placement constraint objects to use for the task. You can specify up to 10 constraints for each task. See below.
	PlacementConstraints []GetTaskExecutionPlacementConstraint `pulumi:"placementConstraints"`
	// The placement strategy objects to use for the task. You can specify a maximum of 5 strategy rules for each task. See below.
	PlacementStrategies []GetTaskExecutionPlacementStrategy `pulumi:"placementStrategies"`
	// The platform version the task uses. A platform version is only specified for tasks hosted on Fargate. If one isn't specified, the `LATEST` platform version is used.
	PlatformVersion *string `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't propagated. An error will be received if you specify the `SERVICE` option when running a task. Valid values are `TASK_DEFINITION` or `NONE`.
	PropagateTags *string `pulumi:"propagateTags"`
	// The reference ID to use for the task.
	ReferenceId *string `pulumi:"referenceId"`
	// An optional tag specified when a task is started.
	StartedBy *string `pulumi:"startedBy"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The `family` and `revision` (`family:revision`) or full ARN of the task definition to run. If a revision isn't specified, the latest `ACTIVE` revision is used.
	//
	// The following arguments are optional:
	TaskDefinition string `pulumi:"taskDefinition"`
}

// A collection of values returned by getTaskExecution.
type GetTaskExecutionResult struct {
	CapacityProviderStrategies []GetTaskExecutionCapacityProviderStrategy `pulumi:"capacityProviderStrategies"`
	Cluster                    string                                     `pulumi:"cluster"`
	DesiredCount               *int                                       `pulumi:"desiredCount"`
	EnableEcsManagedTags       *bool                                      `pulumi:"enableEcsManagedTags"`
	EnableExecuteCommand       *bool                                      `pulumi:"enableExecuteCommand"`
	Group                      *string                                    `pulumi:"group"`
	// The provider-assigned unique ID for this managed resource.
	Id                   string                                `pulumi:"id"`
	LaunchType           *string                               `pulumi:"launchType"`
	NetworkConfiguration *GetTaskExecutionNetworkConfiguration `pulumi:"networkConfiguration"`
	Overrides            *GetTaskExecutionOverrides            `pulumi:"overrides"`
	PlacementConstraints []GetTaskExecutionPlacementConstraint `pulumi:"placementConstraints"`
	PlacementStrategies  []GetTaskExecutionPlacementStrategy   `pulumi:"placementStrategies"`
	PlatformVersion      *string                               `pulumi:"platformVersion"`
	PropagateTags        *string                               `pulumi:"propagateTags"`
	ReferenceId          *string                               `pulumi:"referenceId"`
	StartedBy            *string                               `pulumi:"startedBy"`
	Tags                 map[string]string                     `pulumi:"tags"`
	// A list of the provisioned task ARNs.
	TaskArns       []string `pulumi:"taskArns"`
	TaskDefinition string   `pulumi:"taskDefinition"`
}

func GetTaskExecutionOutput(ctx *pulumi.Context, args GetTaskExecutionOutputArgs, opts ...pulumi.InvokeOption) GetTaskExecutionResultOutput {
	outputResult := pulumix.ApplyErr[*GetTaskExecutionArgs](args.ToOutput(), func(plainArgs *GetTaskExecutionArgs) (*GetTaskExecutionResult, error) {
		return GetTaskExecution(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetTaskExecutionResultOutput, *GetTaskExecutionResult](outputResult)
}

// A collection of arguments for invoking getTaskExecution.
type GetTaskExecutionOutputArgs struct {
	// Set of capacity provider strategies to use for the cluster. See below.
	CapacityProviderStrategies pulumix.Input[[]*GetTaskExecutionCapacityProviderStrategyArgs] `pulumi:"capacityProviderStrategies"`
	// Short name or full Amazon Resource Name (ARN) of the cluster to run the task on.
	Cluster pulumix.Input[string] `pulumi:"cluster"`
	// Number of instantiations of the specified task to place on your cluster. You can specify up to 10 tasks for each call.
	DesiredCount pulumix.Input[*int] `pulumi:"desiredCount"`
	// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
	EnableEcsManagedTags pulumix.Input[*bool] `pulumi:"enableEcsManagedTags"`
	// Specifies whether to enable Amazon ECS Exec for the tasks within the service.
	EnableExecuteCommand pulumix.Input[*bool] `pulumi:"enableExecuteCommand"`
	// Name of the task group to associate with the task. The default value is the family name of the task definition.
	Group pulumix.Input[*string] `pulumi:"group"`
	// Launch type on which to run your service. Valid values are `EC2`, `FARGATE`, and `EXTERNAL`.
	LaunchType pulumix.Input[*string] `pulumi:"launchType"`
	// Network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.
	NetworkConfiguration pulumix.Input[*GetTaskExecutionNetworkConfigurationArgs] `pulumi:"networkConfiguration"`
	// A list of container overrides that specify the name of a container in the specified task definition and the overrides it should receive.
	Overrides pulumix.Input[*GetTaskExecutionOverridesArgs] `pulumi:"overrides"`
	// An array of placement constraint objects to use for the task. You can specify up to 10 constraints for each task. See below.
	PlacementConstraints pulumix.Input[[]*GetTaskExecutionPlacementConstraintArgs] `pulumi:"placementConstraints"`
	// The placement strategy objects to use for the task. You can specify a maximum of 5 strategy rules for each task. See below.
	PlacementStrategies pulumix.Input[[]*GetTaskExecutionPlacementStrategyArgs] `pulumi:"placementStrategies"`
	// The platform version the task uses. A platform version is only specified for tasks hosted on Fargate. If one isn't specified, the `LATEST` platform version is used.
	PlatformVersion pulumix.Input[*string] `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't propagated. An error will be received if you specify the `SERVICE` option when running a task. Valid values are `TASK_DEFINITION` or `NONE`.
	PropagateTags pulumix.Input[*string] `pulumi:"propagateTags"`
	// The reference ID to use for the task.
	ReferenceId pulumix.Input[*string] `pulumi:"referenceId"`
	// An optional tag specified when a task is started.
	StartedBy pulumix.Input[*string] `pulumi:"startedBy"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// The `family` and `revision` (`family:revision`) or full ARN of the task definition to run. If a revision isn't specified, the latest `ACTIVE` revision is used.
	//
	// The following arguments are optional:
	TaskDefinition pulumix.Input[string] `pulumi:"taskDefinition"`
}

func (args GetTaskExecutionOutputArgs) ToOutput() pulumix.Output[*GetTaskExecutionArgs] {
	allArgs := pulumix.All(
		args.CapacityProviderStrategies.ToOutput(context.Background()).AsAny(),
		args.Cluster.ToOutput(context.Background()).AsAny(),
		args.DesiredCount.ToOutput(context.Background()).AsAny(),
		args.EnableEcsManagedTags.ToOutput(context.Background()).AsAny(),
		args.EnableExecuteCommand.ToOutput(context.Background()).AsAny(),
		args.Group.ToOutput(context.Background()).AsAny(),
		args.LaunchType.ToOutput(context.Background()).AsAny(),
		args.NetworkConfiguration.ToOutput(context.Background()).AsAny(),
		args.Overrides.ToOutput(context.Background()).AsAny(),
		args.PlacementConstraints.ToOutput(context.Background()).AsAny(),
		args.PlacementStrategies.ToOutput(context.Background()).AsAny(),
		args.PlatformVersion.ToOutput(context.Background()).AsAny(),
		args.PropagateTags.ToOutput(context.Background()).AsAny(),
		args.ReferenceId.ToOutput(context.Background()).AsAny(),
		args.StartedBy.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.TaskDefinition.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetTaskExecutionArgs {
		return &GetTaskExecutionArgs{
			CapacityProviderStrategies: resolvedArgs[0].([]GetTaskExecutionCapacityProviderStrategy),
			Cluster:                    resolvedArgs[1].(string),
			DesiredCount:               resolvedArgs[2].(*int),
			EnableEcsManagedTags:       resolvedArgs[3].(*bool),
			EnableExecuteCommand:       resolvedArgs[4].(*bool),
			Group:                      resolvedArgs[5].(*string),
			LaunchType:                 resolvedArgs[6].(*string),
			NetworkConfiguration:       resolvedArgs[7].(*GetTaskExecutionNetworkConfiguration),
			Overrides:                  resolvedArgs[8].(*GetTaskExecutionOverrides),
			PlacementConstraints:       resolvedArgs[9].([]GetTaskExecutionPlacementConstraint),
			PlacementStrategies:        resolvedArgs[10].([]GetTaskExecutionPlacementStrategy),
			PlatformVersion:            resolvedArgs[11].(*string),
			PropagateTags:              resolvedArgs[12].(*string),
			ReferenceId:                resolvedArgs[13].(*string),
			StartedBy:                  resolvedArgs[14].(*string),
			Tags:                       resolvedArgs[15].(map[string]string),
			TaskDefinition:             resolvedArgs[16].(string),
		}
	})
}

type GetTaskExecutionResultOutput struct{ *pulumi.OutputState }

func (GetTaskExecutionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionResult)(nil)).Elem()
}

func (o GetTaskExecutionResultOutput) ToOutput(context.Context) pulumix.Output[*GetTaskExecutionResult] {
	return pulumix.Output[*GetTaskExecutionResult]{
		OutputState: o.OutputState,
	}
}

func (o GetTaskExecutionResultOutput) CapacityProviderStrategies() pulumix.GArrayOutput[GetTaskExecutionCapacityProviderStrategy, GetTaskExecutionCapacityProviderStrategyOutput] {
	value := pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) []GetTaskExecutionCapacityProviderStrategy {
		return v.CapacityProviderStrategies
	})
	return pulumix.GArrayOutput[GetTaskExecutionCapacityProviderStrategy, GetTaskExecutionCapacityProviderStrategyOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetTaskExecutionResultOutput) Cluster() pulumix.Output[string] {
	return pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) string { return v.Cluster })
}

func (o GetTaskExecutionResultOutput) DesiredCount() pulumix.Output[*int] {
	return pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) *int { return v.DesiredCount })
}

func (o GetTaskExecutionResultOutput) EnableEcsManagedTags() pulumix.Output[*bool] {
	return pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) *bool { return v.EnableEcsManagedTags })
}

func (o GetTaskExecutionResultOutput) EnableExecuteCommand() pulumix.Output[*bool] {
	return pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) *bool { return v.EnableExecuteCommand })
}

func (o GetTaskExecutionResultOutput) Group() pulumix.Output[*string] {
	return pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) *string { return v.Group })
}

func (o GetTaskExecutionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) string { return v.Id })
}

func (o GetTaskExecutionResultOutput) LaunchType() pulumix.Output[*string] {
	return pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) *string { return v.LaunchType })
}

func (o GetTaskExecutionResultOutput) NetworkConfiguration() pulumix.GPtrOutput[GetTaskExecutionNetworkConfiguration, GetTaskExecutionNetworkConfigurationOutput] {
	value := pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) *GetTaskExecutionNetworkConfiguration { return v.NetworkConfiguration })
	return pulumix.GPtrOutput[GetTaskExecutionNetworkConfiguration, GetTaskExecutionNetworkConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetTaskExecutionResultOutput) Overrides() pulumix.GPtrOutput[GetTaskExecutionOverrides, GetTaskExecutionOverridesOutput] {
	value := pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) *GetTaskExecutionOverrides { return v.Overrides })
	return pulumix.GPtrOutput[GetTaskExecutionOverrides, GetTaskExecutionOverridesOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetTaskExecutionResultOutput) PlacementConstraints() pulumix.GArrayOutput[GetTaskExecutionPlacementConstraint, GetTaskExecutionPlacementConstraintOutput] {
	value := pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) []GetTaskExecutionPlacementConstraint { return v.PlacementConstraints })
	return pulumix.GArrayOutput[GetTaskExecutionPlacementConstraint, GetTaskExecutionPlacementConstraintOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetTaskExecutionResultOutput) PlacementStrategies() pulumix.GArrayOutput[GetTaskExecutionPlacementStrategy, GetTaskExecutionPlacementStrategyOutput] {
	value := pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) []GetTaskExecutionPlacementStrategy { return v.PlacementStrategies })
	return pulumix.GArrayOutput[GetTaskExecutionPlacementStrategy, GetTaskExecutionPlacementStrategyOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetTaskExecutionResultOutput) PlatformVersion() pulumix.Output[*string] {
	return pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) *string { return v.PlatformVersion })
}

func (o GetTaskExecutionResultOutput) PropagateTags() pulumix.Output[*string] {
	return pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) *string { return v.PropagateTags })
}

func (o GetTaskExecutionResultOutput) ReferenceId() pulumix.Output[*string] {
	return pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) *string { return v.ReferenceId })
}

func (o GetTaskExecutionResultOutput) StartedBy() pulumix.Output[*string] {
	return pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) *string { return v.StartedBy })
}

func (o GetTaskExecutionResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetTaskExecutionResultOutput) TaskArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) []string { return v.TaskArns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetTaskExecutionResultOutput) TaskDefinition() pulumix.Output[string] {
	return pulumix.Apply[*GetTaskExecutionResult](o, func(v *GetTaskExecutionResult) string { return v.TaskDefinition })
}
