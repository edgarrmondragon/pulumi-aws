// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package neptune

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ClusterParameterGroupParameter struct {
	// Valid values are `immediate` and `pending-reboot`. Defaults to `pending-reboot`.
	ApplyMethod *string `pulumi:"applyMethod"`
	// The name of the neptune parameter.
	Name string `pulumi:"name"`
	// The value of the neptune parameter.
	Value string `pulumi:"value"`
}

type ClusterParameterGroupParameterArgs struct {
	// Valid values are `immediate` and `pending-reboot`. Defaults to `pending-reboot`.
	ApplyMethod pulumix.Input[*string] `pulumi:"applyMethod"`
	// The name of the neptune parameter.
	Name pulumix.Input[string] `pulumi:"name"`
	// The value of the neptune parameter.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ClusterParameterGroupParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterParameterGroupParameter)(nil)).Elem()
}

func (i ClusterParameterGroupParameterArgs) ToClusterParameterGroupParameterOutput() ClusterParameterGroupParameterOutput {
	return i.ToClusterParameterGroupParameterOutputWithContext(context.Background())
}

func (i ClusterParameterGroupParameterArgs) ToClusterParameterGroupParameterOutputWithContext(ctx context.Context) ClusterParameterGroupParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterParameterGroupParameterOutput)
}

func (i *ClusterParameterGroupParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterParameterGroupParameterArgs] {
	return pulumix.Val(i)
}

type ClusterParameterGroupParameterOutput struct{ *pulumi.OutputState }

func (ClusterParameterGroupParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterParameterGroupParameter)(nil)).Elem()
}

func (o ClusterParameterGroupParameterOutput) ToClusterParameterGroupParameterOutput() ClusterParameterGroupParameterOutput {
	return o
}

func (o ClusterParameterGroupParameterOutput) ToClusterParameterGroupParameterOutputWithContext(ctx context.Context) ClusterParameterGroupParameterOutput {
	return o
}

func (o ClusterParameterGroupParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterParameterGroupParameter] {
	return pulumix.Output[ClusterParameterGroupParameter]{
		OutputState: o.OutputState,
	}
}

// Valid values are `immediate` and `pending-reboot`. Defaults to `pending-reboot`.
func (o ClusterParameterGroupParameterOutput) ApplyMethod() pulumix.Output[*string] {
	return pulumix.Apply[ClusterParameterGroupParameter](o, func(v ClusterParameterGroupParameter) *string { return v.ApplyMethod })
}

// The name of the neptune parameter.
func (o ClusterParameterGroupParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ClusterParameterGroupParameter](o, func(v ClusterParameterGroupParameter) string { return v.Name })
}

// The value of the neptune parameter.
func (o ClusterParameterGroupParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ClusterParameterGroupParameter](o, func(v ClusterParameterGroupParameter) string { return v.Value })
}

type ClusterServerlessV2ScalingConfiguration struct {
	// The maximum Neptune Capacity Units (NCUs) for this cluster. Must be lower or equal than **128**. See [AWS Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-serverless-capacity-scaling.html) for more details.
	MaxCapacity *float64 `pulumi:"maxCapacity"`
	// The minimum Neptune Capacity Units (NCUs) for this cluster. Must be greater or equal than **1**. See [AWS Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-serverless-capacity-scaling.html) for more details.
	MinCapacity *float64 `pulumi:"minCapacity"`
}

type ClusterServerlessV2ScalingConfigurationArgs struct {
	// The maximum Neptune Capacity Units (NCUs) for this cluster. Must be lower or equal than **128**. See [AWS Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-serverless-capacity-scaling.html) for more details.
	MaxCapacity pulumix.Input[*float64] `pulumi:"maxCapacity"`
	// The minimum Neptune Capacity Units (NCUs) for this cluster. Must be greater or equal than **1**. See [AWS Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-serverless-capacity-scaling.html) for more details.
	MinCapacity pulumix.Input[*float64] `pulumi:"minCapacity"`
}

func (ClusterServerlessV2ScalingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServerlessV2ScalingConfiguration)(nil)).Elem()
}

func (i ClusterServerlessV2ScalingConfigurationArgs) ToClusterServerlessV2ScalingConfigurationOutput() ClusterServerlessV2ScalingConfigurationOutput {
	return i.ToClusterServerlessV2ScalingConfigurationOutputWithContext(context.Background())
}

func (i ClusterServerlessV2ScalingConfigurationArgs) ToClusterServerlessV2ScalingConfigurationOutputWithContext(ctx context.Context) ClusterServerlessV2ScalingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServerlessV2ScalingConfigurationOutput)
}

func (i *ClusterServerlessV2ScalingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterServerlessV2ScalingConfigurationArgs] {
	return pulumix.Val(i)
}

type ClusterServerlessV2ScalingConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterServerlessV2ScalingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServerlessV2ScalingConfiguration)(nil)).Elem()
}

func (o ClusterServerlessV2ScalingConfigurationOutput) ToClusterServerlessV2ScalingConfigurationOutput() ClusterServerlessV2ScalingConfigurationOutput {
	return o
}

func (o ClusterServerlessV2ScalingConfigurationOutput) ToClusterServerlessV2ScalingConfigurationOutputWithContext(ctx context.Context) ClusterServerlessV2ScalingConfigurationOutput {
	return o
}

func (o ClusterServerlessV2ScalingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterServerlessV2ScalingConfiguration] {
	return pulumix.Output[ClusterServerlessV2ScalingConfiguration]{
		OutputState: o.OutputState,
	}
}

// The maximum Neptune Capacity Units (NCUs) for this cluster. Must be lower or equal than **128**. See [AWS Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-serverless-capacity-scaling.html) for more details.
func (o ClusterServerlessV2ScalingConfigurationOutput) MaxCapacity() pulumix.Output[*float64] {
	return pulumix.Apply[ClusterServerlessV2ScalingConfiguration](o, func(v ClusterServerlessV2ScalingConfiguration) *float64 { return v.MaxCapacity })
}

// The minimum Neptune Capacity Units (NCUs) for this cluster. Must be greater or equal than **1**. See [AWS Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-serverless-capacity-scaling.html) for more details.
func (o ClusterServerlessV2ScalingConfigurationOutput) MinCapacity() pulumix.Output[*float64] {
	return pulumix.Apply[ClusterServerlessV2ScalingConfiguration](o, func(v ClusterServerlessV2ScalingConfiguration) *float64 { return v.MinCapacity })
}

type GlobalClusterGlobalClusterMember struct {
	// Amazon Resource Name (ARN) of member DB Cluster.
	DbClusterArn *string `pulumi:"dbClusterArn"`
	// Whether the member is the primary DB Cluster.
	IsWriter *bool `pulumi:"isWriter"`
}

type GlobalClusterGlobalClusterMemberArgs struct {
	// Amazon Resource Name (ARN) of member DB Cluster.
	DbClusterArn pulumix.Input[*string] `pulumi:"dbClusterArn"`
	// Whether the member is the primary DB Cluster.
	IsWriter pulumix.Input[*bool] `pulumi:"isWriter"`
}

func (GlobalClusterGlobalClusterMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalClusterGlobalClusterMember)(nil)).Elem()
}

func (i GlobalClusterGlobalClusterMemberArgs) ToGlobalClusterGlobalClusterMemberOutput() GlobalClusterGlobalClusterMemberOutput {
	return i.ToGlobalClusterGlobalClusterMemberOutputWithContext(context.Background())
}

func (i GlobalClusterGlobalClusterMemberArgs) ToGlobalClusterGlobalClusterMemberOutputWithContext(ctx context.Context) GlobalClusterGlobalClusterMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalClusterGlobalClusterMemberOutput)
}

func (i *GlobalClusterGlobalClusterMemberArgs) ToOutput(ctx context.Context) pulumix.Output[*GlobalClusterGlobalClusterMemberArgs] {
	return pulumix.Val(i)
}

type GlobalClusterGlobalClusterMemberOutput struct{ *pulumi.OutputState }

func (GlobalClusterGlobalClusterMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalClusterGlobalClusterMember)(nil)).Elem()
}

func (o GlobalClusterGlobalClusterMemberOutput) ToGlobalClusterGlobalClusterMemberOutput() GlobalClusterGlobalClusterMemberOutput {
	return o
}

func (o GlobalClusterGlobalClusterMemberOutput) ToGlobalClusterGlobalClusterMemberOutputWithContext(ctx context.Context) GlobalClusterGlobalClusterMemberOutput {
	return o
}

func (o GlobalClusterGlobalClusterMemberOutput) ToOutput(ctx context.Context) pulumix.Output[GlobalClusterGlobalClusterMember] {
	return pulumix.Output[GlobalClusterGlobalClusterMember]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of member DB Cluster.
func (o GlobalClusterGlobalClusterMemberOutput) DbClusterArn() pulumix.Output[*string] {
	return pulumix.Apply[GlobalClusterGlobalClusterMember](o, func(v GlobalClusterGlobalClusterMember) *string { return v.DbClusterArn })
}

// Whether the member is the primary DB Cluster.
func (o GlobalClusterGlobalClusterMemberOutput) IsWriter() pulumix.Output[*bool] {
	return pulumix.Apply[GlobalClusterGlobalClusterMember](o, func(v GlobalClusterGlobalClusterMember) *bool { return v.IsWriter })
}

type ParameterGroupParameter struct {
	// The apply method of the Neptune parameter. Valid values are `immediate` and `pending-reboot`. Defaults to `pending-reboot`.
	ApplyMethod *string `pulumi:"applyMethod"`
	// The name of the Neptune parameter.
	Name string `pulumi:"name"`
	// The value of the Neptune parameter.
	Value string `pulumi:"value"`
}

type ParameterGroupParameterArgs struct {
	// The apply method of the Neptune parameter. Valid values are `immediate` and `pending-reboot`. Defaults to `pending-reboot`.
	ApplyMethod pulumix.Input[*string] `pulumi:"applyMethod"`
	// The name of the Neptune parameter.
	Name pulumix.Input[string] `pulumi:"name"`
	// The value of the Neptune parameter.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ParameterGroupParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return i.ToParameterGroupParameterOutputWithContext(context.Background())
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterGroupParameterOutput)
}

func (i *ParameterGroupParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*ParameterGroupParameterArgs] {
	return pulumix.Val(i)
}

type ParameterGroupParameterOutput struct{ *pulumi.OutputState }

func (ParameterGroupParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return o
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return o
}

func (o ParameterGroupParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ParameterGroupParameter] {
	return pulumix.Output[ParameterGroupParameter]{
		OutputState: o.OutputState,
	}
}

// The apply method of the Neptune parameter. Valid values are `immediate` and `pending-reboot`. Defaults to `pending-reboot`.
func (o ParameterGroupParameterOutput) ApplyMethod() pulumix.Output[*string] {
	return pulumix.Apply[ParameterGroupParameter](o, func(v ParameterGroupParameter) *string { return v.ApplyMethod })
}

// The name of the Neptune parameter.
func (o ParameterGroupParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ParameterGroupParameter](o, func(v ParameterGroupParameter) string { return v.Name })
}

// The value of the Neptune parameter.
func (o ParameterGroupParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ParameterGroupParameter](o, func(v ParameterGroupParameter) string { return v.Value })
}

func init() {
	pulumi.RegisterOutputType(ClusterParameterGroupParameterOutput{})
	pulumi.RegisterOutputType(ClusterServerlessV2ScalingConfigurationOutput{})
	pulumi.RegisterOutputType(GlobalClusterGlobalClusterMemberOutput{})
	pulumi.RegisterOutputType(ParameterGroupParameterOutput{})
}
