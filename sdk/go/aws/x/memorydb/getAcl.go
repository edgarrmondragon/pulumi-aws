// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a MemoryDB ACL.
func LookupAcl(ctx *pulumi.Context, args *LookupAclArgs, opts ...pulumi.InvokeOption) (*LookupAclResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAclResult
	err := ctx.Invoke("aws:memorydb/getAcl:getAcl", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAcl.
type LookupAclArgs struct {
	// Name of the ACL.
	Name string `pulumi:"name"`
	// Map of tags assigned to the ACL.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getAcl.
type LookupAclResult struct {
	// ARN of the ACL.
	Arn string `pulumi:"arn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The minimum engine version supported by the ACL.
	MinimumEngineVersion string `pulumi:"minimumEngineVersion"`
	Name                 string `pulumi:"name"`
	// Map of tags assigned to the ACL.
	Tags map[string]string `pulumi:"tags"`
	// Set of MemoryDB user names included in this ACL.
	UserNames []string `pulumi:"userNames"`
}

func LookupAclOutput(ctx *pulumi.Context, args LookupAclOutputArgs, opts ...pulumi.InvokeOption) LookupAclResultOutput {
	outputResult := pulumix.ApplyErr[*LookupAclArgs](args.ToOutput(), func(plainArgs *LookupAclArgs) (*LookupAclResult, error) {
		return LookupAcl(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupAclResultOutput, *LookupAclResult](outputResult)
}

// A collection of arguments for invoking getAcl.
type LookupAclOutputArgs struct {
	// Name of the ACL.
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of tags assigned to the ACL.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupAclOutputArgs) ToOutput() pulumix.Output[*LookupAclArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupAclArgs {
		return &LookupAclArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupAclResultOutput struct{ *pulumi.OutputState }

func (LookupAclResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclResult)(nil)).Elem()
}

func (o LookupAclResultOutput) ToOutput(context.Context) pulumix.Output[*LookupAclResult] {
	return pulumix.Output[*LookupAclResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupAclResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupAclResult](o, func(v *LookupAclResult) string { return v.Arn })
}

func (o LookupAclResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupAclResult](o, func(v *LookupAclResult) string { return v.Id })
}

func (o LookupAclResultOutput) MinimumEngineVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupAclResult](o, func(v *LookupAclResult) string { return v.MinimumEngineVersion })
}

func (o LookupAclResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupAclResult](o, func(v *LookupAclResult) string { return v.Name })
}

func (o LookupAclResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupAclResult](o, func(v *LookupAclResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupAclResultOutput) UserNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupAclResult](o, func(v *LookupAclResult) []string { return v.UserNames })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
