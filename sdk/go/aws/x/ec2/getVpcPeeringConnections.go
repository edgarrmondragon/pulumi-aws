// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get IDs of Amazon VPC peering connections
// To get more details on each connection, use the data resource ec2.VpcPeeringConnection
//
// Note: To use this data source in a count, the resources should exist before trying to access
// the data source.
func GetVpcPeeringConnections(ctx *pulumi.Context, args *GetVpcPeeringConnectionsArgs, opts ...pulumi.InvokeOption) (*GetVpcPeeringConnectionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVpcPeeringConnectionsResult
	err := ctx.Invoke("aws:ec2/getVpcPeeringConnections:getVpcPeeringConnections", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcPeeringConnections.
type GetVpcPeeringConnectionsArgs struct {
	// Custom filter block as described below.
	Filters []GetVpcPeeringConnectionsFilter `pulumi:"filters"`
	// Mapping of tags, each pair of which must exactly match
	// a pair on the desired VPC Peering Connection.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getVpcPeeringConnections.
type GetVpcPeeringConnectionsResult struct {
	Filters []GetVpcPeeringConnectionsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// IDs of the VPC Peering Connections.
	Ids  []string          `pulumi:"ids"`
	Tags map[string]string `pulumi:"tags"`
}

func GetVpcPeeringConnectionsOutput(ctx *pulumi.Context, args GetVpcPeeringConnectionsOutputArgs, opts ...pulumi.InvokeOption) GetVpcPeeringConnectionsResultOutput {
	outputResult := pulumix.ApplyErr[*GetVpcPeeringConnectionsArgs](args.ToOutput(), func(plainArgs *GetVpcPeeringConnectionsArgs) (*GetVpcPeeringConnectionsResult, error) {
		return GetVpcPeeringConnections(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetVpcPeeringConnectionsResultOutput, *GetVpcPeeringConnectionsResult](outputResult)
}

// A collection of arguments for invoking getVpcPeeringConnections.
type GetVpcPeeringConnectionsOutputArgs struct {
	// Custom filter block as described below.
	Filters pulumix.Input[[]*GetVpcPeeringConnectionsFilterArgs] `pulumi:"filters"`
	// Mapping of tags, each pair of which must exactly match
	// a pair on the desired VPC Peering Connection.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetVpcPeeringConnectionsOutputArgs) ToOutput() pulumix.Output[*GetVpcPeeringConnectionsArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetVpcPeeringConnectionsArgs {
		return &GetVpcPeeringConnectionsArgs{
			Filters: resolvedArgs[0].([]GetVpcPeeringConnectionsFilter),
			Tags:    resolvedArgs[1].(map[string]string),
		}
	})
}

type GetVpcPeeringConnectionsResultOutput struct{ *pulumi.OutputState }

func (GetVpcPeeringConnectionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcPeeringConnectionsResult)(nil)).Elem()
}

func (o GetVpcPeeringConnectionsResultOutput) ToOutput(context.Context) pulumix.Output[*GetVpcPeeringConnectionsResult] {
	return pulumix.Output[*GetVpcPeeringConnectionsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetVpcPeeringConnectionsResultOutput) Filters() pulumix.GArrayOutput[GetVpcPeeringConnectionsFilter, GetVpcPeeringConnectionsFilterOutput] {
	value := pulumix.Apply[*GetVpcPeeringConnectionsResult](o, func(v *GetVpcPeeringConnectionsResult) []GetVpcPeeringConnectionsFilter { return v.Filters })
	return pulumix.GArrayOutput[GetVpcPeeringConnectionsFilter, GetVpcPeeringConnectionsFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetVpcPeeringConnectionsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetVpcPeeringConnectionsResult](o, func(v *GetVpcPeeringConnectionsResult) string { return v.Id })
}

func (o GetVpcPeeringConnectionsResultOutput) Ids() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetVpcPeeringConnectionsResult](o, func(v *GetVpcPeeringConnectionsResult) []string { return v.Ids })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetVpcPeeringConnectionsResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetVpcPeeringConnectionsResult](o, func(v *GetVpcPeeringConnectionsResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
