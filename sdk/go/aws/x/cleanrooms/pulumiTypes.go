// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cleanrooms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type CollaborationDataEncryptionMetadata struct {
	AllowClearText                        bool `pulumi:"allowClearText"`
	AllowDuplicates                       bool `pulumi:"allowDuplicates"`
	AllowJoinsOnColumnsWithDifferentNames bool `pulumi:"allowJoinsOnColumnsWithDifferentNames"`
	PreserveNulls                         bool `pulumi:"preserveNulls"`
}

type CollaborationDataEncryptionMetadataArgs struct {
	AllowClearText                        pulumix.Input[bool] `pulumi:"allowClearText"`
	AllowDuplicates                       pulumix.Input[bool] `pulumi:"allowDuplicates"`
	AllowJoinsOnColumnsWithDifferentNames pulumix.Input[bool] `pulumi:"allowJoinsOnColumnsWithDifferentNames"`
	PreserveNulls                         pulumix.Input[bool] `pulumi:"preserveNulls"`
}

func (CollaborationDataEncryptionMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationDataEncryptionMetadata)(nil)).Elem()
}

func (i CollaborationDataEncryptionMetadataArgs) ToCollaborationDataEncryptionMetadataOutput() CollaborationDataEncryptionMetadataOutput {
	return i.ToCollaborationDataEncryptionMetadataOutputWithContext(context.Background())
}

func (i CollaborationDataEncryptionMetadataArgs) ToCollaborationDataEncryptionMetadataOutputWithContext(ctx context.Context) CollaborationDataEncryptionMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationDataEncryptionMetadataOutput)
}

func (i *CollaborationDataEncryptionMetadataArgs) ToOutput(ctx context.Context) pulumix.Output[*CollaborationDataEncryptionMetadataArgs] {
	return pulumix.Val(i)
}

type CollaborationDataEncryptionMetadataOutput struct{ *pulumi.OutputState }

func (CollaborationDataEncryptionMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationDataEncryptionMetadata)(nil)).Elem()
}

func (o CollaborationDataEncryptionMetadataOutput) ToCollaborationDataEncryptionMetadataOutput() CollaborationDataEncryptionMetadataOutput {
	return o
}

func (o CollaborationDataEncryptionMetadataOutput) ToCollaborationDataEncryptionMetadataOutputWithContext(ctx context.Context) CollaborationDataEncryptionMetadataOutput {
	return o
}

func (o CollaborationDataEncryptionMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[CollaborationDataEncryptionMetadata] {
	return pulumix.Output[CollaborationDataEncryptionMetadata]{
		OutputState: o.OutputState,
	}
}

func (o CollaborationDataEncryptionMetadataOutput) AllowClearText() pulumix.Output[bool] {
	return pulumix.Apply[CollaborationDataEncryptionMetadata](o, func(v CollaborationDataEncryptionMetadata) bool { return v.AllowClearText })
}

func (o CollaborationDataEncryptionMetadataOutput) AllowDuplicates() pulumix.Output[bool] {
	return pulumix.Apply[CollaborationDataEncryptionMetadata](o, func(v CollaborationDataEncryptionMetadata) bool { return v.AllowDuplicates })
}

func (o CollaborationDataEncryptionMetadataOutput) AllowJoinsOnColumnsWithDifferentNames() pulumix.Output[bool] {
	return pulumix.Apply[CollaborationDataEncryptionMetadata](o, func(v CollaborationDataEncryptionMetadata) bool { return v.AllowJoinsOnColumnsWithDifferentNames })
}

func (o CollaborationDataEncryptionMetadataOutput) PreserveNulls() pulumix.Output[bool] {
	return pulumix.Apply[CollaborationDataEncryptionMetadata](o, func(v CollaborationDataEncryptionMetadata) bool { return v.PreserveNulls })
}

type CollaborationMember struct {
	AccountId       string   `pulumi:"accountId"`
	DisplayName     string   `pulumi:"displayName"`
	MemberAbilities []string `pulumi:"memberAbilities"`
	Status          *string  `pulumi:"status"`
}

type CollaborationMemberArgs struct {
	AccountId       pulumix.Input[string]   `pulumi:"accountId"`
	DisplayName     pulumix.Input[string]   `pulumi:"displayName"`
	MemberAbilities pulumix.Input[[]string] `pulumi:"memberAbilities"`
	Status          pulumix.Input[*string]  `pulumi:"status"`
}

func (CollaborationMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationMember)(nil)).Elem()
}

func (i CollaborationMemberArgs) ToCollaborationMemberOutput() CollaborationMemberOutput {
	return i.ToCollaborationMemberOutputWithContext(context.Background())
}

func (i CollaborationMemberArgs) ToCollaborationMemberOutputWithContext(ctx context.Context) CollaborationMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationMemberOutput)
}

func (i *CollaborationMemberArgs) ToOutput(ctx context.Context) pulumix.Output[*CollaborationMemberArgs] {
	return pulumix.Val(i)
}

type CollaborationMemberOutput struct{ *pulumi.OutputState }

func (CollaborationMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationMember)(nil)).Elem()
}

func (o CollaborationMemberOutput) ToCollaborationMemberOutput() CollaborationMemberOutput {
	return o
}

func (o CollaborationMemberOutput) ToCollaborationMemberOutputWithContext(ctx context.Context) CollaborationMemberOutput {
	return o
}

func (o CollaborationMemberOutput) ToOutput(ctx context.Context) pulumix.Output[CollaborationMember] {
	return pulumix.Output[CollaborationMember]{
		OutputState: o.OutputState,
	}
}

func (o CollaborationMemberOutput) AccountId() pulumix.Output[string] {
	return pulumix.Apply[CollaborationMember](o, func(v CollaborationMember) string { return v.AccountId })
}

func (o CollaborationMemberOutput) DisplayName() pulumix.Output[string] {
	return pulumix.Apply[CollaborationMember](o, func(v CollaborationMember) string { return v.DisplayName })
}

func (o CollaborationMemberOutput) MemberAbilities() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CollaborationMember](o, func(v CollaborationMember) []string { return v.MemberAbilities })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o CollaborationMemberOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[CollaborationMember](o, func(v CollaborationMember) *string { return v.Status })
}

func init() {
	pulumi.RegisterOutputType(CollaborationDataEncryptionMetadataOutput{})
	pulumi.RegisterOutputType(CollaborationMemberOutput{})
}
