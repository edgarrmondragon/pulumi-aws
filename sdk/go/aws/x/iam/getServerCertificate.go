// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to lookup information about IAM Server Certificates.
func LookupServerCertificate(ctx *pulumi.Context, args *LookupServerCertificateArgs, opts ...pulumi.InvokeOption) (*LookupServerCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServerCertificateResult
	err := ctx.Invoke("aws:iam/getServerCertificate:getServerCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServerCertificate.
type LookupServerCertificateArgs struct {
	// sort results by expiration date. returns the certificate with expiration date in furthest in the future.
	Latest *bool `pulumi:"latest"`
	// exact name of the cert to lookup
	Name *string `pulumi:"name"`
	// prefix of cert to filter by
	NamePrefix *string `pulumi:"namePrefix"`
	// prefix of path to filter by
	PathPrefix *string `pulumi:"pathPrefix"`
}

// A collection of values returned by getServerCertificate.
type LookupServerCertificateResult struct {
	// is set to the ARN of the IAM Server Certificate
	Arn string `pulumi:"arn"`
	// is the public key certificate (PEM-encoded). This is useful when [configuring back-end instance authentication](http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-create-https-ssl-load-balancer.html) policy for load balancer
	CertificateBody string `pulumi:"certificateBody"`
	// is the public key certificate chain (PEM-encoded) if exists, empty otherwise
	CertificateChain string `pulumi:"certificateChain"`
	// is set to the expiration date of the IAM Server Certificate
	ExpirationDate string `pulumi:"expirationDate"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	Latest     *bool   `pulumi:"latest"`
	Name       string  `pulumi:"name"`
	NamePrefix *string `pulumi:"namePrefix"`
	// is set to the path of the IAM Server Certificate
	Path       string  `pulumi:"path"`
	PathPrefix *string `pulumi:"pathPrefix"`
	// is the date when the server certificate was uploaded
	UploadDate string `pulumi:"uploadDate"`
}

func LookupServerCertificateOutput(ctx *pulumi.Context, args LookupServerCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupServerCertificateResultOutput {
	outputResult := pulumix.ApplyErr[*LookupServerCertificateArgs](args.ToOutput(), func(plainArgs *LookupServerCertificateArgs) (*LookupServerCertificateResult, error) {
		return LookupServerCertificate(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupServerCertificateResultOutput, *LookupServerCertificateResult](outputResult)
}

// A collection of arguments for invoking getServerCertificate.
type LookupServerCertificateOutputArgs struct {
	// sort results by expiration date. returns the certificate with expiration date in furthest in the future.
	Latest pulumix.Input[*bool] `pulumi:"latest"`
	// exact name of the cert to lookup
	Name pulumix.Input[*string] `pulumi:"name"`
	// prefix of cert to filter by
	NamePrefix pulumix.Input[*string] `pulumi:"namePrefix"`
	// prefix of path to filter by
	PathPrefix pulumix.Input[*string] `pulumi:"pathPrefix"`
}

func (args LookupServerCertificateOutputArgs) ToOutput() pulumix.Output[*LookupServerCertificateArgs] {
	allArgs := pulumix.All(
		args.Latest.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.NamePrefix.ToOutput(context.Background()).AsAny(),
		args.PathPrefix.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupServerCertificateArgs {
		return &LookupServerCertificateArgs{
			Latest:     resolvedArgs[0].(*bool),
			Name:       resolvedArgs[1].(*string),
			NamePrefix: resolvedArgs[2].(*string),
			PathPrefix: resolvedArgs[3].(*string),
		}
	})
}

type LookupServerCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupServerCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerCertificateResult)(nil)).Elem()
}

func (o LookupServerCertificateResultOutput) ToOutput(context.Context) pulumix.Output[*LookupServerCertificateResult] {
	return pulumix.Output[*LookupServerCertificateResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupServerCertificateResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerCertificateResult](o, func(v *LookupServerCertificateResult) string { return v.Arn })
}

func (o LookupServerCertificateResultOutput) CertificateBody() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerCertificateResult](o, func(v *LookupServerCertificateResult) string { return v.CertificateBody })
}

func (o LookupServerCertificateResultOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerCertificateResult](o, func(v *LookupServerCertificateResult) string { return v.CertificateChain })
}

func (o LookupServerCertificateResultOutput) ExpirationDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerCertificateResult](o, func(v *LookupServerCertificateResult) string { return v.ExpirationDate })
}

func (o LookupServerCertificateResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerCertificateResult](o, func(v *LookupServerCertificateResult) string { return v.Id })
}

func (o LookupServerCertificateResultOutput) Latest() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupServerCertificateResult](o, func(v *LookupServerCertificateResult) *bool { return v.Latest })
}

func (o LookupServerCertificateResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerCertificateResult](o, func(v *LookupServerCertificateResult) string { return v.Name })
}

func (o LookupServerCertificateResultOutput) NamePrefix() pulumix.Output[*string] {
	return pulumix.Apply[*LookupServerCertificateResult](o, func(v *LookupServerCertificateResult) *string { return v.NamePrefix })
}

func (o LookupServerCertificateResultOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerCertificateResult](o, func(v *LookupServerCertificateResult) string { return v.Path })
}

func (o LookupServerCertificateResultOutput) PathPrefix() pulumix.Output[*string] {
	return pulumix.Apply[*LookupServerCertificateResult](o, func(v *LookupServerCertificateResult) *string { return v.PathPrefix })
}

func (o LookupServerCertificateResultOutput) UploadDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerCertificateResult](o, func(v *LookupServerCertificateResult) string { return v.UploadDate })
}
