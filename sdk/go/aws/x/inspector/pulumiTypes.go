// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inspector

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AssessmentTemplateEventSubscription struct {
	// The event for which you want to receive SNS notifications. Valid values are `ASSESSMENT_RUN_STARTED`, `ASSESSMENT_RUN_COMPLETED`, `ASSESSMENT_RUN_STATE_CHANGED`, and `FINDING_REPORTED`.
	Event string `pulumi:"event"`
	// The ARN of the SNS topic to which notifications are sent.
	TopicArn string `pulumi:"topicArn"`
}

type AssessmentTemplateEventSubscriptionArgs struct {
	// The event for which you want to receive SNS notifications. Valid values are `ASSESSMENT_RUN_STARTED`, `ASSESSMENT_RUN_COMPLETED`, `ASSESSMENT_RUN_STATE_CHANGED`, and `FINDING_REPORTED`.
	Event pulumix.Input[string] `pulumi:"event"`
	// The ARN of the SNS topic to which notifications are sent.
	TopicArn pulumix.Input[string] `pulumi:"topicArn"`
}

func (AssessmentTemplateEventSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentTemplateEventSubscription)(nil)).Elem()
}

func (i AssessmentTemplateEventSubscriptionArgs) ToAssessmentTemplateEventSubscriptionOutput() AssessmentTemplateEventSubscriptionOutput {
	return i.ToAssessmentTemplateEventSubscriptionOutputWithContext(context.Background())
}

func (i AssessmentTemplateEventSubscriptionArgs) ToAssessmentTemplateEventSubscriptionOutputWithContext(ctx context.Context) AssessmentTemplateEventSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentTemplateEventSubscriptionOutput)
}

func (i *AssessmentTemplateEventSubscriptionArgs) ToOutput(ctx context.Context) pulumix.Output[*AssessmentTemplateEventSubscriptionArgs] {
	return pulumix.Val(i)
}

type AssessmentTemplateEventSubscriptionOutput struct{ *pulumi.OutputState }

func (AssessmentTemplateEventSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentTemplateEventSubscription)(nil)).Elem()
}

func (o AssessmentTemplateEventSubscriptionOutput) ToAssessmentTemplateEventSubscriptionOutput() AssessmentTemplateEventSubscriptionOutput {
	return o
}

func (o AssessmentTemplateEventSubscriptionOutput) ToAssessmentTemplateEventSubscriptionOutputWithContext(ctx context.Context) AssessmentTemplateEventSubscriptionOutput {
	return o
}

func (o AssessmentTemplateEventSubscriptionOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentTemplateEventSubscription] {
	return pulumix.Output[AssessmentTemplateEventSubscription]{
		OutputState: o.OutputState,
	}
}

// The event for which you want to receive SNS notifications. Valid values are `ASSESSMENT_RUN_STARTED`, `ASSESSMENT_RUN_COMPLETED`, `ASSESSMENT_RUN_STATE_CHANGED`, and `FINDING_REPORTED`.
func (o AssessmentTemplateEventSubscriptionOutput) Event() pulumix.Output[string] {
	return pulumix.Apply[AssessmentTemplateEventSubscription](o, func(v AssessmentTemplateEventSubscription) string { return v.Event })
}

// The ARN of the SNS topic to which notifications are sent.
func (o AssessmentTemplateEventSubscriptionOutput) TopicArn() pulumix.Output[string] {
	return pulumix.Apply[AssessmentTemplateEventSubscription](o, func(v AssessmentTemplateEventSubscription) string { return v.TopicArn })
}

func init() {
	pulumi.RegisterOutputType(AssessmentTemplateEventSubscriptionOutput{})
}
