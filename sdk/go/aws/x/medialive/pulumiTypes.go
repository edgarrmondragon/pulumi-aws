// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ChannelCdiInputSpecification struct {
	// Maximum CDI input resolution.
	Resolution string `pulumi:"resolution"`
}

type ChannelCdiInputSpecificationArgs struct {
	// Maximum CDI input resolution.
	Resolution pulumix.Input[string] `pulumi:"resolution"`
}

func (ChannelCdiInputSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelCdiInputSpecification)(nil)).Elem()
}

func (i ChannelCdiInputSpecificationArgs) ToChannelCdiInputSpecificationOutput() ChannelCdiInputSpecificationOutput {
	return i.ToChannelCdiInputSpecificationOutputWithContext(context.Background())
}

func (i ChannelCdiInputSpecificationArgs) ToChannelCdiInputSpecificationOutputWithContext(ctx context.Context) ChannelCdiInputSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelCdiInputSpecificationOutput)
}

func (i *ChannelCdiInputSpecificationArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelCdiInputSpecificationArgs] {
	return pulumix.Val(i)
}

type ChannelCdiInputSpecificationOutput struct{ *pulumi.OutputState }

func (ChannelCdiInputSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelCdiInputSpecification)(nil)).Elem()
}

func (o ChannelCdiInputSpecificationOutput) ToChannelCdiInputSpecificationOutput() ChannelCdiInputSpecificationOutput {
	return o
}

func (o ChannelCdiInputSpecificationOutput) ToChannelCdiInputSpecificationOutputWithContext(ctx context.Context) ChannelCdiInputSpecificationOutput {
	return o
}

func (o ChannelCdiInputSpecificationOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelCdiInputSpecification] {
	return pulumix.Output[ChannelCdiInputSpecification]{
		OutputState: o.OutputState,
	}
}

// Maximum CDI input resolution.
func (o ChannelCdiInputSpecificationOutput) Resolution() pulumix.Output[string] {
	return pulumix.Apply[ChannelCdiInputSpecification](o, func(v ChannelCdiInputSpecification) string { return v.Resolution })
}

type ChannelDestination struct {
	// User-specified id. Ths is used in an output group or an output.
	Id string `pulumi:"id"`
	// Destination settings for a MediaPackage output; one destination for both encoders. See Media Package Settings for more details.
	MediaPackageSettings []ChannelDestinationMediaPackageSetting `pulumi:"mediaPackageSettings"`
	// Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
	MultiplexSettings *ChannelDestinationMultiplexSettings `pulumi:"multiplexSettings"`
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	Settings []ChannelDestinationSetting `pulumi:"settings"`
}

type ChannelDestinationArgs struct {
	// User-specified id. Ths is used in an output group or an output.
	Id pulumix.Input[string] `pulumi:"id"`
	// Destination settings for a MediaPackage output; one destination for both encoders. See Media Package Settings for more details.
	MediaPackageSettings pulumix.Input[[]*ChannelDestinationMediaPackageSettingArgs] `pulumi:"mediaPackageSettings"`
	// Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
	MultiplexSettings pulumix.Input[*ChannelDestinationMultiplexSettingsArgs] `pulumi:"multiplexSettings"`
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	Settings pulumix.Input[[]*ChannelDestinationSettingArgs] `pulumi:"settings"`
}

func (ChannelDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelDestination)(nil)).Elem()
}

func (i ChannelDestinationArgs) ToChannelDestinationOutput() ChannelDestinationOutput {
	return i.ToChannelDestinationOutputWithContext(context.Background())
}

func (i ChannelDestinationArgs) ToChannelDestinationOutputWithContext(ctx context.Context) ChannelDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelDestinationOutput)
}

func (i *ChannelDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelDestinationArgs] {
	return pulumix.Val(i)
}

type ChannelDestinationOutput struct{ *pulumi.OutputState }

func (ChannelDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelDestination)(nil)).Elem()
}

func (o ChannelDestinationOutput) ToChannelDestinationOutput() ChannelDestinationOutput {
	return o
}

func (o ChannelDestinationOutput) ToChannelDestinationOutputWithContext(ctx context.Context) ChannelDestinationOutput {
	return o
}

func (o ChannelDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelDestination] {
	return pulumix.Output[ChannelDestination]{
		OutputState: o.OutputState,
	}
}

// User-specified id. Ths is used in an output group or an output.
func (o ChannelDestinationOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[ChannelDestination](o, func(v ChannelDestination) string { return v.Id })
}

// Destination settings for a MediaPackage output; one destination for both encoders. See Media Package Settings for more details.
func (o ChannelDestinationOutput) MediaPackageSettings() pulumix.GArrayOutput[ChannelDestinationMediaPackageSetting, ChannelDestinationMediaPackageSettingOutput] {
	value := pulumix.Apply[ChannelDestination](o, func(v ChannelDestination) []ChannelDestinationMediaPackageSetting { return v.MediaPackageSettings })
	return pulumix.GArrayOutput[ChannelDestinationMediaPackageSetting, ChannelDestinationMediaPackageSettingOutput]{OutputState: value.OutputState}
}

// Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
func (o ChannelDestinationOutput) MultiplexSettings() pulumix.GPtrOutput[ChannelDestinationMultiplexSettings, ChannelDestinationMultiplexSettingsOutput] {
	value := pulumix.Apply[ChannelDestination](o, func(v ChannelDestination) *ChannelDestinationMultiplexSettings { return v.MultiplexSettings })
	return pulumix.GPtrOutput[ChannelDestinationMultiplexSettings, ChannelDestinationMultiplexSettingsOutput]{OutputState: value.OutputState}
}

// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
func (o ChannelDestinationOutput) Settings() pulumix.GArrayOutput[ChannelDestinationSetting, ChannelDestinationSettingOutput] {
	value := pulumix.Apply[ChannelDestination](o, func(v ChannelDestination) []ChannelDestinationSetting { return v.Settings })
	return pulumix.GArrayOutput[ChannelDestinationSetting, ChannelDestinationSettingOutput]{OutputState: value.OutputState}
}

type ChannelDestinationMediaPackageSetting struct {
	// ID of the channel in MediaPackage that is the destination for this output group.
	ChannelId string `pulumi:"channelId"`
}

type ChannelDestinationMediaPackageSettingArgs struct {
	// ID of the channel in MediaPackage that is the destination for this output group.
	ChannelId pulumix.Input[string] `pulumi:"channelId"`
}

func (ChannelDestinationMediaPackageSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelDestinationMediaPackageSetting)(nil)).Elem()
}

func (i ChannelDestinationMediaPackageSettingArgs) ToChannelDestinationMediaPackageSettingOutput() ChannelDestinationMediaPackageSettingOutput {
	return i.ToChannelDestinationMediaPackageSettingOutputWithContext(context.Background())
}

func (i ChannelDestinationMediaPackageSettingArgs) ToChannelDestinationMediaPackageSettingOutputWithContext(ctx context.Context) ChannelDestinationMediaPackageSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelDestinationMediaPackageSettingOutput)
}

func (i *ChannelDestinationMediaPackageSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelDestinationMediaPackageSettingArgs] {
	return pulumix.Val(i)
}

type ChannelDestinationMediaPackageSettingOutput struct{ *pulumi.OutputState }

func (ChannelDestinationMediaPackageSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelDestinationMediaPackageSetting)(nil)).Elem()
}

func (o ChannelDestinationMediaPackageSettingOutput) ToChannelDestinationMediaPackageSettingOutput() ChannelDestinationMediaPackageSettingOutput {
	return o
}

func (o ChannelDestinationMediaPackageSettingOutput) ToChannelDestinationMediaPackageSettingOutputWithContext(ctx context.Context) ChannelDestinationMediaPackageSettingOutput {
	return o
}

func (o ChannelDestinationMediaPackageSettingOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelDestinationMediaPackageSetting] {
	return pulumix.Output[ChannelDestinationMediaPackageSetting]{
		OutputState: o.OutputState,
	}
}

// ID of the channel in MediaPackage that is the destination for this output group.
func (o ChannelDestinationMediaPackageSettingOutput) ChannelId() pulumix.Output[string] {
	return pulumix.Apply[ChannelDestinationMediaPackageSetting](o, func(v ChannelDestinationMediaPackageSetting) string { return v.ChannelId })
}

type ChannelDestinationMultiplexSettings struct {
	// The ID of the Multiplex that the encoder is providing output to.
	MultiplexId string `pulumi:"multiplexId"`
	// The program name of the Multiplex program that the encoder is providing output to.
	ProgramName string `pulumi:"programName"`
}

type ChannelDestinationMultiplexSettingsArgs struct {
	// The ID of the Multiplex that the encoder is providing output to.
	MultiplexId pulumix.Input[string] `pulumi:"multiplexId"`
	// The program name of the Multiplex program that the encoder is providing output to.
	ProgramName pulumix.Input[string] `pulumi:"programName"`
}

func (ChannelDestinationMultiplexSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelDestinationMultiplexSettings)(nil)).Elem()
}

func (i ChannelDestinationMultiplexSettingsArgs) ToChannelDestinationMultiplexSettingsOutput() ChannelDestinationMultiplexSettingsOutput {
	return i.ToChannelDestinationMultiplexSettingsOutputWithContext(context.Background())
}

func (i ChannelDestinationMultiplexSettingsArgs) ToChannelDestinationMultiplexSettingsOutputWithContext(ctx context.Context) ChannelDestinationMultiplexSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelDestinationMultiplexSettingsOutput)
}

func (i *ChannelDestinationMultiplexSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelDestinationMultiplexSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelDestinationMultiplexSettingsOutput struct{ *pulumi.OutputState }

func (ChannelDestinationMultiplexSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelDestinationMultiplexSettings)(nil)).Elem()
}

func (o ChannelDestinationMultiplexSettingsOutput) ToChannelDestinationMultiplexSettingsOutput() ChannelDestinationMultiplexSettingsOutput {
	return o
}

func (o ChannelDestinationMultiplexSettingsOutput) ToChannelDestinationMultiplexSettingsOutputWithContext(ctx context.Context) ChannelDestinationMultiplexSettingsOutput {
	return o
}

func (o ChannelDestinationMultiplexSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelDestinationMultiplexSettings] {
	return pulumix.Output[ChannelDestinationMultiplexSettings]{
		OutputState: o.OutputState,
	}
}

// The ID of the Multiplex that the encoder is providing output to.
func (o ChannelDestinationMultiplexSettingsOutput) MultiplexId() pulumix.Output[string] {
	return pulumix.Apply[ChannelDestinationMultiplexSettings](o, func(v ChannelDestinationMultiplexSettings) string { return v.MultiplexId })
}

// The program name of the Multiplex program that the encoder is providing output to.
func (o ChannelDestinationMultiplexSettingsOutput) ProgramName() pulumix.Output[string] {
	return pulumix.Apply[ChannelDestinationMultiplexSettings](o, func(v ChannelDestinationMultiplexSettings) string { return v.ProgramName })
}

type ChannelDestinationSetting struct {
	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `pulumi:"passwordParam"`
	// Stream name RTMP destinations (URLs of type rtmp://)
	StreamName *string `pulumi:"streamName"`
	// A URL specifying a destination.
	Url *string `pulumi:"url"`
	// Username for destination.
	Username *string `pulumi:"username"`
}

type ChannelDestinationSettingArgs struct {
	// Key used to extract the password from EC2 Parameter store.
	PasswordParam pulumix.Input[*string] `pulumi:"passwordParam"`
	// Stream name RTMP destinations (URLs of type rtmp://)
	StreamName pulumix.Input[*string] `pulumi:"streamName"`
	// A URL specifying a destination.
	Url pulumix.Input[*string] `pulumi:"url"`
	// Username for destination.
	Username pulumix.Input[*string] `pulumi:"username"`
}

func (ChannelDestinationSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelDestinationSetting)(nil)).Elem()
}

func (i ChannelDestinationSettingArgs) ToChannelDestinationSettingOutput() ChannelDestinationSettingOutput {
	return i.ToChannelDestinationSettingOutputWithContext(context.Background())
}

func (i ChannelDestinationSettingArgs) ToChannelDestinationSettingOutputWithContext(ctx context.Context) ChannelDestinationSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelDestinationSettingOutput)
}

func (i *ChannelDestinationSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelDestinationSettingArgs] {
	return pulumix.Val(i)
}

type ChannelDestinationSettingOutput struct{ *pulumi.OutputState }

func (ChannelDestinationSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelDestinationSetting)(nil)).Elem()
}

func (o ChannelDestinationSettingOutput) ToChannelDestinationSettingOutput() ChannelDestinationSettingOutput {
	return o
}

func (o ChannelDestinationSettingOutput) ToChannelDestinationSettingOutputWithContext(ctx context.Context) ChannelDestinationSettingOutput {
	return o
}

func (o ChannelDestinationSettingOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelDestinationSetting] {
	return pulumix.Output[ChannelDestinationSetting]{
		OutputState: o.OutputState,
	}
}

// Key used to extract the password from EC2 Parameter store.
func (o ChannelDestinationSettingOutput) PasswordParam() pulumix.Output[*string] {
	return pulumix.Apply[ChannelDestinationSetting](o, func(v ChannelDestinationSetting) *string { return v.PasswordParam })
}

// Stream name RTMP destinations (URLs of type rtmp://)
func (o ChannelDestinationSettingOutput) StreamName() pulumix.Output[*string] {
	return pulumix.Apply[ChannelDestinationSetting](o, func(v ChannelDestinationSetting) *string { return v.StreamName })
}

// A URL specifying a destination.
func (o ChannelDestinationSettingOutput) Url() pulumix.Output[*string] {
	return pulumix.Apply[ChannelDestinationSetting](o, func(v ChannelDestinationSetting) *string { return v.Url })
}

// Username for destination.
func (o ChannelDestinationSettingOutput) Username() pulumix.Output[*string] {
	return pulumix.Apply[ChannelDestinationSetting](o, func(v ChannelDestinationSetting) *string { return v.Username })
}

type ChannelEncoderSettings struct {
	// Audio descriptions for the channel. See Audio Descriptions for more details.
	AudioDescriptions []ChannelEncoderSettingsAudioDescription `pulumi:"audioDescriptions"`
	// Settings for ad avail blanking. See Avail Blanking for more details.
	AvailBlanking *ChannelEncoderSettingsAvailBlanking `pulumi:"availBlanking"`
	// Caption Descriptions. See Caption Descriptions for more details.
	CaptionDescriptions []ChannelEncoderSettingsCaptionDescription `pulumi:"captionDescriptions"`
	// Configuration settings that apply to the event as a whole. See Global Configuration for more details.
	GlobalConfiguration *ChannelEncoderSettingsGlobalConfiguration `pulumi:"globalConfiguration"`
	// Settings for motion graphics. See Motion Graphics Configuration for more details.
	MotionGraphicsConfiguration *ChannelEncoderSettingsMotionGraphicsConfiguration `pulumi:"motionGraphicsConfiguration"`
	// Nielsen configuration settings. See Nielsen Configuration for more details.
	NielsenConfiguration *ChannelEncoderSettingsNielsenConfiguration `pulumi:"nielsenConfiguration"`
	// Output groups for the channel. See Output Groups for more details.
	OutputGroups []ChannelEncoderSettingsOutputGroup `pulumi:"outputGroups"`
	// Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
	TimecodeConfig ChannelEncoderSettingsTimecodeConfig `pulumi:"timecodeConfig"`
	// Video Descriptions. See Video Descriptions for more details.
	VideoDescriptions []ChannelEncoderSettingsVideoDescription `pulumi:"videoDescriptions"`
}

type ChannelEncoderSettingsArgs struct {
	// Audio descriptions for the channel. See Audio Descriptions for more details.
	AudioDescriptions pulumix.Input[[]*ChannelEncoderSettingsAudioDescriptionArgs] `pulumi:"audioDescriptions"`
	// Settings for ad avail blanking. See Avail Blanking for more details.
	AvailBlanking pulumix.Input[*ChannelEncoderSettingsAvailBlankingArgs] `pulumi:"availBlanking"`
	// Caption Descriptions. See Caption Descriptions for more details.
	CaptionDescriptions pulumix.Input[[]*ChannelEncoderSettingsCaptionDescriptionArgs] `pulumi:"captionDescriptions"`
	// Configuration settings that apply to the event as a whole. See Global Configuration for more details.
	GlobalConfiguration pulumix.Input[*ChannelEncoderSettingsGlobalConfigurationArgs] `pulumi:"globalConfiguration"`
	// Settings for motion graphics. See Motion Graphics Configuration for more details.
	MotionGraphicsConfiguration pulumix.Input[*ChannelEncoderSettingsMotionGraphicsConfigurationArgs] `pulumi:"motionGraphicsConfiguration"`
	// Nielsen configuration settings. See Nielsen Configuration for more details.
	NielsenConfiguration pulumix.Input[*ChannelEncoderSettingsNielsenConfigurationArgs] `pulumi:"nielsenConfiguration"`
	// Output groups for the channel. See Output Groups for more details.
	OutputGroups pulumix.Input[[]*ChannelEncoderSettingsOutputGroupArgs] `pulumi:"outputGroups"`
	// Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
	TimecodeConfig pulumix.Input[*ChannelEncoderSettingsTimecodeConfigArgs] `pulumi:"timecodeConfig"`
	// Video Descriptions. See Video Descriptions for more details.
	VideoDescriptions pulumix.Input[[]*ChannelEncoderSettingsVideoDescriptionArgs] `pulumi:"videoDescriptions"`
}

func (ChannelEncoderSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsArgs) ToChannelEncoderSettingsOutput() ChannelEncoderSettingsOutput {
	return i.ToChannelEncoderSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsArgs) ToChannelEncoderSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutput)
}

func (i *ChannelEncoderSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutput) ToChannelEncoderSettingsOutput() ChannelEncoderSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutput) ToChannelEncoderSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettings] {
	return pulumix.Output[ChannelEncoderSettings]{
		OutputState: o.OutputState,
	}
}

// Audio descriptions for the channel. See Audio Descriptions for more details.
func (o ChannelEncoderSettingsOutput) AudioDescriptions() pulumix.GArrayOutput[ChannelEncoderSettingsAudioDescription, ChannelEncoderSettingsAudioDescriptionOutput] {
	value := pulumix.Apply[ChannelEncoderSettings](o, func(v ChannelEncoderSettings) []ChannelEncoderSettingsAudioDescription { return v.AudioDescriptions })
	return pulumix.GArrayOutput[ChannelEncoderSettingsAudioDescription, ChannelEncoderSettingsAudioDescriptionOutput]{OutputState: value.OutputState}
}

// Settings for ad avail blanking. See Avail Blanking for more details.
func (o ChannelEncoderSettingsOutput) AvailBlanking() pulumix.GPtrOutput[ChannelEncoderSettingsAvailBlanking, ChannelEncoderSettingsAvailBlankingOutput] {
	value := pulumix.Apply[ChannelEncoderSettings](o, func(v ChannelEncoderSettings) *ChannelEncoderSettingsAvailBlanking { return v.AvailBlanking })
	return pulumix.GPtrOutput[ChannelEncoderSettingsAvailBlanking, ChannelEncoderSettingsAvailBlankingOutput]{OutputState: value.OutputState}
}

// Caption Descriptions. See Caption Descriptions for more details.
func (o ChannelEncoderSettingsOutput) CaptionDescriptions() pulumix.GArrayOutput[ChannelEncoderSettingsCaptionDescription, ChannelEncoderSettingsCaptionDescriptionOutput] {
	value := pulumix.Apply[ChannelEncoderSettings](o, func(v ChannelEncoderSettings) []ChannelEncoderSettingsCaptionDescription {
		return v.CaptionDescriptions
	})
	return pulumix.GArrayOutput[ChannelEncoderSettingsCaptionDescription, ChannelEncoderSettingsCaptionDescriptionOutput]{OutputState: value.OutputState}
}

// Configuration settings that apply to the event as a whole. See Global Configuration for more details.
func (o ChannelEncoderSettingsOutput) GlobalConfiguration() pulumix.GPtrOutput[ChannelEncoderSettingsGlobalConfiguration, ChannelEncoderSettingsGlobalConfigurationOutput] {
	value := pulumix.Apply[ChannelEncoderSettings](o, func(v ChannelEncoderSettings) *ChannelEncoderSettingsGlobalConfiguration {
		return v.GlobalConfiguration
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsGlobalConfiguration, ChannelEncoderSettingsGlobalConfigurationOutput]{OutputState: value.OutputState}
}

// Settings for motion graphics. See Motion Graphics Configuration for more details.
func (o ChannelEncoderSettingsOutput) MotionGraphicsConfiguration() pulumix.GPtrOutput[ChannelEncoderSettingsMotionGraphicsConfiguration, ChannelEncoderSettingsMotionGraphicsConfigurationOutput] {
	value := pulumix.Apply[ChannelEncoderSettings](o, func(v ChannelEncoderSettings) *ChannelEncoderSettingsMotionGraphicsConfiguration {
		return v.MotionGraphicsConfiguration
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsMotionGraphicsConfiguration, ChannelEncoderSettingsMotionGraphicsConfigurationOutput]{OutputState: value.OutputState}
}

// Nielsen configuration settings. See Nielsen Configuration for more details.
func (o ChannelEncoderSettingsOutput) NielsenConfiguration() pulumix.GPtrOutput[ChannelEncoderSettingsNielsenConfiguration, ChannelEncoderSettingsNielsenConfigurationOutput] {
	value := pulumix.Apply[ChannelEncoderSettings](o, func(v ChannelEncoderSettings) *ChannelEncoderSettingsNielsenConfiguration {
		return v.NielsenConfiguration
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsNielsenConfiguration, ChannelEncoderSettingsNielsenConfigurationOutput]{OutputState: value.OutputState}
}

// Output groups for the channel. See Output Groups for more details.
func (o ChannelEncoderSettingsOutput) OutputGroups() pulumix.GArrayOutput[ChannelEncoderSettingsOutputGroup, ChannelEncoderSettingsOutputGroupOutput] {
	value := pulumix.Apply[ChannelEncoderSettings](o, func(v ChannelEncoderSettings) []ChannelEncoderSettingsOutputGroup { return v.OutputGroups })
	return pulumix.GArrayOutput[ChannelEncoderSettingsOutputGroup, ChannelEncoderSettingsOutputGroupOutput]{OutputState: value.OutputState}
}

// Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
func (o ChannelEncoderSettingsOutput) TimecodeConfig() pulumix.GPtrOutput[ChannelEncoderSettingsTimecodeConfig, ChannelEncoderSettingsTimecodeConfigOutput] {
	value := pulumix.Apply[ChannelEncoderSettings](o, func(v ChannelEncoderSettings) ChannelEncoderSettingsTimecodeConfig { return v.TimecodeConfig })
	return pulumix.GPtrOutput[ChannelEncoderSettingsTimecodeConfig, ChannelEncoderSettingsTimecodeConfigOutput]{OutputState: value.OutputState}
}

// Video Descriptions. See Video Descriptions for more details.
func (o ChannelEncoderSettingsOutput) VideoDescriptions() pulumix.GArrayOutput[ChannelEncoderSettingsVideoDescription, ChannelEncoderSettingsVideoDescriptionOutput] {
	value := pulumix.Apply[ChannelEncoderSettings](o, func(v ChannelEncoderSettings) []ChannelEncoderSettingsVideoDescription { return v.VideoDescriptions })
	return pulumix.GArrayOutput[ChannelEncoderSettingsVideoDescription, ChannelEncoderSettingsVideoDescriptionOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsAudioDescription struct {
	// Advanced audio normalization settings. See Audio Normalization Settings for more details.
	AudioNormalizationSettings *ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings `pulumi:"audioNormalizationSettings"`
	// The name of the audio selector used as the source for this AudioDescription.
	AudioSelectorName string `pulumi:"audioSelectorName"`
	// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
	AudioType *string `pulumi:"audioType"`
	// Determined how audio type is determined.
	AudioTypeControl *string `pulumi:"audioTypeControl"`
	// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
	AudioWatermarkSettings *ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings `pulumi:"audioWatermarkSettings"`
	// Audio codec settings. See Audio Codec Settings for more details.
	CodecSettings *ChannelEncoderSettingsAudioDescriptionCodecSettings `pulumi:"codecSettings"`
	// Selects a specific three-letter language code from within an audio source.
	LanguageCode        *string `pulumi:"languageCode"`
	LanguageCodeControl *string `pulumi:"languageCodeControl"`
	// The name of this audio description.
	Name          string                                               `pulumi:"name"`
	RemixSettings *ChannelEncoderSettingsAudioDescriptionRemixSettings `pulumi:"remixSettings"`
	// Stream name RTMP destinations (URLs of type rtmp://)
	StreamName *string `pulumi:"streamName"`
}

type ChannelEncoderSettingsAudioDescriptionArgs struct {
	// Advanced audio normalization settings. See Audio Normalization Settings for more details.
	AudioNormalizationSettings pulumix.Input[*ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsArgs] `pulumi:"audioNormalizationSettings"`
	// The name of the audio selector used as the source for this AudioDescription.
	AudioSelectorName pulumix.Input[string] `pulumi:"audioSelectorName"`
	// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
	AudioType pulumix.Input[*string] `pulumi:"audioType"`
	// Determined how audio type is determined.
	AudioTypeControl pulumix.Input[*string] `pulumi:"audioTypeControl"`
	// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
	AudioWatermarkSettings pulumix.Input[*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsArgs] `pulumi:"audioWatermarkSettings"`
	// Audio codec settings. See Audio Codec Settings for more details.
	CodecSettings pulumix.Input[*ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs] `pulumi:"codecSettings"`
	// Selects a specific three-letter language code from within an audio source.
	LanguageCode        pulumix.Input[*string] `pulumi:"languageCode"`
	LanguageCodeControl pulumix.Input[*string] `pulumi:"languageCodeControl"`
	// The name of this audio description.
	Name          pulumix.Input[string]                                                   `pulumi:"name"`
	RemixSettings pulumix.Input[*ChannelEncoderSettingsAudioDescriptionRemixSettingsArgs] `pulumi:"remixSettings"`
	// Stream name RTMP destinations (URLs of type rtmp://)
	StreamName pulumix.Input[*string] `pulumi:"streamName"`
}

func (ChannelEncoderSettingsAudioDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescription)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionArgs) ToChannelEncoderSettingsAudioDescriptionOutput() ChannelEncoderSettingsAudioDescriptionOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionArgs) ToChannelEncoderSettingsAudioDescriptionOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescription)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionOutput) ToChannelEncoderSettingsAudioDescriptionOutput() ChannelEncoderSettingsAudioDescriptionOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionOutput) ToChannelEncoderSettingsAudioDescriptionOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescription] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescription]{
		OutputState: o.OutputState,
	}
}

// Advanced audio normalization settings. See Audio Normalization Settings for more details.
func (o ChannelEncoderSettingsAudioDescriptionOutput) AudioNormalizationSettings() pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings, ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescription](o, func(v ChannelEncoderSettingsAudioDescription) *ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings {
		return v.AudioNormalizationSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings, ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput]{OutputState: value.OutputState}
}

// The name of the audio selector used as the source for this AudioDescription.
func (o ChannelEncoderSettingsAudioDescriptionOutput) AudioSelectorName() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescription](o, func(v ChannelEncoderSettingsAudioDescription) string { return v.AudioSelectorName })
}

// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
func (o ChannelEncoderSettingsAudioDescriptionOutput) AudioType() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescription](o, func(v ChannelEncoderSettingsAudioDescription) *string { return v.AudioType })
}

// Determined how audio type is determined.
func (o ChannelEncoderSettingsAudioDescriptionOutput) AudioTypeControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescription](o, func(v ChannelEncoderSettingsAudioDescription) *string { return v.AudioTypeControl })
}

// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
func (o ChannelEncoderSettingsAudioDescriptionOutput) AudioWatermarkSettings() pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings, ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescription](o, func(v ChannelEncoderSettingsAudioDescription) *ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings {
		return v.AudioWatermarkSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings, ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput]{OutputState: value.OutputState}
}

// Audio codec settings. See Audio Codec Settings for more details.
func (o ChannelEncoderSettingsAudioDescriptionOutput) CodecSettings() pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettings, ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescription](o, func(v ChannelEncoderSettingsAudioDescription) *ChannelEncoderSettingsAudioDescriptionCodecSettings {
		return v.CodecSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettings, ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput]{OutputState: value.OutputState}
}

// Selects a specific three-letter language code from within an audio source.
func (o ChannelEncoderSettingsAudioDescriptionOutput) LanguageCode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescription](o, func(v ChannelEncoderSettingsAudioDescription) *string { return v.LanguageCode })
}

func (o ChannelEncoderSettingsAudioDescriptionOutput) LanguageCodeControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescription](o, func(v ChannelEncoderSettingsAudioDescription) *string { return v.LanguageCodeControl })
}

// The name of this audio description.
func (o ChannelEncoderSettingsAudioDescriptionOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescription](o, func(v ChannelEncoderSettingsAudioDescription) string { return v.Name })
}

func (o ChannelEncoderSettingsAudioDescriptionOutput) RemixSettings() pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionRemixSettings, ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescription](o, func(v ChannelEncoderSettingsAudioDescription) *ChannelEncoderSettingsAudioDescriptionRemixSettings {
		return v.RemixSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionRemixSettings, ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput]{OutputState: value.OutputState}
}

// Stream name RTMP destinations (URLs of type rtmp://)
func (o ChannelEncoderSettingsAudioDescriptionOutput) StreamName() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescription](o, func(v ChannelEncoderSettingsAudioDescription) *string { return v.StreamName })
}

type ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings struct {
	// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 to the EBU R-128 specification.
	Algorithm *string `pulumi:"algorithm"`
	// Algorithm control for the audio description.
	AlgorithmControl *string `pulumi:"algorithmControl"`
	// Target LKFS (loudness) to adjust volume to.
	TargetLkfs *float64 `pulumi:"targetLkfs"`
}

type ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsArgs struct {
	// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 to the EBU R-128 specification.
	Algorithm pulumix.Input[*string] `pulumi:"algorithm"`
	// Algorithm control for the audio description.
	AlgorithmControl pulumix.Input[*string] `pulumi:"algorithmControl"`
	// Target LKFS (loudness) to adjust volume to.
	TargetLkfs pulumix.Input[*float64] `pulumi:"targetLkfs"`
}

func (ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsArgs) ToChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput() ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsArgs) ToChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput) ToChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput() ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput) ToChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings]{
		OutputState: o.OutputState,
	}
}

// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 to the EBU R-128 specification.
func (o ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput) Algorithm() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings](o, func(v ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings) *string { return v.Algorithm })
}

// Algorithm control for the audio description.
func (o ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput) AlgorithmControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings](o, func(v ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings) *string {
		return v.AlgorithmControl
	})
}

// Target LKFS (loudness) to adjust volume to.
func (o ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput) TargetLkfs() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings](o, func(v ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings) *float64 { return v.TargetLkfs })
}

type ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings struct {
	NielsenWatermarksSettings *ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings `pulumi:"nielsenWatermarksSettings"`
}

type ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsArgs struct {
	NielsenWatermarksSettings pulumix.Input[*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsArgs] `pulumi:"nielsenWatermarksSettings"`
}

func (ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsArgs) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput() ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsArgs) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput() ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput) NielsenWatermarksSettings() pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings, ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings](o, func(v ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings) *ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings {
		return v.NielsenWatermarksSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings, ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings struct {
	// Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
	NielsenCbetSettings *ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings `pulumi:"nielsenCbetSettings"`
	// Distribution types to assign to the watermarks. Options are `PROGRAM_CONTENT` and `FINAL_DISTRIBUTOR`.
	NielsenDistributionType *string `pulumi:"nielsenDistributionType"`
	// Used to insert watermarks of type Nielsen NAES, II (N2) and Nielsen NAES VI (NW). See Nielsen NAES II NW Settings for more details.
	NielsenNaesIiNwSettings []ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting `pulumi:"nielsenNaesIiNwSettings"`
}

type ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsArgs struct {
	// Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
	NielsenCbetSettings pulumix.Input[*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsArgs] `pulumi:"nielsenCbetSettings"`
	// Distribution types to assign to the watermarks. Options are `PROGRAM_CONTENT` and `FINAL_DISTRIBUTOR`.
	NielsenDistributionType pulumix.Input[*string] `pulumi:"nielsenDistributionType"`
	// Used to insert watermarks of type Nielsen NAES, II (N2) and Nielsen NAES VI (NW). See Nielsen NAES II NW Settings for more details.
	NielsenNaesIiNwSettings pulumix.Input[[]*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingArgs] `pulumi:"nielsenNaesIiNwSettings"`
}

func (ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsArgs) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput() ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsArgs) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput() ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings]{
		OutputState: o.OutputState,
	}
}

// Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput) NielsenCbetSettings() pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings, ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings](o, func(v ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings) *ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings {
		return v.NielsenCbetSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings, ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput]{OutputState: value.OutputState}
}

// Distribution types to assign to the watermarks. Options are `PROGRAM_CONTENT` and `FINAL_DISTRIBUTOR`.
func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput) NielsenDistributionType() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings](o, func(v ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings) *string {
		return v.NielsenDistributionType
	})
}

// Used to insert watermarks of type Nielsen NAES, II (N2) and Nielsen NAES VI (NW). See Nielsen NAES II NW Settings for more details.
func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput) NielsenNaesIiNwSettings() pulumix.GArrayOutput[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting, ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings](o, func(v ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings) []ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting {
		return v.NielsenNaesIiNwSettings
	})
	return pulumix.GArrayOutput[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting, ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings struct {
	CbetCheckDigitString string `pulumi:"cbetCheckDigitString"`
	// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
	CbetStepaside string `pulumi:"cbetStepaside"`
	// CBET source ID to use in the watermark.
	Csid string `pulumi:"csid"`
}

type ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsArgs struct {
	CbetCheckDigitString pulumix.Input[string] `pulumi:"cbetCheckDigitString"`
	// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
	CbetStepaside pulumix.Input[string] `pulumi:"cbetStepaside"`
	// CBET source ID to use in the watermark.
	Csid pulumix.Input[string] `pulumi:"csid"`
}

func (ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsArgs) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput() ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsArgs) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput() ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput) CbetCheckDigitString() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings](o, func(v ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings) string {
		return v.CbetCheckDigitString
	})
}

// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput) CbetStepaside() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings](o, func(v ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings) string {
		return v.CbetStepaside
	})
}

// CBET source ID to use in the watermark.
func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput) Csid() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings](o, func(v ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings) string {
		return v.Csid
	})
}

type ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting struct {
	CheckDigitString string `pulumi:"checkDigitString"`
	// The Nielsen Source ID to include in the watermark.
	Sid float64 `pulumi:"sid"`
}

type ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingArgs struct {
	CheckDigitString pulumix.Input[string] `pulumi:"checkDigitString"`
	// The Nielsen Source ID to include in the watermark.
	Sid pulumix.Input[float64] `pulumi:"sid"`
}

func (ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingArgs) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput() ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingArgs) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput() ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput) ToChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput) CheckDigitString() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting](o, func(v ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting) string {
		return v.CheckDigitString
	})
}

// The Nielsen Source ID to include in the watermark.
func (o ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput) Sid() pulumix.Output[float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting](o, func(v ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting) float64 {
		return v.Sid
	})
}

type ChannelEncoderSettingsAudioDescriptionCodecSettings struct {
	// Aac Settings. See AAC Settings for more details.
	AacSettings *ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings `pulumi:"aacSettings"`
	// Ac3 Settings. See AC3 Settings for more details.
	Ac3Settings *ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings `pulumi:"ac3Settings"`
	// Eac3 Atmos Settings. See EAC3 Atmos Settings
	Eac3AtmosSettings *ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings `pulumi:"eac3AtmosSettings"`
	// Eac3 Settings. See EAC3 Settings
	Eac3Settings        *ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings        `pulumi:"eac3Settings"`
	Mp2Settings         *ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings         `pulumi:"mp2Settings"`
	PassThroughSettings *ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettings `pulumi:"passThroughSettings"`
	WavSettings         *ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings         `pulumi:"wavSettings"`
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs struct {
	// Aac Settings. See AAC Settings for more details.
	AacSettings pulumix.Input[*ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsArgs] `pulumi:"aacSettings"`
	// Ac3 Settings. See AC3 Settings for more details.
	Ac3Settings pulumix.Input[*ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs] `pulumi:"ac3Settings"`
	// Eac3 Atmos Settings. See EAC3 Atmos Settings
	Eac3AtmosSettings pulumix.Input[*ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs] `pulumi:"eac3AtmosSettings"`
	// Eac3 Settings. See EAC3 Settings
	Eac3Settings        pulumix.Input[*ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs]        `pulumi:"eac3Settings"`
	Mp2Settings         pulumix.Input[*ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs]         `pulumi:"mp2Settings"`
	PassThroughSettings pulumix.Input[*ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsArgs] `pulumi:"passThroughSettings"`
	WavSettings         pulumix.Input[*ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsArgs]         `pulumi:"wavSettings"`
}

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionCodecSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettings] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettings]{
		OutputState: o.OutputState,
	}
}

// Aac Settings. See AAC Settings for more details.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput) AacSettings() pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings, ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettings) *ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings {
		return v.AacSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings, ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput]{OutputState: value.OutputState}
}

// Ac3 Settings. See AC3 Settings for more details.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput) Ac3Settings() pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings, ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettings) *ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings {
		return v.Ac3Settings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings, ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput]{OutputState: value.OutputState}
}

// Eac3 Atmos Settings. See EAC3 Atmos Settings
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput) Eac3AtmosSettings() pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings, ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettings) *ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings {
		return v.Eac3AtmosSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings, ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput]{OutputState: value.OutputState}
}

// Eac3 Settings. See EAC3 Settings
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput) Eac3Settings() pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings, ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettings) *ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings {
		return v.Eac3Settings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings, ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput) Mp2Settings() pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings, ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettings) *ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings {
		return v.Mp2Settings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings, ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput) PassThroughSettings() pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettings, ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettings) *ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettings {
		return v.PassThroughSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettings, ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput) WavSettings() pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings, ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettings) *ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings {
		return v.WavSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings, ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings struct {
	// Average bitrate in bits/second.
	Bitrate *float64 `pulumi:"bitrate"`
	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `pulumi:"codingMode"`
	// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.
	InputType *string `pulumi:"inputType"`
	// AAC profile.
	Profile *string `pulumi:"profile"`
	// The rate control mode.
	RateControlMode *string `pulumi:"rateControlMode"`
	// Sets LATM/LOAS AAC output for raw containers.
	RawFormat *string `pulumi:"rawFormat"`
	// Sample rate in Hz.
	SampleRate *float64 `pulumi:"sampleRate"`
	// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
	Spec *string `pulumi:"spec"`
	// VBR Quality Level - Only used if rateControlMode is VBR.
	VbrQuality *string `pulumi:"vbrQuality"`
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsArgs struct {
	// Average bitrate in bits/second.
	Bitrate pulumix.Input[*float64] `pulumi:"bitrate"`
	// Mono, Stereo, or 5.1 channel layout.
	CodingMode pulumix.Input[*string] `pulumi:"codingMode"`
	// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.
	InputType pulumix.Input[*string] `pulumi:"inputType"`
	// AAC profile.
	Profile pulumix.Input[*string] `pulumi:"profile"`
	// The rate control mode.
	RateControlMode pulumix.Input[*string] `pulumi:"rateControlMode"`
	// Sets LATM/LOAS AAC output for raw containers.
	RawFormat pulumix.Input[*string] `pulumi:"rawFormat"`
	// Sample rate in Hz.
	SampleRate pulumix.Input[*float64] `pulumi:"sampleRate"`
	// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
	Spec pulumix.Input[*string] `pulumi:"spec"`
	// VBR Quality Level - Only used if rateControlMode is VBR.
	VbrQuality pulumix.Input[*string] `pulumi:"vbrQuality"`
}

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings]{
		OutputState: o.OutputState,
	}
}

// Average bitrate in bits/second.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput) Bitrate() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings) *float64 { return v.Bitrate })
}

// Mono, Stereo, or 5.1 channel layout.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput) CodingMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings) *string { return v.CodingMode })
}

// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput) InputType() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings) *string { return v.InputType })
}

// AAC profile.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput) Profile() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings) *string { return v.Profile })
}

// The rate control mode.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput) RateControlMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings) *string {
		return v.RateControlMode
	})
}

// Sets LATM/LOAS AAC output for raw containers.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput) RawFormat() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings) *string { return v.RawFormat })
}

// Sample rate in Hz.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput) SampleRate() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings) *float64 { return v.SampleRate })
}

// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput) Spec() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings) *string { return v.Spec })
}

// VBR Quality Level - Only used if rateControlMode is VBR.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput) VbrQuality() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings) *string { return v.VbrQuality })
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings struct {
	// Average bitrate in bits/second.
	Bitrate *float64 `pulumi:"bitrate"`
	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	BitstreamMode *string `pulumi:"bitstreamMode"`
	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `pulumi:"codingMode"`
	// Sets the dialnorm of the output.
	Dialnorm *int `pulumi:"dialnorm"`
	// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
	DrcProfile *string `pulumi:"drcProfile"`
	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	LfeFilter *string `pulumi:"lfeFilter"`
	// Metadata control.
	MetadataControl *string `pulumi:"metadataControl"`
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs struct {
	// Average bitrate in bits/second.
	Bitrate pulumix.Input[*float64] `pulumi:"bitrate"`
	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	BitstreamMode pulumix.Input[*string] `pulumi:"bitstreamMode"`
	// Mono, Stereo, or 5.1 channel layout.
	CodingMode pulumix.Input[*string] `pulumi:"codingMode"`
	// Sets the dialnorm of the output.
	Dialnorm pulumix.Input[*int] `pulumi:"dialnorm"`
	// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
	DrcProfile pulumix.Input[*string] `pulumi:"drcProfile"`
	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	LfeFilter pulumix.Input[*string] `pulumi:"lfeFilter"`
	// Metadata control.
	MetadataControl pulumix.Input[*string] `pulumi:"metadataControl"`
}

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings]{
		OutputState: o.OutputState,
	}
}

// Average bitrate in bits/second.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput) Bitrate() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings) *float64 { return v.Bitrate })
}

// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput) BitstreamMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings) *string { return v.BitstreamMode })
}

// Mono, Stereo, or 5.1 channel layout.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput) CodingMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings) *string { return v.CodingMode })
}

// Sets the dialnorm of the output.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput) Dialnorm() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings) *int { return v.Dialnorm })
}

// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput) DrcProfile() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings) *string { return v.DrcProfile })
}

// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput) LfeFilter() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings) *string { return v.LfeFilter })
}

// Metadata control.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput) MetadataControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings) *string {
		return v.MetadataControl
	})
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings struct {
	// Average bitrate in bits/second.
	Bitrate *float64 `pulumi:"bitrate"`
	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `pulumi:"codingMode"`
	// Sets the dialnorm of the output.
	Dialnorm *float64 `pulumi:"dialnorm"`
	// Sets the Dolby dynamic range compression profile.
	DrcLine *string `pulumi:"drcLine"`
	// Sets the profile for heavy Dolby dynamic range compression.
	DrcRf *string `pulumi:"drcRf"`
	// Height dimensional trim.
	HeightTrim *float64 `pulumi:"heightTrim"`
	// Surround dimensional trim.
	SurroundTrim *float64 `pulumi:"surroundTrim"`
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs struct {
	// Average bitrate in bits/second.
	Bitrate pulumix.Input[*float64] `pulumi:"bitrate"`
	// Mono, Stereo, or 5.1 channel layout.
	CodingMode pulumix.Input[*string] `pulumi:"codingMode"`
	// Sets the dialnorm of the output.
	Dialnorm pulumix.Input[*float64] `pulumi:"dialnorm"`
	// Sets the Dolby dynamic range compression profile.
	DrcLine pulumix.Input[*string] `pulumi:"drcLine"`
	// Sets the profile for heavy Dolby dynamic range compression.
	DrcRf pulumix.Input[*string] `pulumi:"drcRf"`
	// Height dimensional trim.
	HeightTrim pulumix.Input[*float64] `pulumi:"heightTrim"`
	// Surround dimensional trim.
	SurroundTrim pulumix.Input[*float64] `pulumi:"surroundTrim"`
}

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings]{
		OutputState: o.OutputState,
	}
}

// Average bitrate in bits/second.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput) Bitrate() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings) *float64 {
		return v.Bitrate
	})
}

// Mono, Stereo, or 5.1 channel layout.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput) CodingMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings) *string {
		return v.CodingMode
	})
}

// Sets the dialnorm of the output.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput) Dialnorm() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings) *float64 {
		return v.Dialnorm
	})
}

// Sets the Dolby dynamic range compression profile.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput) DrcLine() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings) *string { return v.DrcLine })
}

// Sets the profile for heavy Dolby dynamic range compression.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput) DrcRf() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings) *string { return v.DrcRf })
}

// Height dimensional trim.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput) HeightTrim() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings) *float64 {
		return v.HeightTrim
	})
}

// Surround dimensional trim.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput) SurroundTrim() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings) *float64 {
		return v.SurroundTrim
	})
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings struct {
	// Sets the attenuation control.
	AttenuationControl *string `pulumi:"attenuationControl"`
	// Average bitrate in bits/second.
	Bitrate *float64 `pulumi:"bitrate"`
	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	BitstreamMode *string `pulumi:"bitstreamMode"`
	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `pulumi:"codingMode"`
	DcFilter   *string `pulumi:"dcFilter"`
	// Sets the dialnorm of the output.
	Dialnorm *int `pulumi:"dialnorm"`
	// Sets the Dolby dynamic range compression profile.
	DrcLine *string `pulumi:"drcLine"`
	// Sets the profile for heavy Dolby dynamic range compression.
	DrcRf      *string `pulumi:"drcRf"`
	LfeControl *string `pulumi:"lfeControl"`
	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	LfeFilter            *string  `pulumi:"lfeFilter"`
	LoRoCenterMixLevel   *float64 `pulumi:"loRoCenterMixLevel"`
	LoRoSurroundMixLevel *float64 `pulumi:"loRoSurroundMixLevel"`
	LtRtCenterMixLevel   *float64 `pulumi:"ltRtCenterMixLevel"`
	LtRtSurroundMixLevel *float64 `pulumi:"ltRtSurroundMixLevel"`
	// Metadata control.
	MetadataControl    *string `pulumi:"metadataControl"`
	PassthroughControl *string `pulumi:"passthroughControl"`
	PhaseControl       *string `pulumi:"phaseControl"`
	StereoDownmix      *string `pulumi:"stereoDownmix"`
	SurroundExMode     *string `pulumi:"surroundExMode"`
	SurroundMode       *string `pulumi:"surroundMode"`
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs struct {
	// Sets the attenuation control.
	AttenuationControl pulumix.Input[*string] `pulumi:"attenuationControl"`
	// Average bitrate in bits/second.
	Bitrate pulumix.Input[*float64] `pulumi:"bitrate"`
	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	BitstreamMode pulumix.Input[*string] `pulumi:"bitstreamMode"`
	// Mono, Stereo, or 5.1 channel layout.
	CodingMode pulumix.Input[*string] `pulumi:"codingMode"`
	DcFilter   pulumix.Input[*string] `pulumi:"dcFilter"`
	// Sets the dialnorm of the output.
	Dialnorm pulumix.Input[*int] `pulumi:"dialnorm"`
	// Sets the Dolby dynamic range compression profile.
	DrcLine pulumix.Input[*string] `pulumi:"drcLine"`
	// Sets the profile for heavy Dolby dynamic range compression.
	DrcRf      pulumix.Input[*string] `pulumi:"drcRf"`
	LfeControl pulumix.Input[*string] `pulumi:"lfeControl"`
	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	LfeFilter            pulumix.Input[*string]  `pulumi:"lfeFilter"`
	LoRoCenterMixLevel   pulumix.Input[*float64] `pulumi:"loRoCenterMixLevel"`
	LoRoSurroundMixLevel pulumix.Input[*float64] `pulumi:"loRoSurroundMixLevel"`
	LtRtCenterMixLevel   pulumix.Input[*float64] `pulumi:"ltRtCenterMixLevel"`
	LtRtSurroundMixLevel pulumix.Input[*float64] `pulumi:"ltRtSurroundMixLevel"`
	// Metadata control.
	MetadataControl    pulumix.Input[*string] `pulumi:"metadataControl"`
	PassthroughControl pulumix.Input[*string] `pulumi:"passthroughControl"`
	PhaseControl       pulumix.Input[*string] `pulumi:"phaseControl"`
	StereoDownmix      pulumix.Input[*string] `pulumi:"stereoDownmix"`
	SurroundExMode     pulumix.Input[*string] `pulumi:"surroundExMode"`
	SurroundMode       pulumix.Input[*string] `pulumi:"surroundMode"`
}

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings]{
		OutputState: o.OutputState,
	}
}

// Sets the attenuation control.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) AttenuationControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *string {
		return v.AttenuationControl
	})
}

// Average bitrate in bits/second.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) Bitrate() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *float64 { return v.Bitrate })
}

// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) BitstreamMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *string {
		return v.BitstreamMode
	})
}

// Mono, Stereo, or 5.1 channel layout.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) CodingMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *string { return v.CodingMode })
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) DcFilter() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *string { return v.DcFilter })
}

// Sets the dialnorm of the output.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) Dialnorm() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *int { return v.Dialnorm })
}

// Sets the Dolby dynamic range compression profile.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) DrcLine() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *string { return v.DrcLine })
}

// Sets the profile for heavy Dolby dynamic range compression.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) DrcRf() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *string { return v.DrcRf })
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) LfeControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *string { return v.LfeControl })
}

// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) LfeFilter() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *string { return v.LfeFilter })
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) LoRoCenterMixLevel() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *float64 {
		return v.LoRoCenterMixLevel
	})
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) LoRoSurroundMixLevel() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *float64 {
		return v.LoRoSurroundMixLevel
	})
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) LtRtCenterMixLevel() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *float64 {
		return v.LtRtCenterMixLevel
	})
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) LtRtSurroundMixLevel() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *float64 {
		return v.LtRtSurroundMixLevel
	})
}

// Metadata control.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) MetadataControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *string {
		return v.MetadataControl
	})
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) PassthroughControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *string {
		return v.PassthroughControl
	})
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) PhaseControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *string { return v.PhaseControl })
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) StereoDownmix() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *string {
		return v.StereoDownmix
	})
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) SurroundExMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *string {
		return v.SurroundExMode
	})
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput) SurroundMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings) *string { return v.SurroundMode })
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings struct {
	// Average bitrate in bits/second.
	Bitrate *float64 `pulumi:"bitrate"`
	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `pulumi:"codingMode"`
	// Sample rate in Hz.
	SampleRate *float64 `pulumi:"sampleRate"`
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs struct {
	// Average bitrate in bits/second.
	Bitrate pulumix.Input[*float64] `pulumi:"bitrate"`
	// Mono, Stereo, or 5.1 channel layout.
	CodingMode pulumix.Input[*string] `pulumi:"codingMode"`
	// Sample rate in Hz.
	SampleRate pulumix.Input[*float64] `pulumi:"sampleRate"`
}

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings]{
		OutputState: o.OutputState,
	}
}

// Average bitrate in bits/second.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput) Bitrate() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings) *float64 { return v.Bitrate })
}

// Mono, Stereo, or 5.1 channel layout.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput) CodingMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings) *string { return v.CodingMode })
}

// Sample rate in Hz.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput) SampleRate() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings) *float64 { return v.SampleRate })
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettings struct {
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsArgs struct {
}

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettings] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings struct {
	BitDepth *float64 `pulumi:"bitDepth"`
	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `pulumi:"codingMode"`
	// Sample rate in Hz.
	SampleRate *float64 `pulumi:"sampleRate"`
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsArgs struct {
	BitDepth pulumix.Input[*float64] `pulumi:"bitDepth"`
	// Mono, Stereo, or 5.1 channel layout.
	CodingMode pulumix.Input[*string] `pulumi:"codingMode"`
	// Sample rate in Hz.
	SampleRate pulumix.Input[*float64] `pulumi:"sampleRate"`
}

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsArgs) ToChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput() ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput) ToChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput) BitDepth() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings) *float64 { return v.BitDepth })
}

// Mono, Stereo, or 5.1 channel layout.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput) CodingMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings) *string { return v.CodingMode })
}

// Sample rate in Hz.
func (o ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput) SampleRate() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings](o, func(v ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings) *float64 { return v.SampleRate })
}

type ChannelEncoderSettingsAudioDescriptionRemixSettings struct {
	ChannelMappings []ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping `pulumi:"channelMappings"`
	ChannelsIn      *int                                                                `pulumi:"channelsIn"`
	ChannelsOut     *int                                                                `pulumi:"channelsOut"`
}

type ChannelEncoderSettingsAudioDescriptionRemixSettingsArgs struct {
	ChannelMappings pulumix.Input[[]*ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingArgs] `pulumi:"channelMappings"`
	ChannelsIn      pulumix.Input[*int]                                                                     `pulumi:"channelsIn"`
	ChannelsOut     pulumix.Input[*int]                                                                     `pulumi:"channelsOut"`
}

func (ChannelEncoderSettingsAudioDescriptionRemixSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionRemixSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionRemixSettingsArgs) ToChannelEncoderSettingsAudioDescriptionRemixSettingsOutput() ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionRemixSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionRemixSettingsArgs) ToChannelEncoderSettingsAudioDescriptionRemixSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionRemixSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionRemixSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionRemixSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput) ToChannelEncoderSettingsAudioDescriptionRemixSettingsOutput() ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput) ToChannelEncoderSettingsAudioDescriptionRemixSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionRemixSettings] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionRemixSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput) ChannelMappings() pulumix.GArrayOutput[ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping, ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescriptionRemixSettings](o, func(v ChannelEncoderSettingsAudioDescriptionRemixSettings) []ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping {
		return v.ChannelMappings
	})
	return pulumix.GArrayOutput[ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping, ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput) ChannelsIn() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionRemixSettings](o, func(v ChannelEncoderSettingsAudioDescriptionRemixSettings) *int { return v.ChannelsIn })
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput) ChannelsOut() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionRemixSettings](o, func(v ChannelEncoderSettingsAudioDescriptionRemixSettings) *int { return v.ChannelsOut })
}

type ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping struct {
	InputChannelLevels []ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel `pulumi:"inputChannelLevels"`
	OutputChannel      int                                                                                  `pulumi:"outputChannel"`
}

type ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingArgs struct {
	InputChannelLevels pulumix.Input[[]*ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelArgs] `pulumi:"inputChannelLevels"`
	OutputChannel      pulumix.Input[int]                                                                                       `pulumi:"outputChannel"`
}

func (ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingArgs) ToChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput() ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingArgs) ToChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput) ToChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput() ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput) ToChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput) InputChannelLevels() pulumix.GArrayOutput[ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel, ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping](o, func(v ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping) []ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel {
		return v.InputChannelLevels
	})
	return pulumix.GArrayOutput[ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel, ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput) OutputChannel() pulumix.Output[int] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping](o, func(v ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping) int { return v.OutputChannel })
}

type ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel struct {
	Gain         int `pulumi:"gain"`
	InputChannel int `pulumi:"inputChannel"`
}

type ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelArgs struct {
	Gain         pulumix.Input[int] `pulumi:"gain"`
	InputChannel pulumix.Input[int] `pulumi:"inputChannel"`
}

func (ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel)(nil)).Elem()
}

func (i ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelArgs) ToChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput() ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput {
	return i.ToChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelArgs) ToChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput)
}

func (i *ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel)(nil)).Elem()
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput) ToChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput() ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput) ToChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutputWithContext(ctx context.Context) ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput {
	return o
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel] {
	return pulumix.Output[ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput) Gain() pulumix.Output[int] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel](o, func(v ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel) int {
		return v.Gain
	})
}

func (o ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput) InputChannel() pulumix.Output[int] {
	return pulumix.Apply[ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel](o, func(v ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel) int {
		return v.InputChannel
	})
}

type ChannelEncoderSettingsAvailBlanking struct {
	// Blanking image to be used. See Avail Blanking Image for more details.
	AvailBlankingImage *ChannelEncoderSettingsAvailBlankingAvailBlankingImage `pulumi:"availBlankingImage"`
	// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
	State *string `pulumi:"state"`
}

type ChannelEncoderSettingsAvailBlankingArgs struct {
	// Blanking image to be used. See Avail Blanking Image for more details.
	AvailBlankingImage pulumix.Input[*ChannelEncoderSettingsAvailBlankingAvailBlankingImageArgs] `pulumi:"availBlankingImage"`
	// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
	State pulumix.Input[*string] `pulumi:"state"`
}

func (ChannelEncoderSettingsAvailBlankingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAvailBlanking)(nil)).Elem()
}

func (i ChannelEncoderSettingsAvailBlankingArgs) ToChannelEncoderSettingsAvailBlankingOutput() ChannelEncoderSettingsAvailBlankingOutput {
	return i.ToChannelEncoderSettingsAvailBlankingOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAvailBlankingArgs) ToChannelEncoderSettingsAvailBlankingOutputWithContext(ctx context.Context) ChannelEncoderSettingsAvailBlankingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAvailBlankingOutput)
}

func (i *ChannelEncoderSettingsAvailBlankingArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAvailBlankingArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAvailBlankingOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAvailBlankingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAvailBlanking)(nil)).Elem()
}

func (o ChannelEncoderSettingsAvailBlankingOutput) ToChannelEncoderSettingsAvailBlankingOutput() ChannelEncoderSettingsAvailBlankingOutput {
	return o
}

func (o ChannelEncoderSettingsAvailBlankingOutput) ToChannelEncoderSettingsAvailBlankingOutputWithContext(ctx context.Context) ChannelEncoderSettingsAvailBlankingOutput {
	return o
}

func (o ChannelEncoderSettingsAvailBlankingOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAvailBlanking] {
	return pulumix.Output[ChannelEncoderSettingsAvailBlanking]{
		OutputState: o.OutputState,
	}
}

// Blanking image to be used. See Avail Blanking Image for more details.
func (o ChannelEncoderSettingsAvailBlankingOutput) AvailBlankingImage() pulumix.GPtrOutput[ChannelEncoderSettingsAvailBlankingAvailBlankingImage, ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsAvailBlanking](o, func(v ChannelEncoderSettingsAvailBlanking) *ChannelEncoderSettingsAvailBlankingAvailBlankingImage {
		return v.AvailBlankingImage
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsAvailBlankingAvailBlankingImage, ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput]{OutputState: value.OutputState}
}

// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
func (o ChannelEncoderSettingsAvailBlankingOutput) State() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAvailBlanking](o, func(v ChannelEncoderSettingsAvailBlanking) *string { return v.State })
}

type ChannelEncoderSettingsAvailBlankingAvailBlankingImage struct {
	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `pulumi:"passwordParam"`
	// Path to a file accessible to the live stream.
	Uri string `pulumi:"uri"`
	// . Username to be used.
	Username *string `pulumi:"username"`
}

type ChannelEncoderSettingsAvailBlankingAvailBlankingImageArgs struct {
	// Key used to extract the password from EC2 Parameter store.
	PasswordParam pulumix.Input[*string] `pulumi:"passwordParam"`
	// Path to a file accessible to the live stream.
	Uri pulumix.Input[string] `pulumi:"uri"`
	// . Username to be used.
	Username pulumix.Input[*string] `pulumi:"username"`
}

func (ChannelEncoderSettingsAvailBlankingAvailBlankingImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAvailBlankingAvailBlankingImage)(nil)).Elem()
}

func (i ChannelEncoderSettingsAvailBlankingAvailBlankingImageArgs) ToChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput() ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput {
	return i.ToChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsAvailBlankingAvailBlankingImageArgs) ToChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputWithContext(ctx context.Context) ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput)
}

func (i *ChannelEncoderSettingsAvailBlankingAvailBlankingImageArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsAvailBlankingAvailBlankingImageArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsAvailBlankingAvailBlankingImage)(nil)).Elem()
}

func (o ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput) ToChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput() ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput {
	return o
}

func (o ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput) ToChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputWithContext(ctx context.Context) ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput {
	return o
}

func (o ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsAvailBlankingAvailBlankingImage] {
	return pulumix.Output[ChannelEncoderSettingsAvailBlankingAvailBlankingImage]{
		OutputState: o.OutputState,
	}
}

// Key used to extract the password from EC2 Parameter store.
func (o ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput) PasswordParam() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAvailBlankingAvailBlankingImage](o, func(v ChannelEncoderSettingsAvailBlankingAvailBlankingImage) *string { return v.PasswordParam })
}

// Path to a file accessible to the live stream.
func (o ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput) Uri() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsAvailBlankingAvailBlankingImage](o, func(v ChannelEncoderSettingsAvailBlankingAvailBlankingImage) string { return v.Uri })
}

// . Username to be used.
func (o ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput) Username() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsAvailBlankingAvailBlankingImage](o, func(v ChannelEncoderSettingsAvailBlankingAvailBlankingImage) *string { return v.Username })
}

type ChannelEncoderSettingsCaptionDescription struct {
	// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds.
	Accessibility *string `pulumi:"accessibility"`
	// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
	CaptionSelectorName string `pulumi:"captionSelectorName"`
	// Additional settings for captions destination that depend on the destination type. See Destination Settings for more details.
	DestinationSettings *ChannelEncoderSettingsCaptionDescriptionDestinationSettings `pulumi:"destinationSettings"`
	// ISO 639-2 three-digit code.
	LanguageCode *string `pulumi:"languageCode"`
	// Human readable information to indicate captions available for players (eg. English, or Spanish).
	LanguageDescription *string `pulumi:"languageDescription"`
	// Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
	Name string `pulumi:"name"`
}

type ChannelEncoderSettingsCaptionDescriptionArgs struct {
	// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds.
	Accessibility pulumix.Input[*string] `pulumi:"accessibility"`
	// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
	CaptionSelectorName pulumix.Input[string] `pulumi:"captionSelectorName"`
	// Additional settings for captions destination that depend on the destination type. See Destination Settings for more details.
	DestinationSettings pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsArgs] `pulumi:"destinationSettings"`
	// ISO 639-2 three-digit code.
	LanguageCode pulumix.Input[*string] `pulumi:"languageCode"`
	// Human readable information to indicate captions available for players (eg. English, or Spanish).
	LanguageDescription pulumix.Input[*string] `pulumi:"languageDescription"`
	// Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (ChannelEncoderSettingsCaptionDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescription)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionArgs) ToChannelEncoderSettingsCaptionDescriptionOutput() ChannelEncoderSettingsCaptionDescriptionOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionArgs) ToChannelEncoderSettingsCaptionDescriptionOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescription)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionOutput) ToChannelEncoderSettingsCaptionDescriptionOutput() ChannelEncoderSettingsCaptionDescriptionOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionOutput) ToChannelEncoderSettingsCaptionDescriptionOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescription] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescription]{
		OutputState: o.OutputState,
	}
}

// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds.
func (o ChannelEncoderSettingsCaptionDescriptionOutput) Accessibility() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescription](o, func(v ChannelEncoderSettingsCaptionDescription) *string { return v.Accessibility })
}

// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
func (o ChannelEncoderSettingsCaptionDescriptionOutput) CaptionSelectorName() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescription](o, func(v ChannelEncoderSettingsCaptionDescription) string { return v.CaptionSelectorName })
}

// Additional settings for captions destination that depend on the destination type. See Destination Settings for more details.
func (o ChannelEncoderSettingsCaptionDescriptionOutput) DestinationSettings() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescription](o, func(v ChannelEncoderSettingsCaptionDescription) *ChannelEncoderSettingsCaptionDescriptionDestinationSettings {
		return v.DestinationSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput]{OutputState: value.OutputState}
}

// ISO 639-2 three-digit code.
func (o ChannelEncoderSettingsCaptionDescriptionOutput) LanguageCode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescription](o, func(v ChannelEncoderSettingsCaptionDescription) *string { return v.LanguageCode })
}

// Human readable information to indicate captions available for players (eg. English, or Spanish).
func (o ChannelEncoderSettingsCaptionDescriptionOutput) LanguageDescription() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescription](o, func(v ChannelEncoderSettingsCaptionDescription) *string { return v.LanguageDescription })
}

// Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
func (o ChannelEncoderSettingsCaptionDescriptionOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescription](o, func(v ChannelEncoderSettingsCaptionDescription) string { return v.Name })
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettings struct {
	// Arib Destination Settings.
	AribDestinationSettings *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettings `pulumi:"aribDestinationSettings"`
	// Burn In Destination Settings. See Burn In Destination Settings for more details.
	BurnInDestinationSettings *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings `pulumi:"burnInDestinationSettings"`
	// DVB Sub Destination Settings. See DVB Sub Destination Settings for more details.
	DvbSubDestinationSettings *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings `pulumi:"dvbSubDestinationSettings"`
	// EBU TT D Destination Settings. See EBU TT D Destination Settings for more details.
	EbuTtDDestinationSettings *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings `pulumi:"ebuTtDDestinationSettings"`
	// Embedded Destination Settings.
	EmbeddedDestinationSettings *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettings `pulumi:"embeddedDestinationSettings"`
	// Embedded Plus SCTE20 Destination Settings.
	EmbeddedPlusScte20DestinationSettings *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettings `pulumi:"embeddedPlusScte20DestinationSettings"`
	// RTMP Caption Info Destination Settings.
	RtmpCaptionInfoDestinationSettings *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettings `pulumi:"rtmpCaptionInfoDestinationSettings"`
	// SCTE20 Plus Embedded Destination Settings.
	Scte20PlusEmbeddedDestinationSettings *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettings `pulumi:"scte20PlusEmbeddedDestinationSettings"`
	// SCTE27 Destination Settings.
	Scte27DestinationSettings *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettings `pulumi:"scte27DestinationSettings"`
	// SMPTE TT Destination Settings.
	SmpteTtDestinationSettings *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettings `pulumi:"smpteTtDestinationSettings"`
	// Teletext Destination Settings.
	TeletextDestinationSettings *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettings `pulumi:"teletextDestinationSettings"`
	// TTML Destination Settings. See TTML Destination Settings for more details.
	TtmlDestinationSettings *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettings `pulumi:"ttmlDestinationSettings"`
	// WebVTT Destination Settings. See WebVTT Destination Settings for more details.
	WebvttDestinationSettings *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettings `pulumi:"webvttDestinationSettings"`
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsArgs struct {
	// Arib Destination Settings.
	AribDestinationSettings pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsArgs] `pulumi:"aribDestinationSettings"`
	// Burn In Destination Settings. See Burn In Destination Settings for more details.
	BurnInDestinationSettings pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsArgs] `pulumi:"burnInDestinationSettings"`
	// DVB Sub Destination Settings. See DVB Sub Destination Settings for more details.
	DvbSubDestinationSettings pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsArgs] `pulumi:"dvbSubDestinationSettings"`
	// EBU TT D Destination Settings. See EBU TT D Destination Settings for more details.
	EbuTtDDestinationSettings pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsArgs] `pulumi:"ebuTtDDestinationSettings"`
	// Embedded Destination Settings.
	EmbeddedDestinationSettings pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsArgs] `pulumi:"embeddedDestinationSettings"`
	// Embedded Plus SCTE20 Destination Settings.
	EmbeddedPlusScte20DestinationSettings pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsArgs] `pulumi:"embeddedPlusScte20DestinationSettings"`
	// RTMP Caption Info Destination Settings.
	RtmpCaptionInfoDestinationSettings pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsArgs] `pulumi:"rtmpCaptionInfoDestinationSettings"`
	// SCTE20 Plus Embedded Destination Settings.
	Scte20PlusEmbeddedDestinationSettings pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsArgs] `pulumi:"scte20PlusEmbeddedDestinationSettings"`
	// SCTE27 Destination Settings.
	Scte27DestinationSettings pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsArgs] `pulumi:"scte27DestinationSettings"`
	// SMPTE TT Destination Settings.
	SmpteTtDestinationSettings pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsArgs] `pulumi:"smpteTtDestinationSettings"`
	// Teletext Destination Settings.
	TeletextDestinationSettings pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsArgs] `pulumi:"teletextDestinationSettings"`
	// TTML Destination Settings. See TTML Destination Settings for more details.
	TtmlDestinationSettings pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsArgs] `pulumi:"ttmlDestinationSettings"`
	// WebVTT Destination Settings. See WebVTT Destination Settings for more details.
	WebvttDestinationSettings pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsArgs] `pulumi:"webvttDestinationSettings"`
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettings] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettings]{
		OutputState: o.OutputState,
	}
}

// Arib Destination Settings.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) AribDestinationSettings() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettings) *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettings {
		return v.AribDestinationSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutput]{OutputState: value.OutputState}
}

// Burn In Destination Settings. See Burn In Destination Settings for more details.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) BurnInDestinationSettings() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettings) *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings {
		return v.BurnInDestinationSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput]{OutputState: value.OutputState}
}

// DVB Sub Destination Settings. See DVB Sub Destination Settings for more details.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) DvbSubDestinationSettings() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettings) *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings {
		return v.DvbSubDestinationSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput]{OutputState: value.OutputState}
}

// EBU TT D Destination Settings. See EBU TT D Destination Settings for more details.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) EbuTtDDestinationSettings() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettings) *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings {
		return v.EbuTtDDestinationSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput]{OutputState: value.OutputState}
}

// Embedded Destination Settings.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) EmbeddedDestinationSettings() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettings) *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettings {
		return v.EmbeddedDestinationSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutput]{OutputState: value.OutputState}
}

// Embedded Plus SCTE20 Destination Settings.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) EmbeddedPlusScte20DestinationSettings() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettings) *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettings {
		return v.EmbeddedPlusScte20DestinationSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutput]{OutputState: value.OutputState}
}

// RTMP Caption Info Destination Settings.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) RtmpCaptionInfoDestinationSettings() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettings) *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettings {
		return v.RtmpCaptionInfoDestinationSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutput]{OutputState: value.OutputState}
}

// SCTE20 Plus Embedded Destination Settings.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) Scte20PlusEmbeddedDestinationSettings() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettings) *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettings {
		return v.Scte20PlusEmbeddedDestinationSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutput]{OutputState: value.OutputState}
}

// SCTE27 Destination Settings.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) Scte27DestinationSettings() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettings) *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettings {
		return v.Scte27DestinationSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutput]{OutputState: value.OutputState}
}

// SMPTE TT Destination Settings.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) SmpteTtDestinationSettings() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettings) *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettings {
		return v.SmpteTtDestinationSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutput]{OutputState: value.OutputState}
}

// Teletext Destination Settings.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) TeletextDestinationSettings() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettings) *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettings {
		return v.TeletextDestinationSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutput]{OutputState: value.OutputState}
}

// TTML Destination Settings. See TTML Destination Settings for more details.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) TtmlDestinationSettings() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettings) *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettings {
		return v.TtmlDestinationSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput]{OutputState: value.OutputState}
}

// WebVTT Destination Settings. See WebVTT Destination Settings for more details.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput) WebvttDestinationSettings() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettings) *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettings {
		return v.WebvttDestinationSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettings, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettings struct {
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsArgs struct {
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettings] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings struct {
	// If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting “smart” justification will left-justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
	Alignment *string `pulumi:"alignment"`
	// Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
	BackgroundColor *string `pulumi:"backgroundColor"`
	// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
	BackgroundOpacity *int `pulumi:"backgroundOpacity"`
	// External font file used for caption burn-in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
	Font *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFont `pulumi:"font"`
	// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	FontColor *string `pulumi:"fontColor"`
	// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
	FontOpacity *int `pulumi:"fontOpacity"`
	// Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
	FontResolution *int `pulumi:"fontResolution"`
	// When set to ‘auto’ fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
	FontSize *string `pulumi:"fontSize"`
	// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineColor string `pulumi:"outlineColor"`
	// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineSize *int `pulumi:"outlineSize"`
	// Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
	ShadowColor *string `pulumi:"shadowColor"`
	// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
	ShadowOpacity *int `pulumi:"shadowOpacity"`
	// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
	ShadowXOffset *int `pulumi:"shadowXOffset"`
	// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
	ShadowYOffset *int `pulumi:"shadowYOffset"`
	// Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
	TeletextGridControl string `pulumi:"teletextGridControl"`
	// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. All burn-in and DVB-Sub font settings must match.
	XPosition *int `pulumi:"xPosition"`
	// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings must match.
	YPosition *int `pulumi:"yPosition"`
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsArgs struct {
	// If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting “smart” justification will left-justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
	Alignment pulumix.Input[*string] `pulumi:"alignment"`
	// Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
	BackgroundColor pulumix.Input[*string] `pulumi:"backgroundColor"`
	// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
	BackgroundOpacity pulumix.Input[*int] `pulumi:"backgroundOpacity"`
	// External font file used for caption burn-in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
	Font pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontArgs] `pulumi:"font"`
	// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	FontColor pulumix.Input[*string] `pulumi:"fontColor"`
	// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
	FontOpacity pulumix.Input[*int] `pulumi:"fontOpacity"`
	// Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
	FontResolution pulumix.Input[*int] `pulumi:"fontResolution"`
	// When set to ‘auto’ fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
	FontSize pulumix.Input[*string] `pulumi:"fontSize"`
	// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineColor pulumix.Input[string] `pulumi:"outlineColor"`
	// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineSize pulumix.Input[*int] `pulumi:"outlineSize"`
	// Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
	ShadowColor pulumix.Input[*string] `pulumi:"shadowColor"`
	// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
	ShadowOpacity pulumix.Input[*int] `pulumi:"shadowOpacity"`
	// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
	ShadowXOffset pulumix.Input[*int] `pulumi:"shadowXOffset"`
	// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
	ShadowYOffset pulumix.Input[*int] `pulumi:"shadowYOffset"`
	// Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
	TeletextGridControl pulumix.Input[string] `pulumi:"teletextGridControl"`
	// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. All burn-in and DVB-Sub font settings must match.
	XPosition pulumix.Input[*int] `pulumi:"xPosition"`
	// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings must match.
	YPosition pulumix.Input[*int] `pulumi:"yPosition"`
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings]{
		OutputState: o.OutputState,
	}
}

// If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting “smart” justification will left-justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) Alignment() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) *string {
		return v.Alignment
	})
}

// Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) BackgroundColor() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) *string {
		return v.BackgroundColor
	})
}

// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) BackgroundOpacity() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) *int {
		return v.BackgroundOpacity
	})
}

// External font file used for caption burn-in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) Font() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFont, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFont {
		return v.Font
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFont, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput]{OutputState: value.OutputState}
}

// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) FontColor() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) *string {
		return v.FontColor
	})
}

// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) FontOpacity() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) *int {
		return v.FontOpacity
	})
}

// Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) FontResolution() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) *int {
		return v.FontResolution
	})
}

// When set to ‘auto’ fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) FontSize() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) *string {
		return v.FontSize
	})
}

// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) OutlineColor() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) string {
		return v.OutlineColor
	})
}

// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) OutlineSize() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) *int {
		return v.OutlineSize
	})
}

// Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) ShadowColor() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) *string {
		return v.ShadowColor
	})
}

// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) ShadowOpacity() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) *int {
		return v.ShadowOpacity
	})
}

// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) ShadowXOffset() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) *int {
		return v.ShadowXOffset
	})
}

// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) ShadowYOffset() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) *int {
		return v.ShadowYOffset
	})
}

// Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) TeletextGridControl() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) string {
		return v.TeletextGridControl
	})
}

// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) XPosition() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) *int {
		return v.XPosition
	})
}

// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput) YPosition() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettings) *int {
		return v.YPosition
	})
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFont struct {
	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `pulumi:"passwordParam"`
	// Path to a file accessible to the live stream.
	Uri string `pulumi:"uri"`
	// Username to be used.
	Username *string `pulumi:"username"`
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontArgs struct {
	// Key used to extract the password from EC2 Parameter store.
	PasswordParam pulumix.Input[*string] `pulumi:"passwordParam"`
	// Path to a file accessible to the live stream.
	Uri pulumix.Input[string] `pulumi:"uri"`
	// Username to be used.
	Username pulumix.Input[*string] `pulumi:"username"`
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFont)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFont)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFont] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFont]{
		OutputState: o.OutputState,
	}
}

// Key used to extract the password from EC2 Parameter store.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput) PasswordParam() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFont](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFont) *string {
		return v.PasswordParam
	})
}

// Path to a file accessible to the live stream.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput) Uri() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFont](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFont) string {
		return v.Uri
	})
}

// Username to be used.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput) Username() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFont](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFont) *string {
		return v.Username
	})
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings struct {
	// If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting “smart” justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	Alignment *string `pulumi:"alignment"`
	// Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
	BackgroundColor *string `pulumi:"backgroundColor"`
	// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
	BackgroundOpacity *int `pulumi:"backgroundOpacity"`
	// External font file used for caption burn-in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
	Font *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont `pulumi:"font"`
	// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	FontColor *string `pulumi:"fontColor"`
	// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
	FontOpacity *int `pulumi:"fontOpacity"`
	// Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
	FontResolution *int `pulumi:"fontResolution"`
	// When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
	FontSize *string `pulumi:"fontSize"`
	// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineColor *string `pulumi:"outlineColor"`
	// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineSize *int `pulumi:"outlineSize"`
	// Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
	ShadowColor *string `pulumi:"shadowColor"`
	// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
	ShadowOpacity *int `pulumi:"shadowOpacity"`
	// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
	ShadowXOffset *int `pulumi:"shadowXOffset"`
	// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
	ShadowYOffset *int `pulumi:"shadowYOffset"`
	// Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
	TeletextGridControl *string `pulumi:"teletextGridControl"`
	// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	XPosition *int `pulumi:"xPosition"`
	// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	YPosition *int `pulumi:"yPosition"`
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsArgs struct {
	// If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting “smart” justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	Alignment pulumix.Input[*string] `pulumi:"alignment"`
	// Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
	BackgroundColor pulumix.Input[*string] `pulumi:"backgroundColor"`
	// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
	BackgroundOpacity pulumix.Input[*int] `pulumi:"backgroundOpacity"`
	// External font file used for caption burn-in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
	Font pulumix.Input[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontArgs] `pulumi:"font"`
	// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	FontColor pulumix.Input[*string] `pulumi:"fontColor"`
	// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
	FontOpacity pulumix.Input[*int] `pulumi:"fontOpacity"`
	// Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
	FontResolution pulumix.Input[*int] `pulumi:"fontResolution"`
	// When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
	FontSize pulumix.Input[*string] `pulumi:"fontSize"`
	// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineColor pulumix.Input[*string] `pulumi:"outlineColor"`
	// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineSize pulumix.Input[*int] `pulumi:"outlineSize"`
	// Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
	ShadowColor pulumix.Input[*string] `pulumi:"shadowColor"`
	// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
	ShadowOpacity pulumix.Input[*int] `pulumi:"shadowOpacity"`
	// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
	ShadowXOffset pulumix.Input[*int] `pulumi:"shadowXOffset"`
	// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
	ShadowYOffset pulumix.Input[*int] `pulumi:"shadowYOffset"`
	// Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
	TeletextGridControl pulumix.Input[*string] `pulumi:"teletextGridControl"`
	// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	XPosition pulumix.Input[*int] `pulumi:"xPosition"`
	// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	YPosition pulumix.Input[*int] `pulumi:"yPosition"`
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings]{
		OutputState: o.OutputState,
	}
}

// If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting “smart” justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) Alignment() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *string {
		return v.Alignment
	})
}

// Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) BackgroundColor() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *string {
		return v.BackgroundColor
	})
}

// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) BackgroundOpacity() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *int {
		return v.BackgroundOpacity
	})
}

// External font file used for caption burn-in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) Font() pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont {
		return v.Font
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont, ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput]{OutputState: value.OutputState}
}

// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) FontColor() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *string {
		return v.FontColor
	})
}

// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) FontOpacity() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *int {
		return v.FontOpacity
	})
}

// Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) FontResolution() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *int {
		return v.FontResolution
	})
}

// When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) FontSize() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *string {
		return v.FontSize
	})
}

// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) OutlineColor() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *string {
		return v.OutlineColor
	})
}

// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) OutlineSize() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *int {
		return v.OutlineSize
	})
}

// Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) ShadowColor() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *string {
		return v.ShadowColor
	})
}

// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) ShadowOpacity() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *int {
		return v.ShadowOpacity
	})
}

// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) ShadowXOffset() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *int {
		return v.ShadowXOffset
	})
}

// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) ShadowYOffset() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *int {
		return v.ShadowYOffset
	})
}

// Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) TeletextGridControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *string {
		return v.TeletextGridControl
	})
}

// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) XPosition() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *int {
		return v.XPosition
	})
}

// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput) YPosition() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings) *int {
		return v.YPosition
	})
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont struct {
	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `pulumi:"passwordParam"`
	// Path to a file accessible to the live stream.
	Uri string `pulumi:"uri"`
	// Username to be used.
	Username *string `pulumi:"username"`
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontArgs struct {
	// Key used to extract the password from EC2 Parameter store.
	PasswordParam pulumix.Input[*string] `pulumi:"passwordParam"`
	// Path to a file accessible to the live stream.
	Uri pulumix.Input[string] `pulumi:"uri"`
	// Username to be used.
	Username pulumix.Input[*string] `pulumi:"username"`
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont]{
		OutputState: o.OutputState,
	}
}

// Key used to extract the password from EC2 Parameter store.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput) PasswordParam() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont) *string {
		return v.PasswordParam
	})
}

// Path to a file accessible to the live stream.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput) Uri() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont) string {
		return v.Uri
	})
}

// Username to be used.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput) Username() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont) *string {
		return v.Username
	})
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings struct {
	// Complete this field if you want to include the name of the copyright holder in the copyright tag in the captions metadata.
	CopyrightHolder *string `pulumi:"copyrightHolder"`
	// Specifies how to handle the gap between the lines (in multi-line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
	FillLineGap *string `pulumi:"fillLineGap"`
	// Specifies the font family to include in the font data attached to the EBU-TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to “monospaced”. (If styleControl is set to exclude, the font family is always set to “monospaced”.) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
	FontFamily *string `pulumi:"fontFamily"`
	// Specifies the style information (font color, font position, and so on) to include in the font data that is attached to the EBU-TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
	StyleControl *string `pulumi:"styleControl"`
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsArgs struct {
	// Complete this field if you want to include the name of the copyright holder in the copyright tag in the captions metadata.
	CopyrightHolder pulumix.Input[*string] `pulumi:"copyrightHolder"`
	// Specifies how to handle the gap between the lines (in multi-line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
	FillLineGap pulumix.Input[*string] `pulumi:"fillLineGap"`
	// Specifies the font family to include in the font data attached to the EBU-TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to “monospaced”. (If styleControl is set to exclude, the font family is always set to “monospaced”.) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
	FontFamily pulumix.Input[*string] `pulumi:"fontFamily"`
	// Specifies the style information (font color, font position, and so on) to include in the font data that is attached to the EBU-TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
	StyleControl pulumix.Input[*string] `pulumi:"styleControl"`
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings]{
		OutputState: o.OutputState,
	}
}

// Complete this field if you want to include the name of the copyright holder in the copyright tag in the captions metadata.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput) CopyrightHolder() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings) *string {
		return v.CopyrightHolder
	})
}

// Specifies how to handle the gap between the lines (in multi-line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput) FillLineGap() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings) *string {
		return v.FillLineGap
	})
}

// Specifies the font family to include in the font data attached to the EBU-TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to “monospaced”. (If styleControl is set to exclude, the font family is always set to “monospaced”.) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput) FontFamily() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings) *string {
		return v.FontFamily
	})
}

// Specifies the style information (font color, font position, and so on) to include in the font data that is attached to the EBU-TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput) StyleControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettings) *string {
		return v.StyleControl
	})
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettings struct {
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsArgs struct {
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettings] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettings struct {
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsArgs struct {
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettings] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettings struct {
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsArgs struct {
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettings] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettings struct {
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsArgs struct {
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettings] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettings struct {
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsArgs struct {
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettings] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettings struct {
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsArgs struct {
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettings] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettings struct {
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsArgs struct {
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettings] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettings struct {
	// This field is not currently supported and will not affect the output styling. Leave the default value.
	StyleControl string `pulumi:"styleControl"`
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsArgs struct {
	// This field is not currently supported and will not affect the output styling. Leave the default value.
	StyleControl pulumix.Input[string] `pulumi:"styleControl"`
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettings] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettings]{
		OutputState: o.OutputState,
	}
}

// This field is not currently supported and will not affect the output styling. Leave the default value.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput) StyleControl() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettings) string {
		return v.StyleControl
	})
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettings struct {
	// Controls whether the color and position of the source captions is passed through to the WebVTT output captions. PASSTHROUGH - Valid only if the source captions are EMBEDDED or TELETEXT. NO\_STYLE\_DATA - Don’t pass through the style. The output captions will not contain any font styling information.
	StyleControl string `pulumi:"styleControl"`
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsArgs struct {
	// Controls whether the color and position of the source captions is passed through to the WebVTT output captions. PASSTHROUGH - Valid only if the source captions are EMBEDDED or TELETEXT. NO\_STYLE\_DATA - Don’t pass through the style. The output captions will not contain any font styling information.
	StyleControl pulumix.Input[string] `pulumi:"styleControl"`
}

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput {
	return i.ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsArgs) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput)
}

func (i *ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput() ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput) ToChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettings] {
	return pulumix.Output[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettings]{
		OutputState: o.OutputState,
	}
}

// Controls whether the color and position of the source captions is passed through to the WebVTT output captions. PASSTHROUGH - Valid only if the source captions are EMBEDDED or TELETEXT. NO\_STYLE\_DATA - Don’t pass through the style. The output captions will not contain any font styling information.
func (o ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput) StyleControl() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettings](o, func(v ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettings) string {
		return v.StyleControl
	})
}

type ChannelEncoderSettingsGlobalConfiguration struct {
	// Value to set the initial audio gain for the Live Event.
	InitialAudioGain *int `pulumi:"initialAudioGain"`
	// Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When “none” is configured the encoder will transcode either black, a solid color, or a user specified slate images per the “Input Loss Behavior” configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
	InputEndAction *string `pulumi:"inputEndAction"`
	// Settings for system actions when input is lost. See Input Loss Behavior for more details.
	InputLossBehavior *ChannelEncoderSettingsGlobalConfigurationInputLossBehavior `pulumi:"inputLossBehavior"`
	// Indicates how MediaLive pipelines are synchronized. PIPELINE\_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH\_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
	OutputLockingMode *string `pulumi:"outputLockingMode"`
	// Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
	OutputTimingSource *string `pulumi:"outputTimingSource"`
	// Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
	SupportLowFramerateInputs *string `pulumi:"supportLowFramerateInputs"`
}

type ChannelEncoderSettingsGlobalConfigurationArgs struct {
	// Value to set the initial audio gain for the Live Event.
	InitialAudioGain pulumix.Input[*int] `pulumi:"initialAudioGain"`
	// Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When “none” is configured the encoder will transcode either black, a solid color, or a user specified slate images per the “Input Loss Behavior” configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
	InputEndAction pulumix.Input[*string] `pulumi:"inputEndAction"`
	// Settings for system actions when input is lost. See Input Loss Behavior for more details.
	InputLossBehavior pulumix.Input[*ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorArgs] `pulumi:"inputLossBehavior"`
	// Indicates how MediaLive pipelines are synchronized. PIPELINE\_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH\_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
	OutputLockingMode pulumix.Input[*string] `pulumi:"outputLockingMode"`
	// Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
	OutputTimingSource pulumix.Input[*string] `pulumi:"outputTimingSource"`
	// Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
	SupportLowFramerateInputs pulumix.Input[*string] `pulumi:"supportLowFramerateInputs"`
}

func (ChannelEncoderSettingsGlobalConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsGlobalConfiguration)(nil)).Elem()
}

func (i ChannelEncoderSettingsGlobalConfigurationArgs) ToChannelEncoderSettingsGlobalConfigurationOutput() ChannelEncoderSettingsGlobalConfigurationOutput {
	return i.ToChannelEncoderSettingsGlobalConfigurationOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsGlobalConfigurationArgs) ToChannelEncoderSettingsGlobalConfigurationOutputWithContext(ctx context.Context) ChannelEncoderSettingsGlobalConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsGlobalConfigurationOutput)
}

func (i *ChannelEncoderSettingsGlobalConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsGlobalConfigurationArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsGlobalConfigurationOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsGlobalConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsGlobalConfiguration)(nil)).Elem()
}

func (o ChannelEncoderSettingsGlobalConfigurationOutput) ToChannelEncoderSettingsGlobalConfigurationOutput() ChannelEncoderSettingsGlobalConfigurationOutput {
	return o
}

func (o ChannelEncoderSettingsGlobalConfigurationOutput) ToChannelEncoderSettingsGlobalConfigurationOutputWithContext(ctx context.Context) ChannelEncoderSettingsGlobalConfigurationOutput {
	return o
}

func (o ChannelEncoderSettingsGlobalConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsGlobalConfiguration] {
	return pulumix.Output[ChannelEncoderSettingsGlobalConfiguration]{
		OutputState: o.OutputState,
	}
}

// Value to set the initial audio gain for the Live Event.
func (o ChannelEncoderSettingsGlobalConfigurationOutput) InitialAudioGain() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsGlobalConfiguration](o, func(v ChannelEncoderSettingsGlobalConfiguration) *int { return v.InitialAudioGain })
}

// Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When “none” is configured the encoder will transcode either black, a solid color, or a user specified slate images per the “Input Loss Behavior” configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
func (o ChannelEncoderSettingsGlobalConfigurationOutput) InputEndAction() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsGlobalConfiguration](o, func(v ChannelEncoderSettingsGlobalConfiguration) *string { return v.InputEndAction })
}

// Settings for system actions when input is lost. See Input Loss Behavior for more details.
func (o ChannelEncoderSettingsGlobalConfigurationOutput) InputLossBehavior() pulumix.GPtrOutput[ChannelEncoderSettingsGlobalConfigurationInputLossBehavior, ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsGlobalConfiguration](o, func(v ChannelEncoderSettingsGlobalConfiguration) *ChannelEncoderSettingsGlobalConfigurationInputLossBehavior {
		return v.InputLossBehavior
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsGlobalConfigurationInputLossBehavior, ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput]{OutputState: value.OutputState}
}

// Indicates how MediaLive pipelines are synchronized. PIPELINE\_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH\_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
func (o ChannelEncoderSettingsGlobalConfigurationOutput) OutputLockingMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsGlobalConfiguration](o, func(v ChannelEncoderSettingsGlobalConfiguration) *string { return v.OutputLockingMode })
}

// Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
func (o ChannelEncoderSettingsGlobalConfigurationOutput) OutputTimingSource() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsGlobalConfiguration](o, func(v ChannelEncoderSettingsGlobalConfiguration) *string { return v.OutputTimingSource })
}

// Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
func (o ChannelEncoderSettingsGlobalConfigurationOutput) SupportLowFramerateInputs() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsGlobalConfiguration](o, func(v ChannelEncoderSettingsGlobalConfiguration) *string { return v.SupportLowFramerateInputs })
}

type ChannelEncoderSettingsGlobalConfigurationInputLossBehavior struct {
	BlackFrameMsec      *int                                                                           `pulumi:"blackFrameMsec"`
	InputLossImageColor *string                                                                        `pulumi:"inputLossImageColor"`
	InputLossImageSlate *ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate `pulumi:"inputLossImageSlate"`
	InputLossImageType  *string                                                                        `pulumi:"inputLossImageType"`
	RepeatFrameMsec     *int                                                                           `pulumi:"repeatFrameMsec"`
}

type ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorArgs struct {
	BlackFrameMsec      pulumix.Input[*int]                                                                               `pulumi:"blackFrameMsec"`
	InputLossImageColor pulumix.Input[*string]                                                                            `pulumi:"inputLossImageColor"`
	InputLossImageSlate pulumix.Input[*ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateArgs] `pulumi:"inputLossImageSlate"`
	InputLossImageType  pulumix.Input[*string]                                                                            `pulumi:"inputLossImageType"`
	RepeatFrameMsec     pulumix.Input[*int]                                                                               `pulumi:"repeatFrameMsec"`
}

func (ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsGlobalConfigurationInputLossBehavior)(nil)).Elem()
}

func (i ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorArgs) ToChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput() ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput {
	return i.ToChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorArgs) ToChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutputWithContext(ctx context.Context) ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput)
}

func (i *ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsGlobalConfigurationInputLossBehavior)(nil)).Elem()
}

func (o ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput) ToChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput() ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput {
	return o
}

func (o ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput) ToChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutputWithContext(ctx context.Context) ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput {
	return o
}

func (o ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsGlobalConfigurationInputLossBehavior] {
	return pulumix.Output[ChannelEncoderSettingsGlobalConfigurationInputLossBehavior]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput) BlackFrameMsec() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsGlobalConfigurationInputLossBehavior](o, func(v ChannelEncoderSettingsGlobalConfigurationInputLossBehavior) *int { return v.BlackFrameMsec })
}

func (o ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput) InputLossImageColor() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsGlobalConfigurationInputLossBehavior](o, func(v ChannelEncoderSettingsGlobalConfigurationInputLossBehavior) *string {
		return v.InputLossImageColor
	})
}

func (o ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput) InputLossImageSlate() pulumix.GPtrOutput[ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate, ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsGlobalConfigurationInputLossBehavior](o, func(v ChannelEncoderSettingsGlobalConfigurationInputLossBehavior) *ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate {
		return v.InputLossImageSlate
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate, ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput) InputLossImageType() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsGlobalConfigurationInputLossBehavior](o, func(v ChannelEncoderSettingsGlobalConfigurationInputLossBehavior) *string {
		return v.InputLossImageType
	})
}

func (o ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput) RepeatFrameMsec() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsGlobalConfigurationInputLossBehavior](o, func(v ChannelEncoderSettingsGlobalConfigurationInputLossBehavior) *int { return v.RepeatFrameMsec })
}

type ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate struct {
	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `pulumi:"passwordParam"`
	// Path to a file accessible to the live stream.
	Uri string `pulumi:"uri"`
	// Username for destination.
	Username *string `pulumi:"username"`
}

type ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateArgs struct {
	// Key used to extract the password from EC2 Parameter store.
	PasswordParam pulumix.Input[*string] `pulumi:"passwordParam"`
	// Path to a file accessible to the live stream.
	Uri pulumix.Input[string] `pulumi:"uri"`
	// Username for destination.
	Username pulumix.Input[*string] `pulumi:"username"`
}

func (ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate)(nil)).Elem()
}

func (i ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateArgs) ToChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput() ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput {
	return i.ToChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateArgs) ToChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutputWithContext(ctx context.Context) ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput)
}

func (i *ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate)(nil)).Elem()
}

func (o ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput) ToChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput() ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput {
	return o
}

func (o ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput) ToChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutputWithContext(ctx context.Context) ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput {
	return o
}

func (o ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate] {
	return pulumix.Output[ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate]{
		OutputState: o.OutputState,
	}
}

// Key used to extract the password from EC2 Parameter store.
func (o ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput) PasswordParam() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate](o, func(v ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate) *string {
		return v.PasswordParam
	})
}

// Path to a file accessible to the live stream.
func (o ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput) Uri() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate](o, func(v ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate) string {
		return v.Uri
	})
}

// Username for destination.
func (o ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput) Username() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate](o, func(v ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate) *string {
		return v.Username
	})
}

type ChannelEncoderSettingsMotionGraphicsConfiguration struct {
	// Motion Graphics Insertion.
	MotionGraphicsInsertion *string `pulumi:"motionGraphicsInsertion"`
	// Motion Graphics Settings. See Motion Graphics Settings for more details.
	MotionGraphicsSettings ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings `pulumi:"motionGraphicsSettings"`
}

type ChannelEncoderSettingsMotionGraphicsConfigurationArgs struct {
	// Motion Graphics Insertion.
	MotionGraphicsInsertion pulumix.Input[*string] `pulumi:"motionGraphicsInsertion"`
	// Motion Graphics Settings. See Motion Graphics Settings for more details.
	MotionGraphicsSettings pulumix.Input[*ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsArgs] `pulumi:"motionGraphicsSettings"`
}

func (ChannelEncoderSettingsMotionGraphicsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsMotionGraphicsConfiguration)(nil)).Elem()
}

func (i ChannelEncoderSettingsMotionGraphicsConfigurationArgs) ToChannelEncoderSettingsMotionGraphicsConfigurationOutput() ChannelEncoderSettingsMotionGraphicsConfigurationOutput {
	return i.ToChannelEncoderSettingsMotionGraphicsConfigurationOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsMotionGraphicsConfigurationArgs) ToChannelEncoderSettingsMotionGraphicsConfigurationOutputWithContext(ctx context.Context) ChannelEncoderSettingsMotionGraphicsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsMotionGraphicsConfigurationOutput)
}

func (i *ChannelEncoderSettingsMotionGraphicsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsMotionGraphicsConfigurationArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsMotionGraphicsConfigurationOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsMotionGraphicsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsMotionGraphicsConfiguration)(nil)).Elem()
}

func (o ChannelEncoderSettingsMotionGraphicsConfigurationOutput) ToChannelEncoderSettingsMotionGraphicsConfigurationOutput() ChannelEncoderSettingsMotionGraphicsConfigurationOutput {
	return o
}

func (o ChannelEncoderSettingsMotionGraphicsConfigurationOutput) ToChannelEncoderSettingsMotionGraphicsConfigurationOutputWithContext(ctx context.Context) ChannelEncoderSettingsMotionGraphicsConfigurationOutput {
	return o
}

func (o ChannelEncoderSettingsMotionGraphicsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsMotionGraphicsConfiguration] {
	return pulumix.Output[ChannelEncoderSettingsMotionGraphicsConfiguration]{
		OutputState: o.OutputState,
	}
}

// Motion Graphics Insertion.
func (o ChannelEncoderSettingsMotionGraphicsConfigurationOutput) MotionGraphicsInsertion() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsMotionGraphicsConfiguration](o, func(v ChannelEncoderSettingsMotionGraphicsConfiguration) *string { return v.MotionGraphicsInsertion })
}

// Motion Graphics Settings. See Motion Graphics Settings for more details.
func (o ChannelEncoderSettingsMotionGraphicsConfigurationOutput) MotionGraphicsSettings() pulumix.GPtrOutput[ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings, ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsMotionGraphicsConfiguration](o, func(v ChannelEncoderSettingsMotionGraphicsConfiguration) ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings {
		return v.MotionGraphicsSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings, ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings struct {
	// Html Motion Graphics Settings.
	HtmlMotionGraphicsSettings *ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings `pulumi:"htmlMotionGraphicsSettings"`
}

type ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsArgs struct {
	// Html Motion Graphics Settings.
	HtmlMotionGraphicsSettings pulumix.Input[*ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsArgs] `pulumi:"htmlMotionGraphicsSettings"`
}

func (ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsArgs) ToChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput() ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput {
	return i.ToChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsArgs) ToChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput)
}

func (i *ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput) ToChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput() ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput) ToChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings] {
	return pulumix.Output[ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings]{
		OutputState: o.OutputState,
	}
}

// Html Motion Graphics Settings.
func (o ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput) HtmlMotionGraphicsSettings() pulumix.GPtrOutput[ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings, ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings](o, func(v ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings) *ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings {
		return v.HtmlMotionGraphicsSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings, ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings struct {
}

type ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsArgs struct {
}

func (ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsArgs) ToChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutput() ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutput {
	return i.ToChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsArgs) ToChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutput)
}

func (i *ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutput) ToChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutput() ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutput) ToChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings] {
	return pulumix.Output[ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsNielsenConfiguration struct {
	// Enter the Distributor ID assigned to your organization by Nielsen.
	DistributorId *string `pulumi:"distributorId"`
	// Enables Nielsen PCM to ID3 tagging.
	NielsenPcmToId3Tagging *string `pulumi:"nielsenPcmToId3Tagging"`
}

type ChannelEncoderSettingsNielsenConfigurationArgs struct {
	// Enter the Distributor ID assigned to your organization by Nielsen.
	DistributorId pulumix.Input[*string] `pulumi:"distributorId"`
	// Enables Nielsen PCM to ID3 tagging.
	NielsenPcmToId3Tagging pulumix.Input[*string] `pulumi:"nielsenPcmToId3Tagging"`
}

func (ChannelEncoderSettingsNielsenConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsNielsenConfiguration)(nil)).Elem()
}

func (i ChannelEncoderSettingsNielsenConfigurationArgs) ToChannelEncoderSettingsNielsenConfigurationOutput() ChannelEncoderSettingsNielsenConfigurationOutput {
	return i.ToChannelEncoderSettingsNielsenConfigurationOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsNielsenConfigurationArgs) ToChannelEncoderSettingsNielsenConfigurationOutputWithContext(ctx context.Context) ChannelEncoderSettingsNielsenConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsNielsenConfigurationOutput)
}

func (i *ChannelEncoderSettingsNielsenConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsNielsenConfigurationArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsNielsenConfigurationOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsNielsenConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsNielsenConfiguration)(nil)).Elem()
}

func (o ChannelEncoderSettingsNielsenConfigurationOutput) ToChannelEncoderSettingsNielsenConfigurationOutput() ChannelEncoderSettingsNielsenConfigurationOutput {
	return o
}

func (o ChannelEncoderSettingsNielsenConfigurationOutput) ToChannelEncoderSettingsNielsenConfigurationOutputWithContext(ctx context.Context) ChannelEncoderSettingsNielsenConfigurationOutput {
	return o
}

func (o ChannelEncoderSettingsNielsenConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsNielsenConfiguration] {
	return pulumix.Output[ChannelEncoderSettingsNielsenConfiguration]{
		OutputState: o.OutputState,
	}
}

// Enter the Distributor ID assigned to your organization by Nielsen.
func (o ChannelEncoderSettingsNielsenConfigurationOutput) DistributorId() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsNielsenConfiguration](o, func(v ChannelEncoderSettingsNielsenConfiguration) *string { return v.DistributorId })
}

// Enables Nielsen PCM to ID3 tagging.
func (o ChannelEncoderSettingsNielsenConfigurationOutput) NielsenPcmToId3Tagging() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsNielsenConfiguration](o, func(v ChannelEncoderSettingsNielsenConfiguration) *string { return v.NielsenPcmToId3Tagging })
}

type ChannelEncoderSettingsOutputGroup struct {
	// Custom output group name defined by the user.
	Name *string `pulumi:"name"`
	// Settings associated with the output group. See Output Group Settings for more details.
	OutputGroupSettings ChannelEncoderSettingsOutputGroupOutputGroupSettings `pulumi:"outputGroupSettings"`
	// List of outputs. See Outputs for more details.
	Outputs []ChannelEncoderSettingsOutputGroupOutputType `pulumi:"outputs"`
}

type ChannelEncoderSettingsOutputGroupArgs struct {
	// Custom output group name defined by the user.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Settings associated with the output group. See Output Group Settings for more details.
	OutputGroupSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArgs] `pulumi:"outputGroupSettings"`
	// List of outputs. See Outputs for more details.
	Outputs pulumix.Input[[]*ChannelEncoderSettingsOutputGroupOutputTypeArgs] `pulumi:"outputs"`
}

func (ChannelEncoderSettingsOutputGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroup)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupArgs) ToChannelEncoderSettingsOutputGroupOutput() ChannelEncoderSettingsOutputGroupOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupArgs) ToChannelEncoderSettingsOutputGroupOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutput)
}

func (i *ChannelEncoderSettingsOutputGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroup)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutput) ToChannelEncoderSettingsOutputGroupOutput() ChannelEncoderSettingsOutputGroupOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutput) ToChannelEncoderSettingsOutputGroupOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroup] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroup]{
		OutputState: o.OutputState,
	}
}

// Custom output group name defined by the user.
func (o ChannelEncoderSettingsOutputGroupOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroup](o, func(v ChannelEncoderSettingsOutputGroup) *string { return v.Name })
}

// Settings associated with the output group. See Output Group Settings for more details.
func (o ChannelEncoderSettingsOutputGroupOutput) OutputGroupSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroup](o, func(v ChannelEncoderSettingsOutputGroup) ChannelEncoderSettingsOutputGroupOutputGroupSettings {
		return v.OutputGroupSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput]{OutputState: value.OutputState}
}

// List of outputs. See Outputs for more details.
func (o ChannelEncoderSettingsOutputGroupOutput) Outputs() pulumix.GArrayOutput[ChannelEncoderSettingsOutputGroupOutputType, ChannelEncoderSettingsOutputGroupOutputTypeOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroup](o, func(v ChannelEncoderSettingsOutputGroup) []ChannelEncoderSettingsOutputGroupOutputType {
		return v.Outputs
	})
	return pulumix.GArrayOutput[ChannelEncoderSettingsOutputGroupOutputType, ChannelEncoderSettingsOutputGroupOutputTypeOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsOutputGroupOutputType struct {
	// The names of the audio descriptions used as audio sources for the output.
	AudioDescriptionNames []string `pulumi:"audioDescriptionNames"`
	// The names of the caption descriptions used as caption sources for the output.
	CaptionDescriptionNames []string `pulumi:"captionDescriptionNames"`
	// The name used to identify an output.
	OutputName *string `pulumi:"outputName"`
	// Settings for output. See Output Settings for more details.
	OutputSettings ChannelEncoderSettingsOutputGroupOutputOutputSettings `pulumi:"outputSettings"`
	// The name of the video description used as video source for the output.
	VideoDescriptionName *string `pulumi:"videoDescriptionName"`
}

type ChannelEncoderSettingsOutputGroupOutputTypeArgs struct {
	// The names of the audio descriptions used as audio sources for the output.
	AudioDescriptionNames pulumix.Input[[]string] `pulumi:"audioDescriptionNames"`
	// The names of the caption descriptions used as caption sources for the output.
	CaptionDescriptionNames pulumix.Input[[]string] `pulumi:"captionDescriptionNames"`
	// The name used to identify an output.
	OutputName pulumix.Input[*string] `pulumi:"outputName"`
	// Settings for output. See Output Settings for more details.
	OutputSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArgs] `pulumi:"outputSettings"`
	// The name of the video description used as video source for the output.
	VideoDescriptionName pulumix.Input[*string] `pulumi:"videoDescriptionName"`
}

func (ChannelEncoderSettingsOutputGroupOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputType)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputTypeArgs) ToChannelEncoderSettingsOutputGroupOutputTypeOutput() ChannelEncoderSettingsOutputGroupOutputTypeOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputTypeOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputTypeArgs) ToChannelEncoderSettingsOutputGroupOutputTypeOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputTypeOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputTypeArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputTypeOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputType)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputTypeOutput) ToChannelEncoderSettingsOutputGroupOutputTypeOutput() ChannelEncoderSettingsOutputGroupOutputTypeOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputTypeOutput) ToChannelEncoderSettingsOutputGroupOutputTypeOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputTypeOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputType] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputType]{
		OutputState: o.OutputState,
	}
}

// The names of the audio descriptions used as audio sources for the output.
func (o ChannelEncoderSettingsOutputGroupOutputTypeOutput) AudioDescriptionNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputType](o, func(v ChannelEncoderSettingsOutputGroupOutputType) []string { return v.AudioDescriptionNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The names of the caption descriptions used as caption sources for the output.
func (o ChannelEncoderSettingsOutputGroupOutputTypeOutput) CaptionDescriptionNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputType](o, func(v ChannelEncoderSettingsOutputGroupOutputType) []string { return v.CaptionDescriptionNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The name used to identify an output.
func (o ChannelEncoderSettingsOutputGroupOutputTypeOutput) OutputName() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputType](o, func(v ChannelEncoderSettingsOutputGroupOutputType) *string { return v.OutputName })
}

// Settings for output. See Output Settings for more details.
func (o ChannelEncoderSettingsOutputGroupOutputTypeOutput) OutputSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputType](o, func(v ChannelEncoderSettingsOutputGroupOutputType) ChannelEncoderSettingsOutputGroupOutputOutputSettings {
		return v.OutputSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput]{OutputState: value.OutputState}
}

// The name of the video description used as video source for the output.
func (o ChannelEncoderSettingsOutputGroupOutputTypeOutput) VideoDescriptionName() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputType](o, func(v ChannelEncoderSettingsOutputGroupOutputType) *string { return v.VideoDescriptionName })
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettings struct {
	// Archive group settings. See Archive Group Settings for more details.
	ArchiveGroupSettings      []ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting      `pulumi:"archiveGroupSettings"`
	FrameCaptureGroupSettings *ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings `pulumi:"frameCaptureGroupSettings"`
	HlsGroupSettings          *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings          `pulumi:"hlsGroupSettings"`
	// Media package group settings. See Media Package Group Settings for more details.
	MediaPackageGroupSettings *ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettings `pulumi:"mediaPackageGroupSettings"`
	MsSmoothGroupSettings     *ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings     `pulumi:"msSmoothGroupSettings"`
	MultiplexGroupSettings    *ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettings    `pulumi:"multiplexGroupSettings"`
	// RTMP group settings. See RTMP Group Settings for more details.
	RtmpGroupSettings *ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings `pulumi:"rtmpGroupSettings"`
	UdpGroupSettings  *ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings  `pulumi:"udpGroupSettings"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsArgs struct {
	// Archive group settings. See Archive Group Settings for more details.
	ArchiveGroupSettings      pulumix.Input[[]*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArgs]     `pulumi:"archiveGroupSettings"`
	FrameCaptureGroupSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsArgs] `pulumi:"frameCaptureGroupSettings"`
	HlsGroupSettings          pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsArgs]          `pulumi:"hlsGroupSettings"`
	// Media package group settings. See Media Package Group Settings for more details.
	MediaPackageGroupSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsArgs] `pulumi:"mediaPackageGroupSettings"`
	MsSmoothGroupSettings     pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs]     `pulumi:"msSmoothGroupSettings"`
	MultiplexGroupSettings    pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsArgs]    `pulumi:"multiplexGroupSettings"`
	// RTMP group settings. See RTMP Group Settings for more details.
	RtmpGroupSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsArgs] `pulumi:"rtmpGroupSettings"`
	UdpGroupSettings  pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsArgs]  `pulumi:"udpGroupSettings"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettings]{
		OutputState: o.OutputState,
	}
}

// Archive group settings. See Archive Group Settings for more details.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput) ArchiveGroupSettings() pulumix.GArrayOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting, ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettings) []ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting {
		return v.ArchiveGroupSettings
	})
	return pulumix.GArrayOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting, ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput) FrameCaptureGroupSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettings) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings {
		return v.FrameCaptureGroupSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput) HlsGroupSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettings) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings {
		return v.HlsGroupSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput]{OutputState: value.OutputState}
}

// Media package group settings. See Media Package Group Settings for more details.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput) MediaPackageGroupSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettings) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettings {
		return v.MediaPackageGroupSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput) MsSmoothGroupSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettings) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings {
		return v.MsSmoothGroupSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput) MultiplexGroupSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettings) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettings {
		return v.MultiplexGroupSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutput]{OutputState: value.OutputState}
}

// RTMP group settings. See RTMP Group Settings for more details.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput) RtmpGroupSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettings) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings {
		return v.RtmpGroupSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput) UdpGroupSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettings) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings {
		return v.UdpGroupSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting struct {
	// Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
	ArchiveCdnSettings *ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettings `pulumi:"archiveCdnSettings"`
	// A director and base filename where archive files should be written. See Destination for more details.
	Destination ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestination `pulumi:"destination"`
	// Number of seconds to write to archive file before closing and starting a new one.
	RolloverInterval *int `pulumi:"rolloverInterval"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArgs struct {
	// Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
	ArchiveCdnSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArgs] `pulumi:"archiveCdnSettings"`
	// A director and base filename where archive files should be written. See Destination for more details.
	Destination pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationArgs] `pulumi:"destination"`
	// Number of seconds to write to archive file before closing and starting a new one.
	RolloverInterval pulumix.Input[*int] `pulumi:"rolloverInterval"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting]{
		OutputState: o.OutputState,
	}
}

// Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput) ArchiveCdnSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettings {
		return v.ArchiveCdnSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput]{OutputState: value.OutputState}
}

// A director and base filename where archive files should be written. See Destination for more details.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput) Destination() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestination, ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting) ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestination {
		return v.Destination
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestination, ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput]{OutputState: value.OutputState}
}

// Number of seconds to write to archive file before closing and starting a new one.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput) RolloverInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting) *int {
		return v.RolloverInterval
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettings struct {
	// Archive S3 Settings. See Archive S3 Settings for more details.
	ArchiveS3Settings *ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3Settings `pulumi:"archiveS3Settings"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArgs struct {
	// Archive S3 Settings. See Archive S3 Settings for more details.
	ArchiveS3Settings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsArgs] `pulumi:"archiveS3Settings"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettings]{
		OutputState: o.OutputState,
	}
}

// Archive S3 Settings. See Archive S3 Settings for more details.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput) ArchiveS3Settings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3Settings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettings) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3Settings {
		return v.ArchiveS3Settings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3Settings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3Settings struct {
	// Specify the canned ACL to apply to each S3 request.
	CannedAcl *string `pulumi:"cannedAcl"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsArgs struct {
	// Specify the canned ACL to apply to each S3 request.
	CannedAcl pulumix.Input[*string] `pulumi:"cannedAcl"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3Settings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3Settings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3Settings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3Settings]{
		OutputState: o.OutputState,
	}
}

// Specify the canned ACL to apply to each S3 request.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput) CannedAcl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3Settings) *string {
		return v.CannedAcl
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestination struct {
	// Reference ID for the destination.
	DestinationRefId string `pulumi:"destinationRefId"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationArgs struct {
	// Reference ID for the destination.
	DestinationRefId pulumix.Input[string] `pulumi:"destinationRefId"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestination)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestination)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestination] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestination]{
		OutputState: o.OutputState,
	}
}

// Reference ID for the destination.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput) DestinationRefId() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestination](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestination) string {
		return v.DestinationRefId
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings struct {
	// A director and base filename where archive files should be written. See Destination for more details.
	Destination             ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestination              `pulumi:"destination"`
	FrameCaptureCdnSettings *ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings `pulumi:"frameCaptureCdnSettings"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsArgs struct {
	// A director and base filename where archive files should be written. See Destination for more details.
	Destination             pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationArgs]             `pulumi:"destination"`
	FrameCaptureCdnSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsArgs] `pulumi:"frameCaptureCdnSettings"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings]{
		OutputState: o.OutputState,
	}
}

// A director and base filename where archive files should be written. See Destination for more details.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput) Destination() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestination, ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings) ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestination {
		return v.Destination
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestination, ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput) FrameCaptureCdnSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings {
		return v.FrameCaptureCdnSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestination struct {
	// Reference ID for the destination.
	DestinationRefId string `pulumi:"destinationRefId"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationArgs struct {
	// Reference ID for the destination.
	DestinationRefId pulumix.Input[string] `pulumi:"destinationRefId"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestination)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestination)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestination] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestination]{
		OutputState: o.OutputState,
	}
}

// Reference ID for the destination.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput) DestinationRefId() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestination](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestination) string {
		return v.DestinationRefId
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings struct {
	FrameCaptureS3Settings *ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings `pulumi:"frameCaptureS3Settings"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsArgs struct {
	FrameCaptureS3Settings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsArgs] `pulumi:"frameCaptureS3Settings"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput) FrameCaptureS3Settings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings {
		return v.FrameCaptureS3Settings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings struct {
	// Specify the canned ACL to apply to each S3 request.
	CannedAcl *string `pulumi:"cannedAcl"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsArgs struct {
	// Specify the canned ACL to apply to each S3 request.
	CannedAcl pulumix.Input[*string] `pulumi:"cannedAcl"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings]{
		OutputState: o.OutputState,
	}
}

// Specify the canned ACL to apply to each S3 request.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput) CannedAcl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings) *string {
		return v.CannedAcl
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings struct {
	// The ad marker type for this output group.
	AdMarkers               []string                                                                                     `pulumi:"adMarkers"`
	BaseUrlContent          *string                                                                                      `pulumi:"baseUrlContent"`
	BaseUrlContent1         *string                                                                                      `pulumi:"baseUrlContent1"`
	BaseUrlManifest         *string                                                                                      `pulumi:"baseUrlManifest"`
	BaseUrlManifest1        *string                                                                                      `pulumi:"baseUrlManifest1"`
	CaptionLanguageMappings []ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping `pulumi:"captionLanguageMappings"`
	CaptionLanguageSetting  *string                                                                                      `pulumi:"captionLanguageSetting"`
	ClientCache             *string                                                                                      `pulumi:"clientCache"`
	CodecSpecification      *string                                                                                      `pulumi:"codecSpecification"`
	ConstantIv              *string                                                                                      `pulumi:"constantIv"`
	// A director and base filename where archive files should be written. See Destination for more details.
	Destination               ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestination     `pulumi:"destination"`
	DirectoryStructure        *string                                                                             `pulumi:"directoryStructure"`
	DiscontinuityTags         *string                                                                             `pulumi:"discontinuityTags"`
	EncryptionType            *string                                                                             `pulumi:"encryptionType"`
	HlsCdnSettings            []ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting `pulumi:"hlsCdnSettings"`
	HlsId3SegmentTagging      *string                                                                             `pulumi:"hlsId3SegmentTagging"`
	IframeOnlyPlaylists       *string                                                                             `pulumi:"iframeOnlyPlaylists"`
	IncompleteSegmentBehavior *string                                                                             `pulumi:"incompleteSegmentBehavior"`
	IndexNSegments            *int                                                                                `pulumi:"indexNSegments"`
	// Controls the behavior of the RTMP group if input becomes unavailable.
	InputLossAction         *string                                                                                  `pulumi:"inputLossAction"`
	IvInManifest            *string                                                                                  `pulumi:"ivInManifest"`
	IvSource                *string                                                                                  `pulumi:"ivSource"`
	KeepSegments            *int                                                                                     `pulumi:"keepSegments"`
	KeyFormat               *string                                                                                  `pulumi:"keyFormat"`
	KeyFormatVersions       *string                                                                                  `pulumi:"keyFormatVersions"`
	KeyProviderSettings     *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettings `pulumi:"keyProviderSettings"`
	ManifestCompression     *string                                                                                  `pulumi:"manifestCompression"`
	ManifestDurationFormat  *string                                                                                  `pulumi:"manifestDurationFormat"`
	MinSegmentLength        *int                                                                                     `pulumi:"minSegmentLength"`
	Mode                    *string                                                                                  `pulumi:"mode"`
	OutputSelection         *string                                                                                  `pulumi:"outputSelection"`
	ProgramDateTime         *string                                                                                  `pulumi:"programDateTime"`
	ProgramDateTimeClock    *string                                                                                  `pulumi:"programDateTimeClock"`
	ProgramDateTimePeriod   *int                                                                                     `pulumi:"programDateTimePeriod"`
	RedundantManifest       *string                                                                                  `pulumi:"redundantManifest"`
	SegmentLength           *int                                                                                     `pulumi:"segmentLength"`
	SegmentsPerSubdirectory *int                                                                                     `pulumi:"segmentsPerSubdirectory"`
	StreamInfResolution     *string                                                                                  `pulumi:"streamInfResolution"`
	// Indicates ID3 frame that has the timecode.
	TimedMetadataId3Frame      *string `pulumi:"timedMetadataId3Frame"`
	TimedMetadataId3Period     *int    `pulumi:"timedMetadataId3Period"`
	TimestampDeltaMilliseconds *int    `pulumi:"timestampDeltaMilliseconds"`
	TsFileMode                 *string `pulumi:"tsFileMode"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsArgs struct {
	// The ad marker type for this output group.
	AdMarkers               pulumix.Input[[]string]                                                                                          `pulumi:"adMarkers"`
	BaseUrlContent          pulumix.Input[*string]                                                                                           `pulumi:"baseUrlContent"`
	BaseUrlContent1         pulumix.Input[*string]                                                                                           `pulumi:"baseUrlContent1"`
	BaseUrlManifest         pulumix.Input[*string]                                                                                           `pulumi:"baseUrlManifest"`
	BaseUrlManifest1        pulumix.Input[*string]                                                                                           `pulumi:"baseUrlManifest1"`
	CaptionLanguageMappings pulumix.Input[[]*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingArgs] `pulumi:"captionLanguageMappings"`
	CaptionLanguageSetting  pulumix.Input[*string]                                                                                           `pulumi:"captionLanguageSetting"`
	ClientCache             pulumix.Input[*string]                                                                                           `pulumi:"clientCache"`
	CodecSpecification      pulumix.Input[*string]                                                                                           `pulumi:"codecSpecification"`
	ConstantIv              pulumix.Input[*string]                                                                                           `pulumi:"constantIv"`
	// A director and base filename where archive files should be written. See Destination for more details.
	Destination               pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationArgs]     `pulumi:"destination"`
	DirectoryStructure        pulumix.Input[*string]                                                                                  `pulumi:"directoryStructure"`
	DiscontinuityTags         pulumix.Input[*string]                                                                                  `pulumi:"discontinuityTags"`
	EncryptionType            pulumix.Input[*string]                                                                                  `pulumi:"encryptionType"`
	HlsCdnSettings            pulumix.Input[[]*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingArgs] `pulumi:"hlsCdnSettings"`
	HlsId3SegmentTagging      pulumix.Input[*string]                                                                                  `pulumi:"hlsId3SegmentTagging"`
	IframeOnlyPlaylists       pulumix.Input[*string]                                                                                  `pulumi:"iframeOnlyPlaylists"`
	IncompleteSegmentBehavior pulumix.Input[*string]                                                                                  `pulumi:"incompleteSegmentBehavior"`
	IndexNSegments            pulumix.Input[*int]                                                                                     `pulumi:"indexNSegments"`
	// Controls the behavior of the RTMP group if input becomes unavailable.
	InputLossAction         pulumix.Input[*string]                                                                                      `pulumi:"inputLossAction"`
	IvInManifest            pulumix.Input[*string]                                                                                      `pulumi:"ivInManifest"`
	IvSource                pulumix.Input[*string]                                                                                      `pulumi:"ivSource"`
	KeepSegments            pulumix.Input[*int]                                                                                         `pulumi:"keepSegments"`
	KeyFormat               pulumix.Input[*string]                                                                                      `pulumi:"keyFormat"`
	KeyFormatVersions       pulumix.Input[*string]                                                                                      `pulumi:"keyFormatVersions"`
	KeyProviderSettings     pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsArgs] `pulumi:"keyProviderSettings"`
	ManifestCompression     pulumix.Input[*string]                                                                                      `pulumi:"manifestCompression"`
	ManifestDurationFormat  pulumix.Input[*string]                                                                                      `pulumi:"manifestDurationFormat"`
	MinSegmentLength        pulumix.Input[*int]                                                                                         `pulumi:"minSegmentLength"`
	Mode                    pulumix.Input[*string]                                                                                      `pulumi:"mode"`
	OutputSelection         pulumix.Input[*string]                                                                                      `pulumi:"outputSelection"`
	ProgramDateTime         pulumix.Input[*string]                                                                                      `pulumi:"programDateTime"`
	ProgramDateTimeClock    pulumix.Input[*string]                                                                                      `pulumi:"programDateTimeClock"`
	ProgramDateTimePeriod   pulumix.Input[*int]                                                                                         `pulumi:"programDateTimePeriod"`
	RedundantManifest       pulumix.Input[*string]                                                                                      `pulumi:"redundantManifest"`
	SegmentLength           pulumix.Input[*int]                                                                                         `pulumi:"segmentLength"`
	SegmentsPerSubdirectory pulumix.Input[*int]                                                                                         `pulumi:"segmentsPerSubdirectory"`
	StreamInfResolution     pulumix.Input[*string]                                                                                      `pulumi:"streamInfResolution"`
	// Indicates ID3 frame that has the timecode.
	TimedMetadataId3Frame      pulumix.Input[*string] `pulumi:"timedMetadataId3Frame"`
	TimedMetadataId3Period     pulumix.Input[*int]    `pulumi:"timedMetadataId3Period"`
	TimestampDeltaMilliseconds pulumix.Input[*int]    `pulumi:"timestampDeltaMilliseconds"`
	TsFileMode                 pulumix.Input[*string] `pulumi:"tsFileMode"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings]{
		OutputState: o.OutputState,
	}
}

// The ad marker type for this output group.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) AdMarkers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) []string {
		return v.AdMarkers
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) BaseUrlContent() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.BaseUrlContent
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) BaseUrlContent1() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.BaseUrlContent1
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) BaseUrlManifest() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.BaseUrlManifest
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) BaseUrlManifest1() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.BaseUrlManifest1
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) CaptionLanguageMappings() pulumix.GArrayOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) []ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping {
		return v.CaptionLanguageMappings
	})
	return pulumix.GArrayOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) CaptionLanguageSetting() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.CaptionLanguageSetting
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) ClientCache() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.ClientCache
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) CodecSpecification() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.CodecSpecification
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) ConstantIv() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.ConstantIv
	})
}

// A director and base filename where archive files should be written. See Destination for more details.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) Destination() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestination, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestination {
		return v.Destination
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestination, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) DirectoryStructure() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.DirectoryStructure
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) DiscontinuityTags() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.DiscontinuityTags
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) EncryptionType() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.EncryptionType
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) HlsCdnSettings() pulumix.GArrayOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) []ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting {
		return v.HlsCdnSettings
	})
	return pulumix.GArrayOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) HlsId3SegmentTagging() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.HlsId3SegmentTagging
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) IframeOnlyPlaylists() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.IframeOnlyPlaylists
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) IncompleteSegmentBehavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.IncompleteSegmentBehavior
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) IndexNSegments() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *int {
		return v.IndexNSegments
	})
}

// Controls the behavior of the RTMP group if input becomes unavailable.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) InputLossAction() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.InputLossAction
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) IvInManifest() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.IvInManifest
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) IvSource() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.IvSource
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) KeepSegments() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *int {
		return v.KeepSegments
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) KeyFormat() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.KeyFormat
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) KeyFormatVersions() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.KeyFormatVersions
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) KeyProviderSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettings {
		return v.KeyProviderSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) ManifestCompression() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.ManifestCompression
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) ManifestDurationFormat() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.ManifestDurationFormat
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) MinSegmentLength() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *int {
		return v.MinSegmentLength
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) Mode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string { return v.Mode })
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) OutputSelection() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.OutputSelection
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) ProgramDateTime() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.ProgramDateTime
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) ProgramDateTimeClock() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.ProgramDateTimeClock
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) ProgramDateTimePeriod() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *int {
		return v.ProgramDateTimePeriod
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) RedundantManifest() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.RedundantManifest
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) SegmentLength() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *int {
		return v.SegmentLength
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) SegmentsPerSubdirectory() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *int {
		return v.SegmentsPerSubdirectory
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) StreamInfResolution() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.StreamInfResolution
	})
}

// Indicates ID3 frame that has the timecode.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) TimedMetadataId3Frame() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.TimedMetadataId3Frame
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) TimedMetadataId3Period() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *int {
		return v.TimedMetadataId3Period
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) TimestampDeltaMilliseconds() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *int {
		return v.TimestampDeltaMilliseconds
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput) TsFileMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings) *string {
		return v.TsFileMode
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping struct {
	CaptionChannel int `pulumi:"captionChannel"`
	// Selects a specific three-letter language code from within an audio source.
	LanguageCode string `pulumi:"languageCode"`
	// Human readable information to indicate captions available for players (eg. English, or Spanish).
	LanguageDescription string `pulumi:"languageDescription"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingArgs struct {
	CaptionChannel pulumix.Input[int] `pulumi:"captionChannel"`
	// Selects a specific three-letter language code from within an audio source.
	LanguageCode pulumix.Input[string] `pulumi:"languageCode"`
	// Human readable information to indicate captions available for players (eg. English, or Spanish).
	LanguageDescription pulumix.Input[string] `pulumi:"languageDescription"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput) CaptionChannel() pulumix.Output[int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping) int {
		return v.CaptionChannel
	})
}

// Selects a specific three-letter language code from within an audio source.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput) LanguageCode() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping) string {
		return v.LanguageCode
	})
}

// Human readable information to indicate captions available for players (eg. English, or Spanish).
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput) LanguageDescription() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping) string {
		return v.LanguageDescription
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestination struct {
	// Reference ID for the destination.
	DestinationRefId string `pulumi:"destinationRefId"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationArgs struct {
	// Reference ID for the destination.
	DestinationRefId pulumix.Input[string] `pulumi:"destinationRefId"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestination)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestination)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestination] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestination]{
		OutputState: o.OutputState,
	}
}

// Reference ID for the destination.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput) DestinationRefId() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestination](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestination) string {
		return v.DestinationRefId
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting struct {
	HlsAkamaiSettings     *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings     `pulumi:"hlsAkamaiSettings"`
	HlsBasicPutSettings   *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings   `pulumi:"hlsBasicPutSettings"`
	HlsMediaStoreSettings *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings `pulumi:"hlsMediaStoreSettings"`
	HlsS3Settings         *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3Settings         `pulumi:"hlsS3Settings"`
	HlsWebdavSettings     *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings     `pulumi:"hlsWebdavSettings"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingArgs struct {
	HlsAkamaiSettings     pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsArgs]     `pulumi:"hlsAkamaiSettings"`
	HlsBasicPutSettings   pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsArgs]   `pulumi:"hlsBasicPutSettings"`
	HlsMediaStoreSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsArgs] `pulumi:"hlsMediaStoreSettings"`
	HlsS3Settings         pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsArgs]         `pulumi:"hlsS3Settings"`
	HlsWebdavSettings     pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsArgs]     `pulumi:"hlsWebdavSettings"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput) HlsAkamaiSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings {
		return v.HlsAkamaiSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput) HlsBasicPutSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings {
		return v.HlsBasicPutSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput) HlsMediaStoreSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings {
		return v.HlsMediaStoreSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput) HlsS3Settings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3Settings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3Settings {
		return v.HlsS3Settings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3Settings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput) HlsWebdavSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings {
		return v.HlsWebdavSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings struct {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *int    `pulumi:"connectionRetryInterval"`
	FilecacheDuration       *int    `pulumi:"filecacheDuration"`
	HttpTransferMode        *string `pulumi:"httpTransferMode"`
	// Number of retry attempts.
	NumRetries *int `pulumi:"numRetries"`
	// Number of seconds to wait until a restart is initiated.
	RestartDelay *int    `pulumi:"restartDelay"`
	Salt         *string `pulumi:"salt"`
	Token        *string `pulumi:"token"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsArgs struct {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval pulumix.Input[*int]    `pulumi:"connectionRetryInterval"`
	FilecacheDuration       pulumix.Input[*int]    `pulumi:"filecacheDuration"`
	HttpTransferMode        pulumix.Input[*string] `pulumi:"httpTransferMode"`
	// Number of retry attempts.
	NumRetries pulumix.Input[*int] `pulumi:"numRetries"`
	// Number of seconds to wait until a restart is initiated.
	RestartDelay pulumix.Input[*int]    `pulumi:"restartDelay"`
	Salt         pulumix.Input[*string] `pulumi:"salt"`
	Token        pulumix.Input[*string] `pulumi:"token"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings]{
		OutputState: o.OutputState,
	}
}

// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput) ConnectionRetryInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings) *int {
		return v.ConnectionRetryInterval
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput) FilecacheDuration() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings) *int {
		return v.FilecacheDuration
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput) HttpTransferMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings) *string {
		return v.HttpTransferMode
	})
}

// Number of retry attempts.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput) NumRetries() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings) *int {
		return v.NumRetries
	})
}

// Number of seconds to wait until a restart is initiated.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput) RestartDelay() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings) *int {
		return v.RestartDelay
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput) Salt() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings) *string {
		return v.Salt
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput) Token() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings) *string {
		return v.Token
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings struct {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *int `pulumi:"connectionRetryInterval"`
	FilecacheDuration       *int `pulumi:"filecacheDuration"`
	// Number of retry attempts.
	NumRetries *int `pulumi:"numRetries"`
	// Number of seconds to wait until a restart is initiated.
	RestartDelay *int `pulumi:"restartDelay"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsArgs struct {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval pulumix.Input[*int] `pulumi:"connectionRetryInterval"`
	FilecacheDuration       pulumix.Input[*int] `pulumi:"filecacheDuration"`
	// Number of retry attempts.
	NumRetries pulumix.Input[*int] `pulumi:"numRetries"`
	// Number of seconds to wait until a restart is initiated.
	RestartDelay pulumix.Input[*int] `pulumi:"restartDelay"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings]{
		OutputState: o.OutputState,
	}
}

// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput) ConnectionRetryInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings) *int {
		return v.ConnectionRetryInterval
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput) FilecacheDuration() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings) *int {
		return v.FilecacheDuration
	})
}

// Number of retry attempts.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput) NumRetries() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings) *int {
		return v.NumRetries
	})
}

// Number of seconds to wait until a restart is initiated.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput) RestartDelay() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings) *int {
		return v.RestartDelay
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings struct {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *int    `pulumi:"connectionRetryInterval"`
	FilecacheDuration       *int    `pulumi:"filecacheDuration"`
	MediaStoreStorageClass  *string `pulumi:"mediaStoreStorageClass"`
	// Number of retry attempts.
	NumRetries *int `pulumi:"numRetries"`
	// Number of seconds to wait until a restart is initiated.
	RestartDelay *int `pulumi:"restartDelay"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsArgs struct {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval pulumix.Input[*int]    `pulumi:"connectionRetryInterval"`
	FilecacheDuration       pulumix.Input[*int]    `pulumi:"filecacheDuration"`
	MediaStoreStorageClass  pulumix.Input[*string] `pulumi:"mediaStoreStorageClass"`
	// Number of retry attempts.
	NumRetries pulumix.Input[*int] `pulumi:"numRetries"`
	// Number of seconds to wait until a restart is initiated.
	RestartDelay pulumix.Input[*int] `pulumi:"restartDelay"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings]{
		OutputState: o.OutputState,
	}
}

// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput) ConnectionRetryInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings) *int {
		return v.ConnectionRetryInterval
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput) FilecacheDuration() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings) *int {
		return v.FilecacheDuration
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput) MediaStoreStorageClass() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings) *string {
		return v.MediaStoreStorageClass
	})
}

// Number of retry attempts.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput) NumRetries() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings) *int {
		return v.NumRetries
	})
}

// Number of seconds to wait until a restart is initiated.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput) RestartDelay() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings) *int {
		return v.RestartDelay
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3Settings struct {
	// Specify the canned ACL to apply to each S3 request.
	CannedAcl *string `pulumi:"cannedAcl"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsArgs struct {
	// Specify the canned ACL to apply to each S3 request.
	CannedAcl pulumix.Input[*string] `pulumi:"cannedAcl"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3Settings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3Settings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3Settings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3Settings]{
		OutputState: o.OutputState,
	}
}

// Specify the canned ACL to apply to each S3 request.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput) CannedAcl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3Settings) *string {
		return v.CannedAcl
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings struct {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *int    `pulumi:"connectionRetryInterval"`
	FilecacheDuration       *int    `pulumi:"filecacheDuration"`
	HttpTransferMode        *string `pulumi:"httpTransferMode"`
	// Number of retry attempts.
	NumRetries *int `pulumi:"numRetries"`
	// Number of seconds to wait until a restart is initiated.
	RestartDelay *int `pulumi:"restartDelay"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsArgs struct {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval pulumix.Input[*int]    `pulumi:"connectionRetryInterval"`
	FilecacheDuration       pulumix.Input[*int]    `pulumi:"filecacheDuration"`
	HttpTransferMode        pulumix.Input[*string] `pulumi:"httpTransferMode"`
	// Number of retry attempts.
	NumRetries pulumix.Input[*int] `pulumi:"numRetries"`
	// Number of seconds to wait until a restart is initiated.
	RestartDelay pulumix.Input[*int] `pulumi:"restartDelay"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings]{
		OutputState: o.OutputState,
	}
}

// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput) ConnectionRetryInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings) *int {
		return v.ConnectionRetryInterval
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput) FilecacheDuration() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings) *int {
		return v.FilecacheDuration
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput) HttpTransferMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings) *string {
		return v.HttpTransferMode
	})
}

// Number of retry attempts.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput) NumRetries() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings) *int {
		return v.NumRetries
	})
}

// Number of seconds to wait until a restart is initiated.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput) RestartDelay() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings) *int {
		return v.RestartDelay
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettings struct {
	StaticKeySettings []ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting `pulumi:"staticKeySettings"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsArgs struct {
	StaticKeySettings pulumix.Input[[]*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingArgs] `pulumi:"staticKeySettings"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput) StaticKeySettings() pulumix.GArrayOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettings) []ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting {
		return v.StaticKeySettings
	})
	return pulumix.GArrayOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting struct {
	KeyProviderServer *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer `pulumi:"keyProviderServer"`
	StaticKeyValue    string                                                                                                                    `pulumi:"staticKeyValue"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingArgs struct {
	KeyProviderServer pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerArgs] `pulumi:"keyProviderServer"`
	StaticKeyValue    pulumix.Input[string]                                                                                                                        `pulumi:"staticKeyValue"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput) KeyProviderServer() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting) *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer {
		return v.KeyProviderServer
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer, ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput) StaticKeyValue() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting) string {
		return v.StaticKeyValue
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer struct {
	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `pulumi:"passwordParam"`
	// Path to a file accessible to the live stream.
	Uri string `pulumi:"uri"`
	// Username for destination.
	Username *string `pulumi:"username"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerArgs struct {
	// Key used to extract the password from EC2 Parameter store.
	PasswordParam pulumix.Input[*string] `pulumi:"passwordParam"`
	// Path to a file accessible to the live stream.
	Uri pulumix.Input[string] `pulumi:"uri"`
	// Username for destination.
	Username pulumix.Input[*string] `pulumi:"username"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer]{
		OutputState: o.OutputState,
	}
}

// Key used to extract the password from EC2 Parameter store.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput) PasswordParam() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer) *string {
		return v.PasswordParam
	})
}

// Path to a file accessible to the live stream.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput) Uri() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer) string {
		return v.Uri
	})
}

// Username for destination.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput) Username() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer) *string {
		return v.Username
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettings struct {
	// A director and base filename where archive files should be written. See Destination for more details.
	Destination ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestination `pulumi:"destination"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsArgs struct {
	// A director and base filename where archive files should be written. See Destination for more details.
	Destination pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationArgs] `pulumi:"destination"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettings]{
		OutputState: o.OutputState,
	}
}

// A director and base filename where archive files should be written. See Destination for more details.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput) Destination() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestination, ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettings) ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestination {
		return v.Destination
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestination, ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestination struct {
	// Reference ID for the destination.
	DestinationRefId string `pulumi:"destinationRefId"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationArgs struct {
	// Reference ID for the destination.
	DestinationRefId pulumix.Input[string] `pulumi:"destinationRefId"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestination)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestination)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestination] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestination]{
		OutputState: o.OutputState,
	}
}

// Reference ID for the destination.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput) DestinationRefId() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestination](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestination) string {
		return v.DestinationRefId
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings struct {
	AcquisitionPointId       *string `pulumi:"acquisitionPointId"`
	AudioOnlyTimecodeControl *string `pulumi:"audioOnlyTimecodeControl"`
	// Setting to allow self signed or verified RTMP certificates.
	CertificateMode *string `pulumi:"certificateMode"`
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *int `pulumi:"connectionRetryInterval"`
	// A director and base filename where archive files should be written. See Destination for more details.
	Destination       ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination `pulumi:"destination"`
	EventId           *string                                                                              `pulumi:"eventId"`
	EventIdMode       *string                                                                              `pulumi:"eventIdMode"`
	EventStopBehavior *string                                                                              `pulumi:"eventStopBehavior"`
	FilecacheDuration *int                                                                                 `pulumi:"filecacheDuration"`
	FragmentLength    *int                                                                                 `pulumi:"fragmentLength"`
	// Controls the behavior of the RTMP group if input becomes unavailable.
	InputLossAction *string `pulumi:"inputLossAction"`
	// Number of retry attempts.
	NumRetries *int `pulumi:"numRetries"`
	// Number of seconds to wait until a restart is initiated.
	RestartDelay           *int    `pulumi:"restartDelay"`
	SegmentationMode       *string `pulumi:"segmentationMode"`
	SendDelayMs            *int    `pulumi:"sendDelayMs"`
	SparseTrackType        *string `pulumi:"sparseTrackType"`
	StreamManifestBehavior *string `pulumi:"streamManifestBehavior"`
	TimestampOffset        *string `pulumi:"timestampOffset"`
	TimestampOffsetMode    *string `pulumi:"timestampOffsetMode"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs struct {
	AcquisitionPointId       pulumix.Input[*string] `pulumi:"acquisitionPointId"`
	AudioOnlyTimecodeControl pulumix.Input[*string] `pulumi:"audioOnlyTimecodeControl"`
	// Setting to allow self signed or verified RTMP certificates.
	CertificateMode pulumix.Input[*string] `pulumi:"certificateMode"`
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval pulumix.Input[*int] `pulumi:"connectionRetryInterval"`
	// A director and base filename where archive files should be written. See Destination for more details.
	Destination       pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationArgs] `pulumi:"destination"`
	EventId           pulumix.Input[*string]                                                                                   `pulumi:"eventId"`
	EventIdMode       pulumix.Input[*string]                                                                                   `pulumi:"eventIdMode"`
	EventStopBehavior pulumix.Input[*string]                                                                                   `pulumi:"eventStopBehavior"`
	FilecacheDuration pulumix.Input[*int]                                                                                      `pulumi:"filecacheDuration"`
	FragmentLength    pulumix.Input[*int]                                                                                      `pulumi:"fragmentLength"`
	// Controls the behavior of the RTMP group if input becomes unavailable.
	InputLossAction pulumix.Input[*string] `pulumi:"inputLossAction"`
	// Number of retry attempts.
	NumRetries pulumix.Input[*int] `pulumi:"numRetries"`
	// Number of seconds to wait until a restart is initiated.
	RestartDelay           pulumix.Input[*int]    `pulumi:"restartDelay"`
	SegmentationMode       pulumix.Input[*string] `pulumi:"segmentationMode"`
	SendDelayMs            pulumix.Input[*int]    `pulumi:"sendDelayMs"`
	SparseTrackType        pulumix.Input[*string] `pulumi:"sparseTrackType"`
	StreamManifestBehavior pulumix.Input[*string] `pulumi:"streamManifestBehavior"`
	TimestampOffset        pulumix.Input[*string] `pulumi:"timestampOffset"`
	TimestampOffsetMode    pulumix.Input[*string] `pulumi:"timestampOffsetMode"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) AcquisitionPointId() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *string {
		return v.AcquisitionPointId
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) AudioOnlyTimecodeControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *string {
		return v.AudioOnlyTimecodeControl
	})
}

// Setting to allow self signed or verified RTMP certificates.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) CertificateMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *string {
		return v.CertificateMode
	})
}

// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) ConnectionRetryInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *int {
		return v.ConnectionRetryInterval
	})
}

// A director and base filename where archive files should be written. See Destination for more details.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) Destination() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination, ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination {
		return v.Destination
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination, ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) EventId() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *string {
		return v.EventId
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) EventIdMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *string {
		return v.EventIdMode
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) EventStopBehavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *string {
		return v.EventStopBehavior
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) FilecacheDuration() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *int {
		return v.FilecacheDuration
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) FragmentLength() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *int {
		return v.FragmentLength
	})
}

// Controls the behavior of the RTMP group if input becomes unavailable.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) InputLossAction() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *string {
		return v.InputLossAction
	})
}

// Number of retry attempts.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) NumRetries() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *int {
		return v.NumRetries
	})
}

// Number of seconds to wait until a restart is initiated.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) RestartDelay() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *int {
		return v.RestartDelay
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) SegmentationMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *string {
		return v.SegmentationMode
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) SendDelayMs() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *int {
		return v.SendDelayMs
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) SparseTrackType() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *string {
		return v.SparseTrackType
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) StreamManifestBehavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *string {
		return v.StreamManifestBehavior
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) TimestampOffset() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *string {
		return v.TimestampOffset
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput) TimestampOffsetMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings) *string {
		return v.TimestampOffsetMode
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination struct {
	// Reference ID for the destination.
	DestinationRefId string `pulumi:"destinationRefId"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationArgs struct {
	// Reference ID for the destination.
	DestinationRefId pulumix.Input[string] `pulumi:"destinationRefId"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination]{
		OutputState: o.OutputState,
	}
}

// Reference ID for the destination.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput) DestinationRefId() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination) string {
		return v.DestinationRefId
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettings struct {
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsArgs struct {
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings struct {
	// The ad marker type for this output group.
	AdMarkers []string `pulumi:"adMarkers"`
	// Authentication scheme to use when connecting with CDN.
	AuthenticationScheme *string `pulumi:"authenticationScheme"`
	// Controls behavior when content cache fills up.
	CacheFullBehavior *string `pulumi:"cacheFullBehavior"`
	// Cache length in seconds, is used to calculate buffer size.
	CacheLength *int `pulumi:"cacheLength"`
	// Controls the types of data that passes to onCaptionInfo outputs.
	CaptionData *string `pulumi:"captionData"`
	// Controls the behavior of the RTMP group if input becomes unavailable.
	InputLossAction *string `pulumi:"inputLossAction"`
	// Number of seconds to wait until a restart is initiated.
	RestartDelay *int `pulumi:"restartDelay"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsArgs struct {
	// The ad marker type for this output group.
	AdMarkers pulumix.Input[[]string] `pulumi:"adMarkers"`
	// Authentication scheme to use when connecting with CDN.
	AuthenticationScheme pulumix.Input[*string] `pulumi:"authenticationScheme"`
	// Controls behavior when content cache fills up.
	CacheFullBehavior pulumix.Input[*string] `pulumi:"cacheFullBehavior"`
	// Cache length in seconds, is used to calculate buffer size.
	CacheLength pulumix.Input[*int] `pulumi:"cacheLength"`
	// Controls the types of data that passes to onCaptionInfo outputs.
	CaptionData pulumix.Input[*string] `pulumi:"captionData"`
	// Controls the behavior of the RTMP group if input becomes unavailable.
	InputLossAction pulumix.Input[*string] `pulumi:"inputLossAction"`
	// Number of seconds to wait until a restart is initiated.
	RestartDelay pulumix.Input[*int] `pulumi:"restartDelay"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings]{
		OutputState: o.OutputState,
	}
}

// The ad marker type for this output group.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput) AdMarkers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings) []string {
		return v.AdMarkers
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Authentication scheme to use when connecting with CDN.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput) AuthenticationScheme() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings) *string {
		return v.AuthenticationScheme
	})
}

// Controls behavior when content cache fills up.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput) CacheFullBehavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings) *string {
		return v.CacheFullBehavior
	})
}

// Cache length in seconds, is used to calculate buffer size.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput) CacheLength() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings) *int {
		return v.CacheLength
	})
}

// Controls the types of data that passes to onCaptionInfo outputs.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput) CaptionData() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings) *string {
		return v.CaptionData
	})
}

// Controls the behavior of the RTMP group if input becomes unavailable.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput) InputLossAction() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings) *string {
		return v.InputLossAction
	})
}

// Number of seconds to wait until a restart is initiated.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput) RestartDelay() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings) *int {
		return v.RestartDelay
	})
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings struct {
	// Specifies behavior of last resort when input video os lost.
	InputLossAction *string `pulumi:"inputLossAction"`
	// Indicates ID3 frame that has the timecode.
	TimedMetadataId3Frame  *string `pulumi:"timedMetadataId3Frame"`
	TimedMetadataId3Period *int    `pulumi:"timedMetadataId3Period"`
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsArgs struct {
	// Specifies behavior of last resort when input video os lost.
	InputLossAction pulumix.Input[*string] `pulumi:"inputLossAction"`
	// Indicates ID3 frame that has the timecode.
	TimedMetadataId3Frame  pulumix.Input[*string] `pulumi:"timedMetadataId3Frame"`
	TimedMetadataId3Period pulumix.Input[*int]    `pulumi:"timedMetadataId3Period"`
}

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput() ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings]{
		OutputState: o.OutputState,
	}
}

// Specifies behavior of last resort when input video os lost.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput) InputLossAction() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings) *string {
		return v.InputLossAction
	})
}

// Indicates ID3 frame that has the timecode.
func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput) TimedMetadataId3Frame() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings) *string {
		return v.TimedMetadataId3Frame
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput) TimedMetadataId3Period() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings) *int {
		return v.TimedMetadataId3Period
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettings struct {
	// Archive output settings. See Archive Output Settings for more details.
	ArchiveOutputSettings      *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings      `pulumi:"archiveOutputSettings"`
	FrameCaptureOutputSettings *ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettings `pulumi:"frameCaptureOutputSettings"`
	HlsOutputSettings          *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings          `pulumi:"hlsOutputSettings"`
	// Media package output settings. This can be set as an empty block.
	MediaPackageOutputSettings *ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettings `pulumi:"mediaPackageOutputSettings"`
	MsSmoothOutputSettings     *ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings     `pulumi:"msSmoothOutputSettings"`
	// Multiplex output settings. See Multiplex Output Settings for more details.
	MultiplexOutputSettings *ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettings `pulumi:"multiplexOutputSettings"`
	// RTMP output settings. See RTMP Output Settings for more details.
	RtmpOutputSettings *ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings `pulumi:"rtmpOutputSettings"`
	// UDP output settings. See UDP Output Settings for more details
	UdpOutputSettings *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings `pulumi:"udpOutputSettings"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArgs struct {
	// Archive output settings. See Archive Output Settings for more details.
	ArchiveOutputSettings      pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsArgs]      `pulumi:"archiveOutputSettings"`
	FrameCaptureOutputSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsArgs] `pulumi:"frameCaptureOutputSettings"`
	HlsOutputSettings          pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsArgs]          `pulumi:"hlsOutputSettings"`
	// Media package output settings. This can be set as an empty block.
	MediaPackageOutputSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsArgs] `pulumi:"mediaPackageOutputSettings"`
	MsSmoothOutputSettings     pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsArgs]     `pulumi:"msSmoothOutputSettings"`
	// Multiplex output settings. See Multiplex Output Settings for more details.
	MultiplexOutputSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsArgs] `pulumi:"multiplexOutputSettings"`
	// RTMP output settings. See RTMP Output Settings for more details.
	RtmpOutputSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs] `pulumi:"rtmpOutputSettings"`
	// UDP output settings. See UDP Output Settings for more details
	UdpOutputSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsArgs] `pulumi:"udpOutputSettings"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettings]{
		OutputState: o.OutputState,
	}
}

// Archive output settings. See Archive Output Settings for more details.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput) ArchiveOutputSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings {
		return v.ArchiveOutputSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput) FrameCaptureOutputSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettings {
		return v.FrameCaptureOutputSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput) HlsOutputSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings {
		return v.HlsOutputSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput]{OutputState: value.OutputState}
}

// Media package output settings. This can be set as an empty block.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput) MediaPackageOutputSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettings {
		return v.MediaPackageOutputSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput) MsSmoothOutputSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings {
		return v.MsSmoothOutputSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput]{OutputState: value.OutputState}
}

// Multiplex output settings. See Multiplex Output Settings for more details.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput) MultiplexOutputSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettings {
		return v.MultiplexOutputSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput]{OutputState: value.OutputState}
}

// RTMP output settings. See RTMP Output Settings for more details.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput) RtmpOutputSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings {
		return v.RtmpOutputSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput]{OutputState: value.OutputState}
}

// UDP output settings. See UDP Output Settings for more details
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput) UdpOutputSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings {
		return v.UdpOutputSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings struct {
	// Settings specific to the container type of the file. See Container Settings for more details.
	ContainerSettings *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings `pulumi:"containerSettings"`
	// Output file extension.
	Extension *string `pulumi:"extension"`
	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier *string `pulumi:"nameModifier"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsArgs struct {
	// Settings specific to the container type of the file. See Container Settings for more details.
	ContainerSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsArgs] `pulumi:"containerSettings"`
	// Output file extension.
	Extension pulumix.Input[*string] `pulumi:"extension"`
	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier pulumix.Input[*string] `pulumi:"nameModifier"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings]{
		OutputState: o.OutputState,
	}
}

// Settings specific to the container type of the file. See Container Settings for more details.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput) ContainerSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings {
		return v.ContainerSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput]{OutputState: value.OutputState}
}

// Output file extension.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput) Extension() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings) *string {
		return v.Extension
	})
}

// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput) NameModifier() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings) *string {
		return v.NameModifier
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings struct {
	// M2ts Settings. See [M2ts Settings](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-medialive-channel-m2tssettings.html) for more details.
	M2tsSettings *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings `pulumi:"m2tsSettings"`
	// Raw Settings. This can be set as an empty block.
	RawSettings *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings `pulumi:"rawSettings"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsArgs struct {
	// M2ts Settings. See [M2ts Settings](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-medialive-channel-m2tssettings.html) for more details.
	M2tsSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsArgs] `pulumi:"m2tsSettings"`
	// Raw Settings. This can be set as an empty block.
	RawSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsArgs] `pulumi:"rawSettings"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings]{
		OutputState: o.OutputState,
	}
}

// M2ts Settings. See [M2ts Settings](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-medialive-channel-m2tssettings.html) for more details.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput) M2tsSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings {
		return v.M2tsSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput]{OutputState: value.OutputState}
}

// Raw Settings. This can be set as an empty block.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput) RawSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings {
		return v.RawSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings struct {
	AbsentInputAudioBehavior *string `pulumi:"absentInputAudioBehavior"`
	Arib                     *string `pulumi:"arib"`
	AribCaptionsPid          *string `pulumi:"aribCaptionsPid"`
	AribCaptionsPidControl   *string `pulumi:"aribCaptionsPidControl"`
	AudioBufferModel         *string `pulumi:"audioBufferModel"`
	AudioFramesPerPes        *int    `pulumi:"audioFramesPerPes"`
	AudioPids                *string `pulumi:"audioPids"`
	AudioStreamType          *string `pulumi:"audioStreamType"`
	// Average bitrate in bits/second.
	Bitrate            *int                                                                                                                   `pulumi:"bitrate"`
	BufferModel        *string                                                                                                                `pulumi:"bufferModel"`
	CcDescriptor       *string                                                                                                                `pulumi:"ccDescriptor"`
	DvbNitSettings     *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings `pulumi:"dvbNitSettings"`
	DvbSdtSettings     *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings `pulumi:"dvbSdtSettings"`
	DvbSubPids         *string                                                                                                                `pulumi:"dvbSubPids"`
	DvbTdtSettings     *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings `pulumi:"dvbTdtSettings"`
	DvbTeletextPid     *string                                                                                                                `pulumi:"dvbTeletextPid"`
	Ebif               *string                                                                                                                `pulumi:"ebif"`
	EbpAudioInterval   *string                                                                                                                `pulumi:"ebpAudioInterval"`
	EbpLookaheadMs     *int                                                                                                                   `pulumi:"ebpLookaheadMs"`
	EbpPlacement       *string                                                                                                                `pulumi:"ebpPlacement"`
	EcmPid             *string                                                                                                                `pulumi:"ecmPid"`
	EsRateInPes        *string                                                                                                                `pulumi:"esRateInPes"`
	EtvPlatformPid     *string                                                                                                                `pulumi:"etvPlatformPid"`
	EtvSignalPid       *string                                                                                                                `pulumi:"etvSignalPid"`
	FragmentTime       *float64                                                                                                               `pulumi:"fragmentTime"`
	Klv                *string                                                                                                                `pulumi:"klv"`
	KlvDataPids        *string                                                                                                                `pulumi:"klvDataPids"`
	NielsenId3Behavior *string                                                                                                                `pulumi:"nielsenId3Behavior"`
	NullPacketBitrate  *float64                                                                                                               `pulumi:"nullPacketBitrate"`
	PatInterval        *int                                                                                                                   `pulumi:"patInterval"`
	PcrControl         *string                                                                                                                `pulumi:"pcrControl"`
	PcrPeriod          *int                                                                                                                   `pulumi:"pcrPeriod"`
	PcrPid             *string                                                                                                                `pulumi:"pcrPid"`
	PmtInterval        *int                                                                                                                   `pulumi:"pmtInterval"`
	PmtPid             *string                                                                                                                `pulumi:"pmtPid"`
	ProgramNum         *int                                                                                                                   `pulumi:"programNum"`
	RateMode           *string                                                                                                                `pulumi:"rateMode"`
	Scte27Pids         *string                                                                                                                `pulumi:"scte27Pids"`
	Scte35Control      *string                                                                                                                `pulumi:"scte35Control"`
	// PID from which to read SCTE-35 messages.
	Scte35Pid             *string  `pulumi:"scte35Pid"`
	SegmentationMarkers   *string  `pulumi:"segmentationMarkers"`
	SegmentationStyle     *string  `pulumi:"segmentationStyle"`
	SegmentationTime      *float64 `pulumi:"segmentationTime"`
	TimedMetadataBehavior *string  `pulumi:"timedMetadataBehavior"`
	TimedMetadataPid      *string  `pulumi:"timedMetadataPid"`
	TransportStreamId     *int     `pulumi:"transportStreamId"`
	VideoPid              *string  `pulumi:"videoPid"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsArgs struct {
	AbsentInputAudioBehavior pulumix.Input[*string] `pulumi:"absentInputAudioBehavior"`
	Arib                     pulumix.Input[*string] `pulumi:"arib"`
	AribCaptionsPid          pulumix.Input[*string] `pulumi:"aribCaptionsPid"`
	AribCaptionsPidControl   pulumix.Input[*string] `pulumi:"aribCaptionsPidControl"`
	AudioBufferModel         pulumix.Input[*string] `pulumi:"audioBufferModel"`
	AudioFramesPerPes        pulumix.Input[*int]    `pulumi:"audioFramesPerPes"`
	AudioPids                pulumix.Input[*string] `pulumi:"audioPids"`
	AudioStreamType          pulumix.Input[*string] `pulumi:"audioStreamType"`
	// Average bitrate in bits/second.
	Bitrate            pulumix.Input[*int]                                                                                                                       `pulumi:"bitrate"`
	BufferModel        pulumix.Input[*string]                                                                                                                    `pulumi:"bufferModel"`
	CcDescriptor       pulumix.Input[*string]                                                                                                                    `pulumi:"ccDescriptor"`
	DvbNitSettings     pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsArgs] `pulumi:"dvbNitSettings"`
	DvbSdtSettings     pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsArgs] `pulumi:"dvbSdtSettings"`
	DvbSubPids         pulumix.Input[*string]                                                                                                                    `pulumi:"dvbSubPids"`
	DvbTdtSettings     pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsArgs] `pulumi:"dvbTdtSettings"`
	DvbTeletextPid     pulumix.Input[*string]                                                                                                                    `pulumi:"dvbTeletextPid"`
	Ebif               pulumix.Input[*string]                                                                                                                    `pulumi:"ebif"`
	EbpAudioInterval   pulumix.Input[*string]                                                                                                                    `pulumi:"ebpAudioInterval"`
	EbpLookaheadMs     pulumix.Input[*int]                                                                                                                       `pulumi:"ebpLookaheadMs"`
	EbpPlacement       pulumix.Input[*string]                                                                                                                    `pulumi:"ebpPlacement"`
	EcmPid             pulumix.Input[*string]                                                                                                                    `pulumi:"ecmPid"`
	EsRateInPes        pulumix.Input[*string]                                                                                                                    `pulumi:"esRateInPes"`
	EtvPlatformPid     pulumix.Input[*string]                                                                                                                    `pulumi:"etvPlatformPid"`
	EtvSignalPid       pulumix.Input[*string]                                                                                                                    `pulumi:"etvSignalPid"`
	FragmentTime       pulumix.Input[*float64]                                                                                                                   `pulumi:"fragmentTime"`
	Klv                pulumix.Input[*string]                                                                                                                    `pulumi:"klv"`
	KlvDataPids        pulumix.Input[*string]                                                                                                                    `pulumi:"klvDataPids"`
	NielsenId3Behavior pulumix.Input[*string]                                                                                                                    `pulumi:"nielsenId3Behavior"`
	NullPacketBitrate  pulumix.Input[*float64]                                                                                                                   `pulumi:"nullPacketBitrate"`
	PatInterval        pulumix.Input[*int]                                                                                                                       `pulumi:"patInterval"`
	PcrControl         pulumix.Input[*string]                                                                                                                    `pulumi:"pcrControl"`
	PcrPeriod          pulumix.Input[*int]                                                                                                                       `pulumi:"pcrPeriod"`
	PcrPid             pulumix.Input[*string]                                                                                                                    `pulumi:"pcrPid"`
	PmtInterval        pulumix.Input[*int]                                                                                                                       `pulumi:"pmtInterval"`
	PmtPid             pulumix.Input[*string]                                                                                                                    `pulumi:"pmtPid"`
	ProgramNum         pulumix.Input[*int]                                                                                                                       `pulumi:"programNum"`
	RateMode           pulumix.Input[*string]                                                                                                                    `pulumi:"rateMode"`
	Scte27Pids         pulumix.Input[*string]                                                                                                                    `pulumi:"scte27Pids"`
	Scte35Control      pulumix.Input[*string]                                                                                                                    `pulumi:"scte35Control"`
	// PID from which to read SCTE-35 messages.
	Scte35Pid             pulumix.Input[*string]  `pulumi:"scte35Pid"`
	SegmentationMarkers   pulumix.Input[*string]  `pulumi:"segmentationMarkers"`
	SegmentationStyle     pulumix.Input[*string]  `pulumi:"segmentationStyle"`
	SegmentationTime      pulumix.Input[*float64] `pulumi:"segmentationTime"`
	TimedMetadataBehavior pulumix.Input[*string]  `pulumi:"timedMetadataBehavior"`
	TimedMetadataPid      pulumix.Input[*string]  `pulumi:"timedMetadataPid"`
	TransportStreamId     pulumix.Input[*int]     `pulumi:"transportStreamId"`
	VideoPid              pulumix.Input[*string]  `pulumi:"videoPid"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) AbsentInputAudioBehavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.AbsentInputAudioBehavior
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) Arib() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.Arib
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) AribCaptionsPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.AribCaptionsPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) AribCaptionsPidControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.AribCaptionsPidControl
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) AudioBufferModel() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.AudioBufferModel
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) AudioFramesPerPes() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.AudioFramesPerPes
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) AudioPids() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.AudioPids
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) AudioStreamType() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.AudioStreamType
	})
}

// Average bitrate in bits/second.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) Bitrate() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.Bitrate
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) BufferModel() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.BufferModel
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) CcDescriptor() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.CcDescriptor
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) DvbNitSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings {
		return v.DvbNitSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) DvbSdtSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings {
		return v.DvbSdtSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) DvbSubPids() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.DvbSubPids
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) DvbTdtSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings {
		return v.DvbTdtSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) DvbTeletextPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.DvbTeletextPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) Ebif() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.Ebif
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) EbpAudioInterval() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.EbpAudioInterval
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) EbpLookaheadMs() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.EbpLookaheadMs
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) EbpPlacement() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.EbpPlacement
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) EcmPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.EcmPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) EsRateInPes() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.EsRateInPes
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) EtvPlatformPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.EtvPlatformPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) EtvSignalPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.EtvSignalPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) FragmentTime() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *float64 {
		return v.FragmentTime
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) Klv() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.Klv
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) KlvDataPids() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.KlvDataPids
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) NielsenId3Behavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.NielsenId3Behavior
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) NullPacketBitrate() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *float64 {
		return v.NullPacketBitrate
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) PatInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.PatInterval
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) PcrControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.PcrControl
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) PcrPeriod() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.PcrPeriod
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) PcrPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.PcrPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) PmtInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.PmtInterval
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) PmtPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.PmtPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) ProgramNum() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.ProgramNum
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) RateMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.RateMode
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) Scte27Pids() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.Scte27Pids
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) Scte35Control() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.Scte35Control
	})
}

// PID from which to read SCTE-35 messages.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) Scte35Pid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.Scte35Pid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) SegmentationMarkers() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.SegmentationMarkers
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) SegmentationStyle() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.SegmentationStyle
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) SegmentationTime() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *float64 {
		return v.SegmentationTime
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) TimedMetadataBehavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.TimedMetadataBehavior
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) TimedMetadataPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.TimedMetadataPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) TransportStreamId() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.TransportStreamId
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput) VideoPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.VideoPid
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings struct {
	NetworkId   int    `pulumi:"networkId"`
	NetworkName string `pulumi:"networkName"`
	RepInterval *int   `pulumi:"repInterval"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsArgs struct {
	NetworkId   pulumix.Input[int]    `pulumi:"networkId"`
	NetworkName pulumix.Input[string] `pulumi:"networkName"`
	RepInterval pulumix.Input[*int]   `pulumi:"repInterval"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput) NetworkId() pulumix.Output[int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings) int {
		return v.NetworkId
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput) NetworkName() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings) string {
		return v.NetworkName
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput) RepInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings) *int {
		return v.RepInterval
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings struct {
	OutputSdt           *string `pulumi:"outputSdt"`
	RepInterval         *int    `pulumi:"repInterval"`
	ServiceName         *string `pulumi:"serviceName"`
	ServiceProviderName *string `pulumi:"serviceProviderName"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsArgs struct {
	OutputSdt           pulumix.Input[*string] `pulumi:"outputSdt"`
	RepInterval         pulumix.Input[*int]    `pulumi:"repInterval"`
	ServiceName         pulumix.Input[*string] `pulumi:"serviceName"`
	ServiceProviderName pulumix.Input[*string] `pulumi:"serviceProviderName"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) OutputSdt() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings) *string {
		return v.OutputSdt
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) RepInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings) *int {
		return v.RepInterval
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) ServiceName() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings) *string {
		return v.ServiceName
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) ServiceProviderName() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings) *string {
		return v.ServiceProviderName
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings struct {
	RepInterval *int `pulumi:"repInterval"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsArgs struct {
	RepInterval pulumix.Input[*int] `pulumi:"repInterval"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput) RepInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings) *int {
		return v.RepInterval
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings struct {
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsArgs struct {
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettings struct {
	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier *string `pulumi:"nameModifier"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsArgs struct {
	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier pulumix.Input[*string] `pulumi:"nameModifier"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettings]{
		OutputState: o.OutputState,
	}
}

// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput) NameModifier() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettings) *string {
		return v.NameModifier
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings struct {
	H265PackagingType *string                                                                           `pulumi:"h265PackagingType"`
	HlsSettings       ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings `pulumi:"hlsSettings"`
	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier    *string `pulumi:"nameModifier"`
	SegmentModifier *string `pulumi:"segmentModifier"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsArgs struct {
	H265PackagingType pulumix.Input[*string]                                                                                `pulumi:"h265PackagingType"`
	HlsSettings       pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsArgs] `pulumi:"hlsSettings"`
	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier    pulumix.Input[*string] `pulumi:"nameModifier"`
	SegmentModifier pulumix.Input[*string] `pulumi:"segmentModifier"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput) H265PackagingType() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings) *string {
		return v.H265PackagingType
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput) HlsSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings {
		return v.HlsSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput]{OutputState: value.OutputState}
}

// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput) NameModifier() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings) *string {
		return v.NameModifier
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput) SegmentModifier() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings) *string {
		return v.SegmentModifier
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings struct {
	AudioOnlyHlsSettings    *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings    `pulumi:"audioOnlyHlsSettings"`
	Fmp4HlsSettings         *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings         `pulumi:"fmp4HlsSettings"`
	FrameCaptureHlsSettings *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings `pulumi:"frameCaptureHlsSettings"`
	StandardHlsSettings     *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings     `pulumi:"standardHlsSettings"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsArgs struct {
	AudioOnlyHlsSettings    pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsArgs]    `pulumi:"audioOnlyHlsSettings"`
	Fmp4HlsSettings         pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsArgs]         `pulumi:"fmp4HlsSettings"`
	FrameCaptureHlsSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsArgs] `pulumi:"frameCaptureHlsSettings"`
	StandardHlsSettings     pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsArgs]     `pulumi:"standardHlsSettings"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput) AudioOnlyHlsSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings {
		return v.AudioOnlyHlsSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput) Fmp4HlsSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings {
		return v.Fmp4HlsSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput) FrameCaptureHlsSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings {
		return v.FrameCaptureHlsSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput) StandardHlsSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings {
		return v.StandardHlsSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings struct {
	AudioGroupId   *string                                                                                                              `pulumi:"audioGroupId"`
	AudioOnlyImage *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage `pulumi:"audioOnlyImage"`
	AudioTrackType *string                                                                                                              `pulumi:"audioTrackType"`
	SegmentType    *string                                                                                                              `pulumi:"segmentType"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsArgs struct {
	AudioGroupId   pulumix.Input[*string]                                                                                                                  `pulumi:"audioGroupId"`
	AudioOnlyImage pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageArgs] `pulumi:"audioOnlyImage"`
	AudioTrackType pulumix.Input[*string]                                                                                                                  `pulumi:"audioTrackType"`
	SegmentType    pulumix.Input[*string]                                                                                                                  `pulumi:"segmentType"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput) AudioGroupId() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings) *string {
		return v.AudioGroupId
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput) AudioOnlyImage() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage {
		return v.AudioOnlyImage
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput) AudioTrackType() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings) *string {
		return v.AudioTrackType
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput) SegmentType() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings) *string {
		return v.SegmentType
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage struct {
	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `pulumi:"passwordParam"`
	// Path to a file accessible to the live stream.
	Uri string `pulumi:"uri"`
	// Username for destination.
	Username *string `pulumi:"username"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageArgs struct {
	// Key used to extract the password from EC2 Parameter store.
	PasswordParam pulumix.Input[*string] `pulumi:"passwordParam"`
	// Path to a file accessible to the live stream.
	Uri pulumix.Input[string] `pulumi:"uri"`
	// Username for destination.
	Username pulumix.Input[*string] `pulumi:"username"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage]{
		OutputState: o.OutputState,
	}
}

// Key used to extract the password from EC2 Parameter store.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput) PasswordParam() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage) *string {
		return v.PasswordParam
	})
}

// Path to a file accessible to the live stream.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput) Uri() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage) string {
		return v.Uri
	})
}

// Username for destination.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput) Username() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage) *string {
		return v.Username
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings struct {
	AudioRenditionSets    *string `pulumi:"audioRenditionSets"`
	NielsenId3Behavior    *string `pulumi:"nielsenId3Behavior"`
	TimedMetadataBehavior *string `pulumi:"timedMetadataBehavior"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsArgs struct {
	AudioRenditionSets    pulumix.Input[*string] `pulumi:"audioRenditionSets"`
	NielsenId3Behavior    pulumix.Input[*string] `pulumi:"nielsenId3Behavior"`
	TimedMetadataBehavior pulumix.Input[*string] `pulumi:"timedMetadataBehavior"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput) AudioRenditionSets() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings) *string {
		return v.AudioRenditionSets
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput) NielsenId3Behavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings) *string {
		return v.NielsenId3Behavior
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput) TimedMetadataBehavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings) *string {
		return v.TimedMetadataBehavior
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings struct {
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsArgs struct {
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings struct {
	AudioRenditionSets *string                                                                                                          `pulumi:"audioRenditionSets"`
	M3u8Settings       ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings `pulumi:"m3u8Settings"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsArgs struct {
	AudioRenditionSets pulumix.Input[*string]                                                                                                               `pulumi:"audioRenditionSets"`
	M3u8Settings       pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsArgs] `pulumi:"m3u8Settings"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput) AudioRenditionSets() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings) *string {
		return v.AudioRenditionSets
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput) M3u8Settings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings {
		return v.M3u8Settings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings struct {
	AudioFramesPerPes  *int    `pulumi:"audioFramesPerPes"`
	AudioPids          *string `pulumi:"audioPids"`
	EcmPid             *string `pulumi:"ecmPid"`
	NielsenId3Behavior *string `pulumi:"nielsenId3Behavior"`
	PatInterval        *int    `pulumi:"patInterval"`
	PcrControl         *string `pulumi:"pcrControl"`
	PcrPeriod          *int    `pulumi:"pcrPeriod"`
	PcrPid             *string `pulumi:"pcrPid"`
	PmtInterval        *int    `pulumi:"pmtInterval"`
	PmtPid             *string `pulumi:"pmtPid"`
	ProgramNum         *int    `pulumi:"programNum"`
	Scte35Behavior     *string `pulumi:"scte35Behavior"`
	// PID from which to read SCTE-35 messages.
	Scte35Pid             *string `pulumi:"scte35Pid"`
	TimedMetadataBehavior *string `pulumi:"timedMetadataBehavior"`
	TimedMetadataPid      *string `pulumi:"timedMetadataPid"`
	TransportStreamId     *int    `pulumi:"transportStreamId"`
	VideoPid              *string `pulumi:"videoPid"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsArgs struct {
	AudioFramesPerPes  pulumix.Input[*int]    `pulumi:"audioFramesPerPes"`
	AudioPids          pulumix.Input[*string] `pulumi:"audioPids"`
	EcmPid             pulumix.Input[*string] `pulumi:"ecmPid"`
	NielsenId3Behavior pulumix.Input[*string] `pulumi:"nielsenId3Behavior"`
	PatInterval        pulumix.Input[*int]    `pulumi:"patInterval"`
	PcrControl         pulumix.Input[*string] `pulumi:"pcrControl"`
	PcrPeriod          pulumix.Input[*int]    `pulumi:"pcrPeriod"`
	PcrPid             pulumix.Input[*string] `pulumi:"pcrPid"`
	PmtInterval        pulumix.Input[*int]    `pulumi:"pmtInterval"`
	PmtPid             pulumix.Input[*string] `pulumi:"pmtPid"`
	ProgramNum         pulumix.Input[*int]    `pulumi:"programNum"`
	Scte35Behavior     pulumix.Input[*string] `pulumi:"scte35Behavior"`
	// PID from which to read SCTE-35 messages.
	Scte35Pid             pulumix.Input[*string] `pulumi:"scte35Pid"`
	TimedMetadataBehavior pulumix.Input[*string] `pulumi:"timedMetadataBehavior"`
	TimedMetadataPid      pulumix.Input[*string] `pulumi:"timedMetadataPid"`
	TransportStreamId     pulumix.Input[*int]    `pulumi:"transportStreamId"`
	VideoPid              pulumix.Input[*string] `pulumi:"videoPid"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) AudioFramesPerPes() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *int {
		return v.AudioFramesPerPes
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) AudioPids() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *string {
		return v.AudioPids
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) EcmPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *string {
		return v.EcmPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) NielsenId3Behavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *string {
		return v.NielsenId3Behavior
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) PatInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *int {
		return v.PatInterval
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) PcrControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *string {
		return v.PcrControl
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) PcrPeriod() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *int {
		return v.PcrPeriod
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) PcrPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *string {
		return v.PcrPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) PmtInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *int {
		return v.PmtInterval
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) PmtPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *string {
		return v.PmtPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) ProgramNum() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *int {
		return v.ProgramNum
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) Scte35Behavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *string {
		return v.Scte35Behavior
	})
}

// PID from which to read SCTE-35 messages.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) Scte35Pid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *string {
		return v.Scte35Pid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) TimedMetadataBehavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *string {
		return v.TimedMetadataBehavior
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) TimedMetadataPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *string {
		return v.TimedMetadataPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) TransportStreamId() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *int {
		return v.TransportStreamId
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput) VideoPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings) *string {
		return v.VideoPid
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettings struct {
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsArgs struct {
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings struct {
	H265PackagingType *string `pulumi:"h265PackagingType"`
	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier *string `pulumi:"nameModifier"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsArgs struct {
	H265PackagingType pulumix.Input[*string] `pulumi:"h265PackagingType"`
	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier pulumix.Input[*string] `pulumi:"nameModifier"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput) H265PackagingType() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings) *string {
		return v.H265PackagingType
	})
}

// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput) NameModifier() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings) *string {
		return v.NameModifier
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettings struct {
	// Destination is a multiplex. See Destination for more details.
	Destination ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestination `pulumi:"destination"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsArgs struct {
	// Destination is a multiplex. See Destination for more details.
	Destination pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationArgs] `pulumi:"destination"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettings]{
		OutputState: o.OutputState,
	}
}

// Destination is a multiplex. See Destination for more details.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput) Destination() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestination, ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettings) ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestination {
		return v.Destination
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestination, ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestination struct {
	// Reference ID for the destination.
	DestinationRefId string `pulumi:"destinationRefId"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationArgs struct {
	// Reference ID for the destination.
	DestinationRefId pulumix.Input[string] `pulumi:"destinationRefId"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestination)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestination)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestination] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestination]{
		OutputState: o.OutputState,
	}
}

// Reference ID for the destination.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput) DestinationRefId() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestination](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestination) string {
		return v.DestinationRefId
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings struct {
	// Setting to allow self signed or verified RTMP certificates.
	CertificateMode *string `pulumi:"certificateMode"`
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *int `pulumi:"connectionRetryInterval"`
	// The RTMP endpoint excluding the stream name. See Destination for more details.
	Destination ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestination `pulumi:"destination"`
	// Number of retry attempts.
	NumRetries *int `pulumi:"numRetries"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs struct {
	// Setting to allow self signed or verified RTMP certificates.
	CertificateMode pulumix.Input[*string] `pulumi:"certificateMode"`
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval pulumix.Input[*int] `pulumi:"connectionRetryInterval"`
	// The RTMP endpoint excluding the stream name. See Destination for more details.
	Destination pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationArgs] `pulumi:"destination"`
	// Number of retry attempts.
	NumRetries pulumix.Input[*int] `pulumi:"numRetries"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings]{
		OutputState: o.OutputState,
	}
}

// Setting to allow self signed or verified RTMP certificates.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput) CertificateMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings) *string {
		return v.CertificateMode
	})
}

// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput) ConnectionRetryInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings) *int {
		return v.ConnectionRetryInterval
	})
}

// The RTMP endpoint excluding the stream name. See Destination for more details.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput) Destination() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestination, ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings) ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestination {
		return v.Destination
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestination, ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput]{OutputState: value.OutputState}
}

// Number of retry attempts.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput) NumRetries() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings) *int {
		return v.NumRetries
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestination struct {
	// Reference ID for the destination.
	DestinationRefId string `pulumi:"destinationRefId"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationArgs struct {
	// Reference ID for the destination.
	DestinationRefId pulumix.Input[string] `pulumi:"destinationRefId"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestination)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestination)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestination] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestination]{
		OutputState: o.OutputState,
	}
}

// Reference ID for the destination.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput) DestinationRefId() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestination](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestination) string {
		return v.DestinationRefId
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings struct {
	// UDP output buffering in milliseconds.
	BufferMsec *int `pulumi:"bufferMsec"`
	// UDP container settings. See Container Settings for more details.
	ContainerSettings ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettings `pulumi:"containerSettings"`
	// Destination address and port number for RTP or UDP packets. See Destination for more details.
	Destination       ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestination        `pulumi:"destination"`
	FecOutputSettings *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings `pulumi:"fecOutputSettings"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsArgs struct {
	// UDP output buffering in milliseconds.
	BufferMsec pulumix.Input[*int] `pulumi:"bufferMsec"`
	// UDP container settings. See Container Settings for more details.
	ContainerSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsArgs] `pulumi:"containerSettings"`
	// Destination address and port number for RTP or UDP packets. See Destination for more details.
	Destination       pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationArgs]       `pulumi:"destination"`
	FecOutputSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsArgs] `pulumi:"fecOutputSettings"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings]{
		OutputState: o.OutputState,
	}
}

// UDP output buffering in milliseconds.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput) BufferMsec() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings) *int {
		return v.BufferMsec
	})
}

// UDP container settings. See Container Settings for more details.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput) ContainerSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettings {
		return v.ContainerSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput]{OutputState: value.OutputState}
}

// Destination address and port number for RTP or UDP packets. See Destination for more details.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput) Destination() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestination, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestination {
		return v.Destination
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestination, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput) FecOutputSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings {
		return v.FecOutputSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettings struct {
	// M2ts Settings. See [M2ts Settings](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-medialive-channel-m2tssettings.html) for more details.
	M2tsSettings *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings `pulumi:"m2tsSettings"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsArgs struct {
	// M2ts Settings. See [M2ts Settings](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-medialive-channel-m2tssettings.html) for more details.
	M2tsSettings pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsArgs] `pulumi:"m2tsSettings"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettings]{
		OutputState: o.OutputState,
	}
}

// M2ts Settings. See [M2ts Settings](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-medialive-channel-m2tssettings.html) for more details.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput) M2tsSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings {
		return v.M2tsSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings struct {
	AbsentInputAudioBehavior *string `pulumi:"absentInputAudioBehavior"`
	Arib                     *string `pulumi:"arib"`
	AribCaptionsPid          *string `pulumi:"aribCaptionsPid"`
	AribCaptionsPidControl   *string `pulumi:"aribCaptionsPidControl"`
	AudioBufferModel         *string `pulumi:"audioBufferModel"`
	AudioFramesPerPes        *int    `pulumi:"audioFramesPerPes"`
	AudioPids                *string `pulumi:"audioPids"`
	AudioStreamType          *string `pulumi:"audioStreamType"`
	// Average bitrate in bits/second.
	Bitrate            *int                                                                                                               `pulumi:"bitrate"`
	BufferModel        *string                                                                                                            `pulumi:"bufferModel"`
	CcDescriptor       *string                                                                                                            `pulumi:"ccDescriptor"`
	DvbNitSettings     *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings `pulumi:"dvbNitSettings"`
	DvbSdtSettings     *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings `pulumi:"dvbSdtSettings"`
	DvbSubPids         *string                                                                                                            `pulumi:"dvbSubPids"`
	DvbTdtSettings     *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings `pulumi:"dvbTdtSettings"`
	DvbTeletextPid     *string                                                                                                            `pulumi:"dvbTeletextPid"`
	Ebif               *string                                                                                                            `pulumi:"ebif"`
	EbpAudioInterval   *string                                                                                                            `pulumi:"ebpAudioInterval"`
	EbpLookaheadMs     *int                                                                                                               `pulumi:"ebpLookaheadMs"`
	EbpPlacement       *string                                                                                                            `pulumi:"ebpPlacement"`
	EcmPid             *string                                                                                                            `pulumi:"ecmPid"`
	EsRateInPes        *string                                                                                                            `pulumi:"esRateInPes"`
	EtvPlatformPid     *string                                                                                                            `pulumi:"etvPlatformPid"`
	EtvSignalPid       *string                                                                                                            `pulumi:"etvSignalPid"`
	FragmentTime       *float64                                                                                                           `pulumi:"fragmentTime"`
	Klv                *string                                                                                                            `pulumi:"klv"`
	KlvDataPids        *string                                                                                                            `pulumi:"klvDataPids"`
	NielsenId3Behavior *string                                                                                                            `pulumi:"nielsenId3Behavior"`
	NullPacketBitrate  *float64                                                                                                           `pulumi:"nullPacketBitrate"`
	PatInterval        *int                                                                                                               `pulumi:"patInterval"`
	PcrControl         *string                                                                                                            `pulumi:"pcrControl"`
	PcrPeriod          *int                                                                                                               `pulumi:"pcrPeriod"`
	PcrPid             *string                                                                                                            `pulumi:"pcrPid"`
	PmtInterval        *int                                                                                                               `pulumi:"pmtInterval"`
	PmtPid             *string                                                                                                            `pulumi:"pmtPid"`
	ProgramNum         *int                                                                                                               `pulumi:"programNum"`
	RateMode           *string                                                                                                            `pulumi:"rateMode"`
	Scte27Pids         *string                                                                                                            `pulumi:"scte27Pids"`
	Scte35Control      *string                                                                                                            `pulumi:"scte35Control"`
	// PID from which to read SCTE-35 messages.
	Scte35Pid             *string  `pulumi:"scte35Pid"`
	SegmentationMarkers   *string  `pulumi:"segmentationMarkers"`
	SegmentationStyle     *string  `pulumi:"segmentationStyle"`
	SegmentationTime      *float64 `pulumi:"segmentationTime"`
	TimedMetadataBehavior *string  `pulumi:"timedMetadataBehavior"`
	TimedMetadataPid      *string  `pulumi:"timedMetadataPid"`
	TransportStreamId     *int     `pulumi:"transportStreamId"`
	VideoPid              *string  `pulumi:"videoPid"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsArgs struct {
	AbsentInputAudioBehavior pulumix.Input[*string] `pulumi:"absentInputAudioBehavior"`
	Arib                     pulumix.Input[*string] `pulumi:"arib"`
	AribCaptionsPid          pulumix.Input[*string] `pulumi:"aribCaptionsPid"`
	AribCaptionsPidControl   pulumix.Input[*string] `pulumi:"aribCaptionsPidControl"`
	AudioBufferModel         pulumix.Input[*string] `pulumi:"audioBufferModel"`
	AudioFramesPerPes        pulumix.Input[*int]    `pulumi:"audioFramesPerPes"`
	AudioPids                pulumix.Input[*string] `pulumi:"audioPids"`
	AudioStreamType          pulumix.Input[*string] `pulumi:"audioStreamType"`
	// Average bitrate in bits/second.
	Bitrate            pulumix.Input[*int]                                                                                                                   `pulumi:"bitrate"`
	BufferModel        pulumix.Input[*string]                                                                                                                `pulumi:"bufferModel"`
	CcDescriptor       pulumix.Input[*string]                                                                                                                `pulumi:"ccDescriptor"`
	DvbNitSettings     pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsArgs] `pulumi:"dvbNitSettings"`
	DvbSdtSettings     pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsArgs] `pulumi:"dvbSdtSettings"`
	DvbSubPids         pulumix.Input[*string]                                                                                                                `pulumi:"dvbSubPids"`
	DvbTdtSettings     pulumix.Input[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsArgs] `pulumi:"dvbTdtSettings"`
	DvbTeletextPid     pulumix.Input[*string]                                                                                                                `pulumi:"dvbTeletextPid"`
	Ebif               pulumix.Input[*string]                                                                                                                `pulumi:"ebif"`
	EbpAudioInterval   pulumix.Input[*string]                                                                                                                `pulumi:"ebpAudioInterval"`
	EbpLookaheadMs     pulumix.Input[*int]                                                                                                                   `pulumi:"ebpLookaheadMs"`
	EbpPlacement       pulumix.Input[*string]                                                                                                                `pulumi:"ebpPlacement"`
	EcmPid             pulumix.Input[*string]                                                                                                                `pulumi:"ecmPid"`
	EsRateInPes        pulumix.Input[*string]                                                                                                                `pulumi:"esRateInPes"`
	EtvPlatformPid     pulumix.Input[*string]                                                                                                                `pulumi:"etvPlatformPid"`
	EtvSignalPid       pulumix.Input[*string]                                                                                                                `pulumi:"etvSignalPid"`
	FragmentTime       pulumix.Input[*float64]                                                                                                               `pulumi:"fragmentTime"`
	Klv                pulumix.Input[*string]                                                                                                                `pulumi:"klv"`
	KlvDataPids        pulumix.Input[*string]                                                                                                                `pulumi:"klvDataPids"`
	NielsenId3Behavior pulumix.Input[*string]                                                                                                                `pulumi:"nielsenId3Behavior"`
	NullPacketBitrate  pulumix.Input[*float64]                                                                                                               `pulumi:"nullPacketBitrate"`
	PatInterval        pulumix.Input[*int]                                                                                                                   `pulumi:"patInterval"`
	PcrControl         pulumix.Input[*string]                                                                                                                `pulumi:"pcrControl"`
	PcrPeriod          pulumix.Input[*int]                                                                                                                   `pulumi:"pcrPeriod"`
	PcrPid             pulumix.Input[*string]                                                                                                                `pulumi:"pcrPid"`
	PmtInterval        pulumix.Input[*int]                                                                                                                   `pulumi:"pmtInterval"`
	PmtPid             pulumix.Input[*string]                                                                                                                `pulumi:"pmtPid"`
	ProgramNum         pulumix.Input[*int]                                                                                                                   `pulumi:"programNum"`
	RateMode           pulumix.Input[*string]                                                                                                                `pulumi:"rateMode"`
	Scte27Pids         pulumix.Input[*string]                                                                                                                `pulumi:"scte27Pids"`
	Scte35Control      pulumix.Input[*string]                                                                                                                `pulumi:"scte35Control"`
	// PID from which to read SCTE-35 messages.
	Scte35Pid             pulumix.Input[*string]  `pulumi:"scte35Pid"`
	SegmentationMarkers   pulumix.Input[*string]  `pulumi:"segmentationMarkers"`
	SegmentationStyle     pulumix.Input[*string]  `pulumi:"segmentationStyle"`
	SegmentationTime      pulumix.Input[*float64] `pulumi:"segmentationTime"`
	TimedMetadataBehavior pulumix.Input[*string]  `pulumi:"timedMetadataBehavior"`
	TimedMetadataPid      pulumix.Input[*string]  `pulumi:"timedMetadataPid"`
	TransportStreamId     pulumix.Input[*int]     `pulumi:"transportStreamId"`
	VideoPid              pulumix.Input[*string]  `pulumi:"videoPid"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) AbsentInputAudioBehavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.AbsentInputAudioBehavior
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) Arib() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.Arib
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) AribCaptionsPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.AribCaptionsPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) AribCaptionsPidControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.AribCaptionsPidControl
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) AudioBufferModel() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.AudioBufferModel
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) AudioFramesPerPes() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.AudioFramesPerPes
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) AudioPids() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.AudioPids
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) AudioStreamType() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.AudioStreamType
	})
}

// Average bitrate in bits/second.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) Bitrate() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.Bitrate
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) BufferModel() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.BufferModel
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) CcDescriptor() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.CcDescriptor
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) DvbNitSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings {
		return v.DvbNitSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) DvbSdtSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings {
		return v.DvbSdtSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) DvbSubPids() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.DvbSubPids
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) DvbTdtSettings() pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings {
		return v.DvbTdtSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings, ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) DvbTeletextPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.DvbTeletextPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) Ebif() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.Ebif
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) EbpAudioInterval() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.EbpAudioInterval
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) EbpLookaheadMs() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.EbpLookaheadMs
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) EbpPlacement() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.EbpPlacement
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) EcmPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.EcmPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) EsRateInPes() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.EsRateInPes
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) EtvPlatformPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.EtvPlatformPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) EtvSignalPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.EtvSignalPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) FragmentTime() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *float64 {
		return v.FragmentTime
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) Klv() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.Klv
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) KlvDataPids() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.KlvDataPids
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) NielsenId3Behavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.NielsenId3Behavior
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) NullPacketBitrate() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *float64 {
		return v.NullPacketBitrate
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) PatInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.PatInterval
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) PcrControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.PcrControl
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) PcrPeriod() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.PcrPeriod
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) PcrPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.PcrPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) PmtInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.PmtInterval
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) PmtPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.PmtPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) ProgramNum() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.ProgramNum
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) RateMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.RateMode
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) Scte27Pids() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.Scte27Pids
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) Scte35Control() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.Scte35Control
	})
}

// PID from which to read SCTE-35 messages.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) Scte35Pid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.Scte35Pid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) SegmentationMarkers() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.SegmentationMarkers
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) SegmentationStyle() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.SegmentationStyle
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) SegmentationTime() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *float64 {
		return v.SegmentationTime
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) TimedMetadataBehavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.TimedMetadataBehavior
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) TimedMetadataPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.TimedMetadataPid
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) TransportStreamId() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *int {
		return v.TransportStreamId
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput) VideoPid() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings) *string {
		return v.VideoPid
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings struct {
	NetworkId   int    `pulumi:"networkId"`
	NetworkName string `pulumi:"networkName"`
	RepInterval *int   `pulumi:"repInterval"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsArgs struct {
	NetworkId   pulumix.Input[int]    `pulumi:"networkId"`
	NetworkName pulumix.Input[string] `pulumi:"networkName"`
	RepInterval pulumix.Input[*int]   `pulumi:"repInterval"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput) NetworkId() pulumix.Output[int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings) int {
		return v.NetworkId
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput) NetworkName() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings) string {
		return v.NetworkName
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput) RepInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings) *int {
		return v.RepInterval
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings struct {
	OutputSdt           *string `pulumi:"outputSdt"`
	RepInterval         *int    `pulumi:"repInterval"`
	ServiceName         *string `pulumi:"serviceName"`
	ServiceProviderName *string `pulumi:"serviceProviderName"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsArgs struct {
	OutputSdt           pulumix.Input[*string] `pulumi:"outputSdt"`
	RepInterval         pulumix.Input[*int]    `pulumi:"repInterval"`
	ServiceName         pulumix.Input[*string] `pulumi:"serviceName"`
	ServiceProviderName pulumix.Input[*string] `pulumi:"serviceProviderName"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) OutputSdt() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings) *string {
		return v.OutputSdt
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) RepInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings) *int {
		return v.RepInterval
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) ServiceName() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings) *string {
		return v.ServiceName
	})
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput) ServiceProviderName() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings) *string {
		return v.ServiceProviderName
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings struct {
	RepInterval *int `pulumi:"repInterval"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsArgs struct {
	RepInterval pulumix.Input[*int] `pulumi:"repInterval"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput) RepInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings) *int {
		return v.RepInterval
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestination struct {
	// Reference ID for the destination.
	DestinationRefId string `pulumi:"destinationRefId"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationArgs struct {
	// Reference ID for the destination.
	DestinationRefId pulumix.Input[string] `pulumi:"destinationRefId"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestination)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestination)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestination] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestination]{
		OutputState: o.OutputState,
	}
}

// Reference ID for the destination.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput) DestinationRefId() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestination](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestination) string {
		return v.DestinationRefId
	})
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings struct {
	// The height of the FEC protection matrix.
	ColumnDepth *int `pulumi:"columnDepth"`
	// Enables column only or column and row based FEC.
	IncludeFec *string `pulumi:"includeFec"`
	// The width of the FEC protection matrix.
	RowLength *int `pulumi:"rowLength"`
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsArgs struct {
	// The height of the FEC protection matrix.
	ColumnDepth pulumix.Input[*int] `pulumi:"columnDepth"`
	// Enables column only or column and row based FEC.
	IncludeFec pulumix.Input[*string] `pulumi:"includeFec"`
	// The width of the FEC protection matrix.
	RowLength pulumix.Input[*int] `pulumi:"rowLength"`
}

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput {
	return i.ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsArgs) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput)
}

func (i *ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput() ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput) ToChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings] {
	return pulumix.Output[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings]{
		OutputState: o.OutputState,
	}
}

// The height of the FEC protection matrix.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput) ColumnDepth() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings) *int {
		return v.ColumnDepth
	})
}

// Enables column only or column and row based FEC.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput) IncludeFec() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings) *string {
		return v.IncludeFec
	})
}

// The width of the FEC protection matrix.
func (o ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput) RowLength() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings](o, func(v ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings) *int {
		return v.RowLength
	})
}

type ChannelEncoderSettingsTimecodeConfig struct {
	// The source for the timecode that will be associated with the events outputs.
	Source string `pulumi:"source"`
	// Threshold in frames beyond which output timecode is resynchronized to the input timecode.
	SyncThreshold *int `pulumi:"syncThreshold"`
}

type ChannelEncoderSettingsTimecodeConfigArgs struct {
	// The source for the timecode that will be associated with the events outputs.
	Source pulumix.Input[string] `pulumi:"source"`
	// Threshold in frames beyond which output timecode is resynchronized to the input timecode.
	SyncThreshold pulumix.Input[*int] `pulumi:"syncThreshold"`
}

func (ChannelEncoderSettingsTimecodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsTimecodeConfig)(nil)).Elem()
}

func (i ChannelEncoderSettingsTimecodeConfigArgs) ToChannelEncoderSettingsTimecodeConfigOutput() ChannelEncoderSettingsTimecodeConfigOutput {
	return i.ToChannelEncoderSettingsTimecodeConfigOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsTimecodeConfigArgs) ToChannelEncoderSettingsTimecodeConfigOutputWithContext(ctx context.Context) ChannelEncoderSettingsTimecodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsTimecodeConfigOutput)
}

func (i *ChannelEncoderSettingsTimecodeConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsTimecodeConfigArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsTimecodeConfigOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsTimecodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsTimecodeConfig)(nil)).Elem()
}

func (o ChannelEncoderSettingsTimecodeConfigOutput) ToChannelEncoderSettingsTimecodeConfigOutput() ChannelEncoderSettingsTimecodeConfigOutput {
	return o
}

func (o ChannelEncoderSettingsTimecodeConfigOutput) ToChannelEncoderSettingsTimecodeConfigOutputWithContext(ctx context.Context) ChannelEncoderSettingsTimecodeConfigOutput {
	return o
}

func (o ChannelEncoderSettingsTimecodeConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsTimecodeConfig] {
	return pulumix.Output[ChannelEncoderSettingsTimecodeConfig]{
		OutputState: o.OutputState,
	}
}

// The source for the timecode that will be associated with the events outputs.
func (o ChannelEncoderSettingsTimecodeConfigOutput) Source() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsTimecodeConfig](o, func(v ChannelEncoderSettingsTimecodeConfig) string { return v.Source })
}

// Threshold in frames beyond which output timecode is resynchronized to the input timecode.
func (o ChannelEncoderSettingsTimecodeConfigOutput) SyncThreshold() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsTimecodeConfig](o, func(v ChannelEncoderSettingsTimecodeConfig) *int { return v.SyncThreshold })
}

type ChannelEncoderSettingsVideoDescription struct {
	// The video codec settings. See Video Codec Settings for more details.
	CodecSettings *ChannelEncoderSettingsVideoDescriptionCodecSettings `pulumi:"codecSettings"`
	// Output video height in pixels.
	Height *int `pulumi:"height"`
	// The name of the video description.
	Name string `pulumi:"name"`
	// Indicate how to respond to the AFD values that might be in the input video.
	RespondToAfd *string `pulumi:"respondToAfd"`
	// Behavior on how to scale.
	ScalingBehavior *string `pulumi:"scalingBehavior"`
	// Changes the strength of the anti-alias filter used for scaling.
	Sharpness *int `pulumi:"sharpness"`
	// Output video width in pixels.
	Width *int `pulumi:"width"`
}

type ChannelEncoderSettingsVideoDescriptionArgs struct {
	// The video codec settings. See Video Codec Settings for more details.
	CodecSettings pulumix.Input[*ChannelEncoderSettingsVideoDescriptionCodecSettingsArgs] `pulumi:"codecSettings"`
	// Output video height in pixels.
	Height pulumix.Input[*int] `pulumi:"height"`
	// The name of the video description.
	Name pulumix.Input[string] `pulumi:"name"`
	// Indicate how to respond to the AFD values that might be in the input video.
	RespondToAfd pulumix.Input[*string] `pulumi:"respondToAfd"`
	// Behavior on how to scale.
	ScalingBehavior pulumix.Input[*string] `pulumi:"scalingBehavior"`
	// Changes the strength of the anti-alias filter used for scaling.
	Sharpness pulumix.Input[*int] `pulumi:"sharpness"`
	// Output video width in pixels.
	Width pulumix.Input[*int] `pulumi:"width"`
}

func (ChannelEncoderSettingsVideoDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescription)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionArgs) ToChannelEncoderSettingsVideoDescriptionOutput() ChannelEncoderSettingsVideoDescriptionOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionArgs) ToChannelEncoderSettingsVideoDescriptionOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescription)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionOutput) ToChannelEncoderSettingsVideoDescriptionOutput() ChannelEncoderSettingsVideoDescriptionOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionOutput) ToChannelEncoderSettingsVideoDescriptionOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescription] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescription]{
		OutputState: o.OutputState,
	}
}

// The video codec settings. See Video Codec Settings for more details.
func (o ChannelEncoderSettingsVideoDescriptionOutput) CodecSettings() pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsVideoDescription](o, func(v ChannelEncoderSettingsVideoDescription) *ChannelEncoderSettingsVideoDescriptionCodecSettings {
		return v.CodecSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput]{OutputState: value.OutputState}
}

// Output video height in pixels.
func (o ChannelEncoderSettingsVideoDescriptionOutput) Height() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescription](o, func(v ChannelEncoderSettingsVideoDescription) *int { return v.Height })
}

// The name of the video description.
func (o ChannelEncoderSettingsVideoDescriptionOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescription](o, func(v ChannelEncoderSettingsVideoDescription) string { return v.Name })
}

// Indicate how to respond to the AFD values that might be in the input video.
func (o ChannelEncoderSettingsVideoDescriptionOutput) RespondToAfd() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescription](o, func(v ChannelEncoderSettingsVideoDescription) *string { return v.RespondToAfd })
}

// Behavior on how to scale.
func (o ChannelEncoderSettingsVideoDescriptionOutput) ScalingBehavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescription](o, func(v ChannelEncoderSettingsVideoDescription) *string { return v.ScalingBehavior })
}

// Changes the strength of the anti-alias filter used for scaling.
func (o ChannelEncoderSettingsVideoDescriptionOutput) Sharpness() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescription](o, func(v ChannelEncoderSettingsVideoDescription) *int { return v.Sharpness })
}

// Output video width in pixels.
func (o ChannelEncoderSettingsVideoDescriptionOutput) Width() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescription](o, func(v ChannelEncoderSettingsVideoDescription) *int { return v.Width })
}

type ChannelEncoderSettingsVideoDescriptionCodecSettings struct {
	// Frame capture settings. See Frame Capture Settings for more details.
	FrameCaptureSettings *ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings `pulumi:"frameCaptureSettings"`
	// H264 settings. See H264 Settings for more details.
	H264Settings *ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings `pulumi:"h264Settings"`
	H265Settings *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings `pulumi:"h265Settings"`
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsArgs struct {
	// Frame capture settings. See Frame Capture Settings for more details.
	FrameCaptureSettings pulumix.Input[*ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs] `pulumi:"frameCaptureSettings"`
	// H264 settings. See H264 Settings for more details.
	H264Settings pulumix.Input[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs] `pulumi:"h264Settings"`
	H265Settings pulumix.Input[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsArgs] `pulumi:"h265Settings"`
}

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionCodecSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionCodecSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionCodecSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettings] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettings]{
		OutputState: o.OutputState,
	}
}

// Frame capture settings. See Frame Capture Settings for more details.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput) FrameCaptureSettings() pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettings) *ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings {
		return v.FrameCaptureSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput]{OutputState: value.OutputState}
}

// H264 settings. See H264 Settings for more details.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput) H264Settings() pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettings) *ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings {
		return v.H264Settings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput) H265Settings() pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettings) *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings {
		return v.H265Settings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings struct {
	// The frequency at which to capture frames for inclusion in the output.
	CaptureInterval *int `pulumi:"captureInterval"`
	// Unit for the frame capture interval.
	CaptureIntervalUnits *string `pulumi:"captureIntervalUnits"`
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs struct {
	// The frequency at which to capture frames for inclusion in the output.
	CaptureInterval pulumix.Input[*int] `pulumi:"captureInterval"`
	// Unit for the frame capture interval.
	CaptureIntervalUnits pulumix.Input[*string] `pulumi:"captureIntervalUnits"`
}

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings]{
		OutputState: o.OutputState,
	}
}

// The frequency at which to capture frames for inclusion in the output.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput) CaptureInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings) *int {
		return v.CaptureInterval
	})
}

// Unit for the frame capture interval.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput) CaptureIntervalUnits() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings) *string {
		return v.CaptureIntervalUnits
	})
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings struct {
	// Enables or disables adaptive quantization.
	AdaptiveQuantization *string `pulumi:"adaptiveQuantization"`
	// Indicates that AFD values will be written into the output stream.
	AfdSignaling *string `pulumi:"afdSignaling"`
	// Average bitrate in bits/second.
	Bitrate    *int `pulumi:"bitrate"`
	BufFillPct *int `pulumi:"bufFillPct"`
	// Size of buffer in bits.
	BufSize *int `pulumi:"bufSize"`
	// Includes color space metadata in the output.
	ColorMetadata *string `pulumi:"colorMetadata"`
	// Entropy encoding mode.
	EntropyEncoding *string `pulumi:"entropyEncoding"`
	// Filters to apply to an encode. See H264 Filter Settings for more details.
	FilterSettings *ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettings `pulumi:"filterSettings"`
	// Four bit AFD value to write on all frames of video in the output stream.
	FixedAfd  *string `pulumi:"fixedAfd"`
	FlickerAq *string `pulumi:"flickerAq"`
	// Controls whether coding is performed on a field basis or on a frame basis.
	ForceFieldPictures *string `pulumi:"forceFieldPictures"`
	// Indicates how the output video frame rate is specified.
	FramerateControl *string `pulumi:"framerateControl"`
	// Framerate denominator.
	FramerateDenominator *int `pulumi:"framerateDenominator"`
	// Framerate numerator.
	FramerateNumerator *int `pulumi:"framerateNumerator"`
	// GOP-B reference.
	GopBReference *string `pulumi:"gopBReference"`
	// Frequency of closed GOPs.
	GopClosedCadence *int `pulumi:"gopClosedCadence"`
	// Number of B-frames between reference frames.
	GopNumBFrames *int `pulumi:"gopNumBFrames"`
	// GOP size in units of either frames of seconds per `gopSizeUnits`.
	GopSize *float64 `pulumi:"gopSize"`
	// Indicates if the `gopSize` is specified in frames or seconds.
	GopSizeUnits *string `pulumi:"gopSizeUnits"`
	// H264 level.
	Level *string `pulumi:"level"`
	// Amount of lookahead.
	LookAheadRateControl *string `pulumi:"lookAheadRateControl"`
	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	MaxBitrate   *int `pulumi:"maxBitrate"`
	MinIInterval *int `pulumi:"minIInterval"`
	// Number of reference frames to use.
	NumRefFrames *int `pulumi:"numRefFrames"`
	// Indicates how the output pixel aspect ratio is specified.
	ParControl *string `pulumi:"parControl"`
	// Pixel Aspect Ratio denominator.
	ParDenominator *int `pulumi:"parDenominator"`
	// Pixel Aspect Ratio numerator.
	ParNumerator *int `pulumi:"parNumerator"`
	// AAC profile.
	Profile *string `pulumi:"profile"`
	// Quality level.
	QualityLevel *string `pulumi:"qualityLevel"`
	// Controls the target quality for the video encode.
	QvbrQualityLevel *int `pulumi:"qvbrQualityLevel"`
	// The rate control mode.
	RateControlMode *string `pulumi:"rateControlMode"`
	// Sets the scan type of the output.
	ScanType *string `pulumi:"scanType"`
	// Scene change detection.
	SceneChangeDetect *string `pulumi:"sceneChangeDetect"`
	// Number of slices per picture.
	Slices *int `pulumi:"slices"`
	// Softness.
	Softness *int `pulumi:"softness"`
	// Makes adjustments within each frame based on spatial variation of content complexity.
	SpatialAq *string `pulumi:"spatialAq"`
	// Subgop length.
	SubgopLength *string `pulumi:"subgopLength"`
	// Produces a bitstream compliant with SMPTE RP-2027.
	Syntax *string `pulumi:"syntax"`
	// Makes adjustments within each frame based on temporal variation of content complexity.
	TemporalAq *string `pulumi:"temporalAq"`
	// Determines how timecodes should be inserted into the video elementary stream.
	TimecodeInsertion *string `pulumi:"timecodeInsertion"`
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs struct {
	// Enables or disables adaptive quantization.
	AdaptiveQuantization pulumix.Input[*string] `pulumi:"adaptiveQuantization"`
	// Indicates that AFD values will be written into the output stream.
	AfdSignaling pulumix.Input[*string] `pulumi:"afdSignaling"`
	// Average bitrate in bits/second.
	Bitrate    pulumix.Input[*int] `pulumi:"bitrate"`
	BufFillPct pulumix.Input[*int] `pulumi:"bufFillPct"`
	// Size of buffer in bits.
	BufSize pulumix.Input[*int] `pulumi:"bufSize"`
	// Includes color space metadata in the output.
	ColorMetadata pulumix.Input[*string] `pulumi:"colorMetadata"`
	// Entropy encoding mode.
	EntropyEncoding pulumix.Input[*string] `pulumi:"entropyEncoding"`
	// Filters to apply to an encode. See H264 Filter Settings for more details.
	FilterSettings pulumix.Input[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsArgs] `pulumi:"filterSettings"`
	// Four bit AFD value to write on all frames of video in the output stream.
	FixedAfd  pulumix.Input[*string] `pulumi:"fixedAfd"`
	FlickerAq pulumix.Input[*string] `pulumi:"flickerAq"`
	// Controls whether coding is performed on a field basis or on a frame basis.
	ForceFieldPictures pulumix.Input[*string] `pulumi:"forceFieldPictures"`
	// Indicates how the output video frame rate is specified.
	FramerateControl pulumix.Input[*string] `pulumi:"framerateControl"`
	// Framerate denominator.
	FramerateDenominator pulumix.Input[*int] `pulumi:"framerateDenominator"`
	// Framerate numerator.
	FramerateNumerator pulumix.Input[*int] `pulumi:"framerateNumerator"`
	// GOP-B reference.
	GopBReference pulumix.Input[*string] `pulumi:"gopBReference"`
	// Frequency of closed GOPs.
	GopClosedCadence pulumix.Input[*int] `pulumi:"gopClosedCadence"`
	// Number of B-frames between reference frames.
	GopNumBFrames pulumix.Input[*int] `pulumi:"gopNumBFrames"`
	// GOP size in units of either frames of seconds per `gopSizeUnits`.
	GopSize pulumix.Input[*float64] `pulumi:"gopSize"`
	// Indicates if the `gopSize` is specified in frames or seconds.
	GopSizeUnits pulumix.Input[*string] `pulumi:"gopSizeUnits"`
	// H264 level.
	Level pulumix.Input[*string] `pulumi:"level"`
	// Amount of lookahead.
	LookAheadRateControl pulumix.Input[*string] `pulumi:"lookAheadRateControl"`
	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	MaxBitrate   pulumix.Input[*int] `pulumi:"maxBitrate"`
	MinIInterval pulumix.Input[*int] `pulumi:"minIInterval"`
	// Number of reference frames to use.
	NumRefFrames pulumix.Input[*int] `pulumi:"numRefFrames"`
	// Indicates how the output pixel aspect ratio is specified.
	ParControl pulumix.Input[*string] `pulumi:"parControl"`
	// Pixel Aspect Ratio denominator.
	ParDenominator pulumix.Input[*int] `pulumi:"parDenominator"`
	// Pixel Aspect Ratio numerator.
	ParNumerator pulumix.Input[*int] `pulumi:"parNumerator"`
	// AAC profile.
	Profile pulumix.Input[*string] `pulumi:"profile"`
	// Quality level.
	QualityLevel pulumix.Input[*string] `pulumi:"qualityLevel"`
	// Controls the target quality for the video encode.
	QvbrQualityLevel pulumix.Input[*int] `pulumi:"qvbrQualityLevel"`
	// The rate control mode.
	RateControlMode pulumix.Input[*string] `pulumi:"rateControlMode"`
	// Sets the scan type of the output.
	ScanType pulumix.Input[*string] `pulumi:"scanType"`
	// Scene change detection.
	SceneChangeDetect pulumix.Input[*string] `pulumi:"sceneChangeDetect"`
	// Number of slices per picture.
	Slices pulumix.Input[*int] `pulumi:"slices"`
	// Softness.
	Softness pulumix.Input[*int] `pulumi:"softness"`
	// Makes adjustments within each frame based on spatial variation of content complexity.
	SpatialAq pulumix.Input[*string] `pulumi:"spatialAq"`
	// Subgop length.
	SubgopLength pulumix.Input[*string] `pulumi:"subgopLength"`
	// Produces a bitstream compliant with SMPTE RP-2027.
	Syntax pulumix.Input[*string] `pulumi:"syntax"`
	// Makes adjustments within each frame based on temporal variation of content complexity.
	TemporalAq pulumix.Input[*string] `pulumi:"temporalAq"`
	// Determines how timecodes should be inserted into the video elementary stream.
	TimecodeInsertion pulumix.Input[*string] `pulumi:"timecodeInsertion"`
}

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings]{
		OutputState: o.OutputState,
	}
}

// Enables or disables adaptive quantization.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) AdaptiveQuantization() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string {
		return v.AdaptiveQuantization
	})
}

// Indicates that AFD values will be written into the output stream.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) AfdSignaling() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string { return v.AfdSignaling })
}

// Average bitrate in bits/second.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) Bitrate() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *int { return v.Bitrate })
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) BufFillPct() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *int { return v.BufFillPct })
}

// Size of buffer in bits.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) BufSize() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *int { return v.BufSize })
}

// Includes color space metadata in the output.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) ColorMetadata() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string {
		return v.ColorMetadata
	})
}

// Entropy encoding mode.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) EntropyEncoding() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string {
		return v.EntropyEncoding
	})
}

// Filters to apply to an encode. See H264 Filter Settings for more details.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) FilterSettings() pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettings {
		return v.FilterSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput]{OutputState: value.OutputState}
}

// Four bit AFD value to write on all frames of video in the output stream.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) FixedAfd() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string { return v.FixedAfd })
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) FlickerAq() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string { return v.FlickerAq })
}

// Controls whether coding is performed on a field basis or on a frame basis.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) ForceFieldPictures() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string {
		return v.ForceFieldPictures
	})
}

// Indicates how the output video frame rate is specified.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) FramerateControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string {
		return v.FramerateControl
	})
}

// Framerate denominator.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) FramerateDenominator() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *int {
		return v.FramerateDenominator
	})
}

// Framerate numerator.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) FramerateNumerator() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *int {
		return v.FramerateNumerator
	})
}

// GOP-B reference.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) GopBReference() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string {
		return v.GopBReference
	})
}

// Frequency of closed GOPs.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) GopClosedCadence() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *int {
		return v.GopClosedCadence
	})
}

// Number of B-frames between reference frames.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) GopNumBFrames() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *int { return v.GopNumBFrames })
}

// GOP size in units of either frames of seconds per `gopSizeUnits`.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) GopSize() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *float64 { return v.GopSize })
}

// Indicates if the `gopSize` is specified in frames or seconds.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) GopSizeUnits() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string { return v.GopSizeUnits })
}

// H264 level.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) Level() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string { return v.Level })
}

// Amount of lookahead.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) LookAheadRateControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string {
		return v.LookAheadRateControl
	})
}

// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) MaxBitrate() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *int { return v.MaxBitrate })
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) MinIInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *int { return v.MinIInterval })
}

// Number of reference frames to use.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) NumRefFrames() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *int { return v.NumRefFrames })
}

// Indicates how the output pixel aspect ratio is specified.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) ParControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string { return v.ParControl })
}

// Pixel Aspect Ratio denominator.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) ParDenominator() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *int { return v.ParDenominator })
}

// Pixel Aspect Ratio numerator.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) ParNumerator() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *int { return v.ParNumerator })
}

// AAC profile.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) Profile() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string { return v.Profile })
}

// Quality level.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) QualityLevel() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string { return v.QualityLevel })
}

// Controls the target quality for the video encode.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) QvbrQualityLevel() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *int {
		return v.QvbrQualityLevel
	})
}

// The rate control mode.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) RateControlMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string {
		return v.RateControlMode
	})
}

// Sets the scan type of the output.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) ScanType() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string { return v.ScanType })
}

// Scene change detection.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) SceneChangeDetect() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string {
		return v.SceneChangeDetect
	})
}

// Number of slices per picture.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) Slices() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *int { return v.Slices })
}

// Softness.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) Softness() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *int { return v.Softness })
}

// Makes adjustments within each frame based on spatial variation of content complexity.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) SpatialAq() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string { return v.SpatialAq })
}

// Subgop length.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) SubgopLength() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string { return v.SubgopLength })
}

// Produces a bitstream compliant with SMPTE RP-2027.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) Syntax() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string { return v.Syntax })
}

// Makes adjustments within each frame based on temporal variation of content complexity.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) TemporalAq() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string { return v.TemporalAq })
}

// Determines how timecodes should be inserted into the video elementary stream.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput) TimecodeInsertion() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings) *string {
		return v.TimecodeInsertion
	})
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettings struct {
	// Temporal filter settings. See Temporal Filter Settings
	TemporalFilterSettings *ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings `pulumi:"temporalFilterSettings"`
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsArgs struct {
	// Temporal filter settings. See Temporal Filter Settings
	TemporalFilterSettings pulumix.Input[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsArgs] `pulumi:"temporalFilterSettings"`
}

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettings] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettings]{
		OutputState: o.OutputState,
	}
}

// Temporal filter settings. See Temporal Filter Settings
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput) TemporalFilterSettings() pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettings) *ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings {
		return v.TemporalFilterSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings struct {
	// Post filter sharpening.
	PostFilterSharpening *string `pulumi:"postFilterSharpening"`
	// Filter strength.
	Strength *string `pulumi:"strength"`
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsArgs struct {
	// Post filter sharpening.
	PostFilterSharpening pulumix.Input[*string] `pulumi:"postFilterSharpening"`
	// Filter strength.
	Strength pulumix.Input[*string] `pulumi:"strength"`
}

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings]{
		OutputState: o.OutputState,
	}
}

// Post filter sharpening.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput) PostFilterSharpening() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings) *string {
		return v.PostFilterSharpening
	})
}

// Filter strength.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput) Strength() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings) *string {
		return v.Strength
	})
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings struct {
	// Enables or disables adaptive quantization.
	AdaptiveQuantization *string `pulumi:"adaptiveQuantization"`
	// Indicates that AFD values will be written into the output stream.
	AfdSignaling *string `pulumi:"afdSignaling"`
	// Whether or not EML should insert an Alternative Transfer Function SEI message.
	AlternativeTransferFunction *string `pulumi:"alternativeTransferFunction"`
	// Average bitrate in bits/second.
	Bitrate int `pulumi:"bitrate"`
	// Size of buffer in bits.
	BufSize *int `pulumi:"bufSize"`
	// Includes color space metadata in the output.
	ColorMetadata *string `pulumi:"colorMetadata"`
	// Define the color metadata for the output. H265 Color Space Settings for more details.
	ColorSpaceSettings *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings `pulumi:"colorSpaceSettings"`
	// Filters to apply to an encode. See H264 Filter Settings for more details.
	FilterSettings *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings `pulumi:"filterSettings"`
	// Four bit AFD value to write on all frames of video in the output stream.
	FixedAfd  *string `pulumi:"fixedAfd"`
	FlickerAq *string `pulumi:"flickerAq"`
	// Framerate denominator.
	FramerateDenominator int `pulumi:"framerateDenominator"`
	// Framerate numerator.
	FramerateNumerator int `pulumi:"framerateNumerator"`
	// Frequency of closed GOPs.
	GopClosedCadence *int `pulumi:"gopClosedCadence"`
	// GOP size in units of either frames of seconds per `gopSizeUnits`.
	GopSize *float64 `pulumi:"gopSize"`
	// Indicates if the `gopSize` is specified in frames or seconds.
	GopSizeUnits *string `pulumi:"gopSizeUnits"`
	// H264 level.
	Level *string `pulumi:"level"`
	// Amount of lookahead.
	LookAheadRateControl *string `pulumi:"lookAheadRateControl"`
	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	MaxBitrate   *int `pulumi:"maxBitrate"`
	MinIInterval *int `pulumi:"minIInterval"`
	// Pixel Aspect Ratio denominator.
	ParDenominator *int `pulumi:"parDenominator"`
	// Pixel Aspect Ratio numerator.
	ParNumerator *int `pulumi:"parNumerator"`
	// AAC profile.
	Profile *string `pulumi:"profile"`
	// Controls the target quality for the video encode.
	QvbrQualityLevel *int `pulumi:"qvbrQualityLevel"`
	// The rate control mode.
	RateControlMode *string `pulumi:"rateControlMode"`
	// Sets the scan type of the output.
	ScanType *string `pulumi:"scanType"`
	// Scene change detection.
	SceneChangeDetect *string `pulumi:"sceneChangeDetect"`
	// Number of slices per picture.
	Slices *int `pulumi:"slices"`
	// Set the H265 tier in the output.
	Tier *string `pulumi:"tier"`
	// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
	TimecodeBurninSettings *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings `pulumi:"timecodeBurninSettings"`
	// Determines how timecodes should be inserted into the video elementary stream.
	TimecodeInsertion *string `pulumi:"timecodeInsertion"`
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsArgs struct {
	// Enables or disables adaptive quantization.
	AdaptiveQuantization pulumix.Input[*string] `pulumi:"adaptiveQuantization"`
	// Indicates that AFD values will be written into the output stream.
	AfdSignaling pulumix.Input[*string] `pulumi:"afdSignaling"`
	// Whether or not EML should insert an Alternative Transfer Function SEI message.
	AlternativeTransferFunction pulumix.Input[*string] `pulumi:"alternativeTransferFunction"`
	// Average bitrate in bits/second.
	Bitrate pulumix.Input[int] `pulumi:"bitrate"`
	// Size of buffer in bits.
	BufSize pulumix.Input[*int] `pulumi:"bufSize"`
	// Includes color space metadata in the output.
	ColorMetadata pulumix.Input[*string] `pulumi:"colorMetadata"`
	// Define the color metadata for the output. H265 Color Space Settings for more details.
	ColorSpaceSettings pulumix.Input[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsArgs] `pulumi:"colorSpaceSettings"`
	// Filters to apply to an encode. See H264 Filter Settings for more details.
	FilterSettings pulumix.Input[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsArgs] `pulumi:"filterSettings"`
	// Four bit AFD value to write on all frames of video in the output stream.
	FixedAfd  pulumix.Input[*string] `pulumi:"fixedAfd"`
	FlickerAq pulumix.Input[*string] `pulumi:"flickerAq"`
	// Framerate denominator.
	FramerateDenominator pulumix.Input[int] `pulumi:"framerateDenominator"`
	// Framerate numerator.
	FramerateNumerator pulumix.Input[int] `pulumi:"framerateNumerator"`
	// Frequency of closed GOPs.
	GopClosedCadence pulumix.Input[*int] `pulumi:"gopClosedCadence"`
	// GOP size in units of either frames of seconds per `gopSizeUnits`.
	GopSize pulumix.Input[*float64] `pulumi:"gopSize"`
	// Indicates if the `gopSize` is specified in frames or seconds.
	GopSizeUnits pulumix.Input[*string] `pulumi:"gopSizeUnits"`
	// H264 level.
	Level pulumix.Input[*string] `pulumi:"level"`
	// Amount of lookahead.
	LookAheadRateControl pulumix.Input[*string] `pulumi:"lookAheadRateControl"`
	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	MaxBitrate   pulumix.Input[*int] `pulumi:"maxBitrate"`
	MinIInterval pulumix.Input[*int] `pulumi:"minIInterval"`
	// Pixel Aspect Ratio denominator.
	ParDenominator pulumix.Input[*int] `pulumi:"parDenominator"`
	// Pixel Aspect Ratio numerator.
	ParNumerator pulumix.Input[*int] `pulumi:"parNumerator"`
	// AAC profile.
	Profile pulumix.Input[*string] `pulumi:"profile"`
	// Controls the target quality for the video encode.
	QvbrQualityLevel pulumix.Input[*int] `pulumi:"qvbrQualityLevel"`
	// The rate control mode.
	RateControlMode pulumix.Input[*string] `pulumi:"rateControlMode"`
	// Sets the scan type of the output.
	ScanType pulumix.Input[*string] `pulumi:"scanType"`
	// Scene change detection.
	SceneChangeDetect pulumix.Input[*string] `pulumi:"sceneChangeDetect"`
	// Number of slices per picture.
	Slices pulumix.Input[*int] `pulumi:"slices"`
	// Set the H265 tier in the output.
	Tier pulumix.Input[*string] `pulumi:"tier"`
	// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
	TimecodeBurninSettings pulumix.Input[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsArgs] `pulumi:"timecodeBurninSettings"`
	// Determines how timecodes should be inserted into the video elementary stream.
	TimecodeInsertion pulumix.Input[*string] `pulumi:"timecodeInsertion"`
}

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings]{
		OutputState: o.OutputState,
	}
}

// Enables or disables adaptive quantization.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) AdaptiveQuantization() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *string {
		return v.AdaptiveQuantization
	})
}

// Indicates that AFD values will be written into the output stream.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) AfdSignaling() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *string { return v.AfdSignaling })
}

// Whether or not EML should insert an Alternative Transfer Function SEI message.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) AlternativeTransferFunction() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *string {
		return v.AlternativeTransferFunction
	})
}

// Average bitrate in bits/second.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) Bitrate() pulumix.Output[int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) int { return v.Bitrate })
}

// Size of buffer in bits.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) BufSize() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *int { return v.BufSize })
}

// Includes color space metadata in the output.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) ColorMetadata() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *string {
		return v.ColorMetadata
	})
}

// Define the color metadata for the output. H265 Color Space Settings for more details.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) ColorSpaceSettings() pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings {
		return v.ColorSpaceSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput]{OutputState: value.OutputState}
}

// Filters to apply to an encode. See H264 Filter Settings for more details.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) FilterSettings() pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings {
		return v.FilterSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput]{OutputState: value.OutputState}
}

// Four bit AFD value to write on all frames of video in the output stream.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) FixedAfd() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *string { return v.FixedAfd })
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) FlickerAq() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *string { return v.FlickerAq })
}

// Framerate denominator.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) FramerateDenominator() pulumix.Output[int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) int {
		return v.FramerateDenominator
	})
}

// Framerate numerator.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) FramerateNumerator() pulumix.Output[int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) int {
		return v.FramerateNumerator
	})
}

// Frequency of closed GOPs.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) GopClosedCadence() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *int {
		return v.GopClosedCadence
	})
}

// GOP size in units of either frames of seconds per `gopSizeUnits`.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) GopSize() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *float64 { return v.GopSize })
}

// Indicates if the `gopSize` is specified in frames or seconds.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) GopSizeUnits() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *string { return v.GopSizeUnits })
}

// H264 level.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) Level() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *string { return v.Level })
}

// Amount of lookahead.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) LookAheadRateControl() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *string {
		return v.LookAheadRateControl
	})
}

// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) MaxBitrate() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *int { return v.MaxBitrate })
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) MinIInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *int { return v.MinIInterval })
}

// Pixel Aspect Ratio denominator.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) ParDenominator() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *int { return v.ParDenominator })
}

// Pixel Aspect Ratio numerator.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) ParNumerator() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *int { return v.ParNumerator })
}

// AAC profile.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) Profile() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *string { return v.Profile })
}

// Controls the target quality for the video encode.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) QvbrQualityLevel() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *int {
		return v.QvbrQualityLevel
	})
}

// The rate control mode.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) RateControlMode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *string {
		return v.RateControlMode
	})
}

// Sets the scan type of the output.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) ScanType() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *string { return v.ScanType })
}

// Scene change detection.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) SceneChangeDetect() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *string {
		return v.SceneChangeDetect
	})
}

// Number of slices per picture.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) Slices() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *int { return v.Slices })
}

// Set the H265 tier in the output.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) Tier() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *string { return v.Tier })
}

// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) TimecodeBurninSettings() pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings {
		return v.TimecodeBurninSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput]{OutputState: value.OutputState}
}

// Determines how timecodes should be inserted into the video elementary stream.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput) TimecodeInsertion() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings) *string {
		return v.TimecodeInsertion
	})
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings struct {
	// Sets the colorspace metadata to be passed through.
	ColorSpacePassthroughSettings *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings `pulumi:"colorSpacePassthroughSettings"`
	// Set the colorspace to Dolby Vision81.
	DolbyVision81Settings *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings `pulumi:"dolbyVision81Settings"`
	// Set the colorspace to be HDR10. See H265 HDR10 Settings for more details.
	Hdr10Settings *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings `pulumi:"hdr10Settings"`
	// Set the colorspace to Rec. 601.
	Rec601Settings *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601Settings `pulumi:"rec601Settings"`
	// Set the colorspace to Rec. 709.
	Rec709Settings *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709Settings `pulumi:"rec709Settings"`
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsArgs struct {
	// Sets the colorspace metadata to be passed through.
	ColorSpacePassthroughSettings pulumix.Input[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsArgs] `pulumi:"colorSpacePassthroughSettings"`
	// Set the colorspace to Dolby Vision81.
	DolbyVision81Settings pulumix.Input[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsArgs] `pulumi:"dolbyVision81Settings"`
	// Set the colorspace to be HDR10. See H265 HDR10 Settings for more details.
	Hdr10Settings pulumix.Input[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsArgs] `pulumi:"hdr10Settings"`
	// Set the colorspace to Rec. 601.
	Rec601Settings pulumix.Input[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsArgs] `pulumi:"rec601Settings"`
	// Set the colorspace to Rec. 709.
	Rec709Settings pulumix.Input[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsArgs] `pulumi:"rec709Settings"`
}

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings]{
		OutputState: o.OutputState,
	}
}

// Sets the colorspace metadata to be passed through.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput) ColorSpacePassthroughSettings() pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings) *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings {
		return v.ColorSpacePassthroughSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutput]{OutputState: value.OutputState}
}

// Set the colorspace to Dolby Vision81.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput) DolbyVision81Settings() pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings) *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings {
		return v.DolbyVision81Settings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutput]{OutputState: value.OutputState}
}

// Set the colorspace to be HDR10. See H265 HDR10 Settings for more details.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput) Hdr10Settings() pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings) *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings {
		return v.Hdr10Settings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput]{OutputState: value.OutputState}
}

// Set the colorspace to Rec. 601.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput) Rec601Settings() pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601Settings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings) *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601Settings {
		return v.Rec601Settings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601Settings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutput]{OutputState: value.OutputState}
}

// Set the colorspace to Rec. 709.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput) Rec709Settings() pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709Settings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings) *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709Settings {
		return v.Rec709Settings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709Settings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings struct {
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsArgs struct {
}

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings struct {
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsArgs struct {
}

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings struct {
	// Sets the MaxCLL value for HDR10.
	MaxCll *int `pulumi:"maxCll"`
	// Sets the MaxFALL value for HDR10.
	MaxFall *int `pulumi:"maxFall"`
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsArgs struct {
	// Sets the MaxCLL value for HDR10.
	MaxCll pulumix.Input[*int] `pulumi:"maxCll"`
	// Sets the MaxFALL value for HDR10.
	MaxFall pulumix.Input[*int] `pulumi:"maxFall"`
}

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings]{
		OutputState: o.OutputState,
	}
}

// Sets the MaxCLL value for HDR10.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput) MaxCll() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings) *int {
		return v.MaxCll
	})
}

// Sets the MaxFALL value for HDR10.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput) MaxFall() pulumix.Output[*int] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings) *int {
		return v.MaxFall
	})
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601Settings struct {
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsArgs struct {
}

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601Settings)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601Settings)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601Settings] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601Settings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709Settings struct {
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsArgs struct {
}

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709Settings)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709Settings)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709Settings] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709Settings]{
		OutputState: o.OutputState,
	}
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings struct {
	// Temporal filter settings. See Temporal Filter Settings
	TemporalFilterSettings *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings `pulumi:"temporalFilterSettings"`
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsArgs struct {
	// Temporal filter settings. See Temporal Filter Settings
	TemporalFilterSettings pulumix.Input[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsArgs] `pulumi:"temporalFilterSettings"`
}

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings]{
		OutputState: o.OutputState,
	}
}

// Temporal filter settings. See Temporal Filter Settings
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput) TemporalFilterSettings() pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput] {
	value := pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings) *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings {
		return v.TemporalFilterSettings
	})
	return pulumix.GPtrOutput[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings, ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput]{OutputState: value.OutputState}
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings struct {
	// Post filter sharpening.
	PostFilterSharpening *string `pulumi:"postFilterSharpening"`
	// Filter strength.
	Strength *string `pulumi:"strength"`
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsArgs struct {
	// Post filter sharpening.
	PostFilterSharpening pulumix.Input[*string] `pulumi:"postFilterSharpening"`
	// Filter strength.
	Strength pulumix.Input[*string] `pulumi:"strength"`
}

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings]{
		OutputState: o.OutputState,
	}
}

// Post filter sharpening.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput) PostFilterSharpening() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings) *string {
		return v.PostFilterSharpening
	})
}

// Filter strength.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput) Strength() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings) *string {
		return v.Strength
	})
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings struct {
	// Set a prefix on the burned in timecode.
	Prefix *string `pulumi:"prefix"`
	// Sets the size of the burned in timecode.
	TimecodeBurninFontSize *string `pulumi:"timecodeBurninFontSize"`
	// Sets the position of the burned in timecode.
	TimecodeBurninPosition *string `pulumi:"timecodeBurninPosition"`
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsArgs struct {
	// Set a prefix on the burned in timecode.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Sets the size of the burned in timecode.
	TimecodeBurninFontSize pulumix.Input[*string] `pulumi:"timecodeBurninFontSize"`
	// Sets the position of the burned in timecode.
	TimecodeBurninPosition pulumix.Input[*string] `pulumi:"timecodeBurninPosition"`
}

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings)(nil)).Elem()
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput {
	return i.ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutputWithContext(context.Background())
}

func (i ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsArgs) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput)
}

func (i *ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput struct{ *pulumi.OutputState }

func (ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings)(nil)).Elem()
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput() ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput) ToChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutputWithContext(ctx context.Context) ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput {
	return o
}

func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings] {
	return pulumix.Output[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings]{
		OutputState: o.OutputState,
	}
}

// Set a prefix on the burned in timecode.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings) *string {
		return v.Prefix
	})
}

// Sets the size of the burned in timecode.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput) TimecodeBurninFontSize() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings) *string {
		return v.TimecodeBurninFontSize
	})
}

// Sets the position of the burned in timecode.
func (o ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput) TimecodeBurninPosition() pulumix.Output[*string] {
	return pulumix.Apply[ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings](o, func(v ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings) *string {
		return v.TimecodeBurninPosition
	})
}

type ChannelInputAttachment struct {
	AutomaticInputFailoverSettings *ChannelInputAttachmentAutomaticInputFailoverSettings `pulumi:"automaticInputFailoverSettings"`
	// User-specified name for the attachment.
	InputAttachmentName string `pulumi:"inputAttachmentName"`
	// The ID of the input.
	InputId string `pulumi:"inputId"`
	// Settings of an input. See Input Settings for more details
	InputSettings *ChannelInputAttachmentInputSettings `pulumi:"inputSettings"`
}

type ChannelInputAttachmentArgs struct {
	AutomaticInputFailoverSettings pulumix.Input[*ChannelInputAttachmentAutomaticInputFailoverSettingsArgs] `pulumi:"automaticInputFailoverSettings"`
	// User-specified name for the attachment.
	InputAttachmentName pulumix.Input[string] `pulumi:"inputAttachmentName"`
	// The ID of the input.
	InputId pulumix.Input[string] `pulumi:"inputId"`
	// Settings of an input. See Input Settings for more details
	InputSettings pulumix.Input[*ChannelInputAttachmentInputSettingsArgs] `pulumi:"inputSettings"`
}

func (ChannelInputAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachment)(nil)).Elem()
}

func (i ChannelInputAttachmentArgs) ToChannelInputAttachmentOutput() ChannelInputAttachmentOutput {
	return i.ToChannelInputAttachmentOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentArgs) ToChannelInputAttachmentOutputWithContext(ctx context.Context) ChannelInputAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentOutput)
}

func (i *ChannelInputAttachmentArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachment)(nil)).Elem()
}

func (o ChannelInputAttachmentOutput) ToChannelInputAttachmentOutput() ChannelInputAttachmentOutput {
	return o
}

func (o ChannelInputAttachmentOutput) ToChannelInputAttachmentOutputWithContext(ctx context.Context) ChannelInputAttachmentOutput {
	return o
}

func (o ChannelInputAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachment] {
	return pulumix.Output[ChannelInputAttachment]{
		OutputState: o.OutputState,
	}
}

func (o ChannelInputAttachmentOutput) AutomaticInputFailoverSettings() pulumix.GPtrOutput[ChannelInputAttachmentAutomaticInputFailoverSettings, ChannelInputAttachmentAutomaticInputFailoverSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachment](o, func(v ChannelInputAttachment) *ChannelInputAttachmentAutomaticInputFailoverSettings {
		return v.AutomaticInputFailoverSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentAutomaticInputFailoverSettings, ChannelInputAttachmentAutomaticInputFailoverSettingsOutput]{OutputState: value.OutputState}
}

// User-specified name for the attachment.
func (o ChannelInputAttachmentOutput) InputAttachmentName() pulumix.Output[string] {
	return pulumix.Apply[ChannelInputAttachment](o, func(v ChannelInputAttachment) string { return v.InputAttachmentName })
}

// The ID of the input.
func (o ChannelInputAttachmentOutput) InputId() pulumix.Output[string] {
	return pulumix.Apply[ChannelInputAttachment](o, func(v ChannelInputAttachment) string { return v.InputId })
}

// Settings of an input. See Input Settings for more details
func (o ChannelInputAttachmentOutput) InputSettings() pulumix.GPtrOutput[ChannelInputAttachmentInputSettings, ChannelInputAttachmentInputSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachment](o, func(v ChannelInputAttachment) *ChannelInputAttachmentInputSettings { return v.InputSettings })
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettings, ChannelInputAttachmentInputSettingsOutput]{OutputState: value.OutputState}
}

type ChannelInputAttachmentAutomaticInputFailoverSettings struct {
	ErrorClearTimeMsec *int                                                                    `pulumi:"errorClearTimeMsec"`
	FailoverConditions []ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverCondition `pulumi:"failoverConditions"`
	InputPreference    *string                                                                 `pulumi:"inputPreference"`
	SecondaryInputId   string                                                                  `pulumi:"secondaryInputId"`
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsArgs struct {
	ErrorClearTimeMsec pulumix.Input[*int]                                                                         `pulumi:"errorClearTimeMsec"`
	FailoverConditions pulumix.Input[[]*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionArgs] `pulumi:"failoverConditions"`
	InputPreference    pulumix.Input[*string]                                                                      `pulumi:"inputPreference"`
	SecondaryInputId   pulumix.Input[string]                                                                       `pulumi:"secondaryInputId"`
}

func (ChannelInputAttachmentAutomaticInputFailoverSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentAutomaticInputFailoverSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentAutomaticInputFailoverSettingsArgs) ToChannelInputAttachmentAutomaticInputFailoverSettingsOutput() ChannelInputAttachmentAutomaticInputFailoverSettingsOutput {
	return i.ToChannelInputAttachmentAutomaticInputFailoverSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentAutomaticInputFailoverSettingsArgs) ToChannelInputAttachmentAutomaticInputFailoverSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentAutomaticInputFailoverSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentAutomaticInputFailoverSettingsOutput)
}

func (i *ChannelInputAttachmentAutomaticInputFailoverSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentAutomaticInputFailoverSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentAutomaticInputFailoverSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentAutomaticInputFailoverSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsOutput) ToChannelInputAttachmentAutomaticInputFailoverSettingsOutput() ChannelInputAttachmentAutomaticInputFailoverSettingsOutput {
	return o
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsOutput) ToChannelInputAttachmentAutomaticInputFailoverSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentAutomaticInputFailoverSettingsOutput {
	return o
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentAutomaticInputFailoverSettings] {
	return pulumix.Output[ChannelInputAttachmentAutomaticInputFailoverSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsOutput) ErrorClearTimeMsec() pulumix.Output[*int] {
	return pulumix.Apply[ChannelInputAttachmentAutomaticInputFailoverSettings](o, func(v ChannelInputAttachmentAutomaticInputFailoverSettings) *int { return v.ErrorClearTimeMsec })
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsOutput) FailoverConditions() pulumix.GArrayOutput[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverCondition, ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput] {
	value := pulumix.Apply[ChannelInputAttachmentAutomaticInputFailoverSettings](o, func(v ChannelInputAttachmentAutomaticInputFailoverSettings) []ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverCondition {
		return v.FailoverConditions
	})
	return pulumix.GArrayOutput[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverCondition, ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput]{OutputState: value.OutputState}
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsOutput) InputPreference() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentAutomaticInputFailoverSettings](o, func(v ChannelInputAttachmentAutomaticInputFailoverSettings) *string { return v.InputPreference })
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsOutput) SecondaryInputId() pulumix.Output[string] {
	return pulumix.Apply[ChannelInputAttachmentAutomaticInputFailoverSettings](o, func(v ChannelInputAttachmentAutomaticInputFailoverSettings) string { return v.SecondaryInputId })
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverCondition struct {
	FailoverConditionSettings *ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings `pulumi:"failoverConditionSettings"`
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionArgs struct {
	FailoverConditionSettings pulumix.Input[*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsArgs] `pulumi:"failoverConditionSettings"`
}

func (ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverCondition)(nil)).Elem()
}

func (i ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionArgs) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput() ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput {
	return i.ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionArgs) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutputWithContext(ctx context.Context) ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput)
}

func (i *ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverCondition)(nil)).Elem()
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput() ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput {
	return o
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutputWithContext(ctx context.Context) ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput {
	return o
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverCondition] {
	return pulumix.Output[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverCondition]{
		OutputState: o.OutputState,
	}
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput) FailoverConditionSettings() pulumix.GPtrOutput[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings, ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverCondition](o, func(v ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverCondition) *ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings {
		return v.FailoverConditionSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings, ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput]{OutputState: value.OutputState}
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings struct {
	AudioSilenceSettings *ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings `pulumi:"audioSilenceSettings"`
	InputLossSettings    *ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings    `pulumi:"inputLossSettings"`
	VideoBlackSettings   *ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings   `pulumi:"videoBlackSettings"`
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsArgs struct {
	AudioSilenceSettings pulumix.Input[*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs] `pulumi:"audioSilenceSettings"`
	InputLossSettings    pulumix.Input[*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsArgs]    `pulumi:"inputLossSettings"`
	VideoBlackSettings   pulumix.Input[*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsArgs]   `pulumi:"videoBlackSettings"`
}

func (ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsArgs) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput() ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput {
	return i.ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsArgs) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput)
}

func (i *ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput() ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput {
	return o
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput {
	return o
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings] {
	return pulumix.Output[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput) AudioSilenceSettings() pulumix.GPtrOutput[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings, ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings](o, func(v ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings) *ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings {
		return v.AudioSilenceSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings, ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput) InputLossSettings() pulumix.GPtrOutput[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings, ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings](o, func(v ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings) *ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings {
		return v.InputLossSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings, ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput]{OutputState: value.OutputState}
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput) VideoBlackSettings() pulumix.GPtrOutput[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings, ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings](o, func(v ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings) *ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings {
		return v.VideoBlackSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings, ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput]{OutputState: value.OutputState}
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings struct {
	// The name of the audio selector used as the source for this AudioDescription.
	AudioSelectorName         string `pulumi:"audioSelectorName"`
	AudioSilenceThresholdMsec *int   `pulumi:"audioSilenceThresholdMsec"`
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs struct {
	// The name of the audio selector used as the source for this AudioDescription.
	AudioSelectorName         pulumix.Input[string] `pulumi:"audioSelectorName"`
	AudioSilenceThresholdMsec pulumix.Input[*int]   `pulumi:"audioSilenceThresholdMsec"`
}

func (ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput() ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput {
	return i.ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput)
}

func (i *ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput() ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings] {
	return pulumix.Output[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings]{
		OutputState: o.OutputState,
	}
}

// The name of the audio selector used as the source for this AudioDescription.
func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput) AudioSelectorName() pulumix.Output[string] {
	return pulumix.Apply[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings](o, func(v ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings) string {
		return v.AudioSelectorName
	})
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput) AudioSilenceThresholdMsec() pulumix.Output[*int] {
	return pulumix.Apply[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings](o, func(v ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings) *int {
		return v.AudioSilenceThresholdMsec
	})
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings struct {
	InputLossThresholdMsec *int `pulumi:"inputLossThresholdMsec"`
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsArgs struct {
	InputLossThresholdMsec pulumix.Input[*int] `pulumi:"inputLossThresholdMsec"`
}

func (ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsArgs) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput() ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput {
	return i.ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsArgs) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput)
}

func (i *ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput() ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput {
	return o
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput {
	return o
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings] {
	return pulumix.Output[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput) InputLossThresholdMsec() pulumix.Output[*int] {
	return pulumix.Apply[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings](o, func(v ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings) *int {
		return v.InputLossThresholdMsec
	})
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings struct {
	BlackDetectThreshold    *float64 `pulumi:"blackDetectThreshold"`
	VideoBlackThresholdMsec *int     `pulumi:"videoBlackThresholdMsec"`
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsArgs struct {
	BlackDetectThreshold    pulumix.Input[*float64] `pulumi:"blackDetectThreshold"`
	VideoBlackThresholdMsec pulumix.Input[*int]     `pulumi:"videoBlackThresholdMsec"`
}

func (ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsArgs) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput() ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput {
	return i.ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsArgs) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput)
}

func (i *ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput() ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput {
	return o
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput) ToChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput {
	return o
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings] {
	return pulumix.Output[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput) BlackDetectThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings](o, func(v ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings) *float64 {
		return v.BlackDetectThreshold
	})
}

func (o ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput) VideoBlackThresholdMsec() pulumix.Output[*int] {
	return pulumix.Apply[ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings](o, func(v ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings) *int {
		return v.VideoBlackThresholdMsec
	})
}

type ChannelInputAttachmentInputSettings struct {
	AudioSelectors   []ChannelInputAttachmentInputSettingsAudioSelector   `pulumi:"audioSelectors"`
	CaptionSelectors []ChannelInputAttachmentInputSettingsCaptionSelector `pulumi:"captionSelectors"`
	// Enable or disable the deblock filter when filtering.
	DeblockFilter *string `pulumi:"deblockFilter"`
	// Enable or disable the denoise filter when filtering.
	DenoiseFilter *string `pulumi:"denoiseFilter"`
	// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
	FilterStrength *int `pulumi:"filterStrength"`
	// Turns on the filter for the input.
	InputFilter *string `pulumi:"inputFilter"`
	// Input settings. See Network Input Settings for more details.
	NetworkInputSettings *ChannelInputAttachmentInputSettingsNetworkInputSettings `pulumi:"networkInputSettings"`
	// PID from which to read SCTE-35 messages.
	Scte35Pid *int `pulumi:"scte35Pid"`
	// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in the input.
	Smpte2038DataPreference *string `pulumi:"smpte2038DataPreference"`
	// Loop input if it is a file.
	SourceEndBehavior *string                                           `pulumi:"sourceEndBehavior"`
	VideoSelector     *ChannelInputAttachmentInputSettingsVideoSelector `pulumi:"videoSelector"`
}

type ChannelInputAttachmentInputSettingsArgs struct {
	AudioSelectors   pulumix.Input[[]*ChannelInputAttachmentInputSettingsAudioSelectorArgs]   `pulumi:"audioSelectors"`
	CaptionSelectors pulumix.Input[[]*ChannelInputAttachmentInputSettingsCaptionSelectorArgs] `pulumi:"captionSelectors"`
	// Enable or disable the deblock filter when filtering.
	DeblockFilter pulumix.Input[*string] `pulumi:"deblockFilter"`
	// Enable or disable the denoise filter when filtering.
	DenoiseFilter pulumix.Input[*string] `pulumi:"denoiseFilter"`
	// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
	FilterStrength pulumix.Input[*int] `pulumi:"filterStrength"`
	// Turns on the filter for the input.
	InputFilter pulumix.Input[*string] `pulumi:"inputFilter"`
	// Input settings. See Network Input Settings for more details.
	NetworkInputSettings pulumix.Input[*ChannelInputAttachmentInputSettingsNetworkInputSettingsArgs] `pulumi:"networkInputSettings"`
	// PID from which to read SCTE-35 messages.
	Scte35Pid pulumix.Input[*int] `pulumi:"scte35Pid"`
	// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in the input.
	Smpte2038DataPreference pulumix.Input[*string] `pulumi:"smpte2038DataPreference"`
	// Loop input if it is a file.
	SourceEndBehavior pulumix.Input[*string]                                               `pulumi:"sourceEndBehavior"`
	VideoSelector     pulumix.Input[*ChannelInputAttachmentInputSettingsVideoSelectorArgs] `pulumi:"videoSelector"`
}

func (ChannelInputAttachmentInputSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsArgs) ToChannelInputAttachmentInputSettingsOutput() ChannelInputAttachmentInputSettingsOutput {
	return i.ToChannelInputAttachmentInputSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsArgs) ToChannelInputAttachmentInputSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsOutput)
}

func (i *ChannelInputAttachmentInputSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsOutput) ToChannelInputAttachmentInputSettingsOutput() ChannelInputAttachmentInputSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsOutput) ToChannelInputAttachmentInputSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettings] {
	return pulumix.Output[ChannelInputAttachmentInputSettings]{
		OutputState: o.OutputState,
	}
}

func (o ChannelInputAttachmentInputSettingsOutput) AudioSelectors() pulumix.GArrayOutput[ChannelInputAttachmentInputSettingsAudioSelector, ChannelInputAttachmentInputSettingsAudioSelectorOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettings](o, func(v ChannelInputAttachmentInputSettings) []ChannelInputAttachmentInputSettingsAudioSelector {
		return v.AudioSelectors
	})
	return pulumix.GArrayOutput[ChannelInputAttachmentInputSettingsAudioSelector, ChannelInputAttachmentInputSettingsAudioSelectorOutput]{OutputState: value.OutputState}
}

func (o ChannelInputAttachmentInputSettingsOutput) CaptionSelectors() pulumix.GArrayOutput[ChannelInputAttachmentInputSettingsCaptionSelector, ChannelInputAttachmentInputSettingsCaptionSelectorOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettings](o, func(v ChannelInputAttachmentInputSettings) []ChannelInputAttachmentInputSettingsCaptionSelector {
		return v.CaptionSelectors
	})
	return pulumix.GArrayOutput[ChannelInputAttachmentInputSettingsCaptionSelector, ChannelInputAttachmentInputSettingsCaptionSelectorOutput]{OutputState: value.OutputState}
}

// Enable or disable the deblock filter when filtering.
func (o ChannelInputAttachmentInputSettingsOutput) DeblockFilter() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettings](o, func(v ChannelInputAttachmentInputSettings) *string { return v.DeblockFilter })
}

// Enable or disable the denoise filter when filtering.
func (o ChannelInputAttachmentInputSettingsOutput) DenoiseFilter() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettings](o, func(v ChannelInputAttachmentInputSettings) *string { return v.DenoiseFilter })
}

// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
func (o ChannelInputAttachmentInputSettingsOutput) FilterStrength() pulumix.Output[*int] {
	return pulumix.Apply[ChannelInputAttachmentInputSettings](o, func(v ChannelInputAttachmentInputSettings) *int { return v.FilterStrength })
}

// Turns on the filter for the input.
func (o ChannelInputAttachmentInputSettingsOutput) InputFilter() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettings](o, func(v ChannelInputAttachmentInputSettings) *string { return v.InputFilter })
}

// Input settings. See Network Input Settings for more details.
func (o ChannelInputAttachmentInputSettingsOutput) NetworkInputSettings() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsNetworkInputSettings, ChannelInputAttachmentInputSettingsNetworkInputSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettings](o, func(v ChannelInputAttachmentInputSettings) *ChannelInputAttachmentInputSettingsNetworkInputSettings {
		return v.NetworkInputSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsNetworkInputSettings, ChannelInputAttachmentInputSettingsNetworkInputSettingsOutput]{OutputState: value.OutputState}
}

// PID from which to read SCTE-35 messages.
func (o ChannelInputAttachmentInputSettingsOutput) Scte35Pid() pulumix.Output[*int] {
	return pulumix.Apply[ChannelInputAttachmentInputSettings](o, func(v ChannelInputAttachmentInputSettings) *int { return v.Scte35Pid })
}

// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in the input.
func (o ChannelInputAttachmentInputSettingsOutput) Smpte2038DataPreference() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettings](o, func(v ChannelInputAttachmentInputSettings) *string { return v.Smpte2038DataPreference })
}

// Loop input if it is a file.
func (o ChannelInputAttachmentInputSettingsOutput) SourceEndBehavior() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettings](o, func(v ChannelInputAttachmentInputSettings) *string { return v.SourceEndBehavior })
}

func (o ChannelInputAttachmentInputSettingsOutput) VideoSelector() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsVideoSelector, ChannelInputAttachmentInputSettingsVideoSelectorOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettings](o, func(v ChannelInputAttachmentInputSettings) *ChannelInputAttachmentInputSettingsVideoSelector {
		return v.VideoSelector
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsVideoSelector, ChannelInputAttachmentInputSettingsVideoSelectorOutput]{OutputState: value.OutputState}
}

type ChannelInputAttachmentInputSettingsAudioSelector struct {
	// Name of the Channel.
	//
	// The following arguments are optional:
	Name string `pulumi:"name"`
	// The audio selector settings. See Audio Selector Settings for more details.
	SelectorSettings *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings `pulumi:"selectorSettings"`
}

type ChannelInputAttachmentInputSettingsAudioSelectorArgs struct {
	// Name of the Channel.
	//
	// The following arguments are optional:
	Name pulumix.Input[string] `pulumi:"name"`
	// The audio selector settings. See Audio Selector Settings for more details.
	SelectorSettings pulumix.Input[*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsArgs] `pulumi:"selectorSettings"`
}

func (ChannelInputAttachmentInputSettingsAudioSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelector)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorArgs) ToChannelInputAttachmentInputSettingsAudioSelectorOutput() ChannelInputAttachmentInputSettingsAudioSelectorOutput {
	return i.ToChannelInputAttachmentInputSettingsAudioSelectorOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorArgs) ToChannelInputAttachmentInputSettingsAudioSelectorOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsAudioSelectorOutput)
}

func (i *ChannelInputAttachmentInputSettingsAudioSelectorArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsAudioSelectorArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsAudioSelectorOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsAudioSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelector)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorOutput) ToChannelInputAttachmentInputSettingsAudioSelectorOutput() ChannelInputAttachmentInputSettingsAudioSelectorOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorOutput) ToChannelInputAttachmentInputSettingsAudioSelectorOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelector] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelector]{
		OutputState: o.OutputState,
	}
}

// Name of the Channel.
//
// The following arguments are optional:
func (o ChannelInputAttachmentInputSettingsAudioSelectorOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsAudioSelector](o, func(v ChannelInputAttachmentInputSettingsAudioSelector) string { return v.Name })
}

// The audio selector settings. See Audio Selector Settings for more details.
func (o ChannelInputAttachmentInputSettingsAudioSelectorOutput) SelectorSettings() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings, ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsAudioSelector](o, func(v ChannelInputAttachmentInputSettingsAudioSelector) *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings {
		return v.SelectorSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings, ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput]{OutputState: value.OutputState}
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings struct {
	// Audio HLS Rendition Selection. See Audio HLS Rendition Selection for more details.
	AudioHlsRenditionSelection *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection `pulumi:"audioHlsRenditionSelection"`
	// Audio Language Selection. See Audio Language Selection for more details.
	AudioLanguageSelection *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection `pulumi:"audioLanguageSelection"`
	// Audio Pid Selection. See Audio PID Selection for more details.
	AudioPidSelection *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelection `pulumi:"audioPidSelection"`
	// Audio Track Selection. See Audio Track Selection for more details.
	AudioTrackSelection *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection `pulumi:"audioTrackSelection"`
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsArgs struct {
	// Audio HLS Rendition Selection. See Audio HLS Rendition Selection for more details.
	AudioHlsRenditionSelection pulumix.Input[*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionArgs] `pulumi:"audioHlsRenditionSelection"`
	// Audio Language Selection. See Audio Language Selection for more details.
	AudioLanguageSelection pulumix.Input[*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionArgs] `pulumi:"audioLanguageSelection"`
	// Audio Pid Selection. See Audio PID Selection for more details.
	AudioPidSelection pulumix.Input[*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionArgs] `pulumi:"audioPidSelection"`
	// Audio Track Selection. See Audio Track Selection for more details.
	AudioTrackSelection pulumix.Input[*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionArgs] `pulumi:"audioTrackSelection"`
}

func (ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsArgs) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput() ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput {
	return i.ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsArgs) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput)
}

func (i *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput() ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings]{
		OutputState: o.OutputState,
	}
}

// Audio HLS Rendition Selection. See Audio HLS Rendition Selection for more details.
func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput) AudioHlsRenditionSelection() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection, ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings](o, func(v ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings) *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection {
		return v.AudioHlsRenditionSelection
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection, ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput]{OutputState: value.OutputState}
}

// Audio Language Selection. See Audio Language Selection for more details.
func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput) AudioLanguageSelection() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection, ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings](o, func(v ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings) *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection {
		return v.AudioLanguageSelection
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection, ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput]{OutputState: value.OutputState}
}

// Audio Pid Selection. See Audio PID Selection for more details.
func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput) AudioPidSelection() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelection, ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings](o, func(v ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings) *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelection {
		return v.AudioPidSelection
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelection, ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput]{OutputState: value.OutputState}
}

// Audio Track Selection. See Audio Track Selection for more details.
func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput) AudioTrackSelection() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection, ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings](o, func(v ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings) *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection {
		return v.AudioTrackSelection
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection, ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput]{OutputState: value.OutputState}
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection struct {
	// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
	GroupId string `pulumi:"groupId"`
	// Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.
	Name string `pulumi:"name"`
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionArgs struct {
	// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
	GroupId pulumix.Input[string] `pulumi:"groupId"`
	// Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionArgs) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput() ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput {
	return i.ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionArgs) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput)
}

func (i *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput() ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection]{
		OutputState: o.OutputState,
	}
}

// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput) GroupId() pulumix.Output[string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection](o, func(v ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection) string {
		return v.GroupId
	})
}

// Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.
func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection](o, func(v ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection) string {
		return v.Name
	})
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection struct {
	// Selects a specific three-letter language code from within an audio source.
	LanguageCode string `pulumi:"languageCode"`
	// When set to “strict”, the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If “loose”, then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can’t find one with the same language.
	LanguageSelectionPolicy *string `pulumi:"languageSelectionPolicy"`
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionArgs struct {
	// Selects a specific three-letter language code from within an audio source.
	LanguageCode pulumix.Input[string] `pulumi:"languageCode"`
	// When set to “strict”, the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If “loose”, then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can’t find one with the same language.
	LanguageSelectionPolicy pulumix.Input[*string] `pulumi:"languageSelectionPolicy"`
}

func (ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionArgs) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput() ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput {
	return i.ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionArgs) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput)
}

func (i *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput() ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection]{
		OutputState: o.OutputState,
	}
}

// Selects a specific three-letter language code from within an audio source.
func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput) LanguageCode() pulumix.Output[string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection](o, func(v ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection) string {
		return v.LanguageCode
	})
}

// When set to “strict”, the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If “loose”, then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can’t find one with the same language.
func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput) LanguageSelectionPolicy() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection](o, func(v ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection) *string {
		return v.LanguageSelectionPolicy
	})
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelection struct {
	// Selects a specific PID from within a source.
	Pid int `pulumi:"pid"`
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionArgs struct {
	// Selects a specific PID from within a source.
	Pid pulumix.Input[int] `pulumi:"pid"`
}

func (ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelection)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionArgs) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput() ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput {
	return i.ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionArgs) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput)
}

func (i *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelection)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput() ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelection] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelection]{
		OutputState: o.OutputState,
	}
}

// Selects a specific PID from within a source.
func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput) Pid() pulumix.Output[int] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelection](o, func(v ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelection) int {
		return v.Pid
	})
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection struct {
	// Configure decoding options for Dolby E streams - these should be Dolby E frames carried in PCM streams tagged with SMPTE-337. See Dolby E Decode for more details.
	DolbyEDecode *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode `pulumi:"dolbyEDecode"`
	// Selects one or more unique audio tracks from within a source. See Audio Tracks for more details.
	Tracks []ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack `pulumi:"tracks"`
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionArgs struct {
	// Configure decoding options for Dolby E streams - these should be Dolby E frames carried in PCM streams tagged with SMPTE-337. See Dolby E Decode for more details.
	DolbyEDecode pulumix.Input[*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeArgs] `pulumi:"dolbyEDecode"`
	// Selects one or more unique audio tracks from within a source. See Audio Tracks for more details.
	Tracks pulumix.Input[[]*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackArgs] `pulumi:"tracks"`
}

func (ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionArgs) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput() ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput {
	return i.ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionArgs) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput)
}

func (i *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput() ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection]{
		OutputState: o.OutputState,
	}
}

// Configure decoding options for Dolby E streams - these should be Dolby E frames carried in PCM streams tagged with SMPTE-337. See Dolby E Decode for more details.
func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput) DolbyEDecode() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode, ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection](o, func(v ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection) *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode {
		return v.DolbyEDecode
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode, ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput]{OutputState: value.OutputState}
}

// Selects one or more unique audio tracks from within a source. See Audio Tracks for more details.
func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput) Tracks() pulumix.GArrayOutput[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack, ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection](o, func(v ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection) []ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack {
		return v.Tracks
	})
	return pulumix.GArrayOutput[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack, ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput]{OutputState: value.OutputState}
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode struct {
	// Applies only to Dolby E. Enter the program ID (according to the metadata in the audio) of the Dolby E program to extract from the specified track. One program extracted per audio selector. To select multiple programs, create multiple selectors with the same Track and different Program numbers. “All channels” means to ignore the program IDs and include all the channels in this selector; useful if metadata is known to be incorrect.
	ProgramSelection string `pulumi:"programSelection"`
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeArgs struct {
	// Applies only to Dolby E. Enter the program ID (according to the metadata in the audio) of the Dolby E program to extract from the specified track. One program extracted per audio selector. To select multiple programs, create multiple selectors with the same Track and different Program numbers. “All channels” means to ignore the program IDs and include all the channels in this selector; useful if metadata is known to be incorrect.
	ProgramSelection pulumix.Input[string] `pulumi:"programSelection"`
}

func (ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeArgs) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput() ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput {
	return i.ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeArgs) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput)
}

func (i *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput() ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode]{
		OutputState: o.OutputState,
	}
}

// Applies only to Dolby E. Enter the program ID (according to the metadata in the audio) of the Dolby E program to extract from the specified track. One program extracted per audio selector. To select multiple programs, create multiple selectors with the same Track and different Program numbers. “All channels” means to ignore the program IDs and include all the channels in this selector; useful if metadata is known to be incorrect.
func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput) ProgramSelection() pulumix.Output[string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode](o, func(v ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode) string {
		return v.ProgramSelection
	})
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack struct {
	// 1-based integer value that maps to a specific audio track.
	Track int `pulumi:"track"`
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackArgs struct {
	// 1-based integer value that maps to a specific audio track.
	Track pulumix.Input[int] `pulumi:"track"`
}

func (ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackArgs) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput() ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput {
	return i.ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackArgs) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput)
}

func (i *ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput() ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput) ToChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack]{
		OutputState: o.OutputState,
	}
}

// 1-based integer value that maps to a specific audio track.
func (o ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput) Track() pulumix.Output[int] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack](o, func(v ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack) int {
		return v.Track
	})
}

type ChannelInputAttachmentInputSettingsCaptionSelector struct {
	// Selects a specific three-letter language code from within an audio source.
	LanguageCode *string `pulumi:"languageCode"`
	// Name of the Channel.
	//
	// The following arguments are optional:
	Name string `pulumi:"name"`
	// The audio selector settings. See Audio Selector Settings for more details.
	SelectorSettings *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings `pulumi:"selectorSettings"`
}

type ChannelInputAttachmentInputSettingsCaptionSelectorArgs struct {
	// Selects a specific three-letter language code from within an audio source.
	LanguageCode pulumix.Input[*string] `pulumi:"languageCode"`
	// Name of the Channel.
	//
	// The following arguments are optional:
	Name pulumix.Input[string] `pulumi:"name"`
	// The audio selector settings. See Audio Selector Settings for more details.
	SelectorSettings pulumix.Input[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsArgs] `pulumi:"selectorSettings"`
}

func (ChannelInputAttachmentInputSettingsCaptionSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelector)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorOutput() ChannelInputAttachmentInputSettingsCaptionSelectorOutput {
	return i.ToChannelInputAttachmentInputSettingsCaptionSelectorOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsCaptionSelectorOutput)
}

func (i *ChannelInputAttachmentInputSettingsCaptionSelectorArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsCaptionSelectorArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsCaptionSelectorOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsCaptionSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelector)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorOutput() ChannelInputAttachmentInputSettingsCaptionSelectorOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelector] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelector]{
		OutputState: o.OutputState,
	}
}

// Selects a specific three-letter language code from within an audio source.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorOutput) LanguageCode() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelector](o, func(v ChannelInputAttachmentInputSettingsCaptionSelector) *string { return v.LanguageCode })
}

// Name of the Channel.
//
// The following arguments are optional:
func (o ChannelInputAttachmentInputSettingsCaptionSelectorOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelector](o, func(v ChannelInputAttachmentInputSettingsCaptionSelector) string { return v.Name })
}

// The audio selector settings. See Audio Selector Settings for more details.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorOutput) SelectorSettings() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelector](o, func(v ChannelInputAttachmentInputSettingsCaptionSelector) *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings {
		return v.SelectorSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput]{OutputState: value.OutputState}
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings struct {
	// Ancillary Source Settings. See Ancillary Source Settings for more details.
	AncillarySourceSettings *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings `pulumi:"ancillarySourceSettings"`
	// Arib Source Settings.
	AribSourceSettings *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings `pulumi:"aribSourceSettings"`
	// DVB Sub Source Settings. See DVB Sub Source Settings for more details.
	DvbSubSourceSettings *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings `pulumi:"dvbSubSourceSettings"`
	// Embedded Source Settings. See Embedded Source Settings for more details.
	EmbeddedSourceSettings *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings `pulumi:"embeddedSourceSettings"`
	// SCTE20 Source Settings. See SCTE 20 Source Settings for more details.
	Scte20SourceSettings *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings `pulumi:"scte20SourceSettings"`
	// SCTE27 Source Settings. See SCTE 27 Source Settings for more details.
	Scte27SourceSettings *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings `pulumi:"scte27SourceSettings"`
	// Teletext Source Settings. See Teletext Source Settings for more details.
	TeletextSourceSettings *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings `pulumi:"teletextSourceSettings"`
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsArgs struct {
	// Ancillary Source Settings. See Ancillary Source Settings for more details.
	AncillarySourceSettings pulumix.Input[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsArgs] `pulumi:"ancillarySourceSettings"`
	// Arib Source Settings.
	AribSourceSettings pulumix.Input[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsArgs] `pulumi:"aribSourceSettings"`
	// DVB Sub Source Settings. See DVB Sub Source Settings for more details.
	DvbSubSourceSettings pulumix.Input[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsArgs] `pulumi:"dvbSubSourceSettings"`
	// Embedded Source Settings. See Embedded Source Settings for more details.
	EmbeddedSourceSettings pulumix.Input[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs] `pulumi:"embeddedSourceSettings"`
	// SCTE20 Source Settings. See SCTE 20 Source Settings for more details.
	Scte20SourceSettings pulumix.Input[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsArgs] `pulumi:"scte20SourceSettings"`
	// SCTE27 Source Settings. See SCTE 27 Source Settings for more details.
	Scte27SourceSettings pulumix.Input[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsArgs] `pulumi:"scte27SourceSettings"`
	// Teletext Source Settings. See Teletext Source Settings for more details.
	TeletextSourceSettings pulumix.Input[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsArgs] `pulumi:"teletextSourceSettings"`
}

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput {
	return i.ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput)
}

func (i *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings]{
		OutputState: o.OutputState,
	}
}

// Ancillary Source Settings. See Ancillary Source Settings for more details.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput) AncillarySourceSettings() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings) *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings {
		return v.AncillarySourceSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput]{OutputState: value.OutputState}
}

// Arib Source Settings.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput) AribSourceSettings() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings) *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings {
		return v.AribSourceSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutput]{OutputState: value.OutputState}
}

// DVB Sub Source Settings. See DVB Sub Source Settings for more details.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput) DvbSubSourceSettings() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings) *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings {
		return v.DvbSubSourceSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput]{OutputState: value.OutputState}
}

// Embedded Source Settings. See Embedded Source Settings for more details.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput) EmbeddedSourceSettings() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings) *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings {
		return v.EmbeddedSourceSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput]{OutputState: value.OutputState}
}

// SCTE20 Source Settings. See SCTE 20 Source Settings for more details.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput) Scte20SourceSettings() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings) *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings {
		return v.Scte20SourceSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput]{OutputState: value.OutputState}
}

// SCTE27 Source Settings. See SCTE 27 Source Settings for more details.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput) Scte27SourceSettings() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings) *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings {
		return v.Scte27SourceSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput]{OutputState: value.OutputState}
}

// Teletext Source Settings. See Teletext Source Settings for more details.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput) TeletextSourceSettings() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings) *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings {
		return v.TeletextSourceSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput]{OutputState: value.OutputState}
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings struct {
	// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
	SourceAncillaryChannelNumber *int `pulumi:"sourceAncillaryChannelNumber"`
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsArgs struct {
	// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
	SourceAncillaryChannelNumber pulumix.Input[*int] `pulumi:"sourceAncillaryChannelNumber"`
}

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput {
	return i.ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput)
}

func (i *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings]{
		OutputState: o.OutputState,
	}
}

// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput) SourceAncillaryChannelNumber() pulumix.Output[*int] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings) *int {
		return v.SourceAncillaryChannelNumber
	})
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings struct {
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsArgs struct {
}

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutput {
	return i.ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutput)
}

func (i *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings]{
		OutputState: o.OutputState,
	}
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings struct {
	// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
	OcrLanguage *string `pulumi:"ocrLanguage"`
	// When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
	Pid *int `pulumi:"pid"`
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsArgs struct {
	// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
	OcrLanguage pulumix.Input[*string] `pulumi:"ocrLanguage"`
	// When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
	Pid pulumix.Input[*int] `pulumi:"pid"`
}

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput {
	return i.ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput)
}

func (i *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings]{
		OutputState: o.OutputState,
	}
}

// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput) OcrLanguage() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings) *string {
		return v.OcrLanguage
	})
}

// When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput) Pid() pulumix.Output[*int] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings) *int {
		return v.Pid
	})
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings struct {
	// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
	Convert608To708 *string `pulumi:"convert608To708"`
	// Set to “auto” to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
	Scte20Detection *string `pulumi:"scte20Detection"`
	// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
	Source608ChannelNumber *int `pulumi:"source608ChannelNumber"`
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs struct {
	// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
	Convert608To708 pulumix.Input[*string] `pulumi:"convert608To708"`
	// Set to “auto” to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
	Scte20Detection pulumix.Input[*string] `pulumi:"scte20Detection"`
	// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
	Source608ChannelNumber pulumix.Input[*int] `pulumi:"source608ChannelNumber"`
}

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput {
	return i.ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput)
}

func (i *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings]{
		OutputState: o.OutputState,
	}
}

// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput) Convert608To708() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings) *string {
		return v.Convert608To708
	})
}

// Set to “auto” to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput) Scte20Detection() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings) *string {
		return v.Scte20Detection
	})
}

// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput) Source608ChannelNumber() pulumix.Output[*int] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings) *int {
		return v.Source608ChannelNumber
	})
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings struct {
	// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
	Convert608To708 *string `pulumi:"convert608To708"`
	// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
	Source608ChannelNumber *int `pulumi:"source608ChannelNumber"`
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsArgs struct {
	// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
	Convert608To708 pulumix.Input[*string] `pulumi:"convert608To708"`
	// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
	Source608ChannelNumber pulumix.Input[*int] `pulumi:"source608ChannelNumber"`
}

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput {
	return i.ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput)
}

func (i *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings]{
		OutputState: o.OutputState,
	}
}

// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput) Convert608To708() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings) *string {
		return v.Convert608To708
	})
}

// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput) Source608ChannelNumber() pulumix.Output[*int] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings) *int {
		return v.Source608ChannelNumber
	})
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings struct {
	// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
	OcrLanguage *string `pulumi:"ocrLanguage"`
	// Selects a specific PID from within a source.
	Pid *int `pulumi:"pid"`
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsArgs struct {
	// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
	OcrLanguage pulumix.Input[*string] `pulumi:"ocrLanguage"`
	// Selects a specific PID from within a source.
	Pid pulumix.Input[*int] `pulumi:"pid"`
}

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput {
	return i.ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput)
}

func (i *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings]{
		OutputState: o.OutputState,
	}
}

// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput) OcrLanguage() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings) *string {
		return v.OcrLanguage
	})
}

// Selects a specific PID from within a source.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput) Pid() pulumix.Output[*int] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings) *int {
		return v.Pid
	})
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings struct {
	// Optionally defines a region where TTML style captions will be displayed. See Caption Rectangle for more details.
	OutputRectangle *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle `pulumi:"outputRectangle"`
	// Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no “0x” prefix.
	PageNumber *string `pulumi:"pageNumber"`
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsArgs struct {
	// Optionally defines a region where TTML style captions will be displayed. See Caption Rectangle for more details.
	OutputRectangle pulumix.Input[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleArgs] `pulumi:"outputRectangle"`
	// Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no “0x” prefix.
	PageNumber pulumix.Input[*string] `pulumi:"pageNumber"`
}

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput {
	return i.ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput)
}

func (i *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings]{
		OutputState: o.OutputState,
	}
}

// Optionally defines a region where TTML style captions will be displayed. See Caption Rectangle for more details.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput) OutputRectangle() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings) *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle {
		return v.OutputRectangle
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle, ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput]{OutputState: value.OutputState}
}

// Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no “0x” prefix.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput) PageNumber() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings) *string {
		return v.PageNumber
	})
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle struct {
	// See the description in left\_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The top\_offset and rectangle\_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
	Height float64 `pulumi:"height"`
	// Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don’t have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, "10" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
	LeftOffset float64 `pulumi:"leftOffset"`
	// See the description in left\_offset. For top\_offset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, "10" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
	TopOffset float64 `pulumi:"topOffset"`
	// See the description in left\_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The left\_offset and rectangle\_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
	Width float64 `pulumi:"width"`
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleArgs struct {
	// See the description in left\_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The top\_offset and rectangle\_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
	Height pulumix.Input[float64] `pulumi:"height"`
	// Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don’t have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, "10" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
	LeftOffset pulumix.Input[float64] `pulumi:"leftOffset"`
	// See the description in left\_offset. For top\_offset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, "10" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
	TopOffset pulumix.Input[float64] `pulumi:"topOffset"`
	// See the description in left\_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The left\_offset and rectangle\_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
	Width pulumix.Input[float64] `pulumi:"width"`
}

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput {
	return i.ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleArgs) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput)
}

func (i *ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput() ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput) ToChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle]{
		OutputState: o.OutputState,
	}
}

// See the description in left\_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The top\_offset and rectangle\_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput) Height() pulumix.Output[float64] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle) float64 {
		return v.Height
	})
}

// Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don’t have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, "10" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput) LeftOffset() pulumix.Output[float64] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle) float64 {
		return v.LeftOffset
	})
}

// See the description in left\_offset. For top\_offset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, "10" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput) TopOffset() pulumix.Output[float64] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle) float64 {
		return v.TopOffset
	})
}

// See the description in left\_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The left\_offset and rectangle\_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
func (o ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput) Width() pulumix.Output[float64] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle](o, func(v ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle) float64 {
		return v.Width
	})
}

type ChannelInputAttachmentInputSettingsNetworkInputSettings struct {
	// Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
	HlsInputSettings *ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings `pulumi:"hlsInputSettings"`
	// Check HTTPS server certificates.
	ServerValidation *string `pulumi:"serverValidation"`
}

type ChannelInputAttachmentInputSettingsNetworkInputSettingsArgs struct {
	// Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
	HlsInputSettings pulumix.Input[*ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsArgs] `pulumi:"hlsInputSettings"`
	// Check HTTPS server certificates.
	ServerValidation pulumix.Input[*string] `pulumi:"serverValidation"`
}

func (ChannelInputAttachmentInputSettingsNetworkInputSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsNetworkInputSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsNetworkInputSettingsArgs) ToChannelInputAttachmentInputSettingsNetworkInputSettingsOutput() ChannelInputAttachmentInputSettingsNetworkInputSettingsOutput {
	return i.ToChannelInputAttachmentInputSettingsNetworkInputSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsNetworkInputSettingsArgs) ToChannelInputAttachmentInputSettingsNetworkInputSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsNetworkInputSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsNetworkInputSettingsOutput)
}

func (i *ChannelInputAttachmentInputSettingsNetworkInputSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsNetworkInputSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsNetworkInputSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsNetworkInputSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsNetworkInputSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsNetworkInputSettingsOutput) ToChannelInputAttachmentInputSettingsNetworkInputSettingsOutput() ChannelInputAttachmentInputSettingsNetworkInputSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsNetworkInputSettingsOutput) ToChannelInputAttachmentInputSettingsNetworkInputSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsNetworkInputSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsNetworkInputSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsNetworkInputSettings] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsNetworkInputSettings]{
		OutputState: o.OutputState,
	}
}

// Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
func (o ChannelInputAttachmentInputSettingsNetworkInputSettingsOutput) HlsInputSettings() pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings, ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput] {
	value := pulumix.Apply[ChannelInputAttachmentInputSettingsNetworkInputSettings](o, func(v ChannelInputAttachmentInputSettingsNetworkInputSettings) *ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings {
		return v.HlsInputSettings
	})
	return pulumix.GPtrOutput[ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings, ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput]{OutputState: value.OutputState}
}

// Check HTTPS server certificates.
func (o ChannelInputAttachmentInputSettingsNetworkInputSettingsOutput) ServerValidation() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsNetworkInputSettings](o, func(v ChannelInputAttachmentInputSettingsNetworkInputSettings) *string { return v.ServerValidation })
}

type ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings struct {
	// The bitrate is specified in bits per second, as in an HLS manifest.
	Bandwidth *int `pulumi:"bandwidth"`
	// Buffer segments.
	BufferSegments *int `pulumi:"bufferSegments"`
	// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
	Retries *int `pulumi:"retries"`
	// The number of seconds between retries when an attempt to read a manifest or segment fails.
	RetryInterval *int    `pulumi:"retryInterval"`
	Scte35Source  *string `pulumi:"scte35Source"`
}

type ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsArgs struct {
	// The bitrate is specified in bits per second, as in an HLS manifest.
	Bandwidth pulumix.Input[*int] `pulumi:"bandwidth"`
	// Buffer segments.
	BufferSegments pulumix.Input[*int] `pulumi:"bufferSegments"`
	// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
	Retries pulumix.Input[*int] `pulumi:"retries"`
	// The number of seconds between retries when an attempt to read a manifest or segment fails.
	RetryInterval pulumix.Input[*int]    `pulumi:"retryInterval"`
	Scte35Source  pulumix.Input[*string] `pulumi:"scte35Source"`
}

func (ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsArgs) ToChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput() ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput {
	return i.ToChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsArgs) ToChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput)
}

func (i *ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput) ToChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput() ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput) ToChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings]{
		OutputState: o.OutputState,
	}
}

// The bitrate is specified in bits per second, as in an HLS manifest.
func (o ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput) Bandwidth() pulumix.Output[*int] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings](o, func(v ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings) *int {
		return v.Bandwidth
	})
}

// Buffer segments.
func (o ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput) BufferSegments() pulumix.Output[*int] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings](o, func(v ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings) *int {
		return v.BufferSegments
	})
}

// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
func (o ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput) Retries() pulumix.Output[*int] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings](o, func(v ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings) *int { return v.Retries })
}

// The number of seconds between retries when an attempt to read a manifest or segment fails.
func (o ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput) RetryInterval() pulumix.Output[*int] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings](o, func(v ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings) *int {
		return v.RetryInterval
	})
}

func (o ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput) Scte35Source() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings](o, func(v ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings) *string {
		return v.Scte35Source
	})
}

type ChannelInputAttachmentInputSettingsVideoSelector struct {
	ColorSpace      *string `pulumi:"colorSpace"`
	ColorSpaceUsage *string `pulumi:"colorSpaceUsage"`
}

type ChannelInputAttachmentInputSettingsVideoSelectorArgs struct {
	ColorSpace      pulumix.Input[*string] `pulumi:"colorSpace"`
	ColorSpaceUsage pulumix.Input[*string] `pulumi:"colorSpaceUsage"`
}

func (ChannelInputAttachmentInputSettingsVideoSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsVideoSelector)(nil)).Elem()
}

func (i ChannelInputAttachmentInputSettingsVideoSelectorArgs) ToChannelInputAttachmentInputSettingsVideoSelectorOutput() ChannelInputAttachmentInputSettingsVideoSelectorOutput {
	return i.ToChannelInputAttachmentInputSettingsVideoSelectorOutputWithContext(context.Background())
}

func (i ChannelInputAttachmentInputSettingsVideoSelectorArgs) ToChannelInputAttachmentInputSettingsVideoSelectorOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsVideoSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputAttachmentInputSettingsVideoSelectorOutput)
}

func (i *ChannelInputAttachmentInputSettingsVideoSelectorArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputAttachmentInputSettingsVideoSelectorArgs] {
	return pulumix.Val(i)
}

type ChannelInputAttachmentInputSettingsVideoSelectorOutput struct{ *pulumi.OutputState }

func (ChannelInputAttachmentInputSettingsVideoSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputAttachmentInputSettingsVideoSelector)(nil)).Elem()
}

func (o ChannelInputAttachmentInputSettingsVideoSelectorOutput) ToChannelInputAttachmentInputSettingsVideoSelectorOutput() ChannelInputAttachmentInputSettingsVideoSelectorOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsVideoSelectorOutput) ToChannelInputAttachmentInputSettingsVideoSelectorOutputWithContext(ctx context.Context) ChannelInputAttachmentInputSettingsVideoSelectorOutput {
	return o
}

func (o ChannelInputAttachmentInputSettingsVideoSelectorOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputAttachmentInputSettingsVideoSelector] {
	return pulumix.Output[ChannelInputAttachmentInputSettingsVideoSelector]{
		OutputState: o.OutputState,
	}
}

func (o ChannelInputAttachmentInputSettingsVideoSelectorOutput) ColorSpace() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsVideoSelector](o, func(v ChannelInputAttachmentInputSettingsVideoSelector) *string { return v.ColorSpace })
}

func (o ChannelInputAttachmentInputSettingsVideoSelectorOutput) ColorSpaceUsage() pulumix.Output[*string] {
	return pulumix.Apply[ChannelInputAttachmentInputSettingsVideoSelector](o, func(v ChannelInputAttachmentInputSettingsVideoSelector) *string { return v.ColorSpaceUsage })
}

type ChannelInputSpecification struct {
	Codec           string `pulumi:"codec"`
	InputResolution string `pulumi:"inputResolution"`
	MaximumBitrate  string `pulumi:"maximumBitrate"`
}

type ChannelInputSpecificationArgs struct {
	Codec           pulumix.Input[string] `pulumi:"codec"`
	InputResolution pulumix.Input[string] `pulumi:"inputResolution"`
	MaximumBitrate  pulumix.Input[string] `pulumi:"maximumBitrate"`
}

func (ChannelInputSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputSpecification)(nil)).Elem()
}

func (i ChannelInputSpecificationArgs) ToChannelInputSpecificationOutput() ChannelInputSpecificationOutput {
	return i.ToChannelInputSpecificationOutputWithContext(context.Background())
}

func (i ChannelInputSpecificationArgs) ToChannelInputSpecificationOutputWithContext(ctx context.Context) ChannelInputSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputSpecificationOutput)
}

func (i *ChannelInputSpecificationArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelInputSpecificationArgs] {
	return pulumix.Val(i)
}

type ChannelInputSpecificationOutput struct{ *pulumi.OutputState }

func (ChannelInputSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputSpecification)(nil)).Elem()
}

func (o ChannelInputSpecificationOutput) ToChannelInputSpecificationOutput() ChannelInputSpecificationOutput {
	return o
}

func (o ChannelInputSpecificationOutput) ToChannelInputSpecificationOutputWithContext(ctx context.Context) ChannelInputSpecificationOutput {
	return o
}

func (o ChannelInputSpecificationOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelInputSpecification] {
	return pulumix.Output[ChannelInputSpecification]{
		OutputState: o.OutputState,
	}
}

func (o ChannelInputSpecificationOutput) Codec() pulumix.Output[string] {
	return pulumix.Apply[ChannelInputSpecification](o, func(v ChannelInputSpecification) string { return v.Codec })
}

func (o ChannelInputSpecificationOutput) InputResolution() pulumix.Output[string] {
	return pulumix.Apply[ChannelInputSpecification](o, func(v ChannelInputSpecification) string { return v.InputResolution })
}

func (o ChannelInputSpecificationOutput) MaximumBitrate() pulumix.Output[string] {
	return pulumix.Apply[ChannelInputSpecification](o, func(v ChannelInputSpecification) string { return v.MaximumBitrate })
}

type ChannelMaintenance struct {
	// The day of the week to use for maintenance.
	MaintenanceDay string `pulumi:"maintenanceDay"`
	// The hour maintenance will start.
	MaintenanceStartTime string `pulumi:"maintenanceStartTime"`
}

type ChannelMaintenanceArgs struct {
	// The day of the week to use for maintenance.
	MaintenanceDay pulumix.Input[string] `pulumi:"maintenanceDay"`
	// The hour maintenance will start.
	MaintenanceStartTime pulumix.Input[string] `pulumi:"maintenanceStartTime"`
}

func (ChannelMaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelMaintenance)(nil)).Elem()
}

func (i ChannelMaintenanceArgs) ToChannelMaintenanceOutput() ChannelMaintenanceOutput {
	return i.ToChannelMaintenanceOutputWithContext(context.Background())
}

func (i ChannelMaintenanceArgs) ToChannelMaintenanceOutputWithContext(ctx context.Context) ChannelMaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelMaintenanceOutput)
}

func (i *ChannelMaintenanceArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelMaintenanceArgs] {
	return pulumix.Val(i)
}

type ChannelMaintenanceOutput struct{ *pulumi.OutputState }

func (ChannelMaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelMaintenance)(nil)).Elem()
}

func (o ChannelMaintenanceOutput) ToChannelMaintenanceOutput() ChannelMaintenanceOutput {
	return o
}

func (o ChannelMaintenanceOutput) ToChannelMaintenanceOutputWithContext(ctx context.Context) ChannelMaintenanceOutput {
	return o
}

func (o ChannelMaintenanceOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelMaintenance] {
	return pulumix.Output[ChannelMaintenance]{
		OutputState: o.OutputState,
	}
}

// The day of the week to use for maintenance.
func (o ChannelMaintenanceOutput) MaintenanceDay() pulumix.Output[string] {
	return pulumix.Apply[ChannelMaintenance](o, func(v ChannelMaintenance) string { return v.MaintenanceDay })
}

// The hour maintenance will start.
func (o ChannelMaintenanceOutput) MaintenanceStartTime() pulumix.Output[string] {
	return pulumix.Apply[ChannelMaintenance](o, func(v ChannelMaintenance) string { return v.MaintenanceStartTime })
}

type ChannelVpc struct {
	AvailabilityZones          []string `pulumi:"availabilityZones"`
	PublicAddressAllocationIds []string `pulumi:"publicAddressAllocationIds"`
	SecurityGroupIds           []string `pulumi:"securityGroupIds"`
	SubnetIds                  []string `pulumi:"subnetIds"`
}

type ChannelVpcArgs struct {
	AvailabilityZones          pulumix.Input[[]string] `pulumi:"availabilityZones"`
	PublicAddressAllocationIds pulumix.Input[[]string] `pulumi:"publicAddressAllocationIds"`
	SecurityGroupIds           pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	SubnetIds                  pulumix.Input[[]string] `pulumi:"subnetIds"`
}

func (ChannelVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelVpc)(nil)).Elem()
}

func (i ChannelVpcArgs) ToChannelVpcOutput() ChannelVpcOutput {
	return i.ToChannelVpcOutputWithContext(context.Background())
}

func (i ChannelVpcArgs) ToChannelVpcOutputWithContext(ctx context.Context) ChannelVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelVpcOutput)
}

func (i *ChannelVpcArgs) ToOutput(ctx context.Context) pulumix.Output[*ChannelVpcArgs] {
	return pulumix.Val(i)
}

type ChannelVpcOutput struct{ *pulumi.OutputState }

func (ChannelVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelVpc)(nil)).Elem()
}

func (o ChannelVpcOutput) ToChannelVpcOutput() ChannelVpcOutput {
	return o
}

func (o ChannelVpcOutput) ToChannelVpcOutputWithContext(ctx context.Context) ChannelVpcOutput {
	return o
}

func (o ChannelVpcOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelVpc] {
	return pulumix.Output[ChannelVpc]{
		OutputState: o.OutputState,
	}
}

func (o ChannelVpcOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ChannelVpc](o, func(v ChannelVpc) []string { return v.AvailabilityZones })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o ChannelVpcOutput) PublicAddressAllocationIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ChannelVpc](o, func(v ChannelVpc) []string { return v.PublicAddressAllocationIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o ChannelVpcOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ChannelVpc](o, func(v ChannelVpc) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o ChannelVpcOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ChannelVpc](o, func(v ChannelVpc) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type InputDestination struct {
	// A unique name for the location the RTMP stream is being pushed to.
	StreamName string `pulumi:"streamName"`
}

type InputDestinationArgs struct {
	// A unique name for the location the RTMP stream is being pushed to.
	StreamName pulumix.Input[string] `pulumi:"streamName"`
}

func (InputDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputDestination)(nil)).Elem()
}

func (i InputDestinationArgs) ToInputDestinationOutput() InputDestinationOutput {
	return i.ToInputDestinationOutputWithContext(context.Background())
}

func (i InputDestinationArgs) ToInputDestinationOutputWithContext(ctx context.Context) InputDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputDestinationOutput)
}

func (i *InputDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*InputDestinationArgs] {
	return pulumix.Val(i)
}

type InputDestinationOutput struct{ *pulumi.OutputState }

func (InputDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputDestination)(nil)).Elem()
}

func (o InputDestinationOutput) ToInputDestinationOutput() InputDestinationOutput {
	return o
}

func (o InputDestinationOutput) ToInputDestinationOutputWithContext(ctx context.Context) InputDestinationOutput {
	return o
}

func (o InputDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[InputDestination] {
	return pulumix.Output[InputDestination]{
		OutputState: o.OutputState,
	}
}

// A unique name for the location the RTMP stream is being pushed to.
func (o InputDestinationOutput) StreamName() pulumix.Output[string] {
	return pulumix.Apply[InputDestination](o, func(v InputDestination) string { return v.StreamName })
}

type InputInputDevice struct {
	// The unique ID for the device.
	Id string `pulumi:"id"`
}

type InputInputDeviceArgs struct {
	// The unique ID for the device.
	Id pulumix.Input[string] `pulumi:"id"`
}

func (InputInputDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputInputDevice)(nil)).Elem()
}

func (i InputInputDeviceArgs) ToInputInputDeviceOutput() InputInputDeviceOutput {
	return i.ToInputInputDeviceOutputWithContext(context.Background())
}

func (i InputInputDeviceArgs) ToInputInputDeviceOutputWithContext(ctx context.Context) InputInputDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputInputDeviceOutput)
}

func (i *InputInputDeviceArgs) ToOutput(ctx context.Context) pulumix.Output[*InputInputDeviceArgs] {
	return pulumix.Val(i)
}

type InputInputDeviceOutput struct{ *pulumi.OutputState }

func (InputInputDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputInputDevice)(nil)).Elem()
}

func (o InputInputDeviceOutput) ToInputInputDeviceOutput() InputInputDeviceOutput {
	return o
}

func (o InputInputDeviceOutput) ToInputInputDeviceOutputWithContext(ctx context.Context) InputInputDeviceOutput {
	return o
}

func (o InputInputDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[InputInputDevice] {
	return pulumix.Output[InputInputDevice]{
		OutputState: o.OutputState,
	}
}

// The unique ID for the device.
func (o InputInputDeviceOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[InputInputDevice](o, func(v InputInputDevice) string { return v.Id })
}

type InputMediaConnectFlow struct {
	// The ARN of the MediaConnect Flow
	FlowArn string `pulumi:"flowArn"`
}

type InputMediaConnectFlowArgs struct {
	// The ARN of the MediaConnect Flow
	FlowArn pulumix.Input[string] `pulumi:"flowArn"`
}

func (InputMediaConnectFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputMediaConnectFlow)(nil)).Elem()
}

func (i InputMediaConnectFlowArgs) ToInputMediaConnectFlowOutput() InputMediaConnectFlowOutput {
	return i.ToInputMediaConnectFlowOutputWithContext(context.Background())
}

func (i InputMediaConnectFlowArgs) ToInputMediaConnectFlowOutputWithContext(ctx context.Context) InputMediaConnectFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputMediaConnectFlowOutput)
}

func (i *InputMediaConnectFlowArgs) ToOutput(ctx context.Context) pulumix.Output[*InputMediaConnectFlowArgs] {
	return pulumix.Val(i)
}

type InputMediaConnectFlowOutput struct{ *pulumi.OutputState }

func (InputMediaConnectFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputMediaConnectFlow)(nil)).Elem()
}

func (o InputMediaConnectFlowOutput) ToInputMediaConnectFlowOutput() InputMediaConnectFlowOutput {
	return o
}

func (o InputMediaConnectFlowOutput) ToInputMediaConnectFlowOutputWithContext(ctx context.Context) InputMediaConnectFlowOutput {
	return o
}

func (o InputMediaConnectFlowOutput) ToOutput(ctx context.Context) pulumix.Output[InputMediaConnectFlow] {
	return pulumix.Output[InputMediaConnectFlow]{
		OutputState: o.OutputState,
	}
}

// The ARN of the MediaConnect Flow
func (o InputMediaConnectFlowOutput) FlowArn() pulumix.Output[string] {
	return pulumix.Apply[InputMediaConnectFlow](o, func(v InputMediaConnectFlow) string { return v.FlowArn })
}

type InputSecurityGroupWhitelistRule struct {
	// The IPv4 CIDR that's whitelisted.
	Cidr string `pulumi:"cidr"`
}

type InputSecurityGroupWhitelistRuleArgs struct {
	// The IPv4 CIDR that's whitelisted.
	Cidr pulumix.Input[string] `pulumi:"cidr"`
}

func (InputSecurityGroupWhitelistRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputSecurityGroupWhitelistRule)(nil)).Elem()
}

func (i InputSecurityGroupWhitelistRuleArgs) ToInputSecurityGroupWhitelistRuleOutput() InputSecurityGroupWhitelistRuleOutput {
	return i.ToInputSecurityGroupWhitelistRuleOutputWithContext(context.Background())
}

func (i InputSecurityGroupWhitelistRuleArgs) ToInputSecurityGroupWhitelistRuleOutputWithContext(ctx context.Context) InputSecurityGroupWhitelistRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputSecurityGroupWhitelistRuleOutput)
}

func (i *InputSecurityGroupWhitelistRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*InputSecurityGroupWhitelistRuleArgs] {
	return pulumix.Val(i)
}

type InputSecurityGroupWhitelistRuleOutput struct{ *pulumi.OutputState }

func (InputSecurityGroupWhitelistRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputSecurityGroupWhitelistRule)(nil)).Elem()
}

func (o InputSecurityGroupWhitelistRuleOutput) ToInputSecurityGroupWhitelistRuleOutput() InputSecurityGroupWhitelistRuleOutput {
	return o
}

func (o InputSecurityGroupWhitelistRuleOutput) ToInputSecurityGroupWhitelistRuleOutputWithContext(ctx context.Context) InputSecurityGroupWhitelistRuleOutput {
	return o
}

func (o InputSecurityGroupWhitelistRuleOutput) ToOutput(ctx context.Context) pulumix.Output[InputSecurityGroupWhitelistRule] {
	return pulumix.Output[InputSecurityGroupWhitelistRule]{
		OutputState: o.OutputState,
	}
}

// The IPv4 CIDR that's whitelisted.
func (o InputSecurityGroupWhitelistRuleOutput) Cidr() pulumix.Output[string] {
	return pulumix.Apply[InputSecurityGroupWhitelistRule](o, func(v InputSecurityGroupWhitelistRule) string { return v.Cidr })
}

type InputSource struct {
	// The key used to extract the password from EC2 Parameter store.
	PasswordParam string `pulumi:"passwordParam"`
	// The URL where the stream is pulled from.
	Url string `pulumi:"url"`
	// The username for the input source.
	Username string `pulumi:"username"`
}

type InputSourceArgs struct {
	// The key used to extract the password from EC2 Parameter store.
	PasswordParam pulumix.Input[string] `pulumi:"passwordParam"`
	// The URL where the stream is pulled from.
	Url pulumix.Input[string] `pulumi:"url"`
	// The username for the input source.
	Username pulumix.Input[string] `pulumi:"username"`
}

func (InputSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputSource)(nil)).Elem()
}

func (i InputSourceArgs) ToInputSourceOutput() InputSourceOutput {
	return i.ToInputSourceOutputWithContext(context.Background())
}

func (i InputSourceArgs) ToInputSourceOutputWithContext(ctx context.Context) InputSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputSourceOutput)
}

func (i *InputSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*InputSourceArgs] {
	return pulumix.Val(i)
}

type InputSourceOutput struct{ *pulumi.OutputState }

func (InputSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputSource)(nil)).Elem()
}

func (o InputSourceOutput) ToInputSourceOutput() InputSourceOutput {
	return o
}

func (o InputSourceOutput) ToInputSourceOutputWithContext(ctx context.Context) InputSourceOutput {
	return o
}

func (o InputSourceOutput) ToOutput(ctx context.Context) pulumix.Output[InputSource] {
	return pulumix.Output[InputSource]{
		OutputState: o.OutputState,
	}
}

// The key used to extract the password from EC2 Parameter store.
func (o InputSourceOutput) PasswordParam() pulumix.Output[string] {
	return pulumix.Apply[InputSource](o, func(v InputSource) string { return v.PasswordParam })
}

// The URL where the stream is pulled from.
func (o InputSourceOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[InputSource](o, func(v InputSource) string { return v.Url })
}

// The username for the input source.
func (o InputSourceOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[InputSource](o, func(v InputSource) string { return v.Username })
}

type InputVpc struct {
	// A list of up to 5 EC2 VPC security group IDs to attach to the Input.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of 2 VPC subnet IDs from the same VPC.
	SubnetIds []string `pulumi:"subnetIds"`
}

type InputVpcArgs struct {
	// A list of up to 5 EC2 VPC security group IDs to attach to the Input.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// A list of 2 VPC subnet IDs from the same VPC.
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
}

func (InputVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputVpc)(nil)).Elem()
}

func (i InputVpcArgs) ToInputVpcOutput() InputVpcOutput {
	return i.ToInputVpcOutputWithContext(context.Background())
}

func (i InputVpcArgs) ToInputVpcOutputWithContext(ctx context.Context) InputVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputVpcOutput)
}

func (i *InputVpcArgs) ToOutput(ctx context.Context) pulumix.Output[*InputVpcArgs] {
	return pulumix.Val(i)
}

type InputVpcOutput struct{ *pulumi.OutputState }

func (InputVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputVpc)(nil)).Elem()
}

func (o InputVpcOutput) ToInputVpcOutput() InputVpcOutput {
	return o
}

func (o InputVpcOutput) ToInputVpcOutputWithContext(ctx context.Context) InputVpcOutput {
	return o
}

func (o InputVpcOutput) ToOutput(ctx context.Context) pulumix.Output[InputVpc] {
	return pulumix.Output[InputVpc]{
		OutputState: o.OutputState,
	}
}

// A list of up to 5 EC2 VPC security group IDs to attach to the Input.
func (o InputVpcOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[InputVpc](o, func(v InputVpc) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of 2 VPC subnet IDs from the same VPC.
func (o InputVpcOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[InputVpc](o, func(v InputVpc) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type MultiplexMultiplexSettings struct {
	// Maximum video buffer delay.
	MaximumVideoBufferDelayMilliseconds *int `pulumi:"maximumVideoBufferDelayMilliseconds"`
	// Transport stream bit rate.
	TransportStreamBitrate int `pulumi:"transportStreamBitrate"`
	// Unique ID for each multiplex.
	TransportStreamId int `pulumi:"transportStreamId"`
	// Transport stream reserved bit rate.
	TransportStreamReservedBitrate *int `pulumi:"transportStreamReservedBitrate"`
}

type MultiplexMultiplexSettingsArgs struct {
	// Maximum video buffer delay.
	MaximumVideoBufferDelayMilliseconds pulumix.Input[*int] `pulumi:"maximumVideoBufferDelayMilliseconds"`
	// Transport stream bit rate.
	TransportStreamBitrate pulumix.Input[int] `pulumi:"transportStreamBitrate"`
	// Unique ID for each multiplex.
	TransportStreamId pulumix.Input[int] `pulumi:"transportStreamId"`
	// Transport stream reserved bit rate.
	TransportStreamReservedBitrate pulumix.Input[*int] `pulumi:"transportStreamReservedBitrate"`
}

func (MultiplexMultiplexSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplexMultiplexSettings)(nil)).Elem()
}

func (i MultiplexMultiplexSettingsArgs) ToMultiplexMultiplexSettingsOutput() MultiplexMultiplexSettingsOutput {
	return i.ToMultiplexMultiplexSettingsOutputWithContext(context.Background())
}

func (i MultiplexMultiplexSettingsArgs) ToMultiplexMultiplexSettingsOutputWithContext(ctx context.Context) MultiplexMultiplexSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplexMultiplexSettingsOutput)
}

func (i *MultiplexMultiplexSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*MultiplexMultiplexSettingsArgs] {
	return pulumix.Val(i)
}

type MultiplexMultiplexSettingsOutput struct{ *pulumi.OutputState }

func (MultiplexMultiplexSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplexMultiplexSettings)(nil)).Elem()
}

func (o MultiplexMultiplexSettingsOutput) ToMultiplexMultiplexSettingsOutput() MultiplexMultiplexSettingsOutput {
	return o
}

func (o MultiplexMultiplexSettingsOutput) ToMultiplexMultiplexSettingsOutputWithContext(ctx context.Context) MultiplexMultiplexSettingsOutput {
	return o
}

func (o MultiplexMultiplexSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[MultiplexMultiplexSettings] {
	return pulumix.Output[MultiplexMultiplexSettings]{
		OutputState: o.OutputState,
	}
}

// Maximum video buffer delay.
func (o MultiplexMultiplexSettingsOutput) MaximumVideoBufferDelayMilliseconds() pulumix.Output[*int] {
	return pulumix.Apply[MultiplexMultiplexSettings](o, func(v MultiplexMultiplexSettings) *int { return v.MaximumVideoBufferDelayMilliseconds })
}

// Transport stream bit rate.
func (o MultiplexMultiplexSettingsOutput) TransportStreamBitrate() pulumix.Output[int] {
	return pulumix.Apply[MultiplexMultiplexSettings](o, func(v MultiplexMultiplexSettings) int { return v.TransportStreamBitrate })
}

// Unique ID for each multiplex.
func (o MultiplexMultiplexSettingsOutput) TransportStreamId() pulumix.Output[int] {
	return pulumix.Apply[MultiplexMultiplexSettings](o, func(v MultiplexMultiplexSettings) int { return v.TransportStreamId })
}

// Transport stream reserved bit rate.
func (o MultiplexMultiplexSettingsOutput) TransportStreamReservedBitrate() pulumix.Output[*int] {
	return pulumix.Apply[MultiplexMultiplexSettings](o, func(v MultiplexMultiplexSettings) *int { return v.TransportStreamReservedBitrate })
}

type MultiplexProgramMultiplexProgramSettings struct {
	// Enum for preferred channel pipeline. Options are `CURRENTLY_ACTIVE`, `PIPELINE_0`, or `PIPELINE_1`.
	PreferredChannelPipeline string `pulumi:"preferredChannelPipeline"`
	// Unique program number.
	ProgramNumber int `pulumi:"programNumber"`
	// Service Descriptor. See Service Descriptor for more details.
	ServiceDescriptor *MultiplexProgramMultiplexProgramSettingsServiceDescriptor `pulumi:"serviceDescriptor"`
	// Video settings. See Video Settings for more details.
	VideoSettings *MultiplexProgramMultiplexProgramSettingsVideoSettings `pulumi:"videoSettings"`
}

type MultiplexProgramMultiplexProgramSettingsArgs struct {
	// Enum for preferred channel pipeline. Options are `CURRENTLY_ACTIVE`, `PIPELINE_0`, or `PIPELINE_1`.
	PreferredChannelPipeline pulumix.Input[string] `pulumi:"preferredChannelPipeline"`
	// Unique program number.
	ProgramNumber pulumix.Input[int] `pulumi:"programNumber"`
	// Service Descriptor. See Service Descriptor for more details.
	ServiceDescriptor pulumix.Input[*MultiplexProgramMultiplexProgramSettingsServiceDescriptorArgs] `pulumi:"serviceDescriptor"`
	// Video settings. See Video Settings for more details.
	VideoSettings pulumix.Input[*MultiplexProgramMultiplexProgramSettingsVideoSettingsArgs] `pulumi:"videoSettings"`
}

func (MultiplexProgramMultiplexProgramSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplexProgramMultiplexProgramSettings)(nil)).Elem()
}

func (i MultiplexProgramMultiplexProgramSettingsArgs) ToMultiplexProgramMultiplexProgramSettingsOutput() MultiplexProgramMultiplexProgramSettingsOutput {
	return i.ToMultiplexProgramMultiplexProgramSettingsOutputWithContext(context.Background())
}

func (i MultiplexProgramMultiplexProgramSettingsArgs) ToMultiplexProgramMultiplexProgramSettingsOutputWithContext(ctx context.Context) MultiplexProgramMultiplexProgramSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplexProgramMultiplexProgramSettingsOutput)
}

func (i *MultiplexProgramMultiplexProgramSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*MultiplexProgramMultiplexProgramSettingsArgs] {
	return pulumix.Val(i)
}

type MultiplexProgramMultiplexProgramSettingsOutput struct{ *pulumi.OutputState }

func (MultiplexProgramMultiplexProgramSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplexProgramMultiplexProgramSettings)(nil)).Elem()
}

func (o MultiplexProgramMultiplexProgramSettingsOutput) ToMultiplexProgramMultiplexProgramSettingsOutput() MultiplexProgramMultiplexProgramSettingsOutput {
	return o
}

func (o MultiplexProgramMultiplexProgramSettingsOutput) ToMultiplexProgramMultiplexProgramSettingsOutputWithContext(ctx context.Context) MultiplexProgramMultiplexProgramSettingsOutput {
	return o
}

func (o MultiplexProgramMultiplexProgramSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[MultiplexProgramMultiplexProgramSettings] {
	return pulumix.Output[MultiplexProgramMultiplexProgramSettings]{
		OutputState: o.OutputState,
	}
}

// Enum for preferred channel pipeline. Options are `CURRENTLY_ACTIVE`, `PIPELINE_0`, or `PIPELINE_1`.
func (o MultiplexProgramMultiplexProgramSettingsOutput) PreferredChannelPipeline() pulumix.Output[string] {
	return pulumix.Apply[MultiplexProgramMultiplexProgramSettings](o, func(v MultiplexProgramMultiplexProgramSettings) string { return v.PreferredChannelPipeline })
}

// Unique program number.
func (o MultiplexProgramMultiplexProgramSettingsOutput) ProgramNumber() pulumix.Output[int] {
	return pulumix.Apply[MultiplexProgramMultiplexProgramSettings](o, func(v MultiplexProgramMultiplexProgramSettings) int { return v.ProgramNumber })
}

// Service Descriptor. See Service Descriptor for more details.
func (o MultiplexProgramMultiplexProgramSettingsOutput) ServiceDescriptor() pulumix.GPtrOutput[MultiplexProgramMultiplexProgramSettingsServiceDescriptor, MultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput] {
	value := pulumix.Apply[MultiplexProgramMultiplexProgramSettings](o, func(v MultiplexProgramMultiplexProgramSettings) *MultiplexProgramMultiplexProgramSettingsServiceDescriptor {
		return v.ServiceDescriptor
	})
	return pulumix.GPtrOutput[MultiplexProgramMultiplexProgramSettingsServiceDescriptor, MultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput]{OutputState: value.OutputState}
}

// Video settings. See Video Settings for more details.
func (o MultiplexProgramMultiplexProgramSettingsOutput) VideoSettings() pulumix.GPtrOutput[MultiplexProgramMultiplexProgramSettingsVideoSettings, MultiplexProgramMultiplexProgramSettingsVideoSettingsOutput] {
	value := pulumix.Apply[MultiplexProgramMultiplexProgramSettings](o, func(v MultiplexProgramMultiplexProgramSettings) *MultiplexProgramMultiplexProgramSettingsVideoSettings {
		return v.VideoSettings
	})
	return pulumix.GPtrOutput[MultiplexProgramMultiplexProgramSettingsVideoSettings, MultiplexProgramMultiplexProgramSettingsVideoSettingsOutput]{OutputState: value.OutputState}
}

type MultiplexProgramMultiplexProgramSettingsServiceDescriptor struct {
	// Unique provider name.
	ProviderName string `pulumi:"providerName"`
	// Unique service name.
	ServiceName string `pulumi:"serviceName"`
}

type MultiplexProgramMultiplexProgramSettingsServiceDescriptorArgs struct {
	// Unique provider name.
	ProviderName pulumix.Input[string] `pulumi:"providerName"`
	// Unique service name.
	ServiceName pulumix.Input[string] `pulumi:"serviceName"`
}

func (MultiplexProgramMultiplexProgramSettingsServiceDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplexProgramMultiplexProgramSettingsServiceDescriptor)(nil)).Elem()
}

func (i MultiplexProgramMultiplexProgramSettingsServiceDescriptorArgs) ToMultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput() MultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput {
	return i.ToMultiplexProgramMultiplexProgramSettingsServiceDescriptorOutputWithContext(context.Background())
}

func (i MultiplexProgramMultiplexProgramSettingsServiceDescriptorArgs) ToMultiplexProgramMultiplexProgramSettingsServiceDescriptorOutputWithContext(ctx context.Context) MultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput)
}

func (i *MultiplexProgramMultiplexProgramSettingsServiceDescriptorArgs) ToOutput(ctx context.Context) pulumix.Output[*MultiplexProgramMultiplexProgramSettingsServiceDescriptorArgs] {
	return pulumix.Val(i)
}

type MultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput struct{ *pulumi.OutputState }

func (MultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplexProgramMultiplexProgramSettingsServiceDescriptor)(nil)).Elem()
}

func (o MultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput) ToMultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput() MultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput {
	return o
}

func (o MultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput) ToMultiplexProgramMultiplexProgramSettingsServiceDescriptorOutputWithContext(ctx context.Context) MultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput {
	return o
}

func (o MultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput) ToOutput(ctx context.Context) pulumix.Output[MultiplexProgramMultiplexProgramSettingsServiceDescriptor] {
	return pulumix.Output[MultiplexProgramMultiplexProgramSettingsServiceDescriptor]{
		OutputState: o.OutputState,
	}
}

// Unique provider name.
func (o MultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput) ProviderName() pulumix.Output[string] {
	return pulumix.Apply[MultiplexProgramMultiplexProgramSettingsServiceDescriptor](o, func(v MultiplexProgramMultiplexProgramSettingsServiceDescriptor) string { return v.ProviderName })
}

// Unique service name.
func (o MultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput) ServiceName() pulumix.Output[string] {
	return pulumix.Apply[MultiplexProgramMultiplexProgramSettingsServiceDescriptor](o, func(v MultiplexProgramMultiplexProgramSettingsServiceDescriptor) string { return v.ServiceName })
}

type MultiplexProgramMultiplexProgramSettingsVideoSettings struct {
	// Constant bitrate value.
	ConstantBitrate *int `pulumi:"constantBitrate"`
	// Statmux settings. See Statmux Settings for more details.
	StatmuxSettings *MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings `pulumi:"statmuxSettings"`
}

type MultiplexProgramMultiplexProgramSettingsVideoSettingsArgs struct {
	// Constant bitrate value.
	ConstantBitrate pulumix.Input[*int] `pulumi:"constantBitrate"`
	// Statmux settings. See Statmux Settings for more details.
	StatmuxSettings pulumix.Input[*MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsArgs] `pulumi:"statmuxSettings"`
}

func (MultiplexProgramMultiplexProgramSettingsVideoSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplexProgramMultiplexProgramSettingsVideoSettings)(nil)).Elem()
}

func (i MultiplexProgramMultiplexProgramSettingsVideoSettingsArgs) ToMultiplexProgramMultiplexProgramSettingsVideoSettingsOutput() MultiplexProgramMultiplexProgramSettingsVideoSettingsOutput {
	return i.ToMultiplexProgramMultiplexProgramSettingsVideoSettingsOutputWithContext(context.Background())
}

func (i MultiplexProgramMultiplexProgramSettingsVideoSettingsArgs) ToMultiplexProgramMultiplexProgramSettingsVideoSettingsOutputWithContext(ctx context.Context) MultiplexProgramMultiplexProgramSettingsVideoSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplexProgramMultiplexProgramSettingsVideoSettingsOutput)
}

func (i *MultiplexProgramMultiplexProgramSettingsVideoSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*MultiplexProgramMultiplexProgramSettingsVideoSettingsArgs] {
	return pulumix.Val(i)
}

type MultiplexProgramMultiplexProgramSettingsVideoSettingsOutput struct{ *pulumi.OutputState }

func (MultiplexProgramMultiplexProgramSettingsVideoSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplexProgramMultiplexProgramSettingsVideoSettings)(nil)).Elem()
}

func (o MultiplexProgramMultiplexProgramSettingsVideoSettingsOutput) ToMultiplexProgramMultiplexProgramSettingsVideoSettingsOutput() MultiplexProgramMultiplexProgramSettingsVideoSettingsOutput {
	return o
}

func (o MultiplexProgramMultiplexProgramSettingsVideoSettingsOutput) ToMultiplexProgramMultiplexProgramSettingsVideoSettingsOutputWithContext(ctx context.Context) MultiplexProgramMultiplexProgramSettingsVideoSettingsOutput {
	return o
}

func (o MultiplexProgramMultiplexProgramSettingsVideoSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[MultiplexProgramMultiplexProgramSettingsVideoSettings] {
	return pulumix.Output[MultiplexProgramMultiplexProgramSettingsVideoSettings]{
		OutputState: o.OutputState,
	}
}

// Constant bitrate value.
func (o MultiplexProgramMultiplexProgramSettingsVideoSettingsOutput) ConstantBitrate() pulumix.Output[*int] {
	return pulumix.Apply[MultiplexProgramMultiplexProgramSettingsVideoSettings](o, func(v MultiplexProgramMultiplexProgramSettingsVideoSettings) *int { return v.ConstantBitrate })
}

// Statmux settings. See Statmux Settings for more details.
func (o MultiplexProgramMultiplexProgramSettingsVideoSettingsOutput) StatmuxSettings() pulumix.GPtrOutput[MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings, MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput] {
	value := pulumix.Apply[MultiplexProgramMultiplexProgramSettingsVideoSettings](o, func(v MultiplexProgramMultiplexProgramSettingsVideoSettings) *MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings {
		return v.StatmuxSettings
	})
	return pulumix.GPtrOutput[MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings, MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput]{OutputState: value.OutputState}
}

type MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings struct {
	// Maximum bitrate.
	MaximumBitrate *int `pulumi:"maximumBitrate"`
	// Minimum bitrate.
	MinimumBitrate *int `pulumi:"minimumBitrate"`
	// Priority value.
	Priority *int `pulumi:"priority"`
}

type MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsArgs struct {
	// Maximum bitrate.
	MaximumBitrate pulumix.Input[*int] `pulumi:"maximumBitrate"`
	// Minimum bitrate.
	MinimumBitrate pulumix.Input[*int] `pulumi:"minimumBitrate"`
	// Priority value.
	Priority pulumix.Input[*int] `pulumi:"priority"`
}

func (MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings)(nil)).Elem()
}

func (i MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsArgs) ToMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput() MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput {
	return i.ToMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutputWithContext(context.Background())
}

func (i MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsArgs) ToMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutputWithContext(ctx context.Context) MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput)
}

func (i *MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsArgs] {
	return pulumix.Val(i)
}

type MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput struct{ *pulumi.OutputState }

func (MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings)(nil)).Elem()
}

func (o MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput) ToMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput() MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput {
	return o
}

func (o MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput) ToMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutputWithContext(ctx context.Context) MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput {
	return o
}

func (o MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings] {
	return pulumix.Output[MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings]{
		OutputState: o.OutputState,
	}
}

// Maximum bitrate.
func (o MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput) MaximumBitrate() pulumix.Output[*int] {
	return pulumix.Apply[MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings](o, func(v MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings) *int {
		return v.MaximumBitrate
	})
}

// Minimum bitrate.
func (o MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput) MinimumBitrate() pulumix.Output[*int] {
	return pulumix.Apply[MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings](o, func(v MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings) *int {
		return v.MinimumBitrate
	})
}

// Priority value.
func (o MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput) Priority() pulumix.Output[*int] {
	return pulumix.Apply[MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings](o, func(v MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings) *int { return v.Priority })
}

func init() {
	pulumi.RegisterOutputType(ChannelCdiInputSpecificationOutput{})
	pulumi.RegisterOutputType(ChannelDestinationOutput{})
	pulumi.RegisterOutputType(ChannelDestinationMediaPackageSettingOutput{})
	pulumi.RegisterOutputType(ChannelDestinationMultiplexSettingsOutput{})
	pulumi.RegisterOutputType(ChannelDestinationSettingOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionCodecSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionRemixSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevelOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAvailBlankingOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsAvailBlankingAvailBlankingImageOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsAribDestinationSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsBurnInDestinationSettingsFontOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFontOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEbuTtDDestinationSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedDestinationSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsRtmpCaptionInfoDestinationSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsScte27DestinationSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsSmpteTtDestinationSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTeletextDestinationSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsTtmlDestinationSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsWebvttDestinationSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsGlobalConfigurationOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsMotionGraphicsConfigurationOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsNielsenConfigurationOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputTypeOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3SettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestinationOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3SettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServerOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestinationOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8SettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestinationOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestinationOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsTimecodeConfigOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionCodecSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutput{})
	pulumi.RegisterOutputType(ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentAutomaticInputFailoverSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsAudioSelectorOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsCaptionSelectorOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsNetworkInputSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettingsOutput{})
	pulumi.RegisterOutputType(ChannelInputAttachmentInputSettingsVideoSelectorOutput{})
	pulumi.RegisterOutputType(ChannelInputSpecificationOutput{})
	pulumi.RegisterOutputType(ChannelMaintenanceOutput{})
	pulumi.RegisterOutputType(ChannelVpcOutput{})
	pulumi.RegisterOutputType(InputDestinationOutput{})
	pulumi.RegisterOutputType(InputInputDeviceOutput{})
	pulumi.RegisterOutputType(InputMediaConnectFlowOutput{})
	pulumi.RegisterOutputType(InputSecurityGroupWhitelistRuleOutput{})
	pulumi.RegisterOutputType(InputSourceOutput{})
	pulumi.RegisterOutputType(InputVpcOutput{})
	pulumi.RegisterOutputType(MultiplexMultiplexSettingsOutput{})
	pulumi.RegisterOutputType(MultiplexProgramMultiplexProgramSettingsOutput{})
	pulumi.RegisterOutputType(MultiplexProgramMultiplexProgramSettingsServiceDescriptorOutput{})
	pulumi.RegisterOutputType(MultiplexProgramMultiplexProgramSettingsVideoSettingsOutput{})
	pulumi.RegisterOutputType(MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutput{})
}
