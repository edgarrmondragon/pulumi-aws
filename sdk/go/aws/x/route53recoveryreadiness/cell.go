// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoveryreadiness

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Route 53 Recovery Readiness Cell.
type Cell struct {
	pulumi.CustomResourceState

	// ARN of the cell
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Unique name describing the cell.
	//
	// The following arguments are optional:
	CellName pulumix.Output[string] `pulumi:"cellName"`
	// List of cell arns to add as nested fault domains within this cell.
	Cells pulumix.ArrayOutput[string] `pulumi:"cells"`
	// List of readiness scopes (recovery groups or cells) that contain this cell.
	ParentReadinessScopes pulumix.ArrayOutput[string] `pulumi:"parentReadinessScopes"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewCell registers a new resource with the given unique name, arguments, and options.
func NewCell(ctx *pulumi.Context,
	name string, args *CellArgs, opts ...pulumi.ResourceOption) (*Cell, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CellName == nil {
		return nil, errors.New("invalid value for required argument 'CellName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cell
	err := ctx.RegisterResource("aws:route53recoveryreadiness/cell:Cell", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCell gets an existing Cell resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCell(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CellState, opts ...pulumi.ResourceOption) (*Cell, error) {
	var resource Cell
	err := ctx.ReadResource("aws:route53recoveryreadiness/cell:Cell", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cell resources.
type cellState struct {
	// ARN of the cell
	Arn *string `pulumi:"arn"`
	// Unique name describing the cell.
	//
	// The following arguments are optional:
	CellName *string `pulumi:"cellName"`
	// List of cell arns to add as nested fault domains within this cell.
	Cells []string `pulumi:"cells"`
	// List of readiness scopes (recovery groups or cells) that contain this cell.
	ParentReadinessScopes []string `pulumi:"parentReadinessScopes"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type CellState struct {
	// ARN of the cell
	Arn pulumix.Input[*string]
	// Unique name describing the cell.
	//
	// The following arguments are optional:
	CellName pulumix.Input[*string]
	// List of cell arns to add as nested fault domains within this cell.
	Cells pulumix.Input[[]string]
	// List of readiness scopes (recovery groups or cells) that contain this cell.
	ParentReadinessScopes pulumix.Input[[]string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (CellState) ElementType() reflect.Type {
	return reflect.TypeOf((*cellState)(nil)).Elem()
}

type cellArgs struct {
	// Unique name describing the cell.
	//
	// The following arguments are optional:
	CellName string `pulumi:"cellName"`
	// List of cell arns to add as nested fault domains within this cell.
	Cells []string `pulumi:"cells"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Cell resource.
type CellArgs struct {
	// Unique name describing the cell.
	//
	// The following arguments are optional:
	CellName pulumix.Input[string]
	// List of cell arns to add as nested fault domains within this cell.
	Cells pulumix.Input[[]string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
}

func (CellArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cellArgs)(nil)).Elem()
}

type CellOutput struct{ *pulumi.OutputState }

func (CellOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cell)(nil)).Elem()
}

func (o CellOutput) ToCellOutput() CellOutput {
	return o
}

func (o CellOutput) ToCellOutputWithContext(ctx context.Context) CellOutput {
	return o
}

func (o CellOutput) ToOutput(ctx context.Context) pulumix.Output[Cell] {
	return pulumix.Output[Cell]{
		OutputState: o.OutputState,
	}
}

// ARN of the cell
func (o CellOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Cell](o, func(v Cell) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique name describing the cell.
//
// The following arguments are optional:
func (o CellOutput) CellName() pulumix.Output[string] {
	value := pulumix.Apply[Cell](o, func(v Cell) pulumix.Output[string] { return v.CellName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of cell arns to add as nested fault domains within this cell.
func (o CellOutput) Cells() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Cell](o, func(v Cell) pulumix.ArrayOutput[string] { return v.Cells })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// List of readiness scopes (recovery groups or cells) that contain this cell.
func (o CellOutput) ParentReadinessScopes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Cell](o, func(v Cell) pulumix.ArrayOutput[string] { return v.ParentReadinessScopes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
func (o CellOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Cell](o, func(v Cell) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o CellOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Cell](o, func(v Cell) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(CellOutput{})
}
