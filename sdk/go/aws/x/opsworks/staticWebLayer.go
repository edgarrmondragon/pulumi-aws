// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an OpsWorks static web server layer resource.
type StaticWebLayer struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name(ARN) of the layer.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps pulumix.Output[*bool] `pulumi:"autoAssignElasticIps"`
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps pulumix.Output[*bool] `pulumi:"autoAssignPublicIps"`
	// Whether to enable auto-healing for the layer.
	AutoHealing             pulumix.Output[*bool]                                                                                  `pulumi:"autoHealing"`
	CloudwatchConfiguration pulumix.GPtrOutput[StaticWebLayerCloudwatchConfiguration, StaticWebLayerCloudwatchConfigurationOutput] `pulumi:"cloudwatchConfiguration"`
	CustomConfigureRecipes  pulumix.ArrayOutput[string]                                                                            `pulumi:"customConfigureRecipes"`
	CustomDeployRecipes     pulumix.ArrayOutput[string]                                                                            `pulumi:"customDeployRecipes"`
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn pulumix.Output[*string] `pulumi:"customInstanceProfileArn"`
	CustomJson               pulumix.Output[*string] `pulumi:"customJson"`
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"customSecurityGroupIds"`
	CustomSetupRecipes     pulumix.ArrayOutput[string] `pulumi:"customSetupRecipes"`
	CustomShutdownRecipes  pulumix.ArrayOutput[string] `pulumi:"customShutdownRecipes"`
	CustomUndeployRecipes  pulumix.ArrayOutput[string] `pulumi:"customUndeployRecipes"`
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown pulumix.Output[*bool] `pulumi:"drainElbOnShutdown"`
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes pulumix.GArrayOutput[StaticWebLayerEbsVolume, StaticWebLayerEbsVolumeOutput] `pulumi:"ebsVolumes"`
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer pulumix.Output[*string] `pulumi:"elasticLoadBalancer"`
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot pulumix.Output[*bool] `pulumi:"installUpdatesOnBoot"`
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout pulumix.Output[*int]                                                                             `pulumi:"instanceShutdownTimeout"`
	LoadBasedAutoScaling    pulumix.GPtrOutput[StaticWebLayerLoadBasedAutoScaling, StaticWebLayerLoadBasedAutoScalingOutput] `pulumi:"loadBasedAutoScaling"`
	// A human-readable name for the layer.
	Name pulumix.Output[string] `pulumi:"name"`
	// ID of the stack the layer will belong to.
	StackId pulumix.Output[string] `pulumi:"stackId"`
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages pulumix.ArrayOutput[string] `pulumi:"systemPackages"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// The following extra optional arguments, all lists of Chef recipe names, allow
	// custom Chef recipes to be applied to layer instances at the five different
	// lifecycle events, if custom cookbooks are enabled on the layer's stack:
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances pulumix.Output[*bool] `pulumi:"useEbsOptimizedInstances"`
}

// NewStaticWebLayer registers a new resource with the given unique name, arguments, and options.
func NewStaticWebLayer(ctx *pulumi.Context,
	name string, args *StaticWebLayerArgs, opts ...pulumi.ResourceOption) (*StaticWebLayer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StaticWebLayer
	err := ctx.RegisterResource("aws:opsworks/staticWebLayer:StaticWebLayer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStaticWebLayer gets an existing StaticWebLayer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStaticWebLayer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StaticWebLayerState, opts ...pulumi.ResourceOption) (*StaticWebLayer, error) {
	var resource StaticWebLayer
	err := ctx.ReadResource("aws:opsworks/staticWebLayer:StaticWebLayer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StaticWebLayer resources.
type staticWebLayerState struct {
	// The Amazon Resource Name(ARN) of the layer.
	Arn *string `pulumi:"arn"`
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps *bool `pulumi:"autoAssignElasticIps"`
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps *bool `pulumi:"autoAssignPublicIps"`
	// Whether to enable auto-healing for the layer.
	AutoHealing             *bool                                  `pulumi:"autoHealing"`
	CloudwatchConfiguration *StaticWebLayerCloudwatchConfiguration `pulumi:"cloudwatchConfiguration"`
	CustomConfigureRecipes  []string                               `pulumi:"customConfigureRecipes"`
	CustomDeployRecipes     []string                               `pulumi:"customDeployRecipes"`
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn *string `pulumi:"customInstanceProfileArn"`
	CustomJson               *string `pulumi:"customJson"`
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds []string `pulumi:"customSecurityGroupIds"`
	CustomSetupRecipes     []string `pulumi:"customSetupRecipes"`
	CustomShutdownRecipes  []string `pulumi:"customShutdownRecipes"`
	CustomUndeployRecipes  []string `pulumi:"customUndeployRecipes"`
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown *bool `pulumi:"drainElbOnShutdown"`
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes []StaticWebLayerEbsVolume `pulumi:"ebsVolumes"`
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer *string `pulumi:"elasticLoadBalancer"`
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot *bool `pulumi:"installUpdatesOnBoot"`
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout *int                                `pulumi:"instanceShutdownTimeout"`
	LoadBasedAutoScaling    *StaticWebLayerLoadBasedAutoScaling `pulumi:"loadBasedAutoScaling"`
	// A human-readable name for the layer.
	Name *string `pulumi:"name"`
	// ID of the stack the layer will belong to.
	StackId *string `pulumi:"stackId"`
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages []string `pulumi:"systemPackages"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// The following extra optional arguments, all lists of Chef recipe names, allow
	// custom Chef recipes to be applied to layer instances at the five different
	// lifecycle events, if custom cookbooks are enabled on the layer's stack:
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances *bool `pulumi:"useEbsOptimizedInstances"`
}

type StaticWebLayerState struct {
	// The Amazon Resource Name(ARN) of the layer.
	Arn pulumix.Input[*string]
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps pulumix.Input[*bool]
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps pulumix.Input[*bool]
	// Whether to enable auto-healing for the layer.
	AutoHealing             pulumix.Input[*bool]
	CloudwatchConfiguration pulumix.Input[*StaticWebLayerCloudwatchConfigurationArgs]
	CustomConfigureRecipes  pulumix.Input[[]string]
	CustomDeployRecipes     pulumix.Input[[]string]
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn pulumix.Input[*string]
	CustomJson               pulumix.Input[*string]
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds pulumix.Input[[]string]
	CustomSetupRecipes     pulumix.Input[[]string]
	CustomShutdownRecipes  pulumix.Input[[]string]
	CustomUndeployRecipes  pulumix.Input[[]string]
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown pulumix.Input[*bool]
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes pulumix.Input[[]*StaticWebLayerEbsVolumeArgs]
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer pulumix.Input[*string]
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot pulumix.Input[*bool]
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout pulumix.Input[*int]
	LoadBasedAutoScaling    pulumix.Input[*StaticWebLayerLoadBasedAutoScalingArgs]
	// A human-readable name for the layer.
	Name pulumix.Input[*string]
	// ID of the stack the layer will belong to.
	StackId pulumix.Input[*string]
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages pulumix.Input[[]string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// The following extra optional arguments, all lists of Chef recipe names, allow
	// custom Chef recipes to be applied to layer instances at the five different
	// lifecycle events, if custom cookbooks are enabled on the layer's stack:
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances pulumix.Input[*bool]
}

func (StaticWebLayerState) ElementType() reflect.Type {
	return reflect.TypeOf((*staticWebLayerState)(nil)).Elem()
}

type staticWebLayerArgs struct {
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps *bool `pulumi:"autoAssignElasticIps"`
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps *bool `pulumi:"autoAssignPublicIps"`
	// Whether to enable auto-healing for the layer.
	AutoHealing             *bool                                  `pulumi:"autoHealing"`
	CloudwatchConfiguration *StaticWebLayerCloudwatchConfiguration `pulumi:"cloudwatchConfiguration"`
	CustomConfigureRecipes  []string                               `pulumi:"customConfigureRecipes"`
	CustomDeployRecipes     []string                               `pulumi:"customDeployRecipes"`
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn *string `pulumi:"customInstanceProfileArn"`
	CustomJson               *string `pulumi:"customJson"`
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds []string `pulumi:"customSecurityGroupIds"`
	CustomSetupRecipes     []string `pulumi:"customSetupRecipes"`
	CustomShutdownRecipes  []string `pulumi:"customShutdownRecipes"`
	CustomUndeployRecipes  []string `pulumi:"customUndeployRecipes"`
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown *bool `pulumi:"drainElbOnShutdown"`
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes []StaticWebLayerEbsVolume `pulumi:"ebsVolumes"`
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer *string `pulumi:"elasticLoadBalancer"`
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot *bool `pulumi:"installUpdatesOnBoot"`
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout *int                                `pulumi:"instanceShutdownTimeout"`
	LoadBasedAutoScaling    *StaticWebLayerLoadBasedAutoScaling `pulumi:"loadBasedAutoScaling"`
	// A human-readable name for the layer.
	Name *string `pulumi:"name"`
	// ID of the stack the layer will belong to.
	StackId string `pulumi:"stackId"`
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages []string `pulumi:"systemPackages"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// The following extra optional arguments, all lists of Chef recipe names, allow
	// custom Chef recipes to be applied to layer instances at the five different
	// lifecycle events, if custom cookbooks are enabled on the layer's stack:
	Tags map[string]string `pulumi:"tags"`
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances *bool `pulumi:"useEbsOptimizedInstances"`
}

// The set of arguments for constructing a StaticWebLayer resource.
type StaticWebLayerArgs struct {
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps pulumix.Input[*bool]
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps pulumix.Input[*bool]
	// Whether to enable auto-healing for the layer.
	AutoHealing             pulumix.Input[*bool]
	CloudwatchConfiguration pulumix.Input[*StaticWebLayerCloudwatchConfigurationArgs]
	CustomConfigureRecipes  pulumix.Input[[]string]
	CustomDeployRecipes     pulumix.Input[[]string]
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn pulumix.Input[*string]
	CustomJson               pulumix.Input[*string]
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds pulumix.Input[[]string]
	CustomSetupRecipes     pulumix.Input[[]string]
	CustomShutdownRecipes  pulumix.Input[[]string]
	CustomUndeployRecipes  pulumix.Input[[]string]
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown pulumix.Input[*bool]
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes pulumix.Input[[]*StaticWebLayerEbsVolumeArgs]
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer pulumix.Input[*string]
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot pulumix.Input[*bool]
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout pulumix.Input[*int]
	LoadBasedAutoScaling    pulumix.Input[*StaticWebLayerLoadBasedAutoScalingArgs]
	// A human-readable name for the layer.
	Name pulumix.Input[*string]
	// ID of the stack the layer will belong to.
	StackId pulumix.Input[string]
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages pulumix.Input[[]string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// The following extra optional arguments, all lists of Chef recipe names, allow
	// custom Chef recipes to be applied to layer instances at the five different
	// lifecycle events, if custom cookbooks are enabled on the layer's stack:
	Tags pulumix.Input[map[string]string]
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances pulumix.Input[*bool]
}

func (StaticWebLayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*staticWebLayerArgs)(nil)).Elem()
}

type StaticWebLayerOutput struct{ *pulumi.OutputState }

func (StaticWebLayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayer)(nil)).Elem()
}

func (o StaticWebLayerOutput) ToStaticWebLayerOutput() StaticWebLayerOutput {
	return o
}

func (o StaticWebLayerOutput) ToStaticWebLayerOutputWithContext(ctx context.Context) StaticWebLayerOutput {
	return o
}

func (o StaticWebLayerOutput) ToOutput(ctx context.Context) pulumix.Output[StaticWebLayer] {
	return pulumix.Output[StaticWebLayer]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name(ARN) of the layer.
func (o StaticWebLayerOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to automatically assign an elastic IP address to the layer's instances.
func (o StaticWebLayerOutput) AutoAssignElasticIps() pulumix.Output[*bool] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.Output[*bool] { return v.AutoAssignElasticIps })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
func (o StaticWebLayerOutput) AutoAssignPublicIps() pulumix.Output[*bool] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.Output[*bool] { return v.AutoAssignPublicIps })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Whether to enable auto-healing for the layer.
func (o StaticWebLayerOutput) AutoHealing() pulumix.Output[*bool] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.Output[*bool] { return v.AutoHealing })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func (o StaticWebLayerOutput) CloudwatchConfiguration() pulumix.GPtrOutput[StaticWebLayerCloudwatchConfiguration, StaticWebLayerCloudwatchConfigurationOutput] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.GPtrOutput[StaticWebLayerCloudwatchConfiguration, StaticWebLayerCloudwatchConfigurationOutput] {
		return v.CloudwatchConfiguration
	})
	unwrapped := pulumix.Flatten[*StaticWebLayerCloudwatchConfiguration, pulumix.GPtrOutput[StaticWebLayerCloudwatchConfiguration, StaticWebLayerCloudwatchConfigurationOutput]](value)
	return pulumix.GPtrOutput[StaticWebLayerCloudwatchConfiguration, StaticWebLayerCloudwatchConfigurationOutput]{OutputState: unwrapped.OutputState}
}

func (o StaticWebLayerOutput) CustomConfigureRecipes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.ArrayOutput[string] { return v.CustomConfigureRecipes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o StaticWebLayerOutput) CustomDeployRecipes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.ArrayOutput[string] { return v.CustomDeployRecipes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The ARN of an IAM profile that will be used for the layer's instances.
func (o StaticWebLayerOutput) CustomInstanceProfileArn() pulumix.Output[*string] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.Output[*string] { return v.CustomInstanceProfileArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o StaticWebLayerOutput) CustomJson() pulumix.Output[*string] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.Output[*string] { return v.CustomJson })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Ids for a set of security groups to apply to the layer's instances.
func (o StaticWebLayerOutput) CustomSecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.ArrayOutput[string] { return v.CustomSecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o StaticWebLayerOutput) CustomSetupRecipes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.ArrayOutput[string] { return v.CustomSetupRecipes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o StaticWebLayerOutput) CustomShutdownRecipes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.ArrayOutput[string] { return v.CustomShutdownRecipes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o StaticWebLayerOutput) CustomUndeployRecipes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.ArrayOutput[string] { return v.CustomUndeployRecipes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Whether to enable Elastic Load Balancing connection draining.
func (o StaticWebLayerOutput) DrainElbOnShutdown() pulumix.Output[*bool] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.Output[*bool] { return v.DrainElbOnShutdown })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
func (o StaticWebLayerOutput) EbsVolumes() pulumix.GArrayOutput[StaticWebLayerEbsVolume, StaticWebLayerEbsVolumeOutput] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.GArrayOutput[StaticWebLayerEbsVolume, StaticWebLayerEbsVolumeOutput] {
		return v.EbsVolumes
	})
	unwrapped := pulumix.Flatten[[]StaticWebLayerEbsVolume, pulumix.GArrayOutput[StaticWebLayerEbsVolume, StaticWebLayerEbsVolumeOutput]](value)
	return pulumix.GArrayOutput[StaticWebLayerEbsVolume, StaticWebLayerEbsVolumeOutput]{OutputState: unwrapped.OutputState}
}

// Name of an Elastic Load Balancer to attach to this layer
func (o StaticWebLayerOutput) ElasticLoadBalancer() pulumix.Output[*string] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.Output[*string] { return v.ElasticLoadBalancer })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether to install OS and package updates on each instance when it boots.
func (o StaticWebLayerOutput) InstallUpdatesOnBoot() pulumix.Output[*bool] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.Output[*bool] { return v.InstallUpdatesOnBoot })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
func (o StaticWebLayerOutput) InstanceShutdownTimeout() pulumix.Output[*int] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.Output[*int] { return v.InstanceShutdownTimeout })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o StaticWebLayerOutput) LoadBasedAutoScaling() pulumix.GPtrOutput[StaticWebLayerLoadBasedAutoScaling, StaticWebLayerLoadBasedAutoScalingOutput] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.GPtrOutput[StaticWebLayerLoadBasedAutoScaling, StaticWebLayerLoadBasedAutoScalingOutput] {
		return v.LoadBasedAutoScaling
	})
	unwrapped := pulumix.Flatten[*StaticWebLayerLoadBasedAutoScaling, pulumix.GPtrOutput[StaticWebLayerLoadBasedAutoScaling, StaticWebLayerLoadBasedAutoScalingOutput]](value)
	return pulumix.GPtrOutput[StaticWebLayerLoadBasedAutoScaling, StaticWebLayerLoadBasedAutoScalingOutput]{OutputState: unwrapped.OutputState}
}

// A human-readable name for the layer.
func (o StaticWebLayerOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the stack the layer will belong to.
func (o StaticWebLayerOutput) StackId() pulumix.Output[string] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.Output[string] { return v.StackId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Names of a set of system packages to install on the layer's instances.
func (o StaticWebLayerOutput) SystemPackages() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.ArrayOutput[string] { return v.SystemPackages })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
//
// The following extra optional arguments, all lists of Chef recipe names, allow
// custom Chef recipes to be applied to layer instances at the five different
// lifecycle events, if custom cookbooks are enabled on the layer's stack:
func (o StaticWebLayerOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o StaticWebLayerOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Whether to use EBS-optimized instances.
func (o StaticWebLayerOutput) UseEbsOptimizedInstances() pulumix.Output[*bool] {
	value := pulumix.Apply[StaticWebLayer](o, func(v StaticWebLayer) pulumix.Output[*bool] { return v.UseEbsOptimizedInstances })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(StaticWebLayerOutput{})
}
