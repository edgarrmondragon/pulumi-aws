// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datapipeline

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific DataPipeline Pipeline.
func LookupPipeline(ctx *pulumi.Context, args *LookupPipelineArgs, opts ...pulumi.InvokeOption) (*LookupPipelineResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPipelineResult
	err := ctx.Invoke("aws:datapipeline/getPipeline:getPipeline", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPipeline.
type LookupPipelineArgs struct {
	// ID of the pipeline.
	PipelineId string `pulumi:"pipelineId"`
	// Map of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getPipeline.
type LookupPipelineResult struct {
	// Description of Pipeline.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of Pipeline.
	Name       string `pulumi:"name"`
	PipelineId string `pulumi:"pipelineId"`
	// Map of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
}

func LookupPipelineOutput(ctx *pulumi.Context, args LookupPipelineOutputArgs, opts ...pulumi.InvokeOption) LookupPipelineResultOutput {
	outputResult := pulumix.ApplyErr[*LookupPipelineArgs](args.ToOutput(), func(plainArgs *LookupPipelineArgs) (*LookupPipelineResult, error) {
		return LookupPipeline(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupPipelineResultOutput, *LookupPipelineResult](outputResult)
}

// A collection of arguments for invoking getPipeline.
type LookupPipelineOutputArgs struct {
	// ID of the pipeline.
	PipelineId pulumix.Input[string] `pulumi:"pipelineId"`
	// Map of tags assigned to the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupPipelineOutputArgs) ToOutput() pulumix.Output[*LookupPipelineArgs] {
	allArgs := pulumix.All(
		args.PipelineId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupPipelineArgs {
		return &LookupPipelineArgs{
			PipelineId: resolvedArgs[0].(string),
			Tags:       resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupPipelineResultOutput struct{ *pulumi.OutputState }

func (LookupPipelineResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPipelineResult)(nil)).Elem()
}

func (o LookupPipelineResultOutput) ToOutput(context.Context) pulumix.Output[*LookupPipelineResult] {
	return pulumix.Output[*LookupPipelineResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupPipelineResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupPipelineResult](o, func(v *LookupPipelineResult) string { return v.Description })
}

func (o LookupPipelineResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupPipelineResult](o, func(v *LookupPipelineResult) string { return v.Id })
}

func (o LookupPipelineResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupPipelineResult](o, func(v *LookupPipelineResult) string { return v.Name })
}

func (o LookupPipelineResultOutput) PipelineId() pulumix.Output[string] {
	return pulumix.Apply[*LookupPipelineResult](o, func(v *LookupPipelineResult) string { return v.PipelineId })
}

func (o LookupPipelineResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupPipelineResult](o, func(v *LookupPipelineResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
