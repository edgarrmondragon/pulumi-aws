// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the signing certificate for a Cognito IdP user pool.
func GetUserPoolSigningCertificate(ctx *pulumi.Context, args *GetUserPoolSigningCertificateArgs, opts ...pulumi.InvokeOption) (*GetUserPoolSigningCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUserPoolSigningCertificateResult
	err := ctx.Invoke("aws:cognito/getUserPoolSigningCertificate:getUserPoolSigningCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserPoolSigningCertificate.
type GetUserPoolSigningCertificateArgs struct {
	// Cognito user pool ID.
	UserPoolId string `pulumi:"userPoolId"`
}

// A collection of values returned by getUserPoolSigningCertificate.
type GetUserPoolSigningCertificateResult struct {
	// Certificate string
	Certificate string `pulumi:"certificate"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	UserPoolId string `pulumi:"userPoolId"`
}

func GetUserPoolSigningCertificateOutput(ctx *pulumi.Context, args GetUserPoolSigningCertificateOutputArgs, opts ...pulumi.InvokeOption) GetUserPoolSigningCertificateResultOutput {
	outputResult := pulumix.ApplyErr[*GetUserPoolSigningCertificateArgs](args.ToOutput(), func(plainArgs *GetUserPoolSigningCertificateArgs) (*GetUserPoolSigningCertificateResult, error) {
		return GetUserPoolSigningCertificate(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetUserPoolSigningCertificateResultOutput, *GetUserPoolSigningCertificateResult](outputResult)
}

// A collection of arguments for invoking getUserPoolSigningCertificate.
type GetUserPoolSigningCertificateOutputArgs struct {
	// Cognito user pool ID.
	UserPoolId pulumix.Input[string] `pulumi:"userPoolId"`
}

func (args GetUserPoolSigningCertificateOutputArgs) ToOutput() pulumix.Output[*GetUserPoolSigningCertificateArgs] {
	allArgs := pulumix.All(
		args.UserPoolId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetUserPoolSigningCertificateArgs {
		return &GetUserPoolSigningCertificateArgs{
			UserPoolId: resolvedArgs[0].(string),
		}
	})
}

type GetUserPoolSigningCertificateResultOutput struct{ *pulumi.OutputState }

func (GetUserPoolSigningCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPoolSigningCertificateResult)(nil)).Elem()
}

func (o GetUserPoolSigningCertificateResultOutput) ToOutput(context.Context) pulumix.Output[*GetUserPoolSigningCertificateResult] {
	return pulumix.Output[*GetUserPoolSigningCertificateResult]{
		OutputState: o.OutputState,
	}
}

func (o GetUserPoolSigningCertificateResultOutput) Certificate() pulumix.Output[string] {
	return pulumix.Apply[*GetUserPoolSigningCertificateResult](o, func(v *GetUserPoolSigningCertificateResult) string { return v.Certificate })
}

func (o GetUserPoolSigningCertificateResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetUserPoolSigningCertificateResult](o, func(v *GetUserPoolSigningCertificateResult) string { return v.Id })
}

func (o GetUserPoolSigningCertificateResultOutput) UserPoolId() pulumix.Output[string] {
	return pulumix.Apply[*GetUserPoolSigningCertificateResult](o, func(v *GetUserPoolSigningCertificateResult) string { return v.UserPoolId })
}
