// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfront

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type KeyGroup struct {
	pulumi.CustomResourceState

	// A comment to describe the key group..
	Comment pulumix.Output[*string] `pulumi:"comment"`
	// The identifier for this version of the key group.
	Etag pulumix.Output[string] `pulumi:"etag"`
	// A list of the identifiers of the public keys in the key group.
	Items pulumix.ArrayOutput[string] `pulumi:"items"`
	// A name to identify the key group.
	Name pulumix.Output[string] `pulumi:"name"`
}

// NewKeyGroup registers a new resource with the given unique name, arguments, and options.
func NewKeyGroup(ctx *pulumi.Context,
	name string, args *KeyGroupArgs, opts ...pulumi.ResourceOption) (*KeyGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyGroup
	err := ctx.RegisterResource("aws:cloudfront/keyGroup:KeyGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyGroup gets an existing KeyGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyGroupState, opts ...pulumi.ResourceOption) (*KeyGroup, error) {
	var resource KeyGroup
	err := ctx.ReadResource("aws:cloudfront/keyGroup:KeyGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyGroup resources.
type keyGroupState struct {
	// A comment to describe the key group..
	Comment *string `pulumi:"comment"`
	// The identifier for this version of the key group.
	Etag *string `pulumi:"etag"`
	// A list of the identifiers of the public keys in the key group.
	Items []string `pulumi:"items"`
	// A name to identify the key group.
	Name *string `pulumi:"name"`
}

type KeyGroupState struct {
	// A comment to describe the key group..
	Comment pulumix.Input[*string]
	// The identifier for this version of the key group.
	Etag pulumix.Input[*string]
	// A list of the identifiers of the public keys in the key group.
	Items pulumix.Input[[]string]
	// A name to identify the key group.
	Name pulumix.Input[*string]
}

func (KeyGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyGroupState)(nil)).Elem()
}

type keyGroupArgs struct {
	// A comment to describe the key group..
	Comment *string `pulumi:"comment"`
	// A list of the identifiers of the public keys in the key group.
	Items []string `pulumi:"items"`
	// A name to identify the key group.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a KeyGroup resource.
type KeyGroupArgs struct {
	// A comment to describe the key group..
	Comment pulumix.Input[*string]
	// A list of the identifiers of the public keys in the key group.
	Items pulumix.Input[[]string]
	// A name to identify the key group.
	Name pulumix.Input[*string]
}

func (KeyGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyGroupArgs)(nil)).Elem()
}

type KeyGroupOutput struct{ *pulumi.OutputState }

func (KeyGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyGroup)(nil)).Elem()
}

func (o KeyGroupOutput) ToKeyGroupOutput() KeyGroupOutput {
	return o
}

func (o KeyGroupOutput) ToKeyGroupOutputWithContext(ctx context.Context) KeyGroupOutput {
	return o
}

func (o KeyGroupOutput) ToOutput(ctx context.Context) pulumix.Output[KeyGroup] {
	return pulumix.Output[KeyGroup]{
		OutputState: o.OutputState,
	}
}

// A comment to describe the key group..
func (o KeyGroupOutput) Comment() pulumix.Output[*string] {
	value := pulumix.Apply[KeyGroup](o, func(v KeyGroup) pulumix.Output[*string] { return v.Comment })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The identifier for this version of the key group.
func (o KeyGroupOutput) Etag() pulumix.Output[string] {
	value := pulumix.Apply[KeyGroup](o, func(v KeyGroup) pulumix.Output[string] { return v.Etag })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of the identifiers of the public keys in the key group.
func (o KeyGroupOutput) Items() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[KeyGroup](o, func(v KeyGroup) pulumix.ArrayOutput[string] { return v.Items })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A name to identify the key group.
func (o KeyGroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[KeyGroup](o, func(v KeyGroup) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(KeyGroupOutput{})
}
