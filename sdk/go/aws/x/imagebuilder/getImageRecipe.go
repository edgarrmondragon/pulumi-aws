// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about an Image Builder Image Recipe.
func LookupImageRecipe(ctx *pulumi.Context, args *LookupImageRecipeArgs, opts ...pulumi.InvokeOption) (*LookupImageRecipeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupImageRecipeResult
	err := ctx.Invoke("aws:imagebuilder/getImageRecipe:getImageRecipe", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImageRecipe.
type LookupImageRecipeArgs struct {
	// ARN of the image recipe.
	Arn string `pulumi:"arn"`
	// Key-value map of resource tags for the image recipe.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getImageRecipe.
type LookupImageRecipeResult struct {
	Arn string `pulumi:"arn"`
	// Set of objects with block device mappings for the image recipe.
	BlockDeviceMappings []GetImageRecipeBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// List of objects with components for the image recipe.
	Components []GetImageRecipeComponent `pulumi:"components"`
	// Date the image recipe was created.
	DateCreated string `pulumi:"dateCreated"`
	// Description of the image recipe.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the image recipe.
	Name string `pulumi:"name"`
	// Owner of the image recipe.
	Owner string `pulumi:"owner"`
	// Base image of the image recipe.
	ParentImage string `pulumi:"parentImage"`
	// Platform of the image recipe.
	Platform string `pulumi:"platform"`
	// Key-value map of resource tags for the image recipe.
	Tags map[string]string `pulumi:"tags"`
	// Base64 encoded contents of user data. Commands or a command script to run when build instance is launched.
	UserDataBase64 string `pulumi:"userDataBase64"`
	// Version of the image recipe.
	Version string `pulumi:"version"`
	// Working directory used during build and test workflows.
	WorkingDirectory string `pulumi:"workingDirectory"`
}

func LookupImageRecipeOutput(ctx *pulumi.Context, args LookupImageRecipeOutputArgs, opts ...pulumi.InvokeOption) LookupImageRecipeResultOutput {
	outputResult := pulumix.ApplyErr[*LookupImageRecipeArgs](args.ToOutput(), func(plainArgs *LookupImageRecipeArgs) (*LookupImageRecipeResult, error) {
		return LookupImageRecipe(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupImageRecipeResultOutput, *LookupImageRecipeResult](outputResult)
}

// A collection of arguments for invoking getImageRecipe.
type LookupImageRecipeOutputArgs struct {
	// ARN of the image recipe.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Key-value map of resource tags for the image recipe.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupImageRecipeOutputArgs) ToOutput() pulumix.Output[*LookupImageRecipeArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupImageRecipeArgs {
		return &LookupImageRecipeArgs{
			Arn:  resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupImageRecipeResultOutput struct{ *pulumi.OutputState }

func (LookupImageRecipeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageRecipeResult)(nil)).Elem()
}

func (o LookupImageRecipeResultOutput) ToOutput(context.Context) pulumix.Output[*LookupImageRecipeResult] {
	return pulumix.Output[*LookupImageRecipeResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupImageRecipeResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageRecipeResult](o, func(v *LookupImageRecipeResult) string { return v.Arn })
}

func (o LookupImageRecipeResultOutput) BlockDeviceMappings() pulumix.GArrayOutput[GetImageRecipeBlockDeviceMapping, GetImageRecipeBlockDeviceMappingOutput] {
	value := pulumix.Apply[*LookupImageRecipeResult](o, func(v *LookupImageRecipeResult) []GetImageRecipeBlockDeviceMapping { return v.BlockDeviceMappings })
	return pulumix.GArrayOutput[GetImageRecipeBlockDeviceMapping, GetImageRecipeBlockDeviceMappingOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupImageRecipeResultOutput) Components() pulumix.GArrayOutput[GetImageRecipeComponent, GetImageRecipeComponentOutput] {
	value := pulumix.Apply[*LookupImageRecipeResult](o, func(v *LookupImageRecipeResult) []GetImageRecipeComponent { return v.Components })
	return pulumix.GArrayOutput[GetImageRecipeComponent, GetImageRecipeComponentOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupImageRecipeResultOutput) DateCreated() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageRecipeResult](o, func(v *LookupImageRecipeResult) string { return v.DateCreated })
}

func (o LookupImageRecipeResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageRecipeResult](o, func(v *LookupImageRecipeResult) string { return v.Description })
}

func (o LookupImageRecipeResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageRecipeResult](o, func(v *LookupImageRecipeResult) string { return v.Id })
}

func (o LookupImageRecipeResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageRecipeResult](o, func(v *LookupImageRecipeResult) string { return v.Name })
}

func (o LookupImageRecipeResultOutput) Owner() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageRecipeResult](o, func(v *LookupImageRecipeResult) string { return v.Owner })
}

func (o LookupImageRecipeResultOutput) ParentImage() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageRecipeResult](o, func(v *LookupImageRecipeResult) string { return v.ParentImage })
}

func (o LookupImageRecipeResultOutput) Platform() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageRecipeResult](o, func(v *LookupImageRecipeResult) string { return v.Platform })
}

func (o LookupImageRecipeResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupImageRecipeResult](o, func(v *LookupImageRecipeResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupImageRecipeResultOutput) UserDataBase64() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageRecipeResult](o, func(v *LookupImageRecipeResult) string { return v.UserDataBase64 })
}

func (o LookupImageRecipeResultOutput) Version() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageRecipeResult](o, func(v *LookupImageRecipeResult) string { return v.Version })
}

func (o LookupImageRecipeResultOutput) WorkingDirectory() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageRecipeResult](o, func(v *LookupImageRecipeResult) string { return v.WorkingDirectory })
}
