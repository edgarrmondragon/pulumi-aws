// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information on an existing backup vault.
func LookupVault(ctx *pulumi.Context, args *LookupVaultArgs, opts ...pulumi.InvokeOption) (*LookupVaultResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVaultResult
	err := ctx.Invoke("aws:backup/getVault:getVault", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVault.
type LookupVaultArgs struct {
	// Name of the backup vault.
	Name string `pulumi:"name"`
	// Metadata that you can assign to help organize the resources that you create.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getVault.
type LookupVaultResult struct {
	// ARN of the vault.
	Arn string `pulumi:"arn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Server-side encryption key that is used to protect your backups.
	KmsKeyArn string `pulumi:"kmsKeyArn"`
	Name      string `pulumi:"name"`
	// Number of recovery points that are stored in a backup vault.
	RecoveryPoints int `pulumi:"recoveryPoints"`
	// Metadata that you can assign to help organize the resources that you create.
	Tags map[string]string `pulumi:"tags"`
}

func LookupVaultOutput(ctx *pulumi.Context, args LookupVaultOutputArgs, opts ...pulumi.InvokeOption) LookupVaultResultOutput {
	outputResult := pulumix.ApplyErr[*LookupVaultArgs](args.ToOutput(), func(plainArgs *LookupVaultArgs) (*LookupVaultResult, error) {
		return LookupVault(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupVaultResultOutput, *LookupVaultResult](outputResult)
}

// A collection of arguments for invoking getVault.
type LookupVaultOutputArgs struct {
	// Name of the backup vault.
	Name pulumix.Input[string] `pulumi:"name"`
	// Metadata that you can assign to help organize the resources that you create.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupVaultOutputArgs) ToOutput() pulumix.Output[*LookupVaultArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupVaultArgs {
		return &LookupVaultArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupVaultResultOutput struct{ *pulumi.OutputState }

func (LookupVaultResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVaultResult)(nil)).Elem()
}

func (o LookupVaultResultOutput) ToOutput(context.Context) pulumix.Output[*LookupVaultResult] {
	return pulumix.Output[*LookupVaultResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVaultResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVaultResult](o, func(v *LookupVaultResult) string { return v.Arn })
}

func (o LookupVaultResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupVaultResult](o, func(v *LookupVaultResult) string { return v.Id })
}

func (o LookupVaultResultOutput) KmsKeyArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVaultResult](o, func(v *LookupVaultResult) string { return v.KmsKeyArn })
}

func (o LookupVaultResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupVaultResult](o, func(v *LookupVaultResult) string { return v.Name })
}

func (o LookupVaultResultOutput) RecoveryPoints() pulumix.Output[int] {
	return pulumix.Apply[*LookupVaultResult](o, func(v *LookupVaultResult) int { return v.RecoveryPoints })
}

func (o LookupVaultResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupVaultResult](o, func(v *LookupVaultResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
