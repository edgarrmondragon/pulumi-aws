// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Amazon Connect Routing Profile resource. For more information see
// [Amazon Connect: Getting Started](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-get-started.html)
type RoutingProfile struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the Routing Profile.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Specifies the default outbound queue for the Routing Profile.
	DefaultOutboundQueueId pulumix.Output[string] `pulumi:"defaultOutboundQueueId"`
	// Specifies the description of the Routing Profile.
	Description pulumix.Output[string] `pulumi:"description"`
	// Specifies the identifier of the hosting Amazon Connect Instance.
	InstanceId pulumix.Output[string] `pulumi:"instanceId"`
	// One or more `mediaConcurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `mediaConcurrencies` block is documented below.
	MediaConcurrencies pulumix.GArrayOutput[RoutingProfileMediaConcurrency, RoutingProfileMediaConcurrencyOutput] `pulumi:"mediaConcurrencies"`
	// Specifies the name of the Routing Profile.
	Name pulumix.Output[string] `pulumi:"name"`
	// One or more `queueConfigs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queueConfigs` block is documented below.
	QueueConfigs pulumix.GArrayOutput[RoutingProfileQueueConfig, RoutingProfileQueueConfigOutput] `pulumi:"queueConfigs"`
	// The identifier for the Routing Profile.
	RoutingProfileId pulumix.Output[string] `pulumi:"routingProfileId"`
	// Tags to apply to the Routing Profile. If configured with a provider
	// `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewRoutingProfile registers a new resource with the given unique name, arguments, and options.
func NewRoutingProfile(ctx *pulumi.Context,
	name string, args *RoutingProfileArgs, opts ...pulumi.ResourceOption) (*RoutingProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultOutboundQueueId == nil {
		return nil, errors.New("invalid value for required argument 'DefaultOutboundQueueId'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.MediaConcurrencies == nil {
		return nil, errors.New("invalid value for required argument 'MediaConcurrencies'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoutingProfile
	err := ctx.RegisterResource("aws:connect/routingProfile:RoutingProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutingProfile gets an existing RoutingProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutingProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutingProfileState, opts ...pulumi.ResourceOption) (*RoutingProfile, error) {
	var resource RoutingProfile
	err := ctx.ReadResource("aws:connect/routingProfile:RoutingProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoutingProfile resources.
type routingProfileState struct {
	// The Amazon Resource Name (ARN) of the Routing Profile.
	Arn *string `pulumi:"arn"`
	// Specifies the default outbound queue for the Routing Profile.
	DefaultOutboundQueueId *string `pulumi:"defaultOutboundQueueId"`
	// Specifies the description of the Routing Profile.
	Description *string `pulumi:"description"`
	// Specifies the identifier of the hosting Amazon Connect Instance.
	InstanceId *string `pulumi:"instanceId"`
	// One or more `mediaConcurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `mediaConcurrencies` block is documented below.
	MediaConcurrencies []RoutingProfileMediaConcurrency `pulumi:"mediaConcurrencies"`
	// Specifies the name of the Routing Profile.
	Name *string `pulumi:"name"`
	// One or more `queueConfigs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queueConfigs` block is documented below.
	QueueConfigs []RoutingProfileQueueConfig `pulumi:"queueConfigs"`
	// The identifier for the Routing Profile.
	RoutingProfileId *string `pulumi:"routingProfileId"`
	// Tags to apply to the Routing Profile. If configured with a provider
	// `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type RoutingProfileState struct {
	// The Amazon Resource Name (ARN) of the Routing Profile.
	Arn pulumix.Input[*string]
	// Specifies the default outbound queue for the Routing Profile.
	DefaultOutboundQueueId pulumix.Input[*string]
	// Specifies the description of the Routing Profile.
	Description pulumix.Input[*string]
	// Specifies the identifier of the hosting Amazon Connect Instance.
	InstanceId pulumix.Input[*string]
	// One or more `mediaConcurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `mediaConcurrencies` block is documented below.
	MediaConcurrencies pulumix.Input[[]*RoutingProfileMediaConcurrencyArgs]
	// Specifies the name of the Routing Profile.
	Name pulumix.Input[*string]
	// One or more `queueConfigs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queueConfigs` block is documented below.
	QueueConfigs pulumix.Input[[]*RoutingProfileQueueConfigArgs]
	// The identifier for the Routing Profile.
	RoutingProfileId pulumix.Input[*string]
	// Tags to apply to the Routing Profile. If configured with a provider
	// `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (RoutingProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*routingProfileState)(nil)).Elem()
}

type routingProfileArgs struct {
	// Specifies the default outbound queue for the Routing Profile.
	DefaultOutboundQueueId string `pulumi:"defaultOutboundQueueId"`
	// Specifies the description of the Routing Profile.
	Description string `pulumi:"description"`
	// Specifies the identifier of the hosting Amazon Connect Instance.
	InstanceId string `pulumi:"instanceId"`
	// One or more `mediaConcurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `mediaConcurrencies` block is documented below.
	MediaConcurrencies []RoutingProfileMediaConcurrency `pulumi:"mediaConcurrencies"`
	// Specifies the name of the Routing Profile.
	Name *string `pulumi:"name"`
	// One or more `queueConfigs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queueConfigs` block is documented below.
	QueueConfigs []RoutingProfileQueueConfig `pulumi:"queueConfigs"`
	// Tags to apply to the Routing Profile. If configured with a provider
	// `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a RoutingProfile resource.
type RoutingProfileArgs struct {
	// Specifies the default outbound queue for the Routing Profile.
	DefaultOutboundQueueId pulumix.Input[string]
	// Specifies the description of the Routing Profile.
	Description pulumix.Input[string]
	// Specifies the identifier of the hosting Amazon Connect Instance.
	InstanceId pulumix.Input[string]
	// One or more `mediaConcurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `mediaConcurrencies` block is documented below.
	MediaConcurrencies pulumix.Input[[]*RoutingProfileMediaConcurrencyArgs]
	// Specifies the name of the Routing Profile.
	Name pulumix.Input[*string]
	// One or more `queueConfigs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queueConfigs` block is documented below.
	QueueConfigs pulumix.Input[[]*RoutingProfileQueueConfigArgs]
	// Tags to apply to the Routing Profile. If configured with a provider
	// `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (RoutingProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routingProfileArgs)(nil)).Elem()
}

type RoutingProfileOutput struct{ *pulumi.OutputState }

func (RoutingProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingProfile)(nil)).Elem()
}

func (o RoutingProfileOutput) ToRoutingProfileOutput() RoutingProfileOutput {
	return o
}

func (o RoutingProfileOutput) ToRoutingProfileOutputWithContext(ctx context.Context) RoutingProfileOutput {
	return o
}

func (o RoutingProfileOutput) ToOutput(ctx context.Context) pulumix.Output[RoutingProfile] {
	return pulumix.Output[RoutingProfile]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the Routing Profile.
func (o RoutingProfileOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[RoutingProfile](o, func(v RoutingProfile) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the default outbound queue for the Routing Profile.
func (o RoutingProfileOutput) DefaultOutboundQueueId() pulumix.Output[string] {
	value := pulumix.Apply[RoutingProfile](o, func(v RoutingProfile) pulumix.Output[string] { return v.DefaultOutboundQueueId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the description of the Routing Profile.
func (o RoutingProfileOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[RoutingProfile](o, func(v RoutingProfile) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the identifier of the hosting Amazon Connect Instance.
func (o RoutingProfileOutput) InstanceId() pulumix.Output[string] {
	value := pulumix.Apply[RoutingProfile](o, func(v RoutingProfile) pulumix.Output[string] { return v.InstanceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// One or more `mediaConcurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `mediaConcurrencies` block is documented below.
func (o RoutingProfileOutput) MediaConcurrencies() pulumix.GArrayOutput[RoutingProfileMediaConcurrency, RoutingProfileMediaConcurrencyOutput] {
	value := pulumix.Apply[RoutingProfile](o, func(v RoutingProfile) pulumix.GArrayOutput[RoutingProfileMediaConcurrency, RoutingProfileMediaConcurrencyOutput] {
		return v.MediaConcurrencies
	})
	unwrapped := pulumix.Flatten[[]RoutingProfileMediaConcurrency, pulumix.GArrayOutput[RoutingProfileMediaConcurrency, RoutingProfileMediaConcurrencyOutput]](value)
	return pulumix.GArrayOutput[RoutingProfileMediaConcurrency, RoutingProfileMediaConcurrencyOutput]{OutputState: unwrapped.OutputState}
}

// Specifies the name of the Routing Profile.
func (o RoutingProfileOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[RoutingProfile](o, func(v RoutingProfile) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// One or more `queueConfigs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queueConfigs` block is documented below.
func (o RoutingProfileOutput) QueueConfigs() pulumix.GArrayOutput[RoutingProfileQueueConfig, RoutingProfileQueueConfigOutput] {
	value := pulumix.Apply[RoutingProfile](o, func(v RoutingProfile) pulumix.GArrayOutput[RoutingProfileQueueConfig, RoutingProfileQueueConfigOutput] {
		return v.QueueConfigs
	})
	unwrapped := pulumix.Flatten[[]RoutingProfileQueueConfig, pulumix.GArrayOutput[RoutingProfileQueueConfig, RoutingProfileQueueConfigOutput]](value)
	return pulumix.GArrayOutput[RoutingProfileQueueConfig, RoutingProfileQueueConfigOutput]{OutputState: unwrapped.OutputState}
}

// The identifier for the Routing Profile.
func (o RoutingProfileOutput) RoutingProfileId() pulumix.Output[string] {
	value := pulumix.Apply[RoutingProfile](o, func(v RoutingProfile) pulumix.Output[string] { return v.RoutingProfileId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Tags to apply to the Routing Profile. If configured with a provider
// `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RoutingProfileOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[RoutingProfile](o, func(v RoutingProfile) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RoutingProfileOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[RoutingProfile](o, func(v RoutingProfile) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(RoutingProfileOutput{})
}
