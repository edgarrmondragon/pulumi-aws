// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretsmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage AWS Secrets Manager secret rotation. To manage a secret, see the `secretsmanager.Secret` resource. To manage a secret value, see the `secretsmanager.SecretVersion` resource.
type SecretRotation struct {
	pulumi.CustomResourceState

	// Specifies whether automatic rotation is enabled for this secret.
	RotationEnabled pulumix.Output[bool] `pulumi:"rotationEnabled"`
	// Specifies the ARN of the Lambda function that can rotate the secret.
	RotationLambdaArn pulumix.Output[string] `pulumi:"rotationLambdaArn"`
	// A structure that defines the rotation configuration for this secret. Defined below.
	RotationRules pulumix.GPtrOutput[SecretRotationRotationRules, SecretRotationRotationRulesOutput] `pulumi:"rotationRules"`
	// Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
	SecretId pulumix.Output[string] `pulumi:"secretId"`
}

// NewSecretRotation registers a new resource with the given unique name, arguments, and options.
func NewSecretRotation(ctx *pulumi.Context,
	name string, args *SecretRotationArgs, opts ...pulumi.ResourceOption) (*SecretRotation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RotationLambdaArn == nil {
		return nil, errors.New("invalid value for required argument 'RotationLambdaArn'")
	}
	if args.RotationRules == nil {
		return nil, errors.New("invalid value for required argument 'RotationRules'")
	}
	if args.SecretId == nil {
		return nil, errors.New("invalid value for required argument 'SecretId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretRotation
	err := ctx.RegisterResource("aws:secretsmanager/secretRotation:SecretRotation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretRotation gets an existing SecretRotation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretRotation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretRotationState, opts ...pulumi.ResourceOption) (*SecretRotation, error) {
	var resource SecretRotation
	err := ctx.ReadResource("aws:secretsmanager/secretRotation:SecretRotation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretRotation resources.
type secretRotationState struct {
	// Specifies whether automatic rotation is enabled for this secret.
	RotationEnabled *bool `pulumi:"rotationEnabled"`
	// Specifies the ARN of the Lambda function that can rotate the secret.
	RotationLambdaArn *string `pulumi:"rotationLambdaArn"`
	// A structure that defines the rotation configuration for this secret. Defined below.
	RotationRules *SecretRotationRotationRules `pulumi:"rotationRules"`
	// Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
	SecretId *string `pulumi:"secretId"`
}

type SecretRotationState struct {
	// Specifies whether automatic rotation is enabled for this secret.
	RotationEnabled pulumix.Input[*bool]
	// Specifies the ARN of the Lambda function that can rotate the secret.
	RotationLambdaArn pulumix.Input[*string]
	// A structure that defines the rotation configuration for this secret. Defined below.
	RotationRules pulumix.Input[*SecretRotationRotationRulesArgs]
	// Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
	SecretId pulumix.Input[*string]
}

func (SecretRotationState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationState)(nil)).Elem()
}

type secretRotationArgs struct {
	// Specifies the ARN of the Lambda function that can rotate the secret.
	RotationLambdaArn string `pulumi:"rotationLambdaArn"`
	// A structure that defines the rotation configuration for this secret. Defined below.
	RotationRules SecretRotationRotationRules `pulumi:"rotationRules"`
	// Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
	SecretId string `pulumi:"secretId"`
}

// The set of arguments for constructing a SecretRotation resource.
type SecretRotationArgs struct {
	// Specifies the ARN of the Lambda function that can rotate the secret.
	RotationLambdaArn pulumix.Input[string]
	// A structure that defines the rotation configuration for this secret. Defined below.
	RotationRules pulumix.Input[*SecretRotationRotationRulesArgs]
	// Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
	SecretId pulumix.Input[string]
}

func (SecretRotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationArgs)(nil)).Elem()
}

type SecretRotationOutput struct{ *pulumi.OutputState }

func (SecretRotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretRotation)(nil)).Elem()
}

func (o SecretRotationOutput) ToSecretRotationOutput() SecretRotationOutput {
	return o
}

func (o SecretRotationOutput) ToSecretRotationOutputWithContext(ctx context.Context) SecretRotationOutput {
	return o
}

func (o SecretRotationOutput) ToOutput(ctx context.Context) pulumix.Output[SecretRotation] {
	return pulumix.Output[SecretRotation]{
		OutputState: o.OutputState,
	}
}

// Specifies whether automatic rotation is enabled for this secret.
func (o SecretRotationOutput) RotationEnabled() pulumix.Output[bool] {
	value := pulumix.Apply[SecretRotation](o, func(v SecretRotation) pulumix.Output[bool] { return v.RotationEnabled })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Specifies the ARN of the Lambda function that can rotate the secret.
func (o SecretRotationOutput) RotationLambdaArn() pulumix.Output[string] {
	value := pulumix.Apply[SecretRotation](o, func(v SecretRotation) pulumix.Output[string] { return v.RotationLambdaArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A structure that defines the rotation configuration for this secret. Defined below.
func (o SecretRotationOutput) RotationRules() pulumix.GPtrOutput[SecretRotationRotationRules, SecretRotationRotationRulesOutput] {
	value := pulumix.Apply[SecretRotation](o, func(v SecretRotation) pulumix.GPtrOutput[SecretRotationRotationRules, SecretRotationRotationRulesOutput] {
		return v.RotationRules
	})
	unwrapped := pulumix.Flatten[*SecretRotationRotationRules, pulumix.GPtrOutput[SecretRotationRotationRules, SecretRotationRotationRulesOutput]](value)
	return pulumix.GPtrOutput[SecretRotationRotationRules, SecretRotationRotationRulesOutput]{OutputState: unwrapped.OutputState}
}

// Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
func (o SecretRotationOutput) SecretId() pulumix.Output[string] {
	value := pulumix.Apply[SecretRotation](o, func(v SecretRotation) pulumix.Output[string] { return v.SecretId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SecretRotationOutput{})
}
