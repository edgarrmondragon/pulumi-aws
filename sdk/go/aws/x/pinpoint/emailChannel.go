// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Pinpoint Email Channel resource.
type EmailChannel struct {
	pulumi.CustomResourceState

	// The application ID.
	ApplicationId pulumix.Output[string] `pulumi:"applicationId"`
	// The ARN of the Amazon SES configuration set that you want to apply to messages that you send through the channel.
	ConfigurationSet pulumix.Output[*string] `pulumi:"configurationSet"`
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// The email address used to send emails from. You can use email only (`user@example.com`) or friendly address (`User <user@example.com>`). This field comply with [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt).
	FromAddress pulumix.Output[string] `pulumi:"fromAddress"`
	// The ARN of an identity verified with SES.
	Identity pulumix.Output[string] `pulumi:"identity"`
	// Messages per second that can be sent.
	MessagesPerSecond pulumix.Output[int] `pulumi:"messagesPerSecond"`
	// The ARN of an IAM Role used to submit events to Mobile Analytics' event ingestion service.
	RoleArn pulumix.Output[*string] `pulumi:"roleArn"`
}

// NewEmailChannel registers a new resource with the given unique name, arguments, and options.
func NewEmailChannel(ctx *pulumi.Context,
	name string, args *EmailChannelArgs, opts ...pulumi.ResourceOption) (*EmailChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.FromAddress == nil {
		return nil, errors.New("invalid value for required argument 'FromAddress'")
	}
	if args.Identity == nil {
		return nil, errors.New("invalid value for required argument 'Identity'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmailChannel
	err := ctx.RegisterResource("aws:pinpoint/emailChannel:EmailChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailChannel gets an existing EmailChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailChannelState, opts ...pulumi.ResourceOption) (*EmailChannel, error) {
	var resource EmailChannel
	err := ctx.ReadResource("aws:pinpoint/emailChannel:EmailChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailChannel resources.
type emailChannelState struct {
	// The application ID.
	ApplicationId *string `pulumi:"applicationId"`
	// The ARN of the Amazon SES configuration set that you want to apply to messages that you send through the channel.
	ConfigurationSet *string `pulumi:"configurationSet"`
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The email address used to send emails from. You can use email only (`user@example.com`) or friendly address (`User <user@example.com>`). This field comply with [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt).
	FromAddress *string `pulumi:"fromAddress"`
	// The ARN of an identity verified with SES.
	Identity *string `pulumi:"identity"`
	// Messages per second that can be sent.
	MessagesPerSecond *int `pulumi:"messagesPerSecond"`
	// The ARN of an IAM Role used to submit events to Mobile Analytics' event ingestion service.
	RoleArn *string `pulumi:"roleArn"`
}

type EmailChannelState struct {
	// The application ID.
	ApplicationId pulumix.Input[*string]
	// The ARN of the Amazon SES configuration set that you want to apply to messages that you send through the channel.
	ConfigurationSet pulumix.Input[*string]
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled pulumix.Input[*bool]
	// The email address used to send emails from. You can use email only (`user@example.com`) or friendly address (`User <user@example.com>`). This field comply with [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt).
	FromAddress pulumix.Input[*string]
	// The ARN of an identity verified with SES.
	Identity pulumix.Input[*string]
	// Messages per second that can be sent.
	MessagesPerSecond pulumix.Input[*int]
	// The ARN of an IAM Role used to submit events to Mobile Analytics' event ingestion service.
	RoleArn pulumix.Input[*string]
}

func (EmailChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailChannelState)(nil)).Elem()
}

type emailChannelArgs struct {
	// The application ID.
	ApplicationId string `pulumi:"applicationId"`
	// The ARN of the Amazon SES configuration set that you want to apply to messages that you send through the channel.
	ConfigurationSet *string `pulumi:"configurationSet"`
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The email address used to send emails from. You can use email only (`user@example.com`) or friendly address (`User <user@example.com>`). This field comply with [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt).
	FromAddress string `pulumi:"fromAddress"`
	// The ARN of an identity verified with SES.
	Identity string `pulumi:"identity"`
	// The ARN of an IAM Role used to submit events to Mobile Analytics' event ingestion service.
	RoleArn *string `pulumi:"roleArn"`
}

// The set of arguments for constructing a EmailChannel resource.
type EmailChannelArgs struct {
	// The application ID.
	ApplicationId pulumix.Input[string]
	// The ARN of the Amazon SES configuration set that you want to apply to messages that you send through the channel.
	ConfigurationSet pulumix.Input[*string]
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled pulumix.Input[*bool]
	// The email address used to send emails from. You can use email only (`user@example.com`) or friendly address (`User <user@example.com>`). This field comply with [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt).
	FromAddress pulumix.Input[string]
	// The ARN of an identity verified with SES.
	Identity pulumix.Input[string]
	// The ARN of an IAM Role used to submit events to Mobile Analytics' event ingestion service.
	RoleArn pulumix.Input[*string]
}

func (EmailChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailChannelArgs)(nil)).Elem()
}

type EmailChannelOutput struct{ *pulumi.OutputState }

func (EmailChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailChannel)(nil)).Elem()
}

func (o EmailChannelOutput) ToEmailChannelOutput() EmailChannelOutput {
	return o
}

func (o EmailChannelOutput) ToEmailChannelOutputWithContext(ctx context.Context) EmailChannelOutput {
	return o
}

func (o EmailChannelOutput) ToOutput(ctx context.Context) pulumix.Output[EmailChannel] {
	return pulumix.Output[EmailChannel]{
		OutputState: o.OutputState,
	}
}

// The application ID.
func (o EmailChannelOutput) ApplicationId() pulumix.Output[string] {
	value := pulumix.Apply[EmailChannel](o, func(v EmailChannel) pulumix.Output[string] { return v.ApplicationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the Amazon SES configuration set that you want to apply to messages that you send through the channel.
func (o EmailChannelOutput) ConfigurationSet() pulumix.Output[*string] {
	value := pulumix.Apply[EmailChannel](o, func(v EmailChannel) pulumix.Output[*string] { return v.ConfigurationSet })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether the channel is enabled or disabled. Defaults to `true`.
func (o EmailChannelOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[EmailChannel](o, func(v EmailChannel) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The email address used to send emails from. You can use email only (`user@example.com`) or friendly address (`User <user@example.com>`). This field comply with [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt).
func (o EmailChannelOutput) FromAddress() pulumix.Output[string] {
	value := pulumix.Apply[EmailChannel](o, func(v EmailChannel) pulumix.Output[string] { return v.FromAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of an identity verified with SES.
func (o EmailChannelOutput) Identity() pulumix.Output[string] {
	value := pulumix.Apply[EmailChannel](o, func(v EmailChannel) pulumix.Output[string] { return v.Identity })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Messages per second that can be sent.
func (o EmailChannelOutput) MessagesPerSecond() pulumix.Output[int] {
	value := pulumix.Apply[EmailChannel](o, func(v EmailChannel) pulumix.Output[int] { return v.MessagesPerSecond })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The ARN of an IAM Role used to submit events to Mobile Analytics' event ingestion service.
func (o EmailChannelOutput) RoleArn() pulumix.Output[*string] {
	value := pulumix.Apply[EmailChannel](o, func(v EmailChannel) pulumix.Output[*string] { return v.RoleArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(EmailChannelOutput{})
}
