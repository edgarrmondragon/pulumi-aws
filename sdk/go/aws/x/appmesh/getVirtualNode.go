// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appmesh

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS App Mesh Virtual Node.
func LookupVirtualNode(ctx *pulumi.Context, args *LookupVirtualNodeArgs, opts ...pulumi.InvokeOption) (*LookupVirtualNodeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVirtualNodeResult
	err := ctx.Invoke("aws:appmesh/getVirtualNode:getVirtualNode", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVirtualNode.
type LookupVirtualNodeArgs struct {
	// Name of the service mesh in which the virtual node exists.
	MeshName string `pulumi:"meshName"`
	// AWS account ID of the service mesh's owner.
	MeshOwner *string `pulumi:"meshOwner"`
	// Name of the virtual node.
	Name string `pulumi:"name"`
	// Map of tags.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getVirtualNode.
type LookupVirtualNodeResult struct {
	// ARN of the virtual node.
	Arn string `pulumi:"arn"`
	// Creation date of the virtual node.
	CreatedDate string `pulumi:"createdDate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Last update date of the virtual node.
	LastUpdatedDate string `pulumi:"lastUpdatedDate"`
	MeshName        string `pulumi:"meshName"`
	MeshOwner       string `pulumi:"meshOwner"`
	Name            string `pulumi:"name"`
	// Resource owner's AWS account ID.
	ResourceOwner string `pulumi:"resourceOwner"`
	// Virtual node specification. See the `appmesh.VirtualNode` resource for details.
	Specs []GetVirtualNodeSpec `pulumi:"specs"`
	// Map of tags.
	Tags map[string]string `pulumi:"tags"`
}

func LookupVirtualNodeOutput(ctx *pulumi.Context, args LookupVirtualNodeOutputArgs, opts ...pulumi.InvokeOption) LookupVirtualNodeResultOutput {
	outputResult := pulumix.ApplyErr[*LookupVirtualNodeArgs](args.ToOutput(), func(plainArgs *LookupVirtualNodeArgs) (*LookupVirtualNodeResult, error) {
		return LookupVirtualNode(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupVirtualNodeResultOutput, *LookupVirtualNodeResult](outputResult)
}

// A collection of arguments for invoking getVirtualNode.
type LookupVirtualNodeOutputArgs struct {
	// Name of the service mesh in which the virtual node exists.
	MeshName pulumix.Input[string] `pulumi:"meshName"`
	// AWS account ID of the service mesh's owner.
	MeshOwner pulumix.Input[*string] `pulumi:"meshOwner"`
	// Name of the virtual node.
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of tags.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupVirtualNodeOutputArgs) ToOutput() pulumix.Output[*LookupVirtualNodeArgs] {
	allArgs := pulumix.All(
		args.MeshName.ToOutput(context.Background()).AsAny(),
		args.MeshOwner.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupVirtualNodeArgs {
		return &LookupVirtualNodeArgs{
			MeshName:  resolvedArgs[0].(string),
			MeshOwner: resolvedArgs[1].(*string),
			Name:      resolvedArgs[2].(string),
			Tags:      resolvedArgs[3].(map[string]string),
		}
	})
}

type LookupVirtualNodeResultOutput struct{ *pulumi.OutputState }

func (LookupVirtualNodeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualNodeResult)(nil)).Elem()
}

func (o LookupVirtualNodeResultOutput) ToOutput(context.Context) pulumix.Output[*LookupVirtualNodeResult] {
	return pulumix.Output[*LookupVirtualNodeResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVirtualNodeResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualNodeResult](o, func(v *LookupVirtualNodeResult) string { return v.Arn })
}

func (o LookupVirtualNodeResultOutput) CreatedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualNodeResult](o, func(v *LookupVirtualNodeResult) string { return v.CreatedDate })
}

func (o LookupVirtualNodeResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualNodeResult](o, func(v *LookupVirtualNodeResult) string { return v.Id })
}

func (o LookupVirtualNodeResultOutput) LastUpdatedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualNodeResult](o, func(v *LookupVirtualNodeResult) string { return v.LastUpdatedDate })
}

func (o LookupVirtualNodeResultOutput) MeshName() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualNodeResult](o, func(v *LookupVirtualNodeResult) string { return v.MeshName })
}

func (o LookupVirtualNodeResultOutput) MeshOwner() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualNodeResult](o, func(v *LookupVirtualNodeResult) string { return v.MeshOwner })
}

func (o LookupVirtualNodeResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualNodeResult](o, func(v *LookupVirtualNodeResult) string { return v.Name })
}

func (o LookupVirtualNodeResultOutput) ResourceOwner() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualNodeResult](o, func(v *LookupVirtualNodeResult) string { return v.ResourceOwner })
}

func (o LookupVirtualNodeResultOutput) Specs() pulumix.GArrayOutput[GetVirtualNodeSpec, GetVirtualNodeSpecOutput] {
	value := pulumix.Apply[*LookupVirtualNodeResult](o, func(v *LookupVirtualNodeResult) []GetVirtualNodeSpec { return v.Specs })
	return pulumix.GArrayOutput[GetVirtualNodeSpec, GetVirtualNodeSpecOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVirtualNodeResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupVirtualNodeResult](o, func(v *LookupVirtualNodeResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
