// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get IDs and VPC membership of Security Groups that are created outside this provider.
func GetSecurityGroups(ctx *pulumi.Context, args *GetSecurityGroupsArgs, opts ...pulumi.InvokeOption) (*GetSecurityGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSecurityGroupsResult
	err := ctx.Invoke("aws:ec2/getSecurityGroups:getSecurityGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityGroups.
type GetSecurityGroupsArgs struct {
	// One or more name/value pairs to use as filters. There are several valid keys, for a full reference, check out [describe-security-groups in the AWS CLI reference][1].
	Filters []GetSecurityGroupsFilter `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match for desired security groups.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getSecurityGroups.
type GetSecurityGroupsResult struct {
	// ARNs of the matched security groups.
	Arns    []string                  `pulumi:"arns"`
	Filters []GetSecurityGroupsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// IDs of the matches security groups.
	Ids  []string          `pulumi:"ids"`
	Tags map[string]string `pulumi:"tags"`
	// VPC IDs of the matched security groups. The data source's tag or filter *will span VPCs* unless the `vpc-id` filter is also used.
	VpcIds []string `pulumi:"vpcIds"`
}

func GetSecurityGroupsOutput(ctx *pulumi.Context, args GetSecurityGroupsOutputArgs, opts ...pulumi.InvokeOption) GetSecurityGroupsResultOutput {
	outputResult := pulumix.ApplyErr[*GetSecurityGroupsArgs](args.ToOutput(), func(plainArgs *GetSecurityGroupsArgs) (*GetSecurityGroupsResult, error) {
		return GetSecurityGroups(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetSecurityGroupsResultOutput, *GetSecurityGroupsResult](outputResult)
}

// A collection of arguments for invoking getSecurityGroups.
type GetSecurityGroupsOutputArgs struct {
	// One or more name/value pairs to use as filters. There are several valid keys, for a full reference, check out [describe-security-groups in the AWS CLI reference][1].
	Filters pulumix.Input[[]*GetSecurityGroupsFilterArgs] `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match for desired security groups.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetSecurityGroupsOutputArgs) ToOutput() pulumix.Output[*GetSecurityGroupsArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetSecurityGroupsArgs {
		return &GetSecurityGroupsArgs{
			Filters: resolvedArgs[0].([]GetSecurityGroupsFilter),
			Tags:    resolvedArgs[1].(map[string]string),
		}
	})
}

type GetSecurityGroupsResultOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupsResult)(nil)).Elem()
}

func (o GetSecurityGroupsResultOutput) ToOutput(context.Context) pulumix.Output[*GetSecurityGroupsResult] {
	return pulumix.Output[*GetSecurityGroupsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityGroupsResultOutput) Arns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetSecurityGroupsResult](o, func(v *GetSecurityGroupsResult) []string { return v.Arns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetSecurityGroupsResultOutput) Filters() pulumix.GArrayOutput[GetSecurityGroupsFilter, GetSecurityGroupsFilterOutput] {
	value := pulumix.Apply[*GetSecurityGroupsResult](o, func(v *GetSecurityGroupsResult) []GetSecurityGroupsFilter { return v.Filters })
	return pulumix.GArrayOutput[GetSecurityGroupsFilter, GetSecurityGroupsFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetSecurityGroupsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetSecurityGroupsResult](o, func(v *GetSecurityGroupsResult) string { return v.Id })
}

func (o GetSecurityGroupsResultOutput) Ids() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetSecurityGroupsResult](o, func(v *GetSecurityGroupsResult) []string { return v.Ids })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetSecurityGroupsResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetSecurityGroupsResult](o, func(v *GetSecurityGroupsResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetSecurityGroupsResultOutput) VpcIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetSecurityGroupsResult](o, func(v *GetSecurityGroupsResult) []string { return v.VpcIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
