// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a CloudFormation Type.
func LookupCloudFormationType(ctx *pulumi.Context, args *LookupCloudFormationTypeArgs, opts ...pulumi.InvokeOption) (*LookupCloudFormationTypeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCloudFormationTypeResult
	err := ctx.Invoke("aws:cloudformation/getCloudFormationType:getCloudFormationType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCloudFormationType.
type LookupCloudFormationTypeArgs struct {
	// ARN of the CloudFormation Type. For example, `arn:aws:cloudformation:us-west-2::type/resource/AWS-EC2-VPC`.
	Arn *string `pulumi:"arn"`
	// CloudFormation Registry Type. For example, `RESOURCE`.
	Type *string `pulumi:"type"`
	// CloudFormation Type name. For example, `AWS::EC2::VPC`.
	TypeName *string `pulumi:"typeName"`
	// Identifier of the CloudFormation Type version.
	VersionId *string `pulumi:"versionId"`
}

// A collection of values returned by getCloudFormationType.
type LookupCloudFormationTypeResult struct {
	Arn string `pulumi:"arn"`
	// Identifier of the CloudFormation Type default version.
	DefaultVersionId string `pulumi:"defaultVersionId"`
	// Deprecation status of the CloudFormation Type.
	DeprecatedStatus string `pulumi:"deprecatedStatus"`
	// Description of the CloudFormation Type.
	Description string `pulumi:"description"`
	// URL of the documentation for the CloudFormation Type.
	DocumentationUrl string `pulumi:"documentationUrl"`
	// ARN of the IAM Role used to register the CloudFormation Type.
	ExecutionRoleArn string `pulumi:"executionRoleArn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether the CloudFormation Type version is the default version.
	IsDefaultVersion bool `pulumi:"isDefaultVersion"`
	// List of objects containing logging configuration.
	LoggingConfigs []GetCloudFormationTypeLoggingConfig `pulumi:"loggingConfigs"`
	// Provisioning behavior of the CloudFormation Type.
	ProvisioningType string `pulumi:"provisioningType"`
	// JSON document of the CloudFormation Type schema.
	Schema string `pulumi:"schema"`
	// URL of the source code for the CloudFormation Type.
	SourceUrl string  `pulumi:"sourceUrl"`
	Type      string  `pulumi:"type"`
	TypeArn   string  `pulumi:"typeArn"`
	TypeName  string  `pulumi:"typeName"`
	VersionId *string `pulumi:"versionId"`
	// Scope of the CloudFormation Type.
	Visibility string `pulumi:"visibility"`
}

func LookupCloudFormationTypeOutput(ctx *pulumi.Context, args LookupCloudFormationTypeOutputArgs, opts ...pulumi.InvokeOption) LookupCloudFormationTypeResultOutput {
	outputResult := pulumix.ApplyErr[*LookupCloudFormationTypeArgs](args.ToOutput(), func(plainArgs *LookupCloudFormationTypeArgs) (*LookupCloudFormationTypeResult, error) {
		return LookupCloudFormationType(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupCloudFormationTypeResultOutput, *LookupCloudFormationTypeResult](outputResult)
}

// A collection of arguments for invoking getCloudFormationType.
type LookupCloudFormationTypeOutputArgs struct {
	// ARN of the CloudFormation Type. For example, `arn:aws:cloudformation:us-west-2::type/resource/AWS-EC2-VPC`.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// CloudFormation Registry Type. For example, `RESOURCE`.
	Type pulumix.Input[*string] `pulumi:"type"`
	// CloudFormation Type name. For example, `AWS::EC2::VPC`.
	TypeName pulumix.Input[*string] `pulumi:"typeName"`
	// Identifier of the CloudFormation Type version.
	VersionId pulumix.Input[*string] `pulumi:"versionId"`
}

func (args LookupCloudFormationTypeOutputArgs) ToOutput() pulumix.Output[*LookupCloudFormationTypeArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Type.ToOutput(context.Background()).AsAny(),
		args.TypeName.ToOutput(context.Background()).AsAny(),
		args.VersionId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupCloudFormationTypeArgs {
		return &LookupCloudFormationTypeArgs{
			Arn:       resolvedArgs[0].(*string),
			Type:      resolvedArgs[1].(*string),
			TypeName:  resolvedArgs[2].(*string),
			VersionId: resolvedArgs[3].(*string),
		}
	})
}

type LookupCloudFormationTypeResultOutput struct{ *pulumi.OutputState }

func (LookupCloudFormationTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudFormationTypeResult)(nil)).Elem()
}

func (o LookupCloudFormationTypeResultOutput) ToOutput(context.Context) pulumix.Output[*LookupCloudFormationTypeResult] {
	return pulumix.Output[*LookupCloudFormationTypeResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupCloudFormationTypeResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) string { return v.Arn })
}

func (o LookupCloudFormationTypeResultOutput) DefaultVersionId() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) string { return v.DefaultVersionId })
}

func (o LookupCloudFormationTypeResultOutput) DeprecatedStatus() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) string { return v.DeprecatedStatus })
}

func (o LookupCloudFormationTypeResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) string { return v.Description })
}

func (o LookupCloudFormationTypeResultOutput) DocumentationUrl() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) string { return v.DocumentationUrl })
}

func (o LookupCloudFormationTypeResultOutput) ExecutionRoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) string { return v.ExecutionRoleArn })
}

func (o LookupCloudFormationTypeResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) string { return v.Id })
}

func (o LookupCloudFormationTypeResultOutput) IsDefaultVersion() pulumix.Output[bool] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) bool { return v.IsDefaultVersion })
}

func (o LookupCloudFormationTypeResultOutput) LoggingConfigs() pulumix.GArrayOutput[GetCloudFormationTypeLoggingConfig, GetCloudFormationTypeLoggingConfigOutput] {
	value := pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) []GetCloudFormationTypeLoggingConfig { return v.LoggingConfigs })
	return pulumix.GArrayOutput[GetCloudFormationTypeLoggingConfig, GetCloudFormationTypeLoggingConfigOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupCloudFormationTypeResultOutput) ProvisioningType() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) string { return v.ProvisioningType })
}

func (o LookupCloudFormationTypeResultOutput) Schema() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) string { return v.Schema })
}

func (o LookupCloudFormationTypeResultOutput) SourceUrl() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) string { return v.SourceUrl })
}

func (o LookupCloudFormationTypeResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) string { return v.Type })
}

func (o LookupCloudFormationTypeResultOutput) TypeArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) string { return v.TypeArn })
}

func (o LookupCloudFormationTypeResultOutput) TypeName() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) string { return v.TypeName })
}

func (o LookupCloudFormationTypeResultOutput) VersionId() pulumix.Output[*string] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) *string { return v.VersionId })
}

func (o LookupCloudFormationTypeResultOutput) Visibility() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudFormationTypeResult](o, func(v *LookupCloudFormationTypeResult) string { return v.Visibility })
}
