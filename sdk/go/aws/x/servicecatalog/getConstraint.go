// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information on a Service Catalog Constraint.
func LookupConstraint(ctx *pulumi.Context, args *LookupConstraintArgs, opts ...pulumi.InvokeOption) (*LookupConstraintResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConstraintResult
	err := ctx.Invoke("aws:servicecatalog/getConstraint:getConstraint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConstraint.
type LookupConstraintArgs struct {
	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// Description of the constraint.
	Description *string `pulumi:"description"`
	// Constraint identifier.
	//
	// The following arguments are optional:
	Id string `pulumi:"id"`
}

// A collection of values returned by getConstraint.
type LookupConstraintResult struct {
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// Description of the constraint.
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	// Owner of the constraint.
	Owner string `pulumi:"owner"`
	// Constraint parameters in JSON format.
	Parameters string `pulumi:"parameters"`
	// Portfolio identifier.
	PortfolioId string `pulumi:"portfolioId"`
	// Product identifier.
	ProductId string `pulumi:"productId"`
	// Constraint status.
	Status string `pulumi:"status"`
	// Type of constraint. Valid values are `LAUNCH`, `NOTIFICATION`, `RESOURCE_UPDATE`, `STACKSET`, and `TEMPLATE`.
	Type string `pulumi:"type"`
}

func LookupConstraintOutput(ctx *pulumi.Context, args LookupConstraintOutputArgs, opts ...pulumi.InvokeOption) LookupConstraintResultOutput {
	outputResult := pulumix.ApplyErr[*LookupConstraintArgs](args.ToOutput(), func(plainArgs *LookupConstraintArgs) (*LookupConstraintResult, error) {
		return LookupConstraint(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupConstraintResultOutput, *LookupConstraintResult](outputResult)
}

// A collection of arguments for invoking getConstraint.
type LookupConstraintOutputArgs struct {
	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage pulumix.Input[*string] `pulumi:"acceptLanguage"`
	// Description of the constraint.
	Description pulumix.Input[*string] `pulumi:"description"`
	// Constraint identifier.
	//
	// The following arguments are optional:
	Id pulumix.Input[string] `pulumi:"id"`
}

func (args LookupConstraintOutputArgs) ToOutput() pulumix.Output[*LookupConstraintArgs] {
	allArgs := pulumix.All(
		args.AcceptLanguage.ToOutput(context.Background()).AsAny(),
		args.Description.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupConstraintArgs {
		return &LookupConstraintArgs{
			AcceptLanguage: resolvedArgs[0].(*string),
			Description:    resolvedArgs[1].(*string),
			Id:             resolvedArgs[2].(string),
		}
	})
}

type LookupConstraintResultOutput struct{ *pulumi.OutputState }

func (LookupConstraintResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConstraintResult)(nil)).Elem()
}

func (o LookupConstraintResultOutput) ToOutput(context.Context) pulumix.Output[*LookupConstraintResult] {
	return pulumix.Output[*LookupConstraintResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupConstraintResultOutput) AcceptLanguage() pulumix.Output[*string] {
	return pulumix.Apply[*LookupConstraintResult](o, func(v *LookupConstraintResult) *string { return v.AcceptLanguage })
}

func (o LookupConstraintResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupConstraintResult](o, func(v *LookupConstraintResult) string { return v.Description })
}

func (o LookupConstraintResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupConstraintResult](o, func(v *LookupConstraintResult) string { return v.Id })
}

func (o LookupConstraintResultOutput) Owner() pulumix.Output[string] {
	return pulumix.Apply[*LookupConstraintResult](o, func(v *LookupConstraintResult) string { return v.Owner })
}

func (o LookupConstraintResultOutput) Parameters() pulumix.Output[string] {
	return pulumix.Apply[*LookupConstraintResult](o, func(v *LookupConstraintResult) string { return v.Parameters })
}

func (o LookupConstraintResultOutput) PortfolioId() pulumix.Output[string] {
	return pulumix.Apply[*LookupConstraintResult](o, func(v *LookupConstraintResult) string { return v.PortfolioId })
}

func (o LookupConstraintResultOutput) ProductId() pulumix.Output[string] {
	return pulumix.Apply[*LookupConstraintResult](o, func(v *LookupConstraintResult) string { return v.ProductId })
}

func (o LookupConstraintResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupConstraintResult](o, func(v *LookupConstraintResult) string { return v.Status })
}

func (o LookupConstraintResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupConstraintResult](o, func(v *LookupConstraintResult) string { return v.Type })
}
