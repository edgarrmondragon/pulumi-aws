// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package budgets

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a budget action resource. Budget actions are cost savings controls that run either automatically on your behalf or by using a workflow approval process.
type BudgetAction struct {
	pulumi.CustomResourceState

	// The ID of the target account for budget. Will use current user's accountId by default if omitted.
	AccountId pulumix.Output[string] `pulumi:"accountId"`
	// The id of the budget action.
	ActionId pulumix.Output[string] `pulumi:"actionId"`
	// The trigger threshold of the action. See Action Threshold.
	ActionThreshold pulumix.GPtrOutput[BudgetActionActionThreshold, BudgetActionActionThresholdOutput] `pulumi:"actionThreshold"`
	// The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are `APPLY_IAM_POLICY`, `APPLY_SCP_POLICY`, and `RUN_SSM_DOCUMENTS`.
	ActionType pulumix.Output[string] `pulumi:"actionType"`
	// This specifies if the action needs manual or automatic approval. Valid values are `AUTOMATIC` and `MANUAL`.
	ApprovalModel pulumix.Output[string] `pulumi:"approvalModel"`
	// The ARN of the budget action.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The name of a budget.
	BudgetName pulumix.Output[string] `pulumi:"budgetName"`
	// Specifies all of the type-specific parameters. See Definition.
	Definition pulumix.GPtrOutput[BudgetActionDefinition, BudgetActionDefinitionOutput] `pulumi:"definition"`
	// The role passed for action execution and reversion. Roles and actions must be in the same account.
	ExecutionRoleArn pulumix.Output[string] `pulumi:"executionRoleArn"`
	// The type of a notification. Valid values are `ACTUAL` or `FORECASTED`.
	NotificationType pulumix.Output[string] `pulumi:"notificationType"`
	// The status of the budget action.
	Status pulumix.Output[string] `pulumi:"status"`
	// A list of subscribers. See Subscriber.
	Subscribers pulumix.GArrayOutput[BudgetActionSubscriber, BudgetActionSubscriberOutput] `pulumi:"subscribers"`
}

// NewBudgetAction registers a new resource with the given unique name, arguments, and options.
func NewBudgetAction(ctx *pulumi.Context,
	name string, args *BudgetActionArgs, opts ...pulumi.ResourceOption) (*BudgetAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActionThreshold == nil {
		return nil, errors.New("invalid value for required argument 'ActionThreshold'")
	}
	if args.ActionType == nil {
		return nil, errors.New("invalid value for required argument 'ActionType'")
	}
	if args.ApprovalModel == nil {
		return nil, errors.New("invalid value for required argument 'ApprovalModel'")
	}
	if args.BudgetName == nil {
		return nil, errors.New("invalid value for required argument 'BudgetName'")
	}
	if args.Definition == nil {
		return nil, errors.New("invalid value for required argument 'Definition'")
	}
	if args.ExecutionRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionRoleArn'")
	}
	if args.NotificationType == nil {
		return nil, errors.New("invalid value for required argument 'NotificationType'")
	}
	if args.Subscribers == nil {
		return nil, errors.New("invalid value for required argument 'Subscribers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BudgetAction
	err := ctx.RegisterResource("aws:budgets/budgetAction:BudgetAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBudgetAction gets an existing BudgetAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBudgetAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BudgetActionState, opts ...pulumi.ResourceOption) (*BudgetAction, error) {
	var resource BudgetAction
	err := ctx.ReadResource("aws:budgets/budgetAction:BudgetAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BudgetAction resources.
type budgetActionState struct {
	// The ID of the target account for budget. Will use current user's accountId by default if omitted.
	AccountId *string `pulumi:"accountId"`
	// The id of the budget action.
	ActionId *string `pulumi:"actionId"`
	// The trigger threshold of the action. See Action Threshold.
	ActionThreshold *BudgetActionActionThreshold `pulumi:"actionThreshold"`
	// The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are `APPLY_IAM_POLICY`, `APPLY_SCP_POLICY`, and `RUN_SSM_DOCUMENTS`.
	ActionType *string `pulumi:"actionType"`
	// This specifies if the action needs manual or automatic approval. Valid values are `AUTOMATIC` and `MANUAL`.
	ApprovalModel *string `pulumi:"approvalModel"`
	// The ARN of the budget action.
	Arn *string `pulumi:"arn"`
	// The name of a budget.
	BudgetName *string `pulumi:"budgetName"`
	// Specifies all of the type-specific parameters. See Definition.
	Definition *BudgetActionDefinition `pulumi:"definition"`
	// The role passed for action execution and reversion. Roles and actions must be in the same account.
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// The type of a notification. Valid values are `ACTUAL` or `FORECASTED`.
	NotificationType *string `pulumi:"notificationType"`
	// The status of the budget action.
	Status *string `pulumi:"status"`
	// A list of subscribers. See Subscriber.
	Subscribers []BudgetActionSubscriber `pulumi:"subscribers"`
}

type BudgetActionState struct {
	// The ID of the target account for budget. Will use current user's accountId by default if omitted.
	AccountId pulumix.Input[*string]
	// The id of the budget action.
	ActionId pulumix.Input[*string]
	// The trigger threshold of the action. See Action Threshold.
	ActionThreshold pulumix.Input[*BudgetActionActionThresholdArgs]
	// The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are `APPLY_IAM_POLICY`, `APPLY_SCP_POLICY`, and `RUN_SSM_DOCUMENTS`.
	ActionType pulumix.Input[*string]
	// This specifies if the action needs manual or automatic approval. Valid values are `AUTOMATIC` and `MANUAL`.
	ApprovalModel pulumix.Input[*string]
	// The ARN of the budget action.
	Arn pulumix.Input[*string]
	// The name of a budget.
	BudgetName pulumix.Input[*string]
	// Specifies all of the type-specific parameters. See Definition.
	Definition pulumix.Input[*BudgetActionDefinitionArgs]
	// The role passed for action execution and reversion. Roles and actions must be in the same account.
	ExecutionRoleArn pulumix.Input[*string]
	// The type of a notification. Valid values are `ACTUAL` or `FORECASTED`.
	NotificationType pulumix.Input[*string]
	// The status of the budget action.
	Status pulumix.Input[*string]
	// A list of subscribers. See Subscriber.
	Subscribers pulumix.Input[[]*BudgetActionSubscriberArgs]
}

func (BudgetActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*budgetActionState)(nil)).Elem()
}

type budgetActionArgs struct {
	// The ID of the target account for budget. Will use current user's accountId by default if omitted.
	AccountId *string `pulumi:"accountId"`
	// The trigger threshold of the action. See Action Threshold.
	ActionThreshold BudgetActionActionThreshold `pulumi:"actionThreshold"`
	// The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are `APPLY_IAM_POLICY`, `APPLY_SCP_POLICY`, and `RUN_SSM_DOCUMENTS`.
	ActionType string `pulumi:"actionType"`
	// This specifies if the action needs manual or automatic approval. Valid values are `AUTOMATIC` and `MANUAL`.
	ApprovalModel string `pulumi:"approvalModel"`
	// The name of a budget.
	BudgetName string `pulumi:"budgetName"`
	// Specifies all of the type-specific parameters. See Definition.
	Definition BudgetActionDefinition `pulumi:"definition"`
	// The role passed for action execution and reversion. Roles and actions must be in the same account.
	ExecutionRoleArn string `pulumi:"executionRoleArn"`
	// The type of a notification. Valid values are `ACTUAL` or `FORECASTED`.
	NotificationType string `pulumi:"notificationType"`
	// A list of subscribers. See Subscriber.
	Subscribers []BudgetActionSubscriber `pulumi:"subscribers"`
}

// The set of arguments for constructing a BudgetAction resource.
type BudgetActionArgs struct {
	// The ID of the target account for budget. Will use current user's accountId by default if omitted.
	AccountId pulumix.Input[*string]
	// The trigger threshold of the action. See Action Threshold.
	ActionThreshold pulumix.Input[*BudgetActionActionThresholdArgs]
	// The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are `APPLY_IAM_POLICY`, `APPLY_SCP_POLICY`, and `RUN_SSM_DOCUMENTS`.
	ActionType pulumix.Input[string]
	// This specifies if the action needs manual or automatic approval. Valid values are `AUTOMATIC` and `MANUAL`.
	ApprovalModel pulumix.Input[string]
	// The name of a budget.
	BudgetName pulumix.Input[string]
	// Specifies all of the type-specific parameters. See Definition.
	Definition pulumix.Input[*BudgetActionDefinitionArgs]
	// The role passed for action execution and reversion. Roles and actions must be in the same account.
	ExecutionRoleArn pulumix.Input[string]
	// The type of a notification. Valid values are `ACTUAL` or `FORECASTED`.
	NotificationType pulumix.Input[string]
	// A list of subscribers. See Subscriber.
	Subscribers pulumix.Input[[]*BudgetActionSubscriberArgs]
}

func (BudgetActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*budgetActionArgs)(nil)).Elem()
}

type BudgetActionOutput struct{ *pulumi.OutputState }

func (BudgetActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAction)(nil)).Elem()
}

func (o BudgetActionOutput) ToBudgetActionOutput() BudgetActionOutput {
	return o
}

func (o BudgetActionOutput) ToBudgetActionOutputWithContext(ctx context.Context) BudgetActionOutput {
	return o
}

func (o BudgetActionOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetAction] {
	return pulumix.Output[BudgetAction]{
		OutputState: o.OutputState,
	}
}

// The ID of the target account for budget. Will use current user's accountId by default if omitted.
func (o BudgetActionOutput) AccountId() pulumix.Output[string] {
	value := pulumix.Apply[BudgetAction](o, func(v BudgetAction) pulumix.Output[string] { return v.AccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The id of the budget action.
func (o BudgetActionOutput) ActionId() pulumix.Output[string] {
	value := pulumix.Apply[BudgetAction](o, func(v BudgetAction) pulumix.Output[string] { return v.ActionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The trigger threshold of the action. See Action Threshold.
func (o BudgetActionOutput) ActionThreshold() pulumix.GPtrOutput[BudgetActionActionThreshold, BudgetActionActionThresholdOutput] {
	value := pulumix.Apply[BudgetAction](o, func(v BudgetAction) pulumix.GPtrOutput[BudgetActionActionThreshold, BudgetActionActionThresholdOutput] {
		return v.ActionThreshold
	})
	unwrapped := pulumix.Flatten[*BudgetActionActionThreshold, pulumix.GPtrOutput[BudgetActionActionThreshold, BudgetActionActionThresholdOutput]](value)
	return pulumix.GPtrOutput[BudgetActionActionThreshold, BudgetActionActionThresholdOutput]{OutputState: unwrapped.OutputState}
}

// The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are `APPLY_IAM_POLICY`, `APPLY_SCP_POLICY`, and `RUN_SSM_DOCUMENTS`.
func (o BudgetActionOutput) ActionType() pulumix.Output[string] {
	value := pulumix.Apply[BudgetAction](o, func(v BudgetAction) pulumix.Output[string] { return v.ActionType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// This specifies if the action needs manual or automatic approval. Valid values are `AUTOMATIC` and `MANUAL`.
func (o BudgetActionOutput) ApprovalModel() pulumix.Output[string] {
	value := pulumix.Apply[BudgetAction](o, func(v BudgetAction) pulumix.Output[string] { return v.ApprovalModel })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the budget action.
func (o BudgetActionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[BudgetAction](o, func(v BudgetAction) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of a budget.
func (o BudgetActionOutput) BudgetName() pulumix.Output[string] {
	value := pulumix.Apply[BudgetAction](o, func(v BudgetAction) pulumix.Output[string] { return v.BudgetName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies all of the type-specific parameters. See Definition.
func (o BudgetActionOutput) Definition() pulumix.GPtrOutput[BudgetActionDefinition, BudgetActionDefinitionOutput] {
	value := pulumix.Apply[BudgetAction](o, func(v BudgetAction) pulumix.GPtrOutput[BudgetActionDefinition, BudgetActionDefinitionOutput] {
		return v.Definition
	})
	unwrapped := pulumix.Flatten[*BudgetActionDefinition, pulumix.GPtrOutput[BudgetActionDefinition, BudgetActionDefinitionOutput]](value)
	return pulumix.GPtrOutput[BudgetActionDefinition, BudgetActionDefinitionOutput]{OutputState: unwrapped.OutputState}
}

// The role passed for action execution and reversion. Roles and actions must be in the same account.
func (o BudgetActionOutput) ExecutionRoleArn() pulumix.Output[string] {
	value := pulumix.Apply[BudgetAction](o, func(v BudgetAction) pulumix.Output[string] { return v.ExecutionRoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of a notification. Valid values are `ACTUAL` or `FORECASTED`.
func (o BudgetActionOutput) NotificationType() pulumix.Output[string] {
	value := pulumix.Apply[BudgetAction](o, func(v BudgetAction) pulumix.Output[string] { return v.NotificationType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The status of the budget action.
func (o BudgetActionOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[BudgetAction](o, func(v BudgetAction) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of subscribers. See Subscriber.
func (o BudgetActionOutput) Subscribers() pulumix.GArrayOutput[BudgetActionSubscriber, BudgetActionSubscriberOutput] {
	value := pulumix.Apply[BudgetAction](o, func(v BudgetAction) pulumix.GArrayOutput[BudgetActionSubscriber, BudgetActionSubscriberOutput] {
		return v.Subscribers
	})
	unwrapped := pulumix.Flatten[[]BudgetActionSubscriber, pulumix.GArrayOutput[BudgetActionSubscriber, BudgetActionSubscriberOutput]](value)
	return pulumix.GArrayOutput[BudgetActionSubscriber, BudgetActionSubscriberOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(BudgetActionOutput{})
}
