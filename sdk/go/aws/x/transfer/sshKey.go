// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a AWS Transfer User SSH Key resource.
type SshKey struct {
	pulumi.CustomResourceState

	// The public key portion of an SSH key pair.
	Body pulumix.Output[string] `pulumi:"body"`
	// The Server ID of the Transfer Server (e.g., `s-12345678`)
	ServerId pulumix.Output[string] `pulumi:"serverId"`
	// The name of the user account that is assigned to one or more servers.
	UserName pulumix.Output[string] `pulumi:"userName"`
}

// NewSshKey registers a new resource with the given unique name, arguments, and options.
func NewSshKey(ctx *pulumi.Context,
	name string, args *SshKeyArgs, opts ...pulumi.ResourceOption) (*SshKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SshKey
	err := ctx.RegisterResource("aws:transfer/sshKey:SshKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSshKey gets an existing SshKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSshKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SshKeyState, opts ...pulumi.ResourceOption) (*SshKey, error) {
	var resource SshKey
	err := ctx.ReadResource("aws:transfer/sshKey:SshKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SshKey resources.
type sshKeyState struct {
	// The public key portion of an SSH key pair.
	Body *string `pulumi:"body"`
	// The Server ID of the Transfer Server (e.g., `s-12345678`)
	ServerId *string `pulumi:"serverId"`
	// The name of the user account that is assigned to one or more servers.
	UserName *string `pulumi:"userName"`
}

type SshKeyState struct {
	// The public key portion of an SSH key pair.
	Body pulumix.Input[*string]
	// The Server ID of the Transfer Server (e.g., `s-12345678`)
	ServerId pulumix.Input[*string]
	// The name of the user account that is assigned to one or more servers.
	UserName pulumix.Input[*string]
}

func (SshKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sshKeyState)(nil)).Elem()
}

type sshKeyArgs struct {
	// The public key portion of an SSH key pair.
	Body string `pulumi:"body"`
	// The Server ID of the Transfer Server (e.g., `s-12345678`)
	ServerId string `pulumi:"serverId"`
	// The name of the user account that is assigned to one or more servers.
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a SshKey resource.
type SshKeyArgs struct {
	// The public key portion of an SSH key pair.
	Body pulumix.Input[string]
	// The Server ID of the Transfer Server (e.g., `s-12345678`)
	ServerId pulumix.Input[string]
	// The name of the user account that is assigned to one or more servers.
	UserName pulumix.Input[string]
}

func (SshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sshKeyArgs)(nil)).Elem()
}

type SshKeyOutput struct{ *pulumi.OutputState }

func (SshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshKey)(nil)).Elem()
}

func (o SshKeyOutput) ToSshKeyOutput() SshKeyOutput {
	return o
}

func (o SshKeyOutput) ToSshKeyOutputWithContext(ctx context.Context) SshKeyOutput {
	return o
}

func (o SshKeyOutput) ToOutput(ctx context.Context) pulumix.Output[SshKey] {
	return pulumix.Output[SshKey]{
		OutputState: o.OutputState,
	}
}

// The public key portion of an SSH key pair.
func (o SshKeyOutput) Body() pulumix.Output[string] {
	value := pulumix.Apply[SshKey](o, func(v SshKey) pulumix.Output[string] { return v.Body })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Server ID of the Transfer Server (e.g., `s-12345678`)
func (o SshKeyOutput) ServerId() pulumix.Output[string] {
	value := pulumix.Apply[SshKey](o, func(v SshKey) pulumix.Output[string] { return v.ServerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the user account that is assigned to one or more servers.
func (o SshKeyOutput) UserName() pulumix.Output[string] {
	value := pulumix.Apply[SshKey](o, func(v SshKey) pulumix.Output[string] { return v.UserName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SshKeyOutput{})
}
