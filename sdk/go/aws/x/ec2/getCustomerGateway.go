// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get an existing AWS Customer Gateway.
func LookupCustomerGateway(ctx *pulumi.Context, args *LookupCustomerGatewayArgs, opts ...pulumi.InvokeOption) (*LookupCustomerGatewayResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCustomerGatewayResult
	err := ctx.Invoke("aws:ec2/getCustomerGateway:getCustomerGateway", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCustomerGateway.
type LookupCustomerGatewayArgs struct {
	// One or more [name-value pairs][dcg-filters] to filter by.
	//
	// [dcg-filters]: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeCustomerGateways.html
	Filters []GetCustomerGatewayFilter `pulumi:"filters"`
	// ID of the gateway.
	Id *string `pulumi:"id"`
	// Map of key-value pairs assigned to the gateway.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getCustomerGateway.
type LookupCustomerGatewayResult struct {
	// ARN of the customer gateway.
	Arn string `pulumi:"arn"`
	// Gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).
	BgpAsn int `pulumi:"bgpAsn"`
	// ARN for the customer gateway certificate.
	CertificateArn string `pulumi:"certificateArn"`
	// Name for the customer gateway device.
	DeviceName string                     `pulumi:"deviceName"`
	Filters    []GetCustomerGatewayFilter `pulumi:"filters"`
	Id         string                     `pulumi:"id"`
	// IP address of the gateway's Internet-routable external interface.
	IpAddress string `pulumi:"ipAddress"`
	// Map of key-value pairs assigned to the gateway.
	Tags map[string]string `pulumi:"tags"`
	// Type of customer gateway. The only type AWS supports at this time is "ipsec.1".
	Type string `pulumi:"type"`
}

func LookupCustomerGatewayOutput(ctx *pulumi.Context, args LookupCustomerGatewayOutputArgs, opts ...pulumi.InvokeOption) LookupCustomerGatewayResultOutput {
	outputResult := pulumix.ApplyErr[*LookupCustomerGatewayArgs](args.ToOutput(), func(plainArgs *LookupCustomerGatewayArgs) (*LookupCustomerGatewayResult, error) {
		return LookupCustomerGateway(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupCustomerGatewayResultOutput, *LookupCustomerGatewayResult](outputResult)
}

// A collection of arguments for invoking getCustomerGateway.
type LookupCustomerGatewayOutputArgs struct {
	// One or more [name-value pairs][dcg-filters] to filter by.
	//
	// [dcg-filters]: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeCustomerGateways.html
	Filters pulumix.Input[[]*GetCustomerGatewayFilterArgs] `pulumi:"filters"`
	// ID of the gateway.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Map of key-value pairs assigned to the gateway.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupCustomerGatewayOutputArgs) ToOutput() pulumix.Output[*LookupCustomerGatewayArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupCustomerGatewayArgs {
		return &LookupCustomerGatewayArgs{
			Filters: resolvedArgs[0].([]GetCustomerGatewayFilter),
			Id:      resolvedArgs[1].(*string),
			Tags:    resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupCustomerGatewayResultOutput struct{ *pulumi.OutputState }

func (LookupCustomerGatewayResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCustomerGatewayResult)(nil)).Elem()
}

func (o LookupCustomerGatewayResultOutput) ToOutput(context.Context) pulumix.Output[*LookupCustomerGatewayResult] {
	return pulumix.Output[*LookupCustomerGatewayResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupCustomerGatewayResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomerGatewayResult](o, func(v *LookupCustomerGatewayResult) string { return v.Arn })
}

func (o LookupCustomerGatewayResultOutput) BgpAsn() pulumix.Output[int] {
	return pulumix.Apply[*LookupCustomerGatewayResult](o, func(v *LookupCustomerGatewayResult) int { return v.BgpAsn })
}

func (o LookupCustomerGatewayResultOutput) CertificateArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomerGatewayResult](o, func(v *LookupCustomerGatewayResult) string { return v.CertificateArn })
}

func (o LookupCustomerGatewayResultOutput) DeviceName() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomerGatewayResult](o, func(v *LookupCustomerGatewayResult) string { return v.DeviceName })
}

func (o LookupCustomerGatewayResultOutput) Filters() pulumix.GArrayOutput[GetCustomerGatewayFilter, GetCustomerGatewayFilterOutput] {
	value := pulumix.Apply[*LookupCustomerGatewayResult](o, func(v *LookupCustomerGatewayResult) []GetCustomerGatewayFilter { return v.Filters })
	return pulumix.GArrayOutput[GetCustomerGatewayFilter, GetCustomerGatewayFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupCustomerGatewayResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomerGatewayResult](o, func(v *LookupCustomerGatewayResult) string { return v.Id })
}

func (o LookupCustomerGatewayResultOutput) IpAddress() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomerGatewayResult](o, func(v *LookupCustomerGatewayResult) string { return v.IpAddress })
}

func (o LookupCustomerGatewayResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupCustomerGatewayResult](o, func(v *LookupCustomerGatewayResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupCustomerGatewayResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomerGatewayResult](o, func(v *LookupCustomerGatewayResult) string { return v.Type })
}
