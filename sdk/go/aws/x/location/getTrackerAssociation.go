// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a Location Service Tracker Association.
func LookupTrackerAssociation(ctx *pulumi.Context, args *LookupTrackerAssociationArgs, opts ...pulumi.InvokeOption) (*LookupTrackerAssociationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTrackerAssociationResult
	err := ctx.Invoke("aws:location/getTrackerAssociation:getTrackerAssociation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTrackerAssociation.
type LookupTrackerAssociationArgs struct {
	// ARN of the geofence collection associated to tracker resource.
	ConsumerArn string `pulumi:"consumerArn"`
	// Name of the tracker resource associated with a geofence collection.
	TrackerName string `pulumi:"trackerName"`
}

// A collection of values returned by getTrackerAssociation.
type LookupTrackerAssociationResult struct {
	ConsumerArn string `pulumi:"consumerArn"`
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	TrackerName string `pulumi:"trackerName"`
}

func LookupTrackerAssociationOutput(ctx *pulumi.Context, args LookupTrackerAssociationOutputArgs, opts ...pulumi.InvokeOption) LookupTrackerAssociationResultOutput {
	outputResult := pulumix.ApplyErr[*LookupTrackerAssociationArgs](args.ToOutput(), func(plainArgs *LookupTrackerAssociationArgs) (*LookupTrackerAssociationResult, error) {
		return LookupTrackerAssociation(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupTrackerAssociationResultOutput, *LookupTrackerAssociationResult](outputResult)
}

// A collection of arguments for invoking getTrackerAssociation.
type LookupTrackerAssociationOutputArgs struct {
	// ARN of the geofence collection associated to tracker resource.
	ConsumerArn pulumix.Input[string] `pulumi:"consumerArn"`
	// Name of the tracker resource associated with a geofence collection.
	TrackerName pulumix.Input[string] `pulumi:"trackerName"`
}

func (args LookupTrackerAssociationOutputArgs) ToOutput() pulumix.Output[*LookupTrackerAssociationArgs] {
	allArgs := pulumix.All(
		args.ConsumerArn.ToOutput(context.Background()).AsAny(),
		args.TrackerName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupTrackerAssociationArgs {
		return &LookupTrackerAssociationArgs{
			ConsumerArn: resolvedArgs[0].(string),
			TrackerName: resolvedArgs[1].(string),
		}
	})
}

type LookupTrackerAssociationResultOutput struct{ *pulumi.OutputState }

func (LookupTrackerAssociationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrackerAssociationResult)(nil)).Elem()
}

func (o LookupTrackerAssociationResultOutput) ToOutput(context.Context) pulumix.Output[*LookupTrackerAssociationResult] {
	return pulumix.Output[*LookupTrackerAssociationResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupTrackerAssociationResultOutput) ConsumerArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupTrackerAssociationResult](o, func(v *LookupTrackerAssociationResult) string { return v.ConsumerArn })
}

func (o LookupTrackerAssociationResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupTrackerAssociationResult](o, func(v *LookupTrackerAssociationResult) string { return v.Id })
}

func (o LookupTrackerAssociationResultOutput) TrackerName() pulumix.Output[string] {
	return pulumix.Apply[*LookupTrackerAssociationResult](o, func(v *LookupTrackerAssociationResult) string { return v.TrackerName })
}
