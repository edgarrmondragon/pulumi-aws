// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an EC2 Spot Fleet Request resource. This allows a fleet of Spot
// instances to be requested on the Spot market.
//
// > **NOTE [AWS strongly discourages](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-best-practices.html#which-spot-request-method-to-use) the use of the legacy APIs called by this resource.
// We recommend using the EC2 Fleet or Auto Scaling Group resources instead.
type SpotFleetRequest struct {
	pulumi.CustomResourceState

	// Indicates how to allocate the target capacity across
	// the Spot pools specified by the Spot fleet request. Valid values: `lowestPrice`, `diversified`, `capacityOptimized`, `capacityOptimizedPrioritized`, and `priceCapacityOptimized`. The default is
	// `lowestPrice`.
	AllocationStrategy pulumix.Output[*string] `pulumi:"allocationStrategy"`
	ClientToken        pulumix.Output[string]  `pulumi:"clientToken"`
	// Reserved.
	Context pulumix.Output[*string] `pulumi:"context"`
	// Indicates whether running Spot
	// instances should be terminated if the target capacity of the Spot fleet
	// request is decreased below the current size of the Spot fleet.
	ExcessCapacityTerminationPolicy pulumix.Output[*string] `pulumi:"excessCapacityTerminationPolicy"`
	// The type of fleet request. Indicates whether the Spot Fleet only requests the target
	// capacity or also attempts to maintain it. Default is `maintain`.
	FleetType pulumix.Output[*string] `pulumi:"fleetType"`
	// Grants the Spot fleet permission to terminate
	// Spot instances on your behalf when you cancel its Spot fleet request using
	// CancelSpotFleetRequests or when the Spot fleet request expires, if you set
	// terminateInstancesWithExpiration.
	IamFleetRole pulumix.Output[string] `pulumi:"iamFleetRole"`
	// Indicates whether a Spot
	// instance stops or terminates when it is interrupted. Default is
	// `terminate`.
	InstanceInterruptionBehaviour pulumix.Output[*string] `pulumi:"instanceInterruptionBehaviour"`
	// The number of Spot pools across which to allocate your target Spot capacity.
	// Valid only when `allocationStrategy` is set to `lowestPrice`. Spot Fleet selects
	// the cheapest Spot pools and evenly allocates your target Spot capacity across
	// the number of Spot pools that you specify.
	InstancePoolsToUseCount pulumix.Output[*int] `pulumi:"instancePoolsToUseCount"`
	// Used to define the launch configuration of the
	// spot-fleet request. Can be specified multiple times to define different bids
	// across different markets and instance types. Conflicts with `launchTemplateConfig`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	//
	// **Note**: This takes in similar but not
	// identical inputs as `ec2.Instance`.  There are limitations on
	// what you can specify. See the list of officially supported inputs in the
	// [reference documentation](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetLaunchSpecification.html). Any normal `ec2.Instance` parameter that corresponds to those inputs may be used and it have
	// a additional parameter `iamInstanceProfileArn` takes `iam.InstanceProfile` attribute `arn` as input.
	LaunchSpecifications pulumix.GArrayOutput[SpotFleetRequestLaunchSpecification, SpotFleetRequestLaunchSpecificationOutput] `pulumi:"launchSpecifications"`
	// Launch template configuration block. See Launch Template Configs below for more details. Conflicts with `launchSpecification`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	LaunchTemplateConfigs pulumix.GArrayOutput[SpotFleetRequestLaunchTemplateConfig, SpotFleetRequestLaunchTemplateConfigOutput] `pulumi:"launchTemplateConfigs"`
	// A list of elastic load balancer names to add to the Spot fleet.
	LoadBalancers pulumix.ArrayOutput[string] `pulumi:"loadBalancers"`
	// The order of the launch template overrides to use in fulfilling On-Demand capacity. the possible values are: `lowestPrice` and `prioritized`. the default is `lowestPrice`.
	OnDemandAllocationStrategy pulumix.Output[*string] `pulumi:"onDemandAllocationStrategy"`
	// The maximum amount per hour for On-Demand Instances that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity.
	OnDemandMaxTotalPrice pulumix.Output[*string] `pulumi:"onDemandMaxTotalPrice"`
	// The number of On-Demand units to request. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.
	OnDemandTargetCapacity pulumix.Output[*int] `pulumi:"onDemandTargetCapacity"`
	// Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
	ReplaceUnhealthyInstances pulumix.Output[*bool] `pulumi:"replaceUnhealthyInstances"`
	// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
	SpotMaintenanceStrategies pulumix.GPtrOutput[SpotFleetRequestSpotMaintenanceStrategies, SpotFleetRequestSpotMaintenanceStrategiesOutput] `pulumi:"spotMaintenanceStrategies"`
	// The maximum bid price per unit hour.
	SpotPrice pulumix.Output[*string] `pulumi:"spotPrice"`
	// The state of the Spot fleet request.
	SpotRequestState pulumix.Output[string] `pulumi:"spotRequestState"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The number of units to request. You can choose to set the
	// target capacity in terms of instances or a performance characteristic that is
	// important to your application workload, such as vCPUs, memory, or I/O.
	TargetCapacity pulumix.Output[int] `pulumi:"targetCapacity"`
	// The unit for the target capacity. This can only be done with `instanceRequirements` defined
	TargetCapacityUnitType pulumix.Output[*string] `pulumi:"targetCapacityUnitType"`
	// A list of `alb.TargetGroup` ARNs, for use with Application Load Balancing.
	TargetGroupArns pulumix.ArrayOutput[string] `pulumi:"targetGroupArns"`
	// Indicates whether running Spot
	// instances should be terminated when the resource is deleted (and the Spot fleet request cancelled).
	// If no value is specified, the value of the `terminateInstancesWithExpiration` argument is used.
	TerminateInstancesOnDelete pulumix.Output[*string] `pulumi:"terminateInstancesOnDelete"`
	// Indicates whether running Spot
	// instances should be terminated when the Spot fleet request expires.
	TerminateInstancesWithExpiration pulumix.Output[*bool] `pulumi:"terminateInstancesWithExpiration"`
	// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom pulumix.Output[*string] `pulumi:"validFrom"`
	// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request.
	ValidUntil pulumix.Output[*string] `pulumi:"validUntil"`
	// If set, this provider will
	// wait for the Spot Request to be fulfilled, and will throw an error if the
	// timeout of 10m is reached.
	WaitForFulfillment pulumix.Output[*bool] `pulumi:"waitForFulfillment"`
}

// NewSpotFleetRequest registers a new resource with the given unique name, arguments, and options.
func NewSpotFleetRequest(ctx *pulumi.Context,
	name string, args *SpotFleetRequestArgs, opts ...pulumi.ResourceOption) (*SpotFleetRequest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IamFleetRole == nil {
		return nil, errors.New("invalid value for required argument 'IamFleetRole'")
	}
	if args.TargetCapacity == nil {
		return nil, errors.New("invalid value for required argument 'TargetCapacity'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpotFleetRequest
	err := ctx.RegisterResource("aws:ec2/spotFleetRequest:SpotFleetRequest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpotFleetRequest gets an existing SpotFleetRequest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpotFleetRequest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpotFleetRequestState, opts ...pulumi.ResourceOption) (*SpotFleetRequest, error) {
	var resource SpotFleetRequest
	err := ctx.ReadResource("aws:ec2/spotFleetRequest:SpotFleetRequest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpotFleetRequest resources.
type spotFleetRequestState struct {
	// Indicates how to allocate the target capacity across
	// the Spot pools specified by the Spot fleet request. Valid values: `lowestPrice`, `diversified`, `capacityOptimized`, `capacityOptimizedPrioritized`, and `priceCapacityOptimized`. The default is
	// `lowestPrice`.
	AllocationStrategy *string `pulumi:"allocationStrategy"`
	ClientToken        *string `pulumi:"clientToken"`
	// Reserved.
	Context *string `pulumi:"context"`
	// Indicates whether running Spot
	// instances should be terminated if the target capacity of the Spot fleet
	// request is decreased below the current size of the Spot fleet.
	ExcessCapacityTerminationPolicy *string `pulumi:"excessCapacityTerminationPolicy"`
	// The type of fleet request. Indicates whether the Spot Fleet only requests the target
	// capacity or also attempts to maintain it. Default is `maintain`.
	FleetType *string `pulumi:"fleetType"`
	// Grants the Spot fleet permission to terminate
	// Spot instances on your behalf when you cancel its Spot fleet request using
	// CancelSpotFleetRequests or when the Spot fleet request expires, if you set
	// terminateInstancesWithExpiration.
	IamFleetRole *string `pulumi:"iamFleetRole"`
	// Indicates whether a Spot
	// instance stops or terminates when it is interrupted. Default is
	// `terminate`.
	InstanceInterruptionBehaviour *string `pulumi:"instanceInterruptionBehaviour"`
	// The number of Spot pools across which to allocate your target Spot capacity.
	// Valid only when `allocationStrategy` is set to `lowestPrice`. Spot Fleet selects
	// the cheapest Spot pools and evenly allocates your target Spot capacity across
	// the number of Spot pools that you specify.
	InstancePoolsToUseCount *int `pulumi:"instancePoolsToUseCount"`
	// Used to define the launch configuration of the
	// spot-fleet request. Can be specified multiple times to define different bids
	// across different markets and instance types. Conflicts with `launchTemplateConfig`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	//
	// **Note**: This takes in similar but not
	// identical inputs as `ec2.Instance`.  There are limitations on
	// what you can specify. See the list of officially supported inputs in the
	// [reference documentation](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetLaunchSpecification.html). Any normal `ec2.Instance` parameter that corresponds to those inputs may be used and it have
	// a additional parameter `iamInstanceProfileArn` takes `iam.InstanceProfile` attribute `arn` as input.
	LaunchSpecifications []SpotFleetRequestLaunchSpecification `pulumi:"launchSpecifications"`
	// Launch template configuration block. See Launch Template Configs below for more details. Conflicts with `launchSpecification`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	LaunchTemplateConfigs []SpotFleetRequestLaunchTemplateConfig `pulumi:"launchTemplateConfigs"`
	// A list of elastic load balancer names to add to the Spot fleet.
	LoadBalancers []string `pulumi:"loadBalancers"`
	// The order of the launch template overrides to use in fulfilling On-Demand capacity. the possible values are: `lowestPrice` and `prioritized`. the default is `lowestPrice`.
	OnDemandAllocationStrategy *string `pulumi:"onDemandAllocationStrategy"`
	// The maximum amount per hour for On-Demand Instances that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity.
	OnDemandMaxTotalPrice *string `pulumi:"onDemandMaxTotalPrice"`
	// The number of On-Demand units to request. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.
	OnDemandTargetCapacity *int `pulumi:"onDemandTargetCapacity"`
	// Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
	ReplaceUnhealthyInstances *bool `pulumi:"replaceUnhealthyInstances"`
	// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
	SpotMaintenanceStrategies *SpotFleetRequestSpotMaintenanceStrategies `pulumi:"spotMaintenanceStrategies"`
	// The maximum bid price per unit hour.
	SpotPrice *string `pulumi:"spotPrice"`
	// The state of the Spot fleet request.
	SpotRequestState *string `pulumi:"spotRequestState"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The number of units to request. You can choose to set the
	// target capacity in terms of instances or a performance characteristic that is
	// important to your application workload, such as vCPUs, memory, or I/O.
	TargetCapacity *int `pulumi:"targetCapacity"`
	// The unit for the target capacity. This can only be done with `instanceRequirements` defined
	TargetCapacityUnitType *string `pulumi:"targetCapacityUnitType"`
	// A list of `alb.TargetGroup` ARNs, for use with Application Load Balancing.
	TargetGroupArns []string `pulumi:"targetGroupArns"`
	// Indicates whether running Spot
	// instances should be terminated when the resource is deleted (and the Spot fleet request cancelled).
	// If no value is specified, the value of the `terminateInstancesWithExpiration` argument is used.
	TerminateInstancesOnDelete *string `pulumi:"terminateInstancesOnDelete"`
	// Indicates whether running Spot
	// instances should be terminated when the Spot fleet request expires.
	TerminateInstancesWithExpiration *bool `pulumi:"terminateInstancesWithExpiration"`
	// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom *string `pulumi:"validFrom"`
	// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request.
	ValidUntil *string `pulumi:"validUntil"`
	// If set, this provider will
	// wait for the Spot Request to be fulfilled, and will throw an error if the
	// timeout of 10m is reached.
	WaitForFulfillment *bool `pulumi:"waitForFulfillment"`
}

type SpotFleetRequestState struct {
	// Indicates how to allocate the target capacity across
	// the Spot pools specified by the Spot fleet request. Valid values: `lowestPrice`, `diversified`, `capacityOptimized`, `capacityOptimizedPrioritized`, and `priceCapacityOptimized`. The default is
	// `lowestPrice`.
	AllocationStrategy pulumix.Input[*string]
	ClientToken        pulumix.Input[*string]
	// Reserved.
	Context pulumix.Input[*string]
	// Indicates whether running Spot
	// instances should be terminated if the target capacity of the Spot fleet
	// request is decreased below the current size of the Spot fleet.
	ExcessCapacityTerminationPolicy pulumix.Input[*string]
	// The type of fleet request. Indicates whether the Spot Fleet only requests the target
	// capacity or also attempts to maintain it. Default is `maintain`.
	FleetType pulumix.Input[*string]
	// Grants the Spot fleet permission to terminate
	// Spot instances on your behalf when you cancel its Spot fleet request using
	// CancelSpotFleetRequests or when the Spot fleet request expires, if you set
	// terminateInstancesWithExpiration.
	IamFleetRole pulumix.Input[*string]
	// Indicates whether a Spot
	// instance stops or terminates when it is interrupted. Default is
	// `terminate`.
	InstanceInterruptionBehaviour pulumix.Input[*string]
	// The number of Spot pools across which to allocate your target Spot capacity.
	// Valid only when `allocationStrategy` is set to `lowestPrice`. Spot Fleet selects
	// the cheapest Spot pools and evenly allocates your target Spot capacity across
	// the number of Spot pools that you specify.
	InstancePoolsToUseCount pulumix.Input[*int]
	// Used to define the launch configuration of the
	// spot-fleet request. Can be specified multiple times to define different bids
	// across different markets and instance types. Conflicts with `launchTemplateConfig`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	//
	// **Note**: This takes in similar but not
	// identical inputs as `ec2.Instance`.  There are limitations on
	// what you can specify. See the list of officially supported inputs in the
	// [reference documentation](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetLaunchSpecification.html). Any normal `ec2.Instance` parameter that corresponds to those inputs may be used and it have
	// a additional parameter `iamInstanceProfileArn` takes `iam.InstanceProfile` attribute `arn` as input.
	LaunchSpecifications pulumix.Input[[]*SpotFleetRequestLaunchSpecificationArgs]
	// Launch template configuration block. See Launch Template Configs below for more details. Conflicts with `launchSpecification`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	LaunchTemplateConfigs pulumix.Input[[]*SpotFleetRequestLaunchTemplateConfigArgs]
	// A list of elastic load balancer names to add to the Spot fleet.
	LoadBalancers pulumix.Input[[]string]
	// The order of the launch template overrides to use in fulfilling On-Demand capacity. the possible values are: `lowestPrice` and `prioritized`. the default is `lowestPrice`.
	OnDemandAllocationStrategy pulumix.Input[*string]
	// The maximum amount per hour for On-Demand Instances that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity.
	OnDemandMaxTotalPrice pulumix.Input[*string]
	// The number of On-Demand units to request. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.
	OnDemandTargetCapacity pulumix.Input[*int]
	// Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
	ReplaceUnhealthyInstances pulumix.Input[*bool]
	// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
	SpotMaintenanceStrategies pulumix.Input[*SpotFleetRequestSpotMaintenanceStrategiesArgs]
	// The maximum bid price per unit hour.
	SpotPrice pulumix.Input[*string]
	// The state of the Spot fleet request.
	SpotRequestState pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The number of units to request. You can choose to set the
	// target capacity in terms of instances or a performance characteristic that is
	// important to your application workload, such as vCPUs, memory, or I/O.
	TargetCapacity pulumix.Input[*int]
	// The unit for the target capacity. This can only be done with `instanceRequirements` defined
	TargetCapacityUnitType pulumix.Input[*string]
	// A list of `alb.TargetGroup` ARNs, for use with Application Load Balancing.
	TargetGroupArns pulumix.Input[[]string]
	// Indicates whether running Spot
	// instances should be terminated when the resource is deleted (and the Spot fleet request cancelled).
	// If no value is specified, the value of the `terminateInstancesWithExpiration` argument is used.
	TerminateInstancesOnDelete pulumix.Input[*string]
	// Indicates whether running Spot
	// instances should be terminated when the Spot fleet request expires.
	TerminateInstancesWithExpiration pulumix.Input[*bool]
	// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom pulumix.Input[*string]
	// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request.
	ValidUntil pulumix.Input[*string]
	// If set, this provider will
	// wait for the Spot Request to be fulfilled, and will throw an error if the
	// timeout of 10m is reached.
	WaitForFulfillment pulumix.Input[*bool]
}

func (SpotFleetRequestState) ElementType() reflect.Type {
	return reflect.TypeOf((*spotFleetRequestState)(nil)).Elem()
}

type spotFleetRequestArgs struct {
	// Indicates how to allocate the target capacity across
	// the Spot pools specified by the Spot fleet request. Valid values: `lowestPrice`, `diversified`, `capacityOptimized`, `capacityOptimizedPrioritized`, and `priceCapacityOptimized`. The default is
	// `lowestPrice`.
	AllocationStrategy *string `pulumi:"allocationStrategy"`
	// Reserved.
	Context *string `pulumi:"context"`
	// Indicates whether running Spot
	// instances should be terminated if the target capacity of the Spot fleet
	// request is decreased below the current size of the Spot fleet.
	ExcessCapacityTerminationPolicy *string `pulumi:"excessCapacityTerminationPolicy"`
	// The type of fleet request. Indicates whether the Spot Fleet only requests the target
	// capacity or also attempts to maintain it. Default is `maintain`.
	FleetType *string `pulumi:"fleetType"`
	// Grants the Spot fleet permission to terminate
	// Spot instances on your behalf when you cancel its Spot fleet request using
	// CancelSpotFleetRequests or when the Spot fleet request expires, if you set
	// terminateInstancesWithExpiration.
	IamFleetRole string `pulumi:"iamFleetRole"`
	// Indicates whether a Spot
	// instance stops or terminates when it is interrupted. Default is
	// `terminate`.
	InstanceInterruptionBehaviour *string `pulumi:"instanceInterruptionBehaviour"`
	// The number of Spot pools across which to allocate your target Spot capacity.
	// Valid only when `allocationStrategy` is set to `lowestPrice`. Spot Fleet selects
	// the cheapest Spot pools and evenly allocates your target Spot capacity across
	// the number of Spot pools that you specify.
	InstancePoolsToUseCount *int `pulumi:"instancePoolsToUseCount"`
	// Used to define the launch configuration of the
	// spot-fleet request. Can be specified multiple times to define different bids
	// across different markets and instance types. Conflicts with `launchTemplateConfig`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	//
	// **Note**: This takes in similar but not
	// identical inputs as `ec2.Instance`.  There are limitations on
	// what you can specify. See the list of officially supported inputs in the
	// [reference documentation](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetLaunchSpecification.html). Any normal `ec2.Instance` parameter that corresponds to those inputs may be used and it have
	// a additional parameter `iamInstanceProfileArn` takes `iam.InstanceProfile` attribute `arn` as input.
	LaunchSpecifications []SpotFleetRequestLaunchSpecification `pulumi:"launchSpecifications"`
	// Launch template configuration block. See Launch Template Configs below for more details. Conflicts with `launchSpecification`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	LaunchTemplateConfigs []SpotFleetRequestLaunchTemplateConfig `pulumi:"launchTemplateConfigs"`
	// A list of elastic load balancer names to add to the Spot fleet.
	LoadBalancers []string `pulumi:"loadBalancers"`
	// The order of the launch template overrides to use in fulfilling On-Demand capacity. the possible values are: `lowestPrice` and `prioritized`. the default is `lowestPrice`.
	OnDemandAllocationStrategy *string `pulumi:"onDemandAllocationStrategy"`
	// The maximum amount per hour for On-Demand Instances that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity.
	OnDemandMaxTotalPrice *string `pulumi:"onDemandMaxTotalPrice"`
	// The number of On-Demand units to request. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.
	OnDemandTargetCapacity *int `pulumi:"onDemandTargetCapacity"`
	// Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
	ReplaceUnhealthyInstances *bool `pulumi:"replaceUnhealthyInstances"`
	// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
	SpotMaintenanceStrategies *SpotFleetRequestSpotMaintenanceStrategies `pulumi:"spotMaintenanceStrategies"`
	// The maximum bid price per unit hour.
	SpotPrice *string `pulumi:"spotPrice"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The number of units to request. You can choose to set the
	// target capacity in terms of instances or a performance characteristic that is
	// important to your application workload, such as vCPUs, memory, or I/O.
	TargetCapacity int `pulumi:"targetCapacity"`
	// The unit for the target capacity. This can only be done with `instanceRequirements` defined
	TargetCapacityUnitType *string `pulumi:"targetCapacityUnitType"`
	// A list of `alb.TargetGroup` ARNs, for use with Application Load Balancing.
	TargetGroupArns []string `pulumi:"targetGroupArns"`
	// Indicates whether running Spot
	// instances should be terminated when the resource is deleted (and the Spot fleet request cancelled).
	// If no value is specified, the value of the `terminateInstancesWithExpiration` argument is used.
	TerminateInstancesOnDelete *string `pulumi:"terminateInstancesOnDelete"`
	// Indicates whether running Spot
	// instances should be terminated when the Spot fleet request expires.
	TerminateInstancesWithExpiration *bool `pulumi:"terminateInstancesWithExpiration"`
	// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom *string `pulumi:"validFrom"`
	// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request.
	ValidUntil *string `pulumi:"validUntil"`
	// If set, this provider will
	// wait for the Spot Request to be fulfilled, and will throw an error if the
	// timeout of 10m is reached.
	WaitForFulfillment *bool `pulumi:"waitForFulfillment"`
}

// The set of arguments for constructing a SpotFleetRequest resource.
type SpotFleetRequestArgs struct {
	// Indicates how to allocate the target capacity across
	// the Spot pools specified by the Spot fleet request. Valid values: `lowestPrice`, `diversified`, `capacityOptimized`, `capacityOptimizedPrioritized`, and `priceCapacityOptimized`. The default is
	// `lowestPrice`.
	AllocationStrategy pulumix.Input[*string]
	// Reserved.
	Context pulumix.Input[*string]
	// Indicates whether running Spot
	// instances should be terminated if the target capacity of the Spot fleet
	// request is decreased below the current size of the Spot fleet.
	ExcessCapacityTerminationPolicy pulumix.Input[*string]
	// The type of fleet request. Indicates whether the Spot Fleet only requests the target
	// capacity or also attempts to maintain it. Default is `maintain`.
	FleetType pulumix.Input[*string]
	// Grants the Spot fleet permission to terminate
	// Spot instances on your behalf when you cancel its Spot fleet request using
	// CancelSpotFleetRequests or when the Spot fleet request expires, if you set
	// terminateInstancesWithExpiration.
	IamFleetRole pulumix.Input[string]
	// Indicates whether a Spot
	// instance stops or terminates when it is interrupted. Default is
	// `terminate`.
	InstanceInterruptionBehaviour pulumix.Input[*string]
	// The number of Spot pools across which to allocate your target Spot capacity.
	// Valid only when `allocationStrategy` is set to `lowestPrice`. Spot Fleet selects
	// the cheapest Spot pools and evenly allocates your target Spot capacity across
	// the number of Spot pools that you specify.
	InstancePoolsToUseCount pulumix.Input[*int]
	// Used to define the launch configuration of the
	// spot-fleet request. Can be specified multiple times to define different bids
	// across different markets and instance types. Conflicts with `launchTemplateConfig`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	//
	// **Note**: This takes in similar but not
	// identical inputs as `ec2.Instance`.  There are limitations on
	// what you can specify. See the list of officially supported inputs in the
	// [reference documentation](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetLaunchSpecification.html). Any normal `ec2.Instance` parameter that corresponds to those inputs may be used and it have
	// a additional parameter `iamInstanceProfileArn` takes `iam.InstanceProfile` attribute `arn` as input.
	LaunchSpecifications pulumix.Input[[]*SpotFleetRequestLaunchSpecificationArgs]
	// Launch template configuration block. See Launch Template Configs below for more details. Conflicts with `launchSpecification`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	LaunchTemplateConfigs pulumix.Input[[]*SpotFleetRequestLaunchTemplateConfigArgs]
	// A list of elastic load balancer names to add to the Spot fleet.
	LoadBalancers pulumix.Input[[]string]
	// The order of the launch template overrides to use in fulfilling On-Demand capacity. the possible values are: `lowestPrice` and `prioritized`. the default is `lowestPrice`.
	OnDemandAllocationStrategy pulumix.Input[*string]
	// The maximum amount per hour for On-Demand Instances that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity.
	OnDemandMaxTotalPrice pulumix.Input[*string]
	// The number of On-Demand units to request. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.
	OnDemandTargetCapacity pulumix.Input[*int]
	// Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
	ReplaceUnhealthyInstances pulumix.Input[*bool]
	// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
	SpotMaintenanceStrategies pulumix.Input[*SpotFleetRequestSpotMaintenanceStrategiesArgs]
	// The maximum bid price per unit hour.
	SpotPrice pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The number of units to request. You can choose to set the
	// target capacity in terms of instances or a performance characteristic that is
	// important to your application workload, such as vCPUs, memory, or I/O.
	TargetCapacity pulumix.Input[int]
	// The unit for the target capacity. This can only be done with `instanceRequirements` defined
	TargetCapacityUnitType pulumix.Input[*string]
	// A list of `alb.TargetGroup` ARNs, for use with Application Load Balancing.
	TargetGroupArns pulumix.Input[[]string]
	// Indicates whether running Spot
	// instances should be terminated when the resource is deleted (and the Spot fleet request cancelled).
	// If no value is specified, the value of the `terminateInstancesWithExpiration` argument is used.
	TerminateInstancesOnDelete pulumix.Input[*string]
	// Indicates whether running Spot
	// instances should be terminated when the Spot fleet request expires.
	TerminateInstancesWithExpiration pulumix.Input[*bool]
	// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom pulumix.Input[*string]
	// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request.
	ValidUntil pulumix.Input[*string]
	// If set, this provider will
	// wait for the Spot Request to be fulfilled, and will throw an error if the
	// timeout of 10m is reached.
	WaitForFulfillment pulumix.Input[*bool]
}

func (SpotFleetRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spotFleetRequestArgs)(nil)).Elem()
}

type SpotFleetRequestOutput struct{ *pulumi.OutputState }

func (SpotFleetRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpotFleetRequest)(nil)).Elem()
}

func (o SpotFleetRequestOutput) ToSpotFleetRequestOutput() SpotFleetRequestOutput {
	return o
}

func (o SpotFleetRequestOutput) ToSpotFleetRequestOutputWithContext(ctx context.Context) SpotFleetRequestOutput {
	return o
}

func (o SpotFleetRequestOutput) ToOutput(ctx context.Context) pulumix.Output[SpotFleetRequest] {
	return pulumix.Output[SpotFleetRequest]{
		OutputState: o.OutputState,
	}
}

// Indicates how to allocate the target capacity across
// the Spot pools specified by the Spot fleet request. Valid values: `lowestPrice`, `diversified`, `capacityOptimized`, `capacityOptimizedPrioritized`, and `priceCapacityOptimized`. The default is
// `lowestPrice`.
func (o SpotFleetRequestOutput) AllocationStrategy() pulumix.Output[*string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*string] { return v.AllocationStrategy })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o SpotFleetRequestOutput) ClientToken() pulumix.Output[string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[string] { return v.ClientToken })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Reserved.
func (o SpotFleetRequestOutput) Context() pulumix.Output[*string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*string] { return v.Context })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Indicates whether running Spot
// instances should be terminated if the target capacity of the Spot fleet
// request is decreased below the current size of the Spot fleet.
func (o SpotFleetRequestOutput) ExcessCapacityTerminationPolicy() pulumix.Output[*string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*string] { return v.ExcessCapacityTerminationPolicy })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The type of fleet request. Indicates whether the Spot Fleet only requests the target
// capacity or also attempts to maintain it. Default is `maintain`.
func (o SpotFleetRequestOutput) FleetType() pulumix.Output[*string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*string] { return v.FleetType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Grants the Spot fleet permission to terminate
// Spot instances on your behalf when you cancel its Spot fleet request using
// CancelSpotFleetRequests or when the Spot fleet request expires, if you set
// terminateInstancesWithExpiration.
func (o SpotFleetRequestOutput) IamFleetRole() pulumix.Output[string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[string] { return v.IamFleetRole })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether a Spot
// instance stops or terminates when it is interrupted. Default is
// `terminate`.
func (o SpotFleetRequestOutput) InstanceInterruptionBehaviour() pulumix.Output[*string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*string] { return v.InstanceInterruptionBehaviour })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The number of Spot pools across which to allocate your target Spot capacity.
// Valid only when `allocationStrategy` is set to `lowestPrice`. Spot Fleet selects
// the cheapest Spot pools and evenly allocates your target Spot capacity across
// the number of Spot pools that you specify.
func (o SpotFleetRequestOutput) InstancePoolsToUseCount() pulumix.Output[*int] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*int] { return v.InstancePoolsToUseCount })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Used to define the launch configuration of the
// spot-fleet request. Can be specified multiple times to define different bids
// across different markets and instance types. Conflicts with `launchTemplateConfig`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
//
// **Note**: This takes in similar but not
// identical inputs as `ec2.Instance`.  There are limitations on
// what you can specify. See the list of officially supported inputs in the
// [reference documentation](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetLaunchSpecification.html). Any normal `ec2.Instance` parameter that corresponds to those inputs may be used and it have
// a additional parameter `iamInstanceProfileArn` takes `iam.InstanceProfile` attribute `arn` as input.
func (o SpotFleetRequestOutput) LaunchSpecifications() pulumix.GArrayOutput[SpotFleetRequestLaunchSpecification, SpotFleetRequestLaunchSpecificationOutput] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.GArrayOutput[SpotFleetRequestLaunchSpecification, SpotFleetRequestLaunchSpecificationOutput] {
		return v.LaunchSpecifications
	})
	unwrapped := pulumix.Flatten[[]SpotFleetRequestLaunchSpecification, pulumix.GArrayOutput[SpotFleetRequestLaunchSpecification, SpotFleetRequestLaunchSpecificationOutput]](value)
	return pulumix.GArrayOutput[SpotFleetRequestLaunchSpecification, SpotFleetRequestLaunchSpecificationOutput]{OutputState: unwrapped.OutputState}
}

// Launch template configuration block. See Launch Template Configs below for more details. Conflicts with `launchSpecification`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
func (o SpotFleetRequestOutput) LaunchTemplateConfigs() pulumix.GArrayOutput[SpotFleetRequestLaunchTemplateConfig, SpotFleetRequestLaunchTemplateConfigOutput] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.GArrayOutput[SpotFleetRequestLaunchTemplateConfig, SpotFleetRequestLaunchTemplateConfigOutput] {
		return v.LaunchTemplateConfigs
	})
	unwrapped := pulumix.Flatten[[]SpotFleetRequestLaunchTemplateConfig, pulumix.GArrayOutput[SpotFleetRequestLaunchTemplateConfig, SpotFleetRequestLaunchTemplateConfigOutput]](value)
	return pulumix.GArrayOutput[SpotFleetRequestLaunchTemplateConfig, SpotFleetRequestLaunchTemplateConfigOutput]{OutputState: unwrapped.OutputState}
}

// A list of elastic load balancer names to add to the Spot fleet.
func (o SpotFleetRequestOutput) LoadBalancers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.ArrayOutput[string] { return v.LoadBalancers })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The order of the launch template overrides to use in fulfilling On-Demand capacity. the possible values are: `lowestPrice` and `prioritized`. the default is `lowestPrice`.
func (o SpotFleetRequestOutput) OnDemandAllocationStrategy() pulumix.Output[*string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*string] { return v.OnDemandAllocationStrategy })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The maximum amount per hour for On-Demand Instances that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity.
func (o SpotFleetRequestOutput) OnDemandMaxTotalPrice() pulumix.Output[*string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*string] { return v.OnDemandMaxTotalPrice })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The number of On-Demand units to request. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.
func (o SpotFleetRequestOutput) OnDemandTargetCapacity() pulumix.Output[*int] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*int] { return v.OnDemandTargetCapacity })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
func (o SpotFleetRequestOutput) ReplaceUnhealthyInstances() pulumix.Output[*bool] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*bool] { return v.ReplaceUnhealthyInstances })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
func (o SpotFleetRequestOutput) SpotMaintenanceStrategies() pulumix.GPtrOutput[SpotFleetRequestSpotMaintenanceStrategies, SpotFleetRequestSpotMaintenanceStrategiesOutput] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.GPtrOutput[SpotFleetRequestSpotMaintenanceStrategies, SpotFleetRequestSpotMaintenanceStrategiesOutput] {
		return v.SpotMaintenanceStrategies
	})
	unwrapped := pulumix.Flatten[*SpotFleetRequestSpotMaintenanceStrategies, pulumix.GPtrOutput[SpotFleetRequestSpotMaintenanceStrategies, SpotFleetRequestSpotMaintenanceStrategiesOutput]](value)
	return pulumix.GPtrOutput[SpotFleetRequestSpotMaintenanceStrategies, SpotFleetRequestSpotMaintenanceStrategiesOutput]{OutputState: unwrapped.OutputState}
}

// The maximum bid price per unit hour.
func (o SpotFleetRequestOutput) SpotPrice() pulumix.Output[*string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*string] { return v.SpotPrice })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The state of the Spot fleet request.
func (o SpotFleetRequestOutput) SpotRequestState() pulumix.Output[string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[string] { return v.SpotRequestState })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SpotFleetRequestOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SpotFleetRequestOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The number of units to request. You can choose to set the
// target capacity in terms of instances or a performance characteristic that is
// important to your application workload, such as vCPUs, memory, or I/O.
func (o SpotFleetRequestOutput) TargetCapacity() pulumix.Output[int] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[int] { return v.TargetCapacity })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The unit for the target capacity. This can only be done with `instanceRequirements` defined
func (o SpotFleetRequestOutput) TargetCapacityUnitType() pulumix.Output[*string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*string] { return v.TargetCapacityUnitType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A list of `alb.TargetGroup` ARNs, for use with Application Load Balancing.
func (o SpotFleetRequestOutput) TargetGroupArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.ArrayOutput[string] { return v.TargetGroupArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Indicates whether running Spot
// instances should be terminated when the resource is deleted (and the Spot fleet request cancelled).
// If no value is specified, the value of the `terminateInstancesWithExpiration` argument is used.
func (o SpotFleetRequestOutput) TerminateInstancesOnDelete() pulumix.Output[*string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*string] { return v.TerminateInstancesOnDelete })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Indicates whether running Spot
// instances should be terminated when the Spot fleet request expires.
func (o SpotFleetRequestOutput) TerminateInstancesWithExpiration() pulumix.Output[*bool] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*bool] { return v.TerminateInstancesWithExpiration })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
func (o SpotFleetRequestOutput) ValidFrom() pulumix.Output[*string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*string] { return v.ValidFrom })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request.
func (o SpotFleetRequestOutput) ValidUntil() pulumix.Output[*string] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*string] { return v.ValidUntil })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// If set, this provider will
// wait for the Spot Request to be fulfilled, and will throw an error if the
// timeout of 10m is reached.
func (o SpotFleetRequestOutput) WaitForFulfillment() pulumix.Output[*bool] {
	value := pulumix.Apply[SpotFleetRequest](o, func(v SpotFleetRequest) pulumix.Output[*bool] { return v.WaitForFulfillment })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(SpotFleetRequestOutput{})
}
