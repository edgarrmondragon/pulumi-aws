// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codepipeline

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type CustomActionTypeConfigurationProperty struct {
	// The description of the action configuration property.
	Description *string `pulumi:"description"`
	// Whether the configuration property is a key.
	Key bool `pulumi:"key"`
	// The name of the action configuration property.
	Name string `pulumi:"name"`
	// Indicates that the property will be used in conjunction with PollForJobs.
	Queryable *bool `pulumi:"queryable"`
	// Whether the configuration property is a required value.
	Required bool `pulumi:"required"`
	// Whether the configuration property is secret.
	Secret bool `pulumi:"secret"`
	// The type of the configuration property. Valid values: `String`, `Number`, `Boolean`
	Type *string `pulumi:"type"`
}

type CustomActionTypeConfigurationPropertyArgs struct {
	// The description of the action configuration property.
	Description pulumix.Input[*string] `pulumi:"description"`
	// Whether the configuration property is a key.
	Key pulumix.Input[bool] `pulumi:"key"`
	// The name of the action configuration property.
	Name pulumix.Input[string] `pulumi:"name"`
	// Indicates that the property will be used in conjunction with PollForJobs.
	Queryable pulumix.Input[*bool] `pulumi:"queryable"`
	// Whether the configuration property is a required value.
	Required pulumix.Input[bool] `pulumi:"required"`
	// Whether the configuration property is secret.
	Secret pulumix.Input[bool] `pulumi:"secret"`
	// The type of the configuration property. Valid values: `String`, `Number`, `Boolean`
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (CustomActionTypeConfigurationPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActionTypeConfigurationProperty)(nil)).Elem()
}

func (i CustomActionTypeConfigurationPropertyArgs) ToCustomActionTypeConfigurationPropertyOutput() CustomActionTypeConfigurationPropertyOutput {
	return i.ToCustomActionTypeConfigurationPropertyOutputWithContext(context.Background())
}

func (i CustomActionTypeConfigurationPropertyArgs) ToCustomActionTypeConfigurationPropertyOutputWithContext(ctx context.Context) CustomActionTypeConfigurationPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomActionTypeConfigurationPropertyOutput)
}

func (i *CustomActionTypeConfigurationPropertyArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomActionTypeConfigurationPropertyArgs] {
	return pulumix.Val(i)
}

type CustomActionTypeConfigurationPropertyOutput struct{ *pulumi.OutputState }

func (CustomActionTypeConfigurationPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActionTypeConfigurationProperty)(nil)).Elem()
}

func (o CustomActionTypeConfigurationPropertyOutput) ToCustomActionTypeConfigurationPropertyOutput() CustomActionTypeConfigurationPropertyOutput {
	return o
}

func (o CustomActionTypeConfigurationPropertyOutput) ToCustomActionTypeConfigurationPropertyOutputWithContext(ctx context.Context) CustomActionTypeConfigurationPropertyOutput {
	return o
}

func (o CustomActionTypeConfigurationPropertyOutput) ToOutput(ctx context.Context) pulumix.Output[CustomActionTypeConfigurationProperty] {
	return pulumix.Output[CustomActionTypeConfigurationProperty]{
		OutputState: o.OutputState,
	}
}

// The description of the action configuration property.
func (o CustomActionTypeConfigurationPropertyOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[CustomActionTypeConfigurationProperty](o, func(v CustomActionTypeConfigurationProperty) *string { return v.Description })
}

// Whether the configuration property is a key.
func (o CustomActionTypeConfigurationPropertyOutput) Key() pulumix.Output[bool] {
	return pulumix.Apply[CustomActionTypeConfigurationProperty](o, func(v CustomActionTypeConfigurationProperty) bool { return v.Key })
}

// The name of the action configuration property.
func (o CustomActionTypeConfigurationPropertyOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[CustomActionTypeConfigurationProperty](o, func(v CustomActionTypeConfigurationProperty) string { return v.Name })
}

// Indicates that the property will be used in conjunction with PollForJobs.
func (o CustomActionTypeConfigurationPropertyOutput) Queryable() pulumix.Output[*bool] {
	return pulumix.Apply[CustomActionTypeConfigurationProperty](o, func(v CustomActionTypeConfigurationProperty) *bool { return v.Queryable })
}

// Whether the configuration property is a required value.
func (o CustomActionTypeConfigurationPropertyOutput) Required() pulumix.Output[bool] {
	return pulumix.Apply[CustomActionTypeConfigurationProperty](o, func(v CustomActionTypeConfigurationProperty) bool { return v.Required })
}

// Whether the configuration property is secret.
func (o CustomActionTypeConfigurationPropertyOutput) Secret() pulumix.Output[bool] {
	return pulumix.Apply[CustomActionTypeConfigurationProperty](o, func(v CustomActionTypeConfigurationProperty) bool { return v.Secret })
}

// The type of the configuration property. Valid values: `String`, `Number`, `Boolean`
func (o CustomActionTypeConfigurationPropertyOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[CustomActionTypeConfigurationProperty](o, func(v CustomActionTypeConfigurationProperty) *string { return v.Type })
}

type CustomActionTypeInputArtifactDetails struct {
	// The maximum number of artifacts allowed for the action type. Min: 0, Max: 5
	MaximumCount int `pulumi:"maximumCount"`
	// The minimum number of artifacts allowed for the action type. Min: 0, Max: 5
	MinimumCount int `pulumi:"minimumCount"`
}

type CustomActionTypeInputArtifactDetailsArgs struct {
	// The maximum number of artifacts allowed for the action type. Min: 0, Max: 5
	MaximumCount pulumix.Input[int] `pulumi:"maximumCount"`
	// The minimum number of artifacts allowed for the action type. Min: 0, Max: 5
	MinimumCount pulumix.Input[int] `pulumi:"minimumCount"`
}

func (CustomActionTypeInputArtifactDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActionTypeInputArtifactDetails)(nil)).Elem()
}

func (i CustomActionTypeInputArtifactDetailsArgs) ToCustomActionTypeInputArtifactDetailsOutput() CustomActionTypeInputArtifactDetailsOutput {
	return i.ToCustomActionTypeInputArtifactDetailsOutputWithContext(context.Background())
}

func (i CustomActionTypeInputArtifactDetailsArgs) ToCustomActionTypeInputArtifactDetailsOutputWithContext(ctx context.Context) CustomActionTypeInputArtifactDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomActionTypeInputArtifactDetailsOutput)
}

func (i *CustomActionTypeInputArtifactDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomActionTypeInputArtifactDetailsArgs] {
	return pulumix.Val(i)
}

type CustomActionTypeInputArtifactDetailsOutput struct{ *pulumi.OutputState }

func (CustomActionTypeInputArtifactDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActionTypeInputArtifactDetails)(nil)).Elem()
}

func (o CustomActionTypeInputArtifactDetailsOutput) ToCustomActionTypeInputArtifactDetailsOutput() CustomActionTypeInputArtifactDetailsOutput {
	return o
}

func (o CustomActionTypeInputArtifactDetailsOutput) ToCustomActionTypeInputArtifactDetailsOutputWithContext(ctx context.Context) CustomActionTypeInputArtifactDetailsOutput {
	return o
}

func (o CustomActionTypeInputArtifactDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[CustomActionTypeInputArtifactDetails] {
	return pulumix.Output[CustomActionTypeInputArtifactDetails]{
		OutputState: o.OutputState,
	}
}

// The maximum number of artifacts allowed for the action type. Min: 0, Max: 5
func (o CustomActionTypeInputArtifactDetailsOutput) MaximumCount() pulumix.Output[int] {
	return pulumix.Apply[CustomActionTypeInputArtifactDetails](o, func(v CustomActionTypeInputArtifactDetails) int { return v.MaximumCount })
}

// The minimum number of artifacts allowed for the action type. Min: 0, Max: 5
func (o CustomActionTypeInputArtifactDetailsOutput) MinimumCount() pulumix.Output[int] {
	return pulumix.Apply[CustomActionTypeInputArtifactDetails](o, func(v CustomActionTypeInputArtifactDetails) int { return v.MinimumCount })
}

type CustomActionTypeOutputArtifactDetails struct {
	// The maximum number of artifacts allowed for the action type. Min: 0, Max: 5
	MaximumCount int `pulumi:"maximumCount"`
	// The minimum number of artifacts allowed for the action type. Min: 0, Max: 5
	MinimumCount int `pulumi:"minimumCount"`
}

type CustomActionTypeOutputArtifactDetailsArgs struct {
	// The maximum number of artifacts allowed for the action type. Min: 0, Max: 5
	MaximumCount pulumix.Input[int] `pulumi:"maximumCount"`
	// The minimum number of artifacts allowed for the action type. Min: 0, Max: 5
	MinimumCount pulumix.Input[int] `pulumi:"minimumCount"`
}

func (CustomActionTypeOutputArtifactDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActionTypeOutputArtifactDetails)(nil)).Elem()
}

func (i CustomActionTypeOutputArtifactDetailsArgs) ToCustomActionTypeOutputArtifactDetailsOutput() CustomActionTypeOutputArtifactDetailsOutput {
	return i.ToCustomActionTypeOutputArtifactDetailsOutputWithContext(context.Background())
}

func (i CustomActionTypeOutputArtifactDetailsArgs) ToCustomActionTypeOutputArtifactDetailsOutputWithContext(ctx context.Context) CustomActionTypeOutputArtifactDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomActionTypeOutputArtifactDetailsOutput)
}

func (i *CustomActionTypeOutputArtifactDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomActionTypeOutputArtifactDetailsArgs] {
	return pulumix.Val(i)
}

type CustomActionTypeOutputArtifactDetailsOutput struct{ *pulumi.OutputState }

func (CustomActionTypeOutputArtifactDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActionTypeOutputArtifactDetails)(nil)).Elem()
}

func (o CustomActionTypeOutputArtifactDetailsOutput) ToCustomActionTypeOutputArtifactDetailsOutput() CustomActionTypeOutputArtifactDetailsOutput {
	return o
}

func (o CustomActionTypeOutputArtifactDetailsOutput) ToCustomActionTypeOutputArtifactDetailsOutputWithContext(ctx context.Context) CustomActionTypeOutputArtifactDetailsOutput {
	return o
}

func (o CustomActionTypeOutputArtifactDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[CustomActionTypeOutputArtifactDetails] {
	return pulumix.Output[CustomActionTypeOutputArtifactDetails]{
		OutputState: o.OutputState,
	}
}

// The maximum number of artifacts allowed for the action type. Min: 0, Max: 5
func (o CustomActionTypeOutputArtifactDetailsOutput) MaximumCount() pulumix.Output[int] {
	return pulumix.Apply[CustomActionTypeOutputArtifactDetails](o, func(v CustomActionTypeOutputArtifactDetails) int { return v.MaximumCount })
}

// The minimum number of artifacts allowed for the action type. Min: 0, Max: 5
func (o CustomActionTypeOutputArtifactDetailsOutput) MinimumCount() pulumix.Output[int] {
	return pulumix.Apply[CustomActionTypeOutputArtifactDetails](o, func(v CustomActionTypeOutputArtifactDetails) int { return v.MinimumCount })
}

type CustomActionTypeSettings struct {
	// The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system.
	EntityUrlTemplate *string `pulumi:"entityUrlTemplate"`
	// The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system.
	ExecutionUrlTemplate *string `pulumi:"executionUrlTemplate"`
	// The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
	RevisionUrlTemplate *string `pulumi:"revisionUrlTemplate"`
	// The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
	ThirdPartyConfigurationUrl *string `pulumi:"thirdPartyConfigurationUrl"`
}

type CustomActionTypeSettingsArgs struct {
	// The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system.
	EntityUrlTemplate pulumix.Input[*string] `pulumi:"entityUrlTemplate"`
	// The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system.
	ExecutionUrlTemplate pulumix.Input[*string] `pulumi:"executionUrlTemplate"`
	// The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
	RevisionUrlTemplate pulumix.Input[*string] `pulumi:"revisionUrlTemplate"`
	// The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
	ThirdPartyConfigurationUrl pulumix.Input[*string] `pulumi:"thirdPartyConfigurationUrl"`
}

func (CustomActionTypeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActionTypeSettings)(nil)).Elem()
}

func (i CustomActionTypeSettingsArgs) ToCustomActionTypeSettingsOutput() CustomActionTypeSettingsOutput {
	return i.ToCustomActionTypeSettingsOutputWithContext(context.Background())
}

func (i CustomActionTypeSettingsArgs) ToCustomActionTypeSettingsOutputWithContext(ctx context.Context) CustomActionTypeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomActionTypeSettingsOutput)
}

func (i *CustomActionTypeSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomActionTypeSettingsArgs] {
	return pulumix.Val(i)
}

type CustomActionTypeSettingsOutput struct{ *pulumi.OutputState }

func (CustomActionTypeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActionTypeSettings)(nil)).Elem()
}

func (o CustomActionTypeSettingsOutput) ToCustomActionTypeSettingsOutput() CustomActionTypeSettingsOutput {
	return o
}

func (o CustomActionTypeSettingsOutput) ToCustomActionTypeSettingsOutputWithContext(ctx context.Context) CustomActionTypeSettingsOutput {
	return o
}

func (o CustomActionTypeSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[CustomActionTypeSettings] {
	return pulumix.Output[CustomActionTypeSettings]{
		OutputState: o.OutputState,
	}
}

// The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system.
func (o CustomActionTypeSettingsOutput) EntityUrlTemplate() pulumix.Output[*string] {
	return pulumix.Apply[CustomActionTypeSettings](o, func(v CustomActionTypeSettings) *string { return v.EntityUrlTemplate })
}

// The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system.
func (o CustomActionTypeSettingsOutput) ExecutionUrlTemplate() pulumix.Output[*string] {
	return pulumix.Apply[CustomActionTypeSettings](o, func(v CustomActionTypeSettings) *string { return v.ExecutionUrlTemplate })
}

// The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
func (o CustomActionTypeSettingsOutput) RevisionUrlTemplate() pulumix.Output[*string] {
	return pulumix.Apply[CustomActionTypeSettings](o, func(v CustomActionTypeSettings) *string { return v.RevisionUrlTemplate })
}

// The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
func (o CustomActionTypeSettingsOutput) ThirdPartyConfigurationUrl() pulumix.Output[*string] {
	return pulumix.Apply[CustomActionTypeSettings](o, func(v CustomActionTypeSettings) *string { return v.ThirdPartyConfigurationUrl })
}

type PipelineArtifactStore struct {
	// The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An `encryptionKey` block is documented below.
	EncryptionKey *PipelineArtifactStoreEncryptionKey `pulumi:"encryptionKey"`
	// The location where AWS CodePipeline stores artifacts for a pipeline; currently only `S3` is supported.
	Location string `pulumi:"location"`
	// The region where the artifact store is located. Required for a cross-region CodePipeline, do not provide for a single-region CodePipeline.
	Region *string `pulumi:"region"`
	// The type of the artifact store, such as Amazon S3
	Type string `pulumi:"type"`
}

type PipelineArtifactStoreArgs struct {
	// The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An `encryptionKey` block is documented below.
	EncryptionKey pulumix.Input[*PipelineArtifactStoreEncryptionKeyArgs] `pulumi:"encryptionKey"`
	// The location where AWS CodePipeline stores artifacts for a pipeline; currently only `S3` is supported.
	Location pulumix.Input[string] `pulumi:"location"`
	// The region where the artifact store is located. Required for a cross-region CodePipeline, do not provide for a single-region CodePipeline.
	Region pulumix.Input[*string] `pulumi:"region"`
	// The type of the artifact store, such as Amazon S3
	Type pulumix.Input[string] `pulumi:"type"`
}

func (PipelineArtifactStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineArtifactStore)(nil)).Elem()
}

func (i PipelineArtifactStoreArgs) ToPipelineArtifactStoreOutput() PipelineArtifactStoreOutput {
	return i.ToPipelineArtifactStoreOutputWithContext(context.Background())
}

func (i PipelineArtifactStoreArgs) ToPipelineArtifactStoreOutputWithContext(ctx context.Context) PipelineArtifactStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArtifactStoreOutput)
}

func (i *PipelineArtifactStoreArgs) ToOutput(ctx context.Context) pulumix.Output[*PipelineArtifactStoreArgs] {
	return pulumix.Val(i)
}

type PipelineArtifactStoreOutput struct{ *pulumi.OutputState }

func (PipelineArtifactStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineArtifactStore)(nil)).Elem()
}

func (o PipelineArtifactStoreOutput) ToPipelineArtifactStoreOutput() PipelineArtifactStoreOutput {
	return o
}

func (o PipelineArtifactStoreOutput) ToPipelineArtifactStoreOutputWithContext(ctx context.Context) PipelineArtifactStoreOutput {
	return o
}

func (o PipelineArtifactStoreOutput) ToOutput(ctx context.Context) pulumix.Output[PipelineArtifactStore] {
	return pulumix.Output[PipelineArtifactStore]{
		OutputState: o.OutputState,
	}
}

// The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An `encryptionKey` block is documented below.
func (o PipelineArtifactStoreOutput) EncryptionKey() pulumix.GPtrOutput[PipelineArtifactStoreEncryptionKey, PipelineArtifactStoreEncryptionKeyOutput] {
	value := pulumix.Apply[PipelineArtifactStore](o, func(v PipelineArtifactStore) *PipelineArtifactStoreEncryptionKey { return v.EncryptionKey })
	return pulumix.GPtrOutput[PipelineArtifactStoreEncryptionKey, PipelineArtifactStoreEncryptionKeyOutput]{OutputState: value.OutputState}
}

// The location where AWS CodePipeline stores artifacts for a pipeline; currently only `S3` is supported.
func (o PipelineArtifactStoreOutput) Location() pulumix.Output[string] {
	return pulumix.Apply[PipelineArtifactStore](o, func(v PipelineArtifactStore) string { return v.Location })
}

// The region where the artifact store is located. Required for a cross-region CodePipeline, do not provide for a single-region CodePipeline.
func (o PipelineArtifactStoreOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[PipelineArtifactStore](o, func(v PipelineArtifactStore) *string { return v.Region })
}

// The type of the artifact store, such as Amazon S3
func (o PipelineArtifactStoreOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[PipelineArtifactStore](o, func(v PipelineArtifactStore) string { return v.Type })
}

type PipelineArtifactStoreEncryptionKey struct {
	// The KMS key ARN or ID
	Id string `pulumi:"id"`
	// The type of key; currently only `KMS` is supported
	Type string `pulumi:"type"`
}

type PipelineArtifactStoreEncryptionKeyArgs struct {
	// The KMS key ARN or ID
	Id pulumix.Input[string] `pulumi:"id"`
	// The type of key; currently only `KMS` is supported
	Type pulumix.Input[string] `pulumi:"type"`
}

func (PipelineArtifactStoreEncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineArtifactStoreEncryptionKey)(nil)).Elem()
}

func (i PipelineArtifactStoreEncryptionKeyArgs) ToPipelineArtifactStoreEncryptionKeyOutput() PipelineArtifactStoreEncryptionKeyOutput {
	return i.ToPipelineArtifactStoreEncryptionKeyOutputWithContext(context.Background())
}

func (i PipelineArtifactStoreEncryptionKeyArgs) ToPipelineArtifactStoreEncryptionKeyOutputWithContext(ctx context.Context) PipelineArtifactStoreEncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArtifactStoreEncryptionKeyOutput)
}

func (i *PipelineArtifactStoreEncryptionKeyArgs) ToOutput(ctx context.Context) pulumix.Output[*PipelineArtifactStoreEncryptionKeyArgs] {
	return pulumix.Val(i)
}

type PipelineArtifactStoreEncryptionKeyOutput struct{ *pulumi.OutputState }

func (PipelineArtifactStoreEncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineArtifactStoreEncryptionKey)(nil)).Elem()
}

func (o PipelineArtifactStoreEncryptionKeyOutput) ToPipelineArtifactStoreEncryptionKeyOutput() PipelineArtifactStoreEncryptionKeyOutput {
	return o
}

func (o PipelineArtifactStoreEncryptionKeyOutput) ToPipelineArtifactStoreEncryptionKeyOutputWithContext(ctx context.Context) PipelineArtifactStoreEncryptionKeyOutput {
	return o
}

func (o PipelineArtifactStoreEncryptionKeyOutput) ToOutput(ctx context.Context) pulumix.Output[PipelineArtifactStoreEncryptionKey] {
	return pulumix.Output[PipelineArtifactStoreEncryptionKey]{
		OutputState: o.OutputState,
	}
}

// The KMS key ARN or ID
func (o PipelineArtifactStoreEncryptionKeyOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[PipelineArtifactStoreEncryptionKey](o, func(v PipelineArtifactStoreEncryptionKey) string { return v.Id })
}

// The type of key; currently only `KMS` is supported
func (o PipelineArtifactStoreEncryptionKeyOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[PipelineArtifactStoreEncryptionKey](o, func(v PipelineArtifactStoreEncryptionKey) string { return v.Type })
}

type PipelineStage struct {
	// The action(s) to include in the stage. Defined as an `action` block below
	Actions []PipelineStageAction `pulumi:"actions"`
	// The name of the stage.
	Name string `pulumi:"name"`
}

type PipelineStageArgs struct {
	// The action(s) to include in the stage. Defined as an `action` block below
	Actions pulumix.Input[[]*PipelineStageActionArgs] `pulumi:"actions"`
	// The name of the stage.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (PipelineStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineStage)(nil)).Elem()
}

func (i PipelineStageArgs) ToPipelineStageOutput() PipelineStageOutput {
	return i.ToPipelineStageOutputWithContext(context.Background())
}

func (i PipelineStageArgs) ToPipelineStageOutputWithContext(ctx context.Context) PipelineStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineStageOutput)
}

func (i *PipelineStageArgs) ToOutput(ctx context.Context) pulumix.Output[*PipelineStageArgs] {
	return pulumix.Val(i)
}

type PipelineStageOutput struct{ *pulumi.OutputState }

func (PipelineStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineStage)(nil)).Elem()
}

func (o PipelineStageOutput) ToPipelineStageOutput() PipelineStageOutput {
	return o
}

func (o PipelineStageOutput) ToPipelineStageOutputWithContext(ctx context.Context) PipelineStageOutput {
	return o
}

func (o PipelineStageOutput) ToOutput(ctx context.Context) pulumix.Output[PipelineStage] {
	return pulumix.Output[PipelineStage]{
		OutputState: o.OutputState,
	}
}

// The action(s) to include in the stage. Defined as an `action` block below
func (o PipelineStageOutput) Actions() pulumix.GArrayOutput[PipelineStageAction, PipelineStageActionOutput] {
	value := pulumix.Apply[PipelineStage](o, func(v PipelineStage) []PipelineStageAction { return v.Actions })
	return pulumix.GArrayOutput[PipelineStageAction, PipelineStageActionOutput]{OutputState: value.OutputState}
}

// The name of the stage.
func (o PipelineStageOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[PipelineStage](o, func(v PipelineStage) string { return v.Name })
}

type PipelineStageAction struct {
	// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are `Approval`, `Build`, `Deploy`, `Invoke`, `Source` and `Test`.
	Category string `pulumi:"category"`
	// A map of the action declaration's configuration. Configurations options for action types and providers can be found in the [Pipeline Structure Reference](http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements) and [Action Structure Reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) documentation.
	Configuration map[string]string `pulumi:"configuration"`
	// A list of artifact names to be worked on.
	InputArtifacts []string `pulumi:"inputArtifacts"`
	// The action declaration's name.
	Name string `pulumi:"name"`
	// The namespace all output variables will be accessed from.
	//
	// > **Note:** The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.
	Namespace *string `pulumi:"namespace"`
	// A list of artifact names to output. Output artifact names must be unique within a pipeline.
	OutputArtifacts []string `pulumi:"outputArtifacts"`
	// The creator of the action being called. Possible values are `AWS`, `Custom` and `ThirdParty`.
	Owner string `pulumi:"owner"`
	// The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the [Action Structure Reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) documentation.
	Provider string `pulumi:"provider"`
	// The region in which to run the action.
	Region *string `pulumi:"region"`
	// The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
	RoleArn *string `pulumi:"roleArn"`
	// The order in which actions are run.
	RunOrder *int `pulumi:"runOrder"`
	// A string that identifies the action type.
	Version string `pulumi:"version"`
}

type PipelineStageActionArgs struct {
	// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are `Approval`, `Build`, `Deploy`, `Invoke`, `Source` and `Test`.
	Category pulumix.Input[string] `pulumi:"category"`
	// A map of the action declaration's configuration. Configurations options for action types and providers can be found in the [Pipeline Structure Reference](http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements) and [Action Structure Reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) documentation.
	Configuration pulumix.Input[map[string]string] `pulumi:"configuration"`
	// A list of artifact names to be worked on.
	InputArtifacts pulumix.Input[[]string] `pulumi:"inputArtifacts"`
	// The action declaration's name.
	Name pulumix.Input[string] `pulumi:"name"`
	// The namespace all output variables will be accessed from.
	//
	// > **Note:** The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.
	Namespace pulumix.Input[*string] `pulumi:"namespace"`
	// A list of artifact names to output. Output artifact names must be unique within a pipeline.
	OutputArtifacts pulumix.Input[[]string] `pulumi:"outputArtifacts"`
	// The creator of the action being called. Possible values are `AWS`, `Custom` and `ThirdParty`.
	Owner pulumix.Input[string] `pulumi:"owner"`
	// The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the [Action Structure Reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) documentation.
	Provider pulumix.Input[string] `pulumi:"provider"`
	// The region in which to run the action.
	Region pulumix.Input[*string] `pulumi:"region"`
	// The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
	RoleArn pulumix.Input[*string] `pulumi:"roleArn"`
	// The order in which actions are run.
	RunOrder pulumix.Input[*int] `pulumi:"runOrder"`
	// A string that identifies the action type.
	Version pulumix.Input[string] `pulumi:"version"`
}

func (PipelineStageActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineStageAction)(nil)).Elem()
}

func (i PipelineStageActionArgs) ToPipelineStageActionOutput() PipelineStageActionOutput {
	return i.ToPipelineStageActionOutputWithContext(context.Background())
}

func (i PipelineStageActionArgs) ToPipelineStageActionOutputWithContext(ctx context.Context) PipelineStageActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineStageActionOutput)
}

func (i *PipelineStageActionArgs) ToOutput(ctx context.Context) pulumix.Output[*PipelineStageActionArgs] {
	return pulumix.Val(i)
}

type PipelineStageActionOutput struct{ *pulumi.OutputState }

func (PipelineStageActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineStageAction)(nil)).Elem()
}

func (o PipelineStageActionOutput) ToPipelineStageActionOutput() PipelineStageActionOutput {
	return o
}

func (o PipelineStageActionOutput) ToPipelineStageActionOutputWithContext(ctx context.Context) PipelineStageActionOutput {
	return o
}

func (o PipelineStageActionOutput) ToOutput(ctx context.Context) pulumix.Output[PipelineStageAction] {
	return pulumix.Output[PipelineStageAction]{
		OutputState: o.OutputState,
	}
}

// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are `Approval`, `Build`, `Deploy`, `Invoke`, `Source` and `Test`.
func (o PipelineStageActionOutput) Category() pulumix.Output[string] {
	return pulumix.Apply[PipelineStageAction](o, func(v PipelineStageAction) string { return v.Category })
}

// A map of the action declaration's configuration. Configurations options for action types and providers can be found in the [Pipeline Structure Reference](http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements) and [Action Structure Reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) documentation.
func (o PipelineStageActionOutput) Configuration() pulumix.MapOutput[string] {
	value := pulumix.Apply[PipelineStageAction](o, func(v PipelineStageAction) map[string]string { return v.Configuration })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// A list of artifact names to be worked on.
func (o PipelineStageActionOutput) InputArtifacts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PipelineStageAction](o, func(v PipelineStageAction) []string { return v.InputArtifacts })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The action declaration's name.
func (o PipelineStageActionOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[PipelineStageAction](o, func(v PipelineStageAction) string { return v.Name })
}

// The namespace all output variables will be accessed from.
//
// > **Note:** The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.
func (o PipelineStageActionOutput) Namespace() pulumix.Output[*string] {
	return pulumix.Apply[PipelineStageAction](o, func(v PipelineStageAction) *string { return v.Namespace })
}

// A list of artifact names to output. Output artifact names must be unique within a pipeline.
func (o PipelineStageActionOutput) OutputArtifacts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PipelineStageAction](o, func(v PipelineStageAction) []string { return v.OutputArtifacts })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The creator of the action being called. Possible values are `AWS`, `Custom` and `ThirdParty`.
func (o PipelineStageActionOutput) Owner() pulumix.Output[string] {
	return pulumix.Apply[PipelineStageAction](o, func(v PipelineStageAction) string { return v.Owner })
}

// The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the [Action Structure Reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) documentation.
func (o PipelineStageActionOutput) Provider() pulumix.Output[string] {
	return pulumix.Apply[PipelineStageAction](o, func(v PipelineStageAction) string { return v.Provider })
}

// The region in which to run the action.
func (o PipelineStageActionOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[PipelineStageAction](o, func(v PipelineStageAction) *string { return v.Region })
}

// The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
func (o PipelineStageActionOutput) RoleArn() pulumix.Output[*string] {
	return pulumix.Apply[PipelineStageAction](o, func(v PipelineStageAction) *string { return v.RoleArn })
}

// The order in which actions are run.
func (o PipelineStageActionOutput) RunOrder() pulumix.Output[*int] {
	return pulumix.Apply[PipelineStageAction](o, func(v PipelineStageAction) *int { return v.RunOrder })
}

// A string that identifies the action type.
func (o PipelineStageActionOutput) Version() pulumix.Output[string] {
	return pulumix.Apply[PipelineStageAction](o, func(v PipelineStageAction) string { return v.Version })
}

type WebhookAuthenticationConfiguration struct {
	// A valid CIDR block for `IP` filtering. Required for `IP`.
	AllowedIpRange *string `pulumi:"allowedIpRange"`
	// The shared secret for the GitHub repository webhook. Set this as `secret` in your `githubRepositoryWebhook`'s `configuration` block. Required for `GITHUB_HMAC`.
	SecretToken *string `pulumi:"secretToken"`
}

type WebhookAuthenticationConfigurationArgs struct {
	// A valid CIDR block for `IP` filtering. Required for `IP`.
	AllowedIpRange pulumix.Input[*string] `pulumi:"allowedIpRange"`
	// The shared secret for the GitHub repository webhook. Set this as `secret` in your `githubRepositoryWebhook`'s `configuration` block. Required for `GITHUB_HMAC`.
	SecretToken pulumix.Input[*string] `pulumi:"secretToken"`
}

func (WebhookAuthenticationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookAuthenticationConfiguration)(nil)).Elem()
}

func (i WebhookAuthenticationConfigurationArgs) ToWebhookAuthenticationConfigurationOutput() WebhookAuthenticationConfigurationOutput {
	return i.ToWebhookAuthenticationConfigurationOutputWithContext(context.Background())
}

func (i WebhookAuthenticationConfigurationArgs) ToWebhookAuthenticationConfigurationOutputWithContext(ctx context.Context) WebhookAuthenticationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookAuthenticationConfigurationOutput)
}

func (i *WebhookAuthenticationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*WebhookAuthenticationConfigurationArgs] {
	return pulumix.Val(i)
}

type WebhookAuthenticationConfigurationOutput struct{ *pulumi.OutputState }

func (WebhookAuthenticationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookAuthenticationConfiguration)(nil)).Elem()
}

func (o WebhookAuthenticationConfigurationOutput) ToWebhookAuthenticationConfigurationOutput() WebhookAuthenticationConfigurationOutput {
	return o
}

func (o WebhookAuthenticationConfigurationOutput) ToWebhookAuthenticationConfigurationOutputWithContext(ctx context.Context) WebhookAuthenticationConfigurationOutput {
	return o
}

func (o WebhookAuthenticationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[WebhookAuthenticationConfiguration] {
	return pulumix.Output[WebhookAuthenticationConfiguration]{
		OutputState: o.OutputState,
	}
}

// A valid CIDR block for `IP` filtering. Required for `IP`.
func (o WebhookAuthenticationConfigurationOutput) AllowedIpRange() pulumix.Output[*string] {
	return pulumix.Apply[WebhookAuthenticationConfiguration](o, func(v WebhookAuthenticationConfiguration) *string { return v.AllowedIpRange })
}

// The shared secret for the GitHub repository webhook. Set this as `secret` in your `githubRepositoryWebhook`'s `configuration` block. Required for `GITHUB_HMAC`.
func (o WebhookAuthenticationConfigurationOutput) SecretToken() pulumix.Output[*string] {
	return pulumix.Apply[WebhookAuthenticationConfiguration](o, func(v WebhookAuthenticationConfiguration) *string { return v.SecretToken })
}

type WebhookFilter struct {
	// The [JSON path](https://github.com/json-path/JsonPath) to filter on.
	JsonPath string `pulumi:"jsonPath"`
	// The value to match on (e.g., `refs/heads/{Branch}`). See [AWS docs](https://docs.aws.amazon.com/codepipeline/latest/APIReference/API_WebhookFilterRule.html) for details.
	MatchEquals string `pulumi:"matchEquals"`
}

type WebhookFilterArgs struct {
	// The [JSON path](https://github.com/json-path/JsonPath) to filter on.
	JsonPath pulumix.Input[string] `pulumi:"jsonPath"`
	// The value to match on (e.g., `refs/heads/{Branch}`). See [AWS docs](https://docs.aws.amazon.com/codepipeline/latest/APIReference/API_WebhookFilterRule.html) for details.
	MatchEquals pulumix.Input[string] `pulumi:"matchEquals"`
}

func (WebhookFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookFilter)(nil)).Elem()
}

func (i WebhookFilterArgs) ToWebhookFilterOutput() WebhookFilterOutput {
	return i.ToWebhookFilterOutputWithContext(context.Background())
}

func (i WebhookFilterArgs) ToWebhookFilterOutputWithContext(ctx context.Context) WebhookFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookFilterOutput)
}

func (i *WebhookFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*WebhookFilterArgs] {
	return pulumix.Val(i)
}

type WebhookFilterOutput struct{ *pulumi.OutputState }

func (WebhookFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookFilter)(nil)).Elem()
}

func (o WebhookFilterOutput) ToWebhookFilterOutput() WebhookFilterOutput {
	return o
}

func (o WebhookFilterOutput) ToWebhookFilterOutputWithContext(ctx context.Context) WebhookFilterOutput {
	return o
}

func (o WebhookFilterOutput) ToOutput(ctx context.Context) pulumix.Output[WebhookFilter] {
	return pulumix.Output[WebhookFilter]{
		OutputState: o.OutputState,
	}
}

// The [JSON path](https://github.com/json-path/JsonPath) to filter on.
func (o WebhookFilterOutput) JsonPath() pulumix.Output[string] {
	return pulumix.Apply[WebhookFilter](o, func(v WebhookFilter) string { return v.JsonPath })
}

// The value to match on (e.g., `refs/heads/{Branch}`). See [AWS docs](https://docs.aws.amazon.com/codepipeline/latest/APIReference/API_WebhookFilterRule.html) for details.
func (o WebhookFilterOutput) MatchEquals() pulumix.Output[string] {
	return pulumix.Apply[WebhookFilter](o, func(v WebhookFilter) string { return v.MatchEquals })
}

func init() {
	pulumi.RegisterOutputType(CustomActionTypeConfigurationPropertyOutput{})
	pulumi.RegisterOutputType(CustomActionTypeInputArtifactDetailsOutput{})
	pulumi.RegisterOutputType(CustomActionTypeOutputArtifactDetailsOutput{})
	pulumi.RegisterOutputType(CustomActionTypeSettingsOutput{})
	pulumi.RegisterOutputType(PipelineArtifactStoreOutput{})
	pulumi.RegisterOutputType(PipelineArtifactStoreEncryptionKeyOutput{})
	pulumi.RegisterOutputType(PipelineStageOutput{})
	pulumi.RegisterOutputType(PipelineStageActionOutput{})
	pulumi.RegisterOutputType(WebhookAuthenticationConfigurationOutput{})
	pulumi.RegisterOutputType(WebhookFilterOutput{})
}
