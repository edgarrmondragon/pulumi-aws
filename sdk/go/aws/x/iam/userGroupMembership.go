// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource for adding an IAM User to IAM Groups. This
// resource can be used multiple times with the same user for non-overlapping
// groups.
//
// To exclusively manage the users in a group, see the
// `iam.GroupMembership` resource.
type UserGroupMembership struct {
	pulumi.CustomResourceState

	// A list of IAM Groups to add the user to
	Groups pulumix.ArrayOutput[string] `pulumi:"groups"`
	// The name of the IAM User to add to groups
	User pulumix.Output[string] `pulumi:"user"`
}

// NewUserGroupMembership registers a new resource with the given unique name, arguments, and options.
func NewUserGroupMembership(ctx *pulumi.Context,
	name string, args *UserGroupMembershipArgs, opts ...pulumi.ResourceOption) (*UserGroupMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Groups == nil {
		return nil, errors.New("invalid value for required argument 'Groups'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserGroupMembership
	err := ctx.RegisterResource("aws:iam/userGroupMembership:UserGroupMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroupMembership gets an existing UserGroupMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroupMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupMembershipState, opts ...pulumi.ResourceOption) (*UserGroupMembership, error) {
	var resource UserGroupMembership
	err := ctx.ReadResource("aws:iam/userGroupMembership:UserGroupMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroupMembership resources.
type userGroupMembershipState struct {
	// A list of IAM Groups to add the user to
	Groups []string `pulumi:"groups"`
	// The name of the IAM User to add to groups
	User *string `pulumi:"user"`
}

type UserGroupMembershipState struct {
	// A list of IAM Groups to add the user to
	Groups pulumix.Input[[]string]
	// The name of the IAM User to add to groups
	User pulumix.Input[*string]
}

func (UserGroupMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupMembershipState)(nil)).Elem()
}

type userGroupMembershipArgs struct {
	// A list of IAM Groups to add the user to
	Groups []string `pulumi:"groups"`
	// The name of the IAM User to add to groups
	User string `pulumi:"user"`
}

// The set of arguments for constructing a UserGroupMembership resource.
type UserGroupMembershipArgs struct {
	// A list of IAM Groups to add the user to
	Groups pulumix.Input[[]string]
	// The name of the IAM User to add to groups
	User pulumix.Input[string]
}

func (UserGroupMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupMembershipArgs)(nil)).Elem()
}

type UserGroupMembershipOutput struct{ *pulumi.OutputState }

func (UserGroupMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupMembership)(nil)).Elem()
}

func (o UserGroupMembershipOutput) ToUserGroupMembershipOutput() UserGroupMembershipOutput {
	return o
}

func (o UserGroupMembershipOutput) ToUserGroupMembershipOutputWithContext(ctx context.Context) UserGroupMembershipOutput {
	return o
}

func (o UserGroupMembershipOutput) ToOutput(ctx context.Context) pulumix.Output[UserGroupMembership] {
	return pulumix.Output[UserGroupMembership]{
		OutputState: o.OutputState,
	}
}

// A list of IAM Groups to add the user to
func (o UserGroupMembershipOutput) Groups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[UserGroupMembership](o, func(v UserGroupMembership) pulumix.ArrayOutput[string] { return v.Groups })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The name of the IAM User to add to groups
func (o UserGroupMembershipOutput) User() pulumix.Output[string] {
	value := pulumix.Apply[UserGroupMembership](o, func(v UserGroupMembership) pulumix.Output[string] { return v.User })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(UserGroupMembershipOutput{})
}
