// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Direct Connect hosted private virtual interface resource. This resource represents the allocator's side of the hosted virtual interface.
// A hosted virtual interface is a virtual interface that is owned by another AWS account.
type HostedPrivateVirtualInterface struct {
	pulumi.CustomResourceState

	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily pulumix.Output[string] `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress pulumix.Output[string] `pulumi:"amazonAddress"`
	AmazonSideAsn pulumix.Output[string] `pulumi:"amazonSideAsn"`
	// The ARN of the virtual interface.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The Direct Connect endpoint on which the virtual interface terminates.
	AwsDevice pulumix.Output[string] `pulumi:"awsDevice"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumix.Output[int] `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey pulumix.Output[string] `pulumi:"bgpAuthKey"`
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId pulumix.Output[string] `pulumi:"connectionId"`
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress pulumix.Output[string] `pulumi:"customerAddress"`
	// Indicates whether jumbo frames (9001 MTU) are supported.
	JumboFrameCapable pulumix.Output[bool] `pulumi:"jumboFrameCapable"`
	// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection. The MTU of a virtual private interface can be either `1500` or `9001` (jumbo frames). Default is `1500`.
	Mtu pulumix.Output[*int] `pulumi:"mtu"`
	// The name for the virtual interface.
	Name pulumix.Output[string] `pulumi:"name"`
	// The AWS account that will own the new virtual interface.
	OwnerAccountId pulumix.Output[string] `pulumi:"ownerAccountId"`
	// The VLAN ID.
	Vlan pulumix.Output[int] `pulumi:"vlan"`
}

// NewHostedPrivateVirtualInterface registers a new resource with the given unique name, arguments, and options.
func NewHostedPrivateVirtualInterface(ctx *pulumi.Context,
	name string, args *HostedPrivateVirtualInterfaceArgs, opts ...pulumi.ResourceOption) (*HostedPrivateVirtualInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressFamily == nil {
		return nil, errors.New("invalid value for required argument 'AddressFamily'")
	}
	if args.BgpAsn == nil {
		return nil, errors.New("invalid value for required argument 'BgpAsn'")
	}
	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.OwnerAccountId == nil {
		return nil, errors.New("invalid value for required argument 'OwnerAccountId'")
	}
	if args.Vlan == nil {
		return nil, errors.New("invalid value for required argument 'Vlan'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostedPrivateVirtualInterface
	err := ctx.RegisterResource("aws:directconnect/hostedPrivateVirtualInterface:HostedPrivateVirtualInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostedPrivateVirtualInterface gets an existing HostedPrivateVirtualInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostedPrivateVirtualInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostedPrivateVirtualInterfaceState, opts ...pulumi.ResourceOption) (*HostedPrivateVirtualInterface, error) {
	var resource HostedPrivateVirtualInterface
	err := ctx.ReadResource("aws:directconnect/hostedPrivateVirtualInterface:HostedPrivateVirtualInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostedPrivateVirtualInterface resources.
type hostedPrivateVirtualInterfaceState struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily *string `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress *string `pulumi:"amazonAddress"`
	AmazonSideAsn *string `pulumi:"amazonSideAsn"`
	// The ARN of the virtual interface.
	Arn *string `pulumi:"arn"`
	// The Direct Connect endpoint on which the virtual interface terminates.
	AwsDevice *string `pulumi:"awsDevice"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn *int `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey *string `pulumi:"bgpAuthKey"`
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId *string `pulumi:"connectionId"`
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress *string `pulumi:"customerAddress"`
	// Indicates whether jumbo frames (9001 MTU) are supported.
	JumboFrameCapable *bool `pulumi:"jumboFrameCapable"`
	// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection. The MTU of a virtual private interface can be either `1500` or `9001` (jumbo frames). Default is `1500`.
	Mtu *int `pulumi:"mtu"`
	// The name for the virtual interface.
	Name *string `pulumi:"name"`
	// The AWS account that will own the new virtual interface.
	OwnerAccountId *string `pulumi:"ownerAccountId"`
	// The VLAN ID.
	Vlan *int `pulumi:"vlan"`
}

type HostedPrivateVirtualInterfaceState struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily pulumix.Input[*string]
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress pulumix.Input[*string]
	AmazonSideAsn pulumix.Input[*string]
	// The ARN of the virtual interface.
	Arn pulumix.Input[*string]
	// The Direct Connect endpoint on which the virtual interface terminates.
	AwsDevice pulumix.Input[*string]
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumix.Input[*int]
	// The authentication key for BGP configuration.
	BgpAuthKey pulumix.Input[*string]
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId pulumix.Input[*string]
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress pulumix.Input[*string]
	// Indicates whether jumbo frames (9001 MTU) are supported.
	JumboFrameCapable pulumix.Input[*bool]
	// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection. The MTU of a virtual private interface can be either `1500` or `9001` (jumbo frames). Default is `1500`.
	Mtu pulumix.Input[*int]
	// The name for the virtual interface.
	Name pulumix.Input[*string]
	// The AWS account that will own the new virtual interface.
	OwnerAccountId pulumix.Input[*string]
	// The VLAN ID.
	Vlan pulumix.Input[*int]
}

func (HostedPrivateVirtualInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostedPrivateVirtualInterfaceState)(nil)).Elem()
}

type hostedPrivateVirtualInterfaceArgs struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily string `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress *string `pulumi:"amazonAddress"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn int `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey *string `pulumi:"bgpAuthKey"`
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId string `pulumi:"connectionId"`
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress *string `pulumi:"customerAddress"`
	// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection. The MTU of a virtual private interface can be either `1500` or `9001` (jumbo frames). Default is `1500`.
	Mtu *int `pulumi:"mtu"`
	// The name for the virtual interface.
	Name *string `pulumi:"name"`
	// The AWS account that will own the new virtual interface.
	OwnerAccountId string `pulumi:"ownerAccountId"`
	// The VLAN ID.
	Vlan int `pulumi:"vlan"`
}

// The set of arguments for constructing a HostedPrivateVirtualInterface resource.
type HostedPrivateVirtualInterfaceArgs struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily pulumix.Input[string]
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress pulumix.Input[*string]
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumix.Input[int]
	// The authentication key for BGP configuration.
	BgpAuthKey pulumix.Input[*string]
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId pulumix.Input[string]
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress pulumix.Input[*string]
	// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection. The MTU of a virtual private interface can be either `1500` or `9001` (jumbo frames). Default is `1500`.
	Mtu pulumix.Input[*int]
	// The name for the virtual interface.
	Name pulumix.Input[*string]
	// The AWS account that will own the new virtual interface.
	OwnerAccountId pulumix.Input[string]
	// The VLAN ID.
	Vlan pulumix.Input[int]
}

func (HostedPrivateVirtualInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostedPrivateVirtualInterfaceArgs)(nil)).Elem()
}

type HostedPrivateVirtualInterfaceOutput struct{ *pulumi.OutputState }

func (HostedPrivateVirtualInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostedPrivateVirtualInterface)(nil)).Elem()
}

func (o HostedPrivateVirtualInterfaceOutput) ToHostedPrivateVirtualInterfaceOutput() HostedPrivateVirtualInterfaceOutput {
	return o
}

func (o HostedPrivateVirtualInterfaceOutput) ToHostedPrivateVirtualInterfaceOutputWithContext(ctx context.Context) HostedPrivateVirtualInterfaceOutput {
	return o
}

func (o HostedPrivateVirtualInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[HostedPrivateVirtualInterface] {
	return pulumix.Output[HostedPrivateVirtualInterface]{
		OutputState: o.OutputState,
	}
}

// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
func (o HostedPrivateVirtualInterfaceOutput) AddressFamily() pulumix.Output[string] {
	value := pulumix.Apply[HostedPrivateVirtualInterface](o, func(v HostedPrivateVirtualInterface) pulumix.Output[string] { return v.AddressFamily })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
func (o HostedPrivateVirtualInterfaceOutput) AmazonAddress() pulumix.Output[string] {
	value := pulumix.Apply[HostedPrivateVirtualInterface](o, func(v HostedPrivateVirtualInterface) pulumix.Output[string] { return v.AmazonAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o HostedPrivateVirtualInterfaceOutput) AmazonSideAsn() pulumix.Output[string] {
	value := pulumix.Apply[HostedPrivateVirtualInterface](o, func(v HostedPrivateVirtualInterface) pulumix.Output[string] { return v.AmazonSideAsn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the virtual interface.
func (o HostedPrivateVirtualInterfaceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[HostedPrivateVirtualInterface](o, func(v HostedPrivateVirtualInterface) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Direct Connect endpoint on which the virtual interface terminates.
func (o HostedPrivateVirtualInterfaceOutput) AwsDevice() pulumix.Output[string] {
	value := pulumix.Apply[HostedPrivateVirtualInterface](o, func(v HostedPrivateVirtualInterface) pulumix.Output[string] { return v.AwsDevice })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
func (o HostedPrivateVirtualInterfaceOutput) BgpAsn() pulumix.Output[int] {
	value := pulumix.Apply[HostedPrivateVirtualInterface](o, func(v HostedPrivateVirtualInterface) pulumix.Output[int] { return v.BgpAsn })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The authentication key for BGP configuration.
func (o HostedPrivateVirtualInterfaceOutput) BgpAuthKey() pulumix.Output[string] {
	value := pulumix.Apply[HostedPrivateVirtualInterface](o, func(v HostedPrivateVirtualInterface) pulumix.Output[string] { return v.BgpAuthKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
func (o HostedPrivateVirtualInterfaceOutput) ConnectionId() pulumix.Output[string] {
	value := pulumix.Apply[HostedPrivateVirtualInterface](o, func(v HostedPrivateVirtualInterface) pulumix.Output[string] { return v.ConnectionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
func (o HostedPrivateVirtualInterfaceOutput) CustomerAddress() pulumix.Output[string] {
	value := pulumix.Apply[HostedPrivateVirtualInterface](o, func(v HostedPrivateVirtualInterface) pulumix.Output[string] { return v.CustomerAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether jumbo frames (9001 MTU) are supported.
func (o HostedPrivateVirtualInterfaceOutput) JumboFrameCapable() pulumix.Output[bool] {
	value := pulumix.Apply[HostedPrivateVirtualInterface](o, func(v HostedPrivateVirtualInterface) pulumix.Output[bool] { return v.JumboFrameCapable })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection. The MTU of a virtual private interface can be either `1500` or `9001` (jumbo frames). Default is `1500`.
func (o HostedPrivateVirtualInterfaceOutput) Mtu() pulumix.Output[*int] {
	value := pulumix.Apply[HostedPrivateVirtualInterface](o, func(v HostedPrivateVirtualInterface) pulumix.Output[*int] { return v.Mtu })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The name for the virtual interface.
func (o HostedPrivateVirtualInterfaceOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[HostedPrivateVirtualInterface](o, func(v HostedPrivateVirtualInterface) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The AWS account that will own the new virtual interface.
func (o HostedPrivateVirtualInterfaceOutput) OwnerAccountId() pulumix.Output[string] {
	value := pulumix.Apply[HostedPrivateVirtualInterface](o, func(v HostedPrivateVirtualInterface) pulumix.Output[string] { return v.OwnerAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The VLAN ID.
func (o HostedPrivateVirtualInterfaceOutput) Vlan() pulumix.Output[int] {
	value := pulumix.Apply[HostedPrivateVirtualInterface](o, func(v HostedPrivateVirtualInterface) pulumix.Output[int] { return v.Vlan })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(HostedPrivateVirtualInterfaceOutput{})
}
