// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoverycontrol

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Route 53 Recovery Control Config Safety Rule
type SafetyRule struct {
	pulumi.CustomResourceState

	// ARN of the safety rule.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed.
	AssertedControls pulumix.ArrayOutput[string] `pulumi:"assertedControls"`
	// ARN of the control panel in which this safety rule will reside.
	ControlPanelArn pulumix.Output[string] `pulumi:"controlPanelArn"`
	// Gating controls for the new gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
	GatingControls pulumix.ArrayOutput[string] `pulumi:"gatingControls"`
	// Name describing the safety rule.
	Name pulumix.Output[string] `pulumi:"name"`
	// Configuration block for safety rule criteria. See below.
	RuleConfig pulumix.GPtrOutput[SafetyRuleRuleConfig, SafetyRuleRuleConfigOutput] `pulumi:"ruleConfig"`
	// Status of the safety rule. `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
	Status pulumix.Output[string] `pulumi:"status"`
	// Routing controls that can only be set or unset if the specified `ruleConfig` evaluates to true for the specified `gatingControls`.
	TargetControls pulumix.ArrayOutput[string] `pulumi:"targetControls"`
	// Evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail.
	//
	// The following arguments are optional:
	WaitPeriodMs pulumix.Output[int] `pulumi:"waitPeriodMs"`
}

// NewSafetyRule registers a new resource with the given unique name, arguments, and options.
func NewSafetyRule(ctx *pulumi.Context,
	name string, args *SafetyRuleArgs, opts ...pulumi.ResourceOption) (*SafetyRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPanelArn == nil {
		return nil, errors.New("invalid value for required argument 'ControlPanelArn'")
	}
	if args.RuleConfig == nil {
		return nil, errors.New("invalid value for required argument 'RuleConfig'")
	}
	if args.WaitPeriodMs == nil {
		return nil, errors.New("invalid value for required argument 'WaitPeriodMs'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SafetyRule
	err := ctx.RegisterResource("aws:route53recoverycontrol/safetyRule:SafetyRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSafetyRule gets an existing SafetyRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSafetyRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SafetyRuleState, opts ...pulumi.ResourceOption) (*SafetyRule, error) {
	var resource SafetyRule
	err := ctx.ReadResource("aws:route53recoverycontrol/safetyRule:SafetyRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SafetyRule resources.
type safetyRuleState struct {
	// ARN of the safety rule.
	Arn *string `pulumi:"arn"`
	// Routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed.
	AssertedControls []string `pulumi:"assertedControls"`
	// ARN of the control panel in which this safety rule will reside.
	ControlPanelArn *string `pulumi:"controlPanelArn"`
	// Gating controls for the new gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
	GatingControls []string `pulumi:"gatingControls"`
	// Name describing the safety rule.
	Name *string `pulumi:"name"`
	// Configuration block for safety rule criteria. See below.
	RuleConfig *SafetyRuleRuleConfig `pulumi:"ruleConfig"`
	// Status of the safety rule. `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
	Status *string `pulumi:"status"`
	// Routing controls that can only be set or unset if the specified `ruleConfig` evaluates to true for the specified `gatingControls`.
	TargetControls []string `pulumi:"targetControls"`
	// Evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail.
	//
	// The following arguments are optional:
	WaitPeriodMs *int `pulumi:"waitPeriodMs"`
}

type SafetyRuleState struct {
	// ARN of the safety rule.
	Arn pulumix.Input[*string]
	// Routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed.
	AssertedControls pulumix.Input[[]string]
	// ARN of the control panel in which this safety rule will reside.
	ControlPanelArn pulumix.Input[*string]
	// Gating controls for the new gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
	GatingControls pulumix.Input[[]string]
	// Name describing the safety rule.
	Name pulumix.Input[*string]
	// Configuration block for safety rule criteria. See below.
	RuleConfig pulumix.Input[*SafetyRuleRuleConfigArgs]
	// Status of the safety rule. `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
	Status pulumix.Input[*string]
	// Routing controls that can only be set or unset if the specified `ruleConfig` evaluates to true for the specified `gatingControls`.
	TargetControls pulumix.Input[[]string]
	// Evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail.
	//
	// The following arguments are optional:
	WaitPeriodMs pulumix.Input[*int]
}

func (SafetyRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*safetyRuleState)(nil)).Elem()
}

type safetyRuleArgs struct {
	// Routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed.
	AssertedControls []string `pulumi:"assertedControls"`
	// ARN of the control panel in which this safety rule will reside.
	ControlPanelArn string `pulumi:"controlPanelArn"`
	// Gating controls for the new gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
	GatingControls []string `pulumi:"gatingControls"`
	// Name describing the safety rule.
	Name *string `pulumi:"name"`
	// Configuration block for safety rule criteria. See below.
	RuleConfig SafetyRuleRuleConfig `pulumi:"ruleConfig"`
	// Routing controls that can only be set or unset if the specified `ruleConfig` evaluates to true for the specified `gatingControls`.
	TargetControls []string `pulumi:"targetControls"`
	// Evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail.
	//
	// The following arguments are optional:
	WaitPeriodMs int `pulumi:"waitPeriodMs"`
}

// The set of arguments for constructing a SafetyRule resource.
type SafetyRuleArgs struct {
	// Routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed.
	AssertedControls pulumix.Input[[]string]
	// ARN of the control panel in which this safety rule will reside.
	ControlPanelArn pulumix.Input[string]
	// Gating controls for the new gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
	GatingControls pulumix.Input[[]string]
	// Name describing the safety rule.
	Name pulumix.Input[*string]
	// Configuration block for safety rule criteria. See below.
	RuleConfig pulumix.Input[*SafetyRuleRuleConfigArgs]
	// Routing controls that can only be set or unset if the specified `ruleConfig` evaluates to true for the specified `gatingControls`.
	TargetControls pulumix.Input[[]string]
	// Evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail.
	//
	// The following arguments are optional:
	WaitPeriodMs pulumix.Input[int]
}

func (SafetyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*safetyRuleArgs)(nil)).Elem()
}

type SafetyRuleOutput struct{ *pulumi.OutputState }

func (SafetyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SafetyRule)(nil)).Elem()
}

func (o SafetyRuleOutput) ToSafetyRuleOutput() SafetyRuleOutput {
	return o
}

func (o SafetyRuleOutput) ToSafetyRuleOutputWithContext(ctx context.Context) SafetyRuleOutput {
	return o
}

func (o SafetyRuleOutput) ToOutput(ctx context.Context) pulumix.Output[SafetyRule] {
	return pulumix.Output[SafetyRule]{
		OutputState: o.OutputState,
	}
}

// ARN of the safety rule.
func (o SafetyRuleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[SafetyRule](o, func(v SafetyRule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed.
func (o SafetyRuleOutput) AssertedControls() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SafetyRule](o, func(v SafetyRule) pulumix.ArrayOutput[string] { return v.AssertedControls })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// ARN of the control panel in which this safety rule will reside.
func (o SafetyRuleOutput) ControlPanelArn() pulumix.Output[string] {
	value := pulumix.Apply[SafetyRule](o, func(v SafetyRule) pulumix.Output[string] { return v.ControlPanelArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Gating controls for the new gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
func (o SafetyRuleOutput) GatingControls() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SafetyRule](o, func(v SafetyRule) pulumix.ArrayOutput[string] { return v.GatingControls })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Name describing the safety rule.
func (o SafetyRuleOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[SafetyRule](o, func(v SafetyRule) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for safety rule criteria. See below.
func (o SafetyRuleOutput) RuleConfig() pulumix.GPtrOutput[SafetyRuleRuleConfig, SafetyRuleRuleConfigOutput] {
	value := pulumix.Apply[SafetyRule](o, func(v SafetyRule) pulumix.GPtrOutput[SafetyRuleRuleConfig, SafetyRuleRuleConfigOutput] {
		return v.RuleConfig
	})
	unwrapped := pulumix.Flatten[*SafetyRuleRuleConfig, pulumix.GPtrOutput[SafetyRuleRuleConfig, SafetyRuleRuleConfigOutput]](value)
	return pulumix.GPtrOutput[SafetyRuleRuleConfig, SafetyRuleRuleConfigOutput]{OutputState: unwrapped.OutputState}
}

// Status of the safety rule. `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
func (o SafetyRuleOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[SafetyRule](o, func(v SafetyRule) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Routing controls that can only be set or unset if the specified `ruleConfig` evaluates to true for the specified `gatingControls`.
func (o SafetyRuleOutput) TargetControls() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SafetyRule](o, func(v SafetyRule) pulumix.ArrayOutput[string] { return v.TargetControls })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail.
//
// The following arguments are optional:
func (o SafetyRuleOutput) WaitPeriodMs() pulumix.Output[int] {
	value := pulumix.Apply[SafetyRule](o, func(v SafetyRule) pulumix.Output[int] { return v.WaitPeriodMs })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(SafetyRuleOutput{})
}
