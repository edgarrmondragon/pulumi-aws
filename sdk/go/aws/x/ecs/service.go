// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// > **Note:** To prevent a race condition during service deletion, make sure to set `dependsOn` to the related `iam.RolePolicy`; otherwise, the policy may be destroyed too soon and the ECS service will then get stuck in the `DRAINING` state.
//
// Provides an ECS service - effectively a task that is expected to run until an error occurs or a user terminates it (typically a webserver or a database).
//
// See [ECS Services section in AWS developer guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
type Service struct {
	pulumi.CustomResourceState

	// Information about the CloudWatch alarms. See below.
	Alarms pulumix.GPtrOutput[ServiceAlarms, ServiceAlarmsOutput] `pulumi:"alarms"`
	// Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if `forceNewDeployment = true` and not changing from 0 `capacityProviderStrategy` blocks to greater than 0, or vice versa. See below.
	CapacityProviderStrategies pulumix.GArrayOutput[ServiceCapacityProviderStrategy, ServiceCapacityProviderStrategyOutput] `pulumi:"capacityProviderStrategies"`
	// ARN of an ECS cluster.
	Cluster pulumix.Output[string] `pulumi:"cluster"`
	// Configuration block for deployment circuit breaker. See below.
	DeploymentCircuitBreaker pulumix.GPtrOutput[ServiceDeploymentCircuitBreaker, ServiceDeploymentCircuitBreakerOutput] `pulumi:"deploymentCircuitBreaker"`
	// Configuration block for deployment controller configuration. See below.
	DeploymentController pulumix.GPtrOutput[ServiceDeploymentController, ServiceDeploymentControllerOutput] `pulumi:"deploymentController"`
	// Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
	DeploymentMaximumPercent pulumix.Output[*int] `pulumi:"deploymentMaximumPercent"`
	// Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
	DeploymentMinimumHealthyPercent pulumix.Output[*int] `pulumi:"deploymentMinimumHealthyPercent"`
	// Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
	DesiredCount pulumix.Output[*int] `pulumi:"desiredCount"`
	// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
	EnableEcsManagedTags pulumix.Output[*bool] `pulumi:"enableEcsManagedTags"`
	// Specifies whether to enable Amazon ECS Exec for the tasks within the service.
	EnableExecuteCommand pulumix.Output[*bool] `pulumi:"enableExecuteCommand"`
	// Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., `myimage:latest`), roll Fargate tasks onto a newer platform version, or immediately deploy `orderedPlacementStrategy` and `placementConstraints` updates.
	ForceNewDeployment pulumix.Output[*bool] `pulumi:"forceNewDeployment"`
	// Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
	HealthCheckGracePeriodSeconds pulumix.Output[*int] `pulumi:"healthCheckGracePeriodSeconds"`
	// ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
	IamRole pulumix.Output[string] `pulumi:"iamRole"`
	// Launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
	LaunchType pulumix.Output[string] `pulumi:"launchType"`
	// Configuration block for load balancers. See below.
	LoadBalancers pulumix.GArrayOutput[ServiceLoadBalancer, ServiceLoadBalancerOutput] `pulumi:"loadBalancers"`
	// Name of the service (up to 255 letters, numbers, hyphens, and underscores)
	//
	// The following arguments are optional:
	Name pulumix.Output[string] `pulumi:"name"`
	// Network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.
	NetworkConfiguration pulumix.GPtrOutput[ServiceNetworkConfiguration, ServiceNetworkConfigurationOutput] `pulumi:"networkConfiguration"`
	// Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless `forceNewDeployment` is enabled. The maximum number of `orderedPlacementStrategy` blocks is `5`. See below.
	OrderedPlacementStrategies pulumix.GArrayOutput[ServiceOrderedPlacementStrategy, ServiceOrderedPlacementStrategyOutput] `pulumi:"orderedPlacementStrategies"`
	// Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless `forceNewDeployment` is enabled. Maximum number of `placementConstraints` is `10`. See below.
	PlacementConstraints pulumix.GArrayOutput[ServicePlacementConstraint, ServicePlacementConstraintOutput] `pulumi:"placementConstraints"`
	// Platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumix.Output[string] `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
	PropagateTags pulumix.Output[*string] `pulumi:"propagateTags"`
	// Scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Tasks using the Fargate launch type or the `CODE_DEPLOY` or `EXTERNAL` deployment controller types don't support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html).
	SchedulingStrategy pulumix.Output[*string] `pulumi:"schedulingStrategy"`
	// The ECS Service Connect configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. See below.
	ServiceConnectConfiguration pulumix.GPtrOutput[ServiceServiceConnectConfiguration, ServiceServiceConnectConfigurationOutput] `pulumi:"serviceConnectConfiguration"`
	// Service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`. See below.
	ServiceRegistries pulumix.GPtrOutput[ServiceServiceRegistries, ServiceServiceRegistriesOutput] `pulumi:"serviceRegistries"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service. Required unless using the `EXTERNAL` deployment controller. If a revision is not specified, the latest `ACTIVE` revision is used.
	TaskDefinition pulumix.Output[*string] `pulumi:"taskDefinition"`
	// Map of arbitrary keys and values that, when changed, will trigger an in-place update (redeployment). Useful with `timestamp()`. See example above.
	Triggers pulumix.MapOutput[string] `pulumi:"triggers"`
	// If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
	WaitForSteadyState pulumix.Output[*bool] `pulumi:"waitForSteadyState"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		args = &ServiceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("aws:ecs/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("aws:ecs/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// Information about the CloudWatch alarms. See below.
	Alarms *ServiceAlarms `pulumi:"alarms"`
	// Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if `forceNewDeployment = true` and not changing from 0 `capacityProviderStrategy` blocks to greater than 0, or vice versa. See below.
	CapacityProviderStrategies []ServiceCapacityProviderStrategy `pulumi:"capacityProviderStrategies"`
	// ARN of an ECS cluster.
	Cluster *string `pulumi:"cluster"`
	// Configuration block for deployment circuit breaker. See below.
	DeploymentCircuitBreaker *ServiceDeploymentCircuitBreaker `pulumi:"deploymentCircuitBreaker"`
	// Configuration block for deployment controller configuration. See below.
	DeploymentController *ServiceDeploymentController `pulumi:"deploymentController"`
	// Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
	DeploymentMaximumPercent *int `pulumi:"deploymentMaximumPercent"`
	// Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
	DeploymentMinimumHealthyPercent *int `pulumi:"deploymentMinimumHealthyPercent"`
	// Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
	DesiredCount *int `pulumi:"desiredCount"`
	// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
	EnableEcsManagedTags *bool `pulumi:"enableEcsManagedTags"`
	// Specifies whether to enable Amazon ECS Exec for the tasks within the service.
	EnableExecuteCommand *bool `pulumi:"enableExecuteCommand"`
	// Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., `myimage:latest`), roll Fargate tasks onto a newer platform version, or immediately deploy `orderedPlacementStrategy` and `placementConstraints` updates.
	ForceNewDeployment *bool `pulumi:"forceNewDeployment"`
	// Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
	HealthCheckGracePeriodSeconds *int `pulumi:"healthCheckGracePeriodSeconds"`
	// ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
	IamRole *string `pulumi:"iamRole"`
	// Launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
	LaunchType *string `pulumi:"launchType"`
	// Configuration block for load balancers. See below.
	LoadBalancers []ServiceLoadBalancer `pulumi:"loadBalancers"`
	// Name of the service (up to 255 letters, numbers, hyphens, and underscores)
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.
	NetworkConfiguration *ServiceNetworkConfiguration `pulumi:"networkConfiguration"`
	// Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless `forceNewDeployment` is enabled. The maximum number of `orderedPlacementStrategy` blocks is `5`. See below.
	OrderedPlacementStrategies []ServiceOrderedPlacementStrategy `pulumi:"orderedPlacementStrategies"`
	// Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless `forceNewDeployment` is enabled. Maximum number of `placementConstraints` is `10`. See below.
	PlacementConstraints []ServicePlacementConstraint `pulumi:"placementConstraints"`
	// Platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion *string `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
	PropagateTags *string `pulumi:"propagateTags"`
	// Scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Tasks using the Fargate launch type or the `CODE_DEPLOY` or `EXTERNAL` deployment controller types don't support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html).
	SchedulingStrategy *string `pulumi:"schedulingStrategy"`
	// The ECS Service Connect configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. See below.
	ServiceConnectConfiguration *ServiceServiceConnectConfiguration `pulumi:"serviceConnectConfiguration"`
	// Service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`. See below.
	ServiceRegistries *ServiceServiceRegistries `pulumi:"serviceRegistries"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service. Required unless using the `EXTERNAL` deployment controller. If a revision is not specified, the latest `ACTIVE` revision is used.
	TaskDefinition *string `pulumi:"taskDefinition"`
	// Map of arbitrary keys and values that, when changed, will trigger an in-place update (redeployment). Useful with `timestamp()`. See example above.
	Triggers map[string]string `pulumi:"triggers"`
	// If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
	WaitForSteadyState *bool `pulumi:"waitForSteadyState"`
}

type ServiceState struct {
	// Information about the CloudWatch alarms. See below.
	Alarms pulumix.Input[*ServiceAlarmsArgs]
	// Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if `forceNewDeployment = true` and not changing from 0 `capacityProviderStrategy` blocks to greater than 0, or vice versa. See below.
	CapacityProviderStrategies pulumix.Input[[]*ServiceCapacityProviderStrategyArgs]
	// ARN of an ECS cluster.
	Cluster pulumix.Input[*string]
	// Configuration block for deployment circuit breaker. See below.
	DeploymentCircuitBreaker pulumix.Input[*ServiceDeploymentCircuitBreakerArgs]
	// Configuration block for deployment controller configuration. See below.
	DeploymentController pulumix.Input[*ServiceDeploymentControllerArgs]
	// Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
	DeploymentMaximumPercent pulumix.Input[*int]
	// Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
	DeploymentMinimumHealthyPercent pulumix.Input[*int]
	// Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
	DesiredCount pulumix.Input[*int]
	// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
	EnableEcsManagedTags pulumix.Input[*bool]
	// Specifies whether to enable Amazon ECS Exec for the tasks within the service.
	EnableExecuteCommand pulumix.Input[*bool]
	// Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., `myimage:latest`), roll Fargate tasks onto a newer platform version, or immediately deploy `orderedPlacementStrategy` and `placementConstraints` updates.
	ForceNewDeployment pulumix.Input[*bool]
	// Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
	HealthCheckGracePeriodSeconds pulumix.Input[*int]
	// ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
	IamRole pulumix.Input[*string]
	// Launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
	LaunchType pulumix.Input[*string]
	// Configuration block for load balancers. See below.
	LoadBalancers pulumix.Input[[]*ServiceLoadBalancerArgs]
	// Name of the service (up to 255 letters, numbers, hyphens, and underscores)
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.
	NetworkConfiguration pulumix.Input[*ServiceNetworkConfigurationArgs]
	// Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless `forceNewDeployment` is enabled. The maximum number of `orderedPlacementStrategy` blocks is `5`. See below.
	OrderedPlacementStrategies pulumix.Input[[]*ServiceOrderedPlacementStrategyArgs]
	// Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless `forceNewDeployment` is enabled. Maximum number of `placementConstraints` is `10`. See below.
	PlacementConstraints pulumix.Input[[]*ServicePlacementConstraintArgs]
	// Platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumix.Input[*string]
	// Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
	PropagateTags pulumix.Input[*string]
	// Scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Tasks using the Fargate launch type or the `CODE_DEPLOY` or `EXTERNAL` deployment controller types don't support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html).
	SchedulingStrategy pulumix.Input[*string]
	// The ECS Service Connect configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. See below.
	ServiceConnectConfiguration pulumix.Input[*ServiceServiceConnectConfigurationArgs]
	// Service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`. See below.
	ServiceRegistries pulumix.Input[*ServiceServiceRegistriesArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service. Required unless using the `EXTERNAL` deployment controller. If a revision is not specified, the latest `ACTIVE` revision is used.
	TaskDefinition pulumix.Input[*string]
	// Map of arbitrary keys and values that, when changed, will trigger an in-place update (redeployment). Useful with `timestamp()`. See example above.
	Triggers pulumix.Input[map[string]string]
	// If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
	WaitForSteadyState pulumix.Input[*bool]
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// Information about the CloudWatch alarms. See below.
	Alarms *ServiceAlarms `pulumi:"alarms"`
	// Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if `forceNewDeployment = true` and not changing from 0 `capacityProviderStrategy` blocks to greater than 0, or vice versa. See below.
	CapacityProviderStrategies []ServiceCapacityProviderStrategy `pulumi:"capacityProviderStrategies"`
	// ARN of an ECS cluster.
	Cluster *string `pulumi:"cluster"`
	// Configuration block for deployment circuit breaker. See below.
	DeploymentCircuitBreaker *ServiceDeploymentCircuitBreaker `pulumi:"deploymentCircuitBreaker"`
	// Configuration block for deployment controller configuration. See below.
	DeploymentController *ServiceDeploymentController `pulumi:"deploymentController"`
	// Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
	DeploymentMaximumPercent *int `pulumi:"deploymentMaximumPercent"`
	// Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
	DeploymentMinimumHealthyPercent *int `pulumi:"deploymentMinimumHealthyPercent"`
	// Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
	DesiredCount *int `pulumi:"desiredCount"`
	// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
	EnableEcsManagedTags *bool `pulumi:"enableEcsManagedTags"`
	// Specifies whether to enable Amazon ECS Exec for the tasks within the service.
	EnableExecuteCommand *bool `pulumi:"enableExecuteCommand"`
	// Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., `myimage:latest`), roll Fargate tasks onto a newer platform version, or immediately deploy `orderedPlacementStrategy` and `placementConstraints` updates.
	ForceNewDeployment *bool `pulumi:"forceNewDeployment"`
	// Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
	HealthCheckGracePeriodSeconds *int `pulumi:"healthCheckGracePeriodSeconds"`
	// ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
	IamRole *string `pulumi:"iamRole"`
	// Launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
	LaunchType *string `pulumi:"launchType"`
	// Configuration block for load balancers. See below.
	LoadBalancers []ServiceLoadBalancer `pulumi:"loadBalancers"`
	// Name of the service (up to 255 letters, numbers, hyphens, and underscores)
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.
	NetworkConfiguration *ServiceNetworkConfiguration `pulumi:"networkConfiguration"`
	// Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless `forceNewDeployment` is enabled. The maximum number of `orderedPlacementStrategy` blocks is `5`. See below.
	OrderedPlacementStrategies []ServiceOrderedPlacementStrategy `pulumi:"orderedPlacementStrategies"`
	// Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless `forceNewDeployment` is enabled. Maximum number of `placementConstraints` is `10`. See below.
	PlacementConstraints []ServicePlacementConstraint `pulumi:"placementConstraints"`
	// Platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion *string `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
	PropagateTags *string `pulumi:"propagateTags"`
	// Scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Tasks using the Fargate launch type or the `CODE_DEPLOY` or `EXTERNAL` deployment controller types don't support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html).
	SchedulingStrategy *string `pulumi:"schedulingStrategy"`
	// The ECS Service Connect configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. See below.
	ServiceConnectConfiguration *ServiceServiceConnectConfiguration `pulumi:"serviceConnectConfiguration"`
	// Service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`. See below.
	ServiceRegistries *ServiceServiceRegistries `pulumi:"serviceRegistries"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service. Required unless using the `EXTERNAL` deployment controller. If a revision is not specified, the latest `ACTIVE` revision is used.
	TaskDefinition *string `pulumi:"taskDefinition"`
	// Map of arbitrary keys and values that, when changed, will trigger an in-place update (redeployment). Useful with `timestamp()`. See example above.
	Triggers map[string]string `pulumi:"triggers"`
	// If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
	WaitForSteadyState *bool `pulumi:"waitForSteadyState"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// Information about the CloudWatch alarms. See below.
	Alarms pulumix.Input[*ServiceAlarmsArgs]
	// Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if `forceNewDeployment = true` and not changing from 0 `capacityProviderStrategy` blocks to greater than 0, or vice versa. See below.
	CapacityProviderStrategies pulumix.Input[[]*ServiceCapacityProviderStrategyArgs]
	// ARN of an ECS cluster.
	Cluster pulumix.Input[*string]
	// Configuration block for deployment circuit breaker. See below.
	DeploymentCircuitBreaker pulumix.Input[*ServiceDeploymentCircuitBreakerArgs]
	// Configuration block for deployment controller configuration. See below.
	DeploymentController pulumix.Input[*ServiceDeploymentControllerArgs]
	// Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
	DeploymentMaximumPercent pulumix.Input[*int]
	// Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
	DeploymentMinimumHealthyPercent pulumix.Input[*int]
	// Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
	DesiredCount pulumix.Input[*int]
	// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
	EnableEcsManagedTags pulumix.Input[*bool]
	// Specifies whether to enable Amazon ECS Exec for the tasks within the service.
	EnableExecuteCommand pulumix.Input[*bool]
	// Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., `myimage:latest`), roll Fargate tasks onto a newer platform version, or immediately deploy `orderedPlacementStrategy` and `placementConstraints` updates.
	ForceNewDeployment pulumix.Input[*bool]
	// Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
	HealthCheckGracePeriodSeconds pulumix.Input[*int]
	// ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
	IamRole pulumix.Input[*string]
	// Launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
	LaunchType pulumix.Input[*string]
	// Configuration block for load balancers. See below.
	LoadBalancers pulumix.Input[[]*ServiceLoadBalancerArgs]
	// Name of the service (up to 255 letters, numbers, hyphens, and underscores)
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.
	NetworkConfiguration pulumix.Input[*ServiceNetworkConfigurationArgs]
	// Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless `forceNewDeployment` is enabled. The maximum number of `orderedPlacementStrategy` blocks is `5`. See below.
	OrderedPlacementStrategies pulumix.Input[[]*ServiceOrderedPlacementStrategyArgs]
	// Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless `forceNewDeployment` is enabled. Maximum number of `placementConstraints` is `10`. See below.
	PlacementConstraints pulumix.Input[[]*ServicePlacementConstraintArgs]
	// Platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumix.Input[*string]
	// Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
	PropagateTags pulumix.Input[*string]
	// Scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Tasks using the Fargate launch type or the `CODE_DEPLOY` or `EXTERNAL` deployment controller types don't support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html).
	SchedulingStrategy pulumix.Input[*string]
	// The ECS Service Connect configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. See below.
	ServiceConnectConfiguration pulumix.Input[*ServiceServiceConnectConfigurationArgs]
	// Service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`. See below.
	ServiceRegistries pulumix.Input[*ServiceServiceRegistriesArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service. Required unless using the `EXTERNAL` deployment controller. If a revision is not specified, the latest `ACTIVE` revision is used.
	TaskDefinition pulumix.Input[*string]
	// Map of arbitrary keys and values that, when changed, will trigger an in-place update (redeployment). Useful with `timestamp()`. See example above.
	Triggers pulumix.Input[map[string]string]
	// If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
	WaitForSteadyState pulumix.Input[*bool]
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

func (o ServiceOutput) ToOutput(ctx context.Context) pulumix.Output[Service] {
	return pulumix.Output[Service]{
		OutputState: o.OutputState,
	}
}

// Information about the CloudWatch alarms. See below.
func (o ServiceOutput) Alarms() pulumix.GPtrOutput[ServiceAlarms, ServiceAlarmsOutput] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.GPtrOutput[ServiceAlarms, ServiceAlarmsOutput] { return v.Alarms })
	unwrapped := pulumix.Flatten[*ServiceAlarms, pulumix.GPtrOutput[ServiceAlarms, ServiceAlarmsOutput]](value)
	return pulumix.GPtrOutput[ServiceAlarms, ServiceAlarmsOutput]{OutputState: unwrapped.OutputState}
}

// Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if `forceNewDeployment = true` and not changing from 0 `capacityProviderStrategy` blocks to greater than 0, or vice versa. See below.
func (o ServiceOutput) CapacityProviderStrategies() pulumix.GArrayOutput[ServiceCapacityProviderStrategy, ServiceCapacityProviderStrategyOutput] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.GArrayOutput[ServiceCapacityProviderStrategy, ServiceCapacityProviderStrategyOutput] {
		return v.CapacityProviderStrategies
	})
	unwrapped := pulumix.Flatten[[]ServiceCapacityProviderStrategy, pulumix.GArrayOutput[ServiceCapacityProviderStrategy, ServiceCapacityProviderStrategyOutput]](value)
	return pulumix.GArrayOutput[ServiceCapacityProviderStrategy, ServiceCapacityProviderStrategyOutput]{OutputState: unwrapped.OutputState}
}

// ARN of an ECS cluster.
func (o ServiceOutput) Cluster() pulumix.Output[string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[string] { return v.Cluster })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for deployment circuit breaker. See below.
func (o ServiceOutput) DeploymentCircuitBreaker() pulumix.GPtrOutput[ServiceDeploymentCircuitBreaker, ServiceDeploymentCircuitBreakerOutput] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.GPtrOutput[ServiceDeploymentCircuitBreaker, ServiceDeploymentCircuitBreakerOutput] {
		return v.DeploymentCircuitBreaker
	})
	unwrapped := pulumix.Flatten[*ServiceDeploymentCircuitBreaker, pulumix.GPtrOutput[ServiceDeploymentCircuitBreaker, ServiceDeploymentCircuitBreakerOutput]](value)
	return pulumix.GPtrOutput[ServiceDeploymentCircuitBreaker, ServiceDeploymentCircuitBreakerOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for deployment controller configuration. See below.
func (o ServiceOutput) DeploymentController() pulumix.GPtrOutput[ServiceDeploymentController, ServiceDeploymentControllerOutput] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.GPtrOutput[ServiceDeploymentController, ServiceDeploymentControllerOutput] {
		return v.DeploymentController
	})
	unwrapped := pulumix.Flatten[*ServiceDeploymentController, pulumix.GPtrOutput[ServiceDeploymentController, ServiceDeploymentControllerOutput]](value)
	return pulumix.GPtrOutput[ServiceDeploymentController, ServiceDeploymentControllerOutput]{OutputState: unwrapped.OutputState}
}

// Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
func (o ServiceOutput) DeploymentMaximumPercent() pulumix.Output[*int] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[*int] { return v.DeploymentMaximumPercent })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
func (o ServiceOutput) DeploymentMinimumHealthyPercent() pulumix.Output[*int] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[*int] { return v.DeploymentMinimumHealthyPercent })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
func (o ServiceOutput) DesiredCount() pulumix.Output[*int] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[*int] { return v.DesiredCount })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
func (o ServiceOutput) EnableEcsManagedTags() pulumix.Output[*bool] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[*bool] { return v.EnableEcsManagedTags })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Specifies whether to enable Amazon ECS Exec for the tasks within the service.
func (o ServiceOutput) EnableExecuteCommand() pulumix.Output[*bool] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[*bool] { return v.EnableExecuteCommand })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., `myimage:latest`), roll Fargate tasks onto a newer platform version, or immediately deploy `orderedPlacementStrategy` and `placementConstraints` updates.
func (o ServiceOutput) ForceNewDeployment() pulumix.Output[*bool] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[*bool] { return v.ForceNewDeployment })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
func (o ServiceOutput) HealthCheckGracePeriodSeconds() pulumix.Output[*int] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[*int] { return v.HealthCheckGracePeriodSeconds })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
func (o ServiceOutput) IamRole() pulumix.Output[string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[string] { return v.IamRole })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
func (o ServiceOutput) LaunchType() pulumix.Output[string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[string] { return v.LaunchType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for load balancers. See below.
func (o ServiceOutput) LoadBalancers() pulumix.GArrayOutput[ServiceLoadBalancer, ServiceLoadBalancerOutput] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.GArrayOutput[ServiceLoadBalancer, ServiceLoadBalancerOutput] {
		return v.LoadBalancers
	})
	unwrapped := pulumix.Flatten[[]ServiceLoadBalancer, pulumix.GArrayOutput[ServiceLoadBalancer, ServiceLoadBalancerOutput]](value)
	return pulumix.GArrayOutput[ServiceLoadBalancer, ServiceLoadBalancerOutput]{OutputState: unwrapped.OutputState}
}

// Name of the service (up to 255 letters, numbers, hyphens, and underscores)
//
// The following arguments are optional:
func (o ServiceOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.
func (o ServiceOutput) NetworkConfiguration() pulumix.GPtrOutput[ServiceNetworkConfiguration, ServiceNetworkConfigurationOutput] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.GPtrOutput[ServiceNetworkConfiguration, ServiceNetworkConfigurationOutput] {
		return v.NetworkConfiguration
	})
	unwrapped := pulumix.Flatten[*ServiceNetworkConfiguration, pulumix.GPtrOutput[ServiceNetworkConfiguration, ServiceNetworkConfigurationOutput]](value)
	return pulumix.GPtrOutput[ServiceNetworkConfiguration, ServiceNetworkConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless `forceNewDeployment` is enabled. The maximum number of `orderedPlacementStrategy` blocks is `5`. See below.
func (o ServiceOutput) OrderedPlacementStrategies() pulumix.GArrayOutput[ServiceOrderedPlacementStrategy, ServiceOrderedPlacementStrategyOutput] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.GArrayOutput[ServiceOrderedPlacementStrategy, ServiceOrderedPlacementStrategyOutput] {
		return v.OrderedPlacementStrategies
	})
	unwrapped := pulumix.Flatten[[]ServiceOrderedPlacementStrategy, pulumix.GArrayOutput[ServiceOrderedPlacementStrategy, ServiceOrderedPlacementStrategyOutput]](value)
	return pulumix.GArrayOutput[ServiceOrderedPlacementStrategy, ServiceOrderedPlacementStrategyOutput]{OutputState: unwrapped.OutputState}
}

// Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless `forceNewDeployment` is enabled. Maximum number of `placementConstraints` is `10`. See below.
func (o ServiceOutput) PlacementConstraints() pulumix.GArrayOutput[ServicePlacementConstraint, ServicePlacementConstraintOutput] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.GArrayOutput[ServicePlacementConstraint, ServicePlacementConstraintOutput] {
		return v.PlacementConstraints
	})
	unwrapped := pulumix.Flatten[[]ServicePlacementConstraint, pulumix.GArrayOutput[ServicePlacementConstraint, ServicePlacementConstraintOutput]](value)
	return pulumix.GArrayOutput[ServicePlacementConstraint, ServicePlacementConstraintOutput]{OutputState: unwrapped.OutputState}
}

// Platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
func (o ServiceOutput) PlatformVersion() pulumix.Output[string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[string] { return v.PlatformVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
func (o ServiceOutput) PropagateTags() pulumix.Output[*string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[*string] { return v.PropagateTags })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Tasks using the Fargate launch type or the `CODE_DEPLOY` or `EXTERNAL` deployment controller types don't support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html).
func (o ServiceOutput) SchedulingStrategy() pulumix.Output[*string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[*string] { return v.SchedulingStrategy })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ECS Service Connect configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. See below.
func (o ServiceOutput) ServiceConnectConfiguration() pulumix.GPtrOutput[ServiceServiceConnectConfiguration, ServiceServiceConnectConfigurationOutput] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.GPtrOutput[ServiceServiceConnectConfiguration, ServiceServiceConnectConfigurationOutput] {
		return v.ServiceConnectConfiguration
	})
	unwrapped := pulumix.Flatten[*ServiceServiceConnectConfiguration, pulumix.GPtrOutput[ServiceServiceConnectConfiguration, ServiceServiceConnectConfigurationOutput]](value)
	return pulumix.GPtrOutput[ServiceServiceConnectConfiguration, ServiceServiceConnectConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`. See below.
func (o ServiceOutput) ServiceRegistries() pulumix.GPtrOutput[ServiceServiceRegistries, ServiceServiceRegistriesOutput] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.GPtrOutput[ServiceServiceRegistries, ServiceServiceRegistriesOutput] {
		return v.ServiceRegistries
	})
	unwrapped := pulumix.Flatten[*ServiceServiceRegistries, pulumix.GPtrOutput[ServiceServiceRegistries, ServiceServiceRegistriesOutput]](value)
	return pulumix.GPtrOutput[ServiceServiceRegistries, ServiceServiceRegistriesOutput]{OutputState: unwrapped.OutputState}
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ServiceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ServiceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service. Required unless using the `EXTERNAL` deployment controller. If a revision is not specified, the latest `ACTIVE` revision is used.
func (o ServiceOutput) TaskDefinition() pulumix.Output[*string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[*string] { return v.TaskDefinition })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Map of arbitrary keys and values that, when changed, will trigger an in-place update (redeployment). Useful with `timestamp()`. See example above.
func (o ServiceOutput) Triggers() pulumix.MapOutput[string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.MapOutput[string] { return v.Triggers })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
func (o ServiceOutput) WaitForSteadyState() pulumix.Output[*bool] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[*bool] { return v.WaitForSteadyState })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(ServiceOutput{})
}
