// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the ARN of a KMS key alias.
// By using this data source, you can reference key alias
// without having to hard code the ARN as input.
func LookupAlias(ctx *pulumi.Context, args *LookupAliasArgs, opts ...pulumi.InvokeOption) (*LookupAliasResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAliasResult
	err := ctx.Invoke("aws:kms/getAlias:getAlias", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAlias.
type LookupAliasArgs struct {
	// Display name of the alias. The name must start with the word "alias" followed by a forward slash (alias/)
	Name string `pulumi:"name"`
}

// A collection of values returned by getAlias.
type LookupAliasResult struct {
	// Amazon Resource Name(ARN) of the key alias.
	Arn string `pulumi:"arn"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// ARN pointed to by the alias.
	TargetKeyArn string `pulumi:"targetKeyArn"`
	// Key identifier pointed to by the alias.
	TargetKeyId string `pulumi:"targetKeyId"`
}

func LookupAliasOutput(ctx *pulumi.Context, args LookupAliasOutputArgs, opts ...pulumi.InvokeOption) LookupAliasResultOutput {
	outputResult := pulumix.ApplyErr[*LookupAliasArgs](args.ToOutput(), func(plainArgs *LookupAliasArgs) (*LookupAliasResult, error) {
		return LookupAlias(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupAliasResultOutput, *LookupAliasResult](outputResult)
}

// A collection of arguments for invoking getAlias.
type LookupAliasOutputArgs struct {
	// Display name of the alias. The name must start with the word "alias" followed by a forward slash (alias/)
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupAliasOutputArgs) ToOutput() pulumix.Output[*LookupAliasArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupAliasArgs {
		return &LookupAliasArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupAliasResultOutput struct{ *pulumi.OutputState }

func (LookupAliasResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAliasResult)(nil)).Elem()
}

func (o LookupAliasResultOutput) ToOutput(context.Context) pulumix.Output[*LookupAliasResult] {
	return pulumix.Output[*LookupAliasResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupAliasResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupAliasResult](o, func(v *LookupAliasResult) string { return v.Arn })
}

func (o LookupAliasResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupAliasResult](o, func(v *LookupAliasResult) string { return v.Id })
}

func (o LookupAliasResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupAliasResult](o, func(v *LookupAliasResult) string { return v.Name })
}

func (o LookupAliasResultOutput) TargetKeyArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupAliasResult](o, func(v *LookupAliasResult) string { return v.TargetKeyArn })
}

func (o LookupAliasResultOutput) TargetKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupAliasResult](o, func(v *LookupAliasResult) string { return v.TargetKeyId })
}
