// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to associate additional IPv6 CIDR blocks with a VPC.
//
// The `ec2.VpcIpv6CidrBlockAssociation` resource allows IPv6 CIDR blocks to be added to the VPC.
type VpcIpv6CidrBlockAssociation struct {
	pulumi.CustomResourceState

	// The IPv6 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv6NetmaskLength`. This parameter is required if `ipv6NetmaskLength` is not set and he IPAM pool does not have `allocationDefaultNetmask` set.
	Ipv6CidrBlock pulumix.Output[string] `pulumi:"ipv6CidrBlock"`
	// The ID of an IPv6 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts.
	Ipv6IpamPoolId pulumix.Output[string] `pulumi:"ipv6IpamPoolId"`
	// The netmask length of the IPv6 CIDR you want to allocate to this VPC. Requires specifying a `ipv6IpamPoolId`. This parameter is optional if the IPAM pool has `allocationDefaultNetmask` set, otherwise it or `cidrBlock` are required
	Ipv6NetmaskLength pulumix.Output[*int] `pulumi:"ipv6NetmaskLength"`
	// The ID of the VPC to make the association with.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewVpcIpv6CidrBlockAssociation registers a new resource with the given unique name, arguments, and options.
func NewVpcIpv6CidrBlockAssociation(ctx *pulumi.Context,
	name string, args *VpcIpv6CidrBlockAssociationArgs, opts ...pulumi.ResourceOption) (*VpcIpv6CidrBlockAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ipv6IpamPoolId == nil {
		return nil, errors.New("invalid value for required argument 'Ipv6IpamPoolId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcIpv6CidrBlockAssociation
	err := ctx.RegisterResource("aws:ec2/vpcIpv6CidrBlockAssociation:VpcIpv6CidrBlockAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcIpv6CidrBlockAssociation gets an existing VpcIpv6CidrBlockAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcIpv6CidrBlockAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcIpv6CidrBlockAssociationState, opts ...pulumi.ResourceOption) (*VpcIpv6CidrBlockAssociation, error) {
	var resource VpcIpv6CidrBlockAssociation
	err := ctx.ReadResource("aws:ec2/vpcIpv6CidrBlockAssociation:VpcIpv6CidrBlockAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcIpv6CidrBlockAssociation resources.
type vpcIpv6CidrBlockAssociationState struct {
	// The IPv6 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv6NetmaskLength`. This parameter is required if `ipv6NetmaskLength` is not set and he IPAM pool does not have `allocationDefaultNetmask` set.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// The ID of an IPv6 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts.
	Ipv6IpamPoolId *string `pulumi:"ipv6IpamPoolId"`
	// The netmask length of the IPv6 CIDR you want to allocate to this VPC. Requires specifying a `ipv6IpamPoolId`. This parameter is optional if the IPAM pool has `allocationDefaultNetmask` set, otherwise it or `cidrBlock` are required
	Ipv6NetmaskLength *int `pulumi:"ipv6NetmaskLength"`
	// The ID of the VPC to make the association with.
	VpcId *string `pulumi:"vpcId"`
}

type VpcIpv6CidrBlockAssociationState struct {
	// The IPv6 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv6NetmaskLength`. This parameter is required if `ipv6NetmaskLength` is not set and he IPAM pool does not have `allocationDefaultNetmask` set.
	Ipv6CidrBlock pulumix.Input[*string]
	// The ID of an IPv6 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts.
	Ipv6IpamPoolId pulumix.Input[*string]
	// The netmask length of the IPv6 CIDR you want to allocate to this VPC. Requires specifying a `ipv6IpamPoolId`. This parameter is optional if the IPAM pool has `allocationDefaultNetmask` set, otherwise it or `cidrBlock` are required
	Ipv6NetmaskLength pulumix.Input[*int]
	// The ID of the VPC to make the association with.
	VpcId pulumix.Input[*string]
}

func (VpcIpv6CidrBlockAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpv6CidrBlockAssociationState)(nil)).Elem()
}

type vpcIpv6CidrBlockAssociationArgs struct {
	// The IPv6 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv6NetmaskLength`. This parameter is required if `ipv6NetmaskLength` is not set and he IPAM pool does not have `allocationDefaultNetmask` set.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// The ID of an IPv6 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts.
	Ipv6IpamPoolId string `pulumi:"ipv6IpamPoolId"`
	// The netmask length of the IPv6 CIDR you want to allocate to this VPC. Requires specifying a `ipv6IpamPoolId`. This parameter is optional if the IPAM pool has `allocationDefaultNetmask` set, otherwise it or `cidrBlock` are required
	Ipv6NetmaskLength *int `pulumi:"ipv6NetmaskLength"`
	// The ID of the VPC to make the association with.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcIpv6CidrBlockAssociation resource.
type VpcIpv6CidrBlockAssociationArgs struct {
	// The IPv6 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv6NetmaskLength`. This parameter is required if `ipv6NetmaskLength` is not set and he IPAM pool does not have `allocationDefaultNetmask` set.
	Ipv6CidrBlock pulumix.Input[*string]
	// The ID of an IPv6 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts.
	Ipv6IpamPoolId pulumix.Input[string]
	// The netmask length of the IPv6 CIDR you want to allocate to this VPC. Requires specifying a `ipv6IpamPoolId`. This parameter is optional if the IPAM pool has `allocationDefaultNetmask` set, otherwise it or `cidrBlock` are required
	Ipv6NetmaskLength pulumix.Input[*int]
	// The ID of the VPC to make the association with.
	VpcId pulumix.Input[string]
}

func (VpcIpv6CidrBlockAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpv6CidrBlockAssociationArgs)(nil)).Elem()
}

type VpcIpv6CidrBlockAssociationOutput struct{ *pulumi.OutputState }

func (VpcIpv6CidrBlockAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcIpv6CidrBlockAssociation)(nil)).Elem()
}

func (o VpcIpv6CidrBlockAssociationOutput) ToVpcIpv6CidrBlockAssociationOutput() VpcIpv6CidrBlockAssociationOutput {
	return o
}

func (o VpcIpv6CidrBlockAssociationOutput) ToVpcIpv6CidrBlockAssociationOutputWithContext(ctx context.Context) VpcIpv6CidrBlockAssociationOutput {
	return o
}

func (o VpcIpv6CidrBlockAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[VpcIpv6CidrBlockAssociation] {
	return pulumix.Output[VpcIpv6CidrBlockAssociation]{
		OutputState: o.OutputState,
	}
}

// The IPv6 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv6NetmaskLength`. This parameter is required if `ipv6NetmaskLength` is not set and he IPAM pool does not have `allocationDefaultNetmask` set.
func (o VpcIpv6CidrBlockAssociationOutput) Ipv6CidrBlock() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpv6CidrBlockAssociation](o, func(v VpcIpv6CidrBlockAssociation) pulumix.Output[string] { return v.Ipv6CidrBlock })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of an IPv6 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts.
func (o VpcIpv6CidrBlockAssociationOutput) Ipv6IpamPoolId() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpv6CidrBlockAssociation](o, func(v VpcIpv6CidrBlockAssociation) pulumix.Output[string] { return v.Ipv6IpamPoolId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The netmask length of the IPv6 CIDR you want to allocate to this VPC. Requires specifying a `ipv6IpamPoolId`. This parameter is optional if the IPAM pool has `allocationDefaultNetmask` set, otherwise it or `cidrBlock` are required
func (o VpcIpv6CidrBlockAssociationOutput) Ipv6NetmaskLength() pulumix.Output[*int] {
	value := pulumix.Apply[VpcIpv6CidrBlockAssociation](o, func(v VpcIpv6CidrBlockAssociation) pulumix.Output[*int] { return v.Ipv6NetmaskLength })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The ID of the VPC to make the association with.
func (o VpcIpv6CidrBlockAssociationOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpv6CidrBlockAssociation](o, func(v VpcIpv6CidrBlockAssociation) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VpcIpv6CidrBlockAssociationOutput{})
}
