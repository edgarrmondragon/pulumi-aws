// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticache

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about an ElastiCache User.
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("aws:elasticache/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// String for what access a user possesses within the associated ElastiCache replication groups or clusters.
	AccessString        *string                     `pulumi:"accessString"`
	AuthenticationModes []GetUserAuthenticationMode `pulumi:"authenticationModes"`
	Engine              *string                     `pulumi:"engine"`
	NoPasswordRequired  *bool                       `pulumi:"noPasswordRequired"`
	Passwords           []string                    `pulumi:"passwords"`
	// Identifier for the user.
	UserId string `pulumi:"userId"`
	// User name of the user.
	UserName *string `pulumi:"userName"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// String for what access a user possesses within the associated ElastiCache replication groups or clusters.
	AccessString        *string                     `pulumi:"accessString"`
	AuthenticationModes []GetUserAuthenticationMode `pulumi:"authenticationModes"`
	Engine              *string                     `pulumi:"engine"`
	// The provider-assigned unique ID for this managed resource.
	Id                 string   `pulumi:"id"`
	NoPasswordRequired *bool    `pulumi:"noPasswordRequired"`
	Passwords          []string `pulumi:"passwords"`
	// Identifier for the user.
	UserId string `pulumi:"userId"`
	// User name of the user.
	UserName *string `pulumi:"userName"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	outputResult := pulumix.ApplyErr[*LookupUserArgs](args.ToOutput(), func(plainArgs *LookupUserArgs) (*LookupUserResult, error) {
		return LookupUser(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupUserResultOutput, *LookupUserResult](outputResult)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// String for what access a user possesses within the associated ElastiCache replication groups or clusters.
	AccessString        pulumix.Input[*string]                          `pulumi:"accessString"`
	AuthenticationModes pulumix.Input[[]*GetUserAuthenticationModeArgs] `pulumi:"authenticationModes"`
	Engine              pulumix.Input[*string]                          `pulumi:"engine"`
	NoPasswordRequired  pulumix.Input[*bool]                            `pulumi:"noPasswordRequired"`
	Passwords           pulumix.Input[[]string]                         `pulumi:"passwords"`
	// Identifier for the user.
	UserId pulumix.Input[string] `pulumi:"userId"`
	// User name of the user.
	UserName pulumix.Input[*string] `pulumi:"userName"`
}

func (args LookupUserOutputArgs) ToOutput() pulumix.Output[*LookupUserArgs] {
	allArgs := pulumix.All(
		args.AccessString.ToOutput(context.Background()).AsAny(),
		args.AuthenticationModes.ToOutput(context.Background()).AsAny(),
		args.Engine.ToOutput(context.Background()).AsAny(),
		args.NoPasswordRequired.ToOutput(context.Background()).AsAny(),
		args.Passwords.ToOutput(context.Background()).AsAny(),
		args.UserId.ToOutput(context.Background()).AsAny(),
		args.UserName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupUserArgs {
		return &LookupUserArgs{
			AccessString:        resolvedArgs[0].(*string),
			AuthenticationModes: resolvedArgs[1].([]GetUserAuthenticationMode),
			Engine:              resolvedArgs[2].(*string),
			NoPasswordRequired:  resolvedArgs[3].(*bool),
			Passwords:           resolvedArgs[4].([]string),
			UserId:              resolvedArgs[5].(string),
			UserName:            resolvedArgs[6].(*string),
		}
	})
}

type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToOutput(context.Context) pulumix.Output[*LookupUserResult] {
	return pulumix.Output[*LookupUserResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupUserResultOutput) AccessString() pulumix.Output[*string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) *string { return v.AccessString })
}

func (o LookupUserResultOutput) AuthenticationModes() pulumix.GArrayOutput[GetUserAuthenticationMode, GetUserAuthenticationModeOutput] {
	value := pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) []GetUserAuthenticationMode { return v.AuthenticationModes })
	return pulumix.GArrayOutput[GetUserAuthenticationMode, GetUserAuthenticationModeOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserResultOutput) Engine() pulumix.Output[*string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) *string { return v.Engine })
}

func (o LookupUserResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.Id })
}

func (o LookupUserResultOutput) NoPasswordRequired() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) *bool { return v.NoPasswordRequired })
}

func (o LookupUserResultOutput) Passwords() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) []string { return v.Passwords })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserResultOutput) UserId() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.UserId })
}

func (o LookupUserResultOutput) UserName() pulumix.Output[*string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) *string { return v.UserName })
}
