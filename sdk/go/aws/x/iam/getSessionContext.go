// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source provides information on the IAM source role of an STS assumed role. For non-role ARNs, this data source simply passes the ARN through in `issuerArn`.
//
// For some AWS resources, multiple types of principals are allowed in the same argument (e.g., IAM users and IAM roles). However, these arguments often do not allow assumed-role (i.e., STS, temporary credential) principals. Given an STS ARN, this data source provides the ARN for the source IAM role.
func GetSessionContext(ctx *pulumi.Context, args *GetSessionContextArgs, opts ...pulumi.InvokeOption) (*GetSessionContextResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSessionContextResult
	err := ctx.Invoke("aws:iam/getSessionContext:getSessionContext", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSessionContext.
type GetSessionContextArgs struct {
	// ARN for an assumed role.
	//
	// > If `arn` is a non-role ARN, the provider gives no error and `issuerArn` will be equal to the `arn` value. For STS assumed-role ARNs, the provider gives an error if the identified IAM role does not exist.
	Arn string `pulumi:"arn"`
}

// A collection of values returned by getSessionContext.
type GetSessionContextResult struct {
	Arn string `pulumi:"arn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// IAM source role ARN if `arn` corresponds to an STS assumed role. Otherwise, `issuerArn` is equal to `arn`.
	IssuerArn string `pulumi:"issuerArn"`
	// Unique identifier of the IAM role that issues the STS assumed role.
	IssuerId string `pulumi:"issuerId"`
	// Name of the source role. Only available if `arn` corresponds to an STS assumed role.
	IssuerName string `pulumi:"issuerName"`
	// Name of the STS session. Only available if `arn` corresponds to an STS assumed role.
	SessionName string `pulumi:"sessionName"`
}

func GetSessionContextOutput(ctx *pulumi.Context, args GetSessionContextOutputArgs, opts ...pulumi.InvokeOption) GetSessionContextResultOutput {
	outputResult := pulumix.ApplyErr[*GetSessionContextArgs](args.ToOutput(), func(plainArgs *GetSessionContextArgs) (*GetSessionContextResult, error) {
		return GetSessionContext(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetSessionContextResultOutput, *GetSessionContextResult](outputResult)
}

// A collection of arguments for invoking getSessionContext.
type GetSessionContextOutputArgs struct {
	// ARN for an assumed role.
	//
	// > If `arn` is a non-role ARN, the provider gives no error and `issuerArn` will be equal to the `arn` value. For STS assumed-role ARNs, the provider gives an error if the identified IAM role does not exist.
	Arn pulumix.Input[string] `pulumi:"arn"`
}

func (args GetSessionContextOutputArgs) ToOutput() pulumix.Output[*GetSessionContextArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetSessionContextArgs {
		return &GetSessionContextArgs{
			Arn: resolvedArgs[0].(string),
		}
	})
}

type GetSessionContextResultOutput struct{ *pulumi.OutputState }

func (GetSessionContextResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSessionContextResult)(nil)).Elem()
}

func (o GetSessionContextResultOutput) ToOutput(context.Context) pulumix.Output[*GetSessionContextResult] {
	return pulumix.Output[*GetSessionContextResult]{
		OutputState: o.OutputState,
	}
}

func (o GetSessionContextResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*GetSessionContextResult](o, func(v *GetSessionContextResult) string { return v.Arn })
}

func (o GetSessionContextResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetSessionContextResult](o, func(v *GetSessionContextResult) string { return v.Id })
}

func (o GetSessionContextResultOutput) IssuerArn() pulumix.Output[string] {
	return pulumix.Apply[*GetSessionContextResult](o, func(v *GetSessionContextResult) string { return v.IssuerArn })
}

func (o GetSessionContextResultOutput) IssuerId() pulumix.Output[string] {
	return pulumix.Apply[*GetSessionContextResult](o, func(v *GetSessionContextResult) string { return v.IssuerId })
}

func (o GetSessionContextResultOutput) IssuerName() pulumix.Output[string] {
	return pulumix.Apply[*GetSessionContextResult](o, func(v *GetSessionContextResult) string { return v.IssuerName })
}

func (o GetSessionContextResultOutput) SessionName() pulumix.Output[string] {
	return pulumix.Apply[*GetSessionContextResult](o, func(v *GetSessionContextResult) string { return v.SessionName })
}
