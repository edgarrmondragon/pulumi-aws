// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about Location Service Tracker Associations.
func GetTrackerAssociations(ctx *pulumi.Context, args *GetTrackerAssociationsArgs, opts ...pulumi.InvokeOption) (*GetTrackerAssociationsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTrackerAssociationsResult
	err := ctx.Invoke("aws:location/getTrackerAssociations:getTrackerAssociations", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTrackerAssociations.
type GetTrackerAssociationsArgs struct {
	// Name of the tracker resource associated with a geofence collection.
	TrackerName string `pulumi:"trackerName"`
}

// A collection of values returned by getTrackerAssociations.
type GetTrackerAssociationsResult struct {
	// List of geofence collection ARNs associated to the tracker resource.
	ConsumerArns []string `pulumi:"consumerArns"`
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	TrackerName string `pulumi:"trackerName"`
}

func GetTrackerAssociationsOutput(ctx *pulumi.Context, args GetTrackerAssociationsOutputArgs, opts ...pulumi.InvokeOption) GetTrackerAssociationsResultOutput {
	outputResult := pulumix.ApplyErr[*GetTrackerAssociationsArgs](args.ToOutput(), func(plainArgs *GetTrackerAssociationsArgs) (*GetTrackerAssociationsResult, error) {
		return GetTrackerAssociations(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetTrackerAssociationsResultOutput, *GetTrackerAssociationsResult](outputResult)
}

// A collection of arguments for invoking getTrackerAssociations.
type GetTrackerAssociationsOutputArgs struct {
	// Name of the tracker resource associated with a geofence collection.
	TrackerName pulumix.Input[string] `pulumi:"trackerName"`
}

func (args GetTrackerAssociationsOutputArgs) ToOutput() pulumix.Output[*GetTrackerAssociationsArgs] {
	allArgs := pulumix.All(
		args.TrackerName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetTrackerAssociationsArgs {
		return &GetTrackerAssociationsArgs{
			TrackerName: resolvedArgs[0].(string),
		}
	})
}

type GetTrackerAssociationsResultOutput struct{ *pulumi.OutputState }

func (GetTrackerAssociationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrackerAssociationsResult)(nil)).Elem()
}

func (o GetTrackerAssociationsResultOutput) ToOutput(context.Context) pulumix.Output[*GetTrackerAssociationsResult] {
	return pulumix.Output[*GetTrackerAssociationsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetTrackerAssociationsResultOutput) ConsumerArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetTrackerAssociationsResult](o, func(v *GetTrackerAssociationsResult) []string { return v.ConsumerArns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetTrackerAssociationsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetTrackerAssociationsResult](o, func(v *GetTrackerAssociationsResult) string { return v.Id })
}

func (o GetTrackerAssociationsResultOutput) TrackerName() pulumix.Output[string] {
	return pulumix.Apply[*GetTrackerAssociationsResult](o, func(v *GetTrackerAssociationsResult) string { return v.TrackerName })
}
