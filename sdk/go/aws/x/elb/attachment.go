// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Attaches an EC2 instance to an Elastic Load Balancer (ELB). For attaching resources with Application Load Balancer (ALB) or Network Load Balancer (NLB), see the `lb.TargetGroupAttachment` resource.
//
// > **NOTE on ELB Instances and ELB Attachments:** This provider currently provides
// both a standalone ELB Attachment resource (describing an instance attached to
// an ELB), and an Elastic Load Balancer resource with
// `instances` defined in-line. At this time you cannot use an ELB with in-line
// instances in conjunction with an ELB Attachment resource. Doing so will cause a
// conflict and will overwrite attachments.
type Attachment struct {
	pulumi.CustomResourceState

	// The name of the ELB.
	Elb pulumix.Output[string] `pulumi:"elb"`
	// Instance ID to place in the ELB pool.
	Instance pulumix.Output[string] `pulumi:"instance"`
}

// NewAttachment registers a new resource with the given unique name, arguments, and options.
func NewAttachment(ctx *pulumi.Context,
	name string, args *AttachmentArgs, opts ...pulumi.ResourceOption) (*Attachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Elb == nil {
		return nil, errors.New("invalid value for required argument 'Elb'")
	}
	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:elasticloadbalancing/attachment:Attachment"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Attachment
	err := ctx.RegisterResource("aws:elb/attachment:Attachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttachment gets an existing Attachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttachmentState, opts ...pulumi.ResourceOption) (*Attachment, error) {
	var resource Attachment
	err := ctx.ReadResource("aws:elb/attachment:Attachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Attachment resources.
type attachmentState struct {
	// The name of the ELB.
	Elb *string `pulumi:"elb"`
	// Instance ID to place in the ELB pool.
	Instance *string `pulumi:"instance"`
}

type AttachmentState struct {
	// The name of the ELB.
	Elb pulumix.Input[*string]
	// Instance ID to place in the ELB pool.
	Instance pulumix.Input[*string]
}

func (AttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*attachmentState)(nil)).Elem()
}

type attachmentArgs struct {
	// The name of the ELB.
	Elb string `pulumi:"elb"`
	// Instance ID to place in the ELB pool.
	Instance string `pulumi:"instance"`
}

// The set of arguments for constructing a Attachment resource.
type AttachmentArgs struct {
	// The name of the ELB.
	Elb pulumix.Input[string]
	// Instance ID to place in the ELB pool.
	Instance pulumix.Input[string]
}

func (AttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attachmentArgs)(nil)).Elem()
}

type AttachmentOutput struct{ *pulumi.OutputState }

func (AttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Attachment)(nil)).Elem()
}

func (o AttachmentOutput) ToAttachmentOutput() AttachmentOutput {
	return o
}

func (o AttachmentOutput) ToAttachmentOutputWithContext(ctx context.Context) AttachmentOutput {
	return o
}

func (o AttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[Attachment] {
	return pulumix.Output[Attachment]{
		OutputState: o.OutputState,
	}
}

// The name of the ELB.
func (o AttachmentOutput) Elb() pulumix.Output[string] {
	value := pulumix.Apply[Attachment](o, func(v Attachment) pulumix.Output[string] { return v.Elb })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Instance ID to place in the ELB pool.
func (o AttachmentOutput) Instance() pulumix.Output[string] {
	value := pulumix.Apply[Attachment](o, func(v Attachment) pulumix.Output[string] { return v.Instance })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(AttachmentOutput{})
}
