// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information on an existing backup plan.
func LookupPlan(ctx *pulumi.Context, args *LookupPlanArgs, opts ...pulumi.InvokeOption) (*LookupPlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPlanResult
	err := ctx.Invoke("aws:backup/getPlan:getPlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlan.
type LookupPlanArgs struct {
	// Backup plan ID.
	PlanId string `pulumi:"planId"`
	// Metadata that you can assign to help organize the plans you create.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getPlan.
type LookupPlanResult struct {
	// ARN of the backup plan.
	Arn string `pulumi:"arn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Display name of a backup plan.
	Name   string `pulumi:"name"`
	PlanId string `pulumi:"planId"`
	// Metadata that you can assign to help organize the plans you create.
	Tags map[string]string `pulumi:"tags"`
	// Unique, randomly generated, Unicode, UTF-8 encoded string that serves as the version ID of the backup plan.
	Version string `pulumi:"version"`
}

func LookupPlanOutput(ctx *pulumi.Context, args LookupPlanOutputArgs, opts ...pulumi.InvokeOption) LookupPlanResultOutput {
	outputResult := pulumix.ApplyErr[*LookupPlanArgs](args.ToOutput(), func(plainArgs *LookupPlanArgs) (*LookupPlanResult, error) {
		return LookupPlan(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupPlanResultOutput, *LookupPlanResult](outputResult)
}

// A collection of arguments for invoking getPlan.
type LookupPlanOutputArgs struct {
	// Backup plan ID.
	PlanId pulumix.Input[string] `pulumi:"planId"`
	// Metadata that you can assign to help organize the plans you create.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupPlanOutputArgs) ToOutput() pulumix.Output[*LookupPlanArgs] {
	allArgs := pulumix.All(
		args.PlanId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupPlanArgs {
		return &LookupPlanArgs{
			PlanId: resolvedArgs[0].(string),
			Tags:   resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupPlanResultOutput struct{ *pulumi.OutputState }

func (LookupPlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanResult)(nil)).Elem()
}

func (o LookupPlanResultOutput) ToOutput(context.Context) pulumix.Output[*LookupPlanResult] {
	return pulumix.Output[*LookupPlanResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupPlanResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupPlanResult](o, func(v *LookupPlanResult) string { return v.Arn })
}

func (o LookupPlanResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupPlanResult](o, func(v *LookupPlanResult) string { return v.Id })
}

func (o LookupPlanResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupPlanResult](o, func(v *LookupPlanResult) string { return v.Name })
}

func (o LookupPlanResultOutput) PlanId() pulumix.Output[string] {
	return pulumix.Apply[*LookupPlanResult](o, func(v *LookupPlanResult) string { return v.PlanId })
}

func (o LookupPlanResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupPlanResult](o, func(v *LookupPlanResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupPlanResultOutput) Version() pulumix.Output[string] {
	return pulumix.Apply[*LookupPlanResult](o, func(v *LookupPlanResult) string { return v.Version })
}
