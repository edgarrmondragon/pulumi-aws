// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Batch Job Definition resource.
type JobDefinition struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name of the job definition.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A valid [container properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html)
	// provided as a single valid JSON document. This parameter is required if the `type` parameter is `container`.
	ContainerProperties pulumix.Output[*string] `pulumi:"containerProperties"`
	// Specifies the name of the job definition.
	Name pulumix.Output[string] `pulumi:"name"`
	// Specifies the parameter substitution placeholders to set in the job definition.
	Parameters pulumix.MapOutput[string] `pulumi:"parameters"`
	// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
	PlatformCapabilities pulumix.ArrayOutput[string] `pulumi:"platformCapabilities"`
	// Specifies whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is `false`.
	PropagateTags pulumix.Output[*bool] `pulumi:"propagateTags"`
	// Specifies the retry strategy to use for failed jobs that are submitted with this job definition.
	// Maximum number of `retryStrategy` is `1`.  Defined below.
	RetryStrategy pulumix.GPtrOutput[JobDefinitionRetryStrategy, JobDefinitionRetryStrategyOutput] `pulumi:"retryStrategy"`
	// The revision of the job definition.
	Revision pulumix.Output[int] `pulumi:"revision"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`. Defined below.
	Timeout pulumix.GPtrOutput[JobDefinitionTimeout, JobDefinitionTimeoutOutput] `pulumi:"timeout"`
	// The type of job definition. Must be `container`.
	//
	// The following arguments are optional:
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewJobDefinition registers a new resource with the given unique name, arguments, and options.
func NewJobDefinition(ctx *pulumi.Context,
	name string, args *JobDefinitionArgs, opts ...pulumi.ResourceOption) (*JobDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource JobDefinition
	err := ctx.RegisterResource("aws:batch/jobDefinition:JobDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobDefinition gets an existing JobDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobDefinitionState, opts ...pulumi.ResourceOption) (*JobDefinition, error) {
	var resource JobDefinition
	err := ctx.ReadResource("aws:batch/jobDefinition:JobDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobDefinition resources.
type jobDefinitionState struct {
	// The Amazon Resource Name of the job definition.
	Arn *string `pulumi:"arn"`
	// A valid [container properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html)
	// provided as a single valid JSON document. This parameter is required if the `type` parameter is `container`.
	ContainerProperties *string `pulumi:"containerProperties"`
	// Specifies the name of the job definition.
	Name *string `pulumi:"name"`
	// Specifies the parameter substitution placeholders to set in the job definition.
	Parameters map[string]string `pulumi:"parameters"`
	// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
	PlatformCapabilities []string `pulumi:"platformCapabilities"`
	// Specifies whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is `false`.
	PropagateTags *bool `pulumi:"propagateTags"`
	// Specifies the retry strategy to use for failed jobs that are submitted with this job definition.
	// Maximum number of `retryStrategy` is `1`.  Defined below.
	RetryStrategy *JobDefinitionRetryStrategy `pulumi:"retryStrategy"`
	// The revision of the job definition.
	Revision *int `pulumi:"revision"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`. Defined below.
	Timeout *JobDefinitionTimeout `pulumi:"timeout"`
	// The type of job definition. Must be `container`.
	//
	// The following arguments are optional:
	Type *string `pulumi:"type"`
}

type JobDefinitionState struct {
	// The Amazon Resource Name of the job definition.
	Arn pulumix.Input[*string]
	// A valid [container properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html)
	// provided as a single valid JSON document. This parameter is required if the `type` parameter is `container`.
	ContainerProperties pulumix.Input[*string]
	// Specifies the name of the job definition.
	Name pulumix.Input[*string]
	// Specifies the parameter substitution placeholders to set in the job definition.
	Parameters pulumix.Input[map[string]string]
	// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
	PlatformCapabilities pulumix.Input[[]string]
	// Specifies whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is `false`.
	PropagateTags pulumix.Input[*bool]
	// Specifies the retry strategy to use for failed jobs that are submitted with this job definition.
	// Maximum number of `retryStrategy` is `1`.  Defined below.
	RetryStrategy pulumix.Input[*JobDefinitionRetryStrategyArgs]
	// The revision of the job definition.
	Revision pulumix.Input[*int]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`. Defined below.
	Timeout pulumix.Input[*JobDefinitionTimeoutArgs]
	// The type of job definition. Must be `container`.
	//
	// The following arguments are optional:
	Type pulumix.Input[*string]
}

func (JobDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobDefinitionState)(nil)).Elem()
}

type jobDefinitionArgs struct {
	// A valid [container properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html)
	// provided as a single valid JSON document. This parameter is required if the `type` parameter is `container`.
	ContainerProperties *string `pulumi:"containerProperties"`
	// Specifies the name of the job definition.
	Name *string `pulumi:"name"`
	// Specifies the parameter substitution placeholders to set in the job definition.
	Parameters map[string]string `pulumi:"parameters"`
	// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
	PlatformCapabilities []string `pulumi:"platformCapabilities"`
	// Specifies whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is `false`.
	PropagateTags *bool `pulumi:"propagateTags"`
	// Specifies the retry strategy to use for failed jobs that are submitted with this job definition.
	// Maximum number of `retryStrategy` is `1`.  Defined below.
	RetryStrategy *JobDefinitionRetryStrategy `pulumi:"retryStrategy"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`. Defined below.
	Timeout *JobDefinitionTimeout `pulumi:"timeout"`
	// The type of job definition. Must be `container`.
	//
	// The following arguments are optional:
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a JobDefinition resource.
type JobDefinitionArgs struct {
	// A valid [container properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html)
	// provided as a single valid JSON document. This parameter is required if the `type` parameter is `container`.
	ContainerProperties pulumix.Input[*string]
	// Specifies the name of the job definition.
	Name pulumix.Input[*string]
	// Specifies the parameter substitution placeholders to set in the job definition.
	Parameters pulumix.Input[map[string]string]
	// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
	PlatformCapabilities pulumix.Input[[]string]
	// Specifies whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is `false`.
	PropagateTags pulumix.Input[*bool]
	// Specifies the retry strategy to use for failed jobs that are submitted with this job definition.
	// Maximum number of `retryStrategy` is `1`.  Defined below.
	RetryStrategy pulumix.Input[*JobDefinitionRetryStrategyArgs]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`. Defined below.
	Timeout pulumix.Input[*JobDefinitionTimeoutArgs]
	// The type of job definition. Must be `container`.
	//
	// The following arguments are optional:
	Type pulumix.Input[string]
}

func (JobDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobDefinitionArgs)(nil)).Elem()
}

type JobDefinitionOutput struct{ *pulumi.OutputState }

func (JobDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinition)(nil)).Elem()
}

func (o JobDefinitionOutput) ToJobDefinitionOutput() JobDefinitionOutput {
	return o
}

func (o JobDefinitionOutput) ToJobDefinitionOutputWithContext(ctx context.Context) JobDefinitionOutput {
	return o
}

func (o JobDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[JobDefinition] {
	return pulumix.Output[JobDefinition]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name of the job definition.
func (o JobDefinitionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[JobDefinition](o, func(v JobDefinition) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A valid [container properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html)
// provided as a single valid JSON document. This parameter is required if the `type` parameter is `container`.
func (o JobDefinitionOutput) ContainerProperties() pulumix.Output[*string] {
	value := pulumix.Apply[JobDefinition](o, func(v JobDefinition) pulumix.Output[*string] { return v.ContainerProperties })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Specifies the name of the job definition.
func (o JobDefinitionOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[JobDefinition](o, func(v JobDefinition) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the parameter substitution placeholders to set in the job definition.
func (o JobDefinitionOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[JobDefinition](o, func(v JobDefinition) pulumix.MapOutput[string] { return v.Parameters })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
func (o JobDefinitionOutput) PlatformCapabilities() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[JobDefinition](o, func(v JobDefinition) pulumix.ArrayOutput[string] { return v.PlatformCapabilities })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Specifies whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is `false`.
func (o JobDefinitionOutput) PropagateTags() pulumix.Output[*bool] {
	value := pulumix.Apply[JobDefinition](o, func(v JobDefinition) pulumix.Output[*bool] { return v.PropagateTags })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Specifies the retry strategy to use for failed jobs that are submitted with this job definition.
// Maximum number of `retryStrategy` is `1`.  Defined below.
func (o JobDefinitionOutput) RetryStrategy() pulumix.GPtrOutput[JobDefinitionRetryStrategy, JobDefinitionRetryStrategyOutput] {
	value := pulumix.Apply[JobDefinition](o, func(v JobDefinition) pulumix.GPtrOutput[JobDefinitionRetryStrategy, JobDefinitionRetryStrategyOutput] {
		return v.RetryStrategy
	})
	unwrapped := pulumix.Flatten[*JobDefinitionRetryStrategy, pulumix.GPtrOutput[JobDefinitionRetryStrategy, JobDefinitionRetryStrategyOutput]](value)
	return pulumix.GPtrOutput[JobDefinitionRetryStrategy, JobDefinitionRetryStrategyOutput]{OutputState: unwrapped.OutputState}
}

// The revision of the job definition.
func (o JobDefinitionOutput) Revision() pulumix.Output[int] {
	value := pulumix.Apply[JobDefinition](o, func(v JobDefinition) pulumix.Output[int] { return v.Revision })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o JobDefinitionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[JobDefinition](o, func(v JobDefinition) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o JobDefinitionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[JobDefinition](o, func(v JobDefinition) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`. Defined below.
func (o JobDefinitionOutput) Timeout() pulumix.GPtrOutput[JobDefinitionTimeout, JobDefinitionTimeoutOutput] {
	value := pulumix.Apply[JobDefinition](o, func(v JobDefinition) pulumix.GPtrOutput[JobDefinitionTimeout, JobDefinitionTimeoutOutput] {
		return v.Timeout
	})
	unwrapped := pulumix.Flatten[*JobDefinitionTimeout, pulumix.GPtrOutput[JobDefinitionTimeout, JobDefinitionTimeoutOutput]](value)
	return pulumix.GPtrOutput[JobDefinitionTimeout, JobDefinitionTimeoutOutput]{OutputState: unwrapped.OutputState}
}

// The type of job definition. Must be `container`.
//
// The following arguments are optional:
func (o JobDefinitionOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[JobDefinition](o, func(v JobDefinition) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(JobDefinitionOutput{})
}
