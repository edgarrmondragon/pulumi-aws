// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about a Kinesis Stream for use in other
// resources.
//
// For more details, see the [Amazon Kinesis Documentation](https://aws.amazon.com/documentation/kinesis/).
func LookupStream(ctx *pulumi.Context, args *LookupStreamArgs, opts ...pulumi.InvokeOption) (*LookupStreamResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamResult
	err := ctx.Invoke("aws:kinesis/getStream:getStream", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStream.
type LookupStreamArgs struct {
	// Name of the Kinesis Stream.
	Name string `pulumi:"name"`
	// Map of tags to assigned to the stream.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getStream.
type LookupStreamResult struct {
	// ARN of the Kinesis Stream (same as id).
	Arn string `pulumi:"arn"`
	// List of shard ids in the CLOSED state. See [Shard State](https://docs.aws.amazon.com/streams/latest/dev/kinesis-using-sdk-java-after-resharding.html#kinesis-using-sdk-java-resharding-data-routing) for more.
	ClosedShards []string `pulumi:"closedShards"`
	// Approximate UNIX timestamp that the stream was created.
	CreationTimestamp int `pulumi:"creationTimestamp"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the Kinesis Stream.
	Name string `pulumi:"name"`
	// List of shard ids in the OPEN state. See [Shard State](https://docs.aws.amazon.com/streams/latest/dev/kinesis-using-sdk-java-after-resharding.html#kinesis-using-sdk-java-resharding-data-routing) for more.
	OpenShards []string `pulumi:"openShards"`
	// Length of time (in hours) data records are accessible after they are added to the stream.
	RetentionPeriod int `pulumi:"retentionPeriod"`
	// List of shard-level CloudWatch metrics which are enabled for the stream. See [Monitoring with CloudWatch](https://docs.aws.amazon.com/streams/latest/dev/monitoring-with-cloudwatch.html) for more.
	ShardLevelMetrics []string `pulumi:"shardLevelMetrics"`
	// Current status of the stream. The stream status is one of CREATING, DELETING, ACTIVE, or UPDATING.
	Status string `pulumi:"status"`
	// [Capacity mode](https://docs.aws.amazon.com/streams/latest/dev/how-do-i-size-a-stream.html) of the data stream. Detailed below.
	StreamModeDetails []GetStreamStreamModeDetail `pulumi:"streamModeDetails"`
	// Map of tags to assigned to the stream.
	Tags map[string]string `pulumi:"tags"`
}

func LookupStreamOutput(ctx *pulumi.Context, args LookupStreamOutputArgs, opts ...pulumi.InvokeOption) LookupStreamResultOutput {
	outputResult := pulumix.ApplyErr[*LookupStreamArgs](args.ToOutput(), func(plainArgs *LookupStreamArgs) (*LookupStreamResult, error) {
		return LookupStream(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupStreamResultOutput, *LookupStreamResult](outputResult)
}

// A collection of arguments for invoking getStream.
type LookupStreamOutputArgs struct {
	// Name of the Kinesis Stream.
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of tags to assigned to the stream.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupStreamOutputArgs) ToOutput() pulumix.Output[*LookupStreamArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupStreamArgs {
		return &LookupStreamArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupStreamResultOutput struct{ *pulumi.OutputState }

func (LookupStreamResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamResult)(nil)).Elem()
}

func (o LookupStreamResultOutput) ToOutput(context.Context) pulumix.Output[*LookupStreamResult] {
	return pulumix.Output[*LookupStreamResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupStreamResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupStreamResult](o, func(v *LookupStreamResult) string { return v.Arn })
}

func (o LookupStreamResultOutput) ClosedShards() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupStreamResult](o, func(v *LookupStreamResult) []string { return v.ClosedShards })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupStreamResultOutput) CreationTimestamp() pulumix.Output[int] {
	return pulumix.Apply[*LookupStreamResult](o, func(v *LookupStreamResult) int { return v.CreationTimestamp })
}

func (o LookupStreamResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupStreamResult](o, func(v *LookupStreamResult) string { return v.Id })
}

func (o LookupStreamResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupStreamResult](o, func(v *LookupStreamResult) string { return v.Name })
}

func (o LookupStreamResultOutput) OpenShards() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupStreamResult](o, func(v *LookupStreamResult) []string { return v.OpenShards })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupStreamResultOutput) RetentionPeriod() pulumix.Output[int] {
	return pulumix.Apply[*LookupStreamResult](o, func(v *LookupStreamResult) int { return v.RetentionPeriod })
}

func (o LookupStreamResultOutput) ShardLevelMetrics() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupStreamResult](o, func(v *LookupStreamResult) []string { return v.ShardLevelMetrics })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupStreamResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupStreamResult](o, func(v *LookupStreamResult) string { return v.Status })
}

func (o LookupStreamResultOutput) StreamModeDetails() pulumix.GArrayOutput[GetStreamStreamModeDetail, GetStreamStreamModeDetailOutput] {
	value := pulumix.Apply[*LookupStreamResult](o, func(v *LookupStreamResult) []GetStreamStreamModeDetail { return v.StreamModeDetails })
	return pulumix.GArrayOutput[GetStreamStreamModeDetail, GetStreamStreamModeDetailOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupStreamResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupStreamResult](o, func(v *LookupStreamResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
