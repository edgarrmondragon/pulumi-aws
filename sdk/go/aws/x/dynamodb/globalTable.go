// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages [DynamoDB Global Tables V1 (version 2017.11.29)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html). These are layered on top of existing DynamoDB Tables.
//
// > **NOTE:** To instead manage [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html), use the `dynamodb.Table` resource `replica` configuration block.
//
// > Note: There are many restrictions before you can properly create DynamoDB Global Tables in multiple regions. See the [AWS DynamoDB Global Table Requirements](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables_reqs_bestpractices.html) for more information.
type GlobalTable struct {
	pulumi.CustomResourceState

	// The ARN of the DynamoDB Global Table
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The name of the global table. Must match underlying DynamoDB Table names in all regions.
	Name pulumix.Output[string] `pulumi:"name"`
	// Underlying DynamoDB Table. At least 1 replica must be defined. See below.
	Replicas pulumix.GArrayOutput[GlobalTableReplica, GlobalTableReplicaOutput] `pulumi:"replicas"`
}

// NewGlobalTable registers a new resource with the given unique name, arguments, and options.
func NewGlobalTable(ctx *pulumi.Context,
	name string, args *GlobalTableArgs, opts ...pulumi.ResourceOption) (*GlobalTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Replicas == nil {
		return nil, errors.New("invalid value for required argument 'Replicas'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GlobalTable
	err := ctx.RegisterResource("aws:dynamodb/globalTable:GlobalTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobalTable gets an existing GlobalTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalTableState, opts ...pulumi.ResourceOption) (*GlobalTable, error) {
	var resource GlobalTable
	err := ctx.ReadResource("aws:dynamodb/globalTable:GlobalTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlobalTable resources.
type globalTableState struct {
	// The ARN of the DynamoDB Global Table
	Arn *string `pulumi:"arn"`
	// The name of the global table. Must match underlying DynamoDB Table names in all regions.
	Name *string `pulumi:"name"`
	// Underlying DynamoDB Table. At least 1 replica must be defined. See below.
	Replicas []GlobalTableReplica `pulumi:"replicas"`
}

type GlobalTableState struct {
	// The ARN of the DynamoDB Global Table
	Arn pulumix.Input[*string]
	// The name of the global table. Must match underlying DynamoDB Table names in all regions.
	Name pulumix.Input[*string]
	// Underlying DynamoDB Table. At least 1 replica must be defined. See below.
	Replicas pulumix.Input[[]*GlobalTableReplicaArgs]
}

func (GlobalTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*globalTableState)(nil)).Elem()
}

type globalTableArgs struct {
	// The name of the global table. Must match underlying DynamoDB Table names in all regions.
	Name *string `pulumi:"name"`
	// Underlying DynamoDB Table. At least 1 replica must be defined. See below.
	Replicas []GlobalTableReplica `pulumi:"replicas"`
}

// The set of arguments for constructing a GlobalTable resource.
type GlobalTableArgs struct {
	// The name of the global table. Must match underlying DynamoDB Table names in all regions.
	Name pulumix.Input[*string]
	// Underlying DynamoDB Table. At least 1 replica must be defined. See below.
	Replicas pulumix.Input[[]*GlobalTableReplicaArgs]
}

func (GlobalTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*globalTableArgs)(nil)).Elem()
}

type GlobalTableOutput struct{ *pulumi.OutputState }

func (GlobalTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalTable)(nil)).Elem()
}

func (o GlobalTableOutput) ToGlobalTableOutput() GlobalTableOutput {
	return o
}

func (o GlobalTableOutput) ToGlobalTableOutputWithContext(ctx context.Context) GlobalTableOutput {
	return o
}

func (o GlobalTableOutput) ToOutput(ctx context.Context) pulumix.Output[GlobalTable] {
	return pulumix.Output[GlobalTable]{
		OutputState: o.OutputState,
	}
}

// The ARN of the DynamoDB Global Table
func (o GlobalTableOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[GlobalTable](o, func(v GlobalTable) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the global table. Must match underlying DynamoDB Table names in all regions.
func (o GlobalTableOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[GlobalTable](o, func(v GlobalTable) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Underlying DynamoDB Table. At least 1 replica must be defined. See below.
func (o GlobalTableOutput) Replicas() pulumix.GArrayOutput[GlobalTableReplica, GlobalTableReplicaOutput] {
	value := pulumix.Apply[GlobalTable](o, func(v GlobalTable) pulumix.GArrayOutput[GlobalTableReplica, GlobalTableReplicaOutput] {
		return v.Replicas
	})
	unwrapped := pulumix.Flatten[[]GlobalTableReplica, pulumix.GArrayOutput[GlobalTableReplica, GlobalTableReplicaOutput]](value)
	return pulumix.GArrayOutput[GlobalTableReplica, GlobalTableReplicaOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(GlobalTableOutput{})
}
