// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sesv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS SESv2 (Simple Email V2) Email Identity.
type EmailIdentity struct {
	pulumi.CustomResourceState

	// ARN of the Email Identity.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
	ConfigurationSetName pulumix.Output[*string] `pulumi:"configurationSetName"`
	// The configuration of the DKIM authentication settings for an email domain identity.
	DkimSigningAttributes pulumix.GPtrOutput[EmailIdentityDkimSigningAttributes, EmailIdentityDkimSigningAttributesOutput] `pulumi:"dkimSigningAttributes"`
	// The email address or domain to verify.
	//
	// The following arguments are optional:
	EmailIdentity pulumix.Output[string] `pulumi:"emailIdentity"`
	// The email identity type. Valid values: `EMAIL_ADDRESS`, `DOMAIN`.
	IdentityType pulumix.Output[string] `pulumi:"identityType"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Specifies whether or not the identity is verified.
	VerifiedForSendingStatus pulumix.Output[bool] `pulumi:"verifiedForSendingStatus"`
}

// NewEmailIdentity registers a new resource with the given unique name, arguments, and options.
func NewEmailIdentity(ctx *pulumi.Context,
	name string, args *EmailIdentityArgs, opts ...pulumi.ResourceOption) (*EmailIdentity, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EmailIdentity == nil {
		return nil, errors.New("invalid value for required argument 'EmailIdentity'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmailIdentity
	err := ctx.RegisterResource("aws:sesv2/emailIdentity:EmailIdentity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailIdentity gets an existing EmailIdentity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailIdentity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailIdentityState, opts ...pulumi.ResourceOption) (*EmailIdentity, error) {
	var resource EmailIdentity
	err := ctx.ReadResource("aws:sesv2/emailIdentity:EmailIdentity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailIdentity resources.
type emailIdentityState struct {
	// ARN of the Email Identity.
	Arn *string `pulumi:"arn"`
	// The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
	ConfigurationSetName *string `pulumi:"configurationSetName"`
	// The configuration of the DKIM authentication settings for an email domain identity.
	DkimSigningAttributes *EmailIdentityDkimSigningAttributes `pulumi:"dkimSigningAttributes"`
	// The email address or domain to verify.
	//
	// The following arguments are optional:
	EmailIdentity *string `pulumi:"emailIdentity"`
	// The email identity type. Valid values: `EMAIL_ADDRESS`, `DOMAIN`.
	IdentityType *string `pulumi:"identityType"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Specifies whether or not the identity is verified.
	VerifiedForSendingStatus *bool `pulumi:"verifiedForSendingStatus"`
}

type EmailIdentityState struct {
	// ARN of the Email Identity.
	Arn pulumix.Input[*string]
	// The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
	ConfigurationSetName pulumix.Input[*string]
	// The configuration of the DKIM authentication settings for an email domain identity.
	DkimSigningAttributes pulumix.Input[*EmailIdentityDkimSigningAttributesArgs]
	// The email address or domain to verify.
	//
	// The following arguments are optional:
	EmailIdentity pulumix.Input[*string]
	// The email identity type. Valid values: `EMAIL_ADDRESS`, `DOMAIN`.
	IdentityType pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Specifies whether or not the identity is verified.
	VerifiedForSendingStatus pulumix.Input[*bool]
}

func (EmailIdentityState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailIdentityState)(nil)).Elem()
}

type emailIdentityArgs struct {
	// The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
	ConfigurationSetName *string `pulumi:"configurationSetName"`
	// The configuration of the DKIM authentication settings for an email domain identity.
	DkimSigningAttributes *EmailIdentityDkimSigningAttributes `pulumi:"dkimSigningAttributes"`
	// The email address or domain to verify.
	//
	// The following arguments are optional:
	EmailIdentity string `pulumi:"emailIdentity"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a EmailIdentity resource.
type EmailIdentityArgs struct {
	// The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
	ConfigurationSetName pulumix.Input[*string]
	// The configuration of the DKIM authentication settings for an email domain identity.
	DkimSigningAttributes pulumix.Input[*EmailIdentityDkimSigningAttributesArgs]
	// The email address or domain to verify.
	//
	// The following arguments are optional:
	EmailIdentity pulumix.Input[string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (EmailIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailIdentityArgs)(nil)).Elem()
}

type EmailIdentityOutput struct{ *pulumi.OutputState }

func (EmailIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailIdentity)(nil)).Elem()
}

func (o EmailIdentityOutput) ToEmailIdentityOutput() EmailIdentityOutput {
	return o
}

func (o EmailIdentityOutput) ToEmailIdentityOutputWithContext(ctx context.Context) EmailIdentityOutput {
	return o
}

func (o EmailIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[EmailIdentity] {
	return pulumix.Output[EmailIdentity]{
		OutputState: o.OutputState,
	}
}

// ARN of the Email Identity.
func (o EmailIdentityOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[EmailIdentity](o, func(v EmailIdentity) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
func (o EmailIdentityOutput) ConfigurationSetName() pulumix.Output[*string] {
	value := pulumix.Apply[EmailIdentity](o, func(v EmailIdentity) pulumix.Output[*string] { return v.ConfigurationSetName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The configuration of the DKIM authentication settings for an email domain identity.
func (o EmailIdentityOutput) DkimSigningAttributes() pulumix.GPtrOutput[EmailIdentityDkimSigningAttributes, EmailIdentityDkimSigningAttributesOutput] {
	value := pulumix.Apply[EmailIdentity](o, func(v EmailIdentity) pulumix.GPtrOutput[EmailIdentityDkimSigningAttributes, EmailIdentityDkimSigningAttributesOutput] {
		return v.DkimSigningAttributes
	})
	unwrapped := pulumix.Flatten[*EmailIdentityDkimSigningAttributes, pulumix.GPtrOutput[EmailIdentityDkimSigningAttributes, EmailIdentityDkimSigningAttributesOutput]](value)
	return pulumix.GPtrOutput[EmailIdentityDkimSigningAttributes, EmailIdentityDkimSigningAttributesOutput]{OutputState: unwrapped.OutputState}
}

// The email address or domain to verify.
//
// The following arguments are optional:
func (o EmailIdentityOutput) EmailIdentity() pulumix.Output[string] {
	value := pulumix.Apply[EmailIdentity](o, func(v EmailIdentity) pulumix.Output[string] { return v.EmailIdentity })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The email identity type. Valid values: `EMAIL_ADDRESS`, `DOMAIN`.
func (o EmailIdentityOutput) IdentityType() pulumix.Output[string] {
	value := pulumix.Apply[EmailIdentity](o, func(v EmailIdentity) pulumix.Output[string] { return v.IdentityType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o EmailIdentityOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[EmailIdentity](o, func(v EmailIdentity) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o EmailIdentityOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[EmailIdentity](o, func(v EmailIdentity) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Specifies whether or not the identity is verified.
func (o EmailIdentityOutput) VerifiedForSendingStatus() pulumix.Output[bool] {
	value := pulumix.Apply[EmailIdentity](o, func(v EmailIdentity) pulumix.Output[bool] { return v.VerifiedForSendingStatus })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

func init() {
	pulumi.RegisterOutputType(EmailIdentityOutput{})
}
