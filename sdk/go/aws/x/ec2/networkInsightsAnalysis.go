// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Network Insights Analysis resource. Part of the "Reachability Analyzer" service in the AWS VPC console.
type NetworkInsightsAnalysis struct {
	pulumi.CustomResourceState

	// Potential intermediate components of a feasible path. Described below.
	AlternatePathHints pulumix.GArrayOutput[NetworkInsightsAnalysisAlternatePathHint, NetworkInsightsAnalysisAlternatePathHintOutput] `pulumi:"alternatePathHints"`
	// ARN of the Network Insights Analysis.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Explanation codes for an unreachable path. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Explanation.html) for details.
	Explanations pulumix.GArrayOutput[NetworkInsightsAnalysisExplanation, NetworkInsightsAnalysisExplanationOutput] `pulumi:"explanations"`
	// A list of ARNs for resources the path must traverse.
	FilterInArns pulumix.ArrayOutput[string] `pulumi:"filterInArns"`
	// The components in the path from source to destination. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
	ForwardPathComponents pulumix.GArrayOutput[NetworkInsightsAnalysisForwardPathComponent, NetworkInsightsAnalysisForwardPathComponentOutput] `pulumi:"forwardPathComponents"`
	// ID of the Network Insights Path to run an analysis on.
	//
	// The following arguments are optional:
	NetworkInsightsPathId pulumix.Output[string] `pulumi:"networkInsightsPathId"`
	// Set to `true` if the destination was reachable.
	PathFound pulumix.Output[bool] `pulumi:"pathFound"`
	// The components in the path from destination to source. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
	ReturnPathComponents pulumix.GArrayOutput[NetworkInsightsAnalysisReturnPathComponent, NetworkInsightsAnalysisReturnPathComponentOutput] `pulumi:"returnPathComponents"`
	// The date/time the analysis was started.
	StartDate pulumix.Output[string] `pulumi:"startDate"`
	// The status of the analysis. `succeeded` means the analysis was completed, not that a path was found, for that see `pathFound`.
	Status pulumix.Output[string] `pulumi:"status"`
	// A message to provide more context when the `status` is `failed`.
	StatusMessage pulumix.Output[string] `pulumi:"statusMessage"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// If enabled, the resource will wait for the Network Insights Analysis status to change to `succeeded` or `failed`. Setting this to `false` will skip the process. Default: `true`.
	WaitForCompletion pulumix.Output[*bool] `pulumi:"waitForCompletion"`
	// The warning message.
	WarningMessage pulumix.Output[string] `pulumi:"warningMessage"`
}

// NewNetworkInsightsAnalysis registers a new resource with the given unique name, arguments, and options.
func NewNetworkInsightsAnalysis(ctx *pulumi.Context,
	name string, args *NetworkInsightsAnalysisArgs, opts ...pulumi.ResourceOption) (*NetworkInsightsAnalysis, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkInsightsPathId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInsightsPathId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkInsightsAnalysis
	err := ctx.RegisterResource("aws:ec2/networkInsightsAnalysis:NetworkInsightsAnalysis", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInsightsAnalysis gets an existing NetworkInsightsAnalysis resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInsightsAnalysis(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkInsightsAnalysisState, opts ...pulumi.ResourceOption) (*NetworkInsightsAnalysis, error) {
	var resource NetworkInsightsAnalysis
	err := ctx.ReadResource("aws:ec2/networkInsightsAnalysis:NetworkInsightsAnalysis", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkInsightsAnalysis resources.
type networkInsightsAnalysisState struct {
	// Potential intermediate components of a feasible path. Described below.
	AlternatePathHints []NetworkInsightsAnalysisAlternatePathHint `pulumi:"alternatePathHints"`
	// ARN of the Network Insights Analysis.
	Arn *string `pulumi:"arn"`
	// Explanation codes for an unreachable path. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Explanation.html) for details.
	Explanations []NetworkInsightsAnalysisExplanation `pulumi:"explanations"`
	// A list of ARNs for resources the path must traverse.
	FilterInArns []string `pulumi:"filterInArns"`
	// The components in the path from source to destination. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
	ForwardPathComponents []NetworkInsightsAnalysisForwardPathComponent `pulumi:"forwardPathComponents"`
	// ID of the Network Insights Path to run an analysis on.
	//
	// The following arguments are optional:
	NetworkInsightsPathId *string `pulumi:"networkInsightsPathId"`
	// Set to `true` if the destination was reachable.
	PathFound *bool `pulumi:"pathFound"`
	// The components in the path from destination to source. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
	ReturnPathComponents []NetworkInsightsAnalysisReturnPathComponent `pulumi:"returnPathComponents"`
	// The date/time the analysis was started.
	StartDate *string `pulumi:"startDate"`
	// The status of the analysis. `succeeded` means the analysis was completed, not that a path was found, for that see `pathFound`.
	Status *string `pulumi:"status"`
	// A message to provide more context when the `status` is `failed`.
	StatusMessage *string `pulumi:"statusMessage"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// If enabled, the resource will wait for the Network Insights Analysis status to change to `succeeded` or `failed`. Setting this to `false` will skip the process. Default: `true`.
	WaitForCompletion *bool `pulumi:"waitForCompletion"`
	// The warning message.
	WarningMessage *string `pulumi:"warningMessage"`
}

type NetworkInsightsAnalysisState struct {
	// Potential intermediate components of a feasible path. Described below.
	AlternatePathHints pulumix.Input[[]*NetworkInsightsAnalysisAlternatePathHintArgs]
	// ARN of the Network Insights Analysis.
	Arn pulumix.Input[*string]
	// Explanation codes for an unreachable path. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Explanation.html) for details.
	Explanations pulumix.Input[[]*NetworkInsightsAnalysisExplanationArgs]
	// A list of ARNs for resources the path must traverse.
	FilterInArns pulumix.Input[[]string]
	// The components in the path from source to destination. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
	ForwardPathComponents pulumix.Input[[]*NetworkInsightsAnalysisForwardPathComponentArgs]
	// ID of the Network Insights Path to run an analysis on.
	//
	// The following arguments are optional:
	NetworkInsightsPathId pulumix.Input[*string]
	// Set to `true` if the destination was reachable.
	PathFound pulumix.Input[*bool]
	// The components in the path from destination to source. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
	ReturnPathComponents pulumix.Input[[]*NetworkInsightsAnalysisReturnPathComponentArgs]
	// The date/time the analysis was started.
	StartDate pulumix.Input[*string]
	// The status of the analysis. `succeeded` means the analysis was completed, not that a path was found, for that see `pathFound`.
	Status pulumix.Input[*string]
	// A message to provide more context when the `status` is `failed`.
	StatusMessage pulumix.Input[*string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// If enabled, the resource will wait for the Network Insights Analysis status to change to `succeeded` or `failed`. Setting this to `false` will skip the process. Default: `true`.
	WaitForCompletion pulumix.Input[*bool]
	// The warning message.
	WarningMessage pulumix.Input[*string]
}

func (NetworkInsightsAnalysisState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInsightsAnalysisState)(nil)).Elem()
}

type networkInsightsAnalysisArgs struct {
	// A list of ARNs for resources the path must traverse.
	FilterInArns []string `pulumi:"filterInArns"`
	// ID of the Network Insights Path to run an analysis on.
	//
	// The following arguments are optional:
	NetworkInsightsPathId string `pulumi:"networkInsightsPathId"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// If enabled, the resource will wait for the Network Insights Analysis status to change to `succeeded` or `failed`. Setting this to `false` will skip the process. Default: `true`.
	WaitForCompletion *bool `pulumi:"waitForCompletion"`
}

// The set of arguments for constructing a NetworkInsightsAnalysis resource.
type NetworkInsightsAnalysisArgs struct {
	// A list of ARNs for resources the path must traverse.
	FilterInArns pulumix.Input[[]string]
	// ID of the Network Insights Path to run an analysis on.
	//
	// The following arguments are optional:
	NetworkInsightsPathId pulumix.Input[string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// If enabled, the resource will wait for the Network Insights Analysis status to change to `succeeded` or `failed`. Setting this to `false` will skip the process. Default: `true`.
	WaitForCompletion pulumix.Input[*bool]
}

func (NetworkInsightsAnalysisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInsightsAnalysisArgs)(nil)).Elem()
}

type NetworkInsightsAnalysisOutput struct{ *pulumi.OutputState }

func (NetworkInsightsAnalysisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInsightsAnalysis)(nil)).Elem()
}

func (o NetworkInsightsAnalysisOutput) ToNetworkInsightsAnalysisOutput() NetworkInsightsAnalysisOutput {
	return o
}

func (o NetworkInsightsAnalysisOutput) ToNetworkInsightsAnalysisOutputWithContext(ctx context.Context) NetworkInsightsAnalysisOutput {
	return o
}

func (o NetworkInsightsAnalysisOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkInsightsAnalysis] {
	return pulumix.Output[NetworkInsightsAnalysis]{
		OutputState: o.OutputState,
	}
}

// Potential intermediate components of a feasible path. Described below.
func (o NetworkInsightsAnalysisOutput) AlternatePathHints() pulumix.GArrayOutput[NetworkInsightsAnalysisAlternatePathHint, NetworkInsightsAnalysisAlternatePathHintOutput] {
	value := pulumix.Apply[NetworkInsightsAnalysis](o, func(v NetworkInsightsAnalysis) pulumix.GArrayOutput[NetworkInsightsAnalysisAlternatePathHint, NetworkInsightsAnalysisAlternatePathHintOutput] {
		return v.AlternatePathHints
	})
	unwrapped := pulumix.Flatten[[]NetworkInsightsAnalysisAlternatePathHint, pulumix.GArrayOutput[NetworkInsightsAnalysisAlternatePathHint, NetworkInsightsAnalysisAlternatePathHintOutput]](value)
	return pulumix.GArrayOutput[NetworkInsightsAnalysisAlternatePathHint, NetworkInsightsAnalysisAlternatePathHintOutput]{OutputState: unwrapped.OutputState}
}

// ARN of the Network Insights Analysis.
func (o NetworkInsightsAnalysisOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInsightsAnalysis](o, func(v NetworkInsightsAnalysis) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Explanation codes for an unreachable path. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Explanation.html) for details.
func (o NetworkInsightsAnalysisOutput) Explanations() pulumix.GArrayOutput[NetworkInsightsAnalysisExplanation, NetworkInsightsAnalysisExplanationOutput] {
	value := pulumix.Apply[NetworkInsightsAnalysis](o, func(v NetworkInsightsAnalysis) pulumix.GArrayOutput[NetworkInsightsAnalysisExplanation, NetworkInsightsAnalysisExplanationOutput] {
		return v.Explanations
	})
	unwrapped := pulumix.Flatten[[]NetworkInsightsAnalysisExplanation, pulumix.GArrayOutput[NetworkInsightsAnalysisExplanation, NetworkInsightsAnalysisExplanationOutput]](value)
	return pulumix.GArrayOutput[NetworkInsightsAnalysisExplanation, NetworkInsightsAnalysisExplanationOutput]{OutputState: unwrapped.OutputState}
}

// A list of ARNs for resources the path must traverse.
func (o NetworkInsightsAnalysisOutput) FilterInArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NetworkInsightsAnalysis](o, func(v NetworkInsightsAnalysis) pulumix.ArrayOutput[string] { return v.FilterInArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The components in the path from source to destination. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
func (o NetworkInsightsAnalysisOutput) ForwardPathComponents() pulumix.GArrayOutput[NetworkInsightsAnalysisForwardPathComponent, NetworkInsightsAnalysisForwardPathComponentOutput] {
	value := pulumix.Apply[NetworkInsightsAnalysis](o, func(v NetworkInsightsAnalysis) pulumix.GArrayOutput[NetworkInsightsAnalysisForwardPathComponent, NetworkInsightsAnalysisForwardPathComponentOutput] {
		return v.ForwardPathComponents
	})
	unwrapped := pulumix.Flatten[[]NetworkInsightsAnalysisForwardPathComponent, pulumix.GArrayOutput[NetworkInsightsAnalysisForwardPathComponent, NetworkInsightsAnalysisForwardPathComponentOutput]](value)
	return pulumix.GArrayOutput[NetworkInsightsAnalysisForwardPathComponent, NetworkInsightsAnalysisForwardPathComponentOutput]{OutputState: unwrapped.OutputState}
}

// ID of the Network Insights Path to run an analysis on.
//
// The following arguments are optional:
func (o NetworkInsightsAnalysisOutput) NetworkInsightsPathId() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInsightsAnalysis](o, func(v NetworkInsightsAnalysis) pulumix.Output[string] { return v.NetworkInsightsPathId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set to `true` if the destination was reachable.
func (o NetworkInsightsAnalysisOutput) PathFound() pulumix.Output[bool] {
	value := pulumix.Apply[NetworkInsightsAnalysis](o, func(v NetworkInsightsAnalysis) pulumix.Output[bool] { return v.PathFound })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The components in the path from destination to source. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
func (o NetworkInsightsAnalysisOutput) ReturnPathComponents() pulumix.GArrayOutput[NetworkInsightsAnalysisReturnPathComponent, NetworkInsightsAnalysisReturnPathComponentOutput] {
	value := pulumix.Apply[NetworkInsightsAnalysis](o, func(v NetworkInsightsAnalysis) pulumix.GArrayOutput[NetworkInsightsAnalysisReturnPathComponent, NetworkInsightsAnalysisReturnPathComponentOutput] {
		return v.ReturnPathComponents
	})
	unwrapped := pulumix.Flatten[[]NetworkInsightsAnalysisReturnPathComponent, pulumix.GArrayOutput[NetworkInsightsAnalysisReturnPathComponent, NetworkInsightsAnalysisReturnPathComponentOutput]](value)
	return pulumix.GArrayOutput[NetworkInsightsAnalysisReturnPathComponent, NetworkInsightsAnalysisReturnPathComponentOutput]{OutputState: unwrapped.OutputState}
}

// The date/time the analysis was started.
func (o NetworkInsightsAnalysisOutput) StartDate() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInsightsAnalysis](o, func(v NetworkInsightsAnalysis) pulumix.Output[string] { return v.StartDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The status of the analysis. `succeeded` means the analysis was completed, not that a path was found, for that see `pathFound`.
func (o NetworkInsightsAnalysisOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInsightsAnalysis](o, func(v NetworkInsightsAnalysis) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A message to provide more context when the `status` is `failed`.
func (o NetworkInsightsAnalysisOutput) StatusMessage() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInsightsAnalysis](o, func(v NetworkInsightsAnalysis) pulumix.Output[string] { return v.StatusMessage })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o NetworkInsightsAnalysisOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[NetworkInsightsAnalysis](o, func(v NetworkInsightsAnalysis) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o NetworkInsightsAnalysisOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[NetworkInsightsAnalysis](o, func(v NetworkInsightsAnalysis) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// If enabled, the resource will wait for the Network Insights Analysis status to change to `succeeded` or `failed`. Setting this to `false` will skip the process. Default: `true`.
func (o NetworkInsightsAnalysisOutput) WaitForCompletion() pulumix.Output[*bool] {
	value := pulumix.Apply[NetworkInsightsAnalysis](o, func(v NetworkInsightsAnalysis) pulumix.Output[*bool] { return v.WaitForCompletion })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The warning message.
func (o NetworkInsightsAnalysisOutput) WarningMessage() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInsightsAnalysis](o, func(v NetworkInsightsAnalysis) pulumix.Output[string] { return v.WarningMessage })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(NetworkInsightsAnalysisOutput{})
}
