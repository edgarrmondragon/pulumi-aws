// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Elastic File System (EFS) File System Policy resource.
type FileSystemPolicy struct {
	pulumi.CustomResourceState

	// A flag to indicate whether to bypass the `efs.FileSystemPolicy` lockout safety check. The policy lockout safety check determines whether the policy in the request will prevent the principal making the request will be locked out from making future `PutFileSystemPolicy` requests on the file system. Set `bypassPolicyLockoutSafetyCheck` to `true` only when you intend to prevent the principal that is making the request from making a subsequent `PutFileSystemPolicy` request on the file system. The default value is `false`.
	BypassPolicyLockoutSafetyCheck pulumix.Output[*bool] `pulumi:"bypassPolicyLockoutSafetyCheck"`
	// The ID of the EFS file system.
	FileSystemId pulumix.Output[string] `pulumi:"fileSystemId"`
	// The JSON formatted file system policy for the EFS file system. see [Docs](https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies) for more info.
	//
	// The following arguments are optional:
	Policy pulumix.Output[string] `pulumi:"policy"`
}

// NewFileSystemPolicy registers a new resource with the given unique name, arguments, and options.
func NewFileSystemPolicy(ctx *pulumi.Context,
	name string, args *FileSystemPolicyArgs, opts ...pulumi.ResourceOption) (*FileSystemPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileSystemId == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemId'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FileSystemPolicy
	err := ctx.RegisterResource("aws:efs/fileSystemPolicy:FileSystemPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileSystemPolicy gets an existing FileSystemPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileSystemPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileSystemPolicyState, opts ...pulumi.ResourceOption) (*FileSystemPolicy, error) {
	var resource FileSystemPolicy
	err := ctx.ReadResource("aws:efs/fileSystemPolicy:FileSystemPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileSystemPolicy resources.
type fileSystemPolicyState struct {
	// A flag to indicate whether to bypass the `efs.FileSystemPolicy` lockout safety check. The policy lockout safety check determines whether the policy in the request will prevent the principal making the request will be locked out from making future `PutFileSystemPolicy` requests on the file system. Set `bypassPolicyLockoutSafetyCheck` to `true` only when you intend to prevent the principal that is making the request from making a subsequent `PutFileSystemPolicy` request on the file system. The default value is `false`.
	BypassPolicyLockoutSafetyCheck *bool `pulumi:"bypassPolicyLockoutSafetyCheck"`
	// The ID of the EFS file system.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The JSON formatted file system policy for the EFS file system. see [Docs](https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies) for more info.
	//
	// The following arguments are optional:
	Policy *string `pulumi:"policy"`
}

type FileSystemPolicyState struct {
	// A flag to indicate whether to bypass the `efs.FileSystemPolicy` lockout safety check. The policy lockout safety check determines whether the policy in the request will prevent the principal making the request will be locked out from making future `PutFileSystemPolicy` requests on the file system. Set `bypassPolicyLockoutSafetyCheck` to `true` only when you intend to prevent the principal that is making the request from making a subsequent `PutFileSystemPolicy` request on the file system. The default value is `false`.
	BypassPolicyLockoutSafetyCheck pulumix.Input[*bool]
	// The ID of the EFS file system.
	FileSystemId pulumix.Input[*string]
	// The JSON formatted file system policy for the EFS file system. see [Docs](https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies) for more info.
	//
	// The following arguments are optional:
	Policy pulumix.Input[*string]
}

func (FileSystemPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemPolicyState)(nil)).Elem()
}

type fileSystemPolicyArgs struct {
	// A flag to indicate whether to bypass the `efs.FileSystemPolicy` lockout safety check. The policy lockout safety check determines whether the policy in the request will prevent the principal making the request will be locked out from making future `PutFileSystemPolicy` requests on the file system. Set `bypassPolicyLockoutSafetyCheck` to `true` only when you intend to prevent the principal that is making the request from making a subsequent `PutFileSystemPolicy` request on the file system. The default value is `false`.
	BypassPolicyLockoutSafetyCheck *bool `pulumi:"bypassPolicyLockoutSafetyCheck"`
	// The ID of the EFS file system.
	FileSystemId string `pulumi:"fileSystemId"`
	// The JSON formatted file system policy for the EFS file system. see [Docs](https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies) for more info.
	//
	// The following arguments are optional:
	Policy string `pulumi:"policy"`
}

// The set of arguments for constructing a FileSystemPolicy resource.
type FileSystemPolicyArgs struct {
	// A flag to indicate whether to bypass the `efs.FileSystemPolicy` lockout safety check. The policy lockout safety check determines whether the policy in the request will prevent the principal making the request will be locked out from making future `PutFileSystemPolicy` requests on the file system. Set `bypassPolicyLockoutSafetyCheck` to `true` only when you intend to prevent the principal that is making the request from making a subsequent `PutFileSystemPolicy` request on the file system. The default value is `false`.
	BypassPolicyLockoutSafetyCheck pulumix.Input[*bool]
	// The ID of the EFS file system.
	FileSystemId pulumix.Input[string]
	// The JSON formatted file system policy for the EFS file system. see [Docs](https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies) for more info.
	//
	// The following arguments are optional:
	Policy pulumix.Input[string]
}

func (FileSystemPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemPolicyArgs)(nil)).Elem()
}

type FileSystemPolicyOutput struct{ *pulumi.OutputState }

func (FileSystemPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemPolicy)(nil)).Elem()
}

func (o FileSystemPolicyOutput) ToFileSystemPolicyOutput() FileSystemPolicyOutput {
	return o
}

func (o FileSystemPolicyOutput) ToFileSystemPolicyOutputWithContext(ctx context.Context) FileSystemPolicyOutput {
	return o
}

func (o FileSystemPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[FileSystemPolicy] {
	return pulumix.Output[FileSystemPolicy]{
		OutputState: o.OutputState,
	}
}

// A flag to indicate whether to bypass the `efs.FileSystemPolicy` lockout safety check. The policy lockout safety check determines whether the policy in the request will prevent the principal making the request will be locked out from making future `PutFileSystemPolicy` requests on the file system. Set `bypassPolicyLockoutSafetyCheck` to `true` only when you intend to prevent the principal that is making the request from making a subsequent `PutFileSystemPolicy` request on the file system. The default value is `false`.
func (o FileSystemPolicyOutput) BypassPolicyLockoutSafetyCheck() pulumix.Output[*bool] {
	value := pulumix.Apply[FileSystemPolicy](o, func(v FileSystemPolicy) pulumix.Output[*bool] { return v.BypassPolicyLockoutSafetyCheck })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The ID of the EFS file system.
func (o FileSystemPolicyOutput) FileSystemId() pulumix.Output[string] {
	value := pulumix.Apply[FileSystemPolicy](o, func(v FileSystemPolicy) pulumix.Output[string] { return v.FileSystemId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The JSON formatted file system policy for the EFS file system. see [Docs](https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies) for more info.
//
// The following arguments are optional:
func (o FileSystemPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[FileSystemPolicy](o, func(v FileSystemPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(FileSystemPolicyOutput{})
}
