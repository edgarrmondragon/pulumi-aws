// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about an Elastic File System Mount Target (EFS).
func LookupMountTarget(ctx *pulumi.Context, args *LookupMountTargetArgs, opts ...pulumi.InvokeOption) (*LookupMountTargetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMountTargetResult
	err := ctx.Invoke("aws:efs/getMountTarget:getMountTarget", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMountTarget.
type LookupMountTargetArgs struct {
	// ID or ARN of the access point whose mount target that you want to find. It must be included if a `fileSystemId` and `mountTargetId` are not included.
	AccessPointId *string `pulumi:"accessPointId"`
	// ID or ARN of the file system whose mount target that you want to find. It must be included if an `accessPointId` and `mountTargetId` are not included.
	FileSystemId *string `pulumi:"fileSystemId"`
	// ID or ARN of the mount target that you want to find. It must be included in your request if an `accessPointId` and `fileSystemId` are not included.
	MountTargetId *string `pulumi:"mountTargetId"`
}

// A collection of values returned by getMountTarget.
type LookupMountTargetResult struct {
	AccessPointId *string `pulumi:"accessPointId"`
	// The unique and consistent identifier of the Availability Zone (AZ) that the mount target resides in.
	AvailabilityZoneId string `pulumi:"availabilityZoneId"`
	// The name of the Availability Zone (AZ) that the mount target resides in.
	AvailabilityZoneName string `pulumi:"availabilityZoneName"`
	// DNS name for the EFS file system.
	DnsName string `pulumi:"dnsName"`
	// Amazon Resource Name of the file system for which the mount target is intended.
	FileSystemArn string `pulumi:"fileSystemArn"`
	FileSystemId  string `pulumi:"fileSystemId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Address at which the file system may be mounted via the mount target.
	IpAddress string `pulumi:"ipAddress"`
	// The DNS name for the given subnet/AZ per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
	MountTargetDnsName string `pulumi:"mountTargetDnsName"`
	MountTargetId      string `pulumi:"mountTargetId"`
	// The ID of the network interface that Amazon EFS created when it created the mount target.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// AWS account ID that owns the resource.
	OwnerId string `pulumi:"ownerId"`
	// List of VPC security group IDs attached to the mount target.
	SecurityGroups []string `pulumi:"securityGroups"`
	// ID of the mount target's subnet.
	SubnetId string `pulumi:"subnetId"`
}

func LookupMountTargetOutput(ctx *pulumi.Context, args LookupMountTargetOutputArgs, opts ...pulumi.InvokeOption) LookupMountTargetResultOutput {
	outputResult := pulumix.ApplyErr[*LookupMountTargetArgs](args.ToOutput(), func(plainArgs *LookupMountTargetArgs) (*LookupMountTargetResult, error) {
		return LookupMountTarget(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupMountTargetResultOutput, *LookupMountTargetResult](outputResult)
}

// A collection of arguments for invoking getMountTarget.
type LookupMountTargetOutputArgs struct {
	// ID or ARN of the access point whose mount target that you want to find. It must be included if a `fileSystemId` and `mountTargetId` are not included.
	AccessPointId pulumix.Input[*string] `pulumi:"accessPointId"`
	// ID or ARN of the file system whose mount target that you want to find. It must be included if an `accessPointId` and `mountTargetId` are not included.
	FileSystemId pulumix.Input[*string] `pulumi:"fileSystemId"`
	// ID or ARN of the mount target that you want to find. It must be included in your request if an `accessPointId` and `fileSystemId` are not included.
	MountTargetId pulumix.Input[*string] `pulumi:"mountTargetId"`
}

func (args LookupMountTargetOutputArgs) ToOutput() pulumix.Output[*LookupMountTargetArgs] {
	allArgs := pulumix.All(
		args.AccessPointId.ToOutput(context.Background()).AsAny(),
		args.FileSystemId.ToOutput(context.Background()).AsAny(),
		args.MountTargetId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupMountTargetArgs {
		return &LookupMountTargetArgs{
			AccessPointId: resolvedArgs[0].(*string),
			FileSystemId:  resolvedArgs[1].(*string),
			MountTargetId: resolvedArgs[2].(*string),
		}
	})
}

type LookupMountTargetResultOutput struct{ *pulumi.OutputState }

func (LookupMountTargetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMountTargetResult)(nil)).Elem()
}

func (o LookupMountTargetResultOutput) ToOutput(context.Context) pulumix.Output[*LookupMountTargetResult] {
	return pulumix.Output[*LookupMountTargetResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupMountTargetResultOutput) AccessPointId() pulumix.Output[*string] {
	return pulumix.Apply[*LookupMountTargetResult](o, func(v *LookupMountTargetResult) *string { return v.AccessPointId })
}

func (o LookupMountTargetResultOutput) AvailabilityZoneId() pulumix.Output[string] {
	return pulumix.Apply[*LookupMountTargetResult](o, func(v *LookupMountTargetResult) string { return v.AvailabilityZoneId })
}

func (o LookupMountTargetResultOutput) AvailabilityZoneName() pulumix.Output[string] {
	return pulumix.Apply[*LookupMountTargetResult](o, func(v *LookupMountTargetResult) string { return v.AvailabilityZoneName })
}

func (o LookupMountTargetResultOutput) DnsName() pulumix.Output[string] {
	return pulumix.Apply[*LookupMountTargetResult](o, func(v *LookupMountTargetResult) string { return v.DnsName })
}

func (o LookupMountTargetResultOutput) FileSystemArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupMountTargetResult](o, func(v *LookupMountTargetResult) string { return v.FileSystemArn })
}

func (o LookupMountTargetResultOutput) FileSystemId() pulumix.Output[string] {
	return pulumix.Apply[*LookupMountTargetResult](o, func(v *LookupMountTargetResult) string { return v.FileSystemId })
}

func (o LookupMountTargetResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupMountTargetResult](o, func(v *LookupMountTargetResult) string { return v.Id })
}

func (o LookupMountTargetResultOutput) IpAddress() pulumix.Output[string] {
	return pulumix.Apply[*LookupMountTargetResult](o, func(v *LookupMountTargetResult) string { return v.IpAddress })
}

func (o LookupMountTargetResultOutput) MountTargetDnsName() pulumix.Output[string] {
	return pulumix.Apply[*LookupMountTargetResult](o, func(v *LookupMountTargetResult) string { return v.MountTargetDnsName })
}

func (o LookupMountTargetResultOutput) MountTargetId() pulumix.Output[string] {
	return pulumix.Apply[*LookupMountTargetResult](o, func(v *LookupMountTargetResult) string { return v.MountTargetId })
}

func (o LookupMountTargetResultOutput) NetworkInterfaceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupMountTargetResult](o, func(v *LookupMountTargetResult) string { return v.NetworkInterfaceId })
}

func (o LookupMountTargetResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupMountTargetResult](o, func(v *LookupMountTargetResult) string { return v.OwnerId })
}

func (o LookupMountTargetResultOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupMountTargetResult](o, func(v *LookupMountTargetResult) []string { return v.SecurityGroups })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupMountTargetResultOutput) SubnetId() pulumix.Output[string] {
	return pulumix.Apply[*LookupMountTargetResult](o, func(v *LookupMountTargetResult) string { return v.SubnetId })
}
