// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticache

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about an ElastiCache Replication Group.
func LookupReplicationGroup(ctx *pulumi.Context, args *LookupReplicationGroupArgs, opts ...pulumi.InvokeOption) (*LookupReplicationGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupReplicationGroupResult
	err := ctx.Invoke("aws:elasticache/getReplicationGroup:getReplicationGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReplicationGroup.
type LookupReplicationGroupArgs struct {
	// Identifier for the replication group.
	ReplicationGroupId string `pulumi:"replicationGroupId"`
}

// A collection of values returned by getReplicationGroup.
type LookupReplicationGroupResult struct {
	// ARN of the created ElastiCache Replication Group.
	Arn string `pulumi:"arn"`
	// Whether an AuthToken (password) is enabled.
	AuthTokenEnabled bool `pulumi:"authTokenEnabled"`
	// A flag whether a read-only replica will be automatically promoted to read/write primary if the existing primary fails.
	AutomaticFailoverEnabled bool `pulumi:"automaticFailoverEnabled"`
	// The configuration endpoint address to allow host discovery.
	ConfigurationEndpointAddress string `pulumi:"configurationEndpointAddress"`
	// Description of the replication group.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Redis [SLOWLOG](https://redis.io/commands/slowlog) or Redis [Engine Log](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Log_Delivery.html#Log_contents-engine-log) delivery settings.
	LogDeliveryConfigurations []GetReplicationGroupLogDeliveryConfiguration `pulumi:"logDeliveryConfigurations"`
	// Identifiers of all the nodes that are part of this replication group.
	MemberClusters []string `pulumi:"memberClusters"`
	// Whether Multi-AZ Support is enabled for the replication group.
	MultiAzEnabled bool `pulumi:"multiAzEnabled"`
	// The cluster node type.
	NodeType string `pulumi:"nodeType"`
	// The number of cache clusters that the replication group has.
	NumCacheClusters int `pulumi:"numCacheClusters"`
	// Number of node groups (shards) for the replication group.
	NumNodeGroups int `pulumi:"numNodeGroups"`
	// The port number on which the configuration endpoint will accept connections.
	Port int `pulumi:"port"`
	// The endpoint of the primary node in this node group (shard).
	PrimaryEndpointAddress string `pulumi:"primaryEndpointAddress"`
	// The endpoint of the reader node in this node group (shard).
	ReaderEndpointAddress string `pulumi:"readerEndpointAddress"`
	// Number of replica nodes in each node group.
	ReplicasPerNodeGroup int    `pulumi:"replicasPerNodeGroup"`
	ReplicationGroupId   string `pulumi:"replicationGroupId"`
	// The number of days for which ElastiCache retains automatic cache cluster snapshots before deleting them.
	SnapshotRetentionLimit int `pulumi:"snapshotRetentionLimit"`
	// Daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).
	SnapshotWindow string `pulumi:"snapshotWindow"`
}

func LookupReplicationGroupOutput(ctx *pulumi.Context, args LookupReplicationGroupOutputArgs, opts ...pulumi.InvokeOption) LookupReplicationGroupResultOutput {
	outputResult := pulumix.ApplyErr[*LookupReplicationGroupArgs](args.ToOutput(), func(plainArgs *LookupReplicationGroupArgs) (*LookupReplicationGroupResult, error) {
		return LookupReplicationGroup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupReplicationGroupResultOutput, *LookupReplicationGroupResult](outputResult)
}

// A collection of arguments for invoking getReplicationGroup.
type LookupReplicationGroupOutputArgs struct {
	// Identifier for the replication group.
	ReplicationGroupId pulumix.Input[string] `pulumi:"replicationGroupId"`
}

func (args LookupReplicationGroupOutputArgs) ToOutput() pulumix.Output[*LookupReplicationGroupArgs] {
	allArgs := pulumix.All(
		args.ReplicationGroupId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupReplicationGroupArgs {
		return &LookupReplicationGroupArgs{
			ReplicationGroupId: resolvedArgs[0].(string),
		}
	})
}

type LookupReplicationGroupResultOutput struct{ *pulumi.OutputState }

func (LookupReplicationGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReplicationGroupResult)(nil)).Elem()
}

func (o LookupReplicationGroupResultOutput) ToOutput(context.Context) pulumix.Output[*LookupReplicationGroupResult] {
	return pulumix.Output[*LookupReplicationGroupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupReplicationGroupResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) string { return v.Arn })
}

func (o LookupReplicationGroupResultOutput) AuthTokenEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) bool { return v.AuthTokenEnabled })
}

func (o LookupReplicationGroupResultOutput) AutomaticFailoverEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) bool { return v.AutomaticFailoverEnabled })
}

func (o LookupReplicationGroupResultOutput) ConfigurationEndpointAddress() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) string { return v.ConfigurationEndpointAddress })
}

func (o LookupReplicationGroupResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) string { return v.Description })
}

func (o LookupReplicationGroupResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) string { return v.Id })
}

func (o LookupReplicationGroupResultOutput) LogDeliveryConfigurations() pulumix.GArrayOutput[GetReplicationGroupLogDeliveryConfiguration, GetReplicationGroupLogDeliveryConfigurationOutput] {
	value := pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) []GetReplicationGroupLogDeliveryConfiguration {
		return v.LogDeliveryConfigurations
	})
	return pulumix.GArrayOutput[GetReplicationGroupLogDeliveryConfiguration, GetReplicationGroupLogDeliveryConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupReplicationGroupResultOutput) MemberClusters() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) []string { return v.MemberClusters })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupReplicationGroupResultOutput) MultiAzEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) bool { return v.MultiAzEnabled })
}

func (o LookupReplicationGroupResultOutput) NodeType() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) string { return v.NodeType })
}

func (o LookupReplicationGroupResultOutput) NumCacheClusters() pulumix.Output[int] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) int { return v.NumCacheClusters })
}

func (o LookupReplicationGroupResultOutput) NumNodeGroups() pulumix.Output[int] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) int { return v.NumNodeGroups })
}

func (o LookupReplicationGroupResultOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) int { return v.Port })
}

func (o LookupReplicationGroupResultOutput) PrimaryEndpointAddress() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) string { return v.PrimaryEndpointAddress })
}

func (o LookupReplicationGroupResultOutput) ReaderEndpointAddress() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) string { return v.ReaderEndpointAddress })
}

func (o LookupReplicationGroupResultOutput) ReplicasPerNodeGroup() pulumix.Output[int] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) int { return v.ReplicasPerNodeGroup })
}

func (o LookupReplicationGroupResultOutput) ReplicationGroupId() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) string { return v.ReplicationGroupId })
}

func (o LookupReplicationGroupResultOutput) SnapshotRetentionLimit() pulumix.Output[int] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) int { return v.SnapshotRetentionLimit })
}

func (o LookupReplicationGroupResultOutput) SnapshotWindow() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationGroupResult](o, func(v *LookupReplicationGroupResult) string { return v.SnapshotWindow })
}
