// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package worklink

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type WebsiteCertificateAuthorityAssociation struct {
	pulumi.CustomResourceState

	// The root certificate of the Certificate Authority.
	Certificate pulumix.Output[string] `pulumi:"certificate"`
	// The certificate name to display.
	DisplayName pulumix.Output[*string] `pulumi:"displayName"`
	// The ARN of the fleet.
	FleetArn pulumix.Output[string] `pulumi:"fleetArn"`
	// A unique identifier for the Certificate Authority.
	WebsiteCaId pulumix.Output[string] `pulumi:"websiteCaId"`
}

// NewWebsiteCertificateAuthorityAssociation registers a new resource with the given unique name, arguments, and options.
func NewWebsiteCertificateAuthorityAssociation(ctx *pulumi.Context,
	name string, args *WebsiteCertificateAuthorityAssociationArgs, opts ...pulumi.ResourceOption) (*WebsiteCertificateAuthorityAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.FleetArn == nil {
		return nil, errors.New("invalid value for required argument 'FleetArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebsiteCertificateAuthorityAssociation
	err := ctx.RegisterResource("aws:worklink/websiteCertificateAuthorityAssociation:WebsiteCertificateAuthorityAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebsiteCertificateAuthorityAssociation gets an existing WebsiteCertificateAuthorityAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebsiteCertificateAuthorityAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebsiteCertificateAuthorityAssociationState, opts ...pulumi.ResourceOption) (*WebsiteCertificateAuthorityAssociation, error) {
	var resource WebsiteCertificateAuthorityAssociation
	err := ctx.ReadResource("aws:worklink/websiteCertificateAuthorityAssociation:WebsiteCertificateAuthorityAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebsiteCertificateAuthorityAssociation resources.
type websiteCertificateAuthorityAssociationState struct {
	// The root certificate of the Certificate Authority.
	Certificate *string `pulumi:"certificate"`
	// The certificate name to display.
	DisplayName *string `pulumi:"displayName"`
	// The ARN of the fleet.
	FleetArn *string `pulumi:"fleetArn"`
	// A unique identifier for the Certificate Authority.
	WebsiteCaId *string `pulumi:"websiteCaId"`
}

type WebsiteCertificateAuthorityAssociationState struct {
	// The root certificate of the Certificate Authority.
	Certificate pulumix.Input[*string]
	// The certificate name to display.
	DisplayName pulumix.Input[*string]
	// The ARN of the fleet.
	FleetArn pulumix.Input[*string]
	// A unique identifier for the Certificate Authority.
	WebsiteCaId pulumix.Input[*string]
}

func (WebsiteCertificateAuthorityAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*websiteCertificateAuthorityAssociationState)(nil)).Elem()
}

type websiteCertificateAuthorityAssociationArgs struct {
	// The root certificate of the Certificate Authority.
	Certificate string `pulumi:"certificate"`
	// The certificate name to display.
	DisplayName *string `pulumi:"displayName"`
	// The ARN of the fleet.
	FleetArn string `pulumi:"fleetArn"`
}

// The set of arguments for constructing a WebsiteCertificateAuthorityAssociation resource.
type WebsiteCertificateAuthorityAssociationArgs struct {
	// The root certificate of the Certificate Authority.
	Certificate pulumix.Input[string]
	// The certificate name to display.
	DisplayName pulumix.Input[*string]
	// The ARN of the fleet.
	FleetArn pulumix.Input[string]
}

func (WebsiteCertificateAuthorityAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*websiteCertificateAuthorityAssociationArgs)(nil)).Elem()
}

type WebsiteCertificateAuthorityAssociationOutput struct{ *pulumi.OutputState }

func (WebsiteCertificateAuthorityAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebsiteCertificateAuthorityAssociation)(nil)).Elem()
}

func (o WebsiteCertificateAuthorityAssociationOutput) ToWebsiteCertificateAuthorityAssociationOutput() WebsiteCertificateAuthorityAssociationOutput {
	return o
}

func (o WebsiteCertificateAuthorityAssociationOutput) ToWebsiteCertificateAuthorityAssociationOutputWithContext(ctx context.Context) WebsiteCertificateAuthorityAssociationOutput {
	return o
}

func (o WebsiteCertificateAuthorityAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[WebsiteCertificateAuthorityAssociation] {
	return pulumix.Output[WebsiteCertificateAuthorityAssociation]{
		OutputState: o.OutputState,
	}
}

// The root certificate of the Certificate Authority.
func (o WebsiteCertificateAuthorityAssociationOutput) Certificate() pulumix.Output[string] {
	value := pulumix.Apply[WebsiteCertificateAuthorityAssociation](o, func(v WebsiteCertificateAuthorityAssociation) pulumix.Output[string] { return v.Certificate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The certificate name to display.
func (o WebsiteCertificateAuthorityAssociationOutput) DisplayName() pulumix.Output[*string] {
	value := pulumix.Apply[WebsiteCertificateAuthorityAssociation](o, func(v WebsiteCertificateAuthorityAssociation) pulumix.Output[*string] { return v.DisplayName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ARN of the fleet.
func (o WebsiteCertificateAuthorityAssociationOutput) FleetArn() pulumix.Output[string] {
	value := pulumix.Apply[WebsiteCertificateAuthorityAssociation](o, func(v WebsiteCertificateAuthorityAssociation) pulumix.Output[string] { return v.FleetArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A unique identifier for the Certificate Authority.
func (o WebsiteCertificateAuthorityAssociationOutput) WebsiteCaId() pulumix.Output[string] {
	value := pulumix.Apply[WebsiteCertificateAuthorityAssociation](o, func(v WebsiteCertificateAuthorityAssociation) pulumix.Output[string] { return v.WebsiteCaId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(WebsiteCertificateAuthorityAssociationOutput{})
}
