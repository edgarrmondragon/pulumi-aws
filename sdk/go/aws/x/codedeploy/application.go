// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codedeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CodeDeploy application to be used as a basis for deployments
type Application struct {
	pulumi.CustomResourceState

	// The application ID.
	ApplicationId pulumix.Output[string] `pulumi:"applicationId"`
	// The ARN of the CodeDeploy application.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The compute platform can either be `ECS`, `Lambda`, or `Server`. Default is `Server`.
	ComputePlatform pulumix.Output[*string] `pulumi:"computePlatform"`
	// The name for a connection to a GitHub account.
	GithubAccountName pulumix.Output[string] `pulumi:"githubAccountName"`
	// Whether the user has authenticated with GitHub for the specified application.
	LinkedToGithub pulumix.Output[bool] `pulumi:"linkedToGithub"`
	// The name of the application.
	Name pulumix.Output[string] `pulumi:"name"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		args = &ApplicationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("aws:codedeploy/application:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws:codedeploy/application:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
	// The application ID.
	ApplicationId *string `pulumi:"applicationId"`
	// The ARN of the CodeDeploy application.
	Arn *string `pulumi:"arn"`
	// The compute platform can either be `ECS`, `Lambda`, or `Server`. Default is `Server`.
	ComputePlatform *string `pulumi:"computePlatform"`
	// The name for a connection to a GitHub account.
	GithubAccountName *string `pulumi:"githubAccountName"`
	// Whether the user has authenticated with GitHub for the specified application.
	LinkedToGithub *bool `pulumi:"linkedToGithub"`
	// The name of the application.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ApplicationState struct {
	// The application ID.
	ApplicationId pulumix.Input[*string]
	// The ARN of the CodeDeploy application.
	Arn pulumix.Input[*string]
	// The compute platform can either be `ECS`, `Lambda`, or `Server`. Default is `Server`.
	ComputePlatform pulumix.Input[*string]
	// The name for a connection to a GitHub account.
	GithubAccountName pulumix.Input[*string]
	// Whether the user has authenticated with GitHub for the specified application.
	LinkedToGithub pulumix.Input[*bool]
	// The name of the application.
	Name pulumix.Input[*string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// The compute platform can either be `ECS`, `Lambda`, or `Server`. Default is `Server`.
	ComputePlatform *string `pulumi:"computePlatform"`
	// The name of the application.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// The compute platform can either be `ECS`, `Lambda`, or `Server`. Default is `Server`.
	ComputePlatform pulumix.Input[*string]
	// The name of the application.
	Name pulumix.Input[*string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToOutput(ctx context.Context) pulumix.Output[Application] {
	return pulumix.Output[Application]{
		OutputState: o.OutputState,
	}
}

// The application ID.
func (o ApplicationOutput) ApplicationId() pulumix.Output[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[string] { return v.ApplicationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the CodeDeploy application.
func (o ApplicationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The compute platform can either be `ECS`, `Lambda`, or `Server`. Default is `Server`.
func (o ApplicationOutput) ComputePlatform() pulumix.Output[*string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[*string] { return v.ComputePlatform })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name for a connection to a GitHub account.
func (o ApplicationOutput) GithubAccountName() pulumix.Output[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[string] { return v.GithubAccountName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether the user has authenticated with GitHub for the specified application.
func (o ApplicationOutput) LinkedToGithub() pulumix.Output[bool] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[bool] { return v.LinkedToGithub })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The name of the application.
func (o ApplicationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ApplicationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ApplicationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ApplicationOutput{})
}
