// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivschat

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS IVS (Interactive Video) Chat Logging Configuration.
type LoggingConfiguration struct {
	pulumi.CustomResourceState

	// ARN of the Logging Configuration.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Object containing destination configuration for where chat activity will be logged. This object must contain exactly one of the following children arguments:
	DestinationConfiguration pulumix.GPtrOutput[LoggingConfigurationDestinationConfiguration, LoggingConfigurationDestinationConfigurationOutput] `pulumi:"destinationConfiguration"`
	// Logging Configuration name.
	Name pulumix.Output[string] `pulumi:"name"`
	// State of the Logging Configuration.
	State pulumix.Output[string] `pulumi:"state"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewLoggingConfiguration registers a new resource with the given unique name, arguments, and options.
func NewLoggingConfiguration(ctx *pulumi.Context,
	name string, args *LoggingConfigurationArgs, opts ...pulumi.ResourceOption) (*LoggingConfiguration, error) {
	if args == nil {
		args = &LoggingConfigurationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoggingConfiguration
	err := ctx.RegisterResource("aws:ivschat/loggingConfiguration:LoggingConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoggingConfiguration gets an existing LoggingConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoggingConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggingConfigurationState, opts ...pulumi.ResourceOption) (*LoggingConfiguration, error) {
	var resource LoggingConfiguration
	err := ctx.ReadResource("aws:ivschat/loggingConfiguration:LoggingConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoggingConfiguration resources.
type loggingConfigurationState struct {
	// ARN of the Logging Configuration.
	Arn *string `pulumi:"arn"`
	// Object containing destination configuration for where chat activity will be logged. This object must contain exactly one of the following children arguments:
	DestinationConfiguration *LoggingConfigurationDestinationConfiguration `pulumi:"destinationConfiguration"`
	// Logging Configuration name.
	Name *string `pulumi:"name"`
	// State of the Logging Configuration.
	State *string `pulumi:"state"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type LoggingConfigurationState struct {
	// ARN of the Logging Configuration.
	Arn pulumix.Input[*string]
	// Object containing destination configuration for where chat activity will be logged. This object must contain exactly one of the following children arguments:
	DestinationConfiguration pulumix.Input[*LoggingConfigurationDestinationConfigurationArgs]
	// Logging Configuration name.
	Name pulumix.Input[*string]
	// State of the Logging Configuration.
	State pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (LoggingConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingConfigurationState)(nil)).Elem()
}

type loggingConfigurationArgs struct {
	// Object containing destination configuration for where chat activity will be logged. This object must contain exactly one of the following children arguments:
	DestinationConfiguration *LoggingConfigurationDestinationConfiguration `pulumi:"destinationConfiguration"`
	// Logging Configuration name.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LoggingConfiguration resource.
type LoggingConfigurationArgs struct {
	// Object containing destination configuration for where chat activity will be logged. This object must contain exactly one of the following children arguments:
	DestinationConfiguration pulumix.Input[*LoggingConfigurationDestinationConfigurationArgs]
	// Logging Configuration name.
	Name pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (LoggingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingConfigurationArgs)(nil)).Elem()
}

type LoggingConfigurationOutput struct{ *pulumi.OutputState }

func (LoggingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingConfiguration)(nil)).Elem()
}

func (o LoggingConfigurationOutput) ToLoggingConfigurationOutput() LoggingConfigurationOutput {
	return o
}

func (o LoggingConfigurationOutput) ToLoggingConfigurationOutputWithContext(ctx context.Context) LoggingConfigurationOutput {
	return o
}

func (o LoggingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingConfiguration] {
	return pulumix.Output[LoggingConfiguration]{
		OutputState: o.OutputState,
	}
}

// ARN of the Logging Configuration.
func (o LoggingConfigurationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[LoggingConfiguration](o, func(v LoggingConfiguration) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Object containing destination configuration for where chat activity will be logged. This object must contain exactly one of the following children arguments:
func (o LoggingConfigurationOutput) DestinationConfiguration() pulumix.GPtrOutput[LoggingConfigurationDestinationConfiguration, LoggingConfigurationDestinationConfigurationOutput] {
	value := pulumix.Apply[LoggingConfiguration](o, func(v LoggingConfiguration) pulumix.GPtrOutput[LoggingConfigurationDestinationConfiguration, LoggingConfigurationDestinationConfigurationOutput] {
		return v.DestinationConfiguration
	})
	unwrapped := pulumix.Flatten[*LoggingConfigurationDestinationConfiguration, pulumix.GPtrOutput[LoggingConfigurationDestinationConfiguration, LoggingConfigurationDestinationConfigurationOutput]](value)
	return pulumix.GPtrOutput[LoggingConfigurationDestinationConfiguration, LoggingConfigurationDestinationConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Logging Configuration name.
func (o LoggingConfigurationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[LoggingConfiguration](o, func(v LoggingConfiguration) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// State of the Logging Configuration.
func (o LoggingConfigurationOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[LoggingConfiguration](o, func(v LoggingConfiguration) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LoggingConfigurationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[LoggingConfiguration](o, func(v LoggingConfiguration) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o LoggingConfigurationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[LoggingConfiguration](o, func(v LoggingConfiguration) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(LoggingConfigurationOutput{})
}
