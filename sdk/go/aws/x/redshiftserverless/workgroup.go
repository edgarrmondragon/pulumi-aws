// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new Amazon Redshift Serverless Workgroup.
type Workgroup struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the Redshift Serverless Workgroup.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
	BaseCapacity pulumix.Output[int] `pulumi:"baseCapacity"`
	// An array of parameters to set for more control over a serverless database. See `Config Parameter` below.
	ConfigParameters pulumix.GArrayOutput[WorkgroupConfigParameter, WorkgroupConfigParameterOutput] `pulumi:"configParameters"`
	// The endpoint that is created from the workgroup. See `Endpoint` below.
	Endpoints pulumix.GArrayOutput[WorkgroupEndpoint, WorkgroupEndpointOutput] `pulumi:"endpoints"`
	// The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC instead of over the internet.
	EnhancedVpcRouting pulumix.Output[*bool] `pulumi:"enhancedVpcRouting"`
	// The name of the namespace.
	NamespaceName pulumix.Output[string] `pulumi:"namespaceName"`
	// A value that specifies whether the workgroup can be accessed from a public network.
	PubliclyAccessible pulumix.Output[*bool] `pulumi:"publiclyAccessible"`
	// An array of security group IDs to associate with the workgroup.
	SecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"securityGroupIds"`
	// An array of VPC subnet IDs to associate with the workgroup. When set, must contain at least three subnets spanning three Availability Zones. A minimum number of IP addresses is required and scales with the Base Capacity. For more information, see the following [AWS document](https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-known-issues.html).
	SubnetIds pulumix.ArrayOutput[string] `pulumi:"subnetIds"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The Redshift Workgroup ID.
	WorkgroupId pulumix.Output[string] `pulumi:"workgroupId"`
	// The name of the workgroup.
	//
	// The following arguments are optional:
	WorkgroupName pulumix.Output[string] `pulumi:"workgroupName"`
}

// NewWorkgroup registers a new resource with the given unique name, arguments, and options.
func NewWorkgroup(ctx *pulumi.Context,
	name string, args *WorkgroupArgs, opts ...pulumi.ResourceOption) (*Workgroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.WorkgroupName == nil {
		return nil, errors.New("invalid value for required argument 'WorkgroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workgroup
	err := ctx.RegisterResource("aws:redshiftserverless/workgroup:Workgroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkgroup gets an existing Workgroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkgroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkgroupState, opts ...pulumi.ResourceOption) (*Workgroup, error) {
	var resource Workgroup
	err := ctx.ReadResource("aws:redshiftserverless/workgroup:Workgroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workgroup resources.
type workgroupState struct {
	// Amazon Resource Name (ARN) of the Redshift Serverless Workgroup.
	Arn *string `pulumi:"arn"`
	// The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
	BaseCapacity *int `pulumi:"baseCapacity"`
	// An array of parameters to set for more control over a serverless database. See `Config Parameter` below.
	ConfigParameters []WorkgroupConfigParameter `pulumi:"configParameters"`
	// The endpoint that is created from the workgroup. See `Endpoint` below.
	Endpoints []WorkgroupEndpoint `pulumi:"endpoints"`
	// The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC instead of over the internet.
	EnhancedVpcRouting *bool `pulumi:"enhancedVpcRouting"`
	// The name of the namespace.
	NamespaceName *string `pulumi:"namespaceName"`
	// A value that specifies whether the workgroup can be accessed from a public network.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// An array of security group IDs to associate with the workgroup.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// An array of VPC subnet IDs to associate with the workgroup. When set, must contain at least three subnets spanning three Availability Zones. A minimum number of IP addresses is required and scales with the Base Capacity. For more information, see the following [AWS document](https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-known-issues.html).
	SubnetIds []string `pulumi:"subnetIds"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The Redshift Workgroup ID.
	WorkgroupId *string `pulumi:"workgroupId"`
	// The name of the workgroup.
	//
	// The following arguments are optional:
	WorkgroupName *string `pulumi:"workgroupName"`
}

type WorkgroupState struct {
	// Amazon Resource Name (ARN) of the Redshift Serverless Workgroup.
	Arn pulumix.Input[*string]
	// The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
	BaseCapacity pulumix.Input[*int]
	// An array of parameters to set for more control over a serverless database. See `Config Parameter` below.
	ConfigParameters pulumix.Input[[]*WorkgroupConfigParameterArgs]
	// The endpoint that is created from the workgroup. See `Endpoint` below.
	Endpoints pulumix.Input[[]*WorkgroupEndpointArgs]
	// The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC instead of over the internet.
	EnhancedVpcRouting pulumix.Input[*bool]
	// The name of the namespace.
	NamespaceName pulumix.Input[*string]
	// A value that specifies whether the workgroup can be accessed from a public network.
	PubliclyAccessible pulumix.Input[*bool]
	// An array of security group IDs to associate with the workgroup.
	SecurityGroupIds pulumix.Input[[]string]
	// An array of VPC subnet IDs to associate with the workgroup. When set, must contain at least three subnets spanning three Availability Zones. A minimum number of IP addresses is required and scales with the Base Capacity. For more information, see the following [AWS document](https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-known-issues.html).
	SubnetIds pulumix.Input[[]string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The Redshift Workgroup ID.
	WorkgroupId pulumix.Input[*string]
	// The name of the workgroup.
	//
	// The following arguments are optional:
	WorkgroupName pulumix.Input[*string]
}

func (WorkgroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*workgroupState)(nil)).Elem()
}

type workgroupArgs struct {
	// The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
	BaseCapacity *int `pulumi:"baseCapacity"`
	// An array of parameters to set for more control over a serverless database. See `Config Parameter` below.
	ConfigParameters []WorkgroupConfigParameter `pulumi:"configParameters"`
	// The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC instead of over the internet.
	EnhancedVpcRouting *bool `pulumi:"enhancedVpcRouting"`
	// The name of the namespace.
	NamespaceName string `pulumi:"namespaceName"`
	// A value that specifies whether the workgroup can be accessed from a public network.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// An array of security group IDs to associate with the workgroup.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// An array of VPC subnet IDs to associate with the workgroup. When set, must contain at least three subnets spanning three Availability Zones. A minimum number of IP addresses is required and scales with the Base Capacity. For more information, see the following [AWS document](https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-known-issues.html).
	SubnetIds []string `pulumi:"subnetIds"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The name of the workgroup.
	//
	// The following arguments are optional:
	WorkgroupName string `pulumi:"workgroupName"`
}

// The set of arguments for constructing a Workgroup resource.
type WorkgroupArgs struct {
	// The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
	BaseCapacity pulumix.Input[*int]
	// An array of parameters to set for more control over a serverless database. See `Config Parameter` below.
	ConfigParameters pulumix.Input[[]*WorkgroupConfigParameterArgs]
	// The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC instead of over the internet.
	EnhancedVpcRouting pulumix.Input[*bool]
	// The name of the namespace.
	NamespaceName pulumix.Input[string]
	// A value that specifies whether the workgroup can be accessed from a public network.
	PubliclyAccessible pulumix.Input[*bool]
	// An array of security group IDs to associate with the workgroup.
	SecurityGroupIds pulumix.Input[[]string]
	// An array of VPC subnet IDs to associate with the workgroup. When set, must contain at least three subnets spanning three Availability Zones. A minimum number of IP addresses is required and scales with the Base Capacity. For more information, see the following [AWS document](https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-known-issues.html).
	SubnetIds pulumix.Input[[]string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The name of the workgroup.
	//
	// The following arguments are optional:
	WorkgroupName pulumix.Input[string]
}

func (WorkgroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workgroupArgs)(nil)).Elem()
}

type WorkgroupOutput struct{ *pulumi.OutputState }

func (WorkgroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Workgroup)(nil)).Elem()
}

func (o WorkgroupOutput) ToWorkgroupOutput() WorkgroupOutput {
	return o
}

func (o WorkgroupOutput) ToWorkgroupOutputWithContext(ctx context.Context) WorkgroupOutput {
	return o
}

func (o WorkgroupOutput) ToOutput(ctx context.Context) pulumix.Output[Workgroup] {
	return pulumix.Output[Workgroup]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the Redshift Serverless Workgroup.
func (o WorkgroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
func (o WorkgroupOutput) BaseCapacity() pulumix.Output[int] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.Output[int] { return v.BaseCapacity })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// An array of parameters to set for more control over a serverless database. See `Config Parameter` below.
func (o WorkgroupOutput) ConfigParameters() pulumix.GArrayOutput[WorkgroupConfigParameter, WorkgroupConfigParameterOutput] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.GArrayOutput[WorkgroupConfigParameter, WorkgroupConfigParameterOutput] {
		return v.ConfigParameters
	})
	unwrapped := pulumix.Flatten[[]WorkgroupConfigParameter, pulumix.GArrayOutput[WorkgroupConfigParameter, WorkgroupConfigParameterOutput]](value)
	return pulumix.GArrayOutput[WorkgroupConfigParameter, WorkgroupConfigParameterOutput]{OutputState: unwrapped.OutputState}
}

// The endpoint that is created from the workgroup. See `Endpoint` below.
func (o WorkgroupOutput) Endpoints() pulumix.GArrayOutput[WorkgroupEndpoint, WorkgroupEndpointOutput] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.GArrayOutput[WorkgroupEndpoint, WorkgroupEndpointOutput] { return v.Endpoints })
	unwrapped := pulumix.Flatten[[]WorkgroupEndpoint, pulumix.GArrayOutput[WorkgroupEndpoint, WorkgroupEndpointOutput]](value)
	return pulumix.GArrayOutput[WorkgroupEndpoint, WorkgroupEndpointOutput]{OutputState: unwrapped.OutputState}
}

// The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC instead of over the internet.
func (o WorkgroupOutput) EnhancedVpcRouting() pulumix.Output[*bool] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.Output[*bool] { return v.EnhancedVpcRouting })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The name of the namespace.
func (o WorkgroupOutput) NamespaceName() pulumix.Output[string] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.Output[string] { return v.NamespaceName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A value that specifies whether the workgroup can be accessed from a public network.
func (o WorkgroupOutput) PubliclyAccessible() pulumix.Output[*bool] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.Output[*bool] { return v.PubliclyAccessible })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// An array of security group IDs to associate with the workgroup.
func (o WorkgroupOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.ArrayOutput[string] { return v.SecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// An array of VPC subnet IDs to associate with the workgroup. When set, must contain at least three subnets spanning three Availability Zones. A minimum number of IP addresses is required and scales with the Base Capacity. For more information, see the following [AWS document](https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-known-issues.html).
func (o WorkgroupOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.ArrayOutput[string] { return v.SubnetIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o WorkgroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o WorkgroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The Redshift Workgroup ID.
func (o WorkgroupOutput) WorkgroupId() pulumix.Output[string] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.Output[string] { return v.WorkgroupId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the workgroup.
//
// The following arguments are optional:
func (o WorkgroupOutput) WorkgroupName() pulumix.Output[string] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.Output[string] { return v.WorkgroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(WorkgroupOutput{})
}
