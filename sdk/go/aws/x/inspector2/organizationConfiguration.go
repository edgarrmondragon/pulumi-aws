// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inspector2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an Amazon Inspector Organization Configuration.
//
// > **NOTE:** In order for this resource to work, the account you use must be an Inspector Delegated Admin Account.
//
// > **NOTE:** When this resource is deleted, EC2, ECR and Lambda scans will no longer be automatically enabled for new members of your Amazon Inspector organization.
type OrganizationConfiguration struct {
	pulumi.CustomResourceState

	// Configuration block for auto enabling. See below.
	AutoEnable pulumix.GPtrOutput[OrganizationConfigurationAutoEnable, OrganizationConfigurationAutoEnableOutput] `pulumi:"autoEnable"`
	// Whether your configuration reached the max account limit.
	MaxAccountLimitReached pulumix.Output[bool] `pulumi:"maxAccountLimitReached"`
}

// NewOrganizationConfiguration registers a new resource with the given unique name, arguments, and options.
func NewOrganizationConfiguration(ctx *pulumi.Context,
	name string, args *OrganizationConfigurationArgs, opts ...pulumi.ResourceOption) (*OrganizationConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoEnable == nil {
		return nil, errors.New("invalid value for required argument 'AutoEnable'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationConfiguration
	err := ctx.RegisterResource("aws:inspector2/organizationConfiguration:OrganizationConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationConfiguration gets an existing OrganizationConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationConfigurationState, opts ...pulumi.ResourceOption) (*OrganizationConfiguration, error) {
	var resource OrganizationConfiguration
	err := ctx.ReadResource("aws:inspector2/organizationConfiguration:OrganizationConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationConfiguration resources.
type organizationConfigurationState struct {
	// Configuration block for auto enabling. See below.
	AutoEnable *OrganizationConfigurationAutoEnable `pulumi:"autoEnable"`
	// Whether your configuration reached the max account limit.
	MaxAccountLimitReached *bool `pulumi:"maxAccountLimitReached"`
}

type OrganizationConfigurationState struct {
	// Configuration block for auto enabling. See below.
	AutoEnable pulumix.Input[*OrganizationConfigurationAutoEnableArgs]
	// Whether your configuration reached the max account limit.
	MaxAccountLimitReached pulumix.Input[*bool]
}

func (OrganizationConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationConfigurationState)(nil)).Elem()
}

type organizationConfigurationArgs struct {
	// Configuration block for auto enabling. See below.
	AutoEnable OrganizationConfigurationAutoEnable `pulumi:"autoEnable"`
}

// The set of arguments for constructing a OrganizationConfiguration resource.
type OrganizationConfigurationArgs struct {
	// Configuration block for auto enabling. See below.
	AutoEnable pulumix.Input[*OrganizationConfigurationAutoEnableArgs]
}

func (OrganizationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationConfigurationArgs)(nil)).Elem()
}

type OrganizationConfigurationOutput struct{ *pulumi.OutputState }

func (OrganizationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationConfiguration)(nil)).Elem()
}

func (o OrganizationConfigurationOutput) ToOrganizationConfigurationOutput() OrganizationConfigurationOutput {
	return o
}

func (o OrganizationConfigurationOutput) ToOrganizationConfigurationOutputWithContext(ctx context.Context) OrganizationConfigurationOutput {
	return o
}

func (o OrganizationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[OrganizationConfiguration] {
	return pulumix.Output[OrganizationConfiguration]{
		OutputState: o.OutputState,
	}
}

// Configuration block for auto enabling. See below.
func (o OrganizationConfigurationOutput) AutoEnable() pulumix.GPtrOutput[OrganizationConfigurationAutoEnable, OrganizationConfigurationAutoEnableOutput] {
	value := pulumix.Apply[OrganizationConfiguration](o, func(v OrganizationConfiguration) pulumix.GPtrOutput[OrganizationConfigurationAutoEnable, OrganizationConfigurationAutoEnableOutput] {
		return v.AutoEnable
	})
	unwrapped := pulumix.Flatten[*OrganizationConfigurationAutoEnable, pulumix.GPtrOutput[OrganizationConfigurationAutoEnable, OrganizationConfigurationAutoEnableOutput]](value)
	return pulumix.GPtrOutput[OrganizationConfigurationAutoEnable, OrganizationConfigurationAutoEnableOutput]{OutputState: unwrapped.OutputState}
}

// Whether your configuration reached the max account limit.
func (o OrganizationConfigurationOutput) MaxAccountLimitReached() pulumix.Output[bool] {
	value := pulumix.Apply[OrganizationConfiguration](o, func(v OrganizationConfiguration) pulumix.Output[bool] { return v.MaxAccountLimitReached })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

func init() {
	pulumi.RegisterOutputType(OrganizationConfigurationOutput{})
}
