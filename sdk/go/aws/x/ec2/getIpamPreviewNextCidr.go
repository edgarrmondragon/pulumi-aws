// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Previews a CIDR from an IPAM address pool. Only works for private IPv4.
//
// > **NOTE:** This functionality is also encapsulated in a resource sharing the same name. The data source can be used when you need to use the cidr in a calculation of the same Root module, `count` for example. However, once a cidr range has been allocated that was previewed, the next refresh will find a **new** cidr and may force new resources downstream. Make sure to use `ignoreChanges` if this is undesirable.
func GetIpamPreviewNextCidr(ctx *pulumi.Context, args *GetIpamPreviewNextCidrArgs, opts ...pulumi.InvokeOption) (*GetIpamPreviewNextCidrResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetIpamPreviewNextCidrResult
	err := ctx.Invoke("aws:ec2/getIpamPreviewNextCidr:getIpamPreviewNextCidr", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpamPreviewNextCidr.
type GetIpamPreviewNextCidrArgs struct {
	// Exclude a particular CIDR range from being returned by the pool.
	DisallowedCidrs []string `pulumi:"disallowedCidrs"`
	// ID of the pool to which you want to assign a CIDR.
	IpamPoolId string `pulumi:"ipamPoolId"`
	// Netmask length of the CIDR you would like to preview from the IPAM pool.
	NetmaskLength *int `pulumi:"netmaskLength"`
}

// A collection of values returned by getIpamPreviewNextCidr.
type GetIpamPreviewNextCidrResult struct {
	// Previewed CIDR from the pool.
	Cidr            string   `pulumi:"cidr"`
	DisallowedCidrs []string `pulumi:"disallowedCidrs"`
	// The provider-assigned unique ID for this managed resource.
	Id            string `pulumi:"id"`
	IpamPoolId    string `pulumi:"ipamPoolId"`
	NetmaskLength *int   `pulumi:"netmaskLength"`
}

func GetIpamPreviewNextCidrOutput(ctx *pulumi.Context, args GetIpamPreviewNextCidrOutputArgs, opts ...pulumi.InvokeOption) GetIpamPreviewNextCidrResultOutput {
	outputResult := pulumix.ApplyErr[*GetIpamPreviewNextCidrArgs](args.ToOutput(), func(plainArgs *GetIpamPreviewNextCidrArgs) (*GetIpamPreviewNextCidrResult, error) {
		return GetIpamPreviewNextCidr(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetIpamPreviewNextCidrResultOutput, *GetIpamPreviewNextCidrResult](outputResult)
}

// A collection of arguments for invoking getIpamPreviewNextCidr.
type GetIpamPreviewNextCidrOutputArgs struct {
	// Exclude a particular CIDR range from being returned by the pool.
	DisallowedCidrs pulumix.Input[[]string] `pulumi:"disallowedCidrs"`
	// ID of the pool to which you want to assign a CIDR.
	IpamPoolId pulumix.Input[string] `pulumi:"ipamPoolId"`
	// Netmask length of the CIDR you would like to preview from the IPAM pool.
	NetmaskLength pulumix.Input[*int] `pulumi:"netmaskLength"`
}

func (args GetIpamPreviewNextCidrOutputArgs) ToOutput() pulumix.Output[*GetIpamPreviewNextCidrArgs] {
	allArgs := pulumix.All(
		args.DisallowedCidrs.ToOutput(context.Background()).AsAny(),
		args.IpamPoolId.ToOutput(context.Background()).AsAny(),
		args.NetmaskLength.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetIpamPreviewNextCidrArgs {
		return &GetIpamPreviewNextCidrArgs{
			DisallowedCidrs: resolvedArgs[0].([]string),
			IpamPoolId:      resolvedArgs[1].(string),
			NetmaskLength:   resolvedArgs[2].(*int),
		}
	})
}

type GetIpamPreviewNextCidrResultOutput struct{ *pulumi.OutputState }

func (GetIpamPreviewNextCidrResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpamPreviewNextCidrResult)(nil)).Elem()
}

func (o GetIpamPreviewNextCidrResultOutput) ToOutput(context.Context) pulumix.Output[*GetIpamPreviewNextCidrResult] {
	return pulumix.Output[*GetIpamPreviewNextCidrResult]{
		OutputState: o.OutputState,
	}
}

func (o GetIpamPreviewNextCidrResultOutput) Cidr() pulumix.Output[string] {
	return pulumix.Apply[*GetIpamPreviewNextCidrResult](o, func(v *GetIpamPreviewNextCidrResult) string { return v.Cidr })
}

func (o GetIpamPreviewNextCidrResultOutput) DisallowedCidrs() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetIpamPreviewNextCidrResult](o, func(v *GetIpamPreviewNextCidrResult) []string { return v.DisallowedCidrs })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetIpamPreviewNextCidrResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetIpamPreviewNextCidrResult](o, func(v *GetIpamPreviewNextCidrResult) string { return v.Id })
}

func (o GetIpamPreviewNextCidrResultOutput) IpamPoolId() pulumix.Output[string] {
	return pulumix.Apply[*GetIpamPreviewNextCidrResult](o, func(v *GetIpamPreviewNextCidrResult) string { return v.IpamPoolId })
}

func (o GetIpamPreviewNextCidrResultOutput) NetmaskLength() pulumix.Output[*int] {
	return pulumix.Apply[*GetIpamPreviewNextCidrResult](o, func(v *GetIpamPreviewNextCidrResult) *int { return v.NetmaskLength })
}
