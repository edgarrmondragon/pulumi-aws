// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `ec2.getPrefixList` provides details about a specific AWS prefix list (PL)
// in the current region.
//
// This can be used both to validate a prefix list given in a variable
// and to obtain the CIDR blocks (IP address ranges) for the associated
// AWS service. The latter may be useful e.g., for adding network ACL
// rules.
//
// The ec2.ManagedPrefixList data source is normally more appropriate to use given it can return customer-managed prefix list info, as well as additional attributes.
func GetPrefixList(ctx *pulumi.Context, args *GetPrefixListArgs, opts ...pulumi.InvokeOption) (*GetPrefixListResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPrefixListResult
	err := ctx.Invoke("aws:ec2/getPrefixList:getPrefixList", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPrefixList.
type GetPrefixListArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters []GetPrefixListFilter `pulumi:"filters"`
	// Name of the prefix list to select.
	Name *string `pulumi:"name"`
	// ID of the prefix list to select.
	PrefixListId *string `pulumi:"prefixListId"`
}

// A collection of values returned by getPrefixList.
type GetPrefixListResult struct {
	// List of CIDR blocks for the AWS service associated with the prefix list.
	CidrBlocks []string              `pulumi:"cidrBlocks"`
	Filters    []GetPrefixListFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the selected prefix list.
	Name         string  `pulumi:"name"`
	PrefixListId *string `pulumi:"prefixListId"`
}

func GetPrefixListOutput(ctx *pulumi.Context, args GetPrefixListOutputArgs, opts ...pulumi.InvokeOption) GetPrefixListResultOutput {
	outputResult := pulumix.ApplyErr[*GetPrefixListArgs](args.ToOutput(), func(plainArgs *GetPrefixListArgs) (*GetPrefixListResult, error) {
		return GetPrefixList(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetPrefixListResultOutput, *GetPrefixListResult](outputResult)
}

// A collection of arguments for invoking getPrefixList.
type GetPrefixListOutputArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters pulumix.Input[[]*GetPrefixListFilterArgs] `pulumi:"filters"`
	// Name of the prefix list to select.
	Name pulumix.Input[*string] `pulumi:"name"`
	// ID of the prefix list to select.
	PrefixListId pulumix.Input[*string] `pulumi:"prefixListId"`
}

func (args GetPrefixListOutputArgs) ToOutput() pulumix.Output[*GetPrefixListArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.PrefixListId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetPrefixListArgs {
		return &GetPrefixListArgs{
			Filters:      resolvedArgs[0].([]GetPrefixListFilter),
			Name:         resolvedArgs[1].(*string),
			PrefixListId: resolvedArgs[2].(*string),
		}
	})
}

type GetPrefixListResultOutput struct{ *pulumi.OutputState }

func (GetPrefixListResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrefixListResult)(nil)).Elem()
}

func (o GetPrefixListResultOutput) ToOutput(context.Context) pulumix.Output[*GetPrefixListResult] {
	return pulumix.Output[*GetPrefixListResult]{
		OutputState: o.OutputState,
	}
}

func (o GetPrefixListResultOutput) CidrBlocks() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetPrefixListResult](o, func(v *GetPrefixListResult) []string { return v.CidrBlocks })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetPrefixListResultOutput) Filters() pulumix.GArrayOutput[GetPrefixListFilter, GetPrefixListFilterOutput] {
	value := pulumix.Apply[*GetPrefixListResult](o, func(v *GetPrefixListResult) []GetPrefixListFilter { return v.Filters })
	return pulumix.GArrayOutput[GetPrefixListFilter, GetPrefixListFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetPrefixListResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetPrefixListResult](o, func(v *GetPrefixListResult) string { return v.Id })
}

func (o GetPrefixListResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*GetPrefixListResult](o, func(v *GetPrefixListResult) string { return v.Name })
}

func (o GetPrefixListResultOutput) PrefixListId() pulumix.Output[*string] {
	return pulumix.Apply[*GetPrefixListResult](o, func(v *GetPrefixListResult) *string { return v.PrefixListId })
}
