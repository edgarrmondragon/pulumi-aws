// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to compose and decompose AWS service DNS names.
func GetService(ctx *pulumi.Context, args *GetServiceArgs, opts ...pulumi.InvokeOption) (*GetServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetServiceResult
	err := ctx.Invoke("aws:index/getService:getService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getService.
type GetServiceArgs struct {
	// DNS name of the service (_e.g.,_ `rds.us-east-1.amazonaws.com`). One of `dnsName`, `reverseDnsName`, or `serviceId` is required.
	DnsName *string `pulumi:"dnsName"`
	Id      *string `pulumi:"id"`
	// Region of the service (_e.g.,_ `us-west-2`, `ap-northeast-1`).
	Region *string `pulumi:"region"`
	// Reverse DNS name of the service (_e.g.,_ `com.amazonaws.us-west-2.s3`). One of `dnsName`, `reverseDnsName`, or `serviceId` is required.
	ReverseDnsName *string `pulumi:"reverseDnsName"`
	// Prefix of the service (_e.g.,_ `com.amazonaws` in AWS Commercial, `cn.com.amazonaws` in AWS China).
	ReverseDnsPrefix *string `pulumi:"reverseDnsPrefix"`
	// Service (_e.g.,_ `s3`, `rds`, `ec2`). One of `dnsName`, `reverseDnsName`, or `serviceId` is required.
	ServiceId *string `pulumi:"serviceId"`
}

// A collection of values returned by getService.
type GetServiceResult struct {
	DnsName          string `pulumi:"dnsName"`
	Id               string `pulumi:"id"`
	Partition        string `pulumi:"partition"`
	Region           string `pulumi:"region"`
	ReverseDnsName   string `pulumi:"reverseDnsName"`
	ReverseDnsPrefix string `pulumi:"reverseDnsPrefix"`
	ServiceId        string `pulumi:"serviceId"`
	// Whether the service is supported in the region's partition. New services may not be listed immediately as supported.
	Supported bool `pulumi:"supported"`
}

func GetServiceOutput(ctx *pulumi.Context, args GetServiceOutputArgs, opts ...pulumi.InvokeOption) GetServiceResultOutput {
	outputResult := pulumix.ApplyErr[*GetServiceArgs](args.ToOutput(), func(plainArgs *GetServiceArgs) (*GetServiceResult, error) {
		return GetService(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetServiceResultOutput, *GetServiceResult](outputResult)
}

// A collection of arguments for invoking getService.
type GetServiceOutputArgs struct {
	// DNS name of the service (_e.g.,_ `rds.us-east-1.amazonaws.com`). One of `dnsName`, `reverseDnsName`, or `serviceId` is required.
	DnsName pulumix.Input[*string] `pulumi:"dnsName"`
	Id      pulumix.Input[*string] `pulumi:"id"`
	// Region of the service (_e.g.,_ `us-west-2`, `ap-northeast-1`).
	Region pulumix.Input[*string] `pulumi:"region"`
	// Reverse DNS name of the service (_e.g.,_ `com.amazonaws.us-west-2.s3`). One of `dnsName`, `reverseDnsName`, or `serviceId` is required.
	ReverseDnsName pulumix.Input[*string] `pulumi:"reverseDnsName"`
	// Prefix of the service (_e.g.,_ `com.amazonaws` in AWS Commercial, `cn.com.amazonaws` in AWS China).
	ReverseDnsPrefix pulumix.Input[*string] `pulumi:"reverseDnsPrefix"`
	// Service (_e.g.,_ `s3`, `rds`, `ec2`). One of `dnsName`, `reverseDnsName`, or `serviceId` is required.
	ServiceId pulumix.Input[*string] `pulumi:"serviceId"`
}

func (args GetServiceOutputArgs) ToOutput() pulumix.Output[*GetServiceArgs] {
	allArgs := pulumix.All(
		args.DnsName.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Region.ToOutput(context.Background()).AsAny(),
		args.ReverseDnsName.ToOutput(context.Background()).AsAny(),
		args.ReverseDnsPrefix.ToOutput(context.Background()).AsAny(),
		args.ServiceId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetServiceArgs {
		return &GetServiceArgs{
			DnsName:          resolvedArgs[0].(*string),
			Id:               resolvedArgs[1].(*string),
			Region:           resolvedArgs[2].(*string),
			ReverseDnsName:   resolvedArgs[3].(*string),
			ReverseDnsPrefix: resolvedArgs[4].(*string),
			ServiceId:        resolvedArgs[5].(*string),
		}
	})
}

type GetServiceResultOutput struct{ *pulumi.OutputState }

func (GetServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceResult)(nil)).Elem()
}

func (o GetServiceResultOutput) ToOutput(context.Context) pulumix.Output[*GetServiceResult] {
	return pulumix.Output[*GetServiceResult]{
		OutputState: o.OutputState,
	}
}

func (o GetServiceResultOutput) DnsName() pulumix.Output[string] {
	return pulumix.Apply[*GetServiceResult](o, func(v *GetServiceResult) string { return v.DnsName })
}

func (o GetServiceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetServiceResult](o, func(v *GetServiceResult) string { return v.Id })
}

func (o GetServiceResultOutput) Partition() pulumix.Output[string] {
	return pulumix.Apply[*GetServiceResult](o, func(v *GetServiceResult) string { return v.Partition })
}

func (o GetServiceResultOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[*GetServiceResult](o, func(v *GetServiceResult) string { return v.Region })
}

func (o GetServiceResultOutput) ReverseDnsName() pulumix.Output[string] {
	return pulumix.Apply[*GetServiceResult](o, func(v *GetServiceResult) string { return v.ReverseDnsName })
}

func (o GetServiceResultOutput) ReverseDnsPrefix() pulumix.Output[string] {
	return pulumix.Apply[*GetServiceResult](o, func(v *GetServiceResult) string { return v.ReverseDnsPrefix })
}

func (o GetServiceResultOutput) ServiceId() pulumix.Output[string] {
	return pulumix.Apply[*GetServiceResult](o, func(v *GetServiceResult) string { return v.ServiceId })
}

func (o GetServiceResultOutput) Supported() pulumix.Output[bool] {
	return pulumix.Apply[*GetServiceResult](o, func(v *GetServiceResult) bool { return v.Supported })
}
