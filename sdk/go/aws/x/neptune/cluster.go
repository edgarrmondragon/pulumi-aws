// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package neptune

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Neptune Cluster Resource. A Cluster Resource defines attributes that are
// applied to the entire cluster of Neptune Cluster Instances.
//
// Changes to a Neptune Cluster can occur when you manually change a
// parameter, such as `backupRetentionPeriod`, and are reflected in the next maintenance
// window. Because of this, this provider may report a difference in its planning
// phase because a modification has not yet taken place. You can use the
// `applyImmediately` flag to instruct the service to apply the change immediately
// (see documentation below).
type Cluster struct {
	pulumi.CustomResourceState

	// Specifies whether upgrades between different major versions are allowed. You must set it to `true` when providing an `engineVersion` parameter that uses a different major version than the DB cluster's current version. Default is `false`.
	AllowMajorVersionUpgrade pulumix.Output[bool] `pulumi:"allowMajorVersionUpgrade"`
	// Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately pulumix.Output[bool] `pulumi:"applyImmediately"`
	// The Neptune Cluster Amazon Resource Name (ARN)
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A list of EC2 Availability Zones that instances in the Neptune cluster can be created in.
	AvailabilityZones pulumix.ArrayOutput[string] `pulumi:"availabilityZones"`
	// The days to retain backups for. Default `1`
	BackupRetentionPeriod pulumix.Output[*int] `pulumi:"backupRetentionPeriod"`
	// The cluster identifier. If omitted, this provider will assign a random, unique identifier.
	ClusterIdentifier pulumix.Output[string] `pulumi:"clusterIdentifier"`
	// Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `clusterIdentifier`.
	ClusterIdentifierPrefix pulumix.Output[string] `pulumi:"clusterIdentifierPrefix"`
	// List of Neptune Instances that are a part of this cluster
	ClusterMembers pulumix.ArrayOutput[string] `pulumi:"clusterMembers"`
	// The Neptune Cluster Resource ID
	ClusterResourceId pulumix.Output[string] `pulumi:"clusterResourceId"`
	// If set to true, tags are copied to any snapshot of the DB cluster that is created.
	CopyTagsToSnapshot pulumix.Output[*bool] `pulumi:"copyTagsToSnapshot"`
	// A value that indicates whether the DB cluster has deletion protection enabled.The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
	DeletionProtection pulumix.Output[*bool] `pulumi:"deletionProtection"`
	// A list of the log types this DB cluster is configured to export to Cloudwatch Logs. Currently only supports `audit`.
	EnableCloudwatchLogsExports pulumix.ArrayOutput[string] `pulumi:"enableCloudwatchLogsExports"`
	// The DNS address of the Neptune instance
	Endpoint pulumix.Output[string] `pulumi:"endpoint"`
	// The name of the database engine to be used for this Neptune cluster. Defaults to `neptune`.
	Engine pulumix.Output[*string] `pulumi:"engine"`
	// The database engine version.
	EngineVersion pulumix.Output[string] `pulumi:"engineVersion"`
	// The name of your final Neptune snapshot when this Neptune cluster is deleted. If omitted, no final snapshot will be made.
	FinalSnapshotIdentifier pulumix.Output[*string] `pulumi:"finalSnapshotIdentifier"`
	// The global cluster identifier specified on `neptune.GlobalCluster`.
	GlobalClusterIdentifier pulumix.Output[*string] `pulumi:"globalClusterIdentifier"`
	// The Route53 Hosted Zone ID of the endpoint
	HostedZoneId pulumix.Output[string] `pulumi:"hostedZoneId"`
	// Specifies whether or not mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled.
	IamDatabaseAuthenticationEnabled pulumix.Output[*bool] `pulumi:"iamDatabaseAuthenticationEnabled"`
	// A List of ARNs for the IAM roles to associate to the Neptune Cluster.
	IamRoles pulumix.ArrayOutput[string] `pulumi:"iamRoles"`
	// The ARN for the KMS encryption key. When specifying `kmsKeyArn`, `storageEncrypted` needs to be set to true.
	KmsKeyArn pulumix.Output[string] `pulumi:"kmsKeyArn"`
	// A cluster parameter group to associate with the cluster.
	NeptuneClusterParameterGroupName pulumix.Output[*string] `pulumi:"neptuneClusterParameterGroupName"`
	// The name of the DB parameter group to apply to all instances of the DB cluster.
	NeptuneInstanceParameterGroupName pulumix.Output[*string] `pulumi:"neptuneInstanceParameterGroupName"`
	// A Neptune subnet group to associate with this Neptune instance.
	NeptuneSubnetGroupName pulumix.Output[string] `pulumi:"neptuneSubnetGroupName"`
	// The port on which the Neptune accepts connections. Default is `8182`.
	Port pulumix.Output[*int] `pulumi:"port"`
	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. Time in UTC. Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
	PreferredBackupWindow pulumix.Output[string] `pulumi:"preferredBackupWindow"`
	// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
	PreferredMaintenanceWindow pulumix.Output[string] `pulumi:"preferredMaintenanceWindow"`
	// A read-only endpoint for the Neptune cluster, automatically load-balanced across replicas
	ReaderEndpoint pulumix.Output[string] `pulumi:"readerEndpoint"`
	// ARN of a source Neptune cluster or Neptune instance if this Neptune cluster is to be created as a Read Replica.
	ReplicationSourceIdentifier pulumix.Output[*string] `pulumi:"replicationSourceIdentifier"`
	// If set, create the Neptune cluster as a serverless one. See Serverless for example block attributes.
	ServerlessV2ScalingConfiguration pulumix.GPtrOutput[ClusterServerlessV2ScalingConfiguration, ClusterServerlessV2ScalingConfigurationOutput] `pulumi:"serverlessV2ScalingConfiguration"`
	// Determines whether a final Neptune snapshot is created before the Neptune cluster is deleted. If true is specified, no Neptune snapshot is created. If false is specified, a Neptune snapshot is created before the Neptune cluster is deleted, using the value from `finalSnapshotIdentifier`. Default is `false`.
	SkipFinalSnapshot pulumix.Output[*bool] `pulumi:"skipFinalSnapshot"`
	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a Neptune cluster snapshot, or the ARN when specifying a Neptune snapshot. Automated snapshots **should not** be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
	SnapshotIdentifier pulumix.Output[*string] `pulumi:"snapshotIdentifier"`
	// Specifies whether the Neptune cluster is encrypted. The default is `false` if not specified.
	StorageEncrypted pulumix.Output[*bool] `pulumi:"storageEncrypted"`
	// A map of tags to assign to the Neptune cluster. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// List of VPC security groups to associate with the Cluster
	VpcSecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"vpcSecurityGroupIds"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		args = &ClusterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("aws:neptune/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws:neptune/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// Specifies whether upgrades between different major versions are allowed. You must set it to `true` when providing an `engineVersion` parameter that uses a different major version than the DB cluster's current version. Default is `false`.
	AllowMajorVersionUpgrade *bool `pulumi:"allowMajorVersionUpgrade"`
	// Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately *bool `pulumi:"applyImmediately"`
	// The Neptune Cluster Amazon Resource Name (ARN)
	Arn *string `pulumi:"arn"`
	// A list of EC2 Availability Zones that instances in the Neptune cluster can be created in.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The days to retain backups for. Default `1`
	BackupRetentionPeriod *int `pulumi:"backupRetentionPeriod"`
	// The cluster identifier. If omitted, this provider will assign a random, unique identifier.
	ClusterIdentifier *string `pulumi:"clusterIdentifier"`
	// Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `clusterIdentifier`.
	ClusterIdentifierPrefix *string `pulumi:"clusterIdentifierPrefix"`
	// List of Neptune Instances that are a part of this cluster
	ClusterMembers []string `pulumi:"clusterMembers"`
	// The Neptune Cluster Resource ID
	ClusterResourceId *string `pulumi:"clusterResourceId"`
	// If set to true, tags are copied to any snapshot of the DB cluster that is created.
	CopyTagsToSnapshot *bool `pulumi:"copyTagsToSnapshot"`
	// A value that indicates whether the DB cluster has deletion protection enabled.The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// A list of the log types this DB cluster is configured to export to Cloudwatch Logs. Currently only supports `audit`.
	EnableCloudwatchLogsExports []string `pulumi:"enableCloudwatchLogsExports"`
	// The DNS address of the Neptune instance
	Endpoint *string `pulumi:"endpoint"`
	// The name of the database engine to be used for this Neptune cluster. Defaults to `neptune`.
	Engine *string `pulumi:"engine"`
	// The database engine version.
	EngineVersion *string `pulumi:"engineVersion"`
	// The name of your final Neptune snapshot when this Neptune cluster is deleted. If omitted, no final snapshot will be made.
	FinalSnapshotIdentifier *string `pulumi:"finalSnapshotIdentifier"`
	// The global cluster identifier specified on `neptune.GlobalCluster`.
	GlobalClusterIdentifier *string `pulumi:"globalClusterIdentifier"`
	// The Route53 Hosted Zone ID of the endpoint
	HostedZoneId *string `pulumi:"hostedZoneId"`
	// Specifies whether or not mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled.
	IamDatabaseAuthenticationEnabled *bool `pulumi:"iamDatabaseAuthenticationEnabled"`
	// A List of ARNs for the IAM roles to associate to the Neptune Cluster.
	IamRoles []string `pulumi:"iamRoles"`
	// The ARN for the KMS encryption key. When specifying `kmsKeyArn`, `storageEncrypted` needs to be set to true.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// A cluster parameter group to associate with the cluster.
	NeptuneClusterParameterGroupName *string `pulumi:"neptuneClusterParameterGroupName"`
	// The name of the DB parameter group to apply to all instances of the DB cluster.
	NeptuneInstanceParameterGroupName *string `pulumi:"neptuneInstanceParameterGroupName"`
	// A Neptune subnet group to associate with this Neptune instance.
	NeptuneSubnetGroupName *string `pulumi:"neptuneSubnetGroupName"`
	// The port on which the Neptune accepts connections. Default is `8182`.
	Port *int `pulumi:"port"`
	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. Time in UTC. Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
	PreferredBackupWindow *string `pulumi:"preferredBackupWindow"`
	// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
	PreferredMaintenanceWindow *string `pulumi:"preferredMaintenanceWindow"`
	// A read-only endpoint for the Neptune cluster, automatically load-balanced across replicas
	ReaderEndpoint *string `pulumi:"readerEndpoint"`
	// ARN of a source Neptune cluster or Neptune instance if this Neptune cluster is to be created as a Read Replica.
	ReplicationSourceIdentifier *string `pulumi:"replicationSourceIdentifier"`
	// If set, create the Neptune cluster as a serverless one. See Serverless for example block attributes.
	ServerlessV2ScalingConfiguration *ClusterServerlessV2ScalingConfiguration `pulumi:"serverlessV2ScalingConfiguration"`
	// Determines whether a final Neptune snapshot is created before the Neptune cluster is deleted. If true is specified, no Neptune snapshot is created. If false is specified, a Neptune snapshot is created before the Neptune cluster is deleted, using the value from `finalSnapshotIdentifier`. Default is `false`.
	SkipFinalSnapshot *bool `pulumi:"skipFinalSnapshot"`
	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a Neptune cluster snapshot, or the ARN when specifying a Neptune snapshot. Automated snapshots **should not** be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
	SnapshotIdentifier *string `pulumi:"snapshotIdentifier"`
	// Specifies whether the Neptune cluster is encrypted. The default is `false` if not specified.
	StorageEncrypted *bool `pulumi:"storageEncrypted"`
	// A map of tags to assign to the Neptune cluster. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// List of VPC security groups to associate with the Cluster
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
}

type ClusterState struct {
	// Specifies whether upgrades between different major versions are allowed. You must set it to `true` when providing an `engineVersion` parameter that uses a different major version than the DB cluster's current version. Default is `false`.
	AllowMajorVersionUpgrade pulumix.Input[*bool]
	// Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately pulumix.Input[*bool]
	// The Neptune Cluster Amazon Resource Name (ARN)
	Arn pulumix.Input[*string]
	// A list of EC2 Availability Zones that instances in the Neptune cluster can be created in.
	AvailabilityZones pulumix.Input[[]string]
	// The days to retain backups for. Default `1`
	BackupRetentionPeriod pulumix.Input[*int]
	// The cluster identifier. If omitted, this provider will assign a random, unique identifier.
	ClusterIdentifier pulumix.Input[*string]
	// Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `clusterIdentifier`.
	ClusterIdentifierPrefix pulumix.Input[*string]
	// List of Neptune Instances that are a part of this cluster
	ClusterMembers pulumix.Input[[]string]
	// The Neptune Cluster Resource ID
	ClusterResourceId pulumix.Input[*string]
	// If set to true, tags are copied to any snapshot of the DB cluster that is created.
	CopyTagsToSnapshot pulumix.Input[*bool]
	// A value that indicates whether the DB cluster has deletion protection enabled.The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
	DeletionProtection pulumix.Input[*bool]
	// A list of the log types this DB cluster is configured to export to Cloudwatch Logs. Currently only supports `audit`.
	EnableCloudwatchLogsExports pulumix.Input[[]string]
	// The DNS address of the Neptune instance
	Endpoint pulumix.Input[*string]
	// The name of the database engine to be used for this Neptune cluster. Defaults to `neptune`.
	Engine pulumix.Input[*string]
	// The database engine version.
	EngineVersion pulumix.Input[*string]
	// The name of your final Neptune snapshot when this Neptune cluster is deleted. If omitted, no final snapshot will be made.
	FinalSnapshotIdentifier pulumix.Input[*string]
	// The global cluster identifier specified on `neptune.GlobalCluster`.
	GlobalClusterIdentifier pulumix.Input[*string]
	// The Route53 Hosted Zone ID of the endpoint
	HostedZoneId pulumix.Input[*string]
	// Specifies whether or not mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled.
	IamDatabaseAuthenticationEnabled pulumix.Input[*bool]
	// A List of ARNs for the IAM roles to associate to the Neptune Cluster.
	IamRoles pulumix.Input[[]string]
	// The ARN for the KMS encryption key. When specifying `kmsKeyArn`, `storageEncrypted` needs to be set to true.
	KmsKeyArn pulumix.Input[*string]
	// A cluster parameter group to associate with the cluster.
	NeptuneClusterParameterGroupName pulumix.Input[*string]
	// The name of the DB parameter group to apply to all instances of the DB cluster.
	NeptuneInstanceParameterGroupName pulumix.Input[*string]
	// A Neptune subnet group to associate with this Neptune instance.
	NeptuneSubnetGroupName pulumix.Input[*string]
	// The port on which the Neptune accepts connections. Default is `8182`.
	Port pulumix.Input[*int]
	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. Time in UTC. Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
	PreferredBackupWindow pulumix.Input[*string]
	// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
	PreferredMaintenanceWindow pulumix.Input[*string]
	// A read-only endpoint for the Neptune cluster, automatically load-balanced across replicas
	ReaderEndpoint pulumix.Input[*string]
	// ARN of a source Neptune cluster or Neptune instance if this Neptune cluster is to be created as a Read Replica.
	ReplicationSourceIdentifier pulumix.Input[*string]
	// If set, create the Neptune cluster as a serverless one. See Serverless for example block attributes.
	ServerlessV2ScalingConfiguration pulumix.Input[*ClusterServerlessV2ScalingConfigurationArgs]
	// Determines whether a final Neptune snapshot is created before the Neptune cluster is deleted. If true is specified, no Neptune snapshot is created. If false is specified, a Neptune snapshot is created before the Neptune cluster is deleted, using the value from `finalSnapshotIdentifier`. Default is `false`.
	SkipFinalSnapshot pulumix.Input[*bool]
	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a Neptune cluster snapshot, or the ARN when specifying a Neptune snapshot. Automated snapshots **should not** be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
	SnapshotIdentifier pulumix.Input[*string]
	// Specifies whether the Neptune cluster is encrypted. The default is `false` if not specified.
	StorageEncrypted pulumix.Input[*bool]
	// A map of tags to assign to the Neptune cluster. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// List of VPC security groups to associate with the Cluster
	VpcSecurityGroupIds pulumix.Input[[]string]
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Specifies whether upgrades between different major versions are allowed. You must set it to `true` when providing an `engineVersion` parameter that uses a different major version than the DB cluster's current version. Default is `false`.
	AllowMajorVersionUpgrade *bool `pulumi:"allowMajorVersionUpgrade"`
	// Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately *bool `pulumi:"applyImmediately"`
	// A list of EC2 Availability Zones that instances in the Neptune cluster can be created in.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The days to retain backups for. Default `1`
	BackupRetentionPeriod *int `pulumi:"backupRetentionPeriod"`
	// The cluster identifier. If omitted, this provider will assign a random, unique identifier.
	ClusterIdentifier *string `pulumi:"clusterIdentifier"`
	// Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `clusterIdentifier`.
	ClusterIdentifierPrefix *string `pulumi:"clusterIdentifierPrefix"`
	// If set to true, tags are copied to any snapshot of the DB cluster that is created.
	CopyTagsToSnapshot *bool `pulumi:"copyTagsToSnapshot"`
	// A value that indicates whether the DB cluster has deletion protection enabled.The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// A list of the log types this DB cluster is configured to export to Cloudwatch Logs. Currently only supports `audit`.
	EnableCloudwatchLogsExports []string `pulumi:"enableCloudwatchLogsExports"`
	// The name of the database engine to be used for this Neptune cluster. Defaults to `neptune`.
	Engine *string `pulumi:"engine"`
	// The database engine version.
	EngineVersion *string `pulumi:"engineVersion"`
	// The name of your final Neptune snapshot when this Neptune cluster is deleted. If omitted, no final snapshot will be made.
	FinalSnapshotIdentifier *string `pulumi:"finalSnapshotIdentifier"`
	// The global cluster identifier specified on `neptune.GlobalCluster`.
	GlobalClusterIdentifier *string `pulumi:"globalClusterIdentifier"`
	// Specifies whether or not mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled.
	IamDatabaseAuthenticationEnabled *bool `pulumi:"iamDatabaseAuthenticationEnabled"`
	// A List of ARNs for the IAM roles to associate to the Neptune Cluster.
	IamRoles []string `pulumi:"iamRoles"`
	// The ARN for the KMS encryption key. When specifying `kmsKeyArn`, `storageEncrypted` needs to be set to true.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// A cluster parameter group to associate with the cluster.
	NeptuneClusterParameterGroupName *string `pulumi:"neptuneClusterParameterGroupName"`
	// The name of the DB parameter group to apply to all instances of the DB cluster.
	NeptuneInstanceParameterGroupName *string `pulumi:"neptuneInstanceParameterGroupName"`
	// A Neptune subnet group to associate with this Neptune instance.
	NeptuneSubnetGroupName *string `pulumi:"neptuneSubnetGroupName"`
	// The port on which the Neptune accepts connections. Default is `8182`.
	Port *int `pulumi:"port"`
	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. Time in UTC. Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
	PreferredBackupWindow *string `pulumi:"preferredBackupWindow"`
	// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
	PreferredMaintenanceWindow *string `pulumi:"preferredMaintenanceWindow"`
	// ARN of a source Neptune cluster or Neptune instance if this Neptune cluster is to be created as a Read Replica.
	ReplicationSourceIdentifier *string `pulumi:"replicationSourceIdentifier"`
	// If set, create the Neptune cluster as a serverless one. See Serverless for example block attributes.
	ServerlessV2ScalingConfiguration *ClusterServerlessV2ScalingConfiguration `pulumi:"serverlessV2ScalingConfiguration"`
	// Determines whether a final Neptune snapshot is created before the Neptune cluster is deleted. If true is specified, no Neptune snapshot is created. If false is specified, a Neptune snapshot is created before the Neptune cluster is deleted, using the value from `finalSnapshotIdentifier`. Default is `false`.
	SkipFinalSnapshot *bool `pulumi:"skipFinalSnapshot"`
	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a Neptune cluster snapshot, or the ARN when specifying a Neptune snapshot. Automated snapshots **should not** be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
	SnapshotIdentifier *string `pulumi:"snapshotIdentifier"`
	// Specifies whether the Neptune cluster is encrypted. The default is `false` if not specified.
	StorageEncrypted *bool `pulumi:"storageEncrypted"`
	// A map of tags to assign to the Neptune cluster. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// List of VPC security groups to associate with the Cluster
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Specifies whether upgrades between different major versions are allowed. You must set it to `true` when providing an `engineVersion` parameter that uses a different major version than the DB cluster's current version. Default is `false`.
	AllowMajorVersionUpgrade pulumix.Input[*bool]
	// Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately pulumix.Input[*bool]
	// A list of EC2 Availability Zones that instances in the Neptune cluster can be created in.
	AvailabilityZones pulumix.Input[[]string]
	// The days to retain backups for. Default `1`
	BackupRetentionPeriod pulumix.Input[*int]
	// The cluster identifier. If omitted, this provider will assign a random, unique identifier.
	ClusterIdentifier pulumix.Input[*string]
	// Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `clusterIdentifier`.
	ClusterIdentifierPrefix pulumix.Input[*string]
	// If set to true, tags are copied to any snapshot of the DB cluster that is created.
	CopyTagsToSnapshot pulumix.Input[*bool]
	// A value that indicates whether the DB cluster has deletion protection enabled.The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
	DeletionProtection pulumix.Input[*bool]
	// A list of the log types this DB cluster is configured to export to Cloudwatch Logs. Currently only supports `audit`.
	EnableCloudwatchLogsExports pulumix.Input[[]string]
	// The name of the database engine to be used for this Neptune cluster. Defaults to `neptune`.
	Engine pulumix.Input[*string]
	// The database engine version.
	EngineVersion pulumix.Input[*string]
	// The name of your final Neptune snapshot when this Neptune cluster is deleted. If omitted, no final snapshot will be made.
	FinalSnapshotIdentifier pulumix.Input[*string]
	// The global cluster identifier specified on `neptune.GlobalCluster`.
	GlobalClusterIdentifier pulumix.Input[*string]
	// Specifies whether or not mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled.
	IamDatabaseAuthenticationEnabled pulumix.Input[*bool]
	// A List of ARNs for the IAM roles to associate to the Neptune Cluster.
	IamRoles pulumix.Input[[]string]
	// The ARN for the KMS encryption key. When specifying `kmsKeyArn`, `storageEncrypted` needs to be set to true.
	KmsKeyArn pulumix.Input[*string]
	// A cluster parameter group to associate with the cluster.
	NeptuneClusterParameterGroupName pulumix.Input[*string]
	// The name of the DB parameter group to apply to all instances of the DB cluster.
	NeptuneInstanceParameterGroupName pulumix.Input[*string]
	// A Neptune subnet group to associate with this Neptune instance.
	NeptuneSubnetGroupName pulumix.Input[*string]
	// The port on which the Neptune accepts connections. Default is `8182`.
	Port pulumix.Input[*int]
	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. Time in UTC. Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
	PreferredBackupWindow pulumix.Input[*string]
	// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
	PreferredMaintenanceWindow pulumix.Input[*string]
	// ARN of a source Neptune cluster or Neptune instance if this Neptune cluster is to be created as a Read Replica.
	ReplicationSourceIdentifier pulumix.Input[*string]
	// If set, create the Neptune cluster as a serverless one. See Serverless for example block attributes.
	ServerlessV2ScalingConfiguration pulumix.Input[*ClusterServerlessV2ScalingConfigurationArgs]
	// Determines whether a final Neptune snapshot is created before the Neptune cluster is deleted. If true is specified, no Neptune snapshot is created. If false is specified, a Neptune snapshot is created before the Neptune cluster is deleted, using the value from `finalSnapshotIdentifier`. Default is `false`.
	SkipFinalSnapshot pulumix.Input[*bool]
	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a Neptune cluster snapshot, or the ARN when specifying a Neptune snapshot. Automated snapshots **should not** be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
	SnapshotIdentifier pulumix.Input[*string]
	// Specifies whether the Neptune cluster is encrypted. The default is `false` if not specified.
	StorageEncrypted pulumix.Input[*bool]
	// A map of tags to assign to the Neptune cluster. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// List of VPC security groups to associate with the Cluster
	VpcSecurityGroupIds pulumix.Input[[]string]
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) ToOutput(ctx context.Context) pulumix.Output[Cluster] {
	return pulumix.Output[Cluster]{
		OutputState: o.OutputState,
	}
}

// Specifies whether upgrades between different major versions are allowed. You must set it to `true` when providing an `engineVersion` parameter that uses a different major version than the DB cluster's current version. Default is `false`.
func (o ClusterOutput) AllowMajorVersionUpgrade() pulumix.Output[bool] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[bool] { return v.AllowMajorVersionUpgrade })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is `false`.
func (o ClusterOutput) ApplyImmediately() pulumix.Output[bool] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[bool] { return v.ApplyImmediately })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The Neptune Cluster Amazon Resource Name (ARN)
func (o ClusterOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of EC2 Availability Zones that instances in the Neptune cluster can be created in.
func (o ClusterOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.ArrayOutput[string] { return v.AvailabilityZones })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The days to retain backups for. Default `1`
func (o ClusterOutput) BackupRetentionPeriod() pulumix.Output[*int] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*int] { return v.BackupRetentionPeriod })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The cluster identifier. If omitted, this provider will assign a random, unique identifier.
func (o ClusterOutput) ClusterIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.ClusterIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `clusterIdentifier`.
func (o ClusterOutput) ClusterIdentifierPrefix() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.ClusterIdentifierPrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of Neptune Instances that are a part of this cluster
func (o ClusterOutput) ClusterMembers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.ArrayOutput[string] { return v.ClusterMembers })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The Neptune Cluster Resource ID
func (o ClusterOutput) ClusterResourceId() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.ClusterResourceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If set to true, tags are copied to any snapshot of the DB cluster that is created.
func (o ClusterOutput) CopyTagsToSnapshot() pulumix.Output[*bool] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*bool] { return v.CopyTagsToSnapshot })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A value that indicates whether the DB cluster has deletion protection enabled.The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
func (o ClusterOutput) DeletionProtection() pulumix.Output[*bool] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*bool] { return v.DeletionProtection })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A list of the log types this DB cluster is configured to export to Cloudwatch Logs. Currently only supports `audit`.
func (o ClusterOutput) EnableCloudwatchLogsExports() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.ArrayOutput[string] { return v.EnableCloudwatchLogsExports })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The DNS address of the Neptune instance
func (o ClusterOutput) Endpoint() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.Endpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the database engine to be used for this Neptune cluster. Defaults to `neptune`.
func (o ClusterOutput) Engine() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.Engine })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The database engine version.
func (o ClusterOutput) EngineVersion() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.EngineVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of your final Neptune snapshot when this Neptune cluster is deleted. If omitted, no final snapshot will be made.
func (o ClusterOutput) FinalSnapshotIdentifier() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.FinalSnapshotIdentifier })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The global cluster identifier specified on `neptune.GlobalCluster`.
func (o ClusterOutput) GlobalClusterIdentifier() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.GlobalClusterIdentifier })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Route53 Hosted Zone ID of the endpoint
func (o ClusterOutput) HostedZoneId() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.HostedZoneId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies whether or not mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled.
func (o ClusterOutput) IamDatabaseAuthenticationEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*bool] { return v.IamDatabaseAuthenticationEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A List of ARNs for the IAM roles to associate to the Neptune Cluster.
func (o ClusterOutput) IamRoles() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.ArrayOutput[string] { return v.IamRoles })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The ARN for the KMS encryption key. When specifying `kmsKeyArn`, `storageEncrypted` needs to be set to true.
func (o ClusterOutput) KmsKeyArn() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.KmsKeyArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A cluster parameter group to associate with the cluster.
func (o ClusterOutput) NeptuneClusterParameterGroupName() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.NeptuneClusterParameterGroupName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the DB parameter group to apply to all instances of the DB cluster.
func (o ClusterOutput) NeptuneInstanceParameterGroupName() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.NeptuneInstanceParameterGroupName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A Neptune subnet group to associate with this Neptune instance.
func (o ClusterOutput) NeptuneSubnetGroupName() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.NeptuneSubnetGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The port on which the Neptune accepts connections. Default is `8182`.
func (o ClusterOutput) Port() pulumix.Output[*int] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*int] { return v.Port })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. Time in UTC. Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
func (o ClusterOutput) PreferredBackupWindow() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.PreferredBackupWindow })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
func (o ClusterOutput) PreferredMaintenanceWindow() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.PreferredMaintenanceWindow })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A read-only endpoint for the Neptune cluster, automatically load-balanced across replicas
func (o ClusterOutput) ReaderEndpoint() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.ReaderEndpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of a source Neptune cluster or Neptune instance if this Neptune cluster is to be created as a Read Replica.
func (o ClusterOutput) ReplicationSourceIdentifier() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.ReplicationSourceIdentifier })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// If set, create the Neptune cluster as a serverless one. See Serverless for example block attributes.
func (o ClusterOutput) ServerlessV2ScalingConfiguration() pulumix.GPtrOutput[ClusterServerlessV2ScalingConfiguration, ClusterServerlessV2ScalingConfigurationOutput] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.GPtrOutput[ClusterServerlessV2ScalingConfiguration, ClusterServerlessV2ScalingConfigurationOutput] {
		return v.ServerlessV2ScalingConfiguration
	})
	unwrapped := pulumix.Flatten[*ClusterServerlessV2ScalingConfiguration, pulumix.GPtrOutput[ClusterServerlessV2ScalingConfiguration, ClusterServerlessV2ScalingConfigurationOutput]](value)
	return pulumix.GPtrOutput[ClusterServerlessV2ScalingConfiguration, ClusterServerlessV2ScalingConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Determines whether a final Neptune snapshot is created before the Neptune cluster is deleted. If true is specified, no Neptune snapshot is created. If false is specified, a Neptune snapshot is created before the Neptune cluster is deleted, using the value from `finalSnapshotIdentifier`. Default is `false`.
func (o ClusterOutput) SkipFinalSnapshot() pulumix.Output[*bool] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*bool] { return v.SkipFinalSnapshot })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a Neptune cluster snapshot, or the ARN when specifying a Neptune snapshot. Automated snapshots **should not** be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
func (o ClusterOutput) SnapshotIdentifier() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.SnapshotIdentifier })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Specifies whether the Neptune cluster is encrypted. The default is `false` if not specified.
func (o ClusterOutput) StorageEncrypted() pulumix.Output[*bool] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*bool] { return v.StorageEncrypted })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A map of tags to assign to the Neptune cluster. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ClusterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ClusterOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// List of VPC security groups to associate with the Cluster
func (o ClusterOutput) VpcSecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.ArrayOutput[string] { return v.VpcSecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ClusterOutput{})
}
