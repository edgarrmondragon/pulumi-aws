// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about an OpenSearch Domain
func LookupDomain(ctx *pulumi.Context, args *LookupDomainArgs, opts ...pulumi.InvokeOption) (*LookupDomainResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDomainResult
	err := ctx.Invoke("aws:opensearch/getDomain:getDomain", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDomain.
type LookupDomainArgs struct {
	// Name of the domain.
	DomainName string `pulumi:"domainName"`
	// Off Peak update options
	OffPeakWindowOptions *GetDomainOffPeakWindowOptions `pulumi:"offPeakWindowOptions"`
	// Tags assigned to the domain.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getDomain.
type LookupDomainResult struct {
	// Policy document attached to the domain.
	AccessPolicies string `pulumi:"accessPolicies"`
	// Key-value string pairs to specify advanced configuration options.
	AdvancedOptions map[string]string `pulumi:"advancedOptions"`
	// Status of the OpenSearch domain's advanced security options. The block consists of the following attributes:
	AdvancedSecurityOptions []GetDomainAdvancedSecurityOption `pulumi:"advancedSecurityOptions"`
	// ARN of the domain.
	Arn string `pulumi:"arn"`
	// Configuration of the Auto-Tune options of the domain.
	AutoTuneOptions []GetDomainAutoTuneOption `pulumi:"autoTuneOptions"`
	// Cluster configuration of the domain.
	ClusterConfigs []GetDomainClusterConfig `pulumi:"clusterConfigs"`
	// Domain Amazon Cognito Authentication options for Dashboard.
	CognitoOptions []GetDomainCognitoOption `pulumi:"cognitoOptions"`
	// Status of the creation of the domain.
	Created bool `pulumi:"created"`
	// Domain-specific endpoint used to access the [Dashboard application](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/dashboards.html).
	DashboardEndpoint string `pulumi:"dashboardEndpoint"`
	// Status of the deletion of the domain.
	Deleted bool `pulumi:"deleted"`
	// Unique identifier for the domain.
	DomainId   string `pulumi:"domainId"`
	DomainName string `pulumi:"domainName"`
	// EBS Options for the instances in the domain.
	EbsOptions []GetDomainEbsOption `pulumi:"ebsOptions"`
	// Domain encryption at rest related options.
	EncryptionAtRests []GetDomainEncryptionAtRest `pulumi:"encryptionAtRests"`
	// Domain-specific endpoint used to submit index, search, and data upload requests.
	Endpoint string `pulumi:"endpoint"`
	// OpenSearch version for the domain.
	EngineVersion string `pulumi:"engineVersion"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (**Deprecated**) Domain-specific endpoint for kibana without https scheme. Use the `dashboardEndpoint` attribute instead.
	//
	// Deprecated: use 'dashboard_endpoint' attribute instead
	KibanaEndpoint string `pulumi:"kibanaEndpoint"`
	// Domain log publishing related options.
	LogPublishingOptions []GetDomainLogPublishingOption `pulumi:"logPublishingOptions"`
	// Domain in transit encryption related options.
	NodeToNodeEncryptions []GetDomainNodeToNodeEncryption `pulumi:"nodeToNodeEncryptions"`
	// Off Peak update options
	OffPeakWindowOptions *GetDomainOffPeakWindowOptions `pulumi:"offPeakWindowOptions"`
	// Status of a configuration change in the domain.
	Processing bool `pulumi:"processing"`
	// Domain snapshot related options.
	SnapshotOptions []GetDomainSnapshotOption `pulumi:"snapshotOptions"`
	// Tags assigned to the domain.
	Tags map[string]string `pulumi:"tags"`
	// VPC Options for private OpenSearch domains.
	VpcOptions []GetDomainVpcOption `pulumi:"vpcOptions"`
}

func LookupDomainOutput(ctx *pulumi.Context, args LookupDomainOutputArgs, opts ...pulumi.InvokeOption) LookupDomainResultOutput {
	outputResult := pulumix.ApplyErr[*LookupDomainArgs](args.ToOutput(), func(plainArgs *LookupDomainArgs) (*LookupDomainResult, error) {
		return LookupDomain(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupDomainResultOutput, *LookupDomainResult](outputResult)
}

// A collection of arguments for invoking getDomain.
type LookupDomainOutputArgs struct {
	// Name of the domain.
	DomainName pulumix.Input[string] `pulumi:"domainName"`
	// Off Peak update options
	OffPeakWindowOptions pulumix.Input[*GetDomainOffPeakWindowOptionsArgs] `pulumi:"offPeakWindowOptions"`
	// Tags assigned to the domain.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupDomainOutputArgs) ToOutput() pulumix.Output[*LookupDomainArgs] {
	allArgs := pulumix.All(
		args.DomainName.ToOutput(context.Background()).AsAny(),
		args.OffPeakWindowOptions.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupDomainArgs {
		return &LookupDomainArgs{
			DomainName:           resolvedArgs[0].(string),
			OffPeakWindowOptions: resolvedArgs[1].(*GetDomainOffPeakWindowOptions),
			Tags:                 resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupDomainResultOutput struct{ *pulumi.OutputState }

func (LookupDomainResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainResult)(nil)).Elem()
}

func (o LookupDomainResultOutput) ToOutput(context.Context) pulumix.Output[*LookupDomainResult] {
	return pulumix.Output[*LookupDomainResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDomainResultOutput) AccessPolicies() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) string { return v.AccessPolicies })
}

func (o LookupDomainResultOutput) AdvancedOptions() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) map[string]string { return v.AdvancedOptions })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupDomainResultOutput) AdvancedSecurityOptions() pulumix.GArrayOutput[GetDomainAdvancedSecurityOption, GetDomainAdvancedSecurityOptionOutput] {
	value := pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) []GetDomainAdvancedSecurityOption { return v.AdvancedSecurityOptions })
	return pulumix.GArrayOutput[GetDomainAdvancedSecurityOption, GetDomainAdvancedSecurityOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDomainResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) string { return v.Arn })
}

func (o LookupDomainResultOutput) AutoTuneOptions() pulumix.GArrayOutput[GetDomainAutoTuneOption, GetDomainAutoTuneOptionOutput] {
	value := pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) []GetDomainAutoTuneOption { return v.AutoTuneOptions })
	return pulumix.GArrayOutput[GetDomainAutoTuneOption, GetDomainAutoTuneOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDomainResultOutput) ClusterConfigs() pulumix.GArrayOutput[GetDomainClusterConfig, GetDomainClusterConfigOutput] {
	value := pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) []GetDomainClusterConfig { return v.ClusterConfigs })
	return pulumix.GArrayOutput[GetDomainClusterConfig, GetDomainClusterConfigOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDomainResultOutput) CognitoOptions() pulumix.GArrayOutput[GetDomainCognitoOption, GetDomainCognitoOptionOutput] {
	value := pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) []GetDomainCognitoOption { return v.CognitoOptions })
	return pulumix.GArrayOutput[GetDomainCognitoOption, GetDomainCognitoOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDomainResultOutput) Created() pulumix.Output[bool] {
	return pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) bool { return v.Created })
}

func (o LookupDomainResultOutput) DashboardEndpoint() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) string { return v.DashboardEndpoint })
}

func (o LookupDomainResultOutput) Deleted() pulumix.Output[bool] {
	return pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) bool { return v.Deleted })
}

func (o LookupDomainResultOutput) DomainId() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) string { return v.DomainId })
}

func (o LookupDomainResultOutput) DomainName() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) string { return v.DomainName })
}

func (o LookupDomainResultOutput) EbsOptions() pulumix.GArrayOutput[GetDomainEbsOption, GetDomainEbsOptionOutput] {
	value := pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) []GetDomainEbsOption { return v.EbsOptions })
	return pulumix.GArrayOutput[GetDomainEbsOption, GetDomainEbsOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDomainResultOutput) EncryptionAtRests() pulumix.GArrayOutput[GetDomainEncryptionAtRest, GetDomainEncryptionAtRestOutput] {
	value := pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) []GetDomainEncryptionAtRest { return v.EncryptionAtRests })
	return pulumix.GArrayOutput[GetDomainEncryptionAtRest, GetDomainEncryptionAtRestOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDomainResultOutput) Endpoint() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) string { return v.Endpoint })
}

func (o LookupDomainResultOutput) EngineVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) string { return v.EngineVersion })
}

func (o LookupDomainResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) string { return v.Id })
}

func (o LookupDomainResultOutput) KibanaEndpoint() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) string { return v.KibanaEndpoint })
}

func (o LookupDomainResultOutput) LogPublishingOptions() pulumix.GArrayOutput[GetDomainLogPublishingOption, GetDomainLogPublishingOptionOutput] {
	value := pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) []GetDomainLogPublishingOption { return v.LogPublishingOptions })
	return pulumix.GArrayOutput[GetDomainLogPublishingOption, GetDomainLogPublishingOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDomainResultOutput) NodeToNodeEncryptions() pulumix.GArrayOutput[GetDomainNodeToNodeEncryption, GetDomainNodeToNodeEncryptionOutput] {
	value := pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) []GetDomainNodeToNodeEncryption { return v.NodeToNodeEncryptions })
	return pulumix.GArrayOutput[GetDomainNodeToNodeEncryption, GetDomainNodeToNodeEncryptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDomainResultOutput) OffPeakWindowOptions() pulumix.GPtrOutput[GetDomainOffPeakWindowOptions, GetDomainOffPeakWindowOptionsOutput] {
	value := pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) *GetDomainOffPeakWindowOptions { return v.OffPeakWindowOptions })
	return pulumix.GPtrOutput[GetDomainOffPeakWindowOptions, GetDomainOffPeakWindowOptionsOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDomainResultOutput) Processing() pulumix.Output[bool] {
	return pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) bool { return v.Processing })
}

func (o LookupDomainResultOutput) SnapshotOptions() pulumix.GArrayOutput[GetDomainSnapshotOption, GetDomainSnapshotOptionOutput] {
	value := pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) []GetDomainSnapshotOption { return v.SnapshotOptions })
	return pulumix.GArrayOutput[GetDomainSnapshotOption, GetDomainSnapshotOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDomainResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupDomainResultOutput) VpcOptions() pulumix.GArrayOutput[GetDomainVpcOption, GetDomainVpcOptionOutput] {
	value := pulumix.Apply[*LookupDomainResult](o, func(v *LookupDomainResult) []GetDomainVpcOption { return v.VpcOptions })
	return pulumix.GArrayOutput[GetDomainVpcOption, GetDomainVpcOptionOutput]{
		OutputState: value.OutputState,
	}
}
