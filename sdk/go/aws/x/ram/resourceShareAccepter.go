// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manage accepting a Resource Access Manager (RAM) Resource Share invitation. From a _receiver_ AWS account, accept an invitation to share resources that were shared by a _sender_ AWS account. To create a resource share in the _sender_, see the `ram.ResourceShare` resource.
//
// > **Note:** If both AWS accounts are in the same Organization and [RAM Sharing with AWS Organizations is enabled](https://docs.aws.amazon.com/ram/latest/userguide/getting-started-sharing.html#getting-started-sharing-orgs), this resource is not necessary as RAM Resource Share invitations are not used.
type ResourceShareAccepter struct {
	pulumi.CustomResourceState

	// The ARN of the resource share invitation.
	InvitationArn pulumix.Output[string] `pulumi:"invitationArn"`
	// The account ID of the receiver account which accepts the invitation.
	ReceiverAccountId pulumix.Output[string] `pulumi:"receiverAccountId"`
	// A list of the resource ARNs shared via the resource share.
	Resources pulumix.ArrayOutput[string] `pulumi:"resources"`
	// The account ID of the sender account which submits the invitation.
	SenderAccountId pulumix.Output[string] `pulumi:"senderAccountId"`
	// The ARN of the resource share.
	ShareArn pulumix.Output[string] `pulumi:"shareArn"`
	// The ID of the resource share as displayed in the console.
	ShareId pulumix.Output[string] `pulumi:"shareId"`
	// The name of the resource share.
	ShareName pulumix.Output[string] `pulumi:"shareName"`
	// The status of the resource share (ACTIVE, PENDING, FAILED, DELETING, DELETED).
	Status pulumix.Output[string] `pulumi:"status"`
}

// NewResourceShareAccepter registers a new resource with the given unique name, arguments, and options.
func NewResourceShareAccepter(ctx *pulumi.Context,
	name string, args *ResourceShareAccepterArgs, opts ...pulumi.ResourceOption) (*ResourceShareAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ShareArn == nil {
		return nil, errors.New("invalid value for required argument 'ShareArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceShareAccepter
	err := ctx.RegisterResource("aws:ram/resourceShareAccepter:ResourceShareAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceShareAccepter gets an existing ResourceShareAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceShareAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceShareAccepterState, opts ...pulumi.ResourceOption) (*ResourceShareAccepter, error) {
	var resource ResourceShareAccepter
	err := ctx.ReadResource("aws:ram/resourceShareAccepter:ResourceShareAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceShareAccepter resources.
type resourceShareAccepterState struct {
	// The ARN of the resource share invitation.
	InvitationArn *string `pulumi:"invitationArn"`
	// The account ID of the receiver account which accepts the invitation.
	ReceiverAccountId *string `pulumi:"receiverAccountId"`
	// A list of the resource ARNs shared via the resource share.
	Resources []string `pulumi:"resources"`
	// The account ID of the sender account which submits the invitation.
	SenderAccountId *string `pulumi:"senderAccountId"`
	// The ARN of the resource share.
	ShareArn *string `pulumi:"shareArn"`
	// The ID of the resource share as displayed in the console.
	ShareId *string `pulumi:"shareId"`
	// The name of the resource share.
	ShareName *string `pulumi:"shareName"`
	// The status of the resource share (ACTIVE, PENDING, FAILED, DELETING, DELETED).
	Status *string `pulumi:"status"`
}

type ResourceShareAccepterState struct {
	// The ARN of the resource share invitation.
	InvitationArn pulumix.Input[*string]
	// The account ID of the receiver account which accepts the invitation.
	ReceiverAccountId pulumix.Input[*string]
	// A list of the resource ARNs shared via the resource share.
	Resources pulumix.Input[[]string]
	// The account ID of the sender account which submits the invitation.
	SenderAccountId pulumix.Input[*string]
	// The ARN of the resource share.
	ShareArn pulumix.Input[*string]
	// The ID of the resource share as displayed in the console.
	ShareId pulumix.Input[*string]
	// The name of the resource share.
	ShareName pulumix.Input[*string]
	// The status of the resource share (ACTIVE, PENDING, FAILED, DELETING, DELETED).
	Status pulumix.Input[*string]
}

func (ResourceShareAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceShareAccepterState)(nil)).Elem()
}

type resourceShareAccepterArgs struct {
	// The ARN of the resource share.
	ShareArn string `pulumi:"shareArn"`
}

// The set of arguments for constructing a ResourceShareAccepter resource.
type ResourceShareAccepterArgs struct {
	// The ARN of the resource share.
	ShareArn pulumix.Input[string]
}

func (ResourceShareAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceShareAccepterArgs)(nil)).Elem()
}

type ResourceShareAccepterOutput struct{ *pulumi.OutputState }

func (ResourceShareAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceShareAccepter)(nil)).Elem()
}

func (o ResourceShareAccepterOutput) ToResourceShareAccepterOutput() ResourceShareAccepterOutput {
	return o
}

func (o ResourceShareAccepterOutput) ToResourceShareAccepterOutputWithContext(ctx context.Context) ResourceShareAccepterOutput {
	return o
}

func (o ResourceShareAccepterOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceShareAccepter] {
	return pulumix.Output[ResourceShareAccepter]{
		OutputState: o.OutputState,
	}
}

// The ARN of the resource share invitation.
func (o ResourceShareAccepterOutput) InvitationArn() pulumix.Output[string] {
	value := pulumix.Apply[ResourceShareAccepter](o, func(v ResourceShareAccepter) pulumix.Output[string] { return v.InvitationArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The account ID of the receiver account which accepts the invitation.
func (o ResourceShareAccepterOutput) ReceiverAccountId() pulumix.Output[string] {
	value := pulumix.Apply[ResourceShareAccepter](o, func(v ResourceShareAccepter) pulumix.Output[string] { return v.ReceiverAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of the resource ARNs shared via the resource share.
func (o ResourceShareAccepterOutput) Resources() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ResourceShareAccepter](o, func(v ResourceShareAccepter) pulumix.ArrayOutput[string] { return v.Resources })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The account ID of the sender account which submits the invitation.
func (o ResourceShareAccepterOutput) SenderAccountId() pulumix.Output[string] {
	value := pulumix.Apply[ResourceShareAccepter](o, func(v ResourceShareAccepter) pulumix.Output[string] { return v.SenderAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the resource share.
func (o ResourceShareAccepterOutput) ShareArn() pulumix.Output[string] {
	value := pulumix.Apply[ResourceShareAccepter](o, func(v ResourceShareAccepter) pulumix.Output[string] { return v.ShareArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the resource share as displayed in the console.
func (o ResourceShareAccepterOutput) ShareId() pulumix.Output[string] {
	value := pulumix.Apply[ResourceShareAccepter](o, func(v ResourceShareAccepter) pulumix.Output[string] { return v.ShareId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the resource share.
func (o ResourceShareAccepterOutput) ShareName() pulumix.Output[string] {
	value := pulumix.Apply[ResourceShareAccepter](o, func(v ResourceShareAccepter) pulumix.Output[string] { return v.ShareName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The status of the resource share (ACTIVE, PENDING, FAILED, DELETING, DELETED).
func (o ResourceShareAccepterOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[ResourceShareAccepter](o, func(v ResourceShareAccepter) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ResourceShareAccepterOutput{})
}
