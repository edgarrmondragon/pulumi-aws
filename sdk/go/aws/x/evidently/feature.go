// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evidently

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudWatch Evidently Feature resource.
type Feature struct {
	pulumi.CustomResourceState

	// The ARN of the feature.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The date and time that the feature is created.
	CreatedTime pulumix.Output[string] `pulumi:"createdTime"`
	// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `defaultVariation`, the first variation listed in the `variations` structure is used as the default variation.
	DefaultVariation pulumix.Output[string] `pulumi:"defaultVariation"`
	// Specifies the description of the feature.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
	EntityOverrides pulumix.MapOutput[string] `pulumi:"entityOverrides"`
	// One or more blocks that define the evaluation rules for the feature. Detailed below
	EvaluationRules pulumix.GArrayOutput[FeatureEvaluationRule, FeatureEvaluationRuleOutput] `pulumi:"evaluationRules"`
	// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
	EvaluationStrategy pulumix.Output[string] `pulumi:"evaluationStrategy"`
	// The date and time that the feature was most recently updated.
	LastUpdatedTime pulumix.Output[string] `pulumi:"lastUpdatedTime"`
	// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
	Name pulumix.Output[string] `pulumi:"name"`
	// The name or ARN of the project that is to contain the new feature.
	Project pulumix.Output[string] `pulumi:"project"`
	// The current state of the feature. Valid values are `AVAILABLE` and `UPDATING`.
	Status pulumix.Output[string] `pulumi:"status"`
	// Tags to apply to the feature. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Defines the type of value used to define the different feature variations. Valid Values: `STRING`, `LONG`, `DOUBLE`, `BOOLEAN`.
	ValueType pulumix.Output[string] `pulumi:"valueType"`
	// One or more blocks that contain the configuration of the feature's different variations. Detailed below
	Variations pulumix.GArrayOutput[FeatureVariation, FeatureVariationOutput] `pulumi:"variations"`
}

// NewFeature registers a new resource with the given unique name, arguments, and options.
func NewFeature(ctx *pulumi.Context,
	name string, args *FeatureArgs, opts ...pulumi.ResourceOption) (*Feature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Variations == nil {
		return nil, errors.New("invalid value for required argument 'Variations'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Feature
	err := ctx.RegisterResource("aws:evidently/feature:Feature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeature gets an existing Feature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureState, opts ...pulumi.ResourceOption) (*Feature, error) {
	var resource Feature
	err := ctx.ReadResource("aws:evidently/feature:Feature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Feature resources.
type featureState struct {
	// The ARN of the feature.
	Arn *string `pulumi:"arn"`
	// The date and time that the feature is created.
	CreatedTime *string `pulumi:"createdTime"`
	// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `defaultVariation`, the first variation listed in the `variations` structure is used as the default variation.
	DefaultVariation *string `pulumi:"defaultVariation"`
	// Specifies the description of the feature.
	Description *string `pulumi:"description"`
	// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
	EntityOverrides map[string]string `pulumi:"entityOverrides"`
	// One or more blocks that define the evaluation rules for the feature. Detailed below
	EvaluationRules []FeatureEvaluationRule `pulumi:"evaluationRules"`
	// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
	EvaluationStrategy *string `pulumi:"evaluationStrategy"`
	// The date and time that the feature was most recently updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
	Name *string `pulumi:"name"`
	// The name or ARN of the project that is to contain the new feature.
	Project *string `pulumi:"project"`
	// The current state of the feature. Valid values are `AVAILABLE` and `UPDATING`.
	Status *string `pulumi:"status"`
	// Tags to apply to the feature. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Defines the type of value used to define the different feature variations. Valid Values: `STRING`, `LONG`, `DOUBLE`, `BOOLEAN`.
	ValueType *string `pulumi:"valueType"`
	// One or more blocks that contain the configuration of the feature's different variations. Detailed below
	Variations []FeatureVariation `pulumi:"variations"`
}

type FeatureState struct {
	// The ARN of the feature.
	Arn pulumix.Input[*string]
	// The date and time that the feature is created.
	CreatedTime pulumix.Input[*string]
	// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `defaultVariation`, the first variation listed in the `variations` structure is used as the default variation.
	DefaultVariation pulumix.Input[*string]
	// Specifies the description of the feature.
	Description pulumix.Input[*string]
	// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
	EntityOverrides pulumix.Input[map[string]string]
	// One or more blocks that define the evaluation rules for the feature. Detailed below
	EvaluationRules pulumix.Input[[]*FeatureEvaluationRuleArgs]
	// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
	EvaluationStrategy pulumix.Input[*string]
	// The date and time that the feature was most recently updated.
	LastUpdatedTime pulumix.Input[*string]
	// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
	Name pulumix.Input[*string]
	// The name or ARN of the project that is to contain the new feature.
	Project pulumix.Input[*string]
	// The current state of the feature. Valid values are `AVAILABLE` and `UPDATING`.
	Status pulumix.Input[*string]
	// Tags to apply to the feature. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Defines the type of value used to define the different feature variations. Valid Values: `STRING`, `LONG`, `DOUBLE`, `BOOLEAN`.
	ValueType pulumix.Input[*string]
	// One or more blocks that contain the configuration of the feature's different variations. Detailed below
	Variations pulumix.Input[[]*FeatureVariationArgs]
}

func (FeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureState)(nil)).Elem()
}

type featureArgs struct {
	// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `defaultVariation`, the first variation listed in the `variations` structure is used as the default variation.
	DefaultVariation *string `pulumi:"defaultVariation"`
	// Specifies the description of the feature.
	Description *string `pulumi:"description"`
	// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
	EntityOverrides map[string]string `pulumi:"entityOverrides"`
	// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
	EvaluationStrategy *string `pulumi:"evaluationStrategy"`
	// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
	Name *string `pulumi:"name"`
	// The name or ARN of the project that is to contain the new feature.
	Project string `pulumi:"project"`
	// Tags to apply to the feature. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// One or more blocks that contain the configuration of the feature's different variations. Detailed below
	Variations []FeatureVariation `pulumi:"variations"`
}

// The set of arguments for constructing a Feature resource.
type FeatureArgs struct {
	// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `defaultVariation`, the first variation listed in the `variations` structure is used as the default variation.
	DefaultVariation pulumix.Input[*string]
	// Specifies the description of the feature.
	Description pulumix.Input[*string]
	// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
	EntityOverrides pulumix.Input[map[string]string]
	// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
	EvaluationStrategy pulumix.Input[*string]
	// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
	Name pulumix.Input[*string]
	// The name or ARN of the project that is to contain the new feature.
	Project pulumix.Input[string]
	// Tags to apply to the feature. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// One or more blocks that contain the configuration of the feature's different variations. Detailed below
	Variations pulumix.Input[[]*FeatureVariationArgs]
}

func (FeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureArgs)(nil)).Elem()
}

type FeatureOutput struct{ *pulumi.OutputState }

func (FeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Feature)(nil)).Elem()
}

func (o FeatureOutput) ToFeatureOutput() FeatureOutput {
	return o
}

func (o FeatureOutput) ToFeatureOutputWithContext(ctx context.Context) FeatureOutput {
	return o
}

func (o FeatureOutput) ToOutput(ctx context.Context) pulumix.Output[Feature] {
	return pulumix.Output[Feature]{
		OutputState: o.OutputState,
	}
}

// The ARN of the feature.
func (o FeatureOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Feature](o, func(v Feature) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The date and time that the feature is created.
func (o FeatureOutput) CreatedTime() pulumix.Output[string] {
	value := pulumix.Apply[Feature](o, func(v Feature) pulumix.Output[string] { return v.CreatedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `defaultVariation`, the first variation listed in the `variations` structure is used as the default variation.
func (o FeatureOutput) DefaultVariation() pulumix.Output[string] {
	value := pulumix.Apply[Feature](o, func(v Feature) pulumix.Output[string] { return v.DefaultVariation })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the description of the feature.
func (o FeatureOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Feature](o, func(v Feature) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
func (o FeatureOutput) EntityOverrides() pulumix.MapOutput[string] {
	value := pulumix.Apply[Feature](o, func(v Feature) pulumix.MapOutput[string] { return v.EntityOverrides })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// One or more blocks that define the evaluation rules for the feature. Detailed below
func (o FeatureOutput) EvaluationRules() pulumix.GArrayOutput[FeatureEvaluationRule, FeatureEvaluationRuleOutput] {
	value := pulumix.Apply[Feature](o, func(v Feature) pulumix.GArrayOutput[FeatureEvaluationRule, FeatureEvaluationRuleOutput] {
		return v.EvaluationRules
	})
	unwrapped := pulumix.Flatten[[]FeatureEvaluationRule, pulumix.GArrayOutput[FeatureEvaluationRule, FeatureEvaluationRuleOutput]](value)
	return pulumix.GArrayOutput[FeatureEvaluationRule, FeatureEvaluationRuleOutput]{OutputState: unwrapped.OutputState}
}

// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
func (o FeatureOutput) EvaluationStrategy() pulumix.Output[string] {
	value := pulumix.Apply[Feature](o, func(v Feature) pulumix.Output[string] { return v.EvaluationStrategy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The date and time that the feature was most recently updated.
func (o FeatureOutput) LastUpdatedTime() pulumix.Output[string] {
	value := pulumix.Apply[Feature](o, func(v Feature) pulumix.Output[string] { return v.LastUpdatedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
func (o FeatureOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Feature](o, func(v Feature) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name or ARN of the project that is to contain the new feature.
func (o FeatureOutput) Project() pulumix.Output[string] {
	value := pulumix.Apply[Feature](o, func(v Feature) pulumix.Output[string] { return v.Project })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The current state of the feature. Valid values are `AVAILABLE` and `UPDATING`.
func (o FeatureOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Feature](o, func(v Feature) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Tags to apply to the feature. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FeatureOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Feature](o, func(v Feature) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o FeatureOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Feature](o, func(v Feature) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Defines the type of value used to define the different feature variations. Valid Values: `STRING`, `LONG`, `DOUBLE`, `BOOLEAN`.
func (o FeatureOutput) ValueType() pulumix.Output[string] {
	value := pulumix.Apply[Feature](o, func(v Feature) pulumix.Output[string] { return v.ValueType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// One or more blocks that contain the configuration of the feature's different variations. Detailed below
func (o FeatureOutput) Variations() pulumix.GArrayOutput[FeatureVariation, FeatureVariationOutput] {
	value := pulumix.Apply[Feature](o, func(v Feature) pulumix.GArrayOutput[FeatureVariation, FeatureVariationOutput] { return v.Variations })
	unwrapped := pulumix.Flatten[[]FeatureVariation, pulumix.GArrayOutput[FeatureVariation, FeatureVariationOutput]](value)
	return pulumix.GArrayOutput[FeatureVariation, FeatureVariationOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(FeatureOutput{})
}
