// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an IAM policy attached to a group.
type GroupPolicy struct {
	pulumi.CustomResourceState

	// The IAM group to attach to the policy.
	Group pulumix.Output[string] `pulumi:"group"`
	// The name of the policy. If omitted, the provider will
	// assign a random, unique name.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[*string] `pulumi:"namePrefix"`
	// The policy document. This is a JSON formatted string.
	Policy pulumix.Output[string] `pulumi:"policy"`
}

// NewGroupPolicy registers a new resource with the given unique name, arguments, and options.
func NewGroupPolicy(ctx *pulumi.Context,
	name string, args *GroupPolicyArgs, opts ...pulumi.ResourceOption) (*GroupPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupPolicy
	err := ctx.RegisterResource("aws:iam/groupPolicy:GroupPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupPolicy gets an existing GroupPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupPolicyState, opts ...pulumi.ResourceOption) (*GroupPolicy, error) {
	var resource GroupPolicy
	err := ctx.ReadResource("aws:iam/groupPolicy:GroupPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupPolicy resources.
type groupPolicyState struct {
	// The IAM group to attach to the policy.
	Group *string `pulumi:"group"`
	// The name of the policy. If omitted, the provider will
	// assign a random, unique name.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// The policy document. This is a JSON formatted string.
	Policy interface{} `pulumi:"policy"`
}

type GroupPolicyState struct {
	// The IAM group to attach to the policy.
	Group pulumix.Input[*string]
	// The name of the policy. If omitted, the provider will
	// assign a random, unique name.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// The policy document. This is a JSON formatted string.
	Policy pulumix.Input[*any]
}

func (GroupPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPolicyState)(nil)).Elem()
}

type groupPolicyArgs struct {
	// The IAM group to attach to the policy.
	Group string `pulumi:"group"`
	// The name of the policy. If omitted, the provider will
	// assign a random, unique name.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// The policy document. This is a JSON formatted string.
	Policy interface{} `pulumi:"policy"`
}

// The set of arguments for constructing a GroupPolicy resource.
type GroupPolicyArgs struct {
	// The IAM group to attach to the policy.
	Group pulumix.Input[string]
	// The name of the policy. If omitted, the provider will
	// assign a random, unique name.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// The policy document. This is a JSON formatted string.
	Policy pulumix.Input[any]
}

func (GroupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPolicyArgs)(nil)).Elem()
}

type GroupPolicyOutput struct{ *pulumi.OutputState }

func (GroupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicy)(nil)).Elem()
}

func (o GroupPolicyOutput) ToGroupPolicyOutput() GroupPolicyOutput {
	return o
}

func (o GroupPolicyOutput) ToGroupPolicyOutputWithContext(ctx context.Context) GroupPolicyOutput {
	return o
}

func (o GroupPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GroupPolicy] {
	return pulumix.Output[GroupPolicy]{
		OutputState: o.OutputState,
	}
}

// The IAM group to attach to the policy.
func (o GroupPolicyOutput) Group() pulumix.Output[string] {
	value := pulumix.Apply[GroupPolicy](o, func(v GroupPolicy) pulumix.Output[string] { return v.Group })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the policy. If omitted, the provider will
// assign a random, unique name.
func (o GroupPolicyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[GroupPolicy](o, func(v GroupPolicy) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified
// prefix. Conflicts with `name`.
func (o GroupPolicyOutput) NamePrefix() pulumix.Output[*string] {
	value := pulumix.Apply[GroupPolicy](o, func(v GroupPolicy) pulumix.Output[*string] { return v.NamePrefix })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The policy document. This is a JSON formatted string.
func (o GroupPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[GroupPolicy](o, func(v GroupPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(GroupPolicyOutput{})
}
