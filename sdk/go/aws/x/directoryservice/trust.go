// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a trust relationship between two Active Directory Directories.
//
// The directories may either be both AWS Managed Microsoft AD domains or an AWS Managed Microsoft AD domain and a self-managed Active Directory Domain.
//
// The Trust relationship must be configured on both sides of the relationship.
// If a Trust has only been created on one side, it will be in the state `VerifyFailed`.
// Once the second Trust is created, the first will update to the correct state.
type Trust struct {
	pulumi.CustomResourceState

	// Set of IPv4 addresses for the DNS server associated with the remote Directory.
	// Can contain between 1 and 4 values.
	ConditionalForwarderIpAddrs pulumix.ArrayOutput[string] `pulumi:"conditionalForwarderIpAddrs"`
	// Date and time when the Trust was created.
	CreatedDateTime pulumix.Output[string] `pulumi:"createdDateTime"`
	// Whether to delete the conditional forwarder when deleting the Trust relationship.
	DeleteAssociatedConditionalForwarder pulumix.Output[bool] `pulumi:"deleteAssociatedConditionalForwarder"`
	// ID of the Directory.
	DirectoryId pulumix.Output[string] `pulumi:"directoryId"`
	// Date and time when the Trust was last updated.
	LastUpdatedDateTime pulumix.Output[string] `pulumi:"lastUpdatedDateTime"`
	// Fully qualified domain name of the remote Directory.
	RemoteDomainName pulumix.Output[string] `pulumi:"remoteDomainName"`
	// Whether to enable selective authentication.
	// Valid values are `Enabled` and `Disabled`.
	// Default value is `Disabled`.
	SelectiveAuth pulumix.Output[string] `pulumi:"selectiveAuth"`
	// Date and time when the Trust state in `trustState` was last updated.
	StateLastUpdatedDateTime pulumix.Output[string] `pulumi:"stateLastUpdatedDateTime"`
	// The direction of the Trust relationship.
	// Valid values are `One-Way: Outgoing`, `One-Way: Incoming`, and `Two-Way`.
	TrustDirection pulumix.Output[string] `pulumi:"trustDirection"`
	// Password for the Trust.
	// Does not need to match the passwords for either Directory.
	// Can contain upper- and lower-case letters, numbers, and punctuation characters.
	// May be up to 128 characters long.
	TrustPassword pulumix.Output[string] `pulumi:"trustPassword"`
	// State of the Trust relationship.
	// One of `Created`, `VerifyFailed`,`Verified`, `UpdateFailed`,`Updated`,`Deleted`, or `Failed`.
	TrustState pulumix.Output[string] `pulumi:"trustState"`
	// Reason for the Trust state set in `trustState`.
	TrustStateReason pulumix.Output[string] `pulumi:"trustStateReason"`
	// Type of the Trust relationship.
	// Valid values are `Forest` and `External`.
	// Default value is `Forest`.
	TrustType pulumix.Output[string] `pulumi:"trustType"`
}

// NewTrust registers a new resource with the given unique name, arguments, and options.
func NewTrust(ctx *pulumi.Context,
	name string, args *TrustArgs, opts ...pulumi.ResourceOption) (*Trust, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	if args.RemoteDomainName == nil {
		return nil, errors.New("invalid value for required argument 'RemoteDomainName'")
	}
	if args.TrustDirection == nil {
		return nil, errors.New("invalid value for required argument 'TrustDirection'")
	}
	if args.TrustPassword == nil {
		return nil, errors.New("invalid value for required argument 'TrustPassword'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Trust
	err := ctx.RegisterResource("aws:directoryservice/trust:Trust", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrust gets an existing Trust resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrust(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrustState, opts ...pulumi.ResourceOption) (*Trust, error) {
	var resource Trust
	err := ctx.ReadResource("aws:directoryservice/trust:Trust", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trust resources.
type trustState struct {
	// Set of IPv4 addresses for the DNS server associated with the remote Directory.
	// Can contain between 1 and 4 values.
	ConditionalForwarderIpAddrs []string `pulumi:"conditionalForwarderIpAddrs"`
	// Date and time when the Trust was created.
	CreatedDateTime *string `pulumi:"createdDateTime"`
	// Whether to delete the conditional forwarder when deleting the Trust relationship.
	DeleteAssociatedConditionalForwarder *bool `pulumi:"deleteAssociatedConditionalForwarder"`
	// ID of the Directory.
	DirectoryId *string `pulumi:"directoryId"`
	// Date and time when the Trust was last updated.
	LastUpdatedDateTime *string `pulumi:"lastUpdatedDateTime"`
	// Fully qualified domain name of the remote Directory.
	RemoteDomainName *string `pulumi:"remoteDomainName"`
	// Whether to enable selective authentication.
	// Valid values are `Enabled` and `Disabled`.
	// Default value is `Disabled`.
	SelectiveAuth *string `pulumi:"selectiveAuth"`
	// Date and time when the Trust state in `trustState` was last updated.
	StateLastUpdatedDateTime *string `pulumi:"stateLastUpdatedDateTime"`
	// The direction of the Trust relationship.
	// Valid values are `One-Way: Outgoing`, `One-Way: Incoming`, and `Two-Way`.
	TrustDirection *string `pulumi:"trustDirection"`
	// Password for the Trust.
	// Does not need to match the passwords for either Directory.
	// Can contain upper- and lower-case letters, numbers, and punctuation characters.
	// May be up to 128 characters long.
	TrustPassword *string `pulumi:"trustPassword"`
	// State of the Trust relationship.
	// One of `Created`, `VerifyFailed`,`Verified`, `UpdateFailed`,`Updated`,`Deleted`, or `Failed`.
	TrustState *string `pulumi:"trustState"`
	// Reason for the Trust state set in `trustState`.
	TrustStateReason *string `pulumi:"trustStateReason"`
	// Type of the Trust relationship.
	// Valid values are `Forest` and `External`.
	// Default value is `Forest`.
	TrustType *string `pulumi:"trustType"`
}

type TrustState struct {
	// Set of IPv4 addresses for the DNS server associated with the remote Directory.
	// Can contain between 1 and 4 values.
	ConditionalForwarderIpAddrs pulumix.Input[[]string]
	// Date and time when the Trust was created.
	CreatedDateTime pulumix.Input[*string]
	// Whether to delete the conditional forwarder when deleting the Trust relationship.
	DeleteAssociatedConditionalForwarder pulumix.Input[*bool]
	// ID of the Directory.
	DirectoryId pulumix.Input[*string]
	// Date and time when the Trust was last updated.
	LastUpdatedDateTime pulumix.Input[*string]
	// Fully qualified domain name of the remote Directory.
	RemoteDomainName pulumix.Input[*string]
	// Whether to enable selective authentication.
	// Valid values are `Enabled` and `Disabled`.
	// Default value is `Disabled`.
	SelectiveAuth pulumix.Input[*string]
	// Date and time when the Trust state in `trustState` was last updated.
	StateLastUpdatedDateTime pulumix.Input[*string]
	// The direction of the Trust relationship.
	// Valid values are `One-Way: Outgoing`, `One-Way: Incoming`, and `Two-Way`.
	TrustDirection pulumix.Input[*string]
	// Password for the Trust.
	// Does not need to match the passwords for either Directory.
	// Can contain upper- and lower-case letters, numbers, and punctuation characters.
	// May be up to 128 characters long.
	TrustPassword pulumix.Input[*string]
	// State of the Trust relationship.
	// One of `Created`, `VerifyFailed`,`Verified`, `UpdateFailed`,`Updated`,`Deleted`, or `Failed`.
	TrustState pulumix.Input[*string]
	// Reason for the Trust state set in `trustState`.
	TrustStateReason pulumix.Input[*string]
	// Type of the Trust relationship.
	// Valid values are `Forest` and `External`.
	// Default value is `Forest`.
	TrustType pulumix.Input[*string]
}

func (TrustState) ElementType() reflect.Type {
	return reflect.TypeOf((*trustState)(nil)).Elem()
}

type trustArgs struct {
	// Set of IPv4 addresses for the DNS server associated with the remote Directory.
	// Can contain between 1 and 4 values.
	ConditionalForwarderIpAddrs []string `pulumi:"conditionalForwarderIpAddrs"`
	// Whether to delete the conditional forwarder when deleting the Trust relationship.
	DeleteAssociatedConditionalForwarder *bool `pulumi:"deleteAssociatedConditionalForwarder"`
	// ID of the Directory.
	DirectoryId string `pulumi:"directoryId"`
	// Fully qualified domain name of the remote Directory.
	RemoteDomainName string `pulumi:"remoteDomainName"`
	// Whether to enable selective authentication.
	// Valid values are `Enabled` and `Disabled`.
	// Default value is `Disabled`.
	SelectiveAuth *string `pulumi:"selectiveAuth"`
	// The direction of the Trust relationship.
	// Valid values are `One-Way: Outgoing`, `One-Way: Incoming`, and `Two-Way`.
	TrustDirection string `pulumi:"trustDirection"`
	// Password for the Trust.
	// Does not need to match the passwords for either Directory.
	// Can contain upper- and lower-case letters, numbers, and punctuation characters.
	// May be up to 128 characters long.
	TrustPassword string `pulumi:"trustPassword"`
	// Type of the Trust relationship.
	// Valid values are `Forest` and `External`.
	// Default value is `Forest`.
	TrustType *string `pulumi:"trustType"`
}

// The set of arguments for constructing a Trust resource.
type TrustArgs struct {
	// Set of IPv4 addresses for the DNS server associated with the remote Directory.
	// Can contain between 1 and 4 values.
	ConditionalForwarderIpAddrs pulumix.Input[[]string]
	// Whether to delete the conditional forwarder when deleting the Trust relationship.
	DeleteAssociatedConditionalForwarder pulumix.Input[*bool]
	// ID of the Directory.
	DirectoryId pulumix.Input[string]
	// Fully qualified domain name of the remote Directory.
	RemoteDomainName pulumix.Input[string]
	// Whether to enable selective authentication.
	// Valid values are `Enabled` and `Disabled`.
	// Default value is `Disabled`.
	SelectiveAuth pulumix.Input[*string]
	// The direction of the Trust relationship.
	// Valid values are `One-Way: Outgoing`, `One-Way: Incoming`, and `Two-Way`.
	TrustDirection pulumix.Input[string]
	// Password for the Trust.
	// Does not need to match the passwords for either Directory.
	// Can contain upper- and lower-case letters, numbers, and punctuation characters.
	// May be up to 128 characters long.
	TrustPassword pulumix.Input[string]
	// Type of the Trust relationship.
	// Valid values are `Forest` and `External`.
	// Default value is `Forest`.
	TrustType pulumix.Input[*string]
}

func (TrustArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trustArgs)(nil)).Elem()
}

type TrustOutput struct{ *pulumi.OutputState }

func (TrustOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Trust)(nil)).Elem()
}

func (o TrustOutput) ToTrustOutput() TrustOutput {
	return o
}

func (o TrustOutput) ToTrustOutputWithContext(ctx context.Context) TrustOutput {
	return o
}

func (o TrustOutput) ToOutput(ctx context.Context) pulumix.Output[Trust] {
	return pulumix.Output[Trust]{
		OutputState: o.OutputState,
	}
}

// Set of IPv4 addresses for the DNS server associated with the remote Directory.
// Can contain between 1 and 4 values.
func (o TrustOutput) ConditionalForwarderIpAddrs() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Trust](o, func(v Trust) pulumix.ArrayOutput[string] { return v.ConditionalForwarderIpAddrs })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Date and time when the Trust was created.
func (o TrustOutput) CreatedDateTime() pulumix.Output[string] {
	value := pulumix.Apply[Trust](o, func(v Trust) pulumix.Output[string] { return v.CreatedDateTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to delete the conditional forwarder when deleting the Trust relationship.
func (o TrustOutput) DeleteAssociatedConditionalForwarder() pulumix.Output[bool] {
	value := pulumix.Apply[Trust](o, func(v Trust) pulumix.Output[bool] { return v.DeleteAssociatedConditionalForwarder })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// ID of the Directory.
func (o TrustOutput) DirectoryId() pulumix.Output[string] {
	value := pulumix.Apply[Trust](o, func(v Trust) pulumix.Output[string] { return v.DirectoryId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date and time when the Trust was last updated.
func (o TrustOutput) LastUpdatedDateTime() pulumix.Output[string] {
	value := pulumix.Apply[Trust](o, func(v Trust) pulumix.Output[string] { return v.LastUpdatedDateTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Fully qualified domain name of the remote Directory.
func (o TrustOutput) RemoteDomainName() pulumix.Output[string] {
	value := pulumix.Apply[Trust](o, func(v Trust) pulumix.Output[string] { return v.RemoteDomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to enable selective authentication.
// Valid values are `Enabled` and `Disabled`.
// Default value is `Disabled`.
func (o TrustOutput) SelectiveAuth() pulumix.Output[string] {
	value := pulumix.Apply[Trust](o, func(v Trust) pulumix.Output[string] { return v.SelectiveAuth })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date and time when the Trust state in `trustState` was last updated.
func (o TrustOutput) StateLastUpdatedDateTime() pulumix.Output[string] {
	value := pulumix.Apply[Trust](o, func(v Trust) pulumix.Output[string] { return v.StateLastUpdatedDateTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The direction of the Trust relationship.
// Valid values are `One-Way: Outgoing`, `One-Way: Incoming`, and `Two-Way`.
func (o TrustOutput) TrustDirection() pulumix.Output[string] {
	value := pulumix.Apply[Trust](o, func(v Trust) pulumix.Output[string] { return v.TrustDirection })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Password for the Trust.
// Does not need to match the passwords for either Directory.
// Can contain upper- and lower-case letters, numbers, and punctuation characters.
// May be up to 128 characters long.
func (o TrustOutput) TrustPassword() pulumix.Output[string] {
	value := pulumix.Apply[Trust](o, func(v Trust) pulumix.Output[string] { return v.TrustPassword })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// State of the Trust relationship.
// One of `Created`, `VerifyFailed`,`Verified`, `UpdateFailed`,`Updated`,`Deleted`, or `Failed`.
func (o TrustOutput) TrustState() pulumix.Output[string] {
	value := pulumix.Apply[Trust](o, func(v Trust) pulumix.Output[string] { return v.TrustState })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Reason for the Trust state set in `trustState`.
func (o TrustOutput) TrustStateReason() pulumix.Output[string] {
	value := pulumix.Apply[Trust](o, func(v Trust) pulumix.Output[string] { return v.TrustStateReason })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Type of the Trust relationship.
// Valid values are `Forest` and `External`.
// Default value is `Forest`.
func (o TrustOutput) TrustType() pulumix.Output[string] {
	value := pulumix.Apply[Trust](o, func(v Trust) pulumix.Output[string] { return v.TrustType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(TrustOutput{})
}
