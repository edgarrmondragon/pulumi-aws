// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a GameLift Matchmaking Rule Set resources.
type MatchmakingRuleSet struct {
	pulumi.CustomResourceState

	// Rule Set ARN.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Name of the matchmaking rule set.
	Name pulumix.Output[string] `pulumi:"name"`
	// JSON encoded string containing rule set data.
	RuleSetBody pulumix.Output[string]    `pulumi:"ruleSetBody"`
	Tags        pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewMatchmakingRuleSet registers a new resource with the given unique name, arguments, and options.
func NewMatchmakingRuleSet(ctx *pulumi.Context,
	name string, args *MatchmakingRuleSetArgs, opts ...pulumi.ResourceOption) (*MatchmakingRuleSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RuleSetBody == nil {
		return nil, errors.New("invalid value for required argument 'RuleSetBody'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MatchmakingRuleSet
	err := ctx.RegisterResource("aws:gamelift/matchmakingRuleSet:MatchmakingRuleSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMatchmakingRuleSet gets an existing MatchmakingRuleSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMatchmakingRuleSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MatchmakingRuleSetState, opts ...pulumi.ResourceOption) (*MatchmakingRuleSet, error) {
	var resource MatchmakingRuleSet
	err := ctx.ReadResource("aws:gamelift/matchmakingRuleSet:MatchmakingRuleSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MatchmakingRuleSet resources.
type matchmakingRuleSetState struct {
	// Rule Set ARN.
	Arn *string `pulumi:"arn"`
	// Name of the matchmaking rule set.
	Name *string `pulumi:"name"`
	// JSON encoded string containing rule set data.
	RuleSetBody *string           `pulumi:"ruleSetBody"`
	Tags        map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type MatchmakingRuleSetState struct {
	// Rule Set ARN.
	Arn pulumix.Input[*string]
	// Name of the matchmaking rule set.
	Name pulumix.Input[*string]
	// JSON encoded string containing rule set data.
	RuleSetBody pulumix.Input[*string]
	Tags        pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (MatchmakingRuleSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*matchmakingRuleSetState)(nil)).Elem()
}

type matchmakingRuleSetArgs struct {
	// Name of the matchmaking rule set.
	Name *string `pulumi:"name"`
	// JSON encoded string containing rule set data.
	RuleSetBody string            `pulumi:"ruleSetBody"`
	Tags        map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a MatchmakingRuleSet resource.
type MatchmakingRuleSetArgs struct {
	// Name of the matchmaking rule set.
	Name pulumix.Input[*string]
	// JSON encoded string containing rule set data.
	RuleSetBody pulumix.Input[string]
	Tags        pulumix.Input[map[string]string]
}

func (MatchmakingRuleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*matchmakingRuleSetArgs)(nil)).Elem()
}

type MatchmakingRuleSetOutput struct{ *pulumi.OutputState }

func (MatchmakingRuleSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchmakingRuleSet)(nil)).Elem()
}

func (o MatchmakingRuleSetOutput) ToMatchmakingRuleSetOutput() MatchmakingRuleSetOutput {
	return o
}

func (o MatchmakingRuleSetOutput) ToMatchmakingRuleSetOutputWithContext(ctx context.Context) MatchmakingRuleSetOutput {
	return o
}

func (o MatchmakingRuleSetOutput) ToOutput(ctx context.Context) pulumix.Output[MatchmakingRuleSet] {
	return pulumix.Output[MatchmakingRuleSet]{
		OutputState: o.OutputState,
	}
}

// Rule Set ARN.
func (o MatchmakingRuleSetOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[MatchmakingRuleSet](o, func(v MatchmakingRuleSet) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the matchmaking rule set.
func (o MatchmakingRuleSetOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[MatchmakingRuleSet](o, func(v MatchmakingRuleSet) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// JSON encoded string containing rule set data.
func (o MatchmakingRuleSetOutput) RuleSetBody() pulumix.Output[string] {
	value := pulumix.Apply[MatchmakingRuleSet](o, func(v MatchmakingRuleSet) pulumix.Output[string] { return v.RuleSetBody })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o MatchmakingRuleSetOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[MatchmakingRuleSet](o, func(v MatchmakingRuleSet) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o MatchmakingRuleSetOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[MatchmakingRuleSet](o, func(v MatchmakingRuleSet) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(MatchmakingRuleSetOutput{})
}
