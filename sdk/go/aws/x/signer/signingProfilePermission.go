// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package signer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a Signer Signing Profile Permission. That is, a cross-account permission for a signing profile.
type SigningProfilePermission struct {
	pulumi.CustomResourceState

	// An AWS Signer action permitted as part of cross-account permissions. Valid values: `signer:StartSigningJob`, `signer:GetSigningProfile`, or `signer:RevokeSignature`.
	Action pulumix.Output[string] `pulumi:"action"`
	// The AWS principal to be granted a cross-account permission.
	Principal pulumix.Output[string] `pulumi:"principal"`
	// Name of the signing profile to add the cross-account permissions.
	ProfileName pulumix.Output[string] `pulumi:"profileName"`
	// The signing profile version that a permission applies to.
	ProfileVersion pulumix.Output[string] `pulumi:"profileVersion"`
	// A unique statement identifier. By default generated by the provider.
	StatementId pulumix.Output[string] `pulumi:"statementId"`
	// A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statementId`.
	StatementIdPrefix pulumix.Output[*string] `pulumi:"statementIdPrefix"`
}

// NewSigningProfilePermission registers a new resource with the given unique name, arguments, and options.
func NewSigningProfilePermission(ctx *pulumi.Context,
	name string, args *SigningProfilePermissionArgs, opts ...pulumi.ResourceOption) (*SigningProfilePermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.ProfileName == nil {
		return nil, errors.New("invalid value for required argument 'ProfileName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SigningProfilePermission
	err := ctx.RegisterResource("aws:signer/signingProfilePermission:SigningProfilePermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSigningProfilePermission gets an existing SigningProfilePermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSigningProfilePermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SigningProfilePermissionState, opts ...pulumi.ResourceOption) (*SigningProfilePermission, error) {
	var resource SigningProfilePermission
	err := ctx.ReadResource("aws:signer/signingProfilePermission:SigningProfilePermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SigningProfilePermission resources.
type signingProfilePermissionState struct {
	// An AWS Signer action permitted as part of cross-account permissions. Valid values: `signer:StartSigningJob`, `signer:GetSigningProfile`, or `signer:RevokeSignature`.
	Action *string `pulumi:"action"`
	// The AWS principal to be granted a cross-account permission.
	Principal *string `pulumi:"principal"`
	// Name of the signing profile to add the cross-account permissions.
	ProfileName *string `pulumi:"profileName"`
	// The signing profile version that a permission applies to.
	ProfileVersion *string `pulumi:"profileVersion"`
	// A unique statement identifier. By default generated by the provider.
	StatementId *string `pulumi:"statementId"`
	// A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statementId`.
	StatementIdPrefix *string `pulumi:"statementIdPrefix"`
}

type SigningProfilePermissionState struct {
	// An AWS Signer action permitted as part of cross-account permissions. Valid values: `signer:StartSigningJob`, `signer:GetSigningProfile`, or `signer:RevokeSignature`.
	Action pulumix.Input[*string]
	// The AWS principal to be granted a cross-account permission.
	Principal pulumix.Input[*string]
	// Name of the signing profile to add the cross-account permissions.
	ProfileName pulumix.Input[*string]
	// The signing profile version that a permission applies to.
	ProfileVersion pulumix.Input[*string]
	// A unique statement identifier. By default generated by the provider.
	StatementId pulumix.Input[*string]
	// A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statementId`.
	StatementIdPrefix pulumix.Input[*string]
}

func (SigningProfilePermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*signingProfilePermissionState)(nil)).Elem()
}

type signingProfilePermissionArgs struct {
	// An AWS Signer action permitted as part of cross-account permissions. Valid values: `signer:StartSigningJob`, `signer:GetSigningProfile`, or `signer:RevokeSignature`.
	Action string `pulumi:"action"`
	// The AWS principal to be granted a cross-account permission.
	Principal string `pulumi:"principal"`
	// Name of the signing profile to add the cross-account permissions.
	ProfileName string `pulumi:"profileName"`
	// The signing profile version that a permission applies to.
	ProfileVersion *string `pulumi:"profileVersion"`
	// A unique statement identifier. By default generated by the provider.
	StatementId *string `pulumi:"statementId"`
	// A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statementId`.
	StatementIdPrefix *string `pulumi:"statementIdPrefix"`
}

// The set of arguments for constructing a SigningProfilePermission resource.
type SigningProfilePermissionArgs struct {
	// An AWS Signer action permitted as part of cross-account permissions. Valid values: `signer:StartSigningJob`, `signer:GetSigningProfile`, or `signer:RevokeSignature`.
	Action pulumix.Input[string]
	// The AWS principal to be granted a cross-account permission.
	Principal pulumix.Input[string]
	// Name of the signing profile to add the cross-account permissions.
	ProfileName pulumix.Input[string]
	// The signing profile version that a permission applies to.
	ProfileVersion pulumix.Input[*string]
	// A unique statement identifier. By default generated by the provider.
	StatementId pulumix.Input[*string]
	// A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statementId`.
	StatementIdPrefix pulumix.Input[*string]
}

func (SigningProfilePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*signingProfilePermissionArgs)(nil)).Elem()
}

type SigningProfilePermissionOutput struct{ *pulumi.OutputState }

func (SigningProfilePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SigningProfilePermission)(nil)).Elem()
}

func (o SigningProfilePermissionOutput) ToSigningProfilePermissionOutput() SigningProfilePermissionOutput {
	return o
}

func (o SigningProfilePermissionOutput) ToSigningProfilePermissionOutputWithContext(ctx context.Context) SigningProfilePermissionOutput {
	return o
}

func (o SigningProfilePermissionOutput) ToOutput(ctx context.Context) pulumix.Output[SigningProfilePermission] {
	return pulumix.Output[SigningProfilePermission]{
		OutputState: o.OutputState,
	}
}

// An AWS Signer action permitted as part of cross-account permissions. Valid values: `signer:StartSigningJob`, `signer:GetSigningProfile`, or `signer:RevokeSignature`.
func (o SigningProfilePermissionOutput) Action() pulumix.Output[string] {
	value := pulumix.Apply[SigningProfilePermission](o, func(v SigningProfilePermission) pulumix.Output[string] { return v.Action })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The AWS principal to be granted a cross-account permission.
func (o SigningProfilePermissionOutput) Principal() pulumix.Output[string] {
	value := pulumix.Apply[SigningProfilePermission](o, func(v SigningProfilePermission) pulumix.Output[string] { return v.Principal })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the signing profile to add the cross-account permissions.
func (o SigningProfilePermissionOutput) ProfileName() pulumix.Output[string] {
	value := pulumix.Apply[SigningProfilePermission](o, func(v SigningProfilePermission) pulumix.Output[string] { return v.ProfileName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The signing profile version that a permission applies to.
func (o SigningProfilePermissionOutput) ProfileVersion() pulumix.Output[string] {
	value := pulumix.Apply[SigningProfilePermission](o, func(v SigningProfilePermission) pulumix.Output[string] { return v.ProfileVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A unique statement identifier. By default generated by the provider.
func (o SigningProfilePermissionOutput) StatementId() pulumix.Output[string] {
	value := pulumix.Apply[SigningProfilePermission](o, func(v SigningProfilePermission) pulumix.Output[string] { return v.StatementId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statementId`.
func (o SigningProfilePermissionOutput) StatementIdPrefix() pulumix.Output[*string] {
	value := pulumix.Apply[SigningProfilePermission](o, func(v SigningProfilePermission) pulumix.Output[*string] { return v.StatementIdPrefix })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(SigningProfilePermissionOutput{})
}
