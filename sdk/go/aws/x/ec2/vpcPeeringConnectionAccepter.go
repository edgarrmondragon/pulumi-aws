// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage the accepter's side of a VPC Peering Connection.
//
// When a cross-account (requester's AWS account differs from the accepter's AWS account) or an inter-region
// VPC Peering Connection is created, a VPC Peering Connection resource is automatically created in the
// accepter's account.
// The requester can use the `ec2.VpcPeeringConnection` resource to manage its side of the connection
// and the accepter can use the `ec2.VpcPeeringConnectionAccepter` resource to "adopt" its side of the
// connection into management.
type VpcPeeringConnectionAccepter struct {
	pulumi.CustomResourceState

	// The status of the VPC Peering Connection request.
	AcceptStatus pulumix.Output[string] `pulumi:"acceptStatus"`
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
	Accepter pulumix.GPtrOutput[VpcPeeringConnectionAccepterAccepter, VpcPeeringConnectionAccepterAccepterOutput] `pulumi:"accepter"`
	// Whether or not to accept the peering request. Defaults to `false`.
	AutoAccept pulumix.Output[*bool] `pulumi:"autoAccept"`
	// The AWS account ID of the owner of the requester VPC.
	PeerOwnerId pulumix.Output[string] `pulumi:"peerOwnerId"`
	// The region of the accepter VPC.
	PeerRegion pulumix.Output[string] `pulumi:"peerRegion"`
	// The ID of the requester VPC.
	PeerVpcId pulumix.Output[string] `pulumi:"peerVpcId"`
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
	Requester pulumix.GPtrOutput[VpcPeeringConnectionAccepterRequester, VpcPeeringConnectionAccepterRequesterOutput] `pulumi:"requester"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The ID of the accepter VPC.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
	// The VPC Peering Connection ID to manage.
	VpcPeeringConnectionId pulumix.Output[string] `pulumi:"vpcPeeringConnectionId"`
}

// NewVpcPeeringConnectionAccepter registers a new resource with the given unique name, arguments, and options.
func NewVpcPeeringConnectionAccepter(ctx *pulumi.Context,
	name string, args *VpcPeeringConnectionAccepterArgs, opts ...pulumi.ResourceOption) (*VpcPeeringConnectionAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcPeeringConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'VpcPeeringConnectionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcPeeringConnectionAccepter
	err := ctx.RegisterResource("aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcPeeringConnectionAccepter gets an existing VpcPeeringConnectionAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcPeeringConnectionAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcPeeringConnectionAccepterState, opts ...pulumi.ResourceOption) (*VpcPeeringConnectionAccepter, error) {
	var resource VpcPeeringConnectionAccepter
	err := ctx.ReadResource("aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcPeeringConnectionAccepter resources.
type vpcPeeringConnectionAccepterState struct {
	// The status of the VPC Peering Connection request.
	AcceptStatus *string `pulumi:"acceptStatus"`
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
	Accepter *VpcPeeringConnectionAccepterAccepter `pulumi:"accepter"`
	// Whether or not to accept the peering request. Defaults to `false`.
	AutoAccept *bool `pulumi:"autoAccept"`
	// The AWS account ID of the owner of the requester VPC.
	PeerOwnerId *string `pulumi:"peerOwnerId"`
	// The region of the accepter VPC.
	PeerRegion *string `pulumi:"peerRegion"`
	// The ID of the requester VPC.
	PeerVpcId *string `pulumi:"peerVpcId"`
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
	Requester *VpcPeeringConnectionAccepterRequester `pulumi:"requester"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ID of the accepter VPC.
	VpcId *string `pulumi:"vpcId"`
	// The VPC Peering Connection ID to manage.
	VpcPeeringConnectionId *string `pulumi:"vpcPeeringConnectionId"`
}

type VpcPeeringConnectionAccepterState struct {
	// The status of the VPC Peering Connection request.
	AcceptStatus pulumix.Input[*string]
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
	Accepter pulumix.Input[*VpcPeeringConnectionAccepterAccepterArgs]
	// Whether or not to accept the peering request. Defaults to `false`.
	AutoAccept pulumix.Input[*bool]
	// The AWS account ID of the owner of the requester VPC.
	PeerOwnerId pulumix.Input[*string]
	// The region of the accepter VPC.
	PeerRegion pulumix.Input[*string]
	// The ID of the requester VPC.
	PeerVpcId pulumix.Input[*string]
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
	Requester pulumix.Input[*VpcPeeringConnectionAccepterRequesterArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The ID of the accepter VPC.
	VpcId pulumix.Input[*string]
	// The VPC Peering Connection ID to manage.
	VpcPeeringConnectionId pulumix.Input[*string]
}

func (VpcPeeringConnectionAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionAccepterState)(nil)).Elem()
}

type vpcPeeringConnectionAccepterArgs struct {
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
	Accepter *VpcPeeringConnectionAccepterAccepter `pulumi:"accepter"`
	// Whether or not to accept the peering request. Defaults to `false`.
	AutoAccept *bool `pulumi:"autoAccept"`
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
	Requester *VpcPeeringConnectionAccepterRequester `pulumi:"requester"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The VPC Peering Connection ID to manage.
	VpcPeeringConnectionId string `pulumi:"vpcPeeringConnectionId"`
}

// The set of arguments for constructing a VpcPeeringConnectionAccepter resource.
type VpcPeeringConnectionAccepterArgs struct {
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
	Accepter pulumix.Input[*VpcPeeringConnectionAccepterAccepterArgs]
	// Whether or not to accept the peering request. Defaults to `false`.
	AutoAccept pulumix.Input[*bool]
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
	Requester pulumix.Input[*VpcPeeringConnectionAccepterRequesterArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The VPC Peering Connection ID to manage.
	VpcPeeringConnectionId pulumix.Input[string]
}

func (VpcPeeringConnectionAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionAccepterArgs)(nil)).Elem()
}

type VpcPeeringConnectionAccepterOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectionAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConnectionAccepter)(nil)).Elem()
}

func (o VpcPeeringConnectionAccepterOutput) ToVpcPeeringConnectionAccepterOutput() VpcPeeringConnectionAccepterOutput {
	return o
}

func (o VpcPeeringConnectionAccepterOutput) ToVpcPeeringConnectionAccepterOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterOutput {
	return o
}

func (o VpcPeeringConnectionAccepterOutput) ToOutput(ctx context.Context) pulumix.Output[VpcPeeringConnectionAccepter] {
	return pulumix.Output[VpcPeeringConnectionAccepter]{
		OutputState: o.OutputState,
	}
}

// The status of the VPC Peering Connection request.
func (o VpcPeeringConnectionAccepterOutput) AcceptStatus() pulumix.Output[string] {
	value := pulumix.Apply[VpcPeeringConnectionAccepter](o, func(v VpcPeeringConnectionAccepter) pulumix.Output[string] { return v.AcceptStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A configuration block that describes [VPC Peering Connection]
// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
func (o VpcPeeringConnectionAccepterOutput) Accepter() pulumix.GPtrOutput[VpcPeeringConnectionAccepterAccepter, VpcPeeringConnectionAccepterAccepterOutput] {
	value := pulumix.Apply[VpcPeeringConnectionAccepter](o, func(v VpcPeeringConnectionAccepter) pulumix.GPtrOutput[VpcPeeringConnectionAccepterAccepter, VpcPeeringConnectionAccepterAccepterOutput] {
		return v.Accepter
	})
	unwrapped := pulumix.Flatten[*VpcPeeringConnectionAccepterAccepter, pulumix.GPtrOutput[VpcPeeringConnectionAccepterAccepter, VpcPeeringConnectionAccepterAccepterOutput]](value)
	return pulumix.GPtrOutput[VpcPeeringConnectionAccepterAccepter, VpcPeeringConnectionAccepterAccepterOutput]{OutputState: unwrapped.OutputState}
}

// Whether or not to accept the peering request. Defaults to `false`.
func (o VpcPeeringConnectionAccepterOutput) AutoAccept() pulumix.Output[*bool] {
	value := pulumix.Apply[VpcPeeringConnectionAccepter](o, func(v VpcPeeringConnectionAccepter) pulumix.Output[*bool] { return v.AutoAccept })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The AWS account ID of the owner of the requester VPC.
func (o VpcPeeringConnectionAccepterOutput) PeerOwnerId() pulumix.Output[string] {
	value := pulumix.Apply[VpcPeeringConnectionAccepter](o, func(v VpcPeeringConnectionAccepter) pulumix.Output[string] { return v.PeerOwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The region of the accepter VPC.
func (o VpcPeeringConnectionAccepterOutput) PeerRegion() pulumix.Output[string] {
	value := pulumix.Apply[VpcPeeringConnectionAccepter](o, func(v VpcPeeringConnectionAccepter) pulumix.Output[string] { return v.PeerRegion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the requester VPC.
func (o VpcPeeringConnectionAccepterOutput) PeerVpcId() pulumix.Output[string] {
	value := pulumix.Apply[VpcPeeringConnectionAccepter](o, func(v VpcPeeringConnectionAccepter) pulumix.Output[string] { return v.PeerVpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A configuration block that describes [VPC Peering Connection]
// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
func (o VpcPeeringConnectionAccepterOutput) Requester() pulumix.GPtrOutput[VpcPeeringConnectionAccepterRequester, VpcPeeringConnectionAccepterRequesterOutput] {
	value := pulumix.Apply[VpcPeeringConnectionAccepter](o, func(v VpcPeeringConnectionAccepter) pulumix.GPtrOutput[VpcPeeringConnectionAccepterRequester, VpcPeeringConnectionAccepterRequesterOutput] {
		return v.Requester
	})
	unwrapped := pulumix.Flatten[*VpcPeeringConnectionAccepterRequester, pulumix.GPtrOutput[VpcPeeringConnectionAccepterRequester, VpcPeeringConnectionAccepterRequesterOutput]](value)
	return pulumix.GPtrOutput[VpcPeeringConnectionAccepterRequester, VpcPeeringConnectionAccepterRequesterOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VpcPeeringConnectionAccepterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcPeeringConnectionAccepter](o, func(v VpcPeeringConnectionAccepter) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VpcPeeringConnectionAccepterOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcPeeringConnectionAccepter](o, func(v VpcPeeringConnectionAccepter) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of the accepter VPC.
func (o VpcPeeringConnectionAccepterOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[VpcPeeringConnectionAccepter](o, func(v VpcPeeringConnectionAccepter) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The VPC Peering Connection ID to manage.
func (o VpcPeeringConnectionAccepterOutput) VpcPeeringConnectionId() pulumix.Output[string] {
	value := pulumix.Apply[VpcPeeringConnectionAccepter](o, func(v VpcPeeringConnectionAccepter) pulumix.Output[string] { return v.VpcPeeringConnectionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VpcPeeringConnectionAccepterOutput{})
}
