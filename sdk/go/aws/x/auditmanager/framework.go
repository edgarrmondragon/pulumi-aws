// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Audit Manager Framework.
type Framework struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the framework.
	// * `control_sets[*].id` - Unique identifier for the framework control set.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
	ComplianceType pulumix.Output[*string] `pulumi:"complianceType"`
	// Control sets that are associated with the framework. See `controlSets` below.
	//
	// The following arguments are optional:
	ControlSets pulumix.GArrayOutput[FrameworkControlSet, FrameworkControlSetOutput] `pulumi:"controlSets"`
	// Description of the framework.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Framework type, such as a custom framework or a standard framework.
	FrameworkType pulumix.Output[string] `pulumi:"frameworkType"`
	// Name of the framework.
	Name pulumix.Output[string] `pulumi:"name"`
	// A map of tags to assign to the framework. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewFramework registers a new resource with the given unique name, arguments, and options.
func NewFramework(ctx *pulumi.Context,
	name string, args *FrameworkArgs, opts ...pulumi.ResourceOption) (*Framework, error) {
	if args == nil {
		args = &FrameworkArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Framework
	err := ctx.RegisterResource("aws:auditmanager/framework:Framework", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFramework gets an existing Framework resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFramework(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FrameworkState, opts ...pulumi.ResourceOption) (*Framework, error) {
	var resource Framework
	err := ctx.ReadResource("aws:auditmanager/framework:Framework", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Framework resources.
type frameworkState struct {
	// Amazon Resource Name (ARN) of the framework.
	// * `control_sets[*].id` - Unique identifier for the framework control set.
	Arn *string `pulumi:"arn"`
	// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
	ComplianceType *string `pulumi:"complianceType"`
	// Control sets that are associated with the framework. See `controlSets` below.
	//
	// The following arguments are optional:
	ControlSets []FrameworkControlSet `pulumi:"controlSets"`
	// Description of the framework.
	Description *string `pulumi:"description"`
	// Framework type, such as a custom framework or a standard framework.
	FrameworkType *string `pulumi:"frameworkType"`
	// Name of the framework.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the framework. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type FrameworkState struct {
	// Amazon Resource Name (ARN) of the framework.
	// * `control_sets[*].id` - Unique identifier for the framework control set.
	Arn pulumix.Input[*string]
	// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
	ComplianceType pulumix.Input[*string]
	// Control sets that are associated with the framework. See `controlSets` below.
	//
	// The following arguments are optional:
	ControlSets pulumix.Input[[]*FrameworkControlSetArgs]
	// Description of the framework.
	Description pulumix.Input[*string]
	// Framework type, such as a custom framework or a standard framework.
	FrameworkType pulumix.Input[*string]
	// Name of the framework.
	Name pulumix.Input[*string]
	// A map of tags to assign to the framework. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
}

func (FrameworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkState)(nil)).Elem()
}

type frameworkArgs struct {
	// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
	ComplianceType *string `pulumi:"complianceType"`
	// Control sets that are associated with the framework. See `controlSets` below.
	//
	// The following arguments are optional:
	ControlSets []FrameworkControlSet `pulumi:"controlSets"`
	// Description of the framework.
	Description *string `pulumi:"description"`
	// Name of the framework.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the framework. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Framework resource.
type FrameworkArgs struct {
	// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
	ComplianceType pulumix.Input[*string]
	// Control sets that are associated with the framework. See `controlSets` below.
	//
	// The following arguments are optional:
	ControlSets pulumix.Input[[]*FrameworkControlSetArgs]
	// Description of the framework.
	Description pulumix.Input[*string]
	// Name of the framework.
	Name pulumix.Input[*string]
	// A map of tags to assign to the framework. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (FrameworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkArgs)(nil)).Elem()
}

type FrameworkOutput struct{ *pulumi.OutputState }

func (FrameworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Framework)(nil)).Elem()
}

func (o FrameworkOutput) ToFrameworkOutput() FrameworkOutput {
	return o
}

func (o FrameworkOutput) ToFrameworkOutputWithContext(ctx context.Context) FrameworkOutput {
	return o
}

func (o FrameworkOutput) ToOutput(ctx context.Context) pulumix.Output[Framework] {
	return pulumix.Output[Framework]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the framework.
// * `control_sets[*].id` - Unique identifier for the framework control set.
func (o FrameworkOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
func (o FrameworkOutput) ComplianceType() pulumix.Output[*string] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.Output[*string] { return v.ComplianceType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Control sets that are associated with the framework. See `controlSets` below.
//
// The following arguments are optional:
func (o FrameworkOutput) ControlSets() pulumix.GArrayOutput[FrameworkControlSet, FrameworkControlSetOutput] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.GArrayOutput[FrameworkControlSet, FrameworkControlSetOutput] {
		return v.ControlSets
	})
	unwrapped := pulumix.Flatten[[]FrameworkControlSet, pulumix.GArrayOutput[FrameworkControlSet, FrameworkControlSetOutput]](value)
	return pulumix.GArrayOutput[FrameworkControlSet, FrameworkControlSetOutput]{OutputState: unwrapped.OutputState}
}

// Description of the framework.
func (o FrameworkOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Framework type, such as a custom framework or a standard framework.
func (o FrameworkOutput) FrameworkType() pulumix.Output[string] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.Output[string] { return v.FrameworkType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the framework.
func (o FrameworkOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the framework. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FrameworkOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o FrameworkOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(FrameworkOutput{})
}
