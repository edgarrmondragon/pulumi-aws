// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ComputeEnvironmentComputeResources struct {
	// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	AllocationStrategy *string `pulumi:"allocationStrategy"`
	// Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. If you leave this field empty, the default value is 100% of the On-Demand price. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	BidPercentage *int `pulumi:"bidPercentage"`
	// The desired number of EC2 vCPUS in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	DesiredVcpus *int `pulumi:"desiredVcpus"`
	// Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
	Ec2Configurations []ComputeEnvironmentComputeResourcesEc2Configuration `pulumi:"ec2Configurations"`
	// The EC2 key pair that is used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	Ec2KeyPair *string `pulumi:"ec2KeyPair"`
	// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified. (Deprecated, use `ec2Configuration` `imageIdOverride` instead)
	ImageId *string `pulumi:"imageId"`
	// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	InstanceRole *string `pulumi:"instanceRole"`
	// A list of instance types that may be launched. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	InstanceTypes []string `pulumi:"instanceTypes"`
	// The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	LaunchTemplate *ComputeEnvironmentComputeResourcesLaunchTemplate `pulumi:"launchTemplate"`
	// The maximum number of EC2 vCPUs that an environment can reach.
	MaxVcpus int `pulumi:"maxVcpus"`
	// The minimum number of EC2 vCPUs that an environment should maintain. For `EC2` or `SPOT` compute environments, if the parameter is not explicitly defined, a `0` default value will be set. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	MinVcpus *int `pulumi:"minVcpus"`
	// The Amazon EC2 placement group to associate with your compute resources.
	PlacementGroup *string `pulumi:"placementGroup"`
	// A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	SpotIamFleetRole *string `pulumi:"spotIamFleetRole"`
	// A list of VPC subnets into which the compute resources are launched.
	Subnets []string `pulumi:"subnets"`
	// Key-value pair tags to be applied to resources that are launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	Tags map[string]string `pulumi:"tags"`
	// The type of compute environment. Valid items are `EC2`, `SPOT`, `FARGATE` or `FARGATE_SPOT`.
	Type string `pulumi:"type"`
}

type ComputeEnvironmentComputeResourcesArgs struct {
	// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	AllocationStrategy pulumix.Input[*string] `pulumi:"allocationStrategy"`
	// Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. If you leave this field empty, the default value is 100% of the On-Demand price. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	BidPercentage pulumix.Input[*int] `pulumi:"bidPercentage"`
	// The desired number of EC2 vCPUS in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	DesiredVcpus pulumix.Input[*int] `pulumi:"desiredVcpus"`
	// Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
	Ec2Configurations pulumix.Input[[]*ComputeEnvironmentComputeResourcesEc2ConfigurationArgs] `pulumi:"ec2Configurations"`
	// The EC2 key pair that is used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	Ec2KeyPair pulumix.Input[*string] `pulumi:"ec2KeyPair"`
	// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified. (Deprecated, use `ec2Configuration` `imageIdOverride` instead)
	ImageId pulumix.Input[*string] `pulumi:"imageId"`
	// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	InstanceRole pulumix.Input[*string] `pulumi:"instanceRole"`
	// A list of instance types that may be launched. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	InstanceTypes pulumix.Input[[]string] `pulumi:"instanceTypes"`
	// The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	LaunchTemplate pulumix.Input[*ComputeEnvironmentComputeResourcesLaunchTemplateArgs] `pulumi:"launchTemplate"`
	// The maximum number of EC2 vCPUs that an environment can reach.
	MaxVcpus pulumix.Input[int] `pulumi:"maxVcpus"`
	// The minimum number of EC2 vCPUs that an environment should maintain. For `EC2` or `SPOT` compute environments, if the parameter is not explicitly defined, a `0` default value will be set. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	MinVcpus pulumix.Input[*int] `pulumi:"minVcpus"`
	// The Amazon EC2 placement group to associate with your compute resources.
	PlacementGroup pulumix.Input[*string] `pulumi:"placementGroup"`
	// A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	SpotIamFleetRole pulumix.Input[*string] `pulumi:"spotIamFleetRole"`
	// A list of VPC subnets into which the compute resources are launched.
	Subnets pulumix.Input[[]string] `pulumi:"subnets"`
	// Key-value pair tags to be applied to resources that are launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// The type of compute environment. Valid items are `EC2`, `SPOT`, `FARGATE` or `FARGATE_SPOT`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (ComputeEnvironmentComputeResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResources)(nil)).Elem()
}

func (i ComputeEnvironmentComputeResourcesArgs) ToComputeEnvironmentComputeResourcesOutput() ComputeEnvironmentComputeResourcesOutput {
	return i.ToComputeEnvironmentComputeResourcesOutputWithContext(context.Background())
}

func (i ComputeEnvironmentComputeResourcesArgs) ToComputeEnvironmentComputeResourcesOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesOutput)
}

func (i *ComputeEnvironmentComputeResourcesArgs) ToOutput(ctx context.Context) pulumix.Output[*ComputeEnvironmentComputeResourcesArgs] {
	return pulumix.Val(i)
}

type ComputeEnvironmentComputeResourcesOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentComputeResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResources)(nil)).Elem()
}

func (o ComputeEnvironmentComputeResourcesOutput) ToComputeEnvironmentComputeResourcesOutput() ComputeEnvironmentComputeResourcesOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesOutput) ToComputeEnvironmentComputeResourcesOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesOutput) ToOutput(ctx context.Context) pulumix.Output[ComputeEnvironmentComputeResources] {
	return pulumix.Output[ComputeEnvironmentComputeResources]{
		OutputState: o.OutputState,
	}
}

// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) AllocationStrategy() pulumix.Output[*string] {
	return pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) *string { return v.AllocationStrategy })
}

// Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. If you leave this field empty, the default value is 100% of the On-Demand price. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) BidPercentage() pulumix.Output[*int] {
	return pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) *int { return v.BidPercentage })
}

// The desired number of EC2 vCPUS in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) DesiredVcpus() pulumix.Output[*int] {
	return pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) *int { return v.DesiredVcpus })
}

// Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) Ec2Configurations() pulumix.GArrayOutput[ComputeEnvironmentComputeResourcesEc2Configuration, ComputeEnvironmentComputeResourcesEc2ConfigurationOutput] {
	value := pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) []ComputeEnvironmentComputeResourcesEc2Configuration {
		return v.Ec2Configurations
	})
	return pulumix.GArrayOutput[ComputeEnvironmentComputeResourcesEc2Configuration, ComputeEnvironmentComputeResourcesEc2ConfigurationOutput]{OutputState: value.OutputState}
}

// The EC2 key pair that is used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) Ec2KeyPair() pulumix.Output[*string] {
	return pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) *string { return v.Ec2KeyPair })
}

// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified. (Deprecated, use `ec2Configuration` `imageIdOverride` instead)
func (o ComputeEnvironmentComputeResourcesOutput) ImageId() pulumix.Output[*string] {
	return pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) *string { return v.ImageId })
}

// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) InstanceRole() pulumix.Output[*string] {
	return pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) *string { return v.InstanceRole })
}

// A list of instance types that may be launched. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) InstanceTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) []string { return v.InstanceTypes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) LaunchTemplate() pulumix.GPtrOutput[ComputeEnvironmentComputeResourcesLaunchTemplate, ComputeEnvironmentComputeResourcesLaunchTemplateOutput] {
	value := pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) *ComputeEnvironmentComputeResourcesLaunchTemplate {
		return v.LaunchTemplate
	})
	return pulumix.GPtrOutput[ComputeEnvironmentComputeResourcesLaunchTemplate, ComputeEnvironmentComputeResourcesLaunchTemplateOutput]{OutputState: value.OutputState}
}

// The maximum number of EC2 vCPUs that an environment can reach.
func (o ComputeEnvironmentComputeResourcesOutput) MaxVcpus() pulumix.Output[int] {
	return pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) int { return v.MaxVcpus })
}

// The minimum number of EC2 vCPUs that an environment should maintain. For `EC2` or `SPOT` compute environments, if the parameter is not explicitly defined, a `0` default value will be set. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) MinVcpus() pulumix.Output[*int] {
	return pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) *int { return v.MinVcpus })
}

// The Amazon EC2 placement group to associate with your compute resources.
func (o ComputeEnvironmentComputeResourcesOutput) PlacementGroup() pulumix.Output[*string] {
	return pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) *string { return v.PlacementGroup })
}

// A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.
func (o ComputeEnvironmentComputeResourcesOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) SpotIamFleetRole() pulumix.Output[*string] {
	return pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) *string { return v.SpotIamFleetRole })
}

// A list of VPC subnets into which the compute resources are launched.
func (o ComputeEnvironmentComputeResourcesOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) []string { return v.Subnets })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Key-value pair tags to be applied to resources that are launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The type of compute environment. Valid items are `EC2`, `SPOT`, `FARGATE` or `FARGATE_SPOT`.
func (o ComputeEnvironmentComputeResourcesOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ComputeEnvironmentComputeResources](o, func(v ComputeEnvironmentComputeResources) string { return v.Type })
}

type ComputeEnvironmentComputeResourcesEc2Configuration struct {
	// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the `imageId` argument in the `computeResources` block.
	ImageIdOverride *string `pulumi:"imageIdOverride"`
	// The image type to match with the instance type to select an AMI. If the `imageIdOverride` parameter isn't specified, then a recent [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) (`ECS_AL2`) is used.
	ImageType *string `pulumi:"imageType"`
}

type ComputeEnvironmentComputeResourcesEc2ConfigurationArgs struct {
	// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the `imageId` argument in the `computeResources` block.
	ImageIdOverride pulumix.Input[*string] `pulumi:"imageIdOverride"`
	// The image type to match with the instance type to select an AMI. If the `imageIdOverride` parameter isn't specified, then a recent [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) (`ECS_AL2`) is used.
	ImageType pulumix.Input[*string] `pulumi:"imageType"`
}

func (ComputeEnvironmentComputeResourcesEc2ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResourcesEc2Configuration)(nil)).Elem()
}

func (i ComputeEnvironmentComputeResourcesEc2ConfigurationArgs) ToComputeEnvironmentComputeResourcesEc2ConfigurationOutput() ComputeEnvironmentComputeResourcesEc2ConfigurationOutput {
	return i.ToComputeEnvironmentComputeResourcesEc2ConfigurationOutputWithContext(context.Background())
}

func (i ComputeEnvironmentComputeResourcesEc2ConfigurationArgs) ToComputeEnvironmentComputeResourcesEc2ConfigurationOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesEc2ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesEc2ConfigurationOutput)
}

func (i *ComputeEnvironmentComputeResourcesEc2ConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ComputeEnvironmentComputeResourcesEc2ConfigurationArgs] {
	return pulumix.Val(i)
}

type ComputeEnvironmentComputeResourcesEc2ConfigurationOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentComputeResourcesEc2ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResourcesEc2Configuration)(nil)).Elem()
}

func (o ComputeEnvironmentComputeResourcesEc2ConfigurationOutput) ToComputeEnvironmentComputeResourcesEc2ConfigurationOutput() ComputeEnvironmentComputeResourcesEc2ConfigurationOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesEc2ConfigurationOutput) ToComputeEnvironmentComputeResourcesEc2ConfigurationOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesEc2ConfigurationOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesEc2ConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ComputeEnvironmentComputeResourcesEc2Configuration] {
	return pulumix.Output[ComputeEnvironmentComputeResourcesEc2Configuration]{
		OutputState: o.OutputState,
	}
}

// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the `imageId` argument in the `computeResources` block.
func (o ComputeEnvironmentComputeResourcesEc2ConfigurationOutput) ImageIdOverride() pulumix.Output[*string] {
	return pulumix.Apply[ComputeEnvironmentComputeResourcesEc2Configuration](o, func(v ComputeEnvironmentComputeResourcesEc2Configuration) *string { return v.ImageIdOverride })
}

// The image type to match with the instance type to select an AMI. If the `imageIdOverride` parameter isn't specified, then a recent [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) (`ECS_AL2`) is used.
func (o ComputeEnvironmentComputeResourcesEc2ConfigurationOutput) ImageType() pulumix.Output[*string] {
	return pulumix.Apply[ComputeEnvironmentComputeResourcesEc2Configuration](o, func(v ComputeEnvironmentComputeResourcesEc2Configuration) *string { return v.ImageType })
}

type ComputeEnvironmentComputeResourcesLaunchTemplate struct {
	// ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
	LaunchTemplateId *string `pulumi:"launchTemplateId"`
	// Name of the launch template.
	LaunchTemplateName *string `pulumi:"launchTemplateName"`
	// The version number of the launch template. Default: The default version of the launch template.
	Version *string `pulumi:"version"`
}

type ComputeEnvironmentComputeResourcesLaunchTemplateArgs struct {
	// ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
	LaunchTemplateId pulumix.Input[*string] `pulumi:"launchTemplateId"`
	// Name of the launch template.
	LaunchTemplateName pulumix.Input[*string] `pulumi:"launchTemplateName"`
	// The version number of the launch template. Default: The default version of the launch template.
	Version pulumix.Input[*string] `pulumi:"version"`
}

func (ComputeEnvironmentComputeResourcesLaunchTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResourcesLaunchTemplate)(nil)).Elem()
}

func (i ComputeEnvironmentComputeResourcesLaunchTemplateArgs) ToComputeEnvironmentComputeResourcesLaunchTemplateOutput() ComputeEnvironmentComputeResourcesLaunchTemplateOutput {
	return i.ToComputeEnvironmentComputeResourcesLaunchTemplateOutputWithContext(context.Background())
}

func (i ComputeEnvironmentComputeResourcesLaunchTemplateArgs) ToComputeEnvironmentComputeResourcesLaunchTemplateOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesLaunchTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesLaunchTemplateOutput)
}

func (i *ComputeEnvironmentComputeResourcesLaunchTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[*ComputeEnvironmentComputeResourcesLaunchTemplateArgs] {
	return pulumix.Val(i)
}

type ComputeEnvironmentComputeResourcesLaunchTemplateOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentComputeResourcesLaunchTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResourcesLaunchTemplate)(nil)).Elem()
}

func (o ComputeEnvironmentComputeResourcesLaunchTemplateOutput) ToComputeEnvironmentComputeResourcesLaunchTemplateOutput() ComputeEnvironmentComputeResourcesLaunchTemplateOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesLaunchTemplateOutput) ToComputeEnvironmentComputeResourcesLaunchTemplateOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesLaunchTemplateOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesLaunchTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[ComputeEnvironmentComputeResourcesLaunchTemplate] {
	return pulumix.Output[ComputeEnvironmentComputeResourcesLaunchTemplate]{
		OutputState: o.OutputState,
	}
}

// ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
func (o ComputeEnvironmentComputeResourcesLaunchTemplateOutput) LaunchTemplateId() pulumix.Output[*string] {
	return pulumix.Apply[ComputeEnvironmentComputeResourcesLaunchTemplate](o, func(v ComputeEnvironmentComputeResourcesLaunchTemplate) *string { return v.LaunchTemplateId })
}

// Name of the launch template.
func (o ComputeEnvironmentComputeResourcesLaunchTemplateOutput) LaunchTemplateName() pulumix.Output[*string] {
	return pulumix.Apply[ComputeEnvironmentComputeResourcesLaunchTemplate](o, func(v ComputeEnvironmentComputeResourcesLaunchTemplate) *string { return v.LaunchTemplateName })
}

// The version number of the launch template. Default: The default version of the launch template.
func (o ComputeEnvironmentComputeResourcesLaunchTemplateOutput) Version() pulumix.Output[*string] {
	return pulumix.Apply[ComputeEnvironmentComputeResourcesLaunchTemplate](o, func(v ComputeEnvironmentComputeResourcesLaunchTemplate) *string { return v.Version })
}

type ComputeEnvironmentEksConfiguration struct {
	// The Amazon Resource Name (ARN) of the Amazon EKS cluster.
	EksClusterArn string `pulumi:"eksClusterArn"`
	// The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace.
	KubernetesNamespace string `pulumi:"kubernetesNamespace"`
}

type ComputeEnvironmentEksConfigurationArgs struct {
	// The Amazon Resource Name (ARN) of the Amazon EKS cluster.
	EksClusterArn pulumix.Input[string] `pulumi:"eksClusterArn"`
	// The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace.
	KubernetesNamespace pulumix.Input[string] `pulumi:"kubernetesNamespace"`
}

func (ComputeEnvironmentEksConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentEksConfiguration)(nil)).Elem()
}

func (i ComputeEnvironmentEksConfigurationArgs) ToComputeEnvironmentEksConfigurationOutput() ComputeEnvironmentEksConfigurationOutput {
	return i.ToComputeEnvironmentEksConfigurationOutputWithContext(context.Background())
}

func (i ComputeEnvironmentEksConfigurationArgs) ToComputeEnvironmentEksConfigurationOutputWithContext(ctx context.Context) ComputeEnvironmentEksConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentEksConfigurationOutput)
}

func (i *ComputeEnvironmentEksConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ComputeEnvironmentEksConfigurationArgs] {
	return pulumix.Val(i)
}

type ComputeEnvironmentEksConfigurationOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentEksConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentEksConfiguration)(nil)).Elem()
}

func (o ComputeEnvironmentEksConfigurationOutput) ToComputeEnvironmentEksConfigurationOutput() ComputeEnvironmentEksConfigurationOutput {
	return o
}

func (o ComputeEnvironmentEksConfigurationOutput) ToComputeEnvironmentEksConfigurationOutputWithContext(ctx context.Context) ComputeEnvironmentEksConfigurationOutput {
	return o
}

func (o ComputeEnvironmentEksConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ComputeEnvironmentEksConfiguration] {
	return pulumix.Output[ComputeEnvironmentEksConfiguration]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the Amazon EKS cluster.
func (o ComputeEnvironmentEksConfigurationOutput) EksClusterArn() pulumix.Output[string] {
	return pulumix.Apply[ComputeEnvironmentEksConfiguration](o, func(v ComputeEnvironmentEksConfiguration) string { return v.EksClusterArn })
}

// The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace.
func (o ComputeEnvironmentEksConfigurationOutput) KubernetesNamespace() pulumix.Output[string] {
	return pulumix.Apply[ComputeEnvironmentEksConfiguration](o, func(v ComputeEnvironmentEksConfiguration) string { return v.KubernetesNamespace })
}

type JobDefinitionRetryStrategy struct {
	// The number of times to move a job to the `RUNNABLE` status. You may specify between `1` and `10` attempts.
	Attempts *int `pulumi:"attempts"`
	// The evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the `attempts` parameter must also be specified. You may specify up to 5 configuration blocks.
	EvaluateOnExits []JobDefinitionRetryStrategyEvaluateOnExit `pulumi:"evaluateOnExits"`
}

type JobDefinitionRetryStrategyArgs struct {
	// The number of times to move a job to the `RUNNABLE` status. You may specify between `1` and `10` attempts.
	Attempts pulumix.Input[*int] `pulumi:"attempts"`
	// The evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the `attempts` parameter must also be specified. You may specify up to 5 configuration blocks.
	EvaluateOnExits pulumix.Input[[]*JobDefinitionRetryStrategyEvaluateOnExitArgs] `pulumi:"evaluateOnExits"`
}

func (JobDefinitionRetryStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionRetryStrategy)(nil)).Elem()
}

func (i JobDefinitionRetryStrategyArgs) ToJobDefinitionRetryStrategyOutput() JobDefinitionRetryStrategyOutput {
	return i.ToJobDefinitionRetryStrategyOutputWithContext(context.Background())
}

func (i JobDefinitionRetryStrategyArgs) ToJobDefinitionRetryStrategyOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRetryStrategyOutput)
}

func (i *JobDefinitionRetryStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[*JobDefinitionRetryStrategyArgs] {
	return pulumix.Val(i)
}

type JobDefinitionRetryStrategyOutput struct{ *pulumi.OutputState }

func (JobDefinitionRetryStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionRetryStrategy)(nil)).Elem()
}

func (o JobDefinitionRetryStrategyOutput) ToJobDefinitionRetryStrategyOutput() JobDefinitionRetryStrategyOutput {
	return o
}

func (o JobDefinitionRetryStrategyOutput) ToJobDefinitionRetryStrategyOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyOutput {
	return o
}

func (o JobDefinitionRetryStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[JobDefinitionRetryStrategy] {
	return pulumix.Output[JobDefinitionRetryStrategy]{
		OutputState: o.OutputState,
	}
}

// The number of times to move a job to the `RUNNABLE` status. You may specify between `1` and `10` attempts.
func (o JobDefinitionRetryStrategyOutput) Attempts() pulumix.Output[*int] {
	return pulumix.Apply[JobDefinitionRetryStrategy](o, func(v JobDefinitionRetryStrategy) *int { return v.Attempts })
}

// The evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the `attempts` parameter must also be specified. You may specify up to 5 configuration blocks.
func (o JobDefinitionRetryStrategyOutput) EvaluateOnExits() pulumix.GArrayOutput[JobDefinitionRetryStrategyEvaluateOnExit, JobDefinitionRetryStrategyEvaluateOnExitOutput] {
	value := pulumix.Apply[JobDefinitionRetryStrategy](o, func(v JobDefinitionRetryStrategy) []JobDefinitionRetryStrategyEvaluateOnExit {
		return v.EvaluateOnExits
	})
	return pulumix.GArrayOutput[JobDefinitionRetryStrategyEvaluateOnExit, JobDefinitionRetryStrategyEvaluateOnExitOutput]{OutputState: value.OutputState}
}

type JobDefinitionRetryStrategyEvaluateOnExit struct {
	// Specifies the action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: `RETRY`, `EXIT`.
	Action string `pulumi:"action"`
	// A glob pattern to match against the decimal representation of the exit code returned for a job.
	OnExitCode *string `pulumi:"onExitCode"`
	// A glob pattern to match against the reason returned for a job.
	OnReason *string `pulumi:"onReason"`
	// A glob pattern to match against the status reason returned for a job.
	OnStatusReason *string `pulumi:"onStatusReason"`
}

type JobDefinitionRetryStrategyEvaluateOnExitArgs struct {
	// Specifies the action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: `RETRY`, `EXIT`.
	Action pulumix.Input[string] `pulumi:"action"`
	// A glob pattern to match against the decimal representation of the exit code returned for a job.
	OnExitCode pulumix.Input[*string] `pulumi:"onExitCode"`
	// A glob pattern to match against the reason returned for a job.
	OnReason pulumix.Input[*string] `pulumi:"onReason"`
	// A glob pattern to match against the status reason returned for a job.
	OnStatusReason pulumix.Input[*string] `pulumi:"onStatusReason"`
}

func (JobDefinitionRetryStrategyEvaluateOnExitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionRetryStrategyEvaluateOnExit)(nil)).Elem()
}

func (i JobDefinitionRetryStrategyEvaluateOnExitArgs) ToJobDefinitionRetryStrategyEvaluateOnExitOutput() JobDefinitionRetryStrategyEvaluateOnExitOutput {
	return i.ToJobDefinitionRetryStrategyEvaluateOnExitOutputWithContext(context.Background())
}

func (i JobDefinitionRetryStrategyEvaluateOnExitArgs) ToJobDefinitionRetryStrategyEvaluateOnExitOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyEvaluateOnExitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRetryStrategyEvaluateOnExitOutput)
}

func (i *JobDefinitionRetryStrategyEvaluateOnExitArgs) ToOutput(ctx context.Context) pulumix.Output[*JobDefinitionRetryStrategyEvaluateOnExitArgs] {
	return pulumix.Val(i)
}

type JobDefinitionRetryStrategyEvaluateOnExitOutput struct{ *pulumi.OutputState }

func (JobDefinitionRetryStrategyEvaluateOnExitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionRetryStrategyEvaluateOnExit)(nil)).Elem()
}

func (o JobDefinitionRetryStrategyEvaluateOnExitOutput) ToJobDefinitionRetryStrategyEvaluateOnExitOutput() JobDefinitionRetryStrategyEvaluateOnExitOutput {
	return o
}

func (o JobDefinitionRetryStrategyEvaluateOnExitOutput) ToJobDefinitionRetryStrategyEvaluateOnExitOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyEvaluateOnExitOutput {
	return o
}

func (o JobDefinitionRetryStrategyEvaluateOnExitOutput) ToOutput(ctx context.Context) pulumix.Output[JobDefinitionRetryStrategyEvaluateOnExit] {
	return pulumix.Output[JobDefinitionRetryStrategyEvaluateOnExit]{
		OutputState: o.OutputState,
	}
}

// Specifies the action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: `RETRY`, `EXIT`.
func (o JobDefinitionRetryStrategyEvaluateOnExitOutput) Action() pulumix.Output[string] {
	return pulumix.Apply[JobDefinitionRetryStrategyEvaluateOnExit](o, func(v JobDefinitionRetryStrategyEvaluateOnExit) string { return v.Action })
}

// A glob pattern to match against the decimal representation of the exit code returned for a job.
func (o JobDefinitionRetryStrategyEvaluateOnExitOutput) OnExitCode() pulumix.Output[*string] {
	return pulumix.Apply[JobDefinitionRetryStrategyEvaluateOnExit](o, func(v JobDefinitionRetryStrategyEvaluateOnExit) *string { return v.OnExitCode })
}

// A glob pattern to match against the reason returned for a job.
func (o JobDefinitionRetryStrategyEvaluateOnExitOutput) OnReason() pulumix.Output[*string] {
	return pulumix.Apply[JobDefinitionRetryStrategyEvaluateOnExit](o, func(v JobDefinitionRetryStrategyEvaluateOnExit) *string { return v.OnReason })
}

// A glob pattern to match against the status reason returned for a job.
func (o JobDefinitionRetryStrategyEvaluateOnExitOutput) OnStatusReason() pulumix.Output[*string] {
	return pulumix.Apply[JobDefinitionRetryStrategyEvaluateOnExit](o, func(v JobDefinitionRetryStrategyEvaluateOnExit) *string { return v.OnStatusReason })
}

type JobDefinitionTimeout struct {
	// The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60` seconds.
	AttemptDurationSeconds *int `pulumi:"attemptDurationSeconds"`
}

type JobDefinitionTimeoutArgs struct {
	// The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60` seconds.
	AttemptDurationSeconds pulumix.Input[*int] `pulumi:"attemptDurationSeconds"`
}

func (JobDefinitionTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionTimeout)(nil)).Elem()
}

func (i JobDefinitionTimeoutArgs) ToJobDefinitionTimeoutOutput() JobDefinitionTimeoutOutput {
	return i.ToJobDefinitionTimeoutOutputWithContext(context.Background())
}

func (i JobDefinitionTimeoutArgs) ToJobDefinitionTimeoutOutputWithContext(ctx context.Context) JobDefinitionTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionTimeoutOutput)
}

func (i *JobDefinitionTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*JobDefinitionTimeoutArgs] {
	return pulumix.Val(i)
}

type JobDefinitionTimeoutOutput struct{ *pulumi.OutputState }

func (JobDefinitionTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionTimeout)(nil)).Elem()
}

func (o JobDefinitionTimeoutOutput) ToJobDefinitionTimeoutOutput() JobDefinitionTimeoutOutput {
	return o
}

func (o JobDefinitionTimeoutOutput) ToJobDefinitionTimeoutOutputWithContext(ctx context.Context) JobDefinitionTimeoutOutput {
	return o
}

func (o JobDefinitionTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[JobDefinitionTimeout] {
	return pulumix.Output[JobDefinitionTimeout]{
		OutputState: o.OutputState,
	}
}

// The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60` seconds.
func (o JobDefinitionTimeoutOutput) AttemptDurationSeconds() pulumix.Output[*int] {
	return pulumix.Apply[JobDefinitionTimeout](o, func(v JobDefinitionTimeout) *int { return v.AttemptDurationSeconds })
}

type JobQueueTimeouts struct {
	Create *string `pulumi:"create"`
	Delete *string `pulumi:"delete"`
	Update *string `pulumi:"update"`
}

type JobQueueTimeoutsArgs struct {
	Create pulumix.Input[*string] `pulumi:"create"`
	Delete pulumix.Input[*string] `pulumi:"delete"`
	Update pulumix.Input[*string] `pulumi:"update"`
}

func (JobQueueTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueueTimeouts)(nil)).Elem()
}

func (i JobQueueTimeoutsArgs) ToJobQueueTimeoutsOutput() JobQueueTimeoutsOutput {
	return i.ToJobQueueTimeoutsOutputWithContext(context.Background())
}

func (i JobQueueTimeoutsArgs) ToJobQueueTimeoutsOutputWithContext(ctx context.Context) JobQueueTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueueTimeoutsOutput)
}

func (i *JobQueueTimeoutsArgs) ToOutput(ctx context.Context) pulumix.Output[*JobQueueTimeoutsArgs] {
	return pulumix.Val(i)
}

type JobQueueTimeoutsOutput struct{ *pulumi.OutputState }

func (JobQueueTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueueTimeouts)(nil)).Elem()
}

func (o JobQueueTimeoutsOutput) ToJobQueueTimeoutsOutput() JobQueueTimeoutsOutput {
	return o
}

func (o JobQueueTimeoutsOutput) ToJobQueueTimeoutsOutputWithContext(ctx context.Context) JobQueueTimeoutsOutput {
	return o
}

func (o JobQueueTimeoutsOutput) ToOutput(ctx context.Context) pulumix.Output[JobQueueTimeouts] {
	return pulumix.Output[JobQueueTimeouts]{
		OutputState: o.OutputState,
	}
}

func (o JobQueueTimeoutsOutput) Create() pulumix.Output[*string] {
	return pulumix.Apply[JobQueueTimeouts](o, func(v JobQueueTimeouts) *string { return v.Create })
}

func (o JobQueueTimeoutsOutput) Delete() pulumix.Output[*string] {
	return pulumix.Apply[JobQueueTimeouts](o, func(v JobQueueTimeouts) *string { return v.Delete })
}

func (o JobQueueTimeoutsOutput) Update() pulumix.Output[*string] {
	return pulumix.Apply[JobQueueTimeouts](o, func(v JobQueueTimeouts) *string { return v.Update })
}

type SchedulingPolicyFairSharePolicy struct {
	// A value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html).
	ComputeReservation *int `pulumi:"computeReservation"`
	ShareDecaySeconds  *int `pulumi:"shareDecaySeconds"`
	// One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html). The `shareDistribution` block is documented below.
	ShareDistributions []SchedulingPolicyFairSharePolicyShareDistribution `pulumi:"shareDistributions"`
}

type SchedulingPolicyFairSharePolicyArgs struct {
	// A value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html).
	ComputeReservation pulumix.Input[*int] `pulumi:"computeReservation"`
	ShareDecaySeconds  pulumix.Input[*int] `pulumi:"shareDecaySeconds"`
	// One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html). The `shareDistribution` block is documented below.
	ShareDistributions pulumix.Input[[]*SchedulingPolicyFairSharePolicyShareDistributionArgs] `pulumi:"shareDistributions"`
}

func (SchedulingPolicyFairSharePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingPolicyFairSharePolicy)(nil)).Elem()
}

func (i SchedulingPolicyFairSharePolicyArgs) ToSchedulingPolicyFairSharePolicyOutput() SchedulingPolicyFairSharePolicyOutput {
	return i.ToSchedulingPolicyFairSharePolicyOutputWithContext(context.Background())
}

func (i SchedulingPolicyFairSharePolicyArgs) ToSchedulingPolicyFairSharePolicyOutputWithContext(ctx context.Context) SchedulingPolicyFairSharePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicyFairSharePolicyOutput)
}

func (i *SchedulingPolicyFairSharePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*SchedulingPolicyFairSharePolicyArgs] {
	return pulumix.Val(i)
}

type SchedulingPolicyFairSharePolicyOutput struct{ *pulumi.OutputState }

func (SchedulingPolicyFairSharePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingPolicyFairSharePolicy)(nil)).Elem()
}

func (o SchedulingPolicyFairSharePolicyOutput) ToSchedulingPolicyFairSharePolicyOutput() SchedulingPolicyFairSharePolicyOutput {
	return o
}

func (o SchedulingPolicyFairSharePolicyOutput) ToSchedulingPolicyFairSharePolicyOutputWithContext(ctx context.Context) SchedulingPolicyFairSharePolicyOutput {
	return o
}

func (o SchedulingPolicyFairSharePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[SchedulingPolicyFairSharePolicy] {
	return pulumix.Output[SchedulingPolicyFairSharePolicy]{
		OutputState: o.OutputState,
	}
}

// A value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html).
func (o SchedulingPolicyFairSharePolicyOutput) ComputeReservation() pulumix.Output[*int] {
	return pulumix.Apply[SchedulingPolicyFairSharePolicy](o, func(v SchedulingPolicyFairSharePolicy) *int { return v.ComputeReservation })
}

func (o SchedulingPolicyFairSharePolicyOutput) ShareDecaySeconds() pulumix.Output[*int] {
	return pulumix.Apply[SchedulingPolicyFairSharePolicy](o, func(v SchedulingPolicyFairSharePolicy) *int { return v.ShareDecaySeconds })
}

// One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html). The `shareDistribution` block is documented below.
func (o SchedulingPolicyFairSharePolicyOutput) ShareDistributions() pulumix.GArrayOutput[SchedulingPolicyFairSharePolicyShareDistribution, SchedulingPolicyFairSharePolicyShareDistributionOutput] {
	value := pulumix.Apply[SchedulingPolicyFairSharePolicy](o, func(v SchedulingPolicyFairSharePolicy) []SchedulingPolicyFairSharePolicyShareDistribution {
		return v.ShareDistributions
	})
	return pulumix.GArrayOutput[SchedulingPolicyFairSharePolicyShareDistribution, SchedulingPolicyFairSharePolicyShareDistributionOutput]{OutputState: value.OutputState}
}

type SchedulingPolicyFairSharePolicyShareDistribution struct {
	// A fair share identifier or fair share identifier prefix. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	ShareIdentifier string `pulumi:"shareIdentifier"`
	// The weight factor for the fair share identifier. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	WeightFactor *float64 `pulumi:"weightFactor"`
}

type SchedulingPolicyFairSharePolicyShareDistributionArgs struct {
	// A fair share identifier or fair share identifier prefix. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	ShareIdentifier pulumix.Input[string] `pulumi:"shareIdentifier"`
	// The weight factor for the fair share identifier. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	WeightFactor pulumix.Input[*float64] `pulumi:"weightFactor"`
}

func (SchedulingPolicyFairSharePolicyShareDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingPolicyFairSharePolicyShareDistribution)(nil)).Elem()
}

func (i SchedulingPolicyFairSharePolicyShareDistributionArgs) ToSchedulingPolicyFairSharePolicyShareDistributionOutput() SchedulingPolicyFairSharePolicyShareDistributionOutput {
	return i.ToSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(context.Background())
}

func (i SchedulingPolicyFairSharePolicyShareDistributionArgs) ToSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(ctx context.Context) SchedulingPolicyFairSharePolicyShareDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicyFairSharePolicyShareDistributionOutput)
}

func (i *SchedulingPolicyFairSharePolicyShareDistributionArgs) ToOutput(ctx context.Context) pulumix.Output[*SchedulingPolicyFairSharePolicyShareDistributionArgs] {
	return pulumix.Val(i)
}

type SchedulingPolicyFairSharePolicyShareDistributionOutput struct{ *pulumi.OutputState }

func (SchedulingPolicyFairSharePolicyShareDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingPolicyFairSharePolicyShareDistribution)(nil)).Elem()
}

func (o SchedulingPolicyFairSharePolicyShareDistributionOutput) ToSchedulingPolicyFairSharePolicyShareDistributionOutput() SchedulingPolicyFairSharePolicyShareDistributionOutput {
	return o
}

func (o SchedulingPolicyFairSharePolicyShareDistributionOutput) ToSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(ctx context.Context) SchedulingPolicyFairSharePolicyShareDistributionOutput {
	return o
}

func (o SchedulingPolicyFairSharePolicyShareDistributionOutput) ToOutput(ctx context.Context) pulumix.Output[SchedulingPolicyFairSharePolicyShareDistribution] {
	return pulumix.Output[SchedulingPolicyFairSharePolicyShareDistribution]{
		OutputState: o.OutputState,
	}
}

// A fair share identifier or fair share identifier prefix. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
func (o SchedulingPolicyFairSharePolicyShareDistributionOutput) ShareIdentifier() pulumix.Output[string] {
	return pulumix.Apply[SchedulingPolicyFairSharePolicyShareDistribution](o, func(v SchedulingPolicyFairSharePolicyShareDistribution) string { return v.ShareIdentifier })
}

// The weight factor for the fair share identifier. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
func (o SchedulingPolicyFairSharePolicyShareDistributionOutput) WeightFactor() pulumix.Output[*float64] {
	return pulumix.Apply[SchedulingPolicyFairSharePolicyShareDistribution](o, func(v SchedulingPolicyFairSharePolicyShareDistribution) *float64 { return v.WeightFactor })
}

type GetJobQueueComputeEnvironmentOrder struct {
	ComputeEnvironment string `pulumi:"computeEnvironment"`
	Order              int    `pulumi:"order"`
}

type GetJobQueueComputeEnvironmentOrderArgs struct {
	ComputeEnvironment pulumix.Input[string] `pulumi:"computeEnvironment"`
	Order              pulumix.Input[int]    `pulumi:"order"`
}

func (GetJobQueueComputeEnvironmentOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobQueueComputeEnvironmentOrder)(nil)).Elem()
}

func (i GetJobQueueComputeEnvironmentOrderArgs) ToGetJobQueueComputeEnvironmentOrderOutput() GetJobQueueComputeEnvironmentOrderOutput {
	return i.ToGetJobQueueComputeEnvironmentOrderOutputWithContext(context.Background())
}

func (i GetJobQueueComputeEnvironmentOrderArgs) ToGetJobQueueComputeEnvironmentOrderOutputWithContext(ctx context.Context) GetJobQueueComputeEnvironmentOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobQueueComputeEnvironmentOrderOutput)
}

func (i *GetJobQueueComputeEnvironmentOrderArgs) ToOutput(ctx context.Context) pulumix.Output[*GetJobQueueComputeEnvironmentOrderArgs] {
	return pulumix.Val(i)
}

type GetJobQueueComputeEnvironmentOrderOutput struct{ *pulumi.OutputState }

func (GetJobQueueComputeEnvironmentOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobQueueComputeEnvironmentOrder)(nil)).Elem()
}

func (o GetJobQueueComputeEnvironmentOrderOutput) ToGetJobQueueComputeEnvironmentOrderOutput() GetJobQueueComputeEnvironmentOrderOutput {
	return o
}

func (o GetJobQueueComputeEnvironmentOrderOutput) ToGetJobQueueComputeEnvironmentOrderOutputWithContext(ctx context.Context) GetJobQueueComputeEnvironmentOrderOutput {
	return o
}

func (o GetJobQueueComputeEnvironmentOrderOutput) ToOutput(ctx context.Context) pulumix.Output[GetJobQueueComputeEnvironmentOrder] {
	return pulumix.Output[GetJobQueueComputeEnvironmentOrder]{
		OutputState: o.OutputState,
	}
}

func (o GetJobQueueComputeEnvironmentOrderOutput) ComputeEnvironment() pulumix.Output[string] {
	return pulumix.Apply[GetJobQueueComputeEnvironmentOrder](o, func(v GetJobQueueComputeEnvironmentOrder) string { return v.ComputeEnvironment })
}

func (o GetJobQueueComputeEnvironmentOrderOutput) Order() pulumix.Output[int] {
	return pulumix.Apply[GetJobQueueComputeEnvironmentOrder](o, func(v GetJobQueueComputeEnvironmentOrder) int { return v.Order })
}

type GetSchedulingPolicyFairSharePolicy struct {
	// Value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html).
	ComputeReservation int `pulumi:"computeReservation"`
	ShareDecaySeconds  int `pulumi:"shareDecaySeconds"`
	// One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html). The `shareDistribution` block is documented below.
	ShareDistributions []GetSchedulingPolicyFairSharePolicyShareDistribution `pulumi:"shareDistributions"`
}

type GetSchedulingPolicyFairSharePolicyArgs struct {
	// Value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html).
	ComputeReservation pulumix.Input[int] `pulumi:"computeReservation"`
	ShareDecaySeconds  pulumix.Input[int] `pulumi:"shareDecaySeconds"`
	// One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html). The `shareDistribution` block is documented below.
	ShareDistributions pulumix.Input[[]*GetSchedulingPolicyFairSharePolicyShareDistributionArgs] `pulumi:"shareDistributions"`
}

func (GetSchedulingPolicyFairSharePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchedulingPolicyFairSharePolicy)(nil)).Elem()
}

func (i GetSchedulingPolicyFairSharePolicyArgs) ToGetSchedulingPolicyFairSharePolicyOutput() GetSchedulingPolicyFairSharePolicyOutput {
	return i.ToGetSchedulingPolicyFairSharePolicyOutputWithContext(context.Background())
}

func (i GetSchedulingPolicyFairSharePolicyArgs) ToGetSchedulingPolicyFairSharePolicyOutputWithContext(ctx context.Context) GetSchedulingPolicyFairSharePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchedulingPolicyFairSharePolicyOutput)
}

func (i *GetSchedulingPolicyFairSharePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSchedulingPolicyFairSharePolicyArgs] {
	return pulumix.Val(i)
}

type GetSchedulingPolicyFairSharePolicyOutput struct{ *pulumi.OutputState }

func (GetSchedulingPolicyFairSharePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchedulingPolicyFairSharePolicy)(nil)).Elem()
}

func (o GetSchedulingPolicyFairSharePolicyOutput) ToGetSchedulingPolicyFairSharePolicyOutput() GetSchedulingPolicyFairSharePolicyOutput {
	return o
}

func (o GetSchedulingPolicyFairSharePolicyOutput) ToGetSchedulingPolicyFairSharePolicyOutputWithContext(ctx context.Context) GetSchedulingPolicyFairSharePolicyOutput {
	return o
}

func (o GetSchedulingPolicyFairSharePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchedulingPolicyFairSharePolicy] {
	return pulumix.Output[GetSchedulingPolicyFairSharePolicy]{
		OutputState: o.OutputState,
	}
}

// Value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html).
func (o GetSchedulingPolicyFairSharePolicyOutput) ComputeReservation() pulumix.Output[int] {
	return pulumix.Apply[GetSchedulingPolicyFairSharePolicy](o, func(v GetSchedulingPolicyFairSharePolicy) int { return v.ComputeReservation })
}

func (o GetSchedulingPolicyFairSharePolicyOutput) ShareDecaySeconds() pulumix.Output[int] {
	return pulumix.Apply[GetSchedulingPolicyFairSharePolicy](o, func(v GetSchedulingPolicyFairSharePolicy) int { return v.ShareDecaySeconds })
}

// One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html). The `shareDistribution` block is documented below.
func (o GetSchedulingPolicyFairSharePolicyOutput) ShareDistributions() pulumix.GArrayOutput[GetSchedulingPolicyFairSharePolicyShareDistribution, GetSchedulingPolicyFairSharePolicyShareDistributionOutput] {
	value := pulumix.Apply[GetSchedulingPolicyFairSharePolicy](o, func(v GetSchedulingPolicyFairSharePolicy) []GetSchedulingPolicyFairSharePolicyShareDistribution {
		return v.ShareDistributions
	})
	return pulumix.GArrayOutput[GetSchedulingPolicyFairSharePolicyShareDistribution, GetSchedulingPolicyFairSharePolicyShareDistributionOutput]{OutputState: value.OutputState}
}

type GetSchedulingPolicyFairSharePolicyShareDistribution struct {
	// Fair share identifier or fair share identifier prefix. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	ShareIdentifier string `pulumi:"shareIdentifier"`
	// Weight factor for the fair share identifier. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	WeightFactor float64 `pulumi:"weightFactor"`
}

type GetSchedulingPolicyFairSharePolicyShareDistributionArgs struct {
	// Fair share identifier or fair share identifier prefix. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	ShareIdentifier pulumix.Input[string] `pulumi:"shareIdentifier"`
	// Weight factor for the fair share identifier. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	WeightFactor pulumix.Input[float64] `pulumi:"weightFactor"`
}

func (GetSchedulingPolicyFairSharePolicyShareDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchedulingPolicyFairSharePolicyShareDistribution)(nil)).Elem()
}

func (i GetSchedulingPolicyFairSharePolicyShareDistributionArgs) ToGetSchedulingPolicyFairSharePolicyShareDistributionOutput() GetSchedulingPolicyFairSharePolicyShareDistributionOutput {
	return i.ToGetSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(context.Background())
}

func (i GetSchedulingPolicyFairSharePolicyShareDistributionArgs) ToGetSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(ctx context.Context) GetSchedulingPolicyFairSharePolicyShareDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchedulingPolicyFairSharePolicyShareDistributionOutput)
}

func (i *GetSchedulingPolicyFairSharePolicyShareDistributionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSchedulingPolicyFairSharePolicyShareDistributionArgs] {
	return pulumix.Val(i)
}

type GetSchedulingPolicyFairSharePolicyShareDistributionOutput struct{ *pulumi.OutputState }

func (GetSchedulingPolicyFairSharePolicyShareDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchedulingPolicyFairSharePolicyShareDistribution)(nil)).Elem()
}

func (o GetSchedulingPolicyFairSharePolicyShareDistributionOutput) ToGetSchedulingPolicyFairSharePolicyShareDistributionOutput() GetSchedulingPolicyFairSharePolicyShareDistributionOutput {
	return o
}

func (o GetSchedulingPolicyFairSharePolicyShareDistributionOutput) ToGetSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(ctx context.Context) GetSchedulingPolicyFairSharePolicyShareDistributionOutput {
	return o
}

func (o GetSchedulingPolicyFairSharePolicyShareDistributionOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchedulingPolicyFairSharePolicyShareDistribution] {
	return pulumix.Output[GetSchedulingPolicyFairSharePolicyShareDistribution]{
		OutputState: o.OutputState,
	}
}

// Fair share identifier or fair share identifier prefix. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
func (o GetSchedulingPolicyFairSharePolicyShareDistributionOutput) ShareIdentifier() pulumix.Output[string] {
	return pulumix.Apply[GetSchedulingPolicyFairSharePolicyShareDistribution](o, func(v GetSchedulingPolicyFairSharePolicyShareDistribution) string { return v.ShareIdentifier })
}

// Weight factor for the fair share identifier. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
func (o GetSchedulingPolicyFairSharePolicyShareDistributionOutput) WeightFactor() pulumix.Output[float64] {
	return pulumix.Apply[GetSchedulingPolicyFairSharePolicyShareDistribution](o, func(v GetSchedulingPolicyFairSharePolicyShareDistribution) float64 { return v.WeightFactor })
}

func init() {
	pulumi.RegisterOutputType(ComputeEnvironmentComputeResourcesOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentComputeResourcesEc2ConfigurationOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentComputeResourcesLaunchTemplateOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentEksConfigurationOutput{})
	pulumi.RegisterOutputType(JobDefinitionRetryStrategyOutput{})
	pulumi.RegisterOutputType(JobDefinitionRetryStrategyEvaluateOnExitOutput{})
	pulumi.RegisterOutputType(JobDefinitionTimeoutOutput{})
	pulumi.RegisterOutputType(JobQueueTimeoutsOutput{})
	pulumi.RegisterOutputType(SchedulingPolicyFairSharePolicyOutput{})
	pulumi.RegisterOutputType(SchedulingPolicyFairSharePolicyShareDistributionOutput{})
	pulumi.RegisterOutputType(GetJobQueueComputeEnvironmentOrderOutput{})
	pulumi.RegisterOutputType(GetSchedulingPolicyFairSharePolicyOutput{})
	pulumi.RegisterOutputType(GetSchedulingPolicyFairSharePolicyShareDistributionOutput{})
}
