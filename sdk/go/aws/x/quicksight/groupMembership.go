// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing QuickSight Group Membership
type GroupMembership struct {
	pulumi.CustomResourceState

	Arn pulumix.Output[string] `pulumi:"arn"`
	// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId pulumix.Output[string] `pulumi:"awsAccountId"`
	// The name of the group in which the member will be added.
	GroupName pulumix.Output[string] `pulumi:"groupName"`
	// The name of the member to add to the group.
	MemberName pulumix.Output[string] `pulumi:"memberName"`
	// The namespace that you want the user to be a part of. Defaults to `default`.
	Namespace pulumix.Output[*string] `pulumi:"namespace"`
}

// NewGroupMembership registers a new resource with the given unique name, arguments, and options.
func NewGroupMembership(ctx *pulumi.Context,
	name string, args *GroupMembershipArgs, opts ...pulumi.ResourceOption) (*GroupMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.MemberName == nil {
		return nil, errors.New("invalid value for required argument 'MemberName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupMembership
	err := ctx.RegisterResource("aws:quicksight/groupMembership:GroupMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupMembership gets an existing GroupMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupMembershipState, opts ...pulumi.ResourceOption) (*GroupMembership, error) {
	var resource GroupMembership
	err := ctx.ReadResource("aws:quicksight/groupMembership:GroupMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupMembership resources.
type groupMembershipState struct {
	Arn *string `pulumi:"arn"`
	// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// The name of the group in which the member will be added.
	GroupName *string `pulumi:"groupName"`
	// The name of the member to add to the group.
	MemberName *string `pulumi:"memberName"`
	// The namespace that you want the user to be a part of. Defaults to `default`.
	Namespace *string `pulumi:"namespace"`
}

type GroupMembershipState struct {
	Arn pulumix.Input[*string]
	// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId pulumix.Input[*string]
	// The name of the group in which the member will be added.
	GroupName pulumix.Input[*string]
	// The name of the member to add to the group.
	MemberName pulumix.Input[*string]
	// The namespace that you want the user to be a part of. Defaults to `default`.
	Namespace pulumix.Input[*string]
}

func (GroupMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMembershipState)(nil)).Elem()
}

type groupMembershipArgs struct {
	// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// The name of the group in which the member will be added.
	GroupName string `pulumi:"groupName"`
	// The name of the member to add to the group.
	MemberName string `pulumi:"memberName"`
	// The namespace that you want the user to be a part of. Defaults to `default`.
	Namespace *string `pulumi:"namespace"`
}

// The set of arguments for constructing a GroupMembership resource.
type GroupMembershipArgs struct {
	// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId pulumix.Input[*string]
	// The name of the group in which the member will be added.
	GroupName pulumix.Input[string]
	// The name of the member to add to the group.
	MemberName pulumix.Input[string]
	// The namespace that you want the user to be a part of. Defaults to `default`.
	Namespace pulumix.Input[*string]
}

func (GroupMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMembershipArgs)(nil)).Elem()
}

type GroupMembershipOutput struct{ *pulumi.OutputState }

func (GroupMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembership)(nil)).Elem()
}

func (o GroupMembershipOutput) ToGroupMembershipOutput() GroupMembershipOutput {
	return o
}

func (o GroupMembershipOutput) ToGroupMembershipOutputWithContext(ctx context.Context) GroupMembershipOutput {
	return o
}

func (o GroupMembershipOutput) ToOutput(ctx context.Context) pulumix.Output[GroupMembership] {
	return pulumix.Output[GroupMembership]{
		OutputState: o.OutputState,
	}
}

func (o GroupMembershipOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[GroupMembership](o, func(v GroupMembership) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
func (o GroupMembershipOutput) AwsAccountId() pulumix.Output[string] {
	value := pulumix.Apply[GroupMembership](o, func(v GroupMembership) pulumix.Output[string] { return v.AwsAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the group in which the member will be added.
func (o GroupMembershipOutput) GroupName() pulumix.Output[string] {
	value := pulumix.Apply[GroupMembership](o, func(v GroupMembership) pulumix.Output[string] { return v.GroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the member to add to the group.
func (o GroupMembershipOutput) MemberName() pulumix.Output[string] {
	value := pulumix.Apply[GroupMembership](o, func(v GroupMembership) pulumix.Output[string] { return v.MemberName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The namespace that you want the user to be a part of. Defaults to `default`.
func (o GroupMembershipOutput) Namespace() pulumix.Output[*string] {
	value := pulumix.Apply[GroupMembership](o, func(v GroupMembership) pulumix.Output[*string] { return v.Namespace })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(GroupMembershipOutput{})
}
