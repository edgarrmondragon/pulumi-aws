// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Backup vault notifications resource.
type VaultNotifications struct {
	pulumi.CustomResourceState

	// The ARN of the vault.
	BackupVaultArn pulumix.Output[string] `pulumi:"backupVaultArn"`
	// An array of events that indicate the status of jobs to back up resources to the backup vault.
	BackupVaultEvents pulumix.ArrayOutput[string] `pulumi:"backupVaultEvents"`
	// Name of the backup vault to add notifications for.
	BackupVaultName pulumix.Output[string] `pulumi:"backupVaultName"`
	// The Amazon Resource Name (ARN) that specifies the topic for a backup vault’s events
	SnsTopicArn pulumix.Output[string] `pulumi:"snsTopicArn"`
}

// NewVaultNotifications registers a new resource with the given unique name, arguments, and options.
func NewVaultNotifications(ctx *pulumi.Context,
	name string, args *VaultNotificationsArgs, opts ...pulumi.ResourceOption) (*VaultNotifications, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupVaultEvents == nil {
		return nil, errors.New("invalid value for required argument 'BackupVaultEvents'")
	}
	if args.BackupVaultName == nil {
		return nil, errors.New("invalid value for required argument 'BackupVaultName'")
	}
	if args.SnsTopicArn == nil {
		return nil, errors.New("invalid value for required argument 'SnsTopicArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VaultNotifications
	err := ctx.RegisterResource("aws:backup/vaultNotifications:VaultNotifications", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVaultNotifications gets an existing VaultNotifications resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVaultNotifications(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VaultNotificationsState, opts ...pulumi.ResourceOption) (*VaultNotifications, error) {
	var resource VaultNotifications
	err := ctx.ReadResource("aws:backup/vaultNotifications:VaultNotifications", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VaultNotifications resources.
type vaultNotificationsState struct {
	// The ARN of the vault.
	BackupVaultArn *string `pulumi:"backupVaultArn"`
	// An array of events that indicate the status of jobs to back up resources to the backup vault.
	BackupVaultEvents []string `pulumi:"backupVaultEvents"`
	// Name of the backup vault to add notifications for.
	BackupVaultName *string `pulumi:"backupVaultName"`
	// The Amazon Resource Name (ARN) that specifies the topic for a backup vault’s events
	SnsTopicArn *string `pulumi:"snsTopicArn"`
}

type VaultNotificationsState struct {
	// The ARN of the vault.
	BackupVaultArn pulumix.Input[*string]
	// An array of events that indicate the status of jobs to back up resources to the backup vault.
	BackupVaultEvents pulumix.Input[[]string]
	// Name of the backup vault to add notifications for.
	BackupVaultName pulumix.Input[*string]
	// The Amazon Resource Name (ARN) that specifies the topic for a backup vault’s events
	SnsTopicArn pulumix.Input[*string]
}

func (VaultNotificationsState) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultNotificationsState)(nil)).Elem()
}

type vaultNotificationsArgs struct {
	// An array of events that indicate the status of jobs to back up resources to the backup vault.
	BackupVaultEvents []string `pulumi:"backupVaultEvents"`
	// Name of the backup vault to add notifications for.
	BackupVaultName string `pulumi:"backupVaultName"`
	// The Amazon Resource Name (ARN) that specifies the topic for a backup vault’s events
	SnsTopicArn string `pulumi:"snsTopicArn"`
}

// The set of arguments for constructing a VaultNotifications resource.
type VaultNotificationsArgs struct {
	// An array of events that indicate the status of jobs to back up resources to the backup vault.
	BackupVaultEvents pulumix.Input[[]string]
	// Name of the backup vault to add notifications for.
	BackupVaultName pulumix.Input[string]
	// The Amazon Resource Name (ARN) that specifies the topic for a backup vault’s events
	SnsTopicArn pulumix.Input[string]
}

func (VaultNotificationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultNotificationsArgs)(nil)).Elem()
}

type VaultNotificationsOutput struct{ *pulumi.OutputState }

func (VaultNotificationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultNotifications)(nil)).Elem()
}

func (o VaultNotificationsOutput) ToVaultNotificationsOutput() VaultNotificationsOutput {
	return o
}

func (o VaultNotificationsOutput) ToVaultNotificationsOutputWithContext(ctx context.Context) VaultNotificationsOutput {
	return o
}

func (o VaultNotificationsOutput) ToOutput(ctx context.Context) pulumix.Output[VaultNotifications] {
	return pulumix.Output[VaultNotifications]{
		OutputState: o.OutputState,
	}
}

// The ARN of the vault.
func (o VaultNotificationsOutput) BackupVaultArn() pulumix.Output[string] {
	value := pulumix.Apply[VaultNotifications](o, func(v VaultNotifications) pulumix.Output[string] { return v.BackupVaultArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An array of events that indicate the status of jobs to back up resources to the backup vault.
func (o VaultNotificationsOutput) BackupVaultEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VaultNotifications](o, func(v VaultNotifications) pulumix.ArrayOutput[string] { return v.BackupVaultEvents })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Name of the backup vault to add notifications for.
func (o VaultNotificationsOutput) BackupVaultName() pulumix.Output[string] {
	value := pulumix.Apply[VaultNotifications](o, func(v VaultNotifications) pulumix.Output[string] { return v.BackupVaultName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) that specifies the topic for a backup vault’s events
func (o VaultNotificationsOutput) SnsTopicArn() pulumix.Output[string] {
	value := pulumix.Apply[VaultNotifications](o, func(v VaultNotifications) pulumix.Output[string] { return v.SnsTopicArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VaultNotificationsOutput{})
}
