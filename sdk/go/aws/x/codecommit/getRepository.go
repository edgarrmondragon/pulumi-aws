// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codecommit

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The CodeCommit Repository data source allows the ARN, Repository ID, Repository URL for HTTP and Repository URL for SSH to be retrieved for an CodeCommit repository.
func LookupRepository(ctx *pulumi.Context, args *LookupRepositoryArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRepositoryResult
	err := ctx.Invoke("aws:codecommit/getRepository:getRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepository.
type LookupRepositoryArgs struct {
	// Name for the repository. This needs to be less than 100 characters.
	RepositoryName string `pulumi:"repositoryName"`
}

// A collection of values returned by getRepository.
type LookupRepositoryResult struct {
	// ARN of the repository
	Arn string `pulumi:"arn"`
	// URL to use for cloning the repository over HTTPS.
	CloneUrlHttp string `pulumi:"cloneUrlHttp"`
	// URL to use for cloning the repository over SSH.
	CloneUrlSsh string `pulumi:"cloneUrlSsh"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ID of the repository
	RepositoryId   string `pulumi:"repositoryId"`
	RepositoryName string `pulumi:"repositoryName"`
}

func LookupRepositoryOutput(ctx *pulumi.Context, args LookupRepositoryOutputArgs, opts ...pulumi.InvokeOption) LookupRepositoryResultOutput {
	outputResult := pulumix.ApplyErr[*LookupRepositoryArgs](args.ToOutput(), func(plainArgs *LookupRepositoryArgs) (*LookupRepositoryResult, error) {
		return LookupRepository(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupRepositoryResultOutput, *LookupRepositoryResult](outputResult)
}

// A collection of arguments for invoking getRepository.
type LookupRepositoryOutputArgs struct {
	// Name for the repository. This needs to be less than 100 characters.
	RepositoryName pulumix.Input[string] `pulumi:"repositoryName"`
}

func (args LookupRepositoryOutputArgs) ToOutput() pulumix.Output[*LookupRepositoryArgs] {
	allArgs := pulumix.All(
		args.RepositoryName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupRepositoryArgs {
		return &LookupRepositoryArgs{
			RepositoryName: resolvedArgs[0].(string),
		}
	})
}

type LookupRepositoryResultOutput struct{ *pulumi.OutputState }

func (LookupRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryResult)(nil)).Elem()
}

func (o LookupRepositoryResultOutput) ToOutput(context.Context) pulumix.Output[*LookupRepositoryResult] {
	return pulumix.Output[*LookupRepositoryResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupRepositoryResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) string { return v.Arn })
}

func (o LookupRepositoryResultOutput) CloneUrlHttp() pulumix.Output[string] {
	return pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) string { return v.CloneUrlHttp })
}

func (o LookupRepositoryResultOutput) CloneUrlSsh() pulumix.Output[string] {
	return pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) string { return v.CloneUrlSsh })
}

func (o LookupRepositoryResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) string { return v.Id })
}

func (o LookupRepositoryResultOutput) RepositoryId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) string { return v.RepositoryId })
}

func (o LookupRepositoryResultOutput) RepositoryName() pulumix.Output[string] {
	return pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) string { return v.RepositoryName })
}
