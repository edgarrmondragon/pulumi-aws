// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Kinesis Video Stream resource. Amazon Kinesis Video Streams makes it easy to securely stream video from connected devices to AWS for analytics, machine learning (ML), playback, and other processing.
//
// For more details, see the [Amazon Kinesis Documentation](https://aws.amazon.com/documentation/kinesis/).
type VideoStream struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) specifying the Stream (same as `id`)
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A time stamp that indicates when the stream was created.
	CreationTime pulumix.Output[string] `pulumi:"creationTime"`
	// The number of hours that you want to retain the data in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. The default value is `0`, indicating that the stream does not persist data.
	DataRetentionInHours pulumix.Output[*int] `pulumi:"dataRetentionInHours"`
	// The name of the device that is writing to the stream. **In the current implementation, Kinesis Video Streams does not use this name.**
	DeviceName pulumix.Output[*string] `pulumi:"deviceName"`
	// The ID of the AWS Key Management Service (AWS KMS) key that you want Kinesis Video Streams to use to encrypt stream data. If no key ID is specified, the default, Kinesis Video-managed key (`aws/kinesisvideo`) is used.
	KmsKeyId pulumix.Output[string] `pulumi:"kmsKeyId"`
	// The media type of the stream. Consumers of the stream can use this information when processing the stream. For more information about media types, see [Media Types](http://www.iana.org/assignments/media-types/media-types.xhtml). If you choose to specify the MediaType, see [Naming Requirements](https://tools.ietf.org/html/rfc6838#section-4.2) for guidelines.
	MediaType pulumix.Output[*string] `pulumi:"mediaType"`
	// A name to identify the stream. This is unique to the
	// AWS account and region the Stream is created in.
	Name pulumix.Output[string] `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The version of the stream.
	Version pulumix.Output[string] `pulumi:"version"`
}

// NewVideoStream registers a new resource with the given unique name, arguments, and options.
func NewVideoStream(ctx *pulumi.Context,
	name string, args *VideoStreamArgs, opts ...pulumi.ResourceOption) (*VideoStream, error) {
	if args == nil {
		args = &VideoStreamArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VideoStream
	err := ctx.RegisterResource("aws:kinesis/videoStream:VideoStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVideoStream gets an existing VideoStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVideoStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VideoStreamState, opts ...pulumi.ResourceOption) (*VideoStream, error) {
	var resource VideoStream
	err := ctx.ReadResource("aws:kinesis/videoStream:VideoStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VideoStream resources.
type videoStreamState struct {
	// The Amazon Resource Name (ARN) specifying the Stream (same as `id`)
	Arn *string `pulumi:"arn"`
	// A time stamp that indicates when the stream was created.
	CreationTime *string `pulumi:"creationTime"`
	// The number of hours that you want to retain the data in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. The default value is `0`, indicating that the stream does not persist data.
	DataRetentionInHours *int `pulumi:"dataRetentionInHours"`
	// The name of the device that is writing to the stream. **In the current implementation, Kinesis Video Streams does not use this name.**
	DeviceName *string `pulumi:"deviceName"`
	// The ID of the AWS Key Management Service (AWS KMS) key that you want Kinesis Video Streams to use to encrypt stream data. If no key ID is specified, the default, Kinesis Video-managed key (`aws/kinesisvideo`) is used.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The media type of the stream. Consumers of the stream can use this information when processing the stream. For more information about media types, see [Media Types](http://www.iana.org/assignments/media-types/media-types.xhtml). If you choose to specify the MediaType, see [Naming Requirements](https://tools.ietf.org/html/rfc6838#section-4.2) for guidelines.
	MediaType *string `pulumi:"mediaType"`
	// A name to identify the stream. This is unique to the
	// AWS account and region the Stream is created in.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The version of the stream.
	Version *string `pulumi:"version"`
}

type VideoStreamState struct {
	// The Amazon Resource Name (ARN) specifying the Stream (same as `id`)
	Arn pulumix.Input[*string]
	// A time stamp that indicates when the stream was created.
	CreationTime pulumix.Input[*string]
	// The number of hours that you want to retain the data in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. The default value is `0`, indicating that the stream does not persist data.
	DataRetentionInHours pulumix.Input[*int]
	// The name of the device that is writing to the stream. **In the current implementation, Kinesis Video Streams does not use this name.**
	DeviceName pulumix.Input[*string]
	// The ID of the AWS Key Management Service (AWS KMS) key that you want Kinesis Video Streams to use to encrypt stream data. If no key ID is specified, the default, Kinesis Video-managed key (`aws/kinesisvideo`) is used.
	KmsKeyId pulumix.Input[*string]
	// The media type of the stream. Consumers of the stream can use this information when processing the stream. For more information about media types, see [Media Types](http://www.iana.org/assignments/media-types/media-types.xhtml). If you choose to specify the MediaType, see [Naming Requirements](https://tools.ietf.org/html/rfc6838#section-4.2) for guidelines.
	MediaType pulumix.Input[*string]
	// A name to identify the stream. This is unique to the
	// AWS account and region the Stream is created in.
	Name pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The version of the stream.
	Version pulumix.Input[*string]
}

func (VideoStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*videoStreamState)(nil)).Elem()
}

type videoStreamArgs struct {
	// The number of hours that you want to retain the data in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. The default value is `0`, indicating that the stream does not persist data.
	DataRetentionInHours *int `pulumi:"dataRetentionInHours"`
	// The name of the device that is writing to the stream. **In the current implementation, Kinesis Video Streams does not use this name.**
	DeviceName *string `pulumi:"deviceName"`
	// The ID of the AWS Key Management Service (AWS KMS) key that you want Kinesis Video Streams to use to encrypt stream data. If no key ID is specified, the default, Kinesis Video-managed key (`aws/kinesisvideo`) is used.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The media type of the stream. Consumers of the stream can use this information when processing the stream. For more information about media types, see [Media Types](http://www.iana.org/assignments/media-types/media-types.xhtml). If you choose to specify the MediaType, see [Naming Requirements](https://tools.ietf.org/html/rfc6838#section-4.2) for guidelines.
	MediaType *string `pulumi:"mediaType"`
	// A name to identify the stream. This is unique to the
	// AWS account and region the Stream is created in.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a VideoStream resource.
type VideoStreamArgs struct {
	// The number of hours that you want to retain the data in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. The default value is `0`, indicating that the stream does not persist data.
	DataRetentionInHours pulumix.Input[*int]
	// The name of the device that is writing to the stream. **In the current implementation, Kinesis Video Streams does not use this name.**
	DeviceName pulumix.Input[*string]
	// The ID of the AWS Key Management Service (AWS KMS) key that you want Kinesis Video Streams to use to encrypt stream data. If no key ID is specified, the default, Kinesis Video-managed key (`aws/kinesisvideo`) is used.
	KmsKeyId pulumix.Input[*string]
	// The media type of the stream. Consumers of the stream can use this information when processing the stream. For more information about media types, see [Media Types](http://www.iana.org/assignments/media-types/media-types.xhtml). If you choose to specify the MediaType, see [Naming Requirements](https://tools.ietf.org/html/rfc6838#section-4.2) for guidelines.
	MediaType pulumix.Input[*string]
	// A name to identify the stream. This is unique to the
	// AWS account and region the Stream is created in.
	Name pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (VideoStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*videoStreamArgs)(nil)).Elem()
}

type VideoStreamOutput struct{ *pulumi.OutputState }

func (VideoStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoStream)(nil)).Elem()
}

func (o VideoStreamOutput) ToVideoStreamOutput() VideoStreamOutput {
	return o
}

func (o VideoStreamOutput) ToVideoStreamOutputWithContext(ctx context.Context) VideoStreamOutput {
	return o
}

func (o VideoStreamOutput) ToOutput(ctx context.Context) pulumix.Output[VideoStream] {
	return pulumix.Output[VideoStream]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) specifying the Stream (same as `id`)
func (o VideoStreamOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[VideoStream](o, func(v VideoStream) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A time stamp that indicates when the stream was created.
func (o VideoStreamOutput) CreationTime() pulumix.Output[string] {
	value := pulumix.Apply[VideoStream](o, func(v VideoStream) pulumix.Output[string] { return v.CreationTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The number of hours that you want to retain the data in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. The default value is `0`, indicating that the stream does not persist data.
func (o VideoStreamOutput) DataRetentionInHours() pulumix.Output[*int] {
	value := pulumix.Apply[VideoStream](o, func(v VideoStream) pulumix.Output[*int] { return v.DataRetentionInHours })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The name of the device that is writing to the stream. **In the current implementation, Kinesis Video Streams does not use this name.**
func (o VideoStreamOutput) DeviceName() pulumix.Output[*string] {
	value := pulumix.Apply[VideoStream](o, func(v VideoStream) pulumix.Output[*string] { return v.DeviceName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the AWS Key Management Service (AWS KMS) key that you want Kinesis Video Streams to use to encrypt stream data. If no key ID is specified, the default, Kinesis Video-managed key (`aws/kinesisvideo`) is used.
func (o VideoStreamOutput) KmsKeyId() pulumix.Output[string] {
	value := pulumix.Apply[VideoStream](o, func(v VideoStream) pulumix.Output[string] { return v.KmsKeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The media type of the stream. Consumers of the stream can use this information when processing the stream. For more information about media types, see [Media Types](http://www.iana.org/assignments/media-types/media-types.xhtml). If you choose to specify the MediaType, see [Naming Requirements](https://tools.ietf.org/html/rfc6838#section-4.2) for guidelines.
func (o VideoStreamOutput) MediaType() pulumix.Output[*string] {
	value := pulumix.Apply[VideoStream](o, func(v VideoStream) pulumix.Output[*string] { return v.MediaType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A name to identify the stream. This is unique to the
// AWS account and region the Stream is created in.
func (o VideoStreamOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[VideoStream](o, func(v VideoStream) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VideoStreamOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VideoStream](o, func(v VideoStream) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VideoStreamOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VideoStream](o, func(v VideoStream) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The version of the stream.
func (o VideoStreamOutput) Version() pulumix.Output[string] {
	value := pulumix.Apply[VideoStream](o, func(v VideoStream) pulumix.Output[string] { return v.Version })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VideoStreamOutput{})
}
