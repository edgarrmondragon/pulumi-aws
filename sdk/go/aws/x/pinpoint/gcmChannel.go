// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Pinpoint GCM Channel resource.
type GcmChannel struct {
	pulumi.CustomResourceState

	// Platform credential API key from Google.
	ApiKey pulumix.Output[string] `pulumi:"apiKey"`
	// The application ID.
	ApplicationId pulumix.Output[string] `pulumi:"applicationId"`
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
}

// NewGcmChannel registers a new resource with the given unique name, arguments, and options.
func NewGcmChannel(ctx *pulumi.Context,
	name string, args *GcmChannelArgs, opts ...pulumi.ResourceOption) (*GcmChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiKey == nil {
		return nil, errors.New("invalid value for required argument 'ApiKey'")
	}
	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.ApiKey != nil {
		untypedSecretValue := pulumi.ToSecret(args.ApiKey.ToOutput(ctx.Context()).Untyped())
		args.ApiKey = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GcmChannel
	err := ctx.RegisterResource("aws:pinpoint/gcmChannel:GcmChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcmChannel gets an existing GcmChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcmChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcmChannelState, opts ...pulumi.ResourceOption) (*GcmChannel, error) {
	var resource GcmChannel
	err := ctx.ReadResource("aws:pinpoint/gcmChannel:GcmChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcmChannel resources.
type gcmChannelState struct {
	// Platform credential API key from Google.
	ApiKey *string `pulumi:"apiKey"`
	// The application ID.
	ApplicationId *string `pulumi:"applicationId"`
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
}

type GcmChannelState struct {
	// Platform credential API key from Google.
	ApiKey pulumix.Input[*string]
	// The application ID.
	ApplicationId pulumix.Input[*string]
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled pulumix.Input[*bool]
}

func (GcmChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcmChannelState)(nil)).Elem()
}

type gcmChannelArgs struct {
	// Platform credential API key from Google.
	ApiKey string `pulumi:"apiKey"`
	// The application ID.
	ApplicationId string `pulumi:"applicationId"`
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
}

// The set of arguments for constructing a GcmChannel resource.
type GcmChannelArgs struct {
	// Platform credential API key from Google.
	ApiKey pulumix.Input[string]
	// The application ID.
	ApplicationId pulumix.Input[string]
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled pulumix.Input[*bool]
}

func (GcmChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcmChannelArgs)(nil)).Elem()
}

type GcmChannelOutput struct{ *pulumi.OutputState }

func (GcmChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcmChannel)(nil)).Elem()
}

func (o GcmChannelOutput) ToGcmChannelOutput() GcmChannelOutput {
	return o
}

func (o GcmChannelOutput) ToGcmChannelOutputWithContext(ctx context.Context) GcmChannelOutput {
	return o
}

func (o GcmChannelOutput) ToOutput(ctx context.Context) pulumix.Output[GcmChannel] {
	return pulumix.Output[GcmChannel]{
		OutputState: o.OutputState,
	}
}

// Platform credential API key from Google.
func (o GcmChannelOutput) ApiKey() pulumix.Output[string] {
	value := pulumix.Apply[GcmChannel](o, func(v GcmChannel) pulumix.Output[string] { return v.ApiKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The application ID.
func (o GcmChannelOutput) ApplicationId() pulumix.Output[string] {
	value := pulumix.Apply[GcmChannel](o, func(v GcmChannel) pulumix.Output[string] { return v.ApplicationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether the channel is enabled or disabled. Defaults to `true`.
func (o GcmChannelOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[GcmChannel](o, func(v GcmChannel) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(GcmChannelOutput{})
}
