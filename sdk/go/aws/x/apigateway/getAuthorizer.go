// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific API Gateway Authorizer.
func LookupAuthorizer(ctx *pulumi.Context, args *LookupAuthorizerArgs, opts ...pulumi.InvokeOption) (*LookupAuthorizerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAuthorizerResult
	err := ctx.Invoke("aws:apigateway/getAuthorizer:getAuthorizer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAuthorizer.
type LookupAuthorizerArgs struct {
	// Authorizer identifier.
	AuthorizerId string `pulumi:"authorizerId"`
	// ID of the associated REST API.
	RestApiId string `pulumi:"restApiId"`
}

// A collection of values returned by getAuthorizer.
type LookupAuthorizerResult struct {
	// ARN of the API Gateway Authorizer.
	Arn string `pulumi:"arn"`
	// Credentials required for the authorizer.
	AuthorizerCredentials string `pulumi:"authorizerCredentials"`
	AuthorizerId          string `pulumi:"authorizerId"`
	// TTL of cached authorizer results in seconds.
	AuthorizerResultTtlInSeconds int `pulumi:"authorizerResultTtlInSeconds"`
	// Authorizer's Uniform Resource Identifier (URI).
	AuthorizerUri string `pulumi:"authorizerUri"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Source of the identity in an incoming request.
	IdentitySource string `pulumi:"identitySource"`
	// Validation expression for the incoming identity.
	IdentityValidationExpression string `pulumi:"identityValidationExpression"`
	// Name of the authorizer.
	Name string `pulumi:"name"`
	// List of the Amazon Cognito user pool ARNs.
	ProviderArns []string `pulumi:"providerArns"`
	RestApiId    string   `pulumi:"restApiId"`
	// Type of the authorizer.
	Type string `pulumi:"type"`
}

func LookupAuthorizerOutput(ctx *pulumi.Context, args LookupAuthorizerOutputArgs, opts ...pulumi.InvokeOption) LookupAuthorizerResultOutput {
	outputResult := pulumix.ApplyErr[*LookupAuthorizerArgs](args.ToOutput(), func(plainArgs *LookupAuthorizerArgs) (*LookupAuthorizerResult, error) {
		return LookupAuthorizer(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupAuthorizerResultOutput, *LookupAuthorizerResult](outputResult)
}

// A collection of arguments for invoking getAuthorizer.
type LookupAuthorizerOutputArgs struct {
	// Authorizer identifier.
	AuthorizerId pulumix.Input[string] `pulumi:"authorizerId"`
	// ID of the associated REST API.
	RestApiId pulumix.Input[string] `pulumi:"restApiId"`
}

func (args LookupAuthorizerOutputArgs) ToOutput() pulumix.Output[*LookupAuthorizerArgs] {
	allArgs := pulumix.All(
		args.AuthorizerId.ToOutput(context.Background()).AsAny(),
		args.RestApiId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupAuthorizerArgs {
		return &LookupAuthorizerArgs{
			AuthorizerId: resolvedArgs[0].(string),
			RestApiId:    resolvedArgs[1].(string),
		}
	})
}

type LookupAuthorizerResultOutput struct{ *pulumi.OutputState }

func (LookupAuthorizerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthorizerResult)(nil)).Elem()
}

func (o LookupAuthorizerResultOutput) ToOutput(context.Context) pulumix.Output[*LookupAuthorizerResult] {
	return pulumix.Output[*LookupAuthorizerResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupAuthorizerResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupAuthorizerResult](o, func(v *LookupAuthorizerResult) string { return v.Arn })
}

func (o LookupAuthorizerResultOutput) AuthorizerCredentials() pulumix.Output[string] {
	return pulumix.Apply[*LookupAuthorizerResult](o, func(v *LookupAuthorizerResult) string { return v.AuthorizerCredentials })
}

func (o LookupAuthorizerResultOutput) AuthorizerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupAuthorizerResult](o, func(v *LookupAuthorizerResult) string { return v.AuthorizerId })
}

func (o LookupAuthorizerResultOutput) AuthorizerResultTtlInSeconds() pulumix.Output[int] {
	return pulumix.Apply[*LookupAuthorizerResult](o, func(v *LookupAuthorizerResult) int { return v.AuthorizerResultTtlInSeconds })
}

func (o LookupAuthorizerResultOutput) AuthorizerUri() pulumix.Output[string] {
	return pulumix.Apply[*LookupAuthorizerResult](o, func(v *LookupAuthorizerResult) string { return v.AuthorizerUri })
}

func (o LookupAuthorizerResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupAuthorizerResult](o, func(v *LookupAuthorizerResult) string { return v.Id })
}

func (o LookupAuthorizerResultOutput) IdentitySource() pulumix.Output[string] {
	return pulumix.Apply[*LookupAuthorizerResult](o, func(v *LookupAuthorizerResult) string { return v.IdentitySource })
}

func (o LookupAuthorizerResultOutput) IdentityValidationExpression() pulumix.Output[string] {
	return pulumix.Apply[*LookupAuthorizerResult](o, func(v *LookupAuthorizerResult) string { return v.IdentityValidationExpression })
}

func (o LookupAuthorizerResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupAuthorizerResult](o, func(v *LookupAuthorizerResult) string { return v.Name })
}

func (o LookupAuthorizerResultOutput) ProviderArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupAuthorizerResult](o, func(v *LookupAuthorizerResult) []string { return v.ProviderArns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupAuthorizerResultOutput) RestApiId() pulumix.Output[string] {
	return pulumix.Apply[*LookupAuthorizerResult](o, func(v *LookupAuthorizerResult) string { return v.RestApiId })
}

func (o LookupAuthorizerResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupAuthorizerResult](o, func(v *LookupAuthorizerResult) string { return v.Type })
}
