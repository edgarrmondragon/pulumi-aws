// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage a VPC peering connection.
//
// > **NOTE on VPC Peering Connections and VPC Peering Connection Options:** This provider provides
// both a standalone VPC Peering Connection Options and a VPC Peering Connection
// resource with `accepter` and `requester` attributes. Do not manage options for the same VPC peering
// connection in both a VPC Peering Connection resource and a VPC Peering Connection Options resource.
// Doing so will cause a conflict of options and will overwrite the options.
// Using a VPC Peering Connection Options resource decouples management of the connection options from
// management of the VPC Peering Connection and allows options to be set correctly in cross-account scenarios.
//
// > **Note:** For cross-account (requester's AWS account differs from the accepter's AWS account) or inter-region
// VPC Peering Connections use the `ec2.VpcPeeringConnection` resource to manage the requester's side of the
// connection and use the `ec2.VpcPeeringConnectionAccepter` resource to manage the accepter's side of the connection.
//
// > **Note:** Creating multiple `ec2.VpcPeeringConnection` resources with the same `peerVpcId` and `vpcId` will not produce an error. Instead, AWS will return the connection `id` that already exists, resulting in multiple `ec2.VpcPeeringConnection` resources with the same `id`.
type VpcPeeringConnection struct {
	pulumi.CustomResourceState

	// The status of the VPC Peering Connection request.
	AcceptStatus pulumix.Output[string] `pulumi:"acceptStatus"`
	// An optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
	// the peering connection (a maximum of one).
	Accepter pulumix.GPtrOutput[VpcPeeringConnectionAccepterType, VpcPeeringConnectionAccepterTypeOutput] `pulumi:"accepter"`
	// Accept the peering (both VPCs need to be in the same AWS account and region).
	AutoAccept pulumix.Output[*bool] `pulumi:"autoAccept"`
	// The AWS account ID of the owner of the peer VPC.
	// Defaults to the account ID the AWS provider is currently connected to.
	PeerOwnerId pulumix.Output[string] `pulumi:"peerOwnerId"`
	// The region of the accepter VPC of the VPC Peering Connection. `autoAccept` must be `false`,
	// and use the `ec2.VpcPeeringConnectionAccepter` to manage the accepter side.
	PeerRegion pulumix.Output[string] `pulumi:"peerRegion"`
	// The ID of the VPC with which you are creating the VPC Peering Connection.
	PeerVpcId pulumix.Output[string] `pulumi:"peerVpcId"`
	// A optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
	// the peering connection (a maximum of one).
	Requester pulumix.GPtrOutput[VpcPeeringConnectionRequester, VpcPeeringConnectionRequesterOutput] `pulumi:"requester"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The ID of the requester VPC.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewVpcPeeringConnection registers a new resource with the given unique name, arguments, and options.
func NewVpcPeeringConnection(ctx *pulumi.Context,
	name string, args *VpcPeeringConnectionArgs, opts ...pulumi.ResourceOption) (*VpcPeeringConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PeerVpcId == nil {
		return nil, errors.New("invalid value for required argument 'PeerVpcId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcPeeringConnection
	err := ctx.RegisterResource("aws:ec2/vpcPeeringConnection:VpcPeeringConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcPeeringConnection gets an existing VpcPeeringConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcPeeringConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcPeeringConnectionState, opts ...pulumi.ResourceOption) (*VpcPeeringConnection, error) {
	var resource VpcPeeringConnection
	err := ctx.ReadResource("aws:ec2/vpcPeeringConnection:VpcPeeringConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcPeeringConnection resources.
type vpcPeeringConnectionState struct {
	// The status of the VPC Peering Connection request.
	AcceptStatus *string `pulumi:"acceptStatus"`
	// An optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
	// the peering connection (a maximum of one).
	Accepter *VpcPeeringConnectionAccepterType `pulumi:"accepter"`
	// Accept the peering (both VPCs need to be in the same AWS account and region).
	AutoAccept *bool `pulumi:"autoAccept"`
	// The AWS account ID of the owner of the peer VPC.
	// Defaults to the account ID the AWS provider is currently connected to.
	PeerOwnerId *string `pulumi:"peerOwnerId"`
	// The region of the accepter VPC of the VPC Peering Connection. `autoAccept` must be `false`,
	// and use the `ec2.VpcPeeringConnectionAccepter` to manage the accepter side.
	PeerRegion *string `pulumi:"peerRegion"`
	// The ID of the VPC with which you are creating the VPC Peering Connection.
	PeerVpcId *string `pulumi:"peerVpcId"`
	// A optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
	// the peering connection (a maximum of one).
	Requester *VpcPeeringConnectionRequester `pulumi:"requester"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ID of the requester VPC.
	VpcId *string `pulumi:"vpcId"`
}

type VpcPeeringConnectionState struct {
	// The status of the VPC Peering Connection request.
	AcceptStatus pulumix.Input[*string]
	// An optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
	// the peering connection (a maximum of one).
	Accepter pulumix.Input[*VpcPeeringConnectionAccepterTypeArgs]
	// Accept the peering (both VPCs need to be in the same AWS account and region).
	AutoAccept pulumix.Input[*bool]
	// The AWS account ID of the owner of the peer VPC.
	// Defaults to the account ID the AWS provider is currently connected to.
	PeerOwnerId pulumix.Input[*string]
	// The region of the accepter VPC of the VPC Peering Connection. `autoAccept` must be `false`,
	// and use the `ec2.VpcPeeringConnectionAccepter` to manage the accepter side.
	PeerRegion pulumix.Input[*string]
	// The ID of the VPC with which you are creating the VPC Peering Connection.
	PeerVpcId pulumix.Input[*string]
	// A optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
	// the peering connection (a maximum of one).
	Requester pulumix.Input[*VpcPeeringConnectionRequesterArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The ID of the requester VPC.
	VpcId pulumix.Input[*string]
}

func (VpcPeeringConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionState)(nil)).Elem()
}

type vpcPeeringConnectionArgs struct {
	// An optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
	// the peering connection (a maximum of one).
	Accepter *VpcPeeringConnectionAccepterType `pulumi:"accepter"`
	// Accept the peering (both VPCs need to be in the same AWS account and region).
	AutoAccept *bool `pulumi:"autoAccept"`
	// The AWS account ID of the owner of the peer VPC.
	// Defaults to the account ID the AWS provider is currently connected to.
	PeerOwnerId *string `pulumi:"peerOwnerId"`
	// The region of the accepter VPC of the VPC Peering Connection. `autoAccept` must be `false`,
	// and use the `ec2.VpcPeeringConnectionAccepter` to manage the accepter side.
	PeerRegion *string `pulumi:"peerRegion"`
	// The ID of the VPC with which you are creating the VPC Peering Connection.
	PeerVpcId string `pulumi:"peerVpcId"`
	// A optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
	// the peering connection (a maximum of one).
	Requester *VpcPeeringConnectionRequester `pulumi:"requester"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the requester VPC.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcPeeringConnection resource.
type VpcPeeringConnectionArgs struct {
	// An optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
	// the peering connection (a maximum of one).
	Accepter pulumix.Input[*VpcPeeringConnectionAccepterTypeArgs]
	// Accept the peering (both VPCs need to be in the same AWS account and region).
	AutoAccept pulumix.Input[*bool]
	// The AWS account ID of the owner of the peer VPC.
	// Defaults to the account ID the AWS provider is currently connected to.
	PeerOwnerId pulumix.Input[*string]
	// The region of the accepter VPC of the VPC Peering Connection. `autoAccept` must be `false`,
	// and use the `ec2.VpcPeeringConnectionAccepter` to manage the accepter side.
	PeerRegion pulumix.Input[*string]
	// The ID of the VPC with which you are creating the VPC Peering Connection.
	PeerVpcId pulumix.Input[string]
	// A optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
	// the peering connection (a maximum of one).
	Requester pulumix.Input[*VpcPeeringConnectionRequesterArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The ID of the requester VPC.
	VpcId pulumix.Input[string]
}

func (VpcPeeringConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionArgs)(nil)).Elem()
}

type VpcPeeringConnectionOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConnection)(nil)).Elem()
}

func (o VpcPeeringConnectionOutput) ToVpcPeeringConnectionOutput() VpcPeeringConnectionOutput {
	return o
}

func (o VpcPeeringConnectionOutput) ToVpcPeeringConnectionOutputWithContext(ctx context.Context) VpcPeeringConnectionOutput {
	return o
}

func (o VpcPeeringConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[VpcPeeringConnection] {
	return pulumix.Output[VpcPeeringConnection]{
		OutputState: o.OutputState,
	}
}

// The status of the VPC Peering Connection request.
func (o VpcPeeringConnectionOutput) AcceptStatus() pulumix.Output[string] {
	value := pulumix.Apply[VpcPeeringConnection](o, func(v VpcPeeringConnection) pulumix.Output[string] { return v.AcceptStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
// the peering connection (a maximum of one).
func (o VpcPeeringConnectionOutput) Accepter() pulumix.GPtrOutput[VpcPeeringConnectionAccepterType, VpcPeeringConnectionAccepterTypeOutput] {
	value := pulumix.Apply[VpcPeeringConnection](o, func(v VpcPeeringConnection) pulumix.GPtrOutput[VpcPeeringConnectionAccepterType, VpcPeeringConnectionAccepterTypeOutput] {
		return v.Accepter
	})
	unwrapped := pulumix.Flatten[*VpcPeeringConnectionAccepterType, pulumix.GPtrOutput[VpcPeeringConnectionAccepterType, VpcPeeringConnectionAccepterTypeOutput]](value)
	return pulumix.GPtrOutput[VpcPeeringConnectionAccepterType, VpcPeeringConnectionAccepterTypeOutput]{OutputState: unwrapped.OutputState}
}

// Accept the peering (both VPCs need to be in the same AWS account and region).
func (o VpcPeeringConnectionOutput) AutoAccept() pulumix.Output[*bool] {
	value := pulumix.Apply[VpcPeeringConnection](o, func(v VpcPeeringConnection) pulumix.Output[*bool] { return v.AutoAccept })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The AWS account ID of the owner of the peer VPC.
// Defaults to the account ID the AWS provider is currently connected to.
func (o VpcPeeringConnectionOutput) PeerOwnerId() pulumix.Output[string] {
	value := pulumix.Apply[VpcPeeringConnection](o, func(v VpcPeeringConnection) pulumix.Output[string] { return v.PeerOwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The region of the accepter VPC of the VPC Peering Connection. `autoAccept` must be `false`,
// and use the `ec2.VpcPeeringConnectionAccepter` to manage the accepter side.
func (o VpcPeeringConnectionOutput) PeerRegion() pulumix.Output[string] {
	value := pulumix.Apply[VpcPeeringConnection](o, func(v VpcPeeringConnection) pulumix.Output[string] { return v.PeerRegion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the VPC with which you are creating the VPC Peering Connection.
func (o VpcPeeringConnectionOutput) PeerVpcId() pulumix.Output[string] {
	value := pulumix.Apply[VpcPeeringConnection](o, func(v VpcPeeringConnection) pulumix.Output[string] { return v.PeerVpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
// the peering connection (a maximum of one).
func (o VpcPeeringConnectionOutput) Requester() pulumix.GPtrOutput[VpcPeeringConnectionRequester, VpcPeeringConnectionRequesterOutput] {
	value := pulumix.Apply[VpcPeeringConnection](o, func(v VpcPeeringConnection) pulumix.GPtrOutput[VpcPeeringConnectionRequester, VpcPeeringConnectionRequesterOutput] {
		return v.Requester
	})
	unwrapped := pulumix.Flatten[*VpcPeeringConnectionRequester, pulumix.GPtrOutput[VpcPeeringConnectionRequester, VpcPeeringConnectionRequesterOutput]](value)
	return pulumix.GPtrOutput[VpcPeeringConnectionRequester, VpcPeeringConnectionRequesterOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VpcPeeringConnectionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcPeeringConnection](o, func(v VpcPeeringConnection) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VpcPeeringConnectionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcPeeringConnection](o, func(v VpcPeeringConnection) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of the requester VPC.
func (o VpcPeeringConnectionOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[VpcPeeringConnection](o, func(v VpcPeeringConnection) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VpcPeeringConnectionOutput{})
}
