// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for retrieving a value from an AWS DynamoDB table.
func LookupTableItem(ctx *pulumi.Context, args *LookupTableItemArgs, opts ...pulumi.InvokeOption) (*LookupTableItemResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTableItemResult
	err := ctx.Invoke("aws:dynamodb/getTableItem:getTableItem", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTableItem.
type LookupTableItemArgs struct {
	ExpressionAttributeNames map[string]string `pulumi:"expressionAttributeNames"`
	// A map of attribute names to AttributeValue objects, representing the primary key of the item to retrieve.
	// For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
	//
	// The following arguments are optional:
	Key string `pulumi:"key"`
	// A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.
	// If no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result.
	ProjectionExpression *string `pulumi:"projectionExpression"`
	// The name of the table containing the requested item.
	TableName string `pulumi:"tableName"`
}

// A collection of values returned by getTableItem.
type LookupTableItemResult struct {
	ExpressionAttributeNames map[string]string `pulumi:"expressionAttributeNames"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// JSON representation of a map of attribute names to [AttributeValue](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_AttributeValue.html) objects, as specified by ProjectionExpression.
	Item                 string  `pulumi:"item"`
	Key                  string  `pulumi:"key"`
	ProjectionExpression *string `pulumi:"projectionExpression"`
	TableName            string  `pulumi:"tableName"`
}

func LookupTableItemOutput(ctx *pulumi.Context, args LookupTableItemOutputArgs, opts ...pulumi.InvokeOption) LookupTableItemResultOutput {
	outputResult := pulumix.ApplyErr[*LookupTableItemArgs](args.ToOutput(), func(plainArgs *LookupTableItemArgs) (*LookupTableItemResult, error) {
		return LookupTableItem(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupTableItemResultOutput, *LookupTableItemResult](outputResult)
}

// A collection of arguments for invoking getTableItem.
type LookupTableItemOutputArgs struct {
	ExpressionAttributeNames pulumix.Input[map[string]string] `pulumi:"expressionAttributeNames"`
	// A map of attribute names to AttributeValue objects, representing the primary key of the item to retrieve.
	// For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
	//
	// The following arguments are optional:
	Key pulumix.Input[string] `pulumi:"key"`
	// A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.
	// If no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result.
	ProjectionExpression pulumix.Input[*string] `pulumi:"projectionExpression"`
	// The name of the table containing the requested item.
	TableName pulumix.Input[string] `pulumi:"tableName"`
}

func (args LookupTableItemOutputArgs) ToOutput() pulumix.Output[*LookupTableItemArgs] {
	allArgs := pulumix.All(
		args.ExpressionAttributeNames.ToOutput(context.Background()).AsAny(),
		args.Key.ToOutput(context.Background()).AsAny(),
		args.ProjectionExpression.ToOutput(context.Background()).AsAny(),
		args.TableName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupTableItemArgs {
		return &LookupTableItemArgs{
			ExpressionAttributeNames: resolvedArgs[0].(map[string]string),
			Key:                      resolvedArgs[1].(string),
			ProjectionExpression:     resolvedArgs[2].(*string),
			TableName:                resolvedArgs[3].(string),
		}
	})
}

type LookupTableItemResultOutput struct{ *pulumi.OutputState }

func (LookupTableItemResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTableItemResult)(nil)).Elem()
}

func (o LookupTableItemResultOutput) ToOutput(context.Context) pulumix.Output[*LookupTableItemResult] {
	return pulumix.Output[*LookupTableItemResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupTableItemResultOutput) ExpressionAttributeNames() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupTableItemResult](o, func(v *LookupTableItemResult) map[string]string { return v.ExpressionAttributeNames })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupTableItemResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupTableItemResult](o, func(v *LookupTableItemResult) string { return v.Id })
}

func (o LookupTableItemResultOutput) Item() pulumix.Output[string] {
	return pulumix.Apply[*LookupTableItemResult](o, func(v *LookupTableItemResult) string { return v.Item })
}

func (o LookupTableItemResultOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[*LookupTableItemResult](o, func(v *LookupTableItemResult) string { return v.Key })
}

func (o LookupTableItemResultOutput) ProjectionExpression() pulumix.Output[*string] {
	return pulumix.Apply[*LookupTableItemResult](o, func(v *LookupTableItemResult) *string { return v.ProjectionExpression })
}

func (o LookupTableItemResultOutput) TableName() pulumix.Output[string] {
	return pulumix.Apply[*LookupTableItemResult](o, func(v *LookupTableItemResult) string { return v.TableName })
}
