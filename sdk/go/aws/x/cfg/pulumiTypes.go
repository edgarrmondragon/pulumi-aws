// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ConfigurationAggregatorAccountAggregationSource struct {
	// List of 12-digit account IDs of the account(s) being aggregated.
	AccountIds []string `pulumi:"accountIds"`
	// If true, aggregate existing AWS Config regions and future regions.
	AllRegions *bool `pulumi:"allRegions"`
	// List of source regions being aggregated.
	//
	// Either `regions` or `allRegions` (as true) must be specified.
	Regions []string `pulumi:"regions"`
}

type ConfigurationAggregatorAccountAggregationSourceArgs struct {
	// List of 12-digit account IDs of the account(s) being aggregated.
	AccountIds pulumix.Input[[]string] `pulumi:"accountIds"`
	// If true, aggregate existing AWS Config regions and future regions.
	AllRegions pulumix.Input[*bool] `pulumi:"allRegions"`
	// List of source regions being aggregated.
	//
	// Either `regions` or `allRegions` (as true) must be specified.
	Regions pulumix.Input[[]string] `pulumi:"regions"`
}

func (ConfigurationAggregatorAccountAggregationSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAggregatorAccountAggregationSource)(nil)).Elem()
}

func (i ConfigurationAggregatorAccountAggregationSourceArgs) ToConfigurationAggregatorAccountAggregationSourceOutput() ConfigurationAggregatorAccountAggregationSourceOutput {
	return i.ToConfigurationAggregatorAccountAggregationSourceOutputWithContext(context.Background())
}

func (i ConfigurationAggregatorAccountAggregationSourceArgs) ToConfigurationAggregatorAccountAggregationSourceOutputWithContext(ctx context.Context) ConfigurationAggregatorAccountAggregationSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAggregatorAccountAggregationSourceOutput)
}

func (i *ConfigurationAggregatorAccountAggregationSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*ConfigurationAggregatorAccountAggregationSourceArgs] {
	return pulumix.Val(i)
}

type ConfigurationAggregatorAccountAggregationSourceOutput struct{ *pulumi.OutputState }

func (ConfigurationAggregatorAccountAggregationSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAggregatorAccountAggregationSource)(nil)).Elem()
}

func (o ConfigurationAggregatorAccountAggregationSourceOutput) ToConfigurationAggregatorAccountAggregationSourceOutput() ConfigurationAggregatorAccountAggregationSourceOutput {
	return o
}

func (o ConfigurationAggregatorAccountAggregationSourceOutput) ToConfigurationAggregatorAccountAggregationSourceOutputWithContext(ctx context.Context) ConfigurationAggregatorAccountAggregationSourceOutput {
	return o
}

func (o ConfigurationAggregatorAccountAggregationSourceOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigurationAggregatorAccountAggregationSource] {
	return pulumix.Output[ConfigurationAggregatorAccountAggregationSource]{
		OutputState: o.OutputState,
	}
}

// List of 12-digit account IDs of the account(s) being aggregated.
func (o ConfigurationAggregatorAccountAggregationSourceOutput) AccountIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ConfigurationAggregatorAccountAggregationSource](o, func(v ConfigurationAggregatorAccountAggregationSource) []string { return v.AccountIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// If true, aggregate existing AWS Config regions and future regions.
func (o ConfigurationAggregatorAccountAggregationSourceOutput) AllRegions() pulumix.Output[*bool] {
	return pulumix.Apply[ConfigurationAggregatorAccountAggregationSource](o, func(v ConfigurationAggregatorAccountAggregationSource) *bool { return v.AllRegions })
}

// List of source regions being aggregated.
//
// Either `regions` or `allRegions` (as true) must be specified.
func (o ConfigurationAggregatorAccountAggregationSourceOutput) Regions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ConfigurationAggregatorAccountAggregationSource](o, func(v ConfigurationAggregatorAccountAggregationSource) []string { return v.Regions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ConfigurationAggregatorOrganizationAggregationSource struct {
	// If true, aggregate existing AWS Config regions and future regions.
	AllRegions *bool `pulumi:"allRegions"`
	// List of source regions being aggregated.
	Regions []string `pulumi:"regions"`
	// ARN of the IAM role used to retrieve AWS Organization details associated with the aggregator account.
	//
	// Either `regions` or `allRegions` (as true) must be specified.
	RoleArn string `pulumi:"roleArn"`
}

type ConfigurationAggregatorOrganizationAggregationSourceArgs struct {
	// If true, aggregate existing AWS Config regions and future regions.
	AllRegions pulumix.Input[*bool] `pulumi:"allRegions"`
	// List of source regions being aggregated.
	Regions pulumix.Input[[]string] `pulumi:"regions"`
	// ARN of the IAM role used to retrieve AWS Organization details associated with the aggregator account.
	//
	// Either `regions` or `allRegions` (as true) must be specified.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (ConfigurationAggregatorOrganizationAggregationSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAggregatorOrganizationAggregationSource)(nil)).Elem()
}

func (i ConfigurationAggregatorOrganizationAggregationSourceArgs) ToConfigurationAggregatorOrganizationAggregationSourceOutput() ConfigurationAggregatorOrganizationAggregationSourceOutput {
	return i.ToConfigurationAggregatorOrganizationAggregationSourceOutputWithContext(context.Background())
}

func (i ConfigurationAggregatorOrganizationAggregationSourceArgs) ToConfigurationAggregatorOrganizationAggregationSourceOutputWithContext(ctx context.Context) ConfigurationAggregatorOrganizationAggregationSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAggregatorOrganizationAggregationSourceOutput)
}

func (i *ConfigurationAggregatorOrganizationAggregationSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*ConfigurationAggregatorOrganizationAggregationSourceArgs] {
	return pulumix.Val(i)
}

type ConfigurationAggregatorOrganizationAggregationSourceOutput struct{ *pulumi.OutputState }

func (ConfigurationAggregatorOrganizationAggregationSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAggregatorOrganizationAggregationSource)(nil)).Elem()
}

func (o ConfigurationAggregatorOrganizationAggregationSourceOutput) ToConfigurationAggregatorOrganizationAggregationSourceOutput() ConfigurationAggregatorOrganizationAggregationSourceOutput {
	return o
}

func (o ConfigurationAggregatorOrganizationAggregationSourceOutput) ToConfigurationAggregatorOrganizationAggregationSourceOutputWithContext(ctx context.Context) ConfigurationAggregatorOrganizationAggregationSourceOutput {
	return o
}

func (o ConfigurationAggregatorOrganizationAggregationSourceOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigurationAggregatorOrganizationAggregationSource] {
	return pulumix.Output[ConfigurationAggregatorOrganizationAggregationSource]{
		OutputState: o.OutputState,
	}
}

// If true, aggregate existing AWS Config regions and future regions.
func (o ConfigurationAggregatorOrganizationAggregationSourceOutput) AllRegions() pulumix.Output[*bool] {
	return pulumix.Apply[ConfigurationAggregatorOrganizationAggregationSource](o, func(v ConfigurationAggregatorOrganizationAggregationSource) *bool { return v.AllRegions })
}

// List of source regions being aggregated.
func (o ConfigurationAggregatorOrganizationAggregationSourceOutput) Regions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ConfigurationAggregatorOrganizationAggregationSource](o, func(v ConfigurationAggregatorOrganizationAggregationSource) []string { return v.Regions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ARN of the IAM role used to retrieve AWS Organization details associated with the aggregator account.
//
// Either `regions` or `allRegions` (as true) must be specified.
func (o ConfigurationAggregatorOrganizationAggregationSourceOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[ConfigurationAggregatorOrganizationAggregationSource](o, func(v ConfigurationAggregatorOrganizationAggregationSource) string { return v.RoleArn })
}

type ConformancePackInputParameter struct {
	// The input key.
	ParameterName string `pulumi:"parameterName"`
	// The input value.
	ParameterValue string `pulumi:"parameterValue"`
}

type ConformancePackInputParameterArgs struct {
	// The input key.
	ParameterName pulumix.Input[string] `pulumi:"parameterName"`
	// The input value.
	ParameterValue pulumix.Input[string] `pulumi:"parameterValue"`
}

func (ConformancePackInputParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConformancePackInputParameter)(nil)).Elem()
}

func (i ConformancePackInputParameterArgs) ToConformancePackInputParameterOutput() ConformancePackInputParameterOutput {
	return i.ToConformancePackInputParameterOutputWithContext(context.Background())
}

func (i ConformancePackInputParameterArgs) ToConformancePackInputParameterOutputWithContext(ctx context.Context) ConformancePackInputParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConformancePackInputParameterOutput)
}

func (i *ConformancePackInputParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*ConformancePackInputParameterArgs] {
	return pulumix.Val(i)
}

type ConformancePackInputParameterOutput struct{ *pulumi.OutputState }

func (ConformancePackInputParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConformancePackInputParameter)(nil)).Elem()
}

func (o ConformancePackInputParameterOutput) ToConformancePackInputParameterOutput() ConformancePackInputParameterOutput {
	return o
}

func (o ConformancePackInputParameterOutput) ToConformancePackInputParameterOutputWithContext(ctx context.Context) ConformancePackInputParameterOutput {
	return o
}

func (o ConformancePackInputParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ConformancePackInputParameter] {
	return pulumix.Output[ConformancePackInputParameter]{
		OutputState: o.OutputState,
	}
}

// The input key.
func (o ConformancePackInputParameterOutput) ParameterName() pulumix.Output[string] {
	return pulumix.Apply[ConformancePackInputParameter](o, func(v ConformancePackInputParameter) string { return v.ParameterName })
}

// The input value.
func (o ConformancePackInputParameterOutput) ParameterValue() pulumix.Output[string] {
	return pulumix.Apply[ConformancePackInputParameter](o, func(v ConformancePackInputParameter) string { return v.ParameterValue })
}

type DeliveryChannelSnapshotDeliveryProperties struct {
	// The frequency with which AWS Config recurringly delivers configuration snapshotsE.g., `One_Hour` or `Three_Hours`. Valid values are listed [here](https://docs.aws.amazon.com/config/latest/APIReference/API_ConfigSnapshotDeliveryProperties.html#API_ConfigSnapshotDeliveryProperties_Contents).
	DeliveryFrequency *string `pulumi:"deliveryFrequency"`
}

type DeliveryChannelSnapshotDeliveryPropertiesArgs struct {
	// The frequency with which AWS Config recurringly delivers configuration snapshotsE.g., `One_Hour` or `Three_Hours`. Valid values are listed [here](https://docs.aws.amazon.com/config/latest/APIReference/API_ConfigSnapshotDeliveryProperties.html#API_ConfigSnapshotDeliveryProperties_Contents).
	DeliveryFrequency pulumix.Input[*string] `pulumi:"deliveryFrequency"`
}

func (DeliveryChannelSnapshotDeliveryPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryChannelSnapshotDeliveryProperties)(nil)).Elem()
}

func (i DeliveryChannelSnapshotDeliveryPropertiesArgs) ToDeliveryChannelSnapshotDeliveryPropertiesOutput() DeliveryChannelSnapshotDeliveryPropertiesOutput {
	return i.ToDeliveryChannelSnapshotDeliveryPropertiesOutputWithContext(context.Background())
}

func (i DeliveryChannelSnapshotDeliveryPropertiesArgs) ToDeliveryChannelSnapshotDeliveryPropertiesOutputWithContext(ctx context.Context) DeliveryChannelSnapshotDeliveryPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliveryChannelSnapshotDeliveryPropertiesOutput)
}

func (i *DeliveryChannelSnapshotDeliveryPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*DeliveryChannelSnapshotDeliveryPropertiesArgs] {
	return pulumix.Val(i)
}

type DeliveryChannelSnapshotDeliveryPropertiesOutput struct{ *pulumi.OutputState }

func (DeliveryChannelSnapshotDeliveryPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryChannelSnapshotDeliveryProperties)(nil)).Elem()
}

func (o DeliveryChannelSnapshotDeliveryPropertiesOutput) ToDeliveryChannelSnapshotDeliveryPropertiesOutput() DeliveryChannelSnapshotDeliveryPropertiesOutput {
	return o
}

func (o DeliveryChannelSnapshotDeliveryPropertiesOutput) ToDeliveryChannelSnapshotDeliveryPropertiesOutputWithContext(ctx context.Context) DeliveryChannelSnapshotDeliveryPropertiesOutput {
	return o
}

func (o DeliveryChannelSnapshotDeliveryPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[DeliveryChannelSnapshotDeliveryProperties] {
	return pulumix.Output[DeliveryChannelSnapshotDeliveryProperties]{
		OutputState: o.OutputState,
	}
}

// The frequency with which AWS Config recurringly delivers configuration snapshotsE.g., `One_Hour` or `Three_Hours`. Valid values are listed [here](https://docs.aws.amazon.com/config/latest/APIReference/API_ConfigSnapshotDeliveryProperties.html#API_ConfigSnapshotDeliveryProperties_Contents).
func (o DeliveryChannelSnapshotDeliveryPropertiesOutput) DeliveryFrequency() pulumix.Output[*string] {
	return pulumix.Apply[DeliveryChannelSnapshotDeliveryProperties](o, func(v DeliveryChannelSnapshotDeliveryProperties) *string { return v.DeliveryFrequency })
}

type OrganizationConformancePackInputParameter struct {
	// The input key.
	ParameterName string `pulumi:"parameterName"`
	// The input value.
	ParameterValue string `pulumi:"parameterValue"`
}

type OrganizationConformancePackInputParameterArgs struct {
	// The input key.
	ParameterName pulumix.Input[string] `pulumi:"parameterName"`
	// The input value.
	ParameterValue pulumix.Input[string] `pulumi:"parameterValue"`
}

func (OrganizationConformancePackInputParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationConformancePackInputParameter)(nil)).Elem()
}

func (i OrganizationConformancePackInputParameterArgs) ToOrganizationConformancePackInputParameterOutput() OrganizationConformancePackInputParameterOutput {
	return i.ToOrganizationConformancePackInputParameterOutputWithContext(context.Background())
}

func (i OrganizationConformancePackInputParameterArgs) ToOrganizationConformancePackInputParameterOutputWithContext(ctx context.Context) OrganizationConformancePackInputParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationConformancePackInputParameterOutput)
}

func (i *OrganizationConformancePackInputParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*OrganizationConformancePackInputParameterArgs] {
	return pulumix.Val(i)
}

type OrganizationConformancePackInputParameterOutput struct{ *pulumi.OutputState }

func (OrganizationConformancePackInputParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationConformancePackInputParameter)(nil)).Elem()
}

func (o OrganizationConformancePackInputParameterOutput) ToOrganizationConformancePackInputParameterOutput() OrganizationConformancePackInputParameterOutput {
	return o
}

func (o OrganizationConformancePackInputParameterOutput) ToOrganizationConformancePackInputParameterOutputWithContext(ctx context.Context) OrganizationConformancePackInputParameterOutput {
	return o
}

func (o OrganizationConformancePackInputParameterOutput) ToOutput(ctx context.Context) pulumix.Output[OrganizationConformancePackInputParameter] {
	return pulumix.Output[OrganizationConformancePackInputParameter]{
		OutputState: o.OutputState,
	}
}

// The input key.
func (o OrganizationConformancePackInputParameterOutput) ParameterName() pulumix.Output[string] {
	return pulumix.Apply[OrganizationConformancePackInputParameter](o, func(v OrganizationConformancePackInputParameter) string { return v.ParameterName })
}

// The input value.
func (o OrganizationConformancePackInputParameterOutput) ParameterValue() pulumix.Output[string] {
	return pulumix.Apply[OrganizationConformancePackInputParameter](o, func(v OrganizationConformancePackInputParameter) string { return v.ParameterValue })
}

type RecorderRecordingGroup struct {
	// Specifies whether AWS Config records configuration changes for every supported type of regional resource (which includes any new type that will become supported in the future). Conflicts with `resourceTypes`. Defaults to `true`.
	AllSupported *bool `pulumi:"allSupported"`
	// An object that specifies how AWS Config excludes resource types from being recorded by the configuration recorder.To use this option, you must set the useOnly field of RecordingStrategy to `EXCLUSION_BY_RESOURCE_TYPES` Requires `allSupported = false`. Conflicts with `resourceTypes`.
	ExclusionByResourceTypes []RecorderRecordingGroupExclusionByResourceType `pulumi:"exclusionByResourceTypes"`
	// Specifies whether AWS Config includes all supported types of _global resources_ with the resources that it records. Requires `allSupported = true`. Conflicts with `resourceTypes`.
	IncludeGlobalResourceTypes *bool `pulumi:"includeGlobalResourceTypes"`
	// Recording Strategy - see below..
	RecordingStrategies []RecorderRecordingGroupRecordingStrategy `pulumi:"recordingStrategies"`
	// A list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, `AWS::EC2::Instance` or `AWS::CloudTrail::Trail`). See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types. In order to use this attribute, `allSupported` must be set to false.
	ResourceTypes []string `pulumi:"resourceTypes"`
}

type RecorderRecordingGroupArgs struct {
	// Specifies whether AWS Config records configuration changes for every supported type of regional resource (which includes any new type that will become supported in the future). Conflicts with `resourceTypes`. Defaults to `true`.
	AllSupported pulumix.Input[*bool] `pulumi:"allSupported"`
	// An object that specifies how AWS Config excludes resource types from being recorded by the configuration recorder.To use this option, you must set the useOnly field of RecordingStrategy to `EXCLUSION_BY_RESOURCE_TYPES` Requires `allSupported = false`. Conflicts with `resourceTypes`.
	ExclusionByResourceTypes pulumix.Input[[]*RecorderRecordingGroupExclusionByResourceTypeArgs] `pulumi:"exclusionByResourceTypes"`
	// Specifies whether AWS Config includes all supported types of _global resources_ with the resources that it records. Requires `allSupported = true`. Conflicts with `resourceTypes`.
	IncludeGlobalResourceTypes pulumix.Input[*bool] `pulumi:"includeGlobalResourceTypes"`
	// Recording Strategy - see below..
	RecordingStrategies pulumix.Input[[]*RecorderRecordingGroupRecordingStrategyArgs] `pulumi:"recordingStrategies"`
	// A list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, `AWS::EC2::Instance` or `AWS::CloudTrail::Trail`). See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types. In order to use this attribute, `allSupported` must be set to false.
	ResourceTypes pulumix.Input[[]string] `pulumi:"resourceTypes"`
}

func (RecorderRecordingGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecorderRecordingGroup)(nil)).Elem()
}

func (i RecorderRecordingGroupArgs) ToRecorderRecordingGroupOutput() RecorderRecordingGroupOutput {
	return i.ToRecorderRecordingGroupOutputWithContext(context.Background())
}

func (i RecorderRecordingGroupArgs) ToRecorderRecordingGroupOutputWithContext(ctx context.Context) RecorderRecordingGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecorderRecordingGroupOutput)
}

func (i *RecorderRecordingGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*RecorderRecordingGroupArgs] {
	return pulumix.Val(i)
}

type RecorderRecordingGroupOutput struct{ *pulumi.OutputState }

func (RecorderRecordingGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecorderRecordingGroup)(nil)).Elem()
}

func (o RecorderRecordingGroupOutput) ToRecorderRecordingGroupOutput() RecorderRecordingGroupOutput {
	return o
}

func (o RecorderRecordingGroupOutput) ToRecorderRecordingGroupOutputWithContext(ctx context.Context) RecorderRecordingGroupOutput {
	return o
}

func (o RecorderRecordingGroupOutput) ToOutput(ctx context.Context) pulumix.Output[RecorderRecordingGroup] {
	return pulumix.Output[RecorderRecordingGroup]{
		OutputState: o.OutputState,
	}
}

// Specifies whether AWS Config records configuration changes for every supported type of regional resource (which includes any new type that will become supported in the future). Conflicts with `resourceTypes`. Defaults to `true`.
func (o RecorderRecordingGroupOutput) AllSupported() pulumix.Output[*bool] {
	return pulumix.Apply[RecorderRecordingGroup](o, func(v RecorderRecordingGroup) *bool { return v.AllSupported })
}

// An object that specifies how AWS Config excludes resource types from being recorded by the configuration recorder.To use this option, you must set the useOnly field of RecordingStrategy to `EXCLUSION_BY_RESOURCE_TYPES` Requires `allSupported = false`. Conflicts with `resourceTypes`.
func (o RecorderRecordingGroupOutput) ExclusionByResourceTypes() pulumix.GArrayOutput[RecorderRecordingGroupExclusionByResourceType, RecorderRecordingGroupExclusionByResourceTypeOutput] {
	value := pulumix.Apply[RecorderRecordingGroup](o, func(v RecorderRecordingGroup) []RecorderRecordingGroupExclusionByResourceType {
		return v.ExclusionByResourceTypes
	})
	return pulumix.GArrayOutput[RecorderRecordingGroupExclusionByResourceType, RecorderRecordingGroupExclusionByResourceTypeOutput]{OutputState: value.OutputState}
}

// Specifies whether AWS Config includes all supported types of _global resources_ with the resources that it records. Requires `allSupported = true`. Conflicts with `resourceTypes`.
func (o RecorderRecordingGroupOutput) IncludeGlobalResourceTypes() pulumix.Output[*bool] {
	return pulumix.Apply[RecorderRecordingGroup](o, func(v RecorderRecordingGroup) *bool { return v.IncludeGlobalResourceTypes })
}

// Recording Strategy - see below..
func (o RecorderRecordingGroupOutput) RecordingStrategies() pulumix.GArrayOutput[RecorderRecordingGroupRecordingStrategy, RecorderRecordingGroupRecordingStrategyOutput] {
	value := pulumix.Apply[RecorderRecordingGroup](o, func(v RecorderRecordingGroup) []RecorderRecordingGroupRecordingStrategy { return v.RecordingStrategies })
	return pulumix.GArrayOutput[RecorderRecordingGroupRecordingStrategy, RecorderRecordingGroupRecordingStrategyOutput]{OutputState: value.OutputState}
}

// A list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, `AWS::EC2::Instance` or `AWS::CloudTrail::Trail`). See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types. In order to use this attribute, `allSupported` must be set to false.
func (o RecorderRecordingGroupOutput) ResourceTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RecorderRecordingGroup](o, func(v RecorderRecordingGroup) []string { return v.ResourceTypes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type RecorderRecordingGroupExclusionByResourceType struct {
	// A list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, `AWS::EC2::Instance` or `AWS::CloudTrail::Trail`). See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types. In order to use this attribute, `allSupported` must be set to false.
	ResourceTypes []string `pulumi:"resourceTypes"`
}

type RecorderRecordingGroupExclusionByResourceTypeArgs struct {
	// A list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, `AWS::EC2::Instance` or `AWS::CloudTrail::Trail`). See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types. In order to use this attribute, `allSupported` must be set to false.
	ResourceTypes pulumix.Input[[]string] `pulumi:"resourceTypes"`
}

func (RecorderRecordingGroupExclusionByResourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecorderRecordingGroupExclusionByResourceType)(nil)).Elem()
}

func (i RecorderRecordingGroupExclusionByResourceTypeArgs) ToRecorderRecordingGroupExclusionByResourceTypeOutput() RecorderRecordingGroupExclusionByResourceTypeOutput {
	return i.ToRecorderRecordingGroupExclusionByResourceTypeOutputWithContext(context.Background())
}

func (i RecorderRecordingGroupExclusionByResourceTypeArgs) ToRecorderRecordingGroupExclusionByResourceTypeOutputWithContext(ctx context.Context) RecorderRecordingGroupExclusionByResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecorderRecordingGroupExclusionByResourceTypeOutput)
}

func (i *RecorderRecordingGroupExclusionByResourceTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*RecorderRecordingGroupExclusionByResourceTypeArgs] {
	return pulumix.Val(i)
}

type RecorderRecordingGroupExclusionByResourceTypeOutput struct{ *pulumi.OutputState }

func (RecorderRecordingGroupExclusionByResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecorderRecordingGroupExclusionByResourceType)(nil)).Elem()
}

func (o RecorderRecordingGroupExclusionByResourceTypeOutput) ToRecorderRecordingGroupExclusionByResourceTypeOutput() RecorderRecordingGroupExclusionByResourceTypeOutput {
	return o
}

func (o RecorderRecordingGroupExclusionByResourceTypeOutput) ToRecorderRecordingGroupExclusionByResourceTypeOutputWithContext(ctx context.Context) RecorderRecordingGroupExclusionByResourceTypeOutput {
	return o
}

func (o RecorderRecordingGroupExclusionByResourceTypeOutput) ToOutput(ctx context.Context) pulumix.Output[RecorderRecordingGroupExclusionByResourceType] {
	return pulumix.Output[RecorderRecordingGroupExclusionByResourceType]{
		OutputState: o.OutputState,
	}
}

// A list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, `AWS::EC2::Instance` or `AWS::CloudTrail::Trail`). See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types. In order to use this attribute, `allSupported` must be set to false.
func (o RecorderRecordingGroupExclusionByResourceTypeOutput) ResourceTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RecorderRecordingGroupExclusionByResourceType](o, func(v RecorderRecordingGroupExclusionByResourceType) []string { return v.ResourceTypes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type RecorderRecordingGroupRecordingStrategy struct {
	UseOnly *string `pulumi:"useOnly"`
}

type RecorderRecordingGroupRecordingStrategyArgs struct {
	UseOnly pulumix.Input[*string] `pulumi:"useOnly"`
}

func (RecorderRecordingGroupRecordingStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecorderRecordingGroupRecordingStrategy)(nil)).Elem()
}

func (i RecorderRecordingGroupRecordingStrategyArgs) ToRecorderRecordingGroupRecordingStrategyOutput() RecorderRecordingGroupRecordingStrategyOutput {
	return i.ToRecorderRecordingGroupRecordingStrategyOutputWithContext(context.Background())
}

func (i RecorderRecordingGroupRecordingStrategyArgs) ToRecorderRecordingGroupRecordingStrategyOutputWithContext(ctx context.Context) RecorderRecordingGroupRecordingStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecorderRecordingGroupRecordingStrategyOutput)
}

func (i *RecorderRecordingGroupRecordingStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[*RecorderRecordingGroupRecordingStrategyArgs] {
	return pulumix.Val(i)
}

type RecorderRecordingGroupRecordingStrategyOutput struct{ *pulumi.OutputState }

func (RecorderRecordingGroupRecordingStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecorderRecordingGroupRecordingStrategy)(nil)).Elem()
}

func (o RecorderRecordingGroupRecordingStrategyOutput) ToRecorderRecordingGroupRecordingStrategyOutput() RecorderRecordingGroupRecordingStrategyOutput {
	return o
}

func (o RecorderRecordingGroupRecordingStrategyOutput) ToRecorderRecordingGroupRecordingStrategyOutputWithContext(ctx context.Context) RecorderRecordingGroupRecordingStrategyOutput {
	return o
}

func (o RecorderRecordingGroupRecordingStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[RecorderRecordingGroupRecordingStrategy] {
	return pulumix.Output[RecorderRecordingGroupRecordingStrategy]{
		OutputState: o.OutputState,
	}
}

func (o RecorderRecordingGroupRecordingStrategyOutput) UseOnly() pulumix.Output[*string] {
	return pulumix.Apply[RecorderRecordingGroupRecordingStrategy](o, func(v RecorderRecordingGroupRecordingStrategy) *string { return v.UseOnly })
}

type RemediationConfigurationExecutionControls struct {
	// Configuration block for SSM controls. See below.
	SsmControls *RemediationConfigurationExecutionControlsSsmControls `pulumi:"ssmControls"`
}

type RemediationConfigurationExecutionControlsArgs struct {
	// Configuration block for SSM controls. See below.
	SsmControls pulumix.Input[*RemediationConfigurationExecutionControlsSsmControlsArgs] `pulumi:"ssmControls"`
}

func (RemediationConfigurationExecutionControlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemediationConfigurationExecutionControls)(nil)).Elem()
}

func (i RemediationConfigurationExecutionControlsArgs) ToRemediationConfigurationExecutionControlsOutput() RemediationConfigurationExecutionControlsOutput {
	return i.ToRemediationConfigurationExecutionControlsOutputWithContext(context.Background())
}

func (i RemediationConfigurationExecutionControlsArgs) ToRemediationConfigurationExecutionControlsOutputWithContext(ctx context.Context) RemediationConfigurationExecutionControlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemediationConfigurationExecutionControlsOutput)
}

func (i *RemediationConfigurationExecutionControlsArgs) ToOutput(ctx context.Context) pulumix.Output[*RemediationConfigurationExecutionControlsArgs] {
	return pulumix.Val(i)
}

type RemediationConfigurationExecutionControlsOutput struct{ *pulumi.OutputState }

func (RemediationConfigurationExecutionControlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemediationConfigurationExecutionControls)(nil)).Elem()
}

func (o RemediationConfigurationExecutionControlsOutput) ToRemediationConfigurationExecutionControlsOutput() RemediationConfigurationExecutionControlsOutput {
	return o
}

func (o RemediationConfigurationExecutionControlsOutput) ToRemediationConfigurationExecutionControlsOutputWithContext(ctx context.Context) RemediationConfigurationExecutionControlsOutput {
	return o
}

func (o RemediationConfigurationExecutionControlsOutput) ToOutput(ctx context.Context) pulumix.Output[RemediationConfigurationExecutionControls] {
	return pulumix.Output[RemediationConfigurationExecutionControls]{
		OutputState: o.OutputState,
	}
}

// Configuration block for SSM controls. See below.
func (o RemediationConfigurationExecutionControlsOutput) SsmControls() pulumix.GPtrOutput[RemediationConfigurationExecutionControlsSsmControls, RemediationConfigurationExecutionControlsSsmControlsOutput] {
	value := pulumix.Apply[RemediationConfigurationExecutionControls](o, func(v RemediationConfigurationExecutionControls) *RemediationConfigurationExecutionControlsSsmControls {
		return v.SsmControls
	})
	return pulumix.GPtrOutput[RemediationConfigurationExecutionControlsSsmControls, RemediationConfigurationExecutionControlsSsmControlsOutput]{OutputState: value.OutputState}
}

type RemediationConfigurationExecutionControlsSsmControls struct {
	// Maximum percentage of remediation actions allowed to run in parallel on the non-compliant resources for that specific rule. The default value is 10%.
	ConcurrentExecutionRatePercentage *int `pulumi:"concurrentExecutionRatePercentage"`
	// Percentage of errors that are allowed before SSM stops running automations on non-compliant resources for that specific rule. The default is 50%.
	ErrorPercentage *int `pulumi:"errorPercentage"`
}

type RemediationConfigurationExecutionControlsSsmControlsArgs struct {
	// Maximum percentage of remediation actions allowed to run in parallel on the non-compliant resources for that specific rule. The default value is 10%.
	ConcurrentExecutionRatePercentage pulumix.Input[*int] `pulumi:"concurrentExecutionRatePercentage"`
	// Percentage of errors that are allowed before SSM stops running automations on non-compliant resources for that specific rule. The default is 50%.
	ErrorPercentage pulumix.Input[*int] `pulumi:"errorPercentage"`
}

func (RemediationConfigurationExecutionControlsSsmControlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemediationConfigurationExecutionControlsSsmControls)(nil)).Elem()
}

func (i RemediationConfigurationExecutionControlsSsmControlsArgs) ToRemediationConfigurationExecutionControlsSsmControlsOutput() RemediationConfigurationExecutionControlsSsmControlsOutput {
	return i.ToRemediationConfigurationExecutionControlsSsmControlsOutputWithContext(context.Background())
}

func (i RemediationConfigurationExecutionControlsSsmControlsArgs) ToRemediationConfigurationExecutionControlsSsmControlsOutputWithContext(ctx context.Context) RemediationConfigurationExecutionControlsSsmControlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemediationConfigurationExecutionControlsSsmControlsOutput)
}

func (i *RemediationConfigurationExecutionControlsSsmControlsArgs) ToOutput(ctx context.Context) pulumix.Output[*RemediationConfigurationExecutionControlsSsmControlsArgs] {
	return pulumix.Val(i)
}

type RemediationConfigurationExecutionControlsSsmControlsOutput struct{ *pulumi.OutputState }

func (RemediationConfigurationExecutionControlsSsmControlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemediationConfigurationExecutionControlsSsmControls)(nil)).Elem()
}

func (o RemediationConfigurationExecutionControlsSsmControlsOutput) ToRemediationConfigurationExecutionControlsSsmControlsOutput() RemediationConfigurationExecutionControlsSsmControlsOutput {
	return o
}

func (o RemediationConfigurationExecutionControlsSsmControlsOutput) ToRemediationConfigurationExecutionControlsSsmControlsOutputWithContext(ctx context.Context) RemediationConfigurationExecutionControlsSsmControlsOutput {
	return o
}

func (o RemediationConfigurationExecutionControlsSsmControlsOutput) ToOutput(ctx context.Context) pulumix.Output[RemediationConfigurationExecutionControlsSsmControls] {
	return pulumix.Output[RemediationConfigurationExecutionControlsSsmControls]{
		OutputState: o.OutputState,
	}
}

// Maximum percentage of remediation actions allowed to run in parallel on the non-compliant resources for that specific rule. The default value is 10%.
func (o RemediationConfigurationExecutionControlsSsmControlsOutput) ConcurrentExecutionRatePercentage() pulumix.Output[*int] {
	return pulumix.Apply[RemediationConfigurationExecutionControlsSsmControls](o, func(v RemediationConfigurationExecutionControlsSsmControls) *int {
		return v.ConcurrentExecutionRatePercentage
	})
}

// Percentage of errors that are allowed before SSM stops running automations on non-compliant resources for that specific rule. The default is 50%.
func (o RemediationConfigurationExecutionControlsSsmControlsOutput) ErrorPercentage() pulumix.Output[*int] {
	return pulumix.Apply[RemediationConfigurationExecutionControlsSsmControls](o, func(v RemediationConfigurationExecutionControlsSsmControls) *int { return v.ErrorPercentage })
}

type RemediationConfigurationParameter struct {
	// Name of the attribute.
	Name string `pulumi:"name"`
	// Value is dynamic and changes at run-time.
	ResourceValue *string `pulumi:"resourceValue"`
	// Value is static and does not change at run-time.
	StaticValue *string `pulumi:"staticValue"`
	// List of static values.
	StaticValues []string `pulumi:"staticValues"`
}

type RemediationConfigurationParameterArgs struct {
	// Name of the attribute.
	Name pulumix.Input[string] `pulumi:"name"`
	// Value is dynamic and changes at run-time.
	ResourceValue pulumix.Input[*string] `pulumi:"resourceValue"`
	// Value is static and does not change at run-time.
	StaticValue pulumix.Input[*string] `pulumi:"staticValue"`
	// List of static values.
	StaticValues pulumix.Input[[]string] `pulumi:"staticValues"`
}

func (RemediationConfigurationParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemediationConfigurationParameter)(nil)).Elem()
}

func (i RemediationConfigurationParameterArgs) ToRemediationConfigurationParameterOutput() RemediationConfigurationParameterOutput {
	return i.ToRemediationConfigurationParameterOutputWithContext(context.Background())
}

func (i RemediationConfigurationParameterArgs) ToRemediationConfigurationParameterOutputWithContext(ctx context.Context) RemediationConfigurationParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemediationConfigurationParameterOutput)
}

func (i *RemediationConfigurationParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*RemediationConfigurationParameterArgs] {
	return pulumix.Val(i)
}

type RemediationConfigurationParameterOutput struct{ *pulumi.OutputState }

func (RemediationConfigurationParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemediationConfigurationParameter)(nil)).Elem()
}

func (o RemediationConfigurationParameterOutput) ToRemediationConfigurationParameterOutput() RemediationConfigurationParameterOutput {
	return o
}

func (o RemediationConfigurationParameterOutput) ToRemediationConfigurationParameterOutputWithContext(ctx context.Context) RemediationConfigurationParameterOutput {
	return o
}

func (o RemediationConfigurationParameterOutput) ToOutput(ctx context.Context) pulumix.Output[RemediationConfigurationParameter] {
	return pulumix.Output[RemediationConfigurationParameter]{
		OutputState: o.OutputState,
	}
}

// Name of the attribute.
func (o RemediationConfigurationParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[RemediationConfigurationParameter](o, func(v RemediationConfigurationParameter) string { return v.Name })
}

// Value is dynamic and changes at run-time.
func (o RemediationConfigurationParameterOutput) ResourceValue() pulumix.Output[*string] {
	return pulumix.Apply[RemediationConfigurationParameter](o, func(v RemediationConfigurationParameter) *string { return v.ResourceValue })
}

// Value is static and does not change at run-time.
func (o RemediationConfigurationParameterOutput) StaticValue() pulumix.Output[*string] {
	return pulumix.Apply[RemediationConfigurationParameter](o, func(v RemediationConfigurationParameter) *string { return v.StaticValue })
}

// List of static values.
func (o RemediationConfigurationParameterOutput) StaticValues() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RemediationConfigurationParameter](o, func(v RemediationConfigurationParameter) []string { return v.StaticValues })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type RuleScope struct {
	// The IDs of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for `complianceResourceTypes`.
	ComplianceResourceId *string `pulumi:"complianceResourceId"`
	// A list of resource types of only those AWS resources that you want to trigger an evaluation for the ruleE.g., `AWS::EC2::Instance`. You can only specify one type if you also specify a resource ID for `complianceResourceId`. See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types.
	ComplianceResourceTypes []string `pulumi:"complianceResourceTypes"`
	// The tag key that is applied to only those AWS resources that you want you want to trigger an evaluation for the rule.
	TagKey *string `pulumi:"tagKey"`
	// The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.
	TagValue *string `pulumi:"tagValue"`
}

type RuleScopeArgs struct {
	// The IDs of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for `complianceResourceTypes`.
	ComplianceResourceId pulumix.Input[*string] `pulumi:"complianceResourceId"`
	// A list of resource types of only those AWS resources that you want to trigger an evaluation for the ruleE.g., `AWS::EC2::Instance`. You can only specify one type if you also specify a resource ID for `complianceResourceId`. See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types.
	ComplianceResourceTypes pulumix.Input[[]string] `pulumi:"complianceResourceTypes"`
	// The tag key that is applied to only those AWS resources that you want you want to trigger an evaluation for the rule.
	TagKey pulumix.Input[*string] `pulumi:"tagKey"`
	// The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.
	TagValue pulumix.Input[*string] `pulumi:"tagValue"`
}

func (RuleScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleScope)(nil)).Elem()
}

func (i RuleScopeArgs) ToRuleScopeOutput() RuleScopeOutput {
	return i.ToRuleScopeOutputWithContext(context.Background())
}

func (i RuleScopeArgs) ToRuleScopeOutputWithContext(ctx context.Context) RuleScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleScopeOutput)
}

func (i *RuleScopeArgs) ToOutput(ctx context.Context) pulumix.Output[*RuleScopeArgs] {
	return pulumix.Val(i)
}

type RuleScopeOutput struct{ *pulumi.OutputState }

func (RuleScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleScope)(nil)).Elem()
}

func (o RuleScopeOutput) ToRuleScopeOutput() RuleScopeOutput {
	return o
}

func (o RuleScopeOutput) ToRuleScopeOutputWithContext(ctx context.Context) RuleScopeOutput {
	return o
}

func (o RuleScopeOutput) ToOutput(ctx context.Context) pulumix.Output[RuleScope] {
	return pulumix.Output[RuleScope]{
		OutputState: o.OutputState,
	}
}

// The IDs of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for `complianceResourceTypes`.
func (o RuleScopeOutput) ComplianceResourceId() pulumix.Output[*string] {
	return pulumix.Apply[RuleScope](o, func(v RuleScope) *string { return v.ComplianceResourceId })
}

// A list of resource types of only those AWS resources that you want to trigger an evaluation for the ruleE.g., `AWS::EC2::Instance`. You can only specify one type if you also specify a resource ID for `complianceResourceId`. See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types.
func (o RuleScopeOutput) ComplianceResourceTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RuleScope](o, func(v RuleScope) []string { return v.ComplianceResourceTypes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The tag key that is applied to only those AWS resources that you want you want to trigger an evaluation for the rule.
func (o RuleScopeOutput) TagKey() pulumix.Output[*string] {
	return pulumix.Apply[RuleScope](o, func(v RuleScope) *string { return v.TagKey })
}

// The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.
func (o RuleScopeOutput) TagValue() pulumix.Output[*string] {
	return pulumix.Apply[RuleScope](o, func(v RuleScope) *string { return v.TagValue })
}

type RuleSource struct {
	// Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to `CUSTOM_POLICY`. See Custom Policy Details Below.
	CustomPolicyDetails *RuleSourceCustomPolicyDetails `pulumi:"customPolicyDetails"`
	// Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are `AWS`, `CUSTOM_LAMBDA` or `CUSTOM_POLICY`. For more information about managed rules, see the [AWS Config Managed Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html). For more information about custom rules, see the [AWS Config Custom Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html). Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g., via the `lambda.Permission` resource.
	Owner string `pulumi:"owner"`
	// Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if `owner` is `CUSTOM_LAMBDA` or `CUSTOM_POLICY`. See Source Detail Below.
	SourceDetails []RuleSourceSourceDetail `pulumi:"sourceDetails"`
	// For AWS Config managed rules, a predefined identifier, e.g `IAM_PASSWORD_POLICY`. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as `arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name` or the `arn` attribute of the `lambda.Function` resource.
	SourceIdentifier *string `pulumi:"sourceIdentifier"`
}

type RuleSourceArgs struct {
	// Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to `CUSTOM_POLICY`. See Custom Policy Details Below.
	CustomPolicyDetails pulumix.Input[*RuleSourceCustomPolicyDetailsArgs] `pulumi:"customPolicyDetails"`
	// Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are `AWS`, `CUSTOM_LAMBDA` or `CUSTOM_POLICY`. For more information about managed rules, see the [AWS Config Managed Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html). For more information about custom rules, see the [AWS Config Custom Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html). Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g., via the `lambda.Permission` resource.
	Owner pulumix.Input[string] `pulumi:"owner"`
	// Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if `owner` is `CUSTOM_LAMBDA` or `CUSTOM_POLICY`. See Source Detail Below.
	SourceDetails pulumix.Input[[]*RuleSourceSourceDetailArgs] `pulumi:"sourceDetails"`
	// For AWS Config managed rules, a predefined identifier, e.g `IAM_PASSWORD_POLICY`. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as `arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name` or the `arn` attribute of the `lambda.Function` resource.
	SourceIdentifier pulumix.Input[*string] `pulumi:"sourceIdentifier"`
}

func (RuleSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSource)(nil)).Elem()
}

func (i RuleSourceArgs) ToRuleSourceOutput() RuleSourceOutput {
	return i.ToRuleSourceOutputWithContext(context.Background())
}

func (i RuleSourceArgs) ToRuleSourceOutputWithContext(ctx context.Context) RuleSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSourceOutput)
}

func (i *RuleSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*RuleSourceArgs] {
	return pulumix.Val(i)
}

type RuleSourceOutput struct{ *pulumi.OutputState }

func (RuleSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSource)(nil)).Elem()
}

func (o RuleSourceOutput) ToRuleSourceOutput() RuleSourceOutput {
	return o
}

func (o RuleSourceOutput) ToRuleSourceOutputWithContext(ctx context.Context) RuleSourceOutput {
	return o
}

func (o RuleSourceOutput) ToOutput(ctx context.Context) pulumix.Output[RuleSource] {
	return pulumix.Output[RuleSource]{
		OutputState: o.OutputState,
	}
}

// Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to `CUSTOM_POLICY`. See Custom Policy Details Below.
func (o RuleSourceOutput) CustomPolicyDetails() pulumix.GPtrOutput[RuleSourceCustomPolicyDetails, RuleSourceCustomPolicyDetailsOutput] {
	value := pulumix.Apply[RuleSource](o, func(v RuleSource) *RuleSourceCustomPolicyDetails { return v.CustomPolicyDetails })
	return pulumix.GPtrOutput[RuleSourceCustomPolicyDetails, RuleSourceCustomPolicyDetailsOutput]{OutputState: value.OutputState}
}

// Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are `AWS`, `CUSTOM_LAMBDA` or `CUSTOM_POLICY`. For more information about managed rules, see the [AWS Config Managed Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html). For more information about custom rules, see the [AWS Config Custom Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html). Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g., via the `lambda.Permission` resource.
func (o RuleSourceOutput) Owner() pulumix.Output[string] {
	return pulumix.Apply[RuleSource](o, func(v RuleSource) string { return v.Owner })
}

// Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if `owner` is `CUSTOM_LAMBDA` or `CUSTOM_POLICY`. See Source Detail Below.
func (o RuleSourceOutput) SourceDetails() pulumix.GArrayOutput[RuleSourceSourceDetail, RuleSourceSourceDetailOutput] {
	value := pulumix.Apply[RuleSource](o, func(v RuleSource) []RuleSourceSourceDetail { return v.SourceDetails })
	return pulumix.GArrayOutput[RuleSourceSourceDetail, RuleSourceSourceDetailOutput]{OutputState: value.OutputState}
}

// For AWS Config managed rules, a predefined identifier, e.g `IAM_PASSWORD_POLICY`. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as `arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name` or the `arn` attribute of the `lambda.Function` resource.
func (o RuleSourceOutput) SourceIdentifier() pulumix.Output[*string] {
	return pulumix.Apply[RuleSource](o, func(v RuleSource) *string { return v.SourceIdentifier })
}

type RuleSourceCustomPolicyDetails struct {
	// The boolean expression for enabling debug logging for your Config Custom Policy rule. The default value is `false`.
	EnableDebugLogDelivery *bool `pulumi:"enableDebugLogDelivery"`
	// The runtime system for your Config Custom Policy rule. Guard is a policy-as-code language that allows you to write policies that are enforced by Config Custom Policy rules. For more information about Guard, see the [Guard GitHub Repository](https://github.com/aws-cloudformation/cloudformation-guard).
	PolicyRuntime string `pulumi:"policyRuntime"`
	// The policy definition containing the logic for your Config Custom Policy rule.
	PolicyText string `pulumi:"policyText"`
}

type RuleSourceCustomPolicyDetailsArgs struct {
	// The boolean expression for enabling debug logging for your Config Custom Policy rule. The default value is `false`.
	EnableDebugLogDelivery pulumix.Input[*bool] `pulumi:"enableDebugLogDelivery"`
	// The runtime system for your Config Custom Policy rule. Guard is a policy-as-code language that allows you to write policies that are enforced by Config Custom Policy rules. For more information about Guard, see the [Guard GitHub Repository](https://github.com/aws-cloudformation/cloudformation-guard).
	PolicyRuntime pulumix.Input[string] `pulumi:"policyRuntime"`
	// The policy definition containing the logic for your Config Custom Policy rule.
	PolicyText pulumix.Input[string] `pulumi:"policyText"`
}

func (RuleSourceCustomPolicyDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSourceCustomPolicyDetails)(nil)).Elem()
}

func (i RuleSourceCustomPolicyDetailsArgs) ToRuleSourceCustomPolicyDetailsOutput() RuleSourceCustomPolicyDetailsOutput {
	return i.ToRuleSourceCustomPolicyDetailsOutputWithContext(context.Background())
}

func (i RuleSourceCustomPolicyDetailsArgs) ToRuleSourceCustomPolicyDetailsOutputWithContext(ctx context.Context) RuleSourceCustomPolicyDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSourceCustomPolicyDetailsOutput)
}

func (i *RuleSourceCustomPolicyDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*RuleSourceCustomPolicyDetailsArgs] {
	return pulumix.Val(i)
}

type RuleSourceCustomPolicyDetailsOutput struct{ *pulumi.OutputState }

func (RuleSourceCustomPolicyDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSourceCustomPolicyDetails)(nil)).Elem()
}

func (o RuleSourceCustomPolicyDetailsOutput) ToRuleSourceCustomPolicyDetailsOutput() RuleSourceCustomPolicyDetailsOutput {
	return o
}

func (o RuleSourceCustomPolicyDetailsOutput) ToRuleSourceCustomPolicyDetailsOutputWithContext(ctx context.Context) RuleSourceCustomPolicyDetailsOutput {
	return o
}

func (o RuleSourceCustomPolicyDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[RuleSourceCustomPolicyDetails] {
	return pulumix.Output[RuleSourceCustomPolicyDetails]{
		OutputState: o.OutputState,
	}
}

// The boolean expression for enabling debug logging for your Config Custom Policy rule. The default value is `false`.
func (o RuleSourceCustomPolicyDetailsOutput) EnableDebugLogDelivery() pulumix.Output[*bool] {
	return pulumix.Apply[RuleSourceCustomPolicyDetails](o, func(v RuleSourceCustomPolicyDetails) *bool { return v.EnableDebugLogDelivery })
}

// The runtime system for your Config Custom Policy rule. Guard is a policy-as-code language that allows you to write policies that are enforced by Config Custom Policy rules. For more information about Guard, see the [Guard GitHub Repository](https://github.com/aws-cloudformation/cloudformation-guard).
func (o RuleSourceCustomPolicyDetailsOutput) PolicyRuntime() pulumix.Output[string] {
	return pulumix.Apply[RuleSourceCustomPolicyDetails](o, func(v RuleSourceCustomPolicyDetails) string { return v.PolicyRuntime })
}

// The policy definition containing the logic for your Config Custom Policy rule.
func (o RuleSourceCustomPolicyDetailsOutput) PolicyText() pulumix.Output[string] {
	return pulumix.Apply[RuleSourceCustomPolicyDetails](o, func(v RuleSourceCustomPolicyDetails) string { return v.PolicyText })
}

type RuleSourceSourceDetail struct {
	// The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWSresources. This defaults to `aws.config` and is the only valid value.
	EventSource *string `pulumi:"eventSource"`
	// The frequency that you want AWS Config to run evaluations for a rule that istriggered periodically. If specified, requires `messageType` to be `ScheduledNotification`.
	MaximumExecutionFrequency *string `pulumi:"maximumExecutionFrequency"`
	// The type of notification that triggers AWS Config to run an evaluation for a rule. You canspecify the following notification types:
	MessageType *string `pulumi:"messageType"`
}

type RuleSourceSourceDetailArgs struct {
	// The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWSresources. This defaults to `aws.config` and is the only valid value.
	EventSource pulumix.Input[*string] `pulumi:"eventSource"`
	// The frequency that you want AWS Config to run evaluations for a rule that istriggered periodically. If specified, requires `messageType` to be `ScheduledNotification`.
	MaximumExecutionFrequency pulumix.Input[*string] `pulumi:"maximumExecutionFrequency"`
	// The type of notification that triggers AWS Config to run an evaluation for a rule. You canspecify the following notification types:
	MessageType pulumix.Input[*string] `pulumi:"messageType"`
}

func (RuleSourceSourceDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSourceSourceDetail)(nil)).Elem()
}

func (i RuleSourceSourceDetailArgs) ToRuleSourceSourceDetailOutput() RuleSourceSourceDetailOutput {
	return i.ToRuleSourceSourceDetailOutputWithContext(context.Background())
}

func (i RuleSourceSourceDetailArgs) ToRuleSourceSourceDetailOutputWithContext(ctx context.Context) RuleSourceSourceDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSourceSourceDetailOutput)
}

func (i *RuleSourceSourceDetailArgs) ToOutput(ctx context.Context) pulumix.Output[*RuleSourceSourceDetailArgs] {
	return pulumix.Val(i)
}

type RuleSourceSourceDetailOutput struct{ *pulumi.OutputState }

func (RuleSourceSourceDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSourceSourceDetail)(nil)).Elem()
}

func (o RuleSourceSourceDetailOutput) ToRuleSourceSourceDetailOutput() RuleSourceSourceDetailOutput {
	return o
}

func (o RuleSourceSourceDetailOutput) ToRuleSourceSourceDetailOutputWithContext(ctx context.Context) RuleSourceSourceDetailOutput {
	return o
}

func (o RuleSourceSourceDetailOutput) ToOutput(ctx context.Context) pulumix.Output[RuleSourceSourceDetail] {
	return pulumix.Output[RuleSourceSourceDetail]{
		OutputState: o.OutputState,
	}
}

// The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWSresources. This defaults to `aws.config` and is the only valid value.
func (o RuleSourceSourceDetailOutput) EventSource() pulumix.Output[*string] {
	return pulumix.Apply[RuleSourceSourceDetail](o, func(v RuleSourceSourceDetail) *string { return v.EventSource })
}

// The frequency that you want AWS Config to run evaluations for a rule that istriggered periodically. If specified, requires `messageType` to be `ScheduledNotification`.
func (o RuleSourceSourceDetailOutput) MaximumExecutionFrequency() pulumix.Output[*string] {
	return pulumix.Apply[RuleSourceSourceDetail](o, func(v RuleSourceSourceDetail) *string { return v.MaximumExecutionFrequency })
}

// The type of notification that triggers AWS Config to run an evaluation for a rule. You canspecify the following notification types:
func (o RuleSourceSourceDetailOutput) MessageType() pulumix.Output[*string] {
	return pulumix.Apply[RuleSourceSourceDetail](o, func(v RuleSourceSourceDetail) *string { return v.MessageType })
}

func init() {
	pulumi.RegisterOutputType(ConfigurationAggregatorAccountAggregationSourceOutput{})
	pulumi.RegisterOutputType(ConfigurationAggregatorOrganizationAggregationSourceOutput{})
	pulumi.RegisterOutputType(ConformancePackInputParameterOutput{})
	pulumi.RegisterOutputType(DeliveryChannelSnapshotDeliveryPropertiesOutput{})
	pulumi.RegisterOutputType(OrganizationConformancePackInputParameterOutput{})
	pulumi.RegisterOutputType(RecorderRecordingGroupOutput{})
	pulumi.RegisterOutputType(RecorderRecordingGroupExclusionByResourceTypeOutput{})
	pulumi.RegisterOutputType(RecorderRecordingGroupRecordingStrategyOutput{})
	pulumi.RegisterOutputType(RemediationConfigurationExecutionControlsOutput{})
	pulumi.RegisterOutputType(RemediationConfigurationExecutionControlsSsmControlsOutput{})
	pulumi.RegisterOutputType(RemediationConfigurationParameterOutput{})
	pulumi.RegisterOutputType(RuleScopeOutput{})
	pulumi.RegisterOutputType(RuleSourceOutput{})
	pulumi.RegisterOutputType(RuleSourceCustomPolicyDetailsOutput{})
	pulumi.RegisterOutputType(RuleSourceSourceDetailOutput{})
}
