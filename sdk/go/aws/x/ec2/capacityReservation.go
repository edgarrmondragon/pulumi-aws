// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an EC2 Capacity Reservation. This allows you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration.
type CapacityReservation struct {
	pulumi.CustomResourceState

	// The ARN of the Capacity Reservation.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone pulumix.Output[string] `pulumi:"availabilityZone"`
	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	EbsOptimized pulumix.Output[*bool] `pulumi:"ebsOptimized"`
	// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
	EndDate pulumix.Output[*string] `pulumi:"endDate"`
	// Indicates the way in which the Capacity Reservation ends. Specify either `unlimited` or `limited`.
	EndDateType pulumix.Output[*string] `pulumi:"endDateType"`
	// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
	EphemeralStorage pulumix.Output[*bool] `pulumi:"ephemeralStorage"`
	// The number of instances for which to reserve capacity.
	InstanceCount pulumix.Output[int] `pulumi:"instanceCount"`
	// Indicates the type of instance launches that the Capacity Reservation accepts. Specify either `open` or `targeted`.
	InstanceMatchCriteria pulumix.Output[*string] `pulumi:"instanceMatchCriteria"`
	// The type of operating system for which to reserve capacity. Valid options are `Linux/UNIX`, `Red Hat Enterprise Linux`, `SUSE Linux`, `Windows`, `Windows with SQL Server`, `Windows with SQL Server Enterprise`, `Windows with SQL Server Standard` or `Windows with SQL Server Web`.
	InstancePlatform pulumix.Output[string] `pulumi:"instancePlatform"`
	// The instance type for which to reserve capacity.
	InstanceType pulumix.Output[string] `pulumi:"instanceType"`
	// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
	OutpostArn pulumix.Output[*string] `pulumi:"outpostArn"`
	// The ID of the AWS account that owns the Capacity Reservation.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation.
	PlacementGroupArn pulumix.Output[*string] `pulumi:"placementGroupArn"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Indicates the tenancy of the Capacity Reservation. Specify either `default` or `dedicated`.
	Tenancy pulumix.Output[*string] `pulumi:"tenancy"`
}

// NewCapacityReservation registers a new resource with the given unique name, arguments, and options.
func NewCapacityReservation(ctx *pulumi.Context,
	name string, args *CapacityReservationArgs, opts ...pulumi.ResourceOption) (*CapacityReservation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.InstanceCount == nil {
		return nil, errors.New("invalid value for required argument 'InstanceCount'")
	}
	if args.InstancePlatform == nil {
		return nil, errors.New("invalid value for required argument 'InstancePlatform'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CapacityReservation
	err := ctx.RegisterResource("aws:ec2/capacityReservation:CapacityReservation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCapacityReservation gets an existing CapacityReservation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCapacityReservation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CapacityReservationState, opts ...pulumi.ResourceOption) (*CapacityReservation, error) {
	var resource CapacityReservation
	err := ctx.ReadResource("aws:ec2/capacityReservation:CapacityReservation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CapacityReservation resources.
type capacityReservationState struct {
	// The ARN of the Capacity Reservation.
	Arn *string `pulumi:"arn"`
	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
	EndDate *string `pulumi:"endDate"`
	// Indicates the way in which the Capacity Reservation ends. Specify either `unlimited` or `limited`.
	EndDateType *string `pulumi:"endDateType"`
	// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
	EphemeralStorage *bool `pulumi:"ephemeralStorage"`
	// The number of instances for which to reserve capacity.
	InstanceCount *int `pulumi:"instanceCount"`
	// Indicates the type of instance launches that the Capacity Reservation accepts. Specify either `open` or `targeted`.
	InstanceMatchCriteria *string `pulumi:"instanceMatchCriteria"`
	// The type of operating system for which to reserve capacity. Valid options are `Linux/UNIX`, `Red Hat Enterprise Linux`, `SUSE Linux`, `Windows`, `Windows with SQL Server`, `Windows with SQL Server Enterprise`, `Windows with SQL Server Standard` or `Windows with SQL Server Web`.
	InstancePlatform *string `pulumi:"instancePlatform"`
	// The instance type for which to reserve capacity.
	InstanceType *string `pulumi:"instanceType"`
	// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
	OutpostArn *string `pulumi:"outpostArn"`
	// The ID of the AWS account that owns the Capacity Reservation.
	OwnerId *string `pulumi:"ownerId"`
	// The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation.
	PlacementGroupArn *string `pulumi:"placementGroupArn"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Indicates the tenancy of the Capacity Reservation. Specify either `default` or `dedicated`.
	Tenancy *string `pulumi:"tenancy"`
}

type CapacityReservationState struct {
	// The ARN of the Capacity Reservation.
	Arn pulumix.Input[*string]
	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone pulumix.Input[*string]
	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	EbsOptimized pulumix.Input[*bool]
	// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
	EndDate pulumix.Input[*string]
	// Indicates the way in which the Capacity Reservation ends. Specify either `unlimited` or `limited`.
	EndDateType pulumix.Input[*string]
	// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
	EphemeralStorage pulumix.Input[*bool]
	// The number of instances for which to reserve capacity.
	InstanceCount pulumix.Input[*int]
	// Indicates the type of instance launches that the Capacity Reservation accepts. Specify either `open` or `targeted`.
	InstanceMatchCriteria pulumix.Input[*string]
	// The type of operating system for which to reserve capacity. Valid options are `Linux/UNIX`, `Red Hat Enterprise Linux`, `SUSE Linux`, `Windows`, `Windows with SQL Server`, `Windows with SQL Server Enterprise`, `Windows with SQL Server Standard` or `Windows with SQL Server Web`.
	InstancePlatform pulumix.Input[*string]
	// The instance type for which to reserve capacity.
	InstanceType pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
	OutpostArn pulumix.Input[*string]
	// The ID of the AWS account that owns the Capacity Reservation.
	OwnerId pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation.
	PlacementGroupArn pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block
	TagsAll pulumix.Input[map[string]string]
	// Indicates the tenancy of the Capacity Reservation. Specify either `default` or `dedicated`.
	Tenancy pulumix.Input[*string]
}

func (CapacityReservationState) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityReservationState)(nil)).Elem()
}

type capacityReservationArgs struct {
	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
	EndDate *string `pulumi:"endDate"`
	// Indicates the way in which the Capacity Reservation ends. Specify either `unlimited` or `limited`.
	EndDateType *string `pulumi:"endDateType"`
	// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
	EphemeralStorage *bool `pulumi:"ephemeralStorage"`
	// The number of instances for which to reserve capacity.
	InstanceCount int `pulumi:"instanceCount"`
	// Indicates the type of instance launches that the Capacity Reservation accepts. Specify either `open` or `targeted`.
	InstanceMatchCriteria *string `pulumi:"instanceMatchCriteria"`
	// The type of operating system for which to reserve capacity. Valid options are `Linux/UNIX`, `Red Hat Enterprise Linux`, `SUSE Linux`, `Windows`, `Windows with SQL Server`, `Windows with SQL Server Enterprise`, `Windows with SQL Server Standard` or `Windows with SQL Server Web`.
	InstancePlatform string `pulumi:"instancePlatform"`
	// The instance type for which to reserve capacity.
	InstanceType string `pulumi:"instanceType"`
	// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
	OutpostArn *string `pulumi:"outpostArn"`
	// The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation.
	PlacementGroupArn *string `pulumi:"placementGroupArn"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Indicates the tenancy of the Capacity Reservation. Specify either `default` or `dedicated`.
	Tenancy *string `pulumi:"tenancy"`
}

// The set of arguments for constructing a CapacityReservation resource.
type CapacityReservationArgs struct {
	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone pulumix.Input[string]
	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	EbsOptimized pulumix.Input[*bool]
	// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
	EndDate pulumix.Input[*string]
	// Indicates the way in which the Capacity Reservation ends. Specify either `unlimited` or `limited`.
	EndDateType pulumix.Input[*string]
	// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
	EphemeralStorage pulumix.Input[*bool]
	// The number of instances for which to reserve capacity.
	InstanceCount pulumix.Input[int]
	// Indicates the type of instance launches that the Capacity Reservation accepts. Specify either `open` or `targeted`.
	InstanceMatchCriteria pulumix.Input[*string]
	// The type of operating system for which to reserve capacity. Valid options are `Linux/UNIX`, `Red Hat Enterprise Linux`, `SUSE Linux`, `Windows`, `Windows with SQL Server`, `Windows with SQL Server Enterprise`, `Windows with SQL Server Standard` or `Windows with SQL Server Web`.
	InstancePlatform pulumix.Input[string]
	// The instance type for which to reserve capacity.
	InstanceType pulumix.Input[string]
	// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
	OutpostArn pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation.
	PlacementGroupArn pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Indicates the tenancy of the Capacity Reservation. Specify either `default` or `dedicated`.
	Tenancy pulumix.Input[*string]
}

func (CapacityReservationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityReservationArgs)(nil)).Elem()
}

type CapacityReservationOutput struct{ *pulumi.OutputState }

func (CapacityReservationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservation)(nil)).Elem()
}

func (o CapacityReservationOutput) ToCapacityReservationOutput() CapacityReservationOutput {
	return o
}

func (o CapacityReservationOutput) ToCapacityReservationOutputWithContext(ctx context.Context) CapacityReservationOutput {
	return o
}

func (o CapacityReservationOutput) ToOutput(ctx context.Context) pulumix.Output[CapacityReservation] {
	return pulumix.Output[CapacityReservation]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Capacity Reservation.
func (o CapacityReservationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Availability Zone in which to create the Capacity Reservation.
func (o CapacityReservationOutput) AvailabilityZone() pulumix.Output[string] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.Output[string] { return v.AvailabilityZone })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether the Capacity Reservation supports EBS-optimized instances.
func (o CapacityReservationOutput) EbsOptimized() pulumix.Output[*bool] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.Output[*bool] { return v.EbsOptimized })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
func (o CapacityReservationOutput) EndDate() pulumix.Output[*string] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.Output[*string] { return v.EndDate })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Indicates the way in which the Capacity Reservation ends. Specify either `unlimited` or `limited`.
func (o CapacityReservationOutput) EndDateType() pulumix.Output[*string] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.Output[*string] { return v.EndDateType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
func (o CapacityReservationOutput) EphemeralStorage() pulumix.Output[*bool] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.Output[*bool] { return v.EphemeralStorage })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The number of instances for which to reserve capacity.
func (o CapacityReservationOutput) InstanceCount() pulumix.Output[int] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.Output[int] { return v.InstanceCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Indicates the type of instance launches that the Capacity Reservation accepts. Specify either `open` or `targeted`.
func (o CapacityReservationOutput) InstanceMatchCriteria() pulumix.Output[*string] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.Output[*string] { return v.InstanceMatchCriteria })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The type of operating system for which to reserve capacity. Valid options are `Linux/UNIX`, `Red Hat Enterprise Linux`, `SUSE Linux`, `Windows`, `Windows with SQL Server`, `Windows with SQL Server Enterprise`, `Windows with SQL Server Standard` or `Windows with SQL Server Web`.
func (o CapacityReservationOutput) InstancePlatform() pulumix.Output[string] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.Output[string] { return v.InstancePlatform })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The instance type for which to reserve capacity.
func (o CapacityReservationOutput) InstanceType() pulumix.Output[string] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.Output[string] { return v.InstanceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
func (o CapacityReservationOutput) OutpostArn() pulumix.Output[*string] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.Output[*string] { return v.OutpostArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the AWS account that owns the Capacity Reservation.
func (o CapacityReservationOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation.
func (o CapacityReservationOutput) PlacementGroupArn() pulumix.Output[*string] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.Output[*string] { return v.PlacementGroupArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CapacityReservationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block
func (o CapacityReservationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Indicates the tenancy of the Capacity Reservation. Specify either `default` or `dedicated`.
func (o CapacityReservationOutput) Tenancy() pulumix.Output[*string] {
	value := pulumix.Apply[CapacityReservation](o, func(v CapacityReservation) pulumix.Output[*string] { return v.Tenancy })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(CapacityReservationOutput{})
}
