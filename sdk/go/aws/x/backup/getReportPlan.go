// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information on an existing backup report plan.
func LookupReportPlan(ctx *pulumi.Context, args *LookupReportPlanArgs, opts ...pulumi.InvokeOption) (*LookupReportPlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupReportPlanResult
	err := ctx.Invoke("aws:backup/getReportPlan:getReportPlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReportPlan.
type LookupReportPlanArgs struct {
	// Backup report plan name.
	Name string `pulumi:"name"`
	// Metadata that you can assign to help organize the report plans you create.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getReportPlan.
type LookupReportPlanResult struct {
	// ARN of the backup report plan.
	Arn string `pulumi:"arn"`
	// Date and time that a report plan is created, in Unix format and Coordinated Universal Time (UTC).
	CreationTime string `pulumi:"creationTime"`
	// Deployment status of a report plan. The statuses are: `CREATE_IN_PROGRESS` | `UPDATE_IN_PROGRESS` | `DELETE_IN_PROGRESS` | `COMPLETED`.
	DeploymentStatus string `pulumi:"deploymentStatus"`
	// Description of the report plan.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// An object that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports. Detailed below.
	ReportDeliveryChannels []GetReportPlanReportDeliveryChannel `pulumi:"reportDeliveryChannels"`
	// An object that identifies the report template for the report. Reports are built using a report template. Detailed below.
	ReportSettings []GetReportPlanReportSetting `pulumi:"reportSettings"`
	// Metadata that you can assign to help organize the report plans you create.
	Tags map[string]string `pulumi:"tags"`
}

func LookupReportPlanOutput(ctx *pulumi.Context, args LookupReportPlanOutputArgs, opts ...pulumi.InvokeOption) LookupReportPlanResultOutput {
	outputResult := pulumix.ApplyErr[*LookupReportPlanArgs](args.ToOutput(), func(plainArgs *LookupReportPlanArgs) (*LookupReportPlanResult, error) {
		return LookupReportPlan(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupReportPlanResultOutput, *LookupReportPlanResult](outputResult)
}

// A collection of arguments for invoking getReportPlan.
type LookupReportPlanOutputArgs struct {
	// Backup report plan name.
	Name pulumix.Input[string] `pulumi:"name"`
	// Metadata that you can assign to help organize the report plans you create.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupReportPlanOutputArgs) ToOutput() pulumix.Output[*LookupReportPlanArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupReportPlanArgs {
		return &LookupReportPlanArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupReportPlanResultOutput struct{ *pulumi.OutputState }

func (LookupReportPlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReportPlanResult)(nil)).Elem()
}

func (o LookupReportPlanResultOutput) ToOutput(context.Context) pulumix.Output[*LookupReportPlanResult] {
	return pulumix.Output[*LookupReportPlanResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupReportPlanResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupReportPlanResult](o, func(v *LookupReportPlanResult) string { return v.Arn })
}

func (o LookupReportPlanResultOutput) CreationTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupReportPlanResult](o, func(v *LookupReportPlanResult) string { return v.CreationTime })
}

func (o LookupReportPlanResultOutput) DeploymentStatus() pulumix.Output[string] {
	return pulumix.Apply[*LookupReportPlanResult](o, func(v *LookupReportPlanResult) string { return v.DeploymentStatus })
}

func (o LookupReportPlanResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupReportPlanResult](o, func(v *LookupReportPlanResult) string { return v.Description })
}

func (o LookupReportPlanResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupReportPlanResult](o, func(v *LookupReportPlanResult) string { return v.Id })
}

func (o LookupReportPlanResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupReportPlanResult](o, func(v *LookupReportPlanResult) string { return v.Name })
}

func (o LookupReportPlanResultOutput) ReportDeliveryChannels() pulumix.GArrayOutput[GetReportPlanReportDeliveryChannel, GetReportPlanReportDeliveryChannelOutput] {
	value := pulumix.Apply[*LookupReportPlanResult](o, func(v *LookupReportPlanResult) []GetReportPlanReportDeliveryChannel { return v.ReportDeliveryChannels })
	return pulumix.GArrayOutput[GetReportPlanReportDeliveryChannel, GetReportPlanReportDeliveryChannelOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupReportPlanResultOutput) ReportSettings() pulumix.GArrayOutput[GetReportPlanReportSetting, GetReportPlanReportSettingOutput] {
	value := pulumix.Apply[*LookupReportPlanResult](o, func(v *LookupReportPlanResult) []GetReportPlanReportSetting { return v.ReportSettings })
	return pulumix.GArrayOutput[GetReportPlanReportSetting, GetReportPlanReportSettingOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupReportPlanResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupReportPlanResult](o, func(v *LookupReportPlanResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
