// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Amazon API Gateway Version 2 deployment.
// More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html).
//
// > **Note:** Creating a deployment for an API requires at least one `apigatewayv2.Route` resource associated with that API. To avoid race conditions when all resources are being created together, you need to add implicit resource references via the `triggers` argument or explicit resource references using the [resource `dependsOn` meta-argument](https://www.pulumi.com/docs/intro/concepts/programming-model/#dependson).
type Deployment struct {
	pulumi.CustomResourceState

	// API identifier.
	ApiId pulumix.Output[string] `pulumi:"apiId"`
	// Whether the deployment was automatically released.
	AutoDeployed pulumix.Output[bool] `pulumi:"autoDeployed"`
	// Description for the deployment resource. Must be less than or equal to 1024 characters in length.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
	Triggers pulumix.MapOutput[string] `pulumi:"triggers"`
}

// NewDeployment registers a new resource with the given unique name, arguments, and options.
func NewDeployment(ctx *pulumi.Context,
	name string, args *DeploymentArgs, opts ...pulumi.ResourceOption) (*Deployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Deployment
	err := ctx.RegisterResource("aws:apigatewayv2/deployment:Deployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployment gets an existing Deployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentState, opts ...pulumi.ResourceOption) (*Deployment, error) {
	var resource Deployment
	err := ctx.ReadResource("aws:apigatewayv2/deployment:Deployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Deployment resources.
type deploymentState struct {
	// API identifier.
	ApiId *string `pulumi:"apiId"`
	// Whether the deployment was automatically released.
	AutoDeployed *bool `pulumi:"autoDeployed"`
	// Description for the deployment resource. Must be less than or equal to 1024 characters in length.
	Description *string `pulumi:"description"`
	// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
	Triggers map[string]string `pulumi:"triggers"`
}

type DeploymentState struct {
	// API identifier.
	ApiId pulumix.Input[*string]
	// Whether the deployment was automatically released.
	AutoDeployed pulumix.Input[*bool]
	// Description for the deployment resource. Must be less than or equal to 1024 characters in length.
	Description pulumix.Input[*string]
	// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
	Triggers pulumix.Input[map[string]string]
}

func (DeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentState)(nil)).Elem()
}

type deploymentArgs struct {
	// API identifier.
	ApiId string `pulumi:"apiId"`
	// Description for the deployment resource. Must be less than or equal to 1024 characters in length.
	Description *string `pulumi:"description"`
	// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
	Triggers map[string]string `pulumi:"triggers"`
}

// The set of arguments for constructing a Deployment resource.
type DeploymentArgs struct {
	// API identifier.
	ApiId pulumix.Input[string]
	// Description for the deployment resource. Must be less than or equal to 1024 characters in length.
	Description pulumix.Input[*string]
	// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
	Triggers pulumix.Input[map[string]string]
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentArgs)(nil)).Elem()
}

type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToOutput(ctx context.Context) pulumix.Output[Deployment] {
	return pulumix.Output[Deployment]{
		OutputState: o.OutputState,
	}
}

// API identifier.
func (o DeploymentOutput) ApiId() pulumix.Output[string] {
	value := pulumix.Apply[Deployment](o, func(v Deployment) pulumix.Output[string] { return v.ApiId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether the deployment was automatically released.
func (o DeploymentOutput) AutoDeployed() pulumix.Output[bool] {
	value := pulumix.Apply[Deployment](o, func(v Deployment) pulumix.Output[bool] { return v.AutoDeployed })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Description for the deployment resource. Must be less than or equal to 1024 characters in length.
func (o DeploymentOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Deployment](o, func(v Deployment) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
func (o DeploymentOutput) Triggers() pulumix.MapOutput[string] {
	value := pulumix.Apply[Deployment](o, func(v Deployment) pulumix.MapOutput[string] { return v.Triggers })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(DeploymentOutput{})
}
