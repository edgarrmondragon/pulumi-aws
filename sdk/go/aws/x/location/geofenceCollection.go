// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Location Geofence Collection.
type GeofenceCollection struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) for the geofence collection resource. Used when you need to specify a resource across all AWS.
	CollectionArn pulumix.Output[string] `pulumi:"collectionArn"`
	// The name of the geofence collection.
	//
	// The following arguments are optional:
	CollectionName pulumix.Output[string] `pulumi:"collectionName"`
	// The timestamp for when the geofence collection resource was created in ISO 8601 format.
	CreateTime pulumix.Output[string] `pulumi:"createTime"`
	// The optional description for the geofence collection.
	Description pulumix.Output[*string] `pulumi:"description"`
	// A key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	KmsKeyId pulumix.Output[*string] `pulumi:"kmsKeyId"`
	// Key-value tags for the geofence collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The timestamp for when the geofence collection resource was last updated in ISO 8601 format.
	UpdateTime pulumix.Output[string] `pulumi:"updateTime"`
}

// NewGeofenceCollection registers a new resource with the given unique name, arguments, and options.
func NewGeofenceCollection(ctx *pulumi.Context,
	name string, args *GeofenceCollectionArgs, opts ...pulumi.ResourceOption) (*GeofenceCollection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectionName == nil {
		return nil, errors.New("invalid value for required argument 'CollectionName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GeofenceCollection
	err := ctx.RegisterResource("aws:location/geofenceCollection:GeofenceCollection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGeofenceCollection gets an existing GeofenceCollection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGeofenceCollection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GeofenceCollectionState, opts ...pulumi.ResourceOption) (*GeofenceCollection, error) {
	var resource GeofenceCollection
	err := ctx.ReadResource("aws:location/geofenceCollection:GeofenceCollection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GeofenceCollection resources.
type geofenceCollectionState struct {
	// The Amazon Resource Name (ARN) for the geofence collection resource. Used when you need to specify a resource across all AWS.
	CollectionArn *string `pulumi:"collectionArn"`
	// The name of the geofence collection.
	//
	// The following arguments are optional:
	CollectionName *string `pulumi:"collectionName"`
	// The timestamp for when the geofence collection resource was created in ISO 8601 format.
	CreateTime *string `pulumi:"createTime"`
	// The optional description for the geofence collection.
	Description *string `pulumi:"description"`
	// A key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Key-value tags for the geofence collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The timestamp for when the geofence collection resource was last updated in ISO 8601 format.
	UpdateTime *string `pulumi:"updateTime"`
}

type GeofenceCollectionState struct {
	// The Amazon Resource Name (ARN) for the geofence collection resource. Used when you need to specify a resource across all AWS.
	CollectionArn pulumix.Input[*string]
	// The name of the geofence collection.
	//
	// The following arguments are optional:
	CollectionName pulumix.Input[*string]
	// The timestamp for when the geofence collection resource was created in ISO 8601 format.
	CreateTime pulumix.Input[*string]
	// The optional description for the geofence collection.
	Description pulumix.Input[*string]
	// A key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	KmsKeyId pulumix.Input[*string]
	// Key-value tags for the geofence collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// The timestamp for when the geofence collection resource was last updated in ISO 8601 format.
	UpdateTime pulumix.Input[*string]
}

func (GeofenceCollectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*geofenceCollectionState)(nil)).Elem()
}

type geofenceCollectionArgs struct {
	// The name of the geofence collection.
	//
	// The following arguments are optional:
	CollectionName string `pulumi:"collectionName"`
	// The optional description for the geofence collection.
	Description *string `pulumi:"description"`
	// A key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Key-value tags for the geofence collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a GeofenceCollection resource.
type GeofenceCollectionArgs struct {
	// The name of the geofence collection.
	//
	// The following arguments are optional:
	CollectionName pulumix.Input[string]
	// The optional description for the geofence collection.
	Description pulumix.Input[*string]
	// A key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	KmsKeyId pulumix.Input[*string]
	// Key-value tags for the geofence collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (GeofenceCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*geofenceCollectionArgs)(nil)).Elem()
}

type GeofenceCollectionOutput struct{ *pulumi.OutputState }

func (GeofenceCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GeofenceCollection)(nil)).Elem()
}

func (o GeofenceCollectionOutput) ToGeofenceCollectionOutput() GeofenceCollectionOutput {
	return o
}

func (o GeofenceCollectionOutput) ToGeofenceCollectionOutputWithContext(ctx context.Context) GeofenceCollectionOutput {
	return o
}

func (o GeofenceCollectionOutput) ToOutput(ctx context.Context) pulumix.Output[GeofenceCollection] {
	return pulumix.Output[GeofenceCollection]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) for the geofence collection resource. Used when you need to specify a resource across all AWS.
func (o GeofenceCollectionOutput) CollectionArn() pulumix.Output[string] {
	value := pulumix.Apply[GeofenceCollection](o, func(v GeofenceCollection) pulumix.Output[string] { return v.CollectionArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the geofence collection.
//
// The following arguments are optional:
func (o GeofenceCollectionOutput) CollectionName() pulumix.Output[string] {
	value := pulumix.Apply[GeofenceCollection](o, func(v GeofenceCollection) pulumix.Output[string] { return v.CollectionName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The timestamp for when the geofence collection resource was created in ISO 8601 format.
func (o GeofenceCollectionOutput) CreateTime() pulumix.Output[string] {
	value := pulumix.Apply[GeofenceCollection](o, func(v GeofenceCollection) pulumix.Output[string] { return v.CreateTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The optional description for the geofence collection.
func (o GeofenceCollectionOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[GeofenceCollection](o, func(v GeofenceCollection) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
func (o GeofenceCollectionOutput) KmsKeyId() pulumix.Output[*string] {
	value := pulumix.Apply[GeofenceCollection](o, func(v GeofenceCollection) pulumix.Output[*string] { return v.KmsKeyId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Key-value tags for the geofence collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o GeofenceCollectionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[GeofenceCollection](o, func(v GeofenceCollection) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o GeofenceCollectionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[GeofenceCollection](o, func(v GeofenceCollection) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The timestamp for when the geofence collection resource was last updated in ISO 8601 format.
func (o GeofenceCollectionOutput) UpdateTime() pulumix.Output[string] {
	value := pulumix.Apply[GeofenceCollection](o, func(v GeofenceCollection) pulumix.Output[string] { return v.UpdateTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(GeofenceCollectionOutput{})
}
