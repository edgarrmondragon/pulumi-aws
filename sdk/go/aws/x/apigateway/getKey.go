// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the name and value of a pre-existing API Key, for
// example to supply credentials for a dependency microservice.
func GetKey(ctx *pulumi.Context, args *GetKeyArgs, opts ...pulumi.InvokeOption) (*GetKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetKeyResult
	err := ctx.Invoke("aws:apigateway/getKey:getKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKey.
type GetKeyArgs struct {
	// ID of the API Key to look up.
	Id string `pulumi:"id"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getKey.
type GetKeyResult struct {
	// Date and time when the API Key was created.
	CreatedDate string `pulumi:"createdDate"`
	// Description of the API Key.
	Description string `pulumi:"description"`
	// Whether the API Key is enabled.
	Enabled bool `pulumi:"enabled"`
	// Set to the ID of the API Key.
	Id string `pulumi:"id"`
	// Date and time when the API Key was last updated.
	LastUpdatedDate string `pulumi:"lastUpdatedDate"`
	// Set to the name of the API Key.
	Name string `pulumi:"name"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
	// Set to the value of the API Key.
	Value string `pulumi:"value"`
}

func GetKeyOutput(ctx *pulumi.Context, args GetKeyOutputArgs, opts ...pulumi.InvokeOption) GetKeyResultOutput {
	outputResult := pulumix.ApplyErr[*GetKeyArgs](args.ToOutput(), func(plainArgs *GetKeyArgs) (*GetKeyResult, error) {
		return GetKey(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetKeyResultOutput, *GetKeyResult](outputResult)
}

// A collection of arguments for invoking getKey.
type GetKeyOutputArgs struct {
	// ID of the API Key to look up.
	Id pulumix.Input[string] `pulumi:"id"`
	// Map of tags for the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetKeyOutputArgs) ToOutput() pulumix.Output[*GetKeyArgs] {
	allArgs := pulumix.All(
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetKeyArgs {
		return &GetKeyArgs{
			Id:   resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type GetKeyResultOutput struct{ *pulumi.OutputState }

func (GetKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyResult)(nil)).Elem()
}

func (o GetKeyResultOutput) ToOutput(context.Context) pulumix.Output[*GetKeyResult] {
	return pulumix.Output[*GetKeyResult]{
		OutputState: o.OutputState,
	}
}

func (o GetKeyResultOutput) CreatedDate() pulumix.Output[string] {
	return pulumix.Apply[*GetKeyResult](o, func(v *GetKeyResult) string { return v.CreatedDate })
}

func (o GetKeyResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*GetKeyResult](o, func(v *GetKeyResult) string { return v.Description })
}

func (o GetKeyResultOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[*GetKeyResult](o, func(v *GetKeyResult) bool { return v.Enabled })
}

func (o GetKeyResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetKeyResult](o, func(v *GetKeyResult) string { return v.Id })
}

func (o GetKeyResultOutput) LastUpdatedDate() pulumix.Output[string] {
	return pulumix.Apply[*GetKeyResult](o, func(v *GetKeyResult) string { return v.LastUpdatedDate })
}

func (o GetKeyResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*GetKeyResult](o, func(v *GetKeyResult) string { return v.Name })
}

func (o GetKeyResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetKeyResult](o, func(v *GetKeyResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetKeyResultOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[*GetKeyResult](o, func(v *GetKeyResult) string { return v.Value })
}
