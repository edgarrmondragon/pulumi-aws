// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an IAM policy attached to a user.
type UserPolicy struct {
	pulumi.CustomResourceState

	// The name of the policy. If omitted, the provider will assign a random, unique name.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[*string] `pulumi:"namePrefix"`
	// The policy document. This is a JSON formatted string.
	Policy pulumix.Output[string] `pulumi:"policy"`
	// IAM user to which to attach this policy.
	User pulumix.Output[string] `pulumi:"user"`
}

// NewUserPolicy registers a new resource with the given unique name, arguments, and options.
func NewUserPolicy(ctx *pulumi.Context,
	name string, args *UserPolicyArgs, opts ...pulumi.ResourceOption) (*UserPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserPolicy
	err := ctx.RegisterResource("aws:iam/userPolicy:UserPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPolicy gets an existing UserPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPolicyState, opts ...pulumi.ResourceOption) (*UserPolicy, error) {
	var resource UserPolicy
	err := ctx.ReadResource("aws:iam/userPolicy:UserPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPolicy resources.
type userPolicyState struct {
	// The name of the policy. If omitted, the provider will assign a random, unique name.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// The policy document. This is a JSON formatted string.
	Policy interface{} `pulumi:"policy"`
	// IAM user to which to attach this policy.
	User *string `pulumi:"user"`
}

type UserPolicyState struct {
	// The name of the policy. If omitted, the provider will assign a random, unique name.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// The policy document. This is a JSON formatted string.
	Policy pulumix.Input[*any]
	// IAM user to which to attach this policy.
	User pulumix.Input[*string]
}

func (UserPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPolicyState)(nil)).Elem()
}

type userPolicyArgs struct {
	// The name of the policy. If omitted, the provider will assign a random, unique name.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// The policy document. This is a JSON formatted string.
	Policy interface{} `pulumi:"policy"`
	// IAM user to which to attach this policy.
	User string `pulumi:"user"`
}

// The set of arguments for constructing a UserPolicy resource.
type UserPolicyArgs struct {
	// The name of the policy. If omitted, the provider will assign a random, unique name.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// The policy document. This is a JSON formatted string.
	Policy pulumix.Input[any]
	// IAM user to which to attach this policy.
	User pulumix.Input[string]
}

func (UserPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPolicyArgs)(nil)).Elem()
}

type UserPolicyOutput struct{ *pulumi.OutputState }

func (UserPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPolicy)(nil)).Elem()
}

func (o UserPolicyOutput) ToUserPolicyOutput() UserPolicyOutput {
	return o
}

func (o UserPolicyOutput) ToUserPolicyOutputWithContext(ctx context.Context) UserPolicyOutput {
	return o
}

func (o UserPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[UserPolicy] {
	return pulumix.Output[UserPolicy]{
		OutputState: o.OutputState,
	}
}

// The name of the policy. If omitted, the provider will assign a random, unique name.
func (o UserPolicyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[UserPolicy](o, func(v UserPolicy) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o UserPolicyOutput) NamePrefix() pulumix.Output[*string] {
	value := pulumix.Apply[UserPolicy](o, func(v UserPolicy) pulumix.Output[*string] { return v.NamePrefix })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The policy document. This is a JSON formatted string.
func (o UserPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[UserPolicy](o, func(v UserPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// IAM user to which to attach this policy.
func (o UserPolicyOutput) User() pulumix.Output[string] {
	value := pulumix.Apply[UserPolicy](o, func(v UserPolicy) pulumix.Output[string] { return v.User })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(UserPolicyOutput{})
}
