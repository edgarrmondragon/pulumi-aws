// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can be used to fetch information about a specific
// EventBridge event bus. Use this data source to compute the ARN of
// an event bus, given the name of the bus.
func LookupEventBus(ctx *pulumi.Context, args *LookupEventBusArgs, opts ...pulumi.InvokeOption) (*LookupEventBusResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEventBusResult
	err := ctx.Invoke("aws:cloudwatch/getEventBus:getEventBus", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEventBus.
type LookupEventBusArgs struct {
	// Friendly EventBridge event bus name.
	Name string `pulumi:"name"`
}

// A collection of values returned by getEventBus.
type LookupEventBusResult struct {
	// ARN.
	Arn string `pulumi:"arn"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

func LookupEventBusOutput(ctx *pulumi.Context, args LookupEventBusOutputArgs, opts ...pulumi.InvokeOption) LookupEventBusResultOutput {
	outputResult := pulumix.ApplyErr[*LookupEventBusArgs](args.ToOutput(), func(plainArgs *LookupEventBusArgs) (*LookupEventBusResult, error) {
		return LookupEventBus(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupEventBusResultOutput, *LookupEventBusResult](outputResult)
}

// A collection of arguments for invoking getEventBus.
type LookupEventBusOutputArgs struct {
	// Friendly EventBridge event bus name.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupEventBusOutputArgs) ToOutput() pulumix.Output[*LookupEventBusArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupEventBusArgs {
		return &LookupEventBusArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupEventBusResultOutput struct{ *pulumi.OutputState }

func (LookupEventBusResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventBusResult)(nil)).Elem()
}

func (o LookupEventBusResultOutput) ToOutput(context.Context) pulumix.Output[*LookupEventBusResult] {
	return pulumix.Output[*LookupEventBusResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupEventBusResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupEventBusResult](o, func(v *LookupEventBusResult) string { return v.Arn })
}

func (o LookupEventBusResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupEventBusResult](o, func(v *LookupEventBusResult) string { return v.Id })
}

func (o LookupEventBusResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupEventBusResult](o, func(v *LookupEventBusResult) string { return v.Name })
}
