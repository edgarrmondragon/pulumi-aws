// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a SageMaker Device resource.
type Device struct {
	pulumi.CustomResourceState

	AgentVersion pulumix.Output[string] `pulumi:"agentVersion"`
	// The Amazon Resource Name (ARN) assigned by AWS to this Device.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The device to register with SageMaker Edge Manager. See Device details below.
	Device pulumix.GPtrOutput[DeviceDevice, DeviceDeviceOutput] `pulumi:"device"`
	// The name of the Device Fleet.
	DeviceFleetName pulumix.Output[string] `pulumi:"deviceFleetName"`
}

// NewDevice registers a new resource with the given unique name, arguments, and options.
func NewDevice(ctx *pulumi.Context,
	name string, args *DeviceArgs, opts ...pulumi.ResourceOption) (*Device, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Device == nil {
		return nil, errors.New("invalid value for required argument 'Device'")
	}
	if args.DeviceFleetName == nil {
		return nil, errors.New("invalid value for required argument 'DeviceFleetName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Device
	err := ctx.RegisterResource("aws:sagemaker/device:Device", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevice gets an existing Device resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceState, opts ...pulumi.ResourceOption) (*Device, error) {
	var resource Device
	err := ctx.ReadResource("aws:sagemaker/device:Device", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Device resources.
type deviceState struct {
	AgentVersion *string `pulumi:"agentVersion"`
	// The Amazon Resource Name (ARN) assigned by AWS to this Device.
	Arn *string `pulumi:"arn"`
	// The device to register with SageMaker Edge Manager. See Device details below.
	Device *DeviceDevice `pulumi:"device"`
	// The name of the Device Fleet.
	DeviceFleetName *string `pulumi:"deviceFleetName"`
}

type DeviceState struct {
	AgentVersion pulumix.Input[*string]
	// The Amazon Resource Name (ARN) assigned by AWS to this Device.
	Arn pulumix.Input[*string]
	// The device to register with SageMaker Edge Manager. See Device details below.
	Device pulumix.Input[*DeviceDeviceArgs]
	// The name of the Device Fleet.
	DeviceFleetName pulumix.Input[*string]
}

func (DeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceState)(nil)).Elem()
}

type deviceArgs struct {
	// The device to register with SageMaker Edge Manager. See Device details below.
	Device DeviceDevice `pulumi:"device"`
	// The name of the Device Fleet.
	DeviceFleetName string `pulumi:"deviceFleetName"`
}

// The set of arguments for constructing a Device resource.
type DeviceArgs struct {
	// The device to register with SageMaker Edge Manager. See Device details below.
	Device pulumix.Input[*DeviceDeviceArgs]
	// The name of the Device Fleet.
	DeviceFleetName pulumix.Input[string]
}

func (DeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceArgs)(nil)).Elem()
}

type DeviceOutput struct{ *pulumi.OutputState }

func (DeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Device)(nil)).Elem()
}

func (o DeviceOutput) ToDeviceOutput() DeviceOutput {
	return o
}

func (o DeviceOutput) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return o
}

func (o DeviceOutput) ToOutput(ctx context.Context) pulumix.Output[Device] {
	return pulumix.Output[Device]{
		OutputState: o.OutputState,
	}
}

func (o DeviceOutput) AgentVersion() pulumix.Output[string] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.Output[string] { return v.AgentVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) assigned by AWS to this Device.
func (o DeviceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The device to register with SageMaker Edge Manager. See Device details below.
func (o DeviceOutput) Device() pulumix.GPtrOutput[DeviceDevice, DeviceDeviceOutput] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.GPtrOutput[DeviceDevice, DeviceDeviceOutput] { return v.Device })
	unwrapped := pulumix.Flatten[*DeviceDevice, pulumix.GPtrOutput[DeviceDevice, DeviceDeviceOutput]](value)
	return pulumix.GPtrOutput[DeviceDevice, DeviceDeviceOutput]{OutputState: unwrapped.OutputState}
}

// The name of the Device Fleet.
func (o DeviceOutput) DeviceFleetName() pulumix.Output[string] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.Output[string] { return v.DeviceFleetName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DeviceOutput{})
}
