// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfront

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudFront real-time log configuration resource.
type MonitoringSubscription struct {
	pulumi.CustomResourceState

	// The ID of the distribution that you are enabling metrics for.
	DistributionId pulumix.Output[string] `pulumi:"distributionId"`
	// A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
	MonitoringSubscription pulumix.GPtrOutput[MonitoringSubscriptionMonitoringSubscription, MonitoringSubscriptionMonitoringSubscriptionOutput] `pulumi:"monitoringSubscription"`
}

// NewMonitoringSubscription registers a new resource with the given unique name, arguments, and options.
func NewMonitoringSubscription(ctx *pulumi.Context,
	name string, args *MonitoringSubscriptionArgs, opts ...pulumi.ResourceOption) (*MonitoringSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DistributionId == nil {
		return nil, errors.New("invalid value for required argument 'DistributionId'")
	}
	if args.MonitoringSubscription == nil {
		return nil, errors.New("invalid value for required argument 'MonitoringSubscription'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitoringSubscription
	err := ctx.RegisterResource("aws:cloudfront/monitoringSubscription:MonitoringSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoringSubscription gets an existing MonitoringSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoringSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoringSubscriptionState, opts ...pulumi.ResourceOption) (*MonitoringSubscription, error) {
	var resource MonitoringSubscription
	err := ctx.ReadResource("aws:cloudfront/monitoringSubscription:MonitoringSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoringSubscription resources.
type monitoringSubscriptionState struct {
	// The ID of the distribution that you are enabling metrics for.
	DistributionId *string `pulumi:"distributionId"`
	// A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
	MonitoringSubscription *MonitoringSubscriptionMonitoringSubscription `pulumi:"monitoringSubscription"`
}

type MonitoringSubscriptionState struct {
	// The ID of the distribution that you are enabling metrics for.
	DistributionId pulumix.Input[*string]
	// A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
	MonitoringSubscription pulumix.Input[*MonitoringSubscriptionMonitoringSubscriptionArgs]
}

func (MonitoringSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringSubscriptionState)(nil)).Elem()
}

type monitoringSubscriptionArgs struct {
	// The ID of the distribution that you are enabling metrics for.
	DistributionId string `pulumi:"distributionId"`
	// A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
	MonitoringSubscription MonitoringSubscriptionMonitoringSubscription `pulumi:"monitoringSubscription"`
}

// The set of arguments for constructing a MonitoringSubscription resource.
type MonitoringSubscriptionArgs struct {
	// The ID of the distribution that you are enabling metrics for.
	DistributionId pulumix.Input[string]
	// A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
	MonitoringSubscription pulumix.Input[*MonitoringSubscriptionMonitoringSubscriptionArgs]
}

func (MonitoringSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringSubscriptionArgs)(nil)).Elem()
}

type MonitoringSubscriptionOutput struct{ *pulumi.OutputState }

func (MonitoringSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringSubscription)(nil)).Elem()
}

func (o MonitoringSubscriptionOutput) ToMonitoringSubscriptionOutput() MonitoringSubscriptionOutput {
	return o
}

func (o MonitoringSubscriptionOutput) ToMonitoringSubscriptionOutputWithContext(ctx context.Context) MonitoringSubscriptionOutput {
	return o
}

func (o MonitoringSubscriptionOutput) ToOutput(ctx context.Context) pulumix.Output[MonitoringSubscription] {
	return pulumix.Output[MonitoringSubscription]{
		OutputState: o.OutputState,
	}
}

// The ID of the distribution that you are enabling metrics for.
func (o MonitoringSubscriptionOutput) DistributionId() pulumix.Output[string] {
	value := pulumix.Apply[MonitoringSubscription](o, func(v MonitoringSubscription) pulumix.Output[string] { return v.DistributionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
func (o MonitoringSubscriptionOutput) MonitoringSubscription() pulumix.GPtrOutput[MonitoringSubscriptionMonitoringSubscription, MonitoringSubscriptionMonitoringSubscriptionOutput] {
	value := pulumix.Apply[MonitoringSubscription](o, func(v MonitoringSubscription) pulumix.GPtrOutput[MonitoringSubscriptionMonitoringSubscription, MonitoringSubscriptionMonitoringSubscriptionOutput] {
		return v.MonitoringSubscription
	})
	unwrapped := pulumix.Flatten[*MonitoringSubscriptionMonitoringSubscription, pulumix.GPtrOutput[MonitoringSubscriptionMonitoringSubscription, MonitoringSubscriptionMonitoringSubscriptionOutput]](value)
	return pulumix.GPtrOutput[MonitoringSubscriptionMonitoringSubscription, MonitoringSubscriptionMonitoringSubscriptionOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(MonitoringSubscriptionOutput{})
}
