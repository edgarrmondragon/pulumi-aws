// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a S3 Bucket Notification Configuration. For additional information, see the [Configuring S3 Event Notifications section in the Amazon S3 Developer Guide](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html).
//
// > **NOTE:** S3 Buckets only support a single notification configuration. Declaring multiple `s3.BucketNotification` resources to the same S3 Bucket will cause a perpetual difference in configuration. See the example "Trigger multiple Lambda functions" for an option.
type BucketNotification struct {
	pulumi.CustomResourceState

	// Name of the bucket for notification configuration.
	//
	// The following arguments are optional:
	Bucket pulumix.Output[string] `pulumi:"bucket"`
	// Whether to enable Amazon EventBridge notifications. Defaults to `false`.
	Eventbridge pulumix.Output[*bool] `pulumi:"eventbridge"`
	// Used to configure notifications to a Lambda Function. See below.
	LambdaFunctions pulumix.GArrayOutput[BucketNotificationLambdaFunction, BucketNotificationLambdaFunctionOutput] `pulumi:"lambdaFunctions"`
	// Notification configuration to SQS Queue. See below.
	Queues pulumix.GArrayOutput[BucketNotificationQueue, BucketNotificationQueueOutput] `pulumi:"queues"`
	// Notification configuration to SNS Topic. See below.
	Topics pulumix.GArrayOutput[BucketNotificationTopic, BucketNotificationTopicOutput] `pulumi:"topics"`
}

// NewBucketNotification registers a new resource with the given unique name, arguments, and options.
func NewBucketNotification(ctx *pulumi.Context,
	name string, args *BucketNotificationArgs, opts ...pulumi.ResourceOption) (*BucketNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketNotification
	err := ctx.RegisterResource("aws:s3/bucketNotification:BucketNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketNotification gets an existing BucketNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketNotificationState, opts ...pulumi.ResourceOption) (*BucketNotification, error) {
	var resource BucketNotification
	err := ctx.ReadResource("aws:s3/bucketNotification:BucketNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketNotification resources.
type bucketNotificationState struct {
	// Name of the bucket for notification configuration.
	//
	// The following arguments are optional:
	Bucket *string `pulumi:"bucket"`
	// Whether to enable Amazon EventBridge notifications. Defaults to `false`.
	Eventbridge *bool `pulumi:"eventbridge"`
	// Used to configure notifications to a Lambda Function. See below.
	LambdaFunctions []BucketNotificationLambdaFunction `pulumi:"lambdaFunctions"`
	// Notification configuration to SQS Queue. See below.
	Queues []BucketNotificationQueue `pulumi:"queues"`
	// Notification configuration to SNS Topic. See below.
	Topics []BucketNotificationTopic `pulumi:"topics"`
}

type BucketNotificationState struct {
	// Name of the bucket for notification configuration.
	//
	// The following arguments are optional:
	Bucket pulumix.Input[*string]
	// Whether to enable Amazon EventBridge notifications. Defaults to `false`.
	Eventbridge pulumix.Input[*bool]
	// Used to configure notifications to a Lambda Function. See below.
	LambdaFunctions pulumix.Input[[]*BucketNotificationLambdaFunctionArgs]
	// Notification configuration to SQS Queue. See below.
	Queues pulumix.Input[[]*BucketNotificationQueueArgs]
	// Notification configuration to SNS Topic. See below.
	Topics pulumix.Input[[]*BucketNotificationTopicArgs]
}

func (BucketNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketNotificationState)(nil)).Elem()
}

type bucketNotificationArgs struct {
	// Name of the bucket for notification configuration.
	//
	// The following arguments are optional:
	Bucket string `pulumi:"bucket"`
	// Whether to enable Amazon EventBridge notifications. Defaults to `false`.
	Eventbridge *bool `pulumi:"eventbridge"`
	// Used to configure notifications to a Lambda Function. See below.
	LambdaFunctions []BucketNotificationLambdaFunction `pulumi:"lambdaFunctions"`
	// Notification configuration to SQS Queue. See below.
	Queues []BucketNotificationQueue `pulumi:"queues"`
	// Notification configuration to SNS Topic. See below.
	Topics []BucketNotificationTopic `pulumi:"topics"`
}

// The set of arguments for constructing a BucketNotification resource.
type BucketNotificationArgs struct {
	// Name of the bucket for notification configuration.
	//
	// The following arguments are optional:
	Bucket pulumix.Input[string]
	// Whether to enable Amazon EventBridge notifications. Defaults to `false`.
	Eventbridge pulumix.Input[*bool]
	// Used to configure notifications to a Lambda Function. See below.
	LambdaFunctions pulumix.Input[[]*BucketNotificationLambdaFunctionArgs]
	// Notification configuration to SQS Queue. See below.
	Queues pulumix.Input[[]*BucketNotificationQueueArgs]
	// Notification configuration to SNS Topic. See below.
	Topics pulumix.Input[[]*BucketNotificationTopicArgs]
}

func (BucketNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketNotificationArgs)(nil)).Elem()
}

type BucketNotificationOutput struct{ *pulumi.OutputState }

func (BucketNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketNotification)(nil)).Elem()
}

func (o BucketNotificationOutput) ToBucketNotificationOutput() BucketNotificationOutput {
	return o
}

func (o BucketNotificationOutput) ToBucketNotificationOutputWithContext(ctx context.Context) BucketNotificationOutput {
	return o
}

func (o BucketNotificationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketNotification] {
	return pulumix.Output[BucketNotification]{
		OutputState: o.OutputState,
	}
}

// Name of the bucket for notification configuration.
//
// The following arguments are optional:
func (o BucketNotificationOutput) Bucket() pulumix.Output[string] {
	value := pulumix.Apply[BucketNotification](o, func(v BucketNotification) pulumix.Output[string] { return v.Bucket })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to enable Amazon EventBridge notifications. Defaults to `false`.
func (o BucketNotificationOutput) Eventbridge() pulumix.Output[*bool] {
	value := pulumix.Apply[BucketNotification](o, func(v BucketNotification) pulumix.Output[*bool] { return v.Eventbridge })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Used to configure notifications to a Lambda Function. See below.
func (o BucketNotificationOutput) LambdaFunctions() pulumix.GArrayOutput[BucketNotificationLambdaFunction, BucketNotificationLambdaFunctionOutput] {
	value := pulumix.Apply[BucketNotification](o, func(v BucketNotification) pulumix.GArrayOutput[BucketNotificationLambdaFunction, BucketNotificationLambdaFunctionOutput] {
		return v.LambdaFunctions
	})
	unwrapped := pulumix.Flatten[[]BucketNotificationLambdaFunction, pulumix.GArrayOutput[BucketNotificationLambdaFunction, BucketNotificationLambdaFunctionOutput]](value)
	return pulumix.GArrayOutput[BucketNotificationLambdaFunction, BucketNotificationLambdaFunctionOutput]{OutputState: unwrapped.OutputState}
}

// Notification configuration to SQS Queue. See below.
func (o BucketNotificationOutput) Queues() pulumix.GArrayOutput[BucketNotificationQueue, BucketNotificationQueueOutput] {
	value := pulumix.Apply[BucketNotification](o, func(v BucketNotification) pulumix.GArrayOutput[BucketNotificationQueue, BucketNotificationQueueOutput] {
		return v.Queues
	})
	unwrapped := pulumix.Flatten[[]BucketNotificationQueue, pulumix.GArrayOutput[BucketNotificationQueue, BucketNotificationQueueOutput]](value)
	return pulumix.GArrayOutput[BucketNotificationQueue, BucketNotificationQueueOutput]{OutputState: unwrapped.OutputState}
}

// Notification configuration to SNS Topic. See below.
func (o BucketNotificationOutput) Topics() pulumix.GArrayOutput[BucketNotificationTopic, BucketNotificationTopicOutput] {
	value := pulumix.Apply[BucketNotification](o, func(v BucketNotification) pulumix.GArrayOutput[BucketNotificationTopic, BucketNotificationTopicOutput] {
		return v.Topics
	})
	unwrapped := pulumix.Flatten[[]BucketNotificationTopic, pulumix.GArrayOutput[BucketNotificationTopic, BucketNotificationTopicOutput]](value)
	return pulumix.GArrayOutput[BucketNotificationTopic, BucketNotificationTopicOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(BucketNotificationOutput{})
}
