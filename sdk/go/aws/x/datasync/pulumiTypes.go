// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type EfsLocationEc2Config struct {
	// List of Amazon Resource Names (ARNs) of the EC2 Security Groups that are associated with the EFS Mount Target.
	SecurityGroupArns []string `pulumi:"securityGroupArns"`
	// Amazon Resource Name (ARN) of the EC2 Subnet that is associated with the EFS Mount Target.
	SubnetArn string `pulumi:"subnetArn"`
}

type EfsLocationEc2ConfigArgs struct {
	// List of Amazon Resource Names (ARNs) of the EC2 Security Groups that are associated with the EFS Mount Target.
	SecurityGroupArns pulumix.Input[[]string] `pulumi:"securityGroupArns"`
	// Amazon Resource Name (ARN) of the EC2 Subnet that is associated with the EFS Mount Target.
	SubnetArn pulumix.Input[string] `pulumi:"subnetArn"`
}

func (EfsLocationEc2ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EfsLocationEc2Config)(nil)).Elem()
}

func (i EfsLocationEc2ConfigArgs) ToEfsLocationEc2ConfigOutput() EfsLocationEc2ConfigOutput {
	return i.ToEfsLocationEc2ConfigOutputWithContext(context.Background())
}

func (i EfsLocationEc2ConfigArgs) ToEfsLocationEc2ConfigOutputWithContext(ctx context.Context) EfsLocationEc2ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EfsLocationEc2ConfigOutput)
}

func (i *EfsLocationEc2ConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*EfsLocationEc2ConfigArgs] {
	return pulumix.Val(i)
}

type EfsLocationEc2ConfigOutput struct{ *pulumi.OutputState }

func (EfsLocationEc2ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EfsLocationEc2Config)(nil)).Elem()
}

func (o EfsLocationEc2ConfigOutput) ToEfsLocationEc2ConfigOutput() EfsLocationEc2ConfigOutput {
	return o
}

func (o EfsLocationEc2ConfigOutput) ToEfsLocationEc2ConfigOutputWithContext(ctx context.Context) EfsLocationEc2ConfigOutput {
	return o
}

func (o EfsLocationEc2ConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EfsLocationEc2Config] {
	return pulumix.Output[EfsLocationEc2Config]{
		OutputState: o.OutputState,
	}
}

// List of Amazon Resource Names (ARNs) of the EC2 Security Groups that are associated with the EFS Mount Target.
func (o EfsLocationEc2ConfigOutput) SecurityGroupArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EfsLocationEc2Config](o, func(v EfsLocationEc2Config) []string { return v.SecurityGroupArns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Amazon Resource Name (ARN) of the EC2 Subnet that is associated with the EFS Mount Target.
func (o EfsLocationEc2ConfigOutput) SubnetArn() pulumix.Output[string] {
	return pulumix.Apply[EfsLocationEc2Config](o, func(v EfsLocationEc2Config) string { return v.SubnetArn })
}

type FsxOpenZfsFileSystemProtocol struct {
	// Represents the Network File System (NFS) protocol that DataSync uses to access your FSx for OpenZFS file system. See below.
	Nfs FsxOpenZfsFileSystemProtocolNfs `pulumi:"nfs"`
}

type FsxOpenZfsFileSystemProtocolArgs struct {
	// Represents the Network File System (NFS) protocol that DataSync uses to access your FSx for OpenZFS file system. See below.
	Nfs pulumix.Input[*FsxOpenZfsFileSystemProtocolNfsArgs] `pulumi:"nfs"`
}

func (FsxOpenZfsFileSystemProtocolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FsxOpenZfsFileSystemProtocol)(nil)).Elem()
}

func (i FsxOpenZfsFileSystemProtocolArgs) ToFsxOpenZfsFileSystemProtocolOutput() FsxOpenZfsFileSystemProtocolOutput {
	return i.ToFsxOpenZfsFileSystemProtocolOutputWithContext(context.Background())
}

func (i FsxOpenZfsFileSystemProtocolArgs) ToFsxOpenZfsFileSystemProtocolOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsxOpenZfsFileSystemProtocolOutput)
}

func (i *FsxOpenZfsFileSystemProtocolArgs) ToOutput(ctx context.Context) pulumix.Output[*FsxOpenZfsFileSystemProtocolArgs] {
	return pulumix.Val(i)
}

type FsxOpenZfsFileSystemProtocolOutput struct{ *pulumi.OutputState }

func (FsxOpenZfsFileSystemProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FsxOpenZfsFileSystemProtocol)(nil)).Elem()
}

func (o FsxOpenZfsFileSystemProtocolOutput) ToFsxOpenZfsFileSystemProtocolOutput() FsxOpenZfsFileSystemProtocolOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolOutput) ToFsxOpenZfsFileSystemProtocolOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolOutput) ToOutput(ctx context.Context) pulumix.Output[FsxOpenZfsFileSystemProtocol] {
	return pulumix.Output[FsxOpenZfsFileSystemProtocol]{
		OutputState: o.OutputState,
	}
}

// Represents the Network File System (NFS) protocol that DataSync uses to access your FSx for OpenZFS file system. See below.
func (o FsxOpenZfsFileSystemProtocolOutput) Nfs() pulumix.GPtrOutput[FsxOpenZfsFileSystemProtocolNfs, FsxOpenZfsFileSystemProtocolNfsOutput] {
	value := pulumix.Apply[FsxOpenZfsFileSystemProtocol](o, func(v FsxOpenZfsFileSystemProtocol) FsxOpenZfsFileSystemProtocolNfs { return v.Nfs })
	return pulumix.GPtrOutput[FsxOpenZfsFileSystemProtocolNfs, FsxOpenZfsFileSystemProtocolNfsOutput]{OutputState: value.OutputState}
}

type FsxOpenZfsFileSystemProtocolNfs struct {
	// Represents the mount options that are available for DataSync to access an NFS location. See below.
	MountOptions FsxOpenZfsFileSystemProtocolNfsMountOptions `pulumi:"mountOptions"`
}

type FsxOpenZfsFileSystemProtocolNfsArgs struct {
	// Represents the mount options that are available for DataSync to access an NFS location. See below.
	MountOptions pulumix.Input[*FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs] `pulumi:"mountOptions"`
}

func (FsxOpenZfsFileSystemProtocolNfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FsxOpenZfsFileSystemProtocolNfs)(nil)).Elem()
}

func (i FsxOpenZfsFileSystemProtocolNfsArgs) ToFsxOpenZfsFileSystemProtocolNfsOutput() FsxOpenZfsFileSystemProtocolNfsOutput {
	return i.ToFsxOpenZfsFileSystemProtocolNfsOutputWithContext(context.Background())
}

func (i FsxOpenZfsFileSystemProtocolNfsArgs) ToFsxOpenZfsFileSystemProtocolNfsOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsxOpenZfsFileSystemProtocolNfsOutput)
}

func (i *FsxOpenZfsFileSystemProtocolNfsArgs) ToOutput(ctx context.Context) pulumix.Output[*FsxOpenZfsFileSystemProtocolNfsArgs] {
	return pulumix.Val(i)
}

type FsxOpenZfsFileSystemProtocolNfsOutput struct{ *pulumi.OutputState }

func (FsxOpenZfsFileSystemProtocolNfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FsxOpenZfsFileSystemProtocolNfs)(nil)).Elem()
}

func (o FsxOpenZfsFileSystemProtocolNfsOutput) ToFsxOpenZfsFileSystemProtocolNfsOutput() FsxOpenZfsFileSystemProtocolNfsOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolNfsOutput) ToFsxOpenZfsFileSystemProtocolNfsOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolNfsOutput) ToOutput(ctx context.Context) pulumix.Output[FsxOpenZfsFileSystemProtocolNfs] {
	return pulumix.Output[FsxOpenZfsFileSystemProtocolNfs]{
		OutputState: o.OutputState,
	}
}

// Represents the mount options that are available for DataSync to access an NFS location. See below.
func (o FsxOpenZfsFileSystemProtocolNfsOutput) MountOptions() pulumix.GPtrOutput[FsxOpenZfsFileSystemProtocolNfsMountOptions, FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput] {
	value := pulumix.Apply[FsxOpenZfsFileSystemProtocolNfs](o, func(v FsxOpenZfsFileSystemProtocolNfs) FsxOpenZfsFileSystemProtocolNfsMountOptions {
		return v.MountOptions
	})
	return pulumix.GPtrOutput[FsxOpenZfsFileSystemProtocolNfsMountOptions, FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput]{OutputState: value.OutputState}
}

type FsxOpenZfsFileSystemProtocolNfsMountOptions struct {
	// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
	Version *string `pulumi:"version"`
}

type FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs struct {
	// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
	Version pulumix.Input[*string] `pulumi:"version"`
}

func (FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FsxOpenZfsFileSystemProtocolNfsMountOptions)(nil)).Elem()
}

func (i FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsOutput() FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput {
	return i.ToFsxOpenZfsFileSystemProtocolNfsMountOptionsOutputWithContext(context.Background())
}

func (i FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput)
}

func (i *FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs] {
	return pulumix.Val(i)
}

type FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput struct{ *pulumi.OutputState }

func (FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FsxOpenZfsFileSystemProtocolNfsMountOptions)(nil)).Elem()
}

func (o FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsOutput() FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[FsxOpenZfsFileSystemProtocolNfsMountOptions] {
	return pulumix.Output[FsxOpenZfsFileSystemProtocolNfsMountOptions]{
		OutputState: o.OutputState,
	}
}

// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
func (o FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput) Version() pulumix.Output[*string] {
	return pulumix.Apply[FsxOpenZfsFileSystemProtocolNfsMountOptions](o, func(v FsxOpenZfsFileSystemProtocolNfsMountOptions) *string { return v.Version })
}

type LocationAzureBlobSasConfiguration struct {
	// A SAS token that provides permissions to access your Azure Blob Storage.
	Token string `pulumi:"token"`
}

type LocationAzureBlobSasConfigurationArgs struct {
	// A SAS token that provides permissions to access your Azure Blob Storage.
	Token pulumix.Input[string] `pulumi:"token"`
}

func (LocationAzureBlobSasConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationAzureBlobSasConfiguration)(nil)).Elem()
}

func (i LocationAzureBlobSasConfigurationArgs) ToLocationAzureBlobSasConfigurationOutput() LocationAzureBlobSasConfigurationOutput {
	return i.ToLocationAzureBlobSasConfigurationOutputWithContext(context.Background())
}

func (i LocationAzureBlobSasConfigurationArgs) ToLocationAzureBlobSasConfigurationOutputWithContext(ctx context.Context) LocationAzureBlobSasConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationAzureBlobSasConfigurationOutput)
}

func (i *LocationAzureBlobSasConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*LocationAzureBlobSasConfigurationArgs] {
	return pulumix.Val(i)
}

type LocationAzureBlobSasConfigurationOutput struct{ *pulumi.OutputState }

func (LocationAzureBlobSasConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationAzureBlobSasConfiguration)(nil)).Elem()
}

func (o LocationAzureBlobSasConfigurationOutput) ToLocationAzureBlobSasConfigurationOutput() LocationAzureBlobSasConfigurationOutput {
	return o
}

func (o LocationAzureBlobSasConfigurationOutput) ToLocationAzureBlobSasConfigurationOutputWithContext(ctx context.Context) LocationAzureBlobSasConfigurationOutput {
	return o
}

func (o LocationAzureBlobSasConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[LocationAzureBlobSasConfiguration] {
	return pulumix.Output[LocationAzureBlobSasConfiguration]{
		OutputState: o.OutputState,
	}
}

// A SAS token that provides permissions to access your Azure Blob Storage.
func (o LocationAzureBlobSasConfigurationOutput) Token() pulumix.Output[string] {
	return pulumix.Apply[LocationAzureBlobSasConfiguration](o, func(v LocationAzureBlobSasConfiguration) string { return v.Token })
}

type LocationFsxOntapFileSystemProtocol struct {
	// Network File System (NFS) protocol that DataSync uses to access your FSx ONTAP file system. See NFS below.
	Nfs *LocationFsxOntapFileSystemProtocolNfs `pulumi:"nfs"`
	// Server Message Block (SMB) protocol that DataSync uses to access your FSx ONTAP file system. See [SMB] (#smb) below.
	Smb *LocationFsxOntapFileSystemProtocolSmb `pulumi:"smb"`
}

type LocationFsxOntapFileSystemProtocolArgs struct {
	// Network File System (NFS) protocol that DataSync uses to access your FSx ONTAP file system. See NFS below.
	Nfs pulumix.Input[*LocationFsxOntapFileSystemProtocolNfsArgs] `pulumi:"nfs"`
	// Server Message Block (SMB) protocol that DataSync uses to access your FSx ONTAP file system. See [SMB] (#smb) below.
	Smb pulumix.Input[*LocationFsxOntapFileSystemProtocolSmbArgs] `pulumi:"smb"`
}

func (LocationFsxOntapFileSystemProtocolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFsxOntapFileSystemProtocol)(nil)).Elem()
}

func (i LocationFsxOntapFileSystemProtocolArgs) ToLocationFsxOntapFileSystemProtocolOutput() LocationFsxOntapFileSystemProtocolOutput {
	return i.ToLocationFsxOntapFileSystemProtocolOutputWithContext(context.Background())
}

func (i LocationFsxOntapFileSystemProtocolArgs) ToLocationFsxOntapFileSystemProtocolOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFsxOntapFileSystemProtocolOutput)
}

func (i *LocationFsxOntapFileSystemProtocolArgs) ToOutput(ctx context.Context) pulumix.Output[*LocationFsxOntapFileSystemProtocolArgs] {
	return pulumix.Val(i)
}

type LocationFsxOntapFileSystemProtocolOutput struct{ *pulumi.OutputState }

func (LocationFsxOntapFileSystemProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFsxOntapFileSystemProtocol)(nil)).Elem()
}

func (o LocationFsxOntapFileSystemProtocolOutput) ToLocationFsxOntapFileSystemProtocolOutput() LocationFsxOntapFileSystemProtocolOutput {
	return o
}

func (o LocationFsxOntapFileSystemProtocolOutput) ToLocationFsxOntapFileSystemProtocolOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemProtocolOutput {
	return o
}

func (o LocationFsxOntapFileSystemProtocolOutput) ToOutput(ctx context.Context) pulumix.Output[LocationFsxOntapFileSystemProtocol] {
	return pulumix.Output[LocationFsxOntapFileSystemProtocol]{
		OutputState: o.OutputState,
	}
}

// Network File System (NFS) protocol that DataSync uses to access your FSx ONTAP file system. See NFS below.
func (o LocationFsxOntapFileSystemProtocolOutput) Nfs() pulumix.GPtrOutput[LocationFsxOntapFileSystemProtocolNfs, LocationFsxOntapFileSystemProtocolNfsOutput] {
	value := pulumix.Apply[LocationFsxOntapFileSystemProtocol](o, func(v LocationFsxOntapFileSystemProtocol) *LocationFsxOntapFileSystemProtocolNfs { return v.Nfs })
	return pulumix.GPtrOutput[LocationFsxOntapFileSystemProtocolNfs, LocationFsxOntapFileSystemProtocolNfsOutput]{OutputState: value.OutputState}
}

// Server Message Block (SMB) protocol that DataSync uses to access your FSx ONTAP file system. See [SMB] (#smb) below.
func (o LocationFsxOntapFileSystemProtocolOutput) Smb() pulumix.GPtrOutput[LocationFsxOntapFileSystemProtocolSmb, LocationFsxOntapFileSystemProtocolSmbOutput] {
	value := pulumix.Apply[LocationFsxOntapFileSystemProtocol](o, func(v LocationFsxOntapFileSystemProtocol) *LocationFsxOntapFileSystemProtocolSmb { return v.Smb })
	return pulumix.GPtrOutput[LocationFsxOntapFileSystemProtocolSmb, LocationFsxOntapFileSystemProtocolSmbOutput]{OutputState: value.OutputState}
}

type LocationFsxOntapFileSystemProtocolNfs struct {
	// Mount options that are available for DataSync to access an NFS location. See NFS Mount Options below.
	MountOptions LocationFsxOntapFileSystemProtocolNfsMountOptions `pulumi:"mountOptions"`
}

type LocationFsxOntapFileSystemProtocolNfsArgs struct {
	// Mount options that are available for DataSync to access an NFS location. See NFS Mount Options below.
	MountOptions pulumix.Input[*LocationFsxOntapFileSystemProtocolNfsMountOptionsArgs] `pulumi:"mountOptions"`
}

func (LocationFsxOntapFileSystemProtocolNfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFsxOntapFileSystemProtocolNfs)(nil)).Elem()
}

func (i LocationFsxOntapFileSystemProtocolNfsArgs) ToLocationFsxOntapFileSystemProtocolNfsOutput() LocationFsxOntapFileSystemProtocolNfsOutput {
	return i.ToLocationFsxOntapFileSystemProtocolNfsOutputWithContext(context.Background())
}

func (i LocationFsxOntapFileSystemProtocolNfsArgs) ToLocationFsxOntapFileSystemProtocolNfsOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemProtocolNfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFsxOntapFileSystemProtocolNfsOutput)
}

func (i *LocationFsxOntapFileSystemProtocolNfsArgs) ToOutput(ctx context.Context) pulumix.Output[*LocationFsxOntapFileSystemProtocolNfsArgs] {
	return pulumix.Val(i)
}

type LocationFsxOntapFileSystemProtocolNfsOutput struct{ *pulumi.OutputState }

func (LocationFsxOntapFileSystemProtocolNfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFsxOntapFileSystemProtocolNfs)(nil)).Elem()
}

func (o LocationFsxOntapFileSystemProtocolNfsOutput) ToLocationFsxOntapFileSystemProtocolNfsOutput() LocationFsxOntapFileSystemProtocolNfsOutput {
	return o
}

func (o LocationFsxOntapFileSystemProtocolNfsOutput) ToLocationFsxOntapFileSystemProtocolNfsOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemProtocolNfsOutput {
	return o
}

func (o LocationFsxOntapFileSystemProtocolNfsOutput) ToOutput(ctx context.Context) pulumix.Output[LocationFsxOntapFileSystemProtocolNfs] {
	return pulumix.Output[LocationFsxOntapFileSystemProtocolNfs]{
		OutputState: o.OutputState,
	}
}

// Mount options that are available for DataSync to access an NFS location. See NFS Mount Options below.
func (o LocationFsxOntapFileSystemProtocolNfsOutput) MountOptions() pulumix.GPtrOutput[LocationFsxOntapFileSystemProtocolNfsMountOptions, LocationFsxOntapFileSystemProtocolNfsMountOptionsOutput] {
	value := pulumix.Apply[LocationFsxOntapFileSystemProtocolNfs](o, func(v LocationFsxOntapFileSystemProtocolNfs) LocationFsxOntapFileSystemProtocolNfsMountOptions {
		return v.MountOptions
	})
	return pulumix.GPtrOutput[LocationFsxOntapFileSystemProtocolNfsMountOptions, LocationFsxOntapFileSystemProtocolNfsMountOptionsOutput]{OutputState: value.OutputState}
}

type LocationFsxOntapFileSystemProtocolNfsMountOptions struct {
	// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `NFS3`. Default: `NFS3`
	Version *string `pulumi:"version"`
}

type LocationFsxOntapFileSystemProtocolNfsMountOptionsArgs struct {
	// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `NFS3`. Default: `NFS3`
	Version pulumix.Input[*string] `pulumi:"version"`
}

func (LocationFsxOntapFileSystemProtocolNfsMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFsxOntapFileSystemProtocolNfsMountOptions)(nil)).Elem()
}

func (i LocationFsxOntapFileSystemProtocolNfsMountOptionsArgs) ToLocationFsxOntapFileSystemProtocolNfsMountOptionsOutput() LocationFsxOntapFileSystemProtocolNfsMountOptionsOutput {
	return i.ToLocationFsxOntapFileSystemProtocolNfsMountOptionsOutputWithContext(context.Background())
}

func (i LocationFsxOntapFileSystemProtocolNfsMountOptionsArgs) ToLocationFsxOntapFileSystemProtocolNfsMountOptionsOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemProtocolNfsMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFsxOntapFileSystemProtocolNfsMountOptionsOutput)
}

func (i *LocationFsxOntapFileSystemProtocolNfsMountOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*LocationFsxOntapFileSystemProtocolNfsMountOptionsArgs] {
	return pulumix.Val(i)
}

type LocationFsxOntapFileSystemProtocolNfsMountOptionsOutput struct{ *pulumi.OutputState }

func (LocationFsxOntapFileSystemProtocolNfsMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFsxOntapFileSystemProtocolNfsMountOptions)(nil)).Elem()
}

func (o LocationFsxOntapFileSystemProtocolNfsMountOptionsOutput) ToLocationFsxOntapFileSystemProtocolNfsMountOptionsOutput() LocationFsxOntapFileSystemProtocolNfsMountOptionsOutput {
	return o
}

func (o LocationFsxOntapFileSystemProtocolNfsMountOptionsOutput) ToLocationFsxOntapFileSystemProtocolNfsMountOptionsOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemProtocolNfsMountOptionsOutput {
	return o
}

func (o LocationFsxOntapFileSystemProtocolNfsMountOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[LocationFsxOntapFileSystemProtocolNfsMountOptions] {
	return pulumix.Output[LocationFsxOntapFileSystemProtocolNfsMountOptions]{
		OutputState: o.OutputState,
	}
}

// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `NFS3`. Default: `NFS3`
func (o LocationFsxOntapFileSystemProtocolNfsMountOptionsOutput) Version() pulumix.Output[*string] {
	return pulumix.Apply[LocationFsxOntapFileSystemProtocolNfsMountOptions](o, func(v LocationFsxOntapFileSystemProtocolNfsMountOptions) *string { return v.Version })
}

type LocationFsxOntapFileSystemProtocolSmb struct {
	// Fully qualified domain name of the Microsoft Active Directory (AD) that your storage virtual machine belongs to.
	Domain *string `pulumi:"domain"`
	// Mount options that are available for DataSync to access an SMB location. See SMB Mount Options below.
	MountOptions LocationFsxOntapFileSystemProtocolSmbMountOptions `pulumi:"mountOptions"`
	// Password of a user who has permission to access your SVM.
	Password string `pulumi:"password"`
	// Username that can mount the location and access the files, folders, and metadata that you need in the SVM.
	User string `pulumi:"user"`
}

type LocationFsxOntapFileSystemProtocolSmbArgs struct {
	// Fully qualified domain name of the Microsoft Active Directory (AD) that your storage virtual machine belongs to.
	Domain pulumix.Input[*string] `pulumi:"domain"`
	// Mount options that are available for DataSync to access an SMB location. See SMB Mount Options below.
	MountOptions pulumix.Input[*LocationFsxOntapFileSystemProtocolSmbMountOptionsArgs] `pulumi:"mountOptions"`
	// Password of a user who has permission to access your SVM.
	Password pulumix.Input[string] `pulumi:"password"`
	// Username that can mount the location and access the files, folders, and metadata that you need in the SVM.
	User pulumix.Input[string] `pulumi:"user"`
}

func (LocationFsxOntapFileSystemProtocolSmbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFsxOntapFileSystemProtocolSmb)(nil)).Elem()
}

func (i LocationFsxOntapFileSystemProtocolSmbArgs) ToLocationFsxOntapFileSystemProtocolSmbOutput() LocationFsxOntapFileSystemProtocolSmbOutput {
	return i.ToLocationFsxOntapFileSystemProtocolSmbOutputWithContext(context.Background())
}

func (i LocationFsxOntapFileSystemProtocolSmbArgs) ToLocationFsxOntapFileSystemProtocolSmbOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemProtocolSmbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFsxOntapFileSystemProtocolSmbOutput)
}

func (i *LocationFsxOntapFileSystemProtocolSmbArgs) ToOutput(ctx context.Context) pulumix.Output[*LocationFsxOntapFileSystemProtocolSmbArgs] {
	return pulumix.Val(i)
}

type LocationFsxOntapFileSystemProtocolSmbOutput struct{ *pulumi.OutputState }

func (LocationFsxOntapFileSystemProtocolSmbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFsxOntapFileSystemProtocolSmb)(nil)).Elem()
}

func (o LocationFsxOntapFileSystemProtocolSmbOutput) ToLocationFsxOntapFileSystemProtocolSmbOutput() LocationFsxOntapFileSystemProtocolSmbOutput {
	return o
}

func (o LocationFsxOntapFileSystemProtocolSmbOutput) ToLocationFsxOntapFileSystemProtocolSmbOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemProtocolSmbOutput {
	return o
}

func (o LocationFsxOntapFileSystemProtocolSmbOutput) ToOutput(ctx context.Context) pulumix.Output[LocationFsxOntapFileSystemProtocolSmb] {
	return pulumix.Output[LocationFsxOntapFileSystemProtocolSmb]{
		OutputState: o.OutputState,
	}
}

// Fully qualified domain name of the Microsoft Active Directory (AD) that your storage virtual machine belongs to.
func (o LocationFsxOntapFileSystemProtocolSmbOutput) Domain() pulumix.Output[*string] {
	return pulumix.Apply[LocationFsxOntapFileSystemProtocolSmb](o, func(v LocationFsxOntapFileSystemProtocolSmb) *string { return v.Domain })
}

// Mount options that are available for DataSync to access an SMB location. See SMB Mount Options below.
func (o LocationFsxOntapFileSystemProtocolSmbOutput) MountOptions() pulumix.GPtrOutput[LocationFsxOntapFileSystemProtocolSmbMountOptions, LocationFsxOntapFileSystemProtocolSmbMountOptionsOutput] {
	value := pulumix.Apply[LocationFsxOntapFileSystemProtocolSmb](o, func(v LocationFsxOntapFileSystemProtocolSmb) LocationFsxOntapFileSystemProtocolSmbMountOptions {
		return v.MountOptions
	})
	return pulumix.GPtrOutput[LocationFsxOntapFileSystemProtocolSmbMountOptions, LocationFsxOntapFileSystemProtocolSmbMountOptionsOutput]{OutputState: value.OutputState}
}

// Password of a user who has permission to access your SVM.
func (o LocationFsxOntapFileSystemProtocolSmbOutput) Password() pulumix.Output[string] {
	return pulumix.Apply[LocationFsxOntapFileSystemProtocolSmb](o, func(v LocationFsxOntapFileSystemProtocolSmb) string { return v.Password })
}

// Username that can mount the location and access the files, folders, and metadata that you need in the SVM.
func (o LocationFsxOntapFileSystemProtocolSmbOutput) User() pulumix.Output[string] {
	return pulumix.Apply[LocationFsxOntapFileSystemProtocolSmb](o, func(v LocationFsxOntapFileSystemProtocolSmb) string { return v.User })
}

type LocationFsxOntapFileSystemProtocolSmbMountOptions struct {
	// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `NFS3`. Default: `NFS3`
	Version *string `pulumi:"version"`
}

type LocationFsxOntapFileSystemProtocolSmbMountOptionsArgs struct {
	// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `NFS3`. Default: `NFS3`
	Version pulumix.Input[*string] `pulumi:"version"`
}

func (LocationFsxOntapFileSystemProtocolSmbMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFsxOntapFileSystemProtocolSmbMountOptions)(nil)).Elem()
}

func (i LocationFsxOntapFileSystemProtocolSmbMountOptionsArgs) ToLocationFsxOntapFileSystemProtocolSmbMountOptionsOutput() LocationFsxOntapFileSystemProtocolSmbMountOptionsOutput {
	return i.ToLocationFsxOntapFileSystemProtocolSmbMountOptionsOutputWithContext(context.Background())
}

func (i LocationFsxOntapFileSystemProtocolSmbMountOptionsArgs) ToLocationFsxOntapFileSystemProtocolSmbMountOptionsOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemProtocolSmbMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFsxOntapFileSystemProtocolSmbMountOptionsOutput)
}

func (i *LocationFsxOntapFileSystemProtocolSmbMountOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*LocationFsxOntapFileSystemProtocolSmbMountOptionsArgs] {
	return pulumix.Val(i)
}

type LocationFsxOntapFileSystemProtocolSmbMountOptionsOutput struct{ *pulumi.OutputState }

func (LocationFsxOntapFileSystemProtocolSmbMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFsxOntapFileSystemProtocolSmbMountOptions)(nil)).Elem()
}

func (o LocationFsxOntapFileSystemProtocolSmbMountOptionsOutput) ToLocationFsxOntapFileSystemProtocolSmbMountOptionsOutput() LocationFsxOntapFileSystemProtocolSmbMountOptionsOutput {
	return o
}

func (o LocationFsxOntapFileSystemProtocolSmbMountOptionsOutput) ToLocationFsxOntapFileSystemProtocolSmbMountOptionsOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemProtocolSmbMountOptionsOutput {
	return o
}

func (o LocationFsxOntapFileSystemProtocolSmbMountOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[LocationFsxOntapFileSystemProtocolSmbMountOptions] {
	return pulumix.Output[LocationFsxOntapFileSystemProtocolSmbMountOptions]{
		OutputState: o.OutputState,
	}
}

// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `NFS3`. Default: `NFS3`
func (o LocationFsxOntapFileSystemProtocolSmbMountOptionsOutput) Version() pulumix.Output[*string] {
	return pulumix.Apply[LocationFsxOntapFileSystemProtocolSmbMountOptions](o, func(v LocationFsxOntapFileSystemProtocolSmbMountOptions) *string { return v.Version })
}

type LocationHdfsNameNode struct {
	// The hostname of the NameNode in the HDFS cluster. This value is the IP address or Domain Name Service (DNS) name of the NameNode. An agent that's installed on-premises uses this hostname to communicate with the NameNode in the network.
	Hostname string `pulumi:"hostname"`
	// The port that the NameNode uses to listen to client requests.
	Port int `pulumi:"port"`
}

type LocationHdfsNameNodeArgs struct {
	// The hostname of the NameNode in the HDFS cluster. This value is the IP address or Domain Name Service (DNS) name of the NameNode. An agent that's installed on-premises uses this hostname to communicate with the NameNode in the network.
	Hostname pulumix.Input[string] `pulumi:"hostname"`
	// The port that the NameNode uses to listen to client requests.
	Port pulumix.Input[int] `pulumi:"port"`
}

func (LocationHdfsNameNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationHdfsNameNode)(nil)).Elem()
}

func (i LocationHdfsNameNodeArgs) ToLocationHdfsNameNodeOutput() LocationHdfsNameNodeOutput {
	return i.ToLocationHdfsNameNodeOutputWithContext(context.Background())
}

func (i LocationHdfsNameNodeArgs) ToLocationHdfsNameNodeOutputWithContext(ctx context.Context) LocationHdfsNameNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationHdfsNameNodeOutput)
}

func (i *LocationHdfsNameNodeArgs) ToOutput(ctx context.Context) pulumix.Output[*LocationHdfsNameNodeArgs] {
	return pulumix.Val(i)
}

type LocationHdfsNameNodeOutput struct{ *pulumi.OutputState }

func (LocationHdfsNameNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationHdfsNameNode)(nil)).Elem()
}

func (o LocationHdfsNameNodeOutput) ToLocationHdfsNameNodeOutput() LocationHdfsNameNodeOutput {
	return o
}

func (o LocationHdfsNameNodeOutput) ToLocationHdfsNameNodeOutputWithContext(ctx context.Context) LocationHdfsNameNodeOutput {
	return o
}

func (o LocationHdfsNameNodeOutput) ToOutput(ctx context.Context) pulumix.Output[LocationHdfsNameNode] {
	return pulumix.Output[LocationHdfsNameNode]{
		OutputState: o.OutputState,
	}
}

// The hostname of the NameNode in the HDFS cluster. This value is the IP address or Domain Name Service (DNS) name of the NameNode. An agent that's installed on-premises uses this hostname to communicate with the NameNode in the network.
func (o LocationHdfsNameNodeOutput) Hostname() pulumix.Output[string] {
	return pulumix.Apply[LocationHdfsNameNode](o, func(v LocationHdfsNameNode) string { return v.Hostname })
}

// The port that the NameNode uses to listen to client requests.
func (o LocationHdfsNameNodeOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[LocationHdfsNameNode](o, func(v LocationHdfsNameNode) int { return v.Port })
}

type LocationHdfsQopConfiguration struct {
	// The data transfer protection setting configured on the HDFS cluster. This setting corresponds to your dfs.data.transfer.protection setting in the hdfs-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
	DataTransferProtection *string `pulumi:"dataTransferProtection"`
	// The RPC protection setting configured on the HDFS cluster. This setting corresponds to your hadoop.rpc.protection setting in your core-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
	RpcProtection *string `pulumi:"rpcProtection"`
}

type LocationHdfsQopConfigurationArgs struct {
	// The data transfer protection setting configured on the HDFS cluster. This setting corresponds to your dfs.data.transfer.protection setting in the hdfs-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
	DataTransferProtection pulumix.Input[*string] `pulumi:"dataTransferProtection"`
	// The RPC protection setting configured on the HDFS cluster. This setting corresponds to your hadoop.rpc.protection setting in your core-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
	RpcProtection pulumix.Input[*string] `pulumi:"rpcProtection"`
}

func (LocationHdfsQopConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationHdfsQopConfiguration)(nil)).Elem()
}

func (i LocationHdfsQopConfigurationArgs) ToLocationHdfsQopConfigurationOutput() LocationHdfsQopConfigurationOutput {
	return i.ToLocationHdfsQopConfigurationOutputWithContext(context.Background())
}

func (i LocationHdfsQopConfigurationArgs) ToLocationHdfsQopConfigurationOutputWithContext(ctx context.Context) LocationHdfsQopConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationHdfsQopConfigurationOutput)
}

func (i *LocationHdfsQopConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*LocationHdfsQopConfigurationArgs] {
	return pulumix.Val(i)
}

type LocationHdfsQopConfigurationOutput struct{ *pulumi.OutputState }

func (LocationHdfsQopConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationHdfsQopConfiguration)(nil)).Elem()
}

func (o LocationHdfsQopConfigurationOutput) ToLocationHdfsQopConfigurationOutput() LocationHdfsQopConfigurationOutput {
	return o
}

func (o LocationHdfsQopConfigurationOutput) ToLocationHdfsQopConfigurationOutputWithContext(ctx context.Context) LocationHdfsQopConfigurationOutput {
	return o
}

func (o LocationHdfsQopConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[LocationHdfsQopConfiguration] {
	return pulumix.Output[LocationHdfsQopConfiguration]{
		OutputState: o.OutputState,
	}
}

// The data transfer protection setting configured on the HDFS cluster. This setting corresponds to your dfs.data.transfer.protection setting in the hdfs-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
func (o LocationHdfsQopConfigurationOutput) DataTransferProtection() pulumix.Output[*string] {
	return pulumix.Apply[LocationHdfsQopConfiguration](o, func(v LocationHdfsQopConfiguration) *string { return v.DataTransferProtection })
}

// The RPC protection setting configured on the HDFS cluster. This setting corresponds to your hadoop.rpc.protection setting in your core-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
func (o LocationHdfsQopConfigurationOutput) RpcProtection() pulumix.Output[*string] {
	return pulumix.Apply[LocationHdfsQopConfiguration](o, func(v LocationHdfsQopConfiguration) *string { return v.RpcProtection })
}

type LocationSmbMountOptions struct {
	// The specific SMB version that you want DataSync to use for mounting your SMB share. Valid values: `AUTOMATIC`, `SMB2`, and `SMB3`. Default: `AUTOMATIC`
	Version *string `pulumi:"version"`
}

type LocationSmbMountOptionsArgs struct {
	// The specific SMB version that you want DataSync to use for mounting your SMB share. Valid values: `AUTOMATIC`, `SMB2`, and `SMB3`. Default: `AUTOMATIC`
	Version pulumix.Input[*string] `pulumi:"version"`
}

func (LocationSmbMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSmbMountOptions)(nil)).Elem()
}

func (i LocationSmbMountOptionsArgs) ToLocationSmbMountOptionsOutput() LocationSmbMountOptionsOutput {
	return i.ToLocationSmbMountOptionsOutputWithContext(context.Background())
}

func (i LocationSmbMountOptionsArgs) ToLocationSmbMountOptionsOutputWithContext(ctx context.Context) LocationSmbMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSmbMountOptionsOutput)
}

func (i *LocationSmbMountOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*LocationSmbMountOptionsArgs] {
	return pulumix.Val(i)
}

type LocationSmbMountOptionsOutput struct{ *pulumi.OutputState }

func (LocationSmbMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSmbMountOptions)(nil)).Elem()
}

func (o LocationSmbMountOptionsOutput) ToLocationSmbMountOptionsOutput() LocationSmbMountOptionsOutput {
	return o
}

func (o LocationSmbMountOptionsOutput) ToLocationSmbMountOptionsOutputWithContext(ctx context.Context) LocationSmbMountOptionsOutput {
	return o
}

func (o LocationSmbMountOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[LocationSmbMountOptions] {
	return pulumix.Output[LocationSmbMountOptions]{
		OutputState: o.OutputState,
	}
}

// The specific SMB version that you want DataSync to use for mounting your SMB share. Valid values: `AUTOMATIC`, `SMB2`, and `SMB3`. Default: `AUTOMATIC`
func (o LocationSmbMountOptionsOutput) Version() pulumix.Output[*string] {
	return pulumix.Apply[LocationSmbMountOptions](o, func(v LocationSmbMountOptions) *string { return v.Version })
}

type NfsLocationMountOptions struct {
	// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
	Version *string `pulumi:"version"`
}

type NfsLocationMountOptionsArgs struct {
	// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
	Version pulumix.Input[*string] `pulumi:"version"`
}

func (NfsLocationMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsLocationMountOptions)(nil)).Elem()
}

func (i NfsLocationMountOptionsArgs) ToNfsLocationMountOptionsOutput() NfsLocationMountOptionsOutput {
	return i.ToNfsLocationMountOptionsOutputWithContext(context.Background())
}

func (i NfsLocationMountOptionsArgs) ToNfsLocationMountOptionsOutputWithContext(ctx context.Context) NfsLocationMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsLocationMountOptionsOutput)
}

func (i *NfsLocationMountOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*NfsLocationMountOptionsArgs] {
	return pulumix.Val(i)
}

type NfsLocationMountOptionsOutput struct{ *pulumi.OutputState }

func (NfsLocationMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsLocationMountOptions)(nil)).Elem()
}

func (o NfsLocationMountOptionsOutput) ToNfsLocationMountOptionsOutput() NfsLocationMountOptionsOutput {
	return o
}

func (o NfsLocationMountOptionsOutput) ToNfsLocationMountOptionsOutputWithContext(ctx context.Context) NfsLocationMountOptionsOutput {
	return o
}

func (o NfsLocationMountOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[NfsLocationMountOptions] {
	return pulumix.Output[NfsLocationMountOptions]{
		OutputState: o.OutputState,
	}
}

// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
func (o NfsLocationMountOptionsOutput) Version() pulumix.Output[*string] {
	return pulumix.Apply[NfsLocationMountOptions](o, func(v NfsLocationMountOptions) *string { return v.Version })
}

type NfsLocationOnPremConfig struct {
	// List of Amazon Resource Names (ARNs) of the DataSync Agents used to connect to the NFS server.
	AgentArns []string `pulumi:"agentArns"`
}

type NfsLocationOnPremConfigArgs struct {
	// List of Amazon Resource Names (ARNs) of the DataSync Agents used to connect to the NFS server.
	AgentArns pulumix.Input[[]string] `pulumi:"agentArns"`
}

func (NfsLocationOnPremConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsLocationOnPremConfig)(nil)).Elem()
}

func (i NfsLocationOnPremConfigArgs) ToNfsLocationOnPremConfigOutput() NfsLocationOnPremConfigOutput {
	return i.ToNfsLocationOnPremConfigOutputWithContext(context.Background())
}

func (i NfsLocationOnPremConfigArgs) ToNfsLocationOnPremConfigOutputWithContext(ctx context.Context) NfsLocationOnPremConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsLocationOnPremConfigOutput)
}

func (i *NfsLocationOnPremConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*NfsLocationOnPremConfigArgs] {
	return pulumix.Val(i)
}

type NfsLocationOnPremConfigOutput struct{ *pulumi.OutputState }

func (NfsLocationOnPremConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsLocationOnPremConfig)(nil)).Elem()
}

func (o NfsLocationOnPremConfigOutput) ToNfsLocationOnPremConfigOutput() NfsLocationOnPremConfigOutput {
	return o
}

func (o NfsLocationOnPremConfigOutput) ToNfsLocationOnPremConfigOutputWithContext(ctx context.Context) NfsLocationOnPremConfigOutput {
	return o
}

func (o NfsLocationOnPremConfigOutput) ToOutput(ctx context.Context) pulumix.Output[NfsLocationOnPremConfig] {
	return pulumix.Output[NfsLocationOnPremConfig]{
		OutputState: o.OutputState,
	}
}

// List of Amazon Resource Names (ARNs) of the DataSync Agents used to connect to the NFS server.
func (o NfsLocationOnPremConfigOutput) AgentArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NfsLocationOnPremConfig](o, func(v NfsLocationOnPremConfig) []string { return v.AgentArns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type S3LocationS3Config struct {
	// ARN of the IAM Role used to connect to the S3 Bucket.
	BucketAccessRoleArn string `pulumi:"bucketAccessRoleArn"`
}

type S3LocationS3ConfigArgs struct {
	// ARN of the IAM Role used to connect to the S3 Bucket.
	BucketAccessRoleArn pulumix.Input[string] `pulumi:"bucketAccessRoleArn"`
}

func (S3LocationS3ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3LocationS3Config)(nil)).Elem()
}

func (i S3LocationS3ConfigArgs) ToS3LocationS3ConfigOutput() S3LocationS3ConfigOutput {
	return i.ToS3LocationS3ConfigOutputWithContext(context.Background())
}

func (i S3LocationS3ConfigArgs) ToS3LocationS3ConfigOutputWithContext(ctx context.Context) S3LocationS3ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3LocationS3ConfigOutput)
}

func (i *S3LocationS3ConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*S3LocationS3ConfigArgs] {
	return pulumix.Val(i)
}

type S3LocationS3ConfigOutput struct{ *pulumi.OutputState }

func (S3LocationS3ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3LocationS3Config)(nil)).Elem()
}

func (o S3LocationS3ConfigOutput) ToS3LocationS3ConfigOutput() S3LocationS3ConfigOutput {
	return o
}

func (o S3LocationS3ConfigOutput) ToS3LocationS3ConfigOutputWithContext(ctx context.Context) S3LocationS3ConfigOutput {
	return o
}

func (o S3LocationS3ConfigOutput) ToOutput(ctx context.Context) pulumix.Output[S3LocationS3Config] {
	return pulumix.Output[S3LocationS3Config]{
		OutputState: o.OutputState,
	}
}

// ARN of the IAM Role used to connect to the S3 Bucket.
func (o S3LocationS3ConfigOutput) BucketAccessRoleArn() pulumix.Output[string] {
	return pulumix.Apply[S3LocationS3Config](o, func(v S3LocationS3Config) string { return v.BucketAccessRoleArn })
}

type TaskExcludes struct {
	// The type of filter rule to apply. Valid values: `SIMPLE_PATTERN`.
	FilterType *string `pulumi:"filterType"`
	// A single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example: `/folder1|/folder2`
	Value *string `pulumi:"value"`
}

type TaskExcludesArgs struct {
	// The type of filter rule to apply. Valid values: `SIMPLE_PATTERN`.
	FilterType pulumix.Input[*string] `pulumi:"filterType"`
	// A single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example: `/folder1|/folder2`
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (TaskExcludesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskExcludes)(nil)).Elem()
}

func (i TaskExcludesArgs) ToTaskExcludesOutput() TaskExcludesOutput {
	return i.ToTaskExcludesOutputWithContext(context.Background())
}

func (i TaskExcludesArgs) ToTaskExcludesOutputWithContext(ctx context.Context) TaskExcludesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskExcludesOutput)
}

func (i *TaskExcludesArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskExcludesArgs] {
	return pulumix.Val(i)
}

type TaskExcludesOutput struct{ *pulumi.OutputState }

func (TaskExcludesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskExcludes)(nil)).Elem()
}

func (o TaskExcludesOutput) ToTaskExcludesOutput() TaskExcludesOutput {
	return o
}

func (o TaskExcludesOutput) ToTaskExcludesOutputWithContext(ctx context.Context) TaskExcludesOutput {
	return o
}

func (o TaskExcludesOutput) ToOutput(ctx context.Context) pulumix.Output[TaskExcludes] {
	return pulumix.Output[TaskExcludes]{
		OutputState: o.OutputState,
	}
}

// The type of filter rule to apply. Valid values: `SIMPLE_PATTERN`.
func (o TaskExcludesOutput) FilterType() pulumix.Output[*string] {
	return pulumix.Apply[TaskExcludes](o, func(v TaskExcludes) *string { return v.FilterType })
}

// A single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example: `/folder1|/folder2`
func (o TaskExcludesOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[TaskExcludes](o, func(v TaskExcludes) *string { return v.Value })
}

type TaskIncludes struct {
	// The type of filter rule to apply. Valid values: `SIMPLE_PATTERN`.
	FilterType *string `pulumi:"filterType"`
	// A single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example: `/folder1|/folder2`
	Value *string `pulumi:"value"`
}

type TaskIncludesArgs struct {
	// The type of filter rule to apply. Valid values: `SIMPLE_PATTERN`.
	FilterType pulumix.Input[*string] `pulumi:"filterType"`
	// A single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example: `/folder1|/folder2`
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (TaskIncludesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskIncludes)(nil)).Elem()
}

func (i TaskIncludesArgs) ToTaskIncludesOutput() TaskIncludesOutput {
	return i.ToTaskIncludesOutputWithContext(context.Background())
}

func (i TaskIncludesArgs) ToTaskIncludesOutputWithContext(ctx context.Context) TaskIncludesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskIncludesOutput)
}

func (i *TaskIncludesArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskIncludesArgs] {
	return pulumix.Val(i)
}

type TaskIncludesOutput struct{ *pulumi.OutputState }

func (TaskIncludesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskIncludes)(nil)).Elem()
}

func (o TaskIncludesOutput) ToTaskIncludesOutput() TaskIncludesOutput {
	return o
}

func (o TaskIncludesOutput) ToTaskIncludesOutputWithContext(ctx context.Context) TaskIncludesOutput {
	return o
}

func (o TaskIncludesOutput) ToOutput(ctx context.Context) pulumix.Output[TaskIncludes] {
	return pulumix.Output[TaskIncludes]{
		OutputState: o.OutputState,
	}
}

// The type of filter rule to apply. Valid values: `SIMPLE_PATTERN`.
func (o TaskIncludesOutput) FilterType() pulumix.Output[*string] {
	return pulumix.Apply[TaskIncludes](o, func(v TaskIncludes) *string { return v.FilterType })
}

// A single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example: `/folder1|/folder2`
func (o TaskIncludesOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[TaskIncludes](o, func(v TaskIncludes) *string { return v.Value })
}

type TaskOptions struct {
	// A file metadata that shows the last time a file was accessed (that is when the file was read or written to). If set to `BEST_EFFORT`, the DataSync Task attempts to preserve the original (that is, the version before sync `PREPARING` phase) `atime` attribute on all source files. Valid values: `BEST_EFFORT`, `NONE`. Default: `BEST_EFFORT`.
	Atime *string `pulumi:"atime"`
	// Limits the bandwidth utilized. For example, to set a maximum of 1 MB, set this value to `1048576`. Value values: `-1` or greater. Default: `-1` (unlimited).
	BytesPerSecond *int `pulumi:"bytesPerSecond"`
	// Group identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
	Gid *string `pulumi:"gid"`
	// Determines the type of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide. Valid values: `OFF`, `BASIC`, `TRANSFER`. Default: `OFF`.
	LogLevel *string `pulumi:"logLevel"`
	// A file metadata that indicates the last time a file was modified (written to) before the sync `PREPARING` phase. Value values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
	Mtime *string `pulumi:"mtime"`
	// Specifies whether object tags are maintained when transferring between object storage systems. If you want your DataSync task to ignore object tags, specify the NONE value. Valid values: `PRESERVE`, `NONE`. Default value: `PRESERVE`.
	ObjectTags *string `pulumi:"objectTags"`
	// Determines whether files at the destination should be overwritten or preserved when copying files. Valid values: `ALWAYS`, `NEVER`. Default: `ALWAYS`.
	OverwriteMode *string `pulumi:"overwriteMode"`
	// Determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. Valid values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
	PosixPermissions *string `pulumi:"posixPermissions"`
	// Whether files deleted in the source should be removed or preserved in the destination file system. Valid values: `PRESERVE`, `REMOVE`. Default: `PRESERVE`.
	PreserveDeletedFiles *string `pulumi:"preserveDeletedFiles"`
	// Whether the DataSync Task should preserve the metadata of block and character devices in the source files system, and recreate the files with that device name and metadata on the destination. The DataSync Task can’t sync the actual contents of such devices, because many of the devices are non-terminal and don’t return an end of file (EOF) marker. Valid values: `NONE`, `PRESERVE`. Default: `NONE` (ignore special devices).
	PreserveDevices *string `pulumi:"preserveDevices"`
	// Determines which components of the SMB security descriptor are copied from source to destination objects. This value is only used for transfers between SMB and Amazon FSx for Windows File Server locations, or between two Amazon FSx for Windows File Server locations. Valid values: `NONE`, `OWNER_DACL`, `OWNER_DACL_SACL`. Default: `OWNER_DACL`.
	SecurityDescriptorCopyFlags *string `pulumi:"securityDescriptorCopyFlags"`
	// Determines whether tasks should be queued before executing the tasks. Valid values: `ENABLED`, `DISABLED`. Default `ENABLED`.
	TaskQueueing *string `pulumi:"taskQueueing"`
	// Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location. Valid values: `CHANGED`, `ALL`. Default: `CHANGED`
	TransferMode *string `pulumi:"transferMode"`
	// User identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
	Uid *string `pulumi:"uid"`
	// Whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred. Valid values: `NONE`, `POINT_IN_TIME_CONSISTENT`, `ONLY_FILES_TRANSFERRED`. Default: `POINT_IN_TIME_CONSISTENT`.
	VerifyMode *string `pulumi:"verifyMode"`
}

type TaskOptionsArgs struct {
	// A file metadata that shows the last time a file was accessed (that is when the file was read or written to). If set to `BEST_EFFORT`, the DataSync Task attempts to preserve the original (that is, the version before sync `PREPARING` phase) `atime` attribute on all source files. Valid values: `BEST_EFFORT`, `NONE`. Default: `BEST_EFFORT`.
	Atime pulumix.Input[*string] `pulumi:"atime"`
	// Limits the bandwidth utilized. For example, to set a maximum of 1 MB, set this value to `1048576`. Value values: `-1` or greater. Default: `-1` (unlimited).
	BytesPerSecond pulumix.Input[*int] `pulumi:"bytesPerSecond"`
	// Group identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
	Gid pulumix.Input[*string] `pulumi:"gid"`
	// Determines the type of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide. Valid values: `OFF`, `BASIC`, `TRANSFER`. Default: `OFF`.
	LogLevel pulumix.Input[*string] `pulumi:"logLevel"`
	// A file metadata that indicates the last time a file was modified (written to) before the sync `PREPARING` phase. Value values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
	Mtime pulumix.Input[*string] `pulumi:"mtime"`
	// Specifies whether object tags are maintained when transferring between object storage systems. If you want your DataSync task to ignore object tags, specify the NONE value. Valid values: `PRESERVE`, `NONE`. Default value: `PRESERVE`.
	ObjectTags pulumix.Input[*string] `pulumi:"objectTags"`
	// Determines whether files at the destination should be overwritten or preserved when copying files. Valid values: `ALWAYS`, `NEVER`. Default: `ALWAYS`.
	OverwriteMode pulumix.Input[*string] `pulumi:"overwriteMode"`
	// Determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. Valid values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
	PosixPermissions pulumix.Input[*string] `pulumi:"posixPermissions"`
	// Whether files deleted in the source should be removed or preserved in the destination file system. Valid values: `PRESERVE`, `REMOVE`. Default: `PRESERVE`.
	PreserveDeletedFiles pulumix.Input[*string] `pulumi:"preserveDeletedFiles"`
	// Whether the DataSync Task should preserve the metadata of block and character devices in the source files system, and recreate the files with that device name and metadata on the destination. The DataSync Task can’t sync the actual contents of such devices, because many of the devices are non-terminal and don’t return an end of file (EOF) marker. Valid values: `NONE`, `PRESERVE`. Default: `NONE` (ignore special devices).
	PreserveDevices pulumix.Input[*string] `pulumi:"preserveDevices"`
	// Determines which components of the SMB security descriptor are copied from source to destination objects. This value is only used for transfers between SMB and Amazon FSx for Windows File Server locations, or between two Amazon FSx for Windows File Server locations. Valid values: `NONE`, `OWNER_DACL`, `OWNER_DACL_SACL`. Default: `OWNER_DACL`.
	SecurityDescriptorCopyFlags pulumix.Input[*string] `pulumi:"securityDescriptorCopyFlags"`
	// Determines whether tasks should be queued before executing the tasks. Valid values: `ENABLED`, `DISABLED`. Default `ENABLED`.
	TaskQueueing pulumix.Input[*string] `pulumi:"taskQueueing"`
	// Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location. Valid values: `CHANGED`, `ALL`. Default: `CHANGED`
	TransferMode pulumix.Input[*string] `pulumi:"transferMode"`
	// User identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
	Uid pulumix.Input[*string] `pulumi:"uid"`
	// Whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred. Valid values: `NONE`, `POINT_IN_TIME_CONSISTENT`, `ONLY_FILES_TRANSFERRED`. Default: `POINT_IN_TIME_CONSISTENT`.
	VerifyMode pulumix.Input[*string] `pulumi:"verifyMode"`
}

func (TaskOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskOptions)(nil)).Elem()
}

func (i TaskOptionsArgs) ToTaskOptionsOutput() TaskOptionsOutput {
	return i.ToTaskOptionsOutputWithContext(context.Background())
}

func (i TaskOptionsArgs) ToTaskOptionsOutputWithContext(ctx context.Context) TaskOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOptionsOutput)
}

func (i *TaskOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskOptionsArgs] {
	return pulumix.Val(i)
}

type TaskOptionsOutput struct{ *pulumi.OutputState }

func (TaskOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskOptions)(nil)).Elem()
}

func (o TaskOptionsOutput) ToTaskOptionsOutput() TaskOptionsOutput {
	return o
}

func (o TaskOptionsOutput) ToTaskOptionsOutputWithContext(ctx context.Context) TaskOptionsOutput {
	return o
}

func (o TaskOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[TaskOptions] {
	return pulumix.Output[TaskOptions]{
		OutputState: o.OutputState,
	}
}

// A file metadata that shows the last time a file was accessed (that is when the file was read or written to). If set to `BEST_EFFORT`, the DataSync Task attempts to preserve the original (that is, the version before sync `PREPARING` phase) `atime` attribute on all source files. Valid values: `BEST_EFFORT`, `NONE`. Default: `BEST_EFFORT`.
func (o TaskOptionsOutput) Atime() pulumix.Output[*string] {
	return pulumix.Apply[TaskOptions](o, func(v TaskOptions) *string { return v.Atime })
}

// Limits the bandwidth utilized. For example, to set a maximum of 1 MB, set this value to `1048576`. Value values: `-1` or greater. Default: `-1` (unlimited).
func (o TaskOptionsOutput) BytesPerSecond() pulumix.Output[*int] {
	return pulumix.Apply[TaskOptions](o, func(v TaskOptions) *int { return v.BytesPerSecond })
}

// Group identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
func (o TaskOptionsOutput) Gid() pulumix.Output[*string] {
	return pulumix.Apply[TaskOptions](o, func(v TaskOptions) *string { return v.Gid })
}

// Determines the type of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide. Valid values: `OFF`, `BASIC`, `TRANSFER`. Default: `OFF`.
func (o TaskOptionsOutput) LogLevel() pulumix.Output[*string] {
	return pulumix.Apply[TaskOptions](o, func(v TaskOptions) *string { return v.LogLevel })
}

// A file metadata that indicates the last time a file was modified (written to) before the sync `PREPARING` phase. Value values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
func (o TaskOptionsOutput) Mtime() pulumix.Output[*string] {
	return pulumix.Apply[TaskOptions](o, func(v TaskOptions) *string { return v.Mtime })
}

// Specifies whether object tags are maintained when transferring between object storage systems. If you want your DataSync task to ignore object tags, specify the NONE value. Valid values: `PRESERVE`, `NONE`. Default value: `PRESERVE`.
func (o TaskOptionsOutput) ObjectTags() pulumix.Output[*string] {
	return pulumix.Apply[TaskOptions](o, func(v TaskOptions) *string { return v.ObjectTags })
}

// Determines whether files at the destination should be overwritten or preserved when copying files. Valid values: `ALWAYS`, `NEVER`. Default: `ALWAYS`.
func (o TaskOptionsOutput) OverwriteMode() pulumix.Output[*string] {
	return pulumix.Apply[TaskOptions](o, func(v TaskOptions) *string { return v.OverwriteMode })
}

// Determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. Valid values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
func (o TaskOptionsOutput) PosixPermissions() pulumix.Output[*string] {
	return pulumix.Apply[TaskOptions](o, func(v TaskOptions) *string { return v.PosixPermissions })
}

// Whether files deleted in the source should be removed or preserved in the destination file system. Valid values: `PRESERVE`, `REMOVE`. Default: `PRESERVE`.
func (o TaskOptionsOutput) PreserveDeletedFiles() pulumix.Output[*string] {
	return pulumix.Apply[TaskOptions](o, func(v TaskOptions) *string { return v.PreserveDeletedFiles })
}

// Whether the DataSync Task should preserve the metadata of block and character devices in the source files system, and recreate the files with that device name and metadata on the destination. The DataSync Task can’t sync the actual contents of such devices, because many of the devices are non-terminal and don’t return an end of file (EOF) marker. Valid values: `NONE`, `PRESERVE`. Default: `NONE` (ignore special devices).
func (o TaskOptionsOutput) PreserveDevices() pulumix.Output[*string] {
	return pulumix.Apply[TaskOptions](o, func(v TaskOptions) *string { return v.PreserveDevices })
}

// Determines which components of the SMB security descriptor are copied from source to destination objects. This value is only used for transfers between SMB and Amazon FSx for Windows File Server locations, or between two Amazon FSx for Windows File Server locations. Valid values: `NONE`, `OWNER_DACL`, `OWNER_DACL_SACL`. Default: `OWNER_DACL`.
func (o TaskOptionsOutput) SecurityDescriptorCopyFlags() pulumix.Output[*string] {
	return pulumix.Apply[TaskOptions](o, func(v TaskOptions) *string { return v.SecurityDescriptorCopyFlags })
}

// Determines whether tasks should be queued before executing the tasks. Valid values: `ENABLED`, `DISABLED`. Default `ENABLED`.
func (o TaskOptionsOutput) TaskQueueing() pulumix.Output[*string] {
	return pulumix.Apply[TaskOptions](o, func(v TaskOptions) *string { return v.TaskQueueing })
}

// Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location. Valid values: `CHANGED`, `ALL`. Default: `CHANGED`
func (o TaskOptionsOutput) TransferMode() pulumix.Output[*string] {
	return pulumix.Apply[TaskOptions](o, func(v TaskOptions) *string { return v.TransferMode })
}

// User identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
func (o TaskOptionsOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[TaskOptions](o, func(v TaskOptions) *string { return v.Uid })
}

// Whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred. Valid values: `NONE`, `POINT_IN_TIME_CONSISTENT`, `ONLY_FILES_TRANSFERRED`. Default: `POINT_IN_TIME_CONSISTENT`.
func (o TaskOptionsOutput) VerifyMode() pulumix.Output[*string] {
	return pulumix.Apply[TaskOptions](o, func(v TaskOptions) *string { return v.VerifyMode })
}

type TaskSchedule struct {
	// Specifies the schedule you want your task to use for repeated executions. For more information, see [Schedule Expressions for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html).
	ScheduleExpression string `pulumi:"scheduleExpression"`
}

type TaskScheduleArgs struct {
	// Specifies the schedule you want your task to use for repeated executions. For more information, see [Schedule Expressions for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html).
	ScheduleExpression pulumix.Input[string] `pulumi:"scheduleExpression"`
}

func (TaskScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSchedule)(nil)).Elem()
}

func (i TaskScheduleArgs) ToTaskScheduleOutput() TaskScheduleOutput {
	return i.ToTaskScheduleOutputWithContext(context.Background())
}

func (i TaskScheduleArgs) ToTaskScheduleOutputWithContext(ctx context.Context) TaskScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskScheduleOutput)
}

func (i *TaskScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskScheduleArgs] {
	return pulumix.Val(i)
}

type TaskScheduleOutput struct{ *pulumi.OutputState }

func (TaskScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSchedule)(nil)).Elem()
}

func (o TaskScheduleOutput) ToTaskScheduleOutput() TaskScheduleOutput {
	return o
}

func (o TaskScheduleOutput) ToTaskScheduleOutputWithContext(ctx context.Context) TaskScheduleOutput {
	return o
}

func (o TaskScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[TaskSchedule] {
	return pulumix.Output[TaskSchedule]{
		OutputState: o.OutputState,
	}
}

// Specifies the schedule you want your task to use for repeated executions. For more information, see [Schedule Expressions for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html).
func (o TaskScheduleOutput) ScheduleExpression() pulumix.Output[string] {
	return pulumix.Apply[TaskSchedule](o, func(v TaskSchedule) string { return v.ScheduleExpression })
}

func init() {
	pulumi.RegisterOutputType(EfsLocationEc2ConfigOutput{})
	pulumi.RegisterOutputType(FsxOpenZfsFileSystemProtocolOutput{})
	pulumi.RegisterOutputType(FsxOpenZfsFileSystemProtocolNfsOutput{})
	pulumi.RegisterOutputType(FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput{})
	pulumi.RegisterOutputType(LocationAzureBlobSasConfigurationOutput{})
	pulumi.RegisterOutputType(LocationFsxOntapFileSystemProtocolOutput{})
	pulumi.RegisterOutputType(LocationFsxOntapFileSystemProtocolNfsOutput{})
	pulumi.RegisterOutputType(LocationFsxOntapFileSystemProtocolNfsMountOptionsOutput{})
	pulumi.RegisterOutputType(LocationFsxOntapFileSystemProtocolSmbOutput{})
	pulumi.RegisterOutputType(LocationFsxOntapFileSystemProtocolSmbMountOptionsOutput{})
	pulumi.RegisterOutputType(LocationHdfsNameNodeOutput{})
	pulumi.RegisterOutputType(LocationHdfsQopConfigurationOutput{})
	pulumi.RegisterOutputType(LocationSmbMountOptionsOutput{})
	pulumi.RegisterOutputType(NfsLocationMountOptionsOutput{})
	pulumi.RegisterOutputType(NfsLocationOnPremConfigOutput{})
	pulumi.RegisterOutputType(S3LocationS3ConfigOutput{})
	pulumi.RegisterOutputType(TaskExcludesOutput{})
	pulumi.RegisterOutputType(TaskIncludesOutput{})
	pulumi.RegisterOutputType(TaskOptionsOutput{})
	pulumi.RegisterOutputType(TaskScheduleOutput{})
}
