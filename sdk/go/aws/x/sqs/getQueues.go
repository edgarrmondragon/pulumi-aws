// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS SQS (Simple Queue) Queues.
func GetQueues(ctx *pulumi.Context, args *GetQueuesArgs, opts ...pulumi.InvokeOption) (*GetQueuesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetQueuesResult
	err := ctx.Invoke("aws:sqs/getQueues:getQueues", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQueues.
type GetQueuesArgs struct {
	// A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned. Queue URLs and names are case-sensitive.
	QueueNamePrefix *string `pulumi:"queueNamePrefix"`
}

// A collection of values returned by getQueues.
type GetQueuesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id              string  `pulumi:"id"`
	QueueNamePrefix *string `pulumi:"queueNamePrefix"`
	// A list of queue URLs.
	QueueUrls []string `pulumi:"queueUrls"`
}

func GetQueuesOutput(ctx *pulumi.Context, args GetQueuesOutputArgs, opts ...pulumi.InvokeOption) GetQueuesResultOutput {
	outputResult := pulumix.ApplyErr[*GetQueuesArgs](args.ToOutput(), func(plainArgs *GetQueuesArgs) (*GetQueuesResult, error) {
		return GetQueues(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetQueuesResultOutput, *GetQueuesResult](outputResult)
}

// A collection of arguments for invoking getQueues.
type GetQueuesOutputArgs struct {
	// A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned. Queue URLs and names are case-sensitive.
	QueueNamePrefix pulumix.Input[*string] `pulumi:"queueNamePrefix"`
}

func (args GetQueuesOutputArgs) ToOutput() pulumix.Output[*GetQueuesArgs] {
	allArgs := pulumix.All(
		args.QueueNamePrefix.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetQueuesArgs {
		return &GetQueuesArgs{
			QueueNamePrefix: resolvedArgs[0].(*string),
		}
	})
}

type GetQueuesResultOutput struct{ *pulumi.OutputState }

func (GetQueuesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueuesResult)(nil)).Elem()
}

func (o GetQueuesResultOutput) ToOutput(context.Context) pulumix.Output[*GetQueuesResult] {
	return pulumix.Output[*GetQueuesResult]{
		OutputState: o.OutputState,
	}
}

func (o GetQueuesResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetQueuesResult](o, func(v *GetQueuesResult) string { return v.Id })
}

func (o GetQueuesResultOutput) QueueNamePrefix() pulumix.Output[*string] {
	return pulumix.Apply[*GetQueuesResult](o, func(v *GetQueuesResult) *string { return v.QueueNamePrefix })
}

func (o GetQueuesResultOutput) QueueUrls() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetQueuesResult](o, func(v *GetQueuesResult) []string { return v.QueueUrls })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
