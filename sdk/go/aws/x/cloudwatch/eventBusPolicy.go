// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to create an EventBridge resource policy to support cross-account events.
//
// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
//
// > **Note:** The EventBridge bus policy resource  (`cloudwatch.EventBusPolicy`) is incompatible with the EventBridge permission resource (`cloudwatch.EventPermission`) and will overwrite permissions.
type EventBusPolicy struct {
	pulumi.CustomResourceState

	// The name of the event bus to set the permissions on.
	// If you omit this, the permissions are set on the `default` event bus.
	EventBusName pulumix.Output[*string] `pulumi:"eventBusName"`
	// The text of the policy.
	Policy pulumix.Output[string] `pulumi:"policy"`
}

// NewEventBusPolicy registers a new resource with the given unique name, arguments, and options.
func NewEventBusPolicy(ctx *pulumi.Context,
	name string, args *EventBusPolicyArgs, opts ...pulumi.ResourceOption) (*EventBusPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventBusPolicy
	err := ctx.RegisterResource("aws:cloudwatch/eventBusPolicy:EventBusPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventBusPolicy gets an existing EventBusPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventBusPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventBusPolicyState, opts ...pulumi.ResourceOption) (*EventBusPolicy, error) {
	var resource EventBusPolicy
	err := ctx.ReadResource("aws:cloudwatch/eventBusPolicy:EventBusPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventBusPolicy resources.
type eventBusPolicyState struct {
	// The name of the event bus to set the permissions on.
	// If you omit this, the permissions are set on the `default` event bus.
	EventBusName *string `pulumi:"eventBusName"`
	// The text of the policy.
	Policy *string `pulumi:"policy"`
}

type EventBusPolicyState struct {
	// The name of the event bus to set the permissions on.
	// If you omit this, the permissions are set on the `default` event bus.
	EventBusName pulumix.Input[*string]
	// The text of the policy.
	Policy pulumix.Input[*string]
}

func (EventBusPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventBusPolicyState)(nil)).Elem()
}

type eventBusPolicyArgs struct {
	// The name of the event bus to set the permissions on.
	// If you omit this, the permissions are set on the `default` event bus.
	EventBusName *string `pulumi:"eventBusName"`
	// The text of the policy.
	Policy string `pulumi:"policy"`
}

// The set of arguments for constructing a EventBusPolicy resource.
type EventBusPolicyArgs struct {
	// The name of the event bus to set the permissions on.
	// If you omit this, the permissions are set on the `default` event bus.
	EventBusName pulumix.Input[*string]
	// The text of the policy.
	Policy pulumix.Input[string]
}

func (EventBusPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventBusPolicyArgs)(nil)).Elem()
}

type EventBusPolicyOutput struct{ *pulumi.OutputState }

func (EventBusPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventBusPolicy)(nil)).Elem()
}

func (o EventBusPolicyOutput) ToEventBusPolicyOutput() EventBusPolicyOutput {
	return o
}

func (o EventBusPolicyOutput) ToEventBusPolicyOutputWithContext(ctx context.Context) EventBusPolicyOutput {
	return o
}

func (o EventBusPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[EventBusPolicy] {
	return pulumix.Output[EventBusPolicy]{
		OutputState: o.OutputState,
	}
}

// The name of the event bus to set the permissions on.
// If you omit this, the permissions are set on the `default` event bus.
func (o EventBusPolicyOutput) EventBusName() pulumix.Output[*string] {
	value := pulumix.Apply[EventBusPolicy](o, func(v EventBusPolicy) pulumix.Output[*string] { return v.EventBusName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The text of the policy.
func (o EventBusPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[EventBusPolicy](o, func(v EventBusPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(EventBusPolicyOutput{})
}
