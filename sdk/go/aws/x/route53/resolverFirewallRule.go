// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Route 53 Resolver DNS Firewall rule resource.
type ResolverFirewallRule struct {
	pulumi.CustomResourceState

	// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list. Valid values: `ALLOW`, `BLOCK`, `ALERT`.
	Action pulumix.Output[string] `pulumi:"action"`
	// The DNS record's type. This determines the format of the record value that you provided in BlockOverrideDomain. Value values: `CNAME`.
	BlockOverrideDnsType pulumix.Output[*string] `pulumi:"blockOverrideDnsType"`
	// The custom DNS record to send back in response to the query.
	BlockOverrideDomain pulumix.Output[*string] `pulumi:"blockOverrideDomain"`
	// The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Minimum value of 0. Maximum value of 604800.
	BlockOverrideTtl pulumix.Output[*int] `pulumi:"blockOverrideTtl"`
	// The way that you want DNS Firewall to block the request. Valid values: `NODATA`, `NXDOMAIN`, `OVERRIDE`.
	BlockResponse pulumix.Output[*string] `pulumi:"blockResponse"`
	// The ID of the domain list that you want to use in the rule.
	FirewallDomainListId pulumix.Output[string] `pulumi:"firewallDomainListId"`
	// The unique identifier of the firewall rule group where you want to create the rule.
	FirewallRuleGroupId pulumix.Output[string] `pulumi:"firewallRuleGroupId"`
	// A name that lets you identify the rule, to manage and use it.
	Name pulumix.Output[string] `pulumi:"name"`
	// The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.
	Priority pulumix.Output[int] `pulumi:"priority"`
}

// NewResolverFirewallRule registers a new resource with the given unique name, arguments, and options.
func NewResolverFirewallRule(ctx *pulumi.Context,
	name string, args *ResolverFirewallRuleArgs, opts ...pulumi.ResourceOption) (*ResolverFirewallRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.FirewallDomainListId == nil {
		return nil, errors.New("invalid value for required argument 'FirewallDomainListId'")
	}
	if args.FirewallRuleGroupId == nil {
		return nil, errors.New("invalid value for required argument 'FirewallRuleGroupId'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResolverFirewallRule
	err := ctx.RegisterResource("aws:route53/resolverFirewallRule:ResolverFirewallRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverFirewallRule gets an existing ResolverFirewallRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverFirewallRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverFirewallRuleState, opts ...pulumi.ResourceOption) (*ResolverFirewallRule, error) {
	var resource ResolverFirewallRule
	err := ctx.ReadResource("aws:route53/resolverFirewallRule:ResolverFirewallRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverFirewallRule resources.
type resolverFirewallRuleState struct {
	// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list. Valid values: `ALLOW`, `BLOCK`, `ALERT`.
	Action *string `pulumi:"action"`
	// The DNS record's type. This determines the format of the record value that you provided in BlockOverrideDomain. Value values: `CNAME`.
	BlockOverrideDnsType *string `pulumi:"blockOverrideDnsType"`
	// The custom DNS record to send back in response to the query.
	BlockOverrideDomain *string `pulumi:"blockOverrideDomain"`
	// The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Minimum value of 0. Maximum value of 604800.
	BlockOverrideTtl *int `pulumi:"blockOverrideTtl"`
	// The way that you want DNS Firewall to block the request. Valid values: `NODATA`, `NXDOMAIN`, `OVERRIDE`.
	BlockResponse *string `pulumi:"blockResponse"`
	// The ID of the domain list that you want to use in the rule.
	FirewallDomainListId *string `pulumi:"firewallDomainListId"`
	// The unique identifier of the firewall rule group where you want to create the rule.
	FirewallRuleGroupId *string `pulumi:"firewallRuleGroupId"`
	// A name that lets you identify the rule, to manage and use it.
	Name *string `pulumi:"name"`
	// The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.
	Priority *int `pulumi:"priority"`
}

type ResolverFirewallRuleState struct {
	// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list. Valid values: `ALLOW`, `BLOCK`, `ALERT`.
	Action pulumix.Input[*string]
	// The DNS record's type. This determines the format of the record value that you provided in BlockOverrideDomain. Value values: `CNAME`.
	BlockOverrideDnsType pulumix.Input[*string]
	// The custom DNS record to send back in response to the query.
	BlockOverrideDomain pulumix.Input[*string]
	// The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Minimum value of 0. Maximum value of 604800.
	BlockOverrideTtl pulumix.Input[*int]
	// The way that you want DNS Firewall to block the request. Valid values: `NODATA`, `NXDOMAIN`, `OVERRIDE`.
	BlockResponse pulumix.Input[*string]
	// The ID of the domain list that you want to use in the rule.
	FirewallDomainListId pulumix.Input[*string]
	// The unique identifier of the firewall rule group where you want to create the rule.
	FirewallRuleGroupId pulumix.Input[*string]
	// A name that lets you identify the rule, to manage and use it.
	Name pulumix.Input[*string]
	// The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.
	Priority pulumix.Input[*int]
}

func (ResolverFirewallRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverFirewallRuleState)(nil)).Elem()
}

type resolverFirewallRuleArgs struct {
	// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list. Valid values: `ALLOW`, `BLOCK`, `ALERT`.
	Action string `pulumi:"action"`
	// The DNS record's type. This determines the format of the record value that you provided in BlockOverrideDomain. Value values: `CNAME`.
	BlockOverrideDnsType *string `pulumi:"blockOverrideDnsType"`
	// The custom DNS record to send back in response to the query.
	BlockOverrideDomain *string `pulumi:"blockOverrideDomain"`
	// The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Minimum value of 0. Maximum value of 604800.
	BlockOverrideTtl *int `pulumi:"blockOverrideTtl"`
	// The way that you want DNS Firewall to block the request. Valid values: `NODATA`, `NXDOMAIN`, `OVERRIDE`.
	BlockResponse *string `pulumi:"blockResponse"`
	// The ID of the domain list that you want to use in the rule.
	FirewallDomainListId string `pulumi:"firewallDomainListId"`
	// The unique identifier of the firewall rule group where you want to create the rule.
	FirewallRuleGroupId string `pulumi:"firewallRuleGroupId"`
	// A name that lets you identify the rule, to manage and use it.
	Name *string `pulumi:"name"`
	// The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.
	Priority int `pulumi:"priority"`
}

// The set of arguments for constructing a ResolverFirewallRule resource.
type ResolverFirewallRuleArgs struct {
	// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list. Valid values: `ALLOW`, `BLOCK`, `ALERT`.
	Action pulumix.Input[string]
	// The DNS record's type. This determines the format of the record value that you provided in BlockOverrideDomain. Value values: `CNAME`.
	BlockOverrideDnsType pulumix.Input[*string]
	// The custom DNS record to send back in response to the query.
	BlockOverrideDomain pulumix.Input[*string]
	// The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Minimum value of 0. Maximum value of 604800.
	BlockOverrideTtl pulumix.Input[*int]
	// The way that you want DNS Firewall to block the request. Valid values: `NODATA`, `NXDOMAIN`, `OVERRIDE`.
	BlockResponse pulumix.Input[*string]
	// The ID of the domain list that you want to use in the rule.
	FirewallDomainListId pulumix.Input[string]
	// The unique identifier of the firewall rule group where you want to create the rule.
	FirewallRuleGroupId pulumix.Input[string]
	// A name that lets you identify the rule, to manage and use it.
	Name pulumix.Input[*string]
	// The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.
	Priority pulumix.Input[int]
}

func (ResolverFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverFirewallRuleArgs)(nil)).Elem()
}

type ResolverFirewallRuleOutput struct{ *pulumi.OutputState }

func (ResolverFirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverFirewallRule)(nil)).Elem()
}

func (o ResolverFirewallRuleOutput) ToResolverFirewallRuleOutput() ResolverFirewallRuleOutput {
	return o
}

func (o ResolverFirewallRuleOutput) ToResolverFirewallRuleOutputWithContext(ctx context.Context) ResolverFirewallRuleOutput {
	return o
}

func (o ResolverFirewallRuleOutput) ToOutput(ctx context.Context) pulumix.Output[ResolverFirewallRule] {
	return pulumix.Output[ResolverFirewallRule]{
		OutputState: o.OutputState,
	}
}

// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list. Valid values: `ALLOW`, `BLOCK`, `ALERT`.
func (o ResolverFirewallRuleOutput) Action() pulumix.Output[string] {
	value := pulumix.Apply[ResolverFirewallRule](o, func(v ResolverFirewallRule) pulumix.Output[string] { return v.Action })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The DNS record's type. This determines the format of the record value that you provided in BlockOverrideDomain. Value values: `CNAME`.
func (o ResolverFirewallRuleOutput) BlockOverrideDnsType() pulumix.Output[*string] {
	value := pulumix.Apply[ResolverFirewallRule](o, func(v ResolverFirewallRule) pulumix.Output[*string] { return v.BlockOverrideDnsType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The custom DNS record to send back in response to the query.
func (o ResolverFirewallRuleOutput) BlockOverrideDomain() pulumix.Output[*string] {
	value := pulumix.Apply[ResolverFirewallRule](o, func(v ResolverFirewallRule) pulumix.Output[*string] { return v.BlockOverrideDomain })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Minimum value of 0. Maximum value of 604800.
func (o ResolverFirewallRuleOutput) BlockOverrideTtl() pulumix.Output[*int] {
	value := pulumix.Apply[ResolverFirewallRule](o, func(v ResolverFirewallRule) pulumix.Output[*int] { return v.BlockOverrideTtl })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The way that you want DNS Firewall to block the request. Valid values: `NODATA`, `NXDOMAIN`, `OVERRIDE`.
func (o ResolverFirewallRuleOutput) BlockResponse() pulumix.Output[*string] {
	value := pulumix.Apply[ResolverFirewallRule](o, func(v ResolverFirewallRule) pulumix.Output[*string] { return v.BlockResponse })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the domain list that you want to use in the rule.
func (o ResolverFirewallRuleOutput) FirewallDomainListId() pulumix.Output[string] {
	value := pulumix.Apply[ResolverFirewallRule](o, func(v ResolverFirewallRule) pulumix.Output[string] { return v.FirewallDomainListId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The unique identifier of the firewall rule group where you want to create the rule.
func (o ResolverFirewallRuleOutput) FirewallRuleGroupId() pulumix.Output[string] {
	value := pulumix.Apply[ResolverFirewallRule](o, func(v ResolverFirewallRule) pulumix.Output[string] { return v.FirewallRuleGroupId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A name that lets you identify the rule, to manage and use it.
func (o ResolverFirewallRuleOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ResolverFirewallRule](o, func(v ResolverFirewallRule) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.
func (o ResolverFirewallRuleOutput) Priority() pulumix.Output[int] {
	value := pulumix.Apply[ResolverFirewallRule](o, func(v ResolverFirewallRule) pulumix.Output[int] { return v.Priority })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(ResolverFirewallRuleOutput{})
}
