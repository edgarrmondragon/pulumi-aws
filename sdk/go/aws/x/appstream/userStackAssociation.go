// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appstream

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an AppStream User Stack association.
type UserStackAssociation struct {
	pulumi.CustomResourceState

	// Authentication type for the user.
	AuthenticationType pulumix.Output[string] `pulumi:"authenticationType"`
	// Whether a welcome email is sent to a user after the user is created in the user pool.
	SendEmailNotification pulumix.Output[*bool] `pulumi:"sendEmailNotification"`
	// Name of the stack that is associated with the user.
	StackName pulumix.Output[string] `pulumi:"stackName"`
	// Email address of the user who is associated with the stack.
	//
	// The following arguments are optional:
	UserName pulumix.Output[string] `pulumi:"userName"`
}

// NewUserStackAssociation registers a new resource with the given unique name, arguments, and options.
func NewUserStackAssociation(ctx *pulumi.Context,
	name string, args *UserStackAssociationArgs, opts ...pulumi.ResourceOption) (*UserStackAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationType == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationType'")
	}
	if args.StackName == nil {
		return nil, errors.New("invalid value for required argument 'StackName'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserStackAssociation
	err := ctx.RegisterResource("aws:appstream/userStackAssociation:UserStackAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserStackAssociation gets an existing UserStackAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserStackAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserStackAssociationState, opts ...pulumi.ResourceOption) (*UserStackAssociation, error) {
	var resource UserStackAssociation
	err := ctx.ReadResource("aws:appstream/userStackAssociation:UserStackAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserStackAssociation resources.
type userStackAssociationState struct {
	// Authentication type for the user.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Whether a welcome email is sent to a user after the user is created in the user pool.
	SendEmailNotification *bool `pulumi:"sendEmailNotification"`
	// Name of the stack that is associated with the user.
	StackName *string `pulumi:"stackName"`
	// Email address of the user who is associated with the stack.
	//
	// The following arguments are optional:
	UserName *string `pulumi:"userName"`
}

type UserStackAssociationState struct {
	// Authentication type for the user.
	AuthenticationType pulumix.Input[*string]
	// Whether a welcome email is sent to a user after the user is created in the user pool.
	SendEmailNotification pulumix.Input[*bool]
	// Name of the stack that is associated with the user.
	StackName pulumix.Input[*string]
	// Email address of the user who is associated with the stack.
	//
	// The following arguments are optional:
	UserName pulumix.Input[*string]
}

func (UserStackAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*userStackAssociationState)(nil)).Elem()
}

type userStackAssociationArgs struct {
	// Authentication type for the user.
	AuthenticationType string `pulumi:"authenticationType"`
	// Whether a welcome email is sent to a user after the user is created in the user pool.
	SendEmailNotification *bool `pulumi:"sendEmailNotification"`
	// Name of the stack that is associated with the user.
	StackName string `pulumi:"stackName"`
	// Email address of the user who is associated with the stack.
	//
	// The following arguments are optional:
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a UserStackAssociation resource.
type UserStackAssociationArgs struct {
	// Authentication type for the user.
	AuthenticationType pulumix.Input[string]
	// Whether a welcome email is sent to a user after the user is created in the user pool.
	SendEmailNotification pulumix.Input[*bool]
	// Name of the stack that is associated with the user.
	StackName pulumix.Input[string]
	// Email address of the user who is associated with the stack.
	//
	// The following arguments are optional:
	UserName pulumix.Input[string]
}

func (UserStackAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userStackAssociationArgs)(nil)).Elem()
}

type UserStackAssociationOutput struct{ *pulumi.OutputState }

func (UserStackAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserStackAssociation)(nil)).Elem()
}

func (o UserStackAssociationOutput) ToUserStackAssociationOutput() UserStackAssociationOutput {
	return o
}

func (o UserStackAssociationOutput) ToUserStackAssociationOutputWithContext(ctx context.Context) UserStackAssociationOutput {
	return o
}

func (o UserStackAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[UserStackAssociation] {
	return pulumix.Output[UserStackAssociation]{
		OutputState: o.OutputState,
	}
}

// Authentication type for the user.
func (o UserStackAssociationOutput) AuthenticationType() pulumix.Output[string] {
	value := pulumix.Apply[UserStackAssociation](o, func(v UserStackAssociation) pulumix.Output[string] { return v.AuthenticationType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether a welcome email is sent to a user after the user is created in the user pool.
func (o UserStackAssociationOutput) SendEmailNotification() pulumix.Output[*bool] {
	value := pulumix.Apply[UserStackAssociation](o, func(v UserStackAssociation) pulumix.Output[*bool] { return v.SendEmailNotification })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Name of the stack that is associated with the user.
func (o UserStackAssociationOutput) StackName() pulumix.Output[string] {
	value := pulumix.Apply[UserStackAssociation](o, func(v UserStackAssociation) pulumix.Output[string] { return v.StackName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Email address of the user who is associated with the stack.
//
// The following arguments are optional:
func (o UserStackAssociationOutput) UserName() pulumix.Output[string] {
	value := pulumix.Apply[UserStackAssociation](o, func(v UserStackAssociation) pulumix.Output[string] { return v.UserName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(UserStackAssociationOutput{})
}
