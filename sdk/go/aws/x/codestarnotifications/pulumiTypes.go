// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codestarnotifications

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type NotificationRuleTarget struct {
	// The ARN of notification rule target. For example, a SNS Topic ARN.
	Address string `pulumi:"address"`
	// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
	Status *string `pulumi:"status"`
	// The type of the notification target. Default value is `SNS`.
	Type *string `pulumi:"type"`
}

type NotificationRuleTargetArgs struct {
	// The ARN of notification rule target. For example, a SNS Topic ARN.
	Address pulumix.Input[string] `pulumi:"address"`
	// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
	Status pulumix.Input[*string] `pulumi:"status"`
	// The type of the notification target. Default value is `SNS`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (NotificationRuleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleTarget)(nil)).Elem()
}

func (i NotificationRuleTargetArgs) ToNotificationRuleTargetOutput() NotificationRuleTargetOutput {
	return i.ToNotificationRuleTargetOutputWithContext(context.Background())
}

func (i NotificationRuleTargetArgs) ToNotificationRuleTargetOutputWithContext(ctx context.Context) NotificationRuleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleTargetOutput)
}

func (i *NotificationRuleTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*NotificationRuleTargetArgs] {
	return pulumix.Val(i)
}

type NotificationRuleTargetOutput struct{ *pulumi.OutputState }

func (NotificationRuleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleTarget)(nil)).Elem()
}

func (o NotificationRuleTargetOutput) ToNotificationRuleTargetOutput() NotificationRuleTargetOutput {
	return o
}

func (o NotificationRuleTargetOutput) ToNotificationRuleTargetOutputWithContext(ctx context.Context) NotificationRuleTargetOutput {
	return o
}

func (o NotificationRuleTargetOutput) ToOutput(ctx context.Context) pulumix.Output[NotificationRuleTarget] {
	return pulumix.Output[NotificationRuleTarget]{
		OutputState: o.OutputState,
	}
}

// The ARN of notification rule target. For example, a SNS Topic ARN.
func (o NotificationRuleTargetOutput) Address() pulumix.Output[string] {
	return pulumix.Apply[NotificationRuleTarget](o, func(v NotificationRuleTarget) string { return v.Address })
}

// The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
func (o NotificationRuleTargetOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[NotificationRuleTarget](o, func(v NotificationRuleTarget) *string { return v.Status })
}

// The type of the notification target. Default value is `SNS`.
func (o NotificationRuleTargetOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[NotificationRuleTarget](o, func(v NotificationRuleTarget) *string { return v.Type })
}

func init() {
	pulumi.RegisterOutputType(NotificationRuleTargetOutput{})
}
