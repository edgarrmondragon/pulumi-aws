// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an AWS IoT Thing Group.
type ThingGroup struct {
	pulumi.CustomResourceState

	// The ARN of the Thing Group.
	Arn       pulumix.Output[string]                                             `pulumi:"arn"`
	Metadatas pulumix.GArrayOutput[ThingGroupMetadata, ThingGroupMetadataOutput] `pulumi:"metadatas"`
	// The name of the Thing Group.
	Name pulumix.Output[string] `pulumi:"name"`
	// The name of the parent Thing Group.
	ParentGroupName pulumix.Output[*string] `pulumi:"parentGroupName"`
	// The Thing Group properties. Defined below.
	Properties pulumix.GPtrOutput[ThingGroupProperties, ThingGroupPropertiesOutput] `pulumi:"properties"`
	// Key-value mapping of resource tags
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The current version of the Thing Group record in the registry.
	Version pulumix.Output[int] `pulumi:"version"`
}

// NewThingGroup registers a new resource with the given unique name, arguments, and options.
func NewThingGroup(ctx *pulumi.Context,
	name string, args *ThingGroupArgs, opts ...pulumi.ResourceOption) (*ThingGroup, error) {
	if args == nil {
		args = &ThingGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ThingGroup
	err := ctx.RegisterResource("aws:iot/thingGroup:ThingGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetThingGroup gets an existing ThingGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetThingGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ThingGroupState, opts ...pulumi.ResourceOption) (*ThingGroup, error) {
	var resource ThingGroup
	err := ctx.ReadResource("aws:iot/thingGroup:ThingGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ThingGroup resources.
type thingGroupState struct {
	// The ARN of the Thing Group.
	Arn       *string              `pulumi:"arn"`
	Metadatas []ThingGroupMetadata `pulumi:"metadatas"`
	// The name of the Thing Group.
	Name *string `pulumi:"name"`
	// The name of the parent Thing Group.
	ParentGroupName *string `pulumi:"parentGroupName"`
	// The Thing Group properties. Defined below.
	Properties *ThingGroupProperties `pulumi:"properties"`
	// Key-value mapping of resource tags
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The current version of the Thing Group record in the registry.
	Version *int `pulumi:"version"`
}

type ThingGroupState struct {
	// The ARN of the Thing Group.
	Arn       pulumix.Input[*string]
	Metadatas pulumix.Input[[]*ThingGroupMetadataArgs]
	// The name of the Thing Group.
	Name pulumix.Input[*string]
	// The name of the parent Thing Group.
	ParentGroupName pulumix.Input[*string]
	// The Thing Group properties. Defined below.
	Properties pulumix.Input[*ThingGroupPropertiesArgs]
	// Key-value mapping of resource tags
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// The current version of the Thing Group record in the registry.
	Version pulumix.Input[*int]
}

func (ThingGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*thingGroupState)(nil)).Elem()
}

type thingGroupArgs struct {
	// The name of the Thing Group.
	Name *string `pulumi:"name"`
	// The name of the parent Thing Group.
	ParentGroupName *string `pulumi:"parentGroupName"`
	// The Thing Group properties. Defined below.
	Properties *ThingGroupProperties `pulumi:"properties"`
	// Key-value mapping of resource tags
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ThingGroup resource.
type ThingGroupArgs struct {
	// The name of the Thing Group.
	Name pulumix.Input[*string]
	// The name of the parent Thing Group.
	ParentGroupName pulumix.Input[*string]
	// The Thing Group properties. Defined below.
	Properties pulumix.Input[*ThingGroupPropertiesArgs]
	// Key-value mapping of resource tags
	Tags pulumix.Input[map[string]string]
}

func (ThingGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*thingGroupArgs)(nil)).Elem()
}

type ThingGroupOutput struct{ *pulumi.OutputState }

func (ThingGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThingGroup)(nil)).Elem()
}

func (o ThingGroupOutput) ToThingGroupOutput() ThingGroupOutput {
	return o
}

func (o ThingGroupOutput) ToThingGroupOutputWithContext(ctx context.Context) ThingGroupOutput {
	return o
}

func (o ThingGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ThingGroup] {
	return pulumix.Output[ThingGroup]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Thing Group.
func (o ThingGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ThingGroup](o, func(v ThingGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ThingGroupOutput) Metadatas() pulumix.GArrayOutput[ThingGroupMetadata, ThingGroupMetadataOutput] {
	value := pulumix.Apply[ThingGroup](o, func(v ThingGroup) pulumix.GArrayOutput[ThingGroupMetadata, ThingGroupMetadataOutput] {
		return v.Metadatas
	})
	unwrapped := pulumix.Flatten[[]ThingGroupMetadata, pulumix.GArrayOutput[ThingGroupMetadata, ThingGroupMetadataOutput]](value)
	return pulumix.GArrayOutput[ThingGroupMetadata, ThingGroupMetadataOutput]{OutputState: unwrapped.OutputState}
}

// The name of the Thing Group.
func (o ThingGroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ThingGroup](o, func(v ThingGroup) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the parent Thing Group.
func (o ThingGroupOutput) ParentGroupName() pulumix.Output[*string] {
	value := pulumix.Apply[ThingGroup](o, func(v ThingGroup) pulumix.Output[*string] { return v.ParentGroupName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Thing Group properties. Defined below.
func (o ThingGroupOutput) Properties() pulumix.GPtrOutput[ThingGroupProperties, ThingGroupPropertiesOutput] {
	value := pulumix.Apply[ThingGroup](o, func(v ThingGroup) pulumix.GPtrOutput[ThingGroupProperties, ThingGroupPropertiesOutput] {
		return v.Properties
	})
	unwrapped := pulumix.Flatten[*ThingGroupProperties, pulumix.GPtrOutput[ThingGroupProperties, ThingGroupPropertiesOutput]](value)
	return pulumix.GPtrOutput[ThingGroupProperties, ThingGroupPropertiesOutput]{OutputState: unwrapped.OutputState}
}

// Key-value mapping of resource tags
func (o ThingGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ThingGroup](o, func(v ThingGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o ThingGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ThingGroup](o, func(v ThingGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The current version of the Thing Group record in the registry.
func (o ThingGroupOutput) Version() pulumix.Output[int] {
	value := pulumix.Apply[ThingGroup](o, func(v ThingGroup) pulumix.Output[int] { return v.Version })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(ThingGroupOutput{})
}
