// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoveryreadiness

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Route 53 Recovery Readiness Resource Set.
type ResourceSet struct {
	pulumi.CustomResourceState

	// NLB resource ARN.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Unique name describing the resource set.
	ResourceSetName pulumix.Output[string] `pulumi:"resourceSetName"`
	// Type of the resources in the resource set.
	ResourceSetType pulumix.Output[string] `pulumi:"resourceSetType"`
	// List of resources to add to this resource set. See below.
	//
	// The following arguments are optional:
	Resources pulumix.GArrayOutput[ResourceSetResource, ResourceSetResourceOutput] `pulumi:"resources"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewResourceSet registers a new resource with the given unique name, arguments, and options.
func NewResourceSet(ctx *pulumi.Context,
	name string, args *ResourceSetArgs, opts ...pulumi.ResourceOption) (*ResourceSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceSetName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceSetName'")
	}
	if args.ResourceSetType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceSetType'")
	}
	if args.Resources == nil {
		return nil, errors.New("invalid value for required argument 'Resources'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceSet
	err := ctx.RegisterResource("aws:route53recoveryreadiness/resourceSet:ResourceSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceSet gets an existing ResourceSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceSetState, opts ...pulumi.ResourceOption) (*ResourceSet, error) {
	var resource ResourceSet
	err := ctx.ReadResource("aws:route53recoveryreadiness/resourceSet:ResourceSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceSet resources.
type resourceSetState struct {
	// NLB resource ARN.
	Arn *string `pulumi:"arn"`
	// Unique name describing the resource set.
	ResourceSetName *string `pulumi:"resourceSetName"`
	// Type of the resources in the resource set.
	ResourceSetType *string `pulumi:"resourceSetType"`
	// List of resources to add to this resource set. See below.
	//
	// The following arguments are optional:
	Resources []ResourceSetResource `pulumi:"resources"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ResourceSetState struct {
	// NLB resource ARN.
	Arn pulumix.Input[*string]
	// Unique name describing the resource set.
	ResourceSetName pulumix.Input[*string]
	// Type of the resources in the resource set.
	ResourceSetType pulumix.Input[*string]
	// List of resources to add to this resource set. See below.
	//
	// The following arguments are optional:
	Resources pulumix.Input[[]*ResourceSetResourceArgs]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ResourceSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSetState)(nil)).Elem()
}

type resourceSetArgs struct {
	// Unique name describing the resource set.
	ResourceSetName string `pulumi:"resourceSetName"`
	// Type of the resources in the resource set.
	ResourceSetType string `pulumi:"resourceSetType"`
	// List of resources to add to this resource set. See below.
	//
	// The following arguments are optional:
	Resources []ResourceSetResource `pulumi:"resources"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ResourceSet resource.
type ResourceSetArgs struct {
	// Unique name describing the resource set.
	ResourceSetName pulumix.Input[string]
	// Type of the resources in the resource set.
	ResourceSetType pulumix.Input[string]
	// List of resources to add to this resource set. See below.
	//
	// The following arguments are optional:
	Resources pulumix.Input[[]*ResourceSetResourceArgs]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
}

func (ResourceSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSetArgs)(nil)).Elem()
}

type ResourceSetOutput struct{ *pulumi.OutputState }

func (ResourceSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSet)(nil)).Elem()
}

func (o ResourceSetOutput) ToResourceSetOutput() ResourceSetOutput {
	return o
}

func (o ResourceSetOutput) ToResourceSetOutputWithContext(ctx context.Context) ResourceSetOutput {
	return o
}

func (o ResourceSetOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceSet] {
	return pulumix.Output[ResourceSet]{
		OutputState: o.OutputState,
	}
}

// NLB resource ARN.
func (o ResourceSetOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ResourceSet](o, func(v ResourceSet) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique name describing the resource set.
func (o ResourceSetOutput) ResourceSetName() pulumix.Output[string] {
	value := pulumix.Apply[ResourceSet](o, func(v ResourceSet) pulumix.Output[string] { return v.ResourceSetName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Type of the resources in the resource set.
func (o ResourceSetOutput) ResourceSetType() pulumix.Output[string] {
	value := pulumix.Apply[ResourceSet](o, func(v ResourceSet) pulumix.Output[string] { return v.ResourceSetType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of resources to add to this resource set. See below.
//
// The following arguments are optional:
func (o ResourceSetOutput) Resources() pulumix.GArrayOutput[ResourceSetResource, ResourceSetResourceOutput] {
	value := pulumix.Apply[ResourceSet](o, func(v ResourceSet) pulumix.GArrayOutput[ResourceSetResource, ResourceSetResourceOutput] {
		return v.Resources
	})
	unwrapped := pulumix.Flatten[[]ResourceSetResource, pulumix.GArrayOutput[ResourceSetResource, ResourceSetResourceOutput]](value)
	return pulumix.GArrayOutput[ResourceSetResource, ResourceSetResourceOutput]{OutputState: unwrapped.OutputState}
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
func (o ResourceSetOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ResourceSet](o, func(v ResourceSet) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ResourceSetOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ResourceSet](o, func(v ResourceSet) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ResourceSetOutput{})
}
