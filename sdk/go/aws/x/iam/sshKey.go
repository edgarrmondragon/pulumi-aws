// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Uploads an SSH public key and associates it with the specified IAM user.
type SshKey struct {
	pulumi.CustomResourceState

	// Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use `SSH`. To retrieve the public key in PEM format, use `PEM`.
	Encoding pulumix.Output[string] `pulumi:"encoding"`
	// The MD5 message digest of the SSH public key.
	Fingerprint pulumix.Output[string] `pulumi:"fingerprint"`
	// The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.
	PublicKey pulumix.Output[string] `pulumi:"publicKey"`
	// The unique identifier for the SSH public key.
	SshPublicKeyId pulumix.Output[string] `pulumi:"sshPublicKeyId"`
	// The status to assign to the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used. Default is `active`.
	Status pulumix.Output[string] `pulumi:"status"`
	// The name of the IAM user to associate the SSH public key with.
	Username pulumix.Output[string] `pulumi:"username"`
}

// NewSshKey registers a new resource with the given unique name, arguments, and options.
func NewSshKey(ctx *pulumi.Context,
	name string, args *SshKeyArgs, opts ...pulumi.ResourceOption) (*SshKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Encoding == nil {
		return nil, errors.New("invalid value for required argument 'Encoding'")
	}
	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SshKey
	err := ctx.RegisterResource("aws:iam/sshKey:SshKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSshKey gets an existing SshKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSshKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SshKeyState, opts ...pulumi.ResourceOption) (*SshKey, error) {
	var resource SshKey
	err := ctx.ReadResource("aws:iam/sshKey:SshKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SshKey resources.
type sshKeyState struct {
	// Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use `SSH`. To retrieve the public key in PEM format, use `PEM`.
	Encoding *string `pulumi:"encoding"`
	// The MD5 message digest of the SSH public key.
	Fingerprint *string `pulumi:"fingerprint"`
	// The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.
	PublicKey *string `pulumi:"publicKey"`
	// The unique identifier for the SSH public key.
	SshPublicKeyId *string `pulumi:"sshPublicKeyId"`
	// The status to assign to the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used. Default is `active`.
	Status *string `pulumi:"status"`
	// The name of the IAM user to associate the SSH public key with.
	Username *string `pulumi:"username"`
}

type SshKeyState struct {
	// Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use `SSH`. To retrieve the public key in PEM format, use `PEM`.
	Encoding pulumix.Input[*string]
	// The MD5 message digest of the SSH public key.
	Fingerprint pulumix.Input[*string]
	// The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.
	PublicKey pulumix.Input[*string]
	// The unique identifier for the SSH public key.
	SshPublicKeyId pulumix.Input[*string]
	// The status to assign to the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used. Default is `active`.
	Status pulumix.Input[*string]
	// The name of the IAM user to associate the SSH public key with.
	Username pulumix.Input[*string]
}

func (SshKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sshKeyState)(nil)).Elem()
}

type sshKeyArgs struct {
	// Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use `SSH`. To retrieve the public key in PEM format, use `PEM`.
	Encoding string `pulumi:"encoding"`
	// The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.
	PublicKey string `pulumi:"publicKey"`
	// The status to assign to the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used. Default is `active`.
	Status *string `pulumi:"status"`
	// The name of the IAM user to associate the SSH public key with.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a SshKey resource.
type SshKeyArgs struct {
	// Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use `SSH`. To retrieve the public key in PEM format, use `PEM`.
	Encoding pulumix.Input[string]
	// The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.
	PublicKey pulumix.Input[string]
	// The status to assign to the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used. Default is `active`.
	Status pulumix.Input[*string]
	// The name of the IAM user to associate the SSH public key with.
	Username pulumix.Input[string]
}

func (SshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sshKeyArgs)(nil)).Elem()
}

type SshKeyOutput struct{ *pulumi.OutputState }

func (SshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshKey)(nil)).Elem()
}

func (o SshKeyOutput) ToSshKeyOutput() SshKeyOutput {
	return o
}

func (o SshKeyOutput) ToSshKeyOutputWithContext(ctx context.Context) SshKeyOutput {
	return o
}

func (o SshKeyOutput) ToOutput(ctx context.Context) pulumix.Output[SshKey] {
	return pulumix.Output[SshKey]{
		OutputState: o.OutputState,
	}
}

// Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use `SSH`. To retrieve the public key in PEM format, use `PEM`.
func (o SshKeyOutput) Encoding() pulumix.Output[string] {
	value := pulumix.Apply[SshKey](o, func(v SshKey) pulumix.Output[string] { return v.Encoding })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The MD5 message digest of the SSH public key.
func (o SshKeyOutput) Fingerprint() pulumix.Output[string] {
	value := pulumix.Apply[SshKey](o, func(v SshKey) pulumix.Output[string] { return v.Fingerprint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.
func (o SshKeyOutput) PublicKey() pulumix.Output[string] {
	value := pulumix.Apply[SshKey](o, func(v SshKey) pulumix.Output[string] { return v.PublicKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The unique identifier for the SSH public key.
func (o SshKeyOutput) SshPublicKeyId() pulumix.Output[string] {
	value := pulumix.Apply[SshKey](o, func(v SshKey) pulumix.Output[string] { return v.SshPublicKeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The status to assign to the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used. Default is `active`.
func (o SshKeyOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[SshKey](o, func(v SshKey) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the IAM user to associate the SSH public key with.
func (o SshKeyOutput) Username() pulumix.Output[string] {
	value := pulumix.Apply[SshKey](o, func(v SshKey) pulumix.Output[string] { return v.Username })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SshKeyOutput{})
}
