// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Associates a Direct Connect Gateway with a VGW or transit gateway.
//
// To create a cross-account association, create an `directconnect.GatewayAssociationProposal` resource
// in the AWS account that owns the VGW or transit gateway and then accept the proposal in the AWS account that owns the Direct Connect Gateway
// by creating an `directconnect.GatewayAssociation` resource with the `proposalId` and `associatedGatewayOwnerAccountId` attributes set.
type GatewayAssociation struct {
	pulumi.CustomResourceState

	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	AllowedPrefixes pulumix.ArrayOutput[string] `pulumi:"allowedPrefixes"`
	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for single account Direct Connect gateway associations.
	AssociatedGatewayId pulumix.Output[string] `pulumi:"associatedGatewayId"`
	// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for cross-account Direct Connect gateway associations.
	AssociatedGatewayOwnerAccountId pulumix.Output[string] `pulumi:"associatedGatewayOwnerAccountId"`
	// The type of the associated gateway, `transitGateway` or `virtualPrivateGateway`.
	AssociatedGatewayType pulumix.Output[string] `pulumi:"associatedGatewayType"`
	// The ID of the Direct Connect gateway association.
	DxGatewayAssociationId pulumix.Output[string] `pulumi:"dxGatewayAssociationId"`
	// The ID of the Direct Connect gateway.
	DxGatewayId pulumix.Output[string] `pulumi:"dxGatewayId"`
	// The ID of the AWS account that owns the Direct Connect gateway.
	DxGatewayOwnerAccountId pulumix.Output[string] `pulumi:"dxGatewayOwnerAccountId"`
	// The ID of the Direct Connect gateway association proposal.
	// Used for cross-account Direct Connect gateway associations.
	ProposalId pulumix.Output[*string] `pulumi:"proposalId"`
	// Deprecated: use 'associated_gateway_id' argument instead
	VpnGatewayId pulumix.Output[*string] `pulumi:"vpnGatewayId"`
}

// NewGatewayAssociation registers a new resource with the given unique name, arguments, and options.
func NewGatewayAssociation(ctx *pulumi.Context,
	name string, args *GatewayAssociationArgs, opts ...pulumi.ResourceOption) (*GatewayAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DxGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'DxGatewayId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayAssociation
	err := ctx.RegisterResource("aws:directconnect/gatewayAssociation:GatewayAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayAssociation gets an existing GatewayAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayAssociationState, opts ...pulumi.ResourceOption) (*GatewayAssociation, error) {
	var resource GatewayAssociation
	err := ctx.ReadResource("aws:directconnect/gatewayAssociation:GatewayAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayAssociation resources.
type gatewayAssociationState struct {
	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	AllowedPrefixes []string `pulumi:"allowedPrefixes"`
	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for single account Direct Connect gateway associations.
	AssociatedGatewayId *string `pulumi:"associatedGatewayId"`
	// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for cross-account Direct Connect gateway associations.
	AssociatedGatewayOwnerAccountId *string `pulumi:"associatedGatewayOwnerAccountId"`
	// The type of the associated gateway, `transitGateway` or `virtualPrivateGateway`.
	AssociatedGatewayType *string `pulumi:"associatedGatewayType"`
	// The ID of the Direct Connect gateway association.
	DxGatewayAssociationId *string `pulumi:"dxGatewayAssociationId"`
	// The ID of the Direct Connect gateway.
	DxGatewayId *string `pulumi:"dxGatewayId"`
	// The ID of the AWS account that owns the Direct Connect gateway.
	DxGatewayOwnerAccountId *string `pulumi:"dxGatewayOwnerAccountId"`
	// The ID of the Direct Connect gateway association proposal.
	// Used for cross-account Direct Connect gateway associations.
	ProposalId *string `pulumi:"proposalId"`
	// Deprecated: use 'associated_gateway_id' argument instead
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

type GatewayAssociationState struct {
	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	AllowedPrefixes pulumix.Input[[]string]
	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for single account Direct Connect gateway associations.
	AssociatedGatewayId pulumix.Input[*string]
	// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for cross-account Direct Connect gateway associations.
	AssociatedGatewayOwnerAccountId pulumix.Input[*string]
	// The type of the associated gateway, `transitGateway` or `virtualPrivateGateway`.
	AssociatedGatewayType pulumix.Input[*string]
	// The ID of the Direct Connect gateway association.
	DxGatewayAssociationId pulumix.Input[*string]
	// The ID of the Direct Connect gateway.
	DxGatewayId pulumix.Input[*string]
	// The ID of the AWS account that owns the Direct Connect gateway.
	DxGatewayOwnerAccountId pulumix.Input[*string]
	// The ID of the Direct Connect gateway association proposal.
	// Used for cross-account Direct Connect gateway associations.
	ProposalId pulumix.Input[*string]
	// Deprecated: use 'associated_gateway_id' argument instead
	VpnGatewayId pulumix.Input[*string]
}

func (GatewayAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayAssociationState)(nil)).Elem()
}

type gatewayAssociationArgs struct {
	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	AllowedPrefixes []string `pulumi:"allowedPrefixes"`
	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for single account Direct Connect gateway associations.
	AssociatedGatewayId *string `pulumi:"associatedGatewayId"`
	// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for cross-account Direct Connect gateway associations.
	AssociatedGatewayOwnerAccountId *string `pulumi:"associatedGatewayOwnerAccountId"`
	// The ID of the Direct Connect gateway.
	DxGatewayId string `pulumi:"dxGatewayId"`
	// The ID of the Direct Connect gateway association proposal.
	// Used for cross-account Direct Connect gateway associations.
	ProposalId *string `pulumi:"proposalId"`
	// Deprecated: use 'associated_gateway_id' argument instead
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

// The set of arguments for constructing a GatewayAssociation resource.
type GatewayAssociationArgs struct {
	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	AllowedPrefixes pulumix.Input[[]string]
	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for single account Direct Connect gateway associations.
	AssociatedGatewayId pulumix.Input[*string]
	// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for cross-account Direct Connect gateway associations.
	AssociatedGatewayOwnerAccountId pulumix.Input[*string]
	// The ID of the Direct Connect gateway.
	DxGatewayId pulumix.Input[string]
	// The ID of the Direct Connect gateway association proposal.
	// Used for cross-account Direct Connect gateway associations.
	ProposalId pulumix.Input[*string]
	// Deprecated: use 'associated_gateway_id' argument instead
	VpnGatewayId pulumix.Input[*string]
}

func (GatewayAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayAssociationArgs)(nil)).Elem()
}

type GatewayAssociationOutput struct{ *pulumi.OutputState }

func (GatewayAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayAssociation)(nil)).Elem()
}

func (o GatewayAssociationOutput) ToGatewayAssociationOutput() GatewayAssociationOutput {
	return o
}

func (o GatewayAssociationOutput) ToGatewayAssociationOutputWithContext(ctx context.Context) GatewayAssociationOutput {
	return o
}

func (o GatewayAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayAssociation] {
	return pulumix.Output[GatewayAssociation]{
		OutputState: o.OutputState,
	}
}

// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
func (o GatewayAssociationOutput) AllowedPrefixes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GatewayAssociation](o, func(v GatewayAssociation) pulumix.ArrayOutput[string] { return v.AllowedPrefixes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
// Used for single account Direct Connect gateway associations.
func (o GatewayAssociationOutput) AssociatedGatewayId() pulumix.Output[string] {
	value := pulumix.Apply[GatewayAssociation](o, func(v GatewayAssociation) pulumix.Output[string] { return v.AssociatedGatewayId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
// Used for cross-account Direct Connect gateway associations.
func (o GatewayAssociationOutput) AssociatedGatewayOwnerAccountId() pulumix.Output[string] {
	value := pulumix.Apply[GatewayAssociation](o, func(v GatewayAssociation) pulumix.Output[string] { return v.AssociatedGatewayOwnerAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of the associated gateway, `transitGateway` or `virtualPrivateGateway`.
func (o GatewayAssociationOutput) AssociatedGatewayType() pulumix.Output[string] {
	value := pulumix.Apply[GatewayAssociation](o, func(v GatewayAssociation) pulumix.Output[string] { return v.AssociatedGatewayType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the Direct Connect gateway association.
func (o GatewayAssociationOutput) DxGatewayAssociationId() pulumix.Output[string] {
	value := pulumix.Apply[GatewayAssociation](o, func(v GatewayAssociation) pulumix.Output[string] { return v.DxGatewayAssociationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the Direct Connect gateway.
func (o GatewayAssociationOutput) DxGatewayId() pulumix.Output[string] {
	value := pulumix.Apply[GatewayAssociation](o, func(v GatewayAssociation) pulumix.Output[string] { return v.DxGatewayId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the AWS account that owns the Direct Connect gateway.
func (o GatewayAssociationOutput) DxGatewayOwnerAccountId() pulumix.Output[string] {
	value := pulumix.Apply[GatewayAssociation](o, func(v GatewayAssociation) pulumix.Output[string] { return v.DxGatewayOwnerAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the Direct Connect gateway association proposal.
// Used for cross-account Direct Connect gateway associations.
func (o GatewayAssociationOutput) ProposalId() pulumix.Output[*string] {
	value := pulumix.Apply[GatewayAssociation](o, func(v GatewayAssociation) pulumix.Output[*string] { return v.ProposalId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Deprecated: use 'associated_gateway_id' argument instead
func (o GatewayAssociationOutput) VpnGatewayId() pulumix.Output[*string] {
	value := pulumix.Apply[GatewayAssociation](o, func(v GatewayAssociation) pulumix.Output[*string] { return v.VpnGatewayId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(GatewayAssociationOutput{})
}
