// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get information about prebuilt Amazon SageMaker Docker images.
//
// > **NOTE:** The AWS provider creates a validly constructed `registryPath` but does not verify that the `registryPath` corresponds to an existing image. For example, using a `registryPath` containing an `imageTag` that does not correspond to a Docker image in the ECR repository, will result in an error.
func GetPrebuiltEcrImage(ctx *pulumi.Context, args *GetPrebuiltEcrImageArgs, opts ...pulumi.InvokeOption) (*GetPrebuiltEcrImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPrebuiltEcrImageResult
	err := ctx.Invoke("aws:sagemaker/getPrebuiltEcrImage:getPrebuiltEcrImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPrebuiltEcrImage.
type GetPrebuiltEcrImageArgs struct {
	// DNS suffix to use in the registry path. If not specified, the AWS provider sets it to the DNS suffix for the current region.
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// Image tag for the Docker image. If not specified, the AWS provider sets the value to `1`, which for many repositories indicates the latest version. Some repositories, such as XGBoost, do not support `1` or `latest` and specific version must be used.
	ImageTag *string `pulumi:"imageTag"`
	// Region to use in the registry path. If not specified, the AWS provider sets it to the current region.
	Region *string `pulumi:"region"`
	// Name of the repository, which is generally the algorithm or library. Values include `blazingtext`, `factorization-machines`, `forecasting-deepar`, `image-classification`, `ipinsights`, `kmeans`, `knn`, `lda`, `linear-learner`, `mxnet-inference-eia`, `mxnet-inference`, `mxnet-training`, `ntm`, `object-detection`, `object2vec`, `pca`, `pytorch-inference-eia`, `pytorch-inference`, `pytorch-training`, `randomcutforest`, `sagemaker-scikit-learn`, `sagemaker-sparkml-serving`, `sagemaker-xgboost`, `semantic-segmentation`, `seq2seq`, `tensorflow-inference-eia`, `tensorflow-inference`, `tensorflow-training`, `huggingface-tensorflow-training`, `huggingface-tensorflow-inference`, `huggingface-pytorch-training`, and `huggingface-pytorch-inference`.
	RepositoryName string `pulumi:"repositoryName"`
}

// A collection of values returned by getPrebuiltEcrImage.
type GetPrebuiltEcrImageResult struct {
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// The provider-assigned unique ID for this managed resource.
	Id       string  `pulumi:"id"`
	ImageTag *string `pulumi:"imageTag"`
	Region   *string `pulumi:"region"`
	// Account ID containing the image. For example, `469771592824`.
	RegistryId string `pulumi:"registryId"`
	// Docker image URL. For example, `341280168497.dkr.ecr.ca-central-1.amazonaws.com/sagemaker-sparkml-serving:2.4`.
	RegistryPath   string `pulumi:"registryPath"`
	RepositoryName string `pulumi:"repositoryName"`
}

func GetPrebuiltEcrImageOutput(ctx *pulumi.Context, args GetPrebuiltEcrImageOutputArgs, opts ...pulumi.InvokeOption) GetPrebuiltEcrImageResultOutput {
	outputResult := pulumix.ApplyErr[*GetPrebuiltEcrImageArgs](args.ToOutput(), func(plainArgs *GetPrebuiltEcrImageArgs) (*GetPrebuiltEcrImageResult, error) {
		return GetPrebuiltEcrImage(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetPrebuiltEcrImageResultOutput, *GetPrebuiltEcrImageResult](outputResult)
}

// A collection of arguments for invoking getPrebuiltEcrImage.
type GetPrebuiltEcrImageOutputArgs struct {
	// DNS suffix to use in the registry path. If not specified, the AWS provider sets it to the DNS suffix for the current region.
	DnsSuffix pulumix.Input[*string] `pulumi:"dnsSuffix"`
	// Image tag for the Docker image. If not specified, the AWS provider sets the value to `1`, which for many repositories indicates the latest version. Some repositories, such as XGBoost, do not support `1` or `latest` and specific version must be used.
	ImageTag pulumix.Input[*string] `pulumi:"imageTag"`
	// Region to use in the registry path. If not specified, the AWS provider sets it to the current region.
	Region pulumix.Input[*string] `pulumi:"region"`
	// Name of the repository, which is generally the algorithm or library. Values include `blazingtext`, `factorization-machines`, `forecasting-deepar`, `image-classification`, `ipinsights`, `kmeans`, `knn`, `lda`, `linear-learner`, `mxnet-inference-eia`, `mxnet-inference`, `mxnet-training`, `ntm`, `object-detection`, `object2vec`, `pca`, `pytorch-inference-eia`, `pytorch-inference`, `pytorch-training`, `randomcutforest`, `sagemaker-scikit-learn`, `sagemaker-sparkml-serving`, `sagemaker-xgboost`, `semantic-segmentation`, `seq2seq`, `tensorflow-inference-eia`, `tensorflow-inference`, `tensorflow-training`, `huggingface-tensorflow-training`, `huggingface-tensorflow-inference`, `huggingface-pytorch-training`, and `huggingface-pytorch-inference`.
	RepositoryName pulumix.Input[string] `pulumi:"repositoryName"`
}

func (args GetPrebuiltEcrImageOutputArgs) ToOutput() pulumix.Output[*GetPrebuiltEcrImageArgs] {
	allArgs := pulumix.All(
		args.DnsSuffix.ToOutput(context.Background()).AsAny(),
		args.ImageTag.ToOutput(context.Background()).AsAny(),
		args.Region.ToOutput(context.Background()).AsAny(),
		args.RepositoryName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetPrebuiltEcrImageArgs {
		return &GetPrebuiltEcrImageArgs{
			DnsSuffix:      resolvedArgs[0].(*string),
			ImageTag:       resolvedArgs[1].(*string),
			Region:         resolvedArgs[2].(*string),
			RepositoryName: resolvedArgs[3].(string),
		}
	})
}

type GetPrebuiltEcrImageResultOutput struct{ *pulumi.OutputState }

func (GetPrebuiltEcrImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrebuiltEcrImageResult)(nil)).Elem()
}

func (o GetPrebuiltEcrImageResultOutput) ToOutput(context.Context) pulumix.Output[*GetPrebuiltEcrImageResult] {
	return pulumix.Output[*GetPrebuiltEcrImageResult]{
		OutputState: o.OutputState,
	}
}

func (o GetPrebuiltEcrImageResultOutput) DnsSuffix() pulumix.Output[*string] {
	return pulumix.Apply[*GetPrebuiltEcrImageResult](o, func(v *GetPrebuiltEcrImageResult) *string { return v.DnsSuffix })
}

func (o GetPrebuiltEcrImageResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetPrebuiltEcrImageResult](o, func(v *GetPrebuiltEcrImageResult) string { return v.Id })
}

func (o GetPrebuiltEcrImageResultOutput) ImageTag() pulumix.Output[*string] {
	return pulumix.Apply[*GetPrebuiltEcrImageResult](o, func(v *GetPrebuiltEcrImageResult) *string { return v.ImageTag })
}

func (o GetPrebuiltEcrImageResultOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[*GetPrebuiltEcrImageResult](o, func(v *GetPrebuiltEcrImageResult) *string { return v.Region })
}

func (o GetPrebuiltEcrImageResultOutput) RegistryId() pulumix.Output[string] {
	return pulumix.Apply[*GetPrebuiltEcrImageResult](o, func(v *GetPrebuiltEcrImageResult) string { return v.RegistryId })
}

func (o GetPrebuiltEcrImageResultOutput) RegistryPath() pulumix.Output[string] {
	return pulumix.Apply[*GetPrebuiltEcrImageResult](o, func(v *GetPrebuiltEcrImageResult) string { return v.RegistryPath })
}

func (o GetPrebuiltEcrImageResultOutput) RepositoryName() pulumix.Output[string] {
	return pulumix.Apply[*GetPrebuiltEcrImageResult](o, func(v *GetPrebuiltEcrImageResult) string { return v.RepositoryName })
}
