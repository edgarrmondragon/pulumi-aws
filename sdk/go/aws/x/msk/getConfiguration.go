// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get information on an Amazon MSK Configuration.
func LookupConfiguration(ctx *pulumi.Context, args *LookupConfigurationArgs, opts ...pulumi.InvokeOption) (*LookupConfigurationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConfigurationResult
	err := ctx.Invoke("aws:msk/getConfiguration:getConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConfiguration.
type LookupConfigurationArgs struct {
	// Name of the configuration.
	Name string `pulumi:"name"`
}

// A collection of values returned by getConfiguration.
type LookupConfigurationResult struct {
	// ARN of the configuration.
	Arn string `pulumi:"arn"`
	// Description of the configuration.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of Apache Kafka versions which can use this configuration.
	KafkaVersions []string `pulumi:"kafkaVersions"`
	// Latest revision of the configuration.
	LatestRevision int    `pulumi:"latestRevision"`
	Name           string `pulumi:"name"`
	// Contents of the server.properties file.
	ServerProperties string `pulumi:"serverProperties"`
}

func LookupConfigurationOutput(ctx *pulumi.Context, args LookupConfigurationOutputArgs, opts ...pulumi.InvokeOption) LookupConfigurationResultOutput {
	outputResult := pulumix.ApplyErr[*LookupConfigurationArgs](args.ToOutput(), func(plainArgs *LookupConfigurationArgs) (*LookupConfigurationResult, error) {
		return LookupConfiguration(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupConfigurationResultOutput, *LookupConfigurationResult](outputResult)
}

// A collection of arguments for invoking getConfiguration.
type LookupConfigurationOutputArgs struct {
	// Name of the configuration.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupConfigurationOutputArgs) ToOutput() pulumix.Output[*LookupConfigurationArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupConfigurationArgs {
		return &LookupConfigurationArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupConfigurationResultOutput struct{ *pulumi.OutputState }

func (LookupConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConfigurationResult)(nil)).Elem()
}

func (o LookupConfigurationResultOutput) ToOutput(context.Context) pulumix.Output[*LookupConfigurationResult] {
	return pulumix.Output[*LookupConfigurationResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupConfigurationResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupConfigurationResult](o, func(v *LookupConfigurationResult) string { return v.Arn })
}

func (o LookupConfigurationResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupConfigurationResult](o, func(v *LookupConfigurationResult) string { return v.Description })
}

func (o LookupConfigurationResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupConfigurationResult](o, func(v *LookupConfigurationResult) string { return v.Id })
}

func (o LookupConfigurationResultOutput) KafkaVersions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupConfigurationResult](o, func(v *LookupConfigurationResult) []string { return v.KafkaVersions })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupConfigurationResultOutput) LatestRevision() pulumix.Output[int] {
	return pulumix.Apply[*LookupConfigurationResult](o, func(v *LookupConfigurationResult) int { return v.LatestRevision })
}

func (o LookupConfigurationResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupConfigurationResult](o, func(v *LookupConfigurationResult) string { return v.Name })
}

func (o LookupConfigurationResultOutput) ServerProperties() pulumix.Output[string] {
	return pulumix.Apply[*LookupConfigurationResult](o, func(v *LookupConfigurationResult) string { return v.ServerProperties })
}
