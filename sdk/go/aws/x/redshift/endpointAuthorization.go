// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new Amazon Redshift endpoint authorization.
type EndpointAuthorization struct {
	pulumi.CustomResourceState

	// The Amazon Web Services account ID to grant access to.
	Account pulumix.Output[string] `pulumi:"account"`
	// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
	AllowedAllVpcs pulumix.Output[bool] `pulumi:"allowedAllVpcs"`
	// The cluster identifier of the cluster to grant access to.
	ClusterIdentifier pulumix.Output[string] `pulumi:"clusterIdentifier"`
	// The number of Redshift-managed VPC endpoints created for the authorization.
	EndpointCount pulumix.Output[int] `pulumi:"endpointCount"`
	// Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted. Default value is `false`.
	ForceDelete pulumix.Output[*bool] `pulumi:"forceDelete"`
	// The Amazon Web Services account ID of the grantee of the cluster.
	Grantee pulumix.Output[string] `pulumi:"grantee"`
	// The Amazon Web Services account ID of the cluster owner.
	Grantor pulumix.Output[string] `pulumi:"grantor"`
	// The virtual private cloud (VPC) identifiers to grant access to. If none are specified all VPCs in shared account are allowed.
	VpcIds pulumix.ArrayOutput[string] `pulumi:"vpcIds"`
}

// NewEndpointAuthorization registers a new resource with the given unique name, arguments, and options.
func NewEndpointAuthorization(ctx *pulumi.Context,
	name string, args *EndpointAuthorizationArgs, opts ...pulumi.ResourceOption) (*EndpointAuthorization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Account == nil {
		return nil, errors.New("invalid value for required argument 'Account'")
	}
	if args.ClusterIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ClusterIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EndpointAuthorization
	err := ctx.RegisterResource("aws:redshift/endpointAuthorization:EndpointAuthorization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpointAuthorization gets an existing EndpointAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpointAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointAuthorizationState, opts ...pulumi.ResourceOption) (*EndpointAuthorization, error) {
	var resource EndpointAuthorization
	err := ctx.ReadResource("aws:redshift/endpointAuthorization:EndpointAuthorization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EndpointAuthorization resources.
type endpointAuthorizationState struct {
	// The Amazon Web Services account ID to grant access to.
	Account *string `pulumi:"account"`
	// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
	AllowedAllVpcs *bool `pulumi:"allowedAllVpcs"`
	// The cluster identifier of the cluster to grant access to.
	ClusterIdentifier *string `pulumi:"clusterIdentifier"`
	// The number of Redshift-managed VPC endpoints created for the authorization.
	EndpointCount *int `pulumi:"endpointCount"`
	// Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted. Default value is `false`.
	ForceDelete *bool `pulumi:"forceDelete"`
	// The Amazon Web Services account ID of the grantee of the cluster.
	Grantee *string `pulumi:"grantee"`
	// The Amazon Web Services account ID of the cluster owner.
	Grantor *string `pulumi:"grantor"`
	// The virtual private cloud (VPC) identifiers to grant access to. If none are specified all VPCs in shared account are allowed.
	VpcIds []string `pulumi:"vpcIds"`
}

type EndpointAuthorizationState struct {
	// The Amazon Web Services account ID to grant access to.
	Account pulumix.Input[*string]
	// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
	AllowedAllVpcs pulumix.Input[*bool]
	// The cluster identifier of the cluster to grant access to.
	ClusterIdentifier pulumix.Input[*string]
	// The number of Redshift-managed VPC endpoints created for the authorization.
	EndpointCount pulumix.Input[*int]
	// Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted. Default value is `false`.
	ForceDelete pulumix.Input[*bool]
	// The Amazon Web Services account ID of the grantee of the cluster.
	Grantee pulumix.Input[*string]
	// The Amazon Web Services account ID of the cluster owner.
	Grantor pulumix.Input[*string]
	// The virtual private cloud (VPC) identifiers to grant access to. If none are specified all VPCs in shared account are allowed.
	VpcIds pulumix.Input[[]string]
}

func (EndpointAuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAuthorizationState)(nil)).Elem()
}

type endpointAuthorizationArgs struct {
	// The Amazon Web Services account ID to grant access to.
	Account string `pulumi:"account"`
	// The cluster identifier of the cluster to grant access to.
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
	// Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted. Default value is `false`.
	ForceDelete *bool `pulumi:"forceDelete"`
	// The virtual private cloud (VPC) identifiers to grant access to. If none are specified all VPCs in shared account are allowed.
	VpcIds []string `pulumi:"vpcIds"`
}

// The set of arguments for constructing a EndpointAuthorization resource.
type EndpointAuthorizationArgs struct {
	// The Amazon Web Services account ID to grant access to.
	Account pulumix.Input[string]
	// The cluster identifier of the cluster to grant access to.
	ClusterIdentifier pulumix.Input[string]
	// Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted. Default value is `false`.
	ForceDelete pulumix.Input[*bool]
	// The virtual private cloud (VPC) identifiers to grant access to. If none are specified all VPCs in shared account are allowed.
	VpcIds pulumix.Input[[]string]
}

func (EndpointAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAuthorizationArgs)(nil)).Elem()
}

type EndpointAuthorizationOutput struct{ *pulumi.OutputState }

func (EndpointAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAuthorization)(nil)).Elem()
}

func (o EndpointAuthorizationOutput) ToEndpointAuthorizationOutput() EndpointAuthorizationOutput {
	return o
}

func (o EndpointAuthorizationOutput) ToEndpointAuthorizationOutputWithContext(ctx context.Context) EndpointAuthorizationOutput {
	return o
}

func (o EndpointAuthorizationOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointAuthorization] {
	return pulumix.Output[EndpointAuthorization]{
		OutputState: o.OutputState,
	}
}

// The Amazon Web Services account ID to grant access to.
func (o EndpointAuthorizationOutput) Account() pulumix.Output[string] {
	value := pulumix.Apply[EndpointAuthorization](o, func(v EndpointAuthorization) pulumix.Output[string] { return v.Account })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
func (o EndpointAuthorizationOutput) AllowedAllVpcs() pulumix.Output[bool] {
	value := pulumix.Apply[EndpointAuthorization](o, func(v EndpointAuthorization) pulumix.Output[bool] { return v.AllowedAllVpcs })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The cluster identifier of the cluster to grant access to.
func (o EndpointAuthorizationOutput) ClusterIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[EndpointAuthorization](o, func(v EndpointAuthorization) pulumix.Output[string] { return v.ClusterIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The number of Redshift-managed VPC endpoints created for the authorization.
func (o EndpointAuthorizationOutput) EndpointCount() pulumix.Output[int] {
	value := pulumix.Apply[EndpointAuthorization](o, func(v EndpointAuthorization) pulumix.Output[int] { return v.EndpointCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted. Default value is `false`.
func (o EndpointAuthorizationOutput) ForceDelete() pulumix.Output[*bool] {
	value := pulumix.Apply[EndpointAuthorization](o, func(v EndpointAuthorization) pulumix.Output[*bool] { return v.ForceDelete })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The Amazon Web Services account ID of the grantee of the cluster.
func (o EndpointAuthorizationOutput) Grantee() pulumix.Output[string] {
	value := pulumix.Apply[EndpointAuthorization](o, func(v EndpointAuthorization) pulumix.Output[string] { return v.Grantee })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Web Services account ID of the cluster owner.
func (o EndpointAuthorizationOutput) Grantor() pulumix.Output[string] {
	value := pulumix.Apply[EndpointAuthorization](o, func(v EndpointAuthorization) pulumix.Output[string] { return v.Grantor })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The virtual private cloud (VPC) identifiers to grant access to. If none are specified all VPCs in shared account are allowed.
func (o EndpointAuthorizationOutput) VpcIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EndpointAuthorization](o, func(v EndpointAuthorization) pulumix.ArrayOutput[string] { return v.VpcIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(EndpointAuthorizationOutput{})
}
