// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a SageMaker Studio Lifecycle Config resource.
type StudioLifecycleConfig struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) assigned by AWS to this Studio Lifecycle Config.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
	StudioLifecycleConfigAppType pulumix.Output[string] `pulumi:"studioLifecycleConfigAppType"`
	// The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
	StudioLifecycleConfigContent pulumix.Output[string] `pulumi:"studioLifecycleConfigContent"`
	// The name of the Studio Lifecycle Configuration to create.
	StudioLifecycleConfigName pulumix.Output[string] `pulumi:"studioLifecycleConfigName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewStudioLifecycleConfig registers a new resource with the given unique name, arguments, and options.
func NewStudioLifecycleConfig(ctx *pulumi.Context,
	name string, args *StudioLifecycleConfigArgs, opts ...pulumi.ResourceOption) (*StudioLifecycleConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StudioLifecycleConfigAppType == nil {
		return nil, errors.New("invalid value for required argument 'StudioLifecycleConfigAppType'")
	}
	if args.StudioLifecycleConfigContent == nil {
		return nil, errors.New("invalid value for required argument 'StudioLifecycleConfigContent'")
	}
	if args.StudioLifecycleConfigName == nil {
		return nil, errors.New("invalid value for required argument 'StudioLifecycleConfigName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StudioLifecycleConfig
	err := ctx.RegisterResource("aws:sagemaker/studioLifecycleConfig:StudioLifecycleConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStudioLifecycleConfig gets an existing StudioLifecycleConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStudioLifecycleConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StudioLifecycleConfigState, opts ...pulumi.ResourceOption) (*StudioLifecycleConfig, error) {
	var resource StudioLifecycleConfig
	err := ctx.ReadResource("aws:sagemaker/studioLifecycleConfig:StudioLifecycleConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StudioLifecycleConfig resources.
type studioLifecycleConfigState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Studio Lifecycle Config.
	Arn *string `pulumi:"arn"`
	// The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
	StudioLifecycleConfigAppType *string `pulumi:"studioLifecycleConfigAppType"`
	// The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
	StudioLifecycleConfigContent *string `pulumi:"studioLifecycleConfigContent"`
	// The name of the Studio Lifecycle Configuration to create.
	StudioLifecycleConfigName *string `pulumi:"studioLifecycleConfigName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type StudioLifecycleConfigState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Studio Lifecycle Config.
	Arn pulumix.Input[*string]
	// The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
	StudioLifecycleConfigAppType pulumix.Input[*string]
	// The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
	StudioLifecycleConfigContent pulumix.Input[*string]
	// The name of the Studio Lifecycle Configuration to create.
	StudioLifecycleConfigName pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (StudioLifecycleConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*studioLifecycleConfigState)(nil)).Elem()
}

type studioLifecycleConfigArgs struct {
	// The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
	StudioLifecycleConfigAppType string `pulumi:"studioLifecycleConfigAppType"`
	// The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
	StudioLifecycleConfigContent string `pulumi:"studioLifecycleConfigContent"`
	// The name of the Studio Lifecycle Configuration to create.
	StudioLifecycleConfigName string `pulumi:"studioLifecycleConfigName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a StudioLifecycleConfig resource.
type StudioLifecycleConfigArgs struct {
	// The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
	StudioLifecycleConfigAppType pulumix.Input[string]
	// The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
	StudioLifecycleConfigContent pulumix.Input[string]
	// The name of the Studio Lifecycle Configuration to create.
	StudioLifecycleConfigName pulumix.Input[string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (StudioLifecycleConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*studioLifecycleConfigArgs)(nil)).Elem()
}

type StudioLifecycleConfigOutput struct{ *pulumi.OutputState }

func (StudioLifecycleConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioLifecycleConfig)(nil)).Elem()
}

func (o StudioLifecycleConfigOutput) ToStudioLifecycleConfigOutput() StudioLifecycleConfigOutput {
	return o
}

func (o StudioLifecycleConfigOutput) ToStudioLifecycleConfigOutputWithContext(ctx context.Context) StudioLifecycleConfigOutput {
	return o
}

func (o StudioLifecycleConfigOutput) ToOutput(ctx context.Context) pulumix.Output[StudioLifecycleConfig] {
	return pulumix.Output[StudioLifecycleConfig]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) assigned by AWS to this Studio Lifecycle Config.
func (o StudioLifecycleConfigOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[StudioLifecycleConfig](o, func(v StudioLifecycleConfig) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
func (o StudioLifecycleConfigOutput) StudioLifecycleConfigAppType() pulumix.Output[string] {
	value := pulumix.Apply[StudioLifecycleConfig](o, func(v StudioLifecycleConfig) pulumix.Output[string] { return v.StudioLifecycleConfigAppType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
func (o StudioLifecycleConfigOutput) StudioLifecycleConfigContent() pulumix.Output[string] {
	value := pulumix.Apply[StudioLifecycleConfig](o, func(v StudioLifecycleConfig) pulumix.Output[string] { return v.StudioLifecycleConfigContent })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Studio Lifecycle Configuration to create.
func (o StudioLifecycleConfigOutput) StudioLifecycleConfigName() pulumix.Output[string] {
	value := pulumix.Apply[StudioLifecycleConfig](o, func(v StudioLifecycleConfig) pulumix.Output[string] { return v.StudioLifecycleConfigName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o StudioLifecycleConfigOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[StudioLifecycleConfig](o, func(v StudioLifecycleConfig) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o StudioLifecycleConfigOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[StudioLifecycleConfig](o, func(v StudioLifecycleConfig) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(StudioLifecycleConfigOutput{})
}
