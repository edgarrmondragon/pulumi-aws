// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devicefarm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage AWS Device Farm Uploads.
//
// > **NOTE:** AWS currently has limited regional support for Device Farm (e.g., `us-west-2`). See [AWS Device Farm endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/devicefarm.html) for information on supported regions.
type Upload struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name of this upload.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The upload's category.
	Category pulumix.Output[string] `pulumi:"category"`
	// The upload's content type (for example, application/octet-stream).
	ContentType pulumix.Output[*string] `pulumi:"contentType"`
	// The upload's metadata. For example, for Android, this contains information that is parsed from the manifest and is displayed in the AWS Device Farm console after the associated app is uploaded.
	Metadata pulumix.Output[string] `pulumi:"metadata"`
	// The upload's file name. The name should not contain any forward slashes (/). If you are uploading an iOS app, the file name must end with the .ipa extension. If you are uploading an Android app, the file name must end with the .apk extension. For all others, the file name must end with the .zip file extension.
	Name pulumix.Output[string] `pulumi:"name"`
	// The ARN of the project for the upload.
	ProjectArn pulumix.Output[string] `pulumi:"projectArn"`
	// The upload's upload type. See [AWS Docs](https://docs.aws.amazon.com/devicefarm/latest/APIReference/API_CreateUpload.html#API_CreateUpload_RequestSyntax) for valid list of values.
	Type pulumix.Output[string] `pulumi:"type"`
	// The presigned Amazon S3 URL that was used to store a file using a PUT request.
	Url pulumix.Output[string] `pulumi:"url"`
}

// NewUpload registers a new resource with the given unique name, arguments, and options.
func NewUpload(ctx *pulumi.Context,
	name string, args *UploadArgs, opts ...pulumi.ResourceOption) (*Upload, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectArn == nil {
		return nil, errors.New("invalid value for required argument 'ProjectArn'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Upload
	err := ctx.RegisterResource("aws:devicefarm/upload:Upload", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUpload gets an existing Upload resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUpload(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UploadState, opts ...pulumi.ResourceOption) (*Upload, error) {
	var resource Upload
	err := ctx.ReadResource("aws:devicefarm/upload:Upload", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Upload resources.
type uploadState struct {
	// The Amazon Resource Name of this upload.
	Arn *string `pulumi:"arn"`
	// The upload's category.
	Category *string `pulumi:"category"`
	// The upload's content type (for example, application/octet-stream).
	ContentType *string `pulumi:"contentType"`
	// The upload's metadata. For example, for Android, this contains information that is parsed from the manifest and is displayed in the AWS Device Farm console after the associated app is uploaded.
	Metadata *string `pulumi:"metadata"`
	// The upload's file name. The name should not contain any forward slashes (/). If you are uploading an iOS app, the file name must end with the .ipa extension. If you are uploading an Android app, the file name must end with the .apk extension. For all others, the file name must end with the .zip file extension.
	Name *string `pulumi:"name"`
	// The ARN of the project for the upload.
	ProjectArn *string `pulumi:"projectArn"`
	// The upload's upload type. See [AWS Docs](https://docs.aws.amazon.com/devicefarm/latest/APIReference/API_CreateUpload.html#API_CreateUpload_RequestSyntax) for valid list of values.
	Type *string `pulumi:"type"`
	// The presigned Amazon S3 URL that was used to store a file using a PUT request.
	Url *string `pulumi:"url"`
}

type UploadState struct {
	// The Amazon Resource Name of this upload.
	Arn pulumix.Input[*string]
	// The upload's category.
	Category pulumix.Input[*string]
	// The upload's content type (for example, application/octet-stream).
	ContentType pulumix.Input[*string]
	// The upload's metadata. For example, for Android, this contains information that is parsed from the manifest and is displayed in the AWS Device Farm console after the associated app is uploaded.
	Metadata pulumix.Input[*string]
	// The upload's file name. The name should not contain any forward slashes (/). If you are uploading an iOS app, the file name must end with the .ipa extension. If you are uploading an Android app, the file name must end with the .apk extension. For all others, the file name must end with the .zip file extension.
	Name pulumix.Input[*string]
	// The ARN of the project for the upload.
	ProjectArn pulumix.Input[*string]
	// The upload's upload type. See [AWS Docs](https://docs.aws.amazon.com/devicefarm/latest/APIReference/API_CreateUpload.html#API_CreateUpload_RequestSyntax) for valid list of values.
	Type pulumix.Input[*string]
	// The presigned Amazon S3 URL that was used to store a file using a PUT request.
	Url pulumix.Input[*string]
}

func (UploadState) ElementType() reflect.Type {
	return reflect.TypeOf((*uploadState)(nil)).Elem()
}

type uploadArgs struct {
	// The upload's content type (for example, application/octet-stream).
	ContentType *string `pulumi:"contentType"`
	// The upload's file name. The name should not contain any forward slashes (/). If you are uploading an iOS app, the file name must end with the .ipa extension. If you are uploading an Android app, the file name must end with the .apk extension. For all others, the file name must end with the .zip file extension.
	Name *string `pulumi:"name"`
	// The ARN of the project for the upload.
	ProjectArn string `pulumi:"projectArn"`
	// The upload's upload type. See [AWS Docs](https://docs.aws.amazon.com/devicefarm/latest/APIReference/API_CreateUpload.html#API_CreateUpload_RequestSyntax) for valid list of values.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Upload resource.
type UploadArgs struct {
	// The upload's content type (for example, application/octet-stream).
	ContentType pulumix.Input[*string]
	// The upload's file name. The name should not contain any forward slashes (/). If you are uploading an iOS app, the file name must end with the .ipa extension. If you are uploading an Android app, the file name must end with the .apk extension. For all others, the file name must end with the .zip file extension.
	Name pulumix.Input[*string]
	// The ARN of the project for the upload.
	ProjectArn pulumix.Input[string]
	// The upload's upload type. See [AWS Docs](https://docs.aws.amazon.com/devicefarm/latest/APIReference/API_CreateUpload.html#API_CreateUpload_RequestSyntax) for valid list of values.
	Type pulumix.Input[string]
}

func (UploadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*uploadArgs)(nil)).Elem()
}

type UploadOutput struct{ *pulumi.OutputState }

func (UploadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Upload)(nil)).Elem()
}

func (o UploadOutput) ToUploadOutput() UploadOutput {
	return o
}

func (o UploadOutput) ToUploadOutputWithContext(ctx context.Context) UploadOutput {
	return o
}

func (o UploadOutput) ToOutput(ctx context.Context) pulumix.Output[Upload] {
	return pulumix.Output[Upload]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name of this upload.
func (o UploadOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Upload](o, func(v Upload) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The upload's category.
func (o UploadOutput) Category() pulumix.Output[string] {
	value := pulumix.Apply[Upload](o, func(v Upload) pulumix.Output[string] { return v.Category })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The upload's content type (for example, application/octet-stream).
func (o UploadOutput) ContentType() pulumix.Output[*string] {
	value := pulumix.Apply[Upload](o, func(v Upload) pulumix.Output[*string] { return v.ContentType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The upload's metadata. For example, for Android, this contains information that is parsed from the manifest and is displayed in the AWS Device Farm console after the associated app is uploaded.
func (o UploadOutput) Metadata() pulumix.Output[string] {
	value := pulumix.Apply[Upload](o, func(v Upload) pulumix.Output[string] { return v.Metadata })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The upload's file name. The name should not contain any forward slashes (/). If you are uploading an iOS app, the file name must end with the .ipa extension. If you are uploading an Android app, the file name must end with the .apk extension. For all others, the file name must end with the .zip file extension.
func (o UploadOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Upload](o, func(v Upload) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the project for the upload.
func (o UploadOutput) ProjectArn() pulumix.Output[string] {
	value := pulumix.Apply[Upload](o, func(v Upload) pulumix.Output[string] { return v.ProjectArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The upload's upload type. See [AWS Docs](https://docs.aws.amazon.com/devicefarm/latest/APIReference/API_CreateUpload.html#API_CreateUpload_RequestSyntax) for valid list of values.
func (o UploadOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Upload](o, func(v Upload) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The presigned Amazon S3 URL that was used to store a file using a PUT request.
func (o UploadOutput) Url() pulumix.Output[string] {
	value := pulumix.Apply[Upload](o, func(v Upload) pulumix.Output[string] { return v.Url })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(UploadOutput{})
}
