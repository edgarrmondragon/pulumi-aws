// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS RDS (Relational Database) Clusters.
func GetClusters(ctx *pulumi.Context, args *GetClustersArgs, opts ...pulumi.InvokeOption) (*GetClustersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetClustersResult
	err := ctx.Invoke("aws:rds/getClusters:getClusters", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClusters.
type GetClustersArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters []GetClustersFilter `pulumi:"filters"`
}

// A collection of values returned by getClusters.
type GetClustersResult struct {
	// Set of cluster ARNs of the matched RDS clusters.
	ClusterArns []string `pulumi:"clusterArns"`
	// Set of ARNs of cluster identifiers of the matched RDS clusters.
	ClusterIdentifiers []string            `pulumi:"clusterIdentifiers"`
	Filters            []GetClustersFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetClustersOutput(ctx *pulumi.Context, args GetClustersOutputArgs, opts ...pulumi.InvokeOption) GetClustersResultOutput {
	outputResult := pulumix.ApplyErr[*GetClustersArgs](args.ToOutput(), func(plainArgs *GetClustersArgs) (*GetClustersResult, error) {
		return GetClusters(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetClustersResultOutput, *GetClustersResult](outputResult)
}

// A collection of arguments for invoking getClusters.
type GetClustersOutputArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters pulumix.Input[[]*GetClustersFilterArgs] `pulumi:"filters"`
}

func (args GetClustersOutputArgs) ToOutput() pulumix.Output[*GetClustersArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetClustersArgs {
		return &GetClustersArgs{
			Filters: resolvedArgs[0].([]GetClustersFilter),
		}
	})
}

type GetClustersResultOutput struct{ *pulumi.OutputState }

func (GetClustersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersResult)(nil)).Elem()
}

func (o GetClustersResultOutput) ToOutput(context.Context) pulumix.Output[*GetClustersResult] {
	return pulumix.Output[*GetClustersResult]{
		OutputState: o.OutputState,
	}
}

func (o GetClustersResultOutput) ClusterArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetClustersResult](o, func(v *GetClustersResult) []string { return v.ClusterArns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetClustersResultOutput) ClusterIdentifiers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetClustersResult](o, func(v *GetClustersResult) []string { return v.ClusterIdentifiers })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetClustersResultOutput) Filters() pulumix.GArrayOutput[GetClustersFilter, GetClustersFilterOutput] {
	value := pulumix.Apply[*GetClustersResult](o, func(v *GetClustersResult) []GetClustersFilter { return v.Filters })
	return pulumix.GArrayOutput[GetClustersFilter, GetClustersFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetClustersResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetClustersResult](o, func(v *GetClustersResult) string { return v.Id })
}
