// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about a DB Snapshot for use when provisioning DB instances
//
// > **NOTE:** This data source does not apply to snapshots created on Aurora DB clusters.
// See the `rds.ClusterSnapshot` data source for DB Cluster snapshots.
func LookupSnapshot(ctx *pulumi.Context, args *LookupSnapshotArgs, opts ...pulumi.InvokeOption) (*LookupSnapshotResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSnapshotResult
	err := ctx.Invoke("aws:rds/getSnapshot:getSnapshot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSnapshot.
type LookupSnapshotArgs struct {
	// Returns the list of snapshots created by the specific db_instance
	DbInstanceIdentifier *string `pulumi:"dbInstanceIdentifier"`
	// Returns information on a specific snapshot_id.
	DbSnapshotIdentifier *string `pulumi:"dbSnapshotIdentifier"`
	// Set this value to true to include manual DB snapshots that are public and can be
	// copied or restored by any AWS account, otherwise set this value to false. The default is `false`.
	// `tags` - (Optional) Mapping of tags, each pair of which must exactly match
	// a pair on the desired DB snapshot.
	IncludePublic *bool `pulumi:"includePublic"`
	// Set this value to true to include shared manual DB snapshots from other
	// AWS accounts that this AWS account has been given permission to copy or restore, otherwise set this value to false.
	// The default is `false`.
	IncludeShared *bool `pulumi:"includeShared"`
	// If more than one result is returned, use the most
	// recent Snapshot.
	MostRecent *bool `pulumi:"mostRecent"`
	// Type of snapshots to be returned. If you don't specify a SnapshotType
	// value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not
	// included in the returned results by default. Possible values are, `automated`, `manual`, `shared`, `public` and `awsbackup`.
	SnapshotType *string           `pulumi:"snapshotType"`
	Tags         map[string]string `pulumi:"tags"`
}

// A collection of values returned by getSnapshot.
type LookupSnapshotResult struct {
	// Allocated storage size in gigabytes (GB).
	AllocatedStorage int `pulumi:"allocatedStorage"`
	// Name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
	AvailabilityZone     string  `pulumi:"availabilityZone"`
	DbInstanceIdentifier *string `pulumi:"dbInstanceIdentifier"`
	// ARN for the DB snapshot.
	DbSnapshotArn        string  `pulumi:"dbSnapshotArn"`
	DbSnapshotIdentifier *string `pulumi:"dbSnapshotIdentifier"`
	// Whether the DB snapshot is encrypted.
	Encrypted bool `pulumi:"encrypted"`
	// Name of the database engine.
	Engine string `pulumi:"engine"`
	// Version of the database engine.
	EngineVersion string `pulumi:"engineVersion"`
	// The provider-assigned unique ID for this managed resource.
	Id            string `pulumi:"id"`
	IncludePublic *bool  `pulumi:"includePublic"`
	IncludeShared *bool  `pulumi:"includeShared"`
	// Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
	Iops int `pulumi:"iops"`
	// ARN for the KMS encryption key.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// License model information for the restored DB instance.
	LicenseModel string `pulumi:"licenseModel"`
	MostRecent   *bool  `pulumi:"mostRecent"`
	// Provides the option group name for the DB snapshot.
	OptionGroupName string `pulumi:"optionGroupName"`
	Port            int    `pulumi:"port"`
	// Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).
	SnapshotCreateTime string  `pulumi:"snapshotCreateTime"`
	SnapshotType       *string `pulumi:"snapshotType"`
	// DB snapshot ARN that the DB snapshot was copied from. It only has value in case of cross customer or cross region copy.
	SourceDbSnapshotIdentifier string `pulumi:"sourceDbSnapshotIdentifier"`
	// Region that the DB snapshot was created in or copied from.
	SourceRegion string `pulumi:"sourceRegion"`
	// Status of this DB snapshot.
	Status string `pulumi:"status"`
	// Storage type associated with DB snapshot.
	StorageType string            `pulumi:"storageType"`
	Tags        map[string]string `pulumi:"tags"`
	// ID of the VPC associated with the DB snapshot.
	VpcId string `pulumi:"vpcId"`
}

func LookupSnapshotOutput(ctx *pulumi.Context, args LookupSnapshotOutputArgs, opts ...pulumi.InvokeOption) LookupSnapshotResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSnapshotArgs](args.ToOutput(), func(plainArgs *LookupSnapshotArgs) (*LookupSnapshotResult, error) {
		return LookupSnapshot(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSnapshotResultOutput, *LookupSnapshotResult](outputResult)
}

// A collection of arguments for invoking getSnapshot.
type LookupSnapshotOutputArgs struct {
	// Returns the list of snapshots created by the specific db_instance
	DbInstanceIdentifier pulumix.Input[*string] `pulumi:"dbInstanceIdentifier"`
	// Returns information on a specific snapshot_id.
	DbSnapshotIdentifier pulumix.Input[*string] `pulumi:"dbSnapshotIdentifier"`
	// Set this value to true to include manual DB snapshots that are public and can be
	// copied or restored by any AWS account, otherwise set this value to false. The default is `false`.
	// `tags` - (Optional) Mapping of tags, each pair of which must exactly match
	// a pair on the desired DB snapshot.
	IncludePublic pulumix.Input[*bool] `pulumi:"includePublic"`
	// Set this value to true to include shared manual DB snapshots from other
	// AWS accounts that this AWS account has been given permission to copy or restore, otherwise set this value to false.
	// The default is `false`.
	IncludeShared pulumix.Input[*bool] `pulumi:"includeShared"`
	// If more than one result is returned, use the most
	// recent Snapshot.
	MostRecent pulumix.Input[*bool] `pulumi:"mostRecent"`
	// Type of snapshots to be returned. If you don't specify a SnapshotType
	// value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not
	// included in the returned results by default. Possible values are, `automated`, `manual`, `shared`, `public` and `awsbackup`.
	SnapshotType pulumix.Input[*string]           `pulumi:"snapshotType"`
	Tags         pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupSnapshotOutputArgs) ToOutput() pulumix.Output[*LookupSnapshotArgs] {
	allArgs := pulumix.All(
		args.DbInstanceIdentifier.ToOutput(context.Background()).AsAny(),
		args.DbSnapshotIdentifier.ToOutput(context.Background()).AsAny(),
		args.IncludePublic.ToOutput(context.Background()).AsAny(),
		args.IncludeShared.ToOutput(context.Background()).AsAny(),
		args.MostRecent.ToOutput(context.Background()).AsAny(),
		args.SnapshotType.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSnapshotArgs {
		return &LookupSnapshotArgs{
			DbInstanceIdentifier: resolvedArgs[0].(*string),
			DbSnapshotIdentifier: resolvedArgs[1].(*string),
			IncludePublic:        resolvedArgs[2].(*bool),
			IncludeShared:        resolvedArgs[3].(*bool),
			MostRecent:           resolvedArgs[4].(*bool),
			SnapshotType:         resolvedArgs[5].(*string),
			Tags:                 resolvedArgs[6].(map[string]string),
		}
	})
}

type LookupSnapshotResultOutput struct{ *pulumi.OutputState }

func (LookupSnapshotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnapshotResult)(nil)).Elem()
}

func (o LookupSnapshotResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSnapshotResult] {
	return pulumix.Output[*LookupSnapshotResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSnapshotResultOutput) AllocatedStorage() pulumix.Output[int] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) int { return v.AllocatedStorage })
}

func (o LookupSnapshotResultOutput) AvailabilityZone() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.AvailabilityZone })
}

func (o LookupSnapshotResultOutput) DbInstanceIdentifier() pulumix.Output[*string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) *string { return v.DbInstanceIdentifier })
}

func (o LookupSnapshotResultOutput) DbSnapshotArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.DbSnapshotArn })
}

func (o LookupSnapshotResultOutput) DbSnapshotIdentifier() pulumix.Output[*string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) *string { return v.DbSnapshotIdentifier })
}

func (o LookupSnapshotResultOutput) Encrypted() pulumix.Output[bool] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) bool { return v.Encrypted })
}

func (o LookupSnapshotResultOutput) Engine() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.Engine })
}

func (o LookupSnapshotResultOutput) EngineVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.EngineVersion })
}

func (o LookupSnapshotResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.Id })
}

func (o LookupSnapshotResultOutput) IncludePublic() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) *bool { return v.IncludePublic })
}

func (o LookupSnapshotResultOutput) IncludeShared() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) *bool { return v.IncludeShared })
}

func (o LookupSnapshotResultOutput) Iops() pulumix.Output[int] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) int { return v.Iops })
}

func (o LookupSnapshotResultOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.KmsKeyId })
}

func (o LookupSnapshotResultOutput) LicenseModel() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.LicenseModel })
}

func (o LookupSnapshotResultOutput) MostRecent() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) *bool { return v.MostRecent })
}

func (o LookupSnapshotResultOutput) OptionGroupName() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.OptionGroupName })
}

func (o LookupSnapshotResultOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) int { return v.Port })
}

func (o LookupSnapshotResultOutput) SnapshotCreateTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.SnapshotCreateTime })
}

func (o LookupSnapshotResultOutput) SnapshotType() pulumix.Output[*string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) *string { return v.SnapshotType })
}

func (o LookupSnapshotResultOutput) SourceDbSnapshotIdentifier() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.SourceDbSnapshotIdentifier })
}

func (o LookupSnapshotResultOutput) SourceRegion() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.SourceRegion })
}

func (o LookupSnapshotResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.Status })
}

func (o LookupSnapshotResultOutput) StorageType() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.StorageType })
}

func (o LookupSnapshotResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupSnapshotResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.VpcId })
}
