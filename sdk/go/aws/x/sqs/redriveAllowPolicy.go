// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a SQS Queue Redrive Allow Policy resource.
type RedriveAllowPolicy struct {
	pulumi.CustomResourceState

	// The URL of the SQS Queue to which to attach the policy
	QueueUrl pulumix.Output[string] `pulumi:"queueUrl"`
	// The JSON redrive allow policy for the SQS queue. Learn more in the [Amazon SQS dead-letter queues documentation](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).
	RedriveAllowPolicy pulumix.Output[string] `pulumi:"redriveAllowPolicy"`
}

// NewRedriveAllowPolicy registers a new resource with the given unique name, arguments, and options.
func NewRedriveAllowPolicy(ctx *pulumi.Context,
	name string, args *RedriveAllowPolicyArgs, opts ...pulumi.ResourceOption) (*RedriveAllowPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.QueueUrl == nil {
		return nil, errors.New("invalid value for required argument 'QueueUrl'")
	}
	if args.RedriveAllowPolicy == nil {
		return nil, errors.New("invalid value for required argument 'RedriveAllowPolicy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RedriveAllowPolicy
	err := ctx.RegisterResource("aws:sqs/redriveAllowPolicy:RedriveAllowPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedriveAllowPolicy gets an existing RedriveAllowPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedriveAllowPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedriveAllowPolicyState, opts ...pulumi.ResourceOption) (*RedriveAllowPolicy, error) {
	var resource RedriveAllowPolicy
	err := ctx.ReadResource("aws:sqs/redriveAllowPolicy:RedriveAllowPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedriveAllowPolicy resources.
type redriveAllowPolicyState struct {
	// The URL of the SQS Queue to which to attach the policy
	QueueUrl *string `pulumi:"queueUrl"`
	// The JSON redrive allow policy for the SQS queue. Learn more in the [Amazon SQS dead-letter queues documentation](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).
	RedriveAllowPolicy *string `pulumi:"redriveAllowPolicy"`
}

type RedriveAllowPolicyState struct {
	// The URL of the SQS Queue to which to attach the policy
	QueueUrl pulumix.Input[*string]
	// The JSON redrive allow policy for the SQS queue. Learn more in the [Amazon SQS dead-letter queues documentation](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).
	RedriveAllowPolicy pulumix.Input[*string]
}

func (RedriveAllowPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*redriveAllowPolicyState)(nil)).Elem()
}

type redriveAllowPolicyArgs struct {
	// The URL of the SQS Queue to which to attach the policy
	QueueUrl string `pulumi:"queueUrl"`
	// The JSON redrive allow policy for the SQS queue. Learn more in the [Amazon SQS dead-letter queues documentation](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).
	RedriveAllowPolicy string `pulumi:"redriveAllowPolicy"`
}

// The set of arguments for constructing a RedriveAllowPolicy resource.
type RedriveAllowPolicyArgs struct {
	// The URL of the SQS Queue to which to attach the policy
	QueueUrl pulumix.Input[string]
	// The JSON redrive allow policy for the SQS queue. Learn more in the [Amazon SQS dead-letter queues documentation](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).
	RedriveAllowPolicy pulumix.Input[string]
}

func (RedriveAllowPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redriveAllowPolicyArgs)(nil)).Elem()
}

type RedriveAllowPolicyOutput struct{ *pulumi.OutputState }

func (RedriveAllowPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedriveAllowPolicy)(nil)).Elem()
}

func (o RedriveAllowPolicyOutput) ToRedriveAllowPolicyOutput() RedriveAllowPolicyOutput {
	return o
}

func (o RedriveAllowPolicyOutput) ToRedriveAllowPolicyOutputWithContext(ctx context.Context) RedriveAllowPolicyOutput {
	return o
}

func (o RedriveAllowPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RedriveAllowPolicy] {
	return pulumix.Output[RedriveAllowPolicy]{
		OutputState: o.OutputState,
	}
}

// The URL of the SQS Queue to which to attach the policy
func (o RedriveAllowPolicyOutput) QueueUrl() pulumix.Output[string] {
	value := pulumix.Apply[RedriveAllowPolicy](o, func(v RedriveAllowPolicy) pulumix.Output[string] { return v.QueueUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The JSON redrive allow policy for the SQS queue. Learn more in the [Amazon SQS dead-letter queues documentation](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).
func (o RedriveAllowPolicyOutput) RedriveAllowPolicy() pulumix.Output[string] {
	value := pulumix.Apply[RedriveAllowPolicy](o, func(v RedriveAllowPolicy) pulumix.Output[string] { return v.RedriveAllowPolicy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RedriveAllowPolicyOutput{})
}
