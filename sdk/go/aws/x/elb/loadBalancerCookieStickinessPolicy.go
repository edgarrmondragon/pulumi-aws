// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a load balancer cookie stickiness policy, which allows an ELB to control the sticky session lifetime of the browser.
type LoadBalancerCookieStickinessPolicy struct {
	pulumi.CustomResourceState

	// The time period after which
	// the session cookie should be considered stale, expressed in seconds.
	CookieExpirationPeriod pulumix.Output[*int] `pulumi:"cookieExpirationPeriod"`
	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort pulumix.Output[int] `pulumi:"lbPort"`
	// The load balancer to which the policy
	// should be attached.
	LoadBalancer pulumix.Output[string] `pulumi:"loadBalancer"`
	// The name of the stickiness policy.
	Name pulumix.Output[string] `pulumi:"name"`
}

// NewLoadBalancerCookieStickinessPolicy registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancerCookieStickinessPolicy(ctx *pulumi.Context,
	name string, args *LoadBalancerCookieStickinessPolicyArgs, opts ...pulumi.ResourceOption) (*LoadBalancerCookieStickinessPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LbPort == nil {
		return nil, errors.New("invalid value for required argument 'LbPort'")
	}
	if args.LoadBalancer == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancer'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:elasticloadbalancing/loadBalancerCookieStickinessPolicy:LoadBalancerCookieStickinessPolicy"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancerCookieStickinessPolicy
	err := ctx.RegisterResource("aws:elb/loadBalancerCookieStickinessPolicy:LoadBalancerCookieStickinessPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancerCookieStickinessPolicy gets an existing LoadBalancerCookieStickinessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancerCookieStickinessPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerCookieStickinessPolicyState, opts ...pulumi.ResourceOption) (*LoadBalancerCookieStickinessPolicy, error) {
	var resource LoadBalancerCookieStickinessPolicy
	err := ctx.ReadResource("aws:elb/loadBalancerCookieStickinessPolicy:LoadBalancerCookieStickinessPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancerCookieStickinessPolicy resources.
type loadBalancerCookieStickinessPolicyState struct {
	// The time period after which
	// the session cookie should be considered stale, expressed in seconds.
	CookieExpirationPeriod *int `pulumi:"cookieExpirationPeriod"`
	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort *int `pulumi:"lbPort"`
	// The load balancer to which the policy
	// should be attached.
	LoadBalancer *string `pulumi:"loadBalancer"`
	// The name of the stickiness policy.
	Name *string `pulumi:"name"`
}

type LoadBalancerCookieStickinessPolicyState struct {
	// The time period after which
	// the session cookie should be considered stale, expressed in seconds.
	CookieExpirationPeriod pulumix.Input[*int]
	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort pulumix.Input[*int]
	// The load balancer to which the policy
	// should be attached.
	LoadBalancer pulumix.Input[*string]
	// The name of the stickiness policy.
	Name pulumix.Input[*string]
}

func (LoadBalancerCookieStickinessPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerCookieStickinessPolicyState)(nil)).Elem()
}

type loadBalancerCookieStickinessPolicyArgs struct {
	// The time period after which
	// the session cookie should be considered stale, expressed in seconds.
	CookieExpirationPeriod *int `pulumi:"cookieExpirationPeriod"`
	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort int `pulumi:"lbPort"`
	// The load balancer to which the policy
	// should be attached.
	LoadBalancer string `pulumi:"loadBalancer"`
	// The name of the stickiness policy.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a LoadBalancerCookieStickinessPolicy resource.
type LoadBalancerCookieStickinessPolicyArgs struct {
	// The time period after which
	// the session cookie should be considered stale, expressed in seconds.
	CookieExpirationPeriod pulumix.Input[*int]
	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort pulumix.Input[int]
	// The load balancer to which the policy
	// should be attached.
	LoadBalancer pulumix.Input[string]
	// The name of the stickiness policy.
	Name pulumix.Input[*string]
}

func (LoadBalancerCookieStickinessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerCookieStickinessPolicyArgs)(nil)).Elem()
}

type LoadBalancerCookieStickinessPolicyOutput struct{ *pulumi.OutputState }

func (LoadBalancerCookieStickinessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerCookieStickinessPolicy)(nil)).Elem()
}

func (o LoadBalancerCookieStickinessPolicyOutput) ToLoadBalancerCookieStickinessPolicyOutput() LoadBalancerCookieStickinessPolicyOutput {
	return o
}

func (o LoadBalancerCookieStickinessPolicyOutput) ToLoadBalancerCookieStickinessPolicyOutputWithContext(ctx context.Context) LoadBalancerCookieStickinessPolicyOutput {
	return o
}

func (o LoadBalancerCookieStickinessPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[LoadBalancerCookieStickinessPolicy] {
	return pulumix.Output[LoadBalancerCookieStickinessPolicy]{
		OutputState: o.OutputState,
	}
}

// The time period after which
// the session cookie should be considered stale, expressed in seconds.
func (o LoadBalancerCookieStickinessPolicyOutput) CookieExpirationPeriod() pulumix.Output[*int] {
	value := pulumix.Apply[LoadBalancerCookieStickinessPolicy](o, func(v LoadBalancerCookieStickinessPolicy) pulumix.Output[*int] { return v.CookieExpirationPeriod })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The load balancer port to which the policy
// should be applied. This must be an active listener on the load
// balancer.
func (o LoadBalancerCookieStickinessPolicyOutput) LbPort() pulumix.Output[int] {
	value := pulumix.Apply[LoadBalancerCookieStickinessPolicy](o, func(v LoadBalancerCookieStickinessPolicy) pulumix.Output[int] { return v.LbPort })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The load balancer to which the policy
// should be attached.
func (o LoadBalancerCookieStickinessPolicyOutput) LoadBalancer() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancerCookieStickinessPolicy](o, func(v LoadBalancerCookieStickinessPolicy) pulumix.Output[string] { return v.LoadBalancer })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the stickiness policy.
func (o LoadBalancerCookieStickinessPolicyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancerCookieStickinessPolicy](o, func(v LoadBalancerCookieStickinessPolicy) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LoadBalancerCookieStickinessPolicyOutput{})
}
