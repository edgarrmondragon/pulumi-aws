// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The VPN Gateway data source provides details about
// a specific VPN gateway.
func LookupVpnGateway(ctx *pulumi.Context, args *LookupVpnGatewayArgs, opts ...pulumi.InvokeOption) (*LookupVpnGatewayResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpnGatewayResult
	err := ctx.Invoke("aws:ec2/getVpnGateway:getVpnGateway", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpnGateway.
type LookupVpnGatewayArgs struct {
	// Autonomous System Number (ASN) for the Amazon side of the specific VPN Gateway to retrieve.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	AmazonSideAsn *string `pulumi:"amazonSideAsn"`
	// ID of a VPC attached to the specific VPN Gateway to retrieve.
	AttachedVpcId *string `pulumi:"attachedVpcId"`
	// Availability Zone of the specific VPN Gateway to retrieve.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Custom filter block as described below.
	Filters []GetVpnGatewayFilter `pulumi:"filters"`
	// ID of the specific VPN Gateway to retrieve.
	Id *string `pulumi:"id"`
	// State of the specific VPN Gateway to retrieve.
	State *string `pulumi:"state"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired VPN Gateway.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getVpnGateway.
type LookupVpnGatewayResult struct {
	AmazonSideAsn    string                `pulumi:"amazonSideAsn"`
	Arn              string                `pulumi:"arn"`
	AttachedVpcId    string                `pulumi:"attachedVpcId"`
	AvailabilityZone string                `pulumi:"availabilityZone"`
	Filters          []GetVpnGatewayFilter `pulumi:"filters"`
	Id               string                `pulumi:"id"`
	State            string                `pulumi:"state"`
	Tags             map[string]string     `pulumi:"tags"`
}

func LookupVpnGatewayOutput(ctx *pulumi.Context, args LookupVpnGatewayOutputArgs, opts ...pulumi.InvokeOption) LookupVpnGatewayResultOutput {
	outputResult := pulumix.ApplyErr[*LookupVpnGatewayArgs](args.ToOutput(), func(plainArgs *LookupVpnGatewayArgs) (*LookupVpnGatewayResult, error) {
		return LookupVpnGateway(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupVpnGatewayResultOutput, *LookupVpnGatewayResult](outputResult)
}

// A collection of arguments for invoking getVpnGateway.
type LookupVpnGatewayOutputArgs struct {
	// Autonomous System Number (ASN) for the Amazon side of the specific VPN Gateway to retrieve.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	AmazonSideAsn pulumix.Input[*string] `pulumi:"amazonSideAsn"`
	// ID of a VPC attached to the specific VPN Gateway to retrieve.
	AttachedVpcId pulumix.Input[*string] `pulumi:"attachedVpcId"`
	// Availability Zone of the specific VPN Gateway to retrieve.
	AvailabilityZone pulumix.Input[*string] `pulumi:"availabilityZone"`
	// Custom filter block as described below.
	Filters pulumix.Input[[]*GetVpnGatewayFilterArgs] `pulumi:"filters"`
	// ID of the specific VPN Gateway to retrieve.
	Id pulumix.Input[*string] `pulumi:"id"`
	// State of the specific VPN Gateway to retrieve.
	State pulumix.Input[*string] `pulumi:"state"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired VPN Gateway.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupVpnGatewayOutputArgs) ToOutput() pulumix.Output[*LookupVpnGatewayArgs] {
	allArgs := pulumix.All(
		args.AmazonSideAsn.ToOutput(context.Background()).AsAny(),
		args.AttachedVpcId.ToOutput(context.Background()).AsAny(),
		args.AvailabilityZone.ToOutput(context.Background()).AsAny(),
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.State.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupVpnGatewayArgs {
		return &LookupVpnGatewayArgs{
			AmazonSideAsn:    resolvedArgs[0].(*string),
			AttachedVpcId:    resolvedArgs[1].(*string),
			AvailabilityZone: resolvedArgs[2].(*string),
			Filters:          resolvedArgs[3].([]GetVpnGatewayFilter),
			Id:               resolvedArgs[4].(*string),
			State:            resolvedArgs[5].(*string),
			Tags:             resolvedArgs[6].(map[string]string),
		}
	})
}

type LookupVpnGatewayResultOutput struct{ *pulumi.OutputState }

func (LookupVpnGatewayResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpnGatewayResult)(nil)).Elem()
}

func (o LookupVpnGatewayResultOutput) ToOutput(context.Context) pulumix.Output[*LookupVpnGatewayResult] {
	return pulumix.Output[*LookupVpnGatewayResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVpnGatewayResultOutput) AmazonSideAsn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpnGatewayResult](o, func(v *LookupVpnGatewayResult) string { return v.AmazonSideAsn })
}

func (o LookupVpnGatewayResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpnGatewayResult](o, func(v *LookupVpnGatewayResult) string { return v.Arn })
}

func (o LookupVpnGatewayResultOutput) AttachedVpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpnGatewayResult](o, func(v *LookupVpnGatewayResult) string { return v.AttachedVpcId })
}

func (o LookupVpnGatewayResultOutput) AvailabilityZone() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpnGatewayResult](o, func(v *LookupVpnGatewayResult) string { return v.AvailabilityZone })
}

func (o LookupVpnGatewayResultOutput) Filters() pulumix.GArrayOutput[GetVpnGatewayFilter, GetVpnGatewayFilterOutput] {
	value := pulumix.Apply[*LookupVpnGatewayResult](o, func(v *LookupVpnGatewayResult) []GetVpnGatewayFilter { return v.Filters })
	return pulumix.GArrayOutput[GetVpnGatewayFilter, GetVpnGatewayFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpnGatewayResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpnGatewayResult](o, func(v *LookupVpnGatewayResult) string { return v.Id })
}

func (o LookupVpnGatewayResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpnGatewayResult](o, func(v *LookupVpnGatewayResult) string { return v.State })
}

func (o LookupVpnGatewayResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupVpnGatewayResult](o, func(v *LookupVpnGatewayResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
