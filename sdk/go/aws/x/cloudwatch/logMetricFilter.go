// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudWatch Log Metric Filter resource.
type LogMetricFilter struct {
	pulumi.CustomResourceState

	// The name of the log group to associate the metric filter with.
	LogGroupName pulumix.Output[string] `pulumi:"logGroupName"`
	// A block defining collection of information needed to define how metric data gets emitted. See below.
	MetricTransformation pulumix.GPtrOutput[LogMetricFilterMetricTransformation, LogMetricFilterMetricTransformationOutput] `pulumi:"metricTransformation"`
	// A name for the metric filter.
	Name pulumix.Output[string] `pulumi:"name"`
	// A valid [CloudWatch Logs filter pattern](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/FilterAndPatternSyntax.html)
	// for extracting metric data out of ingested log events.
	Pattern pulumix.Output[string] `pulumi:"pattern"`
}

// NewLogMetricFilter registers a new resource with the given unique name, arguments, and options.
func NewLogMetricFilter(ctx *pulumi.Context,
	name string, args *LogMetricFilterArgs, opts ...pulumi.ResourceOption) (*LogMetricFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogGroupName == nil {
		return nil, errors.New("invalid value for required argument 'LogGroupName'")
	}
	if args.MetricTransformation == nil {
		return nil, errors.New("invalid value for required argument 'MetricTransformation'")
	}
	if args.Pattern == nil {
		return nil, errors.New("invalid value for required argument 'Pattern'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogMetricFilter
	err := ctx.RegisterResource("aws:cloudwatch/logMetricFilter:LogMetricFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogMetricFilter gets an existing LogMetricFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogMetricFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogMetricFilterState, opts ...pulumi.ResourceOption) (*LogMetricFilter, error) {
	var resource LogMetricFilter
	err := ctx.ReadResource("aws:cloudwatch/logMetricFilter:LogMetricFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogMetricFilter resources.
type logMetricFilterState struct {
	// The name of the log group to associate the metric filter with.
	LogGroupName *string `pulumi:"logGroupName"`
	// A block defining collection of information needed to define how metric data gets emitted. See below.
	MetricTransformation *LogMetricFilterMetricTransformation `pulumi:"metricTransformation"`
	// A name for the metric filter.
	Name *string `pulumi:"name"`
	// A valid [CloudWatch Logs filter pattern](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/FilterAndPatternSyntax.html)
	// for extracting metric data out of ingested log events.
	Pattern *string `pulumi:"pattern"`
}

type LogMetricFilterState struct {
	// The name of the log group to associate the metric filter with.
	LogGroupName pulumix.Input[*string]
	// A block defining collection of information needed to define how metric data gets emitted. See below.
	MetricTransformation pulumix.Input[*LogMetricFilterMetricTransformationArgs]
	// A name for the metric filter.
	Name pulumix.Input[*string]
	// A valid [CloudWatch Logs filter pattern](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/FilterAndPatternSyntax.html)
	// for extracting metric data out of ingested log events.
	Pattern pulumix.Input[*string]
}

func (LogMetricFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*logMetricFilterState)(nil)).Elem()
}

type logMetricFilterArgs struct {
	// The name of the log group to associate the metric filter with.
	LogGroupName string `pulumi:"logGroupName"`
	// A block defining collection of information needed to define how metric data gets emitted. See below.
	MetricTransformation LogMetricFilterMetricTransformation `pulumi:"metricTransformation"`
	// A name for the metric filter.
	Name *string `pulumi:"name"`
	// A valid [CloudWatch Logs filter pattern](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/FilterAndPatternSyntax.html)
	// for extracting metric data out of ingested log events.
	Pattern string `pulumi:"pattern"`
}

// The set of arguments for constructing a LogMetricFilter resource.
type LogMetricFilterArgs struct {
	// The name of the log group to associate the metric filter with.
	LogGroupName pulumix.Input[string]
	// A block defining collection of information needed to define how metric data gets emitted. See below.
	MetricTransformation pulumix.Input[*LogMetricFilterMetricTransformationArgs]
	// A name for the metric filter.
	Name pulumix.Input[*string]
	// A valid [CloudWatch Logs filter pattern](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/FilterAndPatternSyntax.html)
	// for extracting metric data out of ingested log events.
	Pattern pulumix.Input[string]
}

func (LogMetricFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logMetricFilterArgs)(nil)).Elem()
}

type LogMetricFilterOutput struct{ *pulumi.OutputState }

func (LogMetricFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricFilter)(nil)).Elem()
}

func (o LogMetricFilterOutput) ToLogMetricFilterOutput() LogMetricFilterOutput {
	return o
}

func (o LogMetricFilterOutput) ToLogMetricFilterOutputWithContext(ctx context.Context) LogMetricFilterOutput {
	return o
}

func (o LogMetricFilterOutput) ToOutput(ctx context.Context) pulumix.Output[LogMetricFilter] {
	return pulumix.Output[LogMetricFilter]{
		OutputState: o.OutputState,
	}
}

// The name of the log group to associate the metric filter with.
func (o LogMetricFilterOutput) LogGroupName() pulumix.Output[string] {
	value := pulumix.Apply[LogMetricFilter](o, func(v LogMetricFilter) pulumix.Output[string] { return v.LogGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A block defining collection of information needed to define how metric data gets emitted. See below.
func (o LogMetricFilterOutput) MetricTransformation() pulumix.GPtrOutput[LogMetricFilterMetricTransformation, LogMetricFilterMetricTransformationOutput] {
	value := pulumix.Apply[LogMetricFilter](o, func(v LogMetricFilter) pulumix.GPtrOutput[LogMetricFilterMetricTransformation, LogMetricFilterMetricTransformationOutput] {
		return v.MetricTransformation
	})
	unwrapped := pulumix.Flatten[*LogMetricFilterMetricTransformation, pulumix.GPtrOutput[LogMetricFilterMetricTransformation, LogMetricFilterMetricTransformationOutput]](value)
	return pulumix.GPtrOutput[LogMetricFilterMetricTransformation, LogMetricFilterMetricTransformationOutput]{OutputState: unwrapped.OutputState}
}

// A name for the metric filter.
func (o LogMetricFilterOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[LogMetricFilter](o, func(v LogMetricFilter) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A valid [CloudWatch Logs filter pattern](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/FilterAndPatternSyntax.html)
// for extracting metric data out of ingested log events.
func (o LogMetricFilterOutput) Pattern() pulumix.Output[string] {
	value := pulumix.Apply[LogMetricFilter](o, func(v LogMetricFilter) pulumix.Output[string] { return v.Pattern })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LogMetricFilterOutput{})
}
