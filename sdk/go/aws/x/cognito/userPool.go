// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Cognito User Pool resource.
type UserPool struct {
	pulumi.CustomResourceState

	// Configuration block to define which verified available method a user can use to recover their forgotten password. Detailed below.
	AccountRecoverySetting pulumix.GPtrOutput[UserPoolAccountRecoverySetting, UserPoolAccountRecoverySettingOutput] `pulumi:"accountRecoverySetting"`
	// Configuration block for creating a new user profile. Detailed below.
	AdminCreateUserConfig pulumix.GPtrOutput[UserPoolAdminCreateUserConfig, UserPoolAdminCreateUserConfigOutput] `pulumi:"adminCreateUserConfig"`
	// Attributes supported as an alias for this user pool. Valid values: `phoneNumber`, `email`, or `preferredUsername`. Conflicts with `usernameAttributes`.
	AliasAttributes pulumix.ArrayOutput[string] `pulumi:"aliasAttributes"`
	// ARN of the user pool.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Attributes to be auto-verified. Valid values: `email`, `phoneNumber`.
	AutoVerifiedAttributes pulumix.ArrayOutput[string] `pulumi:"autoVerifiedAttributes"`
	// Date the user pool was created.
	CreationDate pulumix.Output[string] `pulumi:"creationDate"`
	// A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. For example: `auth.example.com`.
	CustomDomain pulumix.Output[string] `pulumi:"customDomain"`
	// When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. Valid values are `ACTIVE` and `INACTIVE`, Default value is `INACTIVE`.
	DeletionProtection pulumix.Output[*string] `pulumi:"deletionProtection"`
	// Configuration block for the user pool's device tracking. Detailed below.
	DeviceConfiguration pulumix.GPtrOutput[UserPoolDeviceConfiguration, UserPoolDeviceConfigurationOutput] `pulumi:"deviceConfiguration"`
	// Holds the domain prefix if the user pool has a domain associated with it.
	Domain pulumix.Output[string] `pulumi:"domain"`
	// Configuration block for configuring email. Detailed below.
	EmailConfiguration pulumix.GPtrOutput[UserPoolEmailConfiguration, UserPoolEmailConfigurationOutput] `pulumi:"emailConfiguration"`
	// String representing the email verification message. Conflicts with `verificationMessageTemplate` configuration block `emailMessage` argument.
	EmailVerificationMessage pulumix.Output[string] `pulumi:"emailVerificationMessage"`
	// String representing the email verification subject. Conflicts with `verificationMessageTemplate` configuration block `emailSubject` argument.
	EmailVerificationSubject pulumix.Output[string] `pulumi:"emailVerificationSubject"`
	// Endpoint name of the user pool. Example format: `cognito-idp.REGION.amazonaws.com/xxxx_yyyyy`
	Endpoint pulumix.Output[string] `pulumi:"endpoint"`
	// A number estimating the size of the user pool.
	EstimatedNumberOfUsers pulumix.Output[int] `pulumi:"estimatedNumberOfUsers"`
	// Configuration block for the AWS Lambda triggers associated with the user pool. Detailed below.
	LambdaConfig pulumix.GPtrOutput[UserPoolLambdaConfig, UserPoolLambdaConfigOutput] `pulumi:"lambdaConfig"`
	// Date the user pool was last modified.
	LastModifiedDate pulumix.Output[string] `pulumi:"lastModifiedDate"`
	// Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of `OFF`. Valid values are `OFF` (MFA Tokens are not required), `ON` (MFA is required for all users to sign in; requires at least one of `smsConfiguration` or `softwareTokenMfaConfiguration` to be configured), or `OPTIONAL` (MFA Will be required only for individual users who have MFA Enabled; requires at least one of `smsConfiguration` or `softwareTokenMfaConfiguration` to be configured).
	MfaConfiguration pulumix.Output[*string] `pulumi:"mfaConfiguration"`
	// Name of the user pool.
	//
	// The following arguments are optional:
	Name pulumix.Output[string] `pulumi:"name"`
	// Configuration block for information about the user pool password policy. Detailed below.
	PasswordPolicy pulumix.GPtrOutput[UserPoolPasswordPolicy, UserPoolPasswordPolicyOutput] `pulumi:"passwordPolicy"`
	// Configuration block for the schema attributes of a user pool. Detailed below. Schema attributes from the [standard attribute set](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#cognito-user-pools-standard-attributes) only need to be specified if they are different from the default configuration. Attributes can be added, but not modified or removed. Maximum of 50 attributes.
	Schemas pulumix.GArrayOutput[UserPoolSchema, UserPoolSchemaOutput] `pulumi:"schemas"`
	// String representing the SMS authentication message. The Message must contain the `{####}` placeholder, which will be replaced with the code.
	SmsAuthenticationMessage pulumix.Output[*string] `pulumi:"smsAuthenticationMessage"`
	// Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection.
	SmsConfiguration pulumix.GPtrOutput[UserPoolSmsConfiguration, UserPoolSmsConfigurationOutput] `pulumi:"smsConfiguration"`
	// String representing the SMS verification message. Conflicts with `verificationMessageTemplate` configuration block `smsMessage` argument.
	SmsVerificationMessage pulumix.Output[string] `pulumi:"smsVerificationMessage"`
	// Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.
	SoftwareTokenMfaConfiguration pulumix.GPtrOutput[UserPoolSoftwareTokenMfaConfiguration, UserPoolSoftwareTokenMfaConfigurationOutput] `pulumi:"softwareTokenMfaConfiguration"`
	// Map of tags to assign to the User Pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Configuration block for user attribute update settings. Detailed below.
	UserAttributeUpdateSettings pulumix.GPtrOutput[UserPoolUserAttributeUpdateSettings, UserPoolUserAttributeUpdateSettingsOutput] `pulumi:"userAttributeUpdateSettings"`
	// Configuration block for user pool add-ons to enable user pool advanced security mode features. Detailed below.
	UserPoolAddOns pulumix.GPtrOutput[UserPoolUserPoolAddOns, UserPoolUserPoolAddOnsOutput] `pulumi:"userPoolAddOns"`
	// Whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with `aliasAttributes`.
	UsernameAttributes pulumix.ArrayOutput[string] `pulumi:"usernameAttributes"`
	// Configuration block for username configuration. Detailed below.
	UsernameConfiguration pulumix.GPtrOutput[UserPoolUsernameConfiguration, UserPoolUsernameConfigurationOutput] `pulumi:"usernameConfiguration"`
	// Configuration block for verification message templates. Detailed below.
	VerificationMessageTemplate pulumix.GPtrOutput[UserPoolVerificationMessageTemplate, UserPoolVerificationMessageTemplateOutput] `pulumi:"verificationMessageTemplate"`
}

// NewUserPool registers a new resource with the given unique name, arguments, and options.
func NewUserPool(ctx *pulumi.Context,
	name string, args *UserPoolArgs, opts ...pulumi.ResourceOption) (*UserPool, error) {
	if args == nil {
		args = &UserPoolArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserPool
	err := ctx.RegisterResource("aws:cognito/userPool:UserPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPool gets an existing UserPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPoolState, opts ...pulumi.ResourceOption) (*UserPool, error) {
	var resource UserPool
	err := ctx.ReadResource("aws:cognito/userPool:UserPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPool resources.
type userPoolState struct {
	// Configuration block to define which verified available method a user can use to recover their forgotten password. Detailed below.
	AccountRecoverySetting *UserPoolAccountRecoverySetting `pulumi:"accountRecoverySetting"`
	// Configuration block for creating a new user profile. Detailed below.
	AdminCreateUserConfig *UserPoolAdminCreateUserConfig `pulumi:"adminCreateUserConfig"`
	// Attributes supported as an alias for this user pool. Valid values: `phoneNumber`, `email`, or `preferredUsername`. Conflicts with `usernameAttributes`.
	AliasAttributes []string `pulumi:"aliasAttributes"`
	// ARN of the user pool.
	Arn *string `pulumi:"arn"`
	// Attributes to be auto-verified. Valid values: `email`, `phoneNumber`.
	AutoVerifiedAttributes []string `pulumi:"autoVerifiedAttributes"`
	// Date the user pool was created.
	CreationDate *string `pulumi:"creationDate"`
	// A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. For example: `auth.example.com`.
	CustomDomain *string `pulumi:"customDomain"`
	// When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. Valid values are `ACTIVE` and `INACTIVE`, Default value is `INACTIVE`.
	DeletionProtection *string `pulumi:"deletionProtection"`
	// Configuration block for the user pool's device tracking. Detailed below.
	DeviceConfiguration *UserPoolDeviceConfiguration `pulumi:"deviceConfiguration"`
	// Holds the domain prefix if the user pool has a domain associated with it.
	Domain *string `pulumi:"domain"`
	// Configuration block for configuring email. Detailed below.
	EmailConfiguration *UserPoolEmailConfiguration `pulumi:"emailConfiguration"`
	// String representing the email verification message. Conflicts with `verificationMessageTemplate` configuration block `emailMessage` argument.
	EmailVerificationMessage *string `pulumi:"emailVerificationMessage"`
	// String representing the email verification subject. Conflicts with `verificationMessageTemplate` configuration block `emailSubject` argument.
	EmailVerificationSubject *string `pulumi:"emailVerificationSubject"`
	// Endpoint name of the user pool. Example format: `cognito-idp.REGION.amazonaws.com/xxxx_yyyyy`
	Endpoint *string `pulumi:"endpoint"`
	// A number estimating the size of the user pool.
	EstimatedNumberOfUsers *int `pulumi:"estimatedNumberOfUsers"`
	// Configuration block for the AWS Lambda triggers associated with the user pool. Detailed below.
	LambdaConfig *UserPoolLambdaConfig `pulumi:"lambdaConfig"`
	// Date the user pool was last modified.
	LastModifiedDate *string `pulumi:"lastModifiedDate"`
	// Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of `OFF`. Valid values are `OFF` (MFA Tokens are not required), `ON` (MFA is required for all users to sign in; requires at least one of `smsConfiguration` or `softwareTokenMfaConfiguration` to be configured), or `OPTIONAL` (MFA Will be required only for individual users who have MFA Enabled; requires at least one of `smsConfiguration` or `softwareTokenMfaConfiguration` to be configured).
	MfaConfiguration *string `pulumi:"mfaConfiguration"`
	// Name of the user pool.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Configuration block for information about the user pool password policy. Detailed below.
	PasswordPolicy *UserPoolPasswordPolicy `pulumi:"passwordPolicy"`
	// Configuration block for the schema attributes of a user pool. Detailed below. Schema attributes from the [standard attribute set](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#cognito-user-pools-standard-attributes) only need to be specified if they are different from the default configuration. Attributes can be added, but not modified or removed. Maximum of 50 attributes.
	Schemas []UserPoolSchema `pulumi:"schemas"`
	// String representing the SMS authentication message. The Message must contain the `{####}` placeholder, which will be replaced with the code.
	SmsAuthenticationMessage *string `pulumi:"smsAuthenticationMessage"`
	// Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection.
	SmsConfiguration *UserPoolSmsConfiguration `pulumi:"smsConfiguration"`
	// String representing the SMS verification message. Conflicts with `verificationMessageTemplate` configuration block `smsMessage` argument.
	SmsVerificationMessage *string `pulumi:"smsVerificationMessage"`
	// Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.
	SoftwareTokenMfaConfiguration *UserPoolSoftwareTokenMfaConfiguration `pulumi:"softwareTokenMfaConfiguration"`
	// Map of tags to assign to the User Pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Configuration block for user attribute update settings. Detailed below.
	UserAttributeUpdateSettings *UserPoolUserAttributeUpdateSettings `pulumi:"userAttributeUpdateSettings"`
	// Configuration block for user pool add-ons to enable user pool advanced security mode features. Detailed below.
	UserPoolAddOns *UserPoolUserPoolAddOns `pulumi:"userPoolAddOns"`
	// Whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with `aliasAttributes`.
	UsernameAttributes []string `pulumi:"usernameAttributes"`
	// Configuration block for username configuration. Detailed below.
	UsernameConfiguration *UserPoolUsernameConfiguration `pulumi:"usernameConfiguration"`
	// Configuration block for verification message templates. Detailed below.
	VerificationMessageTemplate *UserPoolVerificationMessageTemplate `pulumi:"verificationMessageTemplate"`
}

type UserPoolState struct {
	// Configuration block to define which verified available method a user can use to recover their forgotten password. Detailed below.
	AccountRecoverySetting pulumix.Input[*UserPoolAccountRecoverySettingArgs]
	// Configuration block for creating a new user profile. Detailed below.
	AdminCreateUserConfig pulumix.Input[*UserPoolAdminCreateUserConfigArgs]
	// Attributes supported as an alias for this user pool. Valid values: `phoneNumber`, `email`, or `preferredUsername`. Conflicts with `usernameAttributes`.
	AliasAttributes pulumix.Input[[]string]
	// ARN of the user pool.
	Arn pulumix.Input[*string]
	// Attributes to be auto-verified. Valid values: `email`, `phoneNumber`.
	AutoVerifiedAttributes pulumix.Input[[]string]
	// Date the user pool was created.
	CreationDate pulumix.Input[*string]
	// A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. For example: `auth.example.com`.
	CustomDomain pulumix.Input[*string]
	// When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. Valid values are `ACTIVE` and `INACTIVE`, Default value is `INACTIVE`.
	DeletionProtection pulumix.Input[*string]
	// Configuration block for the user pool's device tracking. Detailed below.
	DeviceConfiguration pulumix.Input[*UserPoolDeviceConfigurationArgs]
	// Holds the domain prefix if the user pool has a domain associated with it.
	Domain pulumix.Input[*string]
	// Configuration block for configuring email. Detailed below.
	EmailConfiguration pulumix.Input[*UserPoolEmailConfigurationArgs]
	// String representing the email verification message. Conflicts with `verificationMessageTemplate` configuration block `emailMessage` argument.
	EmailVerificationMessage pulumix.Input[*string]
	// String representing the email verification subject. Conflicts with `verificationMessageTemplate` configuration block `emailSubject` argument.
	EmailVerificationSubject pulumix.Input[*string]
	// Endpoint name of the user pool. Example format: `cognito-idp.REGION.amazonaws.com/xxxx_yyyyy`
	Endpoint pulumix.Input[*string]
	// A number estimating the size of the user pool.
	EstimatedNumberOfUsers pulumix.Input[*int]
	// Configuration block for the AWS Lambda triggers associated with the user pool. Detailed below.
	LambdaConfig pulumix.Input[*UserPoolLambdaConfigArgs]
	// Date the user pool was last modified.
	LastModifiedDate pulumix.Input[*string]
	// Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of `OFF`. Valid values are `OFF` (MFA Tokens are not required), `ON` (MFA is required for all users to sign in; requires at least one of `smsConfiguration` or `softwareTokenMfaConfiguration` to be configured), or `OPTIONAL` (MFA Will be required only for individual users who have MFA Enabled; requires at least one of `smsConfiguration` or `softwareTokenMfaConfiguration` to be configured).
	MfaConfiguration pulumix.Input[*string]
	// Name of the user pool.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Configuration block for information about the user pool password policy. Detailed below.
	PasswordPolicy pulumix.Input[*UserPoolPasswordPolicyArgs]
	// Configuration block for the schema attributes of a user pool. Detailed below. Schema attributes from the [standard attribute set](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#cognito-user-pools-standard-attributes) only need to be specified if they are different from the default configuration. Attributes can be added, but not modified or removed. Maximum of 50 attributes.
	Schemas pulumix.Input[[]*UserPoolSchemaArgs]
	// String representing the SMS authentication message. The Message must contain the `{####}` placeholder, which will be replaced with the code.
	SmsAuthenticationMessage pulumix.Input[*string]
	// Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection.
	SmsConfiguration pulumix.Input[*UserPoolSmsConfigurationArgs]
	// String representing the SMS verification message. Conflicts with `verificationMessageTemplate` configuration block `smsMessage` argument.
	SmsVerificationMessage pulumix.Input[*string]
	// Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.
	SoftwareTokenMfaConfiguration pulumix.Input[*UserPoolSoftwareTokenMfaConfigurationArgs]
	// Map of tags to assign to the User Pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Configuration block for user attribute update settings. Detailed below.
	UserAttributeUpdateSettings pulumix.Input[*UserPoolUserAttributeUpdateSettingsArgs]
	// Configuration block for user pool add-ons to enable user pool advanced security mode features. Detailed below.
	UserPoolAddOns pulumix.Input[*UserPoolUserPoolAddOnsArgs]
	// Whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with `aliasAttributes`.
	UsernameAttributes pulumix.Input[[]string]
	// Configuration block for username configuration. Detailed below.
	UsernameConfiguration pulumix.Input[*UserPoolUsernameConfigurationArgs]
	// Configuration block for verification message templates. Detailed below.
	VerificationMessageTemplate pulumix.Input[*UserPoolVerificationMessageTemplateArgs]
}

func (UserPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolState)(nil)).Elem()
}

type userPoolArgs struct {
	// Configuration block to define which verified available method a user can use to recover their forgotten password. Detailed below.
	AccountRecoverySetting *UserPoolAccountRecoverySetting `pulumi:"accountRecoverySetting"`
	// Configuration block for creating a new user profile. Detailed below.
	AdminCreateUserConfig *UserPoolAdminCreateUserConfig `pulumi:"adminCreateUserConfig"`
	// Attributes supported as an alias for this user pool. Valid values: `phoneNumber`, `email`, or `preferredUsername`. Conflicts with `usernameAttributes`.
	AliasAttributes []string `pulumi:"aliasAttributes"`
	// Attributes to be auto-verified. Valid values: `email`, `phoneNumber`.
	AutoVerifiedAttributes []string `pulumi:"autoVerifiedAttributes"`
	// When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. Valid values are `ACTIVE` and `INACTIVE`, Default value is `INACTIVE`.
	DeletionProtection *string `pulumi:"deletionProtection"`
	// Configuration block for the user pool's device tracking. Detailed below.
	DeviceConfiguration *UserPoolDeviceConfiguration `pulumi:"deviceConfiguration"`
	// Configuration block for configuring email. Detailed below.
	EmailConfiguration *UserPoolEmailConfiguration `pulumi:"emailConfiguration"`
	// String representing the email verification message. Conflicts with `verificationMessageTemplate` configuration block `emailMessage` argument.
	EmailVerificationMessage *string `pulumi:"emailVerificationMessage"`
	// String representing the email verification subject. Conflicts with `verificationMessageTemplate` configuration block `emailSubject` argument.
	EmailVerificationSubject *string `pulumi:"emailVerificationSubject"`
	// Configuration block for the AWS Lambda triggers associated with the user pool. Detailed below.
	LambdaConfig *UserPoolLambdaConfig `pulumi:"lambdaConfig"`
	// Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of `OFF`. Valid values are `OFF` (MFA Tokens are not required), `ON` (MFA is required for all users to sign in; requires at least one of `smsConfiguration` or `softwareTokenMfaConfiguration` to be configured), or `OPTIONAL` (MFA Will be required only for individual users who have MFA Enabled; requires at least one of `smsConfiguration` or `softwareTokenMfaConfiguration` to be configured).
	MfaConfiguration *string `pulumi:"mfaConfiguration"`
	// Name of the user pool.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Configuration block for information about the user pool password policy. Detailed below.
	PasswordPolicy *UserPoolPasswordPolicy `pulumi:"passwordPolicy"`
	// Configuration block for the schema attributes of a user pool. Detailed below. Schema attributes from the [standard attribute set](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#cognito-user-pools-standard-attributes) only need to be specified if they are different from the default configuration. Attributes can be added, but not modified or removed. Maximum of 50 attributes.
	Schemas []UserPoolSchema `pulumi:"schemas"`
	// String representing the SMS authentication message. The Message must contain the `{####}` placeholder, which will be replaced with the code.
	SmsAuthenticationMessage *string `pulumi:"smsAuthenticationMessage"`
	// Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection.
	SmsConfiguration *UserPoolSmsConfiguration `pulumi:"smsConfiguration"`
	// String representing the SMS verification message. Conflicts with `verificationMessageTemplate` configuration block `smsMessage` argument.
	SmsVerificationMessage *string `pulumi:"smsVerificationMessage"`
	// Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.
	SoftwareTokenMfaConfiguration *UserPoolSoftwareTokenMfaConfiguration `pulumi:"softwareTokenMfaConfiguration"`
	// Map of tags to assign to the User Pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Configuration block for user attribute update settings. Detailed below.
	UserAttributeUpdateSettings *UserPoolUserAttributeUpdateSettings `pulumi:"userAttributeUpdateSettings"`
	// Configuration block for user pool add-ons to enable user pool advanced security mode features. Detailed below.
	UserPoolAddOns *UserPoolUserPoolAddOns `pulumi:"userPoolAddOns"`
	// Whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with `aliasAttributes`.
	UsernameAttributes []string `pulumi:"usernameAttributes"`
	// Configuration block for username configuration. Detailed below.
	UsernameConfiguration *UserPoolUsernameConfiguration `pulumi:"usernameConfiguration"`
	// Configuration block for verification message templates. Detailed below.
	VerificationMessageTemplate *UserPoolVerificationMessageTemplate `pulumi:"verificationMessageTemplate"`
}

// The set of arguments for constructing a UserPool resource.
type UserPoolArgs struct {
	// Configuration block to define which verified available method a user can use to recover their forgotten password. Detailed below.
	AccountRecoverySetting pulumix.Input[*UserPoolAccountRecoverySettingArgs]
	// Configuration block for creating a new user profile. Detailed below.
	AdminCreateUserConfig pulumix.Input[*UserPoolAdminCreateUserConfigArgs]
	// Attributes supported as an alias for this user pool. Valid values: `phoneNumber`, `email`, or `preferredUsername`. Conflicts with `usernameAttributes`.
	AliasAttributes pulumix.Input[[]string]
	// Attributes to be auto-verified. Valid values: `email`, `phoneNumber`.
	AutoVerifiedAttributes pulumix.Input[[]string]
	// When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. Valid values are `ACTIVE` and `INACTIVE`, Default value is `INACTIVE`.
	DeletionProtection pulumix.Input[*string]
	// Configuration block for the user pool's device tracking. Detailed below.
	DeviceConfiguration pulumix.Input[*UserPoolDeviceConfigurationArgs]
	// Configuration block for configuring email. Detailed below.
	EmailConfiguration pulumix.Input[*UserPoolEmailConfigurationArgs]
	// String representing the email verification message. Conflicts with `verificationMessageTemplate` configuration block `emailMessage` argument.
	EmailVerificationMessage pulumix.Input[*string]
	// String representing the email verification subject. Conflicts with `verificationMessageTemplate` configuration block `emailSubject` argument.
	EmailVerificationSubject pulumix.Input[*string]
	// Configuration block for the AWS Lambda triggers associated with the user pool. Detailed below.
	LambdaConfig pulumix.Input[*UserPoolLambdaConfigArgs]
	// Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of `OFF`. Valid values are `OFF` (MFA Tokens are not required), `ON` (MFA is required for all users to sign in; requires at least one of `smsConfiguration` or `softwareTokenMfaConfiguration` to be configured), or `OPTIONAL` (MFA Will be required only for individual users who have MFA Enabled; requires at least one of `smsConfiguration` or `softwareTokenMfaConfiguration` to be configured).
	MfaConfiguration pulumix.Input[*string]
	// Name of the user pool.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Configuration block for information about the user pool password policy. Detailed below.
	PasswordPolicy pulumix.Input[*UserPoolPasswordPolicyArgs]
	// Configuration block for the schema attributes of a user pool. Detailed below. Schema attributes from the [standard attribute set](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#cognito-user-pools-standard-attributes) only need to be specified if they are different from the default configuration. Attributes can be added, but not modified or removed. Maximum of 50 attributes.
	Schemas pulumix.Input[[]*UserPoolSchemaArgs]
	// String representing the SMS authentication message. The Message must contain the `{####}` placeholder, which will be replaced with the code.
	SmsAuthenticationMessage pulumix.Input[*string]
	// Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection.
	SmsConfiguration pulumix.Input[*UserPoolSmsConfigurationArgs]
	// String representing the SMS verification message. Conflicts with `verificationMessageTemplate` configuration block `smsMessage` argument.
	SmsVerificationMessage pulumix.Input[*string]
	// Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.
	SoftwareTokenMfaConfiguration pulumix.Input[*UserPoolSoftwareTokenMfaConfigurationArgs]
	// Map of tags to assign to the User Pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Configuration block for user attribute update settings. Detailed below.
	UserAttributeUpdateSettings pulumix.Input[*UserPoolUserAttributeUpdateSettingsArgs]
	// Configuration block for user pool add-ons to enable user pool advanced security mode features. Detailed below.
	UserPoolAddOns pulumix.Input[*UserPoolUserPoolAddOnsArgs]
	// Whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with `aliasAttributes`.
	UsernameAttributes pulumix.Input[[]string]
	// Configuration block for username configuration. Detailed below.
	UsernameConfiguration pulumix.Input[*UserPoolUsernameConfigurationArgs]
	// Configuration block for verification message templates. Detailed below.
	VerificationMessageTemplate pulumix.Input[*UserPoolVerificationMessageTemplateArgs]
}

func (UserPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolArgs)(nil)).Elem()
}

type UserPoolOutput struct{ *pulumi.OutputState }

func (UserPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPool)(nil)).Elem()
}

func (o UserPoolOutput) ToUserPoolOutput() UserPoolOutput {
	return o
}

func (o UserPoolOutput) ToUserPoolOutputWithContext(ctx context.Context) UserPoolOutput {
	return o
}

func (o UserPoolOutput) ToOutput(ctx context.Context) pulumix.Output[UserPool] {
	return pulumix.Output[UserPool]{
		OutputState: o.OutputState,
	}
}

// Configuration block to define which verified available method a user can use to recover their forgotten password. Detailed below.
func (o UserPoolOutput) AccountRecoverySetting() pulumix.GPtrOutput[UserPoolAccountRecoverySetting, UserPoolAccountRecoverySettingOutput] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.GPtrOutput[UserPoolAccountRecoverySetting, UserPoolAccountRecoverySettingOutput] {
		return v.AccountRecoverySetting
	})
	unwrapped := pulumix.Flatten[*UserPoolAccountRecoverySetting, pulumix.GPtrOutput[UserPoolAccountRecoverySetting, UserPoolAccountRecoverySettingOutput]](value)
	return pulumix.GPtrOutput[UserPoolAccountRecoverySetting, UserPoolAccountRecoverySettingOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for creating a new user profile. Detailed below.
func (o UserPoolOutput) AdminCreateUserConfig() pulumix.GPtrOutput[UserPoolAdminCreateUserConfig, UserPoolAdminCreateUserConfigOutput] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.GPtrOutput[UserPoolAdminCreateUserConfig, UserPoolAdminCreateUserConfigOutput] {
		return v.AdminCreateUserConfig
	})
	unwrapped := pulumix.Flatten[*UserPoolAdminCreateUserConfig, pulumix.GPtrOutput[UserPoolAdminCreateUserConfig, UserPoolAdminCreateUserConfigOutput]](value)
	return pulumix.GPtrOutput[UserPoolAdminCreateUserConfig, UserPoolAdminCreateUserConfigOutput]{OutputState: unwrapped.OutputState}
}

// Attributes supported as an alias for this user pool. Valid values: `phoneNumber`, `email`, or `preferredUsername`. Conflicts with `usernameAttributes`.
func (o UserPoolOutput) AliasAttributes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.ArrayOutput[string] { return v.AliasAttributes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// ARN of the user pool.
func (o UserPoolOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Attributes to be auto-verified. Valid values: `email`, `phoneNumber`.
func (o UserPoolOutput) AutoVerifiedAttributes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.ArrayOutput[string] { return v.AutoVerifiedAttributes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Date the user pool was created.
func (o UserPoolOutput) CreationDate() pulumix.Output[string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.Output[string] { return v.CreationDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. For example: `auth.example.com`.
func (o UserPoolOutput) CustomDomain() pulumix.Output[string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.Output[string] { return v.CustomDomain })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. Valid values are `ACTIVE` and `INACTIVE`, Default value is `INACTIVE`.
func (o UserPoolOutput) DeletionProtection() pulumix.Output[*string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.Output[*string] { return v.DeletionProtection })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Configuration block for the user pool's device tracking. Detailed below.
func (o UserPoolOutput) DeviceConfiguration() pulumix.GPtrOutput[UserPoolDeviceConfiguration, UserPoolDeviceConfigurationOutput] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.GPtrOutput[UserPoolDeviceConfiguration, UserPoolDeviceConfigurationOutput] {
		return v.DeviceConfiguration
	})
	unwrapped := pulumix.Flatten[*UserPoolDeviceConfiguration, pulumix.GPtrOutput[UserPoolDeviceConfiguration, UserPoolDeviceConfigurationOutput]](value)
	return pulumix.GPtrOutput[UserPoolDeviceConfiguration, UserPoolDeviceConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Holds the domain prefix if the user pool has a domain associated with it.
func (o UserPoolOutput) Domain() pulumix.Output[string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.Output[string] { return v.Domain })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for configuring email. Detailed below.
func (o UserPoolOutput) EmailConfiguration() pulumix.GPtrOutput[UserPoolEmailConfiguration, UserPoolEmailConfigurationOutput] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.GPtrOutput[UserPoolEmailConfiguration, UserPoolEmailConfigurationOutput] {
		return v.EmailConfiguration
	})
	unwrapped := pulumix.Flatten[*UserPoolEmailConfiguration, pulumix.GPtrOutput[UserPoolEmailConfiguration, UserPoolEmailConfigurationOutput]](value)
	return pulumix.GPtrOutput[UserPoolEmailConfiguration, UserPoolEmailConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// String representing the email verification message. Conflicts with `verificationMessageTemplate` configuration block `emailMessage` argument.
func (o UserPoolOutput) EmailVerificationMessage() pulumix.Output[string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.Output[string] { return v.EmailVerificationMessage })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// String representing the email verification subject. Conflicts with `verificationMessageTemplate` configuration block `emailSubject` argument.
func (o UserPoolOutput) EmailVerificationSubject() pulumix.Output[string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.Output[string] { return v.EmailVerificationSubject })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Endpoint name of the user pool. Example format: `cognito-idp.REGION.amazonaws.com/xxxx_yyyyy`
func (o UserPoolOutput) Endpoint() pulumix.Output[string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.Output[string] { return v.Endpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A number estimating the size of the user pool.
func (o UserPoolOutput) EstimatedNumberOfUsers() pulumix.Output[int] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.Output[int] { return v.EstimatedNumberOfUsers })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Configuration block for the AWS Lambda triggers associated with the user pool. Detailed below.
func (o UserPoolOutput) LambdaConfig() pulumix.GPtrOutput[UserPoolLambdaConfig, UserPoolLambdaConfigOutput] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.GPtrOutput[UserPoolLambdaConfig, UserPoolLambdaConfigOutput] {
		return v.LambdaConfig
	})
	unwrapped := pulumix.Flatten[*UserPoolLambdaConfig, pulumix.GPtrOutput[UserPoolLambdaConfig, UserPoolLambdaConfigOutput]](value)
	return pulumix.GPtrOutput[UserPoolLambdaConfig, UserPoolLambdaConfigOutput]{OutputState: unwrapped.OutputState}
}

// Date the user pool was last modified.
func (o UserPoolOutput) LastModifiedDate() pulumix.Output[string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.Output[string] { return v.LastModifiedDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of `OFF`. Valid values are `OFF` (MFA Tokens are not required), `ON` (MFA is required for all users to sign in; requires at least one of `smsConfiguration` or `softwareTokenMfaConfiguration` to be configured), or `OPTIONAL` (MFA Will be required only for individual users who have MFA Enabled; requires at least one of `smsConfiguration` or `softwareTokenMfaConfiguration` to be configured).
func (o UserPoolOutput) MfaConfiguration() pulumix.Output[*string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.Output[*string] { return v.MfaConfiguration })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the user pool.
//
// The following arguments are optional:
func (o UserPoolOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for information about the user pool password policy. Detailed below.
func (o UserPoolOutput) PasswordPolicy() pulumix.GPtrOutput[UserPoolPasswordPolicy, UserPoolPasswordPolicyOutput] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.GPtrOutput[UserPoolPasswordPolicy, UserPoolPasswordPolicyOutput] {
		return v.PasswordPolicy
	})
	unwrapped := pulumix.Flatten[*UserPoolPasswordPolicy, pulumix.GPtrOutput[UserPoolPasswordPolicy, UserPoolPasswordPolicyOutput]](value)
	return pulumix.GPtrOutput[UserPoolPasswordPolicy, UserPoolPasswordPolicyOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for the schema attributes of a user pool. Detailed below. Schema attributes from the [standard attribute set](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#cognito-user-pools-standard-attributes) only need to be specified if they are different from the default configuration. Attributes can be added, but not modified or removed. Maximum of 50 attributes.
func (o UserPoolOutput) Schemas() pulumix.GArrayOutput[UserPoolSchema, UserPoolSchemaOutput] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.GArrayOutput[UserPoolSchema, UserPoolSchemaOutput] { return v.Schemas })
	unwrapped := pulumix.Flatten[[]UserPoolSchema, pulumix.GArrayOutput[UserPoolSchema, UserPoolSchemaOutput]](value)
	return pulumix.GArrayOutput[UserPoolSchema, UserPoolSchemaOutput]{OutputState: unwrapped.OutputState}
}

// String representing the SMS authentication message. The Message must contain the `{####}` placeholder, which will be replaced with the code.
func (o UserPoolOutput) SmsAuthenticationMessage() pulumix.Output[*string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.Output[*string] { return v.SmsAuthenticationMessage })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection.
func (o UserPoolOutput) SmsConfiguration() pulumix.GPtrOutput[UserPoolSmsConfiguration, UserPoolSmsConfigurationOutput] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.GPtrOutput[UserPoolSmsConfiguration, UserPoolSmsConfigurationOutput] {
		return v.SmsConfiguration
	})
	unwrapped := pulumix.Flatten[*UserPoolSmsConfiguration, pulumix.GPtrOutput[UserPoolSmsConfiguration, UserPoolSmsConfigurationOutput]](value)
	return pulumix.GPtrOutput[UserPoolSmsConfiguration, UserPoolSmsConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// String representing the SMS verification message. Conflicts with `verificationMessageTemplate` configuration block `smsMessage` argument.
func (o UserPoolOutput) SmsVerificationMessage() pulumix.Output[string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.Output[string] { return v.SmsVerificationMessage })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.
func (o UserPoolOutput) SoftwareTokenMfaConfiguration() pulumix.GPtrOutput[UserPoolSoftwareTokenMfaConfiguration, UserPoolSoftwareTokenMfaConfigurationOutput] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.GPtrOutput[UserPoolSoftwareTokenMfaConfiguration, UserPoolSoftwareTokenMfaConfigurationOutput] {
		return v.SoftwareTokenMfaConfiguration
	})
	unwrapped := pulumix.Flatten[*UserPoolSoftwareTokenMfaConfiguration, pulumix.GPtrOutput[UserPoolSoftwareTokenMfaConfiguration, UserPoolSoftwareTokenMfaConfigurationOutput]](value)
	return pulumix.GPtrOutput[UserPoolSoftwareTokenMfaConfiguration, UserPoolSoftwareTokenMfaConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Map of tags to assign to the User Pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o UserPoolOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o UserPoolOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Configuration block for user attribute update settings. Detailed below.
func (o UserPoolOutput) UserAttributeUpdateSettings() pulumix.GPtrOutput[UserPoolUserAttributeUpdateSettings, UserPoolUserAttributeUpdateSettingsOutput] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.GPtrOutput[UserPoolUserAttributeUpdateSettings, UserPoolUserAttributeUpdateSettingsOutput] {
		return v.UserAttributeUpdateSettings
	})
	unwrapped := pulumix.Flatten[*UserPoolUserAttributeUpdateSettings, pulumix.GPtrOutput[UserPoolUserAttributeUpdateSettings, UserPoolUserAttributeUpdateSettingsOutput]](value)
	return pulumix.GPtrOutput[UserPoolUserAttributeUpdateSettings, UserPoolUserAttributeUpdateSettingsOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for user pool add-ons to enable user pool advanced security mode features. Detailed below.
func (o UserPoolOutput) UserPoolAddOns() pulumix.GPtrOutput[UserPoolUserPoolAddOns, UserPoolUserPoolAddOnsOutput] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.GPtrOutput[UserPoolUserPoolAddOns, UserPoolUserPoolAddOnsOutput] {
		return v.UserPoolAddOns
	})
	unwrapped := pulumix.Flatten[*UserPoolUserPoolAddOns, pulumix.GPtrOutput[UserPoolUserPoolAddOns, UserPoolUserPoolAddOnsOutput]](value)
	return pulumix.GPtrOutput[UserPoolUserPoolAddOns, UserPoolUserPoolAddOnsOutput]{OutputState: unwrapped.OutputState}
}

// Whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with `aliasAttributes`.
func (o UserPoolOutput) UsernameAttributes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.ArrayOutput[string] { return v.UsernameAttributes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Configuration block for username configuration. Detailed below.
func (o UserPoolOutput) UsernameConfiguration() pulumix.GPtrOutput[UserPoolUsernameConfiguration, UserPoolUsernameConfigurationOutput] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.GPtrOutput[UserPoolUsernameConfiguration, UserPoolUsernameConfigurationOutput] {
		return v.UsernameConfiguration
	})
	unwrapped := pulumix.Flatten[*UserPoolUsernameConfiguration, pulumix.GPtrOutput[UserPoolUsernameConfiguration, UserPoolUsernameConfigurationOutput]](value)
	return pulumix.GPtrOutput[UserPoolUsernameConfiguration, UserPoolUsernameConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for verification message templates. Detailed below.
func (o UserPoolOutput) VerificationMessageTemplate() pulumix.GPtrOutput[UserPoolVerificationMessageTemplate, UserPoolVerificationMessageTemplateOutput] {
	value := pulumix.Apply[UserPool](o, func(v UserPool) pulumix.GPtrOutput[UserPoolVerificationMessageTemplate, UserPoolVerificationMessageTemplateOutput] {
		return v.VerificationMessageTemplate
	})
	unwrapped := pulumix.Flatten[*UserPoolVerificationMessageTemplate, pulumix.GPtrOutput[UserPoolVerificationMessageTemplate, UserPoolVerificationMessageTemplateOutput]](value)
	return pulumix.GPtrOutput[UserPoolVerificationMessageTemplate, UserPoolVerificationMessageTemplateOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(UserPoolOutput{})
}
