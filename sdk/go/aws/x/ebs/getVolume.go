// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about an EBS volume for use in other
// resources.
func LookupVolume(ctx *pulumi.Context, args *LookupVolumeArgs, opts ...pulumi.InvokeOption) (*LookupVolumeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVolumeResult
	err := ctx.Invoke("aws:ebs/getVolume:getVolume", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolume.
type LookupVolumeArgs struct {
	// One or more name/value pairs to filter off of. There are
	// several valid keys, for a full reference, check out
	// [describe-volumes in the AWS CLI reference][1].
	Filters []GetVolumeFilter `pulumi:"filters"`
	// If more than one result is returned, use the most
	// recent Volume.
	MostRecent *bool `pulumi:"mostRecent"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getVolume.
type LookupVolumeResult struct {
	// Volume ARN (e.g., arn:aws:ec2:us-east-1:0123456789012:volume/vol-59fcb34e).
	Arn string `pulumi:"arn"`
	// AZ where the EBS volume exists.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Whether the disk is encrypted.
	Encrypted bool              `pulumi:"encrypted"`
	Filters   []GetVolumeFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Amount of IOPS for the disk.
	Iops int `pulumi:"iops"`
	// ARN for the KMS encryption key.
	KmsKeyId   string `pulumi:"kmsKeyId"`
	MostRecent *bool  `pulumi:"mostRecent"`
	// (Optional) Specifies whether Amazon EBS Multi-Attach is enabled.
	MultiAttachEnabled bool `pulumi:"multiAttachEnabled"`
	// ARN of the Outpost.
	OutpostArn string `pulumi:"outpostArn"`
	// Size of the drive in GiBs.
	Size int `pulumi:"size"`
	// Snapshot_id the EBS volume is based off.
	SnapshotId string `pulumi:"snapshotId"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
	// Throughput that the volume supports, in MiB/s.
	Throughput int `pulumi:"throughput"`
	// Volume ID (e.g., vol-59fcb34e).
	VolumeId string `pulumi:"volumeId"`
	// Type of EBS volume.
	VolumeType string `pulumi:"volumeType"`
}

func LookupVolumeOutput(ctx *pulumi.Context, args LookupVolumeOutputArgs, opts ...pulumi.InvokeOption) LookupVolumeResultOutput {
	outputResult := pulumix.ApplyErr[*LookupVolumeArgs](args.ToOutput(), func(plainArgs *LookupVolumeArgs) (*LookupVolumeResult, error) {
		return LookupVolume(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupVolumeResultOutput, *LookupVolumeResult](outputResult)
}

// A collection of arguments for invoking getVolume.
type LookupVolumeOutputArgs struct {
	// One or more name/value pairs to filter off of. There are
	// several valid keys, for a full reference, check out
	// [describe-volumes in the AWS CLI reference][1].
	Filters pulumix.Input[[]*GetVolumeFilterArgs] `pulumi:"filters"`
	// If more than one result is returned, use the most
	// recent Volume.
	MostRecent pulumix.Input[*bool] `pulumi:"mostRecent"`
	// Map of tags for the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupVolumeOutputArgs) ToOutput() pulumix.Output[*LookupVolumeArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.MostRecent.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupVolumeArgs {
		return &LookupVolumeArgs{
			Filters:    resolvedArgs[0].([]GetVolumeFilter),
			MostRecent: resolvedArgs[1].(*bool),
			Tags:       resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupVolumeResultOutput struct{ *pulumi.OutputState }

func (LookupVolumeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeResult)(nil)).Elem()
}

func (o LookupVolumeResultOutput) ToOutput(context.Context) pulumix.Output[*LookupVolumeResult] {
	return pulumix.Output[*LookupVolumeResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVolumeResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) string { return v.Arn })
}

func (o LookupVolumeResultOutput) AvailabilityZone() pulumix.Output[string] {
	return pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) string { return v.AvailabilityZone })
}

func (o LookupVolumeResultOutput) Encrypted() pulumix.Output[bool] {
	return pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) bool { return v.Encrypted })
}

func (o LookupVolumeResultOutput) Filters() pulumix.GArrayOutput[GetVolumeFilter, GetVolumeFilterOutput] {
	value := pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) []GetVolumeFilter { return v.Filters })
	return pulumix.GArrayOutput[GetVolumeFilter, GetVolumeFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVolumeResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) string { return v.Id })
}

func (o LookupVolumeResultOutput) Iops() pulumix.Output[int] {
	return pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) int { return v.Iops })
}

func (o LookupVolumeResultOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) string { return v.KmsKeyId })
}

func (o LookupVolumeResultOutput) MostRecent() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) *bool { return v.MostRecent })
}

func (o LookupVolumeResultOutput) MultiAttachEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) bool { return v.MultiAttachEnabled })
}

func (o LookupVolumeResultOutput) OutpostArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) string { return v.OutpostArn })
}

func (o LookupVolumeResultOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) int { return v.Size })
}

func (o LookupVolumeResultOutput) SnapshotId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) string { return v.SnapshotId })
}

func (o LookupVolumeResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVolumeResultOutput) Throughput() pulumix.Output[int] {
	return pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) int { return v.Throughput })
}

func (o LookupVolumeResultOutput) VolumeId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) string { return v.VolumeId })
}

func (o LookupVolumeResultOutput) VolumeType() pulumix.Output[string] {
	return pulumix.Apply[*LookupVolumeResult](o, func(v *LookupVolumeResult) string { return v.VolumeType })
}
