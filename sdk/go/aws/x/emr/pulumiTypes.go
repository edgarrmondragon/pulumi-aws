// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRange struct {
	// The final port in the range of TCP ports.
	MaxRange int `pulumi:"maxRange"`
	// The first port in the range of TCP ports.
	MinRange int `pulumi:"minRange"`
}

type BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeArgs struct {
	// The final port in the range of TCP ports.
	MaxRange pulumix.Input[int] `pulumi:"maxRange"`
	// The first port in the range of TCP ports.
	MinRange pulumix.Input[int] `pulumi:"minRange"`
}

func (BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRange)(nil)).Elem()
}

func (i BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeArgs) ToBlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutput() BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutput {
	return i.ToBlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutputWithContext(context.Background())
}

func (i BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeArgs) ToBlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutputWithContext(ctx context.Context) BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutput)
}

func (i *BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeArgs] {
	return pulumix.Val(i)
}

type BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutput struct{ *pulumi.OutputState }

func (BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRange)(nil)).Elem()
}

func (o BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutput) ToBlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutput() BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutput {
	return o
}

func (o BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutput) ToBlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutputWithContext(ctx context.Context) BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutput {
	return o
}

func (o BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutput) ToOutput(ctx context.Context) pulumix.Output[BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRange] {
	return pulumix.Output[BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRange]{
		OutputState: o.OutputState,
	}
}

// The final port in the range of TCP ports.
func (o BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutput) MaxRange() pulumix.Output[int] {
	return pulumix.Apply[BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRange](o, func(v BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRange) int { return v.MaxRange })
}

// The first port in the range of TCP ports.
func (o BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutput) MinRange() pulumix.Output[int] {
	return pulumix.Apply[BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRange](o, func(v BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRange) int { return v.MinRange })
}

type ClusterAutoTerminationPolicy struct {
	// Specifies the amount of idle time in seconds after which the cluster automatically terminates. You can specify a minimum of `60` seconds and a maximum of `604800` seconds (seven days).
	IdleTimeout *int `pulumi:"idleTimeout"`
}

type ClusterAutoTerminationPolicyArgs struct {
	// Specifies the amount of idle time in seconds after which the cluster automatically terminates. You can specify a minimum of `60` seconds and a maximum of `604800` seconds (seven days).
	IdleTimeout pulumix.Input[*int] `pulumi:"idleTimeout"`
}

func (ClusterAutoTerminationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoTerminationPolicy)(nil)).Elem()
}

func (i ClusterAutoTerminationPolicyArgs) ToClusterAutoTerminationPolicyOutput() ClusterAutoTerminationPolicyOutput {
	return i.ToClusterAutoTerminationPolicyOutputWithContext(context.Background())
}

func (i ClusterAutoTerminationPolicyArgs) ToClusterAutoTerminationPolicyOutputWithContext(ctx context.Context) ClusterAutoTerminationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoTerminationPolicyOutput)
}

func (i *ClusterAutoTerminationPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterAutoTerminationPolicyArgs] {
	return pulumix.Val(i)
}

type ClusterAutoTerminationPolicyOutput struct{ *pulumi.OutputState }

func (ClusterAutoTerminationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoTerminationPolicy)(nil)).Elem()
}

func (o ClusterAutoTerminationPolicyOutput) ToClusterAutoTerminationPolicyOutput() ClusterAutoTerminationPolicyOutput {
	return o
}

func (o ClusterAutoTerminationPolicyOutput) ToClusterAutoTerminationPolicyOutputWithContext(ctx context.Context) ClusterAutoTerminationPolicyOutput {
	return o
}

func (o ClusterAutoTerminationPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterAutoTerminationPolicy] {
	return pulumix.Output[ClusterAutoTerminationPolicy]{
		OutputState: o.OutputState,
	}
}

// Specifies the amount of idle time in seconds after which the cluster automatically terminates. You can specify a minimum of `60` seconds and a maximum of `604800` seconds (seven days).
func (o ClusterAutoTerminationPolicyOutput) IdleTimeout() pulumix.Output[*int] {
	return pulumix.Apply[ClusterAutoTerminationPolicy](o, func(v ClusterAutoTerminationPolicy) *int { return v.IdleTimeout })
}

type ClusterBootstrapAction struct {
	// List of command line arguments to pass to the bootstrap action script.
	Args []string `pulumi:"args"`
	// Name of the bootstrap action.
	Name string `pulumi:"name"`
	// Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system.
	Path string `pulumi:"path"`
}

type ClusterBootstrapActionArgs struct {
	// List of command line arguments to pass to the bootstrap action script.
	Args pulumix.Input[[]string] `pulumi:"args"`
	// Name of the bootstrap action.
	Name pulumix.Input[string] `pulumi:"name"`
	// Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system.
	Path pulumix.Input[string] `pulumi:"path"`
}

func (ClusterBootstrapActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBootstrapAction)(nil)).Elem()
}

func (i ClusterBootstrapActionArgs) ToClusterBootstrapActionOutput() ClusterBootstrapActionOutput {
	return i.ToClusterBootstrapActionOutputWithContext(context.Background())
}

func (i ClusterBootstrapActionArgs) ToClusterBootstrapActionOutputWithContext(ctx context.Context) ClusterBootstrapActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBootstrapActionOutput)
}

func (i *ClusterBootstrapActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterBootstrapActionArgs] {
	return pulumix.Val(i)
}

type ClusterBootstrapActionOutput struct{ *pulumi.OutputState }

func (ClusterBootstrapActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBootstrapAction)(nil)).Elem()
}

func (o ClusterBootstrapActionOutput) ToClusterBootstrapActionOutput() ClusterBootstrapActionOutput {
	return o
}

func (o ClusterBootstrapActionOutput) ToClusterBootstrapActionOutputWithContext(ctx context.Context) ClusterBootstrapActionOutput {
	return o
}

func (o ClusterBootstrapActionOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterBootstrapAction] {
	return pulumix.Output[ClusterBootstrapAction]{
		OutputState: o.OutputState,
	}
}

// List of command line arguments to pass to the bootstrap action script.
func (o ClusterBootstrapActionOutput) Args() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClusterBootstrapAction](o, func(v ClusterBootstrapAction) []string { return v.Args })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Name of the bootstrap action.
func (o ClusterBootstrapActionOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ClusterBootstrapAction](o, func(v ClusterBootstrapAction) string { return v.Name })
}

// Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system.
func (o ClusterBootstrapActionOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[ClusterBootstrapAction](o, func(v ClusterBootstrapAction) string { return v.Path })
}

type ClusterCoreInstanceFleet struct {
	// ID of the cluster.
	Id *string `pulumi:"id"`
	// Configuration block for instance fleet.
	InstanceTypeConfigs []ClusterCoreInstanceFleetInstanceTypeConfig `pulumi:"instanceTypeConfigs"`
	// Configuration block for launch specification.
	LaunchSpecifications *ClusterCoreInstanceFleetLaunchSpecifications `pulumi:"launchSpecifications"`
	// Friendly name given to the instance fleet.
	Name                        *string `pulumi:"name"`
	ProvisionedOnDemandCapacity *int    `pulumi:"provisionedOnDemandCapacity"`
	ProvisionedSpotCapacity     *int    `pulumi:"provisionedSpotCapacity"`
	// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
	TargetOnDemandCapacity *int `pulumi:"targetOnDemandCapacity"`
	// Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
	TargetSpotCapacity *int `pulumi:"targetSpotCapacity"`
}

type ClusterCoreInstanceFleetArgs struct {
	// ID of the cluster.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Configuration block for instance fleet.
	InstanceTypeConfigs pulumix.Input[[]*ClusterCoreInstanceFleetInstanceTypeConfigArgs] `pulumi:"instanceTypeConfigs"`
	// Configuration block for launch specification.
	LaunchSpecifications pulumix.Input[*ClusterCoreInstanceFleetLaunchSpecificationsArgs] `pulumi:"launchSpecifications"`
	// Friendly name given to the instance fleet.
	Name                        pulumix.Input[*string] `pulumi:"name"`
	ProvisionedOnDemandCapacity pulumix.Input[*int]    `pulumi:"provisionedOnDemandCapacity"`
	ProvisionedSpotCapacity     pulumix.Input[*int]    `pulumi:"provisionedSpotCapacity"`
	// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
	TargetOnDemandCapacity pulumix.Input[*int] `pulumi:"targetOnDemandCapacity"`
	// Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
	TargetSpotCapacity pulumix.Input[*int] `pulumi:"targetSpotCapacity"`
}

func (ClusterCoreInstanceFleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceFleet)(nil)).Elem()
}

func (i ClusterCoreInstanceFleetArgs) ToClusterCoreInstanceFleetOutput() ClusterCoreInstanceFleetOutput {
	return i.ToClusterCoreInstanceFleetOutputWithContext(context.Background())
}

func (i ClusterCoreInstanceFleetArgs) ToClusterCoreInstanceFleetOutputWithContext(ctx context.Context) ClusterCoreInstanceFleetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCoreInstanceFleetOutput)
}

func (i *ClusterCoreInstanceFleetArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterCoreInstanceFleetArgs] {
	return pulumix.Val(i)
}

type ClusterCoreInstanceFleetOutput struct{ *pulumi.OutputState }

func (ClusterCoreInstanceFleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceFleet)(nil)).Elem()
}

func (o ClusterCoreInstanceFleetOutput) ToClusterCoreInstanceFleetOutput() ClusterCoreInstanceFleetOutput {
	return o
}

func (o ClusterCoreInstanceFleetOutput) ToClusterCoreInstanceFleetOutputWithContext(ctx context.Context) ClusterCoreInstanceFleetOutput {
	return o
}

func (o ClusterCoreInstanceFleetOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterCoreInstanceFleet] {
	return pulumix.Output[ClusterCoreInstanceFleet]{
		OutputState: o.OutputState,
	}
}

// ID of the cluster.
func (o ClusterCoreInstanceFleetOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[ClusterCoreInstanceFleet](o, func(v ClusterCoreInstanceFleet) *string { return v.Id })
}

// Configuration block for instance fleet.
func (o ClusterCoreInstanceFleetOutput) InstanceTypeConfigs() pulumix.GArrayOutput[ClusterCoreInstanceFleetInstanceTypeConfig, ClusterCoreInstanceFleetInstanceTypeConfigOutput] {
	value := pulumix.Apply[ClusterCoreInstanceFleet](o, func(v ClusterCoreInstanceFleet) []ClusterCoreInstanceFleetInstanceTypeConfig {
		return v.InstanceTypeConfigs
	})
	return pulumix.GArrayOutput[ClusterCoreInstanceFleetInstanceTypeConfig, ClusterCoreInstanceFleetInstanceTypeConfigOutput]{OutputState: value.OutputState}
}

// Configuration block for launch specification.
func (o ClusterCoreInstanceFleetOutput) LaunchSpecifications() pulumix.GPtrOutput[ClusterCoreInstanceFleetLaunchSpecifications, ClusterCoreInstanceFleetLaunchSpecificationsOutput] {
	value := pulumix.Apply[ClusterCoreInstanceFleet](o, func(v ClusterCoreInstanceFleet) *ClusterCoreInstanceFleetLaunchSpecifications {
		return v.LaunchSpecifications
	})
	return pulumix.GPtrOutput[ClusterCoreInstanceFleetLaunchSpecifications, ClusterCoreInstanceFleetLaunchSpecificationsOutput]{OutputState: value.OutputState}
}

// Friendly name given to the instance fleet.
func (o ClusterCoreInstanceFleetOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[ClusterCoreInstanceFleet](o, func(v ClusterCoreInstanceFleet) *string { return v.Name })
}

func (o ClusterCoreInstanceFleetOutput) ProvisionedOnDemandCapacity() pulumix.Output[*int] {
	return pulumix.Apply[ClusterCoreInstanceFleet](o, func(v ClusterCoreInstanceFleet) *int { return v.ProvisionedOnDemandCapacity })
}

func (o ClusterCoreInstanceFleetOutput) ProvisionedSpotCapacity() pulumix.Output[*int] {
	return pulumix.Apply[ClusterCoreInstanceFleet](o, func(v ClusterCoreInstanceFleet) *int { return v.ProvisionedSpotCapacity })
}

// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
func (o ClusterCoreInstanceFleetOutput) TargetOnDemandCapacity() pulumix.Output[*int] {
	return pulumix.Apply[ClusterCoreInstanceFleet](o, func(v ClusterCoreInstanceFleet) *int { return v.TargetOnDemandCapacity })
}

// Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
func (o ClusterCoreInstanceFleetOutput) TargetSpotCapacity() pulumix.Output[*int] {
	return pulumix.Apply[ClusterCoreInstanceFleet](o, func(v ClusterCoreInstanceFleet) *int { return v.TargetSpotCapacity })
}

type ClusterCoreInstanceFleetInstanceTypeConfig struct {
	// Bid price for each EC2 Spot instance type as defined by `instanceType`. Expressed in USD. If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
	BidPrice *string `pulumi:"bidPrice"`
	// Bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by `instanceType`. Expressed as a number (for example, 20 specifies 20%). If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
	BidPriceAsPercentageOfOnDemandPrice *float64 `pulumi:"bidPriceAsPercentageOfOnDemandPrice"`
	// Configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
	Configurations []ClusterCoreInstanceFleetInstanceTypeConfigConfiguration `pulumi:"configurations"`
	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EbsConfigs []ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig `pulumi:"ebsConfigs"`
	// EC2 instance type, such as m4.xlarge.
	InstanceType string `pulumi:"instanceType"`
	// Number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in `emr.InstanceFleet`.
	WeightedCapacity *int `pulumi:"weightedCapacity"`
}

type ClusterCoreInstanceFleetInstanceTypeConfigArgs struct {
	// Bid price for each EC2 Spot instance type as defined by `instanceType`. Expressed in USD. If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
	BidPrice pulumix.Input[*string] `pulumi:"bidPrice"`
	// Bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by `instanceType`. Expressed as a number (for example, 20 specifies 20%). If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
	BidPriceAsPercentageOfOnDemandPrice pulumix.Input[*float64] `pulumi:"bidPriceAsPercentageOfOnDemandPrice"`
	// Configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
	Configurations pulumix.Input[[]*ClusterCoreInstanceFleetInstanceTypeConfigConfigurationArgs] `pulumi:"configurations"`
	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EbsConfigs pulumix.Input[[]*ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigArgs] `pulumi:"ebsConfigs"`
	// EC2 instance type, such as m4.xlarge.
	InstanceType pulumix.Input[string] `pulumi:"instanceType"`
	// Number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in `emr.InstanceFleet`.
	WeightedCapacity pulumix.Input[*int] `pulumi:"weightedCapacity"`
}

func (ClusterCoreInstanceFleetInstanceTypeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceFleetInstanceTypeConfig)(nil)).Elem()
}

func (i ClusterCoreInstanceFleetInstanceTypeConfigArgs) ToClusterCoreInstanceFleetInstanceTypeConfigOutput() ClusterCoreInstanceFleetInstanceTypeConfigOutput {
	return i.ToClusterCoreInstanceFleetInstanceTypeConfigOutputWithContext(context.Background())
}

func (i ClusterCoreInstanceFleetInstanceTypeConfigArgs) ToClusterCoreInstanceFleetInstanceTypeConfigOutputWithContext(ctx context.Context) ClusterCoreInstanceFleetInstanceTypeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCoreInstanceFleetInstanceTypeConfigOutput)
}

func (i *ClusterCoreInstanceFleetInstanceTypeConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterCoreInstanceFleetInstanceTypeConfigArgs] {
	return pulumix.Val(i)
}

type ClusterCoreInstanceFleetInstanceTypeConfigOutput struct{ *pulumi.OutputState }

func (ClusterCoreInstanceFleetInstanceTypeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceFleetInstanceTypeConfig)(nil)).Elem()
}

func (o ClusterCoreInstanceFleetInstanceTypeConfigOutput) ToClusterCoreInstanceFleetInstanceTypeConfigOutput() ClusterCoreInstanceFleetInstanceTypeConfigOutput {
	return o
}

func (o ClusterCoreInstanceFleetInstanceTypeConfigOutput) ToClusterCoreInstanceFleetInstanceTypeConfigOutputWithContext(ctx context.Context) ClusterCoreInstanceFleetInstanceTypeConfigOutput {
	return o
}

func (o ClusterCoreInstanceFleetInstanceTypeConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterCoreInstanceFleetInstanceTypeConfig] {
	return pulumix.Output[ClusterCoreInstanceFleetInstanceTypeConfig]{
		OutputState: o.OutputState,
	}
}

// Bid price for each EC2 Spot instance type as defined by `instanceType`. Expressed in USD. If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
func (o ClusterCoreInstanceFleetInstanceTypeConfigOutput) BidPrice() pulumix.Output[*string] {
	return pulumix.Apply[ClusterCoreInstanceFleetInstanceTypeConfig](o, func(v ClusterCoreInstanceFleetInstanceTypeConfig) *string { return v.BidPrice })
}

// Bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by `instanceType`. Expressed as a number (for example, 20 specifies 20%). If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
func (o ClusterCoreInstanceFleetInstanceTypeConfigOutput) BidPriceAsPercentageOfOnDemandPrice() pulumix.Output[*float64] {
	return pulumix.Apply[ClusterCoreInstanceFleetInstanceTypeConfig](o, func(v ClusterCoreInstanceFleetInstanceTypeConfig) *float64 {
		return v.BidPriceAsPercentageOfOnDemandPrice
	})
}

// Configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
func (o ClusterCoreInstanceFleetInstanceTypeConfigOutput) Configurations() pulumix.GArrayOutput[ClusterCoreInstanceFleetInstanceTypeConfigConfiguration, ClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput] {
	value := pulumix.Apply[ClusterCoreInstanceFleetInstanceTypeConfig](o, func(v ClusterCoreInstanceFleetInstanceTypeConfig) []ClusterCoreInstanceFleetInstanceTypeConfigConfiguration {
		return v.Configurations
	})
	return pulumix.GArrayOutput[ClusterCoreInstanceFleetInstanceTypeConfigConfiguration, ClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
func (o ClusterCoreInstanceFleetInstanceTypeConfigOutput) EbsConfigs() pulumix.GArrayOutput[ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig, ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput] {
	value := pulumix.Apply[ClusterCoreInstanceFleetInstanceTypeConfig](o, func(v ClusterCoreInstanceFleetInstanceTypeConfig) []ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig {
		return v.EbsConfigs
	})
	return pulumix.GArrayOutput[ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig, ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput]{OutputState: value.OutputState}
}

// EC2 instance type, such as m4.xlarge.
func (o ClusterCoreInstanceFleetInstanceTypeConfigOutput) InstanceType() pulumix.Output[string] {
	return pulumix.Apply[ClusterCoreInstanceFleetInstanceTypeConfig](o, func(v ClusterCoreInstanceFleetInstanceTypeConfig) string { return v.InstanceType })
}

// Number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in `emr.InstanceFleet`.
func (o ClusterCoreInstanceFleetInstanceTypeConfigOutput) WeightedCapacity() pulumix.Output[*int] {
	return pulumix.Apply[ClusterCoreInstanceFleetInstanceTypeConfig](o, func(v ClusterCoreInstanceFleetInstanceTypeConfig) *int { return v.WeightedCapacity })
}

type ClusterCoreInstanceFleetInstanceTypeConfigConfiguration struct {
	// Classification within a configuration.
	Classification *string `pulumi:"classification"`
	// Map of properties specified within a configuration classification.
	Properties map[string]string `pulumi:"properties"`
}

type ClusterCoreInstanceFleetInstanceTypeConfigConfigurationArgs struct {
	// Classification within a configuration.
	Classification pulumix.Input[*string] `pulumi:"classification"`
	// Map of properties specified within a configuration classification.
	Properties pulumix.Input[map[string]string] `pulumi:"properties"`
}

func (ClusterCoreInstanceFleetInstanceTypeConfigConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceFleetInstanceTypeConfigConfiguration)(nil)).Elem()
}

func (i ClusterCoreInstanceFleetInstanceTypeConfigConfigurationArgs) ToClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput() ClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput {
	return i.ToClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutputWithContext(context.Background())
}

func (i ClusterCoreInstanceFleetInstanceTypeConfigConfigurationArgs) ToClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutputWithContext(ctx context.Context) ClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput)
}

func (i *ClusterCoreInstanceFleetInstanceTypeConfigConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterCoreInstanceFleetInstanceTypeConfigConfigurationArgs] {
	return pulumix.Val(i)
}

type ClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceFleetInstanceTypeConfigConfiguration)(nil)).Elem()
}

func (o ClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput) ToClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput() ClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput {
	return o
}

func (o ClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput) ToClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutputWithContext(ctx context.Context) ClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput {
	return o
}

func (o ClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterCoreInstanceFleetInstanceTypeConfigConfiguration] {
	return pulumix.Output[ClusterCoreInstanceFleetInstanceTypeConfigConfiguration]{
		OutputState: o.OutputState,
	}
}

// Classification within a configuration.
func (o ClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput) Classification() pulumix.Output[*string] {
	return pulumix.Apply[ClusterCoreInstanceFleetInstanceTypeConfigConfiguration](o, func(v ClusterCoreInstanceFleetInstanceTypeConfigConfiguration) *string { return v.Classification })
}

// Map of properties specified within a configuration classification.
func (o ClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput) Properties() pulumix.MapOutput[string] {
	value := pulumix.Apply[ClusterCoreInstanceFleetInstanceTypeConfigConfiguration](o, func(v ClusterCoreInstanceFleetInstanceTypeConfigConfiguration) map[string]string { return v.Properties })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig struct {
	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops *int `pulumi:"iops"`
	// Volume size, in gibibytes (GiB).
	Size int `pulumi:"size"`
	// Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
	Type string `pulumi:"type"`
	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance *int `pulumi:"volumesPerInstance"`
}

type ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigArgs struct {
	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// Volume size, in gibibytes (GiB).
	Size pulumix.Input[int] `pulumi:"size"`
	// Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
	Type pulumix.Input[string] `pulumi:"type"`
	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance pulumix.Input[*int] `pulumi:"volumesPerInstance"`
}

func (ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig)(nil)).Elem()
}

func (i ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigArgs) ToClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput() ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput {
	return i.ToClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutputWithContext(context.Background())
}

func (i ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigArgs) ToClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutputWithContext(ctx context.Context) ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput)
}

func (i *ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigArgs] {
	return pulumix.Val(i)
}

type ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput struct{ *pulumi.OutputState }

func (ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig)(nil)).Elem()
}

func (o ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput) ToClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput() ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput {
	return o
}

func (o ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput) ToClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutputWithContext(ctx context.Context) ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput {
	return o
}

func (o ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig] {
	return pulumix.Output[ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig]{
		OutputState: o.OutputState,
	}
}

// Number of I/O operations per second (IOPS) that the volume supports.
func (o ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig](o, func(v ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig) *int { return v.Iops })
}

// Volume size, in gibibytes (GiB).
func (o ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig](o, func(v ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig) int { return v.Size })
}

// Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
func (o ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig](o, func(v ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig) string { return v.Type })
}

// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
func (o ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput) VolumesPerInstance() pulumix.Output[*int] {
	return pulumix.Apply[ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig](o, func(v ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig) *int { return v.VolumesPerInstance })
}

type ClusterCoreInstanceFleetLaunchSpecifications struct {
	// Configuration block for on demand instances launch specifications.
	OnDemandSpecifications []ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecification `pulumi:"onDemandSpecifications"`
	// Configuration block for spot instances launch specifications.
	SpotSpecifications []ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification `pulumi:"spotSpecifications"`
}

type ClusterCoreInstanceFleetLaunchSpecificationsArgs struct {
	// Configuration block for on demand instances launch specifications.
	OnDemandSpecifications pulumix.Input[[]*ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationArgs] `pulumi:"onDemandSpecifications"`
	// Configuration block for spot instances launch specifications.
	SpotSpecifications pulumix.Input[[]*ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationArgs] `pulumi:"spotSpecifications"`
}

func (ClusterCoreInstanceFleetLaunchSpecificationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceFleetLaunchSpecifications)(nil)).Elem()
}

func (i ClusterCoreInstanceFleetLaunchSpecificationsArgs) ToClusterCoreInstanceFleetLaunchSpecificationsOutput() ClusterCoreInstanceFleetLaunchSpecificationsOutput {
	return i.ToClusterCoreInstanceFleetLaunchSpecificationsOutputWithContext(context.Background())
}

func (i ClusterCoreInstanceFleetLaunchSpecificationsArgs) ToClusterCoreInstanceFleetLaunchSpecificationsOutputWithContext(ctx context.Context) ClusterCoreInstanceFleetLaunchSpecificationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCoreInstanceFleetLaunchSpecificationsOutput)
}

func (i *ClusterCoreInstanceFleetLaunchSpecificationsArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterCoreInstanceFleetLaunchSpecificationsArgs] {
	return pulumix.Val(i)
}

type ClusterCoreInstanceFleetLaunchSpecificationsOutput struct{ *pulumi.OutputState }

func (ClusterCoreInstanceFleetLaunchSpecificationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceFleetLaunchSpecifications)(nil)).Elem()
}

func (o ClusterCoreInstanceFleetLaunchSpecificationsOutput) ToClusterCoreInstanceFleetLaunchSpecificationsOutput() ClusterCoreInstanceFleetLaunchSpecificationsOutput {
	return o
}

func (o ClusterCoreInstanceFleetLaunchSpecificationsOutput) ToClusterCoreInstanceFleetLaunchSpecificationsOutputWithContext(ctx context.Context) ClusterCoreInstanceFleetLaunchSpecificationsOutput {
	return o
}

func (o ClusterCoreInstanceFleetLaunchSpecificationsOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterCoreInstanceFleetLaunchSpecifications] {
	return pulumix.Output[ClusterCoreInstanceFleetLaunchSpecifications]{
		OutputState: o.OutputState,
	}
}

// Configuration block for on demand instances launch specifications.
func (o ClusterCoreInstanceFleetLaunchSpecificationsOutput) OnDemandSpecifications() pulumix.GArrayOutput[ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecification, ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput] {
	value := pulumix.Apply[ClusterCoreInstanceFleetLaunchSpecifications](o, func(v ClusterCoreInstanceFleetLaunchSpecifications) []ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecification {
		return v.OnDemandSpecifications
	})
	return pulumix.GArrayOutput[ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecification, ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput]{OutputState: value.OutputState}
}

// Configuration block for spot instances launch specifications.
func (o ClusterCoreInstanceFleetLaunchSpecificationsOutput) SpotSpecifications() pulumix.GArrayOutput[ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification, ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput] {
	value := pulumix.Apply[ClusterCoreInstanceFleetLaunchSpecifications](o, func(v ClusterCoreInstanceFleetLaunchSpecifications) []ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification {
		return v.SpotSpecifications
	})
	return pulumix.GArrayOutput[ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification, ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput]{OutputState: value.OutputState}
}

type ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecification struct {
	// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is `lowest-price` (the default), which launches the lowest price first.
	AllocationStrategy string `pulumi:"allocationStrategy"`
}

type ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationArgs struct {
	// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is `lowest-price` (the default), which launches the lowest price first.
	AllocationStrategy pulumix.Input[string] `pulumi:"allocationStrategy"`
}

func (ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecification)(nil)).Elem()
}

func (i ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationArgs) ToClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput() ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput {
	return i.ToClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputWithContext(context.Background())
}

func (i ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationArgs) ToClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputWithContext(ctx context.Context) ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput)
}

func (i *ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationArgs] {
	return pulumix.Val(i)
}

type ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput struct{ *pulumi.OutputState }

func (ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecification)(nil)).Elem()
}

func (o ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput) ToClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput() ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput {
	return o
}

func (o ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput) ToClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputWithContext(ctx context.Context) ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput {
	return o
}

func (o ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecification] {
	return pulumix.Output[ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecification]{
		OutputState: o.OutputState,
	}
}

// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is `lowest-price` (the default), which launches the lowest price first.
func (o ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput) AllocationStrategy() pulumix.Output[string] {
	return pulumix.Apply[ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecification](o, func(v ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecification) string {
		return v.AllocationStrategy
	})
}

type ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification struct {
	// Specifies the strategy to use in launching Spot instance fleets. Valid values include `capacity-optimized`, `diversified`, `lowest-price`, `price-capacity-optimized`. See the [AWS documentation](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-fleet.html#emr-instance-fleet-allocation-strategy) for details on each strategy type.
	AllocationStrategy string `pulumi:"allocationStrategy"`
	// Defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	BlockDurationMinutes *int `pulumi:"blockDurationMinutes"`
	// Action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are `TERMINATE_CLUSTER` and `SWITCH_TO_ON_DEMAND`. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
	TimeoutAction string `pulumi:"timeoutAction"`
	// Spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
	TimeoutDurationMinutes int `pulumi:"timeoutDurationMinutes"`
}

type ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationArgs struct {
	// Specifies the strategy to use in launching Spot instance fleets. Valid values include `capacity-optimized`, `diversified`, `lowest-price`, `price-capacity-optimized`. See the [AWS documentation](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-fleet.html#emr-instance-fleet-allocation-strategy) for details on each strategy type.
	AllocationStrategy pulumix.Input[string] `pulumi:"allocationStrategy"`
	// Defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	BlockDurationMinutes pulumix.Input[*int] `pulumi:"blockDurationMinutes"`
	// Action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are `TERMINATE_CLUSTER` and `SWITCH_TO_ON_DEMAND`. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
	TimeoutAction pulumix.Input[string] `pulumi:"timeoutAction"`
	// Spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
	TimeoutDurationMinutes pulumix.Input[int] `pulumi:"timeoutDurationMinutes"`
}

func (ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification)(nil)).Elem()
}

func (i ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationArgs) ToClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput() ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput {
	return i.ToClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutputWithContext(context.Background())
}

func (i ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationArgs) ToClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutputWithContext(ctx context.Context) ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput)
}

func (i *ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationArgs] {
	return pulumix.Val(i)
}

type ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput struct{ *pulumi.OutputState }

func (ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification)(nil)).Elem()
}

func (o ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput) ToClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput() ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput {
	return o
}

func (o ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput) ToClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutputWithContext(ctx context.Context) ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput {
	return o
}

func (o ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification] {
	return pulumix.Output[ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification]{
		OutputState: o.OutputState,
	}
}

// Specifies the strategy to use in launching Spot instance fleets. Valid values include `capacity-optimized`, `diversified`, `lowest-price`, `price-capacity-optimized`. See the [AWS documentation](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-fleet.html#emr-instance-fleet-allocation-strategy) for details on each strategy type.
func (o ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput) AllocationStrategy() pulumix.Output[string] {
	return pulumix.Apply[ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification](o, func(v ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification) string {
		return v.AllocationStrategy
	})
}

// Defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
func (o ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput) BlockDurationMinutes() pulumix.Output[*int] {
	return pulumix.Apply[ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification](o, func(v ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification) *int {
		return v.BlockDurationMinutes
	})
}

// Action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are `TERMINATE_CLUSTER` and `SWITCH_TO_ON_DEMAND`. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
func (o ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput) TimeoutAction() pulumix.Output[string] {
	return pulumix.Apply[ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification](o, func(v ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification) string { return v.TimeoutAction })
}

// Spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
func (o ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput) TimeoutDurationMinutes() pulumix.Output[int] {
	return pulumix.Apply[ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification](o, func(v ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification) int {
		return v.TimeoutDurationMinutes
	})
}

type ClusterCoreInstanceGroup struct {
	// String containing the [EMR Auto Scaling Policy](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-automatic-scaling.html) JSON.
	AutoscalingPolicy *string `pulumi:"autoscalingPolicy"`
	// Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	BidPrice *string `pulumi:"bidPrice"`
	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EbsConfigs []ClusterCoreInstanceGroupEbsConfig `pulumi:"ebsConfigs"`
	// ID of the cluster.
	Id *string `pulumi:"id"`
	// Target number of instances for the instance group. Must be at least 1. Defaults to 1.
	InstanceCount *int `pulumi:"instanceCount"`
	// EC2 instance type for all instances in the instance group.
	InstanceType string `pulumi:"instanceType"`
	// Friendly name given to the instance group.
	Name *string `pulumi:"name"`
}

type ClusterCoreInstanceGroupArgs struct {
	// String containing the [EMR Auto Scaling Policy](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-automatic-scaling.html) JSON.
	AutoscalingPolicy pulumix.Input[*string] `pulumi:"autoscalingPolicy"`
	// Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	BidPrice pulumix.Input[*string] `pulumi:"bidPrice"`
	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EbsConfigs pulumix.Input[[]*ClusterCoreInstanceGroupEbsConfigArgs] `pulumi:"ebsConfigs"`
	// ID of the cluster.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Target number of instances for the instance group. Must be at least 1. Defaults to 1.
	InstanceCount pulumix.Input[*int] `pulumi:"instanceCount"`
	// EC2 instance type for all instances in the instance group.
	InstanceType pulumix.Input[string] `pulumi:"instanceType"`
	// Friendly name given to the instance group.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (ClusterCoreInstanceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceGroup)(nil)).Elem()
}

func (i ClusterCoreInstanceGroupArgs) ToClusterCoreInstanceGroupOutput() ClusterCoreInstanceGroupOutput {
	return i.ToClusterCoreInstanceGroupOutputWithContext(context.Background())
}

func (i ClusterCoreInstanceGroupArgs) ToClusterCoreInstanceGroupOutputWithContext(ctx context.Context) ClusterCoreInstanceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCoreInstanceGroupOutput)
}

func (i *ClusterCoreInstanceGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterCoreInstanceGroupArgs] {
	return pulumix.Val(i)
}

type ClusterCoreInstanceGroupOutput struct{ *pulumi.OutputState }

func (ClusterCoreInstanceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceGroup)(nil)).Elem()
}

func (o ClusterCoreInstanceGroupOutput) ToClusterCoreInstanceGroupOutput() ClusterCoreInstanceGroupOutput {
	return o
}

func (o ClusterCoreInstanceGroupOutput) ToClusterCoreInstanceGroupOutputWithContext(ctx context.Context) ClusterCoreInstanceGroupOutput {
	return o
}

func (o ClusterCoreInstanceGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterCoreInstanceGroup] {
	return pulumix.Output[ClusterCoreInstanceGroup]{
		OutputState: o.OutputState,
	}
}

// String containing the [EMR Auto Scaling Policy](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-automatic-scaling.html) JSON.
func (o ClusterCoreInstanceGroupOutput) AutoscalingPolicy() pulumix.Output[*string] {
	return pulumix.Apply[ClusterCoreInstanceGroup](o, func(v ClusterCoreInstanceGroup) *string { return v.AutoscalingPolicy })
}

// Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
func (o ClusterCoreInstanceGroupOutput) BidPrice() pulumix.Output[*string] {
	return pulumix.Apply[ClusterCoreInstanceGroup](o, func(v ClusterCoreInstanceGroup) *string { return v.BidPrice })
}

// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
func (o ClusterCoreInstanceGroupOutput) EbsConfigs() pulumix.GArrayOutput[ClusterCoreInstanceGroupEbsConfig, ClusterCoreInstanceGroupEbsConfigOutput] {
	value := pulumix.Apply[ClusterCoreInstanceGroup](o, func(v ClusterCoreInstanceGroup) []ClusterCoreInstanceGroupEbsConfig { return v.EbsConfigs })
	return pulumix.GArrayOutput[ClusterCoreInstanceGroupEbsConfig, ClusterCoreInstanceGroupEbsConfigOutput]{OutputState: value.OutputState}
}

// ID of the cluster.
func (o ClusterCoreInstanceGroupOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[ClusterCoreInstanceGroup](o, func(v ClusterCoreInstanceGroup) *string { return v.Id })
}

// Target number of instances for the instance group. Must be at least 1. Defaults to 1.
func (o ClusterCoreInstanceGroupOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[ClusterCoreInstanceGroup](o, func(v ClusterCoreInstanceGroup) *int { return v.InstanceCount })
}

// EC2 instance type for all instances in the instance group.
func (o ClusterCoreInstanceGroupOutput) InstanceType() pulumix.Output[string] {
	return pulumix.Apply[ClusterCoreInstanceGroup](o, func(v ClusterCoreInstanceGroup) string { return v.InstanceType })
}

// Friendly name given to the instance group.
func (o ClusterCoreInstanceGroupOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[ClusterCoreInstanceGroup](o, func(v ClusterCoreInstanceGroup) *string { return v.Name })
}

type ClusterCoreInstanceGroupEbsConfig struct {
	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops *int `pulumi:"iops"`
	// Volume size, in gibibytes (GiB).
	Size int `pulumi:"size"`
	// The throughput, in mebibyte per second (MiB/s).
	Throughput *int `pulumi:"throughput"`
	// Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
	Type string `pulumi:"type"`
	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance *int `pulumi:"volumesPerInstance"`
}

type ClusterCoreInstanceGroupEbsConfigArgs struct {
	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// Volume size, in gibibytes (GiB).
	Size pulumix.Input[int] `pulumi:"size"`
	// The throughput, in mebibyte per second (MiB/s).
	Throughput pulumix.Input[*int] `pulumi:"throughput"`
	// Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
	Type pulumix.Input[string] `pulumi:"type"`
	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance pulumix.Input[*int] `pulumi:"volumesPerInstance"`
}

func (ClusterCoreInstanceGroupEbsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceGroupEbsConfig)(nil)).Elem()
}

func (i ClusterCoreInstanceGroupEbsConfigArgs) ToClusterCoreInstanceGroupEbsConfigOutput() ClusterCoreInstanceGroupEbsConfigOutput {
	return i.ToClusterCoreInstanceGroupEbsConfigOutputWithContext(context.Background())
}

func (i ClusterCoreInstanceGroupEbsConfigArgs) ToClusterCoreInstanceGroupEbsConfigOutputWithContext(ctx context.Context) ClusterCoreInstanceGroupEbsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCoreInstanceGroupEbsConfigOutput)
}

func (i *ClusterCoreInstanceGroupEbsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterCoreInstanceGroupEbsConfigArgs] {
	return pulumix.Val(i)
}

type ClusterCoreInstanceGroupEbsConfigOutput struct{ *pulumi.OutputState }

func (ClusterCoreInstanceGroupEbsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCoreInstanceGroupEbsConfig)(nil)).Elem()
}

func (o ClusterCoreInstanceGroupEbsConfigOutput) ToClusterCoreInstanceGroupEbsConfigOutput() ClusterCoreInstanceGroupEbsConfigOutput {
	return o
}

func (o ClusterCoreInstanceGroupEbsConfigOutput) ToClusterCoreInstanceGroupEbsConfigOutputWithContext(ctx context.Context) ClusterCoreInstanceGroupEbsConfigOutput {
	return o
}

func (o ClusterCoreInstanceGroupEbsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterCoreInstanceGroupEbsConfig] {
	return pulumix.Output[ClusterCoreInstanceGroupEbsConfig]{
		OutputState: o.OutputState,
	}
}

// Number of I/O operations per second (IOPS) that the volume supports.
func (o ClusterCoreInstanceGroupEbsConfigOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[ClusterCoreInstanceGroupEbsConfig](o, func(v ClusterCoreInstanceGroupEbsConfig) *int { return v.Iops })
}

// Volume size, in gibibytes (GiB).
func (o ClusterCoreInstanceGroupEbsConfigOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[ClusterCoreInstanceGroupEbsConfig](o, func(v ClusterCoreInstanceGroupEbsConfig) int { return v.Size })
}

// The throughput, in mebibyte per second (MiB/s).
func (o ClusterCoreInstanceGroupEbsConfigOutput) Throughput() pulumix.Output[*int] {
	return pulumix.Apply[ClusterCoreInstanceGroupEbsConfig](o, func(v ClusterCoreInstanceGroupEbsConfig) *int { return v.Throughput })
}

// Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
func (o ClusterCoreInstanceGroupEbsConfigOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ClusterCoreInstanceGroupEbsConfig](o, func(v ClusterCoreInstanceGroupEbsConfig) string { return v.Type })
}

// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
func (o ClusterCoreInstanceGroupEbsConfigOutput) VolumesPerInstance() pulumix.Output[*int] {
	return pulumix.Apply[ClusterCoreInstanceGroupEbsConfig](o, func(v ClusterCoreInstanceGroupEbsConfig) *int { return v.VolumesPerInstance })
}

type ClusterEc2Attributes struct {
	// String containing a comma separated list of additional Amazon EC2 security group IDs for the master node.
	AdditionalMasterSecurityGroups *string `pulumi:"additionalMasterSecurityGroups"`
	// String containing a comma separated list of additional Amazon EC2 security group IDs for the slave nodes as a comma separated string.
	AdditionalSlaveSecurityGroups *string `pulumi:"additionalSlaveSecurityGroups"`
	// Identifier of the Amazon EC2 EMR-Managed security group for the master node.
	EmrManagedMasterSecurityGroup *string `pulumi:"emrManagedMasterSecurityGroup"`
	// Identifier of the Amazon EC2 EMR-Managed security group for the slave nodes.
	EmrManagedSlaveSecurityGroup *string `pulumi:"emrManagedSlaveSecurityGroup"`
	// Instance Profile for EC2 instances of the cluster assume this role.
	InstanceProfile string `pulumi:"instanceProfile"`
	// Amazon EC2 key pair that can be used to ssh to the master node as the user called `hadoop`.
	KeyName *string `pulumi:"keyName"`
	// Identifier of the Amazon EC2 service-access security group - required when the cluster runs on a private subnet.
	ServiceAccessSecurityGroup *string `pulumi:"serviceAccessSecurityGroup"`
	// VPC subnet id where you want the job flow to launch. Cannot specify the `cc1.4xlarge` instance type for nodes of a job flow launched in an Amazon VPC.
	SubnetId *string `pulumi:"subnetId"`
	// List of VPC subnet id-s where you want the job flow to launch.  Amazon EMR identifies the best Availability Zone to launch instances according to your fleet specifications.
	//
	// > **NOTE on EMR-Managed security groups:** These security groups will have any missing inbound or outbound access rules added and maintained by AWS, to ensure proper communication between instances in a cluster. The EMR service will maintain these rules for groups provided in `emrManagedMasterSecurityGroup` and `emrManagedSlaveSecurityGroup`; attempts to remove the required rules may succeed, only for the EMR service to re-add them in a matter of minutes. This may cause this provider to fail to destroy an environment that contains an EMR cluster, because the EMR service does not revoke rules added on deletion, leaving a cyclic dependency between the security groups that prevents their deletion. To avoid this, use the `revokeRulesOnDelete` optional attribute for any Security Group used in `emrManagedMasterSecurityGroup` and `emrManagedSlaveSecurityGroup`. See [Amazon EMR-Managed Security Groups](http://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-man-sec-groups.html) for more information about the EMR-managed security group rules.
	SubnetIds []string `pulumi:"subnetIds"`
}

type ClusterEc2AttributesArgs struct {
	// String containing a comma separated list of additional Amazon EC2 security group IDs for the master node.
	AdditionalMasterSecurityGroups pulumix.Input[*string] `pulumi:"additionalMasterSecurityGroups"`
	// String containing a comma separated list of additional Amazon EC2 security group IDs for the slave nodes as a comma separated string.
	AdditionalSlaveSecurityGroups pulumix.Input[*string] `pulumi:"additionalSlaveSecurityGroups"`
	// Identifier of the Amazon EC2 EMR-Managed security group for the master node.
	EmrManagedMasterSecurityGroup pulumix.Input[*string] `pulumi:"emrManagedMasterSecurityGroup"`
	// Identifier of the Amazon EC2 EMR-Managed security group for the slave nodes.
	EmrManagedSlaveSecurityGroup pulumix.Input[*string] `pulumi:"emrManagedSlaveSecurityGroup"`
	// Instance Profile for EC2 instances of the cluster assume this role.
	InstanceProfile pulumix.Input[string] `pulumi:"instanceProfile"`
	// Amazon EC2 key pair that can be used to ssh to the master node as the user called `hadoop`.
	KeyName pulumix.Input[*string] `pulumi:"keyName"`
	// Identifier of the Amazon EC2 service-access security group - required when the cluster runs on a private subnet.
	ServiceAccessSecurityGroup pulumix.Input[*string] `pulumi:"serviceAccessSecurityGroup"`
	// VPC subnet id where you want the job flow to launch. Cannot specify the `cc1.4xlarge` instance type for nodes of a job flow launched in an Amazon VPC.
	SubnetId pulumix.Input[*string] `pulumi:"subnetId"`
	// List of VPC subnet id-s where you want the job flow to launch.  Amazon EMR identifies the best Availability Zone to launch instances according to your fleet specifications.
	//
	// > **NOTE on EMR-Managed security groups:** These security groups will have any missing inbound or outbound access rules added and maintained by AWS, to ensure proper communication between instances in a cluster. The EMR service will maintain these rules for groups provided in `emrManagedMasterSecurityGroup` and `emrManagedSlaveSecurityGroup`; attempts to remove the required rules may succeed, only for the EMR service to re-add them in a matter of minutes. This may cause this provider to fail to destroy an environment that contains an EMR cluster, because the EMR service does not revoke rules added on deletion, leaving a cyclic dependency between the security groups that prevents their deletion. To avoid this, use the `revokeRulesOnDelete` optional attribute for any Security Group used in `emrManagedMasterSecurityGroup` and `emrManagedSlaveSecurityGroup`. See [Amazon EMR-Managed Security Groups](http://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-man-sec-groups.html) for more information about the EMR-managed security group rules.
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
}

func (ClusterEc2AttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEc2Attributes)(nil)).Elem()
}

func (i ClusterEc2AttributesArgs) ToClusterEc2AttributesOutput() ClusterEc2AttributesOutput {
	return i.ToClusterEc2AttributesOutputWithContext(context.Background())
}

func (i ClusterEc2AttributesArgs) ToClusterEc2AttributesOutputWithContext(ctx context.Context) ClusterEc2AttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEc2AttributesOutput)
}

func (i *ClusterEc2AttributesArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterEc2AttributesArgs] {
	return pulumix.Val(i)
}

type ClusterEc2AttributesOutput struct{ *pulumi.OutputState }

func (ClusterEc2AttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEc2Attributes)(nil)).Elem()
}

func (o ClusterEc2AttributesOutput) ToClusterEc2AttributesOutput() ClusterEc2AttributesOutput {
	return o
}

func (o ClusterEc2AttributesOutput) ToClusterEc2AttributesOutputWithContext(ctx context.Context) ClusterEc2AttributesOutput {
	return o
}

func (o ClusterEc2AttributesOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterEc2Attributes] {
	return pulumix.Output[ClusterEc2Attributes]{
		OutputState: o.OutputState,
	}
}

// String containing a comma separated list of additional Amazon EC2 security group IDs for the master node.
func (o ClusterEc2AttributesOutput) AdditionalMasterSecurityGroups() pulumix.Output[*string] {
	return pulumix.Apply[ClusterEc2Attributes](o, func(v ClusterEc2Attributes) *string { return v.AdditionalMasterSecurityGroups })
}

// String containing a comma separated list of additional Amazon EC2 security group IDs for the slave nodes as a comma separated string.
func (o ClusterEc2AttributesOutput) AdditionalSlaveSecurityGroups() pulumix.Output[*string] {
	return pulumix.Apply[ClusterEc2Attributes](o, func(v ClusterEc2Attributes) *string { return v.AdditionalSlaveSecurityGroups })
}

// Identifier of the Amazon EC2 EMR-Managed security group for the master node.
func (o ClusterEc2AttributesOutput) EmrManagedMasterSecurityGroup() pulumix.Output[*string] {
	return pulumix.Apply[ClusterEc2Attributes](o, func(v ClusterEc2Attributes) *string { return v.EmrManagedMasterSecurityGroup })
}

// Identifier of the Amazon EC2 EMR-Managed security group for the slave nodes.
func (o ClusterEc2AttributesOutput) EmrManagedSlaveSecurityGroup() pulumix.Output[*string] {
	return pulumix.Apply[ClusterEc2Attributes](o, func(v ClusterEc2Attributes) *string { return v.EmrManagedSlaveSecurityGroup })
}

// Instance Profile for EC2 instances of the cluster assume this role.
func (o ClusterEc2AttributesOutput) InstanceProfile() pulumix.Output[string] {
	return pulumix.Apply[ClusterEc2Attributes](o, func(v ClusterEc2Attributes) string { return v.InstanceProfile })
}

// Amazon EC2 key pair that can be used to ssh to the master node as the user called `hadoop`.
func (o ClusterEc2AttributesOutput) KeyName() pulumix.Output[*string] {
	return pulumix.Apply[ClusterEc2Attributes](o, func(v ClusterEc2Attributes) *string { return v.KeyName })
}

// Identifier of the Amazon EC2 service-access security group - required when the cluster runs on a private subnet.
func (o ClusterEc2AttributesOutput) ServiceAccessSecurityGroup() pulumix.Output[*string] {
	return pulumix.Apply[ClusterEc2Attributes](o, func(v ClusterEc2Attributes) *string { return v.ServiceAccessSecurityGroup })
}

// VPC subnet id where you want the job flow to launch. Cannot specify the `cc1.4xlarge` instance type for nodes of a job flow launched in an Amazon VPC.
func (o ClusterEc2AttributesOutput) SubnetId() pulumix.Output[*string] {
	return pulumix.Apply[ClusterEc2Attributes](o, func(v ClusterEc2Attributes) *string { return v.SubnetId })
}

// List of VPC subnet id-s where you want the job flow to launch.  Amazon EMR identifies the best Availability Zone to launch instances according to your fleet specifications.
//
// > **NOTE on EMR-Managed security groups:** These security groups will have any missing inbound or outbound access rules added and maintained by AWS, to ensure proper communication between instances in a cluster. The EMR service will maintain these rules for groups provided in `emrManagedMasterSecurityGroup` and `emrManagedSlaveSecurityGroup`; attempts to remove the required rules may succeed, only for the EMR service to re-add them in a matter of minutes. This may cause this provider to fail to destroy an environment that contains an EMR cluster, because the EMR service does not revoke rules added on deletion, leaving a cyclic dependency between the security groups that prevents their deletion. To avoid this, use the `revokeRulesOnDelete` optional attribute for any Security Group used in `emrManagedMasterSecurityGroup` and `emrManagedSlaveSecurityGroup`. See [Amazon EMR-Managed Security Groups](http://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-man-sec-groups.html) for more information about the EMR-managed security group rules.
func (o ClusterEc2AttributesOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClusterEc2Attributes](o, func(v ClusterEc2Attributes) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ClusterKerberosAttributes struct {
	// Active Directory password for `adDomainJoinUser`. This provider cannot perform drift detection of this configuration.
	AdDomainJoinPassword *string `pulumi:"adDomainJoinPassword"`
	// Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain. This provider cannot perform drift detection of this configuration.
	AdDomainJoinUser *string `pulumi:"adDomainJoinUser"`
	// Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms. This provider cannot perform drift detection of this configuration.
	CrossRealmTrustPrincipalPassword *string `pulumi:"crossRealmTrustPrincipalPassword"`
	// Password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster. This provider cannot perform drift detection of this configuration.
	KdcAdminPassword string `pulumi:"kdcAdminPassword"`
	// Name of the Kerberos realm to which all nodes in a cluster belong. For example, `EC2.INTERNAL`
	Realm string `pulumi:"realm"`
}

type ClusterKerberosAttributesArgs struct {
	// Active Directory password for `adDomainJoinUser`. This provider cannot perform drift detection of this configuration.
	AdDomainJoinPassword pulumix.Input[*string] `pulumi:"adDomainJoinPassword"`
	// Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain. This provider cannot perform drift detection of this configuration.
	AdDomainJoinUser pulumix.Input[*string] `pulumi:"adDomainJoinUser"`
	// Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms. This provider cannot perform drift detection of this configuration.
	CrossRealmTrustPrincipalPassword pulumix.Input[*string] `pulumi:"crossRealmTrustPrincipalPassword"`
	// Password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster. This provider cannot perform drift detection of this configuration.
	KdcAdminPassword pulumix.Input[string] `pulumi:"kdcAdminPassword"`
	// Name of the Kerberos realm to which all nodes in a cluster belong. For example, `EC2.INTERNAL`
	Realm pulumix.Input[string] `pulumi:"realm"`
}

func (ClusterKerberosAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKerberosAttributes)(nil)).Elem()
}

func (i ClusterKerberosAttributesArgs) ToClusterKerberosAttributesOutput() ClusterKerberosAttributesOutput {
	return i.ToClusterKerberosAttributesOutputWithContext(context.Background())
}

func (i ClusterKerberosAttributesArgs) ToClusterKerberosAttributesOutputWithContext(ctx context.Context) ClusterKerberosAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKerberosAttributesOutput)
}

func (i *ClusterKerberosAttributesArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterKerberosAttributesArgs] {
	return pulumix.Val(i)
}

type ClusterKerberosAttributesOutput struct{ *pulumi.OutputState }

func (ClusterKerberosAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKerberosAttributes)(nil)).Elem()
}

func (o ClusterKerberosAttributesOutput) ToClusterKerberosAttributesOutput() ClusterKerberosAttributesOutput {
	return o
}

func (o ClusterKerberosAttributesOutput) ToClusterKerberosAttributesOutputWithContext(ctx context.Context) ClusterKerberosAttributesOutput {
	return o
}

func (o ClusterKerberosAttributesOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterKerberosAttributes] {
	return pulumix.Output[ClusterKerberosAttributes]{
		OutputState: o.OutputState,
	}
}

// Active Directory password for `adDomainJoinUser`. This provider cannot perform drift detection of this configuration.
func (o ClusterKerberosAttributesOutput) AdDomainJoinPassword() pulumix.Output[*string] {
	return pulumix.Apply[ClusterKerberosAttributes](o, func(v ClusterKerberosAttributes) *string { return v.AdDomainJoinPassword })
}

// Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain. This provider cannot perform drift detection of this configuration.
func (o ClusterKerberosAttributesOutput) AdDomainJoinUser() pulumix.Output[*string] {
	return pulumix.Apply[ClusterKerberosAttributes](o, func(v ClusterKerberosAttributes) *string { return v.AdDomainJoinUser })
}

// Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms. This provider cannot perform drift detection of this configuration.
func (o ClusterKerberosAttributesOutput) CrossRealmTrustPrincipalPassword() pulumix.Output[*string] {
	return pulumix.Apply[ClusterKerberosAttributes](o, func(v ClusterKerberosAttributes) *string { return v.CrossRealmTrustPrincipalPassword })
}

// Password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster. This provider cannot perform drift detection of this configuration.
func (o ClusterKerberosAttributesOutput) KdcAdminPassword() pulumix.Output[string] {
	return pulumix.Apply[ClusterKerberosAttributes](o, func(v ClusterKerberosAttributes) string { return v.KdcAdminPassword })
}

// Name of the Kerberos realm to which all nodes in a cluster belong. For example, `EC2.INTERNAL`
func (o ClusterKerberosAttributesOutput) Realm() pulumix.Output[string] {
	return pulumix.Apply[ClusterKerberosAttributes](o, func(v ClusterKerberosAttributes) string { return v.Realm })
}

type ClusterMasterInstanceFleet struct {
	// ID of the cluster.
	Id *string `pulumi:"id"`
	// Configuration block for instance fleet.
	InstanceTypeConfigs []ClusterMasterInstanceFleetInstanceTypeConfig `pulumi:"instanceTypeConfigs"`
	// Configuration block for launch specification.
	LaunchSpecifications *ClusterMasterInstanceFleetLaunchSpecifications `pulumi:"launchSpecifications"`
	// Friendly name given to the instance fleet.
	Name                        *string `pulumi:"name"`
	ProvisionedOnDemandCapacity *int    `pulumi:"provisionedOnDemandCapacity"`
	ProvisionedSpotCapacity     *int    `pulumi:"provisionedSpotCapacity"`
	// Target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
	TargetOnDemandCapacity *int `pulumi:"targetOnDemandCapacity"`
	// Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
	TargetSpotCapacity *int `pulumi:"targetSpotCapacity"`
}

type ClusterMasterInstanceFleetArgs struct {
	// ID of the cluster.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Configuration block for instance fleet.
	InstanceTypeConfigs pulumix.Input[[]*ClusterMasterInstanceFleetInstanceTypeConfigArgs] `pulumi:"instanceTypeConfigs"`
	// Configuration block for launch specification.
	LaunchSpecifications pulumix.Input[*ClusterMasterInstanceFleetLaunchSpecificationsArgs] `pulumi:"launchSpecifications"`
	// Friendly name given to the instance fleet.
	Name                        pulumix.Input[*string] `pulumi:"name"`
	ProvisionedOnDemandCapacity pulumix.Input[*int]    `pulumi:"provisionedOnDemandCapacity"`
	ProvisionedSpotCapacity     pulumix.Input[*int]    `pulumi:"provisionedSpotCapacity"`
	// Target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
	TargetOnDemandCapacity pulumix.Input[*int] `pulumi:"targetOnDemandCapacity"`
	// Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
	TargetSpotCapacity pulumix.Input[*int] `pulumi:"targetSpotCapacity"`
}

func (ClusterMasterInstanceFleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceFleet)(nil)).Elem()
}

func (i ClusterMasterInstanceFleetArgs) ToClusterMasterInstanceFleetOutput() ClusterMasterInstanceFleetOutput {
	return i.ToClusterMasterInstanceFleetOutputWithContext(context.Background())
}

func (i ClusterMasterInstanceFleetArgs) ToClusterMasterInstanceFleetOutputWithContext(ctx context.Context) ClusterMasterInstanceFleetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterInstanceFleetOutput)
}

func (i *ClusterMasterInstanceFleetArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterMasterInstanceFleetArgs] {
	return pulumix.Val(i)
}

type ClusterMasterInstanceFleetOutput struct{ *pulumi.OutputState }

func (ClusterMasterInstanceFleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceFleet)(nil)).Elem()
}

func (o ClusterMasterInstanceFleetOutput) ToClusterMasterInstanceFleetOutput() ClusterMasterInstanceFleetOutput {
	return o
}

func (o ClusterMasterInstanceFleetOutput) ToClusterMasterInstanceFleetOutputWithContext(ctx context.Context) ClusterMasterInstanceFleetOutput {
	return o
}

func (o ClusterMasterInstanceFleetOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterMasterInstanceFleet] {
	return pulumix.Output[ClusterMasterInstanceFleet]{
		OutputState: o.OutputState,
	}
}

// ID of the cluster.
func (o ClusterMasterInstanceFleetOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[ClusterMasterInstanceFleet](o, func(v ClusterMasterInstanceFleet) *string { return v.Id })
}

// Configuration block for instance fleet.
func (o ClusterMasterInstanceFleetOutput) InstanceTypeConfigs() pulumix.GArrayOutput[ClusterMasterInstanceFleetInstanceTypeConfig, ClusterMasterInstanceFleetInstanceTypeConfigOutput] {
	value := pulumix.Apply[ClusterMasterInstanceFleet](o, func(v ClusterMasterInstanceFleet) []ClusterMasterInstanceFleetInstanceTypeConfig {
		return v.InstanceTypeConfigs
	})
	return pulumix.GArrayOutput[ClusterMasterInstanceFleetInstanceTypeConfig, ClusterMasterInstanceFleetInstanceTypeConfigOutput]{OutputState: value.OutputState}
}

// Configuration block for launch specification.
func (o ClusterMasterInstanceFleetOutput) LaunchSpecifications() pulumix.GPtrOutput[ClusterMasterInstanceFleetLaunchSpecifications, ClusterMasterInstanceFleetLaunchSpecificationsOutput] {
	value := pulumix.Apply[ClusterMasterInstanceFleet](o, func(v ClusterMasterInstanceFleet) *ClusterMasterInstanceFleetLaunchSpecifications {
		return v.LaunchSpecifications
	})
	return pulumix.GPtrOutput[ClusterMasterInstanceFleetLaunchSpecifications, ClusterMasterInstanceFleetLaunchSpecificationsOutput]{OutputState: value.OutputState}
}

// Friendly name given to the instance fleet.
func (o ClusterMasterInstanceFleetOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[ClusterMasterInstanceFleet](o, func(v ClusterMasterInstanceFleet) *string { return v.Name })
}

func (o ClusterMasterInstanceFleetOutput) ProvisionedOnDemandCapacity() pulumix.Output[*int] {
	return pulumix.Apply[ClusterMasterInstanceFleet](o, func(v ClusterMasterInstanceFleet) *int { return v.ProvisionedOnDemandCapacity })
}

func (o ClusterMasterInstanceFleetOutput) ProvisionedSpotCapacity() pulumix.Output[*int] {
	return pulumix.Apply[ClusterMasterInstanceFleet](o, func(v ClusterMasterInstanceFleet) *int { return v.ProvisionedSpotCapacity })
}

// Target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
func (o ClusterMasterInstanceFleetOutput) TargetOnDemandCapacity() pulumix.Output[*int] {
	return pulumix.Apply[ClusterMasterInstanceFleet](o, func(v ClusterMasterInstanceFleet) *int { return v.TargetOnDemandCapacity })
}

// Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
func (o ClusterMasterInstanceFleetOutput) TargetSpotCapacity() pulumix.Output[*int] {
	return pulumix.Apply[ClusterMasterInstanceFleet](o, func(v ClusterMasterInstanceFleet) *int { return v.TargetSpotCapacity })
}

type ClusterMasterInstanceFleetInstanceTypeConfig struct {
	// Bid price for each EC2 Spot instance type as defined by `instanceType`. Expressed in USD. If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
	BidPrice *string `pulumi:"bidPrice"`
	// Bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by `instanceType`. Expressed as a number (for example, 20 specifies 20%). If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
	BidPriceAsPercentageOfOnDemandPrice *float64 `pulumi:"bidPriceAsPercentageOfOnDemandPrice"`
	// Configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
	Configurations []ClusterMasterInstanceFleetInstanceTypeConfigConfiguration `pulumi:"configurations"`
	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EbsConfigs []ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig `pulumi:"ebsConfigs"`
	// EC2 instance type, such as m4.xlarge.
	InstanceType string `pulumi:"instanceType"`
	// Number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in `emr.InstanceFleet`.
	WeightedCapacity *int `pulumi:"weightedCapacity"`
}

type ClusterMasterInstanceFleetInstanceTypeConfigArgs struct {
	// Bid price for each EC2 Spot instance type as defined by `instanceType`. Expressed in USD. If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
	BidPrice pulumix.Input[*string] `pulumi:"bidPrice"`
	// Bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by `instanceType`. Expressed as a number (for example, 20 specifies 20%). If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
	BidPriceAsPercentageOfOnDemandPrice pulumix.Input[*float64] `pulumi:"bidPriceAsPercentageOfOnDemandPrice"`
	// Configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
	Configurations pulumix.Input[[]*ClusterMasterInstanceFleetInstanceTypeConfigConfigurationArgs] `pulumi:"configurations"`
	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EbsConfigs pulumix.Input[[]*ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigArgs] `pulumi:"ebsConfigs"`
	// EC2 instance type, such as m4.xlarge.
	InstanceType pulumix.Input[string] `pulumi:"instanceType"`
	// Number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in `emr.InstanceFleet`.
	WeightedCapacity pulumix.Input[*int] `pulumi:"weightedCapacity"`
}

func (ClusterMasterInstanceFleetInstanceTypeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceFleetInstanceTypeConfig)(nil)).Elem()
}

func (i ClusterMasterInstanceFleetInstanceTypeConfigArgs) ToClusterMasterInstanceFleetInstanceTypeConfigOutput() ClusterMasterInstanceFleetInstanceTypeConfigOutput {
	return i.ToClusterMasterInstanceFleetInstanceTypeConfigOutputWithContext(context.Background())
}

func (i ClusterMasterInstanceFleetInstanceTypeConfigArgs) ToClusterMasterInstanceFleetInstanceTypeConfigOutputWithContext(ctx context.Context) ClusterMasterInstanceFleetInstanceTypeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterInstanceFleetInstanceTypeConfigOutput)
}

func (i *ClusterMasterInstanceFleetInstanceTypeConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterMasterInstanceFleetInstanceTypeConfigArgs] {
	return pulumix.Val(i)
}

type ClusterMasterInstanceFleetInstanceTypeConfigOutput struct{ *pulumi.OutputState }

func (ClusterMasterInstanceFleetInstanceTypeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceFleetInstanceTypeConfig)(nil)).Elem()
}

func (o ClusterMasterInstanceFleetInstanceTypeConfigOutput) ToClusterMasterInstanceFleetInstanceTypeConfigOutput() ClusterMasterInstanceFleetInstanceTypeConfigOutput {
	return o
}

func (o ClusterMasterInstanceFleetInstanceTypeConfigOutput) ToClusterMasterInstanceFleetInstanceTypeConfigOutputWithContext(ctx context.Context) ClusterMasterInstanceFleetInstanceTypeConfigOutput {
	return o
}

func (o ClusterMasterInstanceFleetInstanceTypeConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterMasterInstanceFleetInstanceTypeConfig] {
	return pulumix.Output[ClusterMasterInstanceFleetInstanceTypeConfig]{
		OutputState: o.OutputState,
	}
}

// Bid price for each EC2 Spot instance type as defined by `instanceType`. Expressed in USD. If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
func (o ClusterMasterInstanceFleetInstanceTypeConfigOutput) BidPrice() pulumix.Output[*string] {
	return pulumix.Apply[ClusterMasterInstanceFleetInstanceTypeConfig](o, func(v ClusterMasterInstanceFleetInstanceTypeConfig) *string { return v.BidPrice })
}

// Bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by `instanceType`. Expressed as a number (for example, 20 specifies 20%). If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
func (o ClusterMasterInstanceFleetInstanceTypeConfigOutput) BidPriceAsPercentageOfOnDemandPrice() pulumix.Output[*float64] {
	return pulumix.Apply[ClusterMasterInstanceFleetInstanceTypeConfig](o, func(v ClusterMasterInstanceFleetInstanceTypeConfig) *float64 {
		return v.BidPriceAsPercentageOfOnDemandPrice
	})
}

// Configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
func (o ClusterMasterInstanceFleetInstanceTypeConfigOutput) Configurations() pulumix.GArrayOutput[ClusterMasterInstanceFleetInstanceTypeConfigConfiguration, ClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput] {
	value := pulumix.Apply[ClusterMasterInstanceFleetInstanceTypeConfig](o, func(v ClusterMasterInstanceFleetInstanceTypeConfig) []ClusterMasterInstanceFleetInstanceTypeConfigConfiguration {
		return v.Configurations
	})
	return pulumix.GArrayOutput[ClusterMasterInstanceFleetInstanceTypeConfigConfiguration, ClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
func (o ClusterMasterInstanceFleetInstanceTypeConfigOutput) EbsConfigs() pulumix.GArrayOutput[ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig, ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput] {
	value := pulumix.Apply[ClusterMasterInstanceFleetInstanceTypeConfig](o, func(v ClusterMasterInstanceFleetInstanceTypeConfig) []ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig {
		return v.EbsConfigs
	})
	return pulumix.GArrayOutput[ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig, ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput]{OutputState: value.OutputState}
}

// EC2 instance type, such as m4.xlarge.
func (o ClusterMasterInstanceFleetInstanceTypeConfigOutput) InstanceType() pulumix.Output[string] {
	return pulumix.Apply[ClusterMasterInstanceFleetInstanceTypeConfig](o, func(v ClusterMasterInstanceFleetInstanceTypeConfig) string { return v.InstanceType })
}

// Number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in `emr.InstanceFleet`.
func (o ClusterMasterInstanceFleetInstanceTypeConfigOutput) WeightedCapacity() pulumix.Output[*int] {
	return pulumix.Apply[ClusterMasterInstanceFleetInstanceTypeConfig](o, func(v ClusterMasterInstanceFleetInstanceTypeConfig) *int { return v.WeightedCapacity })
}

type ClusterMasterInstanceFleetInstanceTypeConfigConfiguration struct {
	// Classification within a configuration.
	Classification *string `pulumi:"classification"`
	// Map of properties specified within a configuration classification.
	Properties map[string]string `pulumi:"properties"`
}

type ClusterMasterInstanceFleetInstanceTypeConfigConfigurationArgs struct {
	// Classification within a configuration.
	Classification pulumix.Input[*string] `pulumi:"classification"`
	// Map of properties specified within a configuration classification.
	Properties pulumix.Input[map[string]string] `pulumi:"properties"`
}

func (ClusterMasterInstanceFleetInstanceTypeConfigConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceFleetInstanceTypeConfigConfiguration)(nil)).Elem()
}

func (i ClusterMasterInstanceFleetInstanceTypeConfigConfigurationArgs) ToClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput() ClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput {
	return i.ToClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutputWithContext(context.Background())
}

func (i ClusterMasterInstanceFleetInstanceTypeConfigConfigurationArgs) ToClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutputWithContext(ctx context.Context) ClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput)
}

func (i *ClusterMasterInstanceFleetInstanceTypeConfigConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterMasterInstanceFleetInstanceTypeConfigConfigurationArgs] {
	return pulumix.Val(i)
}

type ClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceFleetInstanceTypeConfigConfiguration)(nil)).Elem()
}

func (o ClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput) ToClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput() ClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput {
	return o
}

func (o ClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput) ToClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutputWithContext(ctx context.Context) ClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput {
	return o
}

func (o ClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterMasterInstanceFleetInstanceTypeConfigConfiguration] {
	return pulumix.Output[ClusterMasterInstanceFleetInstanceTypeConfigConfiguration]{
		OutputState: o.OutputState,
	}
}

// Classification within a configuration.
func (o ClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput) Classification() pulumix.Output[*string] {
	return pulumix.Apply[ClusterMasterInstanceFleetInstanceTypeConfigConfiguration](o, func(v ClusterMasterInstanceFleetInstanceTypeConfigConfiguration) *string { return v.Classification })
}

// Map of properties specified within a configuration classification.
func (o ClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput) Properties() pulumix.MapOutput[string] {
	value := pulumix.Apply[ClusterMasterInstanceFleetInstanceTypeConfigConfiguration](o, func(v ClusterMasterInstanceFleetInstanceTypeConfigConfiguration) map[string]string {
		return v.Properties
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig struct {
	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops *int `pulumi:"iops"`
	// Volume size, in gibibytes (GiB).
	Size int `pulumi:"size"`
	// Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
	Type string `pulumi:"type"`
	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance *int `pulumi:"volumesPerInstance"`
}

type ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigArgs struct {
	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// Volume size, in gibibytes (GiB).
	Size pulumix.Input[int] `pulumi:"size"`
	// Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
	Type pulumix.Input[string] `pulumi:"type"`
	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance pulumix.Input[*int] `pulumi:"volumesPerInstance"`
}

func (ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig)(nil)).Elem()
}

func (i ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigArgs) ToClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput() ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput {
	return i.ToClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutputWithContext(context.Background())
}

func (i ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigArgs) ToClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutputWithContext(ctx context.Context) ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput)
}

func (i *ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigArgs] {
	return pulumix.Val(i)
}

type ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput struct{ *pulumi.OutputState }

func (ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig)(nil)).Elem()
}

func (o ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput) ToClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput() ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput {
	return o
}

func (o ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput) ToClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutputWithContext(ctx context.Context) ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput {
	return o
}

func (o ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig] {
	return pulumix.Output[ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig]{
		OutputState: o.OutputState,
	}
}

// Number of I/O operations per second (IOPS) that the volume supports.
func (o ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig](o, func(v ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig) *int { return v.Iops })
}

// Volume size, in gibibytes (GiB).
func (o ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig](o, func(v ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig) int { return v.Size })
}

// Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
func (o ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig](o, func(v ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig) string { return v.Type })
}

// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
func (o ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput) VolumesPerInstance() pulumix.Output[*int] {
	return pulumix.Apply[ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig](o, func(v ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig) *int { return v.VolumesPerInstance })
}

type ClusterMasterInstanceFleetLaunchSpecifications struct {
	// Configuration block for on demand instances launch specifications.
	OnDemandSpecifications []ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecification `pulumi:"onDemandSpecifications"`
	// Configuration block for spot instances launch specifications.
	SpotSpecifications []ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification `pulumi:"spotSpecifications"`
}

type ClusterMasterInstanceFleetLaunchSpecificationsArgs struct {
	// Configuration block for on demand instances launch specifications.
	OnDemandSpecifications pulumix.Input[[]*ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationArgs] `pulumi:"onDemandSpecifications"`
	// Configuration block for spot instances launch specifications.
	SpotSpecifications pulumix.Input[[]*ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationArgs] `pulumi:"spotSpecifications"`
}

func (ClusterMasterInstanceFleetLaunchSpecificationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceFleetLaunchSpecifications)(nil)).Elem()
}

func (i ClusterMasterInstanceFleetLaunchSpecificationsArgs) ToClusterMasterInstanceFleetLaunchSpecificationsOutput() ClusterMasterInstanceFleetLaunchSpecificationsOutput {
	return i.ToClusterMasterInstanceFleetLaunchSpecificationsOutputWithContext(context.Background())
}

func (i ClusterMasterInstanceFleetLaunchSpecificationsArgs) ToClusterMasterInstanceFleetLaunchSpecificationsOutputWithContext(ctx context.Context) ClusterMasterInstanceFleetLaunchSpecificationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterInstanceFleetLaunchSpecificationsOutput)
}

func (i *ClusterMasterInstanceFleetLaunchSpecificationsArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterMasterInstanceFleetLaunchSpecificationsArgs] {
	return pulumix.Val(i)
}

type ClusterMasterInstanceFleetLaunchSpecificationsOutput struct{ *pulumi.OutputState }

func (ClusterMasterInstanceFleetLaunchSpecificationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceFleetLaunchSpecifications)(nil)).Elem()
}

func (o ClusterMasterInstanceFleetLaunchSpecificationsOutput) ToClusterMasterInstanceFleetLaunchSpecificationsOutput() ClusterMasterInstanceFleetLaunchSpecificationsOutput {
	return o
}

func (o ClusterMasterInstanceFleetLaunchSpecificationsOutput) ToClusterMasterInstanceFleetLaunchSpecificationsOutputWithContext(ctx context.Context) ClusterMasterInstanceFleetLaunchSpecificationsOutput {
	return o
}

func (o ClusterMasterInstanceFleetLaunchSpecificationsOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterMasterInstanceFleetLaunchSpecifications] {
	return pulumix.Output[ClusterMasterInstanceFleetLaunchSpecifications]{
		OutputState: o.OutputState,
	}
}

// Configuration block for on demand instances launch specifications.
func (o ClusterMasterInstanceFleetLaunchSpecificationsOutput) OnDemandSpecifications() pulumix.GArrayOutput[ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecification, ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput] {
	value := pulumix.Apply[ClusterMasterInstanceFleetLaunchSpecifications](o, func(v ClusterMasterInstanceFleetLaunchSpecifications) []ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecification {
		return v.OnDemandSpecifications
	})
	return pulumix.GArrayOutput[ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecification, ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput]{OutputState: value.OutputState}
}

// Configuration block for spot instances launch specifications.
func (o ClusterMasterInstanceFleetLaunchSpecificationsOutput) SpotSpecifications() pulumix.GArrayOutput[ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification, ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput] {
	value := pulumix.Apply[ClusterMasterInstanceFleetLaunchSpecifications](o, func(v ClusterMasterInstanceFleetLaunchSpecifications) []ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification {
		return v.SpotSpecifications
	})
	return pulumix.GArrayOutput[ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification, ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput]{OutputState: value.OutputState}
}

type ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecification struct {
	// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is `lowest-price` (the default), which launches the lowest price first.
	AllocationStrategy string `pulumi:"allocationStrategy"`
}

type ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationArgs struct {
	// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is `lowest-price` (the default), which launches the lowest price first.
	AllocationStrategy pulumix.Input[string] `pulumi:"allocationStrategy"`
}

func (ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecification)(nil)).Elem()
}

func (i ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationArgs) ToClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput() ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput {
	return i.ToClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputWithContext(context.Background())
}

func (i ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationArgs) ToClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputWithContext(ctx context.Context) ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput)
}

func (i *ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationArgs] {
	return pulumix.Val(i)
}

type ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput struct{ *pulumi.OutputState }

func (ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecification)(nil)).Elem()
}

func (o ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput) ToClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput() ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput {
	return o
}

func (o ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput) ToClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputWithContext(ctx context.Context) ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput {
	return o
}

func (o ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecification] {
	return pulumix.Output[ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecification]{
		OutputState: o.OutputState,
	}
}

// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is `lowest-price` (the default), which launches the lowest price first.
func (o ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput) AllocationStrategy() pulumix.Output[string] {
	return pulumix.Apply[ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecification](o, func(v ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecification) string {
		return v.AllocationStrategy
	})
}

type ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification struct {
	// Specifies the strategy to use in launching Spot instance fleets. Valid values include `capacity-optimized`, `diversified`, `lowest-price`, `price-capacity-optimized`. See the [AWS documentation](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-fleet.html#emr-instance-fleet-allocation-strategy) for details on each strategy type.
	AllocationStrategy string `pulumi:"allocationStrategy"`
	// Defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	BlockDurationMinutes *int `pulumi:"blockDurationMinutes"`
	// Action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are `TERMINATE_CLUSTER` and `SWITCH_TO_ON_DEMAND`. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
	TimeoutAction string `pulumi:"timeoutAction"`
	// Spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
	TimeoutDurationMinutes int `pulumi:"timeoutDurationMinutes"`
}

type ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationArgs struct {
	// Specifies the strategy to use in launching Spot instance fleets. Valid values include `capacity-optimized`, `diversified`, `lowest-price`, `price-capacity-optimized`. See the [AWS documentation](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-fleet.html#emr-instance-fleet-allocation-strategy) for details on each strategy type.
	AllocationStrategy pulumix.Input[string] `pulumi:"allocationStrategy"`
	// Defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	BlockDurationMinutes pulumix.Input[*int] `pulumi:"blockDurationMinutes"`
	// Action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are `TERMINATE_CLUSTER` and `SWITCH_TO_ON_DEMAND`. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
	TimeoutAction pulumix.Input[string] `pulumi:"timeoutAction"`
	// Spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
	TimeoutDurationMinutes pulumix.Input[int] `pulumi:"timeoutDurationMinutes"`
}

func (ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification)(nil)).Elem()
}

func (i ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationArgs) ToClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput() ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput {
	return i.ToClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutputWithContext(context.Background())
}

func (i ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationArgs) ToClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutputWithContext(ctx context.Context) ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput)
}

func (i *ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationArgs] {
	return pulumix.Val(i)
}

type ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput struct{ *pulumi.OutputState }

func (ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification)(nil)).Elem()
}

func (o ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput) ToClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput() ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput {
	return o
}

func (o ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput) ToClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutputWithContext(ctx context.Context) ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput {
	return o
}

func (o ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification] {
	return pulumix.Output[ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification]{
		OutputState: o.OutputState,
	}
}

// Specifies the strategy to use in launching Spot instance fleets. Valid values include `capacity-optimized`, `diversified`, `lowest-price`, `price-capacity-optimized`. See the [AWS documentation](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-fleet.html#emr-instance-fleet-allocation-strategy) for details on each strategy type.
func (o ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput) AllocationStrategy() pulumix.Output[string] {
	return pulumix.Apply[ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification](o, func(v ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification) string {
		return v.AllocationStrategy
	})
}

// Defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
func (o ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput) BlockDurationMinutes() pulumix.Output[*int] {
	return pulumix.Apply[ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification](o, func(v ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification) *int {
		return v.BlockDurationMinutes
	})
}

// Action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are `TERMINATE_CLUSTER` and `SWITCH_TO_ON_DEMAND`. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
func (o ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput) TimeoutAction() pulumix.Output[string] {
	return pulumix.Apply[ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification](o, func(v ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification) string { return v.TimeoutAction })
}

// Spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
func (o ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput) TimeoutDurationMinutes() pulumix.Output[int] {
	return pulumix.Apply[ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification](o, func(v ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification) int {
		return v.TimeoutDurationMinutes
	})
}

type ClusterMasterInstanceGroup struct {
	// Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	BidPrice *string `pulumi:"bidPrice"`
	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EbsConfigs []ClusterMasterInstanceGroupEbsConfig `pulumi:"ebsConfigs"`
	// ID of the cluster.
	Id *string `pulumi:"id"`
	// Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `coreInstanceGroup` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have map public IP on launch enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `terminationProtection = false` configuration applied before destroying this resource.
	InstanceCount *int `pulumi:"instanceCount"`
	// EC2 instance type for all instances in the instance group.
	InstanceType string `pulumi:"instanceType"`
	// Friendly name given to the instance group.
	Name *string `pulumi:"name"`
}

type ClusterMasterInstanceGroupArgs struct {
	// Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	BidPrice pulumix.Input[*string] `pulumi:"bidPrice"`
	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EbsConfigs pulumix.Input[[]*ClusterMasterInstanceGroupEbsConfigArgs] `pulumi:"ebsConfigs"`
	// ID of the cluster.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `coreInstanceGroup` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have map public IP on launch enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `terminationProtection = false` configuration applied before destroying this resource.
	InstanceCount pulumix.Input[*int] `pulumi:"instanceCount"`
	// EC2 instance type for all instances in the instance group.
	InstanceType pulumix.Input[string] `pulumi:"instanceType"`
	// Friendly name given to the instance group.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (ClusterMasterInstanceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceGroup)(nil)).Elem()
}

func (i ClusterMasterInstanceGroupArgs) ToClusterMasterInstanceGroupOutput() ClusterMasterInstanceGroupOutput {
	return i.ToClusterMasterInstanceGroupOutputWithContext(context.Background())
}

func (i ClusterMasterInstanceGroupArgs) ToClusterMasterInstanceGroupOutputWithContext(ctx context.Context) ClusterMasterInstanceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterInstanceGroupOutput)
}

func (i *ClusterMasterInstanceGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterMasterInstanceGroupArgs] {
	return pulumix.Val(i)
}

type ClusterMasterInstanceGroupOutput struct{ *pulumi.OutputState }

func (ClusterMasterInstanceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceGroup)(nil)).Elem()
}

func (o ClusterMasterInstanceGroupOutput) ToClusterMasterInstanceGroupOutput() ClusterMasterInstanceGroupOutput {
	return o
}

func (o ClusterMasterInstanceGroupOutput) ToClusterMasterInstanceGroupOutputWithContext(ctx context.Context) ClusterMasterInstanceGroupOutput {
	return o
}

func (o ClusterMasterInstanceGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterMasterInstanceGroup] {
	return pulumix.Output[ClusterMasterInstanceGroup]{
		OutputState: o.OutputState,
	}
}

// Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
func (o ClusterMasterInstanceGroupOutput) BidPrice() pulumix.Output[*string] {
	return pulumix.Apply[ClusterMasterInstanceGroup](o, func(v ClusterMasterInstanceGroup) *string { return v.BidPrice })
}

// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
func (o ClusterMasterInstanceGroupOutput) EbsConfigs() pulumix.GArrayOutput[ClusterMasterInstanceGroupEbsConfig, ClusterMasterInstanceGroupEbsConfigOutput] {
	value := pulumix.Apply[ClusterMasterInstanceGroup](o, func(v ClusterMasterInstanceGroup) []ClusterMasterInstanceGroupEbsConfig { return v.EbsConfigs })
	return pulumix.GArrayOutput[ClusterMasterInstanceGroupEbsConfig, ClusterMasterInstanceGroupEbsConfigOutput]{OutputState: value.OutputState}
}

// ID of the cluster.
func (o ClusterMasterInstanceGroupOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[ClusterMasterInstanceGroup](o, func(v ClusterMasterInstanceGroup) *string { return v.Id })
}

// Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `coreInstanceGroup` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have map public IP on launch enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `terminationProtection = false` configuration applied before destroying this resource.
func (o ClusterMasterInstanceGroupOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[ClusterMasterInstanceGroup](o, func(v ClusterMasterInstanceGroup) *int { return v.InstanceCount })
}

// EC2 instance type for all instances in the instance group.
func (o ClusterMasterInstanceGroupOutput) InstanceType() pulumix.Output[string] {
	return pulumix.Apply[ClusterMasterInstanceGroup](o, func(v ClusterMasterInstanceGroup) string { return v.InstanceType })
}

// Friendly name given to the instance group.
func (o ClusterMasterInstanceGroupOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[ClusterMasterInstanceGroup](o, func(v ClusterMasterInstanceGroup) *string { return v.Name })
}

type ClusterMasterInstanceGroupEbsConfig struct {
	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops *int `pulumi:"iops"`
	// Volume size, in gibibytes (GiB).
	Size int `pulumi:"size"`
	// The throughput, in mebibyte per second (MiB/s).
	Throughput *int `pulumi:"throughput"`
	// Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
	Type string `pulumi:"type"`
	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance *int `pulumi:"volumesPerInstance"`
}

type ClusterMasterInstanceGroupEbsConfigArgs struct {
	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// Volume size, in gibibytes (GiB).
	Size pulumix.Input[int] `pulumi:"size"`
	// The throughput, in mebibyte per second (MiB/s).
	Throughput pulumix.Input[*int] `pulumi:"throughput"`
	// Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
	Type pulumix.Input[string] `pulumi:"type"`
	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance pulumix.Input[*int] `pulumi:"volumesPerInstance"`
}

func (ClusterMasterInstanceGroupEbsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceGroupEbsConfig)(nil)).Elem()
}

func (i ClusterMasterInstanceGroupEbsConfigArgs) ToClusterMasterInstanceGroupEbsConfigOutput() ClusterMasterInstanceGroupEbsConfigOutput {
	return i.ToClusterMasterInstanceGroupEbsConfigOutputWithContext(context.Background())
}

func (i ClusterMasterInstanceGroupEbsConfigArgs) ToClusterMasterInstanceGroupEbsConfigOutputWithContext(ctx context.Context) ClusterMasterInstanceGroupEbsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterInstanceGroupEbsConfigOutput)
}

func (i *ClusterMasterInstanceGroupEbsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterMasterInstanceGroupEbsConfigArgs] {
	return pulumix.Val(i)
}

type ClusterMasterInstanceGroupEbsConfigOutput struct{ *pulumi.OutputState }

func (ClusterMasterInstanceGroupEbsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterInstanceGroupEbsConfig)(nil)).Elem()
}

func (o ClusterMasterInstanceGroupEbsConfigOutput) ToClusterMasterInstanceGroupEbsConfigOutput() ClusterMasterInstanceGroupEbsConfigOutput {
	return o
}

func (o ClusterMasterInstanceGroupEbsConfigOutput) ToClusterMasterInstanceGroupEbsConfigOutputWithContext(ctx context.Context) ClusterMasterInstanceGroupEbsConfigOutput {
	return o
}

func (o ClusterMasterInstanceGroupEbsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterMasterInstanceGroupEbsConfig] {
	return pulumix.Output[ClusterMasterInstanceGroupEbsConfig]{
		OutputState: o.OutputState,
	}
}

// Number of I/O operations per second (IOPS) that the volume supports.
func (o ClusterMasterInstanceGroupEbsConfigOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[ClusterMasterInstanceGroupEbsConfig](o, func(v ClusterMasterInstanceGroupEbsConfig) *int { return v.Iops })
}

// Volume size, in gibibytes (GiB).
func (o ClusterMasterInstanceGroupEbsConfigOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[ClusterMasterInstanceGroupEbsConfig](o, func(v ClusterMasterInstanceGroupEbsConfig) int { return v.Size })
}

// The throughput, in mebibyte per second (MiB/s).
func (o ClusterMasterInstanceGroupEbsConfigOutput) Throughput() pulumix.Output[*int] {
	return pulumix.Apply[ClusterMasterInstanceGroupEbsConfig](o, func(v ClusterMasterInstanceGroupEbsConfig) *int { return v.Throughput })
}

// Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
func (o ClusterMasterInstanceGroupEbsConfigOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ClusterMasterInstanceGroupEbsConfig](o, func(v ClusterMasterInstanceGroupEbsConfig) string { return v.Type })
}

// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
func (o ClusterMasterInstanceGroupEbsConfigOutput) VolumesPerInstance() pulumix.Output[*int] {
	return pulumix.Apply[ClusterMasterInstanceGroupEbsConfig](o, func(v ClusterMasterInstanceGroupEbsConfig) *int { return v.VolumesPerInstance })
}

type ClusterPlacementGroupConfig struct {
	// Role of the instance in the cluster. Valid Values: `MASTER`, `CORE`, `TASK`.
	InstanceRole string `pulumi:"instanceRole"`
	// EC2 Placement Group strategy associated with instance role. Valid Values: `SPREAD`, `PARTITION`, `CLUSTER`, `NONE`.
	PlacementStrategy *string `pulumi:"placementStrategy"`
}

type ClusterPlacementGroupConfigArgs struct {
	// Role of the instance in the cluster. Valid Values: `MASTER`, `CORE`, `TASK`.
	InstanceRole pulumix.Input[string] `pulumi:"instanceRole"`
	// EC2 Placement Group strategy associated with instance role. Valid Values: `SPREAD`, `PARTITION`, `CLUSTER`, `NONE`.
	PlacementStrategy pulumix.Input[*string] `pulumi:"placementStrategy"`
}

func (ClusterPlacementGroupConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPlacementGroupConfig)(nil)).Elem()
}

func (i ClusterPlacementGroupConfigArgs) ToClusterPlacementGroupConfigOutput() ClusterPlacementGroupConfigOutput {
	return i.ToClusterPlacementGroupConfigOutputWithContext(context.Background())
}

func (i ClusterPlacementGroupConfigArgs) ToClusterPlacementGroupConfigOutputWithContext(ctx context.Context) ClusterPlacementGroupConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPlacementGroupConfigOutput)
}

func (i *ClusterPlacementGroupConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterPlacementGroupConfigArgs] {
	return pulumix.Val(i)
}

type ClusterPlacementGroupConfigOutput struct{ *pulumi.OutputState }

func (ClusterPlacementGroupConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPlacementGroupConfig)(nil)).Elem()
}

func (o ClusterPlacementGroupConfigOutput) ToClusterPlacementGroupConfigOutput() ClusterPlacementGroupConfigOutput {
	return o
}

func (o ClusterPlacementGroupConfigOutput) ToClusterPlacementGroupConfigOutputWithContext(ctx context.Context) ClusterPlacementGroupConfigOutput {
	return o
}

func (o ClusterPlacementGroupConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterPlacementGroupConfig] {
	return pulumix.Output[ClusterPlacementGroupConfig]{
		OutputState: o.OutputState,
	}
}

// Role of the instance in the cluster. Valid Values: `MASTER`, `CORE`, `TASK`.
func (o ClusterPlacementGroupConfigOutput) InstanceRole() pulumix.Output[string] {
	return pulumix.Apply[ClusterPlacementGroupConfig](o, func(v ClusterPlacementGroupConfig) string { return v.InstanceRole })
}

// EC2 Placement Group strategy associated with instance role. Valid Values: `SPREAD`, `PARTITION`, `CLUSTER`, `NONE`.
func (o ClusterPlacementGroupConfigOutput) PlacementStrategy() pulumix.Output[*string] {
	return pulumix.Apply[ClusterPlacementGroupConfig](o, func(v ClusterPlacementGroupConfig) *string { return v.PlacementStrategy })
}

type ClusterStep struct {
	// Action to take if the step fails. Valid values: `TERMINATE_JOB_FLOW`, `TERMINATE_CLUSTER`, `CANCEL_AND_WAIT`, and `CONTINUE`
	ActionOnFailure string `pulumi:"actionOnFailure"`
	// JAR file used for the step. See below.
	HadoopJarStep ClusterStepHadoopJarStep `pulumi:"hadoopJarStep"`
	// Name of the step.
	Name string `pulumi:"name"`
}

type ClusterStepArgs struct {
	// Action to take if the step fails. Valid values: `TERMINATE_JOB_FLOW`, `TERMINATE_CLUSTER`, `CANCEL_AND_WAIT`, and `CONTINUE`
	ActionOnFailure pulumix.Input[string] `pulumi:"actionOnFailure"`
	// JAR file used for the step. See below.
	HadoopJarStep pulumix.Input[*ClusterStepHadoopJarStepArgs] `pulumi:"hadoopJarStep"`
	// Name of the step.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (ClusterStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStep)(nil)).Elem()
}

func (i ClusterStepArgs) ToClusterStepOutput() ClusterStepOutput {
	return i.ToClusterStepOutputWithContext(context.Background())
}

func (i ClusterStepArgs) ToClusterStepOutputWithContext(ctx context.Context) ClusterStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterStepOutput)
}

func (i *ClusterStepArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterStepArgs] {
	return pulumix.Val(i)
}

type ClusterStepOutput struct{ *pulumi.OutputState }

func (ClusterStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStep)(nil)).Elem()
}

func (o ClusterStepOutput) ToClusterStepOutput() ClusterStepOutput {
	return o
}

func (o ClusterStepOutput) ToClusterStepOutputWithContext(ctx context.Context) ClusterStepOutput {
	return o
}

func (o ClusterStepOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterStep] {
	return pulumix.Output[ClusterStep]{
		OutputState: o.OutputState,
	}
}

// Action to take if the step fails. Valid values: `TERMINATE_JOB_FLOW`, `TERMINATE_CLUSTER`, `CANCEL_AND_WAIT`, and `CONTINUE`
func (o ClusterStepOutput) ActionOnFailure() pulumix.Output[string] {
	return pulumix.Apply[ClusterStep](o, func(v ClusterStep) string { return v.ActionOnFailure })
}

// JAR file used for the step. See below.
func (o ClusterStepOutput) HadoopJarStep() pulumix.GPtrOutput[ClusterStepHadoopJarStep, ClusterStepHadoopJarStepOutput] {
	value := pulumix.Apply[ClusterStep](o, func(v ClusterStep) ClusterStepHadoopJarStep { return v.HadoopJarStep })
	return pulumix.GPtrOutput[ClusterStepHadoopJarStep, ClusterStepHadoopJarStepOutput]{OutputState: value.OutputState}
}

// Name of the step.
func (o ClusterStepOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ClusterStep](o, func(v ClusterStep) string { return v.Name })
}

type ClusterStepHadoopJarStep struct {
	// List of command line arguments passed to the JAR file's main function when executed.
	Args []string `pulumi:"args"`
	// Path to a JAR file run during the step.
	Jar string `pulumi:"jar"`
	// Name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
	MainClass *string `pulumi:"mainClass"`
	// Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
	Properties map[string]string `pulumi:"properties"`
}

type ClusterStepHadoopJarStepArgs struct {
	// List of command line arguments passed to the JAR file's main function when executed.
	Args pulumix.Input[[]string] `pulumi:"args"`
	// Path to a JAR file run during the step.
	Jar pulumix.Input[string] `pulumi:"jar"`
	// Name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
	MainClass pulumix.Input[*string] `pulumi:"mainClass"`
	// Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
	Properties pulumix.Input[map[string]string] `pulumi:"properties"`
}

func (ClusterStepHadoopJarStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStepHadoopJarStep)(nil)).Elem()
}

func (i ClusterStepHadoopJarStepArgs) ToClusterStepHadoopJarStepOutput() ClusterStepHadoopJarStepOutput {
	return i.ToClusterStepHadoopJarStepOutputWithContext(context.Background())
}

func (i ClusterStepHadoopJarStepArgs) ToClusterStepHadoopJarStepOutputWithContext(ctx context.Context) ClusterStepHadoopJarStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterStepHadoopJarStepOutput)
}

func (i *ClusterStepHadoopJarStepArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterStepHadoopJarStepArgs] {
	return pulumix.Val(i)
}

type ClusterStepHadoopJarStepOutput struct{ *pulumi.OutputState }

func (ClusterStepHadoopJarStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStepHadoopJarStep)(nil)).Elem()
}

func (o ClusterStepHadoopJarStepOutput) ToClusterStepHadoopJarStepOutput() ClusterStepHadoopJarStepOutput {
	return o
}

func (o ClusterStepHadoopJarStepOutput) ToClusterStepHadoopJarStepOutputWithContext(ctx context.Context) ClusterStepHadoopJarStepOutput {
	return o
}

func (o ClusterStepHadoopJarStepOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterStepHadoopJarStep] {
	return pulumix.Output[ClusterStepHadoopJarStep]{
		OutputState: o.OutputState,
	}
}

// List of command line arguments passed to the JAR file's main function when executed.
func (o ClusterStepHadoopJarStepOutput) Args() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClusterStepHadoopJarStep](o, func(v ClusterStepHadoopJarStep) []string { return v.Args })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Path to a JAR file run during the step.
func (o ClusterStepHadoopJarStepOutput) Jar() pulumix.Output[string] {
	return pulumix.Apply[ClusterStepHadoopJarStep](o, func(v ClusterStepHadoopJarStep) string { return v.Jar })
}

// Name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
func (o ClusterStepHadoopJarStepOutput) MainClass() pulumix.Output[*string] {
	return pulumix.Apply[ClusterStepHadoopJarStep](o, func(v ClusterStepHadoopJarStep) *string { return v.MainClass })
}

// Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
func (o ClusterStepHadoopJarStepOutput) Properties() pulumix.MapOutput[string] {
	value := pulumix.Apply[ClusterStepHadoopJarStep](o, func(v ClusterStepHadoopJarStep) map[string]string { return v.Properties })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type InstanceFleetInstanceTypeConfig struct {
	// The bid price for each EC2 Spot instance type as defined by `instanceType`. Expressed in USD. If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
	BidPrice *string `pulumi:"bidPrice"`
	// The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by `instanceType`. Expressed as a number (for example, 20 specifies 20%). If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
	BidPriceAsPercentageOfOnDemandPrice *float64 `pulumi:"bidPriceAsPercentageOfOnDemandPrice"`
	// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
	Configurations []InstanceFleetInstanceTypeConfigConfiguration `pulumi:"configurations"`
	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EbsConfigs []InstanceFleetInstanceTypeConfigEbsConfig `pulumi:"ebsConfigs"`
	// An EC2 instance type, such as m4.xlarge.
	InstanceType string `pulumi:"instanceType"`
	// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in `emr.InstanceFleet`.
	WeightedCapacity *int `pulumi:"weightedCapacity"`
}

type InstanceFleetInstanceTypeConfigArgs struct {
	// The bid price for each EC2 Spot instance type as defined by `instanceType`. Expressed in USD. If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
	BidPrice pulumix.Input[*string] `pulumi:"bidPrice"`
	// The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by `instanceType`. Expressed as a number (for example, 20 specifies 20%). If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
	BidPriceAsPercentageOfOnDemandPrice pulumix.Input[*float64] `pulumi:"bidPriceAsPercentageOfOnDemandPrice"`
	// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
	Configurations pulumix.Input[[]*InstanceFleetInstanceTypeConfigConfigurationArgs] `pulumi:"configurations"`
	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EbsConfigs pulumix.Input[[]*InstanceFleetInstanceTypeConfigEbsConfigArgs] `pulumi:"ebsConfigs"`
	// An EC2 instance type, such as m4.xlarge.
	InstanceType pulumix.Input[string] `pulumi:"instanceType"`
	// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in `emr.InstanceFleet`.
	WeightedCapacity pulumix.Input[*int] `pulumi:"weightedCapacity"`
}

func (InstanceFleetInstanceTypeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFleetInstanceTypeConfig)(nil)).Elem()
}

func (i InstanceFleetInstanceTypeConfigArgs) ToInstanceFleetInstanceTypeConfigOutput() InstanceFleetInstanceTypeConfigOutput {
	return i.ToInstanceFleetInstanceTypeConfigOutputWithContext(context.Background())
}

func (i InstanceFleetInstanceTypeConfigArgs) ToInstanceFleetInstanceTypeConfigOutputWithContext(ctx context.Context) InstanceFleetInstanceTypeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFleetInstanceTypeConfigOutput)
}

func (i *InstanceFleetInstanceTypeConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceFleetInstanceTypeConfigArgs] {
	return pulumix.Val(i)
}

type InstanceFleetInstanceTypeConfigOutput struct{ *pulumi.OutputState }

func (InstanceFleetInstanceTypeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFleetInstanceTypeConfig)(nil)).Elem()
}

func (o InstanceFleetInstanceTypeConfigOutput) ToInstanceFleetInstanceTypeConfigOutput() InstanceFleetInstanceTypeConfigOutput {
	return o
}

func (o InstanceFleetInstanceTypeConfigOutput) ToInstanceFleetInstanceTypeConfigOutputWithContext(ctx context.Context) InstanceFleetInstanceTypeConfigOutput {
	return o
}

func (o InstanceFleetInstanceTypeConfigOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceFleetInstanceTypeConfig] {
	return pulumix.Output[InstanceFleetInstanceTypeConfig]{
		OutputState: o.OutputState,
	}
}

// The bid price for each EC2 Spot instance type as defined by `instanceType`. Expressed in USD. If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
func (o InstanceFleetInstanceTypeConfigOutput) BidPrice() pulumix.Output[*string] {
	return pulumix.Apply[InstanceFleetInstanceTypeConfig](o, func(v InstanceFleetInstanceTypeConfig) *string { return v.BidPrice })
}

// The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by `instanceType`. Expressed as a number (for example, 20 specifies 20%). If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
func (o InstanceFleetInstanceTypeConfigOutput) BidPriceAsPercentageOfOnDemandPrice() pulumix.Output[*float64] {
	return pulumix.Apply[InstanceFleetInstanceTypeConfig](o, func(v InstanceFleetInstanceTypeConfig) *float64 { return v.BidPriceAsPercentageOfOnDemandPrice })
}

// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
func (o InstanceFleetInstanceTypeConfigOutput) Configurations() pulumix.GArrayOutput[InstanceFleetInstanceTypeConfigConfiguration, InstanceFleetInstanceTypeConfigConfigurationOutput] {
	value := pulumix.Apply[InstanceFleetInstanceTypeConfig](o, func(v InstanceFleetInstanceTypeConfig) []InstanceFleetInstanceTypeConfigConfiguration {
		return v.Configurations
	})
	return pulumix.GArrayOutput[InstanceFleetInstanceTypeConfigConfiguration, InstanceFleetInstanceTypeConfigConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
func (o InstanceFleetInstanceTypeConfigOutput) EbsConfigs() pulumix.GArrayOutput[InstanceFleetInstanceTypeConfigEbsConfig, InstanceFleetInstanceTypeConfigEbsConfigOutput] {
	value := pulumix.Apply[InstanceFleetInstanceTypeConfig](o, func(v InstanceFleetInstanceTypeConfig) []InstanceFleetInstanceTypeConfigEbsConfig {
		return v.EbsConfigs
	})
	return pulumix.GArrayOutput[InstanceFleetInstanceTypeConfigEbsConfig, InstanceFleetInstanceTypeConfigEbsConfigOutput]{OutputState: value.OutputState}
}

// An EC2 instance type, such as m4.xlarge.
func (o InstanceFleetInstanceTypeConfigOutput) InstanceType() pulumix.Output[string] {
	return pulumix.Apply[InstanceFleetInstanceTypeConfig](o, func(v InstanceFleetInstanceTypeConfig) string { return v.InstanceType })
}

// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in `emr.InstanceFleet`.
func (o InstanceFleetInstanceTypeConfigOutput) WeightedCapacity() pulumix.Output[*int] {
	return pulumix.Apply[InstanceFleetInstanceTypeConfig](o, func(v InstanceFleetInstanceTypeConfig) *int { return v.WeightedCapacity })
}

type InstanceFleetInstanceTypeConfigConfiguration struct {
	// The classification within a configuration.
	Classification *string `pulumi:"classification"`
	// A map of properties specified within a configuration classification
	Properties map[string]string `pulumi:"properties"`
}

type InstanceFleetInstanceTypeConfigConfigurationArgs struct {
	// The classification within a configuration.
	Classification pulumix.Input[*string] `pulumi:"classification"`
	// A map of properties specified within a configuration classification
	Properties pulumix.Input[map[string]string] `pulumi:"properties"`
}

func (InstanceFleetInstanceTypeConfigConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFleetInstanceTypeConfigConfiguration)(nil)).Elem()
}

func (i InstanceFleetInstanceTypeConfigConfigurationArgs) ToInstanceFleetInstanceTypeConfigConfigurationOutput() InstanceFleetInstanceTypeConfigConfigurationOutput {
	return i.ToInstanceFleetInstanceTypeConfigConfigurationOutputWithContext(context.Background())
}

func (i InstanceFleetInstanceTypeConfigConfigurationArgs) ToInstanceFleetInstanceTypeConfigConfigurationOutputWithContext(ctx context.Context) InstanceFleetInstanceTypeConfigConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFleetInstanceTypeConfigConfigurationOutput)
}

func (i *InstanceFleetInstanceTypeConfigConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceFleetInstanceTypeConfigConfigurationArgs] {
	return pulumix.Val(i)
}

type InstanceFleetInstanceTypeConfigConfigurationOutput struct{ *pulumi.OutputState }

func (InstanceFleetInstanceTypeConfigConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFleetInstanceTypeConfigConfiguration)(nil)).Elem()
}

func (o InstanceFleetInstanceTypeConfigConfigurationOutput) ToInstanceFleetInstanceTypeConfigConfigurationOutput() InstanceFleetInstanceTypeConfigConfigurationOutput {
	return o
}

func (o InstanceFleetInstanceTypeConfigConfigurationOutput) ToInstanceFleetInstanceTypeConfigConfigurationOutputWithContext(ctx context.Context) InstanceFleetInstanceTypeConfigConfigurationOutput {
	return o
}

func (o InstanceFleetInstanceTypeConfigConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceFleetInstanceTypeConfigConfiguration] {
	return pulumix.Output[InstanceFleetInstanceTypeConfigConfiguration]{
		OutputState: o.OutputState,
	}
}

// The classification within a configuration.
func (o InstanceFleetInstanceTypeConfigConfigurationOutput) Classification() pulumix.Output[*string] {
	return pulumix.Apply[InstanceFleetInstanceTypeConfigConfiguration](o, func(v InstanceFleetInstanceTypeConfigConfiguration) *string { return v.Classification })
}

// A map of properties specified within a configuration classification
func (o InstanceFleetInstanceTypeConfigConfigurationOutput) Properties() pulumix.MapOutput[string] {
	value := pulumix.Apply[InstanceFleetInstanceTypeConfigConfiguration](o, func(v InstanceFleetInstanceTypeConfigConfiguration) map[string]string { return v.Properties })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type InstanceFleetInstanceTypeConfigEbsConfig struct {
	// The number of I/O operations per second (IOPS) that the volume supports
	Iops *int `pulumi:"iops"`
	// The volume size, in gibibytes (GiB).
	Size int `pulumi:"size"`
	// The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
	Type string `pulumi:"type"`
	// The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
	VolumesPerInstance *int `pulumi:"volumesPerInstance"`
}

type InstanceFleetInstanceTypeConfigEbsConfigArgs struct {
	// The number of I/O operations per second (IOPS) that the volume supports
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// The volume size, in gibibytes (GiB).
	Size pulumix.Input[int] `pulumi:"size"`
	// The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
	Type pulumix.Input[string] `pulumi:"type"`
	// The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
	VolumesPerInstance pulumix.Input[*int] `pulumi:"volumesPerInstance"`
}

func (InstanceFleetInstanceTypeConfigEbsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFleetInstanceTypeConfigEbsConfig)(nil)).Elem()
}

func (i InstanceFleetInstanceTypeConfigEbsConfigArgs) ToInstanceFleetInstanceTypeConfigEbsConfigOutput() InstanceFleetInstanceTypeConfigEbsConfigOutput {
	return i.ToInstanceFleetInstanceTypeConfigEbsConfigOutputWithContext(context.Background())
}

func (i InstanceFleetInstanceTypeConfigEbsConfigArgs) ToInstanceFleetInstanceTypeConfigEbsConfigOutputWithContext(ctx context.Context) InstanceFleetInstanceTypeConfigEbsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFleetInstanceTypeConfigEbsConfigOutput)
}

func (i *InstanceFleetInstanceTypeConfigEbsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceFleetInstanceTypeConfigEbsConfigArgs] {
	return pulumix.Val(i)
}

type InstanceFleetInstanceTypeConfigEbsConfigOutput struct{ *pulumi.OutputState }

func (InstanceFleetInstanceTypeConfigEbsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFleetInstanceTypeConfigEbsConfig)(nil)).Elem()
}

func (o InstanceFleetInstanceTypeConfigEbsConfigOutput) ToInstanceFleetInstanceTypeConfigEbsConfigOutput() InstanceFleetInstanceTypeConfigEbsConfigOutput {
	return o
}

func (o InstanceFleetInstanceTypeConfigEbsConfigOutput) ToInstanceFleetInstanceTypeConfigEbsConfigOutputWithContext(ctx context.Context) InstanceFleetInstanceTypeConfigEbsConfigOutput {
	return o
}

func (o InstanceFleetInstanceTypeConfigEbsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceFleetInstanceTypeConfigEbsConfig] {
	return pulumix.Output[InstanceFleetInstanceTypeConfigEbsConfig]{
		OutputState: o.OutputState,
	}
}

// The number of I/O operations per second (IOPS) that the volume supports
func (o InstanceFleetInstanceTypeConfigEbsConfigOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[InstanceFleetInstanceTypeConfigEbsConfig](o, func(v InstanceFleetInstanceTypeConfigEbsConfig) *int { return v.Iops })
}

// The volume size, in gibibytes (GiB).
func (o InstanceFleetInstanceTypeConfigEbsConfigOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[InstanceFleetInstanceTypeConfigEbsConfig](o, func(v InstanceFleetInstanceTypeConfigEbsConfig) int { return v.Size })
}

// The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
func (o InstanceFleetInstanceTypeConfigEbsConfigOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[InstanceFleetInstanceTypeConfigEbsConfig](o, func(v InstanceFleetInstanceTypeConfigEbsConfig) string { return v.Type })
}

// The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
func (o InstanceFleetInstanceTypeConfigEbsConfigOutput) VolumesPerInstance() pulumix.Output[*int] {
	return pulumix.Apply[InstanceFleetInstanceTypeConfigEbsConfig](o, func(v InstanceFleetInstanceTypeConfigEbsConfig) *int { return v.VolumesPerInstance })
}

type InstanceFleetLaunchSpecifications struct {
	// Configuration block for on demand instances launch specifications
	OnDemandSpecifications []InstanceFleetLaunchSpecificationsOnDemandSpecification `pulumi:"onDemandSpecifications"`
	// Configuration block for spot instances launch specifications
	SpotSpecifications []InstanceFleetLaunchSpecificationsSpotSpecification `pulumi:"spotSpecifications"`
}

type InstanceFleetLaunchSpecificationsArgs struct {
	// Configuration block for on demand instances launch specifications
	OnDemandSpecifications pulumix.Input[[]*InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs] `pulumi:"onDemandSpecifications"`
	// Configuration block for spot instances launch specifications
	SpotSpecifications pulumix.Input[[]*InstanceFleetLaunchSpecificationsSpotSpecificationArgs] `pulumi:"spotSpecifications"`
}

func (InstanceFleetLaunchSpecificationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFleetLaunchSpecifications)(nil)).Elem()
}

func (i InstanceFleetLaunchSpecificationsArgs) ToInstanceFleetLaunchSpecificationsOutput() InstanceFleetLaunchSpecificationsOutput {
	return i.ToInstanceFleetLaunchSpecificationsOutputWithContext(context.Background())
}

func (i InstanceFleetLaunchSpecificationsArgs) ToInstanceFleetLaunchSpecificationsOutputWithContext(ctx context.Context) InstanceFleetLaunchSpecificationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFleetLaunchSpecificationsOutput)
}

func (i *InstanceFleetLaunchSpecificationsArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceFleetLaunchSpecificationsArgs] {
	return pulumix.Val(i)
}

type InstanceFleetLaunchSpecificationsOutput struct{ *pulumi.OutputState }

func (InstanceFleetLaunchSpecificationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFleetLaunchSpecifications)(nil)).Elem()
}

func (o InstanceFleetLaunchSpecificationsOutput) ToInstanceFleetLaunchSpecificationsOutput() InstanceFleetLaunchSpecificationsOutput {
	return o
}

func (o InstanceFleetLaunchSpecificationsOutput) ToInstanceFleetLaunchSpecificationsOutputWithContext(ctx context.Context) InstanceFleetLaunchSpecificationsOutput {
	return o
}

func (o InstanceFleetLaunchSpecificationsOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceFleetLaunchSpecifications] {
	return pulumix.Output[InstanceFleetLaunchSpecifications]{
		OutputState: o.OutputState,
	}
}

// Configuration block for on demand instances launch specifications
func (o InstanceFleetLaunchSpecificationsOutput) OnDemandSpecifications() pulumix.GArrayOutput[InstanceFleetLaunchSpecificationsOnDemandSpecification, InstanceFleetLaunchSpecificationsOnDemandSpecificationOutput] {
	value := pulumix.Apply[InstanceFleetLaunchSpecifications](o, func(v InstanceFleetLaunchSpecifications) []InstanceFleetLaunchSpecificationsOnDemandSpecification {
		return v.OnDemandSpecifications
	})
	return pulumix.GArrayOutput[InstanceFleetLaunchSpecificationsOnDemandSpecification, InstanceFleetLaunchSpecificationsOnDemandSpecificationOutput]{OutputState: value.OutputState}
}

// Configuration block for spot instances launch specifications
func (o InstanceFleetLaunchSpecificationsOutput) SpotSpecifications() pulumix.GArrayOutput[InstanceFleetLaunchSpecificationsSpotSpecification, InstanceFleetLaunchSpecificationsSpotSpecificationOutput] {
	value := pulumix.Apply[InstanceFleetLaunchSpecifications](o, func(v InstanceFleetLaunchSpecifications) []InstanceFleetLaunchSpecificationsSpotSpecification {
		return v.SpotSpecifications
	})
	return pulumix.GArrayOutput[InstanceFleetLaunchSpecificationsSpotSpecification, InstanceFleetLaunchSpecificationsSpotSpecificationOutput]{OutputState: value.OutputState}
}

type InstanceFleetLaunchSpecificationsOnDemandSpecification struct {
	// Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
	AllocationStrategy string `pulumi:"allocationStrategy"`
}

type InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs struct {
	// Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
	AllocationStrategy pulumix.Input[string] `pulumi:"allocationStrategy"`
}

func (InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFleetLaunchSpecificationsOnDemandSpecification)(nil)).Elem()
}

func (i InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs) ToInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput() InstanceFleetLaunchSpecificationsOnDemandSpecificationOutput {
	return i.ToInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputWithContext(context.Background())
}

func (i InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs) ToInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputWithContext(ctx context.Context) InstanceFleetLaunchSpecificationsOnDemandSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFleetLaunchSpecificationsOnDemandSpecificationOutput)
}

func (i *InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs] {
	return pulumix.Val(i)
}

type InstanceFleetLaunchSpecificationsOnDemandSpecificationOutput struct{ *pulumi.OutputState }

func (InstanceFleetLaunchSpecificationsOnDemandSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFleetLaunchSpecificationsOnDemandSpecification)(nil)).Elem()
}

func (o InstanceFleetLaunchSpecificationsOnDemandSpecificationOutput) ToInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput() InstanceFleetLaunchSpecificationsOnDemandSpecificationOutput {
	return o
}

func (o InstanceFleetLaunchSpecificationsOnDemandSpecificationOutput) ToInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputWithContext(ctx context.Context) InstanceFleetLaunchSpecificationsOnDemandSpecificationOutput {
	return o
}

func (o InstanceFleetLaunchSpecificationsOnDemandSpecificationOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceFleetLaunchSpecificationsOnDemandSpecification] {
	return pulumix.Output[InstanceFleetLaunchSpecificationsOnDemandSpecification]{
		OutputState: o.OutputState,
	}
}

// Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
func (o InstanceFleetLaunchSpecificationsOnDemandSpecificationOutput) AllocationStrategy() pulumix.Output[string] {
	return pulumix.Apply[InstanceFleetLaunchSpecificationsOnDemandSpecification](o, func(v InstanceFleetLaunchSpecificationsOnDemandSpecification) string { return v.AllocationStrategy })
}

type InstanceFleetLaunchSpecificationsSpotSpecification struct {
	// Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
	AllocationStrategy string `pulumi:"allocationStrategy"`
	// The defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	BlockDurationMinutes *int `pulumi:"blockDurationMinutes"`
	// The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are `TERMINATE_CLUSTER` and `SWITCH_TO_ON_DEMAND`. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
	TimeoutAction string `pulumi:"timeoutAction"`
	// The spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
	TimeoutDurationMinutes int `pulumi:"timeoutDurationMinutes"`
}

type InstanceFleetLaunchSpecificationsSpotSpecificationArgs struct {
	// Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
	AllocationStrategy pulumix.Input[string] `pulumi:"allocationStrategy"`
	// The defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	BlockDurationMinutes pulumix.Input[*int] `pulumi:"blockDurationMinutes"`
	// The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are `TERMINATE_CLUSTER` and `SWITCH_TO_ON_DEMAND`. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
	TimeoutAction pulumix.Input[string] `pulumi:"timeoutAction"`
	// The spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
	TimeoutDurationMinutes pulumix.Input[int] `pulumi:"timeoutDurationMinutes"`
}

func (InstanceFleetLaunchSpecificationsSpotSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFleetLaunchSpecificationsSpotSpecification)(nil)).Elem()
}

func (i InstanceFleetLaunchSpecificationsSpotSpecificationArgs) ToInstanceFleetLaunchSpecificationsSpotSpecificationOutput() InstanceFleetLaunchSpecificationsSpotSpecificationOutput {
	return i.ToInstanceFleetLaunchSpecificationsSpotSpecificationOutputWithContext(context.Background())
}

func (i InstanceFleetLaunchSpecificationsSpotSpecificationArgs) ToInstanceFleetLaunchSpecificationsSpotSpecificationOutputWithContext(ctx context.Context) InstanceFleetLaunchSpecificationsSpotSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFleetLaunchSpecificationsSpotSpecificationOutput)
}

func (i *InstanceFleetLaunchSpecificationsSpotSpecificationArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceFleetLaunchSpecificationsSpotSpecificationArgs] {
	return pulumix.Val(i)
}

type InstanceFleetLaunchSpecificationsSpotSpecificationOutput struct{ *pulumi.OutputState }

func (InstanceFleetLaunchSpecificationsSpotSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFleetLaunchSpecificationsSpotSpecification)(nil)).Elem()
}

func (o InstanceFleetLaunchSpecificationsSpotSpecificationOutput) ToInstanceFleetLaunchSpecificationsSpotSpecificationOutput() InstanceFleetLaunchSpecificationsSpotSpecificationOutput {
	return o
}

func (o InstanceFleetLaunchSpecificationsSpotSpecificationOutput) ToInstanceFleetLaunchSpecificationsSpotSpecificationOutputWithContext(ctx context.Context) InstanceFleetLaunchSpecificationsSpotSpecificationOutput {
	return o
}

func (o InstanceFleetLaunchSpecificationsSpotSpecificationOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceFleetLaunchSpecificationsSpotSpecification] {
	return pulumix.Output[InstanceFleetLaunchSpecificationsSpotSpecification]{
		OutputState: o.OutputState,
	}
}

// Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
func (o InstanceFleetLaunchSpecificationsSpotSpecificationOutput) AllocationStrategy() pulumix.Output[string] {
	return pulumix.Apply[InstanceFleetLaunchSpecificationsSpotSpecification](o, func(v InstanceFleetLaunchSpecificationsSpotSpecification) string { return v.AllocationStrategy })
}

// The defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
func (o InstanceFleetLaunchSpecificationsSpotSpecificationOutput) BlockDurationMinutes() pulumix.Output[*int] {
	return pulumix.Apply[InstanceFleetLaunchSpecificationsSpotSpecification](o, func(v InstanceFleetLaunchSpecificationsSpotSpecification) *int { return v.BlockDurationMinutes })
}

// The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are `TERMINATE_CLUSTER` and `SWITCH_TO_ON_DEMAND`. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
func (o InstanceFleetLaunchSpecificationsSpotSpecificationOutput) TimeoutAction() pulumix.Output[string] {
	return pulumix.Apply[InstanceFleetLaunchSpecificationsSpotSpecification](o, func(v InstanceFleetLaunchSpecificationsSpotSpecification) string { return v.TimeoutAction })
}

// The spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
func (o InstanceFleetLaunchSpecificationsSpotSpecificationOutput) TimeoutDurationMinutes() pulumix.Output[int] {
	return pulumix.Apply[InstanceFleetLaunchSpecificationsSpotSpecification](o, func(v InstanceFleetLaunchSpecificationsSpotSpecification) int { return v.TimeoutDurationMinutes })
}

type InstanceGroupEbsConfig struct {
	// The number of I/O operations per second (IOPS) that the volume supports.
	Iops *int `pulumi:"iops"`
	// The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
	Size int `pulumi:"size"`
	// The volume type. Valid options are 'gp2', 'io1' and 'standard'.
	Type string `pulumi:"type"`
	// The number of EBS Volumes to attach per instance.
	VolumesPerInstance *int `pulumi:"volumesPerInstance"`
}

type InstanceGroupEbsConfigArgs struct {
	// The number of I/O operations per second (IOPS) that the volume supports.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
	Size pulumix.Input[int] `pulumi:"size"`
	// The volume type. Valid options are 'gp2', 'io1' and 'standard'.
	Type pulumix.Input[string] `pulumi:"type"`
	// The number of EBS Volumes to attach per instance.
	VolumesPerInstance pulumix.Input[*int] `pulumi:"volumesPerInstance"`
}

func (InstanceGroupEbsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupEbsConfig)(nil)).Elem()
}

func (i InstanceGroupEbsConfigArgs) ToInstanceGroupEbsConfigOutput() InstanceGroupEbsConfigOutput {
	return i.ToInstanceGroupEbsConfigOutputWithContext(context.Background())
}

func (i InstanceGroupEbsConfigArgs) ToInstanceGroupEbsConfigOutputWithContext(ctx context.Context) InstanceGroupEbsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupEbsConfigOutput)
}

func (i *InstanceGroupEbsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceGroupEbsConfigArgs] {
	return pulumix.Val(i)
}

type InstanceGroupEbsConfigOutput struct{ *pulumi.OutputState }

func (InstanceGroupEbsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupEbsConfig)(nil)).Elem()
}

func (o InstanceGroupEbsConfigOutput) ToInstanceGroupEbsConfigOutput() InstanceGroupEbsConfigOutput {
	return o
}

func (o InstanceGroupEbsConfigOutput) ToInstanceGroupEbsConfigOutputWithContext(ctx context.Context) InstanceGroupEbsConfigOutput {
	return o
}

func (o InstanceGroupEbsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceGroupEbsConfig] {
	return pulumix.Output[InstanceGroupEbsConfig]{
		OutputState: o.OutputState,
	}
}

// The number of I/O operations per second (IOPS) that the volume supports.
func (o InstanceGroupEbsConfigOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[InstanceGroupEbsConfig](o, func(v InstanceGroupEbsConfig) *int { return v.Iops })
}

// The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
func (o InstanceGroupEbsConfigOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[InstanceGroupEbsConfig](o, func(v InstanceGroupEbsConfig) int { return v.Size })
}

// The volume type. Valid options are 'gp2', 'io1' and 'standard'.
func (o InstanceGroupEbsConfigOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[InstanceGroupEbsConfig](o, func(v InstanceGroupEbsConfig) string { return v.Type })
}

// The number of EBS Volumes to attach per instance.
func (o InstanceGroupEbsConfigOutput) VolumesPerInstance() pulumix.Output[*int] {
	return pulumix.Apply[InstanceGroupEbsConfig](o, func(v InstanceGroupEbsConfig) *int { return v.VolumesPerInstance })
}

type ManagedScalingPolicyComputeLimit struct {
	// The upper boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
	MaximumCapacityUnits int `pulumi:"maximumCapacityUnits"`
	// The upper boundary of EC2 units for core node type in a cluster. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The core units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between core and task nodes.
	MaximumCoreCapacityUnits *int `pulumi:"maximumCoreCapacityUnits"`
	// The upper boundary of On-Demand EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The On-Demand units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between On-Demand and Spot instances.
	MaximumOndemandCapacityUnits *int `pulumi:"maximumOndemandCapacityUnits"`
	// The lower boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
	MinimumCapacityUnits int `pulumi:"minimumCapacityUnits"`
	// The unit type used for specifying a managed scaling policy. Valid Values: `InstanceFleetUnits` | `Instances` | `VCPU`
	UnitType string `pulumi:"unitType"`
}

type ManagedScalingPolicyComputeLimitArgs struct {
	// The upper boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
	MaximumCapacityUnits pulumix.Input[int] `pulumi:"maximumCapacityUnits"`
	// The upper boundary of EC2 units for core node type in a cluster. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The core units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between core and task nodes.
	MaximumCoreCapacityUnits pulumix.Input[*int] `pulumi:"maximumCoreCapacityUnits"`
	// The upper boundary of On-Demand EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The On-Demand units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between On-Demand and Spot instances.
	MaximumOndemandCapacityUnits pulumix.Input[*int] `pulumi:"maximumOndemandCapacityUnits"`
	// The lower boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
	MinimumCapacityUnits pulumix.Input[int] `pulumi:"minimumCapacityUnits"`
	// The unit type used for specifying a managed scaling policy. Valid Values: `InstanceFleetUnits` | `Instances` | `VCPU`
	UnitType pulumix.Input[string] `pulumi:"unitType"`
}

func (ManagedScalingPolicyComputeLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedScalingPolicyComputeLimit)(nil)).Elem()
}

func (i ManagedScalingPolicyComputeLimitArgs) ToManagedScalingPolicyComputeLimitOutput() ManagedScalingPolicyComputeLimitOutput {
	return i.ToManagedScalingPolicyComputeLimitOutputWithContext(context.Background())
}

func (i ManagedScalingPolicyComputeLimitArgs) ToManagedScalingPolicyComputeLimitOutputWithContext(ctx context.Context) ManagedScalingPolicyComputeLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedScalingPolicyComputeLimitOutput)
}

func (i *ManagedScalingPolicyComputeLimitArgs) ToOutput(ctx context.Context) pulumix.Output[*ManagedScalingPolicyComputeLimitArgs] {
	return pulumix.Val(i)
}

type ManagedScalingPolicyComputeLimitOutput struct{ *pulumi.OutputState }

func (ManagedScalingPolicyComputeLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedScalingPolicyComputeLimit)(nil)).Elem()
}

func (o ManagedScalingPolicyComputeLimitOutput) ToManagedScalingPolicyComputeLimitOutput() ManagedScalingPolicyComputeLimitOutput {
	return o
}

func (o ManagedScalingPolicyComputeLimitOutput) ToManagedScalingPolicyComputeLimitOutputWithContext(ctx context.Context) ManagedScalingPolicyComputeLimitOutput {
	return o
}

func (o ManagedScalingPolicyComputeLimitOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedScalingPolicyComputeLimit] {
	return pulumix.Output[ManagedScalingPolicyComputeLimit]{
		OutputState: o.OutputState,
	}
}

// The upper boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
func (o ManagedScalingPolicyComputeLimitOutput) MaximumCapacityUnits() pulumix.Output[int] {
	return pulumix.Apply[ManagedScalingPolicyComputeLimit](o, func(v ManagedScalingPolicyComputeLimit) int { return v.MaximumCapacityUnits })
}

// The upper boundary of EC2 units for core node type in a cluster. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The core units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between core and task nodes.
func (o ManagedScalingPolicyComputeLimitOutput) MaximumCoreCapacityUnits() pulumix.Output[*int] {
	return pulumix.Apply[ManagedScalingPolicyComputeLimit](o, func(v ManagedScalingPolicyComputeLimit) *int { return v.MaximumCoreCapacityUnits })
}

// The upper boundary of On-Demand EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The On-Demand units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between On-Demand and Spot instances.
func (o ManagedScalingPolicyComputeLimitOutput) MaximumOndemandCapacityUnits() pulumix.Output[*int] {
	return pulumix.Apply[ManagedScalingPolicyComputeLimit](o, func(v ManagedScalingPolicyComputeLimit) *int { return v.MaximumOndemandCapacityUnits })
}

// The lower boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
func (o ManagedScalingPolicyComputeLimitOutput) MinimumCapacityUnits() pulumix.Output[int] {
	return pulumix.Apply[ManagedScalingPolicyComputeLimit](o, func(v ManagedScalingPolicyComputeLimit) int { return v.MinimumCapacityUnits })
}

// The unit type used for specifying a managed scaling policy. Valid Values: `InstanceFleetUnits` | `Instances` | `VCPU`
func (o ManagedScalingPolicyComputeLimitOutput) UnitType() pulumix.Output[string] {
	return pulumix.Apply[ManagedScalingPolicyComputeLimit](o, func(v ManagedScalingPolicyComputeLimit) string { return v.UnitType })
}

type GetReleaseLabelsFilters struct {
	// Optional release label application filter. For example, `Spark@2.1.0` or `Spark`.
	Application *string `pulumi:"application"`
	// Optional release label version prefix filter. For example, `emr-5`.
	Prefix *string `pulumi:"prefix"`
}

type GetReleaseLabelsFiltersArgs struct {
	// Optional release label application filter. For example, `Spark@2.1.0` or `Spark`.
	Application pulumix.Input[*string] `pulumi:"application"`
	// Optional release label version prefix filter. For example, `emr-5`.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
}

func (GetReleaseLabelsFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseLabelsFilters)(nil)).Elem()
}

func (i GetReleaseLabelsFiltersArgs) ToGetReleaseLabelsFiltersOutput() GetReleaseLabelsFiltersOutput {
	return i.ToGetReleaseLabelsFiltersOutputWithContext(context.Background())
}

func (i GetReleaseLabelsFiltersArgs) ToGetReleaseLabelsFiltersOutputWithContext(ctx context.Context) GetReleaseLabelsFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReleaseLabelsFiltersOutput)
}

func (i *GetReleaseLabelsFiltersArgs) ToOutput(ctx context.Context) pulumix.Output[*GetReleaseLabelsFiltersArgs] {
	return pulumix.Val(i)
}

type GetReleaseLabelsFiltersOutput struct{ *pulumi.OutputState }

func (GetReleaseLabelsFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseLabelsFilters)(nil)).Elem()
}

func (o GetReleaseLabelsFiltersOutput) ToGetReleaseLabelsFiltersOutput() GetReleaseLabelsFiltersOutput {
	return o
}

func (o GetReleaseLabelsFiltersOutput) ToGetReleaseLabelsFiltersOutputWithContext(ctx context.Context) GetReleaseLabelsFiltersOutput {
	return o
}

func (o GetReleaseLabelsFiltersOutput) ToOutput(ctx context.Context) pulumix.Output[GetReleaseLabelsFilters] {
	return pulumix.Output[GetReleaseLabelsFilters]{
		OutputState: o.OutputState,
	}
}

// Optional release label application filter. For example, `Spark@2.1.0` or `Spark`.
func (o GetReleaseLabelsFiltersOutput) Application() pulumix.Output[*string] {
	return pulumix.Apply[GetReleaseLabelsFilters](o, func(v GetReleaseLabelsFilters) *string { return v.Application })
}

// Optional release label version prefix filter. For example, `emr-5`.
func (o GetReleaseLabelsFiltersOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[GetReleaseLabelsFilters](o, func(v GetReleaseLabelsFilters) *string { return v.Prefix })
}

func init() {
	pulumi.RegisterOutputType(BlockPublicAccessConfigurationPermittedPublicSecurityGroupRuleRangeOutput{})
	pulumi.RegisterOutputType(ClusterAutoTerminationPolicyOutput{})
	pulumi.RegisterOutputType(ClusterBootstrapActionOutput{})
	pulumi.RegisterOutputType(ClusterCoreInstanceFleetOutput{})
	pulumi.RegisterOutputType(ClusterCoreInstanceFleetInstanceTypeConfigOutput{})
	pulumi.RegisterOutputType(ClusterCoreInstanceFleetInstanceTypeConfigConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigOutput{})
	pulumi.RegisterOutputType(ClusterCoreInstanceFleetLaunchSpecificationsOutput{})
	pulumi.RegisterOutputType(ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput{})
	pulumi.RegisterOutputType(ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationOutput{})
	pulumi.RegisterOutputType(ClusterCoreInstanceGroupOutput{})
	pulumi.RegisterOutputType(ClusterCoreInstanceGroupEbsConfigOutput{})
	pulumi.RegisterOutputType(ClusterEc2AttributesOutput{})
	pulumi.RegisterOutputType(ClusterKerberosAttributesOutput{})
	pulumi.RegisterOutputType(ClusterMasterInstanceFleetOutput{})
	pulumi.RegisterOutputType(ClusterMasterInstanceFleetInstanceTypeConfigOutput{})
	pulumi.RegisterOutputType(ClusterMasterInstanceFleetInstanceTypeConfigConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterMasterInstanceFleetInstanceTypeConfigEbsConfigOutput{})
	pulumi.RegisterOutputType(ClusterMasterInstanceFleetLaunchSpecificationsOutput{})
	pulumi.RegisterOutputType(ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecificationOutput{})
	pulumi.RegisterOutputType(ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecificationOutput{})
	pulumi.RegisterOutputType(ClusterMasterInstanceGroupOutput{})
	pulumi.RegisterOutputType(ClusterMasterInstanceGroupEbsConfigOutput{})
	pulumi.RegisterOutputType(ClusterPlacementGroupConfigOutput{})
	pulumi.RegisterOutputType(ClusterStepOutput{})
	pulumi.RegisterOutputType(ClusterStepHadoopJarStepOutput{})
	pulumi.RegisterOutputType(InstanceFleetInstanceTypeConfigOutput{})
	pulumi.RegisterOutputType(InstanceFleetInstanceTypeConfigConfigurationOutput{})
	pulumi.RegisterOutputType(InstanceFleetInstanceTypeConfigEbsConfigOutput{})
	pulumi.RegisterOutputType(InstanceFleetLaunchSpecificationsOutput{})
	pulumi.RegisterOutputType(InstanceFleetLaunchSpecificationsOnDemandSpecificationOutput{})
	pulumi.RegisterOutputType(InstanceFleetLaunchSpecificationsSpotSpecificationOutput{})
	pulumi.RegisterOutputType(InstanceGroupEbsConfigOutput{})
	pulumi.RegisterOutputType(ManagedScalingPolicyComputeLimitOutput{})
	pulumi.RegisterOutputType(GetReleaseLabelsFiltersOutput{})
}
