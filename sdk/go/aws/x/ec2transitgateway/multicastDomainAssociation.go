// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Associates the specified subnet and transit gateway attachment with the specified transit gateway multicast domain.
type MulticastDomainAssociation struct {
	pulumi.CustomResourceState

	// The ID of the subnet to associate with the transit gateway multicast domain.
	SubnetId pulumix.Output[string] `pulumi:"subnetId"`
	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId pulumix.Output[string] `pulumi:"transitGatewayAttachmentId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId pulumix.Output[string] `pulumi:"transitGatewayMulticastDomainId"`
}

// NewMulticastDomainAssociation registers a new resource with the given unique name, arguments, and options.
func NewMulticastDomainAssociation(ctx *pulumi.Context,
	name string, args *MulticastDomainAssociationArgs, opts ...pulumi.ResourceOption) (*MulticastDomainAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.TransitGatewayAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayAttachmentId'")
	}
	if args.TransitGatewayMulticastDomainId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayMulticastDomainId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MulticastDomainAssociation
	err := ctx.RegisterResource("aws:ec2transitgateway/multicastDomainAssociation:MulticastDomainAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMulticastDomainAssociation gets an existing MulticastDomainAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMulticastDomainAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MulticastDomainAssociationState, opts ...pulumi.ResourceOption) (*MulticastDomainAssociation, error) {
	var resource MulticastDomainAssociation
	err := ctx.ReadResource("aws:ec2transitgateway/multicastDomainAssociation:MulticastDomainAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MulticastDomainAssociation resources.
type multicastDomainAssociationState struct {
	// The ID of the subnet to associate with the transit gateway multicast domain.
	SubnetId *string `pulumi:"subnetId"`
	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId *string `pulumi:"transitGatewayAttachmentId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId *string `pulumi:"transitGatewayMulticastDomainId"`
}

type MulticastDomainAssociationState struct {
	// The ID of the subnet to associate with the transit gateway multicast domain.
	SubnetId pulumix.Input[*string]
	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId pulumix.Input[*string]
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId pulumix.Input[*string]
}

func (MulticastDomainAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastDomainAssociationState)(nil)).Elem()
}

type multicastDomainAssociationArgs struct {
	// The ID of the subnet to associate with the transit gateway multicast domain.
	SubnetId string `pulumi:"subnetId"`
	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId string `pulumi:"transitGatewayAttachmentId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId string `pulumi:"transitGatewayMulticastDomainId"`
}

// The set of arguments for constructing a MulticastDomainAssociation resource.
type MulticastDomainAssociationArgs struct {
	// The ID of the subnet to associate with the transit gateway multicast domain.
	SubnetId pulumix.Input[string]
	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId pulumix.Input[string]
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId pulumix.Input[string]
}

func (MulticastDomainAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastDomainAssociationArgs)(nil)).Elem()
}

type MulticastDomainAssociationOutput struct{ *pulumi.OutputState }

func (MulticastDomainAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MulticastDomainAssociation)(nil)).Elem()
}

func (o MulticastDomainAssociationOutput) ToMulticastDomainAssociationOutput() MulticastDomainAssociationOutput {
	return o
}

func (o MulticastDomainAssociationOutput) ToMulticastDomainAssociationOutputWithContext(ctx context.Context) MulticastDomainAssociationOutput {
	return o
}

func (o MulticastDomainAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[MulticastDomainAssociation] {
	return pulumix.Output[MulticastDomainAssociation]{
		OutputState: o.OutputState,
	}
}

// The ID of the subnet to associate with the transit gateway multicast domain.
func (o MulticastDomainAssociationOutput) SubnetId() pulumix.Output[string] {
	value := pulumix.Apply[MulticastDomainAssociation](o, func(v MulticastDomainAssociation) pulumix.Output[string] { return v.SubnetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the transit gateway attachment.
func (o MulticastDomainAssociationOutput) TransitGatewayAttachmentId() pulumix.Output[string] {
	value := pulumix.Apply[MulticastDomainAssociation](o, func(v MulticastDomainAssociation) pulumix.Output[string] { return v.TransitGatewayAttachmentId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the transit gateway multicast domain.
func (o MulticastDomainAssociationOutput) TransitGatewayMulticastDomainId() pulumix.Output[string] {
	value := pulumix.Apply[MulticastDomainAssociation](o, func(v MulticastDomainAssociation) pulumix.Output[string] { return v.TransitGatewayMulticastDomainId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MulticastDomainAssociationOutput{})
}
