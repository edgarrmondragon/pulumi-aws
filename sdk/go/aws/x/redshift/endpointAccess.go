// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new Amazon Redshift endpoint access.
type EndpointAccess struct {
	pulumi.CustomResourceState

	// The DNS address of the endpoint.
	Address pulumix.Output[string] `pulumi:"address"`
	// The cluster identifier of the cluster to access.
	ClusterIdentifier pulumix.Output[string] `pulumi:"clusterIdentifier"`
	// The Redshift-managed VPC endpoint name.
	EndpointName pulumix.Output[string] `pulumi:"endpointName"`
	// The port number on which the cluster accepts incoming connections.
	Port pulumix.Output[int] `pulumi:"port"`
	// The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
	ResourceOwner pulumix.Output[string] `pulumi:"resourceOwner"`
	// The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
	SubnetGroupName pulumix.Output[string] `pulumi:"subnetGroupName"`
	// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy. See details below.
	VpcEndpoints pulumix.GArrayOutput[EndpointAccessVpcEndpoint, EndpointAccessVpcEndpointOutput] `pulumi:"vpcEndpoints"`
	// The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
	VpcSecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"vpcSecurityGroupIds"`
}

// NewEndpointAccess registers a new resource with the given unique name, arguments, and options.
func NewEndpointAccess(ctx *pulumi.Context,
	name string, args *EndpointAccessArgs, opts ...pulumi.ResourceOption) (*EndpointAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ClusterIdentifier'")
	}
	if args.EndpointName == nil {
		return nil, errors.New("invalid value for required argument 'EndpointName'")
	}
	if args.SubnetGroupName == nil {
		return nil, errors.New("invalid value for required argument 'SubnetGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EndpointAccess
	err := ctx.RegisterResource("aws:redshift/endpointAccess:EndpointAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpointAccess gets an existing EndpointAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpointAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointAccessState, opts ...pulumi.ResourceOption) (*EndpointAccess, error) {
	var resource EndpointAccess
	err := ctx.ReadResource("aws:redshift/endpointAccess:EndpointAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EndpointAccess resources.
type endpointAccessState struct {
	// The DNS address of the endpoint.
	Address *string `pulumi:"address"`
	// The cluster identifier of the cluster to access.
	ClusterIdentifier *string `pulumi:"clusterIdentifier"`
	// The Redshift-managed VPC endpoint name.
	EndpointName *string `pulumi:"endpointName"`
	// The port number on which the cluster accepts incoming connections.
	Port *int `pulumi:"port"`
	// The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
	ResourceOwner *string `pulumi:"resourceOwner"`
	// The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
	SubnetGroupName *string `pulumi:"subnetGroupName"`
	// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy. See details below.
	VpcEndpoints []EndpointAccessVpcEndpoint `pulumi:"vpcEndpoints"`
	// The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
}

type EndpointAccessState struct {
	// The DNS address of the endpoint.
	Address pulumix.Input[*string]
	// The cluster identifier of the cluster to access.
	ClusterIdentifier pulumix.Input[*string]
	// The Redshift-managed VPC endpoint name.
	EndpointName pulumix.Input[*string]
	// The port number on which the cluster accepts incoming connections.
	Port pulumix.Input[*int]
	// The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
	ResourceOwner pulumix.Input[*string]
	// The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
	SubnetGroupName pulumix.Input[*string]
	// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy. See details below.
	VpcEndpoints pulumix.Input[[]*EndpointAccessVpcEndpointArgs]
	// The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
	VpcSecurityGroupIds pulumix.Input[[]string]
}

func (EndpointAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAccessState)(nil)).Elem()
}

type endpointAccessArgs struct {
	// The cluster identifier of the cluster to access.
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
	// The Redshift-managed VPC endpoint name.
	EndpointName string `pulumi:"endpointName"`
	// The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
	ResourceOwner *string `pulumi:"resourceOwner"`
	// The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
	SubnetGroupName string `pulumi:"subnetGroupName"`
	// The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
}

// The set of arguments for constructing a EndpointAccess resource.
type EndpointAccessArgs struct {
	// The cluster identifier of the cluster to access.
	ClusterIdentifier pulumix.Input[string]
	// The Redshift-managed VPC endpoint name.
	EndpointName pulumix.Input[string]
	// The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
	ResourceOwner pulumix.Input[*string]
	// The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
	SubnetGroupName pulumix.Input[string]
	// The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
	VpcSecurityGroupIds pulumix.Input[[]string]
}

func (EndpointAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAccessArgs)(nil)).Elem()
}

type EndpointAccessOutput struct{ *pulumi.OutputState }

func (EndpointAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAccess)(nil)).Elem()
}

func (o EndpointAccessOutput) ToEndpointAccessOutput() EndpointAccessOutput {
	return o
}

func (o EndpointAccessOutput) ToEndpointAccessOutputWithContext(ctx context.Context) EndpointAccessOutput {
	return o
}

func (o EndpointAccessOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointAccess] {
	return pulumix.Output[EndpointAccess]{
		OutputState: o.OutputState,
	}
}

// The DNS address of the endpoint.
func (o EndpointAccessOutput) Address() pulumix.Output[string] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.Output[string] { return v.Address })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The cluster identifier of the cluster to access.
func (o EndpointAccessOutput) ClusterIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.Output[string] { return v.ClusterIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Redshift-managed VPC endpoint name.
func (o EndpointAccessOutput) EndpointName() pulumix.Output[string] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.Output[string] { return v.EndpointName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The port number on which the cluster accepts incoming connections.
func (o EndpointAccessOutput) Port() pulumix.Output[int] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.Output[int] { return v.Port })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
func (o EndpointAccessOutput) ResourceOwner() pulumix.Output[string] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.Output[string] { return v.ResourceOwner })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
func (o EndpointAccessOutput) SubnetGroupName() pulumix.Output[string] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.Output[string] { return v.SubnetGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy. See details below.
func (o EndpointAccessOutput) VpcEndpoints() pulumix.GArrayOutput[EndpointAccessVpcEndpoint, EndpointAccessVpcEndpointOutput] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.GArrayOutput[EndpointAccessVpcEndpoint, EndpointAccessVpcEndpointOutput] {
		return v.VpcEndpoints
	})
	unwrapped := pulumix.Flatten[[]EndpointAccessVpcEndpoint, pulumix.GArrayOutput[EndpointAccessVpcEndpoint, EndpointAccessVpcEndpointOutput]](value)
	return pulumix.GArrayOutput[EndpointAccessVpcEndpoint, EndpointAccessVpcEndpointOutput]{OutputState: unwrapped.OutputState}
}

// The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
func (o EndpointAccessOutput) VpcSecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.ArrayOutput[string] { return v.VpcSecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(EndpointAccessOutput{})
}
