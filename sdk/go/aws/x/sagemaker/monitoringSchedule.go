// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a SageMaker monitoring schedule resource.
type MonitoringSchedule struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) assigned by AWS to this monitoring schedule.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The configuration object that specifies the monitoring schedule and defines the monitoring job. Fields are documented below.
	MonitoringScheduleConfig pulumix.GPtrOutput[MonitoringScheduleMonitoringScheduleConfig, MonitoringScheduleMonitoringScheduleConfigOutput] `pulumi:"monitoringScheduleConfig"`
	// The name of the monitoring schedule. The name must be unique within an AWS Region within an AWS account. If omitted, the provider will assign a random, unique name.
	Name pulumix.Output[string] `pulumi:"name"`
	// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewMonitoringSchedule registers a new resource with the given unique name, arguments, and options.
func NewMonitoringSchedule(ctx *pulumi.Context,
	name string, args *MonitoringScheduleArgs, opts ...pulumi.ResourceOption) (*MonitoringSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MonitoringScheduleConfig == nil {
		return nil, errors.New("invalid value for required argument 'MonitoringScheduleConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitoringSchedule
	err := ctx.RegisterResource("aws:sagemaker/monitoringSchedule:MonitoringSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoringSchedule gets an existing MonitoringSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoringSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoringScheduleState, opts ...pulumi.ResourceOption) (*MonitoringSchedule, error) {
	var resource MonitoringSchedule
	err := ctx.ReadResource("aws:sagemaker/monitoringSchedule:MonitoringSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoringSchedule resources.
type monitoringScheduleState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this monitoring schedule.
	Arn *string `pulumi:"arn"`
	// The configuration object that specifies the monitoring schedule and defines the monitoring job. Fields are documented below.
	MonitoringScheduleConfig *MonitoringScheduleMonitoringScheduleConfig `pulumi:"monitoringScheduleConfig"`
	// The name of the monitoring schedule. The name must be unique within an AWS Region within an AWS account. If omitted, the provider will assign a random, unique name.
	Name *string `pulumi:"name"`
	// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type MonitoringScheduleState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this monitoring schedule.
	Arn pulumix.Input[*string]
	// The configuration object that specifies the monitoring schedule and defines the monitoring job. Fields are documented below.
	MonitoringScheduleConfig pulumix.Input[*MonitoringScheduleMonitoringScheduleConfigArgs]
	// The name of the monitoring schedule. The name must be unique within an AWS Region within an AWS account. If omitted, the provider will assign a random, unique name.
	Name pulumix.Input[*string]
	// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (MonitoringScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringScheduleState)(nil)).Elem()
}

type monitoringScheduleArgs struct {
	// The configuration object that specifies the monitoring schedule and defines the monitoring job. Fields are documented below.
	MonitoringScheduleConfig MonitoringScheduleMonitoringScheduleConfig `pulumi:"monitoringScheduleConfig"`
	// The name of the monitoring schedule. The name must be unique within an AWS Region within an AWS account. If omitted, the provider will assign a random, unique name.
	Name *string `pulumi:"name"`
	// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a MonitoringSchedule resource.
type MonitoringScheduleArgs struct {
	// The configuration object that specifies the monitoring schedule and defines the monitoring job. Fields are documented below.
	MonitoringScheduleConfig pulumix.Input[*MonitoringScheduleMonitoringScheduleConfigArgs]
	// The name of the monitoring schedule. The name must be unique within an AWS Region within an AWS account. If omitted, the provider will assign a random, unique name.
	Name pulumix.Input[*string]
	// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (MonitoringScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringScheduleArgs)(nil)).Elem()
}

type MonitoringScheduleOutput struct{ *pulumi.OutputState }

func (MonitoringScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringSchedule)(nil)).Elem()
}

func (o MonitoringScheduleOutput) ToMonitoringScheduleOutput() MonitoringScheduleOutput {
	return o
}

func (o MonitoringScheduleOutput) ToMonitoringScheduleOutputWithContext(ctx context.Context) MonitoringScheduleOutput {
	return o
}

func (o MonitoringScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[MonitoringSchedule] {
	return pulumix.Output[MonitoringSchedule]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) assigned by AWS to this monitoring schedule.
func (o MonitoringScheduleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[MonitoringSchedule](o, func(v MonitoringSchedule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The configuration object that specifies the monitoring schedule and defines the monitoring job. Fields are documented below.
func (o MonitoringScheduleOutput) MonitoringScheduleConfig() pulumix.GPtrOutput[MonitoringScheduleMonitoringScheduleConfig, MonitoringScheduleMonitoringScheduleConfigOutput] {
	value := pulumix.Apply[MonitoringSchedule](o, func(v MonitoringSchedule) pulumix.GPtrOutput[MonitoringScheduleMonitoringScheduleConfig, MonitoringScheduleMonitoringScheduleConfigOutput] {
		return v.MonitoringScheduleConfig
	})
	unwrapped := pulumix.Flatten[*MonitoringScheduleMonitoringScheduleConfig, pulumix.GPtrOutput[MonitoringScheduleMonitoringScheduleConfig, MonitoringScheduleMonitoringScheduleConfigOutput]](value)
	return pulumix.GPtrOutput[MonitoringScheduleMonitoringScheduleConfig, MonitoringScheduleMonitoringScheduleConfigOutput]{OutputState: unwrapped.OutputState}
}

// The name of the monitoring schedule. The name must be unique within an AWS Region within an AWS account. If omitted, the provider will assign a random, unique name.
func (o MonitoringScheduleOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[MonitoringSchedule](o, func(v MonitoringSchedule) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o MonitoringScheduleOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[MonitoringSchedule](o, func(v MonitoringSchedule) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o MonitoringScheduleOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[MonitoringSchedule](o, func(v MonitoringSchedule) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(MonitoringScheduleOutput{})
}
