// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mskconnect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get information on an Amazon MSK Connect custom plugin.
func LookupCustomPlugin(ctx *pulumi.Context, args *LookupCustomPluginArgs, opts ...pulumi.InvokeOption) (*LookupCustomPluginResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCustomPluginResult
	err := ctx.Invoke("aws:mskconnect/getCustomPlugin:getCustomPlugin", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCustomPlugin.
type LookupCustomPluginArgs struct {
	// Name of the custom plugin.
	Name string `pulumi:"name"`
}

// A collection of values returned by getCustomPlugin.
type LookupCustomPluginResult struct {
	// the ARN of the custom plugin.
	Arn string `pulumi:"arn"`
	// a summary description of the custom plugin.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// an ID of the latest successfully created revision of the custom plugin.
	LatestRevision int    `pulumi:"latestRevision"`
	Name           string `pulumi:"name"`
	// the state of the custom plugin.
	State string `pulumi:"state"`
}

func LookupCustomPluginOutput(ctx *pulumi.Context, args LookupCustomPluginOutputArgs, opts ...pulumi.InvokeOption) LookupCustomPluginResultOutput {
	outputResult := pulumix.ApplyErr[*LookupCustomPluginArgs](args.ToOutput(), func(plainArgs *LookupCustomPluginArgs) (*LookupCustomPluginResult, error) {
		return LookupCustomPlugin(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupCustomPluginResultOutput, *LookupCustomPluginResult](outputResult)
}

// A collection of arguments for invoking getCustomPlugin.
type LookupCustomPluginOutputArgs struct {
	// Name of the custom plugin.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupCustomPluginOutputArgs) ToOutput() pulumix.Output[*LookupCustomPluginArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupCustomPluginArgs {
		return &LookupCustomPluginArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupCustomPluginResultOutput struct{ *pulumi.OutputState }

func (LookupCustomPluginResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCustomPluginResult)(nil)).Elem()
}

func (o LookupCustomPluginResultOutput) ToOutput(context.Context) pulumix.Output[*LookupCustomPluginResult] {
	return pulumix.Output[*LookupCustomPluginResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupCustomPluginResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomPluginResult](o, func(v *LookupCustomPluginResult) string { return v.Arn })
}

func (o LookupCustomPluginResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomPluginResult](o, func(v *LookupCustomPluginResult) string { return v.Description })
}

func (o LookupCustomPluginResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomPluginResult](o, func(v *LookupCustomPluginResult) string { return v.Id })
}

func (o LookupCustomPluginResultOutput) LatestRevision() pulumix.Output[int] {
	return pulumix.Apply[*LookupCustomPluginResult](o, func(v *LookupCustomPluginResult) int { return v.LatestRevision })
}

func (o LookupCustomPluginResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomPluginResult](o, func(v *LookupCustomPluginResult) string { return v.Name })
}

func (o LookupCustomPluginResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomPluginResult](o, func(v *LookupCustomPluginResult) string { return v.State })
}
