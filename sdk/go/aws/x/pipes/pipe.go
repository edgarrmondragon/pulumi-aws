// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pipes

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS EventBridge Pipes Pipe.
//
// You can find out more about EventBridge Pipes in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html).
//
// EventBridge Pipes are very configurable, and may require IAM permissions to work correctly. More information on the configuration options and IAM permissions can be found in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html).
//
// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
type Pipe struct {
	pulumi.CustomResourceState

	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A description of the pipe. At most 512 characters.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The state the pipe should be in. One of: `RUNNING`, `STOPPED`.
	DesiredState pulumix.Output[*string] `pulumi:"desiredState"`
	// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html#pipes-enrichment).
	Enrichment pulumix.Output[*string] `pulumi:"enrichment"`
	// Parameters to configure enrichment for your pipe. Detailed below.
	EnrichmentParameters pulumix.GPtrOutput[PipeEnrichmentParameters, PipeEnrichmentParametersOutput] `pulumi:"enrichmentParameters"`
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[string] `pulumi:"namePrefix"`
	// ARN of the role that allows the pipe to send data to the target.
	RoleArn pulumix.Output[string] `pulumi:"roleArn"`
	// Source resource of the pipe (typically an ARN).
	Source pulumix.Output[string] `pulumi:"source"`
	// Parameters to configure a source for the pipe. Detailed below.
	SourceParameters pulumix.GPtrOutput[PipeSourceParameters, PipeSourceParametersOutput] `pulumi:"sourceParameters"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Target resource of the pipe (typically an ARN).
	//
	// The following arguments are optional:
	Target pulumix.Output[string] `pulumi:"target"`
	// Parameters to configure a target for your pipe. Detailed below.
	TargetParameters pulumix.GPtrOutput[PipeTargetParameters, PipeTargetParametersOutput] `pulumi:"targetParameters"`
}

// NewPipe registers a new resource with the given unique name, arguments, and options.
func NewPipe(ctx *pulumi.Context,
	name string, args *PipeArgs, opts ...pulumi.ResourceOption) (*Pipe, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pipe
	err := ctx.RegisterResource("aws:pipes/pipe:Pipe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipe gets an existing Pipe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipeState, opts ...pulumi.ResourceOption) (*Pipe, error) {
	var resource Pipe
	err := ctx.ReadResource("aws:pipes/pipe:Pipe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipe resources.
type pipeState struct {
	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn *string `pulumi:"arn"`
	// A description of the pipe. At most 512 characters.
	Description *string `pulumi:"description"`
	// The state the pipe should be in. One of: `RUNNING`, `STOPPED`.
	DesiredState *string `pulumi:"desiredState"`
	// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html#pipes-enrichment).
	Enrichment *string `pulumi:"enrichment"`
	// Parameters to configure enrichment for your pipe. Detailed below.
	EnrichmentParameters *PipeEnrichmentParameters `pulumi:"enrichmentParameters"`
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// ARN of the role that allows the pipe to send data to the target.
	RoleArn *string `pulumi:"roleArn"`
	// Source resource of the pipe (typically an ARN).
	Source *string `pulumi:"source"`
	// Parameters to configure a source for the pipe. Detailed below.
	SourceParameters *PipeSourceParameters `pulumi:"sourceParameters"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Target resource of the pipe (typically an ARN).
	//
	// The following arguments are optional:
	Target *string `pulumi:"target"`
	// Parameters to configure a target for your pipe. Detailed below.
	TargetParameters *PipeTargetParameters `pulumi:"targetParameters"`
}

type PipeState struct {
	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn pulumix.Input[*string]
	// A description of the pipe. At most 512 characters.
	Description pulumix.Input[*string]
	// The state the pipe should be in. One of: `RUNNING`, `STOPPED`.
	DesiredState pulumix.Input[*string]
	// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html#pipes-enrichment).
	Enrichment pulumix.Input[*string]
	// Parameters to configure enrichment for your pipe. Detailed below.
	EnrichmentParameters pulumix.Input[*PipeEnrichmentParametersArgs]
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// ARN of the role that allows the pipe to send data to the target.
	RoleArn pulumix.Input[*string]
	// Source resource of the pipe (typically an ARN).
	Source pulumix.Input[*string]
	// Parameters to configure a source for the pipe. Detailed below.
	SourceParameters pulumix.Input[*PipeSourceParametersArgs]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Target resource of the pipe (typically an ARN).
	//
	// The following arguments are optional:
	Target pulumix.Input[*string]
	// Parameters to configure a target for your pipe. Detailed below.
	TargetParameters pulumix.Input[*PipeTargetParametersArgs]
}

func (PipeState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipeState)(nil)).Elem()
}

type pipeArgs struct {
	// A description of the pipe. At most 512 characters.
	Description *string `pulumi:"description"`
	// The state the pipe should be in. One of: `RUNNING`, `STOPPED`.
	DesiredState *string `pulumi:"desiredState"`
	// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html#pipes-enrichment).
	Enrichment *string `pulumi:"enrichment"`
	// Parameters to configure enrichment for your pipe. Detailed below.
	EnrichmentParameters *PipeEnrichmentParameters `pulumi:"enrichmentParameters"`
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// ARN of the role that allows the pipe to send data to the target.
	RoleArn string `pulumi:"roleArn"`
	// Source resource of the pipe (typically an ARN).
	Source string `pulumi:"source"`
	// Parameters to configure a source for the pipe. Detailed below.
	SourceParameters *PipeSourceParameters `pulumi:"sourceParameters"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Target resource of the pipe (typically an ARN).
	//
	// The following arguments are optional:
	Target string `pulumi:"target"`
	// Parameters to configure a target for your pipe. Detailed below.
	TargetParameters *PipeTargetParameters `pulumi:"targetParameters"`
}

// The set of arguments for constructing a Pipe resource.
type PipeArgs struct {
	// A description of the pipe. At most 512 characters.
	Description pulumix.Input[*string]
	// The state the pipe should be in. One of: `RUNNING`, `STOPPED`.
	DesiredState pulumix.Input[*string]
	// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html#pipes-enrichment).
	Enrichment pulumix.Input[*string]
	// Parameters to configure enrichment for your pipe. Detailed below.
	EnrichmentParameters pulumix.Input[*PipeEnrichmentParametersArgs]
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// ARN of the role that allows the pipe to send data to the target.
	RoleArn pulumix.Input[string]
	// Source resource of the pipe (typically an ARN).
	Source pulumix.Input[string]
	// Parameters to configure a source for the pipe. Detailed below.
	SourceParameters pulumix.Input[*PipeSourceParametersArgs]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Target resource of the pipe (typically an ARN).
	//
	// The following arguments are optional:
	Target pulumix.Input[string]
	// Parameters to configure a target for your pipe. Detailed below.
	TargetParameters pulumix.Input[*PipeTargetParametersArgs]
}

func (PipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipeArgs)(nil)).Elem()
}

type PipeOutput struct{ *pulumi.OutputState }

func (PipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Pipe)(nil)).Elem()
}

func (o PipeOutput) ToPipeOutput() PipeOutput {
	return o
}

func (o PipeOutput) ToPipeOutputWithContext(ctx context.Context) PipeOutput {
	return o
}

func (o PipeOutput) ToOutput(ctx context.Context) pulumix.Output[Pipe] {
	return pulumix.Output[Pipe]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
func (o PipeOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Pipe](o, func(v Pipe) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description of the pipe. At most 512 characters.
func (o PipeOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Pipe](o, func(v Pipe) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The state the pipe should be in. One of: `RUNNING`, `STOPPED`.
func (o PipeOutput) DesiredState() pulumix.Output[*string] {
	value := pulumix.Apply[Pipe](o, func(v Pipe) pulumix.Output[*string] { return v.DesiredState })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html#pipes-enrichment).
func (o PipeOutput) Enrichment() pulumix.Output[*string] {
	value := pulumix.Apply[Pipe](o, func(v Pipe) pulumix.Output[*string] { return v.Enrichment })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Parameters to configure enrichment for your pipe. Detailed below.
func (o PipeOutput) EnrichmentParameters() pulumix.GPtrOutput[PipeEnrichmentParameters, PipeEnrichmentParametersOutput] {
	value := pulumix.Apply[Pipe](o, func(v Pipe) pulumix.GPtrOutput[PipeEnrichmentParameters, PipeEnrichmentParametersOutput] {
		return v.EnrichmentParameters
	})
	unwrapped := pulumix.Flatten[*PipeEnrichmentParameters, pulumix.GPtrOutput[PipeEnrichmentParameters, PipeEnrichmentParametersOutput]](value)
	return pulumix.GPtrOutput[PipeEnrichmentParameters, PipeEnrichmentParametersOutput]{OutputState: unwrapped.OutputState}
}

// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o PipeOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Pipe](o, func(v Pipe) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o PipeOutput) NamePrefix() pulumix.Output[string] {
	value := pulumix.Apply[Pipe](o, func(v Pipe) pulumix.Output[string] { return v.NamePrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the role that allows the pipe to send data to the target.
func (o PipeOutput) RoleArn() pulumix.Output[string] {
	value := pulumix.Apply[Pipe](o, func(v Pipe) pulumix.Output[string] { return v.RoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Source resource of the pipe (typically an ARN).
func (o PipeOutput) Source() pulumix.Output[string] {
	value := pulumix.Apply[Pipe](o, func(v Pipe) pulumix.Output[string] { return v.Source })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Parameters to configure a source for the pipe. Detailed below.
func (o PipeOutput) SourceParameters() pulumix.GPtrOutput[PipeSourceParameters, PipeSourceParametersOutput] {
	value := pulumix.Apply[Pipe](o, func(v Pipe) pulumix.GPtrOutput[PipeSourceParameters, PipeSourceParametersOutput] {
		return v.SourceParameters
	})
	unwrapped := pulumix.Flatten[*PipeSourceParameters, pulumix.GPtrOutput[PipeSourceParameters, PipeSourceParametersOutput]](value)
	return pulumix.GPtrOutput[PipeSourceParameters, PipeSourceParametersOutput]{OutputState: unwrapped.OutputState}
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PipeOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Pipe](o, func(v Pipe) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o PipeOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Pipe](o, func(v Pipe) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Target resource of the pipe (typically an ARN).
//
// The following arguments are optional:
func (o PipeOutput) Target() pulumix.Output[string] {
	value := pulumix.Apply[Pipe](o, func(v Pipe) pulumix.Output[string] { return v.Target })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Parameters to configure a target for your pipe. Detailed below.
func (o PipeOutput) TargetParameters() pulumix.GPtrOutput[PipeTargetParameters, PipeTargetParametersOutput] {
	value := pulumix.Apply[Pipe](o, func(v Pipe) pulumix.GPtrOutput[PipeTargetParameters, PipeTargetParametersOutput] {
		return v.TargetParameters
	})
	unwrapped := pulumix.Flatten[*PipeTargetParameters, pulumix.GPtrOutput[PipeTargetParameters, PipeTargetParametersOutput]](value)
	return pulumix.GPtrOutput[PipeTargetParameters, PipeTargetParametersOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(PipeOutput{})
}
