// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inspector2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for associating accounts to existing Inspector instances.
type MemberAssociation struct {
	pulumi.CustomResourceState

	// ID of the account to associate
	AccountId pulumix.Output[string] `pulumi:"accountId"`
	// Account ID of the delegated administrator account
	DelegatedAdminAccountId pulumix.Output[string] `pulumi:"delegatedAdminAccountId"`
	// Status of the member relationship
	RelationshipStatus pulumix.Output[string] `pulumi:"relationshipStatus"`
	// Date and time of the last update of the relationship
	UpdatedAt pulumix.Output[string] `pulumi:"updatedAt"`
}

// NewMemberAssociation registers a new resource with the given unique name, arguments, and options.
func NewMemberAssociation(ctx *pulumi.Context,
	name string, args *MemberAssociationArgs, opts ...pulumi.ResourceOption) (*MemberAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MemberAssociation
	err := ctx.RegisterResource("aws:inspector2/memberAssociation:MemberAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMemberAssociation gets an existing MemberAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMemberAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MemberAssociationState, opts ...pulumi.ResourceOption) (*MemberAssociation, error) {
	var resource MemberAssociation
	err := ctx.ReadResource("aws:inspector2/memberAssociation:MemberAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MemberAssociation resources.
type memberAssociationState struct {
	// ID of the account to associate
	AccountId *string `pulumi:"accountId"`
	// Account ID of the delegated administrator account
	DelegatedAdminAccountId *string `pulumi:"delegatedAdminAccountId"`
	// Status of the member relationship
	RelationshipStatus *string `pulumi:"relationshipStatus"`
	// Date and time of the last update of the relationship
	UpdatedAt *string `pulumi:"updatedAt"`
}

type MemberAssociationState struct {
	// ID of the account to associate
	AccountId pulumix.Input[*string]
	// Account ID of the delegated administrator account
	DelegatedAdminAccountId pulumix.Input[*string]
	// Status of the member relationship
	RelationshipStatus pulumix.Input[*string]
	// Date and time of the last update of the relationship
	UpdatedAt pulumix.Input[*string]
}

func (MemberAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*memberAssociationState)(nil)).Elem()
}

type memberAssociationArgs struct {
	// ID of the account to associate
	AccountId string `pulumi:"accountId"`
}

// The set of arguments for constructing a MemberAssociation resource.
type MemberAssociationArgs struct {
	// ID of the account to associate
	AccountId pulumix.Input[string]
}

func (MemberAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*memberAssociationArgs)(nil)).Elem()
}

type MemberAssociationOutput struct{ *pulumi.OutputState }

func (MemberAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemberAssociation)(nil)).Elem()
}

func (o MemberAssociationOutput) ToMemberAssociationOutput() MemberAssociationOutput {
	return o
}

func (o MemberAssociationOutput) ToMemberAssociationOutputWithContext(ctx context.Context) MemberAssociationOutput {
	return o
}

func (o MemberAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[MemberAssociation] {
	return pulumix.Output[MemberAssociation]{
		OutputState: o.OutputState,
	}
}

// ID of the account to associate
func (o MemberAssociationOutput) AccountId() pulumix.Output[string] {
	value := pulumix.Apply[MemberAssociation](o, func(v MemberAssociation) pulumix.Output[string] { return v.AccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Account ID of the delegated administrator account
func (o MemberAssociationOutput) DelegatedAdminAccountId() pulumix.Output[string] {
	value := pulumix.Apply[MemberAssociation](o, func(v MemberAssociation) pulumix.Output[string] { return v.DelegatedAdminAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Status of the member relationship
func (o MemberAssociationOutput) RelationshipStatus() pulumix.Output[string] {
	value := pulumix.Apply[MemberAssociation](o, func(v MemberAssociation) pulumix.Output[string] { return v.RelationshipStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date and time of the last update of the relationship
func (o MemberAssociationOutput) UpdatedAt() pulumix.Output[string] {
	value := pulumix.Apply[MemberAssociation](o, func(v MemberAssociation) pulumix.Output[string] { return v.UpdatedAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MemberAssociationOutput{})
}
