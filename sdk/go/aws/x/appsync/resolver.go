// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AppSync Resolver.
type Resolver struct {
	pulumi.CustomResourceState

	// API ID for the GraphQL API.
	ApiId pulumix.Output[string] `pulumi:"apiId"`
	// ARN
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The Caching Config. See Caching Config.
	CachingConfig pulumix.GPtrOutput[ResolverCachingConfig, ResolverCachingConfigOutput] `pulumi:"cachingConfig"`
	// The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
	Code pulumix.Output[*string] `pulumi:"code"`
	// Data source name.
	DataSource pulumix.Output[*string] `pulumi:"dataSource"`
	// Field name from the schema defined in the GraphQL API.
	Field pulumix.Output[string] `pulumi:"field"`
	// Resolver type. Valid values are `UNIT` and `PIPELINE`.
	Kind pulumix.Output[*string] `pulumi:"kind"`
	// Maximum batching size for a resolver. Valid values are between `0` and `2000`.
	MaxBatchSize pulumix.Output[*int] `pulumi:"maxBatchSize"`
	// The caching configuration for the resolver. See Pipeline Config.
	PipelineConfig pulumix.GPtrOutput[ResolverPipelineConfig, ResolverPipelineConfigOutput] `pulumi:"pipelineConfig"`
	// Request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
	RequestTemplate pulumix.Output[*string] `pulumi:"requestTemplate"`
	// Response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
	ResponseTemplate pulumix.Output[*string] `pulumi:"responseTemplate"`
	// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See Runtime.
	Runtime pulumix.GPtrOutput[ResolverRuntime, ResolverRuntimeOutput] `pulumi:"runtime"`
	// Describes a Sync configuration for a resolver. See Sync Config.
	SyncConfig pulumix.GPtrOutput[ResolverSyncConfig, ResolverSyncConfigOutput] `pulumi:"syncConfig"`
	// Type name from the schema defined in the GraphQL API.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewResolver registers a new resource with the given unique name, arguments, and options.
func NewResolver(ctx *pulumi.Context,
	name string, args *ResolverArgs, opts ...pulumi.ResourceOption) (*Resolver, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.Field == nil {
		return nil, errors.New("invalid value for required argument 'Field'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Resolver
	err := ctx.RegisterResource("aws:appsync/resolver:Resolver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolver gets an existing Resolver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverState, opts ...pulumi.ResourceOption) (*Resolver, error) {
	var resource Resolver
	err := ctx.ReadResource("aws:appsync/resolver:Resolver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resolver resources.
type resolverState struct {
	// API ID for the GraphQL API.
	ApiId *string `pulumi:"apiId"`
	// ARN
	Arn *string `pulumi:"arn"`
	// The Caching Config. See Caching Config.
	CachingConfig *ResolverCachingConfig `pulumi:"cachingConfig"`
	// The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
	Code *string `pulumi:"code"`
	// Data source name.
	DataSource *string `pulumi:"dataSource"`
	// Field name from the schema defined in the GraphQL API.
	Field *string `pulumi:"field"`
	// Resolver type. Valid values are `UNIT` and `PIPELINE`.
	Kind *string `pulumi:"kind"`
	// Maximum batching size for a resolver. Valid values are between `0` and `2000`.
	MaxBatchSize *int `pulumi:"maxBatchSize"`
	// The caching configuration for the resolver. See Pipeline Config.
	PipelineConfig *ResolverPipelineConfig `pulumi:"pipelineConfig"`
	// Request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
	RequestTemplate *string `pulumi:"requestTemplate"`
	// Response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
	ResponseTemplate *string `pulumi:"responseTemplate"`
	// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See Runtime.
	Runtime *ResolverRuntime `pulumi:"runtime"`
	// Describes a Sync configuration for a resolver. See Sync Config.
	SyncConfig *ResolverSyncConfig `pulumi:"syncConfig"`
	// Type name from the schema defined in the GraphQL API.
	Type *string `pulumi:"type"`
}

type ResolverState struct {
	// API ID for the GraphQL API.
	ApiId pulumix.Input[*string]
	// ARN
	Arn pulumix.Input[*string]
	// The Caching Config. See Caching Config.
	CachingConfig pulumix.Input[*ResolverCachingConfigArgs]
	// The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
	Code pulumix.Input[*string]
	// Data source name.
	DataSource pulumix.Input[*string]
	// Field name from the schema defined in the GraphQL API.
	Field pulumix.Input[*string]
	// Resolver type. Valid values are `UNIT` and `PIPELINE`.
	Kind pulumix.Input[*string]
	// Maximum batching size for a resolver. Valid values are between `0` and `2000`.
	MaxBatchSize pulumix.Input[*int]
	// The caching configuration for the resolver. See Pipeline Config.
	PipelineConfig pulumix.Input[*ResolverPipelineConfigArgs]
	// Request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
	RequestTemplate pulumix.Input[*string]
	// Response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
	ResponseTemplate pulumix.Input[*string]
	// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See Runtime.
	Runtime pulumix.Input[*ResolverRuntimeArgs]
	// Describes a Sync configuration for a resolver. See Sync Config.
	SyncConfig pulumix.Input[*ResolverSyncConfigArgs]
	// Type name from the schema defined in the GraphQL API.
	Type pulumix.Input[*string]
}

func (ResolverState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverState)(nil)).Elem()
}

type resolverArgs struct {
	// API ID for the GraphQL API.
	ApiId string `pulumi:"apiId"`
	// The Caching Config. See Caching Config.
	CachingConfig *ResolverCachingConfig `pulumi:"cachingConfig"`
	// The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
	Code *string `pulumi:"code"`
	// Data source name.
	DataSource *string `pulumi:"dataSource"`
	// Field name from the schema defined in the GraphQL API.
	Field string `pulumi:"field"`
	// Resolver type. Valid values are `UNIT` and `PIPELINE`.
	Kind *string `pulumi:"kind"`
	// Maximum batching size for a resolver. Valid values are between `0` and `2000`.
	MaxBatchSize *int `pulumi:"maxBatchSize"`
	// The caching configuration for the resolver. See Pipeline Config.
	PipelineConfig *ResolverPipelineConfig `pulumi:"pipelineConfig"`
	// Request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
	RequestTemplate *string `pulumi:"requestTemplate"`
	// Response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
	ResponseTemplate *string `pulumi:"responseTemplate"`
	// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See Runtime.
	Runtime *ResolverRuntime `pulumi:"runtime"`
	// Describes a Sync configuration for a resolver. See Sync Config.
	SyncConfig *ResolverSyncConfig `pulumi:"syncConfig"`
	// Type name from the schema defined in the GraphQL API.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Resolver resource.
type ResolverArgs struct {
	// API ID for the GraphQL API.
	ApiId pulumix.Input[string]
	// The Caching Config. See Caching Config.
	CachingConfig pulumix.Input[*ResolverCachingConfigArgs]
	// The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
	Code pulumix.Input[*string]
	// Data source name.
	DataSource pulumix.Input[*string]
	// Field name from the schema defined in the GraphQL API.
	Field pulumix.Input[string]
	// Resolver type. Valid values are `UNIT` and `PIPELINE`.
	Kind pulumix.Input[*string]
	// Maximum batching size for a resolver. Valid values are between `0` and `2000`.
	MaxBatchSize pulumix.Input[*int]
	// The caching configuration for the resolver. See Pipeline Config.
	PipelineConfig pulumix.Input[*ResolverPipelineConfigArgs]
	// Request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
	RequestTemplate pulumix.Input[*string]
	// Response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
	ResponseTemplate pulumix.Input[*string]
	// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See Runtime.
	Runtime pulumix.Input[*ResolverRuntimeArgs]
	// Describes a Sync configuration for a resolver. See Sync Config.
	SyncConfig pulumix.Input[*ResolverSyncConfigArgs]
	// Type name from the schema defined in the GraphQL API.
	Type pulumix.Input[string]
}

func (ResolverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverArgs)(nil)).Elem()
}

type ResolverOutput struct{ *pulumi.OutputState }

func (ResolverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Resolver)(nil)).Elem()
}

func (o ResolverOutput) ToResolverOutput() ResolverOutput {
	return o
}

func (o ResolverOutput) ToResolverOutputWithContext(ctx context.Context) ResolverOutput {
	return o
}

func (o ResolverOutput) ToOutput(ctx context.Context) pulumix.Output[Resolver] {
	return pulumix.Output[Resolver]{
		OutputState: o.OutputState,
	}
}

// API ID for the GraphQL API.
func (o ResolverOutput) ApiId() pulumix.Output[string] {
	value := pulumix.Apply[Resolver](o, func(v Resolver) pulumix.Output[string] { return v.ApiId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN
func (o ResolverOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Resolver](o, func(v Resolver) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Caching Config. See Caching Config.
func (o ResolverOutput) CachingConfig() pulumix.GPtrOutput[ResolverCachingConfig, ResolverCachingConfigOutput] {
	value := pulumix.Apply[Resolver](o, func(v Resolver) pulumix.GPtrOutput[ResolverCachingConfig, ResolverCachingConfigOutput] {
		return v.CachingConfig
	})
	unwrapped := pulumix.Flatten[*ResolverCachingConfig, pulumix.GPtrOutput[ResolverCachingConfig, ResolverCachingConfigOutput]](value)
	return pulumix.GPtrOutput[ResolverCachingConfig, ResolverCachingConfigOutput]{OutputState: unwrapped.OutputState}
}

// The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
func (o ResolverOutput) Code() pulumix.Output[*string] {
	value := pulumix.Apply[Resolver](o, func(v Resolver) pulumix.Output[*string] { return v.Code })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Data source name.
func (o ResolverOutput) DataSource() pulumix.Output[*string] {
	value := pulumix.Apply[Resolver](o, func(v Resolver) pulumix.Output[*string] { return v.DataSource })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Field name from the schema defined in the GraphQL API.
func (o ResolverOutput) Field() pulumix.Output[string] {
	value := pulumix.Apply[Resolver](o, func(v Resolver) pulumix.Output[string] { return v.Field })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Resolver type. Valid values are `UNIT` and `PIPELINE`.
func (o ResolverOutput) Kind() pulumix.Output[*string] {
	value := pulumix.Apply[Resolver](o, func(v Resolver) pulumix.Output[*string] { return v.Kind })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Maximum batching size for a resolver. Valid values are between `0` and `2000`.
func (o ResolverOutput) MaxBatchSize() pulumix.Output[*int] {
	value := pulumix.Apply[Resolver](o, func(v Resolver) pulumix.Output[*int] { return v.MaxBatchSize })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The caching configuration for the resolver. See Pipeline Config.
func (o ResolverOutput) PipelineConfig() pulumix.GPtrOutput[ResolverPipelineConfig, ResolverPipelineConfigOutput] {
	value := pulumix.Apply[Resolver](o, func(v Resolver) pulumix.GPtrOutput[ResolverPipelineConfig, ResolverPipelineConfigOutput] {
		return v.PipelineConfig
	})
	unwrapped := pulumix.Flatten[*ResolverPipelineConfig, pulumix.GPtrOutput[ResolverPipelineConfig, ResolverPipelineConfigOutput]](value)
	return pulumix.GPtrOutput[ResolverPipelineConfig, ResolverPipelineConfigOutput]{OutputState: unwrapped.OutputState}
}

// Request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
func (o ResolverOutput) RequestTemplate() pulumix.Output[*string] {
	value := pulumix.Apply[Resolver](o, func(v Resolver) pulumix.Output[*string] { return v.RequestTemplate })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
func (o ResolverOutput) ResponseTemplate() pulumix.Output[*string] {
	value := pulumix.Apply[Resolver](o, func(v Resolver) pulumix.Output[*string] { return v.ResponseTemplate })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See Runtime.
func (o ResolverOutput) Runtime() pulumix.GPtrOutput[ResolverRuntime, ResolverRuntimeOutput] {
	value := pulumix.Apply[Resolver](o, func(v Resolver) pulumix.GPtrOutput[ResolverRuntime, ResolverRuntimeOutput] { return v.Runtime })
	unwrapped := pulumix.Flatten[*ResolverRuntime, pulumix.GPtrOutput[ResolverRuntime, ResolverRuntimeOutput]](value)
	return pulumix.GPtrOutput[ResolverRuntime, ResolverRuntimeOutput]{OutputState: unwrapped.OutputState}
}

// Describes a Sync configuration for a resolver. See Sync Config.
func (o ResolverOutput) SyncConfig() pulumix.GPtrOutput[ResolverSyncConfig, ResolverSyncConfigOutput] {
	value := pulumix.Apply[Resolver](o, func(v Resolver) pulumix.GPtrOutput[ResolverSyncConfig, ResolverSyncConfigOutput] { return v.SyncConfig })
	unwrapped := pulumix.Flatten[*ResolverSyncConfig, pulumix.GPtrOutput[ResolverSyncConfig, ResolverSyncConfigOutput]](value)
	return pulumix.GPtrOutput[ResolverSyncConfig, ResolverSyncConfigOutput]{OutputState: unwrapped.OutputState}
}

// Type name from the schema defined in the GraphQL API.
func (o ResolverOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Resolver](o, func(v Resolver) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ResolverOutput{})
}
