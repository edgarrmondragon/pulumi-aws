// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package costexplorer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AnomalySubscriptionSubscriber struct {
	// The address of the subscriber. If type is `SNS`, this will be the arn of the sns topic. If type is `EMAIL`, this will be the destination email address.
	Address string `pulumi:"address"`
	// The type of subscription. Valid Values: `SNS` | `EMAIL`.
	Type string `pulumi:"type"`
}

type AnomalySubscriptionSubscriberArgs struct {
	// The address of the subscriber. If type is `SNS`, this will be the arn of the sns topic. If type is `EMAIL`, this will be the destination email address.
	Address pulumix.Input[string] `pulumi:"address"`
	// The type of subscription. Valid Values: `SNS` | `EMAIL`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (AnomalySubscriptionSubscriberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionSubscriber)(nil)).Elem()
}

func (i AnomalySubscriptionSubscriberArgs) ToAnomalySubscriptionSubscriberOutput() AnomalySubscriptionSubscriberOutput {
	return i.ToAnomalySubscriptionSubscriberOutputWithContext(context.Background())
}

func (i AnomalySubscriptionSubscriberArgs) ToAnomalySubscriptionSubscriberOutputWithContext(ctx context.Context) AnomalySubscriptionSubscriberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionSubscriberOutput)
}

func (i *AnomalySubscriptionSubscriberArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionSubscriberArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionSubscriberOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionSubscriberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionSubscriber)(nil)).Elem()
}

func (o AnomalySubscriptionSubscriberOutput) ToAnomalySubscriptionSubscriberOutput() AnomalySubscriptionSubscriberOutput {
	return o
}

func (o AnomalySubscriptionSubscriberOutput) ToAnomalySubscriptionSubscriberOutputWithContext(ctx context.Context) AnomalySubscriptionSubscriberOutput {
	return o
}

func (o AnomalySubscriptionSubscriberOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionSubscriber] {
	return pulumix.Output[AnomalySubscriptionSubscriber]{
		OutputState: o.OutputState,
	}
}

// The address of the subscriber. If type is `SNS`, this will be the arn of the sns topic. If type is `EMAIL`, this will be the destination email address.
func (o AnomalySubscriptionSubscriberOutput) Address() pulumix.Output[string] {
	return pulumix.Apply[AnomalySubscriptionSubscriber](o, func(v AnomalySubscriptionSubscriber) string { return v.Address })
}

// The type of subscription. Valid Values: `SNS` | `EMAIL`.
func (o AnomalySubscriptionSubscriberOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[AnomalySubscriptionSubscriber](o, func(v AnomalySubscriptionSubscriber) string { return v.Type })
}

type AnomalySubscriptionThresholdExpression struct {
	// Return results that match both Dimension objects.
	Ands []AnomalySubscriptionThresholdExpressionAnd `pulumi:"ands"`
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory *AnomalySubscriptionThresholdExpressionCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension *AnomalySubscriptionThresholdExpressionDimension `pulumi:"dimension"`
	// Return results that match both Dimension object.
	Not *AnomalySubscriptionThresholdExpressionNot `pulumi:"not"`
	// Return results that match both Dimension object.
	Ors []AnomalySubscriptionThresholdExpressionOr `pulumi:"ors"`
	// Configuration block for the specific Tag to use for. See Tags below.
	Tags *AnomalySubscriptionThresholdExpressionTags `pulumi:"tags"`
}

type AnomalySubscriptionThresholdExpressionArgs struct {
	// Return results that match both Dimension objects.
	Ands pulumix.Input[[]*AnomalySubscriptionThresholdExpressionAndArgs] `pulumi:"ands"`
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory pulumix.Input[*AnomalySubscriptionThresholdExpressionCostCategoryArgs] `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension pulumix.Input[*AnomalySubscriptionThresholdExpressionDimensionArgs] `pulumi:"dimension"`
	// Return results that match both Dimension object.
	Not pulumix.Input[*AnomalySubscriptionThresholdExpressionNotArgs] `pulumi:"not"`
	// Return results that match both Dimension object.
	Ors pulumix.Input[[]*AnomalySubscriptionThresholdExpressionOrArgs] `pulumi:"ors"`
	// Configuration block for the specific Tag to use for. See Tags below.
	Tags pulumix.Input[*AnomalySubscriptionThresholdExpressionTagsArgs] `pulumi:"tags"`
}

func (AnomalySubscriptionThresholdExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpression)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionArgs) ToAnomalySubscriptionThresholdExpressionOutput() AnomalySubscriptionThresholdExpressionOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionArgs) ToAnomalySubscriptionThresholdExpressionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOutput)
}

func (i *AnomalySubscriptionThresholdExpressionArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpression)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionOutput) ToAnomalySubscriptionThresholdExpressionOutput() AnomalySubscriptionThresholdExpressionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOutput) ToAnomalySubscriptionThresholdExpressionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpression] {
	return pulumix.Output[AnomalySubscriptionThresholdExpression]{
		OutputState: o.OutputState,
	}
}

// Return results that match both Dimension objects.
func (o AnomalySubscriptionThresholdExpressionOutput) Ands() pulumix.GArrayOutput[AnomalySubscriptionThresholdExpressionAnd, AnomalySubscriptionThresholdExpressionAndOutput] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpression](o, func(v AnomalySubscriptionThresholdExpression) []AnomalySubscriptionThresholdExpressionAnd {
		return v.Ands
	})
	return pulumix.GArrayOutput[AnomalySubscriptionThresholdExpressionAnd, AnomalySubscriptionThresholdExpressionAndOutput]{OutputState: value.OutputState}
}

// Configuration block for the filter that's based on  values. See Cost Category below.
func (o AnomalySubscriptionThresholdExpressionOutput) CostCategory() pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionCostCategory, AnomalySubscriptionThresholdExpressionCostCategoryOutput] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpression](o, func(v AnomalySubscriptionThresholdExpression) *AnomalySubscriptionThresholdExpressionCostCategory {
		return v.CostCategory
	})
	return pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionCostCategory, AnomalySubscriptionThresholdExpressionCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific Dimension to use for.
func (o AnomalySubscriptionThresholdExpressionOutput) Dimension() pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionDimension, AnomalySubscriptionThresholdExpressionDimensionOutput] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpression](o, func(v AnomalySubscriptionThresholdExpression) *AnomalySubscriptionThresholdExpressionDimension {
		return v.Dimension
	})
	return pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionDimension, AnomalySubscriptionThresholdExpressionDimensionOutput]{OutputState: value.OutputState}
}

// Return results that match both Dimension object.
func (o AnomalySubscriptionThresholdExpressionOutput) Not() pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionNot, AnomalySubscriptionThresholdExpressionNotOutput] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpression](o, func(v AnomalySubscriptionThresholdExpression) *AnomalySubscriptionThresholdExpressionNot {
		return v.Not
	})
	return pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionNot, AnomalySubscriptionThresholdExpressionNotOutput]{OutputState: value.OutputState}
}

// Return results that match both Dimension object.
func (o AnomalySubscriptionThresholdExpressionOutput) Ors() pulumix.GArrayOutput[AnomalySubscriptionThresholdExpressionOr, AnomalySubscriptionThresholdExpressionOrOutput] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpression](o, func(v AnomalySubscriptionThresholdExpression) []AnomalySubscriptionThresholdExpressionOr {
		return v.Ors
	})
	return pulumix.GArrayOutput[AnomalySubscriptionThresholdExpressionOr, AnomalySubscriptionThresholdExpressionOrOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific Tag to use for. See Tags below.
func (o AnomalySubscriptionThresholdExpressionOutput) Tags() pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionTags, AnomalySubscriptionThresholdExpressionTagsOutput] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpression](o, func(v AnomalySubscriptionThresholdExpression) *AnomalySubscriptionThresholdExpressionTags {
		return v.Tags
	})
	return pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionTags, AnomalySubscriptionThresholdExpressionTagsOutput]{OutputState: value.OutputState}
}

type AnomalySubscriptionThresholdExpressionAnd struct {
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory *AnomalySubscriptionThresholdExpressionAndCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension *AnomalySubscriptionThresholdExpressionAndDimension `pulumi:"dimension"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags *AnomalySubscriptionThresholdExpressionAndTags `pulumi:"tags"`
}

type AnomalySubscriptionThresholdExpressionAndArgs struct {
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory pulumix.Input[*AnomalySubscriptionThresholdExpressionAndCostCategoryArgs] `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension pulumix.Input[*AnomalySubscriptionThresholdExpressionAndDimensionArgs] `pulumi:"dimension"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[*AnomalySubscriptionThresholdExpressionAndTagsArgs] `pulumi:"tags"`
}

func (AnomalySubscriptionThresholdExpressionAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAnd)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionAndArgs) ToAnomalySubscriptionThresholdExpressionAndOutput() AnomalySubscriptionThresholdExpressionAndOutput {
	return i.ToAnomalySubscriptionThresholdExpressionAndOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionAndArgs) ToAnomalySubscriptionThresholdExpressionAndOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionAndOutput)
}

func (i *AnomalySubscriptionThresholdExpressionAndArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionAndArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionAndOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAnd)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionAndOutput) ToAnomalySubscriptionThresholdExpressionAndOutput() AnomalySubscriptionThresholdExpressionAndOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndOutput) ToAnomalySubscriptionThresholdExpressionAndOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpressionAnd] {
	return pulumix.Output[AnomalySubscriptionThresholdExpressionAnd]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the filter that's based on  values. See Cost Category below.
func (o AnomalySubscriptionThresholdExpressionAndOutput) CostCategory() pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionAndCostCategory, AnomalySubscriptionThresholdExpressionAndCostCategoryOutput] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionAnd](o, func(v AnomalySubscriptionThresholdExpressionAnd) *AnomalySubscriptionThresholdExpressionAndCostCategory {
		return v.CostCategory
	})
	return pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionAndCostCategory, AnomalySubscriptionThresholdExpressionAndCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific Dimension to use for.
func (o AnomalySubscriptionThresholdExpressionAndOutput) Dimension() pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionAndDimension, AnomalySubscriptionThresholdExpressionAndDimensionOutput] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionAnd](o, func(v AnomalySubscriptionThresholdExpressionAnd) *AnomalySubscriptionThresholdExpressionAndDimension {
		return v.Dimension
	})
	return pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionAndDimension, AnomalySubscriptionThresholdExpressionAndDimensionOutput]{OutputState: value.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AnomalySubscriptionThresholdExpressionAndOutput) Tags() pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionAndTags, AnomalySubscriptionThresholdExpressionAndTagsOutput] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionAnd](o, func(v AnomalySubscriptionThresholdExpressionAnd) *AnomalySubscriptionThresholdExpressionAndTags {
		return v.Tags
	})
	return pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionAndTags, AnomalySubscriptionThresholdExpressionAndTagsOutput]{OutputState: value.OutputState}
}

type AnomalySubscriptionThresholdExpressionAndCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type AnomalySubscriptionThresholdExpressionAndCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionAndCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndCostCategory)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionAndCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionAndCostCategoryOutput() AnomalySubscriptionThresholdExpressionAndCostCategoryOutput {
	return i.ToAnomalySubscriptionThresholdExpressionAndCostCategoryOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionAndCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionAndCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionAndCostCategoryOutput)
}

func (i *AnomalySubscriptionThresholdExpressionAndCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionAndCostCategoryArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionAndCostCategoryOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionAndCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndCostCategory)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionAndCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionAndCostCategoryOutput() AnomalySubscriptionThresholdExpressionAndCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionAndCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpressionAndCostCategory] {
	return pulumix.Output[AnomalySubscriptionThresholdExpressionAndCostCategory]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionAndCostCategoryOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[AnomalySubscriptionThresholdExpressionAndCostCategory](o, func(v AnomalySubscriptionThresholdExpressionAndCostCategory) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionAndCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionAndCostCategory](o, func(v AnomalySubscriptionThresholdExpressionAndCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionAndCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionAndCostCategory](o, func(v AnomalySubscriptionThresholdExpressionAndCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type AnomalySubscriptionThresholdExpressionAndDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type AnomalySubscriptionThresholdExpressionAndDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionAndDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndDimension)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionAndDimensionArgs) ToAnomalySubscriptionThresholdExpressionAndDimensionOutput() AnomalySubscriptionThresholdExpressionAndDimensionOutput {
	return i.ToAnomalySubscriptionThresholdExpressionAndDimensionOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionAndDimensionArgs) ToAnomalySubscriptionThresholdExpressionAndDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionAndDimensionOutput)
}

func (i *AnomalySubscriptionThresholdExpressionAndDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionAndDimensionArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionAndDimensionOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionAndDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndDimension)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionAndDimensionOutput) ToAnomalySubscriptionThresholdExpressionAndDimensionOutput() AnomalySubscriptionThresholdExpressionAndDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndDimensionOutput) ToAnomalySubscriptionThresholdExpressionAndDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpressionAndDimension] {
	return pulumix.Output[AnomalySubscriptionThresholdExpressionAndDimension]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionAndDimensionOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[AnomalySubscriptionThresholdExpressionAndDimension](o, func(v AnomalySubscriptionThresholdExpressionAndDimension) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionAndDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionAndDimension](o, func(v AnomalySubscriptionThresholdExpressionAndDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionAndDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionAndDimension](o, func(v AnomalySubscriptionThresholdExpressionAndDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type AnomalySubscriptionThresholdExpressionAndTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type AnomalySubscriptionThresholdExpressionAndTagsArgs struct {
	// Key for the tag.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionAndTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndTags)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionAndTagsArgs) ToAnomalySubscriptionThresholdExpressionAndTagsOutput() AnomalySubscriptionThresholdExpressionAndTagsOutput {
	return i.ToAnomalySubscriptionThresholdExpressionAndTagsOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionAndTagsArgs) ToAnomalySubscriptionThresholdExpressionAndTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionAndTagsOutput)
}

func (i *AnomalySubscriptionThresholdExpressionAndTagsArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionAndTagsArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionAndTagsOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionAndTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndTags)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionAndTagsOutput) ToAnomalySubscriptionThresholdExpressionAndTagsOutput() AnomalySubscriptionThresholdExpressionAndTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndTagsOutput) ToAnomalySubscriptionThresholdExpressionAndTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndTagsOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpressionAndTags] {
	return pulumix.Output[AnomalySubscriptionThresholdExpressionAndTags]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o AnomalySubscriptionThresholdExpressionAndTagsOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[AnomalySubscriptionThresholdExpressionAndTags](o, func(v AnomalySubscriptionThresholdExpressionAndTags) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionAndTagsOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionAndTags](o, func(v AnomalySubscriptionThresholdExpressionAndTags) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionAndTagsOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionAndTags](o, func(v AnomalySubscriptionThresholdExpressionAndTags) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type AnomalySubscriptionThresholdExpressionCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type AnomalySubscriptionThresholdExpressionCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionCostCategory)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionCostCategoryOutput() AnomalySubscriptionThresholdExpressionCostCategoryOutput {
	return i.ToAnomalySubscriptionThresholdExpressionCostCategoryOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionCostCategoryOutput)
}

func (i *AnomalySubscriptionThresholdExpressionCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionCostCategoryArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionCostCategoryOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionCostCategory)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionCostCategoryOutput() AnomalySubscriptionThresholdExpressionCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpressionCostCategory] {
	return pulumix.Output[AnomalySubscriptionThresholdExpressionCostCategory]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionCostCategoryOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[AnomalySubscriptionThresholdExpressionCostCategory](o, func(v AnomalySubscriptionThresholdExpressionCostCategory) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionCostCategory](o, func(v AnomalySubscriptionThresholdExpressionCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionCostCategory](o, func(v AnomalySubscriptionThresholdExpressionCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type AnomalySubscriptionThresholdExpressionDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type AnomalySubscriptionThresholdExpressionDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionDimension)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionDimensionArgs) ToAnomalySubscriptionThresholdExpressionDimensionOutput() AnomalySubscriptionThresholdExpressionDimensionOutput {
	return i.ToAnomalySubscriptionThresholdExpressionDimensionOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionDimensionArgs) ToAnomalySubscriptionThresholdExpressionDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionDimensionOutput)
}

func (i *AnomalySubscriptionThresholdExpressionDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionDimensionArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionDimensionOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionDimension)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionDimensionOutput) ToAnomalySubscriptionThresholdExpressionDimensionOutput() AnomalySubscriptionThresholdExpressionDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionDimensionOutput) ToAnomalySubscriptionThresholdExpressionDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpressionDimension] {
	return pulumix.Output[AnomalySubscriptionThresholdExpressionDimension]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionDimensionOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[AnomalySubscriptionThresholdExpressionDimension](o, func(v AnomalySubscriptionThresholdExpressionDimension) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionDimension](o, func(v AnomalySubscriptionThresholdExpressionDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionDimension](o, func(v AnomalySubscriptionThresholdExpressionDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type AnomalySubscriptionThresholdExpressionNot struct {
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory *AnomalySubscriptionThresholdExpressionNotCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension *AnomalySubscriptionThresholdExpressionNotDimension `pulumi:"dimension"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags *AnomalySubscriptionThresholdExpressionNotTags `pulumi:"tags"`
}

type AnomalySubscriptionThresholdExpressionNotArgs struct {
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory pulumix.Input[*AnomalySubscriptionThresholdExpressionNotCostCategoryArgs] `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension pulumix.Input[*AnomalySubscriptionThresholdExpressionNotDimensionArgs] `pulumi:"dimension"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[*AnomalySubscriptionThresholdExpressionNotTagsArgs] `pulumi:"tags"`
}

func (AnomalySubscriptionThresholdExpressionNotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNot)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionNotArgs) ToAnomalySubscriptionThresholdExpressionNotOutput() AnomalySubscriptionThresholdExpressionNotOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionNotArgs) ToAnomalySubscriptionThresholdExpressionNotOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotOutput)
}

func (i *AnomalySubscriptionThresholdExpressionNotArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionNotArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionNotOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionNotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNot)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionNotOutput) ToAnomalySubscriptionThresholdExpressionNotOutput() AnomalySubscriptionThresholdExpressionNotOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotOutput) ToAnomalySubscriptionThresholdExpressionNotOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpressionNot] {
	return pulumix.Output[AnomalySubscriptionThresholdExpressionNot]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the filter that's based on  values. See Cost Category below.
func (o AnomalySubscriptionThresholdExpressionNotOutput) CostCategory() pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionNotCostCategory, AnomalySubscriptionThresholdExpressionNotCostCategoryOutput] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionNot](o, func(v AnomalySubscriptionThresholdExpressionNot) *AnomalySubscriptionThresholdExpressionNotCostCategory {
		return v.CostCategory
	})
	return pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionNotCostCategory, AnomalySubscriptionThresholdExpressionNotCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific Dimension to use for.
func (o AnomalySubscriptionThresholdExpressionNotOutput) Dimension() pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionNotDimension, AnomalySubscriptionThresholdExpressionNotDimensionOutput] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionNot](o, func(v AnomalySubscriptionThresholdExpressionNot) *AnomalySubscriptionThresholdExpressionNotDimension {
		return v.Dimension
	})
	return pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionNotDimension, AnomalySubscriptionThresholdExpressionNotDimensionOutput]{OutputState: value.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AnomalySubscriptionThresholdExpressionNotOutput) Tags() pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionNotTags, AnomalySubscriptionThresholdExpressionNotTagsOutput] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionNot](o, func(v AnomalySubscriptionThresholdExpressionNot) *AnomalySubscriptionThresholdExpressionNotTags {
		return v.Tags
	})
	return pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionNotTags, AnomalySubscriptionThresholdExpressionNotTagsOutput]{OutputState: value.OutputState}
}

type AnomalySubscriptionThresholdExpressionNotCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type AnomalySubscriptionThresholdExpressionNotCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionNotCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotCostCategory)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionNotCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionNotCostCategoryOutput() AnomalySubscriptionThresholdExpressionNotCostCategoryOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotCostCategoryOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionNotCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionNotCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotCostCategoryOutput)
}

func (i *AnomalySubscriptionThresholdExpressionNotCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionNotCostCategoryArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionNotCostCategoryOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionNotCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotCostCategory)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionNotCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionNotCostCategoryOutput() AnomalySubscriptionThresholdExpressionNotCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionNotCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpressionNotCostCategory] {
	return pulumix.Output[AnomalySubscriptionThresholdExpressionNotCostCategory]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionNotCostCategoryOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[AnomalySubscriptionThresholdExpressionNotCostCategory](o, func(v AnomalySubscriptionThresholdExpressionNotCostCategory) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionNotCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionNotCostCategory](o, func(v AnomalySubscriptionThresholdExpressionNotCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionNotCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionNotCostCategory](o, func(v AnomalySubscriptionThresholdExpressionNotCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type AnomalySubscriptionThresholdExpressionNotDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type AnomalySubscriptionThresholdExpressionNotDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionNotDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotDimension)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionNotDimensionArgs) ToAnomalySubscriptionThresholdExpressionNotDimensionOutput() AnomalySubscriptionThresholdExpressionNotDimensionOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotDimensionOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionNotDimensionArgs) ToAnomalySubscriptionThresholdExpressionNotDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotDimensionOutput)
}

func (i *AnomalySubscriptionThresholdExpressionNotDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionNotDimensionArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionNotDimensionOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionNotDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotDimension)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionNotDimensionOutput) ToAnomalySubscriptionThresholdExpressionNotDimensionOutput() AnomalySubscriptionThresholdExpressionNotDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotDimensionOutput) ToAnomalySubscriptionThresholdExpressionNotDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpressionNotDimension] {
	return pulumix.Output[AnomalySubscriptionThresholdExpressionNotDimension]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionNotDimensionOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[AnomalySubscriptionThresholdExpressionNotDimension](o, func(v AnomalySubscriptionThresholdExpressionNotDimension) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionNotDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionNotDimension](o, func(v AnomalySubscriptionThresholdExpressionNotDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionNotDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionNotDimension](o, func(v AnomalySubscriptionThresholdExpressionNotDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type AnomalySubscriptionThresholdExpressionNotTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type AnomalySubscriptionThresholdExpressionNotTagsArgs struct {
	// Key for the tag.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionNotTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotTags)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionNotTagsArgs) ToAnomalySubscriptionThresholdExpressionNotTagsOutput() AnomalySubscriptionThresholdExpressionNotTagsOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotTagsOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionNotTagsArgs) ToAnomalySubscriptionThresholdExpressionNotTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotTagsOutput)
}

func (i *AnomalySubscriptionThresholdExpressionNotTagsArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionNotTagsArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionNotTagsOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionNotTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotTags)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionNotTagsOutput) ToAnomalySubscriptionThresholdExpressionNotTagsOutput() AnomalySubscriptionThresholdExpressionNotTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotTagsOutput) ToAnomalySubscriptionThresholdExpressionNotTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotTagsOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpressionNotTags] {
	return pulumix.Output[AnomalySubscriptionThresholdExpressionNotTags]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o AnomalySubscriptionThresholdExpressionNotTagsOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[AnomalySubscriptionThresholdExpressionNotTags](o, func(v AnomalySubscriptionThresholdExpressionNotTags) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionNotTagsOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionNotTags](o, func(v AnomalySubscriptionThresholdExpressionNotTags) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionNotTagsOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionNotTags](o, func(v AnomalySubscriptionThresholdExpressionNotTags) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type AnomalySubscriptionThresholdExpressionOr struct {
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory *AnomalySubscriptionThresholdExpressionOrCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension *AnomalySubscriptionThresholdExpressionOrDimension `pulumi:"dimension"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags *AnomalySubscriptionThresholdExpressionOrTags `pulumi:"tags"`
}

type AnomalySubscriptionThresholdExpressionOrArgs struct {
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory pulumix.Input[*AnomalySubscriptionThresholdExpressionOrCostCategoryArgs] `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension pulumix.Input[*AnomalySubscriptionThresholdExpressionOrDimensionArgs] `pulumi:"dimension"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[*AnomalySubscriptionThresholdExpressionOrTagsArgs] `pulumi:"tags"`
}

func (AnomalySubscriptionThresholdExpressionOrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOr)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionOrArgs) ToAnomalySubscriptionThresholdExpressionOrOutput() AnomalySubscriptionThresholdExpressionOrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionOrArgs) ToAnomalySubscriptionThresholdExpressionOrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOrOutput)
}

func (i *AnomalySubscriptionThresholdExpressionOrArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionOrArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionOrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionOrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOr)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionOrOutput) ToAnomalySubscriptionThresholdExpressionOrOutput() AnomalySubscriptionThresholdExpressionOrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrOutput) ToAnomalySubscriptionThresholdExpressionOrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpressionOr] {
	return pulumix.Output[AnomalySubscriptionThresholdExpressionOr]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the filter that's based on  values. See Cost Category below.
func (o AnomalySubscriptionThresholdExpressionOrOutput) CostCategory() pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionOrCostCategory, AnomalySubscriptionThresholdExpressionOrCostCategoryOutput] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionOr](o, func(v AnomalySubscriptionThresholdExpressionOr) *AnomalySubscriptionThresholdExpressionOrCostCategory {
		return v.CostCategory
	})
	return pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionOrCostCategory, AnomalySubscriptionThresholdExpressionOrCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific Dimension to use for.
func (o AnomalySubscriptionThresholdExpressionOrOutput) Dimension() pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionOrDimension, AnomalySubscriptionThresholdExpressionOrDimensionOutput] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionOr](o, func(v AnomalySubscriptionThresholdExpressionOr) *AnomalySubscriptionThresholdExpressionOrDimension {
		return v.Dimension
	})
	return pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionOrDimension, AnomalySubscriptionThresholdExpressionOrDimensionOutput]{OutputState: value.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AnomalySubscriptionThresholdExpressionOrOutput) Tags() pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionOrTags, AnomalySubscriptionThresholdExpressionOrTagsOutput] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionOr](o, func(v AnomalySubscriptionThresholdExpressionOr) *AnomalySubscriptionThresholdExpressionOrTags {
		return v.Tags
	})
	return pulumix.GPtrOutput[AnomalySubscriptionThresholdExpressionOrTags, AnomalySubscriptionThresholdExpressionOrTagsOutput]{OutputState: value.OutputState}
}

type AnomalySubscriptionThresholdExpressionOrCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type AnomalySubscriptionThresholdExpressionOrCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionOrCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrCostCategory)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionOrCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionOrCostCategoryOutput() AnomalySubscriptionThresholdExpressionOrCostCategoryOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOrCostCategoryOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionOrCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionOrCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOrCostCategoryOutput)
}

func (i *AnomalySubscriptionThresholdExpressionOrCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionOrCostCategoryArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionOrCostCategoryOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionOrCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrCostCategory)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionOrCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionOrCostCategoryOutput() AnomalySubscriptionThresholdExpressionOrCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionOrCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpressionOrCostCategory] {
	return pulumix.Output[AnomalySubscriptionThresholdExpressionOrCostCategory]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionOrCostCategoryOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[AnomalySubscriptionThresholdExpressionOrCostCategory](o, func(v AnomalySubscriptionThresholdExpressionOrCostCategory) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionOrCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionOrCostCategory](o, func(v AnomalySubscriptionThresholdExpressionOrCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionOrCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionOrCostCategory](o, func(v AnomalySubscriptionThresholdExpressionOrCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type AnomalySubscriptionThresholdExpressionOrDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type AnomalySubscriptionThresholdExpressionOrDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionOrDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrDimension)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionOrDimensionArgs) ToAnomalySubscriptionThresholdExpressionOrDimensionOutput() AnomalySubscriptionThresholdExpressionOrDimensionOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOrDimensionOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionOrDimensionArgs) ToAnomalySubscriptionThresholdExpressionOrDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOrDimensionOutput)
}

func (i *AnomalySubscriptionThresholdExpressionOrDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionOrDimensionArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionOrDimensionOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionOrDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrDimension)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionOrDimensionOutput) ToAnomalySubscriptionThresholdExpressionOrDimensionOutput() AnomalySubscriptionThresholdExpressionOrDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrDimensionOutput) ToAnomalySubscriptionThresholdExpressionOrDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpressionOrDimension] {
	return pulumix.Output[AnomalySubscriptionThresholdExpressionOrDimension]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionOrDimensionOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[AnomalySubscriptionThresholdExpressionOrDimension](o, func(v AnomalySubscriptionThresholdExpressionOrDimension) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionOrDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionOrDimension](o, func(v AnomalySubscriptionThresholdExpressionOrDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionOrDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionOrDimension](o, func(v AnomalySubscriptionThresholdExpressionOrDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type AnomalySubscriptionThresholdExpressionOrTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type AnomalySubscriptionThresholdExpressionOrTagsArgs struct {
	// Key for the tag.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionOrTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrTags)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionOrTagsArgs) ToAnomalySubscriptionThresholdExpressionOrTagsOutput() AnomalySubscriptionThresholdExpressionOrTagsOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOrTagsOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionOrTagsArgs) ToAnomalySubscriptionThresholdExpressionOrTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOrTagsOutput)
}

func (i *AnomalySubscriptionThresholdExpressionOrTagsArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionOrTagsArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionOrTagsOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionOrTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrTags)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionOrTagsOutput) ToAnomalySubscriptionThresholdExpressionOrTagsOutput() AnomalySubscriptionThresholdExpressionOrTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrTagsOutput) ToAnomalySubscriptionThresholdExpressionOrTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrTagsOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpressionOrTags] {
	return pulumix.Output[AnomalySubscriptionThresholdExpressionOrTags]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o AnomalySubscriptionThresholdExpressionOrTagsOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[AnomalySubscriptionThresholdExpressionOrTags](o, func(v AnomalySubscriptionThresholdExpressionOrTags) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionOrTagsOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionOrTags](o, func(v AnomalySubscriptionThresholdExpressionOrTags) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionOrTagsOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionOrTags](o, func(v AnomalySubscriptionThresholdExpressionOrTags) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type AnomalySubscriptionThresholdExpressionTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type AnomalySubscriptionThresholdExpressionTagsArgs struct {
	// Key for the tag.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionTags)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionTagsArgs) ToAnomalySubscriptionThresholdExpressionTagsOutput() AnomalySubscriptionThresholdExpressionTagsOutput {
	return i.ToAnomalySubscriptionThresholdExpressionTagsOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionTagsArgs) ToAnomalySubscriptionThresholdExpressionTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionTagsOutput)
}

func (i *AnomalySubscriptionThresholdExpressionTagsArgs) ToOutput(ctx context.Context) pulumix.Output[*AnomalySubscriptionThresholdExpressionTagsArgs] {
	return pulumix.Val(i)
}

type AnomalySubscriptionThresholdExpressionTagsOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionTags)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionTagsOutput) ToAnomalySubscriptionThresholdExpressionTagsOutput() AnomalySubscriptionThresholdExpressionTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionTagsOutput) ToAnomalySubscriptionThresholdExpressionTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionTagsOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscriptionThresholdExpressionTags] {
	return pulumix.Output[AnomalySubscriptionThresholdExpressionTags]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o AnomalySubscriptionThresholdExpressionTagsOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[AnomalySubscriptionThresholdExpressionTags](o, func(v AnomalySubscriptionThresholdExpressionTags) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionTagsOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionTags](o, func(v AnomalySubscriptionThresholdExpressionTags) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionTagsOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscriptionThresholdExpressionTags](o, func(v AnomalySubscriptionThresholdExpressionTags) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CostCategoryRule struct {
	// Configuration block for the value the line item is categorized as if the line item contains the matched dimension. See below.
	InheritedValue *CostCategoryRuleInheritedValue `pulumi:"inheritedValue"`
	// Configuration block for the `Expression` object used to categorize costs. See below.
	Rule *CostCategoryRuleRule `pulumi:"rule"`
	// You can define the CostCategoryRule rule type as either `REGULAR` or `INHERITED_VALUE`.
	Type *string `pulumi:"type"`
	// Default value for the cost category.
	Value *string `pulumi:"value"`
}

type CostCategoryRuleArgs struct {
	// Configuration block for the value the line item is categorized as if the line item contains the matched dimension. See below.
	InheritedValue pulumix.Input[*CostCategoryRuleInheritedValueArgs] `pulumi:"inheritedValue"`
	// Configuration block for the `Expression` object used to categorize costs. See below.
	Rule pulumix.Input[*CostCategoryRuleRuleArgs] `pulumi:"rule"`
	// You can define the CostCategoryRule rule type as either `REGULAR` or `INHERITED_VALUE`.
	Type pulumix.Input[*string] `pulumi:"type"`
	// Default value for the cost category.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (CostCategoryRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRule)(nil)).Elem()
}

func (i CostCategoryRuleArgs) ToCostCategoryRuleOutput() CostCategoryRuleOutput {
	return i.ToCostCategoryRuleOutputWithContext(context.Background())
}

func (i CostCategoryRuleArgs) ToCostCategoryRuleOutputWithContext(ctx context.Context) CostCategoryRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleOutput)
}

func (i *CostCategoryRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRule)(nil)).Elem()
}

func (o CostCategoryRuleOutput) ToCostCategoryRuleOutput() CostCategoryRuleOutput {
	return o
}

func (o CostCategoryRuleOutput) ToCostCategoryRuleOutputWithContext(ctx context.Context) CostCategoryRuleOutput {
	return o
}

func (o CostCategoryRuleOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRule] {
	return pulumix.Output[CostCategoryRule]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the value the line item is categorized as if the line item contains the matched dimension. See below.
func (o CostCategoryRuleOutput) InheritedValue() pulumix.GPtrOutput[CostCategoryRuleInheritedValue, CostCategoryRuleInheritedValueOutput] {
	value := pulumix.Apply[CostCategoryRule](o, func(v CostCategoryRule) *CostCategoryRuleInheritedValue { return v.InheritedValue })
	return pulumix.GPtrOutput[CostCategoryRuleInheritedValue, CostCategoryRuleInheritedValueOutput]{OutputState: value.OutputState}
}

// Configuration block for the `Expression` object used to categorize costs. See below.
func (o CostCategoryRuleOutput) Rule() pulumix.GPtrOutput[CostCategoryRuleRule, CostCategoryRuleRuleOutput] {
	value := pulumix.Apply[CostCategoryRule](o, func(v CostCategoryRule) *CostCategoryRuleRule { return v.Rule })
	return pulumix.GPtrOutput[CostCategoryRuleRule, CostCategoryRuleRuleOutput]{OutputState: value.OutputState}
}

// You can define the CostCategoryRule rule type as either `REGULAR` or `INHERITED_VALUE`.
func (o CostCategoryRuleOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRule](o, func(v CostCategoryRule) *string { return v.Type })
}

// Default value for the cost category.
func (o CostCategoryRuleOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRule](o, func(v CostCategoryRule) *string { return v.Value })
}

type CostCategoryRuleInheritedValue struct {
	// Key to extract cost category values.
	DimensionKey *string `pulumi:"dimensionKey"`
	// Name of the dimension that's used to group costs. If you specify `LINKED_ACCOUNT_NAME`, the cost category value is based on account name. If you specify `TAG`, the cost category value will be based on the value of the specified tag key. Valid values are `LINKED_ACCOUNT_NAME`, `TAG`
	DimensionName *string `pulumi:"dimensionName"`
}

type CostCategoryRuleInheritedValueArgs struct {
	// Key to extract cost category values.
	DimensionKey pulumix.Input[*string] `pulumi:"dimensionKey"`
	// Name of the dimension that's used to group costs. If you specify `LINKED_ACCOUNT_NAME`, the cost category value is based on account name. If you specify `TAG`, the cost category value will be based on the value of the specified tag key. Valid values are `LINKED_ACCOUNT_NAME`, `TAG`
	DimensionName pulumix.Input[*string] `pulumi:"dimensionName"`
}

func (CostCategoryRuleInheritedValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleInheritedValue)(nil)).Elem()
}

func (i CostCategoryRuleInheritedValueArgs) ToCostCategoryRuleInheritedValueOutput() CostCategoryRuleInheritedValueOutput {
	return i.ToCostCategoryRuleInheritedValueOutputWithContext(context.Background())
}

func (i CostCategoryRuleInheritedValueArgs) ToCostCategoryRuleInheritedValueOutputWithContext(ctx context.Context) CostCategoryRuleInheritedValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleInheritedValueOutput)
}

func (i *CostCategoryRuleInheritedValueArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleInheritedValueArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleInheritedValueOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleInheritedValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleInheritedValue)(nil)).Elem()
}

func (o CostCategoryRuleInheritedValueOutput) ToCostCategoryRuleInheritedValueOutput() CostCategoryRuleInheritedValueOutput {
	return o
}

func (o CostCategoryRuleInheritedValueOutput) ToCostCategoryRuleInheritedValueOutputWithContext(ctx context.Context) CostCategoryRuleInheritedValueOutput {
	return o
}

func (o CostCategoryRuleInheritedValueOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleInheritedValue] {
	return pulumix.Output[CostCategoryRuleInheritedValue]{
		OutputState: o.OutputState,
	}
}

// Key to extract cost category values.
func (o CostCategoryRuleInheritedValueOutput) DimensionKey() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRuleInheritedValue](o, func(v CostCategoryRuleInheritedValue) *string { return v.DimensionKey })
}

// Name of the dimension that's used to group costs. If you specify `LINKED_ACCOUNT_NAME`, the cost category value is based on account name. If you specify `TAG`, the cost category value will be based on the value of the specified tag key. Valid values are `LINKED_ACCOUNT_NAME`, `TAG`
func (o CostCategoryRuleInheritedValueOutput) DimensionName() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRuleInheritedValue](o, func(v CostCategoryRuleInheritedValue) *string { return v.DimensionName })
}

type CostCategoryRuleRule struct {
	// Return results that match both `Dimension` objects.
	Ands []CostCategoryRuleRuleAnd `pulumi:"ands"`
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *CostCategoryRuleRuleCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *CostCategoryRuleRuleDimension `pulumi:"dimension"`
	// Return results that match both `Dimension` object.
	Not *CostCategoryRuleRuleNot `pulumi:"not"`
	// Return results that match both `Dimension` object.
	Ors []CostCategoryRuleRuleOr `pulumi:"ors"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags *CostCategoryRuleRuleTags `pulumi:"tags"`
}

type CostCategoryRuleRuleArgs struct {
	// Return results that match both `Dimension` objects.
	Ands pulumix.Input[[]*CostCategoryRuleRuleAndArgs] `pulumi:"ands"`
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory pulumix.Input[*CostCategoryRuleRuleCostCategoryArgs] `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension pulumix.Input[*CostCategoryRuleRuleDimensionArgs] `pulumi:"dimension"`
	// Return results that match both `Dimension` object.
	Not pulumix.Input[*CostCategoryRuleRuleNotArgs] `pulumi:"not"`
	// Return results that match both `Dimension` object.
	Ors pulumix.Input[[]*CostCategoryRuleRuleOrArgs] `pulumi:"ors"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags pulumix.Input[*CostCategoryRuleRuleTagsArgs] `pulumi:"tags"`
}

func (CostCategoryRuleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRule)(nil)).Elem()
}

func (i CostCategoryRuleRuleArgs) ToCostCategoryRuleRuleOutput() CostCategoryRuleRuleOutput {
	return i.ToCostCategoryRuleRuleOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleArgs) ToCostCategoryRuleRuleOutputWithContext(ctx context.Context) CostCategoryRuleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOutput)
}

func (i *CostCategoryRuleRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRule)(nil)).Elem()
}

func (o CostCategoryRuleRuleOutput) ToCostCategoryRuleRuleOutput() CostCategoryRuleRuleOutput {
	return o
}

func (o CostCategoryRuleRuleOutput) ToCostCategoryRuleRuleOutputWithContext(ctx context.Context) CostCategoryRuleRuleOutput {
	return o
}

func (o CostCategoryRuleRuleOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRule] {
	return pulumix.Output[CostCategoryRuleRule]{
		OutputState: o.OutputState,
	}
}

// Return results that match both `Dimension` objects.
func (o CostCategoryRuleRuleOutput) Ands() pulumix.GArrayOutput[CostCategoryRuleRuleAnd, CostCategoryRuleRuleAndOutput] {
	value := pulumix.Apply[CostCategoryRuleRule](o, func(v CostCategoryRuleRule) []CostCategoryRuleRuleAnd { return v.Ands })
	return pulumix.GArrayOutput[CostCategoryRuleRuleAnd, CostCategoryRuleRuleAndOutput]{OutputState: value.OutputState}
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o CostCategoryRuleRuleOutput) CostCategory() pulumix.GPtrOutput[CostCategoryRuleRuleCostCategory, CostCategoryRuleRuleCostCategoryOutput] {
	value := pulumix.Apply[CostCategoryRuleRule](o, func(v CostCategoryRuleRule) *CostCategoryRuleRuleCostCategory { return v.CostCategory })
	return pulumix.GPtrOutput[CostCategoryRuleRuleCostCategory, CostCategoryRuleRuleCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o CostCategoryRuleRuleOutput) Dimension() pulumix.GPtrOutput[CostCategoryRuleRuleDimension, CostCategoryRuleRuleDimensionOutput] {
	value := pulumix.Apply[CostCategoryRuleRule](o, func(v CostCategoryRuleRule) *CostCategoryRuleRuleDimension { return v.Dimension })
	return pulumix.GPtrOutput[CostCategoryRuleRuleDimension, CostCategoryRuleRuleDimensionOutput]{OutputState: value.OutputState}
}

// Return results that match both `Dimension` object.
func (o CostCategoryRuleRuleOutput) Not() pulumix.GPtrOutput[CostCategoryRuleRuleNot, CostCategoryRuleRuleNotOutput] {
	value := pulumix.Apply[CostCategoryRuleRule](o, func(v CostCategoryRuleRule) *CostCategoryRuleRuleNot { return v.Not })
	return pulumix.GPtrOutput[CostCategoryRuleRuleNot, CostCategoryRuleRuleNotOutput]{OutputState: value.OutputState}
}

// Return results that match both `Dimension` object.
func (o CostCategoryRuleRuleOutput) Ors() pulumix.GArrayOutput[CostCategoryRuleRuleOr, CostCategoryRuleRuleOrOutput] {
	value := pulumix.Apply[CostCategoryRuleRule](o, func(v CostCategoryRuleRule) []CostCategoryRuleRuleOr { return v.Ors })
	return pulumix.GArrayOutput[CostCategoryRuleRuleOr, CostCategoryRuleRuleOrOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Tag` to use for `Expression`. See below.
func (o CostCategoryRuleRuleOutput) Tags() pulumix.GPtrOutput[CostCategoryRuleRuleTags, CostCategoryRuleRuleTagsOutput] {
	value := pulumix.Apply[CostCategoryRuleRule](o, func(v CostCategoryRuleRule) *CostCategoryRuleRuleTags { return v.Tags })
	return pulumix.GPtrOutput[CostCategoryRuleRuleTags, CostCategoryRuleRuleTagsOutput]{OutputState: value.OutputState}
}

type CostCategoryRuleRuleAnd struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *CostCategoryRuleRuleAndCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *CostCategoryRuleRuleAndDimension `pulumi:"dimension"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags *CostCategoryRuleRuleAndTags `pulumi:"tags"`
}

type CostCategoryRuleRuleAndArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory pulumix.Input[*CostCategoryRuleRuleAndCostCategoryArgs] `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension pulumix.Input[*CostCategoryRuleRuleAndDimensionArgs] `pulumi:"dimension"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[*CostCategoryRuleRuleAndTagsArgs] `pulumi:"tags"`
}

func (CostCategoryRuleRuleAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAnd)(nil)).Elem()
}

func (i CostCategoryRuleRuleAndArgs) ToCostCategoryRuleRuleAndOutput() CostCategoryRuleRuleAndOutput {
	return i.ToCostCategoryRuleRuleAndOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleAndArgs) ToCostCategoryRuleRuleAndOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleAndOutput)
}

func (i *CostCategoryRuleRuleAndArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleAndArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleAndOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAnd)(nil)).Elem()
}

func (o CostCategoryRuleRuleAndOutput) ToCostCategoryRuleRuleAndOutput() CostCategoryRuleRuleAndOutput {
	return o
}

func (o CostCategoryRuleRuleAndOutput) ToCostCategoryRuleRuleAndOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndOutput {
	return o
}

func (o CostCategoryRuleRuleAndOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRuleAnd] {
	return pulumix.Output[CostCategoryRuleRuleAnd]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o CostCategoryRuleRuleAndOutput) CostCategory() pulumix.GPtrOutput[CostCategoryRuleRuleAndCostCategory, CostCategoryRuleRuleAndCostCategoryOutput] {
	value := pulumix.Apply[CostCategoryRuleRuleAnd](o, func(v CostCategoryRuleRuleAnd) *CostCategoryRuleRuleAndCostCategory { return v.CostCategory })
	return pulumix.GPtrOutput[CostCategoryRuleRuleAndCostCategory, CostCategoryRuleRuleAndCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o CostCategoryRuleRuleAndOutput) Dimension() pulumix.GPtrOutput[CostCategoryRuleRuleAndDimension, CostCategoryRuleRuleAndDimensionOutput] {
	value := pulumix.Apply[CostCategoryRuleRuleAnd](o, func(v CostCategoryRuleRuleAnd) *CostCategoryRuleRuleAndDimension { return v.Dimension })
	return pulumix.GPtrOutput[CostCategoryRuleRuleAndDimension, CostCategoryRuleRuleAndDimensionOutput]{OutputState: value.OutputState}
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CostCategoryRuleRuleAndOutput) Tags() pulumix.GPtrOutput[CostCategoryRuleRuleAndTags, CostCategoryRuleRuleAndTagsOutput] {
	value := pulumix.Apply[CostCategoryRuleRuleAnd](o, func(v CostCategoryRuleRuleAnd) *CostCategoryRuleRuleAndTags { return v.Tags })
	return pulumix.GPtrOutput[CostCategoryRuleRuleAndTags, CostCategoryRuleRuleAndTagsOutput]{OutputState: value.OutputState}
}

type CostCategoryRuleRuleAndCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type CostCategoryRuleRuleAndCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (CostCategoryRuleRuleAndCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAndCostCategory)(nil)).Elem()
}

func (i CostCategoryRuleRuleAndCostCategoryArgs) ToCostCategoryRuleRuleAndCostCategoryOutput() CostCategoryRuleRuleAndCostCategoryOutput {
	return i.ToCostCategoryRuleRuleAndCostCategoryOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleAndCostCategoryArgs) ToCostCategoryRuleRuleAndCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleAndCostCategoryOutput)
}

func (i *CostCategoryRuleRuleAndCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleAndCostCategoryArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleAndCostCategoryOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleAndCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAndCostCategory)(nil)).Elem()
}

func (o CostCategoryRuleRuleAndCostCategoryOutput) ToCostCategoryRuleRuleAndCostCategoryOutput() CostCategoryRuleRuleAndCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleAndCostCategoryOutput) ToCostCategoryRuleRuleAndCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleAndCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRuleAndCostCategory] {
	return pulumix.Output[CostCategoryRuleRuleAndCostCategory]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleAndCostCategoryOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRuleRuleAndCostCategory](o, func(v CostCategoryRuleRuleAndCostCategory) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleAndCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleAndCostCategory](o, func(v CostCategoryRuleRuleAndCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleAndCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleAndCostCategory](o, func(v CostCategoryRuleRuleAndCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CostCategoryRuleRuleAndDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type CostCategoryRuleRuleAndDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (CostCategoryRuleRuleAndDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAndDimension)(nil)).Elem()
}

func (i CostCategoryRuleRuleAndDimensionArgs) ToCostCategoryRuleRuleAndDimensionOutput() CostCategoryRuleRuleAndDimensionOutput {
	return i.ToCostCategoryRuleRuleAndDimensionOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleAndDimensionArgs) ToCostCategoryRuleRuleAndDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleAndDimensionOutput)
}

func (i *CostCategoryRuleRuleAndDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleAndDimensionArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleAndDimensionOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleAndDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAndDimension)(nil)).Elem()
}

func (o CostCategoryRuleRuleAndDimensionOutput) ToCostCategoryRuleRuleAndDimensionOutput() CostCategoryRuleRuleAndDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleAndDimensionOutput) ToCostCategoryRuleRuleAndDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleAndDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRuleAndDimension] {
	return pulumix.Output[CostCategoryRuleRuleAndDimension]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleAndDimensionOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRuleRuleAndDimension](o, func(v CostCategoryRuleRuleAndDimension) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleAndDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleAndDimension](o, func(v CostCategoryRuleRuleAndDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleAndDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleAndDimension](o, func(v CostCategoryRuleRuleAndDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CostCategoryRuleRuleAndTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type CostCategoryRuleRuleAndTagsArgs struct {
	// Key for the tag.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (CostCategoryRuleRuleAndTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAndTags)(nil)).Elem()
}

func (i CostCategoryRuleRuleAndTagsArgs) ToCostCategoryRuleRuleAndTagsOutput() CostCategoryRuleRuleAndTagsOutput {
	return i.ToCostCategoryRuleRuleAndTagsOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleAndTagsArgs) ToCostCategoryRuleRuleAndTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleAndTagsOutput)
}

func (i *CostCategoryRuleRuleAndTagsArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleAndTagsArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleAndTagsOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleAndTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAndTags)(nil)).Elem()
}

func (o CostCategoryRuleRuleAndTagsOutput) ToCostCategoryRuleRuleAndTagsOutput() CostCategoryRuleRuleAndTagsOutput {
	return o
}

func (o CostCategoryRuleRuleAndTagsOutput) ToCostCategoryRuleRuleAndTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndTagsOutput {
	return o
}

func (o CostCategoryRuleRuleAndTagsOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRuleAndTags] {
	return pulumix.Output[CostCategoryRuleRuleAndTags]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o CostCategoryRuleRuleAndTagsOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRuleRuleAndTags](o, func(v CostCategoryRuleRuleAndTags) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleAndTagsOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleAndTags](o, func(v CostCategoryRuleRuleAndTags) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleAndTagsOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleAndTags](o, func(v CostCategoryRuleRuleAndTags) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CostCategoryRuleRuleCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type CostCategoryRuleRuleCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (CostCategoryRuleRuleCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleCostCategory)(nil)).Elem()
}

func (i CostCategoryRuleRuleCostCategoryArgs) ToCostCategoryRuleRuleCostCategoryOutput() CostCategoryRuleRuleCostCategoryOutput {
	return i.ToCostCategoryRuleRuleCostCategoryOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleCostCategoryArgs) ToCostCategoryRuleRuleCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleCostCategoryOutput)
}

func (i *CostCategoryRuleRuleCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleCostCategoryArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleCostCategoryOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleCostCategory)(nil)).Elem()
}

func (o CostCategoryRuleRuleCostCategoryOutput) ToCostCategoryRuleRuleCostCategoryOutput() CostCategoryRuleRuleCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleCostCategoryOutput) ToCostCategoryRuleRuleCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRuleCostCategory] {
	return pulumix.Output[CostCategoryRuleRuleCostCategory]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleCostCategoryOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRuleRuleCostCategory](o, func(v CostCategoryRuleRuleCostCategory) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleCostCategory](o, func(v CostCategoryRuleRuleCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleCostCategory](o, func(v CostCategoryRuleRuleCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CostCategoryRuleRuleDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type CostCategoryRuleRuleDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (CostCategoryRuleRuleDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleDimension)(nil)).Elem()
}

func (i CostCategoryRuleRuleDimensionArgs) ToCostCategoryRuleRuleDimensionOutput() CostCategoryRuleRuleDimensionOutput {
	return i.ToCostCategoryRuleRuleDimensionOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleDimensionArgs) ToCostCategoryRuleRuleDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleDimensionOutput)
}

func (i *CostCategoryRuleRuleDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleDimensionArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleDimensionOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleDimension)(nil)).Elem()
}

func (o CostCategoryRuleRuleDimensionOutput) ToCostCategoryRuleRuleDimensionOutput() CostCategoryRuleRuleDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleDimensionOutput) ToCostCategoryRuleRuleDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRuleDimension] {
	return pulumix.Output[CostCategoryRuleRuleDimension]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleDimensionOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRuleRuleDimension](o, func(v CostCategoryRuleRuleDimension) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleDimension](o, func(v CostCategoryRuleRuleDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleDimension](o, func(v CostCategoryRuleRuleDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CostCategoryRuleRuleNot struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *CostCategoryRuleRuleNotCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *CostCategoryRuleRuleNotDimension `pulumi:"dimension"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags *CostCategoryRuleRuleNotTags `pulumi:"tags"`
}

type CostCategoryRuleRuleNotArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory pulumix.Input[*CostCategoryRuleRuleNotCostCategoryArgs] `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension pulumix.Input[*CostCategoryRuleRuleNotDimensionArgs] `pulumi:"dimension"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[*CostCategoryRuleRuleNotTagsArgs] `pulumi:"tags"`
}

func (CostCategoryRuleRuleNotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNot)(nil)).Elem()
}

func (i CostCategoryRuleRuleNotArgs) ToCostCategoryRuleRuleNotOutput() CostCategoryRuleRuleNotOutput {
	return i.ToCostCategoryRuleRuleNotOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleNotArgs) ToCostCategoryRuleRuleNotOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotOutput)
}

func (i *CostCategoryRuleRuleNotArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleNotArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleNotOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleNotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNot)(nil)).Elem()
}

func (o CostCategoryRuleRuleNotOutput) ToCostCategoryRuleRuleNotOutput() CostCategoryRuleRuleNotOutput {
	return o
}

func (o CostCategoryRuleRuleNotOutput) ToCostCategoryRuleRuleNotOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotOutput {
	return o
}

func (o CostCategoryRuleRuleNotOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRuleNot] {
	return pulumix.Output[CostCategoryRuleRuleNot]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o CostCategoryRuleRuleNotOutput) CostCategory() pulumix.GPtrOutput[CostCategoryRuleRuleNotCostCategory, CostCategoryRuleRuleNotCostCategoryOutput] {
	value := pulumix.Apply[CostCategoryRuleRuleNot](o, func(v CostCategoryRuleRuleNot) *CostCategoryRuleRuleNotCostCategory { return v.CostCategory })
	return pulumix.GPtrOutput[CostCategoryRuleRuleNotCostCategory, CostCategoryRuleRuleNotCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o CostCategoryRuleRuleNotOutput) Dimension() pulumix.GPtrOutput[CostCategoryRuleRuleNotDimension, CostCategoryRuleRuleNotDimensionOutput] {
	value := pulumix.Apply[CostCategoryRuleRuleNot](o, func(v CostCategoryRuleRuleNot) *CostCategoryRuleRuleNotDimension { return v.Dimension })
	return pulumix.GPtrOutput[CostCategoryRuleRuleNotDimension, CostCategoryRuleRuleNotDimensionOutput]{OutputState: value.OutputState}
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CostCategoryRuleRuleNotOutput) Tags() pulumix.GPtrOutput[CostCategoryRuleRuleNotTags, CostCategoryRuleRuleNotTagsOutput] {
	value := pulumix.Apply[CostCategoryRuleRuleNot](o, func(v CostCategoryRuleRuleNot) *CostCategoryRuleRuleNotTags { return v.Tags })
	return pulumix.GPtrOutput[CostCategoryRuleRuleNotTags, CostCategoryRuleRuleNotTagsOutput]{OutputState: value.OutputState}
}

type CostCategoryRuleRuleNotCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type CostCategoryRuleRuleNotCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (CostCategoryRuleRuleNotCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNotCostCategory)(nil)).Elem()
}

func (i CostCategoryRuleRuleNotCostCategoryArgs) ToCostCategoryRuleRuleNotCostCategoryOutput() CostCategoryRuleRuleNotCostCategoryOutput {
	return i.ToCostCategoryRuleRuleNotCostCategoryOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleNotCostCategoryArgs) ToCostCategoryRuleRuleNotCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotCostCategoryOutput)
}

func (i *CostCategoryRuleRuleNotCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleNotCostCategoryArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleNotCostCategoryOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleNotCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNotCostCategory)(nil)).Elem()
}

func (o CostCategoryRuleRuleNotCostCategoryOutput) ToCostCategoryRuleRuleNotCostCategoryOutput() CostCategoryRuleRuleNotCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleNotCostCategoryOutput) ToCostCategoryRuleRuleNotCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleNotCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRuleNotCostCategory] {
	return pulumix.Output[CostCategoryRuleRuleNotCostCategory]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleNotCostCategoryOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRuleRuleNotCostCategory](o, func(v CostCategoryRuleRuleNotCostCategory) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleNotCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleNotCostCategory](o, func(v CostCategoryRuleRuleNotCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleNotCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleNotCostCategory](o, func(v CostCategoryRuleRuleNotCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CostCategoryRuleRuleNotDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type CostCategoryRuleRuleNotDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (CostCategoryRuleRuleNotDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNotDimension)(nil)).Elem()
}

func (i CostCategoryRuleRuleNotDimensionArgs) ToCostCategoryRuleRuleNotDimensionOutput() CostCategoryRuleRuleNotDimensionOutput {
	return i.ToCostCategoryRuleRuleNotDimensionOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleNotDimensionArgs) ToCostCategoryRuleRuleNotDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotDimensionOutput)
}

func (i *CostCategoryRuleRuleNotDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleNotDimensionArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleNotDimensionOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleNotDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNotDimension)(nil)).Elem()
}

func (o CostCategoryRuleRuleNotDimensionOutput) ToCostCategoryRuleRuleNotDimensionOutput() CostCategoryRuleRuleNotDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleNotDimensionOutput) ToCostCategoryRuleRuleNotDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleNotDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRuleNotDimension] {
	return pulumix.Output[CostCategoryRuleRuleNotDimension]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleNotDimensionOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRuleRuleNotDimension](o, func(v CostCategoryRuleRuleNotDimension) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleNotDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleNotDimension](o, func(v CostCategoryRuleRuleNotDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleNotDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleNotDimension](o, func(v CostCategoryRuleRuleNotDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CostCategoryRuleRuleNotTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type CostCategoryRuleRuleNotTagsArgs struct {
	// Key for the tag.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (CostCategoryRuleRuleNotTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNotTags)(nil)).Elem()
}

func (i CostCategoryRuleRuleNotTagsArgs) ToCostCategoryRuleRuleNotTagsOutput() CostCategoryRuleRuleNotTagsOutput {
	return i.ToCostCategoryRuleRuleNotTagsOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleNotTagsArgs) ToCostCategoryRuleRuleNotTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotTagsOutput)
}

func (i *CostCategoryRuleRuleNotTagsArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleNotTagsArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleNotTagsOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleNotTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNotTags)(nil)).Elem()
}

func (o CostCategoryRuleRuleNotTagsOutput) ToCostCategoryRuleRuleNotTagsOutput() CostCategoryRuleRuleNotTagsOutput {
	return o
}

func (o CostCategoryRuleRuleNotTagsOutput) ToCostCategoryRuleRuleNotTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotTagsOutput {
	return o
}

func (o CostCategoryRuleRuleNotTagsOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRuleNotTags] {
	return pulumix.Output[CostCategoryRuleRuleNotTags]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o CostCategoryRuleRuleNotTagsOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRuleRuleNotTags](o, func(v CostCategoryRuleRuleNotTags) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleNotTagsOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleNotTags](o, func(v CostCategoryRuleRuleNotTags) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleNotTagsOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleNotTags](o, func(v CostCategoryRuleRuleNotTags) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CostCategoryRuleRuleOr struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *CostCategoryRuleRuleOrCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *CostCategoryRuleRuleOrDimension `pulumi:"dimension"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags *CostCategoryRuleRuleOrTags `pulumi:"tags"`
}

type CostCategoryRuleRuleOrArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory pulumix.Input[*CostCategoryRuleRuleOrCostCategoryArgs] `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension pulumix.Input[*CostCategoryRuleRuleOrDimensionArgs] `pulumi:"dimension"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[*CostCategoryRuleRuleOrTagsArgs] `pulumi:"tags"`
}

func (CostCategoryRuleRuleOrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOr)(nil)).Elem()
}

func (i CostCategoryRuleRuleOrArgs) ToCostCategoryRuleRuleOrOutput() CostCategoryRuleRuleOrOutput {
	return i.ToCostCategoryRuleRuleOrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleOrArgs) ToCostCategoryRuleRuleOrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOrOutput)
}

func (i *CostCategoryRuleRuleOrArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleOrArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleOrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleOrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOr)(nil)).Elem()
}

func (o CostCategoryRuleRuleOrOutput) ToCostCategoryRuleRuleOrOutput() CostCategoryRuleRuleOrOutput {
	return o
}

func (o CostCategoryRuleRuleOrOutput) ToCostCategoryRuleRuleOrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrOutput {
	return o
}

func (o CostCategoryRuleRuleOrOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRuleOr] {
	return pulumix.Output[CostCategoryRuleRuleOr]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o CostCategoryRuleRuleOrOutput) CostCategory() pulumix.GPtrOutput[CostCategoryRuleRuleOrCostCategory, CostCategoryRuleRuleOrCostCategoryOutput] {
	value := pulumix.Apply[CostCategoryRuleRuleOr](o, func(v CostCategoryRuleRuleOr) *CostCategoryRuleRuleOrCostCategory { return v.CostCategory })
	return pulumix.GPtrOutput[CostCategoryRuleRuleOrCostCategory, CostCategoryRuleRuleOrCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o CostCategoryRuleRuleOrOutput) Dimension() pulumix.GPtrOutput[CostCategoryRuleRuleOrDimension, CostCategoryRuleRuleOrDimensionOutput] {
	value := pulumix.Apply[CostCategoryRuleRuleOr](o, func(v CostCategoryRuleRuleOr) *CostCategoryRuleRuleOrDimension { return v.Dimension })
	return pulumix.GPtrOutput[CostCategoryRuleRuleOrDimension, CostCategoryRuleRuleOrDimensionOutput]{OutputState: value.OutputState}
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CostCategoryRuleRuleOrOutput) Tags() pulumix.GPtrOutput[CostCategoryRuleRuleOrTags, CostCategoryRuleRuleOrTagsOutput] {
	value := pulumix.Apply[CostCategoryRuleRuleOr](o, func(v CostCategoryRuleRuleOr) *CostCategoryRuleRuleOrTags { return v.Tags })
	return pulumix.GPtrOutput[CostCategoryRuleRuleOrTags, CostCategoryRuleRuleOrTagsOutput]{OutputState: value.OutputState}
}

type CostCategoryRuleRuleOrCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type CostCategoryRuleRuleOrCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (CostCategoryRuleRuleOrCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOrCostCategory)(nil)).Elem()
}

func (i CostCategoryRuleRuleOrCostCategoryArgs) ToCostCategoryRuleRuleOrCostCategoryOutput() CostCategoryRuleRuleOrCostCategoryOutput {
	return i.ToCostCategoryRuleRuleOrCostCategoryOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleOrCostCategoryArgs) ToCostCategoryRuleRuleOrCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOrCostCategoryOutput)
}

func (i *CostCategoryRuleRuleOrCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleOrCostCategoryArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleOrCostCategoryOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleOrCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOrCostCategory)(nil)).Elem()
}

func (o CostCategoryRuleRuleOrCostCategoryOutput) ToCostCategoryRuleRuleOrCostCategoryOutput() CostCategoryRuleRuleOrCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleOrCostCategoryOutput) ToCostCategoryRuleRuleOrCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleOrCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRuleOrCostCategory] {
	return pulumix.Output[CostCategoryRuleRuleOrCostCategory]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleOrCostCategoryOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRuleRuleOrCostCategory](o, func(v CostCategoryRuleRuleOrCostCategory) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleOrCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleOrCostCategory](o, func(v CostCategoryRuleRuleOrCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleOrCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleOrCostCategory](o, func(v CostCategoryRuleRuleOrCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CostCategoryRuleRuleOrDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type CostCategoryRuleRuleOrDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (CostCategoryRuleRuleOrDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOrDimension)(nil)).Elem()
}

func (i CostCategoryRuleRuleOrDimensionArgs) ToCostCategoryRuleRuleOrDimensionOutput() CostCategoryRuleRuleOrDimensionOutput {
	return i.ToCostCategoryRuleRuleOrDimensionOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleOrDimensionArgs) ToCostCategoryRuleRuleOrDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOrDimensionOutput)
}

func (i *CostCategoryRuleRuleOrDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleOrDimensionArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleOrDimensionOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleOrDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOrDimension)(nil)).Elem()
}

func (o CostCategoryRuleRuleOrDimensionOutput) ToCostCategoryRuleRuleOrDimensionOutput() CostCategoryRuleRuleOrDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleOrDimensionOutput) ToCostCategoryRuleRuleOrDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleOrDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRuleOrDimension] {
	return pulumix.Output[CostCategoryRuleRuleOrDimension]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleOrDimensionOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRuleRuleOrDimension](o, func(v CostCategoryRuleRuleOrDimension) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleOrDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleOrDimension](o, func(v CostCategoryRuleRuleOrDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleOrDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleOrDimension](o, func(v CostCategoryRuleRuleOrDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CostCategoryRuleRuleOrTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type CostCategoryRuleRuleOrTagsArgs struct {
	// Key for the tag.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (CostCategoryRuleRuleOrTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOrTags)(nil)).Elem()
}

func (i CostCategoryRuleRuleOrTagsArgs) ToCostCategoryRuleRuleOrTagsOutput() CostCategoryRuleRuleOrTagsOutput {
	return i.ToCostCategoryRuleRuleOrTagsOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleOrTagsArgs) ToCostCategoryRuleRuleOrTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOrTagsOutput)
}

func (i *CostCategoryRuleRuleOrTagsArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleOrTagsArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleOrTagsOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleOrTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOrTags)(nil)).Elem()
}

func (o CostCategoryRuleRuleOrTagsOutput) ToCostCategoryRuleRuleOrTagsOutput() CostCategoryRuleRuleOrTagsOutput {
	return o
}

func (o CostCategoryRuleRuleOrTagsOutput) ToCostCategoryRuleRuleOrTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrTagsOutput {
	return o
}

func (o CostCategoryRuleRuleOrTagsOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRuleOrTags] {
	return pulumix.Output[CostCategoryRuleRuleOrTags]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o CostCategoryRuleRuleOrTagsOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRuleRuleOrTags](o, func(v CostCategoryRuleRuleOrTags) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleOrTagsOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleOrTags](o, func(v CostCategoryRuleRuleOrTags) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleOrTagsOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleOrTags](o, func(v CostCategoryRuleRuleOrTags) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CostCategoryRuleRuleTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type CostCategoryRuleRuleTagsArgs struct {
	// Key for the tag.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (CostCategoryRuleRuleTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleTags)(nil)).Elem()
}

func (i CostCategoryRuleRuleTagsArgs) ToCostCategoryRuleRuleTagsOutput() CostCategoryRuleRuleTagsOutput {
	return i.ToCostCategoryRuleRuleTagsOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleTagsArgs) ToCostCategoryRuleRuleTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleTagsOutput)
}

func (i *CostCategoryRuleRuleTagsArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategoryRuleRuleTagsArgs] {
	return pulumix.Val(i)
}

type CostCategoryRuleRuleTagsOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleTags)(nil)).Elem()
}

func (o CostCategoryRuleRuleTagsOutput) ToCostCategoryRuleRuleTagsOutput() CostCategoryRuleRuleTagsOutput {
	return o
}

func (o CostCategoryRuleRuleTagsOutput) ToCostCategoryRuleRuleTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleTagsOutput {
	return o
}

func (o CostCategoryRuleRuleTagsOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategoryRuleRuleTags] {
	return pulumix.Output[CostCategoryRuleRuleTags]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o CostCategoryRuleRuleTagsOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[CostCategoryRuleRuleTags](o, func(v CostCategoryRuleRuleTags) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleTagsOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleTags](o, func(v CostCategoryRuleRuleTags) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleTagsOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategoryRuleRuleTags](o, func(v CostCategoryRuleRuleTags) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CostCategorySplitChargeRule struct {
	// Method that's used to define how to split your source costs across your targets. Valid values are `FIXED`, `PROPORTIONAL`, `EVEN`
	Method string `pulumi:"method"`
	// Configuration block for the parameters for a split charge method. This is only required for the `FIXED` method. See below.
	Parameters []CostCategorySplitChargeRuleParameter `pulumi:"parameters"`
	// Cost Category value that you want to split.
	Source string `pulumi:"source"`
	// Cost Category values that you want to split costs across. These values can't be used as a source in other split charge rules.
	Targets []string `pulumi:"targets"`
}

type CostCategorySplitChargeRuleArgs struct {
	// Method that's used to define how to split your source costs across your targets. Valid values are `FIXED`, `PROPORTIONAL`, `EVEN`
	Method pulumix.Input[string] `pulumi:"method"`
	// Configuration block for the parameters for a split charge method. This is only required for the `FIXED` method. See below.
	Parameters pulumix.Input[[]*CostCategorySplitChargeRuleParameterArgs] `pulumi:"parameters"`
	// Cost Category value that you want to split.
	Source pulumix.Input[string] `pulumi:"source"`
	// Cost Category values that you want to split costs across. These values can't be used as a source in other split charge rules.
	Targets pulumix.Input[[]string] `pulumi:"targets"`
}

func (CostCategorySplitChargeRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategorySplitChargeRule)(nil)).Elem()
}

func (i CostCategorySplitChargeRuleArgs) ToCostCategorySplitChargeRuleOutput() CostCategorySplitChargeRuleOutput {
	return i.ToCostCategorySplitChargeRuleOutputWithContext(context.Background())
}

func (i CostCategorySplitChargeRuleArgs) ToCostCategorySplitChargeRuleOutputWithContext(ctx context.Context) CostCategorySplitChargeRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategorySplitChargeRuleOutput)
}

func (i *CostCategorySplitChargeRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategorySplitChargeRuleArgs] {
	return pulumix.Val(i)
}

type CostCategorySplitChargeRuleOutput struct{ *pulumi.OutputState }

func (CostCategorySplitChargeRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategorySplitChargeRule)(nil)).Elem()
}

func (o CostCategorySplitChargeRuleOutput) ToCostCategorySplitChargeRuleOutput() CostCategorySplitChargeRuleOutput {
	return o
}

func (o CostCategorySplitChargeRuleOutput) ToCostCategorySplitChargeRuleOutputWithContext(ctx context.Context) CostCategorySplitChargeRuleOutput {
	return o
}

func (o CostCategorySplitChargeRuleOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategorySplitChargeRule] {
	return pulumix.Output[CostCategorySplitChargeRule]{
		OutputState: o.OutputState,
	}
}

// Method that's used to define how to split your source costs across your targets. Valid values are `FIXED`, `PROPORTIONAL`, `EVEN`
func (o CostCategorySplitChargeRuleOutput) Method() pulumix.Output[string] {
	return pulumix.Apply[CostCategorySplitChargeRule](o, func(v CostCategorySplitChargeRule) string { return v.Method })
}

// Configuration block for the parameters for a split charge method. This is only required for the `FIXED` method. See below.
func (o CostCategorySplitChargeRuleOutput) Parameters() pulumix.GArrayOutput[CostCategorySplitChargeRuleParameter, CostCategorySplitChargeRuleParameterOutput] {
	value := pulumix.Apply[CostCategorySplitChargeRule](o, func(v CostCategorySplitChargeRule) []CostCategorySplitChargeRuleParameter { return v.Parameters })
	return pulumix.GArrayOutput[CostCategorySplitChargeRuleParameter, CostCategorySplitChargeRuleParameterOutput]{OutputState: value.OutputState}
}

// Cost Category value that you want to split.
func (o CostCategorySplitChargeRuleOutput) Source() pulumix.Output[string] {
	return pulumix.Apply[CostCategorySplitChargeRule](o, func(v CostCategorySplitChargeRule) string { return v.Source })
}

// Cost Category values that you want to split costs across. These values can't be used as a source in other split charge rules.
func (o CostCategorySplitChargeRuleOutput) Targets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategorySplitChargeRule](o, func(v CostCategorySplitChargeRule) []string { return v.Targets })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CostCategorySplitChargeRuleParameter struct {
	// Parameter type.
	Type *string `pulumi:"type"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

type CostCategorySplitChargeRuleParameterArgs struct {
	// Parameter type.
	Type pulumix.Input[*string] `pulumi:"type"`
	// Parameter values.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (CostCategorySplitChargeRuleParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategorySplitChargeRuleParameter)(nil)).Elem()
}

func (i CostCategorySplitChargeRuleParameterArgs) ToCostCategorySplitChargeRuleParameterOutput() CostCategorySplitChargeRuleParameterOutput {
	return i.ToCostCategorySplitChargeRuleParameterOutputWithContext(context.Background())
}

func (i CostCategorySplitChargeRuleParameterArgs) ToCostCategorySplitChargeRuleParameterOutputWithContext(ctx context.Context) CostCategorySplitChargeRuleParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategorySplitChargeRuleParameterOutput)
}

func (i *CostCategorySplitChargeRuleParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*CostCategorySplitChargeRuleParameterArgs] {
	return pulumix.Val(i)
}

type CostCategorySplitChargeRuleParameterOutput struct{ *pulumi.OutputState }

func (CostCategorySplitChargeRuleParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategorySplitChargeRuleParameter)(nil)).Elem()
}

func (o CostCategorySplitChargeRuleParameterOutput) ToCostCategorySplitChargeRuleParameterOutput() CostCategorySplitChargeRuleParameterOutput {
	return o
}

func (o CostCategorySplitChargeRuleParameterOutput) ToCostCategorySplitChargeRuleParameterOutputWithContext(ctx context.Context) CostCategorySplitChargeRuleParameterOutput {
	return o
}

func (o CostCategorySplitChargeRuleParameterOutput) ToOutput(ctx context.Context) pulumix.Output[CostCategorySplitChargeRuleParameter] {
	return pulumix.Output[CostCategorySplitChargeRuleParameter]{
		OutputState: o.OutputState,
	}
}

// Parameter type.
func (o CostCategorySplitChargeRuleParameterOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[CostCategorySplitChargeRuleParameter](o, func(v CostCategorySplitChargeRuleParameter) *string { return v.Type })
}

// Parameter values.
func (o CostCategorySplitChargeRuleParameterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CostCategorySplitChargeRuleParameter](o, func(v CostCategorySplitChargeRuleParameter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCostCategoryRule struct {
	// Configuration block for the value the line item is categorized as if the line item contains the matched dimension. See below.
	InheritedValues []GetCostCategoryRuleInheritedValue `pulumi:"inheritedValues"`
	// Configuration block for the `Expression` object used to categorize costs. See below.
	Rules []GetCostCategoryRuleRule `pulumi:"rules"`
	// Parameter type.
	Type string `pulumi:"type"`
	// Default value for the cost category.
	Value string `pulumi:"value"`
}

type GetCostCategoryRuleArgs struct {
	// Configuration block for the value the line item is categorized as if the line item contains the matched dimension. See below.
	InheritedValues pulumix.Input[[]*GetCostCategoryRuleInheritedValueArgs] `pulumi:"inheritedValues"`
	// Configuration block for the `Expression` object used to categorize costs. See below.
	Rules pulumix.Input[[]*GetCostCategoryRuleRuleArgs] `pulumi:"rules"`
	// Parameter type.
	Type pulumix.Input[string] `pulumi:"type"`
	// Default value for the cost category.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetCostCategoryRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRule)(nil)).Elem()
}

func (i GetCostCategoryRuleArgs) ToGetCostCategoryRuleOutput() GetCostCategoryRuleOutput {
	return i.ToGetCostCategoryRuleOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleArgs) ToGetCostCategoryRuleOutputWithContext(ctx context.Context) GetCostCategoryRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleOutput)
}

func (i *GetCostCategoryRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRule)(nil)).Elem()
}

func (o GetCostCategoryRuleOutput) ToGetCostCategoryRuleOutput() GetCostCategoryRuleOutput {
	return o
}

func (o GetCostCategoryRuleOutput) ToGetCostCategoryRuleOutputWithContext(ctx context.Context) GetCostCategoryRuleOutput {
	return o
}

func (o GetCostCategoryRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRule] {
	return pulumix.Output[GetCostCategoryRule]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the value the line item is categorized as if the line item contains the matched dimension. See below.
func (o GetCostCategoryRuleOutput) InheritedValues() pulumix.GArrayOutput[GetCostCategoryRuleInheritedValue, GetCostCategoryRuleInheritedValueOutput] {
	value := pulumix.Apply[GetCostCategoryRule](o, func(v GetCostCategoryRule) []GetCostCategoryRuleInheritedValue { return v.InheritedValues })
	return pulumix.GArrayOutput[GetCostCategoryRuleInheritedValue, GetCostCategoryRuleInheritedValueOutput]{OutputState: value.OutputState}
}

// Configuration block for the `Expression` object used to categorize costs. See below.
func (o GetCostCategoryRuleOutput) Rules() pulumix.GArrayOutput[GetCostCategoryRuleRule, GetCostCategoryRuleRuleOutput] {
	value := pulumix.Apply[GetCostCategoryRule](o, func(v GetCostCategoryRule) []GetCostCategoryRuleRule { return v.Rules })
	return pulumix.GArrayOutput[GetCostCategoryRuleRule, GetCostCategoryRuleRuleOutput]{OutputState: value.OutputState}
}

// Parameter type.
func (o GetCostCategoryRuleOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRule](o, func(v GetCostCategoryRule) string { return v.Type })
}

// Default value for the cost category.
func (o GetCostCategoryRuleOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRule](o, func(v GetCostCategoryRule) string { return v.Value })
}

type GetCostCategoryRuleInheritedValue struct {
	// Key to extract cost category values.
	DimensionKey string `pulumi:"dimensionKey"`
	// Name of the dimension that's used to group costs. If you specify `LINKED_ACCOUNT_NAME`, the cost category value is based on account name. If you specify `TAG`, the cost category value will be based on the value of the specified tag key. Valid values are `LINKED_ACCOUNT_NAME`, `TAG`
	DimensionName string `pulumi:"dimensionName"`
}

type GetCostCategoryRuleInheritedValueArgs struct {
	// Key to extract cost category values.
	DimensionKey pulumix.Input[string] `pulumi:"dimensionKey"`
	// Name of the dimension that's used to group costs. If you specify `LINKED_ACCOUNT_NAME`, the cost category value is based on account name. If you specify `TAG`, the cost category value will be based on the value of the specified tag key. Valid values are `LINKED_ACCOUNT_NAME`, `TAG`
	DimensionName pulumix.Input[string] `pulumi:"dimensionName"`
}

func (GetCostCategoryRuleInheritedValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleInheritedValue)(nil)).Elem()
}

func (i GetCostCategoryRuleInheritedValueArgs) ToGetCostCategoryRuleInheritedValueOutput() GetCostCategoryRuleInheritedValueOutput {
	return i.ToGetCostCategoryRuleInheritedValueOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleInheritedValueArgs) ToGetCostCategoryRuleInheritedValueOutputWithContext(ctx context.Context) GetCostCategoryRuleInheritedValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleInheritedValueOutput)
}

func (i *GetCostCategoryRuleInheritedValueArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleInheritedValueArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleInheritedValueOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleInheritedValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleInheritedValue)(nil)).Elem()
}

func (o GetCostCategoryRuleInheritedValueOutput) ToGetCostCategoryRuleInheritedValueOutput() GetCostCategoryRuleInheritedValueOutput {
	return o
}

func (o GetCostCategoryRuleInheritedValueOutput) ToGetCostCategoryRuleInheritedValueOutputWithContext(ctx context.Context) GetCostCategoryRuleInheritedValueOutput {
	return o
}

func (o GetCostCategoryRuleInheritedValueOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleInheritedValue] {
	return pulumix.Output[GetCostCategoryRuleInheritedValue]{
		OutputState: o.OutputState,
	}
}

// Key to extract cost category values.
func (o GetCostCategoryRuleInheritedValueOutput) DimensionKey() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRuleInheritedValue](o, func(v GetCostCategoryRuleInheritedValue) string { return v.DimensionKey })
}

// Name of the dimension that's used to group costs. If you specify `LINKED_ACCOUNT_NAME`, the cost category value is based on account name. If you specify `TAG`, the cost category value will be based on the value of the specified tag key. Valid values are `LINKED_ACCOUNT_NAME`, `TAG`
func (o GetCostCategoryRuleInheritedValueOutput) DimensionName() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRuleInheritedValue](o, func(v GetCostCategoryRuleInheritedValue) string { return v.DimensionName })
}

type GetCostCategoryRuleRule struct {
	// Return results that match both `Dimension` objects.
	Ands []GetCostCategoryRuleRuleAnd `pulumi:"ands"`
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories []GetCostCategoryRuleRuleCostCategory `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions []GetCostCategoryRuleRuleDimension `pulumi:"dimensions"`
	// Return results that do not match the `Dimension` object.
	Nots []GetCostCategoryRuleRuleNot `pulumi:"nots"`
	// Return results that match either `Dimension` object.
	Ors []GetCostCategoryRuleRuleOr `pulumi:"ors"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags []GetCostCategoryRuleRuleTag `pulumi:"tags"`
}

type GetCostCategoryRuleRuleArgs struct {
	// Return results that match both `Dimension` objects.
	Ands pulumix.Input[[]*GetCostCategoryRuleRuleAndArgs] `pulumi:"ands"`
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories pulumix.Input[[]*GetCostCategoryRuleRuleCostCategoryArgs] `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions pulumix.Input[[]*GetCostCategoryRuleRuleDimensionArgs] `pulumi:"dimensions"`
	// Return results that do not match the `Dimension` object.
	Nots pulumix.Input[[]*GetCostCategoryRuleRuleNotArgs] `pulumi:"nots"`
	// Return results that match either `Dimension` object.
	Ors pulumix.Input[[]*GetCostCategoryRuleRuleOrArgs] `pulumi:"ors"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags pulumix.Input[[]*GetCostCategoryRuleRuleTagArgs] `pulumi:"tags"`
}

func (GetCostCategoryRuleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRule)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleArgs) ToGetCostCategoryRuleRuleOutput() GetCostCategoryRuleRuleOutput {
	return i.ToGetCostCategoryRuleRuleOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleArgs) ToGetCostCategoryRuleRuleOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleOutput)
}

func (i *GetCostCategoryRuleRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRule)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleOutput) ToGetCostCategoryRuleRuleOutput() GetCostCategoryRuleRuleOutput {
	return o
}

func (o GetCostCategoryRuleRuleOutput) ToGetCostCategoryRuleRuleOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOutput {
	return o
}

func (o GetCostCategoryRuleRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRule] {
	return pulumix.Output[GetCostCategoryRuleRule]{
		OutputState: o.OutputState,
	}
}

// Return results that match both `Dimension` objects.
func (o GetCostCategoryRuleRuleOutput) Ands() pulumix.GArrayOutput[GetCostCategoryRuleRuleAnd, GetCostCategoryRuleRuleAndOutput] {
	value := pulumix.Apply[GetCostCategoryRuleRule](o, func(v GetCostCategoryRuleRule) []GetCostCategoryRuleRuleAnd { return v.Ands })
	return pulumix.GArrayOutput[GetCostCategoryRuleRuleAnd, GetCostCategoryRuleRuleAndOutput]{OutputState: value.OutputState}
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetCostCategoryRuleRuleOutput) CostCategories() pulumix.GArrayOutput[GetCostCategoryRuleRuleCostCategory, GetCostCategoryRuleRuleCostCategoryOutput] {
	value := pulumix.Apply[GetCostCategoryRuleRule](o, func(v GetCostCategoryRuleRule) []GetCostCategoryRuleRuleCostCategory { return v.CostCategories })
	return pulumix.GArrayOutput[GetCostCategoryRuleRuleCostCategory, GetCostCategoryRuleRuleCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleOutput) Dimensions() pulumix.GArrayOutput[GetCostCategoryRuleRuleDimension, GetCostCategoryRuleRuleDimensionOutput] {
	value := pulumix.Apply[GetCostCategoryRuleRule](o, func(v GetCostCategoryRuleRule) []GetCostCategoryRuleRuleDimension { return v.Dimensions })
	return pulumix.GArrayOutput[GetCostCategoryRuleRuleDimension, GetCostCategoryRuleRuleDimensionOutput]{OutputState: value.OutputState}
}

// Return results that do not match the `Dimension` object.
func (o GetCostCategoryRuleRuleOutput) Nots() pulumix.GArrayOutput[GetCostCategoryRuleRuleNot, GetCostCategoryRuleRuleNotOutput] {
	value := pulumix.Apply[GetCostCategoryRuleRule](o, func(v GetCostCategoryRuleRule) []GetCostCategoryRuleRuleNot { return v.Nots })
	return pulumix.GArrayOutput[GetCostCategoryRuleRuleNot, GetCostCategoryRuleRuleNotOutput]{OutputState: value.OutputState}
}

// Return results that match either `Dimension` object.
func (o GetCostCategoryRuleRuleOutput) Ors() pulumix.GArrayOutput[GetCostCategoryRuleRuleOr, GetCostCategoryRuleRuleOrOutput] {
	value := pulumix.Apply[GetCostCategoryRuleRule](o, func(v GetCostCategoryRuleRule) []GetCostCategoryRuleRuleOr { return v.Ors })
	return pulumix.GArrayOutput[GetCostCategoryRuleRuleOr, GetCostCategoryRuleRuleOrOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Tag` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleOutput) Tags() pulumix.GArrayOutput[GetCostCategoryRuleRuleTag, GetCostCategoryRuleRuleTagOutput] {
	value := pulumix.Apply[GetCostCategoryRuleRule](o, func(v GetCostCategoryRuleRule) []GetCostCategoryRuleRuleTag { return v.Tags })
	return pulumix.GArrayOutput[GetCostCategoryRuleRuleTag, GetCostCategoryRuleRuleTagOutput]{OutputState: value.OutputState}
}

type GetCostCategoryRuleRuleAnd struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories []GetCostCategoryRuleRuleAndCostCategory `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions []GetCostCategoryRuleRuleAndDimension `pulumi:"dimensions"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags []GetCostCategoryRuleRuleAndTag `pulumi:"tags"`
}

type GetCostCategoryRuleRuleAndArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories pulumix.Input[[]*GetCostCategoryRuleRuleAndCostCategoryArgs] `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions pulumix.Input[[]*GetCostCategoryRuleRuleAndDimensionArgs] `pulumi:"dimensions"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags pulumix.Input[[]*GetCostCategoryRuleRuleAndTagArgs] `pulumi:"tags"`
}

func (GetCostCategoryRuleRuleAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAnd)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleAndArgs) ToGetCostCategoryRuleRuleAndOutput() GetCostCategoryRuleRuleAndOutput {
	return i.ToGetCostCategoryRuleRuleAndOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleAndArgs) ToGetCostCategoryRuleRuleAndOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleAndOutput)
}

func (i *GetCostCategoryRuleRuleAndArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleAndArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleAndOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAnd)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleAndOutput) ToGetCostCategoryRuleRuleAndOutput() GetCostCategoryRuleRuleAndOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndOutput) ToGetCostCategoryRuleRuleAndOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRuleAnd] {
	return pulumix.Output[GetCostCategoryRuleRuleAnd]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetCostCategoryRuleRuleAndOutput) CostCategories() pulumix.GArrayOutput[GetCostCategoryRuleRuleAndCostCategory, GetCostCategoryRuleRuleAndCostCategoryOutput] {
	value := pulumix.Apply[GetCostCategoryRuleRuleAnd](o, func(v GetCostCategoryRuleRuleAnd) []GetCostCategoryRuleRuleAndCostCategory { return v.CostCategories })
	return pulumix.GArrayOutput[GetCostCategoryRuleRuleAndCostCategory, GetCostCategoryRuleRuleAndCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleAndOutput) Dimensions() pulumix.GArrayOutput[GetCostCategoryRuleRuleAndDimension, GetCostCategoryRuleRuleAndDimensionOutput] {
	value := pulumix.Apply[GetCostCategoryRuleRuleAnd](o, func(v GetCostCategoryRuleRuleAnd) []GetCostCategoryRuleRuleAndDimension { return v.Dimensions })
	return pulumix.GArrayOutput[GetCostCategoryRuleRuleAndDimension, GetCostCategoryRuleRuleAndDimensionOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Tag` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleAndOutput) Tags() pulumix.GArrayOutput[GetCostCategoryRuleRuleAndTag, GetCostCategoryRuleRuleAndTagOutput] {
	value := pulumix.Apply[GetCostCategoryRuleRuleAnd](o, func(v GetCostCategoryRuleRuleAnd) []GetCostCategoryRuleRuleAndTag { return v.Tags })
	return pulumix.GArrayOutput[GetCostCategoryRuleRuleAndTag, GetCostCategoryRuleRuleAndTagOutput]{OutputState: value.OutputState}
}

type GetCostCategoryRuleRuleAndCostCategory struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

type GetCostCategoryRuleRuleAndCostCategoryArgs struct {
	// Key for the tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetCostCategoryRuleRuleAndCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAndCostCategory)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleAndCostCategoryArgs) ToGetCostCategoryRuleRuleAndCostCategoryOutput() GetCostCategoryRuleRuleAndCostCategoryOutput {
	return i.ToGetCostCategoryRuleRuleAndCostCategoryOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleAndCostCategoryArgs) ToGetCostCategoryRuleRuleAndCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleAndCostCategoryOutput)
}

func (i *GetCostCategoryRuleRuleAndCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleAndCostCategoryArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleAndCostCategoryOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleAndCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAndCostCategory)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleAndCostCategoryOutput) ToGetCostCategoryRuleRuleAndCostCategoryOutput() GetCostCategoryRuleRuleAndCostCategoryOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndCostCategoryOutput) ToGetCostCategoryRuleRuleAndCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndCostCategoryOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRuleAndCostCategory] {
	return pulumix.Output[GetCostCategoryRuleRuleAndCostCategory]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o GetCostCategoryRuleRuleAndCostCategoryOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRuleRuleAndCostCategory](o, func(v GetCostCategoryRuleRuleAndCostCategory) string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleAndCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleAndCostCategory](o, func(v GetCostCategoryRuleRuleAndCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Parameter values.
func (o GetCostCategoryRuleRuleAndCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleAndCostCategory](o, func(v GetCostCategoryRuleRuleAndCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCostCategoryRuleRuleAndDimension struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

type GetCostCategoryRuleRuleAndDimensionArgs struct {
	// Key for the tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetCostCategoryRuleRuleAndDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAndDimension)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleAndDimensionArgs) ToGetCostCategoryRuleRuleAndDimensionOutput() GetCostCategoryRuleRuleAndDimensionOutput {
	return i.ToGetCostCategoryRuleRuleAndDimensionOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleAndDimensionArgs) ToGetCostCategoryRuleRuleAndDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleAndDimensionOutput)
}

func (i *GetCostCategoryRuleRuleAndDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleAndDimensionArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleAndDimensionOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleAndDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAndDimension)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleAndDimensionOutput) ToGetCostCategoryRuleRuleAndDimensionOutput() GetCostCategoryRuleRuleAndDimensionOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndDimensionOutput) ToGetCostCategoryRuleRuleAndDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndDimensionOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRuleAndDimension] {
	return pulumix.Output[GetCostCategoryRuleRuleAndDimension]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o GetCostCategoryRuleRuleAndDimensionOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRuleRuleAndDimension](o, func(v GetCostCategoryRuleRuleAndDimension) string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleAndDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleAndDimension](o, func(v GetCostCategoryRuleRuleAndDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Parameter values.
func (o GetCostCategoryRuleRuleAndDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleAndDimension](o, func(v GetCostCategoryRuleRuleAndDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCostCategoryRuleRuleAndTag struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

type GetCostCategoryRuleRuleAndTagArgs struct {
	// Key for the tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetCostCategoryRuleRuleAndTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAndTag)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleAndTagArgs) ToGetCostCategoryRuleRuleAndTagOutput() GetCostCategoryRuleRuleAndTagOutput {
	return i.ToGetCostCategoryRuleRuleAndTagOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleAndTagArgs) ToGetCostCategoryRuleRuleAndTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleAndTagOutput)
}

func (i *GetCostCategoryRuleRuleAndTagArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleAndTagArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleAndTagOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleAndTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAndTag)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleAndTagOutput) ToGetCostCategoryRuleRuleAndTagOutput() GetCostCategoryRuleRuleAndTagOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndTagOutput) ToGetCostCategoryRuleRuleAndTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndTagOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndTagOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRuleAndTag] {
	return pulumix.Output[GetCostCategoryRuleRuleAndTag]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o GetCostCategoryRuleRuleAndTagOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRuleRuleAndTag](o, func(v GetCostCategoryRuleRuleAndTag) string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleAndTagOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleAndTag](o, func(v GetCostCategoryRuleRuleAndTag) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Parameter values.
func (o GetCostCategoryRuleRuleAndTagOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleAndTag](o, func(v GetCostCategoryRuleRuleAndTag) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCostCategoryRuleRuleCostCategory struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

type GetCostCategoryRuleRuleCostCategoryArgs struct {
	// Key for the tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetCostCategoryRuleRuleCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleCostCategory)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleCostCategoryArgs) ToGetCostCategoryRuleRuleCostCategoryOutput() GetCostCategoryRuleRuleCostCategoryOutput {
	return i.ToGetCostCategoryRuleRuleCostCategoryOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleCostCategoryArgs) ToGetCostCategoryRuleRuleCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleCostCategoryOutput)
}

func (i *GetCostCategoryRuleRuleCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleCostCategoryArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleCostCategoryOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleCostCategory)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleCostCategoryOutput) ToGetCostCategoryRuleRuleCostCategoryOutput() GetCostCategoryRuleRuleCostCategoryOutput {
	return o
}

func (o GetCostCategoryRuleRuleCostCategoryOutput) ToGetCostCategoryRuleRuleCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleCostCategoryOutput {
	return o
}

func (o GetCostCategoryRuleRuleCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRuleCostCategory] {
	return pulumix.Output[GetCostCategoryRuleRuleCostCategory]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o GetCostCategoryRuleRuleCostCategoryOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRuleRuleCostCategory](o, func(v GetCostCategoryRuleRuleCostCategory) string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleCostCategory](o, func(v GetCostCategoryRuleRuleCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Parameter values.
func (o GetCostCategoryRuleRuleCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleCostCategory](o, func(v GetCostCategoryRuleRuleCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCostCategoryRuleRuleDimension struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

type GetCostCategoryRuleRuleDimensionArgs struct {
	// Key for the tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetCostCategoryRuleRuleDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleDimension)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleDimensionArgs) ToGetCostCategoryRuleRuleDimensionOutput() GetCostCategoryRuleRuleDimensionOutput {
	return i.ToGetCostCategoryRuleRuleDimensionOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleDimensionArgs) ToGetCostCategoryRuleRuleDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleDimensionOutput)
}

func (i *GetCostCategoryRuleRuleDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleDimensionArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleDimensionOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleDimension)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleDimensionOutput) ToGetCostCategoryRuleRuleDimensionOutput() GetCostCategoryRuleRuleDimensionOutput {
	return o
}

func (o GetCostCategoryRuleRuleDimensionOutput) ToGetCostCategoryRuleRuleDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleDimensionOutput {
	return o
}

func (o GetCostCategoryRuleRuleDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRuleDimension] {
	return pulumix.Output[GetCostCategoryRuleRuleDimension]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o GetCostCategoryRuleRuleDimensionOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRuleRuleDimension](o, func(v GetCostCategoryRuleRuleDimension) string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleDimension](o, func(v GetCostCategoryRuleRuleDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Parameter values.
func (o GetCostCategoryRuleRuleDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleDimension](o, func(v GetCostCategoryRuleRuleDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCostCategoryRuleRuleNot struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories []GetCostCategoryRuleRuleNotCostCategory `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions []GetCostCategoryRuleRuleNotDimension `pulumi:"dimensions"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags []GetCostCategoryRuleRuleNotTag `pulumi:"tags"`
}

type GetCostCategoryRuleRuleNotArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories pulumix.Input[[]*GetCostCategoryRuleRuleNotCostCategoryArgs] `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions pulumix.Input[[]*GetCostCategoryRuleRuleNotDimensionArgs] `pulumi:"dimensions"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags pulumix.Input[[]*GetCostCategoryRuleRuleNotTagArgs] `pulumi:"tags"`
}

func (GetCostCategoryRuleRuleNotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNot)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleNotArgs) ToGetCostCategoryRuleRuleNotOutput() GetCostCategoryRuleRuleNotOutput {
	return i.ToGetCostCategoryRuleRuleNotOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleNotArgs) ToGetCostCategoryRuleRuleNotOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleNotOutput)
}

func (i *GetCostCategoryRuleRuleNotArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleNotArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleNotOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleNotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNot)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleNotOutput) ToGetCostCategoryRuleRuleNotOutput() GetCostCategoryRuleRuleNotOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotOutput) ToGetCostCategoryRuleRuleNotOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRuleNot] {
	return pulumix.Output[GetCostCategoryRuleRuleNot]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetCostCategoryRuleRuleNotOutput) CostCategories() pulumix.GArrayOutput[GetCostCategoryRuleRuleNotCostCategory, GetCostCategoryRuleRuleNotCostCategoryOutput] {
	value := pulumix.Apply[GetCostCategoryRuleRuleNot](o, func(v GetCostCategoryRuleRuleNot) []GetCostCategoryRuleRuleNotCostCategory { return v.CostCategories })
	return pulumix.GArrayOutput[GetCostCategoryRuleRuleNotCostCategory, GetCostCategoryRuleRuleNotCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleNotOutput) Dimensions() pulumix.GArrayOutput[GetCostCategoryRuleRuleNotDimension, GetCostCategoryRuleRuleNotDimensionOutput] {
	value := pulumix.Apply[GetCostCategoryRuleRuleNot](o, func(v GetCostCategoryRuleRuleNot) []GetCostCategoryRuleRuleNotDimension { return v.Dimensions })
	return pulumix.GArrayOutput[GetCostCategoryRuleRuleNotDimension, GetCostCategoryRuleRuleNotDimensionOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Tag` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleNotOutput) Tags() pulumix.GArrayOutput[GetCostCategoryRuleRuleNotTag, GetCostCategoryRuleRuleNotTagOutput] {
	value := pulumix.Apply[GetCostCategoryRuleRuleNot](o, func(v GetCostCategoryRuleRuleNot) []GetCostCategoryRuleRuleNotTag { return v.Tags })
	return pulumix.GArrayOutput[GetCostCategoryRuleRuleNotTag, GetCostCategoryRuleRuleNotTagOutput]{OutputState: value.OutputState}
}

type GetCostCategoryRuleRuleNotCostCategory struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

type GetCostCategoryRuleRuleNotCostCategoryArgs struct {
	// Key for the tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetCostCategoryRuleRuleNotCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNotCostCategory)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleNotCostCategoryArgs) ToGetCostCategoryRuleRuleNotCostCategoryOutput() GetCostCategoryRuleRuleNotCostCategoryOutput {
	return i.ToGetCostCategoryRuleRuleNotCostCategoryOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleNotCostCategoryArgs) ToGetCostCategoryRuleRuleNotCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleNotCostCategoryOutput)
}

func (i *GetCostCategoryRuleRuleNotCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleNotCostCategoryArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleNotCostCategoryOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleNotCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNotCostCategory)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleNotCostCategoryOutput) ToGetCostCategoryRuleRuleNotCostCategoryOutput() GetCostCategoryRuleRuleNotCostCategoryOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotCostCategoryOutput) ToGetCostCategoryRuleRuleNotCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotCostCategoryOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRuleNotCostCategory] {
	return pulumix.Output[GetCostCategoryRuleRuleNotCostCategory]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o GetCostCategoryRuleRuleNotCostCategoryOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRuleRuleNotCostCategory](o, func(v GetCostCategoryRuleRuleNotCostCategory) string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleNotCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleNotCostCategory](o, func(v GetCostCategoryRuleRuleNotCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Parameter values.
func (o GetCostCategoryRuleRuleNotCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleNotCostCategory](o, func(v GetCostCategoryRuleRuleNotCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCostCategoryRuleRuleNotDimension struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

type GetCostCategoryRuleRuleNotDimensionArgs struct {
	// Key for the tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetCostCategoryRuleRuleNotDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNotDimension)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleNotDimensionArgs) ToGetCostCategoryRuleRuleNotDimensionOutput() GetCostCategoryRuleRuleNotDimensionOutput {
	return i.ToGetCostCategoryRuleRuleNotDimensionOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleNotDimensionArgs) ToGetCostCategoryRuleRuleNotDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleNotDimensionOutput)
}

func (i *GetCostCategoryRuleRuleNotDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleNotDimensionArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleNotDimensionOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleNotDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNotDimension)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleNotDimensionOutput) ToGetCostCategoryRuleRuleNotDimensionOutput() GetCostCategoryRuleRuleNotDimensionOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotDimensionOutput) ToGetCostCategoryRuleRuleNotDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotDimensionOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRuleNotDimension] {
	return pulumix.Output[GetCostCategoryRuleRuleNotDimension]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o GetCostCategoryRuleRuleNotDimensionOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRuleRuleNotDimension](o, func(v GetCostCategoryRuleRuleNotDimension) string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleNotDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleNotDimension](o, func(v GetCostCategoryRuleRuleNotDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Parameter values.
func (o GetCostCategoryRuleRuleNotDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleNotDimension](o, func(v GetCostCategoryRuleRuleNotDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCostCategoryRuleRuleNotTag struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

type GetCostCategoryRuleRuleNotTagArgs struct {
	// Key for the tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetCostCategoryRuleRuleNotTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNotTag)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleNotTagArgs) ToGetCostCategoryRuleRuleNotTagOutput() GetCostCategoryRuleRuleNotTagOutput {
	return i.ToGetCostCategoryRuleRuleNotTagOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleNotTagArgs) ToGetCostCategoryRuleRuleNotTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleNotTagOutput)
}

func (i *GetCostCategoryRuleRuleNotTagArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleNotTagArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleNotTagOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleNotTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNotTag)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleNotTagOutput) ToGetCostCategoryRuleRuleNotTagOutput() GetCostCategoryRuleRuleNotTagOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotTagOutput) ToGetCostCategoryRuleRuleNotTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotTagOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotTagOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRuleNotTag] {
	return pulumix.Output[GetCostCategoryRuleRuleNotTag]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o GetCostCategoryRuleRuleNotTagOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRuleRuleNotTag](o, func(v GetCostCategoryRuleRuleNotTag) string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleNotTagOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleNotTag](o, func(v GetCostCategoryRuleRuleNotTag) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Parameter values.
func (o GetCostCategoryRuleRuleNotTagOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleNotTag](o, func(v GetCostCategoryRuleRuleNotTag) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCostCategoryRuleRuleOr struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories []GetCostCategoryRuleRuleOrCostCategory `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions []GetCostCategoryRuleRuleOrDimension `pulumi:"dimensions"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags []GetCostCategoryRuleRuleOrTag `pulumi:"tags"`
}

type GetCostCategoryRuleRuleOrArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories pulumix.Input[[]*GetCostCategoryRuleRuleOrCostCategoryArgs] `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions pulumix.Input[[]*GetCostCategoryRuleRuleOrDimensionArgs] `pulumi:"dimensions"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags pulumix.Input[[]*GetCostCategoryRuleRuleOrTagArgs] `pulumi:"tags"`
}

func (GetCostCategoryRuleRuleOrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOr)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleOrArgs) ToGetCostCategoryRuleRuleOrOutput() GetCostCategoryRuleRuleOrOutput {
	return i.ToGetCostCategoryRuleRuleOrOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleOrArgs) ToGetCostCategoryRuleRuleOrOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleOrOutput)
}

func (i *GetCostCategoryRuleRuleOrArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleOrArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleOrOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleOrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOr)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleOrOutput) ToGetCostCategoryRuleRuleOrOutput() GetCostCategoryRuleRuleOrOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrOutput) ToGetCostCategoryRuleRuleOrOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRuleOr] {
	return pulumix.Output[GetCostCategoryRuleRuleOr]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetCostCategoryRuleRuleOrOutput) CostCategories() pulumix.GArrayOutput[GetCostCategoryRuleRuleOrCostCategory, GetCostCategoryRuleRuleOrCostCategoryOutput] {
	value := pulumix.Apply[GetCostCategoryRuleRuleOr](o, func(v GetCostCategoryRuleRuleOr) []GetCostCategoryRuleRuleOrCostCategory { return v.CostCategories })
	return pulumix.GArrayOutput[GetCostCategoryRuleRuleOrCostCategory, GetCostCategoryRuleRuleOrCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleOrOutput) Dimensions() pulumix.GArrayOutput[GetCostCategoryRuleRuleOrDimension, GetCostCategoryRuleRuleOrDimensionOutput] {
	value := pulumix.Apply[GetCostCategoryRuleRuleOr](o, func(v GetCostCategoryRuleRuleOr) []GetCostCategoryRuleRuleOrDimension { return v.Dimensions })
	return pulumix.GArrayOutput[GetCostCategoryRuleRuleOrDimension, GetCostCategoryRuleRuleOrDimensionOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Tag` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleOrOutput) Tags() pulumix.GArrayOutput[GetCostCategoryRuleRuleOrTag, GetCostCategoryRuleRuleOrTagOutput] {
	value := pulumix.Apply[GetCostCategoryRuleRuleOr](o, func(v GetCostCategoryRuleRuleOr) []GetCostCategoryRuleRuleOrTag { return v.Tags })
	return pulumix.GArrayOutput[GetCostCategoryRuleRuleOrTag, GetCostCategoryRuleRuleOrTagOutput]{OutputState: value.OutputState}
}

type GetCostCategoryRuleRuleOrCostCategory struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

type GetCostCategoryRuleRuleOrCostCategoryArgs struct {
	// Key for the tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetCostCategoryRuleRuleOrCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOrCostCategory)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleOrCostCategoryArgs) ToGetCostCategoryRuleRuleOrCostCategoryOutput() GetCostCategoryRuleRuleOrCostCategoryOutput {
	return i.ToGetCostCategoryRuleRuleOrCostCategoryOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleOrCostCategoryArgs) ToGetCostCategoryRuleRuleOrCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleOrCostCategoryOutput)
}

func (i *GetCostCategoryRuleRuleOrCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleOrCostCategoryArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleOrCostCategoryOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleOrCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOrCostCategory)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleOrCostCategoryOutput) ToGetCostCategoryRuleRuleOrCostCategoryOutput() GetCostCategoryRuleRuleOrCostCategoryOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrCostCategoryOutput) ToGetCostCategoryRuleRuleOrCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrCostCategoryOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRuleOrCostCategory] {
	return pulumix.Output[GetCostCategoryRuleRuleOrCostCategory]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o GetCostCategoryRuleRuleOrCostCategoryOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRuleRuleOrCostCategory](o, func(v GetCostCategoryRuleRuleOrCostCategory) string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleOrCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleOrCostCategory](o, func(v GetCostCategoryRuleRuleOrCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Parameter values.
func (o GetCostCategoryRuleRuleOrCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleOrCostCategory](o, func(v GetCostCategoryRuleRuleOrCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCostCategoryRuleRuleOrDimension struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

type GetCostCategoryRuleRuleOrDimensionArgs struct {
	// Key for the tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetCostCategoryRuleRuleOrDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOrDimension)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleOrDimensionArgs) ToGetCostCategoryRuleRuleOrDimensionOutput() GetCostCategoryRuleRuleOrDimensionOutput {
	return i.ToGetCostCategoryRuleRuleOrDimensionOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleOrDimensionArgs) ToGetCostCategoryRuleRuleOrDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleOrDimensionOutput)
}

func (i *GetCostCategoryRuleRuleOrDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleOrDimensionArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleOrDimensionOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleOrDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOrDimension)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleOrDimensionOutput) ToGetCostCategoryRuleRuleOrDimensionOutput() GetCostCategoryRuleRuleOrDimensionOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrDimensionOutput) ToGetCostCategoryRuleRuleOrDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrDimensionOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRuleOrDimension] {
	return pulumix.Output[GetCostCategoryRuleRuleOrDimension]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o GetCostCategoryRuleRuleOrDimensionOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRuleRuleOrDimension](o, func(v GetCostCategoryRuleRuleOrDimension) string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleOrDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleOrDimension](o, func(v GetCostCategoryRuleRuleOrDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Parameter values.
func (o GetCostCategoryRuleRuleOrDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleOrDimension](o, func(v GetCostCategoryRuleRuleOrDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCostCategoryRuleRuleOrTag struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

type GetCostCategoryRuleRuleOrTagArgs struct {
	// Key for the tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetCostCategoryRuleRuleOrTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOrTag)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleOrTagArgs) ToGetCostCategoryRuleRuleOrTagOutput() GetCostCategoryRuleRuleOrTagOutput {
	return i.ToGetCostCategoryRuleRuleOrTagOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleOrTagArgs) ToGetCostCategoryRuleRuleOrTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleOrTagOutput)
}

func (i *GetCostCategoryRuleRuleOrTagArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleOrTagArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleOrTagOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleOrTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOrTag)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleOrTagOutput) ToGetCostCategoryRuleRuleOrTagOutput() GetCostCategoryRuleRuleOrTagOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrTagOutput) ToGetCostCategoryRuleRuleOrTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrTagOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrTagOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRuleOrTag] {
	return pulumix.Output[GetCostCategoryRuleRuleOrTag]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o GetCostCategoryRuleRuleOrTagOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRuleRuleOrTag](o, func(v GetCostCategoryRuleRuleOrTag) string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleOrTagOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleOrTag](o, func(v GetCostCategoryRuleRuleOrTag) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Parameter values.
func (o GetCostCategoryRuleRuleOrTagOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleOrTag](o, func(v GetCostCategoryRuleRuleOrTag) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCostCategoryRuleRuleTag struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

type GetCostCategoryRuleRuleTagArgs struct {
	// Key for the tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetCostCategoryRuleRuleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleTag)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleTagArgs) ToGetCostCategoryRuleRuleTagOutput() GetCostCategoryRuleRuleTagOutput {
	return i.ToGetCostCategoryRuleRuleTagOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleTagArgs) ToGetCostCategoryRuleRuleTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleTagOutput)
}

func (i *GetCostCategoryRuleRuleTagArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategoryRuleRuleTagArgs] {
	return pulumix.Val(i)
}

type GetCostCategoryRuleRuleTagOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleTag)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleTagOutput) ToGetCostCategoryRuleRuleTagOutput() GetCostCategoryRuleRuleTagOutput {
	return o
}

func (o GetCostCategoryRuleRuleTagOutput) ToGetCostCategoryRuleRuleTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleTagOutput {
	return o
}

func (o GetCostCategoryRuleRuleTagOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategoryRuleRuleTag] {
	return pulumix.Output[GetCostCategoryRuleRuleTag]{
		OutputState: o.OutputState,
	}
}

// Key for the tag.
func (o GetCostCategoryRuleRuleTagOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategoryRuleRuleTag](o, func(v GetCostCategoryRuleRuleTag) string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleTagOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleTag](o, func(v GetCostCategoryRuleRuleTag) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Parameter values.
func (o GetCostCategoryRuleRuleTagOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategoryRuleRuleTag](o, func(v GetCostCategoryRuleRuleTag) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCostCategorySplitChargeRule struct {
	// Method that's used to define how to split your source costs across your targets. Valid values are `FIXED`, `PROPORTIONAL`, `EVEN`
	Method string `pulumi:"method"`
	// Configuration block for the parameters for a split charge method. This is only required for the `FIXED` method. See below.
	Parameters []GetCostCategorySplitChargeRuleParameter `pulumi:"parameters"`
	// Cost Category value that you want to split.
	Source string `pulumi:"source"`
	// Cost Category values that you want to split costs across. These values can't be used as a source in other split charge rules.
	Targets []string `pulumi:"targets"`
}

type GetCostCategorySplitChargeRuleArgs struct {
	// Method that's used to define how to split your source costs across your targets. Valid values are `FIXED`, `PROPORTIONAL`, `EVEN`
	Method pulumix.Input[string] `pulumi:"method"`
	// Configuration block for the parameters for a split charge method. This is only required for the `FIXED` method. See below.
	Parameters pulumix.Input[[]*GetCostCategorySplitChargeRuleParameterArgs] `pulumi:"parameters"`
	// Cost Category value that you want to split.
	Source pulumix.Input[string] `pulumi:"source"`
	// Cost Category values that you want to split costs across. These values can't be used as a source in other split charge rules.
	Targets pulumix.Input[[]string] `pulumi:"targets"`
}

func (GetCostCategorySplitChargeRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategorySplitChargeRule)(nil)).Elem()
}

func (i GetCostCategorySplitChargeRuleArgs) ToGetCostCategorySplitChargeRuleOutput() GetCostCategorySplitChargeRuleOutput {
	return i.ToGetCostCategorySplitChargeRuleOutputWithContext(context.Background())
}

func (i GetCostCategorySplitChargeRuleArgs) ToGetCostCategorySplitChargeRuleOutputWithContext(ctx context.Context) GetCostCategorySplitChargeRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategorySplitChargeRuleOutput)
}

func (i *GetCostCategorySplitChargeRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategorySplitChargeRuleArgs] {
	return pulumix.Val(i)
}

type GetCostCategorySplitChargeRuleOutput struct{ *pulumi.OutputState }

func (GetCostCategorySplitChargeRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategorySplitChargeRule)(nil)).Elem()
}

func (o GetCostCategorySplitChargeRuleOutput) ToGetCostCategorySplitChargeRuleOutput() GetCostCategorySplitChargeRuleOutput {
	return o
}

func (o GetCostCategorySplitChargeRuleOutput) ToGetCostCategorySplitChargeRuleOutputWithContext(ctx context.Context) GetCostCategorySplitChargeRuleOutput {
	return o
}

func (o GetCostCategorySplitChargeRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategorySplitChargeRule] {
	return pulumix.Output[GetCostCategorySplitChargeRule]{
		OutputState: o.OutputState,
	}
}

// Method that's used to define how to split your source costs across your targets. Valid values are `FIXED`, `PROPORTIONAL`, `EVEN`
func (o GetCostCategorySplitChargeRuleOutput) Method() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategorySplitChargeRule](o, func(v GetCostCategorySplitChargeRule) string { return v.Method })
}

// Configuration block for the parameters for a split charge method. This is only required for the `FIXED` method. See below.
func (o GetCostCategorySplitChargeRuleOutput) Parameters() pulumix.GArrayOutput[GetCostCategorySplitChargeRuleParameter, GetCostCategorySplitChargeRuleParameterOutput] {
	value := pulumix.Apply[GetCostCategorySplitChargeRule](o, func(v GetCostCategorySplitChargeRule) []GetCostCategorySplitChargeRuleParameter { return v.Parameters })
	return pulumix.GArrayOutput[GetCostCategorySplitChargeRuleParameter, GetCostCategorySplitChargeRuleParameterOutput]{OutputState: value.OutputState}
}

// Cost Category value that you want to split.
func (o GetCostCategorySplitChargeRuleOutput) Source() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategorySplitChargeRule](o, func(v GetCostCategorySplitChargeRule) string { return v.Source })
}

// Cost Category values that you want to split costs across. These values can't be used as a source in other split charge rules.
func (o GetCostCategorySplitChargeRuleOutput) Targets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategorySplitChargeRule](o, func(v GetCostCategorySplitChargeRule) []string { return v.Targets })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCostCategorySplitChargeRuleParameter struct {
	// Parameter type.
	Type string `pulumi:"type"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

type GetCostCategorySplitChargeRuleParameterArgs struct {
	// Parameter type.
	Type pulumix.Input[string] `pulumi:"type"`
	// Parameter values.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetCostCategorySplitChargeRuleParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategorySplitChargeRuleParameter)(nil)).Elem()
}

func (i GetCostCategorySplitChargeRuleParameterArgs) ToGetCostCategorySplitChargeRuleParameterOutput() GetCostCategorySplitChargeRuleParameterOutput {
	return i.ToGetCostCategorySplitChargeRuleParameterOutputWithContext(context.Background())
}

func (i GetCostCategorySplitChargeRuleParameterArgs) ToGetCostCategorySplitChargeRuleParameterOutputWithContext(ctx context.Context) GetCostCategorySplitChargeRuleParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategorySplitChargeRuleParameterOutput)
}

func (i *GetCostCategorySplitChargeRuleParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCostCategorySplitChargeRuleParameterArgs] {
	return pulumix.Val(i)
}

type GetCostCategorySplitChargeRuleParameterOutput struct{ *pulumi.OutputState }

func (GetCostCategorySplitChargeRuleParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategorySplitChargeRuleParameter)(nil)).Elem()
}

func (o GetCostCategorySplitChargeRuleParameterOutput) ToGetCostCategorySplitChargeRuleParameterOutput() GetCostCategorySplitChargeRuleParameterOutput {
	return o
}

func (o GetCostCategorySplitChargeRuleParameterOutput) ToGetCostCategorySplitChargeRuleParameterOutputWithContext(ctx context.Context) GetCostCategorySplitChargeRuleParameterOutput {
	return o
}

func (o GetCostCategorySplitChargeRuleParameterOutput) ToOutput(ctx context.Context) pulumix.Output[GetCostCategorySplitChargeRuleParameter] {
	return pulumix.Output[GetCostCategorySplitChargeRuleParameter]{
		OutputState: o.OutputState,
	}
}

// Parameter type.
func (o GetCostCategorySplitChargeRuleParameterOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetCostCategorySplitChargeRuleParameter](o, func(v GetCostCategorySplitChargeRuleParameter) string { return v.Type })
}

// Parameter values.
func (o GetCostCategorySplitChargeRuleParameterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCostCategorySplitChargeRuleParameter](o, func(v GetCostCategorySplitChargeRuleParameter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetTagsFilter struct {
	// Return results that match both `Dimension` objects.
	Ands []GetTagsFilterAnd `pulumi:"ands"`
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *GetTagsFilterCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *GetTagsFilterDimension `pulumi:"dimension"`
	// Return results that match both `Dimension` object.
	Not *GetTagsFilterNot `pulumi:"not"`
	// Return results that match both `Dimension` object.
	Ors []GetTagsFilterOr `pulumi:"ors"`
	// Tags that match your request.
	Tags *GetTagsFilterTags `pulumi:"tags"`
}

type GetTagsFilterArgs struct {
	// Return results that match both `Dimension` objects.
	Ands pulumix.Input[[]*GetTagsFilterAndArgs] `pulumi:"ands"`
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory pulumix.Input[*GetTagsFilterCostCategoryArgs] `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension pulumix.Input[*GetTagsFilterDimensionArgs] `pulumi:"dimension"`
	// Return results that match both `Dimension` object.
	Not pulumix.Input[*GetTagsFilterNotArgs] `pulumi:"not"`
	// Return results that match both `Dimension` object.
	Ors pulumix.Input[[]*GetTagsFilterOrArgs] `pulumi:"ors"`
	// Tags that match your request.
	Tags pulumix.Input[*GetTagsFilterTagsArgs] `pulumi:"tags"`
}

func (GetTagsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilter)(nil)).Elem()
}

func (i GetTagsFilterArgs) ToGetTagsFilterOutput() GetTagsFilterOutput {
	return i.ToGetTagsFilterOutputWithContext(context.Background())
}

func (i GetTagsFilterArgs) ToGetTagsFilterOutputWithContext(ctx context.Context) GetTagsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOutput)
}

func (i *GetTagsFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterOutput struct{ *pulumi.OutputState }

func (GetTagsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilter)(nil)).Elem()
}

func (o GetTagsFilterOutput) ToGetTagsFilterOutput() GetTagsFilterOutput {
	return o
}

func (o GetTagsFilterOutput) ToGetTagsFilterOutputWithContext(ctx context.Context) GetTagsFilterOutput {
	return o
}

func (o GetTagsFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilter] {
	return pulumix.Output[GetTagsFilter]{
		OutputState: o.OutputState,
	}
}

// Return results that match both `Dimension` objects.
func (o GetTagsFilterOutput) Ands() pulumix.GArrayOutput[GetTagsFilterAnd, GetTagsFilterAndOutput] {
	value := pulumix.Apply[GetTagsFilter](o, func(v GetTagsFilter) []GetTagsFilterAnd { return v.Ands })
	return pulumix.GArrayOutput[GetTagsFilterAnd, GetTagsFilterAndOutput]{OutputState: value.OutputState}
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetTagsFilterOutput) CostCategory() pulumix.GPtrOutput[GetTagsFilterCostCategory, GetTagsFilterCostCategoryOutput] {
	value := pulumix.Apply[GetTagsFilter](o, func(v GetTagsFilter) *GetTagsFilterCostCategory { return v.CostCategory })
	return pulumix.GPtrOutput[GetTagsFilterCostCategory, GetTagsFilterCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetTagsFilterOutput) Dimension() pulumix.GPtrOutput[GetTagsFilterDimension, GetTagsFilterDimensionOutput] {
	value := pulumix.Apply[GetTagsFilter](o, func(v GetTagsFilter) *GetTagsFilterDimension { return v.Dimension })
	return pulumix.GPtrOutput[GetTagsFilterDimension, GetTagsFilterDimensionOutput]{OutputState: value.OutputState}
}

// Return results that match both `Dimension` object.
func (o GetTagsFilterOutput) Not() pulumix.GPtrOutput[GetTagsFilterNot, GetTagsFilterNotOutput] {
	value := pulumix.Apply[GetTagsFilter](o, func(v GetTagsFilter) *GetTagsFilterNot { return v.Not })
	return pulumix.GPtrOutput[GetTagsFilterNot, GetTagsFilterNotOutput]{OutputState: value.OutputState}
}

// Return results that match both `Dimension` object.
func (o GetTagsFilterOutput) Ors() pulumix.GArrayOutput[GetTagsFilterOr, GetTagsFilterOrOutput] {
	value := pulumix.Apply[GetTagsFilter](o, func(v GetTagsFilter) []GetTagsFilterOr { return v.Ors })
	return pulumix.GArrayOutput[GetTagsFilterOr, GetTagsFilterOrOutput]{OutputState: value.OutputState}
}

// Tags that match your request.
func (o GetTagsFilterOutput) Tags() pulumix.GPtrOutput[GetTagsFilterTags, GetTagsFilterTagsOutput] {
	value := pulumix.Apply[GetTagsFilter](o, func(v GetTagsFilter) *GetTagsFilterTags { return v.Tags })
	return pulumix.GPtrOutput[GetTagsFilterTags, GetTagsFilterTagsOutput]{OutputState: value.OutputState}
}

type GetTagsFilterAnd struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *GetTagsFilterAndCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *GetTagsFilterAndDimension `pulumi:"dimension"`
	// Tags that match your request.
	Tags *GetTagsFilterAndTags `pulumi:"tags"`
}

type GetTagsFilterAndArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory pulumix.Input[*GetTagsFilterAndCostCategoryArgs] `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension pulumix.Input[*GetTagsFilterAndDimensionArgs] `pulumi:"dimension"`
	// Tags that match your request.
	Tags pulumix.Input[*GetTagsFilterAndTagsArgs] `pulumi:"tags"`
}

func (GetTagsFilterAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAnd)(nil)).Elem()
}

func (i GetTagsFilterAndArgs) ToGetTagsFilterAndOutput() GetTagsFilterAndOutput {
	return i.ToGetTagsFilterAndOutputWithContext(context.Background())
}

func (i GetTagsFilterAndArgs) ToGetTagsFilterAndOutputWithContext(ctx context.Context) GetTagsFilterAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterAndOutput)
}

func (i *GetTagsFilterAndArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterAndArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterAndOutput struct{ *pulumi.OutputState }

func (GetTagsFilterAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAnd)(nil)).Elem()
}

func (o GetTagsFilterAndOutput) ToGetTagsFilterAndOutput() GetTagsFilterAndOutput {
	return o
}

func (o GetTagsFilterAndOutput) ToGetTagsFilterAndOutputWithContext(ctx context.Context) GetTagsFilterAndOutput {
	return o
}

func (o GetTagsFilterAndOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilterAnd] {
	return pulumix.Output[GetTagsFilterAnd]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetTagsFilterAndOutput) CostCategory() pulumix.GPtrOutput[GetTagsFilterAndCostCategory, GetTagsFilterAndCostCategoryOutput] {
	value := pulumix.Apply[GetTagsFilterAnd](o, func(v GetTagsFilterAnd) *GetTagsFilterAndCostCategory { return v.CostCategory })
	return pulumix.GPtrOutput[GetTagsFilterAndCostCategory, GetTagsFilterAndCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetTagsFilterAndOutput) Dimension() pulumix.GPtrOutput[GetTagsFilterAndDimension, GetTagsFilterAndDimensionOutput] {
	value := pulumix.Apply[GetTagsFilterAnd](o, func(v GetTagsFilterAnd) *GetTagsFilterAndDimension { return v.Dimension })
	return pulumix.GPtrOutput[GetTagsFilterAndDimension, GetTagsFilterAndDimensionOutput]{OutputState: value.OutputState}
}

// Tags that match your request.
func (o GetTagsFilterAndOutput) Tags() pulumix.GPtrOutput[GetTagsFilterAndTags, GetTagsFilterAndTagsOutput] {
	value := pulumix.Apply[GetTagsFilterAnd](o, func(v GetTagsFilterAnd) *GetTagsFilterAndTags { return v.Tags })
	return pulumix.GPtrOutput[GetTagsFilterAndTags, GetTagsFilterAndTagsOutput]{OutputState: value.OutputState}
}

type GetTagsFilterAndCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type GetTagsFilterAndCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetTagsFilterAndCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAndCostCategory)(nil)).Elem()
}

func (i GetTagsFilterAndCostCategoryArgs) ToGetTagsFilterAndCostCategoryOutput() GetTagsFilterAndCostCategoryOutput {
	return i.ToGetTagsFilterAndCostCategoryOutputWithContext(context.Background())
}

func (i GetTagsFilterAndCostCategoryArgs) ToGetTagsFilterAndCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterAndCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterAndCostCategoryOutput)
}

func (i *GetTagsFilterAndCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterAndCostCategoryArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterAndCostCategoryOutput struct{ *pulumi.OutputState }

func (GetTagsFilterAndCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAndCostCategory)(nil)).Elem()
}

func (o GetTagsFilterAndCostCategoryOutput) ToGetTagsFilterAndCostCategoryOutput() GetTagsFilterAndCostCategoryOutput {
	return o
}

func (o GetTagsFilterAndCostCategoryOutput) ToGetTagsFilterAndCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterAndCostCategoryOutput {
	return o
}

func (o GetTagsFilterAndCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilterAndCostCategory] {
	return pulumix.Output[GetTagsFilterAndCostCategory]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o GetTagsFilterAndCostCategoryOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[GetTagsFilterAndCostCategory](o, func(v GetTagsFilterAndCostCategory) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterAndCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterAndCostCategory](o, func(v GetTagsFilterAndCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o GetTagsFilterAndCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterAndCostCategory](o, func(v GetTagsFilterAndCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetTagsFilterAndDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type GetTagsFilterAndDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetTagsFilterAndDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAndDimension)(nil)).Elem()
}

func (i GetTagsFilterAndDimensionArgs) ToGetTagsFilterAndDimensionOutput() GetTagsFilterAndDimensionOutput {
	return i.ToGetTagsFilterAndDimensionOutputWithContext(context.Background())
}

func (i GetTagsFilterAndDimensionArgs) ToGetTagsFilterAndDimensionOutputWithContext(ctx context.Context) GetTagsFilterAndDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterAndDimensionOutput)
}

func (i *GetTagsFilterAndDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterAndDimensionArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterAndDimensionOutput struct{ *pulumi.OutputState }

func (GetTagsFilterAndDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAndDimension)(nil)).Elem()
}

func (o GetTagsFilterAndDimensionOutput) ToGetTagsFilterAndDimensionOutput() GetTagsFilterAndDimensionOutput {
	return o
}

func (o GetTagsFilterAndDimensionOutput) ToGetTagsFilterAndDimensionOutputWithContext(ctx context.Context) GetTagsFilterAndDimensionOutput {
	return o
}

func (o GetTagsFilterAndDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilterAndDimension] {
	return pulumix.Output[GetTagsFilterAndDimension]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o GetTagsFilterAndDimensionOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[GetTagsFilterAndDimension](o, func(v GetTagsFilterAndDimension) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterAndDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterAndDimension](o, func(v GetTagsFilterAndDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o GetTagsFilterAndDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterAndDimension](o, func(v GetTagsFilterAndDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetTagsFilterAndTags struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type GetTagsFilterAndTagsArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetTagsFilterAndTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAndTags)(nil)).Elem()
}

func (i GetTagsFilterAndTagsArgs) ToGetTagsFilterAndTagsOutput() GetTagsFilterAndTagsOutput {
	return i.ToGetTagsFilterAndTagsOutputWithContext(context.Background())
}

func (i GetTagsFilterAndTagsArgs) ToGetTagsFilterAndTagsOutputWithContext(ctx context.Context) GetTagsFilterAndTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterAndTagsOutput)
}

func (i *GetTagsFilterAndTagsArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterAndTagsArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterAndTagsOutput struct{ *pulumi.OutputState }

func (GetTagsFilterAndTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAndTags)(nil)).Elem()
}

func (o GetTagsFilterAndTagsOutput) ToGetTagsFilterAndTagsOutput() GetTagsFilterAndTagsOutput {
	return o
}

func (o GetTagsFilterAndTagsOutput) ToGetTagsFilterAndTagsOutputWithContext(ctx context.Context) GetTagsFilterAndTagsOutput {
	return o
}

func (o GetTagsFilterAndTagsOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilterAndTags] {
	return pulumix.Output[GetTagsFilterAndTags]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o GetTagsFilterAndTagsOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[GetTagsFilterAndTags](o, func(v GetTagsFilterAndTags) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterAndTagsOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterAndTags](o, func(v GetTagsFilterAndTags) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o GetTagsFilterAndTagsOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterAndTags](o, func(v GetTagsFilterAndTags) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetTagsFilterCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type GetTagsFilterCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetTagsFilterCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterCostCategory)(nil)).Elem()
}

func (i GetTagsFilterCostCategoryArgs) ToGetTagsFilterCostCategoryOutput() GetTagsFilterCostCategoryOutput {
	return i.ToGetTagsFilterCostCategoryOutputWithContext(context.Background())
}

func (i GetTagsFilterCostCategoryArgs) ToGetTagsFilterCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterCostCategoryOutput)
}

func (i *GetTagsFilterCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterCostCategoryArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterCostCategoryOutput struct{ *pulumi.OutputState }

func (GetTagsFilterCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterCostCategory)(nil)).Elem()
}

func (o GetTagsFilterCostCategoryOutput) ToGetTagsFilterCostCategoryOutput() GetTagsFilterCostCategoryOutput {
	return o
}

func (o GetTagsFilterCostCategoryOutput) ToGetTagsFilterCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterCostCategoryOutput {
	return o
}

func (o GetTagsFilterCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilterCostCategory] {
	return pulumix.Output[GetTagsFilterCostCategory]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o GetTagsFilterCostCategoryOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[GetTagsFilterCostCategory](o, func(v GetTagsFilterCostCategory) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterCostCategory](o, func(v GetTagsFilterCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o GetTagsFilterCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterCostCategory](o, func(v GetTagsFilterCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetTagsFilterDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type GetTagsFilterDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetTagsFilterDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterDimension)(nil)).Elem()
}

func (i GetTagsFilterDimensionArgs) ToGetTagsFilterDimensionOutput() GetTagsFilterDimensionOutput {
	return i.ToGetTagsFilterDimensionOutputWithContext(context.Background())
}

func (i GetTagsFilterDimensionArgs) ToGetTagsFilterDimensionOutputWithContext(ctx context.Context) GetTagsFilterDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterDimensionOutput)
}

func (i *GetTagsFilterDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterDimensionArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterDimensionOutput struct{ *pulumi.OutputState }

func (GetTagsFilterDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterDimension)(nil)).Elem()
}

func (o GetTagsFilterDimensionOutput) ToGetTagsFilterDimensionOutput() GetTagsFilterDimensionOutput {
	return o
}

func (o GetTagsFilterDimensionOutput) ToGetTagsFilterDimensionOutputWithContext(ctx context.Context) GetTagsFilterDimensionOutput {
	return o
}

func (o GetTagsFilterDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilterDimension] {
	return pulumix.Output[GetTagsFilterDimension]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o GetTagsFilterDimensionOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[GetTagsFilterDimension](o, func(v GetTagsFilterDimension) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterDimension](o, func(v GetTagsFilterDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o GetTagsFilterDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterDimension](o, func(v GetTagsFilterDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetTagsFilterNot struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *GetTagsFilterNotCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *GetTagsFilterNotDimension `pulumi:"dimension"`
	// Tags that match your request.
	Tags *GetTagsFilterNotTags `pulumi:"tags"`
}

type GetTagsFilterNotArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory pulumix.Input[*GetTagsFilterNotCostCategoryArgs] `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension pulumix.Input[*GetTagsFilterNotDimensionArgs] `pulumi:"dimension"`
	// Tags that match your request.
	Tags pulumix.Input[*GetTagsFilterNotTagsArgs] `pulumi:"tags"`
}

func (GetTagsFilterNotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNot)(nil)).Elem()
}

func (i GetTagsFilterNotArgs) ToGetTagsFilterNotOutput() GetTagsFilterNotOutput {
	return i.ToGetTagsFilterNotOutputWithContext(context.Background())
}

func (i GetTagsFilterNotArgs) ToGetTagsFilterNotOutputWithContext(ctx context.Context) GetTagsFilterNotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotOutput)
}

func (i *GetTagsFilterNotArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterNotArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterNotOutput struct{ *pulumi.OutputState }

func (GetTagsFilterNotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNot)(nil)).Elem()
}

func (o GetTagsFilterNotOutput) ToGetTagsFilterNotOutput() GetTagsFilterNotOutput {
	return o
}

func (o GetTagsFilterNotOutput) ToGetTagsFilterNotOutputWithContext(ctx context.Context) GetTagsFilterNotOutput {
	return o
}

func (o GetTagsFilterNotOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilterNot] {
	return pulumix.Output[GetTagsFilterNot]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetTagsFilterNotOutput) CostCategory() pulumix.GPtrOutput[GetTagsFilterNotCostCategory, GetTagsFilterNotCostCategoryOutput] {
	value := pulumix.Apply[GetTagsFilterNot](o, func(v GetTagsFilterNot) *GetTagsFilterNotCostCategory { return v.CostCategory })
	return pulumix.GPtrOutput[GetTagsFilterNotCostCategory, GetTagsFilterNotCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetTagsFilterNotOutput) Dimension() pulumix.GPtrOutput[GetTagsFilterNotDimension, GetTagsFilterNotDimensionOutput] {
	value := pulumix.Apply[GetTagsFilterNot](o, func(v GetTagsFilterNot) *GetTagsFilterNotDimension { return v.Dimension })
	return pulumix.GPtrOutput[GetTagsFilterNotDimension, GetTagsFilterNotDimensionOutput]{OutputState: value.OutputState}
}

// Tags that match your request.
func (o GetTagsFilterNotOutput) Tags() pulumix.GPtrOutput[GetTagsFilterNotTags, GetTagsFilterNotTagsOutput] {
	value := pulumix.Apply[GetTagsFilterNot](o, func(v GetTagsFilterNot) *GetTagsFilterNotTags { return v.Tags })
	return pulumix.GPtrOutput[GetTagsFilterNotTags, GetTagsFilterNotTagsOutput]{OutputState: value.OutputState}
}

type GetTagsFilterNotCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type GetTagsFilterNotCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetTagsFilterNotCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNotCostCategory)(nil)).Elem()
}

func (i GetTagsFilterNotCostCategoryArgs) ToGetTagsFilterNotCostCategoryOutput() GetTagsFilterNotCostCategoryOutput {
	return i.ToGetTagsFilterNotCostCategoryOutputWithContext(context.Background())
}

func (i GetTagsFilterNotCostCategoryArgs) ToGetTagsFilterNotCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterNotCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotCostCategoryOutput)
}

func (i *GetTagsFilterNotCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterNotCostCategoryArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterNotCostCategoryOutput struct{ *pulumi.OutputState }

func (GetTagsFilterNotCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNotCostCategory)(nil)).Elem()
}

func (o GetTagsFilterNotCostCategoryOutput) ToGetTagsFilterNotCostCategoryOutput() GetTagsFilterNotCostCategoryOutput {
	return o
}

func (o GetTagsFilterNotCostCategoryOutput) ToGetTagsFilterNotCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterNotCostCategoryOutput {
	return o
}

func (o GetTagsFilterNotCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilterNotCostCategory] {
	return pulumix.Output[GetTagsFilterNotCostCategory]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o GetTagsFilterNotCostCategoryOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[GetTagsFilterNotCostCategory](o, func(v GetTagsFilterNotCostCategory) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterNotCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterNotCostCategory](o, func(v GetTagsFilterNotCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o GetTagsFilterNotCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterNotCostCategory](o, func(v GetTagsFilterNotCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetTagsFilterNotDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type GetTagsFilterNotDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetTagsFilterNotDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNotDimension)(nil)).Elem()
}

func (i GetTagsFilterNotDimensionArgs) ToGetTagsFilterNotDimensionOutput() GetTagsFilterNotDimensionOutput {
	return i.ToGetTagsFilterNotDimensionOutputWithContext(context.Background())
}

func (i GetTagsFilterNotDimensionArgs) ToGetTagsFilterNotDimensionOutputWithContext(ctx context.Context) GetTagsFilterNotDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotDimensionOutput)
}

func (i *GetTagsFilterNotDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterNotDimensionArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterNotDimensionOutput struct{ *pulumi.OutputState }

func (GetTagsFilterNotDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNotDimension)(nil)).Elem()
}

func (o GetTagsFilterNotDimensionOutput) ToGetTagsFilterNotDimensionOutput() GetTagsFilterNotDimensionOutput {
	return o
}

func (o GetTagsFilterNotDimensionOutput) ToGetTagsFilterNotDimensionOutputWithContext(ctx context.Context) GetTagsFilterNotDimensionOutput {
	return o
}

func (o GetTagsFilterNotDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilterNotDimension] {
	return pulumix.Output[GetTagsFilterNotDimension]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o GetTagsFilterNotDimensionOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[GetTagsFilterNotDimension](o, func(v GetTagsFilterNotDimension) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterNotDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterNotDimension](o, func(v GetTagsFilterNotDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o GetTagsFilterNotDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterNotDimension](o, func(v GetTagsFilterNotDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetTagsFilterNotTags struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type GetTagsFilterNotTagsArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetTagsFilterNotTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNotTags)(nil)).Elem()
}

func (i GetTagsFilterNotTagsArgs) ToGetTagsFilterNotTagsOutput() GetTagsFilterNotTagsOutput {
	return i.ToGetTagsFilterNotTagsOutputWithContext(context.Background())
}

func (i GetTagsFilterNotTagsArgs) ToGetTagsFilterNotTagsOutputWithContext(ctx context.Context) GetTagsFilterNotTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotTagsOutput)
}

func (i *GetTagsFilterNotTagsArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterNotTagsArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterNotTagsOutput struct{ *pulumi.OutputState }

func (GetTagsFilterNotTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNotTags)(nil)).Elem()
}

func (o GetTagsFilterNotTagsOutput) ToGetTagsFilterNotTagsOutput() GetTagsFilterNotTagsOutput {
	return o
}

func (o GetTagsFilterNotTagsOutput) ToGetTagsFilterNotTagsOutputWithContext(ctx context.Context) GetTagsFilterNotTagsOutput {
	return o
}

func (o GetTagsFilterNotTagsOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilterNotTags] {
	return pulumix.Output[GetTagsFilterNotTags]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o GetTagsFilterNotTagsOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[GetTagsFilterNotTags](o, func(v GetTagsFilterNotTags) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterNotTagsOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterNotTags](o, func(v GetTagsFilterNotTags) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o GetTagsFilterNotTagsOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterNotTags](o, func(v GetTagsFilterNotTags) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetTagsFilterOr struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *GetTagsFilterOrCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *GetTagsFilterOrDimension `pulumi:"dimension"`
	// Tags that match your request.
	Tags *GetTagsFilterOrTags `pulumi:"tags"`
}

type GetTagsFilterOrArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory pulumix.Input[*GetTagsFilterOrCostCategoryArgs] `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension pulumix.Input[*GetTagsFilterOrDimensionArgs] `pulumi:"dimension"`
	// Tags that match your request.
	Tags pulumix.Input[*GetTagsFilterOrTagsArgs] `pulumi:"tags"`
}

func (GetTagsFilterOrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOr)(nil)).Elem()
}

func (i GetTagsFilterOrArgs) ToGetTagsFilterOrOutput() GetTagsFilterOrOutput {
	return i.ToGetTagsFilterOrOutputWithContext(context.Background())
}

func (i GetTagsFilterOrArgs) ToGetTagsFilterOrOutputWithContext(ctx context.Context) GetTagsFilterOrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOrOutput)
}

func (i *GetTagsFilterOrArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterOrArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterOrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterOrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOr)(nil)).Elem()
}

func (o GetTagsFilterOrOutput) ToGetTagsFilterOrOutput() GetTagsFilterOrOutput {
	return o
}

func (o GetTagsFilterOrOutput) ToGetTagsFilterOrOutputWithContext(ctx context.Context) GetTagsFilterOrOutput {
	return o
}

func (o GetTagsFilterOrOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilterOr] {
	return pulumix.Output[GetTagsFilterOr]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetTagsFilterOrOutput) CostCategory() pulumix.GPtrOutput[GetTagsFilterOrCostCategory, GetTagsFilterOrCostCategoryOutput] {
	value := pulumix.Apply[GetTagsFilterOr](o, func(v GetTagsFilterOr) *GetTagsFilterOrCostCategory { return v.CostCategory })
	return pulumix.GPtrOutput[GetTagsFilterOrCostCategory, GetTagsFilterOrCostCategoryOutput]{OutputState: value.OutputState}
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetTagsFilterOrOutput) Dimension() pulumix.GPtrOutput[GetTagsFilterOrDimension, GetTagsFilterOrDimensionOutput] {
	value := pulumix.Apply[GetTagsFilterOr](o, func(v GetTagsFilterOr) *GetTagsFilterOrDimension { return v.Dimension })
	return pulumix.GPtrOutput[GetTagsFilterOrDimension, GetTagsFilterOrDimensionOutput]{OutputState: value.OutputState}
}

// Tags that match your request.
func (o GetTagsFilterOrOutput) Tags() pulumix.GPtrOutput[GetTagsFilterOrTags, GetTagsFilterOrTagsOutput] {
	value := pulumix.Apply[GetTagsFilterOr](o, func(v GetTagsFilterOr) *GetTagsFilterOrTags { return v.Tags })
	return pulumix.GPtrOutput[GetTagsFilterOrTags, GetTagsFilterOrTagsOutput]{OutputState: value.OutputState}
}

type GetTagsFilterOrCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type GetTagsFilterOrCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetTagsFilterOrCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOrCostCategory)(nil)).Elem()
}

func (i GetTagsFilterOrCostCategoryArgs) ToGetTagsFilterOrCostCategoryOutput() GetTagsFilterOrCostCategoryOutput {
	return i.ToGetTagsFilterOrCostCategoryOutputWithContext(context.Background())
}

func (i GetTagsFilterOrCostCategoryArgs) ToGetTagsFilterOrCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterOrCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOrCostCategoryOutput)
}

func (i *GetTagsFilterOrCostCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterOrCostCategoryArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterOrCostCategoryOutput struct{ *pulumi.OutputState }

func (GetTagsFilterOrCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOrCostCategory)(nil)).Elem()
}

func (o GetTagsFilterOrCostCategoryOutput) ToGetTagsFilterOrCostCategoryOutput() GetTagsFilterOrCostCategoryOutput {
	return o
}

func (o GetTagsFilterOrCostCategoryOutput) ToGetTagsFilterOrCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterOrCostCategoryOutput {
	return o
}

func (o GetTagsFilterOrCostCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilterOrCostCategory] {
	return pulumix.Output[GetTagsFilterOrCostCategory]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o GetTagsFilterOrCostCategoryOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[GetTagsFilterOrCostCategory](o, func(v GetTagsFilterOrCostCategory) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterOrCostCategoryOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterOrCostCategory](o, func(v GetTagsFilterOrCostCategory) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o GetTagsFilterOrCostCategoryOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterOrCostCategory](o, func(v GetTagsFilterOrCostCategory) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetTagsFilterOrDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type GetTagsFilterOrDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetTagsFilterOrDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOrDimension)(nil)).Elem()
}

func (i GetTagsFilterOrDimensionArgs) ToGetTagsFilterOrDimensionOutput() GetTagsFilterOrDimensionOutput {
	return i.ToGetTagsFilterOrDimensionOutputWithContext(context.Background())
}

func (i GetTagsFilterOrDimensionArgs) ToGetTagsFilterOrDimensionOutputWithContext(ctx context.Context) GetTagsFilterOrDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOrDimensionOutput)
}

func (i *GetTagsFilterOrDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterOrDimensionArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterOrDimensionOutput struct{ *pulumi.OutputState }

func (GetTagsFilterOrDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOrDimension)(nil)).Elem()
}

func (o GetTagsFilterOrDimensionOutput) ToGetTagsFilterOrDimensionOutput() GetTagsFilterOrDimensionOutput {
	return o
}

func (o GetTagsFilterOrDimensionOutput) ToGetTagsFilterOrDimensionOutputWithContext(ctx context.Context) GetTagsFilterOrDimensionOutput {
	return o
}

func (o GetTagsFilterOrDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilterOrDimension] {
	return pulumix.Output[GetTagsFilterOrDimension]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o GetTagsFilterOrDimensionOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[GetTagsFilterOrDimension](o, func(v GetTagsFilterOrDimension) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterOrDimensionOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterOrDimension](o, func(v GetTagsFilterOrDimension) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o GetTagsFilterOrDimensionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterOrDimension](o, func(v GetTagsFilterOrDimension) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetTagsFilterOrTags struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type GetTagsFilterOrTagsArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetTagsFilterOrTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOrTags)(nil)).Elem()
}

func (i GetTagsFilterOrTagsArgs) ToGetTagsFilterOrTagsOutput() GetTagsFilterOrTagsOutput {
	return i.ToGetTagsFilterOrTagsOutputWithContext(context.Background())
}

func (i GetTagsFilterOrTagsArgs) ToGetTagsFilterOrTagsOutputWithContext(ctx context.Context) GetTagsFilterOrTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOrTagsOutput)
}

func (i *GetTagsFilterOrTagsArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterOrTagsArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterOrTagsOutput struct{ *pulumi.OutputState }

func (GetTagsFilterOrTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOrTags)(nil)).Elem()
}

func (o GetTagsFilterOrTagsOutput) ToGetTagsFilterOrTagsOutput() GetTagsFilterOrTagsOutput {
	return o
}

func (o GetTagsFilterOrTagsOutput) ToGetTagsFilterOrTagsOutputWithContext(ctx context.Context) GetTagsFilterOrTagsOutput {
	return o
}

func (o GetTagsFilterOrTagsOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilterOrTags] {
	return pulumix.Output[GetTagsFilterOrTags]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o GetTagsFilterOrTagsOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[GetTagsFilterOrTags](o, func(v GetTagsFilterOrTags) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterOrTagsOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterOrTags](o, func(v GetTagsFilterOrTags) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o GetTagsFilterOrTagsOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterOrTags](o, func(v GetTagsFilterOrTags) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetTagsFilterTags struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

type GetTagsFilterTagsArgs struct {
	// Unique name of the Cost Category.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumix.Input[[]string] `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetTagsFilterTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterTags)(nil)).Elem()
}

func (i GetTagsFilterTagsArgs) ToGetTagsFilterTagsOutput() GetTagsFilterTagsOutput {
	return i.ToGetTagsFilterTagsOutputWithContext(context.Background())
}

func (i GetTagsFilterTagsArgs) ToGetTagsFilterTagsOutputWithContext(ctx context.Context) GetTagsFilterTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterTagsOutput)
}

func (i *GetTagsFilterTagsArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsFilterTagsArgs] {
	return pulumix.Val(i)
}

type GetTagsFilterTagsOutput struct{ *pulumi.OutputState }

func (GetTagsFilterTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterTags)(nil)).Elem()
}

func (o GetTagsFilterTagsOutput) ToGetTagsFilterTagsOutput() GetTagsFilterTagsOutput {
	return o
}

func (o GetTagsFilterTagsOutput) ToGetTagsFilterTagsOutputWithContext(ctx context.Context) GetTagsFilterTagsOutput {
	return o
}

func (o GetTagsFilterTagsOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsFilterTags] {
	return pulumix.Output[GetTagsFilterTags]{
		OutputState: o.OutputState,
	}
}

// Unique name of the Cost Category.
func (o GetTagsFilterTagsOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[GetTagsFilterTags](o, func(v GetTagsFilterTags) *string { return v.Key })
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterTagsOutput) MatchOptions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterTags](o, func(v GetTagsFilterTags) []string { return v.MatchOptions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specific value of the Cost Category.
func (o GetTagsFilterTagsOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTagsFilterTags](o, func(v GetTagsFilterTags) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetTagsSortBy struct {
	// key that's used to sort the data. Valid values are: `BlendedCost`,  `UnblendedCost`, `AmortizedCost`, `NetAmortizedCost`, `NetUnblendedCost`, `UsageQuantity`, `NormalizedUsageAmount`.
	Key *string `pulumi:"key"`
	// order that's used to sort the data. Valid values are: `ASCENDING`,  `DESCENDING`.
	SortOrder *string `pulumi:"sortOrder"`
}

type GetTagsSortByArgs struct {
	// key that's used to sort the data. Valid values are: `BlendedCost`,  `UnblendedCost`, `AmortizedCost`, `NetAmortizedCost`, `NetUnblendedCost`, `UsageQuantity`, `NormalizedUsageAmount`.
	Key pulumix.Input[*string] `pulumi:"key"`
	// order that's used to sort the data. Valid values are: `ASCENDING`,  `DESCENDING`.
	SortOrder pulumix.Input[*string] `pulumi:"sortOrder"`
}

func (GetTagsSortByArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsSortBy)(nil)).Elem()
}

func (i GetTagsSortByArgs) ToGetTagsSortByOutput() GetTagsSortByOutput {
	return i.ToGetTagsSortByOutputWithContext(context.Background())
}

func (i GetTagsSortByArgs) ToGetTagsSortByOutputWithContext(ctx context.Context) GetTagsSortByOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsSortByOutput)
}

func (i *GetTagsSortByArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsSortByArgs] {
	return pulumix.Val(i)
}

type GetTagsSortByOutput struct{ *pulumi.OutputState }

func (GetTagsSortByOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsSortBy)(nil)).Elem()
}

func (o GetTagsSortByOutput) ToGetTagsSortByOutput() GetTagsSortByOutput {
	return o
}

func (o GetTagsSortByOutput) ToGetTagsSortByOutputWithContext(ctx context.Context) GetTagsSortByOutput {
	return o
}

func (o GetTagsSortByOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsSortBy] {
	return pulumix.Output[GetTagsSortBy]{
		OutputState: o.OutputState,
	}
}

// key that's used to sort the data. Valid values are: `BlendedCost`,  `UnblendedCost`, `AmortizedCost`, `NetAmortizedCost`, `NetUnblendedCost`, `UsageQuantity`, `NormalizedUsageAmount`.
func (o GetTagsSortByOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[GetTagsSortBy](o, func(v GetTagsSortBy) *string { return v.Key })
}

// order that's used to sort the data. Valid values are: `ASCENDING`,  `DESCENDING`.
func (o GetTagsSortByOutput) SortOrder() pulumix.Output[*string] {
	return pulumix.Apply[GetTagsSortBy](o, func(v GetTagsSortBy) *string { return v.SortOrder })
}

type GetTagsTimePeriod struct {
	// Beginning of the time period.
	End string `pulumi:"end"`
	// End of the time period.
	Start string `pulumi:"start"`
}

type GetTagsTimePeriodArgs struct {
	// Beginning of the time period.
	End pulumix.Input[string] `pulumi:"end"`
	// End of the time period.
	Start pulumix.Input[string] `pulumi:"start"`
}

func (GetTagsTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsTimePeriod)(nil)).Elem()
}

func (i GetTagsTimePeriodArgs) ToGetTagsTimePeriodOutput() GetTagsTimePeriodOutput {
	return i.ToGetTagsTimePeriodOutputWithContext(context.Background())
}

func (i GetTagsTimePeriodArgs) ToGetTagsTimePeriodOutputWithContext(ctx context.Context) GetTagsTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsTimePeriodOutput)
}

func (i *GetTagsTimePeriodArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTagsTimePeriodArgs] {
	return pulumix.Val(i)
}

type GetTagsTimePeriodOutput struct{ *pulumi.OutputState }

func (GetTagsTimePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsTimePeriod)(nil)).Elem()
}

func (o GetTagsTimePeriodOutput) ToGetTagsTimePeriodOutput() GetTagsTimePeriodOutput {
	return o
}

func (o GetTagsTimePeriodOutput) ToGetTagsTimePeriodOutputWithContext(ctx context.Context) GetTagsTimePeriodOutput {
	return o
}

func (o GetTagsTimePeriodOutput) ToOutput(ctx context.Context) pulumix.Output[GetTagsTimePeriod] {
	return pulumix.Output[GetTagsTimePeriod]{
		OutputState: o.OutputState,
	}
}

// Beginning of the time period.
func (o GetTagsTimePeriodOutput) End() pulumix.Output[string] {
	return pulumix.Apply[GetTagsTimePeriod](o, func(v GetTagsTimePeriod) string { return v.End })
}

// End of the time period.
func (o GetTagsTimePeriodOutput) Start() pulumix.Output[string] {
	return pulumix.Apply[GetTagsTimePeriod](o, func(v GetTagsTimePeriod) string { return v.Start })
}

func init() {
	pulumi.RegisterOutputType(AnomalySubscriptionSubscriberOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionAndOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionAndCostCategoryOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionAndDimensionOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionAndTagsOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionCostCategoryOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionDimensionOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionNotOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionNotCostCategoryOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionNotDimensionOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionNotTagsOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionOrOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionOrCostCategoryOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionOrDimensionOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionOrTagsOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionTagsOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleInheritedValueOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleAndOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleAndCostCategoryOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleAndDimensionOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleAndTagsOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleCostCategoryOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleDimensionOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleNotOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleNotCostCategoryOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleNotDimensionOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleNotTagsOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleOrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleOrCostCategoryOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleOrDimensionOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleOrTagsOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleTagsOutput{})
	pulumi.RegisterOutputType(CostCategorySplitChargeRuleOutput{})
	pulumi.RegisterOutputType(CostCategorySplitChargeRuleParameterOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleInheritedValueOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleAndOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleAndCostCategoryOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleAndDimensionOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleAndTagOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleCostCategoryOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleDimensionOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleNotOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleNotCostCategoryOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleNotDimensionOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleNotTagOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleOrOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleOrCostCategoryOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleOrDimensionOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleOrTagOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleTagOutput{})
	pulumi.RegisterOutputType(GetCostCategorySplitChargeRuleOutput{})
	pulumi.RegisterOutputType(GetCostCategorySplitChargeRuleParameterOutput{})
	pulumi.RegisterOutputType(GetTagsFilterOutput{})
	pulumi.RegisterOutputType(GetTagsFilterAndOutput{})
	pulumi.RegisterOutputType(GetTagsFilterAndCostCategoryOutput{})
	pulumi.RegisterOutputType(GetTagsFilterAndDimensionOutput{})
	pulumi.RegisterOutputType(GetTagsFilterAndTagsOutput{})
	pulumi.RegisterOutputType(GetTagsFilterCostCategoryOutput{})
	pulumi.RegisterOutputType(GetTagsFilterDimensionOutput{})
	pulumi.RegisterOutputType(GetTagsFilterNotOutput{})
	pulumi.RegisterOutputType(GetTagsFilterNotCostCategoryOutput{})
	pulumi.RegisterOutputType(GetTagsFilterNotDimensionOutput{})
	pulumi.RegisterOutputType(GetTagsFilterNotTagsOutput{})
	pulumi.RegisterOutputType(GetTagsFilterOrOutput{})
	pulumi.RegisterOutputType(GetTagsFilterOrCostCategoryOutput{})
	pulumi.RegisterOutputType(GetTagsFilterOrDimensionOutput{})
	pulumi.RegisterOutputType(GetTagsFilterOrTagsOutput{})
	pulumi.RegisterOutputType(GetTagsFilterTagsOutput{})
	pulumi.RegisterOutputType(GetTagsSortByOutput{})
	pulumi.RegisterOutputType(GetTagsTimePeriodOutput{})
}
