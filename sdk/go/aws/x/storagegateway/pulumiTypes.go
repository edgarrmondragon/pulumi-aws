// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storagegateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type FileSystemAssociationCacheAttributes struct {
	// Refreshes a file share's cache by using Time To Live (TTL).
	// TTL is the length of time since the last refresh after which access to the directory would cause the file gateway
	// to first refresh that directory's contents from the Amazon S3 bucket. Valid Values: `0` or `300` to `2592000` seconds (5 minutes to 30 days). Defaults to `0`
	CacheStaleTimeoutInSeconds *int `pulumi:"cacheStaleTimeoutInSeconds"`
}

type FileSystemAssociationCacheAttributesArgs struct {
	// Refreshes a file share's cache by using Time To Live (TTL).
	// TTL is the length of time since the last refresh after which access to the directory would cause the file gateway
	// to first refresh that directory's contents from the Amazon S3 bucket. Valid Values: `0` or `300` to `2592000` seconds (5 minutes to 30 days). Defaults to `0`
	CacheStaleTimeoutInSeconds pulumix.Input[*int] `pulumi:"cacheStaleTimeoutInSeconds"`
}

func (FileSystemAssociationCacheAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemAssociationCacheAttributes)(nil)).Elem()
}

func (i FileSystemAssociationCacheAttributesArgs) ToFileSystemAssociationCacheAttributesOutput() FileSystemAssociationCacheAttributesOutput {
	return i.ToFileSystemAssociationCacheAttributesOutputWithContext(context.Background())
}

func (i FileSystemAssociationCacheAttributesArgs) ToFileSystemAssociationCacheAttributesOutputWithContext(ctx context.Context) FileSystemAssociationCacheAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemAssociationCacheAttributesOutput)
}

func (i *FileSystemAssociationCacheAttributesArgs) ToOutput(ctx context.Context) pulumix.Output[*FileSystemAssociationCacheAttributesArgs] {
	return pulumix.Val(i)
}

type FileSystemAssociationCacheAttributesOutput struct{ *pulumi.OutputState }

func (FileSystemAssociationCacheAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemAssociationCacheAttributes)(nil)).Elem()
}

func (o FileSystemAssociationCacheAttributesOutput) ToFileSystemAssociationCacheAttributesOutput() FileSystemAssociationCacheAttributesOutput {
	return o
}

func (o FileSystemAssociationCacheAttributesOutput) ToFileSystemAssociationCacheAttributesOutputWithContext(ctx context.Context) FileSystemAssociationCacheAttributesOutput {
	return o
}

func (o FileSystemAssociationCacheAttributesOutput) ToOutput(ctx context.Context) pulumix.Output[FileSystemAssociationCacheAttributes] {
	return pulumix.Output[FileSystemAssociationCacheAttributes]{
		OutputState: o.OutputState,
	}
}

// Refreshes a file share's cache by using Time To Live (TTL).
// TTL is the length of time since the last refresh after which access to the directory would cause the file gateway
// to first refresh that directory's contents from the Amazon S3 bucket. Valid Values: `0` or `300` to `2592000` seconds (5 minutes to 30 days). Defaults to `0`
func (o FileSystemAssociationCacheAttributesOutput) CacheStaleTimeoutInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[FileSystemAssociationCacheAttributes](o, func(v FileSystemAssociationCacheAttributes) *int { return v.CacheStaleTimeoutInSeconds })
}

type GatewayGatewayNetworkInterface struct {
	// The Internet Protocol version 4 (IPv4) address of the interface.
	Ipv4Address *string `pulumi:"ipv4Address"`
}

type GatewayGatewayNetworkInterfaceArgs struct {
	// The Internet Protocol version 4 (IPv4) address of the interface.
	Ipv4Address pulumix.Input[*string] `pulumi:"ipv4Address"`
}

func (GatewayGatewayNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayGatewayNetworkInterface)(nil)).Elem()
}

func (i GatewayGatewayNetworkInterfaceArgs) ToGatewayGatewayNetworkInterfaceOutput() GatewayGatewayNetworkInterfaceOutput {
	return i.ToGatewayGatewayNetworkInterfaceOutputWithContext(context.Background())
}

func (i GatewayGatewayNetworkInterfaceArgs) ToGatewayGatewayNetworkInterfaceOutputWithContext(ctx context.Context) GatewayGatewayNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayGatewayNetworkInterfaceOutput)
}

func (i *GatewayGatewayNetworkInterfaceArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayGatewayNetworkInterfaceArgs] {
	return pulumix.Val(i)
}

type GatewayGatewayNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (GatewayGatewayNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayGatewayNetworkInterface)(nil)).Elem()
}

func (o GatewayGatewayNetworkInterfaceOutput) ToGatewayGatewayNetworkInterfaceOutput() GatewayGatewayNetworkInterfaceOutput {
	return o
}

func (o GatewayGatewayNetworkInterfaceOutput) ToGatewayGatewayNetworkInterfaceOutputWithContext(ctx context.Context) GatewayGatewayNetworkInterfaceOutput {
	return o
}

func (o GatewayGatewayNetworkInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayGatewayNetworkInterface] {
	return pulumix.Output[GatewayGatewayNetworkInterface]{
		OutputState: o.OutputState,
	}
}

// The Internet Protocol version 4 (IPv4) address of the interface.
func (o GatewayGatewayNetworkInterfaceOutput) Ipv4Address() pulumix.Output[*string] {
	return pulumix.Apply[GatewayGatewayNetworkInterface](o, func(v GatewayGatewayNetworkInterface) *string { return v.Ipv4Address })
}

type GatewayMaintenanceStartTime struct {
	// The day of the month component of the maintenance start time represented as an ordinal number from 1 to 28, where 1 represents the first day of the month and 28 represents the last day of the month.
	DayOfMonth *string `pulumi:"dayOfMonth"`
	// The day of the week component of the maintenance start time week represented as an ordinal number from 0 to 6, where 0 represents Sunday and 6 Saturday.
	DayOfWeek *string `pulumi:"dayOfWeek"`
	// The hour component of the maintenance start time represented as _hh_, where _hh_ is the hour (00 to 23). The hour of the day is in the time zone of the gateway.
	HourOfDay int `pulumi:"hourOfDay"`
	// The minute component of the maintenance start time represented as _mm_, where _mm_ is the minute (00 to 59). The minute of the hour is in the time zone of the gateway.
	MinuteOfHour *int `pulumi:"minuteOfHour"`
}

type GatewayMaintenanceStartTimeArgs struct {
	// The day of the month component of the maintenance start time represented as an ordinal number from 1 to 28, where 1 represents the first day of the month and 28 represents the last day of the month.
	DayOfMonth pulumix.Input[*string] `pulumi:"dayOfMonth"`
	// The day of the week component of the maintenance start time week represented as an ordinal number from 0 to 6, where 0 represents Sunday and 6 Saturday.
	DayOfWeek pulumix.Input[*string] `pulumi:"dayOfWeek"`
	// The hour component of the maintenance start time represented as _hh_, where _hh_ is the hour (00 to 23). The hour of the day is in the time zone of the gateway.
	HourOfDay pulumix.Input[int] `pulumi:"hourOfDay"`
	// The minute component of the maintenance start time represented as _mm_, where _mm_ is the minute (00 to 59). The minute of the hour is in the time zone of the gateway.
	MinuteOfHour pulumix.Input[*int] `pulumi:"minuteOfHour"`
}

func (GatewayMaintenanceStartTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayMaintenanceStartTime)(nil)).Elem()
}

func (i GatewayMaintenanceStartTimeArgs) ToGatewayMaintenanceStartTimeOutput() GatewayMaintenanceStartTimeOutput {
	return i.ToGatewayMaintenanceStartTimeOutputWithContext(context.Background())
}

func (i GatewayMaintenanceStartTimeArgs) ToGatewayMaintenanceStartTimeOutputWithContext(ctx context.Context) GatewayMaintenanceStartTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMaintenanceStartTimeOutput)
}

func (i *GatewayMaintenanceStartTimeArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayMaintenanceStartTimeArgs] {
	return pulumix.Val(i)
}

type GatewayMaintenanceStartTimeOutput struct{ *pulumi.OutputState }

func (GatewayMaintenanceStartTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayMaintenanceStartTime)(nil)).Elem()
}

func (o GatewayMaintenanceStartTimeOutput) ToGatewayMaintenanceStartTimeOutput() GatewayMaintenanceStartTimeOutput {
	return o
}

func (o GatewayMaintenanceStartTimeOutput) ToGatewayMaintenanceStartTimeOutputWithContext(ctx context.Context) GatewayMaintenanceStartTimeOutput {
	return o
}

func (o GatewayMaintenanceStartTimeOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayMaintenanceStartTime] {
	return pulumix.Output[GatewayMaintenanceStartTime]{
		OutputState: o.OutputState,
	}
}

// The day of the month component of the maintenance start time represented as an ordinal number from 1 to 28, where 1 represents the first day of the month and 28 represents the last day of the month.
func (o GatewayMaintenanceStartTimeOutput) DayOfMonth() pulumix.Output[*string] {
	return pulumix.Apply[GatewayMaintenanceStartTime](o, func(v GatewayMaintenanceStartTime) *string { return v.DayOfMonth })
}

// The day of the week component of the maintenance start time week represented as an ordinal number from 0 to 6, where 0 represents Sunday and 6 Saturday.
func (o GatewayMaintenanceStartTimeOutput) DayOfWeek() pulumix.Output[*string] {
	return pulumix.Apply[GatewayMaintenanceStartTime](o, func(v GatewayMaintenanceStartTime) *string { return v.DayOfWeek })
}

// The hour component of the maintenance start time represented as _hh_, where _hh_ is the hour (00 to 23). The hour of the day is in the time zone of the gateway.
func (o GatewayMaintenanceStartTimeOutput) HourOfDay() pulumix.Output[int] {
	return pulumix.Apply[GatewayMaintenanceStartTime](o, func(v GatewayMaintenanceStartTime) int { return v.HourOfDay })
}

// The minute component of the maintenance start time represented as _mm_, where _mm_ is the minute (00 to 59). The minute of the hour is in the time zone of the gateway.
func (o GatewayMaintenanceStartTimeOutput) MinuteOfHour() pulumix.Output[*int] {
	return pulumix.Apply[GatewayMaintenanceStartTime](o, func(v GatewayMaintenanceStartTime) *int { return v.MinuteOfHour })
}

type GatewaySmbActiveDirectorySettings struct {
	ActiveDirectoryStatus *string `pulumi:"activeDirectoryStatus"`
	// List of IPv4 addresses, NetBIOS names, or host names of your domain server.
	// If you need to specify the port number include it after the colon (“:”). For example, `mydc.mydomain.com:389`.
	DomainControllers []string `pulumi:"domainControllers"`
	// The name of the domain that you want the gateway to join.
	DomainName string `pulumi:"domainName"`
	// The organizational unit (OU) is a container in an Active Directory that can hold users, groups,
	// computers, and other OUs and this parameter specifies the OU that the gateway will join within the AD domain.
	OrganizationalUnit *string `pulumi:"organizationalUnit"`
	// The password of the user who has permission to add the gateway to the Active Directory domain.
	Password string `pulumi:"password"`
	// Specifies the time in seconds, in which the JoinDomain operation must complete. The default is `20` seconds.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// The user name of user who has permission to add the gateway to the Active Directory domain.
	Username string `pulumi:"username"`
}

type GatewaySmbActiveDirectorySettingsArgs struct {
	ActiveDirectoryStatus pulumix.Input[*string] `pulumi:"activeDirectoryStatus"`
	// List of IPv4 addresses, NetBIOS names, or host names of your domain server.
	// If you need to specify the port number include it after the colon (“:”). For example, `mydc.mydomain.com:389`.
	DomainControllers pulumix.Input[[]string] `pulumi:"domainControllers"`
	// The name of the domain that you want the gateway to join.
	DomainName pulumix.Input[string] `pulumi:"domainName"`
	// The organizational unit (OU) is a container in an Active Directory that can hold users, groups,
	// computers, and other OUs and this parameter specifies the OU that the gateway will join within the AD domain.
	OrganizationalUnit pulumix.Input[*string] `pulumi:"organizationalUnit"`
	// The password of the user who has permission to add the gateway to the Active Directory domain.
	Password pulumix.Input[string] `pulumi:"password"`
	// Specifies the time in seconds, in which the JoinDomain operation must complete. The default is `20` seconds.
	TimeoutInSeconds pulumix.Input[*int] `pulumi:"timeoutInSeconds"`
	// The user name of user who has permission to add the gateway to the Active Directory domain.
	Username pulumix.Input[string] `pulumi:"username"`
}

func (GatewaySmbActiveDirectorySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySmbActiveDirectorySettings)(nil)).Elem()
}

func (i GatewaySmbActiveDirectorySettingsArgs) ToGatewaySmbActiveDirectorySettingsOutput() GatewaySmbActiveDirectorySettingsOutput {
	return i.ToGatewaySmbActiveDirectorySettingsOutputWithContext(context.Background())
}

func (i GatewaySmbActiveDirectorySettingsArgs) ToGatewaySmbActiveDirectorySettingsOutputWithContext(ctx context.Context) GatewaySmbActiveDirectorySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySmbActiveDirectorySettingsOutput)
}

func (i *GatewaySmbActiveDirectorySettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewaySmbActiveDirectorySettingsArgs] {
	return pulumix.Val(i)
}

type GatewaySmbActiveDirectorySettingsOutput struct{ *pulumi.OutputState }

func (GatewaySmbActiveDirectorySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySmbActiveDirectorySettings)(nil)).Elem()
}

func (o GatewaySmbActiveDirectorySettingsOutput) ToGatewaySmbActiveDirectorySettingsOutput() GatewaySmbActiveDirectorySettingsOutput {
	return o
}

func (o GatewaySmbActiveDirectorySettingsOutput) ToGatewaySmbActiveDirectorySettingsOutputWithContext(ctx context.Context) GatewaySmbActiveDirectorySettingsOutput {
	return o
}

func (o GatewaySmbActiveDirectorySettingsOutput) ToOutput(ctx context.Context) pulumix.Output[GatewaySmbActiveDirectorySettings] {
	return pulumix.Output[GatewaySmbActiveDirectorySettings]{
		OutputState: o.OutputState,
	}
}

func (o GatewaySmbActiveDirectorySettingsOutput) ActiveDirectoryStatus() pulumix.Output[*string] {
	return pulumix.Apply[GatewaySmbActiveDirectorySettings](o, func(v GatewaySmbActiveDirectorySettings) *string { return v.ActiveDirectoryStatus })
}

// List of IPv4 addresses, NetBIOS names, or host names of your domain server.
// If you need to specify the port number include it after the colon (“:”). For example, `mydc.mydomain.com:389`.
func (o GatewaySmbActiveDirectorySettingsOutput) DomainControllers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GatewaySmbActiveDirectorySettings](o, func(v GatewaySmbActiveDirectorySettings) []string { return v.DomainControllers })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The name of the domain that you want the gateway to join.
func (o GatewaySmbActiveDirectorySettingsOutput) DomainName() pulumix.Output[string] {
	return pulumix.Apply[GatewaySmbActiveDirectorySettings](o, func(v GatewaySmbActiveDirectorySettings) string { return v.DomainName })
}

// The organizational unit (OU) is a container in an Active Directory that can hold users, groups,
// computers, and other OUs and this parameter specifies the OU that the gateway will join within the AD domain.
func (o GatewaySmbActiveDirectorySettingsOutput) OrganizationalUnit() pulumix.Output[*string] {
	return pulumix.Apply[GatewaySmbActiveDirectorySettings](o, func(v GatewaySmbActiveDirectorySettings) *string { return v.OrganizationalUnit })
}

// The password of the user who has permission to add the gateway to the Active Directory domain.
func (o GatewaySmbActiveDirectorySettingsOutput) Password() pulumix.Output[string] {
	return pulumix.Apply[GatewaySmbActiveDirectorySettings](o, func(v GatewaySmbActiveDirectorySettings) string { return v.Password })
}

// Specifies the time in seconds, in which the JoinDomain operation must complete. The default is `20` seconds.
func (o GatewaySmbActiveDirectorySettingsOutput) TimeoutInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[GatewaySmbActiveDirectorySettings](o, func(v GatewaySmbActiveDirectorySettings) *int { return v.TimeoutInSeconds })
}

// The user name of user who has permission to add the gateway to the Active Directory domain.
func (o GatewaySmbActiveDirectorySettingsOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[GatewaySmbActiveDirectorySettings](o, func(v GatewaySmbActiveDirectorySettings) string { return v.Username })
}

type NfsFileShareCacheAttributes struct {
	// Refreshes a file share's cache by using Time To Live (TTL).
	// TTL is the length of time since the last refresh after which access to the directory would cause the file gateway
	// to first refresh that directory's contents from the Amazon S3 bucket. Valid Values: 300 to 2,592,000 seconds (5 minutes to 30 days)
	CacheStaleTimeoutInSeconds *int `pulumi:"cacheStaleTimeoutInSeconds"`
}

type NfsFileShareCacheAttributesArgs struct {
	// Refreshes a file share's cache by using Time To Live (TTL).
	// TTL is the length of time since the last refresh after which access to the directory would cause the file gateway
	// to first refresh that directory's contents from the Amazon S3 bucket. Valid Values: 300 to 2,592,000 seconds (5 minutes to 30 days)
	CacheStaleTimeoutInSeconds pulumix.Input[*int] `pulumi:"cacheStaleTimeoutInSeconds"`
}

func (NfsFileShareCacheAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsFileShareCacheAttributes)(nil)).Elem()
}

func (i NfsFileShareCacheAttributesArgs) ToNfsFileShareCacheAttributesOutput() NfsFileShareCacheAttributesOutput {
	return i.ToNfsFileShareCacheAttributesOutputWithContext(context.Background())
}

func (i NfsFileShareCacheAttributesArgs) ToNfsFileShareCacheAttributesOutputWithContext(ctx context.Context) NfsFileShareCacheAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsFileShareCacheAttributesOutput)
}

func (i *NfsFileShareCacheAttributesArgs) ToOutput(ctx context.Context) pulumix.Output[*NfsFileShareCacheAttributesArgs] {
	return pulumix.Val(i)
}

type NfsFileShareCacheAttributesOutput struct{ *pulumi.OutputState }

func (NfsFileShareCacheAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsFileShareCacheAttributes)(nil)).Elem()
}

func (o NfsFileShareCacheAttributesOutput) ToNfsFileShareCacheAttributesOutput() NfsFileShareCacheAttributesOutput {
	return o
}

func (o NfsFileShareCacheAttributesOutput) ToNfsFileShareCacheAttributesOutputWithContext(ctx context.Context) NfsFileShareCacheAttributesOutput {
	return o
}

func (o NfsFileShareCacheAttributesOutput) ToOutput(ctx context.Context) pulumix.Output[NfsFileShareCacheAttributes] {
	return pulumix.Output[NfsFileShareCacheAttributes]{
		OutputState: o.OutputState,
	}
}

// Refreshes a file share's cache by using Time To Live (TTL).
// TTL is the length of time since the last refresh after which access to the directory would cause the file gateway
// to first refresh that directory's contents from the Amazon S3 bucket. Valid Values: 300 to 2,592,000 seconds (5 minutes to 30 days)
func (o NfsFileShareCacheAttributesOutput) CacheStaleTimeoutInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[NfsFileShareCacheAttributes](o, func(v NfsFileShareCacheAttributes) *int { return v.CacheStaleTimeoutInSeconds })
}

type NfsFileShareNfsFileShareDefaults struct {
	// The Unix directory mode in the string form "nnnn". Defaults to `"0777"`.
	DirectoryMode *string `pulumi:"directoryMode"`
	// The Unix file mode in the string form "nnnn". Defaults to `"0666"`.
	FileMode *string `pulumi:"fileMode"`
	// The default group ID for the file share (unless the files have another group ID specified). Defaults to `65534` (`nfsnobody`). Valid values: `0` through `4294967294`.
	GroupId *string `pulumi:"groupId"`
	// The default owner ID for the file share (unless the files have another owner ID specified). Defaults to `65534` (`nfsnobody`). Valid values: `0` through `4294967294`.
	OwnerId *string `pulumi:"ownerId"`
}

type NfsFileShareNfsFileShareDefaultsArgs struct {
	// The Unix directory mode in the string form "nnnn". Defaults to `"0777"`.
	DirectoryMode pulumix.Input[*string] `pulumi:"directoryMode"`
	// The Unix file mode in the string form "nnnn". Defaults to `"0666"`.
	FileMode pulumix.Input[*string] `pulumi:"fileMode"`
	// The default group ID for the file share (unless the files have another group ID specified). Defaults to `65534` (`nfsnobody`). Valid values: `0` through `4294967294`.
	GroupId pulumix.Input[*string] `pulumi:"groupId"`
	// The default owner ID for the file share (unless the files have another owner ID specified). Defaults to `65534` (`nfsnobody`). Valid values: `0` through `4294967294`.
	OwnerId pulumix.Input[*string] `pulumi:"ownerId"`
}

func (NfsFileShareNfsFileShareDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsFileShareNfsFileShareDefaults)(nil)).Elem()
}

func (i NfsFileShareNfsFileShareDefaultsArgs) ToNfsFileShareNfsFileShareDefaultsOutput() NfsFileShareNfsFileShareDefaultsOutput {
	return i.ToNfsFileShareNfsFileShareDefaultsOutputWithContext(context.Background())
}

func (i NfsFileShareNfsFileShareDefaultsArgs) ToNfsFileShareNfsFileShareDefaultsOutputWithContext(ctx context.Context) NfsFileShareNfsFileShareDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsFileShareNfsFileShareDefaultsOutput)
}

func (i *NfsFileShareNfsFileShareDefaultsArgs) ToOutput(ctx context.Context) pulumix.Output[*NfsFileShareNfsFileShareDefaultsArgs] {
	return pulumix.Val(i)
}

type NfsFileShareNfsFileShareDefaultsOutput struct{ *pulumi.OutputState }

func (NfsFileShareNfsFileShareDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsFileShareNfsFileShareDefaults)(nil)).Elem()
}

func (o NfsFileShareNfsFileShareDefaultsOutput) ToNfsFileShareNfsFileShareDefaultsOutput() NfsFileShareNfsFileShareDefaultsOutput {
	return o
}

func (o NfsFileShareNfsFileShareDefaultsOutput) ToNfsFileShareNfsFileShareDefaultsOutputWithContext(ctx context.Context) NfsFileShareNfsFileShareDefaultsOutput {
	return o
}

func (o NfsFileShareNfsFileShareDefaultsOutput) ToOutput(ctx context.Context) pulumix.Output[NfsFileShareNfsFileShareDefaults] {
	return pulumix.Output[NfsFileShareNfsFileShareDefaults]{
		OutputState: o.OutputState,
	}
}

// The Unix directory mode in the string form "nnnn". Defaults to `"0777"`.
func (o NfsFileShareNfsFileShareDefaultsOutput) DirectoryMode() pulumix.Output[*string] {
	return pulumix.Apply[NfsFileShareNfsFileShareDefaults](o, func(v NfsFileShareNfsFileShareDefaults) *string { return v.DirectoryMode })
}

// The Unix file mode in the string form "nnnn". Defaults to `"0666"`.
func (o NfsFileShareNfsFileShareDefaultsOutput) FileMode() pulumix.Output[*string] {
	return pulumix.Apply[NfsFileShareNfsFileShareDefaults](o, func(v NfsFileShareNfsFileShareDefaults) *string { return v.FileMode })
}

// The default group ID for the file share (unless the files have another group ID specified). Defaults to `65534` (`nfsnobody`). Valid values: `0` through `4294967294`.
func (o NfsFileShareNfsFileShareDefaultsOutput) GroupId() pulumix.Output[*string] {
	return pulumix.Apply[NfsFileShareNfsFileShareDefaults](o, func(v NfsFileShareNfsFileShareDefaults) *string { return v.GroupId })
}

// The default owner ID for the file share (unless the files have another owner ID specified). Defaults to `65534` (`nfsnobody`). Valid values: `0` through `4294967294`.
func (o NfsFileShareNfsFileShareDefaultsOutput) OwnerId() pulumix.Output[*string] {
	return pulumix.Apply[NfsFileShareNfsFileShareDefaults](o, func(v NfsFileShareNfsFileShareDefaults) *string { return v.OwnerId })
}

type SmbFileShareCacheAttributes struct {
	// Refreshes a file share's cache by using Time To Live (TTL).
	// TTL is the length of time since the last refresh after which access to the directory would cause the file gateway
	// to first refresh that directory's contents from the Amazon S3 bucket. Valid Values: 300 to 2,592,000 seconds (5 minutes to 30 days)
	CacheStaleTimeoutInSeconds *int `pulumi:"cacheStaleTimeoutInSeconds"`
}

type SmbFileShareCacheAttributesArgs struct {
	// Refreshes a file share's cache by using Time To Live (TTL).
	// TTL is the length of time since the last refresh after which access to the directory would cause the file gateway
	// to first refresh that directory's contents from the Amazon S3 bucket. Valid Values: 300 to 2,592,000 seconds (5 minutes to 30 days)
	CacheStaleTimeoutInSeconds pulumix.Input[*int] `pulumi:"cacheStaleTimeoutInSeconds"`
}

func (SmbFileShareCacheAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SmbFileShareCacheAttributes)(nil)).Elem()
}

func (i SmbFileShareCacheAttributesArgs) ToSmbFileShareCacheAttributesOutput() SmbFileShareCacheAttributesOutput {
	return i.ToSmbFileShareCacheAttributesOutputWithContext(context.Background())
}

func (i SmbFileShareCacheAttributesArgs) ToSmbFileShareCacheAttributesOutputWithContext(ctx context.Context) SmbFileShareCacheAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmbFileShareCacheAttributesOutput)
}

func (i *SmbFileShareCacheAttributesArgs) ToOutput(ctx context.Context) pulumix.Output[*SmbFileShareCacheAttributesArgs] {
	return pulumix.Val(i)
}

type SmbFileShareCacheAttributesOutput struct{ *pulumi.OutputState }

func (SmbFileShareCacheAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SmbFileShareCacheAttributes)(nil)).Elem()
}

func (o SmbFileShareCacheAttributesOutput) ToSmbFileShareCacheAttributesOutput() SmbFileShareCacheAttributesOutput {
	return o
}

func (o SmbFileShareCacheAttributesOutput) ToSmbFileShareCacheAttributesOutputWithContext(ctx context.Context) SmbFileShareCacheAttributesOutput {
	return o
}

func (o SmbFileShareCacheAttributesOutput) ToOutput(ctx context.Context) pulumix.Output[SmbFileShareCacheAttributes] {
	return pulumix.Output[SmbFileShareCacheAttributes]{
		OutputState: o.OutputState,
	}
}

// Refreshes a file share's cache by using Time To Live (TTL).
// TTL is the length of time since the last refresh after which access to the directory would cause the file gateway
// to first refresh that directory's contents from the Amazon S3 bucket. Valid Values: 300 to 2,592,000 seconds (5 minutes to 30 days)
func (o SmbFileShareCacheAttributesOutput) CacheStaleTimeoutInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[SmbFileShareCacheAttributes](o, func(v SmbFileShareCacheAttributes) *int { return v.CacheStaleTimeoutInSeconds })
}

func init() {
	pulumi.RegisterOutputType(FileSystemAssociationCacheAttributesOutput{})
	pulumi.RegisterOutputType(GatewayGatewayNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(GatewayMaintenanceStartTimeOutput{})
	pulumi.RegisterOutputType(GatewaySmbActiveDirectorySettingsOutput{})
	pulumi.RegisterOutputType(NfsFileShareCacheAttributesOutput{})
	pulumi.RegisterOutputType(NfsFileShareNfsFileShareDefaultsOutput{})
	pulumi.RegisterOutputType(SmbFileShareCacheAttributesOutput{})
}
