// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretsmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve metadata information about a Secrets Manager secret. To retrieve a secret value, see the `secretsmanager.SecretVersion` data source.
func LookupSecret(ctx *pulumi.Context, args *LookupSecretArgs, opts ...pulumi.InvokeOption) (*LookupSecretResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSecretResult
	err := ctx.Invoke("aws:secretsmanager/getSecret:getSecret", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecret.
type LookupSecretArgs struct {
	// ARN of the secret to retrieve.
	Arn *string `pulumi:"arn"`
	// Name of the secret to retrieve.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getSecret.
type LookupSecretResult struct {
	// ARN of the secret.
	Arn string `pulumi:"arn"`
	// Description of the secret.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Key Management Service (KMS) Customer Master Key (CMK) associated with the secret.
	KmsKeyId string `pulumi:"kmsKeyId"`
	Name     string `pulumi:"name"`
	// Resource-based policy document that's attached to the secret.
	Policy string `pulumi:"policy"`
	// Tags of the secret.
	Tags map[string]string `pulumi:"tags"`
}

func LookupSecretOutput(ctx *pulumi.Context, args LookupSecretOutputArgs, opts ...pulumi.InvokeOption) LookupSecretResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSecretArgs](args.ToOutput(), func(plainArgs *LookupSecretArgs) (*LookupSecretResult, error) {
		return LookupSecret(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSecretResultOutput, *LookupSecretResult](outputResult)
}

// A collection of arguments for invoking getSecret.
type LookupSecretOutputArgs struct {
	// ARN of the secret to retrieve.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// Name of the secret to retrieve.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (args LookupSecretOutputArgs) ToOutput() pulumix.Output[*LookupSecretArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSecretArgs {
		return &LookupSecretArgs{
			Arn:  resolvedArgs[0].(*string),
			Name: resolvedArgs[1].(*string),
		}
	})
}

type LookupSecretResultOutput struct{ *pulumi.OutputState }

func (LookupSecretResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecretResult)(nil)).Elem()
}

func (o LookupSecretResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSecretResult] {
	return pulumix.Output[*LookupSecretResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSecretResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecretResult](o, func(v *LookupSecretResult) string { return v.Arn })
}

func (o LookupSecretResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecretResult](o, func(v *LookupSecretResult) string { return v.Description })
}

func (o LookupSecretResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecretResult](o, func(v *LookupSecretResult) string { return v.Id })
}

func (o LookupSecretResultOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecretResult](o, func(v *LookupSecretResult) string { return v.KmsKeyId })
}

func (o LookupSecretResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecretResult](o, func(v *LookupSecretResult) string { return v.Name })
}

func (o LookupSecretResultOutput) Policy() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecretResult](o, func(v *LookupSecretResult) string { return v.Policy })
}

func (o LookupSecretResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupSecretResult](o, func(v *LookupSecretResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
