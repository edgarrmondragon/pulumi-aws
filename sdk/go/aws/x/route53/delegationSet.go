// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a [Route53 Delegation Set](https://docs.aws.amazon.com/Route53/latest/APIReference/API-actions-by-function.html#actions-by-function-reusable-delegation-sets) resource.
type DelegationSet struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the Delegation Set.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A list of authoritative name servers for the hosted zone
	// (effectively a list of NS records).
	NameServers pulumix.ArrayOutput[string] `pulumi:"nameServers"`
	// This is a reference name used in Caller Reference
	// (helpful for identifying single delegation set amongst others)
	ReferenceName pulumix.Output[*string] `pulumi:"referenceName"`
}

// NewDelegationSet registers a new resource with the given unique name, arguments, and options.
func NewDelegationSet(ctx *pulumi.Context,
	name string, args *DelegationSetArgs, opts ...pulumi.ResourceOption) (*DelegationSet, error) {
	if args == nil {
		args = &DelegationSetArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DelegationSet
	err := ctx.RegisterResource("aws:route53/delegationSet:DelegationSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDelegationSet gets an existing DelegationSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDelegationSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DelegationSetState, opts ...pulumi.ResourceOption) (*DelegationSet, error) {
	var resource DelegationSet
	err := ctx.ReadResource("aws:route53/delegationSet:DelegationSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DelegationSet resources.
type delegationSetState struct {
	// The Amazon Resource Name (ARN) of the Delegation Set.
	Arn *string `pulumi:"arn"`
	// A list of authoritative name servers for the hosted zone
	// (effectively a list of NS records).
	NameServers []string `pulumi:"nameServers"`
	// This is a reference name used in Caller Reference
	// (helpful for identifying single delegation set amongst others)
	ReferenceName *string `pulumi:"referenceName"`
}

type DelegationSetState struct {
	// The Amazon Resource Name (ARN) of the Delegation Set.
	Arn pulumix.Input[*string]
	// A list of authoritative name servers for the hosted zone
	// (effectively a list of NS records).
	NameServers pulumix.Input[[]string]
	// This is a reference name used in Caller Reference
	// (helpful for identifying single delegation set amongst others)
	ReferenceName pulumix.Input[*string]
}

func (DelegationSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*delegationSetState)(nil)).Elem()
}

type delegationSetArgs struct {
	// This is a reference name used in Caller Reference
	// (helpful for identifying single delegation set amongst others)
	ReferenceName *string `pulumi:"referenceName"`
}

// The set of arguments for constructing a DelegationSet resource.
type DelegationSetArgs struct {
	// This is a reference name used in Caller Reference
	// (helpful for identifying single delegation set amongst others)
	ReferenceName pulumix.Input[*string]
}

func (DelegationSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*delegationSetArgs)(nil)).Elem()
}

type DelegationSetOutput struct{ *pulumi.OutputState }

func (DelegationSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelegationSet)(nil)).Elem()
}

func (o DelegationSetOutput) ToDelegationSetOutput() DelegationSetOutput {
	return o
}

func (o DelegationSetOutput) ToDelegationSetOutputWithContext(ctx context.Context) DelegationSetOutput {
	return o
}

func (o DelegationSetOutput) ToOutput(ctx context.Context) pulumix.Output[DelegationSet] {
	return pulumix.Output[DelegationSet]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the Delegation Set.
func (o DelegationSetOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DelegationSet](o, func(v DelegationSet) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of authoritative name servers for the hosted zone
// (effectively a list of NS records).
func (o DelegationSetOutput) NameServers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DelegationSet](o, func(v DelegationSet) pulumix.ArrayOutput[string] { return v.NameServers })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// This is a reference name used in Caller Reference
// (helpful for identifying single delegation set amongst others)
func (o DelegationSetOutput) ReferenceName() pulumix.Output[*string] {
	value := pulumix.Apply[DelegationSet](o, func(v DelegationSet) pulumix.Output[*string] { return v.ReferenceName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(DelegationSetOutput{})
}
