// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Security Hub member resource.
type Member struct {
	pulumi.CustomResourceState

	// The ID of the member AWS account.
	AccountId pulumix.Output[string] `pulumi:"accountId"`
	// The email of the member AWS account.
	Email pulumix.Output[*string] `pulumi:"email"`
	// Boolean whether to invite the account to Security Hub as a member. Defaults to `false`.
	Invite pulumix.Output[*bool] `pulumi:"invite"`
	// The ID of the master Security Hub AWS account.
	MasterId pulumix.Output[string] `pulumi:"masterId"`
	// The status of the member account relationship.
	MemberStatus pulumix.Output[string] `pulumi:"memberStatus"`
}

// NewMember registers a new resource with the given unique name, arguments, and options.
func NewMember(ctx *pulumi.Context,
	name string, args *MemberArgs, opts ...pulumi.ResourceOption) (*Member, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Member
	err := ctx.RegisterResource("aws:securityhub/member:Member", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMember gets an existing Member resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MemberState, opts ...pulumi.ResourceOption) (*Member, error) {
	var resource Member
	err := ctx.ReadResource("aws:securityhub/member:Member", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Member resources.
type memberState struct {
	// The ID of the member AWS account.
	AccountId *string `pulumi:"accountId"`
	// The email of the member AWS account.
	Email *string `pulumi:"email"`
	// Boolean whether to invite the account to Security Hub as a member. Defaults to `false`.
	Invite *bool `pulumi:"invite"`
	// The ID of the master Security Hub AWS account.
	MasterId *string `pulumi:"masterId"`
	// The status of the member account relationship.
	MemberStatus *string `pulumi:"memberStatus"`
}

type MemberState struct {
	// The ID of the member AWS account.
	AccountId pulumix.Input[*string]
	// The email of the member AWS account.
	Email pulumix.Input[*string]
	// Boolean whether to invite the account to Security Hub as a member. Defaults to `false`.
	Invite pulumix.Input[*bool]
	// The ID of the master Security Hub AWS account.
	MasterId pulumix.Input[*string]
	// The status of the member account relationship.
	MemberStatus pulumix.Input[*string]
}

func (MemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*memberState)(nil)).Elem()
}

type memberArgs struct {
	// The ID of the member AWS account.
	AccountId string `pulumi:"accountId"`
	// The email of the member AWS account.
	Email *string `pulumi:"email"`
	// Boolean whether to invite the account to Security Hub as a member. Defaults to `false`.
	Invite *bool `pulumi:"invite"`
}

// The set of arguments for constructing a Member resource.
type MemberArgs struct {
	// The ID of the member AWS account.
	AccountId pulumix.Input[string]
	// The email of the member AWS account.
	Email pulumix.Input[*string]
	// Boolean whether to invite the account to Security Hub as a member. Defaults to `false`.
	Invite pulumix.Input[*bool]
}

func (MemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*memberArgs)(nil)).Elem()
}

type MemberOutput struct{ *pulumi.OutputState }

func (MemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Member)(nil)).Elem()
}

func (o MemberOutput) ToMemberOutput() MemberOutput {
	return o
}

func (o MemberOutput) ToMemberOutputWithContext(ctx context.Context) MemberOutput {
	return o
}

func (o MemberOutput) ToOutput(ctx context.Context) pulumix.Output[Member] {
	return pulumix.Output[Member]{
		OutputState: o.OutputState,
	}
}

// The ID of the member AWS account.
func (o MemberOutput) AccountId() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.AccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The email of the member AWS account.
func (o MemberOutput) Email() pulumix.Output[*string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[*string] { return v.Email })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Boolean whether to invite the account to Security Hub as a member. Defaults to `false`.
func (o MemberOutput) Invite() pulumix.Output[*bool] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[*bool] { return v.Invite })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The ID of the master Security Hub AWS account.
func (o MemberOutput) MasterId() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.MasterId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The status of the member account relationship.
func (o MemberOutput) MemberStatus() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.MemberStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MemberOutput{})
}
