// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to create an EventBridge permission to support cross-account events in the current account default event bus.
//
// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
//
// > **Note:** The EventBridge bus policy resource  (`cloudwatch.EventBusPolicy`) is incompatible with the EventBridge permission resource (`cloudwatch.EventPermission`) and will overwrite permissions.
type EventPermission struct {
	pulumi.CustomResourceState

	// The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
	Action pulumix.Output[*string] `pulumi:"action"`
	// Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
	Condition pulumix.GPtrOutput[EventPermissionCondition, EventPermissionConditionOutput] `pulumi:"condition"`
	// The name of the event bus to set the permissions on.
	// If you omit this, the permissions are set on the `default` event bus.
	EventBusName pulumix.Output[*string] `pulumi:"eventBusName"`
	// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus, optionally limited by `condition`.
	Principal pulumix.Output[string] `pulumi:"principal"`
	// An identifier string for the external account that you are granting permissions to.
	StatementId pulumix.Output[string] `pulumi:"statementId"`
}

// NewEventPermission registers a new resource with the given unique name, arguments, and options.
func NewEventPermission(ctx *pulumi.Context,
	name string, args *EventPermissionArgs, opts ...pulumi.ResourceOption) (*EventPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.StatementId == nil {
		return nil, errors.New("invalid value for required argument 'StatementId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventPermission
	err := ctx.RegisterResource("aws:cloudwatch/eventPermission:EventPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventPermission gets an existing EventPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventPermissionState, opts ...pulumi.ResourceOption) (*EventPermission, error) {
	var resource EventPermission
	err := ctx.ReadResource("aws:cloudwatch/eventPermission:EventPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventPermission resources.
type eventPermissionState struct {
	// The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
	Action *string `pulumi:"action"`
	// Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
	Condition *EventPermissionCondition `pulumi:"condition"`
	// The name of the event bus to set the permissions on.
	// If you omit this, the permissions are set on the `default` event bus.
	EventBusName *string `pulumi:"eventBusName"`
	// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus, optionally limited by `condition`.
	Principal *string `pulumi:"principal"`
	// An identifier string for the external account that you are granting permissions to.
	StatementId *string `pulumi:"statementId"`
}

type EventPermissionState struct {
	// The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
	Action pulumix.Input[*string]
	// Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
	Condition pulumix.Input[*EventPermissionConditionArgs]
	// The name of the event bus to set the permissions on.
	// If you omit this, the permissions are set on the `default` event bus.
	EventBusName pulumix.Input[*string]
	// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus, optionally limited by `condition`.
	Principal pulumix.Input[*string]
	// An identifier string for the external account that you are granting permissions to.
	StatementId pulumix.Input[*string]
}

func (EventPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventPermissionState)(nil)).Elem()
}

type eventPermissionArgs struct {
	// The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
	Action *string `pulumi:"action"`
	// Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
	Condition *EventPermissionCondition `pulumi:"condition"`
	// The name of the event bus to set the permissions on.
	// If you omit this, the permissions are set on the `default` event bus.
	EventBusName *string `pulumi:"eventBusName"`
	// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus, optionally limited by `condition`.
	Principal string `pulumi:"principal"`
	// An identifier string for the external account that you are granting permissions to.
	StatementId string `pulumi:"statementId"`
}

// The set of arguments for constructing a EventPermission resource.
type EventPermissionArgs struct {
	// The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
	Action pulumix.Input[*string]
	// Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
	Condition pulumix.Input[*EventPermissionConditionArgs]
	// The name of the event bus to set the permissions on.
	// If you omit this, the permissions are set on the `default` event bus.
	EventBusName pulumix.Input[*string]
	// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus, optionally limited by `condition`.
	Principal pulumix.Input[string]
	// An identifier string for the external account that you are granting permissions to.
	StatementId pulumix.Input[string]
}

func (EventPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventPermissionArgs)(nil)).Elem()
}

type EventPermissionOutput struct{ *pulumi.OutputState }

func (EventPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventPermission)(nil)).Elem()
}

func (o EventPermissionOutput) ToEventPermissionOutput() EventPermissionOutput {
	return o
}

func (o EventPermissionOutput) ToEventPermissionOutputWithContext(ctx context.Context) EventPermissionOutput {
	return o
}

func (o EventPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[EventPermission] {
	return pulumix.Output[EventPermission]{
		OutputState: o.OutputState,
	}
}

// The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
func (o EventPermissionOutput) Action() pulumix.Output[*string] {
	value := pulumix.Apply[EventPermission](o, func(v EventPermission) pulumix.Output[*string] { return v.Action })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
func (o EventPermissionOutput) Condition() pulumix.GPtrOutput[EventPermissionCondition, EventPermissionConditionOutput] {
	value := pulumix.Apply[EventPermission](o, func(v EventPermission) pulumix.GPtrOutput[EventPermissionCondition, EventPermissionConditionOutput] {
		return v.Condition
	})
	unwrapped := pulumix.Flatten[*EventPermissionCondition, pulumix.GPtrOutput[EventPermissionCondition, EventPermissionConditionOutput]](value)
	return pulumix.GPtrOutput[EventPermissionCondition, EventPermissionConditionOutput]{OutputState: unwrapped.OutputState}
}

// The name of the event bus to set the permissions on.
// If you omit this, the permissions are set on the `default` event bus.
func (o EventPermissionOutput) EventBusName() pulumix.Output[*string] {
	value := pulumix.Apply[EventPermission](o, func(v EventPermission) pulumix.Output[*string] { return v.EventBusName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus, optionally limited by `condition`.
func (o EventPermissionOutput) Principal() pulumix.Output[string] {
	value := pulumix.Apply[EventPermission](o, func(v EventPermission) pulumix.Output[string] { return v.Principal })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An identifier string for the external account that you are granting permissions to.
func (o EventPermissionOutput) StatementId() pulumix.Output[string] {
	value := pulumix.Apply[EventPermission](o, func(v EventPermission) pulumix.Output[string] { return v.StatementId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(EventPermissionOutput{})
}
