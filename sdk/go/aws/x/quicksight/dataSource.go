// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing QuickSight Data Source
type DataSource struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the data source
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The ID for the AWS account that the data source is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId pulumix.Output[string] `pulumi:"awsAccountId"`
	// The credentials Amazon QuickSight uses to connect to your underlying source. Currently, only credentials based on user name and password are supported. See Credentials below for more details.
	Credentials pulumix.GPtrOutput[DataSourceCredentials, DataSourceCredentialsOutput] `pulumi:"credentials"`
	// An identifier for the data source.
	DataSourceId pulumix.Output[string] `pulumi:"dataSourceId"`
	// A name for the data source, maximum of 128 characters.
	Name pulumix.Output[string] `pulumi:"name"`
	// The parameters used to connect to this data source (exactly one).
	Parameters pulumix.GPtrOutput[DataSourceParameters, DataSourceParametersOutput] `pulumi:"parameters"`
	// A set of resource permissions on the data source. Maximum of 64 items. See Permission below for more details.
	Permissions pulumix.GArrayOutput[DataSourcePermission, DataSourcePermissionOutput] `pulumi:"permissions"`
	// Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source. See SSL Properties below for more details.
	SslProperties pulumix.GPtrOutput[DataSourceSslProperties, DataSourceSslPropertiesOutput] `pulumi:"sslProperties"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The type of the data source. See the [AWS Documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateDataSource.html#QS-CreateDataSource-request-Type) for the complete list of valid values.
	//
	// The following arguments are optional:
	Type pulumix.Output[string] `pulumi:"type"`
	// Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source. See VPC Connection Properties below for more details.
	VpcConnectionProperties pulumix.GPtrOutput[DataSourceVpcConnectionProperties, DataSourceVpcConnectionPropertiesOutput] `pulumi:"vpcConnectionProperties"`
}

// NewDataSource registers a new resource with the given unique name, arguments, and options.
func NewDataSource(ctx *pulumi.Context,
	name string, args *DataSourceArgs, opts ...pulumi.ResourceOption) (*DataSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSourceId == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataSource
	err := ctx.RegisterResource("aws:quicksight/dataSource:DataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSource gets an existing DataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourceState, opts ...pulumi.ResourceOption) (*DataSource, error) {
	var resource DataSource
	err := ctx.ReadResource("aws:quicksight/dataSource:DataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSource resources.
type dataSourceState struct {
	// Amazon Resource Name (ARN) of the data source
	Arn *string `pulumi:"arn"`
	// The ID for the AWS account that the data source is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// The credentials Amazon QuickSight uses to connect to your underlying source. Currently, only credentials based on user name and password are supported. See Credentials below for more details.
	Credentials *DataSourceCredentials `pulumi:"credentials"`
	// An identifier for the data source.
	DataSourceId *string `pulumi:"dataSourceId"`
	// A name for the data source, maximum of 128 characters.
	Name *string `pulumi:"name"`
	// The parameters used to connect to this data source (exactly one).
	Parameters *DataSourceParameters `pulumi:"parameters"`
	// A set of resource permissions on the data source. Maximum of 64 items. See Permission below for more details.
	Permissions []DataSourcePermission `pulumi:"permissions"`
	// Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source. See SSL Properties below for more details.
	SslProperties *DataSourceSslProperties `pulumi:"sslProperties"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The type of the data source. See the [AWS Documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateDataSource.html#QS-CreateDataSource-request-Type) for the complete list of valid values.
	//
	// The following arguments are optional:
	Type *string `pulumi:"type"`
	// Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source. See VPC Connection Properties below for more details.
	VpcConnectionProperties *DataSourceVpcConnectionProperties `pulumi:"vpcConnectionProperties"`
}

type DataSourceState struct {
	// Amazon Resource Name (ARN) of the data source
	Arn pulumix.Input[*string]
	// The ID for the AWS account that the data source is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId pulumix.Input[*string]
	// The credentials Amazon QuickSight uses to connect to your underlying source. Currently, only credentials based on user name and password are supported. See Credentials below for more details.
	Credentials pulumix.Input[*DataSourceCredentialsArgs]
	// An identifier for the data source.
	DataSourceId pulumix.Input[*string]
	// A name for the data source, maximum of 128 characters.
	Name pulumix.Input[*string]
	// The parameters used to connect to this data source (exactly one).
	Parameters pulumix.Input[*DataSourceParametersArgs]
	// A set of resource permissions on the data source. Maximum of 64 items. See Permission below for more details.
	Permissions pulumix.Input[[]*DataSourcePermissionArgs]
	// Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source. See SSL Properties below for more details.
	SslProperties pulumix.Input[*DataSourceSslPropertiesArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The type of the data source. See the [AWS Documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateDataSource.html#QS-CreateDataSource-request-Type) for the complete list of valid values.
	//
	// The following arguments are optional:
	Type pulumix.Input[*string]
	// Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source. See VPC Connection Properties below for more details.
	VpcConnectionProperties pulumix.Input[*DataSourceVpcConnectionPropertiesArgs]
}

func (DataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceState)(nil)).Elem()
}

type dataSourceArgs struct {
	// The ID for the AWS account that the data source is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// The credentials Amazon QuickSight uses to connect to your underlying source. Currently, only credentials based on user name and password are supported. See Credentials below for more details.
	Credentials *DataSourceCredentials `pulumi:"credentials"`
	// An identifier for the data source.
	DataSourceId string `pulumi:"dataSourceId"`
	// A name for the data source, maximum of 128 characters.
	Name *string `pulumi:"name"`
	// The parameters used to connect to this data source (exactly one).
	Parameters DataSourceParameters `pulumi:"parameters"`
	// A set of resource permissions on the data source. Maximum of 64 items. See Permission below for more details.
	Permissions []DataSourcePermission `pulumi:"permissions"`
	// Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source. See SSL Properties below for more details.
	SslProperties *DataSourceSslProperties `pulumi:"sslProperties"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The type of the data source. See the [AWS Documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateDataSource.html#QS-CreateDataSource-request-Type) for the complete list of valid values.
	//
	// The following arguments are optional:
	Type string `pulumi:"type"`
	// Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source. See VPC Connection Properties below for more details.
	VpcConnectionProperties *DataSourceVpcConnectionProperties `pulumi:"vpcConnectionProperties"`
}

// The set of arguments for constructing a DataSource resource.
type DataSourceArgs struct {
	// The ID for the AWS account that the data source is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId pulumix.Input[*string]
	// The credentials Amazon QuickSight uses to connect to your underlying source. Currently, only credentials based on user name and password are supported. See Credentials below for more details.
	Credentials pulumix.Input[*DataSourceCredentialsArgs]
	// An identifier for the data source.
	DataSourceId pulumix.Input[string]
	// A name for the data source, maximum of 128 characters.
	Name pulumix.Input[*string]
	// The parameters used to connect to this data source (exactly one).
	Parameters pulumix.Input[*DataSourceParametersArgs]
	// A set of resource permissions on the data source. Maximum of 64 items. See Permission below for more details.
	Permissions pulumix.Input[[]*DataSourcePermissionArgs]
	// Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source. See SSL Properties below for more details.
	SslProperties pulumix.Input[*DataSourceSslPropertiesArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The type of the data source. See the [AWS Documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateDataSource.html#QS-CreateDataSource-request-Type) for the complete list of valid values.
	//
	// The following arguments are optional:
	Type pulumix.Input[string]
	// Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source. See VPC Connection Properties below for more details.
	VpcConnectionProperties pulumix.Input[*DataSourceVpcConnectionPropertiesArgs]
}

func (DataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceArgs)(nil)).Elem()
}

type DataSourceOutput struct{ *pulumi.OutputState }

func (DataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSource)(nil)).Elem()
}

func (o DataSourceOutput) ToDataSourceOutput() DataSourceOutput {
	return o
}

func (o DataSourceOutput) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return o
}

func (o DataSourceOutput) ToOutput(ctx context.Context) pulumix.Output[DataSource] {
	return pulumix.Output[DataSource]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the data source
func (o DataSourceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID for the AWS account that the data source is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
func (o DataSourceOutput) AwsAccountId() pulumix.Output[string] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.Output[string] { return v.AwsAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The credentials Amazon QuickSight uses to connect to your underlying source. Currently, only credentials based on user name and password are supported. See Credentials below for more details.
func (o DataSourceOutput) Credentials() pulumix.GPtrOutput[DataSourceCredentials, DataSourceCredentialsOutput] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.GPtrOutput[DataSourceCredentials, DataSourceCredentialsOutput] {
		return v.Credentials
	})
	unwrapped := pulumix.Flatten[*DataSourceCredentials, pulumix.GPtrOutput[DataSourceCredentials, DataSourceCredentialsOutput]](value)
	return pulumix.GPtrOutput[DataSourceCredentials, DataSourceCredentialsOutput]{OutputState: unwrapped.OutputState}
}

// An identifier for the data source.
func (o DataSourceOutput) DataSourceId() pulumix.Output[string] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.Output[string] { return v.DataSourceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A name for the data source, maximum of 128 characters.
func (o DataSourceOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The parameters used to connect to this data source (exactly one).
func (o DataSourceOutput) Parameters() pulumix.GPtrOutput[DataSourceParameters, DataSourceParametersOutput] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.GPtrOutput[DataSourceParameters, DataSourceParametersOutput] {
		return v.Parameters
	})
	unwrapped := pulumix.Flatten[*DataSourceParameters, pulumix.GPtrOutput[DataSourceParameters, DataSourceParametersOutput]](value)
	return pulumix.GPtrOutput[DataSourceParameters, DataSourceParametersOutput]{OutputState: unwrapped.OutputState}
}

// A set of resource permissions on the data source. Maximum of 64 items. See Permission below for more details.
func (o DataSourceOutput) Permissions() pulumix.GArrayOutput[DataSourcePermission, DataSourcePermissionOutput] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.GArrayOutput[DataSourcePermission, DataSourcePermissionOutput] {
		return v.Permissions
	})
	unwrapped := pulumix.Flatten[[]DataSourcePermission, pulumix.GArrayOutput[DataSourcePermission, DataSourcePermissionOutput]](value)
	return pulumix.GArrayOutput[DataSourcePermission, DataSourcePermissionOutput]{OutputState: unwrapped.OutputState}
}

// Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source. See SSL Properties below for more details.
func (o DataSourceOutput) SslProperties() pulumix.GPtrOutput[DataSourceSslProperties, DataSourceSslPropertiesOutput] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.GPtrOutput[DataSourceSslProperties, DataSourceSslPropertiesOutput] {
		return v.SslProperties
	})
	unwrapped := pulumix.Flatten[*DataSourceSslProperties, pulumix.GPtrOutput[DataSourceSslProperties, DataSourceSslPropertiesOutput]](value)
	return pulumix.GPtrOutput[DataSourceSslProperties, DataSourceSslPropertiesOutput]{OutputState: unwrapped.OutputState}
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DataSourceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o DataSourceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The type of the data source. See the [AWS Documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateDataSource.html#QS-CreateDataSource-request-Type) for the complete list of valid values.
//
// The following arguments are optional:
func (o DataSourceOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source. See VPC Connection Properties below for more details.
func (o DataSourceOutput) VpcConnectionProperties() pulumix.GPtrOutput[DataSourceVpcConnectionProperties, DataSourceVpcConnectionPropertiesOutput] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.GPtrOutput[DataSourceVpcConnectionProperties, DataSourceVpcConnectionPropertiesOutput] {
		return v.VpcConnectionProperties
	})
	unwrapped := pulumix.Flatten[*DataSourceVpcConnectionProperties, pulumix.GPtrOutput[DataSourceVpcConnectionProperties, DataSourceVpcConnectionPropertiesOutput]](value)
	return pulumix.GPtrOutput[DataSourceVpcConnectionProperties, DataSourceVpcConnectionPropertiesOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(DataSourceOutput{})
}
