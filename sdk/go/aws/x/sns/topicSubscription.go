// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource for subscribing to SNS topics. Requires that an SNS topic exist for the subscription to attach to. This resource allows you to automatically place messages sent to SNS topics in SQS queues, send them as HTTP(S) POST requests to a given endpoint, send SMS messages, or notify devices / applications. The most likely use case for provider users will probably be SQS queues.
//
// > **NOTE:** If the SNS topic and SQS queue are in different AWS regions, the `sns.TopicSubscription` must use an AWS provider that is in the same region as the SNS topic. If the `sns.TopicSubscription` uses a provider with a different region than the SNS topic, this provider will fail to create the subscription.
//
// > **NOTE:** Setup of cross-account subscriptions from SNS topics to SQS queues requires the provider to have access to BOTH accounts.
//
// > **NOTE:** If an SNS topic and SQS queue are in different AWS accounts but the same region, the `sns.TopicSubscription` must use the AWS provider for the account with the SQS queue. If `sns.TopicSubscription` uses a Provider with a different account than the SQS queue, this provider creates the subscription but does not keep state and tries to re-create the subscription at every `apply`.
//
// > **NOTE:** If an SNS topic and SQS queue are in different AWS accounts and different AWS regions, the subscription needs to be initiated from the account with the SQS queue but in the region of the SNS topic.
//
// > **NOTE:** You cannot unsubscribe to a subscription that is pending confirmation. If you use `email`, `email-json`, or `http`/`https` (without auto-confirmation enabled), until the subscription is confirmed (e.g., outside of this provider), AWS does not allow this provider to delete / unsubscribe the subscription. If you `destroy` an unconfirmed subscription, this provider will remove the subscription from its state but the subscription will still exist in AWS. However, if you delete an SNS topic, SNS [deletes all the subscriptions](https://docs.aws.amazon.com/sns/latest/dg/sns-delete-subscription-topic.html) associated with the topic. Also, you can import a subscription after confirmation and then have the capability to delete it.
type TopicSubscription struct {
	pulumi.CustomResourceState

	// ARN of the subscription.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Integer indicating number of minutes to wait in retrying mode for fetching subscription arn before marking it as failure. Only applicable for http and https protocols. Default is `1`.
	ConfirmationTimeoutInMinutes pulumix.Output[*int] `pulumi:"confirmationTimeoutInMinutes"`
	// Whether the subscription confirmation request was authenticated.
	ConfirmationWasAuthenticated pulumix.Output[bool] `pulumi:"confirmationWasAuthenticated"`
	// JSON String with the delivery policy (retries, backoff, etc.) that will be used in the subscription - this only applies to HTTP/S subscriptions. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/DeliveryPolicies.html) for more details.
	DeliveryPolicy pulumix.Output[*string] `pulumi:"deliveryPolicy"`
	// Endpoint to send data to. The contents vary with the protocol. See details below.
	Endpoint pulumix.Output[string] `pulumi:"endpoint"`
	// Whether the endpoint is capable of [auto confirming subscription](http://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.html#SendMessageToHttp.prepare) (e.g., PagerDuty). Default is `false`.
	EndpointAutoConfirms pulumix.Output[*bool] `pulumi:"endpointAutoConfirms"`
	// JSON String with the filter policy that will be used in the subscription to filter messages seen by the target resource. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/message-filtering.html) for more details.
	FilterPolicy pulumix.Output[*string] `pulumi:"filterPolicy"`
	// Whether the `filterPolicy` applies to `MessageAttributes` (default) or `MessageBody`.
	FilterPolicyScope pulumix.Output[string] `pulumi:"filterPolicyScope"`
	// AWS account ID of the subscription's owner.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// Whether the subscription has not been confirmed.
	PendingConfirmation pulumix.Output[bool] `pulumi:"pendingConfirmation"`
	// Protocol to use. Valid values are: `sqs`, `sms`, `lambda`, `firehose`, and `application`. Protocols `email`, `email-json`, `http` and `https` are also valid but partially supported. See details below.
	Protocol pulumix.Output[string] `pulumi:"protocol"`
	// Whether to enable raw message delivery (the original message is directly passed, not wrapped in JSON with the original message in the message property). Default is `false`.
	RawMessageDelivery pulumix.Output[*bool] `pulumi:"rawMessageDelivery"`
	// JSON String with the redrive policy that will be used in the subscription. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-dead-letter-queues.html#how-messages-moved-into-dead-letter-queue) for more details.
	RedrivePolicy pulumix.Output[*string] `pulumi:"redrivePolicy"`
	// ARN of the IAM role to publish to Kinesis Data Firehose delivery stream. Refer to [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html).
	SubscriptionRoleArn pulumix.Output[*string] `pulumi:"subscriptionRoleArn"`
	// ARN of the SNS topic to subscribe to.
	//
	// The following arguments are optional:
	Topic pulumix.Output[string] `pulumi:"topic"`
}

// NewTopicSubscription registers a new resource with the given unique name, arguments, and options.
func NewTopicSubscription(ctx *pulumi.Context,
	name string, args *TopicSubscriptionArgs, opts ...pulumi.ResourceOption) (*TopicSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endpoint == nil {
		return nil, errors.New("invalid value for required argument 'Endpoint'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TopicSubscription
	err := ctx.RegisterResource("aws:sns/topicSubscription:TopicSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopicSubscription gets an existing TopicSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicSubscriptionState, opts ...pulumi.ResourceOption) (*TopicSubscription, error) {
	var resource TopicSubscription
	err := ctx.ReadResource("aws:sns/topicSubscription:TopicSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TopicSubscription resources.
type topicSubscriptionState struct {
	// ARN of the subscription.
	Arn *string `pulumi:"arn"`
	// Integer indicating number of minutes to wait in retrying mode for fetching subscription arn before marking it as failure. Only applicable for http and https protocols. Default is `1`.
	ConfirmationTimeoutInMinutes *int `pulumi:"confirmationTimeoutInMinutes"`
	// Whether the subscription confirmation request was authenticated.
	ConfirmationWasAuthenticated *bool `pulumi:"confirmationWasAuthenticated"`
	// JSON String with the delivery policy (retries, backoff, etc.) that will be used in the subscription - this only applies to HTTP/S subscriptions. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/DeliveryPolicies.html) for more details.
	DeliveryPolicy *string `pulumi:"deliveryPolicy"`
	// Endpoint to send data to. The contents vary with the protocol. See details below.
	Endpoint *string `pulumi:"endpoint"`
	// Whether the endpoint is capable of [auto confirming subscription](http://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.html#SendMessageToHttp.prepare) (e.g., PagerDuty). Default is `false`.
	EndpointAutoConfirms *bool `pulumi:"endpointAutoConfirms"`
	// JSON String with the filter policy that will be used in the subscription to filter messages seen by the target resource. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/message-filtering.html) for more details.
	FilterPolicy *string `pulumi:"filterPolicy"`
	// Whether the `filterPolicy` applies to `MessageAttributes` (default) or `MessageBody`.
	FilterPolicyScope *string `pulumi:"filterPolicyScope"`
	// AWS account ID of the subscription's owner.
	OwnerId *string `pulumi:"ownerId"`
	// Whether the subscription has not been confirmed.
	PendingConfirmation *bool `pulumi:"pendingConfirmation"`
	// Protocol to use. Valid values are: `sqs`, `sms`, `lambda`, `firehose`, and `application`. Protocols `email`, `email-json`, `http` and `https` are also valid but partially supported. See details below.
	Protocol *string `pulumi:"protocol"`
	// Whether to enable raw message delivery (the original message is directly passed, not wrapped in JSON with the original message in the message property). Default is `false`.
	RawMessageDelivery *bool `pulumi:"rawMessageDelivery"`
	// JSON String with the redrive policy that will be used in the subscription. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-dead-letter-queues.html#how-messages-moved-into-dead-letter-queue) for more details.
	RedrivePolicy *string `pulumi:"redrivePolicy"`
	// ARN of the IAM role to publish to Kinesis Data Firehose delivery stream. Refer to [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html).
	SubscriptionRoleArn *string `pulumi:"subscriptionRoleArn"`
	// ARN of the SNS topic to subscribe to.
	//
	// The following arguments are optional:
	Topic interface{} `pulumi:"topic"`
}

type TopicSubscriptionState struct {
	// ARN of the subscription.
	Arn pulumix.Input[*string]
	// Integer indicating number of minutes to wait in retrying mode for fetching subscription arn before marking it as failure. Only applicable for http and https protocols. Default is `1`.
	ConfirmationTimeoutInMinutes pulumix.Input[*int]
	// Whether the subscription confirmation request was authenticated.
	ConfirmationWasAuthenticated pulumix.Input[*bool]
	// JSON String with the delivery policy (retries, backoff, etc.) that will be used in the subscription - this only applies to HTTP/S subscriptions. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/DeliveryPolicies.html) for more details.
	DeliveryPolicy pulumix.Input[*string]
	// Endpoint to send data to. The contents vary with the protocol. See details below.
	Endpoint pulumix.Input[*string]
	// Whether the endpoint is capable of [auto confirming subscription](http://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.html#SendMessageToHttp.prepare) (e.g., PagerDuty). Default is `false`.
	EndpointAutoConfirms pulumix.Input[*bool]
	// JSON String with the filter policy that will be used in the subscription to filter messages seen by the target resource. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/message-filtering.html) for more details.
	FilterPolicy pulumix.Input[*string]
	// Whether the `filterPolicy` applies to `MessageAttributes` (default) or `MessageBody`.
	FilterPolicyScope pulumix.Input[*string]
	// AWS account ID of the subscription's owner.
	OwnerId pulumix.Input[*string]
	// Whether the subscription has not been confirmed.
	PendingConfirmation pulumix.Input[*bool]
	// Protocol to use. Valid values are: `sqs`, `sms`, `lambda`, `firehose`, and `application`. Protocols `email`, `email-json`, `http` and `https` are also valid but partially supported. See details below.
	Protocol pulumix.Input[*string]
	// Whether to enable raw message delivery (the original message is directly passed, not wrapped in JSON with the original message in the message property). Default is `false`.
	RawMessageDelivery pulumix.Input[*bool]
	// JSON String with the redrive policy that will be used in the subscription. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-dead-letter-queues.html#how-messages-moved-into-dead-letter-queue) for more details.
	RedrivePolicy pulumix.Input[*string]
	// ARN of the IAM role to publish to Kinesis Data Firehose delivery stream. Refer to [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html).
	SubscriptionRoleArn pulumix.Input[*string]
	// ARN of the SNS topic to subscribe to.
	//
	// The following arguments are optional:
	Topic pulumix.Input[*any]
}

func (TopicSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicSubscriptionState)(nil)).Elem()
}

type topicSubscriptionArgs struct {
	// Integer indicating number of minutes to wait in retrying mode for fetching subscription arn before marking it as failure. Only applicable for http and https protocols. Default is `1`.
	ConfirmationTimeoutInMinutes *int `pulumi:"confirmationTimeoutInMinutes"`
	// JSON String with the delivery policy (retries, backoff, etc.) that will be used in the subscription - this only applies to HTTP/S subscriptions. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/DeliveryPolicies.html) for more details.
	DeliveryPolicy *string `pulumi:"deliveryPolicy"`
	// Endpoint to send data to. The contents vary with the protocol. See details below.
	Endpoint string `pulumi:"endpoint"`
	// Whether the endpoint is capable of [auto confirming subscription](http://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.html#SendMessageToHttp.prepare) (e.g., PagerDuty). Default is `false`.
	EndpointAutoConfirms *bool `pulumi:"endpointAutoConfirms"`
	// JSON String with the filter policy that will be used in the subscription to filter messages seen by the target resource. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/message-filtering.html) for more details.
	FilterPolicy *string `pulumi:"filterPolicy"`
	// Whether the `filterPolicy` applies to `MessageAttributes` (default) or `MessageBody`.
	FilterPolicyScope *string `pulumi:"filterPolicyScope"`
	// Protocol to use. Valid values are: `sqs`, `sms`, `lambda`, `firehose`, and `application`. Protocols `email`, `email-json`, `http` and `https` are also valid but partially supported. See details below.
	Protocol string `pulumi:"protocol"`
	// Whether to enable raw message delivery (the original message is directly passed, not wrapped in JSON with the original message in the message property). Default is `false`.
	RawMessageDelivery *bool `pulumi:"rawMessageDelivery"`
	// JSON String with the redrive policy that will be used in the subscription. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-dead-letter-queues.html#how-messages-moved-into-dead-letter-queue) for more details.
	RedrivePolicy *string `pulumi:"redrivePolicy"`
	// ARN of the IAM role to publish to Kinesis Data Firehose delivery stream. Refer to [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html).
	SubscriptionRoleArn *string `pulumi:"subscriptionRoleArn"`
	// ARN of the SNS topic to subscribe to.
	//
	// The following arguments are optional:
	Topic interface{} `pulumi:"topic"`
}

// The set of arguments for constructing a TopicSubscription resource.
type TopicSubscriptionArgs struct {
	// Integer indicating number of minutes to wait in retrying mode for fetching subscription arn before marking it as failure. Only applicable for http and https protocols. Default is `1`.
	ConfirmationTimeoutInMinutes pulumix.Input[*int]
	// JSON String with the delivery policy (retries, backoff, etc.) that will be used in the subscription - this only applies to HTTP/S subscriptions. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/DeliveryPolicies.html) for more details.
	DeliveryPolicy pulumix.Input[*string]
	// Endpoint to send data to. The contents vary with the protocol. See details below.
	Endpoint pulumix.Input[string]
	// Whether the endpoint is capable of [auto confirming subscription](http://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.html#SendMessageToHttp.prepare) (e.g., PagerDuty). Default is `false`.
	EndpointAutoConfirms pulumix.Input[*bool]
	// JSON String with the filter policy that will be used in the subscription to filter messages seen by the target resource. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/message-filtering.html) for more details.
	FilterPolicy pulumix.Input[*string]
	// Whether the `filterPolicy` applies to `MessageAttributes` (default) or `MessageBody`.
	FilterPolicyScope pulumix.Input[*string]
	// Protocol to use. Valid values are: `sqs`, `sms`, `lambda`, `firehose`, and `application`. Protocols `email`, `email-json`, `http` and `https` are also valid but partially supported. See details below.
	Protocol pulumix.Input[string]
	// Whether to enable raw message delivery (the original message is directly passed, not wrapped in JSON with the original message in the message property). Default is `false`.
	RawMessageDelivery pulumix.Input[*bool]
	// JSON String with the redrive policy that will be used in the subscription. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-dead-letter-queues.html#how-messages-moved-into-dead-letter-queue) for more details.
	RedrivePolicy pulumix.Input[*string]
	// ARN of the IAM role to publish to Kinesis Data Firehose delivery stream. Refer to [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html).
	SubscriptionRoleArn pulumix.Input[*string]
	// ARN of the SNS topic to subscribe to.
	//
	// The following arguments are optional:
	Topic pulumix.Input[any]
}

func (TopicSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicSubscriptionArgs)(nil)).Elem()
}

type TopicSubscriptionOutput struct{ *pulumi.OutputState }

func (TopicSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSubscription)(nil)).Elem()
}

func (o TopicSubscriptionOutput) ToTopicSubscriptionOutput() TopicSubscriptionOutput {
	return o
}

func (o TopicSubscriptionOutput) ToTopicSubscriptionOutputWithContext(ctx context.Context) TopicSubscriptionOutput {
	return o
}

func (o TopicSubscriptionOutput) ToOutput(ctx context.Context) pulumix.Output[TopicSubscription] {
	return pulumix.Output[TopicSubscription]{
		OutputState: o.OutputState,
	}
}

// ARN of the subscription.
func (o TopicSubscriptionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[TopicSubscription](o, func(v TopicSubscription) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Integer indicating number of minutes to wait in retrying mode for fetching subscription arn before marking it as failure. Only applicable for http and https protocols. Default is `1`.
func (o TopicSubscriptionOutput) ConfirmationTimeoutInMinutes() pulumix.Output[*int] {
	value := pulumix.Apply[TopicSubscription](o, func(v TopicSubscription) pulumix.Output[*int] { return v.ConfirmationTimeoutInMinutes })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Whether the subscription confirmation request was authenticated.
func (o TopicSubscriptionOutput) ConfirmationWasAuthenticated() pulumix.Output[bool] {
	value := pulumix.Apply[TopicSubscription](o, func(v TopicSubscription) pulumix.Output[bool] { return v.ConfirmationWasAuthenticated })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// JSON String with the delivery policy (retries, backoff, etc.) that will be used in the subscription - this only applies to HTTP/S subscriptions. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/DeliveryPolicies.html) for more details.
func (o TopicSubscriptionOutput) DeliveryPolicy() pulumix.Output[*string] {
	value := pulumix.Apply[TopicSubscription](o, func(v TopicSubscription) pulumix.Output[*string] { return v.DeliveryPolicy })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Endpoint to send data to. The contents vary with the protocol. See details below.
func (o TopicSubscriptionOutput) Endpoint() pulumix.Output[string] {
	value := pulumix.Apply[TopicSubscription](o, func(v TopicSubscription) pulumix.Output[string] { return v.Endpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether the endpoint is capable of [auto confirming subscription](http://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.html#SendMessageToHttp.prepare) (e.g., PagerDuty). Default is `false`.
func (o TopicSubscriptionOutput) EndpointAutoConfirms() pulumix.Output[*bool] {
	value := pulumix.Apply[TopicSubscription](o, func(v TopicSubscription) pulumix.Output[*bool] { return v.EndpointAutoConfirms })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// JSON String with the filter policy that will be used in the subscription to filter messages seen by the target resource. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/message-filtering.html) for more details.
func (o TopicSubscriptionOutput) FilterPolicy() pulumix.Output[*string] {
	value := pulumix.Apply[TopicSubscription](o, func(v TopicSubscription) pulumix.Output[*string] { return v.FilterPolicy })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether the `filterPolicy` applies to `MessageAttributes` (default) or `MessageBody`.
func (o TopicSubscriptionOutput) FilterPolicyScope() pulumix.Output[string] {
	value := pulumix.Apply[TopicSubscription](o, func(v TopicSubscription) pulumix.Output[string] { return v.FilterPolicyScope })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS account ID of the subscription's owner.
func (o TopicSubscriptionOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[TopicSubscription](o, func(v TopicSubscription) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether the subscription has not been confirmed.
func (o TopicSubscriptionOutput) PendingConfirmation() pulumix.Output[bool] {
	value := pulumix.Apply[TopicSubscription](o, func(v TopicSubscription) pulumix.Output[bool] { return v.PendingConfirmation })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Protocol to use. Valid values are: `sqs`, `sms`, `lambda`, `firehose`, and `application`. Protocols `email`, `email-json`, `http` and `https` are also valid but partially supported. See details below.
func (o TopicSubscriptionOutput) Protocol() pulumix.Output[string] {
	value := pulumix.Apply[TopicSubscription](o, func(v TopicSubscription) pulumix.Output[string] { return v.Protocol })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to enable raw message delivery (the original message is directly passed, not wrapped in JSON with the original message in the message property). Default is `false`.
func (o TopicSubscriptionOutput) RawMessageDelivery() pulumix.Output[*bool] {
	value := pulumix.Apply[TopicSubscription](o, func(v TopicSubscription) pulumix.Output[*bool] { return v.RawMessageDelivery })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// JSON String with the redrive policy that will be used in the subscription. Refer to the [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-dead-letter-queues.html#how-messages-moved-into-dead-letter-queue) for more details.
func (o TopicSubscriptionOutput) RedrivePolicy() pulumix.Output[*string] {
	value := pulumix.Apply[TopicSubscription](o, func(v TopicSubscription) pulumix.Output[*string] { return v.RedrivePolicy })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ARN of the IAM role to publish to Kinesis Data Firehose delivery stream. Refer to [SNS docs](https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html).
func (o TopicSubscriptionOutput) SubscriptionRoleArn() pulumix.Output[*string] {
	value := pulumix.Apply[TopicSubscription](o, func(v TopicSubscription) pulumix.Output[*string] { return v.SubscriptionRoleArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ARN of the SNS topic to subscribe to.
//
// The following arguments are optional:
func (o TopicSubscriptionOutput) Topic() pulumix.Output[string] {
	value := pulumix.Apply[TopicSubscription](o, func(v TopicSubscription) pulumix.Output[string] { return v.Topic })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(TopicSubscriptionOutput{})
}
