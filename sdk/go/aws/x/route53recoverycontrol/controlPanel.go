// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoverycontrol

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Route 53 Recovery Control Config Control Panel.
type ControlPanel struct {
	pulumi.CustomResourceState

	// ARN of the control panel.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// ARN of the cluster in which this control panel will reside.
	ClusterArn pulumix.Output[string] `pulumi:"clusterArn"`
	// Whether a control panel is default.
	DefaultControlPanel pulumix.Output[bool] `pulumi:"defaultControlPanel"`
	// Name describing the control panel.
	Name pulumix.Output[string] `pulumi:"name"`
	// Number routing controls in a control panel.
	RoutingControlCount pulumix.Output[int] `pulumi:"routingControlCount"`
	// Status of control panel: `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
	Status pulumix.Output[string] `pulumi:"status"`
}

// NewControlPanel registers a new resource with the given unique name, arguments, and options.
func NewControlPanel(ctx *pulumi.Context,
	name string, args *ControlPanelArgs, opts ...pulumi.ResourceOption) (*ControlPanel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterArn == nil {
		return nil, errors.New("invalid value for required argument 'ClusterArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ControlPanel
	err := ctx.RegisterResource("aws:route53recoverycontrol/controlPanel:ControlPanel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetControlPanel gets an existing ControlPanel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetControlPanel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ControlPanelState, opts ...pulumi.ResourceOption) (*ControlPanel, error) {
	var resource ControlPanel
	err := ctx.ReadResource("aws:route53recoverycontrol/controlPanel:ControlPanel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ControlPanel resources.
type controlPanelState struct {
	// ARN of the control panel.
	Arn *string `pulumi:"arn"`
	// ARN of the cluster in which this control panel will reside.
	ClusterArn *string `pulumi:"clusterArn"`
	// Whether a control panel is default.
	DefaultControlPanel *bool `pulumi:"defaultControlPanel"`
	// Name describing the control panel.
	Name *string `pulumi:"name"`
	// Number routing controls in a control panel.
	RoutingControlCount *int `pulumi:"routingControlCount"`
	// Status of control panel: `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
	Status *string `pulumi:"status"`
}

type ControlPanelState struct {
	// ARN of the control panel.
	Arn pulumix.Input[*string]
	// ARN of the cluster in which this control panel will reside.
	ClusterArn pulumix.Input[*string]
	// Whether a control panel is default.
	DefaultControlPanel pulumix.Input[*bool]
	// Name describing the control panel.
	Name pulumix.Input[*string]
	// Number routing controls in a control panel.
	RoutingControlCount pulumix.Input[*int]
	// Status of control panel: `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
	Status pulumix.Input[*string]
}

func (ControlPanelState) ElementType() reflect.Type {
	return reflect.TypeOf((*controlPanelState)(nil)).Elem()
}

type controlPanelArgs struct {
	// ARN of the cluster in which this control panel will reside.
	ClusterArn string `pulumi:"clusterArn"`
	// Name describing the control panel.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ControlPanel resource.
type ControlPanelArgs struct {
	// ARN of the cluster in which this control panel will reside.
	ClusterArn pulumix.Input[string]
	// Name describing the control panel.
	Name pulumix.Input[*string]
}

func (ControlPanelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*controlPanelArgs)(nil)).Elem()
}

type ControlPanelOutput struct{ *pulumi.OutputState }

func (ControlPanelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlPanel)(nil)).Elem()
}

func (o ControlPanelOutput) ToControlPanelOutput() ControlPanelOutput {
	return o
}

func (o ControlPanelOutput) ToControlPanelOutputWithContext(ctx context.Context) ControlPanelOutput {
	return o
}

func (o ControlPanelOutput) ToOutput(ctx context.Context) pulumix.Output[ControlPanel] {
	return pulumix.Output[ControlPanel]{
		OutputState: o.OutputState,
	}
}

// ARN of the control panel.
func (o ControlPanelOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ControlPanel](o, func(v ControlPanel) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the cluster in which this control panel will reside.
func (o ControlPanelOutput) ClusterArn() pulumix.Output[string] {
	value := pulumix.Apply[ControlPanel](o, func(v ControlPanel) pulumix.Output[string] { return v.ClusterArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether a control panel is default.
func (o ControlPanelOutput) DefaultControlPanel() pulumix.Output[bool] {
	value := pulumix.Apply[ControlPanel](o, func(v ControlPanel) pulumix.Output[bool] { return v.DefaultControlPanel })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Name describing the control panel.
func (o ControlPanelOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ControlPanel](o, func(v ControlPanel) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Number routing controls in a control panel.
func (o ControlPanelOutput) RoutingControlCount() pulumix.Output[int] {
	value := pulumix.Apply[ControlPanel](o, func(v ControlPanel) pulumix.Output[int] { return v.RoutingControlCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Status of control panel: `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
func (o ControlPanelOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[ControlPanel](o, func(v ControlPanel) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ControlPanelOutput{})
}
