// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssmincidents

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to manage a response plan in AWS Systems Manager Incident Manager.
func LookupResponsePlan(ctx *pulumi.Context, args *LookupResponsePlanArgs, opts ...pulumi.InvokeOption) (*LookupResponsePlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResponsePlanResult
	err := ctx.Invoke("aws:ssmincidents/getResponsePlan:getResponsePlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResponsePlan.
type LookupResponsePlanArgs struct {
	// The Amazon Resource Name (ARN) of the response plan.
	Arn string `pulumi:"arn"`
	// The tags applied to the response plan.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getResponsePlan.
type LookupResponsePlanResult struct {
	// (Optional) The actions that the response plan starts at the beginning of an incident.
	Actions []GetResponsePlanAction `pulumi:"actions"`
	Arn     string                  `pulumi:"arn"`
	// The Chatbot chat channel used for collaboration during an incident.
	ChatChannels []string `pulumi:"chatChannels"`
	// The long format of the response plan name. This field can contain spaces.
	DisplayName string `pulumi:"displayName"`
	// The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.
	Engagements []string `pulumi:"engagements"`
	// The provider-assigned unique ID for this managed resource.
	Id                string                            `pulumi:"id"`
	IncidentTemplates []GetResponsePlanIncidentTemplate `pulumi:"incidentTemplates"`
	// Information about third-party services integrated into the response plan. The following values are supported:
	Integrations []GetResponsePlanIntegration `pulumi:"integrations"`
	// The name of the PagerDuty configuration.
	Name string `pulumi:"name"`
	// The tags applied to the response plan.
	Tags map[string]string `pulumi:"tags"`
}

func LookupResponsePlanOutput(ctx *pulumi.Context, args LookupResponsePlanOutputArgs, opts ...pulumi.InvokeOption) LookupResponsePlanResultOutput {
	outputResult := pulumix.ApplyErr[*LookupResponsePlanArgs](args.ToOutput(), func(plainArgs *LookupResponsePlanArgs) (*LookupResponsePlanResult, error) {
		return LookupResponsePlan(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupResponsePlanResultOutput, *LookupResponsePlanResult](outputResult)
}

// A collection of arguments for invoking getResponsePlan.
type LookupResponsePlanOutputArgs struct {
	// The Amazon Resource Name (ARN) of the response plan.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The tags applied to the response plan.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupResponsePlanOutputArgs) ToOutput() pulumix.Output[*LookupResponsePlanArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupResponsePlanArgs {
		return &LookupResponsePlanArgs{
			Arn:  resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupResponsePlanResultOutput struct{ *pulumi.OutputState }

func (LookupResponsePlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResponsePlanResult)(nil)).Elem()
}

func (o LookupResponsePlanResultOutput) ToOutput(context.Context) pulumix.Output[*LookupResponsePlanResult] {
	return pulumix.Output[*LookupResponsePlanResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupResponsePlanResultOutput) Actions() pulumix.GArrayOutput[GetResponsePlanAction, GetResponsePlanActionOutput] {
	value := pulumix.Apply[*LookupResponsePlanResult](o, func(v *LookupResponsePlanResult) []GetResponsePlanAction { return v.Actions })
	return pulumix.GArrayOutput[GetResponsePlanAction, GetResponsePlanActionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupResponsePlanResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupResponsePlanResult](o, func(v *LookupResponsePlanResult) string { return v.Arn })
}

func (o LookupResponsePlanResultOutput) ChatChannels() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupResponsePlanResult](o, func(v *LookupResponsePlanResult) []string { return v.ChatChannels })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupResponsePlanResultOutput) DisplayName() pulumix.Output[string] {
	return pulumix.Apply[*LookupResponsePlanResult](o, func(v *LookupResponsePlanResult) string { return v.DisplayName })
}

func (o LookupResponsePlanResultOutput) Engagements() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupResponsePlanResult](o, func(v *LookupResponsePlanResult) []string { return v.Engagements })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupResponsePlanResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupResponsePlanResult](o, func(v *LookupResponsePlanResult) string { return v.Id })
}

func (o LookupResponsePlanResultOutput) IncidentTemplates() pulumix.GArrayOutput[GetResponsePlanIncidentTemplate, GetResponsePlanIncidentTemplateOutput] {
	value := pulumix.Apply[*LookupResponsePlanResult](o, func(v *LookupResponsePlanResult) []GetResponsePlanIncidentTemplate { return v.IncidentTemplates })
	return pulumix.GArrayOutput[GetResponsePlanIncidentTemplate, GetResponsePlanIncidentTemplateOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupResponsePlanResultOutput) Integrations() pulumix.GArrayOutput[GetResponsePlanIntegration, GetResponsePlanIntegrationOutput] {
	value := pulumix.Apply[*LookupResponsePlanResult](o, func(v *LookupResponsePlanResult) []GetResponsePlanIntegration { return v.Integrations })
	return pulumix.GArrayOutput[GetResponsePlanIntegration, GetResponsePlanIntegrationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupResponsePlanResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupResponsePlanResult](o, func(v *LookupResponsePlanResult) string { return v.Name })
}

func (o LookupResponsePlanResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupResponsePlanResult](o, func(v *LookupResponsePlanResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
