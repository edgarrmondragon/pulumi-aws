// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage AWS EMR Security Configurations
type SecurityConfiguration struct {
	pulumi.CustomResourceState

	// A JSON formatted Security Configuration
	Configuration pulumix.Output[string] `pulumi:"configuration"`
	// Date the Security Configuration was created
	CreationDate pulumix.Output[string] `pulumi:"creationDate"`
	// The name of the EMR Security Configuration. By default generated by this provider.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[*string] `pulumi:"namePrefix"`
}

// NewSecurityConfiguration registers a new resource with the given unique name, arguments, and options.
func NewSecurityConfiguration(ctx *pulumi.Context,
	name string, args *SecurityConfigurationArgs, opts ...pulumi.ResourceOption) (*SecurityConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityConfiguration
	err := ctx.RegisterResource("aws:emr/securityConfiguration:SecurityConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityConfiguration gets an existing SecurityConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityConfigurationState, opts ...pulumi.ResourceOption) (*SecurityConfiguration, error) {
	var resource SecurityConfiguration
	err := ctx.ReadResource("aws:emr/securityConfiguration:SecurityConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityConfiguration resources.
type securityConfigurationState struct {
	// A JSON formatted Security Configuration
	Configuration *string `pulumi:"configuration"`
	// Date the Security Configuration was created
	CreationDate *string `pulumi:"creationDate"`
	// The name of the EMR Security Configuration. By default generated by this provider.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
}

type SecurityConfigurationState struct {
	// A JSON formatted Security Configuration
	Configuration pulumix.Input[*string]
	// Date the Security Configuration was created
	CreationDate pulumix.Input[*string]
	// The name of the EMR Security Configuration. By default generated by this provider.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
}

func (SecurityConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityConfigurationState)(nil)).Elem()
}

type securityConfigurationArgs struct {
	// A JSON formatted Security Configuration
	Configuration string `pulumi:"configuration"`
	// The name of the EMR Security Configuration. By default generated by this provider.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
}

// The set of arguments for constructing a SecurityConfiguration resource.
type SecurityConfigurationArgs struct {
	// A JSON formatted Security Configuration
	Configuration pulumix.Input[string]
	// The name of the EMR Security Configuration. By default generated by this provider.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
}

func (SecurityConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityConfigurationArgs)(nil)).Elem()
}

type SecurityConfigurationOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfiguration)(nil)).Elem()
}

func (o SecurityConfigurationOutput) ToSecurityConfigurationOutput() SecurityConfigurationOutput {
	return o
}

func (o SecurityConfigurationOutput) ToSecurityConfigurationOutputWithContext(ctx context.Context) SecurityConfigurationOutput {
	return o
}

func (o SecurityConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityConfiguration] {
	return pulumix.Output[SecurityConfiguration]{
		OutputState: o.OutputState,
	}
}

// A JSON formatted Security Configuration
func (o SecurityConfigurationOutput) Configuration() pulumix.Output[string] {
	value := pulumix.Apply[SecurityConfiguration](o, func(v SecurityConfiguration) pulumix.Output[string] { return v.Configuration })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date the Security Configuration was created
func (o SecurityConfigurationOutput) CreationDate() pulumix.Output[string] {
	value := pulumix.Apply[SecurityConfiguration](o, func(v SecurityConfiguration) pulumix.Output[string] { return v.CreationDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the EMR Security Configuration. By default generated by this provider.
func (o SecurityConfigurationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[SecurityConfiguration](o, func(v SecurityConfiguration) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified
// prefix. Conflicts with `name`.
func (o SecurityConfigurationOutput) NamePrefix() pulumix.Output[*string] {
	value := pulumix.Apply[SecurityConfiguration](o, func(v SecurityConfiguration) pulumix.Output[*string] { return v.NamePrefix })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(SecurityConfigurationOutput{})
}
