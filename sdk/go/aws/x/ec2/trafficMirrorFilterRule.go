// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Traffic mirror filter rule.\
// Read [limits and considerations](https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html) for traffic mirroring
type TrafficMirrorFilterRule struct {
	pulumi.CustomResourceState

	// ARN of the traffic mirror filter rule.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Description of the traffic mirror filter rule.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Destination CIDR block to assign to the Traffic Mirror rule.
	DestinationCidrBlock pulumix.Output[string] `pulumi:"destinationCidrBlock"`
	// Destination port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
	DestinationPortRange pulumix.GPtrOutput[TrafficMirrorFilterRuleDestinationPortRange, TrafficMirrorFilterRuleDestinationPortRangeOutput] `pulumi:"destinationPortRange"`
	// Protocol number, for example 17 (UDP), to assign to the Traffic Mirror rule. For information about the protocol value, see [Protocol Numbers](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) on the Internet Assigned Numbers Authority (IANA) website.
	Protocol pulumix.Output[*int] `pulumi:"protocol"`
	// Action to take (accept | reject) on the filtered traffic. Valid values are `accept` and `reject`
	RuleAction pulumix.Output[string] `pulumi:"ruleAction"`
	// Number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
	RuleNumber pulumix.Output[int] `pulumi:"ruleNumber"`
	// Source CIDR block to assign to the Traffic Mirror rule.
	SourceCidrBlock pulumix.Output[string] `pulumi:"sourceCidrBlock"`
	// Source port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
	SourcePortRange pulumix.GPtrOutput[TrafficMirrorFilterRuleSourcePortRange, TrafficMirrorFilterRuleSourcePortRangeOutput] `pulumi:"sourcePortRange"`
	// Direction of traffic to be captured. Valid values are `ingress` and `egress`
	//
	// Traffic mirror port range support following attributes:
	TrafficDirection pulumix.Output[string] `pulumi:"trafficDirection"`
	// ID of the traffic mirror filter to which this rule should be added
	TrafficMirrorFilterId pulumix.Output[string] `pulumi:"trafficMirrorFilterId"`
}

// NewTrafficMirrorFilterRule registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorFilterRule(ctx *pulumi.Context,
	name string, args *TrafficMirrorFilterRuleArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorFilterRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.RuleAction == nil {
		return nil, errors.New("invalid value for required argument 'RuleAction'")
	}
	if args.RuleNumber == nil {
		return nil, errors.New("invalid value for required argument 'RuleNumber'")
	}
	if args.SourceCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'SourceCidrBlock'")
	}
	if args.TrafficDirection == nil {
		return nil, errors.New("invalid value for required argument 'TrafficDirection'")
	}
	if args.TrafficMirrorFilterId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorFilterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrafficMirrorFilterRule
	err := ctx.RegisterResource("aws:ec2/trafficMirrorFilterRule:TrafficMirrorFilterRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorFilterRule gets an existing TrafficMirrorFilterRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorFilterRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorFilterRuleState, opts ...pulumi.ResourceOption) (*TrafficMirrorFilterRule, error) {
	var resource TrafficMirrorFilterRule
	err := ctx.ReadResource("aws:ec2/trafficMirrorFilterRule:TrafficMirrorFilterRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorFilterRule resources.
type trafficMirrorFilterRuleState struct {
	// ARN of the traffic mirror filter rule.
	Arn *string `pulumi:"arn"`
	// Description of the traffic mirror filter rule.
	Description *string `pulumi:"description"`
	// Destination CIDR block to assign to the Traffic Mirror rule.
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// Destination port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
	DestinationPortRange *TrafficMirrorFilterRuleDestinationPortRange `pulumi:"destinationPortRange"`
	// Protocol number, for example 17 (UDP), to assign to the Traffic Mirror rule. For information about the protocol value, see [Protocol Numbers](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) on the Internet Assigned Numbers Authority (IANA) website.
	Protocol *int `pulumi:"protocol"`
	// Action to take (accept | reject) on the filtered traffic. Valid values are `accept` and `reject`
	RuleAction *string `pulumi:"ruleAction"`
	// Number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
	RuleNumber *int `pulumi:"ruleNumber"`
	// Source CIDR block to assign to the Traffic Mirror rule.
	SourceCidrBlock *string `pulumi:"sourceCidrBlock"`
	// Source port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
	SourcePortRange *TrafficMirrorFilterRuleSourcePortRange `pulumi:"sourcePortRange"`
	// Direction of traffic to be captured. Valid values are `ingress` and `egress`
	//
	// Traffic mirror port range support following attributes:
	TrafficDirection *string `pulumi:"trafficDirection"`
	// ID of the traffic mirror filter to which this rule should be added
	TrafficMirrorFilterId *string `pulumi:"trafficMirrorFilterId"`
}

type TrafficMirrorFilterRuleState struct {
	// ARN of the traffic mirror filter rule.
	Arn pulumix.Input[*string]
	// Description of the traffic mirror filter rule.
	Description pulumix.Input[*string]
	// Destination CIDR block to assign to the Traffic Mirror rule.
	DestinationCidrBlock pulumix.Input[*string]
	// Destination port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
	DestinationPortRange pulumix.Input[*TrafficMirrorFilterRuleDestinationPortRangeArgs]
	// Protocol number, for example 17 (UDP), to assign to the Traffic Mirror rule. For information about the protocol value, see [Protocol Numbers](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) on the Internet Assigned Numbers Authority (IANA) website.
	Protocol pulumix.Input[*int]
	// Action to take (accept | reject) on the filtered traffic. Valid values are `accept` and `reject`
	RuleAction pulumix.Input[*string]
	// Number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
	RuleNumber pulumix.Input[*int]
	// Source CIDR block to assign to the Traffic Mirror rule.
	SourceCidrBlock pulumix.Input[*string]
	// Source port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
	SourcePortRange pulumix.Input[*TrafficMirrorFilterRuleSourcePortRangeArgs]
	// Direction of traffic to be captured. Valid values are `ingress` and `egress`
	//
	// Traffic mirror port range support following attributes:
	TrafficDirection pulumix.Input[*string]
	// ID of the traffic mirror filter to which this rule should be added
	TrafficMirrorFilterId pulumix.Input[*string]
}

func (TrafficMirrorFilterRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorFilterRuleState)(nil)).Elem()
}

type trafficMirrorFilterRuleArgs struct {
	// Description of the traffic mirror filter rule.
	Description *string `pulumi:"description"`
	// Destination CIDR block to assign to the Traffic Mirror rule.
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// Destination port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
	DestinationPortRange *TrafficMirrorFilterRuleDestinationPortRange `pulumi:"destinationPortRange"`
	// Protocol number, for example 17 (UDP), to assign to the Traffic Mirror rule. For information about the protocol value, see [Protocol Numbers](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) on the Internet Assigned Numbers Authority (IANA) website.
	Protocol *int `pulumi:"protocol"`
	// Action to take (accept | reject) on the filtered traffic. Valid values are `accept` and `reject`
	RuleAction string `pulumi:"ruleAction"`
	// Number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
	RuleNumber int `pulumi:"ruleNumber"`
	// Source CIDR block to assign to the Traffic Mirror rule.
	SourceCidrBlock string `pulumi:"sourceCidrBlock"`
	// Source port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
	SourcePortRange *TrafficMirrorFilterRuleSourcePortRange `pulumi:"sourcePortRange"`
	// Direction of traffic to be captured. Valid values are `ingress` and `egress`
	//
	// Traffic mirror port range support following attributes:
	TrafficDirection string `pulumi:"trafficDirection"`
	// ID of the traffic mirror filter to which this rule should be added
	TrafficMirrorFilterId string `pulumi:"trafficMirrorFilterId"`
}

// The set of arguments for constructing a TrafficMirrorFilterRule resource.
type TrafficMirrorFilterRuleArgs struct {
	// Description of the traffic mirror filter rule.
	Description pulumix.Input[*string]
	// Destination CIDR block to assign to the Traffic Mirror rule.
	DestinationCidrBlock pulumix.Input[string]
	// Destination port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
	DestinationPortRange pulumix.Input[*TrafficMirrorFilterRuleDestinationPortRangeArgs]
	// Protocol number, for example 17 (UDP), to assign to the Traffic Mirror rule. For information about the protocol value, see [Protocol Numbers](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) on the Internet Assigned Numbers Authority (IANA) website.
	Protocol pulumix.Input[*int]
	// Action to take (accept | reject) on the filtered traffic. Valid values are `accept` and `reject`
	RuleAction pulumix.Input[string]
	// Number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
	RuleNumber pulumix.Input[int]
	// Source CIDR block to assign to the Traffic Mirror rule.
	SourceCidrBlock pulumix.Input[string]
	// Source port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
	SourcePortRange pulumix.Input[*TrafficMirrorFilterRuleSourcePortRangeArgs]
	// Direction of traffic to be captured. Valid values are `ingress` and `egress`
	//
	// Traffic mirror port range support following attributes:
	TrafficDirection pulumix.Input[string]
	// ID of the traffic mirror filter to which this rule should be added
	TrafficMirrorFilterId pulumix.Input[string]
}

func (TrafficMirrorFilterRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorFilterRuleArgs)(nil)).Elem()
}

type TrafficMirrorFilterRuleOutput struct{ *pulumi.OutputState }

func (TrafficMirrorFilterRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficMirrorFilterRule)(nil)).Elem()
}

func (o TrafficMirrorFilterRuleOutput) ToTrafficMirrorFilterRuleOutput() TrafficMirrorFilterRuleOutput {
	return o
}

func (o TrafficMirrorFilterRuleOutput) ToTrafficMirrorFilterRuleOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleOutput {
	return o
}

func (o TrafficMirrorFilterRuleOutput) ToOutput(ctx context.Context) pulumix.Output[TrafficMirrorFilterRule] {
	return pulumix.Output[TrafficMirrorFilterRule]{
		OutputState: o.OutputState,
	}
}

// ARN of the traffic mirror filter rule.
func (o TrafficMirrorFilterRuleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[TrafficMirrorFilterRule](o, func(v TrafficMirrorFilterRule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the traffic mirror filter rule.
func (o TrafficMirrorFilterRuleOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[TrafficMirrorFilterRule](o, func(v TrafficMirrorFilterRule) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Destination CIDR block to assign to the Traffic Mirror rule.
func (o TrafficMirrorFilterRuleOutput) DestinationCidrBlock() pulumix.Output[string] {
	value := pulumix.Apply[TrafficMirrorFilterRule](o, func(v TrafficMirrorFilterRule) pulumix.Output[string] { return v.DestinationCidrBlock })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Destination port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
func (o TrafficMirrorFilterRuleOutput) DestinationPortRange() pulumix.GPtrOutput[TrafficMirrorFilterRuleDestinationPortRange, TrafficMirrorFilterRuleDestinationPortRangeOutput] {
	value := pulumix.Apply[TrafficMirrorFilterRule](o, func(v TrafficMirrorFilterRule) pulumix.GPtrOutput[TrafficMirrorFilterRuleDestinationPortRange, TrafficMirrorFilterRuleDestinationPortRangeOutput] {
		return v.DestinationPortRange
	})
	unwrapped := pulumix.Flatten[*TrafficMirrorFilterRuleDestinationPortRange, pulumix.GPtrOutput[TrafficMirrorFilterRuleDestinationPortRange, TrafficMirrorFilterRuleDestinationPortRangeOutput]](value)
	return pulumix.GPtrOutput[TrafficMirrorFilterRuleDestinationPortRange, TrafficMirrorFilterRuleDestinationPortRangeOutput]{OutputState: unwrapped.OutputState}
}

// Protocol number, for example 17 (UDP), to assign to the Traffic Mirror rule. For information about the protocol value, see [Protocol Numbers](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) on the Internet Assigned Numbers Authority (IANA) website.
func (o TrafficMirrorFilterRuleOutput) Protocol() pulumix.Output[*int] {
	value := pulumix.Apply[TrafficMirrorFilterRule](o, func(v TrafficMirrorFilterRule) pulumix.Output[*int] { return v.Protocol })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Action to take (accept | reject) on the filtered traffic. Valid values are `accept` and `reject`
func (o TrafficMirrorFilterRuleOutput) RuleAction() pulumix.Output[string] {
	value := pulumix.Apply[TrafficMirrorFilterRule](o, func(v TrafficMirrorFilterRule) pulumix.Output[string] { return v.RuleAction })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
func (o TrafficMirrorFilterRuleOutput) RuleNumber() pulumix.Output[int] {
	value := pulumix.Apply[TrafficMirrorFilterRule](o, func(v TrafficMirrorFilterRule) pulumix.Output[int] { return v.RuleNumber })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Source CIDR block to assign to the Traffic Mirror rule.
func (o TrafficMirrorFilterRuleOutput) SourceCidrBlock() pulumix.Output[string] {
	value := pulumix.Apply[TrafficMirrorFilterRule](o, func(v TrafficMirrorFilterRule) pulumix.Output[string] { return v.SourceCidrBlock })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Source port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
func (o TrafficMirrorFilterRuleOutput) SourcePortRange() pulumix.GPtrOutput[TrafficMirrorFilterRuleSourcePortRange, TrafficMirrorFilterRuleSourcePortRangeOutput] {
	value := pulumix.Apply[TrafficMirrorFilterRule](o, func(v TrafficMirrorFilterRule) pulumix.GPtrOutput[TrafficMirrorFilterRuleSourcePortRange, TrafficMirrorFilterRuleSourcePortRangeOutput] {
		return v.SourcePortRange
	})
	unwrapped := pulumix.Flatten[*TrafficMirrorFilterRuleSourcePortRange, pulumix.GPtrOutput[TrafficMirrorFilterRuleSourcePortRange, TrafficMirrorFilterRuleSourcePortRangeOutput]](value)
	return pulumix.GPtrOutput[TrafficMirrorFilterRuleSourcePortRange, TrafficMirrorFilterRuleSourcePortRangeOutput]{OutputState: unwrapped.OutputState}
}

// Direction of traffic to be captured. Valid values are `ingress` and `egress`
//
// Traffic mirror port range support following attributes:
func (o TrafficMirrorFilterRuleOutput) TrafficDirection() pulumix.Output[string] {
	value := pulumix.Apply[TrafficMirrorFilterRule](o, func(v TrafficMirrorFilterRule) pulumix.Output[string] { return v.TrafficDirection })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the traffic mirror filter to which this rule should be added
func (o TrafficMirrorFilterRuleOutput) TrafficMirrorFilterId() pulumix.Output[string] {
	value := pulumix.Apply[TrafficMirrorFilterRule](o, func(v TrafficMirrorFilterRule) pulumix.Output[string] { return v.TrafficMirrorFilterId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(TrafficMirrorFilterRuleOutput{})
}
