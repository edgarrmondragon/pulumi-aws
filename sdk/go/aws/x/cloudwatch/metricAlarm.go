// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudWatch Metric Alarm resource.
type MetricAlarm struct {
	pulumi.CustomResourceState

	// Indicates whether or not actions should be executed during any changes to the alarm's state. Defaults to `true`.
	ActionsEnabled pulumix.Output[*bool] `pulumi:"actionsEnabled"`
	// The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	AlarmActions pulumix.ArrayOutput[string] `pulumi:"alarmActions"`
	// The description for the alarm.
	AlarmDescription pulumix.Output[*string] `pulumi:"alarmDescription"`
	// The ARN of the CloudWatch Metric Alarm.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`. Additionally, the values  `LessThanLowerOrGreaterThanUpperThreshold`, `LessThanLowerThreshold`, and `GreaterThanUpperThreshold` are used only for alarms based on anomaly detection models.
	ComparisonOperator pulumix.Output[string] `pulumi:"comparisonOperator"`
	// The number of datapoints that must be breaching to trigger the alarm.
	DatapointsToAlarm pulumix.Output[*int] `pulumi:"datapointsToAlarm"`
	// The dimensions for the alarm's associated metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions pulumix.MapOutput[string] `pulumi:"dimensions"`
	// Used only for alarms based on percentiles.
	// If you specify `ignore`, the alarm state will not change during periods with too few data points to be statistically significant.
	// If you specify `evaluate` or omit this parameter, the alarm will always be evaluated and possibly change state no matter how many data points are available.
	// The following values are supported: `ignore`, and `evaluate`.
	EvaluateLowSampleCountPercentiles pulumix.Output[string] `pulumi:"evaluateLowSampleCountPercentiles"`
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods pulumix.Output[int] `pulumi:"evaluationPeriods"`
	// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
	ExtendedStatistic pulumix.Output[*string] `pulumi:"extendedStatistic"`
	// The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	InsufficientDataActions pulumix.ArrayOutput[string] `pulumi:"insufficientDataActions"`
	// The name for the alarm's associated metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName pulumix.Output[*string] `pulumi:"metricName"`
	// Enables you to create an alarm based on a metric math expression. You may specify at most 20.
	MetricQueries pulumix.GArrayOutput[MetricAlarmMetricQuery, MetricAlarmMetricQueryOutput] `pulumi:"metricQueries"`
	// The descriptive name for the alarm. This name must be unique within the user's AWS account
	Name pulumix.Output[string] `pulumi:"name"`
	// The namespace for the alarm's associated metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace pulumix.Output[*string] `pulumi:"namespace"`
	// The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	OkActions pulumix.ArrayOutput[string] `pulumi:"okActions"`
	// The period in seconds over which the specified `statistic` is applied.
	// Valid values are `10`, `30`, or any multiple of `60`.
	Period pulumix.Output[*int] `pulumi:"period"`
	// The statistic to apply to the alarm's associated metric.
	// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Statistic pulumix.Output[*string] `pulumi:"statistic"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// > **NOTE:**  If you specify at least one `metricQuery`, you may not specify a `metricName`, `namespace`, `period` or `statistic`. If you do not specify a `metricQuery`, you must specify each of these (although you may use `extendedStatistic` instead of `statistic`).
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
	Threshold pulumix.Output[*float64] `pulumi:"threshold"`
	// If this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function.
	ThresholdMetricId pulumix.Output[*string] `pulumi:"thresholdMetricId"`
	// Sets how this alarm is to handle missing data points. The following values are supported: `missing`, `ignore`, `breaching` and `notBreaching`. Defaults to `missing`.
	TreatMissingData pulumix.Output[*string] `pulumi:"treatMissingData"`
	// The unit for the alarm's associated metric.
	Unit pulumix.Output[*string] `pulumi:"unit"`
}

// NewMetricAlarm registers a new resource with the given unique name, arguments, and options.
func NewMetricAlarm(ctx *pulumi.Context,
	name string, args *MetricAlarmArgs, opts ...pulumi.ResourceOption) (*MetricAlarm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ComparisonOperator == nil {
		return nil, errors.New("invalid value for required argument 'ComparisonOperator'")
	}
	if args.EvaluationPeriods == nil {
		return nil, errors.New("invalid value for required argument 'EvaluationPeriods'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetricAlarm
	err := ctx.RegisterResource("aws:cloudwatch/metricAlarm:MetricAlarm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricAlarm gets an existing MetricAlarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricAlarm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricAlarmState, opts ...pulumi.ResourceOption) (*MetricAlarm, error) {
	var resource MetricAlarm
	err := ctx.ReadResource("aws:cloudwatch/metricAlarm:MetricAlarm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricAlarm resources.
type metricAlarmState struct {
	// Indicates whether or not actions should be executed during any changes to the alarm's state. Defaults to `true`.
	ActionsEnabled *bool `pulumi:"actionsEnabled"`
	// The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	AlarmActions []interface{} `pulumi:"alarmActions"`
	// The description for the alarm.
	AlarmDescription *string `pulumi:"alarmDescription"`
	// The ARN of the CloudWatch Metric Alarm.
	Arn *string `pulumi:"arn"`
	// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`. Additionally, the values  `LessThanLowerOrGreaterThanUpperThreshold`, `LessThanLowerThreshold`, and `GreaterThanUpperThreshold` are used only for alarms based on anomaly detection models.
	ComparisonOperator *string `pulumi:"comparisonOperator"`
	// The number of datapoints that must be breaching to trigger the alarm.
	DatapointsToAlarm *int `pulumi:"datapointsToAlarm"`
	// The dimensions for the alarm's associated metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions map[string]string `pulumi:"dimensions"`
	// Used only for alarms based on percentiles.
	// If you specify `ignore`, the alarm state will not change during periods with too few data points to be statistically significant.
	// If you specify `evaluate` or omit this parameter, the alarm will always be evaluated and possibly change state no matter how many data points are available.
	// The following values are supported: `ignore`, and `evaluate`.
	EvaluateLowSampleCountPercentiles *string `pulumi:"evaluateLowSampleCountPercentiles"`
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods *int `pulumi:"evaluationPeriods"`
	// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
	ExtendedStatistic *string `pulumi:"extendedStatistic"`
	// The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	InsufficientDataActions []interface{} `pulumi:"insufficientDataActions"`
	// The name for the alarm's associated metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName *string `pulumi:"metricName"`
	// Enables you to create an alarm based on a metric math expression. You may specify at most 20.
	MetricQueries []MetricAlarmMetricQuery `pulumi:"metricQueries"`
	// The descriptive name for the alarm. This name must be unique within the user's AWS account
	Name *string `pulumi:"name"`
	// The namespace for the alarm's associated metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace *string `pulumi:"namespace"`
	// The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	OkActions []interface{} `pulumi:"okActions"`
	// The period in seconds over which the specified `statistic` is applied.
	// Valid values are `10`, `30`, or any multiple of `60`.
	Period *int `pulumi:"period"`
	// The statistic to apply to the alarm's associated metric.
	// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Statistic *string `pulumi:"statistic"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// > **NOTE:**  If you specify at least one `metricQuery`, you may not specify a `metricName`, `namespace`, `period` or `statistic`. If you do not specify a `metricQuery`, you must specify each of these (although you may use `extendedStatistic` instead of `statistic`).
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
	Threshold *float64 `pulumi:"threshold"`
	// If this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function.
	ThresholdMetricId *string `pulumi:"thresholdMetricId"`
	// Sets how this alarm is to handle missing data points. The following values are supported: `missing`, `ignore`, `breaching` and `notBreaching`. Defaults to `missing`.
	TreatMissingData *string `pulumi:"treatMissingData"`
	// The unit for the alarm's associated metric.
	Unit *string `pulumi:"unit"`
}

type MetricAlarmState struct {
	// Indicates whether or not actions should be executed during any changes to the alarm's state. Defaults to `true`.
	ActionsEnabled pulumix.Input[*bool]
	// The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	AlarmActions pulumix.Input[[]any]
	// The description for the alarm.
	AlarmDescription pulumix.Input[*string]
	// The ARN of the CloudWatch Metric Alarm.
	Arn pulumix.Input[*string]
	// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`. Additionally, the values  `LessThanLowerOrGreaterThanUpperThreshold`, `LessThanLowerThreshold`, and `GreaterThanUpperThreshold` are used only for alarms based on anomaly detection models.
	ComparisonOperator pulumix.Input[*string]
	// The number of datapoints that must be breaching to trigger the alarm.
	DatapointsToAlarm pulumix.Input[*int]
	// The dimensions for the alarm's associated metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions pulumix.Input[map[string]string]
	// Used only for alarms based on percentiles.
	// If you specify `ignore`, the alarm state will not change during periods with too few data points to be statistically significant.
	// If you specify `evaluate` or omit this parameter, the alarm will always be evaluated and possibly change state no matter how many data points are available.
	// The following values are supported: `ignore`, and `evaluate`.
	EvaluateLowSampleCountPercentiles pulumix.Input[*string]
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods pulumix.Input[*int]
	// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
	ExtendedStatistic pulumix.Input[*string]
	// The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	InsufficientDataActions pulumix.Input[[]any]
	// The name for the alarm's associated metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName pulumix.Input[*string]
	// Enables you to create an alarm based on a metric math expression. You may specify at most 20.
	MetricQueries pulumix.Input[[]*MetricAlarmMetricQueryArgs]
	// The descriptive name for the alarm. This name must be unique within the user's AWS account
	Name pulumix.Input[*string]
	// The namespace for the alarm's associated metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace pulumix.Input[*string]
	// The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	OkActions pulumix.Input[[]any]
	// The period in seconds over which the specified `statistic` is applied.
	// Valid values are `10`, `30`, or any multiple of `60`.
	Period pulumix.Input[*int]
	// The statistic to apply to the alarm's associated metric.
	// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Statistic pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// > **NOTE:**  If you specify at least one `metricQuery`, you may not specify a `metricName`, `namespace`, `period` or `statistic`. If you do not specify a `metricQuery`, you must specify each of these (although you may use `extendedStatistic` instead of `statistic`).
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
	Threshold pulumix.Input[*float64]
	// If this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function.
	ThresholdMetricId pulumix.Input[*string]
	// Sets how this alarm is to handle missing data points. The following values are supported: `missing`, `ignore`, `breaching` and `notBreaching`. Defaults to `missing`.
	TreatMissingData pulumix.Input[*string]
	// The unit for the alarm's associated metric.
	Unit pulumix.Input[*string]
}

func (MetricAlarmState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricAlarmState)(nil)).Elem()
}

type metricAlarmArgs struct {
	// Indicates whether or not actions should be executed during any changes to the alarm's state. Defaults to `true`.
	ActionsEnabled *bool `pulumi:"actionsEnabled"`
	// The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	AlarmActions []interface{} `pulumi:"alarmActions"`
	// The description for the alarm.
	AlarmDescription *string `pulumi:"alarmDescription"`
	// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`. Additionally, the values  `LessThanLowerOrGreaterThanUpperThreshold`, `LessThanLowerThreshold`, and `GreaterThanUpperThreshold` are used only for alarms based on anomaly detection models.
	ComparisonOperator string `pulumi:"comparisonOperator"`
	// The number of datapoints that must be breaching to trigger the alarm.
	DatapointsToAlarm *int `pulumi:"datapointsToAlarm"`
	// The dimensions for the alarm's associated metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions map[string]string `pulumi:"dimensions"`
	// Used only for alarms based on percentiles.
	// If you specify `ignore`, the alarm state will not change during periods with too few data points to be statistically significant.
	// If you specify `evaluate` or omit this parameter, the alarm will always be evaluated and possibly change state no matter how many data points are available.
	// The following values are supported: `ignore`, and `evaluate`.
	EvaluateLowSampleCountPercentiles *string `pulumi:"evaluateLowSampleCountPercentiles"`
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods int `pulumi:"evaluationPeriods"`
	// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
	ExtendedStatistic *string `pulumi:"extendedStatistic"`
	// The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	InsufficientDataActions []interface{} `pulumi:"insufficientDataActions"`
	// The name for the alarm's associated metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName *string `pulumi:"metricName"`
	// Enables you to create an alarm based on a metric math expression. You may specify at most 20.
	MetricQueries []MetricAlarmMetricQuery `pulumi:"metricQueries"`
	// The descriptive name for the alarm. This name must be unique within the user's AWS account
	Name *string `pulumi:"name"`
	// The namespace for the alarm's associated metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace *string `pulumi:"namespace"`
	// The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	OkActions []interface{} `pulumi:"okActions"`
	// The period in seconds over which the specified `statistic` is applied.
	// Valid values are `10`, `30`, or any multiple of `60`.
	Period *int `pulumi:"period"`
	// The statistic to apply to the alarm's associated metric.
	// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Statistic *string `pulumi:"statistic"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// > **NOTE:**  If you specify at least one `metricQuery`, you may not specify a `metricName`, `namespace`, `period` or `statistic`. If you do not specify a `metricQuery`, you must specify each of these (although you may use `extendedStatistic` instead of `statistic`).
	Tags map[string]string `pulumi:"tags"`
	// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
	Threshold *float64 `pulumi:"threshold"`
	// If this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function.
	ThresholdMetricId *string `pulumi:"thresholdMetricId"`
	// Sets how this alarm is to handle missing data points. The following values are supported: `missing`, `ignore`, `breaching` and `notBreaching`. Defaults to `missing`.
	TreatMissingData *string `pulumi:"treatMissingData"`
	// The unit for the alarm's associated metric.
	Unit *string `pulumi:"unit"`
}

// The set of arguments for constructing a MetricAlarm resource.
type MetricAlarmArgs struct {
	// Indicates whether or not actions should be executed during any changes to the alarm's state. Defaults to `true`.
	ActionsEnabled pulumix.Input[*bool]
	// The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	AlarmActions pulumix.Input[[]any]
	// The description for the alarm.
	AlarmDescription pulumix.Input[*string]
	// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`. Additionally, the values  `LessThanLowerOrGreaterThanUpperThreshold`, `LessThanLowerThreshold`, and `GreaterThanUpperThreshold` are used only for alarms based on anomaly detection models.
	ComparisonOperator pulumix.Input[string]
	// The number of datapoints that must be breaching to trigger the alarm.
	DatapointsToAlarm pulumix.Input[*int]
	// The dimensions for the alarm's associated metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions pulumix.Input[map[string]string]
	// Used only for alarms based on percentiles.
	// If you specify `ignore`, the alarm state will not change during periods with too few data points to be statistically significant.
	// If you specify `evaluate` or omit this parameter, the alarm will always be evaluated and possibly change state no matter how many data points are available.
	// The following values are supported: `ignore`, and `evaluate`.
	EvaluateLowSampleCountPercentiles pulumix.Input[*string]
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods pulumix.Input[int]
	// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
	ExtendedStatistic pulumix.Input[*string]
	// The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	InsufficientDataActions pulumix.Input[[]any]
	// The name for the alarm's associated metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName pulumix.Input[*string]
	// Enables you to create an alarm based on a metric math expression. You may specify at most 20.
	MetricQueries pulumix.Input[[]*MetricAlarmMetricQueryArgs]
	// The descriptive name for the alarm. This name must be unique within the user's AWS account
	Name pulumix.Input[*string]
	// The namespace for the alarm's associated metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace pulumix.Input[*string]
	// The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	OkActions pulumix.Input[[]any]
	// The period in seconds over which the specified `statistic` is applied.
	// Valid values are `10`, `30`, or any multiple of `60`.
	Period pulumix.Input[*int]
	// The statistic to apply to the alarm's associated metric.
	// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Statistic pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// > **NOTE:**  If you specify at least one `metricQuery`, you may not specify a `metricName`, `namespace`, `period` or `statistic`. If you do not specify a `metricQuery`, you must specify each of these (although you may use `extendedStatistic` instead of `statistic`).
	Tags pulumix.Input[map[string]string]
	// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
	Threshold pulumix.Input[*float64]
	// If this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function.
	ThresholdMetricId pulumix.Input[*string]
	// Sets how this alarm is to handle missing data points. The following values are supported: `missing`, `ignore`, `breaching` and `notBreaching`. Defaults to `missing`.
	TreatMissingData pulumix.Input[*string]
	// The unit for the alarm's associated metric.
	Unit pulumix.Input[*string]
}

func (MetricAlarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricAlarmArgs)(nil)).Elem()
}

type MetricAlarmOutput struct{ *pulumi.OutputState }

func (MetricAlarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarm)(nil)).Elem()
}

func (o MetricAlarmOutput) ToMetricAlarmOutput() MetricAlarmOutput {
	return o
}

func (o MetricAlarmOutput) ToMetricAlarmOutputWithContext(ctx context.Context) MetricAlarmOutput {
	return o
}

func (o MetricAlarmOutput) ToOutput(ctx context.Context) pulumix.Output[MetricAlarm] {
	return pulumix.Output[MetricAlarm]{
		OutputState: o.OutputState,
	}
}

// Indicates whether or not actions should be executed during any changes to the alarm's state. Defaults to `true`.
func (o MetricAlarmOutput) ActionsEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[*bool] { return v.ActionsEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
func (o MetricAlarmOutput) AlarmActions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.ArrayOutput[string] { return v.AlarmActions })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The description for the alarm.
func (o MetricAlarmOutput) AlarmDescription() pulumix.Output[*string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[*string] { return v.AlarmDescription })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ARN of the CloudWatch Metric Alarm.
func (o MetricAlarmOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`. Additionally, the values  `LessThanLowerOrGreaterThanUpperThreshold`, `LessThanLowerThreshold`, and `GreaterThanUpperThreshold` are used only for alarms based on anomaly detection models.
func (o MetricAlarmOutput) ComparisonOperator() pulumix.Output[string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[string] { return v.ComparisonOperator })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The number of datapoints that must be breaching to trigger the alarm.
func (o MetricAlarmOutput) DatapointsToAlarm() pulumix.Output[*int] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[*int] { return v.DatapointsToAlarm })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The dimensions for the alarm's associated metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmOutput) Dimensions() pulumix.MapOutput[string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.MapOutput[string] { return v.Dimensions })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Used only for alarms based on percentiles.
// If you specify `ignore`, the alarm state will not change during periods with too few data points to be statistically significant.
// If you specify `evaluate` or omit this parameter, the alarm will always be evaluated and possibly change state no matter how many data points are available.
// The following values are supported: `ignore`, and `evaluate`.
func (o MetricAlarmOutput) EvaluateLowSampleCountPercentiles() pulumix.Output[string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[string] { return v.EvaluateLowSampleCountPercentiles })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The number of periods over which data is compared to the specified threshold.
func (o MetricAlarmOutput) EvaluationPeriods() pulumix.Output[int] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[int] { return v.EvaluationPeriods })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
func (o MetricAlarmOutput) ExtendedStatistic() pulumix.Output[*string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[*string] { return v.ExtendedStatistic })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
func (o MetricAlarmOutput) InsufficientDataActions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.ArrayOutput[string] { return v.InsufficientDataActions })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The name for the alarm's associated metric.
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmOutput) MetricName() pulumix.Output[*string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[*string] { return v.MetricName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Enables you to create an alarm based on a metric math expression. You may specify at most 20.
func (o MetricAlarmOutput) MetricQueries() pulumix.GArrayOutput[MetricAlarmMetricQuery, MetricAlarmMetricQueryOutput] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.GArrayOutput[MetricAlarmMetricQuery, MetricAlarmMetricQueryOutput] {
		return v.MetricQueries
	})
	unwrapped := pulumix.Flatten[[]MetricAlarmMetricQuery, pulumix.GArrayOutput[MetricAlarmMetricQuery, MetricAlarmMetricQueryOutput]](value)
	return pulumix.GArrayOutput[MetricAlarmMetricQuery, MetricAlarmMetricQueryOutput]{OutputState: unwrapped.OutputState}
}

// The descriptive name for the alarm. This name must be unique within the user's AWS account
func (o MetricAlarmOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The namespace for the alarm's associated metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmOutput) Namespace() pulumix.Output[*string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[*string] { return v.Namespace })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
func (o MetricAlarmOutput) OkActions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.ArrayOutput[string] { return v.OkActions })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The period in seconds over which the specified `statistic` is applied.
// Valid values are `10`, `30`, or any multiple of `60`.
func (o MetricAlarmOutput) Period() pulumix.Output[*int] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[*int] { return v.Period })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The statistic to apply to the alarm's associated metric.
// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
func (o MetricAlarmOutput) Statistic() pulumix.Output[*string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[*string] { return v.Statistic })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
//
// > **NOTE:**  If you specify at least one `metricQuery`, you may not specify a `metricName`, `namespace`, `period` or `statistic`. If you do not specify a `metricQuery`, you must specify each of these (although you may use `extendedStatistic` instead of `statistic`).
func (o MetricAlarmOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o MetricAlarmOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
func (o MetricAlarmOutput) Threshold() pulumix.Output[*float64] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[*float64] { return v.Threshold })
	return pulumix.Flatten[*float64, pulumix.Output[*float64]](value)
}

// If this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function.
func (o MetricAlarmOutput) ThresholdMetricId() pulumix.Output[*string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[*string] { return v.ThresholdMetricId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Sets how this alarm is to handle missing data points. The following values are supported: `missing`, `ignore`, `breaching` and `notBreaching`. Defaults to `missing`.
func (o MetricAlarmOutput) TreatMissingData() pulumix.Output[*string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[*string] { return v.TreatMissingData })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The unit for the alarm's associated metric.
func (o MetricAlarmOutput) Unit() pulumix.Output[*string] {
	value := pulumix.Apply[MetricAlarm](o, func(v MetricAlarm) pulumix.Output[*string] { return v.Unit })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(MetricAlarmOutput{})
}
