// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Connect Contact Flow.
func LookupContactFlow(ctx *pulumi.Context, args *LookupContactFlowArgs, opts ...pulumi.InvokeOption) (*LookupContactFlowResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupContactFlowResult
	err := ctx.Invoke("aws:connect/getContactFlow:getContactFlow", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContactFlow.
type LookupContactFlowArgs struct {
	// Returns information on a specific Contact Flow by contact flow id
	ContactFlowId *string `pulumi:"contactFlowId"`
	// Reference to the hosting Amazon Connect Instance
	InstanceId string `pulumi:"instanceId"`
	// Returns information on a specific Contact Flow by name
	Name *string `pulumi:"name"`
	// Tags to assign to the Contact Flow.
	Tags map[string]string `pulumi:"tags"`
	// Type of Contact Flow.
	Type *string `pulumi:"type"`
}

// A collection of values returned by getContactFlow.
type LookupContactFlowResult struct {
	// ARN of the Contact Flow.
	Arn           string `pulumi:"arn"`
	ContactFlowId string `pulumi:"contactFlowId"`
	// Logic of the Contact Flow.
	Content string `pulumi:"content"`
	// Description of the Contact Flow.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	Name       string `pulumi:"name"`
	// Tags to assign to the Contact Flow.
	Tags map[string]string `pulumi:"tags"`
	// Type of Contact Flow.
	Type *string `pulumi:"type"`
}

func LookupContactFlowOutput(ctx *pulumi.Context, args LookupContactFlowOutputArgs, opts ...pulumi.InvokeOption) LookupContactFlowResultOutput {
	outputResult := pulumix.ApplyErr[*LookupContactFlowArgs](args.ToOutput(), func(plainArgs *LookupContactFlowArgs) (*LookupContactFlowResult, error) {
		return LookupContactFlow(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupContactFlowResultOutput, *LookupContactFlowResult](outputResult)
}

// A collection of arguments for invoking getContactFlow.
type LookupContactFlowOutputArgs struct {
	// Returns information on a specific Contact Flow by contact flow id
	ContactFlowId pulumix.Input[*string] `pulumi:"contactFlowId"`
	// Reference to the hosting Amazon Connect Instance
	InstanceId pulumix.Input[string] `pulumi:"instanceId"`
	// Returns information on a specific Contact Flow by name
	Name pulumix.Input[*string] `pulumi:"name"`
	// Tags to assign to the Contact Flow.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Type of Contact Flow.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (args LookupContactFlowOutputArgs) ToOutput() pulumix.Output[*LookupContactFlowArgs] {
	allArgs := pulumix.All(
		args.ContactFlowId.ToOutput(context.Background()).AsAny(),
		args.InstanceId.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.Type.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupContactFlowArgs {
		return &LookupContactFlowArgs{
			ContactFlowId: resolvedArgs[0].(*string),
			InstanceId:    resolvedArgs[1].(string),
			Name:          resolvedArgs[2].(*string),
			Tags:          resolvedArgs[3].(map[string]string),
			Type:          resolvedArgs[4].(*string),
		}
	})
}

type LookupContactFlowResultOutput struct{ *pulumi.OutputState }

func (LookupContactFlowResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContactFlowResult)(nil)).Elem()
}

func (o LookupContactFlowResultOutput) ToOutput(context.Context) pulumix.Output[*LookupContactFlowResult] {
	return pulumix.Output[*LookupContactFlowResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupContactFlowResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowResult](o, func(v *LookupContactFlowResult) string { return v.Arn })
}

func (o LookupContactFlowResultOutput) ContactFlowId() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowResult](o, func(v *LookupContactFlowResult) string { return v.ContactFlowId })
}

func (o LookupContactFlowResultOutput) Content() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowResult](o, func(v *LookupContactFlowResult) string { return v.Content })
}

func (o LookupContactFlowResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowResult](o, func(v *LookupContactFlowResult) string { return v.Description })
}

func (o LookupContactFlowResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowResult](o, func(v *LookupContactFlowResult) string { return v.Id })
}

func (o LookupContactFlowResultOutput) InstanceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowResult](o, func(v *LookupContactFlowResult) string { return v.InstanceId })
}

func (o LookupContactFlowResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowResult](o, func(v *LookupContactFlowResult) string { return v.Name })
}

func (o LookupContactFlowResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupContactFlowResult](o, func(v *LookupContactFlowResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupContactFlowResultOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[*LookupContactFlowResult](o, func(v *LookupContactFlowResult) *string { return v.Type })
}
