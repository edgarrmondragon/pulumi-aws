// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Allows you to set a redrive policy of an SQS Queue
// while referencing ARN of the dead letter queue inside the redrive policy.
//
// This is useful when you want to set a dedicated
// dead letter queue for a standard or FIFO queue, but need
// the dead letter queue to exist before setting the redrive policy.
type RedrivePolicy struct {
	pulumi.CustomResourceState

	// The URL of the SQS Queue to which to attach the policy
	QueueUrl pulumix.Output[string] `pulumi:"queueUrl"`
	// The JSON redrive policy for the SQS queue. Accepts two key/val pairs: `deadLetterTargetArn` and `maxReceiveCount`. Learn more in the [Amazon SQS dead-letter queues documentation](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).
	RedrivePolicy pulumix.Output[string] `pulumi:"redrivePolicy"`
}

// NewRedrivePolicy registers a new resource with the given unique name, arguments, and options.
func NewRedrivePolicy(ctx *pulumi.Context,
	name string, args *RedrivePolicyArgs, opts ...pulumi.ResourceOption) (*RedrivePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.QueueUrl == nil {
		return nil, errors.New("invalid value for required argument 'QueueUrl'")
	}
	if args.RedrivePolicy == nil {
		return nil, errors.New("invalid value for required argument 'RedrivePolicy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RedrivePolicy
	err := ctx.RegisterResource("aws:sqs/redrivePolicy:RedrivePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedrivePolicy gets an existing RedrivePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedrivePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedrivePolicyState, opts ...pulumi.ResourceOption) (*RedrivePolicy, error) {
	var resource RedrivePolicy
	err := ctx.ReadResource("aws:sqs/redrivePolicy:RedrivePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedrivePolicy resources.
type redrivePolicyState struct {
	// The URL of the SQS Queue to which to attach the policy
	QueueUrl *string `pulumi:"queueUrl"`
	// The JSON redrive policy for the SQS queue. Accepts two key/val pairs: `deadLetterTargetArn` and `maxReceiveCount`. Learn more in the [Amazon SQS dead-letter queues documentation](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).
	RedrivePolicy *string `pulumi:"redrivePolicy"`
}

type RedrivePolicyState struct {
	// The URL of the SQS Queue to which to attach the policy
	QueueUrl pulumix.Input[*string]
	// The JSON redrive policy for the SQS queue. Accepts two key/val pairs: `deadLetterTargetArn` and `maxReceiveCount`. Learn more in the [Amazon SQS dead-letter queues documentation](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).
	RedrivePolicy pulumix.Input[*string]
}

func (RedrivePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*redrivePolicyState)(nil)).Elem()
}

type redrivePolicyArgs struct {
	// The URL of the SQS Queue to which to attach the policy
	QueueUrl string `pulumi:"queueUrl"`
	// The JSON redrive policy for the SQS queue. Accepts two key/val pairs: `deadLetterTargetArn` and `maxReceiveCount`. Learn more in the [Amazon SQS dead-letter queues documentation](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).
	RedrivePolicy string `pulumi:"redrivePolicy"`
}

// The set of arguments for constructing a RedrivePolicy resource.
type RedrivePolicyArgs struct {
	// The URL of the SQS Queue to which to attach the policy
	QueueUrl pulumix.Input[string]
	// The JSON redrive policy for the SQS queue. Accepts two key/val pairs: `deadLetterTargetArn` and `maxReceiveCount`. Learn more in the [Amazon SQS dead-letter queues documentation](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).
	RedrivePolicy pulumix.Input[string]
}

func (RedrivePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redrivePolicyArgs)(nil)).Elem()
}

type RedrivePolicyOutput struct{ *pulumi.OutputState }

func (RedrivePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedrivePolicy)(nil)).Elem()
}

func (o RedrivePolicyOutput) ToRedrivePolicyOutput() RedrivePolicyOutput {
	return o
}

func (o RedrivePolicyOutput) ToRedrivePolicyOutputWithContext(ctx context.Context) RedrivePolicyOutput {
	return o
}

func (o RedrivePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RedrivePolicy] {
	return pulumix.Output[RedrivePolicy]{
		OutputState: o.OutputState,
	}
}

// The URL of the SQS Queue to which to attach the policy
func (o RedrivePolicyOutput) QueueUrl() pulumix.Output[string] {
	value := pulumix.Apply[RedrivePolicy](o, func(v RedrivePolicy) pulumix.Output[string] { return v.QueueUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The JSON redrive policy for the SQS queue. Accepts two key/val pairs: `deadLetterTargetArn` and `maxReceiveCount`. Learn more in the [Amazon SQS dead-letter queues documentation](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).
func (o RedrivePolicyOutput) RedrivePolicy() pulumix.Output[string] {
	value := pulumix.Apply[RedrivePolicy](o, func(v RedrivePolicy) pulumix.Output[string] { return v.RedrivePolicy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RedrivePolicyOutput{})
}
