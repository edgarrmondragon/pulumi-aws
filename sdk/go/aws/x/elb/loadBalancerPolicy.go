// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a load balancer policy, which can be attached to an ELB listener or backend server.
type LoadBalancerPolicy struct {
	pulumi.CustomResourceState

	// The load balancer on which the policy is defined.
	LoadBalancerName pulumix.Output[string] `pulumi:"loadBalancerName"`
	// Policy attribute to apply to the policy.
	PolicyAttributes pulumix.GArrayOutput[LoadBalancerPolicyPolicyAttribute, LoadBalancerPolicyPolicyAttributeOutput] `pulumi:"policyAttributes"`
	// The name of the load balancer policy.
	PolicyName pulumix.Output[string] `pulumi:"policyName"`
	// The policy type.
	PolicyTypeName pulumix.Output[string] `pulumi:"policyTypeName"`
}

// NewLoadBalancerPolicy registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancerPolicy(ctx *pulumi.Context,
	name string, args *LoadBalancerPolicyArgs, opts ...pulumi.ResourceOption) (*LoadBalancerPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadBalancerName == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerName'")
	}
	if args.PolicyName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyName'")
	}
	if args.PolicyTypeName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyTypeName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:elasticloadbalancing/loadBalancerPolicy:LoadBalancerPolicy"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancerPolicy
	err := ctx.RegisterResource("aws:elb/loadBalancerPolicy:LoadBalancerPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancerPolicy gets an existing LoadBalancerPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancerPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerPolicyState, opts ...pulumi.ResourceOption) (*LoadBalancerPolicy, error) {
	var resource LoadBalancerPolicy
	err := ctx.ReadResource("aws:elb/loadBalancerPolicy:LoadBalancerPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancerPolicy resources.
type loadBalancerPolicyState struct {
	// The load balancer on which the policy is defined.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// Policy attribute to apply to the policy.
	PolicyAttributes []LoadBalancerPolicyPolicyAttribute `pulumi:"policyAttributes"`
	// The name of the load balancer policy.
	PolicyName *string `pulumi:"policyName"`
	// The policy type.
	PolicyTypeName *string `pulumi:"policyTypeName"`
}

type LoadBalancerPolicyState struct {
	// The load balancer on which the policy is defined.
	LoadBalancerName pulumix.Input[*string]
	// Policy attribute to apply to the policy.
	PolicyAttributes pulumix.Input[[]*LoadBalancerPolicyPolicyAttributeArgs]
	// The name of the load balancer policy.
	PolicyName pulumix.Input[*string]
	// The policy type.
	PolicyTypeName pulumix.Input[*string]
}

func (LoadBalancerPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerPolicyState)(nil)).Elem()
}

type loadBalancerPolicyArgs struct {
	// The load balancer on which the policy is defined.
	LoadBalancerName string `pulumi:"loadBalancerName"`
	// Policy attribute to apply to the policy.
	PolicyAttributes []LoadBalancerPolicyPolicyAttribute `pulumi:"policyAttributes"`
	// The name of the load balancer policy.
	PolicyName string `pulumi:"policyName"`
	// The policy type.
	PolicyTypeName string `pulumi:"policyTypeName"`
}

// The set of arguments for constructing a LoadBalancerPolicy resource.
type LoadBalancerPolicyArgs struct {
	// The load balancer on which the policy is defined.
	LoadBalancerName pulumix.Input[string]
	// Policy attribute to apply to the policy.
	PolicyAttributes pulumix.Input[[]*LoadBalancerPolicyPolicyAttributeArgs]
	// The name of the load balancer policy.
	PolicyName pulumix.Input[string]
	// The policy type.
	PolicyTypeName pulumix.Input[string]
}

func (LoadBalancerPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerPolicyArgs)(nil)).Elem()
}

type LoadBalancerPolicyOutput struct{ *pulumi.OutputState }

func (LoadBalancerPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPolicy)(nil)).Elem()
}

func (o LoadBalancerPolicyOutput) ToLoadBalancerPolicyOutput() LoadBalancerPolicyOutput {
	return o
}

func (o LoadBalancerPolicyOutput) ToLoadBalancerPolicyOutputWithContext(ctx context.Context) LoadBalancerPolicyOutput {
	return o
}

func (o LoadBalancerPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[LoadBalancerPolicy] {
	return pulumix.Output[LoadBalancerPolicy]{
		OutputState: o.OutputState,
	}
}

// The load balancer on which the policy is defined.
func (o LoadBalancerPolicyOutput) LoadBalancerName() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancerPolicy](o, func(v LoadBalancerPolicy) pulumix.Output[string] { return v.LoadBalancerName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Policy attribute to apply to the policy.
func (o LoadBalancerPolicyOutput) PolicyAttributes() pulumix.GArrayOutput[LoadBalancerPolicyPolicyAttribute, LoadBalancerPolicyPolicyAttributeOutput] {
	value := pulumix.Apply[LoadBalancerPolicy](o, func(v LoadBalancerPolicy) pulumix.GArrayOutput[LoadBalancerPolicyPolicyAttribute, LoadBalancerPolicyPolicyAttributeOutput] {
		return v.PolicyAttributes
	})
	unwrapped := pulumix.Flatten[[]LoadBalancerPolicyPolicyAttribute, pulumix.GArrayOutput[LoadBalancerPolicyPolicyAttribute, LoadBalancerPolicyPolicyAttributeOutput]](value)
	return pulumix.GArrayOutput[LoadBalancerPolicyPolicyAttribute, LoadBalancerPolicyPolicyAttributeOutput]{OutputState: unwrapped.OutputState}
}

// The name of the load balancer policy.
func (o LoadBalancerPolicyOutput) PolicyName() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancerPolicy](o, func(v LoadBalancerPolicy) pulumix.Output[string] { return v.PolicyName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The policy type.
func (o LoadBalancerPolicyOutput) PolicyTypeName() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancerPolicy](o, func(v LoadBalancerPolicy) pulumix.Output[string] { return v.PolicyTypeName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LoadBalancerPolicyOutput{})
}
