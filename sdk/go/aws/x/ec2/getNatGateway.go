// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific VPC NAT Gateway.
func LookupNatGateway(ctx *pulumi.Context, args *LookupNatGatewayArgs, opts ...pulumi.InvokeOption) (*LookupNatGatewayResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNatGatewayResult
	err := ctx.Invoke("aws:ec2/getNatGateway:getNatGateway", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNatGateway.
type LookupNatGatewayArgs struct {
	// Custom filter block as described below.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Filters []GetNatGatewayFilter `pulumi:"filters"`
	// ID of the specific NAT Gateway to retrieve.
	Id *string `pulumi:"id"`
	// State of the NAT Gateway (pending | failed | available | deleting | deleted ).
	State *string `pulumi:"state"`
	// ID of subnet that the NAT Gateway resides in.
	SubnetId *string `pulumi:"subnetId"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired NAT Gateway.
	Tags map[string]string `pulumi:"tags"`
	// ID of the VPC that the NAT Gateway resides in.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getNatGateway.
type LookupNatGatewayResult struct {
	// ID of the EIP allocated to the selected NAT Gateway.
	AllocationId string `pulumi:"allocationId"`
	// The association ID of the Elastic IP address that's associated with the NAT Gateway. Only available when `connectivityType` is `public`.
	AssociationId string `pulumi:"associationId"`
	// Connectivity type of the NAT Gateway.
	ConnectivityType string                `pulumi:"connectivityType"`
	Filters          []GetNatGatewayFilter `pulumi:"filters"`
	Id               string                `pulumi:"id"`
	// The ID of the ENI allocated to the selected NAT Gateway.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// Private IP address of the selected NAT Gateway.
	PrivateIp string `pulumi:"privateIp"`
	// Public IP (EIP) address of the selected NAT Gateway.
	PublicIp string `pulumi:"publicIp"`
	// Secondary allocation EIP IDs for the selected NAT Gateway.
	SecondaryAllocationIds []string `pulumi:"secondaryAllocationIds"`
	// The number of secondary private IPv4 addresses assigned to the selected NAT Gateway.
	SecondaryPrivateIpAddressCount int `pulumi:"secondaryPrivateIpAddressCount"`
	// Secondary private IPv4 addresses assigned to the selected NAT Gateway.
	SecondaryPrivateIpAddresses []string          `pulumi:"secondaryPrivateIpAddresses"`
	State                       string            `pulumi:"state"`
	SubnetId                    string            `pulumi:"subnetId"`
	Tags                        map[string]string `pulumi:"tags"`
	VpcId                       string            `pulumi:"vpcId"`
}

func LookupNatGatewayOutput(ctx *pulumi.Context, args LookupNatGatewayOutputArgs, opts ...pulumi.InvokeOption) LookupNatGatewayResultOutput {
	outputResult := pulumix.ApplyErr[*LookupNatGatewayArgs](args.ToOutput(), func(plainArgs *LookupNatGatewayArgs) (*LookupNatGatewayResult, error) {
		return LookupNatGateway(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupNatGatewayResultOutput, *LookupNatGatewayResult](outputResult)
}

// A collection of arguments for invoking getNatGateway.
type LookupNatGatewayOutputArgs struct {
	// Custom filter block as described below.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Filters pulumix.Input[[]*GetNatGatewayFilterArgs] `pulumi:"filters"`
	// ID of the specific NAT Gateway to retrieve.
	Id pulumix.Input[*string] `pulumi:"id"`
	// State of the NAT Gateway (pending | failed | available | deleting | deleted ).
	State pulumix.Input[*string] `pulumi:"state"`
	// ID of subnet that the NAT Gateway resides in.
	SubnetId pulumix.Input[*string] `pulumi:"subnetId"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired NAT Gateway.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// ID of the VPC that the NAT Gateway resides in.
	VpcId pulumix.Input[*string] `pulumi:"vpcId"`
}

func (args LookupNatGatewayOutputArgs) ToOutput() pulumix.Output[*LookupNatGatewayArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.State.ToOutput(context.Background()).AsAny(),
		args.SubnetId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.VpcId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupNatGatewayArgs {
		return &LookupNatGatewayArgs{
			Filters:  resolvedArgs[0].([]GetNatGatewayFilter),
			Id:       resolvedArgs[1].(*string),
			State:    resolvedArgs[2].(*string),
			SubnetId: resolvedArgs[3].(*string),
			Tags:     resolvedArgs[4].(map[string]string),
			VpcId:    resolvedArgs[5].(*string),
		}
	})
}

type LookupNatGatewayResultOutput struct{ *pulumi.OutputState }

func (LookupNatGatewayResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNatGatewayResult)(nil)).Elem()
}

func (o LookupNatGatewayResultOutput) ToOutput(context.Context) pulumix.Output[*LookupNatGatewayResult] {
	return pulumix.Output[*LookupNatGatewayResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupNatGatewayResultOutput) AllocationId() pulumix.Output[string] {
	return pulumix.Apply[*LookupNatGatewayResult](o, func(v *LookupNatGatewayResult) string { return v.AllocationId })
}

func (o LookupNatGatewayResultOutput) AssociationId() pulumix.Output[string] {
	return pulumix.Apply[*LookupNatGatewayResult](o, func(v *LookupNatGatewayResult) string { return v.AssociationId })
}

func (o LookupNatGatewayResultOutput) ConnectivityType() pulumix.Output[string] {
	return pulumix.Apply[*LookupNatGatewayResult](o, func(v *LookupNatGatewayResult) string { return v.ConnectivityType })
}

func (o LookupNatGatewayResultOutput) Filters() pulumix.GArrayOutput[GetNatGatewayFilter, GetNatGatewayFilterOutput] {
	value := pulumix.Apply[*LookupNatGatewayResult](o, func(v *LookupNatGatewayResult) []GetNatGatewayFilter { return v.Filters })
	return pulumix.GArrayOutput[GetNatGatewayFilter, GetNatGatewayFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupNatGatewayResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupNatGatewayResult](o, func(v *LookupNatGatewayResult) string { return v.Id })
}

func (o LookupNatGatewayResultOutput) NetworkInterfaceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupNatGatewayResult](o, func(v *LookupNatGatewayResult) string { return v.NetworkInterfaceId })
}

func (o LookupNatGatewayResultOutput) PrivateIp() pulumix.Output[string] {
	return pulumix.Apply[*LookupNatGatewayResult](o, func(v *LookupNatGatewayResult) string { return v.PrivateIp })
}

func (o LookupNatGatewayResultOutput) PublicIp() pulumix.Output[string] {
	return pulumix.Apply[*LookupNatGatewayResult](o, func(v *LookupNatGatewayResult) string { return v.PublicIp })
}

func (o LookupNatGatewayResultOutput) SecondaryAllocationIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupNatGatewayResult](o, func(v *LookupNatGatewayResult) []string { return v.SecondaryAllocationIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupNatGatewayResultOutput) SecondaryPrivateIpAddressCount() pulumix.Output[int] {
	return pulumix.Apply[*LookupNatGatewayResult](o, func(v *LookupNatGatewayResult) int { return v.SecondaryPrivateIpAddressCount })
}

func (o LookupNatGatewayResultOutput) SecondaryPrivateIpAddresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupNatGatewayResult](o, func(v *LookupNatGatewayResult) []string { return v.SecondaryPrivateIpAddresses })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupNatGatewayResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupNatGatewayResult](o, func(v *LookupNatGatewayResult) string { return v.State })
}

func (o LookupNatGatewayResultOutput) SubnetId() pulumix.Output[string] {
	return pulumix.Apply[*LookupNatGatewayResult](o, func(v *LookupNatGatewayResult) string { return v.SubnetId })
}

func (o LookupNatGatewayResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupNatGatewayResult](o, func(v *LookupNatGatewayResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupNatGatewayResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupNatGatewayResult](o, func(v *LookupNatGatewayResult) string { return v.VpcId })
}
