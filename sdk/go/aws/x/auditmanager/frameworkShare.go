// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Audit Manager Framework Share.
type FrameworkShare struct {
	pulumi.CustomResourceState

	// Comment from the sender about the share request.
	Comment pulumix.Output[*string] `pulumi:"comment"`
	// Amazon Web Services account of the recipient.
	DestinationAccount pulumix.Output[string] `pulumi:"destinationAccount"`
	// Amazon Web Services region of the recipient.
	DestinationRegion pulumix.Output[string] `pulumi:"destinationRegion"`
	// Unique identifier for the shared custom framework.
	//
	// The following arguments are optional:
	FrameworkId pulumix.Output[string] `pulumi:"frameworkId"`
	// Status of the share request.
	Status pulumix.Output[string] `pulumi:"status"`
}

// NewFrameworkShare registers a new resource with the given unique name, arguments, and options.
func NewFrameworkShare(ctx *pulumi.Context,
	name string, args *FrameworkShareArgs, opts ...pulumi.ResourceOption) (*FrameworkShare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationAccount == nil {
		return nil, errors.New("invalid value for required argument 'DestinationAccount'")
	}
	if args.DestinationRegion == nil {
		return nil, errors.New("invalid value for required argument 'DestinationRegion'")
	}
	if args.FrameworkId == nil {
		return nil, errors.New("invalid value for required argument 'FrameworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FrameworkShare
	err := ctx.RegisterResource("aws:auditmanager/frameworkShare:FrameworkShare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFrameworkShare gets an existing FrameworkShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFrameworkShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FrameworkShareState, opts ...pulumi.ResourceOption) (*FrameworkShare, error) {
	var resource FrameworkShare
	err := ctx.ReadResource("aws:auditmanager/frameworkShare:FrameworkShare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FrameworkShare resources.
type frameworkShareState struct {
	// Comment from the sender about the share request.
	Comment *string `pulumi:"comment"`
	// Amazon Web Services account of the recipient.
	DestinationAccount *string `pulumi:"destinationAccount"`
	// Amazon Web Services region of the recipient.
	DestinationRegion *string `pulumi:"destinationRegion"`
	// Unique identifier for the shared custom framework.
	//
	// The following arguments are optional:
	FrameworkId *string `pulumi:"frameworkId"`
	// Status of the share request.
	Status *string `pulumi:"status"`
}

type FrameworkShareState struct {
	// Comment from the sender about the share request.
	Comment pulumix.Input[*string]
	// Amazon Web Services account of the recipient.
	DestinationAccount pulumix.Input[*string]
	// Amazon Web Services region of the recipient.
	DestinationRegion pulumix.Input[*string]
	// Unique identifier for the shared custom framework.
	//
	// The following arguments are optional:
	FrameworkId pulumix.Input[*string]
	// Status of the share request.
	Status pulumix.Input[*string]
}

func (FrameworkShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkShareState)(nil)).Elem()
}

type frameworkShareArgs struct {
	// Comment from the sender about the share request.
	Comment *string `pulumi:"comment"`
	// Amazon Web Services account of the recipient.
	DestinationAccount string `pulumi:"destinationAccount"`
	// Amazon Web Services region of the recipient.
	DestinationRegion string `pulumi:"destinationRegion"`
	// Unique identifier for the shared custom framework.
	//
	// The following arguments are optional:
	FrameworkId string `pulumi:"frameworkId"`
}

// The set of arguments for constructing a FrameworkShare resource.
type FrameworkShareArgs struct {
	// Comment from the sender about the share request.
	Comment pulumix.Input[*string]
	// Amazon Web Services account of the recipient.
	DestinationAccount pulumix.Input[string]
	// Amazon Web Services region of the recipient.
	DestinationRegion pulumix.Input[string]
	// Unique identifier for the shared custom framework.
	//
	// The following arguments are optional:
	FrameworkId pulumix.Input[string]
}

func (FrameworkShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkShareArgs)(nil)).Elem()
}

type FrameworkShareOutput struct{ *pulumi.OutputState }

func (FrameworkShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkShare)(nil)).Elem()
}

func (o FrameworkShareOutput) ToFrameworkShareOutput() FrameworkShareOutput {
	return o
}

func (o FrameworkShareOutput) ToFrameworkShareOutputWithContext(ctx context.Context) FrameworkShareOutput {
	return o
}

func (o FrameworkShareOutput) ToOutput(ctx context.Context) pulumix.Output[FrameworkShare] {
	return pulumix.Output[FrameworkShare]{
		OutputState: o.OutputState,
	}
}

// Comment from the sender about the share request.
func (o FrameworkShareOutput) Comment() pulumix.Output[*string] {
	value := pulumix.Apply[FrameworkShare](o, func(v FrameworkShare) pulumix.Output[*string] { return v.Comment })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Amazon Web Services account of the recipient.
func (o FrameworkShareOutput) DestinationAccount() pulumix.Output[string] {
	value := pulumix.Apply[FrameworkShare](o, func(v FrameworkShare) pulumix.Output[string] { return v.DestinationAccount })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon Web Services region of the recipient.
func (o FrameworkShareOutput) DestinationRegion() pulumix.Output[string] {
	value := pulumix.Apply[FrameworkShare](o, func(v FrameworkShare) pulumix.Output[string] { return v.DestinationRegion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique identifier for the shared custom framework.
//
// The following arguments are optional:
func (o FrameworkShareOutput) FrameworkId() pulumix.Output[string] {
	value := pulumix.Apply[FrameworkShare](o, func(v FrameworkShare) pulumix.Output[string] { return v.FrameworkId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Status of the share request.
func (o FrameworkShareOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[FrameworkShare](o, func(v FrameworkShare) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(FrameworkShareOutput{})
}
