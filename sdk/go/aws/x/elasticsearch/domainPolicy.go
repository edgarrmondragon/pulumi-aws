// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Allows setting policy to an Elasticsearch domain while referencing domain attributes (e.g., ARN)
type DomainPolicy struct {
	pulumi.CustomResourceState

	// IAM policy document specifying the access policies for the domain
	AccessPolicies pulumix.Output[string] `pulumi:"accessPolicies"`
	// Name of the domain.
	DomainName pulumix.Output[string] `pulumi:"domainName"`
}

// NewDomainPolicy registers a new resource with the given unique name, arguments, and options.
func NewDomainPolicy(ctx *pulumi.Context,
	name string, args *DomainPolicyArgs, opts ...pulumi.ResourceOption) (*DomainPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessPolicies == nil {
		return nil, errors.New("invalid value for required argument 'AccessPolicies'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainPolicy
	err := ctx.RegisterResource("aws:elasticsearch/domainPolicy:DomainPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainPolicy gets an existing DomainPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainPolicyState, opts ...pulumi.ResourceOption) (*DomainPolicy, error) {
	var resource DomainPolicy
	err := ctx.ReadResource("aws:elasticsearch/domainPolicy:DomainPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainPolicy resources.
type domainPolicyState struct {
	// IAM policy document specifying the access policies for the domain
	AccessPolicies interface{} `pulumi:"accessPolicies"`
	// Name of the domain.
	DomainName *string `pulumi:"domainName"`
}

type DomainPolicyState struct {
	// IAM policy document specifying the access policies for the domain
	AccessPolicies pulumix.Input[*any]
	// Name of the domain.
	DomainName pulumix.Input[*string]
}

func (DomainPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainPolicyState)(nil)).Elem()
}

type domainPolicyArgs struct {
	// IAM policy document specifying the access policies for the domain
	AccessPolicies interface{} `pulumi:"accessPolicies"`
	// Name of the domain.
	DomainName string `pulumi:"domainName"`
}

// The set of arguments for constructing a DomainPolicy resource.
type DomainPolicyArgs struct {
	// IAM policy document specifying the access policies for the domain
	AccessPolicies pulumix.Input[any]
	// Name of the domain.
	DomainName pulumix.Input[string]
}

func (DomainPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainPolicyArgs)(nil)).Elem()
}

type DomainPolicyOutput struct{ *pulumi.OutputState }

func (DomainPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainPolicy)(nil)).Elem()
}

func (o DomainPolicyOutput) ToDomainPolicyOutput() DomainPolicyOutput {
	return o
}

func (o DomainPolicyOutput) ToDomainPolicyOutputWithContext(ctx context.Context) DomainPolicyOutput {
	return o
}

func (o DomainPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[DomainPolicy] {
	return pulumix.Output[DomainPolicy]{
		OutputState: o.OutputState,
	}
}

// IAM policy document specifying the access policies for the domain
func (o DomainPolicyOutput) AccessPolicies() pulumix.Output[string] {
	value := pulumix.Apply[DomainPolicy](o, func(v DomainPolicy) pulumix.Output[string] { return v.AccessPolicies })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the domain.
func (o DomainPolicyOutput) DomainName() pulumix.Output[string] {
	value := pulumix.Apply[DomainPolicy](o, func(v DomainPolicy) pulumix.Output[string] { return v.DomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DomainPolicyOutput{})
}
