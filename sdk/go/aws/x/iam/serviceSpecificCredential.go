// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an IAM Service Specific Credential.
type ServiceSpecificCredential struct {
	pulumi.CustomResourceState

	// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
	ServiceName pulumix.Output[string] `pulumi:"serviceName"`
	// The generated password for the service-specific credential.
	ServicePassword pulumix.Output[string] `pulumi:"servicePassword"`
	// The unique identifier for the service-specific credential.
	ServiceSpecificCredentialId pulumix.Output[string] `pulumi:"serviceSpecificCredentialId"`
	// The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
	ServiceUserName pulumix.Output[string] `pulumi:"serviceUserName"`
	// The status to be assigned to the service-specific credential. Valid values are `Active` and `Inactive`. Default value is `Active`.
	Status pulumix.Output[*string] `pulumi:"status"`
	// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
	UserName pulumix.Output[string] `pulumi:"userName"`
}

// NewServiceSpecificCredential registers a new resource with the given unique name, arguments, and options.
func NewServiceSpecificCredential(ctx *pulumi.Context,
	name string, args *ServiceSpecificCredentialArgs, opts ...pulumi.ResourceOption) (*ServiceSpecificCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"servicePassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceSpecificCredential
	err := ctx.RegisterResource("aws:iam/serviceSpecificCredential:ServiceSpecificCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceSpecificCredential gets an existing ServiceSpecificCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceSpecificCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceSpecificCredentialState, opts ...pulumi.ResourceOption) (*ServiceSpecificCredential, error) {
	var resource ServiceSpecificCredential
	err := ctx.ReadResource("aws:iam/serviceSpecificCredential:ServiceSpecificCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceSpecificCredential resources.
type serviceSpecificCredentialState struct {
	// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
	ServiceName *string `pulumi:"serviceName"`
	// The generated password for the service-specific credential.
	ServicePassword *string `pulumi:"servicePassword"`
	// The unique identifier for the service-specific credential.
	ServiceSpecificCredentialId *string `pulumi:"serviceSpecificCredentialId"`
	// The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
	ServiceUserName *string `pulumi:"serviceUserName"`
	// The status to be assigned to the service-specific credential. Valid values are `Active` and `Inactive`. Default value is `Active`.
	Status *string `pulumi:"status"`
	// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
	UserName *string `pulumi:"userName"`
}

type ServiceSpecificCredentialState struct {
	// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
	ServiceName pulumix.Input[*string]
	// The generated password for the service-specific credential.
	ServicePassword pulumix.Input[*string]
	// The unique identifier for the service-specific credential.
	ServiceSpecificCredentialId pulumix.Input[*string]
	// The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
	ServiceUserName pulumix.Input[*string]
	// The status to be assigned to the service-specific credential. Valid values are `Active` and `Inactive`. Default value is `Active`.
	Status pulumix.Input[*string]
	// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
	UserName pulumix.Input[*string]
}

func (ServiceSpecificCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceSpecificCredentialState)(nil)).Elem()
}

type serviceSpecificCredentialArgs struct {
	// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
	ServiceName string `pulumi:"serviceName"`
	// The status to be assigned to the service-specific credential. Valid values are `Active` and `Inactive`. Default value is `Active`.
	Status *string `pulumi:"status"`
	// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a ServiceSpecificCredential resource.
type ServiceSpecificCredentialArgs struct {
	// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
	ServiceName pulumix.Input[string]
	// The status to be assigned to the service-specific credential. Valid values are `Active` and `Inactive`. Default value is `Active`.
	Status pulumix.Input[*string]
	// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
	UserName pulumix.Input[string]
}

func (ServiceSpecificCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceSpecificCredentialArgs)(nil)).Elem()
}

type ServiceSpecificCredentialOutput struct{ *pulumi.OutputState }

func (ServiceSpecificCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSpecificCredential)(nil)).Elem()
}

func (o ServiceSpecificCredentialOutput) ToServiceSpecificCredentialOutput() ServiceSpecificCredentialOutput {
	return o
}

func (o ServiceSpecificCredentialOutput) ToServiceSpecificCredentialOutputWithContext(ctx context.Context) ServiceSpecificCredentialOutput {
	return o
}

func (o ServiceSpecificCredentialOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceSpecificCredential] {
	return pulumix.Output[ServiceSpecificCredential]{
		OutputState: o.OutputState,
	}
}

// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
func (o ServiceSpecificCredentialOutput) ServiceName() pulumix.Output[string] {
	value := pulumix.Apply[ServiceSpecificCredential](o, func(v ServiceSpecificCredential) pulumix.Output[string] { return v.ServiceName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The generated password for the service-specific credential.
func (o ServiceSpecificCredentialOutput) ServicePassword() pulumix.Output[string] {
	value := pulumix.Apply[ServiceSpecificCredential](o, func(v ServiceSpecificCredential) pulumix.Output[string] { return v.ServicePassword })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The unique identifier for the service-specific credential.
func (o ServiceSpecificCredentialOutput) ServiceSpecificCredentialId() pulumix.Output[string] {
	value := pulumix.Apply[ServiceSpecificCredential](o, func(v ServiceSpecificCredential) pulumix.Output[string] { return v.ServiceSpecificCredentialId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
func (o ServiceSpecificCredentialOutput) ServiceUserName() pulumix.Output[string] {
	value := pulumix.Apply[ServiceSpecificCredential](o, func(v ServiceSpecificCredential) pulumix.Output[string] { return v.ServiceUserName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The status to be assigned to the service-specific credential. Valid values are `Active` and `Inactive`. Default value is `Active`.
func (o ServiceSpecificCredentialOutput) Status() pulumix.Output[*string] {
	value := pulumix.Apply[ServiceSpecificCredential](o, func(v ServiceSpecificCredential) pulumix.Output[*string] { return v.Status })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
func (o ServiceSpecificCredentialOutput) UserName() pulumix.Output[string] {
	value := pulumix.Apply[ServiceSpecificCredential](o, func(v ServiceSpecificCredential) pulumix.Output[string] { return v.UserName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ServiceSpecificCredentialOutput{})
}
