// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sfn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AliasRoutingConfiguration struct {
	// A version of the state machine.
	StateMachineVersionArn string `pulumi:"stateMachineVersionArn"`
	// Percentage of traffic routed to the state machine version.
	//
	// The following arguments are optional:
	Weight int `pulumi:"weight"`
}

type AliasRoutingConfigurationArgs struct {
	// A version of the state machine.
	StateMachineVersionArn pulumix.Input[string] `pulumi:"stateMachineVersionArn"`
	// Percentage of traffic routed to the state machine version.
	//
	// The following arguments are optional:
	Weight pulumix.Input[int] `pulumi:"weight"`
}

func (AliasRoutingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasRoutingConfiguration)(nil)).Elem()
}

func (i AliasRoutingConfigurationArgs) ToAliasRoutingConfigurationOutput() AliasRoutingConfigurationOutput {
	return i.ToAliasRoutingConfigurationOutputWithContext(context.Background())
}

func (i AliasRoutingConfigurationArgs) ToAliasRoutingConfigurationOutputWithContext(ctx context.Context) AliasRoutingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasRoutingConfigurationOutput)
}

func (i *AliasRoutingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*AliasRoutingConfigurationArgs] {
	return pulumix.Val(i)
}

type AliasRoutingConfigurationOutput struct{ *pulumi.OutputState }

func (AliasRoutingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasRoutingConfiguration)(nil)).Elem()
}

func (o AliasRoutingConfigurationOutput) ToAliasRoutingConfigurationOutput() AliasRoutingConfigurationOutput {
	return o
}

func (o AliasRoutingConfigurationOutput) ToAliasRoutingConfigurationOutputWithContext(ctx context.Context) AliasRoutingConfigurationOutput {
	return o
}

func (o AliasRoutingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[AliasRoutingConfiguration] {
	return pulumix.Output[AliasRoutingConfiguration]{
		OutputState: o.OutputState,
	}
}

// A version of the state machine.
func (o AliasRoutingConfigurationOutput) StateMachineVersionArn() pulumix.Output[string] {
	return pulumix.Apply[AliasRoutingConfiguration](o, func(v AliasRoutingConfiguration) string { return v.StateMachineVersionArn })
}

// Percentage of traffic routed to the state machine version.
//
// The following arguments are optional:
func (o AliasRoutingConfigurationOutput) Weight() pulumix.Output[int] {
	return pulumix.Apply[AliasRoutingConfiguration](o, func(v AliasRoutingConfiguration) int { return v.Weight })
}

type StateMachineLoggingConfiguration struct {
	// Determines whether execution data is included in your log. When set to `false`, data is excluded.
	IncludeExecutionData *bool `pulumi:"includeExecutionData"`
	// Defines which category of execution history events are logged. Valid values: `ALL`, `ERROR`, `FATAL`, `OFF`
	Level *string `pulumi:"level"`
	// Amazon Resource Name (ARN) of a CloudWatch log group. Make sure the State Machine has the correct IAM policies for logging. The ARN must end with `:*`
	LogDestination *string `pulumi:"logDestination"`
}

type StateMachineLoggingConfigurationArgs struct {
	// Determines whether execution data is included in your log. When set to `false`, data is excluded.
	IncludeExecutionData pulumix.Input[*bool] `pulumi:"includeExecutionData"`
	// Defines which category of execution history events are logged. Valid values: `ALL`, `ERROR`, `FATAL`, `OFF`
	Level pulumix.Input[*string] `pulumi:"level"`
	// Amazon Resource Name (ARN) of a CloudWatch log group. Make sure the State Machine has the correct IAM policies for logging. The ARN must end with `:*`
	LogDestination pulumix.Input[*string] `pulumi:"logDestination"`
}

func (StateMachineLoggingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StateMachineLoggingConfiguration)(nil)).Elem()
}

func (i StateMachineLoggingConfigurationArgs) ToStateMachineLoggingConfigurationOutput() StateMachineLoggingConfigurationOutput {
	return i.ToStateMachineLoggingConfigurationOutputWithContext(context.Background())
}

func (i StateMachineLoggingConfigurationArgs) ToStateMachineLoggingConfigurationOutputWithContext(ctx context.Context) StateMachineLoggingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateMachineLoggingConfigurationOutput)
}

func (i *StateMachineLoggingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*StateMachineLoggingConfigurationArgs] {
	return pulumix.Val(i)
}

type StateMachineLoggingConfigurationOutput struct{ *pulumi.OutputState }

func (StateMachineLoggingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StateMachineLoggingConfiguration)(nil)).Elem()
}

func (o StateMachineLoggingConfigurationOutput) ToStateMachineLoggingConfigurationOutput() StateMachineLoggingConfigurationOutput {
	return o
}

func (o StateMachineLoggingConfigurationOutput) ToStateMachineLoggingConfigurationOutputWithContext(ctx context.Context) StateMachineLoggingConfigurationOutput {
	return o
}

func (o StateMachineLoggingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[StateMachineLoggingConfiguration] {
	return pulumix.Output[StateMachineLoggingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Determines whether execution data is included in your log. When set to `false`, data is excluded.
func (o StateMachineLoggingConfigurationOutput) IncludeExecutionData() pulumix.Output[*bool] {
	return pulumix.Apply[StateMachineLoggingConfiguration](o, func(v StateMachineLoggingConfiguration) *bool { return v.IncludeExecutionData })
}

// Defines which category of execution history events are logged. Valid values: `ALL`, `ERROR`, `FATAL`, `OFF`
func (o StateMachineLoggingConfigurationOutput) Level() pulumix.Output[*string] {
	return pulumix.Apply[StateMachineLoggingConfiguration](o, func(v StateMachineLoggingConfiguration) *string { return v.Level })
}

// Amazon Resource Name (ARN) of a CloudWatch log group. Make sure the State Machine has the correct IAM policies for logging. The ARN must end with `:*`
func (o StateMachineLoggingConfigurationOutput) LogDestination() pulumix.Output[*string] {
	return pulumix.Apply[StateMachineLoggingConfiguration](o, func(v StateMachineLoggingConfiguration) *string { return v.LogDestination })
}

type StateMachineTracingConfiguration struct {
	// When set to `true`, AWS X-Ray tracing is enabled. Make sure the State Machine has the correct IAM policies for logging. See the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/xray-iam.html) for details.
	Enabled *bool `pulumi:"enabled"`
}

type StateMachineTracingConfigurationArgs struct {
	// When set to `true`, AWS X-Ray tracing is enabled. Make sure the State Machine has the correct IAM policies for logging. See the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/xray-iam.html) for details.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
}

func (StateMachineTracingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StateMachineTracingConfiguration)(nil)).Elem()
}

func (i StateMachineTracingConfigurationArgs) ToStateMachineTracingConfigurationOutput() StateMachineTracingConfigurationOutput {
	return i.ToStateMachineTracingConfigurationOutputWithContext(context.Background())
}

func (i StateMachineTracingConfigurationArgs) ToStateMachineTracingConfigurationOutputWithContext(ctx context.Context) StateMachineTracingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateMachineTracingConfigurationOutput)
}

func (i *StateMachineTracingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*StateMachineTracingConfigurationArgs] {
	return pulumix.Val(i)
}

type StateMachineTracingConfigurationOutput struct{ *pulumi.OutputState }

func (StateMachineTracingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StateMachineTracingConfiguration)(nil)).Elem()
}

func (o StateMachineTracingConfigurationOutput) ToStateMachineTracingConfigurationOutput() StateMachineTracingConfigurationOutput {
	return o
}

func (o StateMachineTracingConfigurationOutput) ToStateMachineTracingConfigurationOutputWithContext(ctx context.Context) StateMachineTracingConfigurationOutput {
	return o
}

func (o StateMachineTracingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[StateMachineTracingConfiguration] {
	return pulumix.Output[StateMachineTracingConfiguration]{
		OutputState: o.OutputState,
	}
}

// When set to `true`, AWS X-Ray tracing is enabled. Make sure the State Machine has the correct IAM policies for logging. See the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/xray-iam.html) for details.
func (o StateMachineTracingConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[StateMachineTracingConfiguration](o, func(v StateMachineTracingConfiguration) *bool { return v.Enabled })
}

type GetAliasRoutingConfiguration struct {
	StateMachineVersionArn string `pulumi:"stateMachineVersionArn"`
	Weight                 int    `pulumi:"weight"`
}

type GetAliasRoutingConfigurationArgs struct {
	StateMachineVersionArn pulumix.Input[string] `pulumi:"stateMachineVersionArn"`
	Weight                 pulumix.Input[int]    `pulumi:"weight"`
}

func (GetAliasRoutingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAliasRoutingConfiguration)(nil)).Elem()
}

func (i GetAliasRoutingConfigurationArgs) ToGetAliasRoutingConfigurationOutput() GetAliasRoutingConfigurationOutput {
	return i.ToGetAliasRoutingConfigurationOutputWithContext(context.Background())
}

func (i GetAliasRoutingConfigurationArgs) ToGetAliasRoutingConfigurationOutputWithContext(ctx context.Context) GetAliasRoutingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAliasRoutingConfigurationOutput)
}

func (i *GetAliasRoutingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetAliasRoutingConfigurationArgs] {
	return pulumix.Val(i)
}

type GetAliasRoutingConfigurationOutput struct{ *pulumi.OutputState }

func (GetAliasRoutingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAliasRoutingConfiguration)(nil)).Elem()
}

func (o GetAliasRoutingConfigurationOutput) ToGetAliasRoutingConfigurationOutput() GetAliasRoutingConfigurationOutput {
	return o
}

func (o GetAliasRoutingConfigurationOutput) ToGetAliasRoutingConfigurationOutputWithContext(ctx context.Context) GetAliasRoutingConfigurationOutput {
	return o
}

func (o GetAliasRoutingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetAliasRoutingConfiguration] {
	return pulumix.Output[GetAliasRoutingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GetAliasRoutingConfigurationOutput) StateMachineVersionArn() pulumix.Output[string] {
	return pulumix.Apply[GetAliasRoutingConfiguration](o, func(v GetAliasRoutingConfiguration) string { return v.StateMachineVersionArn })
}

func (o GetAliasRoutingConfigurationOutput) Weight() pulumix.Output[int] {
	return pulumix.Apply[GetAliasRoutingConfiguration](o, func(v GetAliasRoutingConfiguration) int { return v.Weight })
}

func init() {
	pulumi.RegisterOutputType(AliasRoutingConfigurationOutput{})
	pulumi.RegisterOutputType(StateMachineLoggingConfigurationOutput{})
	pulumi.RegisterOutputType(StateMachineTracingConfigurationOutput{})
	pulumi.RegisterOutputType(GetAliasRoutingConfigurationOutput{})
}
