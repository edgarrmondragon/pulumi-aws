// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `ec2.Vpc` provides details about a specific VPC.
//
// This resource can prove useful when a module accepts a vpc id as
// an input variable and needs to, for example, determine the CIDR block of that
// VPC.
func LookupVpc(ctx *pulumi.Context, args *LookupVpcArgs, opts ...pulumi.InvokeOption) (*LookupVpcResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpcResult
	err := ctx.Invoke("aws:ec2/getVpc:getVpc", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpc.
type LookupVpcArgs struct {
	// Cidr block of the desired VPC.
	CidrBlock *string `pulumi:"cidrBlock"`
	// Boolean constraint on whether the desired VPC is
	// the default VPC for the region.
	Default *bool `pulumi:"default"`
	// DHCP options id of the desired VPC.
	DhcpOptionsId *string `pulumi:"dhcpOptionsId"`
	// Custom filter block as described below.
	Filters []GetVpcFilter `pulumi:"filters"`
	// ID of the specific VPC to retrieve.
	Id *string `pulumi:"id"`
	// Current state of the desired VPC.
	// Can be either `"pending"` or `"available"`.
	State *string `pulumi:"state"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired VPC.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getVpc.
type LookupVpcResult struct {
	// ARN of VPC
	Arn string `pulumi:"arn"`
	// CIDR block for the association.
	CidrBlock             string                       `pulumi:"cidrBlock"`
	CidrBlockAssociations []GetVpcCidrBlockAssociation `pulumi:"cidrBlockAssociations"`
	Default               bool                         `pulumi:"default"`
	DhcpOptionsId         string                       `pulumi:"dhcpOptionsId"`
	// Whether or not the VPC has DNS hostname support
	EnableDnsHostnames bool `pulumi:"enableDnsHostnames"`
	// Whether or not the VPC has DNS support
	EnableDnsSupport bool `pulumi:"enableDnsSupport"`
	// Whether Network Address Usage metrics are enabled for your VPC
	EnableNetworkAddressUsageMetrics bool           `pulumi:"enableNetworkAddressUsageMetrics"`
	Filters                          []GetVpcFilter `pulumi:"filters"`
	Id                               string         `pulumi:"id"`
	// Allowed tenancy of instances launched into the
	// selected VPC. May be any of `"default"`, `"dedicated"`, or `"host"`.
	InstanceTenancy string `pulumi:"instanceTenancy"`
	// Association ID for the IPv6 CIDR block.
	Ipv6AssociationId string `pulumi:"ipv6AssociationId"`
	// IPv6 CIDR block.
	Ipv6CidrBlock string `pulumi:"ipv6CidrBlock"`
	// ID of the main route table associated with this VPC.
	MainRouteTableId string `pulumi:"mainRouteTableId"`
	// ID of the AWS account that owns the VPC.
	OwnerId string `pulumi:"ownerId"`
	// State of the association.
	State string            `pulumi:"state"`
	Tags  map[string]string `pulumi:"tags"`
}

func LookupVpcOutput(ctx *pulumi.Context, args LookupVpcOutputArgs, opts ...pulumi.InvokeOption) LookupVpcResultOutput {
	outputResult := pulumix.ApplyErr[*LookupVpcArgs](args.ToOutput(), func(plainArgs *LookupVpcArgs) (*LookupVpcResult, error) {
		return LookupVpc(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupVpcResultOutput, *LookupVpcResult](outputResult)
}

// A collection of arguments for invoking getVpc.
type LookupVpcOutputArgs struct {
	// Cidr block of the desired VPC.
	CidrBlock pulumix.Input[*string] `pulumi:"cidrBlock"`
	// Boolean constraint on whether the desired VPC is
	// the default VPC for the region.
	Default pulumix.Input[*bool] `pulumi:"default"`
	// DHCP options id of the desired VPC.
	DhcpOptionsId pulumix.Input[*string] `pulumi:"dhcpOptionsId"`
	// Custom filter block as described below.
	Filters pulumix.Input[[]*GetVpcFilterArgs] `pulumi:"filters"`
	// ID of the specific VPC to retrieve.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Current state of the desired VPC.
	// Can be either `"pending"` or `"available"`.
	State pulumix.Input[*string] `pulumi:"state"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired VPC.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupVpcOutputArgs) ToOutput() pulumix.Output[*LookupVpcArgs] {
	allArgs := pulumix.All(
		args.CidrBlock.ToOutput(context.Background()).AsAny(),
		args.Default.ToOutput(context.Background()).AsAny(),
		args.DhcpOptionsId.ToOutput(context.Background()).AsAny(),
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.State.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupVpcArgs {
		return &LookupVpcArgs{
			CidrBlock:     resolvedArgs[0].(*string),
			Default:       resolvedArgs[1].(*bool),
			DhcpOptionsId: resolvedArgs[2].(*string),
			Filters:       resolvedArgs[3].([]GetVpcFilter),
			Id:            resolvedArgs[4].(*string),
			State:         resolvedArgs[5].(*string),
			Tags:          resolvedArgs[6].(map[string]string),
		}
	})
}

type LookupVpcResultOutput struct{ *pulumi.OutputState }

func (LookupVpcResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcResult)(nil)).Elem()
}

func (o LookupVpcResultOutput) ToOutput(context.Context) pulumix.Output[*LookupVpcResult] {
	return pulumix.Output[*LookupVpcResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVpcResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) string { return v.Arn })
}

func (o LookupVpcResultOutput) CidrBlock() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) string { return v.CidrBlock })
}

func (o LookupVpcResultOutput) CidrBlockAssociations() pulumix.GArrayOutput[GetVpcCidrBlockAssociation, GetVpcCidrBlockAssociationOutput] {
	value := pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) []GetVpcCidrBlockAssociation { return v.CidrBlockAssociations })
	return pulumix.GArrayOutput[GetVpcCidrBlockAssociation, GetVpcCidrBlockAssociationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcResultOutput) Default() pulumix.Output[bool] {
	return pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) bool { return v.Default })
}

func (o LookupVpcResultOutput) DhcpOptionsId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) string { return v.DhcpOptionsId })
}

func (o LookupVpcResultOutput) EnableDnsHostnames() pulumix.Output[bool] {
	return pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) bool { return v.EnableDnsHostnames })
}

func (o LookupVpcResultOutput) EnableDnsSupport() pulumix.Output[bool] {
	return pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) bool { return v.EnableDnsSupport })
}

func (o LookupVpcResultOutput) EnableNetworkAddressUsageMetrics() pulumix.Output[bool] {
	return pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) bool { return v.EnableNetworkAddressUsageMetrics })
}

func (o LookupVpcResultOutput) Filters() pulumix.GArrayOutput[GetVpcFilter, GetVpcFilterOutput] {
	value := pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) []GetVpcFilter { return v.Filters })
	return pulumix.GArrayOutput[GetVpcFilter, GetVpcFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) string { return v.Id })
}

func (o LookupVpcResultOutput) InstanceTenancy() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) string { return v.InstanceTenancy })
}

func (o LookupVpcResultOutput) Ipv6AssociationId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) string { return v.Ipv6AssociationId })
}

func (o LookupVpcResultOutput) Ipv6CidrBlock() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) string { return v.Ipv6CidrBlock })
}

func (o LookupVpcResultOutput) MainRouteTableId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) string { return v.MainRouteTableId })
}

func (o LookupVpcResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) string { return v.OwnerId })
}

func (o LookupVpcResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) string { return v.State })
}

func (o LookupVpcResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupVpcResult](o, func(v *LookupVpcResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
