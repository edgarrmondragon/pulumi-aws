// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get characteristics for a single EC2 Instance Type.
func GetInstanceType(ctx *pulumi.Context, args *GetInstanceTypeArgs, opts ...pulumi.InvokeOption) (*GetInstanceTypeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetInstanceTypeResult
	err := ctx.Invoke("aws:ec2/getInstanceType:getInstanceType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstanceType.
type GetInstanceTypeArgs struct {
	// Instance
	InstanceType string `pulumi:"instanceType"`
}

// A collection of values returned by getInstanceType.
type GetInstanceTypeResult struct {
	// `true` if auto recovery is supported.
	AutoRecoverySupported bool `pulumi:"autoRecoverySupported"`
	// `true` if it is a bare metal instance type.
	BareMetal bool `pulumi:"bareMetal"`
	// `true` if the instance type is a burstable performance instance type.
	BurstablePerformanceSupported bool `pulumi:"burstablePerformanceSupported"`
	// `true`  if the instance type is a current generation.
	CurrentGeneration bool `pulumi:"currentGeneration"`
	// `true` if Dedicated Hosts are supported on the instance type.
	DedicatedHostsSupported bool `pulumi:"dedicatedHostsSupported"`
	// Default number of cores for the instance type.
	DefaultCores int `pulumi:"defaultCores"`
	// The  default  number of threads per core for the instance type.
	DefaultThreadsPerCore int `pulumi:"defaultThreadsPerCore"`
	// Default number of vCPUs for the instance type.
	DefaultVcpus int `pulumi:"defaultVcpus"`
	// Indicates whether Amazon EBS encryption is supported.
	EbsEncryptionSupport string `pulumi:"ebsEncryptionSupport"`
	// Whether non-volatile memory express (NVMe) is supported.
	EbsNvmeSupport string `pulumi:"ebsNvmeSupport"`
	// Indicates that the instance type is Amazon EBS-optimized.
	EbsOptimizedSupport string `pulumi:"ebsOptimizedSupport"`
	// The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.
	EbsPerformanceBaselineBandwidth int `pulumi:"ebsPerformanceBaselineBandwidth"`
	// The baseline input/output storage operations per seconds for an EBS-optimized instance type.
	EbsPerformanceBaselineIops int `pulumi:"ebsPerformanceBaselineIops"`
	// The baseline throughput performance for an EBS-optimized instance type, in MBps.
	EbsPerformanceBaselineThroughput float64 `pulumi:"ebsPerformanceBaselineThroughput"`
	// The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.
	EbsPerformanceMaximumBandwidth int `pulumi:"ebsPerformanceMaximumBandwidth"`
	// The maximum input/output storage operations per second for an EBS-optimized instance type.
	EbsPerformanceMaximumIops int `pulumi:"ebsPerformanceMaximumIops"`
	// The maximum throughput performance for an EBS-optimized instance type, in MBps.
	EbsPerformanceMaximumThroughput float64 `pulumi:"ebsPerformanceMaximumThroughput"`
	// Whether Elastic Fabric Adapter (EFA) is supported.
	EfaSupported bool `pulumi:"efaSupported"`
	// Whether Elastic Network Adapter (ENA) is supported.
	EnaSupport string `pulumi:"enaSupport"`
	// Indicates whether encryption in-transit between instances is supported.
	EncryptionInTransitSupported bool `pulumi:"encryptionInTransitSupported"`
	// Describes the FPGA accelerator settings for the instance type.
	// * `fpgas.#.count` - The count of FPGA accelerators for the instance type.
	// * `fpgas.#.manufacturer` - The manufacturer of the FPGA accelerator.
	// * `fpgas.#.memory_size` - The size (in MiB) for the memory available to the FPGA accelerator.
	// * `fpgas.#.name` - The name of the FPGA accelerator.
	Fpgas []GetInstanceTypeFpga `pulumi:"fpgas"`
	// `true` if the instance type is eligible for the free tier.
	FreeTierEligible bool `pulumi:"freeTierEligible"`
	// Describes the GPU accelerators for the instance type.
	// * `gpus.#.count` - The number of GPUs for the instance type.
	// * `gpus.#.manufacturer` - The manufacturer of the GPU accelerator.
	// * `gpus.#.memory_size` - The size (in MiB) for the memory available to the GPU accelerator.
	// * `gpus.#.name` - The name of the GPU accelerator.
	Gpuses []GetInstanceTypeGpus `pulumi:"gpuses"`
	// `true` if On-Demand hibernation is supported.
	HibernationSupported bool `pulumi:"hibernationSupported"`
	// Hypervisor used for the instance type.
	Hypervisor string `pulumi:"hypervisor"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Describes the Inference accelerators for the instance type.
	// * `inference_accelerators.#.count` - The number of Inference accelerators for the instance type.
	// * `inference_accelerators.#.manufacturer` - The manufacturer of the Inference accelerator.
	// * `inference_accelerators.#.name` - The name of the Inference accelerator.
	InferenceAccelerators []GetInstanceTypeInferenceAccelerator `pulumi:"inferenceAccelerators"`
	// Describes the disks for the instance type.
	// * `instance_disks.#.count` - The number of disks with this configuration.
	// * `instance_disks.#.size` - The size of the disk in GB.
	// * `instance_disks.#.type` - The type of disk.
	InstanceDisks []GetInstanceTypeInstanceDisk `pulumi:"instanceDisks"`
	// `true` if instance storage is supported.
	InstanceStorageSupported bool   `pulumi:"instanceStorageSupported"`
	InstanceType             string `pulumi:"instanceType"`
	// `true` if IPv6 is supported.
	Ipv6Supported bool `pulumi:"ipv6Supported"`
	// The maximum number of IPv4 addresses per network interface.
	MaximumIpv4AddressesPerInterface int `pulumi:"maximumIpv4AddressesPerInterface"`
	// The maximum number of IPv6 addresses per network interface.
	MaximumIpv6AddressesPerInterface int `pulumi:"maximumIpv6AddressesPerInterface"`
	// The maximum number of network interfaces for the instance type.
	MaximumNetworkInterfaces int `pulumi:"maximumNetworkInterfaces"`
	// Size of the instance memory, in MiB.
	MemorySize int `pulumi:"memorySize"`
	// Describes the network performance.
	NetworkPerformance string `pulumi:"networkPerformance"`
	// A list of architectures supported by the instance type.
	SupportedArchitectures []string `pulumi:"supportedArchitectures"`
	// A list of supported placement groups types.
	SupportedPlacementStrategies []string `pulumi:"supportedPlacementStrategies"`
	// Indicates the supported root device types.
	SupportedRootDeviceTypes []string `pulumi:"supportedRootDeviceTypes"`
	// Indicates whether the instance type is offered for spot or On-Demand.
	SupportedUsagesClasses []string `pulumi:"supportedUsagesClasses"`
	// The supported virtualization types.
	SupportedVirtualizationTypes []string `pulumi:"supportedVirtualizationTypes"`
	// The speed of the processor, in GHz.
	SustainedClockSpeed float64 `pulumi:"sustainedClockSpeed"`
	// Total memory of all FPGA accelerators for the instance type (in MiB).
	TotalFpgaMemory int `pulumi:"totalFpgaMemory"`
	// Total size of the memory for the GPU accelerators for the instance type (in MiB).
	TotalGpuMemory int `pulumi:"totalGpuMemory"`
	// The total size of the instance disks, in GB.
	TotalInstanceStorage int `pulumi:"totalInstanceStorage"`
	// List of the valid number of cores that can be configured for the instance type.
	ValidCores []int `pulumi:"validCores"`
	// List of the valid number of threads per core that can be configured for the instance type.
	ValidThreadsPerCores []int `pulumi:"validThreadsPerCores"`
}

func GetInstanceTypeOutput(ctx *pulumi.Context, args GetInstanceTypeOutputArgs, opts ...pulumi.InvokeOption) GetInstanceTypeResultOutput {
	outputResult := pulumix.ApplyErr[*GetInstanceTypeArgs](args.ToOutput(), func(plainArgs *GetInstanceTypeArgs) (*GetInstanceTypeResult, error) {
		return GetInstanceType(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetInstanceTypeResultOutput, *GetInstanceTypeResult](outputResult)
}

// A collection of arguments for invoking getInstanceType.
type GetInstanceTypeOutputArgs struct {
	// Instance
	InstanceType pulumix.Input[string] `pulumi:"instanceType"`
}

func (args GetInstanceTypeOutputArgs) ToOutput() pulumix.Output[*GetInstanceTypeArgs] {
	allArgs := pulumix.All(
		args.InstanceType.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetInstanceTypeArgs {
		return &GetInstanceTypeArgs{
			InstanceType: resolvedArgs[0].(string),
		}
	})
}

type GetInstanceTypeResultOutput struct{ *pulumi.OutputState }

func (GetInstanceTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypeResult)(nil)).Elem()
}

func (o GetInstanceTypeResultOutput) ToOutput(context.Context) pulumix.Output[*GetInstanceTypeResult] {
	return pulumix.Output[*GetInstanceTypeResult]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceTypeResultOutput) AutoRecoverySupported() pulumix.Output[bool] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) bool { return v.AutoRecoverySupported })
}

func (o GetInstanceTypeResultOutput) BareMetal() pulumix.Output[bool] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) bool { return v.BareMetal })
}

func (o GetInstanceTypeResultOutput) BurstablePerformanceSupported() pulumix.Output[bool] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) bool { return v.BurstablePerformanceSupported })
}

func (o GetInstanceTypeResultOutput) CurrentGeneration() pulumix.Output[bool] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) bool { return v.CurrentGeneration })
}

func (o GetInstanceTypeResultOutput) DedicatedHostsSupported() pulumix.Output[bool] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) bool { return v.DedicatedHostsSupported })
}

func (o GetInstanceTypeResultOutput) DefaultCores() pulumix.Output[int] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) int { return v.DefaultCores })
}

func (o GetInstanceTypeResultOutput) DefaultThreadsPerCore() pulumix.Output[int] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) int { return v.DefaultThreadsPerCore })
}

func (o GetInstanceTypeResultOutput) DefaultVcpus() pulumix.Output[int] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) int { return v.DefaultVcpus })
}

func (o GetInstanceTypeResultOutput) EbsEncryptionSupport() pulumix.Output[string] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) string { return v.EbsEncryptionSupport })
}

func (o GetInstanceTypeResultOutput) EbsNvmeSupport() pulumix.Output[string] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) string { return v.EbsNvmeSupport })
}

func (o GetInstanceTypeResultOutput) EbsOptimizedSupport() pulumix.Output[string] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) string { return v.EbsOptimizedSupport })
}

func (o GetInstanceTypeResultOutput) EbsPerformanceBaselineBandwidth() pulumix.Output[int] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) int { return v.EbsPerformanceBaselineBandwidth })
}

func (o GetInstanceTypeResultOutput) EbsPerformanceBaselineIops() pulumix.Output[int] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) int { return v.EbsPerformanceBaselineIops })
}

func (o GetInstanceTypeResultOutput) EbsPerformanceBaselineThroughput() pulumix.Output[float64] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) float64 { return v.EbsPerformanceBaselineThroughput })
}

func (o GetInstanceTypeResultOutput) EbsPerformanceMaximumBandwidth() pulumix.Output[int] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) int { return v.EbsPerformanceMaximumBandwidth })
}

func (o GetInstanceTypeResultOutput) EbsPerformanceMaximumIops() pulumix.Output[int] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) int { return v.EbsPerformanceMaximumIops })
}

func (o GetInstanceTypeResultOutput) EbsPerformanceMaximumThroughput() pulumix.Output[float64] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) float64 { return v.EbsPerformanceMaximumThroughput })
}

func (o GetInstanceTypeResultOutput) EfaSupported() pulumix.Output[bool] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) bool { return v.EfaSupported })
}

func (o GetInstanceTypeResultOutput) EnaSupport() pulumix.Output[string] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) string { return v.EnaSupport })
}

func (o GetInstanceTypeResultOutput) EncryptionInTransitSupported() pulumix.Output[bool] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) bool { return v.EncryptionInTransitSupported })
}

func (o GetInstanceTypeResultOutput) Fpgas() pulumix.GArrayOutput[GetInstanceTypeFpga, GetInstanceTypeFpgaOutput] {
	value := pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) []GetInstanceTypeFpga { return v.Fpgas })
	return pulumix.GArrayOutput[GetInstanceTypeFpga, GetInstanceTypeFpgaOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetInstanceTypeResultOutput) FreeTierEligible() pulumix.Output[bool] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) bool { return v.FreeTierEligible })
}

func (o GetInstanceTypeResultOutput) Gpuses() pulumix.GArrayOutput[GetInstanceTypeGpus, GetInstanceTypeGpusOutput] {
	value := pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) []GetInstanceTypeGpus { return v.Gpuses })
	return pulumix.GArrayOutput[GetInstanceTypeGpus, GetInstanceTypeGpusOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetInstanceTypeResultOutput) HibernationSupported() pulumix.Output[bool] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) bool { return v.HibernationSupported })
}

func (o GetInstanceTypeResultOutput) Hypervisor() pulumix.Output[string] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) string { return v.Hypervisor })
}

func (o GetInstanceTypeResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) string { return v.Id })
}

func (o GetInstanceTypeResultOutput) InferenceAccelerators() pulumix.GArrayOutput[GetInstanceTypeInferenceAccelerator, GetInstanceTypeInferenceAcceleratorOutput] {
	value := pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) []GetInstanceTypeInferenceAccelerator { return v.InferenceAccelerators })
	return pulumix.GArrayOutput[GetInstanceTypeInferenceAccelerator, GetInstanceTypeInferenceAcceleratorOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetInstanceTypeResultOutput) InstanceDisks() pulumix.GArrayOutput[GetInstanceTypeInstanceDisk, GetInstanceTypeInstanceDiskOutput] {
	value := pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) []GetInstanceTypeInstanceDisk { return v.InstanceDisks })
	return pulumix.GArrayOutput[GetInstanceTypeInstanceDisk, GetInstanceTypeInstanceDiskOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetInstanceTypeResultOutput) InstanceStorageSupported() pulumix.Output[bool] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) bool { return v.InstanceStorageSupported })
}

func (o GetInstanceTypeResultOutput) InstanceType() pulumix.Output[string] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) string { return v.InstanceType })
}

func (o GetInstanceTypeResultOutput) Ipv6Supported() pulumix.Output[bool] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) bool { return v.Ipv6Supported })
}

func (o GetInstanceTypeResultOutput) MaximumIpv4AddressesPerInterface() pulumix.Output[int] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) int { return v.MaximumIpv4AddressesPerInterface })
}

func (o GetInstanceTypeResultOutput) MaximumIpv6AddressesPerInterface() pulumix.Output[int] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) int { return v.MaximumIpv6AddressesPerInterface })
}

func (o GetInstanceTypeResultOutput) MaximumNetworkInterfaces() pulumix.Output[int] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) int { return v.MaximumNetworkInterfaces })
}

func (o GetInstanceTypeResultOutput) MemorySize() pulumix.Output[int] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) int { return v.MemorySize })
}

func (o GetInstanceTypeResultOutput) NetworkPerformance() pulumix.Output[string] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) string { return v.NetworkPerformance })
}

func (o GetInstanceTypeResultOutput) SupportedArchitectures() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) []string { return v.SupportedArchitectures })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetInstanceTypeResultOutput) SupportedPlacementStrategies() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) []string { return v.SupportedPlacementStrategies })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetInstanceTypeResultOutput) SupportedRootDeviceTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) []string { return v.SupportedRootDeviceTypes })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetInstanceTypeResultOutput) SupportedUsagesClasses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) []string { return v.SupportedUsagesClasses })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetInstanceTypeResultOutput) SupportedVirtualizationTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) []string { return v.SupportedVirtualizationTypes })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetInstanceTypeResultOutput) SustainedClockSpeed() pulumix.Output[float64] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) float64 { return v.SustainedClockSpeed })
}

func (o GetInstanceTypeResultOutput) TotalFpgaMemory() pulumix.Output[int] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) int { return v.TotalFpgaMemory })
}

func (o GetInstanceTypeResultOutput) TotalGpuMemory() pulumix.Output[int] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) int { return v.TotalGpuMemory })
}

func (o GetInstanceTypeResultOutput) TotalInstanceStorage() pulumix.Output[int] {
	return pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) int { return v.TotalInstanceStorage })
}

func (o GetInstanceTypeResultOutput) ValidCores() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) []int { return v.ValidCores })
	return pulumix.ArrayOutput[int]{
		OutputState: value.OutputState,
	}
}

func (o GetInstanceTypeResultOutput) ValidThreadsPerCores() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[*GetInstanceTypeResult](o, func(v *GetInstanceTypeResult) []int { return v.ValidThreadsPerCores })
	return pulumix.ArrayOutput[int]{
		OutputState: value.OutputState,
	}
}
