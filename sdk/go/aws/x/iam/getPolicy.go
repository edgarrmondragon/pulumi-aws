// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can be used to fetch information about a specific
// IAM policy.
func LookupPolicy(ctx *pulumi.Context, args *LookupPolicyArgs, opts ...pulumi.InvokeOption) (*LookupPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPolicyResult
	err := ctx.Invoke("aws:iam/getPolicy:getPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPolicy.
type LookupPolicyArgs struct {
	// ARN of the IAM policy.
	// Conflicts with `name` and `pathPrefix`.
	Arn *string `pulumi:"arn"`
	// Name of the IAM policy.
	// Conflicts with `arn`.
	Name *string `pulumi:"name"`
	// Prefix of the path to the IAM policy.
	// Defaults to a slash (`/`).
	// Conflicts with `arn`.
	PathPrefix *string `pulumi:"pathPrefix"`
	// Key-value mapping of tags for the IAM Policy.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getPolicy.
type LookupPolicyResult struct {
	// ARN of the policy.
	Arn string `pulumi:"arn"`
	// Description of the policy.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Path to the policy.
	Path       string  `pulumi:"path"`
	PathPrefix *string `pulumi:"pathPrefix"`
	// Policy document of the policy.
	Policy string `pulumi:"policy"`
	// Policy's ID.
	PolicyId string `pulumi:"policyId"`
	// Key-value mapping of tags for the IAM Policy.
	Tags map[string]string `pulumi:"tags"`
}

func LookupPolicyOutput(ctx *pulumi.Context, args LookupPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupPolicyResultOutput {
	outputResult := pulumix.ApplyErr[*LookupPolicyArgs](args.ToOutput(), func(plainArgs *LookupPolicyArgs) (*LookupPolicyResult, error) {
		return LookupPolicy(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupPolicyResultOutput, *LookupPolicyResult](outputResult)
}

// A collection of arguments for invoking getPolicy.
type LookupPolicyOutputArgs struct {
	// ARN of the IAM policy.
	// Conflicts with `name` and `pathPrefix`.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// Name of the IAM policy.
	// Conflicts with `arn`.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Prefix of the path to the IAM policy.
	// Defaults to a slash (`/`).
	// Conflicts with `arn`.
	PathPrefix pulumix.Input[*string] `pulumi:"pathPrefix"`
	// Key-value mapping of tags for the IAM Policy.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupPolicyOutputArgs) ToOutput() pulumix.Output[*LookupPolicyArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.PathPrefix.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupPolicyArgs {
		return &LookupPolicyArgs{
			Arn:        resolvedArgs[0].(*string),
			Name:       resolvedArgs[1].(*string),
			PathPrefix: resolvedArgs[2].(*string),
			Tags:       resolvedArgs[3].(map[string]string),
		}
	})
}

type LookupPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyResult)(nil)).Elem()
}

func (o LookupPolicyResultOutput) ToOutput(context.Context) pulumix.Output[*LookupPolicyResult] {
	return pulumix.Output[*LookupPolicyResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupPolicyResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupPolicyResult](o, func(v *LookupPolicyResult) string { return v.Arn })
}

func (o LookupPolicyResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupPolicyResult](o, func(v *LookupPolicyResult) string { return v.Description })
}

func (o LookupPolicyResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupPolicyResult](o, func(v *LookupPolicyResult) string { return v.Id })
}

func (o LookupPolicyResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupPolicyResult](o, func(v *LookupPolicyResult) string { return v.Name })
}

func (o LookupPolicyResultOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[*LookupPolicyResult](o, func(v *LookupPolicyResult) string { return v.Path })
}

func (o LookupPolicyResultOutput) PathPrefix() pulumix.Output[*string] {
	return pulumix.Apply[*LookupPolicyResult](o, func(v *LookupPolicyResult) *string { return v.PathPrefix })
}

func (o LookupPolicyResultOutput) Policy() pulumix.Output[string] {
	return pulumix.Apply[*LookupPolicyResult](o, func(v *LookupPolicyResult) string { return v.Policy })
}

func (o LookupPolicyResultOutput) PolicyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupPolicyResult](o, func(v *LookupPolicyResult) string { return v.PolicyId })
}

func (o LookupPolicyResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupPolicyResult](o, func(v *LookupPolicyResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
