// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AppSync Type.
type Type struct {
	pulumi.CustomResourceState

	// GraphQL API ID.
	ApiId pulumix.Output[string] `pulumi:"apiId"`
	// The ARN of the type.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The type definition.
	Definition pulumix.Output[string] `pulumi:"definition"`
	// The type description.
	Description pulumix.Output[string] `pulumi:"description"`
	// The type format: `SDL` or `JSON`.
	Format pulumix.Output[string] `pulumi:"format"`
	// The type name.
	Name pulumix.Output[string] `pulumi:"name"`
}

// NewType registers a new resource with the given unique name, arguments, and options.
func NewType(ctx *pulumi.Context,
	name string, args *TypeArgs, opts ...pulumi.ResourceOption) (*Type, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.Definition == nil {
		return nil, errors.New("invalid value for required argument 'Definition'")
	}
	if args.Format == nil {
		return nil, errors.New("invalid value for required argument 'Format'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Type
	err := ctx.RegisterResource("aws:appsync/type:Type", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetType gets an existing Type resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TypeState, opts ...pulumi.ResourceOption) (*Type, error) {
	var resource Type
	err := ctx.ReadResource("aws:appsync/type:Type", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Type resources.
type typeState struct {
	// GraphQL API ID.
	ApiId *string `pulumi:"apiId"`
	// The ARN of the type.
	Arn *string `pulumi:"arn"`
	// The type definition.
	Definition *string `pulumi:"definition"`
	// The type description.
	Description *string `pulumi:"description"`
	// The type format: `SDL` or `JSON`.
	Format *string `pulumi:"format"`
	// The type name.
	Name *string `pulumi:"name"`
}

type TypeState struct {
	// GraphQL API ID.
	ApiId pulumix.Input[*string]
	// The ARN of the type.
	Arn pulumix.Input[*string]
	// The type definition.
	Definition pulumix.Input[*string]
	// The type description.
	Description pulumix.Input[*string]
	// The type format: `SDL` or `JSON`.
	Format pulumix.Input[*string]
	// The type name.
	Name pulumix.Input[*string]
}

func (TypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*typeState)(nil)).Elem()
}

type typeArgs struct {
	// GraphQL API ID.
	ApiId string `pulumi:"apiId"`
	// The type definition.
	Definition string `pulumi:"definition"`
	// The type format: `SDL` or `JSON`.
	Format string `pulumi:"format"`
}

// The set of arguments for constructing a Type resource.
type TypeArgs struct {
	// GraphQL API ID.
	ApiId pulumix.Input[string]
	// The type definition.
	Definition pulumix.Input[string]
	// The type format: `SDL` or `JSON`.
	Format pulumix.Input[string]
}

func (TypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*typeArgs)(nil)).Elem()
}

type TypeOutput struct{ *pulumi.OutputState }

func (TypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Type)(nil)).Elem()
}

func (o TypeOutput) ToTypeOutput() TypeOutput {
	return o
}

func (o TypeOutput) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return o
}

func (o TypeOutput) ToOutput(ctx context.Context) pulumix.Output[Type] {
	return pulumix.Output[Type]{
		OutputState: o.OutputState,
	}
}

// GraphQL API ID.
func (o TypeOutput) ApiId() pulumix.Output[string] {
	value := pulumix.Apply[Type](o, func(v Type) pulumix.Output[string] { return v.ApiId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the type.
func (o TypeOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Type](o, func(v Type) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type definition.
func (o TypeOutput) Definition() pulumix.Output[string] {
	value := pulumix.Apply[Type](o, func(v Type) pulumix.Output[string] { return v.Definition })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type description.
func (o TypeOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[Type](o, func(v Type) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type format: `SDL` or `JSON`.
func (o TypeOutput) Format() pulumix.Output[string] {
	value := pulumix.Apply[Type](o, func(v Type) pulumix.Output[string] { return v.Format })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type name.
func (o TypeOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Type](o, func(v Type) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(TypeOutput{})
}
