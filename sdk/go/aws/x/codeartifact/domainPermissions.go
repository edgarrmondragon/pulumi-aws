// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codeartifact

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CodeArtifact Domains Permissions Policy Resource.
type DomainPermissions struct {
	pulumi.CustomResourceState

	// The name of the domain on which to set the resource policy.
	Domain pulumix.Output[string] `pulumi:"domain"`
	// The account number of the AWS account that owns the domain.
	DomainOwner pulumix.Output[string] `pulumi:"domainOwner"`
	// A JSON policy string to be set as the access control resource policy on the provided domain.
	PolicyDocument pulumix.Output[string] `pulumi:"policyDocument"`
	// The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy.
	PolicyRevision pulumix.Output[string] `pulumi:"policyRevision"`
	// The ARN of the resource associated with the resource policy.
	ResourceArn pulumix.Output[string] `pulumi:"resourceArn"`
}

// NewDomainPermissions registers a new resource with the given unique name, arguments, and options.
func NewDomainPermissions(ctx *pulumi.Context,
	name string, args *DomainPermissionsArgs, opts ...pulumi.ResourceOption) (*DomainPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.PolicyDocument == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDocument'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainPermissions
	err := ctx.RegisterResource("aws:codeartifact/domainPermissions:DomainPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainPermissions gets an existing DomainPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainPermissionsState, opts ...pulumi.ResourceOption) (*DomainPermissions, error) {
	var resource DomainPermissions
	err := ctx.ReadResource("aws:codeartifact/domainPermissions:DomainPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainPermissions resources.
type domainPermissionsState struct {
	// The name of the domain on which to set the resource policy.
	Domain *string `pulumi:"domain"`
	// The account number of the AWS account that owns the domain.
	DomainOwner *string `pulumi:"domainOwner"`
	// A JSON policy string to be set as the access control resource policy on the provided domain.
	PolicyDocument *string `pulumi:"policyDocument"`
	// The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy.
	PolicyRevision *string `pulumi:"policyRevision"`
	// The ARN of the resource associated with the resource policy.
	ResourceArn *string `pulumi:"resourceArn"`
}

type DomainPermissionsState struct {
	// The name of the domain on which to set the resource policy.
	Domain pulumix.Input[*string]
	// The account number of the AWS account that owns the domain.
	DomainOwner pulumix.Input[*string]
	// A JSON policy string to be set as the access control resource policy on the provided domain.
	PolicyDocument pulumix.Input[*string]
	// The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy.
	PolicyRevision pulumix.Input[*string]
	// The ARN of the resource associated with the resource policy.
	ResourceArn pulumix.Input[*string]
}

func (DomainPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainPermissionsState)(nil)).Elem()
}

type domainPermissionsArgs struct {
	// The name of the domain on which to set the resource policy.
	Domain string `pulumi:"domain"`
	// The account number of the AWS account that owns the domain.
	DomainOwner *string `pulumi:"domainOwner"`
	// A JSON policy string to be set as the access control resource policy on the provided domain.
	PolicyDocument string `pulumi:"policyDocument"`
	// The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy.
	PolicyRevision *string `pulumi:"policyRevision"`
}

// The set of arguments for constructing a DomainPermissions resource.
type DomainPermissionsArgs struct {
	// The name of the domain on which to set the resource policy.
	Domain pulumix.Input[string]
	// The account number of the AWS account that owns the domain.
	DomainOwner pulumix.Input[*string]
	// A JSON policy string to be set as the access control resource policy on the provided domain.
	PolicyDocument pulumix.Input[string]
	// The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy.
	PolicyRevision pulumix.Input[*string]
}

func (DomainPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainPermissionsArgs)(nil)).Elem()
}

type DomainPermissionsOutput struct{ *pulumi.OutputState }

func (DomainPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainPermissions)(nil)).Elem()
}

func (o DomainPermissionsOutput) ToDomainPermissionsOutput() DomainPermissionsOutput {
	return o
}

func (o DomainPermissionsOutput) ToDomainPermissionsOutputWithContext(ctx context.Context) DomainPermissionsOutput {
	return o
}

func (o DomainPermissionsOutput) ToOutput(ctx context.Context) pulumix.Output[DomainPermissions] {
	return pulumix.Output[DomainPermissions]{
		OutputState: o.OutputState,
	}
}

// The name of the domain on which to set the resource policy.
func (o DomainPermissionsOutput) Domain() pulumix.Output[string] {
	value := pulumix.Apply[DomainPermissions](o, func(v DomainPermissions) pulumix.Output[string] { return v.Domain })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The account number of the AWS account that owns the domain.
func (o DomainPermissionsOutput) DomainOwner() pulumix.Output[string] {
	value := pulumix.Apply[DomainPermissions](o, func(v DomainPermissions) pulumix.Output[string] { return v.DomainOwner })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A JSON policy string to be set as the access control resource policy on the provided domain.
func (o DomainPermissionsOutput) PolicyDocument() pulumix.Output[string] {
	value := pulumix.Apply[DomainPermissions](o, func(v DomainPermissions) pulumix.Output[string] { return v.PolicyDocument })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy.
func (o DomainPermissionsOutput) PolicyRevision() pulumix.Output[string] {
	value := pulumix.Apply[DomainPermissions](o, func(v DomainPermissions) pulumix.Output[string] { return v.PolicyRevision })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the resource associated with the resource policy.
func (o DomainPermissionsOutput) ResourceArn() pulumix.Output[string] {
	value := pulumix.Apply[DomainPermissions](o, func(v DomainPermissions) pulumix.Output[string] { return v.ResourceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DomainPermissionsOutput{})
}
