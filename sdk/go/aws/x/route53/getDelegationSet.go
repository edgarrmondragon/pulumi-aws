// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `route53.DelegationSet` provides details about a specific Route 53 Delegation Set.
//
// This data source allows to find a list of name servers associated with a specific delegation set.
func LookupDelegationSet(ctx *pulumi.Context, args *LookupDelegationSetArgs, opts ...pulumi.InvokeOption) (*LookupDelegationSetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDelegationSetResult
	err := ctx.Invoke("aws:route53/getDelegationSet:getDelegationSet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDelegationSet.
type LookupDelegationSetArgs struct {
	// Delegation set ID.
	//
	// The following attribute is additionally exported:
	Id string `pulumi:"id"`
}

// A collection of values returned by getDelegationSet.
type LookupDelegationSetResult struct {
	Arn             string   `pulumi:"arn"`
	CallerReference string   `pulumi:"callerReference"`
	Id              string   `pulumi:"id"`
	NameServers     []string `pulumi:"nameServers"`
}

func LookupDelegationSetOutput(ctx *pulumi.Context, args LookupDelegationSetOutputArgs, opts ...pulumi.InvokeOption) LookupDelegationSetResultOutput {
	outputResult := pulumix.ApplyErr[*LookupDelegationSetArgs](args.ToOutput(), func(plainArgs *LookupDelegationSetArgs) (*LookupDelegationSetResult, error) {
		return LookupDelegationSet(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupDelegationSetResultOutput, *LookupDelegationSetResult](outputResult)
}

// A collection of arguments for invoking getDelegationSet.
type LookupDelegationSetOutputArgs struct {
	// Delegation set ID.
	//
	// The following attribute is additionally exported:
	Id pulumix.Input[string] `pulumi:"id"`
}

func (args LookupDelegationSetOutputArgs) ToOutput() pulumix.Output[*LookupDelegationSetArgs] {
	allArgs := pulumix.All(
		args.Id.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupDelegationSetArgs {
		return &LookupDelegationSetArgs{
			Id: resolvedArgs[0].(string),
		}
	})
}

type LookupDelegationSetResultOutput struct{ *pulumi.OutputState }

func (LookupDelegationSetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDelegationSetResult)(nil)).Elem()
}

func (o LookupDelegationSetResultOutput) ToOutput(context.Context) pulumix.Output[*LookupDelegationSetResult] {
	return pulumix.Output[*LookupDelegationSetResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDelegationSetResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupDelegationSetResult](o, func(v *LookupDelegationSetResult) string { return v.Arn })
}

func (o LookupDelegationSetResultOutput) CallerReference() pulumix.Output[string] {
	return pulumix.Apply[*LookupDelegationSetResult](o, func(v *LookupDelegationSetResult) string { return v.CallerReference })
}

func (o LookupDelegationSetResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupDelegationSetResult](o, func(v *LookupDelegationSetResult) string { return v.Id })
}

func (o LookupDelegationSetResultOutput) NameServers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupDelegationSetResult](o, func(v *LookupDelegationSetResult) []string { return v.NameServers })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
