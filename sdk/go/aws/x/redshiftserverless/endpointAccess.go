// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new Amazon Redshift Serverless Endpoint Access.
type EndpointAccess struct {
	pulumi.CustomResourceState

	// The DNS address of the VPC endpoint.
	Address pulumix.Output[string] `pulumi:"address"`
	// Amazon Resource Name (ARN) of the Redshift Serverless Endpoint Access.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The name of the endpoint.
	EndpointName pulumix.Output[string] `pulumi:"endpointName"`
	// The port that Amazon Redshift Serverless listens on.
	Port pulumix.Output[int] `pulumi:"port"`
	// An array of VPC subnet IDs to associate with the endpoint.
	SubnetIds pulumix.ArrayOutput[string] `pulumi:"subnetIds"`
	// The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
	VpcEndpoints pulumix.GArrayOutput[EndpointAccessVpcEndpoint, EndpointAccessVpcEndpointOutput] `pulumi:"vpcEndpoints"`
	// An array of security group IDs to associate with the workgroup.
	VpcSecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"vpcSecurityGroupIds"`
	// The name of the workgroup.
	WorkgroupName pulumix.Output[string] `pulumi:"workgroupName"`
}

// NewEndpointAccess registers a new resource with the given unique name, arguments, and options.
func NewEndpointAccess(ctx *pulumi.Context,
	name string, args *EndpointAccessArgs, opts ...pulumi.ResourceOption) (*EndpointAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndpointName == nil {
		return nil, errors.New("invalid value for required argument 'EndpointName'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.WorkgroupName == nil {
		return nil, errors.New("invalid value for required argument 'WorkgroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EndpointAccess
	err := ctx.RegisterResource("aws:redshiftserverless/endpointAccess:EndpointAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpointAccess gets an existing EndpointAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpointAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointAccessState, opts ...pulumi.ResourceOption) (*EndpointAccess, error) {
	var resource EndpointAccess
	err := ctx.ReadResource("aws:redshiftserverless/endpointAccess:EndpointAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EndpointAccess resources.
type endpointAccessState struct {
	// The DNS address of the VPC endpoint.
	Address *string `pulumi:"address"`
	// Amazon Resource Name (ARN) of the Redshift Serverless Endpoint Access.
	Arn *string `pulumi:"arn"`
	// The name of the endpoint.
	EndpointName *string `pulumi:"endpointName"`
	// The port that Amazon Redshift Serverless listens on.
	Port *int `pulumi:"port"`
	// An array of VPC subnet IDs to associate with the endpoint.
	SubnetIds []string `pulumi:"subnetIds"`
	// The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
	VpcEndpoints []EndpointAccessVpcEndpoint `pulumi:"vpcEndpoints"`
	// An array of security group IDs to associate with the workgroup.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
	// The name of the workgroup.
	WorkgroupName *string `pulumi:"workgroupName"`
}

type EndpointAccessState struct {
	// The DNS address of the VPC endpoint.
	Address pulumix.Input[*string]
	// Amazon Resource Name (ARN) of the Redshift Serverless Endpoint Access.
	Arn pulumix.Input[*string]
	// The name of the endpoint.
	EndpointName pulumix.Input[*string]
	// The port that Amazon Redshift Serverless listens on.
	Port pulumix.Input[*int]
	// An array of VPC subnet IDs to associate with the endpoint.
	SubnetIds pulumix.Input[[]string]
	// The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
	VpcEndpoints pulumix.Input[[]*EndpointAccessVpcEndpointArgs]
	// An array of security group IDs to associate with the workgroup.
	VpcSecurityGroupIds pulumix.Input[[]string]
	// The name of the workgroup.
	WorkgroupName pulumix.Input[*string]
}

func (EndpointAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAccessState)(nil)).Elem()
}

type endpointAccessArgs struct {
	// The name of the endpoint.
	EndpointName string `pulumi:"endpointName"`
	// An array of VPC subnet IDs to associate with the endpoint.
	SubnetIds []string `pulumi:"subnetIds"`
	// An array of security group IDs to associate with the workgroup.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
	// The name of the workgroup.
	WorkgroupName string `pulumi:"workgroupName"`
}

// The set of arguments for constructing a EndpointAccess resource.
type EndpointAccessArgs struct {
	// The name of the endpoint.
	EndpointName pulumix.Input[string]
	// An array of VPC subnet IDs to associate with the endpoint.
	SubnetIds pulumix.Input[[]string]
	// An array of security group IDs to associate with the workgroup.
	VpcSecurityGroupIds pulumix.Input[[]string]
	// The name of the workgroup.
	WorkgroupName pulumix.Input[string]
}

func (EndpointAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAccessArgs)(nil)).Elem()
}

type EndpointAccessOutput struct{ *pulumi.OutputState }

func (EndpointAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAccess)(nil)).Elem()
}

func (o EndpointAccessOutput) ToEndpointAccessOutput() EndpointAccessOutput {
	return o
}

func (o EndpointAccessOutput) ToEndpointAccessOutputWithContext(ctx context.Context) EndpointAccessOutput {
	return o
}

func (o EndpointAccessOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointAccess] {
	return pulumix.Output[EndpointAccess]{
		OutputState: o.OutputState,
	}
}

// The DNS address of the VPC endpoint.
func (o EndpointAccessOutput) Address() pulumix.Output[string] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.Output[string] { return v.Address })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon Resource Name (ARN) of the Redshift Serverless Endpoint Access.
func (o EndpointAccessOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the endpoint.
func (o EndpointAccessOutput) EndpointName() pulumix.Output[string] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.Output[string] { return v.EndpointName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The port that Amazon Redshift Serverless listens on.
func (o EndpointAccessOutput) Port() pulumix.Output[int] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.Output[int] { return v.Port })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// An array of VPC subnet IDs to associate with the endpoint.
func (o EndpointAccessOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.ArrayOutput[string] { return v.SubnetIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
func (o EndpointAccessOutput) VpcEndpoints() pulumix.GArrayOutput[EndpointAccessVpcEndpoint, EndpointAccessVpcEndpointOutput] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.GArrayOutput[EndpointAccessVpcEndpoint, EndpointAccessVpcEndpointOutput] {
		return v.VpcEndpoints
	})
	unwrapped := pulumix.Flatten[[]EndpointAccessVpcEndpoint, pulumix.GArrayOutput[EndpointAccessVpcEndpoint, EndpointAccessVpcEndpointOutput]](value)
	return pulumix.GArrayOutput[EndpointAccessVpcEndpoint, EndpointAccessVpcEndpointOutput]{OutputState: unwrapped.OutputState}
}

// An array of security group IDs to associate with the workgroup.
func (o EndpointAccessOutput) VpcSecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.ArrayOutput[string] { return v.VpcSecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The name of the workgroup.
func (o EndpointAccessOutput) WorkgroupName() pulumix.Output[string] {
	value := pulumix.Apply[EndpointAccess](o, func(v EndpointAccess) pulumix.Output[string] { return v.WorkgroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(EndpointAccessOutput{})
}
