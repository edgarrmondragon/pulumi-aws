// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Elastic Container Registry Scanning Configuration. Can't be completely deleted, instead reverts to the default `BASIC` scanning configuration without rules.
type RegistryScanningConfiguration struct {
	pulumi.CustomResourceState

	// The registry ID the scanning configuration applies to.
	RegistryId pulumix.Output[string] `pulumi:"registryId"`
	// One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. See below for schema.
	Rules pulumix.GArrayOutput[RegistryScanningConfigurationRule, RegistryScanningConfigurationRuleOutput] `pulumi:"rules"`
	// the scanning type to set for the registry. Can be either `ENHANCED` or `BASIC`.
	ScanType pulumix.Output[string] `pulumi:"scanType"`
}

// NewRegistryScanningConfiguration registers a new resource with the given unique name, arguments, and options.
func NewRegistryScanningConfiguration(ctx *pulumi.Context,
	name string, args *RegistryScanningConfigurationArgs, opts ...pulumi.ResourceOption) (*RegistryScanningConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScanType == nil {
		return nil, errors.New("invalid value for required argument 'ScanType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegistryScanningConfiguration
	err := ctx.RegisterResource("aws:ecr/registryScanningConfiguration:RegistryScanningConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryScanningConfiguration gets an existing RegistryScanningConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryScanningConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryScanningConfigurationState, opts ...pulumi.ResourceOption) (*RegistryScanningConfiguration, error) {
	var resource RegistryScanningConfiguration
	err := ctx.ReadResource("aws:ecr/registryScanningConfiguration:RegistryScanningConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryScanningConfiguration resources.
type registryScanningConfigurationState struct {
	// The registry ID the scanning configuration applies to.
	RegistryId *string `pulumi:"registryId"`
	// One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. See below for schema.
	Rules []RegistryScanningConfigurationRule `pulumi:"rules"`
	// the scanning type to set for the registry. Can be either `ENHANCED` or `BASIC`.
	ScanType *string `pulumi:"scanType"`
}

type RegistryScanningConfigurationState struct {
	// The registry ID the scanning configuration applies to.
	RegistryId pulumix.Input[*string]
	// One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. See below for schema.
	Rules pulumix.Input[[]*RegistryScanningConfigurationRuleArgs]
	// the scanning type to set for the registry. Can be either `ENHANCED` or `BASIC`.
	ScanType pulumix.Input[*string]
}

func (RegistryScanningConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryScanningConfigurationState)(nil)).Elem()
}

type registryScanningConfigurationArgs struct {
	// One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. See below for schema.
	Rules []RegistryScanningConfigurationRule `pulumi:"rules"`
	// the scanning type to set for the registry. Can be either `ENHANCED` or `BASIC`.
	ScanType string `pulumi:"scanType"`
}

// The set of arguments for constructing a RegistryScanningConfiguration resource.
type RegistryScanningConfigurationArgs struct {
	// One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. See below for schema.
	Rules pulumix.Input[[]*RegistryScanningConfigurationRuleArgs]
	// the scanning type to set for the registry. Can be either `ENHANCED` or `BASIC`.
	ScanType pulumix.Input[string]
}

func (RegistryScanningConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryScanningConfigurationArgs)(nil)).Elem()
}

type RegistryScanningConfigurationOutput struct{ *pulumi.OutputState }

func (RegistryScanningConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryScanningConfiguration)(nil)).Elem()
}

func (o RegistryScanningConfigurationOutput) ToRegistryScanningConfigurationOutput() RegistryScanningConfigurationOutput {
	return o
}

func (o RegistryScanningConfigurationOutput) ToRegistryScanningConfigurationOutputWithContext(ctx context.Context) RegistryScanningConfigurationOutput {
	return o
}

func (o RegistryScanningConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RegistryScanningConfiguration] {
	return pulumix.Output[RegistryScanningConfiguration]{
		OutputState: o.OutputState,
	}
}

// The registry ID the scanning configuration applies to.
func (o RegistryScanningConfigurationOutput) RegistryId() pulumix.Output[string] {
	value := pulumix.Apply[RegistryScanningConfiguration](o, func(v RegistryScanningConfiguration) pulumix.Output[string] { return v.RegistryId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. See below for schema.
func (o RegistryScanningConfigurationOutput) Rules() pulumix.GArrayOutput[RegistryScanningConfigurationRule, RegistryScanningConfigurationRuleOutput] {
	value := pulumix.Apply[RegistryScanningConfiguration](o, func(v RegistryScanningConfiguration) pulumix.GArrayOutput[RegistryScanningConfigurationRule, RegistryScanningConfigurationRuleOutput] {
		return v.Rules
	})
	unwrapped := pulumix.Flatten[[]RegistryScanningConfigurationRule, pulumix.GArrayOutput[RegistryScanningConfigurationRule, RegistryScanningConfigurationRuleOutput]](value)
	return pulumix.GArrayOutput[RegistryScanningConfigurationRule, RegistryScanningConfigurationRuleOutput]{OutputState: unwrapped.OutputState}
}

// the scanning type to set for the registry. Can be either `ENHANCED` or `BASIC`.
func (o RegistryScanningConfigurationOutput) ScanType() pulumix.Output[string] {
	value := pulumix.Apply[RegistryScanningConfiguration](o, func(v RegistryScanningConfiguration) pulumix.Output[string] { return v.ScanType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RegistryScanningConfigurationOutput{})
}
