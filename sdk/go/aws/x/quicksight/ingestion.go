// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS QuickSight Ingestion.
type Ingestion struct {
	pulumi.CustomResourceState

	// ARN of the Ingestion.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// AWS account ID.
	AwsAccountId pulumix.Output[string] `pulumi:"awsAccountId"`
	// ID of the dataset used in the ingestion.
	DataSetId pulumix.Output[string] `pulumi:"dataSetId"`
	// ID for the ingestion.
	IngestionId pulumix.Output[string] `pulumi:"ingestionId"`
	// Ingestion status.
	IngestionStatus pulumix.Output[string] `pulumi:"ingestionStatus"`
	// Type of ingestion to be created. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
	//
	// The following arguments are optional:
	IngestionType pulumix.Output[string] `pulumi:"ingestionType"`
}

// NewIngestion registers a new resource with the given unique name, arguments, and options.
func NewIngestion(ctx *pulumi.Context,
	name string, args *IngestionArgs, opts ...pulumi.ResourceOption) (*Ingestion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSetId == nil {
		return nil, errors.New("invalid value for required argument 'DataSetId'")
	}
	if args.IngestionId == nil {
		return nil, errors.New("invalid value for required argument 'IngestionId'")
	}
	if args.IngestionType == nil {
		return nil, errors.New("invalid value for required argument 'IngestionType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ingestion
	err := ctx.RegisterResource("aws:quicksight/ingestion:Ingestion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIngestion gets an existing Ingestion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIngestion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IngestionState, opts ...pulumi.ResourceOption) (*Ingestion, error) {
	var resource Ingestion
	err := ctx.ReadResource("aws:quicksight/ingestion:Ingestion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ingestion resources.
type ingestionState struct {
	// ARN of the Ingestion.
	Arn *string `pulumi:"arn"`
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// ID of the dataset used in the ingestion.
	DataSetId *string `pulumi:"dataSetId"`
	// ID for the ingestion.
	IngestionId *string `pulumi:"ingestionId"`
	// Ingestion status.
	IngestionStatus *string `pulumi:"ingestionStatus"`
	// Type of ingestion to be created. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
	//
	// The following arguments are optional:
	IngestionType *string `pulumi:"ingestionType"`
}

type IngestionState struct {
	// ARN of the Ingestion.
	Arn pulumix.Input[*string]
	// AWS account ID.
	AwsAccountId pulumix.Input[*string]
	// ID of the dataset used in the ingestion.
	DataSetId pulumix.Input[*string]
	// ID for the ingestion.
	IngestionId pulumix.Input[*string]
	// Ingestion status.
	IngestionStatus pulumix.Input[*string]
	// Type of ingestion to be created. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
	//
	// The following arguments are optional:
	IngestionType pulumix.Input[*string]
}

func (IngestionState) ElementType() reflect.Type {
	return reflect.TypeOf((*ingestionState)(nil)).Elem()
}

type ingestionArgs struct {
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// ID of the dataset used in the ingestion.
	DataSetId string `pulumi:"dataSetId"`
	// ID for the ingestion.
	IngestionId string `pulumi:"ingestionId"`
	// Type of ingestion to be created. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
	//
	// The following arguments are optional:
	IngestionType string `pulumi:"ingestionType"`
}

// The set of arguments for constructing a Ingestion resource.
type IngestionArgs struct {
	// AWS account ID.
	AwsAccountId pulumix.Input[*string]
	// ID of the dataset used in the ingestion.
	DataSetId pulumix.Input[string]
	// ID for the ingestion.
	IngestionId pulumix.Input[string]
	// Type of ingestion to be created. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
	//
	// The following arguments are optional:
	IngestionType pulumix.Input[string]
}

func (IngestionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ingestionArgs)(nil)).Elem()
}

type IngestionOutput struct{ *pulumi.OutputState }

func (IngestionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ingestion)(nil)).Elem()
}

func (o IngestionOutput) ToIngestionOutput() IngestionOutput {
	return o
}

func (o IngestionOutput) ToIngestionOutputWithContext(ctx context.Context) IngestionOutput {
	return o
}

func (o IngestionOutput) ToOutput(ctx context.Context) pulumix.Output[Ingestion] {
	return pulumix.Output[Ingestion]{
		OutputState: o.OutputState,
	}
}

// ARN of the Ingestion.
func (o IngestionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Ingestion](o, func(v Ingestion) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS account ID.
func (o IngestionOutput) AwsAccountId() pulumix.Output[string] {
	value := pulumix.Apply[Ingestion](o, func(v Ingestion) pulumix.Output[string] { return v.AwsAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the dataset used in the ingestion.
func (o IngestionOutput) DataSetId() pulumix.Output[string] {
	value := pulumix.Apply[Ingestion](o, func(v Ingestion) pulumix.Output[string] { return v.DataSetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID for the ingestion.
func (o IngestionOutput) IngestionId() pulumix.Output[string] {
	value := pulumix.Apply[Ingestion](o, func(v Ingestion) pulumix.Output[string] { return v.IngestionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Ingestion status.
func (o IngestionOutput) IngestionStatus() pulumix.Output[string] {
	value := pulumix.Apply[Ingestion](o, func(v Ingestion) pulumix.Output[string] { return v.IngestionStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Type of ingestion to be created. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
//
// The following arguments are optional:
func (o IngestionOutput) IngestionType() pulumix.Output[string] {
	value := pulumix.Apply[Ingestion](o, func(v Ingestion) pulumix.Output[string] { return v.IngestionType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(IngestionOutput{})
}
