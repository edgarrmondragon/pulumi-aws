// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a SageMaker Code Repository resource.
type CodeRepository struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) assigned by AWS to this Code Repository.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The name of the Code Repository (must be unique).
	CodeRepositoryName pulumix.Output[string] `pulumi:"codeRepositoryName"`
	// Specifies details about the repository. see Git Config details below.
	GitConfig pulumix.GPtrOutput[CodeRepositoryGitConfig, CodeRepositoryGitConfigOutput] `pulumi:"gitConfig"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewCodeRepository registers a new resource with the given unique name, arguments, and options.
func NewCodeRepository(ctx *pulumi.Context,
	name string, args *CodeRepositoryArgs, opts ...pulumi.ResourceOption) (*CodeRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CodeRepositoryName == nil {
		return nil, errors.New("invalid value for required argument 'CodeRepositoryName'")
	}
	if args.GitConfig == nil {
		return nil, errors.New("invalid value for required argument 'GitConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CodeRepository
	err := ctx.RegisterResource("aws:sagemaker/codeRepository:CodeRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCodeRepository gets an existing CodeRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCodeRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CodeRepositoryState, opts ...pulumi.ResourceOption) (*CodeRepository, error) {
	var resource CodeRepository
	err := ctx.ReadResource("aws:sagemaker/codeRepository:CodeRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CodeRepository resources.
type codeRepositoryState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Code Repository.
	Arn *string `pulumi:"arn"`
	// The name of the Code Repository (must be unique).
	CodeRepositoryName *string `pulumi:"codeRepositoryName"`
	// Specifies details about the repository. see Git Config details below.
	GitConfig *CodeRepositoryGitConfig `pulumi:"gitConfig"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type CodeRepositoryState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Code Repository.
	Arn pulumix.Input[*string]
	// The name of the Code Repository (must be unique).
	CodeRepositoryName pulumix.Input[*string]
	// Specifies details about the repository. see Git Config details below.
	GitConfig pulumix.Input[*CodeRepositoryGitConfigArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (CodeRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*codeRepositoryState)(nil)).Elem()
}

type codeRepositoryArgs struct {
	// The name of the Code Repository (must be unique).
	CodeRepositoryName string `pulumi:"codeRepositoryName"`
	// Specifies details about the repository. see Git Config details below.
	GitConfig CodeRepositoryGitConfig `pulumi:"gitConfig"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a CodeRepository resource.
type CodeRepositoryArgs struct {
	// The name of the Code Repository (must be unique).
	CodeRepositoryName pulumix.Input[string]
	// Specifies details about the repository. see Git Config details below.
	GitConfig pulumix.Input[*CodeRepositoryGitConfigArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (CodeRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*codeRepositoryArgs)(nil)).Elem()
}

type CodeRepositoryOutput struct{ *pulumi.OutputState }

func (CodeRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeRepository)(nil)).Elem()
}

func (o CodeRepositoryOutput) ToCodeRepositoryOutput() CodeRepositoryOutput {
	return o
}

func (o CodeRepositoryOutput) ToCodeRepositoryOutputWithContext(ctx context.Context) CodeRepositoryOutput {
	return o
}

func (o CodeRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[CodeRepository] {
	return pulumix.Output[CodeRepository]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) assigned by AWS to this Code Repository.
func (o CodeRepositoryOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[CodeRepository](o, func(v CodeRepository) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Code Repository (must be unique).
func (o CodeRepositoryOutput) CodeRepositoryName() pulumix.Output[string] {
	value := pulumix.Apply[CodeRepository](o, func(v CodeRepository) pulumix.Output[string] { return v.CodeRepositoryName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies details about the repository. see Git Config details below.
func (o CodeRepositoryOutput) GitConfig() pulumix.GPtrOutput[CodeRepositoryGitConfig, CodeRepositoryGitConfigOutput] {
	value := pulumix.Apply[CodeRepository](o, func(v CodeRepository) pulumix.GPtrOutput[CodeRepositoryGitConfig, CodeRepositoryGitConfigOutput] {
		return v.GitConfig
	})
	unwrapped := pulumix.Flatten[*CodeRepositoryGitConfig, pulumix.GPtrOutput[CodeRepositoryGitConfig, CodeRepositoryGitConfigOutput]](value)
	return pulumix.GPtrOutput[CodeRepositoryGitConfig, CodeRepositoryGitConfigOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CodeRepositoryOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[CodeRepository](o, func(v CodeRepository) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o CodeRepositoryOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[CodeRepository](o, func(v CodeRepository) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(CodeRepositoryOutput{})
}
