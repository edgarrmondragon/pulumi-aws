// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Attaches a Lightsail Load Balancer Certificate to a Lightsail Load Balancer.
type LbCertificateAttachment struct {
	pulumi.CustomResourceState

	// The name of your SSL/TLS certificate.
	CertificateName pulumix.Output[string] `pulumi:"certificateName"`
	// The name of the load balancer to which you want to associate the SSL/TLS certificate.
	LbName pulumix.Output[string] `pulumi:"lbName"`
}

// NewLbCertificateAttachment registers a new resource with the given unique name, arguments, and options.
func NewLbCertificateAttachment(ctx *pulumi.Context,
	name string, args *LbCertificateAttachmentArgs, opts ...pulumi.ResourceOption) (*LbCertificateAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateName == nil {
		return nil, errors.New("invalid value for required argument 'CertificateName'")
	}
	if args.LbName == nil {
		return nil, errors.New("invalid value for required argument 'LbName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LbCertificateAttachment
	err := ctx.RegisterResource("aws:lightsail/lbCertificateAttachment:LbCertificateAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbCertificateAttachment gets an existing LbCertificateAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbCertificateAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbCertificateAttachmentState, opts ...pulumi.ResourceOption) (*LbCertificateAttachment, error) {
	var resource LbCertificateAttachment
	err := ctx.ReadResource("aws:lightsail/lbCertificateAttachment:LbCertificateAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbCertificateAttachment resources.
type lbCertificateAttachmentState struct {
	// The name of your SSL/TLS certificate.
	CertificateName *string `pulumi:"certificateName"`
	// The name of the load balancer to which you want to associate the SSL/TLS certificate.
	LbName *string `pulumi:"lbName"`
}

type LbCertificateAttachmentState struct {
	// The name of your SSL/TLS certificate.
	CertificateName pulumix.Input[*string]
	// The name of the load balancer to which you want to associate the SSL/TLS certificate.
	LbName pulumix.Input[*string]
}

func (LbCertificateAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbCertificateAttachmentState)(nil)).Elem()
}

type lbCertificateAttachmentArgs struct {
	// The name of your SSL/TLS certificate.
	CertificateName string `pulumi:"certificateName"`
	// The name of the load balancer to which you want to associate the SSL/TLS certificate.
	LbName string `pulumi:"lbName"`
}

// The set of arguments for constructing a LbCertificateAttachment resource.
type LbCertificateAttachmentArgs struct {
	// The name of your SSL/TLS certificate.
	CertificateName pulumix.Input[string]
	// The name of the load balancer to which you want to associate the SSL/TLS certificate.
	LbName pulumix.Input[string]
}

func (LbCertificateAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbCertificateAttachmentArgs)(nil)).Elem()
}

type LbCertificateAttachmentOutput struct{ *pulumi.OutputState }

func (LbCertificateAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbCertificateAttachment)(nil)).Elem()
}

func (o LbCertificateAttachmentOutput) ToLbCertificateAttachmentOutput() LbCertificateAttachmentOutput {
	return o
}

func (o LbCertificateAttachmentOutput) ToLbCertificateAttachmentOutputWithContext(ctx context.Context) LbCertificateAttachmentOutput {
	return o
}

func (o LbCertificateAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[LbCertificateAttachment] {
	return pulumix.Output[LbCertificateAttachment]{
		OutputState: o.OutputState,
	}
}

// The name of your SSL/TLS certificate.
func (o LbCertificateAttachmentOutput) CertificateName() pulumix.Output[string] {
	value := pulumix.Apply[LbCertificateAttachment](o, func(v LbCertificateAttachment) pulumix.Output[string] { return v.CertificateName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the load balancer to which you want to associate the SSL/TLS certificate.
func (o LbCertificateAttachmentOutput) LbName() pulumix.Output[string] {
	value := pulumix.Apply[LbCertificateAttachment](o, func(v LbCertificateAttachment) pulumix.Output[string] { return v.LbName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LbCertificateAttachmentOutput{})
}
