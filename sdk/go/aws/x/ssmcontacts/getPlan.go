// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssmcontacts

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing a Plan of an AWS SSM Contact.
func LookupPlan(ctx *pulumi.Context, args *LookupPlanArgs, opts ...pulumi.InvokeOption) (*LookupPlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPlanResult
	err := ctx.Invoke("aws:ssmcontacts/getPlan:getPlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlan.
type LookupPlanArgs struct {
	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	ContactId string `pulumi:"contactId"`
}

// A collection of values returned by getPlan.
type LookupPlanResult struct {
	ContactId string `pulumi:"contactId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of stages. A contact has an engagement plan with stages that contact specified contact channels. An escalation plan uses stages that contact specified contacts.
	Stages []GetPlanStage `pulumi:"stages"`
}

func LookupPlanOutput(ctx *pulumi.Context, args LookupPlanOutputArgs, opts ...pulumi.InvokeOption) LookupPlanResultOutput {
	outputResult := pulumix.ApplyErr[*LookupPlanArgs](args.ToOutput(), func(plainArgs *LookupPlanArgs) (*LookupPlanResult, error) {
		return LookupPlan(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupPlanResultOutput, *LookupPlanResult](outputResult)
}

// A collection of arguments for invoking getPlan.
type LookupPlanOutputArgs struct {
	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	ContactId pulumix.Input[string] `pulumi:"contactId"`
}

func (args LookupPlanOutputArgs) ToOutput() pulumix.Output[*LookupPlanArgs] {
	allArgs := pulumix.All(
		args.ContactId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupPlanArgs {
		return &LookupPlanArgs{
			ContactId: resolvedArgs[0].(string),
		}
	})
}

type LookupPlanResultOutput struct{ *pulumi.OutputState }

func (LookupPlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanResult)(nil)).Elem()
}

func (o LookupPlanResultOutput) ToOutput(context.Context) pulumix.Output[*LookupPlanResult] {
	return pulumix.Output[*LookupPlanResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupPlanResultOutput) ContactId() pulumix.Output[string] {
	return pulumix.Apply[*LookupPlanResult](o, func(v *LookupPlanResult) string { return v.ContactId })
}

func (o LookupPlanResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupPlanResult](o, func(v *LookupPlanResult) string { return v.Id })
}

func (o LookupPlanResultOutput) Stages() pulumix.GArrayOutput[GetPlanStage, GetPlanStageOutput] {
	value := pulumix.Apply[*LookupPlanResult](o, func(v *LookupPlanResult) []GetPlanStage { return v.Stages })
	return pulumix.GArrayOutput[GetPlanStage, GetPlanStageOutput]{
		OutputState: value.OutputState,
	}
}
