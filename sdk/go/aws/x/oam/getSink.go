// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS CloudWatch Observability Access Manager Sink.
func LookupSink(ctx *pulumi.Context, args *LookupSinkArgs, opts ...pulumi.InvokeOption) (*LookupSinkResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSinkResult
	err := ctx.Invoke("aws:oam/getSink:getSink", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSink.
type LookupSinkArgs struct {
	// ARN of the sink.
	SinkIdentifier string `pulumi:"sinkIdentifier"`
	// Tags assigned to the sink.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getSink.
type LookupSinkResult struct {
	// ARN of the sink.
	Arn string `pulumi:"arn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the sink.
	Name string `pulumi:"name"`
	// Random ID string that AWS generated as part of the sink ARN.
	SinkId         string `pulumi:"sinkId"`
	SinkIdentifier string `pulumi:"sinkIdentifier"`
	// Tags assigned to the sink.
	Tags map[string]string `pulumi:"tags"`
}

func LookupSinkOutput(ctx *pulumi.Context, args LookupSinkOutputArgs, opts ...pulumi.InvokeOption) LookupSinkResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSinkArgs](args.ToOutput(), func(plainArgs *LookupSinkArgs) (*LookupSinkResult, error) {
		return LookupSink(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSinkResultOutput, *LookupSinkResult](outputResult)
}

// A collection of arguments for invoking getSink.
type LookupSinkOutputArgs struct {
	// ARN of the sink.
	SinkIdentifier pulumix.Input[string] `pulumi:"sinkIdentifier"`
	// Tags assigned to the sink.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupSinkOutputArgs) ToOutput() pulumix.Output[*LookupSinkArgs] {
	allArgs := pulumix.All(
		args.SinkIdentifier.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSinkArgs {
		return &LookupSinkArgs{
			SinkIdentifier: resolvedArgs[0].(string),
			Tags:           resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupSinkResultOutput struct{ *pulumi.OutputState }

func (LookupSinkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSinkResult)(nil)).Elem()
}

func (o LookupSinkResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSinkResult] {
	return pulumix.Output[*LookupSinkResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSinkResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSinkResult](o, func(v *LookupSinkResult) string { return v.Arn })
}

func (o LookupSinkResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSinkResult](o, func(v *LookupSinkResult) string { return v.Id })
}

func (o LookupSinkResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupSinkResult](o, func(v *LookupSinkResult) string { return v.Name })
}

func (o LookupSinkResultOutput) SinkId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSinkResult](o, func(v *LookupSinkResult) string { return v.SinkId })
}

func (o LookupSinkResultOutput) SinkIdentifier() pulumix.Output[string] {
	return pulumix.Apply[*LookupSinkResult](o, func(v *LookupSinkResult) string { return v.SinkIdentifier })
}

func (o LookupSinkResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupSinkResult](o, func(v *LookupSinkResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
