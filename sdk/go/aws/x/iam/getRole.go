// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can be used to fetch information about a specific
// IAM role. By using this data source, you can reference IAM role
// properties without having to hard code ARNs as input.
func LookupRole(ctx *pulumi.Context, args *LookupRoleArgs, opts ...pulumi.InvokeOption) (*LookupRoleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRoleResult
	err := ctx.Invoke("aws:iam/getRole:getRole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRole.
type LookupRoleArgs struct {
	// Friendly IAM role name to match.
	Name string `pulumi:"name"`
	// Tags attached to the role.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getRole.
type LookupRoleResult struct {
	// ARN of the role.
	Arn string `pulumi:"arn"`
	// Policy document associated with the role.
	AssumeRolePolicy string `pulumi:"assumeRolePolicy"`
	// Creation date of the role in RFC 3339 format.
	CreateDate string `pulumi:"createDate"`
	// Description for the role.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Maximum session duration.
	MaxSessionDuration int    `pulumi:"maxSessionDuration"`
	Name               string `pulumi:"name"`
	// Path to the role.
	Path string `pulumi:"path"`
	// The ARN of the policy that is used to set the permissions boundary for the role.
	PermissionsBoundary string `pulumi:"permissionsBoundary"`
	// Contains information about the last time that an IAM role was used. See `roleLastUsed` for details.
	RoleLastUseds []GetRoleRoleLastUsed `pulumi:"roleLastUseds"`
	// Tags attached to the role.
	Tags map[string]string `pulumi:"tags"`
	// Stable and unique string identifying the role.
	UniqueId string `pulumi:"uniqueId"`
}

func LookupRoleOutput(ctx *pulumi.Context, args LookupRoleOutputArgs, opts ...pulumi.InvokeOption) LookupRoleResultOutput {
	outputResult := pulumix.ApplyErr[*LookupRoleArgs](args.ToOutput(), func(plainArgs *LookupRoleArgs) (*LookupRoleResult, error) {
		return LookupRole(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupRoleResultOutput, *LookupRoleResult](outputResult)
}

// A collection of arguments for invoking getRole.
type LookupRoleOutputArgs struct {
	// Friendly IAM role name to match.
	Name pulumix.Input[string] `pulumi:"name"`
	// Tags attached to the role.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupRoleOutputArgs) ToOutput() pulumix.Output[*LookupRoleArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupRoleArgs {
		return &LookupRoleArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupRoleResultOutput struct{ *pulumi.OutputState }

func (LookupRoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoleResult)(nil)).Elem()
}

func (o LookupRoleResultOutput) ToOutput(context.Context) pulumix.Output[*LookupRoleResult] {
	return pulumix.Output[*LookupRoleResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupRoleResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoleResult](o, func(v *LookupRoleResult) string { return v.Arn })
}

func (o LookupRoleResultOutput) AssumeRolePolicy() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoleResult](o, func(v *LookupRoleResult) string { return v.AssumeRolePolicy })
}

func (o LookupRoleResultOutput) CreateDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoleResult](o, func(v *LookupRoleResult) string { return v.CreateDate })
}

func (o LookupRoleResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoleResult](o, func(v *LookupRoleResult) string { return v.Description })
}

func (o LookupRoleResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoleResult](o, func(v *LookupRoleResult) string { return v.Id })
}

func (o LookupRoleResultOutput) MaxSessionDuration() pulumix.Output[int] {
	return pulumix.Apply[*LookupRoleResult](o, func(v *LookupRoleResult) int { return v.MaxSessionDuration })
}

func (o LookupRoleResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoleResult](o, func(v *LookupRoleResult) string { return v.Name })
}

func (o LookupRoleResultOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoleResult](o, func(v *LookupRoleResult) string { return v.Path })
}

func (o LookupRoleResultOutput) PermissionsBoundary() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoleResult](o, func(v *LookupRoleResult) string { return v.PermissionsBoundary })
}

func (o LookupRoleResultOutput) RoleLastUseds() pulumix.GArrayOutput[GetRoleRoleLastUsed, GetRoleRoleLastUsedOutput] {
	value := pulumix.Apply[*LookupRoleResult](o, func(v *LookupRoleResult) []GetRoleRoleLastUsed { return v.RoleLastUseds })
	return pulumix.GArrayOutput[GetRoleRoleLastUsed, GetRoleRoleLastUsedOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupRoleResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupRoleResult](o, func(v *LookupRoleResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupRoleResultOutput) UniqueId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRoleResult](o, func(v *LookupRoleResult) string { return v.UniqueId })
}
