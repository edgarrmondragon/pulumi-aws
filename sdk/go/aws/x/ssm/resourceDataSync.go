// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a SSM resource data sync.
type ResourceDataSync struct {
	pulumi.CustomResourceState

	// Name for the configuration.
	Name pulumix.Output[string] `pulumi:"name"`
	// Amazon S3 configuration details for the sync.
	S3Destination pulumix.GPtrOutput[ResourceDataSyncS3Destination, ResourceDataSyncS3DestinationOutput] `pulumi:"s3Destination"`
}

// NewResourceDataSync registers a new resource with the given unique name, arguments, and options.
func NewResourceDataSync(ctx *pulumi.Context,
	name string, args *ResourceDataSyncArgs, opts ...pulumi.ResourceOption) (*ResourceDataSync, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.S3Destination == nil {
		return nil, errors.New("invalid value for required argument 'S3Destination'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceDataSync
	err := ctx.RegisterResource("aws:ssm/resourceDataSync:ResourceDataSync", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceDataSync gets an existing ResourceDataSync resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceDataSync(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceDataSyncState, opts ...pulumi.ResourceOption) (*ResourceDataSync, error) {
	var resource ResourceDataSync
	err := ctx.ReadResource("aws:ssm/resourceDataSync:ResourceDataSync", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceDataSync resources.
type resourceDataSyncState struct {
	// Name for the configuration.
	Name *string `pulumi:"name"`
	// Amazon S3 configuration details for the sync.
	S3Destination *ResourceDataSyncS3Destination `pulumi:"s3Destination"`
}

type ResourceDataSyncState struct {
	// Name for the configuration.
	Name pulumix.Input[*string]
	// Amazon S3 configuration details for the sync.
	S3Destination pulumix.Input[*ResourceDataSyncS3DestinationArgs]
}

func (ResourceDataSyncState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDataSyncState)(nil)).Elem()
}

type resourceDataSyncArgs struct {
	// Name for the configuration.
	Name *string `pulumi:"name"`
	// Amazon S3 configuration details for the sync.
	S3Destination ResourceDataSyncS3Destination `pulumi:"s3Destination"`
}

// The set of arguments for constructing a ResourceDataSync resource.
type ResourceDataSyncArgs struct {
	// Name for the configuration.
	Name pulumix.Input[*string]
	// Amazon S3 configuration details for the sync.
	S3Destination pulumix.Input[*ResourceDataSyncS3DestinationArgs]
}

func (ResourceDataSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDataSyncArgs)(nil)).Elem()
}

type ResourceDataSyncOutput struct{ *pulumi.OutputState }

func (ResourceDataSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDataSync)(nil)).Elem()
}

func (o ResourceDataSyncOutput) ToResourceDataSyncOutput() ResourceDataSyncOutput {
	return o
}

func (o ResourceDataSyncOutput) ToResourceDataSyncOutputWithContext(ctx context.Context) ResourceDataSyncOutput {
	return o
}

func (o ResourceDataSyncOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceDataSync] {
	return pulumix.Output[ResourceDataSync]{
		OutputState: o.OutputState,
	}
}

// Name for the configuration.
func (o ResourceDataSyncOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ResourceDataSync](o, func(v ResourceDataSync) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon S3 configuration details for the sync.
func (o ResourceDataSyncOutput) S3Destination() pulumix.GPtrOutput[ResourceDataSyncS3Destination, ResourceDataSyncS3DestinationOutput] {
	value := pulumix.Apply[ResourceDataSync](o, func(v ResourceDataSync) pulumix.GPtrOutput[ResourceDataSyncS3Destination, ResourceDataSyncS3DestinationOutput] {
		return v.S3Destination
	})
	unwrapped := pulumix.Flatten[*ResourceDataSyncS3Destination, pulumix.GPtrOutput[ResourceDataSyncS3Destination, ResourceDataSyncS3DestinationOutput]](value)
	return pulumix.GPtrOutput[ResourceDataSyncS3Destination, ResourceDataSyncS3DestinationOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ResourceDataSyncOutput{})
}
