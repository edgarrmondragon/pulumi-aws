// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediastore

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a MediaStore Container Policy.
type ContainerPolicy struct {
	pulumi.CustomResourceState

	// The name of the container.
	ContainerName pulumix.Output[string] `pulumi:"containerName"`
	// The contents of the policy.
	Policy pulumix.Output[string] `pulumi:"policy"`
}

// NewContainerPolicy registers a new resource with the given unique name, arguments, and options.
func NewContainerPolicy(ctx *pulumi.Context,
	name string, args *ContainerPolicyArgs, opts ...pulumi.ResourceOption) (*ContainerPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContainerName == nil {
		return nil, errors.New("invalid value for required argument 'ContainerName'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContainerPolicy
	err := ctx.RegisterResource("aws:mediastore/containerPolicy:ContainerPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerPolicy gets an existing ContainerPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerPolicyState, opts ...pulumi.ResourceOption) (*ContainerPolicy, error) {
	var resource ContainerPolicy
	err := ctx.ReadResource("aws:mediastore/containerPolicy:ContainerPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerPolicy resources.
type containerPolicyState struct {
	// The name of the container.
	ContainerName *string `pulumi:"containerName"`
	// The contents of the policy.
	Policy *string `pulumi:"policy"`
}

type ContainerPolicyState struct {
	// The name of the container.
	ContainerName pulumix.Input[*string]
	// The contents of the policy.
	Policy pulumix.Input[*string]
}

func (ContainerPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerPolicyState)(nil)).Elem()
}

type containerPolicyArgs struct {
	// The name of the container.
	ContainerName string `pulumi:"containerName"`
	// The contents of the policy.
	Policy string `pulumi:"policy"`
}

// The set of arguments for constructing a ContainerPolicy resource.
type ContainerPolicyArgs struct {
	// The name of the container.
	ContainerName pulumix.Input[string]
	// The contents of the policy.
	Policy pulumix.Input[string]
}

func (ContainerPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerPolicyArgs)(nil)).Elem()
}

type ContainerPolicyOutput struct{ *pulumi.OutputState }

func (ContainerPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPolicy)(nil)).Elem()
}

func (o ContainerPolicyOutput) ToContainerPolicyOutput() ContainerPolicyOutput {
	return o
}

func (o ContainerPolicyOutput) ToContainerPolicyOutputWithContext(ctx context.Context) ContainerPolicyOutput {
	return o
}

func (o ContainerPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerPolicy] {
	return pulumix.Output[ContainerPolicy]{
		OutputState: o.OutputState,
	}
}

// The name of the container.
func (o ContainerPolicyOutput) ContainerName() pulumix.Output[string] {
	value := pulumix.Apply[ContainerPolicy](o, func(v ContainerPolicy) pulumix.Output[string] { return v.ContainerName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The contents of the policy.
func (o ContainerPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[ContainerPolicy](o, func(v ContainerPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ContainerPolicyOutput{})
}
