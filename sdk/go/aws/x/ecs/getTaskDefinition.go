// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The ECS task definition data source allows access to details of
// a specific AWS ECS task definition.
func LookupTaskDefinition(ctx *pulumi.Context, args *LookupTaskDefinitionArgs, opts ...pulumi.InvokeOption) (*LookupTaskDefinitionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTaskDefinitionResult
	err := ctx.Invoke("aws:ecs/getTaskDefinition:getTaskDefinition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTaskDefinition.
type LookupTaskDefinitionArgs struct {
	// Family for the latest ACTIVE revision, family and revision (family:revision) for a specific revision in the family, the ARN of the task definition to access to.
	TaskDefinition string `pulumi:"taskDefinition"`
}

// A collection of values returned by getTaskDefinition.
type LookupTaskDefinitionResult struct {
	// ARN of the task definition.
	Arn string `pulumi:"arn"`
	// ARN of the Task Definition with the trailing `revision` removed. This may be useful for situations where the latest task definition is always desired. If a revision isn't specified, the latest ACTIVE revision is used. See the [AWS documentation](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_StartTask.html#ECS-StartTask-request-taskDefinition) for details.
	ArnWithoutRevision string `pulumi:"arnWithoutRevision"`
	// ARN of the task execution role that the Amazon ECS container agent and the Docker.
	ExecutionRoleArn string `pulumi:"executionRoleArn"`
	// Family of this task definition.
	Family string `pulumi:"family"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Docker networking mode to use for the containers in this task.
	NetworkMode string `pulumi:"networkMode"`
	// Revision of this task definition.
	Revision int `pulumi:"revision"`
	// Status of this task definition.
	Status         string `pulumi:"status"`
	TaskDefinition string `pulumi:"taskDefinition"`
	// ARN of the IAM role that containers in this task can assume.
	TaskRoleArn string `pulumi:"taskRoleArn"`
}

func LookupTaskDefinitionOutput(ctx *pulumi.Context, args LookupTaskDefinitionOutputArgs, opts ...pulumi.InvokeOption) LookupTaskDefinitionResultOutput {
	outputResult := pulumix.ApplyErr[*LookupTaskDefinitionArgs](args.ToOutput(), func(plainArgs *LookupTaskDefinitionArgs) (*LookupTaskDefinitionResult, error) {
		return LookupTaskDefinition(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupTaskDefinitionResultOutput, *LookupTaskDefinitionResult](outputResult)
}

// A collection of arguments for invoking getTaskDefinition.
type LookupTaskDefinitionOutputArgs struct {
	// Family for the latest ACTIVE revision, family and revision (family:revision) for a specific revision in the family, the ARN of the task definition to access to.
	TaskDefinition pulumix.Input[string] `pulumi:"taskDefinition"`
}

func (args LookupTaskDefinitionOutputArgs) ToOutput() pulumix.Output[*LookupTaskDefinitionArgs] {
	allArgs := pulumix.All(
		args.TaskDefinition.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupTaskDefinitionArgs {
		return &LookupTaskDefinitionArgs{
			TaskDefinition: resolvedArgs[0].(string),
		}
	})
}

type LookupTaskDefinitionResultOutput struct{ *pulumi.OutputState }

func (LookupTaskDefinitionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaskDefinitionResult)(nil)).Elem()
}

func (o LookupTaskDefinitionResultOutput) ToOutput(context.Context) pulumix.Output[*LookupTaskDefinitionResult] {
	return pulumix.Output[*LookupTaskDefinitionResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupTaskDefinitionResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupTaskDefinitionResult](o, func(v *LookupTaskDefinitionResult) string { return v.Arn })
}

func (o LookupTaskDefinitionResultOutput) ArnWithoutRevision() pulumix.Output[string] {
	return pulumix.Apply[*LookupTaskDefinitionResult](o, func(v *LookupTaskDefinitionResult) string { return v.ArnWithoutRevision })
}

func (o LookupTaskDefinitionResultOutput) ExecutionRoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupTaskDefinitionResult](o, func(v *LookupTaskDefinitionResult) string { return v.ExecutionRoleArn })
}

func (o LookupTaskDefinitionResultOutput) Family() pulumix.Output[string] {
	return pulumix.Apply[*LookupTaskDefinitionResult](o, func(v *LookupTaskDefinitionResult) string { return v.Family })
}

func (o LookupTaskDefinitionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupTaskDefinitionResult](o, func(v *LookupTaskDefinitionResult) string { return v.Id })
}

func (o LookupTaskDefinitionResultOutput) NetworkMode() pulumix.Output[string] {
	return pulumix.Apply[*LookupTaskDefinitionResult](o, func(v *LookupTaskDefinitionResult) string { return v.NetworkMode })
}

func (o LookupTaskDefinitionResultOutput) Revision() pulumix.Output[int] {
	return pulumix.Apply[*LookupTaskDefinitionResult](o, func(v *LookupTaskDefinitionResult) int { return v.Revision })
}

func (o LookupTaskDefinitionResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupTaskDefinitionResult](o, func(v *LookupTaskDefinitionResult) string { return v.Status })
}

func (o LookupTaskDefinitionResultOutput) TaskDefinition() pulumix.Output[string] {
	return pulumix.Apply[*LookupTaskDefinitionResult](o, func(v *LookupTaskDefinitionResult) string { return v.TaskDefinition })
}

func (o LookupTaskDefinitionResultOutput) TaskRoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupTaskDefinitionResult](o, func(v *LookupTaskDefinitionResult) string { return v.TaskRoleArn })
}
