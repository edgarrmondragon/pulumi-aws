// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package guardduty

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage a GuardDuty member. To accept invitations in member accounts, see the `guardduty.InviteAccepter` resource.
type Member struct {
	pulumi.CustomResourceState

	// AWS account ID for member account.
	AccountId pulumix.Output[string] `pulumi:"accountId"`
	// The detector ID of the GuardDuty account where you want to create member accounts.
	DetectorId pulumix.Output[string] `pulumi:"detectorId"`
	// Boolean whether an email notification is sent to the accounts. Defaults to `false`.
	DisableEmailNotification pulumix.Output[*bool] `pulumi:"disableEmailNotification"`
	// Email address for member account.
	Email pulumix.Output[string] `pulumi:"email"`
	// Message for invitation.
	InvitationMessage pulumix.Output[*string] `pulumi:"invitationMessage"`
	// Boolean whether to invite the account to GuardDuty as a member. Defaults to `false`. To detect if an invitation needs to be (re-)sent, the this provider state value is `true` based on a `relationshipStatus` of `Disabled`, `Enabled`, `Invited`, or `EmailVerificationInProgress`.
	Invite pulumix.Output[*bool] `pulumi:"invite"`
	// The status of the relationship between the member account and its primary account. More information can be found in [Amazon GuardDuty API Reference](https://docs.aws.amazon.com/guardduty/latest/ug/get-members.html).
	RelationshipStatus pulumix.Output[string] `pulumi:"relationshipStatus"`
}

// NewMember registers a new resource with the given unique name, arguments, and options.
func NewMember(ctx *pulumi.Context,
	name string, args *MemberArgs, opts ...pulumi.ResourceOption) (*Member, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.DetectorId == nil {
		return nil, errors.New("invalid value for required argument 'DetectorId'")
	}
	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Member
	err := ctx.RegisterResource("aws:guardduty/member:Member", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMember gets an existing Member resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MemberState, opts ...pulumi.ResourceOption) (*Member, error) {
	var resource Member
	err := ctx.ReadResource("aws:guardduty/member:Member", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Member resources.
type memberState struct {
	// AWS account ID for member account.
	AccountId *string `pulumi:"accountId"`
	// The detector ID of the GuardDuty account where you want to create member accounts.
	DetectorId *string `pulumi:"detectorId"`
	// Boolean whether an email notification is sent to the accounts. Defaults to `false`.
	DisableEmailNotification *bool `pulumi:"disableEmailNotification"`
	// Email address for member account.
	Email *string `pulumi:"email"`
	// Message for invitation.
	InvitationMessage *string `pulumi:"invitationMessage"`
	// Boolean whether to invite the account to GuardDuty as a member. Defaults to `false`. To detect if an invitation needs to be (re-)sent, the this provider state value is `true` based on a `relationshipStatus` of `Disabled`, `Enabled`, `Invited`, or `EmailVerificationInProgress`.
	Invite *bool `pulumi:"invite"`
	// The status of the relationship between the member account and its primary account. More information can be found in [Amazon GuardDuty API Reference](https://docs.aws.amazon.com/guardduty/latest/ug/get-members.html).
	RelationshipStatus *string `pulumi:"relationshipStatus"`
}

type MemberState struct {
	// AWS account ID for member account.
	AccountId pulumix.Input[*string]
	// The detector ID of the GuardDuty account where you want to create member accounts.
	DetectorId pulumix.Input[*string]
	// Boolean whether an email notification is sent to the accounts. Defaults to `false`.
	DisableEmailNotification pulumix.Input[*bool]
	// Email address for member account.
	Email pulumix.Input[*string]
	// Message for invitation.
	InvitationMessage pulumix.Input[*string]
	// Boolean whether to invite the account to GuardDuty as a member. Defaults to `false`. To detect if an invitation needs to be (re-)sent, the this provider state value is `true` based on a `relationshipStatus` of `Disabled`, `Enabled`, `Invited`, or `EmailVerificationInProgress`.
	Invite pulumix.Input[*bool]
	// The status of the relationship between the member account and its primary account. More information can be found in [Amazon GuardDuty API Reference](https://docs.aws.amazon.com/guardduty/latest/ug/get-members.html).
	RelationshipStatus pulumix.Input[*string]
}

func (MemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*memberState)(nil)).Elem()
}

type memberArgs struct {
	// AWS account ID for member account.
	AccountId string `pulumi:"accountId"`
	// The detector ID of the GuardDuty account where you want to create member accounts.
	DetectorId string `pulumi:"detectorId"`
	// Boolean whether an email notification is sent to the accounts. Defaults to `false`.
	DisableEmailNotification *bool `pulumi:"disableEmailNotification"`
	// Email address for member account.
	Email string `pulumi:"email"`
	// Message for invitation.
	InvitationMessage *string `pulumi:"invitationMessage"`
	// Boolean whether to invite the account to GuardDuty as a member. Defaults to `false`. To detect if an invitation needs to be (re-)sent, the this provider state value is `true` based on a `relationshipStatus` of `Disabled`, `Enabled`, `Invited`, or `EmailVerificationInProgress`.
	Invite *bool `pulumi:"invite"`
}

// The set of arguments for constructing a Member resource.
type MemberArgs struct {
	// AWS account ID for member account.
	AccountId pulumix.Input[string]
	// The detector ID of the GuardDuty account where you want to create member accounts.
	DetectorId pulumix.Input[string]
	// Boolean whether an email notification is sent to the accounts. Defaults to `false`.
	DisableEmailNotification pulumix.Input[*bool]
	// Email address for member account.
	Email pulumix.Input[string]
	// Message for invitation.
	InvitationMessage pulumix.Input[*string]
	// Boolean whether to invite the account to GuardDuty as a member. Defaults to `false`. To detect if an invitation needs to be (re-)sent, the this provider state value is `true` based on a `relationshipStatus` of `Disabled`, `Enabled`, `Invited`, or `EmailVerificationInProgress`.
	Invite pulumix.Input[*bool]
}

func (MemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*memberArgs)(nil)).Elem()
}

type MemberOutput struct{ *pulumi.OutputState }

func (MemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Member)(nil)).Elem()
}

func (o MemberOutput) ToMemberOutput() MemberOutput {
	return o
}

func (o MemberOutput) ToMemberOutputWithContext(ctx context.Context) MemberOutput {
	return o
}

func (o MemberOutput) ToOutput(ctx context.Context) pulumix.Output[Member] {
	return pulumix.Output[Member]{
		OutputState: o.OutputState,
	}
}

// AWS account ID for member account.
func (o MemberOutput) AccountId() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.AccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The detector ID of the GuardDuty account where you want to create member accounts.
func (o MemberOutput) DetectorId() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.DetectorId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Boolean whether an email notification is sent to the accounts. Defaults to `false`.
func (o MemberOutput) DisableEmailNotification() pulumix.Output[*bool] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[*bool] { return v.DisableEmailNotification })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Email address for member account.
func (o MemberOutput) Email() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.Email })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Message for invitation.
func (o MemberOutput) InvitationMessage() pulumix.Output[*string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[*string] { return v.InvitationMessage })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Boolean whether to invite the account to GuardDuty as a member. Defaults to `false`. To detect if an invitation needs to be (re-)sent, the this provider state value is `true` based on a `relationshipStatus` of `Disabled`, `Enabled`, `Invited`, or `EmailVerificationInProgress`.
func (o MemberOutput) Invite() pulumix.Output[*bool] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[*bool] { return v.Invite })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The status of the relationship between the member account and its primary account. More information can be found in [Amazon GuardDuty API Reference](https://docs.aws.amazon.com/guardduty/latest/ug/get-members.html).
func (o MemberOutput) RelationshipStatus() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.RelationshipStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MemberOutput{})
}
