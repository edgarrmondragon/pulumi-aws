// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoveryreadiness

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Route 53 Recovery Readiness Recovery Group.
type RecoveryGroup struct {
	pulumi.CustomResourceState

	// ARN of the recovery group
	Arn pulumix.Output[string] `pulumi:"arn"`
	// List of cell arns to add as nested fault domains within this recovery group
	Cells pulumix.ArrayOutput[string] `pulumi:"cells"`
	// A unique name describing the recovery group.
	//
	// The following argument are optional:
	RecoveryGroupName pulumix.Output[string] `pulumi:"recoveryGroupName"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewRecoveryGroup registers a new resource with the given unique name, arguments, and options.
func NewRecoveryGroup(ctx *pulumi.Context,
	name string, args *RecoveryGroupArgs, opts ...pulumi.ResourceOption) (*RecoveryGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RecoveryGroupName == nil {
		return nil, errors.New("invalid value for required argument 'RecoveryGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RecoveryGroup
	err := ctx.RegisterResource("aws:route53recoveryreadiness/recoveryGroup:RecoveryGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecoveryGroup gets an existing RecoveryGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecoveryGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecoveryGroupState, opts ...pulumi.ResourceOption) (*RecoveryGroup, error) {
	var resource RecoveryGroup
	err := ctx.ReadResource("aws:route53recoveryreadiness/recoveryGroup:RecoveryGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecoveryGroup resources.
type recoveryGroupState struct {
	// ARN of the recovery group
	Arn *string `pulumi:"arn"`
	// List of cell arns to add as nested fault domains within this recovery group
	Cells []string `pulumi:"cells"`
	// A unique name describing the recovery group.
	//
	// The following argument are optional:
	RecoveryGroupName *string `pulumi:"recoveryGroupName"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type RecoveryGroupState struct {
	// ARN of the recovery group
	Arn pulumix.Input[*string]
	// List of cell arns to add as nested fault domains within this recovery group
	Cells pulumix.Input[[]string]
	// A unique name describing the recovery group.
	//
	// The following argument are optional:
	RecoveryGroupName pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (RecoveryGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*recoveryGroupState)(nil)).Elem()
}

type recoveryGroupArgs struct {
	// List of cell arns to add as nested fault domains within this recovery group
	Cells []string `pulumi:"cells"`
	// A unique name describing the recovery group.
	//
	// The following argument are optional:
	RecoveryGroupName string `pulumi:"recoveryGroupName"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a RecoveryGroup resource.
type RecoveryGroupArgs struct {
	// List of cell arns to add as nested fault domains within this recovery group
	Cells pulumix.Input[[]string]
	// A unique name describing the recovery group.
	//
	// The following argument are optional:
	RecoveryGroupName pulumix.Input[string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
}

func (RecoveryGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recoveryGroupArgs)(nil)).Elem()
}

type RecoveryGroupOutput struct{ *pulumi.OutputState }

func (RecoveryGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecoveryGroup)(nil)).Elem()
}

func (o RecoveryGroupOutput) ToRecoveryGroupOutput() RecoveryGroupOutput {
	return o
}

func (o RecoveryGroupOutput) ToRecoveryGroupOutputWithContext(ctx context.Context) RecoveryGroupOutput {
	return o
}

func (o RecoveryGroupOutput) ToOutput(ctx context.Context) pulumix.Output[RecoveryGroup] {
	return pulumix.Output[RecoveryGroup]{
		OutputState: o.OutputState,
	}
}

// ARN of the recovery group
func (o RecoveryGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[RecoveryGroup](o, func(v RecoveryGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of cell arns to add as nested fault domains within this recovery group
func (o RecoveryGroupOutput) Cells() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RecoveryGroup](o, func(v RecoveryGroup) pulumix.ArrayOutput[string] { return v.Cells })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A unique name describing the recovery group.
//
// The following argument are optional:
func (o RecoveryGroupOutput) RecoveryGroupName() pulumix.Output[string] {
	value := pulumix.Apply[RecoveryGroup](o, func(v RecoveryGroup) pulumix.Output[string] { return v.RecoveryGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
func (o RecoveryGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[RecoveryGroup](o, func(v RecoveryGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RecoveryGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[RecoveryGroup](o, func(v RecoveryGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(RecoveryGroupOutput{})
}
