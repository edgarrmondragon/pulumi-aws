// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get information on an EC2 Transit Gateway Connect.
func LookupConnect(ctx *pulumi.Context, args *LookupConnectArgs, opts ...pulumi.InvokeOption) (*LookupConnectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectResult
	err := ctx.Invoke("aws:ec2transitgateway/getConnect:getConnect", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnect.
type LookupConnectArgs struct {
	// One or more configuration blocks containing name-values filters. Detailed below.
	Filters []GetConnectFilter `pulumi:"filters"`
	// Key-value tags for the EC2 Transit Gateway Connect
	Tags map[string]string `pulumi:"tags"`
	// Identifier of the EC2 Transit Gateway Connect.
	TransitGatewayConnectId *string `pulumi:"transitGatewayConnectId"`
}

// A collection of values returned by getConnect.
type LookupConnectResult struct {
	Filters []GetConnectFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Tunnel protocol
	Protocol string `pulumi:"protocol"`
	// Key-value tags for the EC2 Transit Gateway Connect
	Tags                    map[string]string `pulumi:"tags"`
	TransitGatewayConnectId string            `pulumi:"transitGatewayConnectId"`
	// EC2 Transit Gateway identifier
	TransitGatewayId string `pulumi:"transitGatewayId"`
	// The underlaying VPC attachment
	TransportAttachmentId string `pulumi:"transportAttachmentId"`
}

func LookupConnectOutput(ctx *pulumi.Context, args LookupConnectOutputArgs, opts ...pulumi.InvokeOption) LookupConnectResultOutput {
	outputResult := pulumix.ApplyErr[*LookupConnectArgs](args.ToOutput(), func(plainArgs *LookupConnectArgs) (*LookupConnectResult, error) {
		return LookupConnect(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupConnectResultOutput, *LookupConnectResult](outputResult)
}

// A collection of arguments for invoking getConnect.
type LookupConnectOutputArgs struct {
	// One or more configuration blocks containing name-values filters. Detailed below.
	Filters pulumix.Input[[]*GetConnectFilterArgs] `pulumi:"filters"`
	// Key-value tags for the EC2 Transit Gateway Connect
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Identifier of the EC2 Transit Gateway Connect.
	TransitGatewayConnectId pulumix.Input[*string] `pulumi:"transitGatewayConnectId"`
}

func (args LookupConnectOutputArgs) ToOutput() pulumix.Output[*LookupConnectArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.TransitGatewayConnectId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupConnectArgs {
		return &LookupConnectArgs{
			Filters:                 resolvedArgs[0].([]GetConnectFilter),
			Tags:                    resolvedArgs[1].(map[string]string),
			TransitGatewayConnectId: resolvedArgs[2].(*string),
		}
	})
}

type LookupConnectResultOutput struct{ *pulumi.OutputState }

func (LookupConnectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectResult)(nil)).Elem()
}

func (o LookupConnectResultOutput) ToOutput(context.Context) pulumix.Output[*LookupConnectResult] {
	return pulumix.Output[*LookupConnectResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupConnectResultOutput) Filters() pulumix.GArrayOutput[GetConnectFilter, GetConnectFilterOutput] {
	value := pulumix.Apply[*LookupConnectResult](o, func(v *LookupConnectResult) []GetConnectFilter { return v.Filters })
	return pulumix.GArrayOutput[GetConnectFilter, GetConnectFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupConnectResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectResult](o, func(v *LookupConnectResult) string { return v.Id })
}

func (o LookupConnectResultOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectResult](o, func(v *LookupConnectResult) string { return v.Protocol })
}

func (o LookupConnectResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupConnectResult](o, func(v *LookupConnectResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupConnectResultOutput) TransitGatewayConnectId() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectResult](o, func(v *LookupConnectResult) string { return v.TransitGatewayConnectId })
}

func (o LookupConnectResultOutput) TransitGatewayId() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectResult](o, func(v *LookupConnectResult) string { return v.TransitGatewayId })
}

func (o LookupConnectResultOutput) TransportAttachmentId() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectResult](o, func(v *LookupConnectResult) string { return v.TransportAttachmentId })
}
