// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the ARNs and Names of IAM Users.
func GetUsers(ctx *pulumi.Context, args *GetUsersArgs, opts ...pulumi.InvokeOption) (*GetUsersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUsersResult
	err := ctx.Invoke("aws:iam/getUsers:getUsers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUsers.
type GetUsersArgs struct {
	// Regex string to apply to the IAM users list returned by AWS. This allows more advanced filtering not supported from the AWS API. This filtering is done locally on what AWS returns, and could have a performance impact if the result is large. Combine this with other options to narrow down the list AWS returns.
	NameRegex *string `pulumi:"nameRegex"`
	// Path prefix for filtering the results. For example, the prefix `/division_abc/subdivision_xyz/` gets all users whose path starts with `/division_abc/subdivision_xyz/`. If it is not included, it defaults to a slash (`/`), listing all users. For more details, check out [list-users in the AWS CLI reference][1].
	PathPrefix *string `pulumi:"pathPrefix"`
}

// A collection of values returned by getUsers.
type GetUsersResult struct {
	// Set of ARNs of the matched IAM users.
	Arns []string `pulumi:"arns"`
	// The provider-assigned unique ID for this managed resource.
	Id        string  `pulumi:"id"`
	NameRegex *string `pulumi:"nameRegex"`
	// Set of Names of the matched IAM users.
	Names      []string `pulumi:"names"`
	PathPrefix *string  `pulumi:"pathPrefix"`
}

func GetUsersOutput(ctx *pulumi.Context, args GetUsersOutputArgs, opts ...pulumi.InvokeOption) GetUsersResultOutput {
	outputResult := pulumix.ApplyErr[*GetUsersArgs](args.ToOutput(), func(plainArgs *GetUsersArgs) (*GetUsersResult, error) {
		return GetUsers(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetUsersResultOutput, *GetUsersResult](outputResult)
}

// A collection of arguments for invoking getUsers.
type GetUsersOutputArgs struct {
	// Regex string to apply to the IAM users list returned by AWS. This allows more advanced filtering not supported from the AWS API. This filtering is done locally on what AWS returns, and could have a performance impact if the result is large. Combine this with other options to narrow down the list AWS returns.
	NameRegex pulumix.Input[*string] `pulumi:"nameRegex"`
	// Path prefix for filtering the results. For example, the prefix `/division_abc/subdivision_xyz/` gets all users whose path starts with `/division_abc/subdivision_xyz/`. If it is not included, it defaults to a slash (`/`), listing all users. For more details, check out [list-users in the AWS CLI reference][1].
	PathPrefix pulumix.Input[*string] `pulumi:"pathPrefix"`
}

func (args GetUsersOutputArgs) ToOutput() pulumix.Output[*GetUsersArgs] {
	allArgs := pulumix.All(
		args.NameRegex.ToOutput(context.Background()).AsAny(),
		args.PathPrefix.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetUsersArgs {
		return &GetUsersArgs{
			NameRegex:  resolvedArgs[0].(*string),
			PathPrefix: resolvedArgs[1].(*string),
		}
	})
}

type GetUsersResultOutput struct{ *pulumi.OutputState }

func (GetUsersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersResult)(nil)).Elem()
}

func (o GetUsersResultOutput) ToOutput(context.Context) pulumix.Output[*GetUsersResult] {
	return pulumix.Output[*GetUsersResult]{
		OutputState: o.OutputState,
	}
}

func (o GetUsersResultOutput) Arns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetUsersResult](o, func(v *GetUsersResult) []string { return v.Arns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetUsersResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetUsersResult](o, func(v *GetUsersResult) string { return v.Id })
}

func (o GetUsersResultOutput) NameRegex() pulumix.Output[*string] {
	return pulumix.Apply[*GetUsersResult](o, func(v *GetUsersResult) *string { return v.NameRegex })
}

func (o GetUsersResultOutput) Names() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetUsersResult](o, func(v *GetUsersResult) []string { return v.Names })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetUsersResultOutput) PathPrefix() pulumix.Output[*string] {
	return pulumix.Apply[*GetUsersResult](o, func(v *GetUsersResult) *string { return v.PathPrefix })
}
