// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appmesh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS App Mesh virtual service resource.
type VirtualService struct {
	pulumi.CustomResourceState

	// ARN of the virtual service.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Creation date of the virtual service.
	CreatedDate pulumix.Output[string] `pulumi:"createdDate"`
	// Last update date of the virtual service.
	LastUpdatedDate pulumix.Output[string] `pulumi:"lastUpdatedDate"`
	// Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
	MeshName pulumix.Output[string] `pulumi:"meshName"`
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner pulumix.Output[string] `pulumi:"meshOwner"`
	// Name to use for the virtual service. Must be between 1 and 255 characters in length.
	Name pulumix.Output[string] `pulumi:"name"`
	// Resource owner's AWS account ID.
	ResourceOwner pulumix.Output[string] `pulumi:"resourceOwner"`
	// Virtual service specification to apply.
	Spec pulumix.GPtrOutput[VirtualServiceSpec, VirtualServiceSpecOutput] `pulumi:"spec"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewVirtualService registers a new resource with the given unique name, arguments, and options.
func NewVirtualService(ctx *pulumi.Context,
	name string, args *VirtualServiceArgs, opts ...pulumi.ResourceOption) (*VirtualService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MeshName == nil {
		return nil, errors.New("invalid value for required argument 'MeshName'")
	}
	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualService
	err := ctx.RegisterResource("aws:appmesh/virtualService:VirtualService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualService gets an existing VirtualService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualServiceState, opts ...pulumi.ResourceOption) (*VirtualService, error) {
	var resource VirtualService
	err := ctx.ReadResource("aws:appmesh/virtualService:VirtualService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualService resources.
type virtualServiceState struct {
	// ARN of the virtual service.
	Arn *string `pulumi:"arn"`
	// Creation date of the virtual service.
	CreatedDate *string `pulumi:"createdDate"`
	// Last update date of the virtual service.
	LastUpdatedDate *string `pulumi:"lastUpdatedDate"`
	// Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
	MeshName *string `pulumi:"meshName"`
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner *string `pulumi:"meshOwner"`
	// Name to use for the virtual service. Must be between 1 and 255 characters in length.
	Name *string `pulumi:"name"`
	// Resource owner's AWS account ID.
	ResourceOwner *string `pulumi:"resourceOwner"`
	// Virtual service specification to apply.
	Spec *VirtualServiceSpec `pulumi:"spec"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type VirtualServiceState struct {
	// ARN of the virtual service.
	Arn pulumix.Input[*string]
	// Creation date of the virtual service.
	CreatedDate pulumix.Input[*string]
	// Last update date of the virtual service.
	LastUpdatedDate pulumix.Input[*string]
	// Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
	MeshName pulumix.Input[*string]
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner pulumix.Input[*string]
	// Name to use for the virtual service. Must be between 1 and 255 characters in length.
	Name pulumix.Input[*string]
	// Resource owner's AWS account ID.
	ResourceOwner pulumix.Input[*string]
	// Virtual service specification to apply.
	Spec pulumix.Input[*VirtualServiceSpecArgs]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (VirtualServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualServiceState)(nil)).Elem()
}

type virtualServiceArgs struct {
	// Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
	MeshName string `pulumi:"meshName"`
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner *string `pulumi:"meshOwner"`
	// Name to use for the virtual service. Must be between 1 and 255 characters in length.
	Name *string `pulumi:"name"`
	// Virtual service specification to apply.
	Spec VirtualServiceSpec `pulumi:"spec"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a VirtualService resource.
type VirtualServiceArgs struct {
	// Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
	MeshName pulumix.Input[string]
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner pulumix.Input[*string]
	// Name to use for the virtual service. Must be between 1 and 255 characters in length.
	Name pulumix.Input[*string]
	// Virtual service specification to apply.
	Spec pulumix.Input[*VirtualServiceSpecArgs]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (VirtualServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualServiceArgs)(nil)).Elem()
}

type VirtualServiceOutput struct{ *pulumi.OutputState }

func (VirtualServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualService)(nil)).Elem()
}

func (o VirtualServiceOutput) ToVirtualServiceOutput() VirtualServiceOutput {
	return o
}

func (o VirtualServiceOutput) ToVirtualServiceOutputWithContext(ctx context.Context) VirtualServiceOutput {
	return o
}

func (o VirtualServiceOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualService] {
	return pulumix.Output[VirtualService]{
		OutputState: o.OutputState,
	}
}

// ARN of the virtual service.
func (o VirtualServiceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[VirtualService](o, func(v VirtualService) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creation date of the virtual service.
func (o VirtualServiceOutput) CreatedDate() pulumix.Output[string] {
	value := pulumix.Apply[VirtualService](o, func(v VirtualService) pulumix.Output[string] { return v.CreatedDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Last update date of the virtual service.
func (o VirtualServiceOutput) LastUpdatedDate() pulumix.Output[string] {
	value := pulumix.Apply[VirtualService](o, func(v VirtualService) pulumix.Output[string] { return v.LastUpdatedDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
func (o VirtualServiceOutput) MeshName() pulumix.Output[string] {
	value := pulumix.Apply[VirtualService](o, func(v VirtualService) pulumix.Output[string] { return v.MeshName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
func (o VirtualServiceOutput) MeshOwner() pulumix.Output[string] {
	value := pulumix.Apply[VirtualService](o, func(v VirtualService) pulumix.Output[string] { return v.MeshOwner })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name to use for the virtual service. Must be between 1 and 255 characters in length.
func (o VirtualServiceOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[VirtualService](o, func(v VirtualService) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Resource owner's AWS account ID.
func (o VirtualServiceOutput) ResourceOwner() pulumix.Output[string] {
	value := pulumix.Apply[VirtualService](o, func(v VirtualService) pulumix.Output[string] { return v.ResourceOwner })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Virtual service specification to apply.
func (o VirtualServiceOutput) Spec() pulumix.GPtrOutput[VirtualServiceSpec, VirtualServiceSpecOutput] {
	value := pulumix.Apply[VirtualService](o, func(v VirtualService) pulumix.GPtrOutput[VirtualServiceSpec, VirtualServiceSpecOutput] { return v.Spec })
	unwrapped := pulumix.Flatten[*VirtualServiceSpec, pulumix.GPtrOutput[VirtualServiceSpec, VirtualServiceSpecOutput]](value)
	return pulumix.GPtrOutput[VirtualServiceSpec, VirtualServiceSpecOutput]{OutputState: unwrapped.OutputState}
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VirtualServiceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VirtualService](o, func(v VirtualService) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VirtualServiceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VirtualService](o, func(v VirtualService) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(VirtualServiceOutput{})
}
