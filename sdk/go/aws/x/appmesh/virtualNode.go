// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appmesh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS App Mesh virtual node resource.
//
// ## Breaking Changes
//
// Because of backward incompatible API changes (read [here](https://github.com/awslabs/aws-app-mesh-examples/issues/92)), `appmesh.VirtualNode` resource definitions created with provider versions earlier than v2.3.0 will need to be modified:
//
// * Rename the `serviceName` attribute of the `dns` object to `hostname`.
//
// * Replace the `backends` attribute of the `spec` object with one or more `backend` configuration blocks,
// setting `virtualServiceName` to the name of the service.
//
// The state associated with existing resources will automatically be migrated.
type VirtualNode struct {
	pulumi.CustomResourceState

	// ARN of the virtual node.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Creation date of the virtual node.
	CreatedDate pulumix.Output[string] `pulumi:"createdDate"`
	// Last update date of the virtual node.
	LastUpdatedDate pulumix.Output[string] `pulumi:"lastUpdatedDate"`
	// Name of the service mesh in which to create the virtual node. Must be between 1 and 255 characters in length.
	MeshName pulumix.Output[string] `pulumi:"meshName"`
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner pulumix.Output[string] `pulumi:"meshOwner"`
	// Name to use for the virtual node. Must be between 1 and 255 characters in length.
	Name pulumix.Output[string] `pulumi:"name"`
	// Resource owner's AWS account ID.
	ResourceOwner pulumix.Output[string] `pulumi:"resourceOwner"`
	// Virtual node specification to apply.
	Spec pulumix.GPtrOutput[VirtualNodeSpec, VirtualNodeSpecOutput] `pulumi:"spec"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewVirtualNode registers a new resource with the given unique name, arguments, and options.
func NewVirtualNode(ctx *pulumi.Context,
	name string, args *VirtualNodeArgs, opts ...pulumi.ResourceOption) (*VirtualNode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MeshName == nil {
		return nil, errors.New("invalid value for required argument 'MeshName'")
	}
	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualNode
	err := ctx.RegisterResource("aws:appmesh/virtualNode:VirtualNode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNode gets an existing VirtualNode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNodeState, opts ...pulumi.ResourceOption) (*VirtualNode, error) {
	var resource VirtualNode
	err := ctx.ReadResource("aws:appmesh/virtualNode:VirtualNode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNode resources.
type virtualNodeState struct {
	// ARN of the virtual node.
	Arn *string `pulumi:"arn"`
	// Creation date of the virtual node.
	CreatedDate *string `pulumi:"createdDate"`
	// Last update date of the virtual node.
	LastUpdatedDate *string `pulumi:"lastUpdatedDate"`
	// Name of the service mesh in which to create the virtual node. Must be between 1 and 255 characters in length.
	MeshName *string `pulumi:"meshName"`
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner *string `pulumi:"meshOwner"`
	// Name to use for the virtual node. Must be between 1 and 255 characters in length.
	Name *string `pulumi:"name"`
	// Resource owner's AWS account ID.
	ResourceOwner *string `pulumi:"resourceOwner"`
	// Virtual node specification to apply.
	Spec *VirtualNodeSpec `pulumi:"spec"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type VirtualNodeState struct {
	// ARN of the virtual node.
	Arn pulumix.Input[*string]
	// Creation date of the virtual node.
	CreatedDate pulumix.Input[*string]
	// Last update date of the virtual node.
	LastUpdatedDate pulumix.Input[*string]
	// Name of the service mesh in which to create the virtual node. Must be between 1 and 255 characters in length.
	MeshName pulumix.Input[*string]
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner pulumix.Input[*string]
	// Name to use for the virtual node. Must be between 1 and 255 characters in length.
	Name pulumix.Input[*string]
	// Resource owner's AWS account ID.
	ResourceOwner pulumix.Input[*string]
	// Virtual node specification to apply.
	Spec pulumix.Input[*VirtualNodeSpecArgs]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (VirtualNodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNodeState)(nil)).Elem()
}

type virtualNodeArgs struct {
	// Name of the service mesh in which to create the virtual node. Must be between 1 and 255 characters in length.
	MeshName string `pulumi:"meshName"`
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner *string `pulumi:"meshOwner"`
	// Name to use for the virtual node. Must be between 1 and 255 characters in length.
	Name *string `pulumi:"name"`
	// Virtual node specification to apply.
	Spec VirtualNodeSpec `pulumi:"spec"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a VirtualNode resource.
type VirtualNodeArgs struct {
	// Name of the service mesh in which to create the virtual node. Must be between 1 and 255 characters in length.
	MeshName pulumix.Input[string]
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner pulumix.Input[*string]
	// Name to use for the virtual node. Must be between 1 and 255 characters in length.
	Name pulumix.Input[*string]
	// Virtual node specification to apply.
	Spec pulumix.Input[*VirtualNodeSpecArgs]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (VirtualNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNodeArgs)(nil)).Elem()
}

type VirtualNodeOutput struct{ *pulumi.OutputState }

func (VirtualNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNode)(nil)).Elem()
}

func (o VirtualNodeOutput) ToVirtualNodeOutput() VirtualNodeOutput {
	return o
}

func (o VirtualNodeOutput) ToVirtualNodeOutputWithContext(ctx context.Context) VirtualNodeOutput {
	return o
}

func (o VirtualNodeOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNode] {
	return pulumix.Output[VirtualNode]{
		OutputState: o.OutputState,
	}
}

// ARN of the virtual node.
func (o VirtualNodeOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[VirtualNode](o, func(v VirtualNode) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creation date of the virtual node.
func (o VirtualNodeOutput) CreatedDate() pulumix.Output[string] {
	value := pulumix.Apply[VirtualNode](o, func(v VirtualNode) pulumix.Output[string] { return v.CreatedDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Last update date of the virtual node.
func (o VirtualNodeOutput) LastUpdatedDate() pulumix.Output[string] {
	value := pulumix.Apply[VirtualNode](o, func(v VirtualNode) pulumix.Output[string] { return v.LastUpdatedDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the service mesh in which to create the virtual node. Must be between 1 and 255 characters in length.
func (o VirtualNodeOutput) MeshName() pulumix.Output[string] {
	value := pulumix.Apply[VirtualNode](o, func(v VirtualNode) pulumix.Output[string] { return v.MeshName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
func (o VirtualNodeOutput) MeshOwner() pulumix.Output[string] {
	value := pulumix.Apply[VirtualNode](o, func(v VirtualNode) pulumix.Output[string] { return v.MeshOwner })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name to use for the virtual node. Must be between 1 and 255 characters in length.
func (o VirtualNodeOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[VirtualNode](o, func(v VirtualNode) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Resource owner's AWS account ID.
func (o VirtualNodeOutput) ResourceOwner() pulumix.Output[string] {
	value := pulumix.Apply[VirtualNode](o, func(v VirtualNode) pulumix.Output[string] { return v.ResourceOwner })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Virtual node specification to apply.
func (o VirtualNodeOutput) Spec() pulumix.GPtrOutput[VirtualNodeSpec, VirtualNodeSpecOutput] {
	value := pulumix.Apply[VirtualNode](o, func(v VirtualNode) pulumix.GPtrOutput[VirtualNodeSpec, VirtualNodeSpecOutput] { return v.Spec })
	unwrapped := pulumix.Flatten[*VirtualNodeSpec, pulumix.GPtrOutput[VirtualNodeSpec, VirtualNodeSpecOutput]](value)
	return pulumix.GPtrOutput[VirtualNodeSpec, VirtualNodeSpecOutput]{OutputState: unwrapped.OutputState}
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VirtualNodeOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VirtualNode](o, func(v VirtualNode) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VirtualNodeOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VirtualNode](o, func(v VirtualNode) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(VirtualNodeOutput{})
}
