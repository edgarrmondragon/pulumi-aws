// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acmpca

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type CertificateAuthorityCertificateAuthorityConfiguration struct {
	// Type of the public key algorithm and size, in bits, of the key pair that your key pair creates when it issues a certificate. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CertificateAuthorityConfiguration.html).
	KeyAlgorithm string `pulumi:"keyAlgorithm"`
	// Name of the algorithm your private CA uses to sign certificate requests. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CertificateAuthorityConfiguration.html).
	SigningAlgorithm string `pulumi:"signingAlgorithm"`
	// Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.
	Subject CertificateAuthorityCertificateAuthorityConfigurationSubject `pulumi:"subject"`
}

type CertificateAuthorityCertificateAuthorityConfigurationArgs struct {
	// Type of the public key algorithm and size, in bits, of the key pair that your key pair creates when it issues a certificate. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CertificateAuthorityConfiguration.html).
	KeyAlgorithm pulumix.Input[string] `pulumi:"keyAlgorithm"`
	// Name of the algorithm your private CA uses to sign certificate requests. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CertificateAuthorityConfiguration.html).
	SigningAlgorithm pulumix.Input[string] `pulumi:"signingAlgorithm"`
	// Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.
	Subject pulumix.Input[*CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs] `pulumi:"subject"`
}

func (CertificateAuthorityCertificateAuthorityConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityCertificateAuthorityConfiguration)(nil)).Elem()
}

func (i CertificateAuthorityCertificateAuthorityConfigurationArgs) ToCertificateAuthorityCertificateAuthorityConfigurationOutput() CertificateAuthorityCertificateAuthorityConfigurationOutput {
	return i.ToCertificateAuthorityCertificateAuthorityConfigurationOutputWithContext(context.Background())
}

func (i CertificateAuthorityCertificateAuthorityConfigurationArgs) ToCertificateAuthorityCertificateAuthorityConfigurationOutputWithContext(ctx context.Context) CertificateAuthorityCertificateAuthorityConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityCertificateAuthorityConfigurationOutput)
}

func (i *CertificateAuthorityCertificateAuthorityConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*CertificateAuthorityCertificateAuthorityConfigurationArgs] {
	return pulumix.Val(i)
}

type CertificateAuthorityCertificateAuthorityConfigurationOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityCertificateAuthorityConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityCertificateAuthorityConfiguration)(nil)).Elem()
}

func (o CertificateAuthorityCertificateAuthorityConfigurationOutput) ToCertificateAuthorityCertificateAuthorityConfigurationOutput() CertificateAuthorityCertificateAuthorityConfigurationOutput {
	return o
}

func (o CertificateAuthorityCertificateAuthorityConfigurationOutput) ToCertificateAuthorityCertificateAuthorityConfigurationOutputWithContext(ctx context.Context) CertificateAuthorityCertificateAuthorityConfigurationOutput {
	return o
}

func (o CertificateAuthorityCertificateAuthorityConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateAuthorityCertificateAuthorityConfiguration] {
	return pulumix.Output[CertificateAuthorityCertificateAuthorityConfiguration]{
		OutputState: o.OutputState,
	}
}

// Type of the public key algorithm and size, in bits, of the key pair that your key pair creates when it issues a certificate. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CertificateAuthorityConfiguration.html).
func (o CertificateAuthorityCertificateAuthorityConfigurationOutput) KeyAlgorithm() pulumix.Output[string] {
	return pulumix.Apply[CertificateAuthorityCertificateAuthorityConfiguration](o, func(v CertificateAuthorityCertificateAuthorityConfiguration) string { return v.KeyAlgorithm })
}

// Name of the algorithm your private CA uses to sign certificate requests. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CertificateAuthorityConfiguration.html).
func (o CertificateAuthorityCertificateAuthorityConfigurationOutput) SigningAlgorithm() pulumix.Output[string] {
	return pulumix.Apply[CertificateAuthorityCertificateAuthorityConfiguration](o, func(v CertificateAuthorityCertificateAuthorityConfiguration) string { return v.SigningAlgorithm })
}

// Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.
func (o CertificateAuthorityCertificateAuthorityConfigurationOutput) Subject() pulumix.GPtrOutput[CertificateAuthorityCertificateAuthorityConfigurationSubject, CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput] {
	value := pulumix.Apply[CertificateAuthorityCertificateAuthorityConfiguration](o, func(v CertificateAuthorityCertificateAuthorityConfiguration) CertificateAuthorityCertificateAuthorityConfigurationSubject {
		return v.Subject
	})
	return pulumix.GPtrOutput[CertificateAuthorityCertificateAuthorityConfigurationSubject, CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput]{OutputState: value.OutputState}
}

type CertificateAuthorityCertificateAuthorityConfigurationSubject struct {
	// Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.
	CommonName *string `pulumi:"commonName"`
	// Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.
	Country *string `pulumi:"country"`
	// Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.
	DistinguishedNameQualifier *string `pulumi:"distinguishedNameQualifier"`
	// Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.
	GenerationQualifier *string `pulumi:"generationQualifier"`
	// First name. Must be less than or equal to 16 characters in length.
	GivenName *string `pulumi:"givenName"`
	// Concatenation that typically contains the first letter of the `givenName`, the first letter of the middle name if one exists, and the first letter of the `surname`. Must be less than or equal to 5 characters in length.
	Initials *string `pulumi:"initials"`
	// Locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.
	Locality *string `pulumi:"locality"`
	// Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
	Organization *string `pulumi:"organization"`
	// Subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
	OrganizationalUnit *string `pulumi:"organizationalUnit"`
	// Typically a shortened version of a longer `givenName`. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.
	Pseudonym *string `pulumi:"pseudonym"`
	// State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.
	State *string `pulumi:"state"`
	// Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.
	Surname *string `pulumi:"surname"`
	// Title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.
	Title *string `pulumi:"title"`
}

type CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs struct {
	// Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.
	CommonName pulumix.Input[*string] `pulumi:"commonName"`
	// Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.
	Country pulumix.Input[*string] `pulumi:"country"`
	// Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.
	DistinguishedNameQualifier pulumix.Input[*string] `pulumi:"distinguishedNameQualifier"`
	// Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.
	GenerationQualifier pulumix.Input[*string] `pulumi:"generationQualifier"`
	// First name. Must be less than or equal to 16 characters in length.
	GivenName pulumix.Input[*string] `pulumi:"givenName"`
	// Concatenation that typically contains the first letter of the `givenName`, the first letter of the middle name if one exists, and the first letter of the `surname`. Must be less than or equal to 5 characters in length.
	Initials pulumix.Input[*string] `pulumi:"initials"`
	// Locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.
	Locality pulumix.Input[*string] `pulumi:"locality"`
	// Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
	Organization pulumix.Input[*string] `pulumi:"organization"`
	// Subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
	OrganizationalUnit pulumix.Input[*string] `pulumi:"organizationalUnit"`
	// Typically a shortened version of a longer `givenName`. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.
	Pseudonym pulumix.Input[*string] `pulumi:"pseudonym"`
	// State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.
	State pulumix.Input[*string] `pulumi:"state"`
	// Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.
	Surname pulumix.Input[*string] `pulumi:"surname"`
	// Title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.
	Title pulumix.Input[*string] `pulumi:"title"`
}

func (CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityCertificateAuthorityConfigurationSubject)(nil)).Elem()
}

func (i CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs) ToCertificateAuthorityCertificateAuthorityConfigurationSubjectOutput() CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput {
	return i.ToCertificateAuthorityCertificateAuthorityConfigurationSubjectOutputWithContext(context.Background())
}

func (i CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs) ToCertificateAuthorityCertificateAuthorityConfigurationSubjectOutputWithContext(ctx context.Context) CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput)
}

func (i *CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs) ToOutput(ctx context.Context) pulumix.Output[*CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs] {
	return pulumix.Val(i)
}

type CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityCertificateAuthorityConfigurationSubject)(nil)).Elem()
}

func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) ToCertificateAuthorityCertificateAuthorityConfigurationSubjectOutput() CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput {
	return o
}

func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) ToCertificateAuthorityCertificateAuthorityConfigurationSubjectOutputWithContext(ctx context.Context) CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput {
	return o
}

func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateAuthorityCertificateAuthorityConfigurationSubject] {
	return pulumix.Output[CertificateAuthorityCertificateAuthorityConfigurationSubject]{
		OutputState: o.OutputState,
	}
}

// Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.
func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) CommonName() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityCertificateAuthorityConfigurationSubject](o, func(v CertificateAuthorityCertificateAuthorityConfigurationSubject) *string { return v.CommonName })
}

// Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.
func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) Country() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityCertificateAuthorityConfigurationSubject](o, func(v CertificateAuthorityCertificateAuthorityConfigurationSubject) *string { return v.Country })
}

// Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.
func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) DistinguishedNameQualifier() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityCertificateAuthorityConfigurationSubject](o, func(v CertificateAuthorityCertificateAuthorityConfigurationSubject) *string {
		return v.DistinguishedNameQualifier
	})
}

// Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.
func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) GenerationQualifier() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityCertificateAuthorityConfigurationSubject](o, func(v CertificateAuthorityCertificateAuthorityConfigurationSubject) *string {
		return v.GenerationQualifier
	})
}

// First name. Must be less than or equal to 16 characters in length.
func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) GivenName() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityCertificateAuthorityConfigurationSubject](o, func(v CertificateAuthorityCertificateAuthorityConfigurationSubject) *string { return v.GivenName })
}

// Concatenation that typically contains the first letter of the `givenName`, the first letter of the middle name if one exists, and the first letter of the `surname`. Must be less than or equal to 5 characters in length.
func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) Initials() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityCertificateAuthorityConfigurationSubject](o, func(v CertificateAuthorityCertificateAuthorityConfigurationSubject) *string { return v.Initials })
}

// Locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.
func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) Locality() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityCertificateAuthorityConfigurationSubject](o, func(v CertificateAuthorityCertificateAuthorityConfigurationSubject) *string { return v.Locality })
}

// Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) Organization() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityCertificateAuthorityConfigurationSubject](o, func(v CertificateAuthorityCertificateAuthorityConfigurationSubject) *string { return v.Organization })
}

// Subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) OrganizationalUnit() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityCertificateAuthorityConfigurationSubject](o, func(v CertificateAuthorityCertificateAuthorityConfigurationSubject) *string {
		return v.OrganizationalUnit
	})
}

// Typically a shortened version of a longer `givenName`. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.
func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) Pseudonym() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityCertificateAuthorityConfigurationSubject](o, func(v CertificateAuthorityCertificateAuthorityConfigurationSubject) *string { return v.Pseudonym })
}

// State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.
func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) State() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityCertificateAuthorityConfigurationSubject](o, func(v CertificateAuthorityCertificateAuthorityConfigurationSubject) *string { return v.State })
}

// Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.
func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) Surname() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityCertificateAuthorityConfigurationSubject](o, func(v CertificateAuthorityCertificateAuthorityConfigurationSubject) *string { return v.Surname })
}

// Title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.
func (o CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput) Title() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityCertificateAuthorityConfigurationSubject](o, func(v CertificateAuthorityCertificateAuthorityConfigurationSubject) *string { return v.Title })
}

type CertificateAuthorityRevocationConfiguration struct {
	// Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.
	CrlConfiguration *CertificateAuthorityRevocationConfigurationCrlConfiguration `pulumi:"crlConfiguration"`
	// Nested argument containing configuration of
	// the custom OCSP responder endpoint. Defined below.
	OcspConfiguration *CertificateAuthorityRevocationConfigurationOcspConfiguration `pulumi:"ocspConfiguration"`
}

type CertificateAuthorityRevocationConfigurationArgs struct {
	// Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.
	CrlConfiguration pulumix.Input[*CertificateAuthorityRevocationConfigurationCrlConfigurationArgs] `pulumi:"crlConfiguration"`
	// Nested argument containing configuration of
	// the custom OCSP responder endpoint. Defined below.
	OcspConfiguration pulumix.Input[*CertificateAuthorityRevocationConfigurationOcspConfigurationArgs] `pulumi:"ocspConfiguration"`
}

func (CertificateAuthorityRevocationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityRevocationConfiguration)(nil)).Elem()
}

func (i CertificateAuthorityRevocationConfigurationArgs) ToCertificateAuthorityRevocationConfigurationOutput() CertificateAuthorityRevocationConfigurationOutput {
	return i.ToCertificateAuthorityRevocationConfigurationOutputWithContext(context.Background())
}

func (i CertificateAuthorityRevocationConfigurationArgs) ToCertificateAuthorityRevocationConfigurationOutputWithContext(ctx context.Context) CertificateAuthorityRevocationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityRevocationConfigurationOutput)
}

func (i *CertificateAuthorityRevocationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*CertificateAuthorityRevocationConfigurationArgs] {
	return pulumix.Val(i)
}

type CertificateAuthorityRevocationConfigurationOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityRevocationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityRevocationConfiguration)(nil)).Elem()
}

func (o CertificateAuthorityRevocationConfigurationOutput) ToCertificateAuthorityRevocationConfigurationOutput() CertificateAuthorityRevocationConfigurationOutput {
	return o
}

func (o CertificateAuthorityRevocationConfigurationOutput) ToCertificateAuthorityRevocationConfigurationOutputWithContext(ctx context.Context) CertificateAuthorityRevocationConfigurationOutput {
	return o
}

func (o CertificateAuthorityRevocationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateAuthorityRevocationConfiguration] {
	return pulumix.Output[CertificateAuthorityRevocationConfiguration]{
		OutputState: o.OutputState,
	}
}

// Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.
func (o CertificateAuthorityRevocationConfigurationOutput) CrlConfiguration() pulumix.GPtrOutput[CertificateAuthorityRevocationConfigurationCrlConfiguration, CertificateAuthorityRevocationConfigurationCrlConfigurationOutput] {
	value := pulumix.Apply[CertificateAuthorityRevocationConfiguration](o, func(v CertificateAuthorityRevocationConfiguration) *CertificateAuthorityRevocationConfigurationCrlConfiguration {
		return v.CrlConfiguration
	})
	return pulumix.GPtrOutput[CertificateAuthorityRevocationConfigurationCrlConfiguration, CertificateAuthorityRevocationConfigurationCrlConfigurationOutput]{OutputState: value.OutputState}
}

// Nested argument containing configuration of
// the custom OCSP responder endpoint. Defined below.
func (o CertificateAuthorityRevocationConfigurationOutput) OcspConfiguration() pulumix.GPtrOutput[CertificateAuthorityRevocationConfigurationOcspConfiguration, CertificateAuthorityRevocationConfigurationOcspConfigurationOutput] {
	value := pulumix.Apply[CertificateAuthorityRevocationConfiguration](o, func(v CertificateAuthorityRevocationConfiguration) *CertificateAuthorityRevocationConfigurationOcspConfiguration {
		return v.OcspConfiguration
	})
	return pulumix.GPtrOutput[CertificateAuthorityRevocationConfigurationOcspConfiguration, CertificateAuthorityRevocationConfigurationOcspConfigurationOutput]{OutputState: value.OutputState}
}

type CertificateAuthorityRevocationConfigurationCrlConfiguration struct {
	// Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public. Must be less than or equal to 253 characters in length.
	CustomCname *string `pulumi:"customCname"`
	// Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// Number of days until a certificate expires. Must be between 1 and 5000.
	ExpirationInDays *int `pulumi:"expirationInDays"`
	// Name of the S3 bucket that contains the CRL. If you do not provide a value for the `customCname` argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You must specify a bucket policy that allows ACM PCA to write the CRL to your bucket. Must be between 3 and 255 characters in length.
	S3BucketName *string `pulumi:"s3BucketName"`
	// Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. Defaults to `PUBLIC_READ`.
	S3ObjectAcl *string `pulumi:"s3ObjectAcl"`
}

type CertificateAuthorityRevocationConfigurationCrlConfigurationArgs struct {
	// Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public. Must be less than or equal to 253 characters in length.
	CustomCname pulumix.Input[*string] `pulumi:"customCname"`
	// Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Number of days until a certificate expires. Must be between 1 and 5000.
	ExpirationInDays pulumix.Input[*int] `pulumi:"expirationInDays"`
	// Name of the S3 bucket that contains the CRL. If you do not provide a value for the `customCname` argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You must specify a bucket policy that allows ACM PCA to write the CRL to your bucket. Must be between 3 and 255 characters in length.
	S3BucketName pulumix.Input[*string] `pulumi:"s3BucketName"`
	// Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. Defaults to `PUBLIC_READ`.
	S3ObjectAcl pulumix.Input[*string] `pulumi:"s3ObjectAcl"`
}

func (CertificateAuthorityRevocationConfigurationCrlConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityRevocationConfigurationCrlConfiguration)(nil)).Elem()
}

func (i CertificateAuthorityRevocationConfigurationCrlConfigurationArgs) ToCertificateAuthorityRevocationConfigurationCrlConfigurationOutput() CertificateAuthorityRevocationConfigurationCrlConfigurationOutput {
	return i.ToCertificateAuthorityRevocationConfigurationCrlConfigurationOutputWithContext(context.Background())
}

func (i CertificateAuthorityRevocationConfigurationCrlConfigurationArgs) ToCertificateAuthorityRevocationConfigurationCrlConfigurationOutputWithContext(ctx context.Context) CertificateAuthorityRevocationConfigurationCrlConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityRevocationConfigurationCrlConfigurationOutput)
}

func (i *CertificateAuthorityRevocationConfigurationCrlConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*CertificateAuthorityRevocationConfigurationCrlConfigurationArgs] {
	return pulumix.Val(i)
}

type CertificateAuthorityRevocationConfigurationCrlConfigurationOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityRevocationConfigurationCrlConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityRevocationConfigurationCrlConfiguration)(nil)).Elem()
}

func (o CertificateAuthorityRevocationConfigurationCrlConfigurationOutput) ToCertificateAuthorityRevocationConfigurationCrlConfigurationOutput() CertificateAuthorityRevocationConfigurationCrlConfigurationOutput {
	return o
}

func (o CertificateAuthorityRevocationConfigurationCrlConfigurationOutput) ToCertificateAuthorityRevocationConfigurationCrlConfigurationOutputWithContext(ctx context.Context) CertificateAuthorityRevocationConfigurationCrlConfigurationOutput {
	return o
}

func (o CertificateAuthorityRevocationConfigurationCrlConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateAuthorityRevocationConfigurationCrlConfiguration] {
	return pulumix.Output[CertificateAuthorityRevocationConfigurationCrlConfiguration]{
		OutputState: o.OutputState,
	}
}

// Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public. Must be less than or equal to 253 characters in length.
func (o CertificateAuthorityRevocationConfigurationCrlConfigurationOutput) CustomCname() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityRevocationConfigurationCrlConfiguration](o, func(v CertificateAuthorityRevocationConfigurationCrlConfiguration) *string { return v.CustomCname })
}

// Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to `false`.
func (o CertificateAuthorityRevocationConfigurationCrlConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[CertificateAuthorityRevocationConfigurationCrlConfiguration](o, func(v CertificateAuthorityRevocationConfigurationCrlConfiguration) *bool { return v.Enabled })
}

// Number of days until a certificate expires. Must be between 1 and 5000.
func (o CertificateAuthorityRevocationConfigurationCrlConfigurationOutput) ExpirationInDays() pulumix.Output[*int] {
	return pulumix.Apply[CertificateAuthorityRevocationConfigurationCrlConfiguration](o, func(v CertificateAuthorityRevocationConfigurationCrlConfiguration) *int { return v.ExpirationInDays })
}

// Name of the S3 bucket that contains the CRL. If you do not provide a value for the `customCname` argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You must specify a bucket policy that allows ACM PCA to write the CRL to your bucket. Must be between 3 and 255 characters in length.
func (o CertificateAuthorityRevocationConfigurationCrlConfigurationOutput) S3BucketName() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityRevocationConfigurationCrlConfiguration](o, func(v CertificateAuthorityRevocationConfigurationCrlConfiguration) *string { return v.S3BucketName })
}

// Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. Defaults to `PUBLIC_READ`.
func (o CertificateAuthorityRevocationConfigurationCrlConfigurationOutput) S3ObjectAcl() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityRevocationConfigurationCrlConfiguration](o, func(v CertificateAuthorityRevocationConfigurationCrlConfiguration) *string { return v.S3ObjectAcl })
}

type CertificateAuthorityRevocationConfigurationOcspConfiguration struct {
	// Boolean value that specifies whether a custom OCSP responder is enabled.
	Enabled bool `pulumi:"enabled"`
	// CNAME specifying a customized OCSP domain. Note: The value of the CNAME must not include a protocol prefix such as "http://" or "https://".
	OcspCustomCname *string `pulumi:"ocspCustomCname"`
}

type CertificateAuthorityRevocationConfigurationOcspConfigurationArgs struct {
	// Boolean value that specifies whether a custom OCSP responder is enabled.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// CNAME specifying a customized OCSP domain. Note: The value of the CNAME must not include a protocol prefix such as "http://" or "https://".
	OcspCustomCname pulumix.Input[*string] `pulumi:"ocspCustomCname"`
}

func (CertificateAuthorityRevocationConfigurationOcspConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityRevocationConfigurationOcspConfiguration)(nil)).Elem()
}

func (i CertificateAuthorityRevocationConfigurationOcspConfigurationArgs) ToCertificateAuthorityRevocationConfigurationOcspConfigurationOutput() CertificateAuthorityRevocationConfigurationOcspConfigurationOutput {
	return i.ToCertificateAuthorityRevocationConfigurationOcspConfigurationOutputWithContext(context.Background())
}

func (i CertificateAuthorityRevocationConfigurationOcspConfigurationArgs) ToCertificateAuthorityRevocationConfigurationOcspConfigurationOutputWithContext(ctx context.Context) CertificateAuthorityRevocationConfigurationOcspConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityRevocationConfigurationOcspConfigurationOutput)
}

func (i *CertificateAuthorityRevocationConfigurationOcspConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*CertificateAuthorityRevocationConfigurationOcspConfigurationArgs] {
	return pulumix.Val(i)
}

type CertificateAuthorityRevocationConfigurationOcspConfigurationOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityRevocationConfigurationOcspConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityRevocationConfigurationOcspConfiguration)(nil)).Elem()
}

func (o CertificateAuthorityRevocationConfigurationOcspConfigurationOutput) ToCertificateAuthorityRevocationConfigurationOcspConfigurationOutput() CertificateAuthorityRevocationConfigurationOcspConfigurationOutput {
	return o
}

func (o CertificateAuthorityRevocationConfigurationOcspConfigurationOutput) ToCertificateAuthorityRevocationConfigurationOcspConfigurationOutputWithContext(ctx context.Context) CertificateAuthorityRevocationConfigurationOcspConfigurationOutput {
	return o
}

func (o CertificateAuthorityRevocationConfigurationOcspConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateAuthorityRevocationConfigurationOcspConfiguration] {
	return pulumix.Output[CertificateAuthorityRevocationConfigurationOcspConfiguration]{
		OutputState: o.OutputState,
	}
}

// Boolean value that specifies whether a custom OCSP responder is enabled.
func (o CertificateAuthorityRevocationConfigurationOcspConfigurationOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[CertificateAuthorityRevocationConfigurationOcspConfiguration](o, func(v CertificateAuthorityRevocationConfigurationOcspConfiguration) bool { return v.Enabled })
}

// CNAME specifying a customized OCSP domain. Note: The value of the CNAME must not include a protocol prefix such as "http://" or "https://".
func (o CertificateAuthorityRevocationConfigurationOcspConfigurationOutput) OcspCustomCname() pulumix.Output[*string] {
	return pulumix.Apply[CertificateAuthorityRevocationConfigurationOcspConfiguration](o, func(v CertificateAuthorityRevocationConfigurationOcspConfiguration) *string { return v.OcspCustomCname })
}

type CertificateValidity struct {
	// Determines how `value` is interpreted. Valid values: `DAYS`, `MONTHS`, `YEARS`, `ABSOLUTE`, `END_DATE`.
	Type string `pulumi:"type"`
	// If `type` is `DAYS`, `MONTHS`, or `YEARS`, the relative time until the certificate expires. If `type` is `ABSOLUTE`, the date in seconds since the Unix epoch. If `type` is `END_DATE`, the  date in RFC 3339 format.
	Value string `pulumi:"value"`
}

type CertificateValidityArgs struct {
	// Determines how `value` is interpreted. Valid values: `DAYS`, `MONTHS`, `YEARS`, `ABSOLUTE`, `END_DATE`.
	Type pulumix.Input[string] `pulumi:"type"`
	// If `type` is `DAYS`, `MONTHS`, or `YEARS`, the relative time until the certificate expires. If `type` is `ABSOLUTE`, the date in seconds since the Unix epoch. If `type` is `END_DATE`, the  date in RFC 3339 format.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (CertificateValidityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateValidity)(nil)).Elem()
}

func (i CertificateValidityArgs) ToCertificateValidityOutput() CertificateValidityOutput {
	return i.ToCertificateValidityOutputWithContext(context.Background())
}

func (i CertificateValidityArgs) ToCertificateValidityOutputWithContext(ctx context.Context) CertificateValidityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateValidityOutput)
}

func (i *CertificateValidityArgs) ToOutput(ctx context.Context) pulumix.Output[*CertificateValidityArgs] {
	return pulumix.Val(i)
}

type CertificateValidityOutput struct{ *pulumi.OutputState }

func (CertificateValidityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateValidity)(nil)).Elem()
}

func (o CertificateValidityOutput) ToCertificateValidityOutput() CertificateValidityOutput {
	return o
}

func (o CertificateValidityOutput) ToCertificateValidityOutputWithContext(ctx context.Context) CertificateValidityOutput {
	return o
}

func (o CertificateValidityOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateValidity] {
	return pulumix.Output[CertificateValidity]{
		OutputState: o.OutputState,
	}
}

// Determines how `value` is interpreted. Valid values: `DAYS`, `MONTHS`, `YEARS`, `ABSOLUTE`, `END_DATE`.
func (o CertificateValidityOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[CertificateValidity](o, func(v CertificateValidity) string { return v.Type })
}

// If `type` is `DAYS`, `MONTHS`, or `YEARS`, the relative time until the certificate expires. If `type` is `ABSOLUTE`, the date in seconds since the Unix epoch. If `type` is `END_DATE`, the  date in RFC 3339 format.
func (o CertificateValidityOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[CertificateValidity](o, func(v CertificateValidity) string { return v.Value })
}

type GetCertificateAuthorityRevocationConfiguration struct {
	CrlConfigurations  []GetCertificateAuthorityRevocationConfigurationCrlConfiguration  `pulumi:"crlConfigurations"`
	OcspConfigurations []GetCertificateAuthorityRevocationConfigurationOcspConfiguration `pulumi:"ocspConfigurations"`
}

type GetCertificateAuthorityRevocationConfigurationArgs struct {
	CrlConfigurations  pulumix.Input[[]*GetCertificateAuthorityRevocationConfigurationCrlConfigurationArgs]  `pulumi:"crlConfigurations"`
	OcspConfigurations pulumix.Input[[]*GetCertificateAuthorityRevocationConfigurationOcspConfigurationArgs] `pulumi:"ocspConfigurations"`
}

func (GetCertificateAuthorityRevocationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateAuthorityRevocationConfiguration)(nil)).Elem()
}

func (i GetCertificateAuthorityRevocationConfigurationArgs) ToGetCertificateAuthorityRevocationConfigurationOutput() GetCertificateAuthorityRevocationConfigurationOutput {
	return i.ToGetCertificateAuthorityRevocationConfigurationOutputWithContext(context.Background())
}

func (i GetCertificateAuthorityRevocationConfigurationArgs) ToGetCertificateAuthorityRevocationConfigurationOutputWithContext(ctx context.Context) GetCertificateAuthorityRevocationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateAuthorityRevocationConfigurationOutput)
}

func (i *GetCertificateAuthorityRevocationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCertificateAuthorityRevocationConfigurationArgs] {
	return pulumix.Val(i)
}

type GetCertificateAuthorityRevocationConfigurationOutput struct{ *pulumi.OutputState }

func (GetCertificateAuthorityRevocationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateAuthorityRevocationConfiguration)(nil)).Elem()
}

func (o GetCertificateAuthorityRevocationConfigurationOutput) ToGetCertificateAuthorityRevocationConfigurationOutput() GetCertificateAuthorityRevocationConfigurationOutput {
	return o
}

func (o GetCertificateAuthorityRevocationConfigurationOutput) ToGetCertificateAuthorityRevocationConfigurationOutputWithContext(ctx context.Context) GetCertificateAuthorityRevocationConfigurationOutput {
	return o
}

func (o GetCertificateAuthorityRevocationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetCertificateAuthorityRevocationConfiguration] {
	return pulumix.Output[GetCertificateAuthorityRevocationConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GetCertificateAuthorityRevocationConfigurationOutput) CrlConfigurations() pulumix.GArrayOutput[GetCertificateAuthorityRevocationConfigurationCrlConfiguration, GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput] {
	value := pulumix.Apply[GetCertificateAuthorityRevocationConfiguration](o, func(v GetCertificateAuthorityRevocationConfiguration) []GetCertificateAuthorityRevocationConfigurationCrlConfiguration {
		return v.CrlConfigurations
	})
	return pulumix.GArrayOutput[GetCertificateAuthorityRevocationConfigurationCrlConfiguration, GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput]{OutputState: value.OutputState}
}

func (o GetCertificateAuthorityRevocationConfigurationOutput) OcspConfigurations() pulumix.GArrayOutput[GetCertificateAuthorityRevocationConfigurationOcspConfiguration, GetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput] {
	value := pulumix.Apply[GetCertificateAuthorityRevocationConfiguration](o, func(v GetCertificateAuthorityRevocationConfiguration) []GetCertificateAuthorityRevocationConfigurationOcspConfiguration {
		return v.OcspConfigurations
	})
	return pulumix.GArrayOutput[GetCertificateAuthorityRevocationConfigurationOcspConfiguration, GetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput]{OutputState: value.OutputState}
}

type GetCertificateAuthorityRevocationConfigurationCrlConfiguration struct {
	CustomCname      string `pulumi:"customCname"`
	Enabled          bool   `pulumi:"enabled"`
	ExpirationInDays int    `pulumi:"expirationInDays"`
	S3BucketName     string `pulumi:"s3BucketName"`
	S3ObjectAcl      string `pulumi:"s3ObjectAcl"`
}

type GetCertificateAuthorityRevocationConfigurationCrlConfigurationArgs struct {
	CustomCname      pulumix.Input[string] `pulumi:"customCname"`
	Enabled          pulumix.Input[bool]   `pulumi:"enabled"`
	ExpirationInDays pulumix.Input[int]    `pulumi:"expirationInDays"`
	S3BucketName     pulumix.Input[string] `pulumi:"s3BucketName"`
	S3ObjectAcl      pulumix.Input[string] `pulumi:"s3ObjectAcl"`
}

func (GetCertificateAuthorityRevocationConfigurationCrlConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateAuthorityRevocationConfigurationCrlConfiguration)(nil)).Elem()
}

func (i GetCertificateAuthorityRevocationConfigurationCrlConfigurationArgs) ToGetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput() GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput {
	return i.ToGetCertificateAuthorityRevocationConfigurationCrlConfigurationOutputWithContext(context.Background())
}

func (i GetCertificateAuthorityRevocationConfigurationCrlConfigurationArgs) ToGetCertificateAuthorityRevocationConfigurationCrlConfigurationOutputWithContext(ctx context.Context) GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput)
}

func (i *GetCertificateAuthorityRevocationConfigurationCrlConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCertificateAuthorityRevocationConfigurationCrlConfigurationArgs] {
	return pulumix.Val(i)
}

type GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput struct{ *pulumi.OutputState }

func (GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateAuthorityRevocationConfigurationCrlConfiguration)(nil)).Elem()
}

func (o GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput) ToGetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput() GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput {
	return o
}

func (o GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput) ToGetCertificateAuthorityRevocationConfigurationCrlConfigurationOutputWithContext(ctx context.Context) GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput {
	return o
}

func (o GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetCertificateAuthorityRevocationConfigurationCrlConfiguration] {
	return pulumix.Output[GetCertificateAuthorityRevocationConfigurationCrlConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput) CustomCname() pulumix.Output[string] {
	return pulumix.Apply[GetCertificateAuthorityRevocationConfigurationCrlConfiguration](o, func(v GetCertificateAuthorityRevocationConfigurationCrlConfiguration) string { return v.CustomCname })
}

func (o GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetCertificateAuthorityRevocationConfigurationCrlConfiguration](o, func(v GetCertificateAuthorityRevocationConfigurationCrlConfiguration) bool { return v.Enabled })
}

func (o GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput) ExpirationInDays() pulumix.Output[int] {
	return pulumix.Apply[GetCertificateAuthorityRevocationConfigurationCrlConfiguration](o, func(v GetCertificateAuthorityRevocationConfigurationCrlConfiguration) int { return v.ExpirationInDays })
}

func (o GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput) S3BucketName() pulumix.Output[string] {
	return pulumix.Apply[GetCertificateAuthorityRevocationConfigurationCrlConfiguration](o, func(v GetCertificateAuthorityRevocationConfigurationCrlConfiguration) string { return v.S3BucketName })
}

func (o GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput) S3ObjectAcl() pulumix.Output[string] {
	return pulumix.Apply[GetCertificateAuthorityRevocationConfigurationCrlConfiguration](o, func(v GetCertificateAuthorityRevocationConfigurationCrlConfiguration) string { return v.S3ObjectAcl })
}

type GetCertificateAuthorityRevocationConfigurationOcspConfiguration struct {
	Enabled         bool   `pulumi:"enabled"`
	OcspCustomCname string `pulumi:"ocspCustomCname"`
}

type GetCertificateAuthorityRevocationConfigurationOcspConfigurationArgs struct {
	Enabled         pulumix.Input[bool]   `pulumi:"enabled"`
	OcspCustomCname pulumix.Input[string] `pulumi:"ocspCustomCname"`
}

func (GetCertificateAuthorityRevocationConfigurationOcspConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateAuthorityRevocationConfigurationOcspConfiguration)(nil)).Elem()
}

func (i GetCertificateAuthorityRevocationConfigurationOcspConfigurationArgs) ToGetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput() GetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput {
	return i.ToGetCertificateAuthorityRevocationConfigurationOcspConfigurationOutputWithContext(context.Background())
}

func (i GetCertificateAuthorityRevocationConfigurationOcspConfigurationArgs) ToGetCertificateAuthorityRevocationConfigurationOcspConfigurationOutputWithContext(ctx context.Context) GetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput)
}

func (i *GetCertificateAuthorityRevocationConfigurationOcspConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCertificateAuthorityRevocationConfigurationOcspConfigurationArgs] {
	return pulumix.Val(i)
}

type GetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput struct{ *pulumi.OutputState }

func (GetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateAuthorityRevocationConfigurationOcspConfiguration)(nil)).Elem()
}

func (o GetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput) ToGetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput() GetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput {
	return o
}

func (o GetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput) ToGetCertificateAuthorityRevocationConfigurationOcspConfigurationOutputWithContext(ctx context.Context) GetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput {
	return o
}

func (o GetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetCertificateAuthorityRevocationConfigurationOcspConfiguration] {
	return pulumix.Output[GetCertificateAuthorityRevocationConfigurationOcspConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetCertificateAuthorityRevocationConfigurationOcspConfiguration](o, func(v GetCertificateAuthorityRevocationConfigurationOcspConfiguration) bool { return v.Enabled })
}

func (o GetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput) OcspCustomCname() pulumix.Output[string] {
	return pulumix.Apply[GetCertificateAuthorityRevocationConfigurationOcspConfiguration](o, func(v GetCertificateAuthorityRevocationConfigurationOcspConfiguration) string {
		return v.OcspCustomCname
	})
}

func init() {
	pulumi.RegisterOutputType(CertificateAuthorityCertificateAuthorityConfigurationOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityCertificateAuthorityConfigurationSubjectOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityRevocationConfigurationOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityRevocationConfigurationCrlConfigurationOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityRevocationConfigurationOcspConfigurationOutput{})
	pulumi.RegisterOutputType(CertificateValidityOutput{})
	pulumi.RegisterOutputType(GetCertificateAuthorityRevocationConfigurationOutput{})
	pulumi.RegisterOutputType(GetCertificateAuthorityRevocationConfigurationCrlConfigurationOutput{})
	pulumi.RegisterOutputType(GetCertificateAuthorityRevocationConfigurationOcspConfigurationOutput{})
}
