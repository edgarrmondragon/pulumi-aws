// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package serverlessrepository

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about an AWS Serverless Application Repository application. For example, this can be used to determine the required `capabilities` for an application.
func GetApplication(ctx *pulumi.Context, args *GetApplicationArgs, opts ...pulumi.InvokeOption) (*GetApplicationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetApplicationResult
	err := ctx.Invoke("aws:serverlessrepository/getApplication:getApplication", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getApplication.
type GetApplicationArgs struct {
	// ARN of the application.
	ApplicationId string `pulumi:"applicationId"`
	// Requested version of the application. By default, retrieves the latest version.
	SemanticVersion *string `pulumi:"semanticVersion"`
}

// A collection of values returned by getApplication.
type GetApplicationResult struct {
	// ARN of the application.
	ApplicationId string `pulumi:"applicationId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the application.
	Name string `pulumi:"name"`
	// A list of capabilities describing the permissions needed to deploy the application.
	RequiredCapabilities []string `pulumi:"requiredCapabilities"`
	SemanticVersion      string   `pulumi:"semanticVersion"`
	// URL pointing to the source code of the application version.
	SourceCodeUrl string `pulumi:"sourceCodeUrl"`
	// URL pointing to the Cloud Formation template for the application version.
	TemplateUrl string `pulumi:"templateUrl"`
}

func GetApplicationOutput(ctx *pulumi.Context, args GetApplicationOutputArgs, opts ...pulumi.InvokeOption) GetApplicationResultOutput {
	outputResult := pulumix.ApplyErr[*GetApplicationArgs](args.ToOutput(), func(plainArgs *GetApplicationArgs) (*GetApplicationResult, error) {
		return GetApplication(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetApplicationResultOutput, *GetApplicationResult](outputResult)
}

// A collection of arguments for invoking getApplication.
type GetApplicationOutputArgs struct {
	// ARN of the application.
	ApplicationId pulumix.Input[string] `pulumi:"applicationId"`
	// Requested version of the application. By default, retrieves the latest version.
	SemanticVersion pulumix.Input[*string] `pulumi:"semanticVersion"`
}

func (args GetApplicationOutputArgs) ToOutput() pulumix.Output[*GetApplicationArgs] {
	allArgs := pulumix.All(
		args.ApplicationId.ToOutput(context.Background()).AsAny(),
		args.SemanticVersion.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetApplicationArgs {
		return &GetApplicationArgs{
			ApplicationId:   resolvedArgs[0].(string),
			SemanticVersion: resolvedArgs[1].(*string),
		}
	})
}

type GetApplicationResultOutput struct{ *pulumi.OutputState }

func (GetApplicationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationResult)(nil)).Elem()
}

func (o GetApplicationResultOutput) ToOutput(context.Context) pulumix.Output[*GetApplicationResult] {
	return pulumix.Output[*GetApplicationResult]{
		OutputState: o.OutputState,
	}
}

func (o GetApplicationResultOutput) ApplicationId() pulumix.Output[string] {
	return pulumix.Apply[*GetApplicationResult](o, func(v *GetApplicationResult) string { return v.ApplicationId })
}

func (o GetApplicationResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetApplicationResult](o, func(v *GetApplicationResult) string { return v.Id })
}

func (o GetApplicationResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*GetApplicationResult](o, func(v *GetApplicationResult) string { return v.Name })
}

func (o GetApplicationResultOutput) RequiredCapabilities() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetApplicationResult](o, func(v *GetApplicationResult) []string { return v.RequiredCapabilities })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetApplicationResultOutput) SemanticVersion() pulumix.Output[string] {
	return pulumix.Apply[*GetApplicationResult](o, func(v *GetApplicationResult) string { return v.SemanticVersion })
}

func (o GetApplicationResultOutput) SourceCodeUrl() pulumix.Output[string] {
	return pulumix.Apply[*GetApplicationResult](o, func(v *GetApplicationResult) string { return v.SourceCodeUrl })
}

func (o GetApplicationResultOutput) TemplateUrl() pulumix.Output[string] {
	return pulumix.Apply[*GetApplicationResult](o, func(v *GetApplicationResult) string { return v.TemplateUrl })
}
