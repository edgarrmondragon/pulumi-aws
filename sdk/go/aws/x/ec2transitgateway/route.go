// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an EC2 Transit Gateway Route.
type Route struct {
	pulumi.CustomResourceState

	// Indicates whether to drop traffic that matches this route (default to `false`).
	Blackhole pulumix.Output[*bool] `pulumi:"blackhole"`
	// IPv4 or IPv6 RFC1924 CIDR used for destination matches. Routing decisions are based on the most specific match.
	DestinationCidrBlock pulumix.Output[string] `pulumi:"destinationCidrBlock"`
	// Identifier of EC2 Transit Gateway Attachment (required if `blackhole` is set to false).
	TransitGatewayAttachmentId pulumix.Output[*string] `pulumi:"transitGatewayAttachmentId"`
	// Identifier of EC2 Transit Gateway Route Table.
	TransitGatewayRouteTableId pulumix.Output[string] `pulumi:"transitGatewayRouteTableId"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.TransitGatewayRouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayRouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Route
	err := ctx.RegisterResource("aws:ec2transitgateway/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("aws:ec2transitgateway/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	// Indicates whether to drop traffic that matches this route (default to `false`).
	Blackhole *bool `pulumi:"blackhole"`
	// IPv4 or IPv6 RFC1924 CIDR used for destination matches. Routing decisions are based on the most specific match.
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// Identifier of EC2 Transit Gateway Attachment (required if `blackhole` is set to false).
	TransitGatewayAttachmentId *string `pulumi:"transitGatewayAttachmentId"`
	// Identifier of EC2 Transit Gateway Route Table.
	TransitGatewayRouteTableId *string `pulumi:"transitGatewayRouteTableId"`
}

type RouteState struct {
	// Indicates whether to drop traffic that matches this route (default to `false`).
	Blackhole pulumix.Input[*bool]
	// IPv4 or IPv6 RFC1924 CIDR used for destination matches. Routing decisions are based on the most specific match.
	DestinationCidrBlock pulumix.Input[*string]
	// Identifier of EC2 Transit Gateway Attachment (required if `blackhole` is set to false).
	TransitGatewayAttachmentId pulumix.Input[*string]
	// Identifier of EC2 Transit Gateway Route Table.
	TransitGatewayRouteTableId pulumix.Input[*string]
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	// Indicates whether to drop traffic that matches this route (default to `false`).
	Blackhole *bool `pulumi:"blackhole"`
	// IPv4 or IPv6 RFC1924 CIDR used for destination matches. Routing decisions are based on the most specific match.
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// Identifier of EC2 Transit Gateway Attachment (required if `blackhole` is set to false).
	TransitGatewayAttachmentId *string `pulumi:"transitGatewayAttachmentId"`
	// Identifier of EC2 Transit Gateway Route Table.
	TransitGatewayRouteTableId string `pulumi:"transitGatewayRouteTableId"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// Indicates whether to drop traffic that matches this route (default to `false`).
	Blackhole pulumix.Input[*bool]
	// IPv4 or IPv6 RFC1924 CIDR used for destination matches. Routing decisions are based on the most specific match.
	DestinationCidrBlock pulumix.Input[string]
	// Identifier of EC2 Transit Gateway Attachment (required if `blackhole` is set to false).
	TransitGatewayAttachmentId pulumix.Input[*string]
	// Identifier of EC2 Transit Gateway Route Table.
	TransitGatewayRouteTableId pulumix.Input[string]
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

func (o RouteOutput) ToOutput(ctx context.Context) pulumix.Output[Route] {
	return pulumix.Output[Route]{
		OutputState: o.OutputState,
	}
}

// Indicates whether to drop traffic that matches this route (default to `false`).
func (o RouteOutput) Blackhole() pulumix.Output[*bool] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[*bool] { return v.Blackhole })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// IPv4 or IPv6 RFC1924 CIDR used for destination matches. Routing decisions are based on the most specific match.
func (o RouteOutput) DestinationCidrBlock() pulumix.Output[string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[string] { return v.DestinationCidrBlock })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identifier of EC2 Transit Gateway Attachment (required if `blackhole` is set to false).
func (o RouteOutput) TransitGatewayAttachmentId() pulumix.Output[*string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[*string] { return v.TransitGatewayAttachmentId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Identifier of EC2 Transit Gateway Route Table.
func (o RouteOutput) TransitGatewayRouteTableId() pulumix.Output[string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[string] { return v.TransitGatewayRouteTableId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RouteOutput{})
}
