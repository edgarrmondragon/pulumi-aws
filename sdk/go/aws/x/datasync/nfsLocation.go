// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an NFS Location within AWS DataSync.
//
// > **NOTE:** The DataSync Agents must be available before creating this resource.
type NfsLocation struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Configuration block containing mount options used by DataSync to access the NFS Server.
	MountOptions pulumix.GPtrOutput[NfsLocationMountOptions, NfsLocationMountOptionsOutput] `pulumi:"mountOptions"`
	// Configuration block containing information for connecting to the NFS File System.
	OnPremConfig pulumix.GPtrOutput[NfsLocationOnPremConfig, NfsLocationOnPremConfigOutput] `pulumi:"onPremConfig"`
	// Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
	ServerHostname pulumix.Output[string] `pulumi:"serverHostname"`
	// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
	Subdirectory pulumix.Output[string] `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	Uri     pulumix.Output[string]    `pulumi:"uri"`
}

// NewNfsLocation registers a new resource with the given unique name, arguments, and options.
func NewNfsLocation(ctx *pulumi.Context,
	name string, args *NfsLocationArgs, opts ...pulumi.ResourceOption) (*NfsLocation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OnPremConfig == nil {
		return nil, errors.New("invalid value for required argument 'OnPremConfig'")
	}
	if args.ServerHostname == nil {
		return nil, errors.New("invalid value for required argument 'ServerHostname'")
	}
	if args.Subdirectory == nil {
		return nil, errors.New("invalid value for required argument 'Subdirectory'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NfsLocation
	err := ctx.RegisterResource("aws:datasync/nfsLocation:NfsLocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNfsLocation gets an existing NfsLocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNfsLocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NfsLocationState, opts ...pulumi.ResourceOption) (*NfsLocation, error) {
	var resource NfsLocation
	err := ctx.ReadResource("aws:datasync/nfsLocation:NfsLocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NfsLocation resources.
type nfsLocationState struct {
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn *string `pulumi:"arn"`
	// Configuration block containing mount options used by DataSync to access the NFS Server.
	MountOptions *NfsLocationMountOptions `pulumi:"mountOptions"`
	// Configuration block containing information for connecting to the NFS File System.
	OnPremConfig *NfsLocationOnPremConfig `pulumi:"onPremConfig"`
	// Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
	ServerHostname *string `pulumi:"serverHostname"`
	// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
	Subdirectory *string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	Uri     *string           `pulumi:"uri"`
}

type NfsLocationState struct {
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumix.Input[*string]
	// Configuration block containing mount options used by DataSync to access the NFS Server.
	MountOptions pulumix.Input[*NfsLocationMountOptionsArgs]
	// Configuration block containing information for connecting to the NFS File System.
	OnPremConfig pulumix.Input[*NfsLocationOnPremConfigArgs]
	// Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
	ServerHostname pulumix.Input[*string]
	// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
	Subdirectory pulumix.Input[*string]
	// Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	Uri     pulumix.Input[*string]
}

func (NfsLocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*nfsLocationState)(nil)).Elem()
}

type nfsLocationArgs struct {
	// Configuration block containing mount options used by DataSync to access the NFS Server.
	MountOptions *NfsLocationMountOptions `pulumi:"mountOptions"`
	// Configuration block containing information for connecting to the NFS File System.
	OnPremConfig NfsLocationOnPremConfig `pulumi:"onPremConfig"`
	// Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
	ServerHostname string `pulumi:"serverHostname"`
	// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
	Subdirectory string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a NfsLocation resource.
type NfsLocationArgs struct {
	// Configuration block containing mount options used by DataSync to access the NFS Server.
	MountOptions pulumix.Input[*NfsLocationMountOptionsArgs]
	// Configuration block containing information for connecting to the NFS File System.
	OnPremConfig pulumix.Input[*NfsLocationOnPremConfigArgs]
	// Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
	ServerHostname pulumix.Input[string]
	// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
	Subdirectory pulumix.Input[string]
	// Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (NfsLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nfsLocationArgs)(nil)).Elem()
}

type NfsLocationOutput struct{ *pulumi.OutputState }

func (NfsLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsLocation)(nil)).Elem()
}

func (o NfsLocationOutput) ToNfsLocationOutput() NfsLocationOutput {
	return o
}

func (o NfsLocationOutput) ToNfsLocationOutputWithContext(ctx context.Context) NfsLocationOutput {
	return o
}

func (o NfsLocationOutput) ToOutput(ctx context.Context) pulumix.Output[NfsLocation] {
	return pulumix.Output[NfsLocation]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the DataSync Location.
func (o NfsLocationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[NfsLocation](o, func(v NfsLocation) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block containing mount options used by DataSync to access the NFS Server.
func (o NfsLocationOutput) MountOptions() pulumix.GPtrOutput[NfsLocationMountOptions, NfsLocationMountOptionsOutput] {
	value := pulumix.Apply[NfsLocation](o, func(v NfsLocation) pulumix.GPtrOutput[NfsLocationMountOptions, NfsLocationMountOptionsOutput] {
		return v.MountOptions
	})
	unwrapped := pulumix.Flatten[*NfsLocationMountOptions, pulumix.GPtrOutput[NfsLocationMountOptions, NfsLocationMountOptionsOutput]](value)
	return pulumix.GPtrOutput[NfsLocationMountOptions, NfsLocationMountOptionsOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block containing information for connecting to the NFS File System.
func (o NfsLocationOutput) OnPremConfig() pulumix.GPtrOutput[NfsLocationOnPremConfig, NfsLocationOnPremConfigOutput] {
	value := pulumix.Apply[NfsLocation](o, func(v NfsLocation) pulumix.GPtrOutput[NfsLocationOnPremConfig, NfsLocationOnPremConfigOutput] {
		return v.OnPremConfig
	})
	unwrapped := pulumix.Flatten[*NfsLocationOnPremConfig, pulumix.GPtrOutput[NfsLocationOnPremConfig, NfsLocationOnPremConfigOutput]](value)
	return pulumix.GPtrOutput[NfsLocationOnPremConfig, NfsLocationOnPremConfigOutput]{OutputState: unwrapped.OutputState}
}

// Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
func (o NfsLocationOutput) ServerHostname() pulumix.Output[string] {
	value := pulumix.Apply[NfsLocation](o, func(v NfsLocation) pulumix.Output[string] { return v.ServerHostname })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
func (o NfsLocationOutput) Subdirectory() pulumix.Output[string] {
	value := pulumix.Apply[NfsLocation](o, func(v NfsLocation) pulumix.Output[string] { return v.Subdirectory })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o NfsLocationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[NfsLocation](o, func(v NfsLocation) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o NfsLocationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[NfsLocation](o, func(v NfsLocation) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o NfsLocationOutput) Uri() pulumix.Output[string] {
	value := pulumix.Apply[NfsLocation](o, func(v NfsLocation) pulumix.Output[string] { return v.Uri })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(NfsLocationOutput{})
}
