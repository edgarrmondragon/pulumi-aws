// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Allocates a static IP address.
//
// > **Note:** Lightsail is currently only supported in a limited number of AWS Regions, please see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail) for more details
type StaticIp struct {
	pulumi.CustomResourceState

	// The ARN of the Lightsail static IP
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The allocated static IP address
	IpAddress pulumix.Output[string] `pulumi:"ipAddress"`
	// The name for the allocated static IP
	Name pulumix.Output[string] `pulumi:"name"`
	// The support code.
	SupportCode pulumix.Output[string] `pulumi:"supportCode"`
}

// NewStaticIp registers a new resource with the given unique name, arguments, and options.
func NewStaticIp(ctx *pulumi.Context,
	name string, args *StaticIpArgs, opts ...pulumi.ResourceOption) (*StaticIp, error) {
	if args == nil {
		args = &StaticIpArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StaticIp
	err := ctx.RegisterResource("aws:lightsail/staticIp:StaticIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStaticIp gets an existing StaticIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStaticIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StaticIpState, opts ...pulumi.ResourceOption) (*StaticIp, error) {
	var resource StaticIp
	err := ctx.ReadResource("aws:lightsail/staticIp:StaticIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StaticIp resources.
type staticIpState struct {
	// The ARN of the Lightsail static IP
	Arn *string `pulumi:"arn"`
	// The allocated static IP address
	IpAddress *string `pulumi:"ipAddress"`
	// The name for the allocated static IP
	Name *string `pulumi:"name"`
	// The support code.
	SupportCode *string `pulumi:"supportCode"`
}

type StaticIpState struct {
	// The ARN of the Lightsail static IP
	Arn pulumix.Input[*string]
	// The allocated static IP address
	IpAddress pulumix.Input[*string]
	// The name for the allocated static IP
	Name pulumix.Input[*string]
	// The support code.
	SupportCode pulumix.Input[*string]
}

func (StaticIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*staticIpState)(nil)).Elem()
}

type staticIpArgs struct {
	// The name for the allocated static IP
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a StaticIp resource.
type StaticIpArgs struct {
	// The name for the allocated static IP
	Name pulumix.Input[*string]
}

func (StaticIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*staticIpArgs)(nil)).Elem()
}

type StaticIpOutput struct{ *pulumi.OutputState }

func (StaticIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticIp)(nil)).Elem()
}

func (o StaticIpOutput) ToStaticIpOutput() StaticIpOutput {
	return o
}

func (o StaticIpOutput) ToStaticIpOutputWithContext(ctx context.Context) StaticIpOutput {
	return o
}

func (o StaticIpOutput) ToOutput(ctx context.Context) pulumix.Output[StaticIp] {
	return pulumix.Output[StaticIp]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Lightsail static IP
func (o StaticIpOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[StaticIp](o, func(v StaticIp) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The allocated static IP address
func (o StaticIpOutput) IpAddress() pulumix.Output[string] {
	value := pulumix.Apply[StaticIp](o, func(v StaticIp) pulumix.Output[string] { return v.IpAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name for the allocated static IP
func (o StaticIpOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[StaticIp](o, func(v StaticIp) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The support code.
func (o StaticIpOutput) SupportCode() pulumix.Output[string] {
	value := pulumix.Apply[StaticIp](o, func(v StaticIp) pulumix.Output[string] { return v.SupportCode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(StaticIpOutput{})
}
