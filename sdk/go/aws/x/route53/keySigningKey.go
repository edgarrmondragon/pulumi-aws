// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Route 53 Key Signing Key. To manage Domain Name System Security Extensions (DNSSEC) for a Hosted Zone, see the `route53.HostedZoneDnsSec` resource. For more information about managing DNSSEC in Route 53, see the [Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec.html).
type KeySigningKey struct {
	pulumi.CustomResourceState

	// A string used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
	DigestAlgorithmMnemonic pulumix.Output[string] `pulumi:"digestAlgorithmMnemonic"`
	// An integer used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
	DigestAlgorithmType pulumix.Output[int] `pulumi:"digestAlgorithmType"`
	// A cryptographic digest of a DNSKEY resource record (RR). DNSKEY records are used to publish the public key that resolvers can use to verify DNSSEC signatures that are used to secure certain kinds of information provided by the DNS system.
	DigestValue pulumix.Output[string] `pulumi:"digestValue"`
	// A string that represents a DNSKEY record.
	DnskeyRecord pulumix.Output[string] `pulumi:"dnskeyRecord"`
	// A string that represents a delegation signer (DS) record.
	DsRecord pulumix.Output[string] `pulumi:"dsRecord"`
	// An integer that specifies how the key is used. For key-signing key (KSK), this value is always 257.
	Flag pulumix.Output[int] `pulumi:"flag"`
	// Identifier of the Route 53 Hosted Zone.
	HostedZoneId pulumix.Output[string] `pulumi:"hostedZoneId"`
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key. This must be unique for each key-signing key (KSK) in a single hosted zone. This key must be in the `us-east-1` Region and meet certain requirements, which are described in the [Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-cmk-requirements.html) and [Route 53 API Reference](https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateKeySigningKey.html).
	KeyManagementServiceArn pulumix.Output[string] `pulumi:"keyManagementServiceArn"`
	// An integer used to identify the DNSSEC record for the domain name. The process used to calculate the value is described in [RFC-4034 Appendix B](https://tools.ietf.org/rfc/rfc4034.txt).
	KeyTag pulumix.Output[int] `pulumi:"keyTag"`
	// Name of the key-signing key (KSK). Must be unique for each key-singing key in the same hosted zone.
	//
	// The following arguments are optional:
	Name pulumix.Output[string] `pulumi:"name"`
	// The public key, represented as a Base64 encoding, as required by [RFC-4034 Page 5](https://tools.ietf.org/rfc/rfc4034.txt).
	PublicKey pulumix.Output[string] `pulumi:"publicKey"`
	// A string used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
	SigningAlgorithmMnemonic pulumix.Output[string] `pulumi:"signingAlgorithmMnemonic"`
	// An integer used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
	SigningAlgorithmType pulumix.Output[int] `pulumi:"signingAlgorithmType"`
	// Status of the key-signing key (KSK). Valid values: `ACTIVE`, `INACTIVE`. Defaults to `ACTIVE`.
	Status pulumix.Output[*string] `pulumi:"status"`
}

// NewKeySigningKey registers a new resource with the given unique name, arguments, and options.
func NewKeySigningKey(ctx *pulumi.Context,
	name string, args *KeySigningKeyArgs, opts ...pulumi.ResourceOption) (*KeySigningKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostedZoneId == nil {
		return nil, errors.New("invalid value for required argument 'HostedZoneId'")
	}
	if args.KeyManagementServiceArn == nil {
		return nil, errors.New("invalid value for required argument 'KeyManagementServiceArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeySigningKey
	err := ctx.RegisterResource("aws:route53/keySigningKey:KeySigningKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeySigningKey gets an existing KeySigningKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeySigningKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeySigningKeyState, opts ...pulumi.ResourceOption) (*KeySigningKey, error) {
	var resource KeySigningKey
	err := ctx.ReadResource("aws:route53/keySigningKey:KeySigningKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeySigningKey resources.
type keySigningKeyState struct {
	// A string used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
	DigestAlgorithmMnemonic *string `pulumi:"digestAlgorithmMnemonic"`
	// An integer used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
	DigestAlgorithmType *int `pulumi:"digestAlgorithmType"`
	// A cryptographic digest of a DNSKEY resource record (RR). DNSKEY records are used to publish the public key that resolvers can use to verify DNSSEC signatures that are used to secure certain kinds of information provided by the DNS system.
	DigestValue *string `pulumi:"digestValue"`
	// A string that represents a DNSKEY record.
	DnskeyRecord *string `pulumi:"dnskeyRecord"`
	// A string that represents a delegation signer (DS) record.
	DsRecord *string `pulumi:"dsRecord"`
	// An integer that specifies how the key is used. For key-signing key (KSK), this value is always 257.
	Flag *int `pulumi:"flag"`
	// Identifier of the Route 53 Hosted Zone.
	HostedZoneId *string `pulumi:"hostedZoneId"`
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key. This must be unique for each key-signing key (KSK) in a single hosted zone. This key must be in the `us-east-1` Region and meet certain requirements, which are described in the [Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-cmk-requirements.html) and [Route 53 API Reference](https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateKeySigningKey.html).
	KeyManagementServiceArn *string `pulumi:"keyManagementServiceArn"`
	// An integer used to identify the DNSSEC record for the domain name. The process used to calculate the value is described in [RFC-4034 Appendix B](https://tools.ietf.org/rfc/rfc4034.txt).
	KeyTag *int `pulumi:"keyTag"`
	// Name of the key-signing key (KSK). Must be unique for each key-singing key in the same hosted zone.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// The public key, represented as a Base64 encoding, as required by [RFC-4034 Page 5](https://tools.ietf.org/rfc/rfc4034.txt).
	PublicKey *string `pulumi:"publicKey"`
	// A string used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
	SigningAlgorithmMnemonic *string `pulumi:"signingAlgorithmMnemonic"`
	// An integer used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
	SigningAlgorithmType *int `pulumi:"signingAlgorithmType"`
	// Status of the key-signing key (KSK). Valid values: `ACTIVE`, `INACTIVE`. Defaults to `ACTIVE`.
	Status *string `pulumi:"status"`
}

type KeySigningKeyState struct {
	// A string used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
	DigestAlgorithmMnemonic pulumix.Input[*string]
	// An integer used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
	DigestAlgorithmType pulumix.Input[*int]
	// A cryptographic digest of a DNSKEY resource record (RR). DNSKEY records are used to publish the public key that resolvers can use to verify DNSSEC signatures that are used to secure certain kinds of information provided by the DNS system.
	DigestValue pulumix.Input[*string]
	// A string that represents a DNSKEY record.
	DnskeyRecord pulumix.Input[*string]
	// A string that represents a delegation signer (DS) record.
	DsRecord pulumix.Input[*string]
	// An integer that specifies how the key is used. For key-signing key (KSK), this value is always 257.
	Flag pulumix.Input[*int]
	// Identifier of the Route 53 Hosted Zone.
	HostedZoneId pulumix.Input[*string]
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key. This must be unique for each key-signing key (KSK) in a single hosted zone. This key must be in the `us-east-1` Region and meet certain requirements, which are described in the [Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-cmk-requirements.html) and [Route 53 API Reference](https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateKeySigningKey.html).
	KeyManagementServiceArn pulumix.Input[*string]
	// An integer used to identify the DNSSEC record for the domain name. The process used to calculate the value is described in [RFC-4034 Appendix B](https://tools.ietf.org/rfc/rfc4034.txt).
	KeyTag pulumix.Input[*int]
	// Name of the key-signing key (KSK). Must be unique for each key-singing key in the same hosted zone.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// The public key, represented as a Base64 encoding, as required by [RFC-4034 Page 5](https://tools.ietf.org/rfc/rfc4034.txt).
	PublicKey pulumix.Input[*string]
	// A string used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
	SigningAlgorithmMnemonic pulumix.Input[*string]
	// An integer used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
	SigningAlgorithmType pulumix.Input[*int]
	// Status of the key-signing key (KSK). Valid values: `ACTIVE`, `INACTIVE`. Defaults to `ACTIVE`.
	Status pulumix.Input[*string]
}

func (KeySigningKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*keySigningKeyState)(nil)).Elem()
}

type keySigningKeyArgs struct {
	// Identifier of the Route 53 Hosted Zone.
	HostedZoneId string `pulumi:"hostedZoneId"`
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key. This must be unique for each key-signing key (KSK) in a single hosted zone. This key must be in the `us-east-1` Region and meet certain requirements, which are described in the [Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-cmk-requirements.html) and [Route 53 API Reference](https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateKeySigningKey.html).
	KeyManagementServiceArn string `pulumi:"keyManagementServiceArn"`
	// Name of the key-signing key (KSK). Must be unique for each key-singing key in the same hosted zone.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Status of the key-signing key (KSK). Valid values: `ACTIVE`, `INACTIVE`. Defaults to `ACTIVE`.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a KeySigningKey resource.
type KeySigningKeyArgs struct {
	// Identifier of the Route 53 Hosted Zone.
	HostedZoneId pulumix.Input[string]
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key. This must be unique for each key-signing key (KSK) in a single hosted zone. This key must be in the `us-east-1` Region and meet certain requirements, which are described in the [Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-cmk-requirements.html) and [Route 53 API Reference](https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateKeySigningKey.html).
	KeyManagementServiceArn pulumix.Input[string]
	// Name of the key-signing key (KSK). Must be unique for each key-singing key in the same hosted zone.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Status of the key-signing key (KSK). Valid values: `ACTIVE`, `INACTIVE`. Defaults to `ACTIVE`.
	Status pulumix.Input[*string]
}

func (KeySigningKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keySigningKeyArgs)(nil)).Elem()
}

type KeySigningKeyOutput struct{ *pulumi.OutputState }

func (KeySigningKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeySigningKey)(nil)).Elem()
}

func (o KeySigningKeyOutput) ToKeySigningKeyOutput() KeySigningKeyOutput {
	return o
}

func (o KeySigningKeyOutput) ToKeySigningKeyOutputWithContext(ctx context.Context) KeySigningKeyOutput {
	return o
}

func (o KeySigningKeyOutput) ToOutput(ctx context.Context) pulumix.Output[KeySigningKey] {
	return pulumix.Output[KeySigningKey]{
		OutputState: o.OutputState,
	}
}

// A string used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
func (o KeySigningKeyOutput) DigestAlgorithmMnemonic() pulumix.Output[string] {
	value := pulumix.Apply[KeySigningKey](o, func(v KeySigningKey) pulumix.Output[string] { return v.DigestAlgorithmMnemonic })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An integer used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
func (o KeySigningKeyOutput) DigestAlgorithmType() pulumix.Output[int] {
	value := pulumix.Apply[KeySigningKey](o, func(v KeySigningKey) pulumix.Output[int] { return v.DigestAlgorithmType })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// A cryptographic digest of a DNSKEY resource record (RR). DNSKEY records are used to publish the public key that resolvers can use to verify DNSSEC signatures that are used to secure certain kinds of information provided by the DNS system.
func (o KeySigningKeyOutput) DigestValue() pulumix.Output[string] {
	value := pulumix.Apply[KeySigningKey](o, func(v KeySigningKey) pulumix.Output[string] { return v.DigestValue })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A string that represents a DNSKEY record.
func (o KeySigningKeyOutput) DnskeyRecord() pulumix.Output[string] {
	value := pulumix.Apply[KeySigningKey](o, func(v KeySigningKey) pulumix.Output[string] { return v.DnskeyRecord })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A string that represents a delegation signer (DS) record.
func (o KeySigningKeyOutput) DsRecord() pulumix.Output[string] {
	value := pulumix.Apply[KeySigningKey](o, func(v KeySigningKey) pulumix.Output[string] { return v.DsRecord })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An integer that specifies how the key is used. For key-signing key (KSK), this value is always 257.
func (o KeySigningKeyOutput) Flag() pulumix.Output[int] {
	value := pulumix.Apply[KeySigningKey](o, func(v KeySigningKey) pulumix.Output[int] { return v.Flag })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Identifier of the Route 53 Hosted Zone.
func (o KeySigningKeyOutput) HostedZoneId() pulumix.Output[string] {
	value := pulumix.Apply[KeySigningKey](o, func(v KeySigningKey) pulumix.Output[string] { return v.HostedZoneId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key. This must be unique for each key-signing key (KSK) in a single hosted zone. This key must be in the `us-east-1` Region and meet certain requirements, which are described in the [Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-cmk-requirements.html) and [Route 53 API Reference](https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateKeySigningKey.html).
func (o KeySigningKeyOutput) KeyManagementServiceArn() pulumix.Output[string] {
	value := pulumix.Apply[KeySigningKey](o, func(v KeySigningKey) pulumix.Output[string] { return v.KeyManagementServiceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An integer used to identify the DNSSEC record for the domain name. The process used to calculate the value is described in [RFC-4034 Appendix B](https://tools.ietf.org/rfc/rfc4034.txt).
func (o KeySigningKeyOutput) KeyTag() pulumix.Output[int] {
	value := pulumix.Apply[KeySigningKey](o, func(v KeySigningKey) pulumix.Output[int] { return v.KeyTag })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Name of the key-signing key (KSK). Must be unique for each key-singing key in the same hosted zone.
//
// The following arguments are optional:
func (o KeySigningKeyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[KeySigningKey](o, func(v KeySigningKey) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The public key, represented as a Base64 encoding, as required by [RFC-4034 Page 5](https://tools.ietf.org/rfc/rfc4034.txt).
func (o KeySigningKeyOutput) PublicKey() pulumix.Output[string] {
	value := pulumix.Apply[KeySigningKey](o, func(v KeySigningKey) pulumix.Output[string] { return v.PublicKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A string used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
func (o KeySigningKeyOutput) SigningAlgorithmMnemonic() pulumix.Output[string] {
	value := pulumix.Apply[KeySigningKey](o, func(v KeySigningKey) pulumix.Output[string] { return v.SigningAlgorithmMnemonic })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An integer used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
func (o KeySigningKeyOutput) SigningAlgorithmType() pulumix.Output[int] {
	value := pulumix.Apply[KeySigningKey](o, func(v KeySigningKey) pulumix.Output[int] { return v.SigningAlgorithmType })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Status of the key-signing key (KSK). Valid values: `ACTIVE`, `INACTIVE`. Defaults to `ACTIVE`.
func (o KeySigningKeyOutput) Status() pulumix.Output[*string] {
	value := pulumix.Apply[KeySigningKey](o, func(v KeySigningKey) pulumix.Output[*string] { return v.Status })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(KeySigningKeyOutput{})
}
