// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about an AWS Cloudwatch Log Group
func LookupLogGroup(ctx *pulumi.Context, args *LookupLogGroupArgs, opts ...pulumi.InvokeOption) (*LookupLogGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLogGroupResult
	err := ctx.Invoke("aws:cloudwatch/getLogGroup:getLogGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLogGroup.
type LookupLogGroupArgs struct {
	// Name of the Cloudwatch log group
	Name string `pulumi:"name"`
	// Map of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getLogGroup.
type LookupLogGroupResult struct {
	// ARN of the Cloudwatch log group. Any `:*` suffix added by the API, denoting all CloudWatch Log Streams under the CloudWatch Log Group, is removed for greater compatibility with other AWS services that do not accept the suffix.
	Arn string `pulumi:"arn"`
	// Creation time of the log group, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
	CreationTime int `pulumi:"creationTime"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN of the KMS Key to use when encrypting log data.
	KmsKeyId string `pulumi:"kmsKeyId"`
	Name     string `pulumi:"name"`
	// Number of days log events retained in the specified log group.
	RetentionInDays int `pulumi:"retentionInDays"`
	// Map of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

func LookupLogGroupOutput(ctx *pulumi.Context, args LookupLogGroupOutputArgs, opts ...pulumi.InvokeOption) LookupLogGroupResultOutput {
	outputResult := pulumix.ApplyErr[*LookupLogGroupArgs](args.ToOutput(), func(plainArgs *LookupLogGroupArgs) (*LookupLogGroupResult, error) {
		return LookupLogGroup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupLogGroupResultOutput, *LookupLogGroupResult](outputResult)
}

// A collection of arguments for invoking getLogGroup.
type LookupLogGroupOutputArgs struct {
	// Name of the Cloudwatch log group
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of tags to assign to the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupLogGroupOutputArgs) ToOutput() pulumix.Output[*LookupLogGroupArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupLogGroupArgs {
		return &LookupLogGroupArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupLogGroupResultOutput struct{ *pulumi.OutputState }

func (LookupLogGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogGroupResult)(nil)).Elem()
}

func (o LookupLogGroupResultOutput) ToOutput(context.Context) pulumix.Output[*LookupLogGroupResult] {
	return pulumix.Output[*LookupLogGroupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupLogGroupResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupLogGroupResult](o, func(v *LookupLogGroupResult) string { return v.Arn })
}

func (o LookupLogGroupResultOutput) CreationTime() pulumix.Output[int] {
	return pulumix.Apply[*LookupLogGroupResult](o, func(v *LookupLogGroupResult) int { return v.CreationTime })
}

func (o LookupLogGroupResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupLogGroupResult](o, func(v *LookupLogGroupResult) string { return v.Id })
}

func (o LookupLogGroupResultOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupLogGroupResult](o, func(v *LookupLogGroupResult) string { return v.KmsKeyId })
}

func (o LookupLogGroupResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupLogGroupResult](o, func(v *LookupLogGroupResult) string { return v.Name })
}

func (o LookupLogGroupResultOutput) RetentionInDays() pulumix.Output[int] {
	return pulumix.Apply[*LookupLogGroupResult](o, func(v *LookupLogGroupResult) int { return v.RetentionInDays })
}

func (o LookupLogGroupResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupLogGroupResult](o, func(v *LookupLogGroupResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
