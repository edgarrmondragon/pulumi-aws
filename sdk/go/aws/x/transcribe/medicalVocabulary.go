// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transcribe

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Transcribe MedicalVocabulary.
type MedicalVocabulary struct {
	pulumi.CustomResourceState

	// ARN of the MedicalVocabulary.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Generated download URI.
	DownloadUri pulumix.Output[string] `pulumi:"downloadUri"`
	// The language code you selected for your medical vocabulary. US English (en-US) is the only language supported with Amazon Transcribe Medical.
	LanguageCode pulumix.Output[string] `pulumi:"languageCode"`
	// A map of tags to assign to the MedicalVocabulary. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The Amazon S3 location (URI) of the text file that contains your custom medical vocabulary.
	VocabularyFileUri pulumix.Output[string] `pulumi:"vocabularyFileUri"`
	// The name of the Medical Vocabulary.
	//
	// The following arguments are optional:
	VocabularyName pulumix.Output[string] `pulumi:"vocabularyName"`
}

// NewMedicalVocabulary registers a new resource with the given unique name, arguments, and options.
func NewMedicalVocabulary(ctx *pulumi.Context,
	name string, args *MedicalVocabularyArgs, opts ...pulumi.ResourceOption) (*MedicalVocabulary, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LanguageCode == nil {
		return nil, errors.New("invalid value for required argument 'LanguageCode'")
	}
	if args.VocabularyFileUri == nil {
		return nil, errors.New("invalid value for required argument 'VocabularyFileUri'")
	}
	if args.VocabularyName == nil {
		return nil, errors.New("invalid value for required argument 'VocabularyName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MedicalVocabulary
	err := ctx.RegisterResource("aws:transcribe/medicalVocabulary:MedicalVocabulary", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMedicalVocabulary gets an existing MedicalVocabulary resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMedicalVocabulary(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MedicalVocabularyState, opts ...pulumi.ResourceOption) (*MedicalVocabulary, error) {
	var resource MedicalVocabulary
	err := ctx.ReadResource("aws:transcribe/medicalVocabulary:MedicalVocabulary", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MedicalVocabulary resources.
type medicalVocabularyState struct {
	// ARN of the MedicalVocabulary.
	Arn *string `pulumi:"arn"`
	// Generated download URI.
	DownloadUri *string `pulumi:"downloadUri"`
	// The language code you selected for your medical vocabulary. US English (en-US) is the only language supported with Amazon Transcribe Medical.
	LanguageCode *string `pulumi:"languageCode"`
	// A map of tags to assign to the MedicalVocabulary. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The Amazon S3 location (URI) of the text file that contains your custom medical vocabulary.
	VocabularyFileUri *string `pulumi:"vocabularyFileUri"`
	// The name of the Medical Vocabulary.
	//
	// The following arguments are optional:
	VocabularyName *string `pulumi:"vocabularyName"`
}

type MedicalVocabularyState struct {
	// ARN of the MedicalVocabulary.
	Arn pulumix.Input[*string]
	// Generated download URI.
	DownloadUri pulumix.Input[*string]
	// The language code you selected for your medical vocabulary. US English (en-US) is the only language supported with Amazon Transcribe Medical.
	LanguageCode pulumix.Input[*string]
	// A map of tags to assign to the MedicalVocabulary. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// The Amazon S3 location (URI) of the text file that contains your custom medical vocabulary.
	VocabularyFileUri pulumix.Input[*string]
	// The name of the Medical Vocabulary.
	//
	// The following arguments are optional:
	VocabularyName pulumix.Input[*string]
}

func (MedicalVocabularyState) ElementType() reflect.Type {
	return reflect.TypeOf((*medicalVocabularyState)(nil)).Elem()
}

type medicalVocabularyArgs struct {
	// The language code you selected for your medical vocabulary. US English (en-US) is the only language supported with Amazon Transcribe Medical.
	LanguageCode string `pulumi:"languageCode"`
	// A map of tags to assign to the MedicalVocabulary. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The Amazon S3 location (URI) of the text file that contains your custom medical vocabulary.
	VocabularyFileUri string `pulumi:"vocabularyFileUri"`
	// The name of the Medical Vocabulary.
	//
	// The following arguments are optional:
	VocabularyName string `pulumi:"vocabularyName"`
}

// The set of arguments for constructing a MedicalVocabulary resource.
type MedicalVocabularyArgs struct {
	// The language code you selected for your medical vocabulary. US English (en-US) is the only language supported with Amazon Transcribe Medical.
	LanguageCode pulumix.Input[string]
	// A map of tags to assign to the MedicalVocabulary. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The Amazon S3 location (URI) of the text file that contains your custom medical vocabulary.
	VocabularyFileUri pulumix.Input[string]
	// The name of the Medical Vocabulary.
	//
	// The following arguments are optional:
	VocabularyName pulumix.Input[string]
}

func (MedicalVocabularyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*medicalVocabularyArgs)(nil)).Elem()
}

type MedicalVocabularyOutput struct{ *pulumi.OutputState }

func (MedicalVocabularyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MedicalVocabulary)(nil)).Elem()
}

func (o MedicalVocabularyOutput) ToMedicalVocabularyOutput() MedicalVocabularyOutput {
	return o
}

func (o MedicalVocabularyOutput) ToMedicalVocabularyOutputWithContext(ctx context.Context) MedicalVocabularyOutput {
	return o
}

func (o MedicalVocabularyOutput) ToOutput(ctx context.Context) pulumix.Output[MedicalVocabulary] {
	return pulumix.Output[MedicalVocabulary]{
		OutputState: o.OutputState,
	}
}

// ARN of the MedicalVocabulary.
func (o MedicalVocabularyOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[MedicalVocabulary](o, func(v MedicalVocabulary) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Generated download URI.
func (o MedicalVocabularyOutput) DownloadUri() pulumix.Output[string] {
	value := pulumix.Apply[MedicalVocabulary](o, func(v MedicalVocabulary) pulumix.Output[string] { return v.DownloadUri })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The language code you selected for your medical vocabulary. US English (en-US) is the only language supported with Amazon Transcribe Medical.
func (o MedicalVocabularyOutput) LanguageCode() pulumix.Output[string] {
	value := pulumix.Apply[MedicalVocabulary](o, func(v MedicalVocabulary) pulumix.Output[string] { return v.LanguageCode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the MedicalVocabulary. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o MedicalVocabularyOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[MedicalVocabulary](o, func(v MedicalVocabulary) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o MedicalVocabularyOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[MedicalVocabulary](o, func(v MedicalVocabulary) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The Amazon S3 location (URI) of the text file that contains your custom medical vocabulary.
func (o MedicalVocabularyOutput) VocabularyFileUri() pulumix.Output[string] {
	value := pulumix.Apply[MedicalVocabulary](o, func(v MedicalVocabulary) pulumix.Output[string] { return v.VocabularyFileUri })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Medical Vocabulary.
//
// The following arguments are optional:
func (o MedicalVocabularyOutput) VocabularyName() pulumix.Output[string] {
	value := pulumix.Apply[MedicalVocabulary](o, func(v MedicalVocabulary) pulumix.Output[string] { return v.VocabularyName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MedicalVocabularyOutput{})
}
