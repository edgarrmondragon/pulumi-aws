// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplify

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Amplify Branch resource.
type Branch struct {
	pulumi.CustomResourceState

	// Unique ID for an Amplify app.
	AppId pulumix.Output[string] `pulumi:"appId"`
	// ARN for the branch.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A list of custom resources that are linked to this branch.
	AssociatedResources pulumix.ArrayOutput[string] `pulumi:"associatedResources"`
	// ARN for a backend environment that is part of an Amplify app.
	BackendEnvironmentArn pulumix.Output[*string] `pulumi:"backendEnvironmentArn"`
	// Basic authorization credentials for the branch.
	BasicAuthCredentials pulumix.Output[*string] `pulumi:"basicAuthCredentials"`
	// Name for the branch.
	BranchName pulumix.Output[string] `pulumi:"branchName"`
	// Custom domains for the branch.
	CustomDomains pulumix.ArrayOutput[string] `pulumi:"customDomains"`
	// Description for the branch.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Destination branch if the branch is a pull request branch.
	DestinationBranch pulumix.Output[string] `pulumi:"destinationBranch"`
	// Display name for a branch. This is used as the default domain prefix.
	DisplayName pulumix.Output[string] `pulumi:"displayName"`
	// Enables auto building for the branch.
	EnableAutoBuild pulumix.Output[*bool] `pulumi:"enableAutoBuild"`
	// Enables basic authorization for the branch.
	EnableBasicAuth pulumix.Output[*bool] `pulumi:"enableBasicAuth"`
	// Enables notifications for the branch.
	EnableNotification pulumix.Output[*bool] `pulumi:"enableNotification"`
	// Enables performance mode for the branch.
	EnablePerformanceMode pulumix.Output[*bool] `pulumi:"enablePerformanceMode"`
	// Enables pull request previews for this branch.
	EnablePullRequestPreview pulumix.Output[*bool] `pulumi:"enablePullRequestPreview"`
	// Environment variables for the branch.
	EnvironmentVariables pulumix.MapOutput[string] `pulumi:"environmentVariables"`
	// Framework for the branch.
	Framework pulumix.Output[*string] `pulumi:"framework"`
	// Amplify environment name for the pull request.
	PullRequestEnvironmentName pulumix.Output[*string] `pulumi:"pullRequestEnvironmentName"`
	// Source branch if the branch is a pull request branch.
	SourceBranch pulumix.Output[string] `pulumi:"sourceBranch"`
	// Describes the current stage for the branch. Valid values: `PRODUCTION`, `BETA`, `DEVELOPMENT`, `EXPERIMENTAL`, `PULL_REQUEST`.
	Stage pulumix.Output[*string] `pulumi:"stage"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Content Time To Live (TTL) for the website in seconds.
	Ttl pulumix.Output[*string] `pulumi:"ttl"`
}

// NewBranch registers a new resource with the given unique name, arguments, and options.
func NewBranch(ctx *pulumi.Context,
	name string, args *BranchArgs, opts ...pulumi.ResourceOption) (*Branch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.BranchName == nil {
		return nil, errors.New("invalid value for required argument 'BranchName'")
	}
	if args.BasicAuthCredentials != nil {
		untypedSecretValue := pulumi.ToSecret(args.BasicAuthCredentials.ToOutput(ctx.Context()).Untyped())
		args.BasicAuthCredentials = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"basicAuthCredentials",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Branch
	err := ctx.RegisterResource("aws:amplify/branch:Branch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBranch gets an existing Branch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBranch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BranchState, opts ...pulumi.ResourceOption) (*Branch, error) {
	var resource Branch
	err := ctx.ReadResource("aws:amplify/branch:Branch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Branch resources.
type branchState struct {
	// Unique ID for an Amplify app.
	AppId *string `pulumi:"appId"`
	// ARN for the branch.
	Arn *string `pulumi:"arn"`
	// A list of custom resources that are linked to this branch.
	AssociatedResources []string `pulumi:"associatedResources"`
	// ARN for a backend environment that is part of an Amplify app.
	BackendEnvironmentArn *string `pulumi:"backendEnvironmentArn"`
	// Basic authorization credentials for the branch.
	BasicAuthCredentials *string `pulumi:"basicAuthCredentials"`
	// Name for the branch.
	BranchName *string `pulumi:"branchName"`
	// Custom domains for the branch.
	CustomDomains []string `pulumi:"customDomains"`
	// Description for the branch.
	Description *string `pulumi:"description"`
	// Destination branch if the branch is a pull request branch.
	DestinationBranch *string `pulumi:"destinationBranch"`
	// Display name for a branch. This is used as the default domain prefix.
	DisplayName *string `pulumi:"displayName"`
	// Enables auto building for the branch.
	EnableAutoBuild *bool `pulumi:"enableAutoBuild"`
	// Enables basic authorization for the branch.
	EnableBasicAuth *bool `pulumi:"enableBasicAuth"`
	// Enables notifications for the branch.
	EnableNotification *bool `pulumi:"enableNotification"`
	// Enables performance mode for the branch.
	EnablePerformanceMode *bool `pulumi:"enablePerformanceMode"`
	// Enables pull request previews for this branch.
	EnablePullRequestPreview *bool `pulumi:"enablePullRequestPreview"`
	// Environment variables for the branch.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Framework for the branch.
	Framework *string `pulumi:"framework"`
	// Amplify environment name for the pull request.
	PullRequestEnvironmentName *string `pulumi:"pullRequestEnvironmentName"`
	// Source branch if the branch is a pull request branch.
	SourceBranch *string `pulumi:"sourceBranch"`
	// Describes the current stage for the branch. Valid values: `PRODUCTION`, `BETA`, `DEVELOPMENT`, `EXPERIMENTAL`, `PULL_REQUEST`.
	Stage *string `pulumi:"stage"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Content Time To Live (TTL) for the website in seconds.
	Ttl *string `pulumi:"ttl"`
}

type BranchState struct {
	// Unique ID for an Amplify app.
	AppId pulumix.Input[*string]
	// ARN for the branch.
	Arn pulumix.Input[*string]
	// A list of custom resources that are linked to this branch.
	AssociatedResources pulumix.Input[[]string]
	// ARN for a backend environment that is part of an Amplify app.
	BackendEnvironmentArn pulumix.Input[*string]
	// Basic authorization credentials for the branch.
	BasicAuthCredentials pulumix.Input[*string]
	// Name for the branch.
	BranchName pulumix.Input[*string]
	// Custom domains for the branch.
	CustomDomains pulumix.Input[[]string]
	// Description for the branch.
	Description pulumix.Input[*string]
	// Destination branch if the branch is a pull request branch.
	DestinationBranch pulumix.Input[*string]
	// Display name for a branch. This is used as the default domain prefix.
	DisplayName pulumix.Input[*string]
	// Enables auto building for the branch.
	EnableAutoBuild pulumix.Input[*bool]
	// Enables basic authorization for the branch.
	EnableBasicAuth pulumix.Input[*bool]
	// Enables notifications for the branch.
	EnableNotification pulumix.Input[*bool]
	// Enables performance mode for the branch.
	EnablePerformanceMode pulumix.Input[*bool]
	// Enables pull request previews for this branch.
	EnablePullRequestPreview pulumix.Input[*bool]
	// Environment variables for the branch.
	EnvironmentVariables pulumix.Input[map[string]string]
	// Framework for the branch.
	Framework pulumix.Input[*string]
	// Amplify environment name for the pull request.
	PullRequestEnvironmentName pulumix.Input[*string]
	// Source branch if the branch is a pull request branch.
	SourceBranch pulumix.Input[*string]
	// Describes the current stage for the branch. Valid values: `PRODUCTION`, `BETA`, `DEVELOPMENT`, `EXPERIMENTAL`, `PULL_REQUEST`.
	Stage pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Content Time To Live (TTL) for the website in seconds.
	Ttl pulumix.Input[*string]
}

func (BranchState) ElementType() reflect.Type {
	return reflect.TypeOf((*branchState)(nil)).Elem()
}

type branchArgs struct {
	// Unique ID for an Amplify app.
	AppId string `pulumi:"appId"`
	// ARN for a backend environment that is part of an Amplify app.
	BackendEnvironmentArn *string `pulumi:"backendEnvironmentArn"`
	// Basic authorization credentials for the branch.
	BasicAuthCredentials *string `pulumi:"basicAuthCredentials"`
	// Name for the branch.
	BranchName string `pulumi:"branchName"`
	// Description for the branch.
	Description *string `pulumi:"description"`
	// Display name for a branch. This is used as the default domain prefix.
	DisplayName *string `pulumi:"displayName"`
	// Enables auto building for the branch.
	EnableAutoBuild *bool `pulumi:"enableAutoBuild"`
	// Enables basic authorization for the branch.
	EnableBasicAuth *bool `pulumi:"enableBasicAuth"`
	// Enables notifications for the branch.
	EnableNotification *bool `pulumi:"enableNotification"`
	// Enables performance mode for the branch.
	EnablePerformanceMode *bool `pulumi:"enablePerformanceMode"`
	// Enables pull request previews for this branch.
	EnablePullRequestPreview *bool `pulumi:"enablePullRequestPreview"`
	// Environment variables for the branch.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Framework for the branch.
	Framework *string `pulumi:"framework"`
	// Amplify environment name for the pull request.
	PullRequestEnvironmentName *string `pulumi:"pullRequestEnvironmentName"`
	// Describes the current stage for the branch. Valid values: `PRODUCTION`, `BETA`, `DEVELOPMENT`, `EXPERIMENTAL`, `PULL_REQUEST`.
	Stage *string `pulumi:"stage"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Content Time To Live (TTL) for the website in seconds.
	Ttl *string `pulumi:"ttl"`
}

// The set of arguments for constructing a Branch resource.
type BranchArgs struct {
	// Unique ID for an Amplify app.
	AppId pulumix.Input[string]
	// ARN for a backend environment that is part of an Amplify app.
	BackendEnvironmentArn pulumix.Input[*string]
	// Basic authorization credentials for the branch.
	BasicAuthCredentials pulumix.Input[*string]
	// Name for the branch.
	BranchName pulumix.Input[string]
	// Description for the branch.
	Description pulumix.Input[*string]
	// Display name for a branch. This is used as the default domain prefix.
	DisplayName pulumix.Input[*string]
	// Enables auto building for the branch.
	EnableAutoBuild pulumix.Input[*bool]
	// Enables basic authorization for the branch.
	EnableBasicAuth pulumix.Input[*bool]
	// Enables notifications for the branch.
	EnableNotification pulumix.Input[*bool]
	// Enables performance mode for the branch.
	EnablePerformanceMode pulumix.Input[*bool]
	// Enables pull request previews for this branch.
	EnablePullRequestPreview pulumix.Input[*bool]
	// Environment variables for the branch.
	EnvironmentVariables pulumix.Input[map[string]string]
	// Framework for the branch.
	Framework pulumix.Input[*string]
	// Amplify environment name for the pull request.
	PullRequestEnvironmentName pulumix.Input[*string]
	// Describes the current stage for the branch. Valid values: `PRODUCTION`, `BETA`, `DEVELOPMENT`, `EXPERIMENTAL`, `PULL_REQUEST`.
	Stage pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Content Time To Live (TTL) for the website in seconds.
	Ttl pulumix.Input[*string]
}

func (BranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*branchArgs)(nil)).Elem()
}

type BranchOutput struct{ *pulumi.OutputState }

func (BranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Branch)(nil)).Elem()
}

func (o BranchOutput) ToBranchOutput() BranchOutput {
	return o
}

func (o BranchOutput) ToBranchOutputWithContext(ctx context.Context) BranchOutput {
	return o
}

func (o BranchOutput) ToOutput(ctx context.Context) pulumix.Output[Branch] {
	return pulumix.Output[Branch]{
		OutputState: o.OutputState,
	}
}

// Unique ID for an Amplify app.
func (o BranchOutput) AppId() pulumix.Output[string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[string] { return v.AppId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN for the branch.
func (o BranchOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of custom resources that are linked to this branch.
func (o BranchOutput) AssociatedResources() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.ArrayOutput[string] { return v.AssociatedResources })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// ARN for a backend environment that is part of an Amplify app.
func (o BranchOutput) BackendEnvironmentArn() pulumix.Output[*string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[*string] { return v.BackendEnvironmentArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Basic authorization credentials for the branch.
func (o BranchOutput) BasicAuthCredentials() pulumix.Output[*string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[*string] { return v.BasicAuthCredentials })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name for the branch.
func (o BranchOutput) BranchName() pulumix.Output[string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[string] { return v.BranchName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Custom domains for the branch.
func (o BranchOutput) CustomDomains() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.ArrayOutput[string] { return v.CustomDomains })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Description for the branch.
func (o BranchOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Destination branch if the branch is a pull request branch.
func (o BranchOutput) DestinationBranch() pulumix.Output[string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[string] { return v.DestinationBranch })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Display name for a branch. This is used as the default domain prefix.
func (o BranchOutput) DisplayName() pulumix.Output[string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[string] { return v.DisplayName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Enables auto building for the branch.
func (o BranchOutput) EnableAutoBuild() pulumix.Output[*bool] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[*bool] { return v.EnableAutoBuild })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Enables basic authorization for the branch.
func (o BranchOutput) EnableBasicAuth() pulumix.Output[*bool] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[*bool] { return v.EnableBasicAuth })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Enables notifications for the branch.
func (o BranchOutput) EnableNotification() pulumix.Output[*bool] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[*bool] { return v.EnableNotification })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Enables performance mode for the branch.
func (o BranchOutput) EnablePerformanceMode() pulumix.Output[*bool] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[*bool] { return v.EnablePerformanceMode })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Enables pull request previews for this branch.
func (o BranchOutput) EnablePullRequestPreview() pulumix.Output[*bool] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[*bool] { return v.EnablePullRequestPreview })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Environment variables for the branch.
func (o BranchOutput) EnvironmentVariables() pulumix.MapOutput[string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.MapOutput[string] { return v.EnvironmentVariables })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Framework for the branch.
func (o BranchOutput) Framework() pulumix.Output[*string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[*string] { return v.Framework })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Amplify environment name for the pull request.
func (o BranchOutput) PullRequestEnvironmentName() pulumix.Output[*string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[*string] { return v.PullRequestEnvironmentName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Source branch if the branch is a pull request branch.
func (o BranchOutput) SourceBranch() pulumix.Output[string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[string] { return v.SourceBranch })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Describes the current stage for the branch. Valid values: `PRODUCTION`, `BETA`, `DEVELOPMENT`, `EXPERIMENTAL`, `PULL_REQUEST`.
func (o BranchOutput) Stage() pulumix.Output[*string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[*string] { return v.Stage })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o BranchOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o BranchOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Content Time To Live (TTL) for the website in seconds.
func (o BranchOutput) Ttl() pulumix.Output[*string] {
	value := pulumix.Apply[Branch](o, func(v Branch) pulumix.Output[*string] { return v.Ttl })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(BranchOutput{})
}
