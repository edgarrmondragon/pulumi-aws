// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Glue Classifier resource.
//
// > **NOTE:** It is only valid to create one type of classifier (csv, grok, JSON, or XML). Changing classifier types will recreate the classifier.
type Classifier struct {
	pulumi.CustomResourceState

	// A classifier for Csv content. Defined below.
	CsvClassifier pulumix.GPtrOutput[ClassifierCsvClassifier, ClassifierCsvClassifierOutput] `pulumi:"csvClassifier"`
	// A classifier that uses grok patterns. Defined below.
	GrokClassifier pulumix.GPtrOutput[ClassifierGrokClassifier, ClassifierGrokClassifierOutput] `pulumi:"grokClassifier"`
	// A classifier for JSON content. Defined below.
	JsonClassifier pulumix.GPtrOutput[ClassifierJsonClassifier, ClassifierJsonClassifierOutput] `pulumi:"jsonClassifier"`
	// The name of the classifier.
	Name pulumix.Output[string] `pulumi:"name"`
	// A classifier for XML content. Defined below.
	XmlClassifier pulumix.GPtrOutput[ClassifierXmlClassifier, ClassifierXmlClassifierOutput] `pulumi:"xmlClassifier"`
}

// NewClassifier registers a new resource with the given unique name, arguments, and options.
func NewClassifier(ctx *pulumi.Context,
	name string, args *ClassifierArgs, opts ...pulumi.ResourceOption) (*Classifier, error) {
	if args == nil {
		args = &ClassifierArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Classifier
	err := ctx.RegisterResource("aws:glue/classifier:Classifier", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClassifier gets an existing Classifier resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClassifier(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClassifierState, opts ...pulumi.ResourceOption) (*Classifier, error) {
	var resource Classifier
	err := ctx.ReadResource("aws:glue/classifier:Classifier", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Classifier resources.
type classifierState struct {
	// A classifier for Csv content. Defined below.
	CsvClassifier *ClassifierCsvClassifier `pulumi:"csvClassifier"`
	// A classifier that uses grok patterns. Defined below.
	GrokClassifier *ClassifierGrokClassifier `pulumi:"grokClassifier"`
	// A classifier for JSON content. Defined below.
	JsonClassifier *ClassifierJsonClassifier `pulumi:"jsonClassifier"`
	// The name of the classifier.
	Name *string `pulumi:"name"`
	// A classifier for XML content. Defined below.
	XmlClassifier *ClassifierXmlClassifier `pulumi:"xmlClassifier"`
}

type ClassifierState struct {
	// A classifier for Csv content. Defined below.
	CsvClassifier pulumix.Input[*ClassifierCsvClassifierArgs]
	// A classifier that uses grok patterns. Defined below.
	GrokClassifier pulumix.Input[*ClassifierGrokClassifierArgs]
	// A classifier for JSON content. Defined below.
	JsonClassifier pulumix.Input[*ClassifierJsonClassifierArgs]
	// The name of the classifier.
	Name pulumix.Input[*string]
	// A classifier for XML content. Defined below.
	XmlClassifier pulumix.Input[*ClassifierXmlClassifierArgs]
}

func (ClassifierState) ElementType() reflect.Type {
	return reflect.TypeOf((*classifierState)(nil)).Elem()
}

type classifierArgs struct {
	// A classifier for Csv content. Defined below.
	CsvClassifier *ClassifierCsvClassifier `pulumi:"csvClassifier"`
	// A classifier that uses grok patterns. Defined below.
	GrokClassifier *ClassifierGrokClassifier `pulumi:"grokClassifier"`
	// A classifier for JSON content. Defined below.
	JsonClassifier *ClassifierJsonClassifier `pulumi:"jsonClassifier"`
	// The name of the classifier.
	Name *string `pulumi:"name"`
	// A classifier for XML content. Defined below.
	XmlClassifier *ClassifierXmlClassifier `pulumi:"xmlClassifier"`
}

// The set of arguments for constructing a Classifier resource.
type ClassifierArgs struct {
	// A classifier for Csv content. Defined below.
	CsvClassifier pulumix.Input[*ClassifierCsvClassifierArgs]
	// A classifier that uses grok patterns. Defined below.
	GrokClassifier pulumix.Input[*ClassifierGrokClassifierArgs]
	// A classifier for JSON content. Defined below.
	JsonClassifier pulumix.Input[*ClassifierJsonClassifierArgs]
	// The name of the classifier.
	Name pulumix.Input[*string]
	// A classifier for XML content. Defined below.
	XmlClassifier pulumix.Input[*ClassifierXmlClassifierArgs]
}

func (ClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*classifierArgs)(nil)).Elem()
}

type ClassifierOutput struct{ *pulumi.OutputState }

func (ClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Classifier)(nil)).Elem()
}

func (o ClassifierOutput) ToClassifierOutput() ClassifierOutput {
	return o
}

func (o ClassifierOutput) ToClassifierOutputWithContext(ctx context.Context) ClassifierOutput {
	return o
}

func (o ClassifierOutput) ToOutput(ctx context.Context) pulumix.Output[Classifier] {
	return pulumix.Output[Classifier]{
		OutputState: o.OutputState,
	}
}

// A classifier for Csv content. Defined below.
func (o ClassifierOutput) CsvClassifier() pulumix.GPtrOutput[ClassifierCsvClassifier, ClassifierCsvClassifierOutput] {
	value := pulumix.Apply[Classifier](o, func(v Classifier) pulumix.GPtrOutput[ClassifierCsvClassifier, ClassifierCsvClassifierOutput] {
		return v.CsvClassifier
	})
	unwrapped := pulumix.Flatten[*ClassifierCsvClassifier, pulumix.GPtrOutput[ClassifierCsvClassifier, ClassifierCsvClassifierOutput]](value)
	return pulumix.GPtrOutput[ClassifierCsvClassifier, ClassifierCsvClassifierOutput]{OutputState: unwrapped.OutputState}
}

// A classifier that uses grok patterns. Defined below.
func (o ClassifierOutput) GrokClassifier() pulumix.GPtrOutput[ClassifierGrokClassifier, ClassifierGrokClassifierOutput] {
	value := pulumix.Apply[Classifier](o, func(v Classifier) pulumix.GPtrOutput[ClassifierGrokClassifier, ClassifierGrokClassifierOutput] {
		return v.GrokClassifier
	})
	unwrapped := pulumix.Flatten[*ClassifierGrokClassifier, pulumix.GPtrOutput[ClassifierGrokClassifier, ClassifierGrokClassifierOutput]](value)
	return pulumix.GPtrOutput[ClassifierGrokClassifier, ClassifierGrokClassifierOutput]{OutputState: unwrapped.OutputState}
}

// A classifier for JSON content. Defined below.
func (o ClassifierOutput) JsonClassifier() pulumix.GPtrOutput[ClassifierJsonClassifier, ClassifierJsonClassifierOutput] {
	value := pulumix.Apply[Classifier](o, func(v Classifier) pulumix.GPtrOutput[ClassifierJsonClassifier, ClassifierJsonClassifierOutput] {
		return v.JsonClassifier
	})
	unwrapped := pulumix.Flatten[*ClassifierJsonClassifier, pulumix.GPtrOutput[ClassifierJsonClassifier, ClassifierJsonClassifierOutput]](value)
	return pulumix.GPtrOutput[ClassifierJsonClassifier, ClassifierJsonClassifierOutput]{OutputState: unwrapped.OutputState}
}

// The name of the classifier.
func (o ClassifierOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Classifier](o, func(v Classifier) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A classifier for XML content. Defined below.
func (o ClassifierOutput) XmlClassifier() pulumix.GPtrOutput[ClassifierXmlClassifier, ClassifierXmlClassifierOutput] {
	value := pulumix.Apply[Classifier](o, func(v Classifier) pulumix.GPtrOutput[ClassifierXmlClassifier, ClassifierXmlClassifierOutput] {
		return v.XmlClassifier
	})
	unwrapped := pulumix.Flatten[*ClassifierXmlClassifier, pulumix.GPtrOutput[ClassifierXmlClassifier, ClassifierXmlClassifierOutput]](value)
	return pulumix.GPtrOutput[ClassifierXmlClassifier, ClassifierXmlClassifierOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ClassifierOutput{})
}
