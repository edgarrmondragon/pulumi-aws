// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sesv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS SESv2 (Simple Email V2) Configuration Set Event Destination.
type ConfigurationSetEventDestination struct {
	pulumi.CustomResourceState

	// The name of the configuration set.
	ConfigurationSetName pulumix.Output[string] `pulumi:"configurationSetName"`
	// A name that identifies the event destination within the configuration set.
	EventDestination pulumix.GPtrOutput[ConfigurationSetEventDestinationEventDestination, ConfigurationSetEventDestinationEventDestinationOutput] `pulumi:"eventDestination"`
	// An object that defines the event destination. See eventDestination below.
	EventDestinationName pulumix.Output[string] `pulumi:"eventDestinationName"`
}

// NewConfigurationSetEventDestination registers a new resource with the given unique name, arguments, and options.
func NewConfigurationSetEventDestination(ctx *pulumi.Context,
	name string, args *ConfigurationSetEventDestinationArgs, opts ...pulumi.ResourceOption) (*ConfigurationSetEventDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigurationSetName == nil {
		return nil, errors.New("invalid value for required argument 'ConfigurationSetName'")
	}
	if args.EventDestination == nil {
		return nil, errors.New("invalid value for required argument 'EventDestination'")
	}
	if args.EventDestinationName == nil {
		return nil, errors.New("invalid value for required argument 'EventDestinationName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigurationSetEventDestination
	err := ctx.RegisterResource("aws:sesv2/configurationSetEventDestination:ConfigurationSetEventDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationSetEventDestination gets an existing ConfigurationSetEventDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationSetEventDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationSetEventDestinationState, opts ...pulumi.ResourceOption) (*ConfigurationSetEventDestination, error) {
	var resource ConfigurationSetEventDestination
	err := ctx.ReadResource("aws:sesv2/configurationSetEventDestination:ConfigurationSetEventDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigurationSetEventDestination resources.
type configurationSetEventDestinationState struct {
	// The name of the configuration set.
	ConfigurationSetName *string `pulumi:"configurationSetName"`
	// A name that identifies the event destination within the configuration set.
	EventDestination *ConfigurationSetEventDestinationEventDestination `pulumi:"eventDestination"`
	// An object that defines the event destination. See eventDestination below.
	EventDestinationName *string `pulumi:"eventDestinationName"`
}

type ConfigurationSetEventDestinationState struct {
	// The name of the configuration set.
	ConfigurationSetName pulumix.Input[*string]
	// A name that identifies the event destination within the configuration set.
	EventDestination pulumix.Input[*ConfigurationSetEventDestinationEventDestinationArgs]
	// An object that defines the event destination. See eventDestination below.
	EventDestinationName pulumix.Input[*string]
}

func (ConfigurationSetEventDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationSetEventDestinationState)(nil)).Elem()
}

type configurationSetEventDestinationArgs struct {
	// The name of the configuration set.
	ConfigurationSetName string `pulumi:"configurationSetName"`
	// A name that identifies the event destination within the configuration set.
	EventDestination ConfigurationSetEventDestinationEventDestination `pulumi:"eventDestination"`
	// An object that defines the event destination. See eventDestination below.
	EventDestinationName string `pulumi:"eventDestinationName"`
}

// The set of arguments for constructing a ConfigurationSetEventDestination resource.
type ConfigurationSetEventDestinationArgs struct {
	// The name of the configuration set.
	ConfigurationSetName pulumix.Input[string]
	// A name that identifies the event destination within the configuration set.
	EventDestination pulumix.Input[*ConfigurationSetEventDestinationEventDestinationArgs]
	// An object that defines the event destination. See eventDestination below.
	EventDestinationName pulumix.Input[string]
}

func (ConfigurationSetEventDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationSetEventDestinationArgs)(nil)).Elem()
}

type ConfigurationSetEventDestinationOutput struct{ *pulumi.OutputState }

func (ConfigurationSetEventDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationSetEventDestination)(nil)).Elem()
}

func (o ConfigurationSetEventDestinationOutput) ToConfigurationSetEventDestinationOutput() ConfigurationSetEventDestinationOutput {
	return o
}

func (o ConfigurationSetEventDestinationOutput) ToConfigurationSetEventDestinationOutputWithContext(ctx context.Context) ConfigurationSetEventDestinationOutput {
	return o
}

func (o ConfigurationSetEventDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigurationSetEventDestination] {
	return pulumix.Output[ConfigurationSetEventDestination]{
		OutputState: o.OutputState,
	}
}

// The name of the configuration set.
func (o ConfigurationSetEventDestinationOutput) ConfigurationSetName() pulumix.Output[string] {
	value := pulumix.Apply[ConfigurationSetEventDestination](o, func(v ConfigurationSetEventDestination) pulumix.Output[string] { return v.ConfigurationSetName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A name that identifies the event destination within the configuration set.
func (o ConfigurationSetEventDestinationOutput) EventDestination() pulumix.GPtrOutput[ConfigurationSetEventDestinationEventDestination, ConfigurationSetEventDestinationEventDestinationOutput] {
	value := pulumix.Apply[ConfigurationSetEventDestination](o, func(v ConfigurationSetEventDestination) pulumix.GPtrOutput[ConfigurationSetEventDestinationEventDestination, ConfigurationSetEventDestinationEventDestinationOutput] {
		return v.EventDestination
	})
	unwrapped := pulumix.Flatten[*ConfigurationSetEventDestinationEventDestination, pulumix.GPtrOutput[ConfigurationSetEventDestinationEventDestination, ConfigurationSetEventDestinationEventDestinationOutput]](value)
	return pulumix.GPtrOutput[ConfigurationSetEventDestinationEventDestination, ConfigurationSetEventDestinationEventDestinationOutput]{OutputState: unwrapped.OutputState}
}

// An object that defines the event destination. See eventDestination below.
func (o ConfigurationSetEventDestinationOutput) EventDestinationName() pulumix.Output[string] {
	value := pulumix.Apply[ConfigurationSetEventDestination](o, func(v ConfigurationSetEventDestination) pulumix.Output[string] { return v.EventDestinationName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ConfigurationSetEventDestinationOutput{})
}
