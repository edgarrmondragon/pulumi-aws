// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages Resource Access Manager (RAM) Resource Sharing with AWS Organizations. If you enable sharing with your organization, you can share resources without using invitations. Refer to the [AWS RAM user guide](https://docs.aws.amazon.com/ram/latest/userguide/getting-started-sharing.html#getting-started-sharing-orgs) for more details.
//
// > **NOTE:** Use this resource to manage resource sharing within your organization, **not** the `organizations.Organization` resource with `ram.amazonaws.com` configured in `awsServiceAccessPrincipals`.
type SharingWithOrganization struct {
	pulumi.CustomResourceState
}

// NewSharingWithOrganization registers a new resource with the given unique name, arguments, and options.
func NewSharingWithOrganization(ctx *pulumi.Context,
	name string, args *SharingWithOrganizationArgs, opts ...pulumi.ResourceOption) (*SharingWithOrganization, error) {
	if args == nil {
		args = &SharingWithOrganizationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SharingWithOrganization
	err := ctx.RegisterResource("aws:ram/sharingWithOrganization:SharingWithOrganization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSharingWithOrganization gets an existing SharingWithOrganization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSharingWithOrganization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SharingWithOrganizationState, opts ...pulumi.ResourceOption) (*SharingWithOrganization, error) {
	var resource SharingWithOrganization
	err := ctx.ReadResource("aws:ram/sharingWithOrganization:SharingWithOrganization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SharingWithOrganization resources.
type sharingWithOrganizationState struct {
}

type SharingWithOrganizationState struct {
}

func (SharingWithOrganizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*sharingWithOrganizationState)(nil)).Elem()
}

type sharingWithOrganizationArgs struct {
}

// The set of arguments for constructing a SharingWithOrganization resource.
type SharingWithOrganizationArgs struct {
}

func (SharingWithOrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sharingWithOrganizationArgs)(nil)).Elem()
}

type SharingWithOrganizationOutput struct{ *pulumi.OutputState }

func (SharingWithOrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharingWithOrganization)(nil)).Elem()
}

func (o SharingWithOrganizationOutput) ToSharingWithOrganizationOutput() SharingWithOrganizationOutput {
	return o
}

func (o SharingWithOrganizationOutput) ToSharingWithOrganizationOutputWithContext(ctx context.Context) SharingWithOrganizationOutput {
	return o
}

func (o SharingWithOrganizationOutput) ToOutput(ctx context.Context) pulumix.Output[SharingWithOrganization] {
	return pulumix.Output[SharingWithOrganization]{
		OutputState: o.OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(SharingWithOrganizationOutput{})
}
