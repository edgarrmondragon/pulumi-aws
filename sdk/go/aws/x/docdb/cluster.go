// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package docdb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a DocumentDB Cluster.
//
// Changes to a DocumentDB Cluster can occur when you manually change a
// parameter, such as `port`, and are reflected in the next maintenance
// window. Because of this, this provider may report a difference in its planning
// phase because a modification has not yet taken place. You can use the
// `applyImmediately` flag to instruct the service to apply the change immediately
// (see documentation below).
//
// > **Note:** using `applyImmediately` can result in a brief downtime as the server reboots.
type Cluster struct {
	pulumi.CustomResourceState

	// Specifies whether any cluster modifications
	// are applied immediately, or during the next maintenance window. Default is
	// `false`.
	ApplyImmediately pulumix.Output[bool] `pulumi:"applyImmediately"`
	// Amazon Resource Name (ARN) of cluster
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A list of EC2 Availability Zones that
	// instances in the DB cluster can be created in.
	AvailabilityZones pulumix.ArrayOutput[string] `pulumi:"availabilityZones"`
	// The days to retain backups for. Default `1`
	BackupRetentionPeriod pulumix.Output[*int] `pulumi:"backupRetentionPeriod"`
	// The cluster identifier. If omitted, the provider will assign a random, unique identifier.
	ClusterIdentifier pulumix.Output[string] `pulumi:"clusterIdentifier"`
	// Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `clusterIdentifier`.
	ClusterIdentifierPrefix pulumix.Output[string] `pulumi:"clusterIdentifierPrefix"`
	// List of DocumentDB Instances that are a part of this cluster
	ClusterMembers pulumix.ArrayOutput[string] `pulumi:"clusterMembers"`
	// The DocumentDB Cluster Resource ID
	ClusterResourceId pulumix.Output[string] `pulumi:"clusterResourceId"`
	// A cluster parameter group to associate with the cluster.
	DbClusterParameterGroupName pulumix.Output[string] `pulumi:"dbClusterParameterGroupName"`
	// A DB subnet group to associate with this DB instance.
	DbSubnetGroupName pulumix.Output[string] `pulumi:"dbSubnetGroupName"`
	// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
	DeletionProtection pulumix.Output[*bool] `pulumi:"deletionProtection"`
	// List of log types to export to cloudwatch. If omitted, no logs will be exported.
	// The following log types are supported: `audit`, `profiler`.
	EnabledCloudwatchLogsExports pulumix.ArrayOutput[string] `pulumi:"enabledCloudwatchLogsExports"`
	// The DNS address of the DocumentDB instance
	Endpoint pulumix.Output[string] `pulumi:"endpoint"`
	// The name of the database engine to be used for this DB cluster. Defaults to `docdb`. Valid Values: `docdb`
	Engine pulumix.Output[*string] `pulumi:"engine"`
	// The database engine version. Updating this argument results in an outage.
	EngineVersion pulumix.Output[string] `pulumi:"engineVersion"`
	// The name of your final DB snapshot
	// when this DB cluster is deleted. If omitted, no final snapshot will be
	// made.
	FinalSnapshotIdentifier pulumix.Output[*string] `pulumi:"finalSnapshotIdentifier"`
	// The global cluster identifier specified on `docdb.GlobalCluster`.
	GlobalClusterIdentifier pulumix.Output[*string] `pulumi:"globalClusterIdentifier"`
	// The Route53 Hosted Zone ID of the endpoint
	HostedZoneId pulumix.Output[string] `pulumi:"hostedZoneId"`
	// The ARN for the KMS encryption key. When specifying `kmsKeyId`, `storageEncrypted` needs to be set to true.
	KmsKeyId pulumix.Output[string] `pulumi:"kmsKeyId"`
	// Password for the master DB user. Note that this may
	// show up in logs, and it will be stored in the state file. Please refer to the DocumentDB Naming Constraints.
	MasterPassword pulumix.Output[*string] `pulumi:"masterPassword"`
	// Username for the master DB user.
	MasterUsername pulumix.Output[string] `pulumi:"masterUsername"`
	// The port on which the DB accepts connections
	Port pulumix.Output[*int] `pulumi:"port"`
	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC
	// Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
	PreferredBackupWindow pulumix.Output[string] `pulumi:"preferredBackupWindow"`
	// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
	PreferredMaintenanceWindow pulumix.Output[string] `pulumi:"preferredMaintenanceWindow"`
	// A read-only endpoint for the DocumentDB cluster, automatically load-balanced across replicas
	ReaderEndpoint pulumix.Output[string] `pulumi:"readerEndpoint"`
	// Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from `finalSnapshotIdentifier`. Default is `false`.
	SkipFinalSnapshot pulumix.Output[*bool] `pulumi:"skipFinalSnapshot"`
	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot. Automated snapshots **should not** be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
	SnapshotIdentifier pulumix.Output[*string] `pulumi:"snapshotIdentifier"`
	// Specifies whether the DB cluster is encrypted. The default is `false`.
	StorageEncrypted pulumix.Output[*bool] `pulumi:"storageEncrypted"`
	// A map of tags to assign to the DB cluster. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// List of VPC security groups to associate
	// with the Cluster
	VpcSecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"vpcSecurityGroupIds"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		args = &ClusterArgs{}
	}

	if args.MasterPassword != nil {
		untypedSecretValue := pulumi.ToSecret(args.MasterPassword.ToOutput(ctx.Context()).Untyped())
		args.MasterPassword = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"masterPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("aws:docdb/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws:docdb/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// Specifies whether any cluster modifications
	// are applied immediately, or during the next maintenance window. Default is
	// `false`.
	ApplyImmediately *bool `pulumi:"applyImmediately"`
	// Amazon Resource Name (ARN) of cluster
	Arn *string `pulumi:"arn"`
	// A list of EC2 Availability Zones that
	// instances in the DB cluster can be created in.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The days to retain backups for. Default `1`
	BackupRetentionPeriod *int `pulumi:"backupRetentionPeriod"`
	// The cluster identifier. If omitted, the provider will assign a random, unique identifier.
	ClusterIdentifier *string `pulumi:"clusterIdentifier"`
	// Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `clusterIdentifier`.
	ClusterIdentifierPrefix *string `pulumi:"clusterIdentifierPrefix"`
	// List of DocumentDB Instances that are a part of this cluster
	ClusterMembers []string `pulumi:"clusterMembers"`
	// The DocumentDB Cluster Resource ID
	ClusterResourceId *string `pulumi:"clusterResourceId"`
	// A cluster parameter group to associate with the cluster.
	DbClusterParameterGroupName *string `pulumi:"dbClusterParameterGroupName"`
	// A DB subnet group to associate with this DB instance.
	DbSubnetGroupName *string `pulumi:"dbSubnetGroupName"`
	// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// List of log types to export to cloudwatch. If omitted, no logs will be exported.
	// The following log types are supported: `audit`, `profiler`.
	EnabledCloudwatchLogsExports []string `pulumi:"enabledCloudwatchLogsExports"`
	// The DNS address of the DocumentDB instance
	Endpoint *string `pulumi:"endpoint"`
	// The name of the database engine to be used for this DB cluster. Defaults to `docdb`. Valid Values: `docdb`
	Engine *string `pulumi:"engine"`
	// The database engine version. Updating this argument results in an outage.
	EngineVersion *string `pulumi:"engineVersion"`
	// The name of your final DB snapshot
	// when this DB cluster is deleted. If omitted, no final snapshot will be
	// made.
	FinalSnapshotIdentifier *string `pulumi:"finalSnapshotIdentifier"`
	// The global cluster identifier specified on `docdb.GlobalCluster`.
	GlobalClusterIdentifier *string `pulumi:"globalClusterIdentifier"`
	// The Route53 Hosted Zone ID of the endpoint
	HostedZoneId *string `pulumi:"hostedZoneId"`
	// The ARN for the KMS encryption key. When specifying `kmsKeyId`, `storageEncrypted` needs to be set to true.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Password for the master DB user. Note that this may
	// show up in logs, and it will be stored in the state file. Please refer to the DocumentDB Naming Constraints.
	MasterPassword *string `pulumi:"masterPassword"`
	// Username for the master DB user.
	MasterUsername *string `pulumi:"masterUsername"`
	// The port on which the DB accepts connections
	Port *int `pulumi:"port"`
	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC
	// Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
	PreferredBackupWindow *string `pulumi:"preferredBackupWindow"`
	// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
	PreferredMaintenanceWindow *string `pulumi:"preferredMaintenanceWindow"`
	// A read-only endpoint for the DocumentDB cluster, automatically load-balanced across replicas
	ReaderEndpoint *string `pulumi:"readerEndpoint"`
	// Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from `finalSnapshotIdentifier`. Default is `false`.
	SkipFinalSnapshot *bool `pulumi:"skipFinalSnapshot"`
	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot. Automated snapshots **should not** be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
	SnapshotIdentifier *string `pulumi:"snapshotIdentifier"`
	// Specifies whether the DB cluster is encrypted. The default is `false`.
	StorageEncrypted *bool `pulumi:"storageEncrypted"`
	// A map of tags to assign to the DB cluster. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// List of VPC security groups to associate
	// with the Cluster
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
}

type ClusterState struct {
	// Specifies whether any cluster modifications
	// are applied immediately, or during the next maintenance window. Default is
	// `false`.
	ApplyImmediately pulumix.Input[*bool]
	// Amazon Resource Name (ARN) of cluster
	Arn pulumix.Input[*string]
	// A list of EC2 Availability Zones that
	// instances in the DB cluster can be created in.
	AvailabilityZones pulumix.Input[[]string]
	// The days to retain backups for. Default `1`
	BackupRetentionPeriod pulumix.Input[*int]
	// The cluster identifier. If omitted, the provider will assign a random, unique identifier.
	ClusterIdentifier pulumix.Input[*string]
	// Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `clusterIdentifier`.
	ClusterIdentifierPrefix pulumix.Input[*string]
	// List of DocumentDB Instances that are a part of this cluster
	ClusterMembers pulumix.Input[[]string]
	// The DocumentDB Cluster Resource ID
	ClusterResourceId pulumix.Input[*string]
	// A cluster parameter group to associate with the cluster.
	DbClusterParameterGroupName pulumix.Input[*string]
	// A DB subnet group to associate with this DB instance.
	DbSubnetGroupName pulumix.Input[*string]
	// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
	DeletionProtection pulumix.Input[*bool]
	// List of log types to export to cloudwatch. If omitted, no logs will be exported.
	// The following log types are supported: `audit`, `profiler`.
	EnabledCloudwatchLogsExports pulumix.Input[[]string]
	// The DNS address of the DocumentDB instance
	Endpoint pulumix.Input[*string]
	// The name of the database engine to be used for this DB cluster. Defaults to `docdb`. Valid Values: `docdb`
	Engine pulumix.Input[*string]
	// The database engine version. Updating this argument results in an outage.
	EngineVersion pulumix.Input[*string]
	// The name of your final DB snapshot
	// when this DB cluster is deleted. If omitted, no final snapshot will be
	// made.
	FinalSnapshotIdentifier pulumix.Input[*string]
	// The global cluster identifier specified on `docdb.GlobalCluster`.
	GlobalClusterIdentifier pulumix.Input[*string]
	// The Route53 Hosted Zone ID of the endpoint
	HostedZoneId pulumix.Input[*string]
	// The ARN for the KMS encryption key. When specifying `kmsKeyId`, `storageEncrypted` needs to be set to true.
	KmsKeyId pulumix.Input[*string]
	// Password for the master DB user. Note that this may
	// show up in logs, and it will be stored in the state file. Please refer to the DocumentDB Naming Constraints.
	MasterPassword pulumix.Input[*string]
	// Username for the master DB user.
	MasterUsername pulumix.Input[*string]
	// The port on which the DB accepts connections
	Port pulumix.Input[*int]
	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC
	// Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
	PreferredBackupWindow pulumix.Input[*string]
	// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
	PreferredMaintenanceWindow pulumix.Input[*string]
	// A read-only endpoint for the DocumentDB cluster, automatically load-balanced across replicas
	ReaderEndpoint pulumix.Input[*string]
	// Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from `finalSnapshotIdentifier`. Default is `false`.
	SkipFinalSnapshot pulumix.Input[*bool]
	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot. Automated snapshots **should not** be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
	SnapshotIdentifier pulumix.Input[*string]
	// Specifies whether the DB cluster is encrypted. The default is `false`.
	StorageEncrypted pulumix.Input[*bool]
	// A map of tags to assign to the DB cluster. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// List of VPC security groups to associate
	// with the Cluster
	VpcSecurityGroupIds pulumix.Input[[]string]
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Specifies whether any cluster modifications
	// are applied immediately, or during the next maintenance window. Default is
	// `false`.
	ApplyImmediately *bool `pulumi:"applyImmediately"`
	// A list of EC2 Availability Zones that
	// instances in the DB cluster can be created in.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The days to retain backups for. Default `1`
	BackupRetentionPeriod *int `pulumi:"backupRetentionPeriod"`
	// The cluster identifier. If omitted, the provider will assign a random, unique identifier.
	ClusterIdentifier *string `pulumi:"clusterIdentifier"`
	// Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `clusterIdentifier`.
	ClusterIdentifierPrefix *string `pulumi:"clusterIdentifierPrefix"`
	// List of DocumentDB Instances that are a part of this cluster
	ClusterMembers []string `pulumi:"clusterMembers"`
	// A cluster parameter group to associate with the cluster.
	DbClusterParameterGroupName *string `pulumi:"dbClusterParameterGroupName"`
	// A DB subnet group to associate with this DB instance.
	DbSubnetGroupName *string `pulumi:"dbSubnetGroupName"`
	// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// List of log types to export to cloudwatch. If omitted, no logs will be exported.
	// The following log types are supported: `audit`, `profiler`.
	EnabledCloudwatchLogsExports []string `pulumi:"enabledCloudwatchLogsExports"`
	// The name of the database engine to be used for this DB cluster. Defaults to `docdb`. Valid Values: `docdb`
	Engine *string `pulumi:"engine"`
	// The database engine version. Updating this argument results in an outage.
	EngineVersion *string `pulumi:"engineVersion"`
	// The name of your final DB snapshot
	// when this DB cluster is deleted. If omitted, no final snapshot will be
	// made.
	FinalSnapshotIdentifier *string `pulumi:"finalSnapshotIdentifier"`
	// The global cluster identifier specified on `docdb.GlobalCluster`.
	GlobalClusterIdentifier *string `pulumi:"globalClusterIdentifier"`
	// The ARN for the KMS encryption key. When specifying `kmsKeyId`, `storageEncrypted` needs to be set to true.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Password for the master DB user. Note that this may
	// show up in logs, and it will be stored in the state file. Please refer to the DocumentDB Naming Constraints.
	MasterPassword *string `pulumi:"masterPassword"`
	// Username for the master DB user.
	MasterUsername *string `pulumi:"masterUsername"`
	// The port on which the DB accepts connections
	Port *int `pulumi:"port"`
	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC
	// Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
	PreferredBackupWindow *string `pulumi:"preferredBackupWindow"`
	// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
	PreferredMaintenanceWindow *string `pulumi:"preferredMaintenanceWindow"`
	// Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from `finalSnapshotIdentifier`. Default is `false`.
	SkipFinalSnapshot *bool `pulumi:"skipFinalSnapshot"`
	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot. Automated snapshots **should not** be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
	SnapshotIdentifier *string `pulumi:"snapshotIdentifier"`
	// Specifies whether the DB cluster is encrypted. The default is `false`.
	StorageEncrypted *bool `pulumi:"storageEncrypted"`
	// A map of tags to assign to the DB cluster. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// List of VPC security groups to associate
	// with the Cluster
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Specifies whether any cluster modifications
	// are applied immediately, or during the next maintenance window. Default is
	// `false`.
	ApplyImmediately pulumix.Input[*bool]
	// A list of EC2 Availability Zones that
	// instances in the DB cluster can be created in.
	AvailabilityZones pulumix.Input[[]string]
	// The days to retain backups for. Default `1`
	BackupRetentionPeriod pulumix.Input[*int]
	// The cluster identifier. If omitted, the provider will assign a random, unique identifier.
	ClusterIdentifier pulumix.Input[*string]
	// Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `clusterIdentifier`.
	ClusterIdentifierPrefix pulumix.Input[*string]
	// List of DocumentDB Instances that are a part of this cluster
	ClusterMembers pulumix.Input[[]string]
	// A cluster parameter group to associate with the cluster.
	DbClusterParameterGroupName pulumix.Input[*string]
	// A DB subnet group to associate with this DB instance.
	DbSubnetGroupName pulumix.Input[*string]
	// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
	DeletionProtection pulumix.Input[*bool]
	// List of log types to export to cloudwatch. If omitted, no logs will be exported.
	// The following log types are supported: `audit`, `profiler`.
	EnabledCloudwatchLogsExports pulumix.Input[[]string]
	// The name of the database engine to be used for this DB cluster. Defaults to `docdb`. Valid Values: `docdb`
	Engine pulumix.Input[*string]
	// The database engine version. Updating this argument results in an outage.
	EngineVersion pulumix.Input[*string]
	// The name of your final DB snapshot
	// when this DB cluster is deleted. If omitted, no final snapshot will be
	// made.
	FinalSnapshotIdentifier pulumix.Input[*string]
	// The global cluster identifier specified on `docdb.GlobalCluster`.
	GlobalClusterIdentifier pulumix.Input[*string]
	// The ARN for the KMS encryption key. When specifying `kmsKeyId`, `storageEncrypted` needs to be set to true.
	KmsKeyId pulumix.Input[*string]
	// Password for the master DB user. Note that this may
	// show up in logs, and it will be stored in the state file. Please refer to the DocumentDB Naming Constraints.
	MasterPassword pulumix.Input[*string]
	// Username for the master DB user.
	MasterUsername pulumix.Input[*string]
	// The port on which the DB accepts connections
	Port pulumix.Input[*int]
	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC
	// Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
	PreferredBackupWindow pulumix.Input[*string]
	// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
	PreferredMaintenanceWindow pulumix.Input[*string]
	// Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from `finalSnapshotIdentifier`. Default is `false`.
	SkipFinalSnapshot pulumix.Input[*bool]
	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot. Automated snapshots **should not** be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
	SnapshotIdentifier pulumix.Input[*string]
	// Specifies whether the DB cluster is encrypted. The default is `false`.
	StorageEncrypted pulumix.Input[*bool]
	// A map of tags to assign to the DB cluster. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// List of VPC security groups to associate
	// with the Cluster
	VpcSecurityGroupIds pulumix.Input[[]string]
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) ToOutput(ctx context.Context) pulumix.Output[Cluster] {
	return pulumix.Output[Cluster]{
		OutputState: o.OutputState,
	}
}

// Specifies whether any cluster modifications
// are applied immediately, or during the next maintenance window. Default is
// `false`.
func (o ClusterOutput) ApplyImmediately() pulumix.Output[bool] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[bool] { return v.ApplyImmediately })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Amazon Resource Name (ARN) of cluster
func (o ClusterOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of EC2 Availability Zones that
// instances in the DB cluster can be created in.
func (o ClusterOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.ArrayOutput[string] { return v.AvailabilityZones })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The days to retain backups for. Default `1`
func (o ClusterOutput) BackupRetentionPeriod() pulumix.Output[*int] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*int] { return v.BackupRetentionPeriod })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The cluster identifier. If omitted, the provider will assign a random, unique identifier.
func (o ClusterOutput) ClusterIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.ClusterIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `clusterIdentifier`.
func (o ClusterOutput) ClusterIdentifierPrefix() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.ClusterIdentifierPrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of DocumentDB Instances that are a part of this cluster
func (o ClusterOutput) ClusterMembers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.ArrayOutput[string] { return v.ClusterMembers })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The DocumentDB Cluster Resource ID
func (o ClusterOutput) ClusterResourceId() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.ClusterResourceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A cluster parameter group to associate with the cluster.
func (o ClusterOutput) DbClusterParameterGroupName() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.DbClusterParameterGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A DB subnet group to associate with this DB instance.
func (o ClusterOutput) DbSubnetGroupName() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.DbSubnetGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
func (o ClusterOutput) DeletionProtection() pulumix.Output[*bool] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*bool] { return v.DeletionProtection })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// List of log types to export to cloudwatch. If omitted, no logs will be exported.
// The following log types are supported: `audit`, `profiler`.
func (o ClusterOutput) EnabledCloudwatchLogsExports() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.ArrayOutput[string] { return v.EnabledCloudwatchLogsExports })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The DNS address of the DocumentDB instance
func (o ClusterOutput) Endpoint() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.Endpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the database engine to be used for this DB cluster. Defaults to `docdb`. Valid Values: `docdb`
func (o ClusterOutput) Engine() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.Engine })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The database engine version. Updating this argument results in an outage.
func (o ClusterOutput) EngineVersion() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.EngineVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of your final DB snapshot
// when this DB cluster is deleted. If omitted, no final snapshot will be
// made.
func (o ClusterOutput) FinalSnapshotIdentifier() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.FinalSnapshotIdentifier })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The global cluster identifier specified on `docdb.GlobalCluster`.
func (o ClusterOutput) GlobalClusterIdentifier() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.GlobalClusterIdentifier })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Route53 Hosted Zone ID of the endpoint
func (o ClusterOutput) HostedZoneId() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.HostedZoneId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN for the KMS encryption key. When specifying `kmsKeyId`, `storageEncrypted` needs to be set to true.
func (o ClusterOutput) KmsKeyId() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.KmsKeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Password for the master DB user. Note that this may
// show up in logs, and it will be stored in the state file. Please refer to the DocumentDB Naming Constraints.
func (o ClusterOutput) MasterPassword() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.MasterPassword })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Username for the master DB user.
func (o ClusterOutput) MasterUsername() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.MasterUsername })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The port on which the DB accepts connections
func (o ClusterOutput) Port() pulumix.Output[*int] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*int] { return v.Port })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC
// Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
func (o ClusterOutput) PreferredBackupWindow() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.PreferredBackupWindow })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
func (o ClusterOutput) PreferredMaintenanceWindow() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.PreferredMaintenanceWindow })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A read-only endpoint for the DocumentDB cluster, automatically load-balanced across replicas
func (o ClusterOutput) ReaderEndpoint() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.ReaderEndpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from `finalSnapshotIdentifier`. Default is `false`.
func (o ClusterOutput) SkipFinalSnapshot() pulumix.Output[*bool] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*bool] { return v.SkipFinalSnapshot })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot. Automated snapshots **should not** be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
func (o ClusterOutput) SnapshotIdentifier() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.SnapshotIdentifier })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Specifies whether the DB cluster is encrypted. The default is `false`.
func (o ClusterOutput) StorageEncrypted() pulumix.Output[*bool] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*bool] { return v.StorageEncrypted })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A map of tags to assign to the DB cluster. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ClusterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ClusterOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// List of VPC security groups to associate
// with the Cluster
func (o ClusterOutput) VpcSecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.ArrayOutput[string] { return v.VpcSecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ClusterOutput{})
}
