// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scheduler

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an EventBridge Scheduler Schedule resource.
//
// You can find out more about EventBridge Scheduler in the [User Guide](https://docs.aws.amazon.com/scheduler/latest/UserGuide/what-is-scheduler.html).
//
// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
type Schedule struct {
	pulumi.CustomResourceState

	// ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a [Service ARN specific to the target service](https://docs.aws.amazon.com/scheduler/latest/UserGuide/managing-targets-universal.html#supported-universal-targets).
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Brief description of the schedule.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the end date you specify. EventBridge Scheduler ignores the end date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	EndDate pulumix.Output[*string] `pulumi:"endDate"`
	// Configures a time window during which EventBridge Scheduler invokes the schedule. Detailed below.
	FlexibleTimeWindow pulumix.GPtrOutput[ScheduleFlexibleTimeWindow, ScheduleFlexibleTimeWindowOutput] `pulumi:"flexibleTimeWindow"`
	// Name of the schedule group to associate with this schedule. When omitted, the `default` schedule group is used.
	GroupName pulumix.Output[string] `pulumi:"groupName"`
	// ARN for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.
	KmsKeyArn pulumix.Output[*string] `pulumi:"kmsKeyArn"`
	// Name of the schedule. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[string] `pulumi:"namePrefix"`
	// Defines when the schedule runs. Read more in [Schedule types on EventBridge Scheduler](https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html).
	ScheduleExpression pulumix.Output[string] `pulumi:"scheduleExpression"`
	// Timezone in which the scheduling expression is evaluated. Defaults to `UTC`. Example: `Australia/Sydney`.
	ScheduleExpressionTimezone pulumix.Output[*string] `pulumi:"scheduleExpressionTimezone"`
	// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the start date you specify. EventBridge Scheduler ignores the start date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	StartDate pulumix.Output[*string] `pulumi:"startDate"`
	// Specifies whether the schedule is enabled or disabled. One of: `ENABLED` (default), `DISABLED`.
	State pulumix.Output[*string] `pulumi:"state"`
	// Configures the target of the schedule. Detailed below.
	//
	// The following arguments are optional:
	Target pulumix.GPtrOutput[ScheduleTarget, ScheduleTargetOutput] `pulumi:"target"`
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOption) (*Schedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FlexibleTimeWindow == nil {
		return nil, errors.New("invalid value for required argument 'FlexibleTimeWindow'")
	}
	if args.ScheduleExpression == nil {
		return nil, errors.New("invalid value for required argument 'ScheduleExpression'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Schedule
	err := ctx.RegisterResource("aws:scheduler/schedule:Schedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleState, opts ...pulumi.ResourceOption) (*Schedule, error) {
	var resource Schedule
	err := ctx.ReadResource("aws:scheduler/schedule:Schedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schedule resources.
type scheduleState struct {
	// ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a [Service ARN specific to the target service](https://docs.aws.amazon.com/scheduler/latest/UserGuide/managing-targets-universal.html#supported-universal-targets).
	Arn *string `pulumi:"arn"`
	// Brief description of the schedule.
	Description *string `pulumi:"description"`
	// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the end date you specify. EventBridge Scheduler ignores the end date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	EndDate *string `pulumi:"endDate"`
	// Configures a time window during which EventBridge Scheduler invokes the schedule. Detailed below.
	FlexibleTimeWindow *ScheduleFlexibleTimeWindow `pulumi:"flexibleTimeWindow"`
	// Name of the schedule group to associate with this schedule. When omitted, the `default` schedule group is used.
	GroupName *string `pulumi:"groupName"`
	// ARN for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Name of the schedule. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Defines when the schedule runs. Read more in [Schedule types on EventBridge Scheduler](https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html).
	ScheduleExpression *string `pulumi:"scheduleExpression"`
	// Timezone in which the scheduling expression is evaluated. Defaults to `UTC`. Example: `Australia/Sydney`.
	ScheduleExpressionTimezone *string `pulumi:"scheduleExpressionTimezone"`
	// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the start date you specify. EventBridge Scheduler ignores the start date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	StartDate *string `pulumi:"startDate"`
	// Specifies whether the schedule is enabled or disabled. One of: `ENABLED` (default), `DISABLED`.
	State *string `pulumi:"state"`
	// Configures the target of the schedule. Detailed below.
	//
	// The following arguments are optional:
	Target *ScheduleTarget `pulumi:"target"`
}

type ScheduleState struct {
	// ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a [Service ARN specific to the target service](https://docs.aws.amazon.com/scheduler/latest/UserGuide/managing-targets-universal.html#supported-universal-targets).
	Arn pulumix.Input[*string]
	// Brief description of the schedule.
	Description pulumix.Input[*string]
	// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the end date you specify. EventBridge Scheduler ignores the end date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	EndDate pulumix.Input[*string]
	// Configures a time window during which EventBridge Scheduler invokes the schedule. Detailed below.
	FlexibleTimeWindow pulumix.Input[*ScheduleFlexibleTimeWindowArgs]
	// Name of the schedule group to associate with this schedule. When omitted, the `default` schedule group is used.
	GroupName pulumix.Input[*string]
	// ARN for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.
	KmsKeyArn pulumix.Input[*string]
	// Name of the schedule. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// Defines when the schedule runs. Read more in [Schedule types on EventBridge Scheduler](https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html).
	ScheduleExpression pulumix.Input[*string]
	// Timezone in which the scheduling expression is evaluated. Defaults to `UTC`. Example: `Australia/Sydney`.
	ScheduleExpressionTimezone pulumix.Input[*string]
	// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the start date you specify. EventBridge Scheduler ignores the start date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	StartDate pulumix.Input[*string]
	// Specifies whether the schedule is enabled or disabled. One of: `ENABLED` (default), `DISABLED`.
	State pulumix.Input[*string]
	// Configures the target of the schedule. Detailed below.
	//
	// The following arguments are optional:
	Target pulumix.Input[*ScheduleTargetArgs]
}

func (ScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleState)(nil)).Elem()
}

type scheduleArgs struct {
	// Brief description of the schedule.
	Description *string `pulumi:"description"`
	// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the end date you specify. EventBridge Scheduler ignores the end date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	EndDate *string `pulumi:"endDate"`
	// Configures a time window during which EventBridge Scheduler invokes the schedule. Detailed below.
	FlexibleTimeWindow ScheduleFlexibleTimeWindow `pulumi:"flexibleTimeWindow"`
	// Name of the schedule group to associate with this schedule. When omitted, the `default` schedule group is used.
	GroupName *string `pulumi:"groupName"`
	// ARN for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Name of the schedule. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Defines when the schedule runs. Read more in [Schedule types on EventBridge Scheduler](https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html).
	ScheduleExpression string `pulumi:"scheduleExpression"`
	// Timezone in which the scheduling expression is evaluated. Defaults to `UTC`. Example: `Australia/Sydney`.
	ScheduleExpressionTimezone *string `pulumi:"scheduleExpressionTimezone"`
	// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the start date you specify. EventBridge Scheduler ignores the start date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	StartDate *string `pulumi:"startDate"`
	// Specifies whether the schedule is enabled or disabled. One of: `ENABLED` (default), `DISABLED`.
	State *string `pulumi:"state"`
	// Configures the target of the schedule. Detailed below.
	//
	// The following arguments are optional:
	Target ScheduleTarget `pulumi:"target"`
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	// Brief description of the schedule.
	Description pulumix.Input[*string]
	// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the end date you specify. EventBridge Scheduler ignores the end date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	EndDate pulumix.Input[*string]
	// Configures a time window during which EventBridge Scheduler invokes the schedule. Detailed below.
	FlexibleTimeWindow pulumix.Input[*ScheduleFlexibleTimeWindowArgs]
	// Name of the schedule group to associate with this schedule. When omitted, the `default` schedule group is used.
	GroupName pulumix.Input[*string]
	// ARN for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.
	KmsKeyArn pulumix.Input[*string]
	// Name of the schedule. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// Defines when the schedule runs. Read more in [Schedule types on EventBridge Scheduler](https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html).
	ScheduleExpression pulumix.Input[string]
	// Timezone in which the scheduling expression is evaluated. Defaults to `UTC`. Example: `Australia/Sydney`.
	ScheduleExpressionTimezone pulumix.Input[*string]
	// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the start date you specify. EventBridge Scheduler ignores the start date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	StartDate pulumix.Input[*string]
	// Specifies whether the schedule is enabled or disabled. One of: `ENABLED` (default), `DISABLED`.
	State pulumix.Input[*string]
	// Configures the target of the schedule. Detailed below.
	//
	// The following arguments are optional:
	Target pulumix.Input[*ScheduleTargetArgs]
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleArgs)(nil)).Elem()
}

type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[Schedule] {
	return pulumix.Output[Schedule]{
		OutputState: o.OutputState,
	}
}

// ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a [Service ARN specific to the target service](https://docs.aws.amazon.com/scheduler/latest/UserGuide/managing-targets-universal.html#supported-universal-targets).
func (o ScheduleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Brief description of the schedule.
func (o ScheduleOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the end date you specify. EventBridge Scheduler ignores the end date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
func (o ScheduleOutput) EndDate() pulumix.Output[*string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[*string] { return v.EndDate })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Configures a time window during which EventBridge Scheduler invokes the schedule. Detailed below.
func (o ScheduleOutput) FlexibleTimeWindow() pulumix.GPtrOutput[ScheduleFlexibleTimeWindow, ScheduleFlexibleTimeWindowOutput] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.GPtrOutput[ScheduleFlexibleTimeWindow, ScheduleFlexibleTimeWindowOutput] {
		return v.FlexibleTimeWindow
	})
	unwrapped := pulumix.Flatten[*ScheduleFlexibleTimeWindow, pulumix.GPtrOutput[ScheduleFlexibleTimeWindow, ScheduleFlexibleTimeWindowOutput]](value)
	return pulumix.GPtrOutput[ScheduleFlexibleTimeWindow, ScheduleFlexibleTimeWindowOutput]{OutputState: unwrapped.OutputState}
}

// Name of the schedule group to associate with this schedule. When omitted, the `default` schedule group is used.
func (o ScheduleOutput) GroupName() pulumix.Output[string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[string] { return v.GroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.
func (o ScheduleOutput) KmsKeyArn() pulumix.Output[*string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[*string] { return v.KmsKeyArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the schedule. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o ScheduleOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o ScheduleOutput) NamePrefix() pulumix.Output[string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[string] { return v.NamePrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Defines when the schedule runs. Read more in [Schedule types on EventBridge Scheduler](https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html).
func (o ScheduleOutput) ScheduleExpression() pulumix.Output[string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[string] { return v.ScheduleExpression })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Timezone in which the scheduling expression is evaluated. Defaults to `UTC`. Example: `Australia/Sydney`.
func (o ScheduleOutput) ScheduleExpressionTimezone() pulumix.Output[*string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[*string] { return v.ScheduleExpressionTimezone })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the start date you specify. EventBridge Scheduler ignores the start date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
func (o ScheduleOutput) StartDate() pulumix.Output[*string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[*string] { return v.StartDate })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Specifies whether the schedule is enabled or disabled. One of: `ENABLED` (default), `DISABLED`.
func (o ScheduleOutput) State() pulumix.Output[*string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[*string] { return v.State })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Configures the target of the schedule. Detailed below.
//
// The following arguments are optional:
func (o ScheduleOutput) Target() pulumix.GPtrOutput[ScheduleTarget, ScheduleTargetOutput] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.GPtrOutput[ScheduleTarget, ScheduleTargetOutput] { return v.Target })
	unwrapped := pulumix.Flatten[*ScheduleTarget, pulumix.GPtrOutput[ScheduleTarget, ScheduleTargetOutput]](value)
	return pulumix.GPtrOutput[ScheduleTarget, ScheduleTargetOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ScheduleOutput{})
}
