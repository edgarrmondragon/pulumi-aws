// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get a list of Cognito user pools clients for a Cognito IdP user pool.
func GetUserPoolClients(ctx *pulumi.Context, args *GetUserPoolClientsArgs, opts ...pulumi.InvokeOption) (*GetUserPoolClientsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUserPoolClientsResult
	err := ctx.Invoke("aws:cognito/getUserPoolClients:getUserPoolClients", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserPoolClients.
type GetUserPoolClientsArgs struct {
	// Cognito user pool ID.
	UserPoolId string `pulumi:"userPoolId"`
}

// A collection of values returned by getUserPoolClients.
type GetUserPoolClientsResult struct {
	// List of Cognito user pool client IDs.
	ClientIds []string `pulumi:"clientIds"`
	// List of Cognito user pool client names.
	ClientNames []string `pulumi:"clientNames"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	UserPoolId string `pulumi:"userPoolId"`
}

func GetUserPoolClientsOutput(ctx *pulumi.Context, args GetUserPoolClientsOutputArgs, opts ...pulumi.InvokeOption) GetUserPoolClientsResultOutput {
	outputResult := pulumix.ApplyErr[*GetUserPoolClientsArgs](args.ToOutput(), func(plainArgs *GetUserPoolClientsArgs) (*GetUserPoolClientsResult, error) {
		return GetUserPoolClients(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetUserPoolClientsResultOutput, *GetUserPoolClientsResult](outputResult)
}

// A collection of arguments for invoking getUserPoolClients.
type GetUserPoolClientsOutputArgs struct {
	// Cognito user pool ID.
	UserPoolId pulumix.Input[string] `pulumi:"userPoolId"`
}

func (args GetUserPoolClientsOutputArgs) ToOutput() pulumix.Output[*GetUserPoolClientsArgs] {
	allArgs := pulumix.All(
		args.UserPoolId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetUserPoolClientsArgs {
		return &GetUserPoolClientsArgs{
			UserPoolId: resolvedArgs[0].(string),
		}
	})
}

type GetUserPoolClientsResultOutput struct{ *pulumi.OutputState }

func (GetUserPoolClientsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPoolClientsResult)(nil)).Elem()
}

func (o GetUserPoolClientsResultOutput) ToOutput(context.Context) pulumix.Output[*GetUserPoolClientsResult] {
	return pulumix.Output[*GetUserPoolClientsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetUserPoolClientsResultOutput) ClientIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetUserPoolClientsResult](o, func(v *GetUserPoolClientsResult) []string { return v.ClientIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetUserPoolClientsResultOutput) ClientNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetUserPoolClientsResult](o, func(v *GetUserPoolClientsResult) []string { return v.ClientNames })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetUserPoolClientsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetUserPoolClientsResult](o, func(v *GetUserPoolClientsResult) string { return v.Id })
}

func (o GetUserPoolClientsResultOutput) UserPoolId() pulumix.Output[string] {
	return pulumix.Apply[*GetUserPoolClientsResult](o, func(v *GetUserPoolClientsResult) string { return v.UserPoolId })
}
