// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Amazon Lex Intent resource. For more information see
// [Amazon Lex: How It Works](https://docs.aws.amazon.com/lex/latest/dg/how-it-works.html)
type Intent struct {
	pulumi.CustomResourceState

	// The ARN of the Lex intent.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Checksum identifying the version of the intent that was created. The checksum is not
	// included as an argument because the resource will add it automatically when updating the intent.
	Checksum pulumix.Output[string] `pulumi:"checksum"`
	// The statement that you want Amazon Lex to convey to the user
	// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
	// you provide a Lambda function in the `fulfillmentActivity`. If you return the intent to the client
	// application, you can't specify this element. The `followUpPrompt` and `conclusionStatement` are
	// mutually exclusive. You can specify only one. Attributes are documented under statement.
	ConclusionStatement pulumix.GPtrOutput[IntentConclusionStatement, IntentConclusionStatementOutput] `pulumi:"conclusionStatement"`
	// Prompts the user to confirm the intent. This question should
	// have a yes or no answer. You you must provide both the `rejectionStatement` and `confirmationPrompt`,
	// or neither. Attributes are documented under prompt.
	ConfirmationPrompt pulumix.GPtrOutput[IntentConfirmationPrompt, IntentConfirmationPromptOutput] `pulumi:"confirmationPrompt"`
	// Determines if a new slot type version is created when the initial
	// resource is created and on each update. Defaults to `false`.
	CreateVersion pulumix.Output[*bool] `pulumi:"createVersion"`
	// The date when the intent version was created.
	CreatedDate pulumix.Output[string] `pulumi:"createdDate"`
	// A description of the intent. Must be less than or equal to 200 characters in length.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Specifies a Lambda function to invoke for each user input. You can
	// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
	DialogCodeHook pulumix.GPtrOutput[IntentDialogCodeHook, IntentDialogCodeHookOutput] `pulumi:"dialogCodeHook"`
	// Amazon Lex uses this prompt to solicit additional activity after
	// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
	// user to order a drink. The `followUpPrompt` field and the `conclusionStatement` field are mutually
	// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
	FollowUpPrompt pulumix.GPtrOutput[IntentFollowUpPrompt, IntentFollowUpPromptOutput] `pulumi:"followUpPrompt"`
	// Describes how the intent is fulfilled. For example, after a
	// user provides all of the information for a pizza order, `fulfillmentActivity` defines how the bot
	// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
	FulfillmentActivity pulumix.GPtrOutput[IntentFulfillmentActivity, IntentFulfillmentActivityOutput] `pulumi:"fulfillmentActivity"`
	// The date when the $LATEST version of this intent was updated.
	LastUpdatedDate pulumix.Output[string] `pulumi:"lastUpdatedDate"`
	// The name of the intent, not case sensitive. Must be less than or equal to 100 characters in length.
	Name pulumix.Output[string] `pulumi:"name"`
	// A unique identifier for the built-in intent to base this
	// intent on. To find the signature for an intent, see
	// [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
	// in the Alexa Skills Kit.
	ParentIntentSignature pulumix.Output[*string] `pulumi:"parentIntentSignature"`
	// When the user answers "no" to the question defined in
	// `confirmationPrompt`, Amazon Lex responds with this statement to acknowledge that the intent was
	// canceled. You must provide both the `rejectionStatement` and the `confirmationPrompt`, or neither.
	// Attributes are documented under statement.
	RejectionStatement pulumix.GPtrOutput[IntentRejectionStatement, IntentRejectionStatementOutput] `pulumi:"rejectionStatement"`
	// An array of utterances (strings) that a user might say to signal
	// the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity} {PizzaSize} pizzas".
	// In each utterance, a slot name is enclosed in curly braces. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
	SampleUtterances pulumix.ArrayOutput[string] `pulumi:"sampleUtterances"`
	// An list of intent slots. At runtime, Amazon Lex elicits required slot values
	// from the user using prompts defined in the slots. Attributes are documented under slot.
	Slots pulumix.GArrayOutput[IntentSlot, IntentSlotOutput] `pulumi:"slots"`
	// The version of the bot.
	Version pulumix.Output[string] `pulumi:"version"`
}

// NewIntent registers a new resource with the given unique name, arguments, and options.
func NewIntent(ctx *pulumi.Context,
	name string, args *IntentArgs, opts ...pulumi.ResourceOption) (*Intent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FulfillmentActivity == nil {
		return nil, errors.New("invalid value for required argument 'FulfillmentActivity'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Intent
	err := ctx.RegisterResource("aws:lex/intent:Intent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntent gets an existing Intent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntentState, opts ...pulumi.ResourceOption) (*Intent, error) {
	var resource Intent
	err := ctx.ReadResource("aws:lex/intent:Intent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Intent resources.
type intentState struct {
	// The ARN of the Lex intent.
	Arn *string `pulumi:"arn"`
	// Checksum identifying the version of the intent that was created. The checksum is not
	// included as an argument because the resource will add it automatically when updating the intent.
	Checksum *string `pulumi:"checksum"`
	// The statement that you want Amazon Lex to convey to the user
	// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
	// you provide a Lambda function in the `fulfillmentActivity`. If you return the intent to the client
	// application, you can't specify this element. The `followUpPrompt` and `conclusionStatement` are
	// mutually exclusive. You can specify only one. Attributes are documented under statement.
	ConclusionStatement *IntentConclusionStatement `pulumi:"conclusionStatement"`
	// Prompts the user to confirm the intent. This question should
	// have a yes or no answer. You you must provide both the `rejectionStatement` and `confirmationPrompt`,
	// or neither. Attributes are documented under prompt.
	ConfirmationPrompt *IntentConfirmationPrompt `pulumi:"confirmationPrompt"`
	// Determines if a new slot type version is created when the initial
	// resource is created and on each update. Defaults to `false`.
	CreateVersion *bool `pulumi:"createVersion"`
	// The date when the intent version was created.
	CreatedDate *string `pulumi:"createdDate"`
	// A description of the intent. Must be less than or equal to 200 characters in length.
	Description *string `pulumi:"description"`
	// Specifies a Lambda function to invoke for each user input. You can
	// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
	DialogCodeHook *IntentDialogCodeHook `pulumi:"dialogCodeHook"`
	// Amazon Lex uses this prompt to solicit additional activity after
	// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
	// user to order a drink. The `followUpPrompt` field and the `conclusionStatement` field are mutually
	// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
	FollowUpPrompt *IntentFollowUpPrompt `pulumi:"followUpPrompt"`
	// Describes how the intent is fulfilled. For example, after a
	// user provides all of the information for a pizza order, `fulfillmentActivity` defines how the bot
	// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
	FulfillmentActivity *IntentFulfillmentActivity `pulumi:"fulfillmentActivity"`
	// The date when the $LATEST version of this intent was updated.
	LastUpdatedDate *string `pulumi:"lastUpdatedDate"`
	// The name of the intent, not case sensitive. Must be less than or equal to 100 characters in length.
	Name *string `pulumi:"name"`
	// A unique identifier for the built-in intent to base this
	// intent on. To find the signature for an intent, see
	// [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
	// in the Alexa Skills Kit.
	ParentIntentSignature *string `pulumi:"parentIntentSignature"`
	// When the user answers "no" to the question defined in
	// `confirmationPrompt`, Amazon Lex responds with this statement to acknowledge that the intent was
	// canceled. You must provide both the `rejectionStatement` and the `confirmationPrompt`, or neither.
	// Attributes are documented under statement.
	RejectionStatement *IntentRejectionStatement `pulumi:"rejectionStatement"`
	// An array of utterances (strings) that a user might say to signal
	// the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity} {PizzaSize} pizzas".
	// In each utterance, a slot name is enclosed in curly braces. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
	SampleUtterances []string `pulumi:"sampleUtterances"`
	// An list of intent slots. At runtime, Amazon Lex elicits required slot values
	// from the user using prompts defined in the slots. Attributes are documented under slot.
	Slots []IntentSlot `pulumi:"slots"`
	// The version of the bot.
	Version *string `pulumi:"version"`
}

type IntentState struct {
	// The ARN of the Lex intent.
	Arn pulumix.Input[*string]
	// Checksum identifying the version of the intent that was created. The checksum is not
	// included as an argument because the resource will add it automatically when updating the intent.
	Checksum pulumix.Input[*string]
	// The statement that you want Amazon Lex to convey to the user
	// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
	// you provide a Lambda function in the `fulfillmentActivity`. If you return the intent to the client
	// application, you can't specify this element. The `followUpPrompt` and `conclusionStatement` are
	// mutually exclusive. You can specify only one. Attributes are documented under statement.
	ConclusionStatement pulumix.Input[*IntentConclusionStatementArgs]
	// Prompts the user to confirm the intent. This question should
	// have a yes or no answer. You you must provide both the `rejectionStatement` and `confirmationPrompt`,
	// or neither. Attributes are documented under prompt.
	ConfirmationPrompt pulumix.Input[*IntentConfirmationPromptArgs]
	// Determines if a new slot type version is created when the initial
	// resource is created and on each update. Defaults to `false`.
	CreateVersion pulumix.Input[*bool]
	// The date when the intent version was created.
	CreatedDate pulumix.Input[*string]
	// A description of the intent. Must be less than or equal to 200 characters in length.
	Description pulumix.Input[*string]
	// Specifies a Lambda function to invoke for each user input. You can
	// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
	DialogCodeHook pulumix.Input[*IntentDialogCodeHookArgs]
	// Amazon Lex uses this prompt to solicit additional activity after
	// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
	// user to order a drink. The `followUpPrompt` field and the `conclusionStatement` field are mutually
	// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
	FollowUpPrompt pulumix.Input[*IntentFollowUpPromptArgs]
	// Describes how the intent is fulfilled. For example, after a
	// user provides all of the information for a pizza order, `fulfillmentActivity` defines how the bot
	// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
	FulfillmentActivity pulumix.Input[*IntentFulfillmentActivityArgs]
	// The date when the $LATEST version of this intent was updated.
	LastUpdatedDate pulumix.Input[*string]
	// The name of the intent, not case sensitive. Must be less than or equal to 100 characters in length.
	Name pulumix.Input[*string]
	// A unique identifier for the built-in intent to base this
	// intent on. To find the signature for an intent, see
	// [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
	// in the Alexa Skills Kit.
	ParentIntentSignature pulumix.Input[*string]
	// When the user answers "no" to the question defined in
	// `confirmationPrompt`, Amazon Lex responds with this statement to acknowledge that the intent was
	// canceled. You must provide both the `rejectionStatement` and the `confirmationPrompt`, or neither.
	// Attributes are documented under statement.
	RejectionStatement pulumix.Input[*IntentRejectionStatementArgs]
	// An array of utterances (strings) that a user might say to signal
	// the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity} {PizzaSize} pizzas".
	// In each utterance, a slot name is enclosed in curly braces. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
	SampleUtterances pulumix.Input[[]string]
	// An list of intent slots. At runtime, Amazon Lex elicits required slot values
	// from the user using prompts defined in the slots. Attributes are documented under slot.
	Slots pulumix.Input[[]*IntentSlotArgs]
	// The version of the bot.
	Version pulumix.Input[*string]
}

func (IntentState) ElementType() reflect.Type {
	return reflect.TypeOf((*intentState)(nil)).Elem()
}

type intentArgs struct {
	// The statement that you want Amazon Lex to convey to the user
	// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
	// you provide a Lambda function in the `fulfillmentActivity`. If you return the intent to the client
	// application, you can't specify this element. The `followUpPrompt` and `conclusionStatement` are
	// mutually exclusive. You can specify only one. Attributes are documented under statement.
	ConclusionStatement *IntentConclusionStatement `pulumi:"conclusionStatement"`
	// Prompts the user to confirm the intent. This question should
	// have a yes or no answer. You you must provide both the `rejectionStatement` and `confirmationPrompt`,
	// or neither. Attributes are documented under prompt.
	ConfirmationPrompt *IntentConfirmationPrompt `pulumi:"confirmationPrompt"`
	// Determines if a new slot type version is created when the initial
	// resource is created and on each update. Defaults to `false`.
	CreateVersion *bool `pulumi:"createVersion"`
	// A description of the intent. Must be less than or equal to 200 characters in length.
	Description *string `pulumi:"description"`
	// Specifies a Lambda function to invoke for each user input. You can
	// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
	DialogCodeHook *IntentDialogCodeHook `pulumi:"dialogCodeHook"`
	// Amazon Lex uses this prompt to solicit additional activity after
	// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
	// user to order a drink. The `followUpPrompt` field and the `conclusionStatement` field are mutually
	// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
	FollowUpPrompt *IntentFollowUpPrompt `pulumi:"followUpPrompt"`
	// Describes how the intent is fulfilled. For example, after a
	// user provides all of the information for a pizza order, `fulfillmentActivity` defines how the bot
	// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
	FulfillmentActivity IntentFulfillmentActivity `pulumi:"fulfillmentActivity"`
	// The name of the intent, not case sensitive. Must be less than or equal to 100 characters in length.
	Name *string `pulumi:"name"`
	// A unique identifier for the built-in intent to base this
	// intent on. To find the signature for an intent, see
	// [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
	// in the Alexa Skills Kit.
	ParentIntentSignature *string `pulumi:"parentIntentSignature"`
	// When the user answers "no" to the question defined in
	// `confirmationPrompt`, Amazon Lex responds with this statement to acknowledge that the intent was
	// canceled. You must provide both the `rejectionStatement` and the `confirmationPrompt`, or neither.
	// Attributes are documented under statement.
	RejectionStatement *IntentRejectionStatement `pulumi:"rejectionStatement"`
	// An array of utterances (strings) that a user might say to signal
	// the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity} {PizzaSize} pizzas".
	// In each utterance, a slot name is enclosed in curly braces. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
	SampleUtterances []string `pulumi:"sampleUtterances"`
	// An list of intent slots. At runtime, Amazon Lex elicits required slot values
	// from the user using prompts defined in the slots. Attributes are documented under slot.
	Slots []IntentSlot `pulumi:"slots"`
}

// The set of arguments for constructing a Intent resource.
type IntentArgs struct {
	// The statement that you want Amazon Lex to convey to the user
	// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
	// you provide a Lambda function in the `fulfillmentActivity`. If you return the intent to the client
	// application, you can't specify this element. The `followUpPrompt` and `conclusionStatement` are
	// mutually exclusive. You can specify only one. Attributes are documented under statement.
	ConclusionStatement pulumix.Input[*IntentConclusionStatementArgs]
	// Prompts the user to confirm the intent. This question should
	// have a yes or no answer. You you must provide both the `rejectionStatement` and `confirmationPrompt`,
	// or neither. Attributes are documented under prompt.
	ConfirmationPrompt pulumix.Input[*IntentConfirmationPromptArgs]
	// Determines if a new slot type version is created when the initial
	// resource is created and on each update. Defaults to `false`.
	CreateVersion pulumix.Input[*bool]
	// A description of the intent. Must be less than or equal to 200 characters in length.
	Description pulumix.Input[*string]
	// Specifies a Lambda function to invoke for each user input. You can
	// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
	DialogCodeHook pulumix.Input[*IntentDialogCodeHookArgs]
	// Amazon Lex uses this prompt to solicit additional activity after
	// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
	// user to order a drink. The `followUpPrompt` field and the `conclusionStatement` field are mutually
	// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
	FollowUpPrompt pulumix.Input[*IntentFollowUpPromptArgs]
	// Describes how the intent is fulfilled. For example, after a
	// user provides all of the information for a pizza order, `fulfillmentActivity` defines how the bot
	// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
	FulfillmentActivity pulumix.Input[*IntentFulfillmentActivityArgs]
	// The name of the intent, not case sensitive. Must be less than or equal to 100 characters in length.
	Name pulumix.Input[*string]
	// A unique identifier for the built-in intent to base this
	// intent on. To find the signature for an intent, see
	// [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
	// in the Alexa Skills Kit.
	ParentIntentSignature pulumix.Input[*string]
	// When the user answers "no" to the question defined in
	// `confirmationPrompt`, Amazon Lex responds with this statement to acknowledge that the intent was
	// canceled. You must provide both the `rejectionStatement` and the `confirmationPrompt`, or neither.
	// Attributes are documented under statement.
	RejectionStatement pulumix.Input[*IntentRejectionStatementArgs]
	// An array of utterances (strings) that a user might say to signal
	// the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity} {PizzaSize} pizzas".
	// In each utterance, a slot name is enclosed in curly braces. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
	SampleUtterances pulumix.Input[[]string]
	// An list of intent slots. At runtime, Amazon Lex elicits required slot values
	// from the user using prompts defined in the slots. Attributes are documented under slot.
	Slots pulumix.Input[[]*IntentSlotArgs]
}

func (IntentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*intentArgs)(nil)).Elem()
}

type IntentOutput struct{ *pulumi.OutputState }

func (IntentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Intent)(nil)).Elem()
}

func (o IntentOutput) ToIntentOutput() IntentOutput {
	return o
}

func (o IntentOutput) ToIntentOutputWithContext(ctx context.Context) IntentOutput {
	return o
}

func (o IntentOutput) ToOutput(ctx context.Context) pulumix.Output[Intent] {
	return pulumix.Output[Intent]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Lex intent.
func (o IntentOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Checksum identifying the version of the intent that was created. The checksum is not
// included as an argument because the resource will add it automatically when updating the intent.
func (o IntentOutput) Checksum() pulumix.Output[string] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.Output[string] { return v.Checksum })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The statement that you want Amazon Lex to convey to the user
// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
// you provide a Lambda function in the `fulfillmentActivity`. If you return the intent to the client
// application, you can't specify this element. The `followUpPrompt` and `conclusionStatement` are
// mutually exclusive. You can specify only one. Attributes are documented under statement.
func (o IntentOutput) ConclusionStatement() pulumix.GPtrOutput[IntentConclusionStatement, IntentConclusionStatementOutput] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.GPtrOutput[IntentConclusionStatement, IntentConclusionStatementOutput] {
		return v.ConclusionStatement
	})
	unwrapped := pulumix.Flatten[*IntentConclusionStatement, pulumix.GPtrOutput[IntentConclusionStatement, IntentConclusionStatementOutput]](value)
	return pulumix.GPtrOutput[IntentConclusionStatement, IntentConclusionStatementOutput]{OutputState: unwrapped.OutputState}
}

// Prompts the user to confirm the intent. This question should
// have a yes or no answer. You you must provide both the `rejectionStatement` and `confirmationPrompt`,
// or neither. Attributes are documented under prompt.
func (o IntentOutput) ConfirmationPrompt() pulumix.GPtrOutput[IntentConfirmationPrompt, IntentConfirmationPromptOutput] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.GPtrOutput[IntentConfirmationPrompt, IntentConfirmationPromptOutput] {
		return v.ConfirmationPrompt
	})
	unwrapped := pulumix.Flatten[*IntentConfirmationPrompt, pulumix.GPtrOutput[IntentConfirmationPrompt, IntentConfirmationPromptOutput]](value)
	return pulumix.GPtrOutput[IntentConfirmationPrompt, IntentConfirmationPromptOutput]{OutputState: unwrapped.OutputState}
}

// Determines if a new slot type version is created when the initial
// resource is created and on each update. Defaults to `false`.
func (o IntentOutput) CreateVersion() pulumix.Output[*bool] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.Output[*bool] { return v.CreateVersion })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The date when the intent version was created.
func (o IntentOutput) CreatedDate() pulumix.Output[string] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.Output[string] { return v.CreatedDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description of the intent. Must be less than or equal to 200 characters in length.
func (o IntentOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Specifies a Lambda function to invoke for each user input. You can
// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
func (o IntentOutput) DialogCodeHook() pulumix.GPtrOutput[IntentDialogCodeHook, IntentDialogCodeHookOutput] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.GPtrOutput[IntentDialogCodeHook, IntentDialogCodeHookOutput] {
		return v.DialogCodeHook
	})
	unwrapped := pulumix.Flatten[*IntentDialogCodeHook, pulumix.GPtrOutput[IntentDialogCodeHook, IntentDialogCodeHookOutput]](value)
	return pulumix.GPtrOutput[IntentDialogCodeHook, IntentDialogCodeHookOutput]{OutputState: unwrapped.OutputState}
}

// Amazon Lex uses this prompt to solicit additional activity after
// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
// user to order a drink. The `followUpPrompt` field and the `conclusionStatement` field are mutually
// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
func (o IntentOutput) FollowUpPrompt() pulumix.GPtrOutput[IntentFollowUpPrompt, IntentFollowUpPromptOutput] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.GPtrOutput[IntentFollowUpPrompt, IntentFollowUpPromptOutput] {
		return v.FollowUpPrompt
	})
	unwrapped := pulumix.Flatten[*IntentFollowUpPrompt, pulumix.GPtrOutput[IntentFollowUpPrompt, IntentFollowUpPromptOutput]](value)
	return pulumix.GPtrOutput[IntentFollowUpPrompt, IntentFollowUpPromptOutput]{OutputState: unwrapped.OutputState}
}

// Describes how the intent is fulfilled. For example, after a
// user provides all of the information for a pizza order, `fulfillmentActivity` defines how the bot
// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
func (o IntentOutput) FulfillmentActivity() pulumix.GPtrOutput[IntentFulfillmentActivity, IntentFulfillmentActivityOutput] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.GPtrOutput[IntentFulfillmentActivity, IntentFulfillmentActivityOutput] {
		return v.FulfillmentActivity
	})
	unwrapped := pulumix.Flatten[*IntentFulfillmentActivity, pulumix.GPtrOutput[IntentFulfillmentActivity, IntentFulfillmentActivityOutput]](value)
	return pulumix.GPtrOutput[IntentFulfillmentActivity, IntentFulfillmentActivityOutput]{OutputState: unwrapped.OutputState}
}

// The date when the $LATEST version of this intent was updated.
func (o IntentOutput) LastUpdatedDate() pulumix.Output[string] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.Output[string] { return v.LastUpdatedDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the intent, not case sensitive. Must be less than or equal to 100 characters in length.
func (o IntentOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A unique identifier for the built-in intent to base this
// intent on. To find the signature for an intent, see
// [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
// in the Alexa Skills Kit.
func (o IntentOutput) ParentIntentSignature() pulumix.Output[*string] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.Output[*string] { return v.ParentIntentSignature })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// When the user answers "no" to the question defined in
// `confirmationPrompt`, Amazon Lex responds with this statement to acknowledge that the intent was
// canceled. You must provide both the `rejectionStatement` and the `confirmationPrompt`, or neither.
// Attributes are documented under statement.
func (o IntentOutput) RejectionStatement() pulumix.GPtrOutput[IntentRejectionStatement, IntentRejectionStatementOutput] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.GPtrOutput[IntentRejectionStatement, IntentRejectionStatementOutput] {
		return v.RejectionStatement
	})
	unwrapped := pulumix.Flatten[*IntentRejectionStatement, pulumix.GPtrOutput[IntentRejectionStatement, IntentRejectionStatementOutput]](value)
	return pulumix.GPtrOutput[IntentRejectionStatement, IntentRejectionStatementOutput]{OutputState: unwrapped.OutputState}
}

// An array of utterances (strings) that a user might say to signal
// the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity} {PizzaSize} pizzas".
// In each utterance, a slot name is enclosed in curly braces. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
func (o IntentOutput) SampleUtterances() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.ArrayOutput[string] { return v.SampleUtterances })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// An list of intent slots. At runtime, Amazon Lex elicits required slot values
// from the user using prompts defined in the slots. Attributes are documented under slot.
func (o IntentOutput) Slots() pulumix.GArrayOutput[IntentSlot, IntentSlotOutput] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.GArrayOutput[IntentSlot, IntentSlotOutput] { return v.Slots })
	unwrapped := pulumix.Flatten[[]IntentSlot, pulumix.GArrayOutput[IntentSlot, IntentSlotOutput]](value)
	return pulumix.GArrayOutput[IntentSlot, IntentSlotOutput]{OutputState: unwrapped.OutputState}
}

// The version of the bot.
func (o IntentOutput) Version() pulumix.Output[string] {
	value := pulumix.Apply[Intent](o, func(v Intent) pulumix.Output[string] { return v.Version })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(IntentOutput{})
}
