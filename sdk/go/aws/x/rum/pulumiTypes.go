// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rum

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AppMonitorAppMonitorConfiguration struct {
	// If you set this to `true`, RUM web client sets two cookies, a session cookie  and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
	AllowCookies *bool `pulumi:"allowCookies"`
	// If you set this to `true`, RUM enables X-Ray tracing for the user sessions  that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests.
	EnableXray *bool `pulumi:"enableXray"`
	// A list of URLs in your website or application to exclude from RUM data collection.
	ExcludedPages []string `pulumi:"excludedPages"`
	// A list of pages in the CloudWatch RUM console that are to be displayed with a "favorite" icon.
	FavoritePages []string `pulumi:"favoritePages"`
	// The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
	GuestRoleArn *string `pulumi:"guestRoleArn"`
	// The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
	IdentityPoolId *string `pulumi:"identityPoolId"`
	// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages.
	IncludedPages []string `pulumi:"includedPages"`
	// Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. Default value is `0.1`.
	SessionSampleRate *float64 `pulumi:"sessionSampleRate"`
	// An array that lists the types of telemetry data that this app monitor is to collect. Valid values are `errors`, `performance`, and `http`.
	Telemetries []string `pulumi:"telemetries"`
}

type AppMonitorAppMonitorConfigurationArgs struct {
	// If you set this to `true`, RUM web client sets two cookies, a session cookie  and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
	AllowCookies pulumix.Input[*bool] `pulumi:"allowCookies"`
	// If you set this to `true`, RUM enables X-Ray tracing for the user sessions  that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests.
	EnableXray pulumix.Input[*bool] `pulumi:"enableXray"`
	// A list of URLs in your website or application to exclude from RUM data collection.
	ExcludedPages pulumix.Input[[]string] `pulumi:"excludedPages"`
	// A list of pages in the CloudWatch RUM console that are to be displayed with a "favorite" icon.
	FavoritePages pulumix.Input[[]string] `pulumi:"favoritePages"`
	// The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
	GuestRoleArn pulumix.Input[*string] `pulumi:"guestRoleArn"`
	// The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
	IdentityPoolId pulumix.Input[*string] `pulumi:"identityPoolId"`
	// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages.
	IncludedPages pulumix.Input[[]string] `pulumi:"includedPages"`
	// Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. Default value is `0.1`.
	SessionSampleRate pulumix.Input[*float64] `pulumi:"sessionSampleRate"`
	// An array that lists the types of telemetry data that this app monitor is to collect. Valid values are `errors`, `performance`, and `http`.
	Telemetries pulumix.Input[[]string] `pulumi:"telemetries"`
}

func (AppMonitorAppMonitorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorAppMonitorConfiguration)(nil)).Elem()
}

func (i AppMonitorAppMonitorConfigurationArgs) ToAppMonitorAppMonitorConfigurationOutput() AppMonitorAppMonitorConfigurationOutput {
	return i.ToAppMonitorAppMonitorConfigurationOutputWithContext(context.Background())
}

func (i AppMonitorAppMonitorConfigurationArgs) ToAppMonitorAppMonitorConfigurationOutputWithContext(ctx context.Context) AppMonitorAppMonitorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorAppMonitorConfigurationOutput)
}

func (i *AppMonitorAppMonitorConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*AppMonitorAppMonitorConfigurationArgs] {
	return pulumix.Val(i)
}

type AppMonitorAppMonitorConfigurationOutput struct{ *pulumi.OutputState }

func (AppMonitorAppMonitorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorAppMonitorConfiguration)(nil)).Elem()
}

func (o AppMonitorAppMonitorConfigurationOutput) ToAppMonitorAppMonitorConfigurationOutput() AppMonitorAppMonitorConfigurationOutput {
	return o
}

func (o AppMonitorAppMonitorConfigurationOutput) ToAppMonitorAppMonitorConfigurationOutputWithContext(ctx context.Context) AppMonitorAppMonitorConfigurationOutput {
	return o
}

func (o AppMonitorAppMonitorConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[AppMonitorAppMonitorConfiguration] {
	return pulumix.Output[AppMonitorAppMonitorConfiguration]{
		OutputState: o.OutputState,
	}
}

// If you set this to `true`, RUM web client sets two cookies, a session cookie  and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
func (o AppMonitorAppMonitorConfigurationOutput) AllowCookies() pulumix.Output[*bool] {
	return pulumix.Apply[AppMonitorAppMonitorConfiguration](o, func(v AppMonitorAppMonitorConfiguration) *bool { return v.AllowCookies })
}

// If you set this to `true`, RUM enables X-Ray tracing for the user sessions  that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests.
func (o AppMonitorAppMonitorConfigurationOutput) EnableXray() pulumix.Output[*bool] {
	return pulumix.Apply[AppMonitorAppMonitorConfiguration](o, func(v AppMonitorAppMonitorConfiguration) *bool { return v.EnableXray })
}

// A list of URLs in your website or application to exclude from RUM data collection.
func (o AppMonitorAppMonitorConfigurationOutput) ExcludedPages() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AppMonitorAppMonitorConfiguration](o, func(v AppMonitorAppMonitorConfiguration) []string { return v.ExcludedPages })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of pages in the CloudWatch RUM console that are to be displayed with a "favorite" icon.
func (o AppMonitorAppMonitorConfigurationOutput) FavoritePages() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AppMonitorAppMonitorConfiguration](o, func(v AppMonitorAppMonitorConfiguration) []string { return v.FavoritePages })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
func (o AppMonitorAppMonitorConfigurationOutput) GuestRoleArn() pulumix.Output[*string] {
	return pulumix.Apply[AppMonitorAppMonitorConfiguration](o, func(v AppMonitorAppMonitorConfiguration) *string { return v.GuestRoleArn })
}

// The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
func (o AppMonitorAppMonitorConfigurationOutput) IdentityPoolId() pulumix.Output[*string] {
	return pulumix.Apply[AppMonitorAppMonitorConfiguration](o, func(v AppMonitorAppMonitorConfiguration) *string { return v.IdentityPoolId })
}

// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages.
func (o AppMonitorAppMonitorConfigurationOutput) IncludedPages() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AppMonitorAppMonitorConfiguration](o, func(v AppMonitorAppMonitorConfiguration) []string { return v.IncludedPages })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. Default value is `0.1`.
func (o AppMonitorAppMonitorConfigurationOutput) SessionSampleRate() pulumix.Output[*float64] {
	return pulumix.Apply[AppMonitorAppMonitorConfiguration](o, func(v AppMonitorAppMonitorConfiguration) *float64 { return v.SessionSampleRate })
}

// An array that lists the types of telemetry data that this app monitor is to collect. Valid values are `errors`, `performance`, and `http`.
func (o AppMonitorAppMonitorConfigurationOutput) Telemetries() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AppMonitorAppMonitorConfiguration](o, func(v AppMonitorAppMonitorConfiguration) []string { return v.Telemetries })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type AppMonitorCustomEvents struct {
	// Specifies whether this app monitor allows the web client to define and send custom events. The default is for custom events to be `DISABLED`. Valid values are `DISABLED` and `ENABLED`.
	Status *string `pulumi:"status"`
}

type AppMonitorCustomEventsArgs struct {
	// Specifies whether this app monitor allows the web client to define and send custom events. The default is for custom events to be `DISABLED`. Valid values are `DISABLED` and `ENABLED`.
	Status pulumix.Input[*string] `pulumi:"status"`
}

func (AppMonitorCustomEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorCustomEvents)(nil)).Elem()
}

func (i AppMonitorCustomEventsArgs) ToAppMonitorCustomEventsOutput() AppMonitorCustomEventsOutput {
	return i.ToAppMonitorCustomEventsOutputWithContext(context.Background())
}

func (i AppMonitorCustomEventsArgs) ToAppMonitorCustomEventsOutputWithContext(ctx context.Context) AppMonitorCustomEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorCustomEventsOutput)
}

func (i *AppMonitorCustomEventsArgs) ToOutput(ctx context.Context) pulumix.Output[*AppMonitorCustomEventsArgs] {
	return pulumix.Val(i)
}

type AppMonitorCustomEventsOutput struct{ *pulumi.OutputState }

func (AppMonitorCustomEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorCustomEvents)(nil)).Elem()
}

func (o AppMonitorCustomEventsOutput) ToAppMonitorCustomEventsOutput() AppMonitorCustomEventsOutput {
	return o
}

func (o AppMonitorCustomEventsOutput) ToAppMonitorCustomEventsOutputWithContext(ctx context.Context) AppMonitorCustomEventsOutput {
	return o
}

func (o AppMonitorCustomEventsOutput) ToOutput(ctx context.Context) pulumix.Output[AppMonitorCustomEvents] {
	return pulumix.Output[AppMonitorCustomEvents]{
		OutputState: o.OutputState,
	}
}

// Specifies whether this app monitor allows the web client to define and send custom events. The default is for custom events to be `DISABLED`. Valid values are `DISABLED` and `ENABLED`.
func (o AppMonitorCustomEventsOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[AppMonitorCustomEvents](o, func(v AppMonitorCustomEvents) *string { return v.Status })
}

func init() {
	pulumi.RegisterOutputType(AppMonitorAppMonitorConfigurationOutput{})
	pulumi.RegisterOutputType(AppMonitorCustomEventsOutput{})
}
