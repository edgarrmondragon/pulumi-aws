// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpclattice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS VPC Lattice Target Group.
type TargetGroup struct {
	pulumi.CustomResourceState

	// ARN of the target group.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The target group configuration. If type is set to `LAMBDA,` this parameter should not be specified.
	Config pulumix.GPtrOutput[TargetGroupConfig, TargetGroupConfigOutput] `pulumi:"config"`
	// The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
	Name pulumix.Output[string] `pulumi:"name"`
	// Status of the target group.
	Status pulumix.Output[string] `pulumi:"status"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The type of target group. Valid Values are `IP` | `LAMBDA` | `INSTANCE` | `ALB`
	//
	// The following arguments are optional:
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewTargetGroup registers a new resource with the given unique name, arguments, and options.
func NewTargetGroup(ctx *pulumi.Context,
	name string, args *TargetGroupArgs, opts ...pulumi.ResourceOption) (*TargetGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TargetGroup
	err := ctx.RegisterResource("aws:vpclattice/targetGroup:TargetGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTargetGroup gets an existing TargetGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTargetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetGroupState, opts ...pulumi.ResourceOption) (*TargetGroup, error) {
	var resource TargetGroup
	err := ctx.ReadResource("aws:vpclattice/targetGroup:TargetGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TargetGroup resources.
type targetGroupState struct {
	// ARN of the target group.
	Arn *string `pulumi:"arn"`
	// The target group configuration. If type is set to `LAMBDA,` this parameter should not be specified.
	Config *TargetGroupConfig `pulumi:"config"`
	// The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
	Name *string `pulumi:"name"`
	// Status of the target group.
	Status *string `pulumi:"status"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The type of target group. Valid Values are `IP` | `LAMBDA` | `INSTANCE` | `ALB`
	//
	// The following arguments are optional:
	Type *string `pulumi:"type"`
}

type TargetGroupState struct {
	// ARN of the target group.
	Arn pulumix.Input[*string]
	// The target group configuration. If type is set to `LAMBDA,` this parameter should not be specified.
	Config pulumix.Input[*TargetGroupConfigArgs]
	// The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
	Name pulumix.Input[*string]
	// Status of the target group.
	Status pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The type of target group. Valid Values are `IP` | `LAMBDA` | `INSTANCE` | `ALB`
	//
	// The following arguments are optional:
	Type pulumix.Input[*string]
}

func (TargetGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetGroupState)(nil)).Elem()
}

type targetGroupArgs struct {
	// The target group configuration. If type is set to `LAMBDA,` this parameter should not be specified.
	Config *TargetGroupConfig `pulumi:"config"`
	// The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
	Name *string `pulumi:"name"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The type of target group. Valid Values are `IP` | `LAMBDA` | `INSTANCE` | `ALB`
	//
	// The following arguments are optional:
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a TargetGroup resource.
type TargetGroupArgs struct {
	// The target group configuration. If type is set to `LAMBDA,` this parameter should not be specified.
	Config pulumix.Input[*TargetGroupConfigArgs]
	// The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
	Name pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The type of target group. Valid Values are `IP` | `LAMBDA` | `INSTANCE` | `ALB`
	//
	// The following arguments are optional:
	Type pulumix.Input[string]
}

func (TargetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetGroupArgs)(nil)).Elem()
}

type TargetGroupOutput struct{ *pulumi.OutputState }

func (TargetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroup)(nil)).Elem()
}

func (o TargetGroupOutput) ToTargetGroupOutput() TargetGroupOutput {
	return o
}

func (o TargetGroupOutput) ToTargetGroupOutputWithContext(ctx context.Context) TargetGroupOutput {
	return o
}

func (o TargetGroupOutput) ToOutput(ctx context.Context) pulumix.Output[TargetGroup] {
	return pulumix.Output[TargetGroup]{
		OutputState: o.OutputState,
	}
}

// ARN of the target group.
func (o TargetGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[TargetGroup](o, func(v TargetGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The target group configuration. If type is set to `LAMBDA,` this parameter should not be specified.
func (o TargetGroupOutput) Config() pulumix.GPtrOutput[TargetGroupConfig, TargetGroupConfigOutput] {
	value := pulumix.Apply[TargetGroup](o, func(v TargetGroup) pulumix.GPtrOutput[TargetGroupConfig, TargetGroupConfigOutput] { return v.Config })
	unwrapped := pulumix.Flatten[*TargetGroupConfig, pulumix.GPtrOutput[TargetGroupConfig, TargetGroupConfigOutput]](value)
	return pulumix.GPtrOutput[TargetGroupConfig, TargetGroupConfigOutput]{OutputState: unwrapped.OutputState}
}

// The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
func (o TargetGroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[TargetGroup](o, func(v TargetGroup) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Status of the target group.
func (o TargetGroupOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[TargetGroup](o, func(v TargetGroup) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TargetGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[TargetGroup](o, func(v TargetGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TargetGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[TargetGroup](o, func(v TargetGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The type of target group. Valid Values are `IP` | `LAMBDA` | `INSTANCE` | `ALB`
//
// The following arguments are optional:
func (o TargetGroupOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[TargetGroup](o, func(v TargetGroup) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(TargetGroupOutput{})
}
