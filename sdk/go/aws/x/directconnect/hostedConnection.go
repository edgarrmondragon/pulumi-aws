// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a hosted connection on the specified interconnect or a link aggregation group (LAG) of interconnects. Intended for use by AWS Direct Connect Partners only.
type HostedConnection struct {
	pulumi.CustomResourceState

	// The Direct Connect endpoint on which the physical connection terminates.
	AwsDevice pulumix.Output[string] `pulumi:"awsDevice"`
	// The bandwidth of the connection. Valid values for dedicated connections: 1Gbps, 10Gbps. Valid values for hosted connections: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps and 10Gbps. Case sensitive.
	Bandwidth pulumix.Output[string] `pulumi:"bandwidth"`
	// The ID of the interconnect or LAG.
	ConnectionId pulumix.Output[string] `pulumi:"connectionId"`
	// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
	HasLogicalRedundancy pulumix.Output[string] `pulumi:"hasLogicalRedundancy"`
	// Boolean value representing if jumbo frames have been enabled for this connection.
	JumboFrameCapable pulumix.Output[bool] `pulumi:"jumboFrameCapable"`
	// The ID of the LAG.
	LagId pulumix.Output[string] `pulumi:"lagId"`
	// The time of the most recent call to [DescribeLoa](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLoa.html) for this connection.
	LoaIssueTime pulumix.Output[string] `pulumi:"loaIssueTime"`
	// The location of the connection.
	Location pulumix.Output[string] `pulumi:"location"`
	// The name of the connection.
	Name pulumix.Output[string] `pulumi:"name"`
	// The ID of the AWS account of the customer for the connection.
	OwnerAccountId pulumix.Output[string] `pulumi:"ownerAccountId"`
	// The name of the AWS Direct Connect service provider associated with the connection.
	PartnerName pulumix.Output[string] `pulumi:"partnerName"`
	// The name of the service provider associated with the connection.
	ProviderName pulumix.Output[string] `pulumi:"providerName"`
	// The AWS Region where the connection is located.
	Region pulumix.Output[string] `pulumi:"region"`
	// The state of the connection. Possible values include: ordering, requested, pending, available, down, deleting, deleted, rejected, unknown. See [AllocateHostedConnection](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_AllocateHostedConnection.html) for a description of each connection state.
	State pulumix.Output[string] `pulumi:"state"`
	// The dedicated VLAN provisioned to the hosted connection.
	Vlan pulumix.Output[int] `pulumi:"vlan"`
}

// NewHostedConnection registers a new resource with the given unique name, arguments, and options.
func NewHostedConnection(ctx *pulumi.Context,
	name string, args *HostedConnectionArgs, opts ...pulumi.ResourceOption) (*HostedConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bandwidth == nil {
		return nil, errors.New("invalid value for required argument 'Bandwidth'")
	}
	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.OwnerAccountId == nil {
		return nil, errors.New("invalid value for required argument 'OwnerAccountId'")
	}
	if args.Vlan == nil {
		return nil, errors.New("invalid value for required argument 'Vlan'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostedConnection
	err := ctx.RegisterResource("aws:directconnect/hostedConnection:HostedConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostedConnection gets an existing HostedConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostedConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostedConnectionState, opts ...pulumi.ResourceOption) (*HostedConnection, error) {
	var resource HostedConnection
	err := ctx.ReadResource("aws:directconnect/hostedConnection:HostedConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostedConnection resources.
type hostedConnectionState struct {
	// The Direct Connect endpoint on which the physical connection terminates.
	AwsDevice *string `pulumi:"awsDevice"`
	// The bandwidth of the connection. Valid values for dedicated connections: 1Gbps, 10Gbps. Valid values for hosted connections: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps and 10Gbps. Case sensitive.
	Bandwidth *string `pulumi:"bandwidth"`
	// The ID of the interconnect or LAG.
	ConnectionId *string `pulumi:"connectionId"`
	// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
	HasLogicalRedundancy *string `pulumi:"hasLogicalRedundancy"`
	// Boolean value representing if jumbo frames have been enabled for this connection.
	JumboFrameCapable *bool `pulumi:"jumboFrameCapable"`
	// The ID of the LAG.
	LagId *string `pulumi:"lagId"`
	// The time of the most recent call to [DescribeLoa](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLoa.html) for this connection.
	LoaIssueTime *string `pulumi:"loaIssueTime"`
	// The location of the connection.
	Location *string `pulumi:"location"`
	// The name of the connection.
	Name *string `pulumi:"name"`
	// The ID of the AWS account of the customer for the connection.
	OwnerAccountId *string `pulumi:"ownerAccountId"`
	// The name of the AWS Direct Connect service provider associated with the connection.
	PartnerName *string `pulumi:"partnerName"`
	// The name of the service provider associated with the connection.
	ProviderName *string `pulumi:"providerName"`
	// The AWS Region where the connection is located.
	Region *string `pulumi:"region"`
	// The state of the connection. Possible values include: ordering, requested, pending, available, down, deleting, deleted, rejected, unknown. See [AllocateHostedConnection](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_AllocateHostedConnection.html) for a description of each connection state.
	State *string `pulumi:"state"`
	// The dedicated VLAN provisioned to the hosted connection.
	Vlan *int `pulumi:"vlan"`
}

type HostedConnectionState struct {
	// The Direct Connect endpoint on which the physical connection terminates.
	AwsDevice pulumix.Input[*string]
	// The bandwidth of the connection. Valid values for dedicated connections: 1Gbps, 10Gbps. Valid values for hosted connections: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps and 10Gbps. Case sensitive.
	Bandwidth pulumix.Input[*string]
	// The ID of the interconnect or LAG.
	ConnectionId pulumix.Input[*string]
	// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
	HasLogicalRedundancy pulumix.Input[*string]
	// Boolean value representing if jumbo frames have been enabled for this connection.
	JumboFrameCapable pulumix.Input[*bool]
	// The ID of the LAG.
	LagId pulumix.Input[*string]
	// The time of the most recent call to [DescribeLoa](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLoa.html) for this connection.
	LoaIssueTime pulumix.Input[*string]
	// The location of the connection.
	Location pulumix.Input[*string]
	// The name of the connection.
	Name pulumix.Input[*string]
	// The ID of the AWS account of the customer for the connection.
	OwnerAccountId pulumix.Input[*string]
	// The name of the AWS Direct Connect service provider associated with the connection.
	PartnerName pulumix.Input[*string]
	// The name of the service provider associated with the connection.
	ProviderName pulumix.Input[*string]
	// The AWS Region where the connection is located.
	Region pulumix.Input[*string]
	// The state of the connection. Possible values include: ordering, requested, pending, available, down, deleting, deleted, rejected, unknown. See [AllocateHostedConnection](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_AllocateHostedConnection.html) for a description of each connection state.
	State pulumix.Input[*string]
	// The dedicated VLAN provisioned to the hosted connection.
	Vlan pulumix.Input[*int]
}

func (HostedConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostedConnectionState)(nil)).Elem()
}

type hostedConnectionArgs struct {
	// The bandwidth of the connection. Valid values for dedicated connections: 1Gbps, 10Gbps. Valid values for hosted connections: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps and 10Gbps. Case sensitive.
	Bandwidth string `pulumi:"bandwidth"`
	// The ID of the interconnect or LAG.
	ConnectionId string `pulumi:"connectionId"`
	// The name of the connection.
	Name *string `pulumi:"name"`
	// The ID of the AWS account of the customer for the connection.
	OwnerAccountId string `pulumi:"ownerAccountId"`
	// The dedicated VLAN provisioned to the hosted connection.
	Vlan int `pulumi:"vlan"`
}

// The set of arguments for constructing a HostedConnection resource.
type HostedConnectionArgs struct {
	// The bandwidth of the connection. Valid values for dedicated connections: 1Gbps, 10Gbps. Valid values for hosted connections: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps and 10Gbps. Case sensitive.
	Bandwidth pulumix.Input[string]
	// The ID of the interconnect or LAG.
	ConnectionId pulumix.Input[string]
	// The name of the connection.
	Name pulumix.Input[*string]
	// The ID of the AWS account of the customer for the connection.
	OwnerAccountId pulumix.Input[string]
	// The dedicated VLAN provisioned to the hosted connection.
	Vlan pulumix.Input[int]
}

func (HostedConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostedConnectionArgs)(nil)).Elem()
}

type HostedConnectionOutput struct{ *pulumi.OutputState }

func (HostedConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostedConnection)(nil)).Elem()
}

func (o HostedConnectionOutput) ToHostedConnectionOutput() HostedConnectionOutput {
	return o
}

func (o HostedConnectionOutput) ToHostedConnectionOutputWithContext(ctx context.Context) HostedConnectionOutput {
	return o
}

func (o HostedConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[HostedConnection] {
	return pulumix.Output[HostedConnection]{
		OutputState: o.OutputState,
	}
}

// The Direct Connect endpoint on which the physical connection terminates.
func (o HostedConnectionOutput) AwsDevice() pulumix.Output[string] {
	value := pulumix.Apply[HostedConnection](o, func(v HostedConnection) pulumix.Output[string] { return v.AwsDevice })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The bandwidth of the connection. Valid values for dedicated connections: 1Gbps, 10Gbps. Valid values for hosted connections: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps and 10Gbps. Case sensitive.
func (o HostedConnectionOutput) Bandwidth() pulumix.Output[string] {
	value := pulumix.Apply[HostedConnection](o, func(v HostedConnection) pulumix.Output[string] { return v.Bandwidth })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the interconnect or LAG.
func (o HostedConnectionOutput) ConnectionId() pulumix.Output[string] {
	value := pulumix.Apply[HostedConnection](o, func(v HostedConnection) pulumix.Output[string] { return v.ConnectionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
func (o HostedConnectionOutput) HasLogicalRedundancy() pulumix.Output[string] {
	value := pulumix.Apply[HostedConnection](o, func(v HostedConnection) pulumix.Output[string] { return v.HasLogicalRedundancy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Boolean value representing if jumbo frames have been enabled for this connection.
func (o HostedConnectionOutput) JumboFrameCapable() pulumix.Output[bool] {
	value := pulumix.Apply[HostedConnection](o, func(v HostedConnection) pulumix.Output[bool] { return v.JumboFrameCapable })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The ID of the LAG.
func (o HostedConnectionOutput) LagId() pulumix.Output[string] {
	value := pulumix.Apply[HostedConnection](o, func(v HostedConnection) pulumix.Output[string] { return v.LagId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The time of the most recent call to [DescribeLoa](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLoa.html) for this connection.
func (o HostedConnectionOutput) LoaIssueTime() pulumix.Output[string] {
	value := pulumix.Apply[HostedConnection](o, func(v HostedConnection) pulumix.Output[string] { return v.LoaIssueTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The location of the connection.
func (o HostedConnectionOutput) Location() pulumix.Output[string] {
	value := pulumix.Apply[HostedConnection](o, func(v HostedConnection) pulumix.Output[string] { return v.Location })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the connection.
func (o HostedConnectionOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[HostedConnection](o, func(v HostedConnection) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the AWS account of the customer for the connection.
func (o HostedConnectionOutput) OwnerAccountId() pulumix.Output[string] {
	value := pulumix.Apply[HostedConnection](o, func(v HostedConnection) pulumix.Output[string] { return v.OwnerAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the AWS Direct Connect service provider associated with the connection.
func (o HostedConnectionOutput) PartnerName() pulumix.Output[string] {
	value := pulumix.Apply[HostedConnection](o, func(v HostedConnection) pulumix.Output[string] { return v.PartnerName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the service provider associated with the connection.
func (o HostedConnectionOutput) ProviderName() pulumix.Output[string] {
	value := pulumix.Apply[HostedConnection](o, func(v HostedConnection) pulumix.Output[string] { return v.ProviderName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The AWS Region where the connection is located.
func (o HostedConnectionOutput) Region() pulumix.Output[string] {
	value := pulumix.Apply[HostedConnection](o, func(v HostedConnection) pulumix.Output[string] { return v.Region })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The state of the connection. Possible values include: ordering, requested, pending, available, down, deleting, deleted, rejected, unknown. See [AllocateHostedConnection](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_AllocateHostedConnection.html) for a description of each connection state.
func (o HostedConnectionOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[HostedConnection](o, func(v HostedConnection) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The dedicated VLAN provisioned to the hosted connection.
func (o HostedConnectionOutput) Vlan() pulumix.Output[int] {
	value := pulumix.Apply[HostedConnection](o, func(v HostedConnection) pulumix.Output[int] { return v.Vlan })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(HostedConnectionOutput{})
}
