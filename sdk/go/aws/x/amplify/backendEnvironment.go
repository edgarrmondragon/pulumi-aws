// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplify

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Amplify Backend Environment resource.
type BackendEnvironment struct {
	pulumi.CustomResourceState

	// Unique ID for an Amplify app.
	AppId pulumix.Output[string] `pulumi:"appId"`
	// ARN for a backend environment that is part of an Amplify app.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Name of deployment artifacts.
	DeploymentArtifacts pulumix.Output[string] `pulumi:"deploymentArtifacts"`
	// Name for the backend environment.
	EnvironmentName pulumix.Output[string] `pulumi:"environmentName"`
	// AWS CloudFormation stack name of a backend environment.
	StackName pulumix.Output[string] `pulumi:"stackName"`
}

// NewBackendEnvironment registers a new resource with the given unique name, arguments, and options.
func NewBackendEnvironment(ctx *pulumi.Context,
	name string, args *BackendEnvironmentArgs, opts ...pulumi.ResourceOption) (*BackendEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.EnvironmentName == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackendEnvironment
	err := ctx.RegisterResource("aws:amplify/backendEnvironment:BackendEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendEnvironment gets an existing BackendEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendEnvironmentState, opts ...pulumi.ResourceOption) (*BackendEnvironment, error) {
	var resource BackendEnvironment
	err := ctx.ReadResource("aws:amplify/backendEnvironment:BackendEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendEnvironment resources.
type backendEnvironmentState struct {
	// Unique ID for an Amplify app.
	AppId *string `pulumi:"appId"`
	// ARN for a backend environment that is part of an Amplify app.
	Arn *string `pulumi:"arn"`
	// Name of deployment artifacts.
	DeploymentArtifacts *string `pulumi:"deploymentArtifacts"`
	// Name for the backend environment.
	EnvironmentName *string `pulumi:"environmentName"`
	// AWS CloudFormation stack name of a backend environment.
	StackName *string `pulumi:"stackName"`
}

type BackendEnvironmentState struct {
	// Unique ID for an Amplify app.
	AppId pulumix.Input[*string]
	// ARN for a backend environment that is part of an Amplify app.
	Arn pulumix.Input[*string]
	// Name of deployment artifacts.
	DeploymentArtifacts pulumix.Input[*string]
	// Name for the backend environment.
	EnvironmentName pulumix.Input[*string]
	// AWS CloudFormation stack name of a backend environment.
	StackName pulumix.Input[*string]
}

func (BackendEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendEnvironmentState)(nil)).Elem()
}

type backendEnvironmentArgs struct {
	// Unique ID for an Amplify app.
	AppId string `pulumi:"appId"`
	// Name of deployment artifacts.
	DeploymentArtifacts *string `pulumi:"deploymentArtifacts"`
	// Name for the backend environment.
	EnvironmentName string `pulumi:"environmentName"`
	// AWS CloudFormation stack name of a backend environment.
	StackName *string `pulumi:"stackName"`
}

// The set of arguments for constructing a BackendEnvironment resource.
type BackendEnvironmentArgs struct {
	// Unique ID for an Amplify app.
	AppId pulumix.Input[string]
	// Name of deployment artifacts.
	DeploymentArtifacts pulumix.Input[*string]
	// Name for the backend environment.
	EnvironmentName pulumix.Input[string]
	// AWS CloudFormation stack name of a backend environment.
	StackName pulumix.Input[*string]
}

func (BackendEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendEnvironmentArgs)(nil)).Elem()
}

type BackendEnvironmentOutput struct{ *pulumi.OutputState }

func (BackendEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendEnvironment)(nil)).Elem()
}

func (o BackendEnvironmentOutput) ToBackendEnvironmentOutput() BackendEnvironmentOutput {
	return o
}

func (o BackendEnvironmentOutput) ToBackendEnvironmentOutputWithContext(ctx context.Context) BackendEnvironmentOutput {
	return o
}

func (o BackendEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[BackendEnvironment] {
	return pulumix.Output[BackendEnvironment]{
		OutputState: o.OutputState,
	}
}

// Unique ID for an Amplify app.
func (o BackendEnvironmentOutput) AppId() pulumix.Output[string] {
	value := pulumix.Apply[BackendEnvironment](o, func(v BackendEnvironment) pulumix.Output[string] { return v.AppId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN for a backend environment that is part of an Amplify app.
func (o BackendEnvironmentOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[BackendEnvironment](o, func(v BackendEnvironment) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of deployment artifacts.
func (o BackendEnvironmentOutput) DeploymentArtifacts() pulumix.Output[string] {
	value := pulumix.Apply[BackendEnvironment](o, func(v BackendEnvironment) pulumix.Output[string] { return v.DeploymentArtifacts })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name for the backend environment.
func (o BackendEnvironmentOutput) EnvironmentName() pulumix.Output[string] {
	value := pulumix.Apply[BackendEnvironment](o, func(v BackendEnvironment) pulumix.Output[string] { return v.EnvironmentName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS CloudFormation stack name of a backend environment.
func (o BackendEnvironmentOutput) StackName() pulumix.Output[string] {
	value := pulumix.Apply[BackendEnvironment](o, func(v BackendEnvironment) pulumix.Output[string] { return v.StackName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(BackendEnvironmentOutput{})
}
