// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pipes

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type PipeEnrichmentParameters struct {
	// Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence. Detailed below.
	HttpParameters *PipeEnrichmentParametersHttpParameters `pulumi:"httpParameters"`
	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
	InputTemplate *string `pulumi:"inputTemplate"`
}

type PipeEnrichmentParametersArgs struct {
	// Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence. Detailed below.
	HttpParameters pulumix.Input[*PipeEnrichmentParametersHttpParametersArgs] `pulumi:"httpParameters"`
	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
	InputTemplate pulumix.Input[*string] `pulumi:"inputTemplate"`
}

func (PipeEnrichmentParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEnrichmentParameters)(nil)).Elem()
}

func (i PipeEnrichmentParametersArgs) ToPipeEnrichmentParametersOutput() PipeEnrichmentParametersOutput {
	return i.ToPipeEnrichmentParametersOutputWithContext(context.Background())
}

func (i PipeEnrichmentParametersArgs) ToPipeEnrichmentParametersOutputWithContext(ctx context.Context) PipeEnrichmentParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEnrichmentParametersOutput)
}

func (i *PipeEnrichmentParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeEnrichmentParametersArgs] {
	return pulumix.Val(i)
}

type PipeEnrichmentParametersOutput struct{ *pulumi.OutputState }

func (PipeEnrichmentParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEnrichmentParameters)(nil)).Elem()
}

func (o PipeEnrichmentParametersOutput) ToPipeEnrichmentParametersOutput() PipeEnrichmentParametersOutput {
	return o
}

func (o PipeEnrichmentParametersOutput) ToPipeEnrichmentParametersOutputWithContext(ctx context.Context) PipeEnrichmentParametersOutput {
	return o
}

func (o PipeEnrichmentParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeEnrichmentParameters] {
	return pulumix.Output[PipeEnrichmentParameters]{
		OutputState: o.OutputState,
	}
}

// Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence. Detailed below.
func (o PipeEnrichmentParametersOutput) HttpParameters() pulumix.GPtrOutput[PipeEnrichmentParametersHttpParameters, PipeEnrichmentParametersHttpParametersOutput] {
	value := pulumix.Apply[PipeEnrichmentParameters](o, func(v PipeEnrichmentParameters) *PipeEnrichmentParametersHttpParameters { return v.HttpParameters })
	return pulumix.GPtrOutput[PipeEnrichmentParametersHttpParameters, PipeEnrichmentParametersHttpParametersOutput]{OutputState: value.OutputState}
}

// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
func (o PipeEnrichmentParametersOutput) InputTemplate() pulumix.Output[*string] {
	return pulumix.Apply[PipeEnrichmentParameters](o, func(v PipeEnrichmentParameters) *string { return v.InputTemplate })
}

type PipeEnrichmentParametersHttpParameters struct {
	// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	HeaderParameters map[string]string `pulumi:"headerParameters"`
	// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
	PathParameterValues *string `pulumi:"pathParameterValues"`
	// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	QueryStringParameters map[string]string `pulumi:"queryStringParameters"`
}

type PipeEnrichmentParametersHttpParametersArgs struct {
	// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	HeaderParameters pulumix.Input[map[string]string] `pulumi:"headerParameters"`
	// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
	PathParameterValues pulumix.Input[*string] `pulumi:"pathParameterValues"`
	// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	QueryStringParameters pulumix.Input[map[string]string] `pulumi:"queryStringParameters"`
}

func (PipeEnrichmentParametersHttpParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEnrichmentParametersHttpParameters)(nil)).Elem()
}

func (i PipeEnrichmentParametersHttpParametersArgs) ToPipeEnrichmentParametersHttpParametersOutput() PipeEnrichmentParametersHttpParametersOutput {
	return i.ToPipeEnrichmentParametersHttpParametersOutputWithContext(context.Background())
}

func (i PipeEnrichmentParametersHttpParametersArgs) ToPipeEnrichmentParametersHttpParametersOutputWithContext(ctx context.Context) PipeEnrichmentParametersHttpParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEnrichmentParametersHttpParametersOutput)
}

func (i *PipeEnrichmentParametersHttpParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeEnrichmentParametersHttpParametersArgs] {
	return pulumix.Val(i)
}

type PipeEnrichmentParametersHttpParametersOutput struct{ *pulumi.OutputState }

func (PipeEnrichmentParametersHttpParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEnrichmentParametersHttpParameters)(nil)).Elem()
}

func (o PipeEnrichmentParametersHttpParametersOutput) ToPipeEnrichmentParametersHttpParametersOutput() PipeEnrichmentParametersHttpParametersOutput {
	return o
}

func (o PipeEnrichmentParametersHttpParametersOutput) ToPipeEnrichmentParametersHttpParametersOutputWithContext(ctx context.Context) PipeEnrichmentParametersHttpParametersOutput {
	return o
}

func (o PipeEnrichmentParametersHttpParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeEnrichmentParametersHttpParameters] {
	return pulumix.Output[PipeEnrichmentParametersHttpParameters]{
		OutputState: o.OutputState,
	}
}

// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
func (o PipeEnrichmentParametersHttpParametersOutput) HeaderParameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[PipeEnrichmentParametersHttpParameters](o, func(v PipeEnrichmentParametersHttpParameters) map[string]string { return v.HeaderParameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
func (o PipeEnrichmentParametersHttpParametersOutput) PathParameterValues() pulumix.Output[*string] {
	return pulumix.Apply[PipeEnrichmentParametersHttpParameters](o, func(v PipeEnrichmentParametersHttpParameters) *string { return v.PathParameterValues })
}

// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
func (o PipeEnrichmentParametersHttpParametersOutput) QueryStringParameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[PipeEnrichmentParametersHttpParameters](o, func(v PipeEnrichmentParametersHttpParameters) map[string]string { return v.QueryStringParameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type PipeSourceParameters struct {
	// The parameters for using an Active MQ broker as a source. Detailed below.
	ActivemqBrokerParameters *PipeSourceParametersActivemqBrokerParameters `pulumi:"activemqBrokerParameters"`
	// The parameters for using a DynamoDB stream as a source.  Detailed below.
	DynamodbStreamParameters *PipeSourceParametersDynamodbStreamParameters `pulumi:"dynamodbStreamParameters"`
	// The collection of event patterns used to [filter events](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-event-filtering.html). Detailed below.
	FilterCriteria *PipeSourceParametersFilterCriteria `pulumi:"filterCriteria"`
	// The parameters for using a Kinesis stream as a source. Detailed below.
	KinesisStreamParameters *PipeSourceParametersKinesisStreamParameters `pulumi:"kinesisStreamParameters"`
	// The parameters for using an MSK stream as a source. Detailed below.
	ManagedStreamingKafkaParameters *PipeSourceParametersManagedStreamingKafkaParameters `pulumi:"managedStreamingKafkaParameters"`
	// The parameters for using a Rabbit MQ broker as a source. Detailed below.
	RabbitmqBrokerParameters *PipeSourceParametersRabbitmqBrokerParameters `pulumi:"rabbitmqBrokerParameters"`
	// The parameters for using a self-managed Apache Kafka stream as a source. Detailed below.
	SelfManagedKafkaParameters *PipeSourceParametersSelfManagedKafkaParameters `pulumi:"selfManagedKafkaParameters"`
	// The parameters for using a Amazon SQS stream as a source. Detailed below.
	SqsQueueParameters *PipeSourceParametersSqsQueueParameters `pulumi:"sqsQueueParameters"`
}

type PipeSourceParametersArgs struct {
	// The parameters for using an Active MQ broker as a source. Detailed below.
	ActivemqBrokerParameters pulumix.Input[*PipeSourceParametersActivemqBrokerParametersArgs] `pulumi:"activemqBrokerParameters"`
	// The parameters for using a DynamoDB stream as a source.  Detailed below.
	DynamodbStreamParameters pulumix.Input[*PipeSourceParametersDynamodbStreamParametersArgs] `pulumi:"dynamodbStreamParameters"`
	// The collection of event patterns used to [filter events](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-event-filtering.html). Detailed below.
	FilterCriteria pulumix.Input[*PipeSourceParametersFilterCriteriaArgs] `pulumi:"filterCriteria"`
	// The parameters for using a Kinesis stream as a source. Detailed below.
	KinesisStreamParameters pulumix.Input[*PipeSourceParametersKinesisStreamParametersArgs] `pulumi:"kinesisStreamParameters"`
	// The parameters for using an MSK stream as a source. Detailed below.
	ManagedStreamingKafkaParameters pulumix.Input[*PipeSourceParametersManagedStreamingKafkaParametersArgs] `pulumi:"managedStreamingKafkaParameters"`
	// The parameters for using a Rabbit MQ broker as a source. Detailed below.
	RabbitmqBrokerParameters pulumix.Input[*PipeSourceParametersRabbitmqBrokerParametersArgs] `pulumi:"rabbitmqBrokerParameters"`
	// The parameters for using a self-managed Apache Kafka stream as a source. Detailed below.
	SelfManagedKafkaParameters pulumix.Input[*PipeSourceParametersSelfManagedKafkaParametersArgs] `pulumi:"selfManagedKafkaParameters"`
	// The parameters for using a Amazon SQS stream as a source. Detailed below.
	SqsQueueParameters pulumix.Input[*PipeSourceParametersSqsQueueParametersArgs] `pulumi:"sqsQueueParameters"`
}

func (PipeSourceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParameters)(nil)).Elem()
}

func (i PipeSourceParametersArgs) ToPipeSourceParametersOutput() PipeSourceParametersOutput {
	return i.ToPipeSourceParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersArgs) ToPipeSourceParametersOutputWithContext(ctx context.Context) PipeSourceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersOutput)
}

func (i *PipeSourceParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParameters)(nil)).Elem()
}

func (o PipeSourceParametersOutput) ToPipeSourceParametersOutput() PipeSourceParametersOutput {
	return o
}

func (o PipeSourceParametersOutput) ToPipeSourceParametersOutputWithContext(ctx context.Context) PipeSourceParametersOutput {
	return o
}

func (o PipeSourceParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParameters] {
	return pulumix.Output[PipeSourceParameters]{
		OutputState: o.OutputState,
	}
}

// The parameters for using an Active MQ broker as a source. Detailed below.
func (o PipeSourceParametersOutput) ActivemqBrokerParameters() pulumix.GPtrOutput[PipeSourceParametersActivemqBrokerParameters, PipeSourceParametersActivemqBrokerParametersOutput] {
	value := pulumix.Apply[PipeSourceParameters](o, func(v PipeSourceParameters) *PipeSourceParametersActivemqBrokerParameters {
		return v.ActivemqBrokerParameters
	})
	return pulumix.GPtrOutput[PipeSourceParametersActivemqBrokerParameters, PipeSourceParametersActivemqBrokerParametersOutput]{OutputState: value.OutputState}
}

// The parameters for using a DynamoDB stream as a source.  Detailed below.
func (o PipeSourceParametersOutput) DynamodbStreamParameters() pulumix.GPtrOutput[PipeSourceParametersDynamodbStreamParameters, PipeSourceParametersDynamodbStreamParametersOutput] {
	value := pulumix.Apply[PipeSourceParameters](o, func(v PipeSourceParameters) *PipeSourceParametersDynamodbStreamParameters {
		return v.DynamodbStreamParameters
	})
	return pulumix.GPtrOutput[PipeSourceParametersDynamodbStreamParameters, PipeSourceParametersDynamodbStreamParametersOutput]{OutputState: value.OutputState}
}

// The collection of event patterns used to [filter events](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-event-filtering.html). Detailed below.
func (o PipeSourceParametersOutput) FilterCriteria() pulumix.GPtrOutput[PipeSourceParametersFilterCriteria, PipeSourceParametersFilterCriteriaOutput] {
	value := pulumix.Apply[PipeSourceParameters](o, func(v PipeSourceParameters) *PipeSourceParametersFilterCriteria { return v.FilterCriteria })
	return pulumix.GPtrOutput[PipeSourceParametersFilterCriteria, PipeSourceParametersFilterCriteriaOutput]{OutputState: value.OutputState}
}

// The parameters for using a Kinesis stream as a source. Detailed below.
func (o PipeSourceParametersOutput) KinesisStreamParameters() pulumix.GPtrOutput[PipeSourceParametersKinesisStreamParameters, PipeSourceParametersKinesisStreamParametersOutput] {
	value := pulumix.Apply[PipeSourceParameters](o, func(v PipeSourceParameters) *PipeSourceParametersKinesisStreamParameters {
		return v.KinesisStreamParameters
	})
	return pulumix.GPtrOutput[PipeSourceParametersKinesisStreamParameters, PipeSourceParametersKinesisStreamParametersOutput]{OutputState: value.OutputState}
}

// The parameters for using an MSK stream as a source. Detailed below.
func (o PipeSourceParametersOutput) ManagedStreamingKafkaParameters() pulumix.GPtrOutput[PipeSourceParametersManagedStreamingKafkaParameters, PipeSourceParametersManagedStreamingKafkaParametersOutput] {
	value := pulumix.Apply[PipeSourceParameters](o, func(v PipeSourceParameters) *PipeSourceParametersManagedStreamingKafkaParameters {
		return v.ManagedStreamingKafkaParameters
	})
	return pulumix.GPtrOutput[PipeSourceParametersManagedStreamingKafkaParameters, PipeSourceParametersManagedStreamingKafkaParametersOutput]{OutputState: value.OutputState}
}

// The parameters for using a Rabbit MQ broker as a source. Detailed below.
func (o PipeSourceParametersOutput) RabbitmqBrokerParameters() pulumix.GPtrOutput[PipeSourceParametersRabbitmqBrokerParameters, PipeSourceParametersRabbitmqBrokerParametersOutput] {
	value := pulumix.Apply[PipeSourceParameters](o, func(v PipeSourceParameters) *PipeSourceParametersRabbitmqBrokerParameters {
		return v.RabbitmqBrokerParameters
	})
	return pulumix.GPtrOutput[PipeSourceParametersRabbitmqBrokerParameters, PipeSourceParametersRabbitmqBrokerParametersOutput]{OutputState: value.OutputState}
}

// The parameters for using a self-managed Apache Kafka stream as a source. Detailed below.
func (o PipeSourceParametersOutput) SelfManagedKafkaParameters() pulumix.GPtrOutput[PipeSourceParametersSelfManagedKafkaParameters, PipeSourceParametersSelfManagedKafkaParametersOutput] {
	value := pulumix.Apply[PipeSourceParameters](o, func(v PipeSourceParameters) *PipeSourceParametersSelfManagedKafkaParameters {
		return v.SelfManagedKafkaParameters
	})
	return pulumix.GPtrOutput[PipeSourceParametersSelfManagedKafkaParameters, PipeSourceParametersSelfManagedKafkaParametersOutput]{OutputState: value.OutputState}
}

// The parameters for using a Amazon SQS stream as a source. Detailed below.
func (o PipeSourceParametersOutput) SqsQueueParameters() pulumix.GPtrOutput[PipeSourceParametersSqsQueueParameters, PipeSourceParametersSqsQueueParametersOutput] {
	value := pulumix.Apply[PipeSourceParameters](o, func(v PipeSourceParameters) *PipeSourceParametersSqsQueueParameters { return v.SqsQueueParameters })
	return pulumix.GPtrOutput[PipeSourceParametersSqsQueueParameters, PipeSourceParametersSqsQueueParametersOutput]{OutputState: value.OutputState}
}

type PipeSourceParametersActivemqBrokerParameters struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *int `pulumi:"batchSize"`
	// The credentials needed to access the resource. Detailed below.
	Credentials PipeSourceParametersActivemqBrokerParametersCredentials `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
	// The name of the destination queue to consume. Maximum length of 1000.
	QueueName string `pulumi:"queueName"`
}

type PipeSourceParametersActivemqBrokerParametersArgs struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize pulumix.Input[*int] `pulumi:"batchSize"`
	// The credentials needed to access the resource. Detailed below.
	Credentials pulumix.Input[*PipeSourceParametersActivemqBrokerParametersCredentialsArgs] `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds pulumix.Input[*int] `pulumi:"maximumBatchingWindowInSeconds"`
	// The name of the destination queue to consume. Maximum length of 1000.
	QueueName pulumix.Input[string] `pulumi:"queueName"`
}

func (PipeSourceParametersActivemqBrokerParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersActivemqBrokerParameters)(nil)).Elem()
}

func (i PipeSourceParametersActivemqBrokerParametersArgs) ToPipeSourceParametersActivemqBrokerParametersOutput() PipeSourceParametersActivemqBrokerParametersOutput {
	return i.ToPipeSourceParametersActivemqBrokerParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersActivemqBrokerParametersArgs) ToPipeSourceParametersActivemqBrokerParametersOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersActivemqBrokerParametersOutput)
}

func (i *PipeSourceParametersActivemqBrokerParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersActivemqBrokerParametersArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersActivemqBrokerParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersActivemqBrokerParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersActivemqBrokerParameters)(nil)).Elem()
}

func (o PipeSourceParametersActivemqBrokerParametersOutput) ToPipeSourceParametersActivemqBrokerParametersOutput() PipeSourceParametersActivemqBrokerParametersOutput {
	return o
}

func (o PipeSourceParametersActivemqBrokerParametersOutput) ToPipeSourceParametersActivemqBrokerParametersOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersOutput {
	return o
}

func (o PipeSourceParametersActivemqBrokerParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersActivemqBrokerParameters] {
	return pulumix.Output[PipeSourceParametersActivemqBrokerParameters]{
		OutputState: o.OutputState,
	}
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersActivemqBrokerParametersOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersActivemqBrokerParameters](o, func(v PipeSourceParametersActivemqBrokerParameters) *int { return v.BatchSize })
}

// The credentials needed to access the resource. Detailed below.
func (o PipeSourceParametersActivemqBrokerParametersOutput) Credentials() pulumix.GPtrOutput[PipeSourceParametersActivemqBrokerParametersCredentials, PipeSourceParametersActivemqBrokerParametersCredentialsOutput] {
	value := pulumix.Apply[PipeSourceParametersActivemqBrokerParameters](o, func(v PipeSourceParametersActivemqBrokerParameters) PipeSourceParametersActivemqBrokerParametersCredentials {
		return v.Credentials
	})
	return pulumix.GPtrOutput[PipeSourceParametersActivemqBrokerParametersCredentials, PipeSourceParametersActivemqBrokerParametersCredentialsOutput]{OutputState: value.OutputState}
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersActivemqBrokerParametersOutput) MaximumBatchingWindowInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersActivemqBrokerParameters](o, func(v PipeSourceParametersActivemqBrokerParameters) *int { return v.MaximumBatchingWindowInSeconds })
}

// The name of the destination queue to consume. Maximum length of 1000.
func (o PipeSourceParametersActivemqBrokerParametersOutput) QueueName() pulumix.Output[string] {
	return pulumix.Apply[PipeSourceParametersActivemqBrokerParameters](o, func(v PipeSourceParametersActivemqBrokerParameters) string { return v.QueueName })
}

type PipeSourceParametersActivemqBrokerParametersCredentials struct {
	// The ARN of the Secrets Manager secret containing the basic auth credentials.
	BasicAuth string `pulumi:"basicAuth"`
}

type PipeSourceParametersActivemqBrokerParametersCredentialsArgs struct {
	// The ARN of the Secrets Manager secret containing the basic auth credentials.
	BasicAuth pulumix.Input[string] `pulumi:"basicAuth"`
}

func (PipeSourceParametersActivemqBrokerParametersCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersActivemqBrokerParametersCredentials)(nil)).Elem()
}

func (i PipeSourceParametersActivemqBrokerParametersCredentialsArgs) ToPipeSourceParametersActivemqBrokerParametersCredentialsOutput() PipeSourceParametersActivemqBrokerParametersCredentialsOutput {
	return i.ToPipeSourceParametersActivemqBrokerParametersCredentialsOutputWithContext(context.Background())
}

func (i PipeSourceParametersActivemqBrokerParametersCredentialsArgs) ToPipeSourceParametersActivemqBrokerParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersActivemqBrokerParametersCredentialsOutput)
}

func (i *PipeSourceParametersActivemqBrokerParametersCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersActivemqBrokerParametersCredentialsArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersActivemqBrokerParametersCredentialsOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersActivemqBrokerParametersCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersActivemqBrokerParametersCredentials)(nil)).Elem()
}

func (o PipeSourceParametersActivemqBrokerParametersCredentialsOutput) ToPipeSourceParametersActivemqBrokerParametersCredentialsOutput() PipeSourceParametersActivemqBrokerParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersActivemqBrokerParametersCredentialsOutput) ToPipeSourceParametersActivemqBrokerParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersActivemqBrokerParametersCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersActivemqBrokerParametersCredentials] {
	return pulumix.Output[PipeSourceParametersActivemqBrokerParametersCredentials]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Secrets Manager secret containing the basic auth credentials.
func (o PipeSourceParametersActivemqBrokerParametersCredentialsOutput) BasicAuth() pulumix.Output[string] {
	return pulumix.Apply[PipeSourceParametersActivemqBrokerParametersCredentials](o, func(v PipeSourceParametersActivemqBrokerParametersCredentials) string { return v.BasicAuth })
}

type PipeSourceParametersDynamodbStreamParameters struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *int `pulumi:"batchSize"`
	// Define the target queue to send dead-letter queue events to. Detailed below.
	DeadLetterConfig *PipeSourceParametersDynamodbStreamParametersDeadLetterConfig `pulumi:"deadLetterConfig"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
	// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
	MaximumRecordAgeInSeconds *int `pulumi:"maximumRecordAgeInSeconds"`
	// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
	MaximumRetryAttempts *int `pulumi:"maximumRetryAttempts"`
	// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
	OnPartialBatchItemFailure *string `pulumi:"onPartialBatchItemFailure"`
	// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
	ParallelizationFactor *int `pulumi:"parallelizationFactor"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition string `pulumi:"startingPosition"`
}

type PipeSourceParametersDynamodbStreamParametersArgs struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize pulumix.Input[*int] `pulumi:"batchSize"`
	// Define the target queue to send dead-letter queue events to. Detailed below.
	DeadLetterConfig pulumix.Input[*PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs] `pulumi:"deadLetterConfig"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds pulumix.Input[*int] `pulumi:"maximumBatchingWindowInSeconds"`
	// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
	MaximumRecordAgeInSeconds pulumix.Input[*int] `pulumi:"maximumRecordAgeInSeconds"`
	// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
	MaximumRetryAttempts pulumix.Input[*int] `pulumi:"maximumRetryAttempts"`
	// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
	OnPartialBatchItemFailure pulumix.Input[*string] `pulumi:"onPartialBatchItemFailure"`
	// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
	ParallelizationFactor pulumix.Input[*int] `pulumi:"parallelizationFactor"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition pulumix.Input[string] `pulumi:"startingPosition"`
}

func (PipeSourceParametersDynamodbStreamParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersDynamodbStreamParameters)(nil)).Elem()
}

func (i PipeSourceParametersDynamodbStreamParametersArgs) ToPipeSourceParametersDynamodbStreamParametersOutput() PipeSourceParametersDynamodbStreamParametersOutput {
	return i.ToPipeSourceParametersDynamodbStreamParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersDynamodbStreamParametersArgs) ToPipeSourceParametersDynamodbStreamParametersOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersDynamodbStreamParametersOutput)
}

func (i *PipeSourceParametersDynamodbStreamParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersDynamodbStreamParametersArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersDynamodbStreamParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersDynamodbStreamParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersDynamodbStreamParameters)(nil)).Elem()
}

func (o PipeSourceParametersDynamodbStreamParametersOutput) ToPipeSourceParametersDynamodbStreamParametersOutput() PipeSourceParametersDynamodbStreamParametersOutput {
	return o
}

func (o PipeSourceParametersDynamodbStreamParametersOutput) ToPipeSourceParametersDynamodbStreamParametersOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersOutput {
	return o
}

func (o PipeSourceParametersDynamodbStreamParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersDynamodbStreamParameters] {
	return pulumix.Output[PipeSourceParametersDynamodbStreamParameters]{
		OutputState: o.OutputState,
	}
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersDynamodbStreamParametersOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersDynamodbStreamParameters](o, func(v PipeSourceParametersDynamodbStreamParameters) *int { return v.BatchSize })
}

// Define the target queue to send dead-letter queue events to. Detailed below.
func (o PipeSourceParametersDynamodbStreamParametersOutput) DeadLetterConfig() pulumix.GPtrOutput[PipeSourceParametersDynamodbStreamParametersDeadLetterConfig, PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput] {
	value := pulumix.Apply[PipeSourceParametersDynamodbStreamParameters](o, func(v PipeSourceParametersDynamodbStreamParameters) *PipeSourceParametersDynamodbStreamParametersDeadLetterConfig {
		return v.DeadLetterConfig
	})
	return pulumix.GPtrOutput[PipeSourceParametersDynamodbStreamParametersDeadLetterConfig, PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput]{OutputState: value.OutputState}
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersDynamodbStreamParametersOutput) MaximumBatchingWindowInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersDynamodbStreamParameters](o, func(v PipeSourceParametersDynamodbStreamParameters) *int { return v.MaximumBatchingWindowInSeconds })
}

// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
func (o PipeSourceParametersDynamodbStreamParametersOutput) MaximumRecordAgeInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersDynamodbStreamParameters](o, func(v PipeSourceParametersDynamodbStreamParameters) *int { return v.MaximumRecordAgeInSeconds })
}

// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
func (o PipeSourceParametersDynamodbStreamParametersOutput) MaximumRetryAttempts() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersDynamodbStreamParameters](o, func(v PipeSourceParametersDynamodbStreamParameters) *int { return v.MaximumRetryAttempts })
}

// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
func (o PipeSourceParametersDynamodbStreamParametersOutput) OnPartialBatchItemFailure() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersDynamodbStreamParameters](o, func(v PipeSourceParametersDynamodbStreamParameters) *string { return v.OnPartialBatchItemFailure })
}

// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
func (o PipeSourceParametersDynamodbStreamParametersOutput) ParallelizationFactor() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersDynamodbStreamParameters](o, func(v PipeSourceParametersDynamodbStreamParameters) *int { return v.ParallelizationFactor })
}

// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
func (o PipeSourceParametersDynamodbStreamParametersOutput) StartingPosition() pulumix.Output[string] {
	return pulumix.Apply[PipeSourceParametersDynamodbStreamParameters](o, func(v PipeSourceParametersDynamodbStreamParameters) string { return v.StartingPosition })
}

type PipeSourceParametersDynamodbStreamParametersDeadLetterConfig struct {
	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn *string `pulumi:"arn"`
}

type PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs struct {
	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn pulumix.Input[*string] `pulumi:"arn"`
}

func (PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersDynamodbStreamParametersDeadLetterConfig)(nil)).Elem()
}

func (i PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput() PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput {
	return i.ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutputWithContext(context.Background())
}

func (i PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput)
}

func (i *PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersDynamodbStreamParametersDeadLetterConfig)(nil)).Elem()
}

func (o PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput() PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput {
	return o
}

func (o PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput {
	return o
}

func (o PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersDynamodbStreamParametersDeadLetterConfig] {
	return pulumix.Output[PipeSourceParametersDynamodbStreamParametersDeadLetterConfig]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
func (o PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersDynamodbStreamParametersDeadLetterConfig](o, func(v PipeSourceParametersDynamodbStreamParametersDeadLetterConfig) *string { return v.Arn })
}

type PipeSourceParametersFilterCriteria struct {
	// An array of up to 5 event patterns. Detailed below.
	Filters []PipeSourceParametersFilterCriteriaFilter `pulumi:"filters"`
}

type PipeSourceParametersFilterCriteriaArgs struct {
	// An array of up to 5 event patterns. Detailed below.
	Filters pulumix.Input[[]*PipeSourceParametersFilterCriteriaFilterArgs] `pulumi:"filters"`
}

func (PipeSourceParametersFilterCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersFilterCriteria)(nil)).Elem()
}

func (i PipeSourceParametersFilterCriteriaArgs) ToPipeSourceParametersFilterCriteriaOutput() PipeSourceParametersFilterCriteriaOutput {
	return i.ToPipeSourceParametersFilterCriteriaOutputWithContext(context.Background())
}

func (i PipeSourceParametersFilterCriteriaArgs) ToPipeSourceParametersFilterCriteriaOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersFilterCriteriaOutput)
}

func (i *PipeSourceParametersFilterCriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersFilterCriteriaArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersFilterCriteriaOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersFilterCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersFilterCriteria)(nil)).Elem()
}

func (o PipeSourceParametersFilterCriteriaOutput) ToPipeSourceParametersFilterCriteriaOutput() PipeSourceParametersFilterCriteriaOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaOutput) ToPipeSourceParametersFilterCriteriaOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersFilterCriteria] {
	return pulumix.Output[PipeSourceParametersFilterCriteria]{
		OutputState: o.OutputState,
	}
}

// An array of up to 5 event patterns. Detailed below.
func (o PipeSourceParametersFilterCriteriaOutput) Filters() pulumix.GArrayOutput[PipeSourceParametersFilterCriteriaFilter, PipeSourceParametersFilterCriteriaFilterOutput] {
	value := pulumix.Apply[PipeSourceParametersFilterCriteria](o, func(v PipeSourceParametersFilterCriteria) []PipeSourceParametersFilterCriteriaFilter {
		return v.Filters
	})
	return pulumix.GArrayOutput[PipeSourceParametersFilterCriteriaFilter, PipeSourceParametersFilterCriteriaFilterOutput]{OutputState: value.OutputState}
}

type PipeSourceParametersFilterCriteriaFilter struct {
	// The event pattern. At most 4096 characters.
	Pattern string `pulumi:"pattern"`
}

type PipeSourceParametersFilterCriteriaFilterArgs struct {
	// The event pattern. At most 4096 characters.
	Pattern pulumix.Input[string] `pulumi:"pattern"`
}

func (PipeSourceParametersFilterCriteriaFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersFilterCriteriaFilter)(nil)).Elem()
}

func (i PipeSourceParametersFilterCriteriaFilterArgs) ToPipeSourceParametersFilterCriteriaFilterOutput() PipeSourceParametersFilterCriteriaFilterOutput {
	return i.ToPipeSourceParametersFilterCriteriaFilterOutputWithContext(context.Background())
}

func (i PipeSourceParametersFilterCriteriaFilterArgs) ToPipeSourceParametersFilterCriteriaFilterOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersFilterCriteriaFilterOutput)
}

func (i *PipeSourceParametersFilterCriteriaFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersFilterCriteriaFilterArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersFilterCriteriaFilterOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersFilterCriteriaFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersFilterCriteriaFilter)(nil)).Elem()
}

func (o PipeSourceParametersFilterCriteriaFilterOutput) ToPipeSourceParametersFilterCriteriaFilterOutput() PipeSourceParametersFilterCriteriaFilterOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaFilterOutput) ToPipeSourceParametersFilterCriteriaFilterOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaFilterOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaFilterOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersFilterCriteriaFilter] {
	return pulumix.Output[PipeSourceParametersFilterCriteriaFilter]{
		OutputState: o.OutputState,
	}
}

// The event pattern. At most 4096 characters.
func (o PipeSourceParametersFilterCriteriaFilterOutput) Pattern() pulumix.Output[string] {
	return pulumix.Apply[PipeSourceParametersFilterCriteriaFilter](o, func(v PipeSourceParametersFilterCriteriaFilter) string { return v.Pattern })
}

type PipeSourceParametersKinesisStreamParameters struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *int `pulumi:"batchSize"`
	// Define the target queue to send dead-letter queue events to. Detailed below.
	DeadLetterConfig *PipeSourceParametersKinesisStreamParametersDeadLetterConfig `pulumi:"deadLetterConfig"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
	// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
	MaximumRecordAgeInSeconds *int `pulumi:"maximumRecordAgeInSeconds"`
	// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
	MaximumRetryAttempts *int `pulumi:"maximumRetryAttempts"`
	// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
	OnPartialBatchItemFailure *string `pulumi:"onPartialBatchItemFailure"`
	// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
	ParallelizationFactor *int `pulumi:"parallelizationFactor"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition string `pulumi:"startingPosition"`
	// With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
	StartingPositionTimestamp *string `pulumi:"startingPositionTimestamp"`
}

type PipeSourceParametersKinesisStreamParametersArgs struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize pulumix.Input[*int] `pulumi:"batchSize"`
	// Define the target queue to send dead-letter queue events to. Detailed below.
	DeadLetterConfig pulumix.Input[*PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs] `pulumi:"deadLetterConfig"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds pulumix.Input[*int] `pulumi:"maximumBatchingWindowInSeconds"`
	// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
	MaximumRecordAgeInSeconds pulumix.Input[*int] `pulumi:"maximumRecordAgeInSeconds"`
	// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
	MaximumRetryAttempts pulumix.Input[*int] `pulumi:"maximumRetryAttempts"`
	// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
	OnPartialBatchItemFailure pulumix.Input[*string] `pulumi:"onPartialBatchItemFailure"`
	// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
	ParallelizationFactor pulumix.Input[*int] `pulumi:"parallelizationFactor"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition pulumix.Input[string] `pulumi:"startingPosition"`
	// With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
	StartingPositionTimestamp pulumix.Input[*string] `pulumi:"startingPositionTimestamp"`
}

func (PipeSourceParametersKinesisStreamParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersKinesisStreamParameters)(nil)).Elem()
}

func (i PipeSourceParametersKinesisStreamParametersArgs) ToPipeSourceParametersKinesisStreamParametersOutput() PipeSourceParametersKinesisStreamParametersOutput {
	return i.ToPipeSourceParametersKinesisStreamParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersKinesisStreamParametersArgs) ToPipeSourceParametersKinesisStreamParametersOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersKinesisStreamParametersOutput)
}

func (i *PipeSourceParametersKinesisStreamParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersKinesisStreamParametersArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersKinesisStreamParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersKinesisStreamParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersKinesisStreamParameters)(nil)).Elem()
}

func (o PipeSourceParametersKinesisStreamParametersOutput) ToPipeSourceParametersKinesisStreamParametersOutput() PipeSourceParametersKinesisStreamParametersOutput {
	return o
}

func (o PipeSourceParametersKinesisStreamParametersOutput) ToPipeSourceParametersKinesisStreamParametersOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersOutput {
	return o
}

func (o PipeSourceParametersKinesisStreamParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersKinesisStreamParameters] {
	return pulumix.Output[PipeSourceParametersKinesisStreamParameters]{
		OutputState: o.OutputState,
	}
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersKinesisStreamParametersOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersKinesisStreamParameters](o, func(v PipeSourceParametersKinesisStreamParameters) *int { return v.BatchSize })
}

// Define the target queue to send dead-letter queue events to. Detailed below.
func (o PipeSourceParametersKinesisStreamParametersOutput) DeadLetterConfig() pulumix.GPtrOutput[PipeSourceParametersKinesisStreamParametersDeadLetterConfig, PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput] {
	value := pulumix.Apply[PipeSourceParametersKinesisStreamParameters](o, func(v PipeSourceParametersKinesisStreamParameters) *PipeSourceParametersKinesisStreamParametersDeadLetterConfig {
		return v.DeadLetterConfig
	})
	return pulumix.GPtrOutput[PipeSourceParametersKinesisStreamParametersDeadLetterConfig, PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput]{OutputState: value.OutputState}
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersKinesisStreamParametersOutput) MaximumBatchingWindowInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersKinesisStreamParameters](o, func(v PipeSourceParametersKinesisStreamParameters) *int { return v.MaximumBatchingWindowInSeconds })
}

// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
func (o PipeSourceParametersKinesisStreamParametersOutput) MaximumRecordAgeInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersKinesisStreamParameters](o, func(v PipeSourceParametersKinesisStreamParameters) *int { return v.MaximumRecordAgeInSeconds })
}

// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
func (o PipeSourceParametersKinesisStreamParametersOutput) MaximumRetryAttempts() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersKinesisStreamParameters](o, func(v PipeSourceParametersKinesisStreamParameters) *int { return v.MaximumRetryAttempts })
}

// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
func (o PipeSourceParametersKinesisStreamParametersOutput) OnPartialBatchItemFailure() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersKinesisStreamParameters](o, func(v PipeSourceParametersKinesisStreamParameters) *string { return v.OnPartialBatchItemFailure })
}

// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
func (o PipeSourceParametersKinesisStreamParametersOutput) ParallelizationFactor() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersKinesisStreamParameters](o, func(v PipeSourceParametersKinesisStreamParameters) *int { return v.ParallelizationFactor })
}

// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
func (o PipeSourceParametersKinesisStreamParametersOutput) StartingPosition() pulumix.Output[string] {
	return pulumix.Apply[PipeSourceParametersKinesisStreamParameters](o, func(v PipeSourceParametersKinesisStreamParameters) string { return v.StartingPosition })
}

// With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
func (o PipeSourceParametersKinesisStreamParametersOutput) StartingPositionTimestamp() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersKinesisStreamParameters](o, func(v PipeSourceParametersKinesisStreamParameters) *string { return v.StartingPositionTimestamp })
}

type PipeSourceParametersKinesisStreamParametersDeadLetterConfig struct {
	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn *string `pulumi:"arn"`
}

type PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs struct {
	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn pulumix.Input[*string] `pulumi:"arn"`
}

func (PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersKinesisStreamParametersDeadLetterConfig)(nil)).Elem()
}

func (i PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput() PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput {
	return i.ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigOutputWithContext(context.Background())
}

func (i PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput)
}

func (i *PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersKinesisStreamParametersDeadLetterConfig)(nil)).Elem()
}

func (o PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput() PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput {
	return o
}

func (o PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput {
	return o
}

func (o PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersKinesisStreamParametersDeadLetterConfig] {
	return pulumix.Output[PipeSourceParametersKinesisStreamParametersDeadLetterConfig]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
func (o PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersKinesisStreamParametersDeadLetterConfig](o, func(v PipeSourceParametersKinesisStreamParametersDeadLetterConfig) *string { return v.Arn })
}

type PipeSourceParametersManagedStreamingKafkaParameters struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *int `pulumi:"batchSize"`
	// The name of the destination queue to consume. Maximum value of 200.
	ConsumerGroupId *string `pulumi:"consumerGroupId"`
	// The credentials needed to access the resource. Detailed below.
	Credentials *PipeSourceParametersManagedStreamingKafkaParametersCredentials `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition *string `pulumi:"startingPosition"`
	// The name of the topic that the pipe will read from. Maximum length of 249.
	TopicName string `pulumi:"topicName"`
}

type PipeSourceParametersManagedStreamingKafkaParametersArgs struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize pulumix.Input[*int] `pulumi:"batchSize"`
	// The name of the destination queue to consume. Maximum value of 200.
	ConsumerGroupId pulumix.Input[*string] `pulumi:"consumerGroupId"`
	// The credentials needed to access the resource. Detailed below.
	Credentials pulumix.Input[*PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs] `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds pulumix.Input[*int] `pulumi:"maximumBatchingWindowInSeconds"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition pulumix.Input[*string] `pulumi:"startingPosition"`
	// The name of the topic that the pipe will read from. Maximum length of 249.
	TopicName pulumix.Input[string] `pulumi:"topicName"`
}

func (PipeSourceParametersManagedStreamingKafkaParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersManagedStreamingKafkaParameters)(nil)).Elem()
}

func (i PipeSourceParametersManagedStreamingKafkaParametersArgs) ToPipeSourceParametersManagedStreamingKafkaParametersOutput() PipeSourceParametersManagedStreamingKafkaParametersOutput {
	return i.ToPipeSourceParametersManagedStreamingKafkaParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersManagedStreamingKafkaParametersArgs) ToPipeSourceParametersManagedStreamingKafkaParametersOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersManagedStreamingKafkaParametersOutput)
}

func (i *PipeSourceParametersManagedStreamingKafkaParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersManagedStreamingKafkaParametersArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersManagedStreamingKafkaParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersManagedStreamingKafkaParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersManagedStreamingKafkaParameters)(nil)).Elem()
}

func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) ToPipeSourceParametersManagedStreamingKafkaParametersOutput() PipeSourceParametersManagedStreamingKafkaParametersOutput {
	return o
}

func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) ToPipeSourceParametersManagedStreamingKafkaParametersOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersOutput {
	return o
}

func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersManagedStreamingKafkaParameters] {
	return pulumix.Output[PipeSourceParametersManagedStreamingKafkaParameters]{
		OutputState: o.OutputState,
	}
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersManagedStreamingKafkaParameters](o, func(v PipeSourceParametersManagedStreamingKafkaParameters) *int { return v.BatchSize })
}

// The name of the destination queue to consume. Maximum value of 200.
func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) ConsumerGroupId() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersManagedStreamingKafkaParameters](o, func(v PipeSourceParametersManagedStreamingKafkaParameters) *string { return v.ConsumerGroupId })
}

// The credentials needed to access the resource. Detailed below.
func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) Credentials() pulumix.GPtrOutput[PipeSourceParametersManagedStreamingKafkaParametersCredentials, PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput] {
	value := pulumix.Apply[PipeSourceParametersManagedStreamingKafkaParameters](o, func(v PipeSourceParametersManagedStreamingKafkaParameters) *PipeSourceParametersManagedStreamingKafkaParametersCredentials {
		return v.Credentials
	})
	return pulumix.GPtrOutput[PipeSourceParametersManagedStreamingKafkaParametersCredentials, PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput]{OutputState: value.OutputState}
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) MaximumBatchingWindowInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersManagedStreamingKafkaParameters](o, func(v PipeSourceParametersManagedStreamingKafkaParameters) *int {
		return v.MaximumBatchingWindowInSeconds
	})
}

// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) StartingPosition() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersManagedStreamingKafkaParameters](o, func(v PipeSourceParametersManagedStreamingKafkaParameters) *string { return v.StartingPosition })
}

// The name of the topic that the pipe will read from. Maximum length of 249.
func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) TopicName() pulumix.Output[string] {
	return pulumix.Apply[PipeSourceParametersManagedStreamingKafkaParameters](o, func(v PipeSourceParametersManagedStreamingKafkaParameters) string { return v.TopicName })
}

type PipeSourceParametersManagedStreamingKafkaParametersCredentials struct {
	// The ARN of the Secrets Manager secret containing the credentials.
	ClientCertificateTlsAuth *string `pulumi:"clientCertificateTlsAuth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram512Auth *string `pulumi:"saslScram512Auth"`
}

type PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs struct {
	// The ARN of the Secrets Manager secret containing the credentials.
	ClientCertificateTlsAuth pulumix.Input[*string] `pulumi:"clientCertificateTlsAuth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram512Auth pulumix.Input[*string] `pulumi:"saslScram512Auth"`
}

func (PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersManagedStreamingKafkaParametersCredentials)(nil)).Elem()
}

func (i PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput() PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput {
	return i.ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsOutputWithContext(context.Background())
}

func (i PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput)
}

func (i *PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersManagedStreamingKafkaParametersCredentials)(nil)).Elem()
}

func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput() PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersManagedStreamingKafkaParametersCredentials] {
	return pulumix.Output[PipeSourceParametersManagedStreamingKafkaParametersCredentials]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput) ClientCertificateTlsAuth() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersManagedStreamingKafkaParametersCredentials](o, func(v PipeSourceParametersManagedStreamingKafkaParametersCredentials) *string {
		return v.ClientCertificateTlsAuth
	})
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput) SaslScram512Auth() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersManagedStreamingKafkaParametersCredentials](o, func(v PipeSourceParametersManagedStreamingKafkaParametersCredentials) *string {
		return v.SaslScram512Auth
	})
}

type PipeSourceParametersRabbitmqBrokerParameters struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *int `pulumi:"batchSize"`
	// The credentials needed to access the resource. Detailed below.
	Credentials PipeSourceParametersRabbitmqBrokerParametersCredentials `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
	// The name of the destination queue to consume. Maximum length of 1000.
	QueueName string `pulumi:"queueName"`
	// The name of the virtual host associated with the source broker. Maximum length of 200.
	VirtualHost *string `pulumi:"virtualHost"`
}

type PipeSourceParametersRabbitmqBrokerParametersArgs struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize pulumix.Input[*int] `pulumi:"batchSize"`
	// The credentials needed to access the resource. Detailed below.
	Credentials pulumix.Input[*PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs] `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds pulumix.Input[*int] `pulumi:"maximumBatchingWindowInSeconds"`
	// The name of the destination queue to consume. Maximum length of 1000.
	QueueName pulumix.Input[string] `pulumi:"queueName"`
	// The name of the virtual host associated with the source broker. Maximum length of 200.
	VirtualHost pulumix.Input[*string] `pulumi:"virtualHost"`
}

func (PipeSourceParametersRabbitmqBrokerParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersRabbitmqBrokerParameters)(nil)).Elem()
}

func (i PipeSourceParametersRabbitmqBrokerParametersArgs) ToPipeSourceParametersRabbitmqBrokerParametersOutput() PipeSourceParametersRabbitmqBrokerParametersOutput {
	return i.ToPipeSourceParametersRabbitmqBrokerParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersRabbitmqBrokerParametersArgs) ToPipeSourceParametersRabbitmqBrokerParametersOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersRabbitmqBrokerParametersOutput)
}

func (i *PipeSourceParametersRabbitmqBrokerParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersRabbitmqBrokerParametersArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersRabbitmqBrokerParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersRabbitmqBrokerParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersRabbitmqBrokerParameters)(nil)).Elem()
}

func (o PipeSourceParametersRabbitmqBrokerParametersOutput) ToPipeSourceParametersRabbitmqBrokerParametersOutput() PipeSourceParametersRabbitmqBrokerParametersOutput {
	return o
}

func (o PipeSourceParametersRabbitmqBrokerParametersOutput) ToPipeSourceParametersRabbitmqBrokerParametersOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersOutput {
	return o
}

func (o PipeSourceParametersRabbitmqBrokerParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersRabbitmqBrokerParameters] {
	return pulumix.Output[PipeSourceParametersRabbitmqBrokerParameters]{
		OutputState: o.OutputState,
	}
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersRabbitmqBrokerParametersOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersRabbitmqBrokerParameters](o, func(v PipeSourceParametersRabbitmqBrokerParameters) *int { return v.BatchSize })
}

// The credentials needed to access the resource. Detailed below.
func (o PipeSourceParametersRabbitmqBrokerParametersOutput) Credentials() pulumix.GPtrOutput[PipeSourceParametersRabbitmqBrokerParametersCredentials, PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput] {
	value := pulumix.Apply[PipeSourceParametersRabbitmqBrokerParameters](o, func(v PipeSourceParametersRabbitmqBrokerParameters) PipeSourceParametersRabbitmqBrokerParametersCredentials {
		return v.Credentials
	})
	return pulumix.GPtrOutput[PipeSourceParametersRabbitmqBrokerParametersCredentials, PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput]{OutputState: value.OutputState}
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersRabbitmqBrokerParametersOutput) MaximumBatchingWindowInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersRabbitmqBrokerParameters](o, func(v PipeSourceParametersRabbitmqBrokerParameters) *int { return v.MaximumBatchingWindowInSeconds })
}

// The name of the destination queue to consume. Maximum length of 1000.
func (o PipeSourceParametersRabbitmqBrokerParametersOutput) QueueName() pulumix.Output[string] {
	return pulumix.Apply[PipeSourceParametersRabbitmqBrokerParameters](o, func(v PipeSourceParametersRabbitmqBrokerParameters) string { return v.QueueName })
}

// The name of the virtual host associated with the source broker. Maximum length of 200.
func (o PipeSourceParametersRabbitmqBrokerParametersOutput) VirtualHost() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersRabbitmqBrokerParameters](o, func(v PipeSourceParametersRabbitmqBrokerParameters) *string { return v.VirtualHost })
}

type PipeSourceParametersRabbitmqBrokerParametersCredentials struct {
	// The ARN of the Secrets Manager secret containing the basic auth credentials.
	BasicAuth string `pulumi:"basicAuth"`
}

type PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs struct {
	// The ARN of the Secrets Manager secret containing the basic auth credentials.
	BasicAuth pulumix.Input[string] `pulumi:"basicAuth"`
}

func (PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersRabbitmqBrokerParametersCredentials)(nil)).Elem()
}

func (i PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsOutput() PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput {
	return i.ToPipeSourceParametersRabbitmqBrokerParametersCredentialsOutputWithContext(context.Background())
}

func (i PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput)
}

func (i *PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersRabbitmqBrokerParametersCredentials)(nil)).Elem()
}

func (o PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsOutput() PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersRabbitmqBrokerParametersCredentials] {
	return pulumix.Output[PipeSourceParametersRabbitmqBrokerParametersCredentials]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Secrets Manager secret containing the basic auth credentials.
func (o PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput) BasicAuth() pulumix.Output[string] {
	return pulumix.Apply[PipeSourceParametersRabbitmqBrokerParametersCredentials](o, func(v PipeSourceParametersRabbitmqBrokerParametersCredentials) string { return v.BasicAuth })
}

type PipeSourceParametersSelfManagedKafkaParameters struct {
	// An array of server URLs. Maximum number of 2 items, each of maximum length 300.
	AdditionalBootstrapServers []string `pulumi:"additionalBootstrapServers"`
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *int `pulumi:"batchSize"`
	// The name of the destination queue to consume. Maximum value of 200.
	ConsumerGroupId *string `pulumi:"consumerGroupId"`
	// The credentials needed to access the resource. Detailed below.
	Credentials *PipeSourceParametersSelfManagedKafkaParametersCredentials `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
	// The ARN of the Secrets Manager secret used for certification.
	ServerRootCaCertificate *string `pulumi:"serverRootCaCertificate"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition *string `pulumi:"startingPosition"`
	// The name of the topic that the pipe will read from. Maximum length of 249.
	TopicName string `pulumi:"topicName"`
	// This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.
	Vpc *PipeSourceParametersSelfManagedKafkaParametersVpc `pulumi:"vpc"`
}

type PipeSourceParametersSelfManagedKafkaParametersArgs struct {
	// An array of server URLs. Maximum number of 2 items, each of maximum length 300.
	AdditionalBootstrapServers pulumix.Input[[]string] `pulumi:"additionalBootstrapServers"`
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize pulumix.Input[*int] `pulumi:"batchSize"`
	// The name of the destination queue to consume. Maximum value of 200.
	ConsumerGroupId pulumix.Input[*string] `pulumi:"consumerGroupId"`
	// The credentials needed to access the resource. Detailed below.
	Credentials pulumix.Input[*PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs] `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds pulumix.Input[*int] `pulumi:"maximumBatchingWindowInSeconds"`
	// The ARN of the Secrets Manager secret used for certification.
	ServerRootCaCertificate pulumix.Input[*string] `pulumi:"serverRootCaCertificate"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition pulumix.Input[*string] `pulumi:"startingPosition"`
	// The name of the topic that the pipe will read from. Maximum length of 249.
	TopicName pulumix.Input[string] `pulumi:"topicName"`
	// This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.
	Vpc pulumix.Input[*PipeSourceParametersSelfManagedKafkaParametersVpcArgs] `pulumi:"vpc"`
}

func (PipeSourceParametersSelfManagedKafkaParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParameters)(nil)).Elem()
}

func (i PipeSourceParametersSelfManagedKafkaParametersArgs) ToPipeSourceParametersSelfManagedKafkaParametersOutput() PipeSourceParametersSelfManagedKafkaParametersOutput {
	return i.ToPipeSourceParametersSelfManagedKafkaParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersSelfManagedKafkaParametersArgs) ToPipeSourceParametersSelfManagedKafkaParametersOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSelfManagedKafkaParametersOutput)
}

func (i *PipeSourceParametersSelfManagedKafkaParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersSelfManagedKafkaParametersArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersSelfManagedKafkaParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersSelfManagedKafkaParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParameters)(nil)).Elem()
}

func (o PipeSourceParametersSelfManagedKafkaParametersOutput) ToPipeSourceParametersSelfManagedKafkaParametersOutput() PipeSourceParametersSelfManagedKafkaParametersOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersOutput) ToPipeSourceParametersSelfManagedKafkaParametersOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersSelfManagedKafkaParameters] {
	return pulumix.Output[PipeSourceParametersSelfManagedKafkaParameters]{
		OutputState: o.OutputState,
	}
}

// An array of server URLs. Maximum number of 2 items, each of maximum length 300.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) AdditionalBootstrapServers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PipeSourceParametersSelfManagedKafkaParameters](o, func(v PipeSourceParametersSelfManagedKafkaParameters) []string { return v.AdditionalBootstrapServers })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersSelfManagedKafkaParameters](o, func(v PipeSourceParametersSelfManagedKafkaParameters) *int { return v.BatchSize })
}

// The name of the destination queue to consume. Maximum value of 200.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) ConsumerGroupId() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersSelfManagedKafkaParameters](o, func(v PipeSourceParametersSelfManagedKafkaParameters) *string { return v.ConsumerGroupId })
}

// The credentials needed to access the resource. Detailed below.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) Credentials() pulumix.GPtrOutput[PipeSourceParametersSelfManagedKafkaParametersCredentials, PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput] {
	value := pulumix.Apply[PipeSourceParametersSelfManagedKafkaParameters](o, func(v PipeSourceParametersSelfManagedKafkaParameters) *PipeSourceParametersSelfManagedKafkaParametersCredentials {
		return v.Credentials
	})
	return pulumix.GPtrOutput[PipeSourceParametersSelfManagedKafkaParametersCredentials, PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput]{OutputState: value.OutputState}
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) MaximumBatchingWindowInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersSelfManagedKafkaParameters](o, func(v PipeSourceParametersSelfManagedKafkaParameters) *int { return v.MaximumBatchingWindowInSeconds })
}

// The ARN of the Secrets Manager secret used for certification.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) ServerRootCaCertificate() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersSelfManagedKafkaParameters](o, func(v PipeSourceParametersSelfManagedKafkaParameters) *string { return v.ServerRootCaCertificate })
}

// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) StartingPosition() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersSelfManagedKafkaParameters](o, func(v PipeSourceParametersSelfManagedKafkaParameters) *string { return v.StartingPosition })
}

// The name of the topic that the pipe will read from. Maximum length of 249.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) TopicName() pulumix.Output[string] {
	return pulumix.Apply[PipeSourceParametersSelfManagedKafkaParameters](o, func(v PipeSourceParametersSelfManagedKafkaParameters) string { return v.TopicName })
}

// This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) Vpc() pulumix.GPtrOutput[PipeSourceParametersSelfManagedKafkaParametersVpc, PipeSourceParametersSelfManagedKafkaParametersVpcOutput] {
	value := pulumix.Apply[PipeSourceParametersSelfManagedKafkaParameters](o, func(v PipeSourceParametersSelfManagedKafkaParameters) *PipeSourceParametersSelfManagedKafkaParametersVpc {
		return v.Vpc
	})
	return pulumix.GPtrOutput[PipeSourceParametersSelfManagedKafkaParametersVpc, PipeSourceParametersSelfManagedKafkaParametersVpcOutput]{OutputState: value.OutputState}
}

type PipeSourceParametersSelfManagedKafkaParametersCredentials struct {
	// The ARN of the Secrets Manager secret containing the basic auth credentials.
	BasicAuth string `pulumi:"basicAuth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	ClientCertificateTlsAuth *string `pulumi:"clientCertificateTlsAuth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram256Auth *string `pulumi:"saslScram256Auth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram512Auth *string `pulumi:"saslScram512Auth"`
}

type PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs struct {
	// The ARN of the Secrets Manager secret containing the basic auth credentials.
	BasicAuth pulumix.Input[string] `pulumi:"basicAuth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	ClientCertificateTlsAuth pulumix.Input[*string] `pulumi:"clientCertificateTlsAuth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram256Auth pulumix.Input[*string] `pulumi:"saslScram256Auth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram512Auth pulumix.Input[*string] `pulumi:"saslScram512Auth"`
}

func (PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParametersCredentials)(nil)).Elem()
}

func (i PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsOutput() PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput {
	return i.ToPipeSourceParametersSelfManagedKafkaParametersCredentialsOutputWithContext(context.Background())
}

func (i PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput)
}

func (i *PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParametersCredentials)(nil)).Elem()
}

func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsOutput() PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersSelfManagedKafkaParametersCredentials] {
	return pulumix.Output[PipeSourceParametersSelfManagedKafkaParametersCredentials]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Secrets Manager secret containing the basic auth credentials.
func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) BasicAuth() pulumix.Output[string] {
	return pulumix.Apply[PipeSourceParametersSelfManagedKafkaParametersCredentials](o, func(v PipeSourceParametersSelfManagedKafkaParametersCredentials) string { return v.BasicAuth })
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) ClientCertificateTlsAuth() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersSelfManagedKafkaParametersCredentials](o, func(v PipeSourceParametersSelfManagedKafkaParametersCredentials) *string {
		return v.ClientCertificateTlsAuth
	})
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) SaslScram256Auth() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersSelfManagedKafkaParametersCredentials](o, func(v PipeSourceParametersSelfManagedKafkaParametersCredentials) *string { return v.SaslScram256Auth })
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) SaslScram512Auth() pulumix.Output[*string] {
	return pulumix.Apply[PipeSourceParametersSelfManagedKafkaParametersCredentials](o, func(v PipeSourceParametersSelfManagedKafkaParametersCredentials) *string { return v.SaslScram512Auth })
}

type PipeSourceParametersSelfManagedKafkaParametersVpc struct {
	// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups []string `pulumi:"securityGroups"`
	// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	Subnets []string `pulumi:"subnets"`
}

type PipeSourceParametersSelfManagedKafkaParametersVpcArgs struct {
	// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups pulumix.Input[[]string] `pulumi:"securityGroups"`
	// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	Subnets pulumix.Input[[]string] `pulumi:"subnets"`
}

func (PipeSourceParametersSelfManagedKafkaParametersVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParametersVpc)(nil)).Elem()
}

func (i PipeSourceParametersSelfManagedKafkaParametersVpcArgs) ToPipeSourceParametersSelfManagedKafkaParametersVpcOutput() PipeSourceParametersSelfManagedKafkaParametersVpcOutput {
	return i.ToPipeSourceParametersSelfManagedKafkaParametersVpcOutputWithContext(context.Background())
}

func (i PipeSourceParametersSelfManagedKafkaParametersVpcArgs) ToPipeSourceParametersSelfManagedKafkaParametersVpcOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSelfManagedKafkaParametersVpcOutput)
}

func (i *PipeSourceParametersSelfManagedKafkaParametersVpcArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersSelfManagedKafkaParametersVpcArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersSelfManagedKafkaParametersVpcOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersSelfManagedKafkaParametersVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParametersVpc)(nil)).Elem()
}

func (o PipeSourceParametersSelfManagedKafkaParametersVpcOutput) ToPipeSourceParametersSelfManagedKafkaParametersVpcOutput() PipeSourceParametersSelfManagedKafkaParametersVpcOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersVpcOutput) ToPipeSourceParametersSelfManagedKafkaParametersVpcOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersVpcOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersVpcOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersSelfManagedKafkaParametersVpc] {
	return pulumix.Output[PipeSourceParametersSelfManagedKafkaParametersVpc]{
		OutputState: o.OutputState,
	}
}

// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
func (o PipeSourceParametersSelfManagedKafkaParametersVpcOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PipeSourceParametersSelfManagedKafkaParametersVpc](o, func(v PipeSourceParametersSelfManagedKafkaParametersVpc) []string { return v.SecurityGroups })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
func (o PipeSourceParametersSelfManagedKafkaParametersVpcOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PipeSourceParametersSelfManagedKafkaParametersVpc](o, func(v PipeSourceParametersSelfManagedKafkaParametersVpc) []string { return v.Subnets })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type PipeSourceParametersSqsQueueParameters struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *int `pulumi:"batchSize"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
}

type PipeSourceParametersSqsQueueParametersArgs struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize pulumix.Input[*int] `pulumi:"batchSize"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds pulumix.Input[*int] `pulumi:"maximumBatchingWindowInSeconds"`
}

func (PipeSourceParametersSqsQueueParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSqsQueueParameters)(nil)).Elem()
}

func (i PipeSourceParametersSqsQueueParametersArgs) ToPipeSourceParametersSqsQueueParametersOutput() PipeSourceParametersSqsQueueParametersOutput {
	return i.ToPipeSourceParametersSqsQueueParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersSqsQueueParametersArgs) ToPipeSourceParametersSqsQueueParametersOutputWithContext(ctx context.Context) PipeSourceParametersSqsQueueParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSqsQueueParametersOutput)
}

func (i *PipeSourceParametersSqsQueueParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersSqsQueueParametersArgs] {
	return pulumix.Val(i)
}

type PipeSourceParametersSqsQueueParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersSqsQueueParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSqsQueueParameters)(nil)).Elem()
}

func (o PipeSourceParametersSqsQueueParametersOutput) ToPipeSourceParametersSqsQueueParametersOutput() PipeSourceParametersSqsQueueParametersOutput {
	return o
}

func (o PipeSourceParametersSqsQueueParametersOutput) ToPipeSourceParametersSqsQueueParametersOutputWithContext(ctx context.Context) PipeSourceParametersSqsQueueParametersOutput {
	return o
}

func (o PipeSourceParametersSqsQueueParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersSqsQueueParameters] {
	return pulumix.Output[PipeSourceParametersSqsQueueParameters]{
		OutputState: o.OutputState,
	}
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersSqsQueueParametersOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersSqsQueueParameters](o, func(v PipeSourceParametersSqsQueueParameters) *int { return v.BatchSize })
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersSqsQueueParametersOutput) MaximumBatchingWindowInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[PipeSourceParametersSqsQueueParameters](o, func(v PipeSourceParametersSqsQueueParameters) *int { return v.MaximumBatchingWindowInSeconds })
}

type PipeTargetParameters struct {
	// The parameters for using an AWS Batch job as a target. Detailed below.
	BatchJobParameters *PipeTargetParametersBatchJobParameters `pulumi:"batchJobParameters"`
	// The parameters for using an CloudWatch Logs log stream as a target. Detailed below.
	CloudwatchLogsParameters *PipeTargetParametersCloudwatchLogsParameters `pulumi:"cloudwatchLogsParameters"`
	// The parameters for using an Amazon ECS task as a target. Detailed below.
	EcsTaskParameters *PipeTargetParametersEcsTaskParameters `pulumi:"ecsTaskParameters"`
	// The parameters for using an EventBridge event bus as a target. Detailed below.
	EventbridgeEventBusParameters *PipeTargetParametersEventbridgeEventBusParameters `pulumi:"eventbridgeEventBusParameters"`
	// These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. Detailed below.
	HttpParameters *PipeTargetParametersHttpParameters `pulumi:"httpParameters"`
	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
	InputTemplate *string `pulumi:"inputTemplate"`
	// The parameters for using a Kinesis stream as a source. Detailed below.
	KinesisStreamParameters *PipeTargetParametersKinesisStreamParameters `pulumi:"kinesisStreamParameters"`
	// The parameters for using a Lambda function as a target. Detailed below.
	LambdaFunctionParameters *PipeTargetParametersLambdaFunctionParameters `pulumi:"lambdaFunctionParameters"`
	// These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API BatchExecuteStatement. Detailed below.
	RedshiftDataParameters *PipeTargetParametersRedshiftDataParameters `pulumi:"redshiftDataParameters"`
	// The parameters for using a SageMaker pipeline as a target. Detailed below.
	SagemakerPipelineParameters *PipeTargetParametersSagemakerPipelineParameters `pulumi:"sagemakerPipelineParameters"`
	// The parameters for using a Amazon SQS stream as a target. Detailed below.
	SqsQueueParameters *PipeTargetParametersSqsQueueParameters `pulumi:"sqsQueueParameters"`
	// The parameters for using a Step Functions state machine as a target. Detailed below.
	StepFunctionStateMachineParameters *PipeTargetParametersStepFunctionStateMachineParameters `pulumi:"stepFunctionStateMachineParameters"`
}

type PipeTargetParametersArgs struct {
	// The parameters for using an AWS Batch job as a target. Detailed below.
	BatchJobParameters pulumix.Input[*PipeTargetParametersBatchJobParametersArgs] `pulumi:"batchJobParameters"`
	// The parameters for using an CloudWatch Logs log stream as a target. Detailed below.
	CloudwatchLogsParameters pulumix.Input[*PipeTargetParametersCloudwatchLogsParametersArgs] `pulumi:"cloudwatchLogsParameters"`
	// The parameters for using an Amazon ECS task as a target. Detailed below.
	EcsTaskParameters pulumix.Input[*PipeTargetParametersEcsTaskParametersArgs] `pulumi:"ecsTaskParameters"`
	// The parameters for using an EventBridge event bus as a target. Detailed below.
	EventbridgeEventBusParameters pulumix.Input[*PipeTargetParametersEventbridgeEventBusParametersArgs] `pulumi:"eventbridgeEventBusParameters"`
	// These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. Detailed below.
	HttpParameters pulumix.Input[*PipeTargetParametersHttpParametersArgs] `pulumi:"httpParameters"`
	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
	InputTemplate pulumix.Input[*string] `pulumi:"inputTemplate"`
	// The parameters for using a Kinesis stream as a source. Detailed below.
	KinesisStreamParameters pulumix.Input[*PipeTargetParametersKinesisStreamParametersArgs] `pulumi:"kinesisStreamParameters"`
	// The parameters for using a Lambda function as a target. Detailed below.
	LambdaFunctionParameters pulumix.Input[*PipeTargetParametersLambdaFunctionParametersArgs] `pulumi:"lambdaFunctionParameters"`
	// These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API BatchExecuteStatement. Detailed below.
	RedshiftDataParameters pulumix.Input[*PipeTargetParametersRedshiftDataParametersArgs] `pulumi:"redshiftDataParameters"`
	// The parameters for using a SageMaker pipeline as a target. Detailed below.
	SagemakerPipelineParameters pulumix.Input[*PipeTargetParametersSagemakerPipelineParametersArgs] `pulumi:"sagemakerPipelineParameters"`
	// The parameters for using a Amazon SQS stream as a target. Detailed below.
	SqsQueueParameters pulumix.Input[*PipeTargetParametersSqsQueueParametersArgs] `pulumi:"sqsQueueParameters"`
	// The parameters for using a Step Functions state machine as a target. Detailed below.
	StepFunctionStateMachineParameters pulumix.Input[*PipeTargetParametersStepFunctionStateMachineParametersArgs] `pulumi:"stepFunctionStateMachineParameters"`
}

func (PipeTargetParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParameters)(nil)).Elem()
}

func (i PipeTargetParametersArgs) ToPipeTargetParametersOutput() PipeTargetParametersOutput {
	return i.ToPipeTargetParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersArgs) ToPipeTargetParametersOutputWithContext(ctx context.Context) PipeTargetParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersOutput)
}

func (i *PipeTargetParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParameters)(nil)).Elem()
}

func (o PipeTargetParametersOutput) ToPipeTargetParametersOutput() PipeTargetParametersOutput {
	return o
}

func (o PipeTargetParametersOutput) ToPipeTargetParametersOutputWithContext(ctx context.Context) PipeTargetParametersOutput {
	return o
}

func (o PipeTargetParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParameters] {
	return pulumix.Output[PipeTargetParameters]{
		OutputState: o.OutputState,
	}
}

// The parameters for using an AWS Batch job as a target. Detailed below.
func (o PipeTargetParametersOutput) BatchJobParameters() pulumix.GPtrOutput[PipeTargetParametersBatchJobParameters, PipeTargetParametersBatchJobParametersOutput] {
	value := pulumix.Apply[PipeTargetParameters](o, func(v PipeTargetParameters) *PipeTargetParametersBatchJobParameters { return v.BatchJobParameters })
	return pulumix.GPtrOutput[PipeTargetParametersBatchJobParameters, PipeTargetParametersBatchJobParametersOutput]{OutputState: value.OutputState}
}

// The parameters for using an CloudWatch Logs log stream as a target. Detailed below.
func (o PipeTargetParametersOutput) CloudwatchLogsParameters() pulumix.GPtrOutput[PipeTargetParametersCloudwatchLogsParameters, PipeTargetParametersCloudwatchLogsParametersOutput] {
	value := pulumix.Apply[PipeTargetParameters](o, func(v PipeTargetParameters) *PipeTargetParametersCloudwatchLogsParameters {
		return v.CloudwatchLogsParameters
	})
	return pulumix.GPtrOutput[PipeTargetParametersCloudwatchLogsParameters, PipeTargetParametersCloudwatchLogsParametersOutput]{OutputState: value.OutputState}
}

// The parameters for using an Amazon ECS task as a target. Detailed below.
func (o PipeTargetParametersOutput) EcsTaskParameters() pulumix.GPtrOutput[PipeTargetParametersEcsTaskParameters, PipeTargetParametersEcsTaskParametersOutput] {
	value := pulumix.Apply[PipeTargetParameters](o, func(v PipeTargetParameters) *PipeTargetParametersEcsTaskParameters { return v.EcsTaskParameters })
	return pulumix.GPtrOutput[PipeTargetParametersEcsTaskParameters, PipeTargetParametersEcsTaskParametersOutput]{OutputState: value.OutputState}
}

// The parameters for using an EventBridge event bus as a target. Detailed below.
func (o PipeTargetParametersOutput) EventbridgeEventBusParameters() pulumix.GPtrOutput[PipeTargetParametersEventbridgeEventBusParameters, PipeTargetParametersEventbridgeEventBusParametersOutput] {
	value := pulumix.Apply[PipeTargetParameters](o, func(v PipeTargetParameters) *PipeTargetParametersEventbridgeEventBusParameters {
		return v.EventbridgeEventBusParameters
	})
	return pulumix.GPtrOutput[PipeTargetParametersEventbridgeEventBusParameters, PipeTargetParametersEventbridgeEventBusParametersOutput]{OutputState: value.OutputState}
}

// These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. Detailed below.
func (o PipeTargetParametersOutput) HttpParameters() pulumix.GPtrOutput[PipeTargetParametersHttpParameters, PipeTargetParametersHttpParametersOutput] {
	value := pulumix.Apply[PipeTargetParameters](o, func(v PipeTargetParameters) *PipeTargetParametersHttpParameters { return v.HttpParameters })
	return pulumix.GPtrOutput[PipeTargetParametersHttpParameters, PipeTargetParametersHttpParametersOutput]{OutputState: value.OutputState}
}

// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
func (o PipeTargetParametersOutput) InputTemplate() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParameters](o, func(v PipeTargetParameters) *string { return v.InputTemplate })
}

// The parameters for using a Kinesis stream as a source. Detailed below.
func (o PipeTargetParametersOutput) KinesisStreamParameters() pulumix.GPtrOutput[PipeTargetParametersKinesisStreamParameters, PipeTargetParametersKinesisStreamParametersOutput] {
	value := pulumix.Apply[PipeTargetParameters](o, func(v PipeTargetParameters) *PipeTargetParametersKinesisStreamParameters {
		return v.KinesisStreamParameters
	})
	return pulumix.GPtrOutput[PipeTargetParametersKinesisStreamParameters, PipeTargetParametersKinesisStreamParametersOutput]{OutputState: value.OutputState}
}

// The parameters for using a Lambda function as a target. Detailed below.
func (o PipeTargetParametersOutput) LambdaFunctionParameters() pulumix.GPtrOutput[PipeTargetParametersLambdaFunctionParameters, PipeTargetParametersLambdaFunctionParametersOutput] {
	value := pulumix.Apply[PipeTargetParameters](o, func(v PipeTargetParameters) *PipeTargetParametersLambdaFunctionParameters {
		return v.LambdaFunctionParameters
	})
	return pulumix.GPtrOutput[PipeTargetParametersLambdaFunctionParameters, PipeTargetParametersLambdaFunctionParametersOutput]{OutputState: value.OutputState}
}

// These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API BatchExecuteStatement. Detailed below.
func (o PipeTargetParametersOutput) RedshiftDataParameters() pulumix.GPtrOutput[PipeTargetParametersRedshiftDataParameters, PipeTargetParametersRedshiftDataParametersOutput] {
	value := pulumix.Apply[PipeTargetParameters](o, func(v PipeTargetParameters) *PipeTargetParametersRedshiftDataParameters {
		return v.RedshiftDataParameters
	})
	return pulumix.GPtrOutput[PipeTargetParametersRedshiftDataParameters, PipeTargetParametersRedshiftDataParametersOutput]{OutputState: value.OutputState}
}

// The parameters for using a SageMaker pipeline as a target. Detailed below.
func (o PipeTargetParametersOutput) SagemakerPipelineParameters() pulumix.GPtrOutput[PipeTargetParametersSagemakerPipelineParameters, PipeTargetParametersSagemakerPipelineParametersOutput] {
	value := pulumix.Apply[PipeTargetParameters](o, func(v PipeTargetParameters) *PipeTargetParametersSagemakerPipelineParameters {
		return v.SagemakerPipelineParameters
	})
	return pulumix.GPtrOutput[PipeTargetParametersSagemakerPipelineParameters, PipeTargetParametersSagemakerPipelineParametersOutput]{OutputState: value.OutputState}
}

// The parameters for using a Amazon SQS stream as a target. Detailed below.
func (o PipeTargetParametersOutput) SqsQueueParameters() pulumix.GPtrOutput[PipeTargetParametersSqsQueueParameters, PipeTargetParametersSqsQueueParametersOutput] {
	value := pulumix.Apply[PipeTargetParameters](o, func(v PipeTargetParameters) *PipeTargetParametersSqsQueueParameters { return v.SqsQueueParameters })
	return pulumix.GPtrOutput[PipeTargetParametersSqsQueueParameters, PipeTargetParametersSqsQueueParametersOutput]{OutputState: value.OutputState}
}

// The parameters for using a Step Functions state machine as a target. Detailed below.
func (o PipeTargetParametersOutput) StepFunctionStateMachineParameters() pulumix.GPtrOutput[PipeTargetParametersStepFunctionStateMachineParameters, PipeTargetParametersStepFunctionStateMachineParametersOutput] {
	value := pulumix.Apply[PipeTargetParameters](o, func(v PipeTargetParameters) *PipeTargetParametersStepFunctionStateMachineParameters {
		return v.StepFunctionStateMachineParameters
	})
	return pulumix.GPtrOutput[PipeTargetParametersStepFunctionStateMachineParameters, PipeTargetParametersStepFunctionStateMachineParametersOutput]{OutputState: value.OutputState}
}

type PipeTargetParametersBatchJobParameters struct {
	// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.
	ArrayProperties *PipeTargetParametersBatchJobParametersArrayProperties `pulumi:"arrayProperties"`
	// The overrides that are sent to a container. Detailed below.
	ContainerOverrides *PipeTargetParametersBatchJobParametersContainerOverrides `pulumi:"containerOverrides"`
	// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.
	DependsOns []PipeTargetParametersBatchJobParametersDependsOn `pulumi:"dependsOns"`
	// The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
	JobDefinition string `pulumi:"jobDefinition"`
	// The name of the job. It can be up to 128 letters long.
	JobName string `pulumi:"jobName"`
	// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.
	Parameters map[string]string `pulumi:"parameters"`
	// The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.
	RetryStrategy *PipeTargetParametersBatchJobParametersRetryStrategy `pulumi:"retryStrategy"`
}

type PipeTargetParametersBatchJobParametersArgs struct {
	// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.
	ArrayProperties pulumix.Input[*PipeTargetParametersBatchJobParametersArrayPropertiesArgs] `pulumi:"arrayProperties"`
	// The overrides that are sent to a container. Detailed below.
	ContainerOverrides pulumix.Input[*PipeTargetParametersBatchJobParametersContainerOverridesArgs] `pulumi:"containerOverrides"`
	// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.
	DependsOns pulumix.Input[[]*PipeTargetParametersBatchJobParametersDependsOnArgs] `pulumi:"dependsOns"`
	// The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
	JobDefinition pulumix.Input[string] `pulumi:"jobDefinition"`
	// The name of the job. It can be up to 128 letters long.
	JobName pulumix.Input[string] `pulumi:"jobName"`
	// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.
	Parameters pulumix.Input[map[string]string] `pulumi:"parameters"`
	// The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.
	RetryStrategy pulumix.Input[*PipeTargetParametersBatchJobParametersRetryStrategyArgs] `pulumi:"retryStrategy"`
}

func (PipeTargetParametersBatchJobParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParameters)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersArgs) ToPipeTargetParametersBatchJobParametersOutput() PipeTargetParametersBatchJobParametersOutput {
	return i.ToPipeTargetParametersBatchJobParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersArgs) ToPipeTargetParametersBatchJobParametersOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersOutput)
}

func (i *PipeTargetParametersBatchJobParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersBatchJobParametersArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersBatchJobParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParameters)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersOutput) ToPipeTargetParametersBatchJobParametersOutput() PipeTargetParametersBatchJobParametersOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersOutput) ToPipeTargetParametersBatchJobParametersOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParameters] {
	return pulumix.Output[PipeTargetParametersBatchJobParameters]{
		OutputState: o.OutputState,
	}
}

// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.
func (o PipeTargetParametersBatchJobParametersOutput) ArrayProperties() pulumix.GPtrOutput[PipeTargetParametersBatchJobParametersArrayProperties, PipeTargetParametersBatchJobParametersArrayPropertiesOutput] {
	value := pulumix.Apply[PipeTargetParametersBatchJobParameters](o, func(v PipeTargetParametersBatchJobParameters) *PipeTargetParametersBatchJobParametersArrayProperties {
		return v.ArrayProperties
	})
	return pulumix.GPtrOutput[PipeTargetParametersBatchJobParametersArrayProperties, PipeTargetParametersBatchJobParametersArrayPropertiesOutput]{OutputState: value.OutputState}
}

// The overrides that are sent to a container. Detailed below.
func (o PipeTargetParametersBatchJobParametersOutput) ContainerOverrides() pulumix.GPtrOutput[PipeTargetParametersBatchJobParametersContainerOverrides, PipeTargetParametersBatchJobParametersContainerOverridesOutput] {
	value := pulumix.Apply[PipeTargetParametersBatchJobParameters](o, func(v PipeTargetParametersBatchJobParameters) *PipeTargetParametersBatchJobParametersContainerOverrides {
		return v.ContainerOverrides
	})
	return pulumix.GPtrOutput[PipeTargetParametersBatchJobParametersContainerOverrides, PipeTargetParametersBatchJobParametersContainerOverridesOutput]{OutputState: value.OutputState}
}

// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.
func (o PipeTargetParametersBatchJobParametersOutput) DependsOns() pulumix.GArrayOutput[PipeTargetParametersBatchJobParametersDependsOn, PipeTargetParametersBatchJobParametersDependsOnOutput] {
	value := pulumix.Apply[PipeTargetParametersBatchJobParameters](o, func(v PipeTargetParametersBatchJobParameters) []PipeTargetParametersBatchJobParametersDependsOn {
		return v.DependsOns
	})
	return pulumix.GArrayOutput[PipeTargetParametersBatchJobParametersDependsOn, PipeTargetParametersBatchJobParametersDependsOnOutput]{OutputState: value.OutputState}
}

// The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
func (o PipeTargetParametersBatchJobParametersOutput) JobDefinition() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersBatchJobParameters](o, func(v PipeTargetParametersBatchJobParameters) string { return v.JobDefinition })
}

// The name of the job. It can be up to 128 letters long.
func (o PipeTargetParametersBatchJobParametersOutput) JobName() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersBatchJobParameters](o, func(v PipeTargetParametersBatchJobParameters) string { return v.JobName })
}

// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.
func (o PipeTargetParametersBatchJobParametersOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[PipeTargetParametersBatchJobParameters](o, func(v PipeTargetParametersBatchJobParameters) map[string]string { return v.Parameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.
func (o PipeTargetParametersBatchJobParametersOutput) RetryStrategy() pulumix.GPtrOutput[PipeTargetParametersBatchJobParametersRetryStrategy, PipeTargetParametersBatchJobParametersRetryStrategyOutput] {
	value := pulumix.Apply[PipeTargetParametersBatchJobParameters](o, func(v PipeTargetParametersBatchJobParameters) *PipeTargetParametersBatchJobParametersRetryStrategy {
		return v.RetryStrategy
	})
	return pulumix.GPtrOutput[PipeTargetParametersBatchJobParametersRetryStrategy, PipeTargetParametersBatchJobParametersRetryStrategyOutput]{OutputState: value.OutputState}
}

type PipeTargetParametersBatchJobParametersArrayProperties struct {
	// The size of the array, if this is an array batch job. Minimum value of 2. Maximum value of 10,000.
	Size *int `pulumi:"size"`
}

type PipeTargetParametersBatchJobParametersArrayPropertiesArgs struct {
	// The size of the array, if this is an array batch job. Minimum value of 2. Maximum value of 10,000.
	Size pulumix.Input[*int] `pulumi:"size"`
}

func (PipeTargetParametersBatchJobParametersArrayPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersArrayProperties)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersArrayPropertiesArgs) ToPipeTargetParametersBatchJobParametersArrayPropertiesOutput() PipeTargetParametersBatchJobParametersArrayPropertiesOutput {
	return i.ToPipeTargetParametersBatchJobParametersArrayPropertiesOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersArrayPropertiesArgs) ToPipeTargetParametersBatchJobParametersArrayPropertiesOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersArrayPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersArrayPropertiesOutput)
}

func (i *PipeTargetParametersBatchJobParametersArrayPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersBatchJobParametersArrayPropertiesArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersBatchJobParametersArrayPropertiesOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersArrayPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersArrayProperties)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersArrayPropertiesOutput) ToPipeTargetParametersBatchJobParametersArrayPropertiesOutput() PipeTargetParametersBatchJobParametersArrayPropertiesOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersArrayPropertiesOutput) ToPipeTargetParametersBatchJobParametersArrayPropertiesOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersArrayPropertiesOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersArrayPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersArrayProperties] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersArrayProperties]{
		OutputState: o.OutputState,
	}
}

// The size of the array, if this is an array batch job. Minimum value of 2. Maximum value of 10,000.
func (o PipeTargetParametersBatchJobParametersArrayPropertiesOutput) Size() pulumix.Output[*int] {
	return pulumix.Apply[PipeTargetParametersBatchJobParametersArrayProperties](o, func(v PipeTargetParametersBatchJobParametersArrayProperties) *int { return v.Size })
}

type PipeTargetParametersBatchJobParametersContainerOverrides struct {
	// List of commands to send to the container that overrides the default command from the Docker image or the task definition.
	Commands []string `pulumi:"commands"`
	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. Environment variables cannot start with " AWS Batch ". This naming convention is reserved for variables that AWS Batch sets. Detailed below.
	Environments []PipeTargetParametersBatchJobParametersContainerOverridesEnvironment `pulumi:"environments"`
	// The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
	InstanceType *string `pulumi:"instanceType"`
	// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU. Detailed below.
	ResourceRequirements []PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement `pulumi:"resourceRequirements"`
}

type PipeTargetParametersBatchJobParametersContainerOverridesArgs struct {
	// List of commands to send to the container that overrides the default command from the Docker image or the task definition.
	Commands pulumix.Input[[]string] `pulumi:"commands"`
	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. Environment variables cannot start with " AWS Batch ". This naming convention is reserved for variables that AWS Batch sets. Detailed below.
	Environments pulumix.Input[[]*PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs] `pulumi:"environments"`
	// The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
	InstanceType pulumix.Input[*string] `pulumi:"instanceType"`
	// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU. Detailed below.
	ResourceRequirements pulumix.Input[[]*PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs] `pulumi:"resourceRequirements"`
}

func (PipeTargetParametersBatchJobParametersContainerOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverrides)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesArgs) ToPipeTargetParametersBatchJobParametersContainerOverridesOutput() PipeTargetParametersBatchJobParametersContainerOverridesOutput {
	return i.ToPipeTargetParametersBatchJobParametersContainerOverridesOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesArgs) ToPipeTargetParametersBatchJobParametersContainerOverridesOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersContainerOverridesOutput)
}

func (i *PipeTargetParametersBatchJobParametersContainerOverridesArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersBatchJobParametersContainerOverridesArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersBatchJobParametersContainerOverridesOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersContainerOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverrides)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesOutput() PipeTargetParametersBatchJobParametersContainerOverridesOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverrides] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverrides]{
		OutputState: o.OutputState,
	}
}

// List of commands to send to the container that overrides the default command from the Docker image or the task definition.
func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) Commands() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PipeTargetParametersBatchJobParametersContainerOverrides](o, func(v PipeTargetParametersBatchJobParametersContainerOverrides) []string { return v.Commands })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. Environment variables cannot start with " AWS Batch ". This naming convention is reserved for variables that AWS Batch sets. Detailed below.
func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) Environments() pulumix.GArrayOutput[PipeTargetParametersBatchJobParametersContainerOverridesEnvironment, PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput] {
	value := pulumix.Apply[PipeTargetParametersBatchJobParametersContainerOverrides](o, func(v PipeTargetParametersBatchJobParametersContainerOverrides) []PipeTargetParametersBatchJobParametersContainerOverridesEnvironment {
		return v.Environments
	})
	return pulumix.GArrayOutput[PipeTargetParametersBatchJobParametersContainerOverridesEnvironment, PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput]{OutputState: value.OutputState}
}

// The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) InstanceType() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersBatchJobParametersContainerOverrides](o, func(v PipeTargetParametersBatchJobParametersContainerOverrides) *string { return v.InstanceType })
}

// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU. Detailed below.
func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) ResourceRequirements() pulumix.GArrayOutput[PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement, PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput] {
	value := pulumix.Apply[PipeTargetParametersBatchJobParametersContainerOverrides](o, func(v PipeTargetParametersBatchJobParametersContainerOverrides) []PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement {
		return v.ResourceRequirements
	})
	return pulumix.GArrayOutput[PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement, PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput]{OutputState: value.OutputState}
}

type PipeTargetParametersBatchJobParametersContainerOverridesEnvironment struct {
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value *string `pulumi:"value"`
}

type PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs struct {
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string] `pulumi:"name"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverridesEnvironment)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs) ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput() PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput {
	return i.ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs) ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput)
}

func (i *PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverridesEnvironment)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput() PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverridesEnvironment] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverridesEnvironment]{
		OutputState: o.OutputState,
	}
}

// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersBatchJobParametersContainerOverridesEnvironment](o, func(v PipeTargetParametersBatchJobParametersContainerOverridesEnvironment) *string { return v.Name })
}

// The value of the key-value pair. For environment variables, this is the value of the environment variable.
func (o PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersBatchJobParametersContainerOverridesEnvironment](o, func(v PipeTargetParametersBatchJobParametersContainerOverridesEnvironment) *string { return v.Value })
}

type PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement struct {
	// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
	Type string `pulumi:"type"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value string `pulumi:"value"`
}

type PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs struct {
	// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
	Type pulumix.Input[string] `pulumi:"type"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs) ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput() PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput {
	return i.ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs) ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput)
}

func (i *PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput() PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement]{
		OutputState: o.OutputState,
	}
}

// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
func (o PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement](o, func(v PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement) string {
		return v.Type
	})
}

// The value of the key-value pair. For environment variables, this is the value of the environment variable.
func (o PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement](o, func(v PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement) string {
		return v.Value
	})
}

type PipeTargetParametersBatchJobParametersDependsOn struct {
	// The job ID of the AWS Batch job that's associated with this dependency.
	JobId *string `pulumi:"jobId"`
	// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
	Type *string `pulumi:"type"`
}

type PipeTargetParametersBatchJobParametersDependsOnArgs struct {
	// The job ID of the AWS Batch job that's associated with this dependency.
	JobId pulumix.Input[*string] `pulumi:"jobId"`
	// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (PipeTargetParametersBatchJobParametersDependsOnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersDependsOn)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersDependsOnArgs) ToPipeTargetParametersBatchJobParametersDependsOnOutput() PipeTargetParametersBatchJobParametersDependsOnOutput {
	return i.ToPipeTargetParametersBatchJobParametersDependsOnOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersDependsOnArgs) ToPipeTargetParametersBatchJobParametersDependsOnOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersDependsOnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersDependsOnOutput)
}

func (i *PipeTargetParametersBatchJobParametersDependsOnArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersBatchJobParametersDependsOnArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersBatchJobParametersDependsOnOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersDependsOnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersDependsOn)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersDependsOnOutput) ToPipeTargetParametersBatchJobParametersDependsOnOutput() PipeTargetParametersBatchJobParametersDependsOnOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersDependsOnOutput) ToPipeTargetParametersBatchJobParametersDependsOnOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersDependsOnOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersDependsOnOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersDependsOn] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersDependsOn]{
		OutputState: o.OutputState,
	}
}

// The job ID of the AWS Batch job that's associated with this dependency.
func (o PipeTargetParametersBatchJobParametersDependsOnOutput) JobId() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersBatchJobParametersDependsOn](o, func(v PipeTargetParametersBatchJobParametersDependsOn) *string { return v.JobId })
}

// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
func (o PipeTargetParametersBatchJobParametersDependsOnOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersBatchJobParametersDependsOn](o, func(v PipeTargetParametersBatchJobParametersDependsOn) *string { return v.Type })
}

type PipeTargetParametersBatchJobParametersRetryStrategy struct {
	// The number of times to move a job to the RUNNABLE status. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value. Maximum value of 10.
	Attempts *int `pulumi:"attempts"`
}

type PipeTargetParametersBatchJobParametersRetryStrategyArgs struct {
	// The number of times to move a job to the RUNNABLE status. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value. Maximum value of 10.
	Attempts pulumix.Input[*int] `pulumi:"attempts"`
}

func (PipeTargetParametersBatchJobParametersRetryStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersRetryStrategy)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersRetryStrategyArgs) ToPipeTargetParametersBatchJobParametersRetryStrategyOutput() PipeTargetParametersBatchJobParametersRetryStrategyOutput {
	return i.ToPipeTargetParametersBatchJobParametersRetryStrategyOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersRetryStrategyArgs) ToPipeTargetParametersBatchJobParametersRetryStrategyOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersRetryStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersRetryStrategyOutput)
}

func (i *PipeTargetParametersBatchJobParametersRetryStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersBatchJobParametersRetryStrategyArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersBatchJobParametersRetryStrategyOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersRetryStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersRetryStrategy)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersRetryStrategyOutput) ToPipeTargetParametersBatchJobParametersRetryStrategyOutput() PipeTargetParametersBatchJobParametersRetryStrategyOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersRetryStrategyOutput) ToPipeTargetParametersBatchJobParametersRetryStrategyOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersRetryStrategyOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersRetryStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersRetryStrategy] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersRetryStrategy]{
		OutputState: o.OutputState,
	}
}

// The number of times to move a job to the RUNNABLE status. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value. Maximum value of 10.
func (o PipeTargetParametersBatchJobParametersRetryStrategyOutput) Attempts() pulumix.Output[*int] {
	return pulumix.Apply[PipeTargetParametersBatchJobParametersRetryStrategy](o, func(v PipeTargetParametersBatchJobParametersRetryStrategy) *int { return v.Attempts })
}

type PipeTargetParametersCloudwatchLogsParameters struct {
	// The name of the log stream.
	LogStreamName *string `pulumi:"logStreamName"`
	// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. This is the JSON path to the field in the event e.g. $.detail.timestamp
	Timestamp *string `pulumi:"timestamp"`
}

type PipeTargetParametersCloudwatchLogsParametersArgs struct {
	// The name of the log stream.
	LogStreamName pulumix.Input[*string] `pulumi:"logStreamName"`
	// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. This is the JSON path to the field in the event e.g. $.detail.timestamp
	Timestamp pulumix.Input[*string] `pulumi:"timestamp"`
}

func (PipeTargetParametersCloudwatchLogsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersCloudwatchLogsParameters)(nil)).Elem()
}

func (i PipeTargetParametersCloudwatchLogsParametersArgs) ToPipeTargetParametersCloudwatchLogsParametersOutput() PipeTargetParametersCloudwatchLogsParametersOutput {
	return i.ToPipeTargetParametersCloudwatchLogsParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersCloudwatchLogsParametersArgs) ToPipeTargetParametersCloudwatchLogsParametersOutputWithContext(ctx context.Context) PipeTargetParametersCloudwatchLogsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersCloudwatchLogsParametersOutput)
}

func (i *PipeTargetParametersCloudwatchLogsParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersCloudwatchLogsParametersArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersCloudwatchLogsParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersCloudwatchLogsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersCloudwatchLogsParameters)(nil)).Elem()
}

func (o PipeTargetParametersCloudwatchLogsParametersOutput) ToPipeTargetParametersCloudwatchLogsParametersOutput() PipeTargetParametersCloudwatchLogsParametersOutput {
	return o
}

func (o PipeTargetParametersCloudwatchLogsParametersOutput) ToPipeTargetParametersCloudwatchLogsParametersOutputWithContext(ctx context.Context) PipeTargetParametersCloudwatchLogsParametersOutput {
	return o
}

func (o PipeTargetParametersCloudwatchLogsParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersCloudwatchLogsParameters] {
	return pulumix.Output[PipeTargetParametersCloudwatchLogsParameters]{
		OutputState: o.OutputState,
	}
}

// The name of the log stream.
func (o PipeTargetParametersCloudwatchLogsParametersOutput) LogStreamName() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersCloudwatchLogsParameters](o, func(v PipeTargetParametersCloudwatchLogsParameters) *string { return v.LogStreamName })
}

// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. This is the JSON path to the field in the event e.g. $.detail.timestamp
func (o PipeTargetParametersCloudwatchLogsParametersOutput) Timestamp() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersCloudwatchLogsParameters](o, func(v PipeTargetParametersCloudwatchLogsParameters) *string { return v.Timestamp })
}

type PipeTargetParametersEcsTaskParameters struct {
	// List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.
	CapacityProviderStrategies []PipeTargetParametersEcsTaskParametersCapacityProviderStrategy `pulumi:"capacityProviderStrategies"`
	// Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.
	EnableEcsManagedTags *bool `pulumi:"enableEcsManagedTags"`
	// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.
	EnableExecuteCommand *bool `pulumi:"enableExecuteCommand"`
	// Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.
	Group *string `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL
	LaunchType *string `pulumi:"launchType"`
	// Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.
	NetworkConfiguration *PipeTargetParametersEcsTaskParametersNetworkConfiguration `pulumi:"networkConfiguration"`
	// The overrides that are associated with a task. Detailed below.
	Overrides *PipeTargetParametersEcsTaskParametersOverrides `pulumi:"overrides"`
	// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.
	PlacementConstraints []PipeTargetParametersEcsTaskParametersPlacementConstraint `pulumi:"placementConstraints"`
	// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.
	PlacementStrategies []PipeTargetParametersEcsTaskParametersPlacementStrategy `pulumi:"placementStrategies"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.
	PlatformVersion *string `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION
	PropagateTags *string `pulumi:"propagateTags"`
	// The reference ID to use for the task. Maximum length of 1,024.
	ReferenceId *string `pulumi:"referenceId"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The number of tasks to create based on TaskDefinition. The default is 1.
	TaskCount *int `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS task.
	TaskDefinitionArn string `pulumi:"taskDefinitionArn"`
}

type PipeTargetParametersEcsTaskParametersArgs struct {
	// List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.
	CapacityProviderStrategies pulumix.Input[[]*PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs] `pulumi:"capacityProviderStrategies"`
	// Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.
	EnableEcsManagedTags pulumix.Input[*bool] `pulumi:"enableEcsManagedTags"`
	// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.
	EnableExecuteCommand pulumix.Input[*bool] `pulumi:"enableExecuteCommand"`
	// Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.
	Group pulumix.Input[*string] `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL
	LaunchType pulumix.Input[*string] `pulumi:"launchType"`
	// Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.
	NetworkConfiguration pulumix.Input[*PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs] `pulumi:"networkConfiguration"`
	// The overrides that are associated with a task. Detailed below.
	Overrides pulumix.Input[*PipeTargetParametersEcsTaskParametersOverridesArgs] `pulumi:"overrides"`
	// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.
	PlacementConstraints pulumix.Input[[]*PipeTargetParametersEcsTaskParametersPlacementConstraintArgs] `pulumi:"placementConstraints"`
	// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.
	PlacementStrategies pulumix.Input[[]*PipeTargetParametersEcsTaskParametersPlacementStrategyArgs] `pulumi:"placementStrategies"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.
	PlatformVersion pulumix.Input[*string] `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION
	PropagateTags pulumix.Input[*string] `pulumi:"propagateTags"`
	// The reference ID to use for the task. Maximum length of 1,024.
	ReferenceId pulumix.Input[*string] `pulumi:"referenceId"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// The number of tasks to create based on TaskDefinition. The default is 1.
	TaskCount pulumix.Input[*int] `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS task.
	TaskDefinitionArn pulumix.Input[string] `pulumi:"taskDefinitionArn"`
}

func (PipeTargetParametersEcsTaskParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParameters)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersArgs) ToPipeTargetParametersEcsTaskParametersOutput() PipeTargetParametersEcsTaskParametersOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersArgs) ToPipeTargetParametersEcsTaskParametersOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOutput)
}

func (i *PipeTargetParametersEcsTaskParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersEcsTaskParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParameters)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOutput) ToPipeTargetParametersEcsTaskParametersOutput() PipeTargetParametersEcsTaskParametersOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOutput) ToPipeTargetParametersEcsTaskParametersOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParameters] {
	return pulumix.Output[PipeTargetParametersEcsTaskParameters]{
		OutputState: o.OutputState,
	}
}

// List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOutput) CapacityProviderStrategies() pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersCapacityProviderStrategy, PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParameters](o, func(v PipeTargetParametersEcsTaskParameters) []PipeTargetParametersEcsTaskParametersCapacityProviderStrategy {
		return v.CapacityProviderStrategies
	})
	return pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersCapacityProviderStrategy, PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput]{OutputState: value.OutputState}
}

// Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.
func (o PipeTargetParametersEcsTaskParametersOutput) EnableEcsManagedTags() pulumix.Output[*bool] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParameters](o, func(v PipeTargetParametersEcsTaskParameters) *bool { return v.EnableEcsManagedTags })
}

// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.
func (o PipeTargetParametersEcsTaskParametersOutput) EnableExecuteCommand() pulumix.Output[*bool] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParameters](o, func(v PipeTargetParametersEcsTaskParameters) *bool { return v.EnableExecuteCommand })
}

// Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.
func (o PipeTargetParametersEcsTaskParametersOutput) Group() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParameters](o, func(v PipeTargetParametersEcsTaskParameters) *string { return v.Group })
}

// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL
func (o PipeTargetParametersEcsTaskParametersOutput) LaunchType() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParameters](o, func(v PipeTargetParametersEcsTaskParameters) *string { return v.LaunchType })
}

// Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOutput) NetworkConfiguration() pulumix.GPtrOutput[PipeTargetParametersEcsTaskParametersNetworkConfiguration, PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParameters](o, func(v PipeTargetParametersEcsTaskParameters) *PipeTargetParametersEcsTaskParametersNetworkConfiguration {
		return v.NetworkConfiguration
	})
	return pulumix.GPtrOutput[PipeTargetParametersEcsTaskParametersNetworkConfiguration, PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput]{OutputState: value.OutputState}
}

// The overrides that are associated with a task. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOutput) Overrides() pulumix.GPtrOutput[PipeTargetParametersEcsTaskParametersOverrides, PipeTargetParametersEcsTaskParametersOverridesOutput] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParameters](o, func(v PipeTargetParametersEcsTaskParameters) *PipeTargetParametersEcsTaskParametersOverrides {
		return v.Overrides
	})
	return pulumix.GPtrOutput[PipeTargetParametersEcsTaskParametersOverrides, PipeTargetParametersEcsTaskParametersOverridesOutput]{OutputState: value.OutputState}
}

// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.
func (o PipeTargetParametersEcsTaskParametersOutput) PlacementConstraints() pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersPlacementConstraint, PipeTargetParametersEcsTaskParametersPlacementConstraintOutput] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParameters](o, func(v PipeTargetParametersEcsTaskParameters) []PipeTargetParametersEcsTaskParametersPlacementConstraint {
		return v.PlacementConstraints
	})
	return pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersPlacementConstraint, PipeTargetParametersEcsTaskParametersPlacementConstraintOutput]{OutputState: value.OutputState}
}

// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOutput) PlacementStrategies() pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersPlacementStrategy, PipeTargetParametersEcsTaskParametersPlacementStrategyOutput] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParameters](o, func(v PipeTargetParametersEcsTaskParameters) []PipeTargetParametersEcsTaskParametersPlacementStrategy {
		return v.PlacementStrategies
	})
	return pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersPlacementStrategy, PipeTargetParametersEcsTaskParametersPlacementStrategyOutput]{OutputState: value.OutputState}
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.
func (o PipeTargetParametersEcsTaskParametersOutput) PlatformVersion() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParameters](o, func(v PipeTargetParametersEcsTaskParameters) *string { return v.PlatformVersion })
}

// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION
func (o PipeTargetParametersEcsTaskParametersOutput) PropagateTags() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParameters](o, func(v PipeTargetParametersEcsTaskParameters) *string { return v.PropagateTags })
}

// The reference ID to use for the task. Maximum length of 1,024.
func (o PipeTargetParametersEcsTaskParametersOutput) ReferenceId() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParameters](o, func(v PipeTargetParametersEcsTaskParameters) *string { return v.ReferenceId })
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PipeTargetParametersEcsTaskParametersOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParameters](o, func(v PipeTargetParametersEcsTaskParameters) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The number of tasks to create based on TaskDefinition. The default is 1.
func (o PipeTargetParametersEcsTaskParametersOutput) TaskCount() pulumix.Output[*int] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParameters](o, func(v PipeTargetParametersEcsTaskParameters) *int { return v.TaskCount })
}

// The ARN of the task definition to use if the event target is an Amazon ECS task.
func (o PipeTargetParametersEcsTaskParametersOutput) TaskDefinitionArn() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParameters](o, func(v PipeTargetParametersEcsTaskParameters) string { return v.TaskDefinitionArn })
}

type PipeTargetParametersEcsTaskParametersCapacityProviderStrategy struct {
	// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. Maximum value of 100,000.
	Base *int `pulumi:"base"`
	// The short name of the capacity provider. Maximum value of 255.
	CapacityProvider string `pulumi:"capacityProvider"`
	// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Maximum value of 1,000.
	Weight *int `pulumi:"weight"`
}

type PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs struct {
	// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. Maximum value of 100,000.
	Base pulumix.Input[*int] `pulumi:"base"`
	// The short name of the capacity provider. Maximum value of 255.
	CapacityProvider pulumix.Input[string] `pulumi:"capacityProvider"`
	// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Maximum value of 1,000.
	Weight pulumix.Input[*int] `pulumi:"weight"`
}

func (PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersCapacityProviderStrategy)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs) ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput() PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput {
	return i.ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs) ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput)
}

func (i *PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersCapacityProviderStrategy)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput) ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput() PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput) ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersCapacityProviderStrategy] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersCapacityProviderStrategy]{
		OutputState: o.OutputState,
	}
}

// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. Maximum value of 100,000.
func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput) Base() pulumix.Output[*int] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersCapacityProviderStrategy](o, func(v PipeTargetParametersEcsTaskParametersCapacityProviderStrategy) *int { return v.Base })
}

// The short name of the capacity provider. Maximum value of 255.
func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput) CapacityProvider() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersCapacityProviderStrategy](o, func(v PipeTargetParametersEcsTaskParametersCapacityProviderStrategy) string {
		return v.CapacityProvider
	})
}

// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Maximum value of 1,000.
func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput) Weight() pulumix.Output[*int] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersCapacityProviderStrategy](o, func(v PipeTargetParametersEcsTaskParametersCapacityProviderStrategy) *int { return v.Weight })
}

type PipeTargetParametersEcsTaskParametersNetworkConfiguration struct {
	// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode. Detailed below.
	AwsVpcConfiguration *PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration `pulumi:"awsVpcConfiguration"`
}

type PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs struct {
	// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode. Detailed below.
	AwsVpcConfiguration pulumix.Input[*PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs] `pulumi:"awsVpcConfiguration"`
}

func (PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersNetworkConfiguration)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput {
	return i.ToPipeTargetParametersEcsTaskParametersNetworkConfigurationOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput)
}

func (i *PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersNetworkConfiguration)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersNetworkConfiguration] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersNetworkConfiguration]{
		OutputState: o.OutputState,
	}
}

// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode. Detailed below.
func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput) AwsVpcConfiguration() pulumix.GPtrOutput[PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration, PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParametersNetworkConfiguration](o, func(v PipeTargetParametersEcsTaskParametersNetworkConfiguration) *PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration {
		return v.AwsVpcConfiguration
	})
	return pulumix.GPtrOutput[PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration, PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput]{OutputState: value.OutputState}
}

type PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration struct {
	// Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE. Valid Values: ENABLED, DISABLED.
	AssignPublicIp *string `pulumi:"assignPublicIp"`
	// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups []string `pulumi:"securityGroups"`
	// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	Subnets []string `pulumi:"subnets"`
}

type PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs struct {
	// Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE. Valid Values: ENABLED, DISABLED.
	AssignPublicIp pulumix.Input[*string] `pulumi:"assignPublicIp"`
	// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups pulumix.Input[[]string] `pulumi:"securityGroups"`
	// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	Subnets pulumix.Input[[]string] `pulumi:"subnets"`
}

func (PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput {
	return i.ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput)
}

func (i *PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration]{
		OutputState: o.OutputState,
	}
}

// Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE. Valid Values: ENABLED, DISABLED.
func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) AssignPublicIp() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration](o, func(v PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration) *string {
		return v.AssignPublicIp
	})
}

// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration](o, func(v PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration) []string {
		return v.SecurityGroups
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration](o, func(v PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration) []string {
		return v.Subnets
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type PipeTargetParametersEcsTaskParametersOverrides struct {
	// One or more container overrides that are sent to a task. Detailed below.
	ContainerOverrides []PipeTargetParametersEcsTaskParametersOverridesContainerOverride `pulumi:"containerOverrides"`
	// The cpu override for the task.
	Cpu *string `pulumi:"cpu"`
	// The ephemeral storage setting override for the task.  Detailed below.
	EphemeralStorage *PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage `pulumi:"ephemeralStorage"`
	// The Amazon Resource Name (ARN) of the task execution IAM role override for the task.
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// List of Elastic Inference accelerator overrides for the task. Detailed below.
	InferenceAcceleratorOverrides []PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride `pulumi:"inferenceAcceleratorOverrides"`
	// The memory override for the task.
	Memory *string `pulumi:"memory"`
	// The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.
	TaskRoleArn *string `pulumi:"taskRoleArn"`
}

type PipeTargetParametersEcsTaskParametersOverridesArgs struct {
	// One or more container overrides that are sent to a task. Detailed below.
	ContainerOverrides pulumix.Input[[]*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs] `pulumi:"containerOverrides"`
	// The cpu override for the task.
	Cpu pulumix.Input[*string] `pulumi:"cpu"`
	// The ephemeral storage setting override for the task.  Detailed below.
	EphemeralStorage pulumix.Input[*PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs] `pulumi:"ephemeralStorage"`
	// The Amazon Resource Name (ARN) of the task execution IAM role override for the task.
	ExecutionRoleArn pulumix.Input[*string] `pulumi:"executionRoleArn"`
	// List of Elastic Inference accelerator overrides for the task. Detailed below.
	InferenceAcceleratorOverrides pulumix.Input[[]*PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs] `pulumi:"inferenceAcceleratorOverrides"`
	// The memory override for the task.
	Memory pulumix.Input[*string] `pulumi:"memory"`
	// The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.
	TaskRoleArn pulumix.Input[*string] `pulumi:"taskRoleArn"`
}

func (PipeTargetParametersEcsTaskParametersOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverrides)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesArgs) ToPipeTargetParametersEcsTaskParametersOverridesOutput() PipeTargetParametersEcsTaskParametersOverridesOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesArgs) ToPipeTargetParametersEcsTaskParametersOverridesOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesOutput)
}

func (i *PipeTargetParametersEcsTaskParametersOverridesArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersOverridesArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersEcsTaskParametersOverridesOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverrides)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesOutput) ToPipeTargetParametersEcsTaskParametersOverridesOutput() PipeTargetParametersEcsTaskParametersOverridesOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesOutput) ToPipeTargetParametersEcsTaskParametersOverridesOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverrides] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverrides]{
		OutputState: o.OutputState,
	}
}

// One or more container overrides that are sent to a task. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOverridesOutput) ContainerOverrides() pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersOverridesContainerOverride, PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParametersOverrides](o, func(v PipeTargetParametersEcsTaskParametersOverrides) []PipeTargetParametersEcsTaskParametersOverridesContainerOverride {
		return v.ContainerOverrides
	})
	return pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersOverridesContainerOverride, PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput]{OutputState: value.OutputState}
}

// The cpu override for the task.
func (o PipeTargetParametersEcsTaskParametersOverridesOutput) Cpu() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverrides](o, func(v PipeTargetParametersEcsTaskParametersOverrides) *string { return v.Cpu })
}

// The ephemeral storage setting override for the task.  Detailed below.
func (o PipeTargetParametersEcsTaskParametersOverridesOutput) EphemeralStorage() pulumix.GPtrOutput[PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage, PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParametersOverrides](o, func(v PipeTargetParametersEcsTaskParametersOverrides) *PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage {
		return v.EphemeralStorage
	})
	return pulumix.GPtrOutput[PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage, PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput]{OutputState: value.OutputState}
}

// The Amazon Resource Name (ARN) of the task execution IAM role override for the task.
func (o PipeTargetParametersEcsTaskParametersOverridesOutput) ExecutionRoleArn() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverrides](o, func(v PipeTargetParametersEcsTaskParametersOverrides) *string { return v.ExecutionRoleArn })
}

// List of Elastic Inference accelerator overrides for the task. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOverridesOutput) InferenceAcceleratorOverrides() pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride, PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParametersOverrides](o, func(v PipeTargetParametersEcsTaskParametersOverrides) []PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride {
		return v.InferenceAcceleratorOverrides
	})
	return pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride, PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput]{OutputState: value.OutputState}
}

// The memory override for the task.
func (o PipeTargetParametersEcsTaskParametersOverridesOutput) Memory() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverrides](o, func(v PipeTargetParametersEcsTaskParametersOverrides) *string { return v.Memory })
}

// The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.
func (o PipeTargetParametersEcsTaskParametersOverridesOutput) TaskRoleArn() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverrides](o, func(v PipeTargetParametersEcsTaskParametersOverrides) *string { return v.TaskRoleArn })
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverride struct {
	// List of commands to send to the container that overrides the default command from the Docker image or the task definition.
	Commands []string `pulumi:"commands"`
	// The cpu override for the task.
	Cpu *int `pulumi:"cpu"`
	// A list of files containing the environment variables to pass to a container, instead of the value from the container definition. Detailed below.
	EnvironmentFiles []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile `pulumi:"environmentFiles"`
	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. Environment variables cannot start with " AWS Batch ". This naming convention is reserved for variables that AWS Batch sets. Detailed below.
	Environments []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment `pulumi:"environments"`
	// The memory override for the task.
	Memory *int `pulumi:"memory"`
	// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
	MemoryReservation *int `pulumi:"memoryReservation"`
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU. Detailed below.
	ResourceRequirements []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement `pulumi:"resourceRequirements"`
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs struct {
	// List of commands to send to the container that overrides the default command from the Docker image or the task definition.
	Commands pulumix.Input[[]string] `pulumi:"commands"`
	// The cpu override for the task.
	Cpu pulumix.Input[*int] `pulumi:"cpu"`
	// A list of files containing the environment variables to pass to a container, instead of the value from the container definition. Detailed below.
	EnvironmentFiles pulumix.Input[[]*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs] `pulumi:"environmentFiles"`
	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. Environment variables cannot start with " AWS Batch ". This naming convention is reserved for variables that AWS Batch sets. Detailed below.
	Environments pulumix.Input[[]*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs] `pulumi:"environments"`
	// The memory override for the task.
	Memory pulumix.Input[*int] `pulumi:"memory"`
	// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
	MemoryReservation pulumix.Input[*int] `pulumi:"memoryReservation"`
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string] `pulumi:"name"`
	// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU. Detailed below.
	ResourceRequirements pulumix.Input[[]*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs] `pulumi:"resourceRequirements"`
}

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverride)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput)
}

func (i *PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverride)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverride] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverride]{
		OutputState: o.OutputState,
	}
}

// List of commands to send to the container that overrides the default command from the Docker image or the task definition.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) Commands() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesContainerOverride](o, func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) []string { return v.Commands })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The cpu override for the task.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) Cpu() pulumix.Output[*int] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesContainerOverride](o, func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) *int { return v.Cpu })
}

// A list of files containing the environment variables to pass to a container, instead of the value from the container definition. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) EnvironmentFiles() pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile, PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesContainerOverride](o, func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile {
		return v.EnvironmentFiles
	})
	return pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile, PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput]{OutputState: value.OutputState}
}

// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. Environment variables cannot start with " AWS Batch ". This naming convention is reserved for variables that AWS Batch sets. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) Environments() pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment, PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesContainerOverride](o, func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment {
		return v.Environments
	})
	return pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment, PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput]{OutputState: value.OutputState}
}

// The memory override for the task.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) Memory() pulumix.Output[*int] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesContainerOverride](o, func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) *int { return v.Memory })
}

// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) MemoryReservation() pulumix.Output[*int] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesContainerOverride](o, func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) *int {
		return v.MemoryReservation
	})
}

// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesContainerOverride](o, func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) *string { return v.Name })
}

// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) ResourceRequirements() pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement, PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput] {
	value := pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesContainerOverride](o, func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement {
		return v.ResourceRequirements
	})
	return pulumix.GArrayOutput[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement, PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput]{OutputState: value.OutputState}
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment struct {
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value *string `pulumi:"value"`
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs struct {
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string] `pulumi:"name"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput)
}

func (i *PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment]{
		OutputState: o.OutputState,
	}
}

// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment](o, func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment) *string {
		return v.Name
	})
}

// The value of the key-value pair. For environment variables, this is the value of the environment variable.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment](o, func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment) *string {
		return v.Value
	})
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile struct {
	// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
	Type string `pulumi:"type"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value string `pulumi:"value"`
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs struct {
	// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
	Type pulumix.Input[string] `pulumi:"type"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput)
}

func (i *PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile]{
		OutputState: o.OutputState,
	}
}

// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile](o, func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile) string {
		return v.Type
	})
}

// The value of the key-value pair. For environment variables, this is the value of the environment variable.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile](o, func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile) string {
		return v.Value
	})
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement struct {
	// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
	Type string `pulumi:"type"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value string `pulumi:"value"`
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs struct {
	// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
	Type pulumix.Input[string] `pulumi:"type"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput)
}

func (i *PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement]{
		OutputState: o.OutputState,
	}
}

// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement](o, func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement) string {
		return v.Type
	})
}

// The value of the key-value pair. For environment variables, this is the value of the environment variable.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement](o, func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement) string {
		return v.Value
	})
}

type PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage struct {
	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
	SizeInGib int `pulumi:"sizeInGib"`
}

type PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs struct {
	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
	SizeInGib pulumix.Input[int] `pulumi:"sizeInGib"`
}

func (PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput() PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput)
}

func (i *PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput() PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage]{
		OutputState: o.OutputState,
	}
}

// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
func (o PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput) SizeInGib() pulumix.Output[int] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage](o, func(v PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage) int { return v.SizeInGib })
}

type PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride struct {
	// The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.
	DeviceName *string `pulumi:"deviceName"`
	// The Elastic Inference accelerator type to use.
	DeviceType *string `pulumi:"deviceType"`
}

type PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs struct {
	// The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.
	DeviceName pulumix.Input[*string] `pulumi:"deviceName"`
	// The Elastic Inference accelerator type to use.
	DeviceType pulumix.Input[*string] `pulumi:"deviceType"`
}

func (PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs) ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput() PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs) ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput)
}

func (i *PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput) ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput() PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput) ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride]{
		OutputState: o.OutputState,
	}
}

// The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.
func (o PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput) DeviceName() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride](o, func(v PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride) *string {
		return v.DeviceName
	})
}

// The Elastic Inference accelerator type to use.
func (o PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput) DeviceType() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride](o, func(v PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride) *string {
		return v.DeviceType
	})
}

type PipeTargetParametersEcsTaskParametersPlacementConstraint struct {
	// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. Maximum length of 2,000.
	Expression *string `pulumi:"expression"`
	// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
	Type *string `pulumi:"type"`
}

type PipeTargetParametersEcsTaskParametersPlacementConstraintArgs struct {
	// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. Maximum length of 2,000.
	Expression pulumix.Input[*string] `pulumi:"expression"`
	// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (PipeTargetParametersEcsTaskParametersPlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersPlacementConstraint)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersPlacementConstraintArgs) ToPipeTargetParametersEcsTaskParametersPlacementConstraintOutput() PipeTargetParametersEcsTaskParametersPlacementConstraintOutput {
	return i.ToPipeTargetParametersEcsTaskParametersPlacementConstraintOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersPlacementConstraintArgs) ToPipeTargetParametersEcsTaskParametersPlacementConstraintOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersPlacementConstraintOutput)
}

func (i *PipeTargetParametersEcsTaskParametersPlacementConstraintArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersPlacementConstraintArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersEcsTaskParametersPlacementConstraintOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersPlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersPlacementConstraint)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersPlacementConstraintOutput) ToPipeTargetParametersEcsTaskParametersPlacementConstraintOutput() PipeTargetParametersEcsTaskParametersPlacementConstraintOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersPlacementConstraintOutput) ToPipeTargetParametersEcsTaskParametersPlacementConstraintOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPlacementConstraintOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersPlacementConstraintOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersPlacementConstraint] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersPlacementConstraint]{
		OutputState: o.OutputState,
	}
}

// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. Maximum length of 2,000.
func (o PipeTargetParametersEcsTaskParametersPlacementConstraintOutput) Expression() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersPlacementConstraint](o, func(v PipeTargetParametersEcsTaskParametersPlacementConstraint) *string { return v.Expression })
}

// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
func (o PipeTargetParametersEcsTaskParametersPlacementConstraintOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersPlacementConstraint](o, func(v PipeTargetParametersEcsTaskParametersPlacementConstraint) *string { return v.Type })
}

type PipeTargetParametersEcsTaskParametersPlacementStrategy struct {
	// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. Maximum length of 255.
	Field *string `pulumi:"field"`
	// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
	Type *string `pulumi:"type"`
}

type PipeTargetParametersEcsTaskParametersPlacementStrategyArgs struct {
	// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. Maximum length of 255.
	Field pulumix.Input[*string] `pulumi:"field"`
	// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (PipeTargetParametersEcsTaskParametersPlacementStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersPlacementStrategy)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersPlacementStrategyArgs) ToPipeTargetParametersEcsTaskParametersPlacementStrategyOutput() PipeTargetParametersEcsTaskParametersPlacementStrategyOutput {
	return i.ToPipeTargetParametersEcsTaskParametersPlacementStrategyOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersPlacementStrategyArgs) ToPipeTargetParametersEcsTaskParametersPlacementStrategyOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPlacementStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersPlacementStrategyOutput)
}

func (i *PipeTargetParametersEcsTaskParametersPlacementStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersPlacementStrategyArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersEcsTaskParametersPlacementStrategyOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersPlacementStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersPlacementStrategy)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersPlacementStrategyOutput) ToPipeTargetParametersEcsTaskParametersPlacementStrategyOutput() PipeTargetParametersEcsTaskParametersPlacementStrategyOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersPlacementStrategyOutput) ToPipeTargetParametersEcsTaskParametersPlacementStrategyOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPlacementStrategyOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersPlacementStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersPlacementStrategy] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersPlacementStrategy]{
		OutputState: o.OutputState,
	}
}

// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. Maximum length of 255.
func (o PipeTargetParametersEcsTaskParametersPlacementStrategyOutput) Field() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersPlacementStrategy](o, func(v PipeTargetParametersEcsTaskParametersPlacementStrategy) *string { return v.Field })
}

// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
func (o PipeTargetParametersEcsTaskParametersPlacementStrategyOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEcsTaskParametersPlacementStrategy](o, func(v PipeTargetParametersEcsTaskParametersPlacementStrategy) *string { return v.Type })
}

type PipeTargetParametersEventbridgeEventBusParameters struct {
	// A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
	DetailType *string `pulumi:"detailType"`
	// The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo.
	EndpointId *string `pulumi:"endpointId"`
	// List of AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.
	Resources []string `pulumi:"resources"`
	// Source resource of the pipe (typically an ARN).
	Source *string `pulumi:"source"`
	// The time stamp of the event, per RFC3339. If no time stamp is provided, the time stamp of the PutEvents call is used. This is the JSON path to the field in the event e.g. $.detail.timestamp
	Time *string `pulumi:"time"`
}

type PipeTargetParametersEventbridgeEventBusParametersArgs struct {
	// A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
	DetailType pulumix.Input[*string] `pulumi:"detailType"`
	// The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo.
	EndpointId pulumix.Input[*string] `pulumi:"endpointId"`
	// List of AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.
	Resources pulumix.Input[[]string] `pulumi:"resources"`
	// Source resource of the pipe (typically an ARN).
	Source pulumix.Input[*string] `pulumi:"source"`
	// The time stamp of the event, per RFC3339. If no time stamp is provided, the time stamp of the PutEvents call is used. This is the JSON path to the field in the event e.g. $.detail.timestamp
	Time pulumix.Input[*string] `pulumi:"time"`
}

func (PipeTargetParametersEventbridgeEventBusParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEventbridgeEventBusParameters)(nil)).Elem()
}

func (i PipeTargetParametersEventbridgeEventBusParametersArgs) ToPipeTargetParametersEventbridgeEventBusParametersOutput() PipeTargetParametersEventbridgeEventBusParametersOutput {
	return i.ToPipeTargetParametersEventbridgeEventBusParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersEventbridgeEventBusParametersArgs) ToPipeTargetParametersEventbridgeEventBusParametersOutputWithContext(ctx context.Context) PipeTargetParametersEventbridgeEventBusParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEventbridgeEventBusParametersOutput)
}

func (i *PipeTargetParametersEventbridgeEventBusParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEventbridgeEventBusParametersArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersEventbridgeEventBusParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEventbridgeEventBusParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEventbridgeEventBusParameters)(nil)).Elem()
}

func (o PipeTargetParametersEventbridgeEventBusParametersOutput) ToPipeTargetParametersEventbridgeEventBusParametersOutput() PipeTargetParametersEventbridgeEventBusParametersOutput {
	return o
}

func (o PipeTargetParametersEventbridgeEventBusParametersOutput) ToPipeTargetParametersEventbridgeEventBusParametersOutputWithContext(ctx context.Context) PipeTargetParametersEventbridgeEventBusParametersOutput {
	return o
}

func (o PipeTargetParametersEventbridgeEventBusParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEventbridgeEventBusParameters] {
	return pulumix.Output[PipeTargetParametersEventbridgeEventBusParameters]{
		OutputState: o.OutputState,
	}
}

// A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
func (o PipeTargetParametersEventbridgeEventBusParametersOutput) DetailType() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEventbridgeEventBusParameters](o, func(v PipeTargetParametersEventbridgeEventBusParameters) *string { return v.DetailType })
}

// The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo.
func (o PipeTargetParametersEventbridgeEventBusParametersOutput) EndpointId() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEventbridgeEventBusParameters](o, func(v PipeTargetParametersEventbridgeEventBusParameters) *string { return v.EndpointId })
}

// List of AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.
func (o PipeTargetParametersEventbridgeEventBusParametersOutput) Resources() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PipeTargetParametersEventbridgeEventBusParameters](o, func(v PipeTargetParametersEventbridgeEventBusParameters) []string { return v.Resources })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Source resource of the pipe (typically an ARN).
func (o PipeTargetParametersEventbridgeEventBusParametersOutput) Source() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEventbridgeEventBusParameters](o, func(v PipeTargetParametersEventbridgeEventBusParameters) *string { return v.Source })
}

// The time stamp of the event, per RFC3339. If no time stamp is provided, the time stamp of the PutEvents call is used. This is the JSON path to the field in the event e.g. $.detail.timestamp
func (o PipeTargetParametersEventbridgeEventBusParametersOutput) Time() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersEventbridgeEventBusParameters](o, func(v PipeTargetParametersEventbridgeEventBusParameters) *string { return v.Time })
}

type PipeTargetParametersHttpParameters struct {
	// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	HeaderParameters map[string]string `pulumi:"headerParameters"`
	// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
	PathParameterValues *string `pulumi:"pathParameterValues"`
	// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	QueryStringParameters map[string]string `pulumi:"queryStringParameters"`
}

type PipeTargetParametersHttpParametersArgs struct {
	// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	HeaderParameters pulumix.Input[map[string]string] `pulumi:"headerParameters"`
	// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
	PathParameterValues pulumix.Input[*string] `pulumi:"pathParameterValues"`
	// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	QueryStringParameters pulumix.Input[map[string]string] `pulumi:"queryStringParameters"`
}

func (PipeTargetParametersHttpParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersHttpParameters)(nil)).Elem()
}

func (i PipeTargetParametersHttpParametersArgs) ToPipeTargetParametersHttpParametersOutput() PipeTargetParametersHttpParametersOutput {
	return i.ToPipeTargetParametersHttpParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersHttpParametersArgs) ToPipeTargetParametersHttpParametersOutputWithContext(ctx context.Context) PipeTargetParametersHttpParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersHttpParametersOutput)
}

func (i *PipeTargetParametersHttpParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersHttpParametersArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersHttpParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersHttpParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersHttpParameters)(nil)).Elem()
}

func (o PipeTargetParametersHttpParametersOutput) ToPipeTargetParametersHttpParametersOutput() PipeTargetParametersHttpParametersOutput {
	return o
}

func (o PipeTargetParametersHttpParametersOutput) ToPipeTargetParametersHttpParametersOutputWithContext(ctx context.Context) PipeTargetParametersHttpParametersOutput {
	return o
}

func (o PipeTargetParametersHttpParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersHttpParameters] {
	return pulumix.Output[PipeTargetParametersHttpParameters]{
		OutputState: o.OutputState,
	}
}

// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
func (o PipeTargetParametersHttpParametersOutput) HeaderParameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[PipeTargetParametersHttpParameters](o, func(v PipeTargetParametersHttpParameters) map[string]string { return v.HeaderParameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
func (o PipeTargetParametersHttpParametersOutput) PathParameterValues() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersHttpParameters](o, func(v PipeTargetParametersHttpParameters) *string { return v.PathParameterValues })
}

// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
func (o PipeTargetParametersHttpParametersOutput) QueryStringParameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[PipeTargetParametersHttpParameters](o, func(v PipeTargetParametersHttpParameters) map[string]string { return v.QueryStringParameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type PipeTargetParametersKinesisStreamParameters struct {
	// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
	PartitionKey string `pulumi:"partitionKey"`
}

type PipeTargetParametersKinesisStreamParametersArgs struct {
	// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
	PartitionKey pulumix.Input[string] `pulumi:"partitionKey"`
}

func (PipeTargetParametersKinesisStreamParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersKinesisStreamParameters)(nil)).Elem()
}

func (i PipeTargetParametersKinesisStreamParametersArgs) ToPipeTargetParametersKinesisStreamParametersOutput() PipeTargetParametersKinesisStreamParametersOutput {
	return i.ToPipeTargetParametersKinesisStreamParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersKinesisStreamParametersArgs) ToPipeTargetParametersKinesisStreamParametersOutputWithContext(ctx context.Context) PipeTargetParametersKinesisStreamParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersKinesisStreamParametersOutput)
}

func (i *PipeTargetParametersKinesisStreamParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersKinesisStreamParametersArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersKinesisStreamParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersKinesisStreamParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersKinesisStreamParameters)(nil)).Elem()
}

func (o PipeTargetParametersKinesisStreamParametersOutput) ToPipeTargetParametersKinesisStreamParametersOutput() PipeTargetParametersKinesisStreamParametersOutput {
	return o
}

func (o PipeTargetParametersKinesisStreamParametersOutput) ToPipeTargetParametersKinesisStreamParametersOutputWithContext(ctx context.Context) PipeTargetParametersKinesisStreamParametersOutput {
	return o
}

func (o PipeTargetParametersKinesisStreamParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersKinesisStreamParameters] {
	return pulumix.Output[PipeTargetParametersKinesisStreamParameters]{
		OutputState: o.OutputState,
	}
}

// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
func (o PipeTargetParametersKinesisStreamParametersOutput) PartitionKey() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersKinesisStreamParameters](o, func(v PipeTargetParametersKinesisStreamParameters) string { return v.PartitionKey })
}

type PipeTargetParametersLambdaFunctionParameters struct {
	// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
	InvocationType string `pulumi:"invocationType"`
}

type PipeTargetParametersLambdaFunctionParametersArgs struct {
	// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
	InvocationType pulumix.Input[string] `pulumi:"invocationType"`
}

func (PipeTargetParametersLambdaFunctionParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersLambdaFunctionParameters)(nil)).Elem()
}

func (i PipeTargetParametersLambdaFunctionParametersArgs) ToPipeTargetParametersLambdaFunctionParametersOutput() PipeTargetParametersLambdaFunctionParametersOutput {
	return i.ToPipeTargetParametersLambdaFunctionParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersLambdaFunctionParametersArgs) ToPipeTargetParametersLambdaFunctionParametersOutputWithContext(ctx context.Context) PipeTargetParametersLambdaFunctionParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersLambdaFunctionParametersOutput)
}

func (i *PipeTargetParametersLambdaFunctionParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersLambdaFunctionParametersArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersLambdaFunctionParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersLambdaFunctionParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersLambdaFunctionParameters)(nil)).Elem()
}

func (o PipeTargetParametersLambdaFunctionParametersOutput) ToPipeTargetParametersLambdaFunctionParametersOutput() PipeTargetParametersLambdaFunctionParametersOutput {
	return o
}

func (o PipeTargetParametersLambdaFunctionParametersOutput) ToPipeTargetParametersLambdaFunctionParametersOutputWithContext(ctx context.Context) PipeTargetParametersLambdaFunctionParametersOutput {
	return o
}

func (o PipeTargetParametersLambdaFunctionParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersLambdaFunctionParameters] {
	return pulumix.Output[PipeTargetParametersLambdaFunctionParameters]{
		OutputState: o.OutputState,
	}
}

// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
func (o PipeTargetParametersLambdaFunctionParametersOutput) InvocationType() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersLambdaFunctionParameters](o, func(v PipeTargetParametersLambdaFunctionParameters) string { return v.InvocationType })
}

type PipeTargetParametersRedshiftDataParameters struct {
	// The name of the database. Required when authenticating using temporary credentials.
	Database string `pulumi:"database"`
	// The database user name. Required when authenticating using temporary credentials.
	DbUser *string `pulumi:"dbUser"`
	// The name or ARN of the secret that enables access to the database. Required when authenticating using Secrets Manager.
	SecretManagerArn *string `pulumi:"secretManagerArn"`
	// List of SQL statements text to run, each of maximum length of 100,000.
	Sqls []string `pulumi:"sqls"`
	// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
	StatementName *string `pulumi:"statementName"`
	// Indicates whether to send an event back to EventBridge after the SQL statement runs.
	WithEvent *bool `pulumi:"withEvent"`
}

type PipeTargetParametersRedshiftDataParametersArgs struct {
	// The name of the database. Required when authenticating using temporary credentials.
	Database pulumix.Input[string] `pulumi:"database"`
	// The database user name. Required when authenticating using temporary credentials.
	DbUser pulumix.Input[*string] `pulumi:"dbUser"`
	// The name or ARN of the secret that enables access to the database. Required when authenticating using Secrets Manager.
	SecretManagerArn pulumix.Input[*string] `pulumi:"secretManagerArn"`
	// List of SQL statements text to run, each of maximum length of 100,000.
	Sqls pulumix.Input[[]string] `pulumi:"sqls"`
	// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
	StatementName pulumix.Input[*string] `pulumi:"statementName"`
	// Indicates whether to send an event back to EventBridge after the SQL statement runs.
	WithEvent pulumix.Input[*bool] `pulumi:"withEvent"`
}

func (PipeTargetParametersRedshiftDataParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersRedshiftDataParameters)(nil)).Elem()
}

func (i PipeTargetParametersRedshiftDataParametersArgs) ToPipeTargetParametersRedshiftDataParametersOutput() PipeTargetParametersRedshiftDataParametersOutput {
	return i.ToPipeTargetParametersRedshiftDataParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersRedshiftDataParametersArgs) ToPipeTargetParametersRedshiftDataParametersOutputWithContext(ctx context.Context) PipeTargetParametersRedshiftDataParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersRedshiftDataParametersOutput)
}

func (i *PipeTargetParametersRedshiftDataParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersRedshiftDataParametersArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersRedshiftDataParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersRedshiftDataParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersRedshiftDataParameters)(nil)).Elem()
}

func (o PipeTargetParametersRedshiftDataParametersOutput) ToPipeTargetParametersRedshiftDataParametersOutput() PipeTargetParametersRedshiftDataParametersOutput {
	return o
}

func (o PipeTargetParametersRedshiftDataParametersOutput) ToPipeTargetParametersRedshiftDataParametersOutputWithContext(ctx context.Context) PipeTargetParametersRedshiftDataParametersOutput {
	return o
}

func (o PipeTargetParametersRedshiftDataParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersRedshiftDataParameters] {
	return pulumix.Output[PipeTargetParametersRedshiftDataParameters]{
		OutputState: o.OutputState,
	}
}

// The name of the database. Required when authenticating using temporary credentials.
func (o PipeTargetParametersRedshiftDataParametersOutput) Database() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersRedshiftDataParameters](o, func(v PipeTargetParametersRedshiftDataParameters) string { return v.Database })
}

// The database user name. Required when authenticating using temporary credentials.
func (o PipeTargetParametersRedshiftDataParametersOutput) DbUser() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersRedshiftDataParameters](o, func(v PipeTargetParametersRedshiftDataParameters) *string { return v.DbUser })
}

// The name or ARN of the secret that enables access to the database. Required when authenticating using Secrets Manager.
func (o PipeTargetParametersRedshiftDataParametersOutput) SecretManagerArn() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersRedshiftDataParameters](o, func(v PipeTargetParametersRedshiftDataParameters) *string { return v.SecretManagerArn })
}

// List of SQL statements text to run, each of maximum length of 100,000.
func (o PipeTargetParametersRedshiftDataParametersOutput) Sqls() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PipeTargetParametersRedshiftDataParameters](o, func(v PipeTargetParametersRedshiftDataParameters) []string { return v.Sqls })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
func (o PipeTargetParametersRedshiftDataParametersOutput) StatementName() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersRedshiftDataParameters](o, func(v PipeTargetParametersRedshiftDataParameters) *string { return v.StatementName })
}

// Indicates whether to send an event back to EventBridge after the SQL statement runs.
func (o PipeTargetParametersRedshiftDataParametersOutput) WithEvent() pulumix.Output[*bool] {
	return pulumix.Apply[PipeTargetParametersRedshiftDataParameters](o, func(v PipeTargetParametersRedshiftDataParameters) *bool { return v.WithEvent })
}

type PipeTargetParametersSagemakerPipelineParameters struct {
	// List of Parameter names and values for SageMaker Model Building Pipeline execution. Detailed below.
	PipelineParameters []PipeTargetParametersSagemakerPipelineParametersPipelineParameter `pulumi:"pipelineParameters"`
}

type PipeTargetParametersSagemakerPipelineParametersArgs struct {
	// List of Parameter names and values for SageMaker Model Building Pipeline execution. Detailed below.
	PipelineParameters pulumix.Input[[]*PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs] `pulumi:"pipelineParameters"`
}

func (PipeTargetParametersSagemakerPipelineParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersSagemakerPipelineParameters)(nil)).Elem()
}

func (i PipeTargetParametersSagemakerPipelineParametersArgs) ToPipeTargetParametersSagemakerPipelineParametersOutput() PipeTargetParametersSagemakerPipelineParametersOutput {
	return i.ToPipeTargetParametersSagemakerPipelineParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersSagemakerPipelineParametersArgs) ToPipeTargetParametersSagemakerPipelineParametersOutputWithContext(ctx context.Context) PipeTargetParametersSagemakerPipelineParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersSagemakerPipelineParametersOutput)
}

func (i *PipeTargetParametersSagemakerPipelineParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersSagemakerPipelineParametersArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersSagemakerPipelineParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersSagemakerPipelineParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersSagemakerPipelineParameters)(nil)).Elem()
}

func (o PipeTargetParametersSagemakerPipelineParametersOutput) ToPipeTargetParametersSagemakerPipelineParametersOutput() PipeTargetParametersSagemakerPipelineParametersOutput {
	return o
}

func (o PipeTargetParametersSagemakerPipelineParametersOutput) ToPipeTargetParametersSagemakerPipelineParametersOutputWithContext(ctx context.Context) PipeTargetParametersSagemakerPipelineParametersOutput {
	return o
}

func (o PipeTargetParametersSagemakerPipelineParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersSagemakerPipelineParameters] {
	return pulumix.Output[PipeTargetParametersSagemakerPipelineParameters]{
		OutputState: o.OutputState,
	}
}

// List of Parameter names and values for SageMaker Model Building Pipeline execution. Detailed below.
func (o PipeTargetParametersSagemakerPipelineParametersOutput) PipelineParameters() pulumix.GArrayOutput[PipeTargetParametersSagemakerPipelineParametersPipelineParameter, PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput] {
	value := pulumix.Apply[PipeTargetParametersSagemakerPipelineParameters](o, func(v PipeTargetParametersSagemakerPipelineParameters) []PipeTargetParametersSagemakerPipelineParametersPipelineParameter {
		return v.PipelineParameters
	})
	return pulumix.GArrayOutput[PipeTargetParametersSagemakerPipelineParametersPipelineParameter, PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput]{OutputState: value.OutputState}
}

type PipeTargetParametersSagemakerPipelineParametersPipelineParameter struct {
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name string `pulumi:"name"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value string `pulumi:"value"`
}

type PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs struct {
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[string] `pulumi:"name"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersSagemakerPipelineParametersPipelineParameter)(nil)).Elem()
}

func (i PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs) ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput() PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput {
	return i.ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterOutputWithContext(context.Background())
}

func (i PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs) ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterOutputWithContext(ctx context.Context) PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput)
}

func (i *PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersSagemakerPipelineParametersPipelineParameter)(nil)).Elem()
}

func (o PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput) ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput() PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput {
	return o
}

func (o PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput) ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterOutputWithContext(ctx context.Context) PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput {
	return o
}

func (o PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersSagemakerPipelineParametersPipelineParameter] {
	return pulumix.Output[PipeTargetParametersSagemakerPipelineParametersPipelineParameter]{
		OutputState: o.OutputState,
	}
}

// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersSagemakerPipelineParametersPipelineParameter](o, func(v PipeTargetParametersSagemakerPipelineParametersPipelineParameter) string { return v.Name })
}

// The value of the key-value pair. For environment variables, this is the value of the environment variable.
func (o PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersSagemakerPipelineParametersPipelineParameter](o, func(v PipeTargetParametersSagemakerPipelineParametersPipelineParameter) string { return v.Value })
}

type PipeTargetParametersSqsQueueParameters struct {
	// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages.
	MessageDeduplicationId *string `pulumi:"messageDeduplicationId"`
	// The FIFO message group ID to use as the target.
	MessageGroupId *string `pulumi:"messageGroupId"`
}

type PipeTargetParametersSqsQueueParametersArgs struct {
	// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages.
	MessageDeduplicationId pulumix.Input[*string] `pulumi:"messageDeduplicationId"`
	// The FIFO message group ID to use as the target.
	MessageGroupId pulumix.Input[*string] `pulumi:"messageGroupId"`
}

func (PipeTargetParametersSqsQueueParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersSqsQueueParameters)(nil)).Elem()
}

func (i PipeTargetParametersSqsQueueParametersArgs) ToPipeTargetParametersSqsQueueParametersOutput() PipeTargetParametersSqsQueueParametersOutput {
	return i.ToPipeTargetParametersSqsQueueParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersSqsQueueParametersArgs) ToPipeTargetParametersSqsQueueParametersOutputWithContext(ctx context.Context) PipeTargetParametersSqsQueueParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersSqsQueueParametersOutput)
}

func (i *PipeTargetParametersSqsQueueParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersSqsQueueParametersArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersSqsQueueParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersSqsQueueParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersSqsQueueParameters)(nil)).Elem()
}

func (o PipeTargetParametersSqsQueueParametersOutput) ToPipeTargetParametersSqsQueueParametersOutput() PipeTargetParametersSqsQueueParametersOutput {
	return o
}

func (o PipeTargetParametersSqsQueueParametersOutput) ToPipeTargetParametersSqsQueueParametersOutputWithContext(ctx context.Context) PipeTargetParametersSqsQueueParametersOutput {
	return o
}

func (o PipeTargetParametersSqsQueueParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersSqsQueueParameters] {
	return pulumix.Output[PipeTargetParametersSqsQueueParameters]{
		OutputState: o.OutputState,
	}
}

// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages.
func (o PipeTargetParametersSqsQueueParametersOutput) MessageDeduplicationId() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersSqsQueueParameters](o, func(v PipeTargetParametersSqsQueueParameters) *string { return v.MessageDeduplicationId })
}

// The FIFO message group ID to use as the target.
func (o PipeTargetParametersSqsQueueParametersOutput) MessageGroupId() pulumix.Output[*string] {
	return pulumix.Apply[PipeTargetParametersSqsQueueParameters](o, func(v PipeTargetParametersSqsQueueParameters) *string { return v.MessageGroupId })
}

type PipeTargetParametersStepFunctionStateMachineParameters struct {
	// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
	InvocationType string `pulumi:"invocationType"`
}

type PipeTargetParametersStepFunctionStateMachineParametersArgs struct {
	// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
	InvocationType pulumix.Input[string] `pulumi:"invocationType"`
}

func (PipeTargetParametersStepFunctionStateMachineParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersStepFunctionStateMachineParameters)(nil)).Elem()
}

func (i PipeTargetParametersStepFunctionStateMachineParametersArgs) ToPipeTargetParametersStepFunctionStateMachineParametersOutput() PipeTargetParametersStepFunctionStateMachineParametersOutput {
	return i.ToPipeTargetParametersStepFunctionStateMachineParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersStepFunctionStateMachineParametersArgs) ToPipeTargetParametersStepFunctionStateMachineParametersOutputWithContext(ctx context.Context) PipeTargetParametersStepFunctionStateMachineParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersStepFunctionStateMachineParametersOutput)
}

func (i *PipeTargetParametersStepFunctionStateMachineParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersStepFunctionStateMachineParametersArgs] {
	return pulumix.Val(i)
}

type PipeTargetParametersStepFunctionStateMachineParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersStepFunctionStateMachineParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersStepFunctionStateMachineParameters)(nil)).Elem()
}

func (o PipeTargetParametersStepFunctionStateMachineParametersOutput) ToPipeTargetParametersStepFunctionStateMachineParametersOutput() PipeTargetParametersStepFunctionStateMachineParametersOutput {
	return o
}

func (o PipeTargetParametersStepFunctionStateMachineParametersOutput) ToPipeTargetParametersStepFunctionStateMachineParametersOutputWithContext(ctx context.Context) PipeTargetParametersStepFunctionStateMachineParametersOutput {
	return o
}

func (o PipeTargetParametersStepFunctionStateMachineParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersStepFunctionStateMachineParameters] {
	return pulumix.Output[PipeTargetParametersStepFunctionStateMachineParameters]{
		OutputState: o.OutputState,
	}
}

// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
func (o PipeTargetParametersStepFunctionStateMachineParametersOutput) InvocationType() pulumix.Output[string] {
	return pulumix.Apply[PipeTargetParametersStepFunctionStateMachineParameters](o, func(v PipeTargetParametersStepFunctionStateMachineParameters) string { return v.InvocationType })
}

func init() {
	pulumi.RegisterOutputType(PipeEnrichmentParametersOutput{})
	pulumi.RegisterOutputType(PipeEnrichmentParametersHttpParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersActivemqBrokerParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersActivemqBrokerParametersCredentialsOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersDynamodbStreamParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersFilterCriteriaOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersFilterCriteriaFilterOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersKinesisStreamParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersManagedStreamingKafkaParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersRabbitmqBrokerParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersSelfManagedKafkaParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersSelfManagedKafkaParametersVpcOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersSqsQueueParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersArrayPropertiesOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersContainerOverridesOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersDependsOnOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersRetryStrategyOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersCloudwatchLogsParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersPlacementConstraintOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersPlacementStrategyOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEventbridgeEventBusParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersHttpParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersKinesisStreamParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersLambdaFunctionParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersRedshiftDataParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersSagemakerPipelineParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersSqsQueueParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersStepFunctionStateMachineParametersOutput{})
}
