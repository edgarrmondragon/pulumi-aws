// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Parses an ARN into its constituent parts.
func GetArn(ctx *pulumi.Context, args *GetArnArgs, opts ...pulumi.InvokeOption) (*GetArnResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetArnResult
	err := ctx.Invoke("aws:index/getArn:getArn", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getArn.
type GetArnArgs struct {
	// ARN to parse.
	Arn string  `pulumi:"arn"`
	Id  *string `pulumi:"id"`
}

// A collection of values returned by getArn.
type GetArnResult struct {
	// The [ID](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html) of the AWS account that owns the resource, without the hyphens.
	Account string `pulumi:"account"`
	Arn     string `pulumi:"arn"`
	Id      string `pulumi:"id"`
	// Partition that the resource is in.
	Partition string `pulumi:"partition"`
	// Region the resource resides in.
	// Note that the ARNs for some resources do not require a region, so this component might be omitted.
	Region string `pulumi:"region"`
	// Content of this part of the ARN varies by service.
	// It often includes an indicator of the type of resource—for example, an IAM user or Amazon RDS database —followed by a slash (/) or a colon (:), followed by the resource name itself.
	Resource string `pulumi:"resource"`
	// The [service namespace](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces) that identifies the AWS product.
	Service string `pulumi:"service"`
}

func GetArnOutput(ctx *pulumi.Context, args GetArnOutputArgs, opts ...pulumi.InvokeOption) GetArnResultOutput {
	outputResult := pulumix.ApplyErr[*GetArnArgs](args.ToOutput(), func(plainArgs *GetArnArgs) (*GetArnResult, error) {
		return GetArn(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetArnResultOutput, *GetArnResult](outputResult)
}

// A collection of arguments for invoking getArn.
type GetArnOutputArgs struct {
	// ARN to parse.
	Arn pulumix.Input[string]  `pulumi:"arn"`
	Id  pulumix.Input[*string] `pulumi:"id"`
}

func (args GetArnOutputArgs) ToOutput() pulumix.Output[*GetArnArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetArnArgs {
		return &GetArnArgs{
			Arn: resolvedArgs[0].(string),
			Id:  resolvedArgs[1].(*string),
		}
	})
}

type GetArnResultOutput struct{ *pulumi.OutputState }

func (GetArnResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetArnResult)(nil)).Elem()
}

func (o GetArnResultOutput) ToOutput(context.Context) pulumix.Output[*GetArnResult] {
	return pulumix.Output[*GetArnResult]{
		OutputState: o.OutputState,
	}
}

func (o GetArnResultOutput) Account() pulumix.Output[string] {
	return pulumix.Apply[*GetArnResult](o, func(v *GetArnResult) string { return v.Account })
}

func (o GetArnResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*GetArnResult](o, func(v *GetArnResult) string { return v.Arn })
}

func (o GetArnResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetArnResult](o, func(v *GetArnResult) string { return v.Id })
}

func (o GetArnResultOutput) Partition() pulumix.Output[string] {
	return pulumix.Apply[*GetArnResult](o, func(v *GetArnResult) string { return v.Partition })
}

func (o GetArnResultOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[*GetArnResult](o, func(v *GetArnResult) string { return v.Region })
}

func (o GetArnResultOutput) Resource() pulumix.Output[string] {
	return pulumix.Apply[*GetArnResult](o, func(v *GetArnResult) string { return v.Resource })
}

func (o GetArnResultOutput) Service() pulumix.Output[string] {
	return pulumix.Apply[*GetArnResult](o, func(v *GetArnResult) string { return v.Service })
}
