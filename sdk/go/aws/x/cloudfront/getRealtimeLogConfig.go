// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfront

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudFront real-time log configuration resource.
func LookupRealtimeLogConfig(ctx *pulumi.Context, args *LookupRealtimeLogConfigArgs, opts ...pulumi.InvokeOption) (*LookupRealtimeLogConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRealtimeLogConfigResult
	err := ctx.Invoke("aws:cloudfront/getRealtimeLogConfig:getRealtimeLogConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRealtimeLogConfig.
type LookupRealtimeLogConfigArgs struct {
	// Unique name to identify this real-time log configuration.
	Name string `pulumi:"name"`
}

// A collection of values returned by getRealtimeLogConfig.
type LookupRealtimeLogConfigResult struct {
	// ARN (Amazon Resource Name) of the CloudFront real-time log configuration.
	Arn string `pulumi:"arn"`
	// (Required) Amazon Kinesis data streams where real-time log data is sent.
	Endpoints []GetRealtimeLogConfigEndpoint `pulumi:"endpoints"`
	// (Required) Fields that are included in each real-time log record. See the [AWS documentation](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-fields) for supported values.
	Fields []string `pulumi:"fields"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// (Required) Sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. An integer between `1` and `100`, inclusive.
	SamplingRate int `pulumi:"samplingRate"`
}

func LookupRealtimeLogConfigOutput(ctx *pulumi.Context, args LookupRealtimeLogConfigOutputArgs, opts ...pulumi.InvokeOption) LookupRealtimeLogConfigResultOutput {
	outputResult := pulumix.ApplyErr[*LookupRealtimeLogConfigArgs](args.ToOutput(), func(plainArgs *LookupRealtimeLogConfigArgs) (*LookupRealtimeLogConfigResult, error) {
		return LookupRealtimeLogConfig(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupRealtimeLogConfigResultOutput, *LookupRealtimeLogConfigResult](outputResult)
}

// A collection of arguments for invoking getRealtimeLogConfig.
type LookupRealtimeLogConfigOutputArgs struct {
	// Unique name to identify this real-time log configuration.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupRealtimeLogConfigOutputArgs) ToOutput() pulumix.Output[*LookupRealtimeLogConfigArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupRealtimeLogConfigArgs {
		return &LookupRealtimeLogConfigArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupRealtimeLogConfigResultOutput struct{ *pulumi.OutputState }

func (LookupRealtimeLogConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRealtimeLogConfigResult)(nil)).Elem()
}

func (o LookupRealtimeLogConfigResultOutput) ToOutput(context.Context) pulumix.Output[*LookupRealtimeLogConfigResult] {
	return pulumix.Output[*LookupRealtimeLogConfigResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupRealtimeLogConfigResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupRealtimeLogConfigResult](o, func(v *LookupRealtimeLogConfigResult) string { return v.Arn })
}

func (o LookupRealtimeLogConfigResultOutput) Endpoints() pulumix.GArrayOutput[GetRealtimeLogConfigEndpoint, GetRealtimeLogConfigEndpointOutput] {
	value := pulumix.Apply[*LookupRealtimeLogConfigResult](o, func(v *LookupRealtimeLogConfigResult) []GetRealtimeLogConfigEndpoint { return v.Endpoints })
	return pulumix.GArrayOutput[GetRealtimeLogConfigEndpoint, GetRealtimeLogConfigEndpointOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupRealtimeLogConfigResultOutput) Fields() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupRealtimeLogConfigResult](o, func(v *LookupRealtimeLogConfigResult) []string { return v.Fields })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupRealtimeLogConfigResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupRealtimeLogConfigResult](o, func(v *LookupRealtimeLogConfigResult) string { return v.Id })
}

func (o LookupRealtimeLogConfigResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupRealtimeLogConfigResult](o, func(v *LookupRealtimeLogConfigResult) string { return v.Name })
}

func (o LookupRealtimeLogConfigResultOutput) SamplingRate() pulumix.Output[int] {
	return pulumix.Apply[*LookupRealtimeLogConfigResult](o, func(v *LookupRealtimeLogConfigResult) int { return v.SamplingRate })
}
