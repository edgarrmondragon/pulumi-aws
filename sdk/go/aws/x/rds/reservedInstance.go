// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an RDS DB Reserved Instance.
//
// > **NOTE:** Once created, a reservation is valid for the `duration` of the provided `offeringId` and cannot be deleted. Performing a `destroy` will only remove the resource from state. For more information see [RDS Reserved Instances Documentation](https://aws.amazon.com/rds/reserved-instances/) and [PurchaseReservedDBInstancesOffering](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_PurchaseReservedDBInstancesOffering.html).
//
// > **NOTE:** Due to the expense of testing this resource, we provide it as best effort. If you find it useful, and have the ability to help test or notice issues, consider reaching out to us on GitHub.
type ReservedInstance struct {
	pulumi.CustomResourceState

	// ARN for the reserved DB instance.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Currency code for the reserved DB instance.
	CurrencyCode pulumix.Output[string] `pulumi:"currencyCode"`
	// DB instance class for the reserved DB instance.
	DbInstanceClass pulumix.Output[string] `pulumi:"dbInstanceClass"`
	// Duration of the reservation in seconds.
	Duration pulumix.Output[int] `pulumi:"duration"`
	// Fixed price charged for this reserved DB instance.
	FixedPrice pulumix.Output[float64] `pulumi:"fixedPrice"`
	// Number of instances to reserve. Default value is `1`.
	InstanceCount pulumix.Output[*int] `pulumi:"instanceCount"`
	// Unique identifier for the lease associated with the reserved DB instance. Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.
	LeaseId pulumix.Output[string] `pulumi:"leaseId"`
	// Whether the reservation applies to Multi-AZ deployments.
	MultiAz pulumix.Output[bool] `pulumi:"multiAz"`
	// ID of the Reserved DB instance offering to purchase. To determine an `offeringId`, see the `rds.getReservedInstanceOffering` data source.
	//
	// The following arguments are optional:
	OfferingId pulumix.Output[string] `pulumi:"offeringId"`
	// Offering type of this reserved DB instance.
	OfferingType pulumix.Output[string] `pulumi:"offeringType"`
	// Description of the reserved DB instance.
	ProductDescription pulumix.Output[string] `pulumi:"productDescription"`
	// Recurring price charged to run this reserved DB instance.
	RecurringCharges pulumix.GArrayOutput[ReservedInstanceRecurringCharge, ReservedInstanceRecurringChargeOutput] `pulumi:"recurringCharges"`
	// Customer-specified identifier to track this reservation.
	ReservationId pulumix.Output[*string] `pulumi:"reservationId"`
	// Time the reservation started.
	StartTime pulumix.Output[string] `pulumi:"startTime"`
	// State of the reserved DB instance.
	State pulumix.Output[string] `pulumi:"state"`
	// Map of tags to assign to the DB reservation. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Hourly price charged for this reserved DB instance.
	UsagePrice pulumix.Output[float64] `pulumi:"usagePrice"`
}

// NewReservedInstance registers a new resource with the given unique name, arguments, and options.
func NewReservedInstance(ctx *pulumi.Context,
	name string, args *ReservedInstanceArgs, opts ...pulumi.ResourceOption) (*ReservedInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OfferingId == nil {
		return nil, errors.New("invalid value for required argument 'OfferingId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReservedInstance
	err := ctx.RegisterResource("aws:rds/reservedInstance:ReservedInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservedInstance gets an existing ReservedInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservedInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservedInstanceState, opts ...pulumi.ResourceOption) (*ReservedInstance, error) {
	var resource ReservedInstance
	err := ctx.ReadResource("aws:rds/reservedInstance:ReservedInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReservedInstance resources.
type reservedInstanceState struct {
	// ARN for the reserved DB instance.
	Arn *string `pulumi:"arn"`
	// Currency code for the reserved DB instance.
	CurrencyCode *string `pulumi:"currencyCode"`
	// DB instance class for the reserved DB instance.
	DbInstanceClass *string `pulumi:"dbInstanceClass"`
	// Duration of the reservation in seconds.
	Duration *int `pulumi:"duration"`
	// Fixed price charged for this reserved DB instance.
	FixedPrice *float64 `pulumi:"fixedPrice"`
	// Number of instances to reserve. Default value is `1`.
	InstanceCount *int `pulumi:"instanceCount"`
	// Unique identifier for the lease associated with the reserved DB instance. Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.
	LeaseId *string `pulumi:"leaseId"`
	// Whether the reservation applies to Multi-AZ deployments.
	MultiAz *bool `pulumi:"multiAz"`
	// ID of the Reserved DB instance offering to purchase. To determine an `offeringId`, see the `rds.getReservedInstanceOffering` data source.
	//
	// The following arguments are optional:
	OfferingId *string `pulumi:"offeringId"`
	// Offering type of this reserved DB instance.
	OfferingType *string `pulumi:"offeringType"`
	// Description of the reserved DB instance.
	ProductDescription *string `pulumi:"productDescription"`
	// Recurring price charged to run this reserved DB instance.
	RecurringCharges []ReservedInstanceRecurringCharge `pulumi:"recurringCharges"`
	// Customer-specified identifier to track this reservation.
	ReservationId *string `pulumi:"reservationId"`
	// Time the reservation started.
	StartTime *string `pulumi:"startTime"`
	// State of the reserved DB instance.
	State *string `pulumi:"state"`
	// Map of tags to assign to the DB reservation. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Hourly price charged for this reserved DB instance.
	UsagePrice *float64 `pulumi:"usagePrice"`
}

type ReservedInstanceState struct {
	// ARN for the reserved DB instance.
	Arn pulumix.Input[*string]
	// Currency code for the reserved DB instance.
	CurrencyCode pulumix.Input[*string]
	// DB instance class for the reserved DB instance.
	DbInstanceClass pulumix.Input[*string]
	// Duration of the reservation in seconds.
	Duration pulumix.Input[*int]
	// Fixed price charged for this reserved DB instance.
	FixedPrice pulumix.Input[*float64]
	// Number of instances to reserve. Default value is `1`.
	InstanceCount pulumix.Input[*int]
	// Unique identifier for the lease associated with the reserved DB instance. Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.
	LeaseId pulumix.Input[*string]
	// Whether the reservation applies to Multi-AZ deployments.
	MultiAz pulumix.Input[*bool]
	// ID of the Reserved DB instance offering to purchase. To determine an `offeringId`, see the `rds.getReservedInstanceOffering` data source.
	//
	// The following arguments are optional:
	OfferingId pulumix.Input[*string]
	// Offering type of this reserved DB instance.
	OfferingType pulumix.Input[*string]
	// Description of the reserved DB instance.
	ProductDescription pulumix.Input[*string]
	// Recurring price charged to run this reserved DB instance.
	RecurringCharges pulumix.Input[[]*ReservedInstanceRecurringChargeArgs]
	// Customer-specified identifier to track this reservation.
	ReservationId pulumix.Input[*string]
	// Time the reservation started.
	StartTime pulumix.Input[*string]
	// State of the reserved DB instance.
	State pulumix.Input[*string]
	// Map of tags to assign to the DB reservation. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Hourly price charged for this reserved DB instance.
	UsagePrice pulumix.Input[*float64]
}

func (ReservedInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedInstanceState)(nil)).Elem()
}

type reservedInstanceArgs struct {
	// Number of instances to reserve. Default value is `1`.
	InstanceCount *int `pulumi:"instanceCount"`
	// ID of the Reserved DB instance offering to purchase. To determine an `offeringId`, see the `rds.getReservedInstanceOffering` data source.
	//
	// The following arguments are optional:
	OfferingId string `pulumi:"offeringId"`
	// Customer-specified identifier to track this reservation.
	ReservationId *string `pulumi:"reservationId"`
	// Map of tags to assign to the DB reservation. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ReservedInstance resource.
type ReservedInstanceArgs struct {
	// Number of instances to reserve. Default value is `1`.
	InstanceCount pulumix.Input[*int]
	// ID of the Reserved DB instance offering to purchase. To determine an `offeringId`, see the `rds.getReservedInstanceOffering` data source.
	//
	// The following arguments are optional:
	OfferingId pulumix.Input[string]
	// Customer-specified identifier to track this reservation.
	ReservationId pulumix.Input[*string]
	// Map of tags to assign to the DB reservation. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ReservedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedInstanceArgs)(nil)).Elem()
}

type ReservedInstanceOutput struct{ *pulumi.OutputState }

func (ReservedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservedInstance)(nil)).Elem()
}

func (o ReservedInstanceOutput) ToReservedInstanceOutput() ReservedInstanceOutput {
	return o
}

func (o ReservedInstanceOutput) ToReservedInstanceOutputWithContext(ctx context.Context) ReservedInstanceOutput {
	return o
}

func (o ReservedInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[ReservedInstance] {
	return pulumix.Output[ReservedInstance]{
		OutputState: o.OutputState,
	}
}

// ARN for the reserved DB instance.
func (o ReservedInstanceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Currency code for the reserved DB instance.
func (o ReservedInstanceOutput) CurrencyCode() pulumix.Output[string] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.Output[string] { return v.CurrencyCode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// DB instance class for the reserved DB instance.
func (o ReservedInstanceOutput) DbInstanceClass() pulumix.Output[string] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.Output[string] { return v.DbInstanceClass })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Duration of the reservation in seconds.
func (o ReservedInstanceOutput) Duration() pulumix.Output[int] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.Output[int] { return v.Duration })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Fixed price charged for this reserved DB instance.
func (o ReservedInstanceOutput) FixedPrice() pulumix.Output[float64] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.Output[float64] { return v.FixedPrice })
	return pulumix.Flatten[float64, pulumix.Output[float64]](value)
}

// Number of instances to reserve. Default value is `1`.
func (o ReservedInstanceOutput) InstanceCount() pulumix.Output[*int] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.Output[*int] { return v.InstanceCount })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Unique identifier for the lease associated with the reserved DB instance. Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.
func (o ReservedInstanceOutput) LeaseId() pulumix.Output[string] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.Output[string] { return v.LeaseId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether the reservation applies to Multi-AZ deployments.
func (o ReservedInstanceOutput) MultiAz() pulumix.Output[bool] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.Output[bool] { return v.MultiAz })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// ID of the Reserved DB instance offering to purchase. To determine an `offeringId`, see the `rds.getReservedInstanceOffering` data source.
//
// The following arguments are optional:
func (o ReservedInstanceOutput) OfferingId() pulumix.Output[string] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.Output[string] { return v.OfferingId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Offering type of this reserved DB instance.
func (o ReservedInstanceOutput) OfferingType() pulumix.Output[string] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.Output[string] { return v.OfferingType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the reserved DB instance.
func (o ReservedInstanceOutput) ProductDescription() pulumix.Output[string] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.Output[string] { return v.ProductDescription })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Recurring price charged to run this reserved DB instance.
func (o ReservedInstanceOutput) RecurringCharges() pulumix.GArrayOutput[ReservedInstanceRecurringCharge, ReservedInstanceRecurringChargeOutput] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.GArrayOutput[ReservedInstanceRecurringCharge, ReservedInstanceRecurringChargeOutput] {
		return v.RecurringCharges
	})
	unwrapped := pulumix.Flatten[[]ReservedInstanceRecurringCharge, pulumix.GArrayOutput[ReservedInstanceRecurringCharge, ReservedInstanceRecurringChargeOutput]](value)
	return pulumix.GArrayOutput[ReservedInstanceRecurringCharge, ReservedInstanceRecurringChargeOutput]{OutputState: unwrapped.OutputState}
}

// Customer-specified identifier to track this reservation.
func (o ReservedInstanceOutput) ReservationId() pulumix.Output[*string] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.Output[*string] { return v.ReservationId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Time the reservation started.
func (o ReservedInstanceOutput) StartTime() pulumix.Output[string] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.Output[string] { return v.StartTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// State of the reserved DB instance.
func (o ReservedInstanceOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of tags to assign to the DB reservation. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ReservedInstanceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ReservedInstanceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Hourly price charged for this reserved DB instance.
func (o ReservedInstanceOutput) UsagePrice() pulumix.Output[float64] {
	value := pulumix.Apply[ReservedInstance](o, func(v ReservedInstance) pulumix.Output[float64] { return v.UsagePrice })
	return pulumix.Flatten[float64, pulumix.Output[float64]](value)
}

func init() {
	pulumi.RegisterOutputType(ReservedInstanceOutput{})
}
