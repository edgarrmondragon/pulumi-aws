// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this resource to invoke a lambda function. The lambda function is invoked with the [RequestResponse](https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestSyntax) invocation type.
//
// > **NOTE:** By default this resource _only_ invokes the function when the arguments call for a create or replace. In other words, after an initial invocation on _apply_, if the arguments do not change, a subsequent _apply_ does not invoke the function again. To dynamically invoke the function, see the `triggers` example below. To always invoke a function on each _apply_, see the `lambda.Invocation` data source. To invoke the lambda function when the Pulumi resource is updated and deleted, see the CRUD Lifecycle Scope example below.
//
// > **NOTE:** If you get a `KMSAccessDeniedException: Lambda was unable to decrypt the environment variables because KMS access was denied` error when invoking an `lambda.Function` with environment variables, the IAM role associated with the function may have been deleted and recreated _after_ the function was created. You can fix the problem two ways: 1) updating the function's role to another role and then updating it back again to the recreated role, or 2) by using Pulumi to `taint` the function and `apply` your configuration again to recreate the function. (When you create a function, Lambda grants permissions on the KMS key to the function's IAM role. If the IAM role is recreated, the grant is no longer valid. Changing the function's role or recreating the function causes Lambda to update the grant.)
type Invocation struct {
	pulumi.CustomResourceState

	// Name of the lambda function.
	FunctionName pulumix.Output[string] `pulumi:"functionName"`
	// JSON payload to the lambda function.
	//
	// The following arguments are optional:
	Input pulumix.Output[string] `pulumi:"input"`
	// Lifecycle scope of the resource to manage. Valid values are `CREATE_ONLY` and `CRUD`. Defaults to `CREATE_ONLY`. `CREATE_ONLY` will invoke the function only on creation or replacement. `CRUD` will invoke the function on each lifecycle event, and augment the input JSON payload with additional lifecycle information.
	LifecycleScope pulumix.Output[*string] `pulumi:"lifecycleScope"`
	// Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
	Qualifier pulumix.Output[*string] `pulumi:"qualifier"`
	// String result of the lambda function invocation.
	Result       pulumix.Output[string]  `pulumi:"result"`
	TerraformKey pulumix.Output[*string] `pulumi:"terraformKey"`
	// Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
	Triggers pulumix.MapOutput[string] `pulumi:"triggers"`
}

// NewInvocation registers a new resource with the given unique name, arguments, and options.
func NewInvocation(ctx *pulumi.Context,
	name string, args *InvocationArgs, opts ...pulumi.ResourceOption) (*Invocation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	if args.Input == nil {
		return nil, errors.New("invalid value for required argument 'Input'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Invocation
	err := ctx.RegisterResource("aws:lambda/invocation:Invocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInvocation gets an existing Invocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInvocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InvocationState, opts ...pulumi.ResourceOption) (*Invocation, error) {
	var resource Invocation
	err := ctx.ReadResource("aws:lambda/invocation:Invocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Invocation resources.
type invocationState struct {
	// Name of the lambda function.
	FunctionName *string `pulumi:"functionName"`
	// JSON payload to the lambda function.
	//
	// The following arguments are optional:
	Input *string `pulumi:"input"`
	// Lifecycle scope of the resource to manage. Valid values are `CREATE_ONLY` and `CRUD`. Defaults to `CREATE_ONLY`. `CREATE_ONLY` will invoke the function only on creation or replacement. `CRUD` will invoke the function on each lifecycle event, and augment the input JSON payload with additional lifecycle information.
	LifecycleScope *string `pulumi:"lifecycleScope"`
	// Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
	Qualifier *string `pulumi:"qualifier"`
	// String result of the lambda function invocation.
	Result       *string `pulumi:"result"`
	TerraformKey *string `pulumi:"terraformKey"`
	// Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
	Triggers map[string]string `pulumi:"triggers"`
}

type InvocationState struct {
	// Name of the lambda function.
	FunctionName pulumix.Input[*string]
	// JSON payload to the lambda function.
	//
	// The following arguments are optional:
	Input pulumix.Input[*string]
	// Lifecycle scope of the resource to manage. Valid values are `CREATE_ONLY` and `CRUD`. Defaults to `CREATE_ONLY`. `CREATE_ONLY` will invoke the function only on creation or replacement. `CRUD` will invoke the function on each lifecycle event, and augment the input JSON payload with additional lifecycle information.
	LifecycleScope pulumix.Input[*string]
	// Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
	Qualifier pulumix.Input[*string]
	// String result of the lambda function invocation.
	Result       pulumix.Input[*string]
	TerraformKey pulumix.Input[*string]
	// Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
	Triggers pulumix.Input[map[string]string]
}

func (InvocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*invocationState)(nil)).Elem()
}

type invocationArgs struct {
	// Name of the lambda function.
	FunctionName string `pulumi:"functionName"`
	// JSON payload to the lambda function.
	//
	// The following arguments are optional:
	Input string `pulumi:"input"`
	// Lifecycle scope of the resource to manage. Valid values are `CREATE_ONLY` and `CRUD`. Defaults to `CREATE_ONLY`. `CREATE_ONLY` will invoke the function only on creation or replacement. `CRUD` will invoke the function on each lifecycle event, and augment the input JSON payload with additional lifecycle information.
	LifecycleScope *string `pulumi:"lifecycleScope"`
	// Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
	Qualifier    *string `pulumi:"qualifier"`
	TerraformKey *string `pulumi:"terraformKey"`
	// Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
	Triggers map[string]string `pulumi:"triggers"`
}

// The set of arguments for constructing a Invocation resource.
type InvocationArgs struct {
	// Name of the lambda function.
	FunctionName pulumix.Input[string]
	// JSON payload to the lambda function.
	//
	// The following arguments are optional:
	Input pulumix.Input[string]
	// Lifecycle scope of the resource to manage. Valid values are `CREATE_ONLY` and `CRUD`. Defaults to `CREATE_ONLY`. `CREATE_ONLY` will invoke the function only on creation or replacement. `CRUD` will invoke the function on each lifecycle event, and augment the input JSON payload with additional lifecycle information.
	LifecycleScope pulumix.Input[*string]
	// Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
	Qualifier    pulumix.Input[*string]
	TerraformKey pulumix.Input[*string]
	// Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
	Triggers pulumix.Input[map[string]string]
}

func (InvocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*invocationArgs)(nil)).Elem()
}

type InvocationOutput struct{ *pulumi.OutputState }

func (InvocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Invocation)(nil)).Elem()
}

func (o InvocationOutput) ToInvocationOutput() InvocationOutput {
	return o
}

func (o InvocationOutput) ToInvocationOutputWithContext(ctx context.Context) InvocationOutput {
	return o
}

func (o InvocationOutput) ToOutput(ctx context.Context) pulumix.Output[Invocation] {
	return pulumix.Output[Invocation]{
		OutputState: o.OutputState,
	}
}

// Name of the lambda function.
func (o InvocationOutput) FunctionName() pulumix.Output[string] {
	value := pulumix.Apply[Invocation](o, func(v Invocation) pulumix.Output[string] { return v.FunctionName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// JSON payload to the lambda function.
//
// The following arguments are optional:
func (o InvocationOutput) Input() pulumix.Output[string] {
	value := pulumix.Apply[Invocation](o, func(v Invocation) pulumix.Output[string] { return v.Input })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Lifecycle scope of the resource to manage. Valid values are `CREATE_ONLY` and `CRUD`. Defaults to `CREATE_ONLY`. `CREATE_ONLY` will invoke the function only on creation or replacement. `CRUD` will invoke the function on each lifecycle event, and augment the input JSON payload with additional lifecycle information.
func (o InvocationOutput) LifecycleScope() pulumix.Output[*string] {
	value := pulumix.Apply[Invocation](o, func(v Invocation) pulumix.Output[*string] { return v.LifecycleScope })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
func (o InvocationOutput) Qualifier() pulumix.Output[*string] {
	value := pulumix.Apply[Invocation](o, func(v Invocation) pulumix.Output[*string] { return v.Qualifier })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// String result of the lambda function invocation.
func (o InvocationOutput) Result() pulumix.Output[string] {
	value := pulumix.Apply[Invocation](o, func(v Invocation) pulumix.Output[string] { return v.Result })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o InvocationOutput) TerraformKey() pulumix.Output[*string] {
	value := pulumix.Apply[Invocation](o, func(v Invocation) pulumix.Output[*string] { return v.TerraformKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
func (o InvocationOutput) Triggers() pulumix.MapOutput[string] {
	value := pulumix.Apply[Invocation](o, func(v Invocation) pulumix.MapOutput[string] { return v.Triggers })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(InvocationOutput{})
}
