// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Pinpoint Baidu Channel resource.
type BaiduChannel struct {
	pulumi.CustomResourceState

	// Platform credential API key from Baidu.
	ApiKey pulumix.Output[string] `pulumi:"apiKey"`
	// The application ID.
	ApplicationId pulumix.Output[string] `pulumi:"applicationId"`
	// Specifies whether to enable the channel. Defaults to `true`.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// Platform credential Secret key from Baidu.
	SecretKey pulumix.Output[string] `pulumi:"secretKey"`
}

// NewBaiduChannel registers a new resource with the given unique name, arguments, and options.
func NewBaiduChannel(ctx *pulumi.Context,
	name string, args *BaiduChannelArgs, opts ...pulumi.ResourceOption) (*BaiduChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiKey == nil {
		return nil, errors.New("invalid value for required argument 'ApiKey'")
	}
	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.SecretKey == nil {
		return nil, errors.New("invalid value for required argument 'SecretKey'")
	}
	if args.ApiKey != nil {
		untypedSecretValue := pulumi.ToSecret(args.ApiKey.ToOutput(ctx.Context()).Untyped())
		args.ApiKey = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	if args.SecretKey != nil {
		untypedSecretValue := pulumi.ToSecret(args.SecretKey.ToOutput(ctx.Context()).Untyped())
		args.SecretKey = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BaiduChannel
	err := ctx.RegisterResource("aws:pinpoint/baiduChannel:BaiduChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBaiduChannel gets an existing BaiduChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBaiduChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BaiduChannelState, opts ...pulumi.ResourceOption) (*BaiduChannel, error) {
	var resource BaiduChannel
	err := ctx.ReadResource("aws:pinpoint/baiduChannel:BaiduChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BaiduChannel resources.
type baiduChannelState struct {
	// Platform credential API key from Baidu.
	ApiKey *string `pulumi:"apiKey"`
	// The application ID.
	ApplicationId *string `pulumi:"applicationId"`
	// Specifies whether to enable the channel. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Platform credential Secret key from Baidu.
	SecretKey *string `pulumi:"secretKey"`
}

type BaiduChannelState struct {
	// Platform credential API key from Baidu.
	ApiKey pulumix.Input[*string]
	// The application ID.
	ApplicationId pulumix.Input[*string]
	// Specifies whether to enable the channel. Defaults to `true`.
	Enabled pulumix.Input[*bool]
	// Platform credential Secret key from Baidu.
	SecretKey pulumix.Input[*string]
}

func (BaiduChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*baiduChannelState)(nil)).Elem()
}

type baiduChannelArgs struct {
	// Platform credential API key from Baidu.
	ApiKey string `pulumi:"apiKey"`
	// The application ID.
	ApplicationId string `pulumi:"applicationId"`
	// Specifies whether to enable the channel. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Platform credential Secret key from Baidu.
	SecretKey string `pulumi:"secretKey"`
}

// The set of arguments for constructing a BaiduChannel resource.
type BaiduChannelArgs struct {
	// Platform credential API key from Baidu.
	ApiKey pulumix.Input[string]
	// The application ID.
	ApplicationId pulumix.Input[string]
	// Specifies whether to enable the channel. Defaults to `true`.
	Enabled pulumix.Input[*bool]
	// Platform credential Secret key from Baidu.
	SecretKey pulumix.Input[string]
}

func (BaiduChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*baiduChannelArgs)(nil)).Elem()
}

type BaiduChannelOutput struct{ *pulumi.OutputState }

func (BaiduChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaiduChannel)(nil)).Elem()
}

func (o BaiduChannelOutput) ToBaiduChannelOutput() BaiduChannelOutput {
	return o
}

func (o BaiduChannelOutput) ToBaiduChannelOutputWithContext(ctx context.Context) BaiduChannelOutput {
	return o
}

func (o BaiduChannelOutput) ToOutput(ctx context.Context) pulumix.Output[BaiduChannel] {
	return pulumix.Output[BaiduChannel]{
		OutputState: o.OutputState,
	}
}

// Platform credential API key from Baidu.
func (o BaiduChannelOutput) ApiKey() pulumix.Output[string] {
	value := pulumix.Apply[BaiduChannel](o, func(v BaiduChannel) pulumix.Output[string] { return v.ApiKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The application ID.
func (o BaiduChannelOutput) ApplicationId() pulumix.Output[string] {
	value := pulumix.Apply[BaiduChannel](o, func(v BaiduChannel) pulumix.Output[string] { return v.ApplicationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies whether to enable the channel. Defaults to `true`.
func (o BaiduChannelOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[BaiduChannel](o, func(v BaiduChannel) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Platform credential Secret key from Baidu.
func (o BaiduChannelOutput) SecretKey() pulumix.Output[string] {
	value := pulumix.Apply[BaiduChannel](o, func(v BaiduChannel) pulumix.Output[string] { return v.SecretKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(BaiduChannelOutput{})
}
