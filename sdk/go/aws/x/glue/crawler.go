// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Glue Crawler. More information can be found in the [AWS Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html)
type Crawler struct {
	pulumi.CustomResourceState

	// The ARN of the crawler
	Arn            pulumix.Output[string]                                                 `pulumi:"arn"`
	CatalogTargets pulumix.GArrayOutput[CrawlerCatalogTarget, CrawlerCatalogTargetOutput] `pulumi:"catalogTargets"`
	// List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
	Classifiers pulumix.ArrayOutput[string] `pulumi:"classifiers"`
	// JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
	Configuration pulumix.Output[*string] `pulumi:"configuration"`
	// Glue database where results are written.
	DatabaseName pulumix.Output[string] `pulumi:"databaseName"`
	// List of nested Delta Lake target arguments. See Delta Target below.
	DeltaTargets pulumix.GArrayOutput[CrawlerDeltaTarget, CrawlerDeltaTargetOutput] `pulumi:"deltaTargets"`
	// Description of the crawler.
	Description pulumix.Output[*string] `pulumi:"description"`
	// List of nested DynamoDB target arguments. See Dynamodb Target below.
	DynamodbTargets pulumix.GArrayOutput[CrawlerDynamodbTarget, CrawlerDynamodbTargetOutput] `pulumi:"dynamodbTargets"`
	// List nested Hudi target arguments. See Iceberg Target below.
	HudiTargets pulumix.GArrayOutput[CrawlerHudiTarget, CrawlerHudiTargetOutput] `pulumi:"hudiTargets"`
	// List nested Iceberg target arguments. See Iceberg Target below.
	IcebergTargets pulumix.GArrayOutput[CrawlerIcebergTarget, CrawlerIcebergTargetOutput] `pulumi:"icebergTargets"`
	// List of nested JBDC target arguments. See JDBC Target below.
	JdbcTargets pulumix.GArrayOutput[CrawlerJdbcTarget, CrawlerJdbcTargetOutput] `pulumi:"jdbcTargets"`
	// Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.
	LakeFormationConfiguration pulumix.GPtrOutput[CrawlerLakeFormationConfiguration, CrawlerLakeFormationConfigurationOutput] `pulumi:"lakeFormationConfiguration"`
	// Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
	LineageConfiguration pulumix.GPtrOutput[CrawlerLineageConfiguration, CrawlerLineageConfigurationOutput] `pulumi:"lineageConfiguration"`
	// List nested MongoDB target arguments. See MongoDB Target below.
	MongodbTargets pulumix.GArrayOutput[CrawlerMongodbTarget, CrawlerMongodbTargetOutput] `pulumi:"mongodbTargets"`
	// Name of the crawler.
	Name pulumix.Output[string] `pulumi:"name"`
	// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
	RecrawlPolicy pulumix.GPtrOutput[CrawlerRecrawlPolicy, CrawlerRecrawlPolicyOutput] `pulumi:"recrawlPolicy"`
	// The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
	Role pulumix.Output[string] `pulumi:"role"`
	// List nested Amazon S3 target arguments. See S3 Target below.
	S3Targets pulumix.GArrayOutput[CrawlerS3Target, CrawlerS3TargetOutput] `pulumi:"s3Targets"`
	// A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
	Schedule pulumix.Output[*string] `pulumi:"schedule"`
	// Policy for the crawler's update and deletion behavior. See Schema Change Policy below.
	SchemaChangePolicy pulumix.GPtrOutput[CrawlerSchemaChangePolicy, CrawlerSchemaChangePolicyOutput] `pulumi:"schemaChangePolicy"`
	// The name of Security Configuration to be used by the crawler
	SecurityConfiguration pulumix.Output[*string] `pulumi:"securityConfiguration"`
	// The table prefix used for catalog tables that are created.
	TablePrefix pulumix.Output[*string] `pulumi:"tablePrefix"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewCrawler registers a new resource with the given unique name, arguments, and options.
func NewCrawler(ctx *pulumi.Context,
	name string, args *CrawlerArgs, opts ...pulumi.ResourceOption) (*Crawler, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Crawler
	err := ctx.RegisterResource("aws:glue/crawler:Crawler", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCrawler gets an existing Crawler resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCrawler(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CrawlerState, opts ...pulumi.ResourceOption) (*Crawler, error) {
	var resource Crawler
	err := ctx.ReadResource("aws:glue/crawler:Crawler", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Crawler resources.
type crawlerState struct {
	// The ARN of the crawler
	Arn            *string                `pulumi:"arn"`
	CatalogTargets []CrawlerCatalogTarget `pulumi:"catalogTargets"`
	// List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
	Classifiers []string `pulumi:"classifiers"`
	// JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
	Configuration *string `pulumi:"configuration"`
	// Glue database where results are written.
	DatabaseName *string `pulumi:"databaseName"`
	// List of nested Delta Lake target arguments. See Delta Target below.
	DeltaTargets []CrawlerDeltaTarget `pulumi:"deltaTargets"`
	// Description of the crawler.
	Description *string `pulumi:"description"`
	// List of nested DynamoDB target arguments. See Dynamodb Target below.
	DynamodbTargets []CrawlerDynamodbTarget `pulumi:"dynamodbTargets"`
	// List nested Hudi target arguments. See Iceberg Target below.
	HudiTargets []CrawlerHudiTarget `pulumi:"hudiTargets"`
	// List nested Iceberg target arguments. See Iceberg Target below.
	IcebergTargets []CrawlerIcebergTarget `pulumi:"icebergTargets"`
	// List of nested JBDC target arguments. See JDBC Target below.
	JdbcTargets []CrawlerJdbcTarget `pulumi:"jdbcTargets"`
	// Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.
	LakeFormationConfiguration *CrawlerLakeFormationConfiguration `pulumi:"lakeFormationConfiguration"`
	// Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
	LineageConfiguration *CrawlerLineageConfiguration `pulumi:"lineageConfiguration"`
	// List nested MongoDB target arguments. See MongoDB Target below.
	MongodbTargets []CrawlerMongodbTarget `pulumi:"mongodbTargets"`
	// Name of the crawler.
	Name *string `pulumi:"name"`
	// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
	RecrawlPolicy *CrawlerRecrawlPolicy `pulumi:"recrawlPolicy"`
	// The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
	Role *string `pulumi:"role"`
	// List nested Amazon S3 target arguments. See S3 Target below.
	S3Targets []CrawlerS3Target `pulumi:"s3Targets"`
	// A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
	Schedule *string `pulumi:"schedule"`
	// Policy for the crawler's update and deletion behavior. See Schema Change Policy below.
	SchemaChangePolicy *CrawlerSchemaChangePolicy `pulumi:"schemaChangePolicy"`
	// The name of Security Configuration to be used by the crawler
	SecurityConfiguration *string `pulumi:"securityConfiguration"`
	// The table prefix used for catalog tables that are created.
	TablePrefix *string `pulumi:"tablePrefix"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type CrawlerState struct {
	// The ARN of the crawler
	Arn            pulumix.Input[*string]
	CatalogTargets pulumix.Input[[]*CrawlerCatalogTargetArgs]
	// List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
	Classifiers pulumix.Input[[]string]
	// JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
	Configuration pulumix.Input[*string]
	// Glue database where results are written.
	DatabaseName pulumix.Input[*string]
	// List of nested Delta Lake target arguments. See Delta Target below.
	DeltaTargets pulumix.Input[[]*CrawlerDeltaTargetArgs]
	// Description of the crawler.
	Description pulumix.Input[*string]
	// List of nested DynamoDB target arguments. See Dynamodb Target below.
	DynamodbTargets pulumix.Input[[]*CrawlerDynamodbTargetArgs]
	// List nested Hudi target arguments. See Iceberg Target below.
	HudiTargets pulumix.Input[[]*CrawlerHudiTargetArgs]
	// List nested Iceberg target arguments. See Iceberg Target below.
	IcebergTargets pulumix.Input[[]*CrawlerIcebergTargetArgs]
	// List of nested JBDC target arguments. See JDBC Target below.
	JdbcTargets pulumix.Input[[]*CrawlerJdbcTargetArgs]
	// Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.
	LakeFormationConfiguration pulumix.Input[*CrawlerLakeFormationConfigurationArgs]
	// Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
	LineageConfiguration pulumix.Input[*CrawlerLineageConfigurationArgs]
	// List nested MongoDB target arguments. See MongoDB Target below.
	MongodbTargets pulumix.Input[[]*CrawlerMongodbTargetArgs]
	// Name of the crawler.
	Name pulumix.Input[*string]
	// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
	RecrawlPolicy pulumix.Input[*CrawlerRecrawlPolicyArgs]
	// The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
	Role pulumix.Input[*string]
	// List nested Amazon S3 target arguments. See S3 Target below.
	S3Targets pulumix.Input[[]*CrawlerS3TargetArgs]
	// A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
	Schedule pulumix.Input[*string]
	// Policy for the crawler's update and deletion behavior. See Schema Change Policy below.
	SchemaChangePolicy pulumix.Input[*CrawlerSchemaChangePolicyArgs]
	// The name of Security Configuration to be used by the crawler
	SecurityConfiguration pulumix.Input[*string]
	// The table prefix used for catalog tables that are created.
	TablePrefix pulumix.Input[*string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (CrawlerState) ElementType() reflect.Type {
	return reflect.TypeOf((*crawlerState)(nil)).Elem()
}

type crawlerArgs struct {
	CatalogTargets []CrawlerCatalogTarget `pulumi:"catalogTargets"`
	// List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
	Classifiers []string `pulumi:"classifiers"`
	// JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
	Configuration *string `pulumi:"configuration"`
	// Glue database where results are written.
	DatabaseName string `pulumi:"databaseName"`
	// List of nested Delta Lake target arguments. See Delta Target below.
	DeltaTargets []CrawlerDeltaTarget `pulumi:"deltaTargets"`
	// Description of the crawler.
	Description *string `pulumi:"description"`
	// List of nested DynamoDB target arguments. See Dynamodb Target below.
	DynamodbTargets []CrawlerDynamodbTarget `pulumi:"dynamodbTargets"`
	// List nested Hudi target arguments. See Iceberg Target below.
	HudiTargets []CrawlerHudiTarget `pulumi:"hudiTargets"`
	// List nested Iceberg target arguments. See Iceberg Target below.
	IcebergTargets []CrawlerIcebergTarget `pulumi:"icebergTargets"`
	// List of nested JBDC target arguments. See JDBC Target below.
	JdbcTargets []CrawlerJdbcTarget `pulumi:"jdbcTargets"`
	// Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.
	LakeFormationConfiguration *CrawlerLakeFormationConfiguration `pulumi:"lakeFormationConfiguration"`
	// Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
	LineageConfiguration *CrawlerLineageConfiguration `pulumi:"lineageConfiguration"`
	// List nested MongoDB target arguments. See MongoDB Target below.
	MongodbTargets []CrawlerMongodbTarget `pulumi:"mongodbTargets"`
	// Name of the crawler.
	Name *string `pulumi:"name"`
	// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
	RecrawlPolicy *CrawlerRecrawlPolicy `pulumi:"recrawlPolicy"`
	// The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
	Role string `pulumi:"role"`
	// List nested Amazon S3 target arguments. See S3 Target below.
	S3Targets []CrawlerS3Target `pulumi:"s3Targets"`
	// A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
	Schedule *string `pulumi:"schedule"`
	// Policy for the crawler's update and deletion behavior. See Schema Change Policy below.
	SchemaChangePolicy *CrawlerSchemaChangePolicy `pulumi:"schemaChangePolicy"`
	// The name of Security Configuration to be used by the crawler
	SecurityConfiguration *string `pulumi:"securityConfiguration"`
	// The table prefix used for catalog tables that are created.
	TablePrefix *string `pulumi:"tablePrefix"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Crawler resource.
type CrawlerArgs struct {
	CatalogTargets pulumix.Input[[]*CrawlerCatalogTargetArgs]
	// List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
	Classifiers pulumix.Input[[]string]
	// JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
	Configuration pulumix.Input[*string]
	// Glue database where results are written.
	DatabaseName pulumix.Input[string]
	// List of nested Delta Lake target arguments. See Delta Target below.
	DeltaTargets pulumix.Input[[]*CrawlerDeltaTargetArgs]
	// Description of the crawler.
	Description pulumix.Input[*string]
	// List of nested DynamoDB target arguments. See Dynamodb Target below.
	DynamodbTargets pulumix.Input[[]*CrawlerDynamodbTargetArgs]
	// List nested Hudi target arguments. See Iceberg Target below.
	HudiTargets pulumix.Input[[]*CrawlerHudiTargetArgs]
	// List nested Iceberg target arguments. See Iceberg Target below.
	IcebergTargets pulumix.Input[[]*CrawlerIcebergTargetArgs]
	// List of nested JBDC target arguments. See JDBC Target below.
	JdbcTargets pulumix.Input[[]*CrawlerJdbcTargetArgs]
	// Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.
	LakeFormationConfiguration pulumix.Input[*CrawlerLakeFormationConfigurationArgs]
	// Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
	LineageConfiguration pulumix.Input[*CrawlerLineageConfigurationArgs]
	// List nested MongoDB target arguments. See MongoDB Target below.
	MongodbTargets pulumix.Input[[]*CrawlerMongodbTargetArgs]
	// Name of the crawler.
	Name pulumix.Input[*string]
	// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
	RecrawlPolicy pulumix.Input[*CrawlerRecrawlPolicyArgs]
	// The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
	Role pulumix.Input[string]
	// List nested Amazon S3 target arguments. See S3 Target below.
	S3Targets pulumix.Input[[]*CrawlerS3TargetArgs]
	// A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
	Schedule pulumix.Input[*string]
	// Policy for the crawler's update and deletion behavior. See Schema Change Policy below.
	SchemaChangePolicy pulumix.Input[*CrawlerSchemaChangePolicyArgs]
	// The name of Security Configuration to be used by the crawler
	SecurityConfiguration pulumix.Input[*string]
	// The table prefix used for catalog tables that are created.
	TablePrefix pulumix.Input[*string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (CrawlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*crawlerArgs)(nil)).Elem()
}

type CrawlerOutput struct{ *pulumi.OutputState }

func (CrawlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Crawler)(nil)).Elem()
}

func (o CrawlerOutput) ToCrawlerOutput() CrawlerOutput {
	return o
}

func (o CrawlerOutput) ToCrawlerOutputWithContext(ctx context.Context) CrawlerOutput {
	return o
}

func (o CrawlerOutput) ToOutput(ctx context.Context) pulumix.Output[Crawler] {
	return pulumix.Output[Crawler]{
		OutputState: o.OutputState,
	}
}

// The ARN of the crawler
func (o CrawlerOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CrawlerOutput) CatalogTargets() pulumix.GArrayOutput[CrawlerCatalogTarget, CrawlerCatalogTargetOutput] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.GArrayOutput[CrawlerCatalogTarget, CrawlerCatalogTargetOutput] {
		return v.CatalogTargets
	})
	unwrapped := pulumix.Flatten[[]CrawlerCatalogTarget, pulumix.GArrayOutput[CrawlerCatalogTarget, CrawlerCatalogTargetOutput]](value)
	return pulumix.GArrayOutput[CrawlerCatalogTarget, CrawlerCatalogTargetOutput]{OutputState: unwrapped.OutputState}
}

// List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
func (o CrawlerOutput) Classifiers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.ArrayOutput[string] { return v.Classifiers })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
func (o CrawlerOutput) Configuration() pulumix.Output[*string] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.Output[*string] { return v.Configuration })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Glue database where results are written.
func (o CrawlerOutput) DatabaseName() pulumix.Output[string] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.Output[string] { return v.DatabaseName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of nested Delta Lake target arguments. See Delta Target below.
func (o CrawlerOutput) DeltaTargets() pulumix.GArrayOutput[CrawlerDeltaTarget, CrawlerDeltaTargetOutput] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.GArrayOutput[CrawlerDeltaTarget, CrawlerDeltaTargetOutput] {
		return v.DeltaTargets
	})
	unwrapped := pulumix.Flatten[[]CrawlerDeltaTarget, pulumix.GArrayOutput[CrawlerDeltaTarget, CrawlerDeltaTargetOutput]](value)
	return pulumix.GArrayOutput[CrawlerDeltaTarget, CrawlerDeltaTargetOutput]{OutputState: unwrapped.OutputState}
}

// Description of the crawler.
func (o CrawlerOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// List of nested DynamoDB target arguments. See Dynamodb Target below.
func (o CrawlerOutput) DynamodbTargets() pulumix.GArrayOutput[CrawlerDynamodbTarget, CrawlerDynamodbTargetOutput] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.GArrayOutput[CrawlerDynamodbTarget, CrawlerDynamodbTargetOutput] {
		return v.DynamodbTargets
	})
	unwrapped := pulumix.Flatten[[]CrawlerDynamodbTarget, pulumix.GArrayOutput[CrawlerDynamodbTarget, CrawlerDynamodbTargetOutput]](value)
	return pulumix.GArrayOutput[CrawlerDynamodbTarget, CrawlerDynamodbTargetOutput]{OutputState: unwrapped.OutputState}
}

// List nested Hudi target arguments. See Iceberg Target below.
func (o CrawlerOutput) HudiTargets() pulumix.GArrayOutput[CrawlerHudiTarget, CrawlerHudiTargetOutput] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.GArrayOutput[CrawlerHudiTarget, CrawlerHudiTargetOutput] { return v.HudiTargets })
	unwrapped := pulumix.Flatten[[]CrawlerHudiTarget, pulumix.GArrayOutput[CrawlerHudiTarget, CrawlerHudiTargetOutput]](value)
	return pulumix.GArrayOutput[CrawlerHudiTarget, CrawlerHudiTargetOutput]{OutputState: unwrapped.OutputState}
}

// List nested Iceberg target arguments. See Iceberg Target below.
func (o CrawlerOutput) IcebergTargets() pulumix.GArrayOutput[CrawlerIcebergTarget, CrawlerIcebergTargetOutput] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.GArrayOutput[CrawlerIcebergTarget, CrawlerIcebergTargetOutput] {
		return v.IcebergTargets
	})
	unwrapped := pulumix.Flatten[[]CrawlerIcebergTarget, pulumix.GArrayOutput[CrawlerIcebergTarget, CrawlerIcebergTargetOutput]](value)
	return pulumix.GArrayOutput[CrawlerIcebergTarget, CrawlerIcebergTargetOutput]{OutputState: unwrapped.OutputState}
}

// List of nested JBDC target arguments. See JDBC Target below.
func (o CrawlerOutput) JdbcTargets() pulumix.GArrayOutput[CrawlerJdbcTarget, CrawlerJdbcTargetOutput] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.GArrayOutput[CrawlerJdbcTarget, CrawlerJdbcTargetOutput] { return v.JdbcTargets })
	unwrapped := pulumix.Flatten[[]CrawlerJdbcTarget, pulumix.GArrayOutput[CrawlerJdbcTarget, CrawlerJdbcTargetOutput]](value)
	return pulumix.GArrayOutput[CrawlerJdbcTarget, CrawlerJdbcTargetOutput]{OutputState: unwrapped.OutputState}
}

// Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.
func (o CrawlerOutput) LakeFormationConfiguration() pulumix.GPtrOutput[CrawlerLakeFormationConfiguration, CrawlerLakeFormationConfigurationOutput] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.GPtrOutput[CrawlerLakeFormationConfiguration, CrawlerLakeFormationConfigurationOutput] {
		return v.LakeFormationConfiguration
	})
	unwrapped := pulumix.Flatten[*CrawlerLakeFormationConfiguration, pulumix.GPtrOutput[CrawlerLakeFormationConfiguration, CrawlerLakeFormationConfigurationOutput]](value)
	return pulumix.GPtrOutput[CrawlerLakeFormationConfiguration, CrawlerLakeFormationConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
func (o CrawlerOutput) LineageConfiguration() pulumix.GPtrOutput[CrawlerLineageConfiguration, CrawlerLineageConfigurationOutput] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.GPtrOutput[CrawlerLineageConfiguration, CrawlerLineageConfigurationOutput] {
		return v.LineageConfiguration
	})
	unwrapped := pulumix.Flatten[*CrawlerLineageConfiguration, pulumix.GPtrOutput[CrawlerLineageConfiguration, CrawlerLineageConfigurationOutput]](value)
	return pulumix.GPtrOutput[CrawlerLineageConfiguration, CrawlerLineageConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// List nested MongoDB target arguments. See MongoDB Target below.
func (o CrawlerOutput) MongodbTargets() pulumix.GArrayOutput[CrawlerMongodbTarget, CrawlerMongodbTargetOutput] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.GArrayOutput[CrawlerMongodbTarget, CrawlerMongodbTargetOutput] {
		return v.MongodbTargets
	})
	unwrapped := pulumix.Flatten[[]CrawlerMongodbTarget, pulumix.GArrayOutput[CrawlerMongodbTarget, CrawlerMongodbTargetOutput]](value)
	return pulumix.GArrayOutput[CrawlerMongodbTarget, CrawlerMongodbTargetOutput]{OutputState: unwrapped.OutputState}
}

// Name of the crawler.
func (o CrawlerOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
func (o CrawlerOutput) RecrawlPolicy() pulumix.GPtrOutput[CrawlerRecrawlPolicy, CrawlerRecrawlPolicyOutput] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.GPtrOutput[CrawlerRecrawlPolicy, CrawlerRecrawlPolicyOutput] {
		return v.RecrawlPolicy
	})
	unwrapped := pulumix.Flatten[*CrawlerRecrawlPolicy, pulumix.GPtrOutput[CrawlerRecrawlPolicy, CrawlerRecrawlPolicyOutput]](value)
	return pulumix.GPtrOutput[CrawlerRecrawlPolicy, CrawlerRecrawlPolicyOutput]{OutputState: unwrapped.OutputState}
}

// The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
func (o CrawlerOutput) Role() pulumix.Output[string] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.Output[string] { return v.Role })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List nested Amazon S3 target arguments. See S3 Target below.
func (o CrawlerOutput) S3Targets() pulumix.GArrayOutput[CrawlerS3Target, CrawlerS3TargetOutput] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.GArrayOutput[CrawlerS3Target, CrawlerS3TargetOutput] { return v.S3Targets })
	unwrapped := pulumix.Flatten[[]CrawlerS3Target, pulumix.GArrayOutput[CrawlerS3Target, CrawlerS3TargetOutput]](value)
	return pulumix.GArrayOutput[CrawlerS3Target, CrawlerS3TargetOutput]{OutputState: unwrapped.OutputState}
}

// A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
func (o CrawlerOutput) Schedule() pulumix.Output[*string] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.Output[*string] { return v.Schedule })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Policy for the crawler's update and deletion behavior. See Schema Change Policy below.
func (o CrawlerOutput) SchemaChangePolicy() pulumix.GPtrOutput[CrawlerSchemaChangePolicy, CrawlerSchemaChangePolicyOutput] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.GPtrOutput[CrawlerSchemaChangePolicy, CrawlerSchemaChangePolicyOutput] {
		return v.SchemaChangePolicy
	})
	unwrapped := pulumix.Flatten[*CrawlerSchemaChangePolicy, pulumix.GPtrOutput[CrawlerSchemaChangePolicy, CrawlerSchemaChangePolicyOutput]](value)
	return pulumix.GPtrOutput[CrawlerSchemaChangePolicy, CrawlerSchemaChangePolicyOutput]{OutputState: unwrapped.OutputState}
}

// The name of Security Configuration to be used by the crawler
func (o CrawlerOutput) SecurityConfiguration() pulumix.Output[*string] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.Output[*string] { return v.SecurityConfiguration })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The table prefix used for catalog tables that are created.
func (o CrawlerOutput) TablePrefix() pulumix.Output[*string] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.Output[*string] { return v.TablePrefix })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CrawlerOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o CrawlerOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Crawler](o, func(v Crawler) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(CrawlerOutput{})
}
