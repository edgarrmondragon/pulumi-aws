// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pricing

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the pricing information of all products in AWS.
// This data source is only available in a us-east-1 or ap-south-1 provider.
func GetProduct(ctx *pulumi.Context, args *GetProductArgs, opts ...pulumi.InvokeOption) (*GetProductResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProductResult
	err := ctx.Invoke("aws:pricing/getProduct:getProduct", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProduct.
type GetProductArgs struct {
	// List of filters. Passed directly to the API (see GetProducts API reference). These filters must describe a single product, this resource will fail if more than one product is returned by the API.
	Filters []GetProductFilter `pulumi:"filters"`
	// Code of the service. Available service codes can be fetched using the DescribeServices pricing API call.
	ServiceCode string `pulumi:"serviceCode"`
}

// A collection of values returned by getProduct.
type GetProductResult struct {
	Filters []GetProductFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Set to the product returned from the API.
	Result      string `pulumi:"result"`
	ServiceCode string `pulumi:"serviceCode"`
}

func GetProductOutput(ctx *pulumi.Context, args GetProductOutputArgs, opts ...pulumi.InvokeOption) GetProductResultOutput {
	outputResult := pulumix.ApplyErr[*GetProductArgs](args.ToOutput(), func(plainArgs *GetProductArgs) (*GetProductResult, error) {
		return GetProduct(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetProductResultOutput, *GetProductResult](outputResult)
}

// A collection of arguments for invoking getProduct.
type GetProductOutputArgs struct {
	// List of filters. Passed directly to the API (see GetProducts API reference). These filters must describe a single product, this resource will fail if more than one product is returned by the API.
	Filters pulumix.Input[[]*GetProductFilterArgs] `pulumi:"filters"`
	// Code of the service. Available service codes can be fetched using the DescribeServices pricing API call.
	ServiceCode pulumix.Input[string] `pulumi:"serviceCode"`
}

func (args GetProductOutputArgs) ToOutput() pulumix.Output[*GetProductArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.ServiceCode.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetProductArgs {
		return &GetProductArgs{
			Filters:     resolvedArgs[0].([]GetProductFilter),
			ServiceCode: resolvedArgs[1].(string),
		}
	})
}

type GetProductResultOutput struct{ *pulumi.OutputState }

func (GetProductResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductResult)(nil)).Elem()
}

func (o GetProductResultOutput) ToOutput(context.Context) pulumix.Output[*GetProductResult] {
	return pulumix.Output[*GetProductResult]{
		OutputState: o.OutputState,
	}
}

func (o GetProductResultOutput) Filters() pulumix.GArrayOutput[GetProductFilter, GetProductFilterOutput] {
	value := pulumix.Apply[*GetProductResult](o, func(v *GetProductResult) []GetProductFilter { return v.Filters })
	return pulumix.GArrayOutput[GetProductFilter, GetProductFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetProductResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetProductResult](o, func(v *GetProductResult) string { return v.Id })
}

func (o GetProductResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*GetProductResult](o, func(v *GetProductResult) string { return v.Result })
}

func (o GetProductResultOutput) ServiceCode() pulumix.Output[string] {
	return pulumix.Apply[*GetProductResult](o, func(v *GetProductResult) string { return v.ServiceCode })
}
