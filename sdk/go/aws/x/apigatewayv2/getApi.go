// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon API Gateway Version 2 API.
func LookupApi(ctx *pulumi.Context, args *LookupApiArgs, opts ...pulumi.InvokeOption) (*LookupApiResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupApiResult
	err := ctx.Invoke("aws:apigatewayv2/getApi:getApi", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getApi.
type LookupApiArgs struct {
	// API identifier.
	ApiId string `pulumi:"apiId"`
	// Map of resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getApi.
type LookupApiResult struct {
	// URI of the API, of the form `https://{api-id}.execute-api.{region}.amazonaws.com` for HTTP APIs and `wss://{api-id}.execute-api.{region}.amazonaws.com` for WebSocket APIs.
	ApiEndpoint string `pulumi:"apiEndpoint"`
	ApiId       string `pulumi:"apiId"`
	// An [API key selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions).
	// Applicable for WebSocket APIs.
	ApiKeySelectionExpression string `pulumi:"apiKeySelectionExpression"`
	// ARN of the API.
	Arn string `pulumi:"arn"`
	// Cross-origin resource sharing (CORS) [configuration](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html).
	// Applicable for HTTP APIs.
	CorsConfigurations []GetApiCorsConfiguration `pulumi:"corsConfigurations"`
	// Description of the API.
	Description string `pulumi:"description"`
	// Whether clients can invoke the API by using the default `execute-api` endpoint.
	DisableExecuteApiEndpoint bool `pulumi:"disableExecuteApiEndpoint"`
	// ARN prefix to be used in an `lambda.Permission`'s `sourceArn` attribute
	// or in an `iam.Policy` to authorize access to the [`@connections` API](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-how-to-call-websocket-api-connections.html).
	// See the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-control-access-iam.html) for details.
	ExecutionArn string `pulumi:"executionArn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the API.
	Name string `pulumi:"name"`
	// API protocol.
	ProtocolType string `pulumi:"protocolType"`
	// The [route selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-route-selection-expressions) for the API.
	RouteSelectionExpression string `pulumi:"routeSelectionExpression"`
	// Map of resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Version identifier for the API.
	Version string `pulumi:"version"`
}

func LookupApiOutput(ctx *pulumi.Context, args LookupApiOutputArgs, opts ...pulumi.InvokeOption) LookupApiResultOutput {
	outputResult := pulumix.ApplyErr[*LookupApiArgs](args.ToOutput(), func(plainArgs *LookupApiArgs) (*LookupApiResult, error) {
		return LookupApi(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupApiResultOutput, *LookupApiResult](outputResult)
}

// A collection of arguments for invoking getApi.
type LookupApiOutputArgs struct {
	// API identifier.
	ApiId pulumix.Input[string] `pulumi:"apiId"`
	// Map of resource tags.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupApiOutputArgs) ToOutput() pulumix.Output[*LookupApiArgs] {
	allArgs := pulumix.All(
		args.ApiId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupApiArgs {
		return &LookupApiArgs{
			ApiId: resolvedArgs[0].(string),
			Tags:  resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupApiResultOutput struct{ *pulumi.OutputState }

func (LookupApiResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiResult)(nil)).Elem()
}

func (o LookupApiResultOutput) ToOutput(context.Context) pulumix.Output[*LookupApiResult] {
	return pulumix.Output[*LookupApiResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupApiResultOutput) ApiEndpoint() pulumix.Output[string] {
	return pulumix.Apply[*LookupApiResult](o, func(v *LookupApiResult) string { return v.ApiEndpoint })
}

func (o LookupApiResultOutput) ApiId() pulumix.Output[string] {
	return pulumix.Apply[*LookupApiResult](o, func(v *LookupApiResult) string { return v.ApiId })
}

func (o LookupApiResultOutput) ApiKeySelectionExpression() pulumix.Output[string] {
	return pulumix.Apply[*LookupApiResult](o, func(v *LookupApiResult) string { return v.ApiKeySelectionExpression })
}

func (o LookupApiResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupApiResult](o, func(v *LookupApiResult) string { return v.Arn })
}

func (o LookupApiResultOutput) CorsConfigurations() pulumix.GArrayOutput[GetApiCorsConfiguration, GetApiCorsConfigurationOutput] {
	value := pulumix.Apply[*LookupApiResult](o, func(v *LookupApiResult) []GetApiCorsConfiguration { return v.CorsConfigurations })
	return pulumix.GArrayOutput[GetApiCorsConfiguration, GetApiCorsConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupApiResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupApiResult](o, func(v *LookupApiResult) string { return v.Description })
}

func (o LookupApiResultOutput) DisableExecuteApiEndpoint() pulumix.Output[bool] {
	return pulumix.Apply[*LookupApiResult](o, func(v *LookupApiResult) bool { return v.DisableExecuteApiEndpoint })
}

func (o LookupApiResultOutput) ExecutionArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupApiResult](o, func(v *LookupApiResult) string { return v.ExecutionArn })
}

func (o LookupApiResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupApiResult](o, func(v *LookupApiResult) string { return v.Id })
}

func (o LookupApiResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupApiResult](o, func(v *LookupApiResult) string { return v.Name })
}

func (o LookupApiResultOutput) ProtocolType() pulumix.Output[string] {
	return pulumix.Apply[*LookupApiResult](o, func(v *LookupApiResult) string { return v.ProtocolType })
}

func (o LookupApiResultOutput) RouteSelectionExpression() pulumix.Output[string] {
	return pulumix.Apply[*LookupApiResult](o, func(v *LookupApiResult) string { return v.RouteSelectionExpression })
}

func (o LookupApiResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupApiResult](o, func(v *LookupApiResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupApiResultOutput) Version() pulumix.Output[string] {
	return pulumix.Apply[*LookupApiResult](o, func(v *LookupApiResult) string { return v.Version })
}
