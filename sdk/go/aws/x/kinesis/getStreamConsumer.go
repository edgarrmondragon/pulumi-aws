// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a Kinesis Stream Consumer.
//
// For more details, see the [Amazon Kinesis Stream Consumer Documentation](https://docs.aws.amazon.com/streams/latest/dev/amazon-kinesis-consumers.html).
func LookupStreamConsumer(ctx *pulumi.Context, args *LookupStreamConsumerArgs, opts ...pulumi.InvokeOption) (*LookupStreamConsumerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamConsumerResult
	err := ctx.Invoke("aws:kinesis/getStreamConsumer:getStreamConsumer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreamConsumer.
type LookupStreamConsumerArgs struct {
	// ARN of the stream consumer.
	Arn *string `pulumi:"arn"`
	// Name of the stream consumer.
	Name *string `pulumi:"name"`
	// ARN of the data stream the consumer is registered with.
	StreamArn string `pulumi:"streamArn"`
}

// A collection of values returned by getStreamConsumer.
type LookupStreamConsumerResult struct {
	Arn string `pulumi:"arn"`
	// Approximate timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of when the stream consumer was created.
	CreationTimestamp string `pulumi:"creationTimestamp"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Current status of the stream consumer.
	Status    string `pulumi:"status"`
	StreamArn string `pulumi:"streamArn"`
}

func LookupStreamConsumerOutput(ctx *pulumi.Context, args LookupStreamConsumerOutputArgs, opts ...pulumi.InvokeOption) LookupStreamConsumerResultOutput {
	outputResult := pulumix.ApplyErr[*LookupStreamConsumerArgs](args.ToOutput(), func(plainArgs *LookupStreamConsumerArgs) (*LookupStreamConsumerResult, error) {
		return LookupStreamConsumer(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupStreamConsumerResultOutput, *LookupStreamConsumerResult](outputResult)
}

// A collection of arguments for invoking getStreamConsumer.
type LookupStreamConsumerOutputArgs struct {
	// ARN of the stream consumer.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// Name of the stream consumer.
	Name pulumix.Input[*string] `pulumi:"name"`
	// ARN of the data stream the consumer is registered with.
	StreamArn pulumix.Input[string] `pulumi:"streamArn"`
}

func (args LookupStreamConsumerOutputArgs) ToOutput() pulumix.Output[*LookupStreamConsumerArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.StreamArn.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupStreamConsumerArgs {
		return &LookupStreamConsumerArgs{
			Arn:       resolvedArgs[0].(*string),
			Name:      resolvedArgs[1].(*string),
			StreamArn: resolvedArgs[2].(string),
		}
	})
}

type LookupStreamConsumerResultOutput struct{ *pulumi.OutputState }

func (LookupStreamConsumerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamConsumerResult)(nil)).Elem()
}

func (o LookupStreamConsumerResultOutput) ToOutput(context.Context) pulumix.Output[*LookupStreamConsumerResult] {
	return pulumix.Output[*LookupStreamConsumerResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupStreamConsumerResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupStreamConsumerResult](o, func(v *LookupStreamConsumerResult) string { return v.Arn })
}

func (o LookupStreamConsumerResultOutput) CreationTimestamp() pulumix.Output[string] {
	return pulumix.Apply[*LookupStreamConsumerResult](o, func(v *LookupStreamConsumerResult) string { return v.CreationTimestamp })
}

func (o LookupStreamConsumerResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupStreamConsumerResult](o, func(v *LookupStreamConsumerResult) string { return v.Id })
}

func (o LookupStreamConsumerResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupStreamConsumerResult](o, func(v *LookupStreamConsumerResult) string { return v.Name })
}

func (o LookupStreamConsumerResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupStreamConsumerResult](o, func(v *LookupStreamConsumerResult) string { return v.Status })
}

func (o LookupStreamConsumerResultOutput) StreamArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupStreamConsumerResult](o, func(v *LookupStreamConsumerResult) string { return v.StreamArn })
}
