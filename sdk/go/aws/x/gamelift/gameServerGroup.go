// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an GameLift Game Server Group resource.
type GameServerGroup struct {
	pulumi.CustomResourceState

	// The ARN of the GameLift Game Server Group.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The ARN of the created EC2 Auto Scaling group.
	AutoScalingGroupArn pulumix.Output[string]                                                                       `pulumi:"autoScalingGroupArn"`
	AutoScalingPolicy   pulumix.GPtrOutput[GameServerGroupAutoScalingPolicy, GameServerGroupAutoScalingPolicyOutput] `pulumi:"autoScalingPolicy"`
	// Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances.
	// Valid values: `SPOT_ONLY`, `SPOT_PREFERRED`, `ON_DEMAND_ONLY`. Defaults to `SPOT_PREFERRED`.
	BalancingStrategy pulumix.Output[string] `pulumi:"balancingStrategy"`
	// Name of the game server group.
	// This value is used to generate unique ARN identifiers for the EC2 Auto Scaling group and the GameLift FleetIQ game server group.
	GameServerGroupName pulumix.Output[string] `pulumi:"gameServerGroupName"`
	// Indicates whether instances in the game server group are protected from early termination.
	// Unprotected instances that have active game servers running might be terminated during a scale-down event,
	// causing players to be dropped from the game.
	// Protected instances cannot be terminated while there are active game servers running except in the event
	// of a forced game server group deletion.
	// Valid values: `NO_PROTECTION`, `FULL_PROTECTION`. Defaults to `NO_PROTECTION`.
	GameServerProtectionPolicy pulumix.Output[string]                                                                           `pulumi:"gameServerProtectionPolicy"`
	InstanceDefinitions        pulumix.GArrayOutput[GameServerGroupInstanceDefinition, GameServerGroupInstanceDefinitionOutput] `pulumi:"instanceDefinitions"`
	LaunchTemplate             pulumix.GPtrOutput[GameServerGroupLaunchTemplate, GameServerGroupLaunchTemplateOutput]           `pulumi:"launchTemplate"`
	// The maximum number of instances allowed in the EC2 Auto Scaling group.
	// During automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum.
	MaxSize pulumix.Output[int] `pulumi:"maxSize"`
	// The minimum number of instances allowed in the EC2 Auto Scaling group.
	// During automatic scaling events, GameLift FleetIQ and EC2 do not scale down the group below this minimum.
	MinSize pulumix.Output[int] `pulumi:"minSize"`
	// ARN for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
	RoleArn pulumix.Output[string] `pulumi:"roleArn"`
	// Key-value map of resource tags
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// A list of VPC subnets to use with instances in the game server group.
	// By default, all GameLift FleetIQ-supported Availability Zones are used.
	VpcSubnets pulumix.ArrayOutput[string] `pulumi:"vpcSubnets"`
}

// NewGameServerGroup registers a new resource with the given unique name, arguments, and options.
func NewGameServerGroup(ctx *pulumi.Context,
	name string, args *GameServerGroupArgs, opts ...pulumi.ResourceOption) (*GameServerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GameServerGroupName == nil {
		return nil, errors.New("invalid value for required argument 'GameServerGroupName'")
	}
	if args.InstanceDefinitions == nil {
		return nil, errors.New("invalid value for required argument 'InstanceDefinitions'")
	}
	if args.LaunchTemplate == nil {
		return nil, errors.New("invalid value for required argument 'LaunchTemplate'")
	}
	if args.MaxSize == nil {
		return nil, errors.New("invalid value for required argument 'MaxSize'")
	}
	if args.MinSize == nil {
		return nil, errors.New("invalid value for required argument 'MinSize'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GameServerGroup
	err := ctx.RegisterResource("aws:gamelift/gameServerGroup:GameServerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGameServerGroup gets an existing GameServerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGameServerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GameServerGroupState, opts ...pulumi.ResourceOption) (*GameServerGroup, error) {
	var resource GameServerGroup
	err := ctx.ReadResource("aws:gamelift/gameServerGroup:GameServerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GameServerGroup resources.
type gameServerGroupState struct {
	// The ARN of the GameLift Game Server Group.
	Arn *string `pulumi:"arn"`
	// The ARN of the created EC2 Auto Scaling group.
	AutoScalingGroupArn *string                           `pulumi:"autoScalingGroupArn"`
	AutoScalingPolicy   *GameServerGroupAutoScalingPolicy `pulumi:"autoScalingPolicy"`
	// Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances.
	// Valid values: `SPOT_ONLY`, `SPOT_PREFERRED`, `ON_DEMAND_ONLY`. Defaults to `SPOT_PREFERRED`.
	BalancingStrategy *string `pulumi:"balancingStrategy"`
	// Name of the game server group.
	// This value is used to generate unique ARN identifiers for the EC2 Auto Scaling group and the GameLift FleetIQ game server group.
	GameServerGroupName *string `pulumi:"gameServerGroupName"`
	// Indicates whether instances in the game server group are protected from early termination.
	// Unprotected instances that have active game servers running might be terminated during a scale-down event,
	// causing players to be dropped from the game.
	// Protected instances cannot be terminated while there are active game servers running except in the event
	// of a forced game server group deletion.
	// Valid values: `NO_PROTECTION`, `FULL_PROTECTION`. Defaults to `NO_PROTECTION`.
	GameServerProtectionPolicy *string                             `pulumi:"gameServerProtectionPolicy"`
	InstanceDefinitions        []GameServerGroupInstanceDefinition `pulumi:"instanceDefinitions"`
	LaunchTemplate             *GameServerGroupLaunchTemplate      `pulumi:"launchTemplate"`
	// The maximum number of instances allowed in the EC2 Auto Scaling group.
	// During automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum.
	MaxSize *int `pulumi:"maxSize"`
	// The minimum number of instances allowed in the EC2 Auto Scaling group.
	// During automatic scaling events, GameLift FleetIQ and EC2 do not scale down the group below this minimum.
	MinSize *int `pulumi:"minSize"`
	// ARN for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
	RoleArn *string `pulumi:"roleArn"`
	// Key-value map of resource tags
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// A list of VPC subnets to use with instances in the game server group.
	// By default, all GameLift FleetIQ-supported Availability Zones are used.
	VpcSubnets []string `pulumi:"vpcSubnets"`
}

type GameServerGroupState struct {
	// The ARN of the GameLift Game Server Group.
	Arn pulumix.Input[*string]
	// The ARN of the created EC2 Auto Scaling group.
	AutoScalingGroupArn pulumix.Input[*string]
	AutoScalingPolicy   pulumix.Input[*GameServerGroupAutoScalingPolicyArgs]
	// Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances.
	// Valid values: `SPOT_ONLY`, `SPOT_PREFERRED`, `ON_DEMAND_ONLY`. Defaults to `SPOT_PREFERRED`.
	BalancingStrategy pulumix.Input[*string]
	// Name of the game server group.
	// This value is used to generate unique ARN identifiers for the EC2 Auto Scaling group and the GameLift FleetIQ game server group.
	GameServerGroupName pulumix.Input[*string]
	// Indicates whether instances in the game server group are protected from early termination.
	// Unprotected instances that have active game servers running might be terminated during a scale-down event,
	// causing players to be dropped from the game.
	// Protected instances cannot be terminated while there are active game servers running except in the event
	// of a forced game server group deletion.
	// Valid values: `NO_PROTECTION`, `FULL_PROTECTION`. Defaults to `NO_PROTECTION`.
	GameServerProtectionPolicy pulumix.Input[*string]
	InstanceDefinitions        pulumix.Input[[]*GameServerGroupInstanceDefinitionArgs]
	LaunchTemplate             pulumix.Input[*GameServerGroupLaunchTemplateArgs]
	// The maximum number of instances allowed in the EC2 Auto Scaling group.
	// During automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum.
	MaxSize pulumix.Input[*int]
	// The minimum number of instances allowed in the EC2 Auto Scaling group.
	// During automatic scaling events, GameLift FleetIQ and EC2 do not scale down the group below this minimum.
	MinSize pulumix.Input[*int]
	// ARN for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
	RoleArn pulumix.Input[*string]
	// Key-value map of resource tags
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// A list of VPC subnets to use with instances in the game server group.
	// By default, all GameLift FleetIQ-supported Availability Zones are used.
	VpcSubnets pulumix.Input[[]string]
}

func (GameServerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*gameServerGroupState)(nil)).Elem()
}

type gameServerGroupArgs struct {
	AutoScalingPolicy *GameServerGroupAutoScalingPolicy `pulumi:"autoScalingPolicy"`
	// Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances.
	// Valid values: `SPOT_ONLY`, `SPOT_PREFERRED`, `ON_DEMAND_ONLY`. Defaults to `SPOT_PREFERRED`.
	BalancingStrategy *string `pulumi:"balancingStrategy"`
	// Name of the game server group.
	// This value is used to generate unique ARN identifiers for the EC2 Auto Scaling group and the GameLift FleetIQ game server group.
	GameServerGroupName string `pulumi:"gameServerGroupName"`
	// Indicates whether instances in the game server group are protected from early termination.
	// Unprotected instances that have active game servers running might be terminated during a scale-down event,
	// causing players to be dropped from the game.
	// Protected instances cannot be terminated while there are active game servers running except in the event
	// of a forced game server group deletion.
	// Valid values: `NO_PROTECTION`, `FULL_PROTECTION`. Defaults to `NO_PROTECTION`.
	GameServerProtectionPolicy *string                             `pulumi:"gameServerProtectionPolicy"`
	InstanceDefinitions        []GameServerGroupInstanceDefinition `pulumi:"instanceDefinitions"`
	LaunchTemplate             GameServerGroupLaunchTemplate       `pulumi:"launchTemplate"`
	// The maximum number of instances allowed in the EC2 Auto Scaling group.
	// During automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum.
	MaxSize int `pulumi:"maxSize"`
	// The minimum number of instances allowed in the EC2 Auto Scaling group.
	// During automatic scaling events, GameLift FleetIQ and EC2 do not scale down the group below this minimum.
	MinSize int `pulumi:"minSize"`
	// ARN for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
	RoleArn string `pulumi:"roleArn"`
	// Key-value map of resource tags
	Tags map[string]string `pulumi:"tags"`
	// A list of VPC subnets to use with instances in the game server group.
	// By default, all GameLift FleetIQ-supported Availability Zones are used.
	VpcSubnets []string `pulumi:"vpcSubnets"`
}

// The set of arguments for constructing a GameServerGroup resource.
type GameServerGroupArgs struct {
	AutoScalingPolicy pulumix.Input[*GameServerGroupAutoScalingPolicyArgs]
	// Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances.
	// Valid values: `SPOT_ONLY`, `SPOT_PREFERRED`, `ON_DEMAND_ONLY`. Defaults to `SPOT_PREFERRED`.
	BalancingStrategy pulumix.Input[*string]
	// Name of the game server group.
	// This value is used to generate unique ARN identifiers for the EC2 Auto Scaling group and the GameLift FleetIQ game server group.
	GameServerGroupName pulumix.Input[string]
	// Indicates whether instances in the game server group are protected from early termination.
	// Unprotected instances that have active game servers running might be terminated during a scale-down event,
	// causing players to be dropped from the game.
	// Protected instances cannot be terminated while there are active game servers running except in the event
	// of a forced game server group deletion.
	// Valid values: `NO_PROTECTION`, `FULL_PROTECTION`. Defaults to `NO_PROTECTION`.
	GameServerProtectionPolicy pulumix.Input[*string]
	InstanceDefinitions        pulumix.Input[[]*GameServerGroupInstanceDefinitionArgs]
	LaunchTemplate             pulumix.Input[*GameServerGroupLaunchTemplateArgs]
	// The maximum number of instances allowed in the EC2 Auto Scaling group.
	// During automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum.
	MaxSize pulumix.Input[int]
	// The minimum number of instances allowed in the EC2 Auto Scaling group.
	// During automatic scaling events, GameLift FleetIQ and EC2 do not scale down the group below this minimum.
	MinSize pulumix.Input[int]
	// ARN for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
	RoleArn pulumix.Input[string]
	// Key-value map of resource tags
	Tags pulumix.Input[map[string]string]
	// A list of VPC subnets to use with instances in the game server group.
	// By default, all GameLift FleetIQ-supported Availability Zones are used.
	VpcSubnets pulumix.Input[[]string]
}

func (GameServerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gameServerGroupArgs)(nil)).Elem()
}

type GameServerGroupOutput struct{ *pulumi.OutputState }

func (GameServerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GameServerGroup)(nil)).Elem()
}

func (o GameServerGroupOutput) ToGameServerGroupOutput() GameServerGroupOutput {
	return o
}

func (o GameServerGroupOutput) ToGameServerGroupOutputWithContext(ctx context.Context) GameServerGroupOutput {
	return o
}

func (o GameServerGroupOutput) ToOutput(ctx context.Context) pulumix.Output[GameServerGroup] {
	return pulumix.Output[GameServerGroup]{
		OutputState: o.OutputState,
	}
}

// The ARN of the GameLift Game Server Group.
func (o GameServerGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[GameServerGroup](o, func(v GameServerGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the created EC2 Auto Scaling group.
func (o GameServerGroupOutput) AutoScalingGroupArn() pulumix.Output[string] {
	value := pulumix.Apply[GameServerGroup](o, func(v GameServerGroup) pulumix.Output[string] { return v.AutoScalingGroupArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o GameServerGroupOutput) AutoScalingPolicy() pulumix.GPtrOutput[GameServerGroupAutoScalingPolicy, GameServerGroupAutoScalingPolicyOutput] {
	value := pulumix.Apply[GameServerGroup](o, func(v GameServerGroup) pulumix.GPtrOutput[GameServerGroupAutoScalingPolicy, GameServerGroupAutoScalingPolicyOutput] {
		return v.AutoScalingPolicy
	})
	unwrapped := pulumix.Flatten[*GameServerGroupAutoScalingPolicy, pulumix.GPtrOutput[GameServerGroupAutoScalingPolicy, GameServerGroupAutoScalingPolicyOutput]](value)
	return pulumix.GPtrOutput[GameServerGroupAutoScalingPolicy, GameServerGroupAutoScalingPolicyOutput]{OutputState: unwrapped.OutputState}
}

// Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances.
// Valid values: `SPOT_ONLY`, `SPOT_PREFERRED`, `ON_DEMAND_ONLY`. Defaults to `SPOT_PREFERRED`.
func (o GameServerGroupOutput) BalancingStrategy() pulumix.Output[string] {
	value := pulumix.Apply[GameServerGroup](o, func(v GameServerGroup) pulumix.Output[string] { return v.BalancingStrategy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the game server group.
// This value is used to generate unique ARN identifiers for the EC2 Auto Scaling group and the GameLift FleetIQ game server group.
func (o GameServerGroupOutput) GameServerGroupName() pulumix.Output[string] {
	value := pulumix.Apply[GameServerGroup](o, func(v GameServerGroup) pulumix.Output[string] { return v.GameServerGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether instances in the game server group are protected from early termination.
// Unprotected instances that have active game servers running might be terminated during a scale-down event,
// causing players to be dropped from the game.
// Protected instances cannot be terminated while there are active game servers running except in the event
// of a forced game server group deletion.
// Valid values: `NO_PROTECTION`, `FULL_PROTECTION`. Defaults to `NO_PROTECTION`.
func (o GameServerGroupOutput) GameServerProtectionPolicy() pulumix.Output[string] {
	value := pulumix.Apply[GameServerGroup](o, func(v GameServerGroup) pulumix.Output[string] { return v.GameServerProtectionPolicy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o GameServerGroupOutput) InstanceDefinitions() pulumix.GArrayOutput[GameServerGroupInstanceDefinition, GameServerGroupInstanceDefinitionOutput] {
	value := pulumix.Apply[GameServerGroup](o, func(v GameServerGroup) pulumix.GArrayOutput[GameServerGroupInstanceDefinition, GameServerGroupInstanceDefinitionOutput] {
		return v.InstanceDefinitions
	})
	unwrapped := pulumix.Flatten[[]GameServerGroupInstanceDefinition, pulumix.GArrayOutput[GameServerGroupInstanceDefinition, GameServerGroupInstanceDefinitionOutput]](value)
	return pulumix.GArrayOutput[GameServerGroupInstanceDefinition, GameServerGroupInstanceDefinitionOutput]{OutputState: unwrapped.OutputState}
}

func (o GameServerGroupOutput) LaunchTemplate() pulumix.GPtrOutput[GameServerGroupLaunchTemplate, GameServerGroupLaunchTemplateOutput] {
	value := pulumix.Apply[GameServerGroup](o, func(v GameServerGroup) pulumix.GPtrOutput[GameServerGroupLaunchTemplate, GameServerGroupLaunchTemplateOutput] {
		return v.LaunchTemplate
	})
	unwrapped := pulumix.Flatten[*GameServerGroupLaunchTemplate, pulumix.GPtrOutput[GameServerGroupLaunchTemplate, GameServerGroupLaunchTemplateOutput]](value)
	return pulumix.GPtrOutput[GameServerGroupLaunchTemplate, GameServerGroupLaunchTemplateOutput]{OutputState: unwrapped.OutputState}
}

// The maximum number of instances allowed in the EC2 Auto Scaling group.
// During automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum.
func (o GameServerGroupOutput) MaxSize() pulumix.Output[int] {
	value := pulumix.Apply[GameServerGroup](o, func(v GameServerGroup) pulumix.Output[int] { return v.MaxSize })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The minimum number of instances allowed in the EC2 Auto Scaling group.
// During automatic scaling events, GameLift FleetIQ and EC2 do not scale down the group below this minimum.
func (o GameServerGroupOutput) MinSize() pulumix.Output[int] {
	value := pulumix.Apply[GameServerGroup](o, func(v GameServerGroup) pulumix.Output[int] { return v.MinSize })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// ARN for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
func (o GameServerGroupOutput) RoleArn() pulumix.Output[string] {
	value := pulumix.Apply[GameServerGroup](o, func(v GameServerGroup) pulumix.Output[string] { return v.RoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags
func (o GameServerGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[GameServerGroup](o, func(v GameServerGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o GameServerGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[GameServerGroup](o, func(v GameServerGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A list of VPC subnets to use with instances in the game server group.
// By default, all GameLift FleetIQ-supported Availability Zones are used.
func (o GameServerGroupOutput) VpcSubnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GameServerGroup](o, func(v GameServerGroup) pulumix.ArrayOutput[string] { return v.VpcSubnets })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(GameServerGroupOutput{})
}
