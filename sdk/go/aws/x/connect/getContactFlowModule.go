// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Connect Contact Flow Module.
func LookupContactFlowModule(ctx *pulumi.Context, args *LookupContactFlowModuleArgs, opts ...pulumi.InvokeOption) (*LookupContactFlowModuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupContactFlowModuleResult
	err := ctx.Invoke("aws:connect/getContactFlowModule:getContactFlowModule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContactFlowModule.
type LookupContactFlowModuleArgs struct {
	// Returns information on a specific Contact Flow Module by contact flow module id
	ContactFlowModuleId *string `pulumi:"contactFlowModuleId"`
	// Reference to the hosting Amazon Connect Instance
	InstanceId string `pulumi:"instanceId"`
	// Returns information on a specific Contact Flow Module by name
	Name *string `pulumi:"name"`
	// Map of tags to assign to the Contact Flow Module.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getContactFlowModule.
type LookupContactFlowModuleResult struct {
	// ARN of the Contact Flow Module.
	Arn                 string `pulumi:"arn"`
	ContactFlowModuleId string `pulumi:"contactFlowModuleId"`
	// Logic of the Contact Flow Module.
	Content string `pulumi:"content"`
	// Description of the Contact Flow Module.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	Name       string `pulumi:"name"`
	// Type of Contact Flow Module Module. Values are either `ACTIVE` or `ARCHIVED`.
	State string `pulumi:"state"`
	// Status of the Contact Flow Module Module. Values are either `PUBLISHED` or `SAVED`.
	Status string `pulumi:"status"`
	// Map of tags to assign to the Contact Flow Module.
	Tags map[string]string `pulumi:"tags"`
}

func LookupContactFlowModuleOutput(ctx *pulumi.Context, args LookupContactFlowModuleOutputArgs, opts ...pulumi.InvokeOption) LookupContactFlowModuleResultOutput {
	outputResult := pulumix.ApplyErr[*LookupContactFlowModuleArgs](args.ToOutput(), func(plainArgs *LookupContactFlowModuleArgs) (*LookupContactFlowModuleResult, error) {
		return LookupContactFlowModule(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupContactFlowModuleResultOutput, *LookupContactFlowModuleResult](outputResult)
}

// A collection of arguments for invoking getContactFlowModule.
type LookupContactFlowModuleOutputArgs struct {
	// Returns information on a specific Contact Flow Module by contact flow module id
	ContactFlowModuleId pulumix.Input[*string] `pulumi:"contactFlowModuleId"`
	// Reference to the hosting Amazon Connect Instance
	InstanceId pulumix.Input[string] `pulumi:"instanceId"`
	// Returns information on a specific Contact Flow Module by name
	Name pulumix.Input[*string] `pulumi:"name"`
	// Map of tags to assign to the Contact Flow Module.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupContactFlowModuleOutputArgs) ToOutput() pulumix.Output[*LookupContactFlowModuleArgs] {
	allArgs := pulumix.All(
		args.ContactFlowModuleId.ToOutput(context.Background()).AsAny(),
		args.InstanceId.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupContactFlowModuleArgs {
		return &LookupContactFlowModuleArgs{
			ContactFlowModuleId: resolvedArgs[0].(*string),
			InstanceId:          resolvedArgs[1].(string),
			Name:                resolvedArgs[2].(*string),
			Tags:                resolvedArgs[3].(map[string]string),
		}
	})
}

type LookupContactFlowModuleResultOutput struct{ *pulumi.OutputState }

func (LookupContactFlowModuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContactFlowModuleResult)(nil)).Elem()
}

func (o LookupContactFlowModuleResultOutput) ToOutput(context.Context) pulumix.Output[*LookupContactFlowModuleResult] {
	return pulumix.Output[*LookupContactFlowModuleResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupContactFlowModuleResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowModuleResult](o, func(v *LookupContactFlowModuleResult) string { return v.Arn })
}

func (o LookupContactFlowModuleResultOutput) ContactFlowModuleId() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowModuleResult](o, func(v *LookupContactFlowModuleResult) string { return v.ContactFlowModuleId })
}

func (o LookupContactFlowModuleResultOutput) Content() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowModuleResult](o, func(v *LookupContactFlowModuleResult) string { return v.Content })
}

func (o LookupContactFlowModuleResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowModuleResult](o, func(v *LookupContactFlowModuleResult) string { return v.Description })
}

func (o LookupContactFlowModuleResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowModuleResult](o, func(v *LookupContactFlowModuleResult) string { return v.Id })
}

func (o LookupContactFlowModuleResultOutput) InstanceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowModuleResult](o, func(v *LookupContactFlowModuleResult) string { return v.InstanceId })
}

func (o LookupContactFlowModuleResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowModuleResult](o, func(v *LookupContactFlowModuleResult) string { return v.Name })
}

func (o LookupContactFlowModuleResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowModuleResult](o, func(v *LookupContactFlowModuleResult) string { return v.State })
}

func (o LookupContactFlowModuleResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactFlowModuleResult](o, func(v *LookupContactFlowModuleResult) string { return v.Status })
}

func (o LookupContactFlowModuleResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupContactFlowModuleResult](o, func(v *LookupContactFlowModuleResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
