// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Associates SCRAM secrets stored in the Secrets Manager service with a Managed Streaming for Kafka (MSK) cluster.
//
// > **Note:** The following assumes the MSK cluster has SASL/SCRAM authentication enabled. See below for example usage or refer to the [Username/Password Authentication](https://docs.aws.amazon.com/msk/latest/developerguide/msk-password.html) section of the MSK Developer Guide for more details.
//
// To set up username and password authentication for a cluster, create an `secretsmanager.Secret` resource and associate
// a username and password with the secret with an `secretsmanager.SecretVersion` resource. When creating a secret for the cluster,
// the `name` must have the prefix `AmazonMSK_` and you must either use an existing custom AWS KMS key or create a new
// custom AWS KMS key for your secret with the `kms.Key` resource. It is important to note that a policy is required for the `secretsmanager.Secret`
// resource in order for Kafka to be able to read it. This policy is attached automatically when the `msk.ScramSecretAssociation` is used,
// however, this policy will not be in the state and as such, will present a diff on plan/apply. For that reason, you must use the `secretsmanager.SecretPolicy`
// resource](/docs/providers/aws/r/secretsmanager_secret_policy.html) as shown below in order to ensure that the state is in a clean state after the creation of secret and the association to the cluster.
type ScramSecretAssociation struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the MSK cluster.
	ClusterArn pulumix.Output[string] `pulumi:"clusterArn"`
	// List of AWS Secrets Manager secret ARNs.
	SecretArnLists pulumix.ArrayOutput[string] `pulumi:"secretArnLists"`
}

// NewScramSecretAssociation registers a new resource with the given unique name, arguments, and options.
func NewScramSecretAssociation(ctx *pulumi.Context,
	name string, args *ScramSecretAssociationArgs, opts ...pulumi.ResourceOption) (*ScramSecretAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterArn == nil {
		return nil, errors.New("invalid value for required argument 'ClusterArn'")
	}
	if args.SecretArnLists == nil {
		return nil, errors.New("invalid value for required argument 'SecretArnLists'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScramSecretAssociation
	err := ctx.RegisterResource("aws:msk/scramSecretAssociation:ScramSecretAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScramSecretAssociation gets an existing ScramSecretAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScramSecretAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScramSecretAssociationState, opts ...pulumi.ResourceOption) (*ScramSecretAssociation, error) {
	var resource ScramSecretAssociation
	err := ctx.ReadResource("aws:msk/scramSecretAssociation:ScramSecretAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScramSecretAssociation resources.
type scramSecretAssociationState struct {
	// Amazon Resource Name (ARN) of the MSK cluster.
	ClusterArn *string `pulumi:"clusterArn"`
	// List of AWS Secrets Manager secret ARNs.
	SecretArnLists []string `pulumi:"secretArnLists"`
}

type ScramSecretAssociationState struct {
	// Amazon Resource Name (ARN) of the MSK cluster.
	ClusterArn pulumix.Input[*string]
	// List of AWS Secrets Manager secret ARNs.
	SecretArnLists pulumix.Input[[]string]
}

func (ScramSecretAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*scramSecretAssociationState)(nil)).Elem()
}

type scramSecretAssociationArgs struct {
	// Amazon Resource Name (ARN) of the MSK cluster.
	ClusterArn string `pulumi:"clusterArn"`
	// List of AWS Secrets Manager secret ARNs.
	SecretArnLists []string `pulumi:"secretArnLists"`
}

// The set of arguments for constructing a ScramSecretAssociation resource.
type ScramSecretAssociationArgs struct {
	// Amazon Resource Name (ARN) of the MSK cluster.
	ClusterArn pulumix.Input[string]
	// List of AWS Secrets Manager secret ARNs.
	SecretArnLists pulumix.Input[[]string]
}

func (ScramSecretAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scramSecretAssociationArgs)(nil)).Elem()
}

type ScramSecretAssociationOutput struct{ *pulumi.OutputState }

func (ScramSecretAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScramSecretAssociation)(nil)).Elem()
}

func (o ScramSecretAssociationOutput) ToScramSecretAssociationOutput() ScramSecretAssociationOutput {
	return o
}

func (o ScramSecretAssociationOutput) ToScramSecretAssociationOutputWithContext(ctx context.Context) ScramSecretAssociationOutput {
	return o
}

func (o ScramSecretAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[ScramSecretAssociation] {
	return pulumix.Output[ScramSecretAssociation]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the MSK cluster.
func (o ScramSecretAssociationOutput) ClusterArn() pulumix.Output[string] {
	value := pulumix.Apply[ScramSecretAssociation](o, func(v ScramSecretAssociation) pulumix.Output[string] { return v.ClusterArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of AWS Secrets Manager secret ARNs.
func (o ScramSecretAssociationOutput) SecretArnLists() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ScramSecretAssociation](o, func(v ScramSecretAssociation) pulumix.ArrayOutput[string] { return v.SecretArnLists })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ScramSecretAssociationOutput{})
}
