// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Imports a disk image from S3 as a Snapshot.
type SnapshotImport struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the EBS Snapshot.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The client-specific data. Detailed below.
	ClientData pulumix.GPtrOutput[SnapshotImportClientData, SnapshotImportClientDataOutput] `pulumi:"clientData"`
	// The data encryption key identifier for the snapshot.
	DataEncryptionKeyId pulumix.Output[string] `pulumi:"dataEncryptionKeyId"`
	// The description string for the import snapshot task.
	Description pulumix.Output[string] `pulumi:"description"`
	// Information about the disk container. Detailed below.
	DiskContainer pulumix.GPtrOutput[SnapshotImportDiskContainer, SnapshotImportDiskContainerOutput] `pulumi:"diskContainer"`
	// Specifies whether the destination snapshot of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using KmsKeyId.
	Encrypted pulumix.Output[*bool] `pulumi:"encrypted"`
	// An identifier for the symmetric KMS key to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.
	KmsKeyId   pulumix.Output[*string] `pulumi:"kmsKeyId"`
	OutpostArn pulumix.Output[string]  `pulumi:"outpostArn"`
	// Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
	OwnerAlias pulumix.Output[string] `pulumi:"ownerAlias"`
	// The AWS account ID of the EBS snapshot owner.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// Indicates whether to permanently restore an archived snapshot.
	PermanentRestore pulumix.Output[*bool] `pulumi:"permanentRestore"`
	// The name of the IAM Role the VM Import/Export service will assume. This role needs certain permissions. See https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-role. Default: `vmimport`
	RoleName pulumix.Output[*string] `pulumi:"roleName"`
	// The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
	StorageTier pulumix.Output[string] `pulumi:"storageTier"`
	// A map of tags to assign to the snapshot.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
	TemporaryRestoreDays pulumix.Output[*int]   `pulumi:"temporaryRestoreDays"`
	VolumeId             pulumix.Output[string] `pulumi:"volumeId"`
	// The size of the drive in GiBs.
	VolumeSize pulumix.Output[int] `pulumi:"volumeSize"`
}

// NewSnapshotImport registers a new resource with the given unique name, arguments, and options.
func NewSnapshotImport(ctx *pulumi.Context,
	name string, args *SnapshotImportArgs, opts ...pulumi.ResourceOption) (*SnapshotImport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskContainer == nil {
		return nil, errors.New("invalid value for required argument 'DiskContainer'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnapshotImport
	err := ctx.RegisterResource("aws:ebs/snapshotImport:SnapshotImport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotImport gets an existing SnapshotImport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotImport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotImportState, opts ...pulumi.ResourceOption) (*SnapshotImport, error) {
	var resource SnapshotImport
	err := ctx.ReadResource("aws:ebs/snapshotImport:SnapshotImport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotImport resources.
type snapshotImportState struct {
	// Amazon Resource Name (ARN) of the EBS Snapshot.
	Arn *string `pulumi:"arn"`
	// The client-specific data. Detailed below.
	ClientData *SnapshotImportClientData `pulumi:"clientData"`
	// The data encryption key identifier for the snapshot.
	DataEncryptionKeyId *string `pulumi:"dataEncryptionKeyId"`
	// The description string for the import snapshot task.
	Description *string `pulumi:"description"`
	// Information about the disk container. Detailed below.
	DiskContainer *SnapshotImportDiskContainer `pulumi:"diskContainer"`
	// Specifies whether the destination snapshot of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using KmsKeyId.
	Encrypted *bool `pulumi:"encrypted"`
	// An identifier for the symmetric KMS key to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.
	KmsKeyId   *string `pulumi:"kmsKeyId"`
	OutpostArn *string `pulumi:"outpostArn"`
	// Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
	OwnerAlias *string `pulumi:"ownerAlias"`
	// The AWS account ID of the EBS snapshot owner.
	OwnerId *string `pulumi:"ownerId"`
	// Indicates whether to permanently restore an archived snapshot.
	PermanentRestore *bool `pulumi:"permanentRestore"`
	// The name of the IAM Role the VM Import/Export service will assume. This role needs certain permissions. See https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-role. Default: `vmimport`
	RoleName *string `pulumi:"roleName"`
	// The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
	StorageTier *string `pulumi:"storageTier"`
	// A map of tags to assign to the snapshot.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
	TemporaryRestoreDays *int    `pulumi:"temporaryRestoreDays"`
	VolumeId             *string `pulumi:"volumeId"`
	// The size of the drive in GiBs.
	VolumeSize *int `pulumi:"volumeSize"`
}

type SnapshotImportState struct {
	// Amazon Resource Name (ARN) of the EBS Snapshot.
	Arn pulumix.Input[*string]
	// The client-specific data. Detailed below.
	ClientData pulumix.Input[*SnapshotImportClientDataArgs]
	// The data encryption key identifier for the snapshot.
	DataEncryptionKeyId pulumix.Input[*string]
	// The description string for the import snapshot task.
	Description pulumix.Input[*string]
	// Information about the disk container. Detailed below.
	DiskContainer pulumix.Input[*SnapshotImportDiskContainerArgs]
	// Specifies whether the destination snapshot of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using KmsKeyId.
	Encrypted pulumix.Input[*bool]
	// An identifier for the symmetric KMS key to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.
	KmsKeyId   pulumix.Input[*string]
	OutpostArn pulumix.Input[*string]
	// Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
	OwnerAlias pulumix.Input[*string]
	// The AWS account ID of the EBS snapshot owner.
	OwnerId pulumix.Input[*string]
	// Indicates whether to permanently restore an archived snapshot.
	PermanentRestore pulumix.Input[*bool]
	// The name of the IAM Role the VM Import/Export service will assume. This role needs certain permissions. See https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-role. Default: `vmimport`
	RoleName pulumix.Input[*string]
	// The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
	StorageTier pulumix.Input[*string]
	// A map of tags to assign to the snapshot.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
	TemporaryRestoreDays pulumix.Input[*int]
	VolumeId             pulumix.Input[*string]
	// The size of the drive in GiBs.
	VolumeSize pulumix.Input[*int]
}

func (SnapshotImportState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotImportState)(nil)).Elem()
}

type snapshotImportArgs struct {
	// The client-specific data. Detailed below.
	ClientData *SnapshotImportClientData `pulumi:"clientData"`
	// The description string for the import snapshot task.
	Description *string `pulumi:"description"`
	// Information about the disk container. Detailed below.
	DiskContainer SnapshotImportDiskContainer `pulumi:"diskContainer"`
	// Specifies whether the destination snapshot of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using KmsKeyId.
	Encrypted *bool `pulumi:"encrypted"`
	// An identifier for the symmetric KMS key to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Indicates whether to permanently restore an archived snapshot.
	PermanentRestore *bool `pulumi:"permanentRestore"`
	// The name of the IAM Role the VM Import/Export service will assume. This role needs certain permissions. See https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-role. Default: `vmimport`
	RoleName *string `pulumi:"roleName"`
	// The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
	StorageTier *string `pulumi:"storageTier"`
	// A map of tags to assign to the snapshot.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
	TemporaryRestoreDays *int `pulumi:"temporaryRestoreDays"`
}

// The set of arguments for constructing a SnapshotImport resource.
type SnapshotImportArgs struct {
	// The client-specific data. Detailed below.
	ClientData pulumix.Input[*SnapshotImportClientDataArgs]
	// The description string for the import snapshot task.
	Description pulumix.Input[*string]
	// Information about the disk container. Detailed below.
	DiskContainer pulumix.Input[*SnapshotImportDiskContainerArgs]
	// Specifies whether the destination snapshot of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using KmsKeyId.
	Encrypted pulumix.Input[*bool]
	// An identifier for the symmetric KMS key to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.
	KmsKeyId pulumix.Input[*string]
	// Indicates whether to permanently restore an archived snapshot.
	PermanentRestore pulumix.Input[*bool]
	// The name of the IAM Role the VM Import/Export service will assume. This role needs certain permissions. See https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-role. Default: `vmimport`
	RoleName pulumix.Input[*string]
	// The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
	StorageTier pulumix.Input[*string]
	// A map of tags to assign to the snapshot.
	Tags pulumix.Input[map[string]string]
	// Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
	TemporaryRestoreDays pulumix.Input[*int]
}

func (SnapshotImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotImportArgs)(nil)).Elem()
}

type SnapshotImportOutput struct{ *pulumi.OutputState }

func (SnapshotImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotImport)(nil)).Elem()
}

func (o SnapshotImportOutput) ToSnapshotImportOutput() SnapshotImportOutput {
	return o
}

func (o SnapshotImportOutput) ToSnapshotImportOutputWithContext(ctx context.Context) SnapshotImportOutput {
	return o
}

func (o SnapshotImportOutput) ToOutput(ctx context.Context) pulumix.Output[SnapshotImport] {
	return pulumix.Output[SnapshotImport]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the EBS Snapshot.
func (o SnapshotImportOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The client-specific data. Detailed below.
func (o SnapshotImportOutput) ClientData() pulumix.GPtrOutput[SnapshotImportClientData, SnapshotImportClientDataOutput] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.GPtrOutput[SnapshotImportClientData, SnapshotImportClientDataOutput] {
		return v.ClientData
	})
	unwrapped := pulumix.Flatten[*SnapshotImportClientData, pulumix.GPtrOutput[SnapshotImportClientData, SnapshotImportClientDataOutput]](value)
	return pulumix.GPtrOutput[SnapshotImportClientData, SnapshotImportClientDataOutput]{OutputState: unwrapped.OutputState}
}

// The data encryption key identifier for the snapshot.
func (o SnapshotImportOutput) DataEncryptionKeyId() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.Output[string] { return v.DataEncryptionKeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The description string for the import snapshot task.
func (o SnapshotImportOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Information about the disk container. Detailed below.
func (o SnapshotImportOutput) DiskContainer() pulumix.GPtrOutput[SnapshotImportDiskContainer, SnapshotImportDiskContainerOutput] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.GPtrOutput[SnapshotImportDiskContainer, SnapshotImportDiskContainerOutput] {
		return v.DiskContainer
	})
	unwrapped := pulumix.Flatten[*SnapshotImportDiskContainer, pulumix.GPtrOutput[SnapshotImportDiskContainer, SnapshotImportDiskContainerOutput]](value)
	return pulumix.GPtrOutput[SnapshotImportDiskContainer, SnapshotImportDiskContainerOutput]{OutputState: unwrapped.OutputState}
}

// Specifies whether the destination snapshot of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using KmsKeyId.
func (o SnapshotImportOutput) Encrypted() pulumix.Output[*bool] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.Output[*bool] { return v.Encrypted })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// An identifier for the symmetric KMS key to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.
func (o SnapshotImportOutput) KmsKeyId() pulumix.Output[*string] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.Output[*string] { return v.KmsKeyId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o SnapshotImportOutput) OutpostArn() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.Output[string] { return v.OutpostArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
func (o SnapshotImportOutput) OwnerAlias() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.Output[string] { return v.OwnerAlias })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The AWS account ID of the EBS snapshot owner.
func (o SnapshotImportOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether to permanently restore an archived snapshot.
func (o SnapshotImportOutput) PermanentRestore() pulumix.Output[*bool] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.Output[*bool] { return v.PermanentRestore })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The name of the IAM Role the VM Import/Export service will assume. This role needs certain permissions. See https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-role. Default: `vmimport`
func (o SnapshotImportOutput) RoleName() pulumix.Output[*string] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.Output[*string] { return v.RoleName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
func (o SnapshotImportOutput) StorageTier() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.Output[string] { return v.StorageTier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the snapshot.
func (o SnapshotImportOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SnapshotImportOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
func (o SnapshotImportOutput) TemporaryRestoreDays() pulumix.Output[*int] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.Output[*int] { return v.TemporaryRestoreDays })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o SnapshotImportOutput) VolumeId() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.Output[string] { return v.VolumeId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The size of the drive in GiBs.
func (o SnapshotImportOutput) VolumeSize() pulumix.Output[int] {
	value := pulumix.Apply[SnapshotImport](o, func(v SnapshotImport) pulumix.Output[int] { return v.VolumeSize })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(SnapshotImportOutput{})
}
