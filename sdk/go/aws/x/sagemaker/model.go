// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a SageMaker model resource.
type Model struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) assigned by AWS to this model.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Specifies containers in the inference pipeline. If not specified, the `primaryContainer` argument is required. Fields are documented below.
	Containers pulumix.GArrayOutput[ModelContainer, ModelContainerOutput] `pulumi:"containers"`
	// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
	EnableNetworkIsolation pulumix.Output[*bool] `pulumi:"enableNetworkIsolation"`
	// A role that SageMaker can assume to access model artifacts and docker images for deployment.
	ExecutionRoleArn pulumix.Output[string] `pulumi:"executionRoleArn"`
	// Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.
	InferenceExecutionConfig pulumix.GPtrOutput[ModelInferenceExecutionConfig, ModelInferenceExecutionConfigOutput] `pulumi:"inferenceExecutionConfig"`
	// The name of the model (must be unique). If omitted, this provider will assign a random, unique name.
	Name pulumix.Output[string] `pulumi:"name"`
	// The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the `container` argument is required. Fields are documented below.
	PrimaryContainer pulumix.GPtrOutput[ModelPrimaryContainer, ModelPrimaryContainerOutput] `pulumi:"primaryContainer"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// The `primaryContainer` and `container` block both support:
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
	VpcConfig pulumix.GPtrOutput[ModelVpcConfig, ModelVpcConfigOutput] `pulumi:"vpcConfig"`
}

// NewModel registers a new resource with the given unique name, arguments, and options.
func NewModel(ctx *pulumi.Context,
	name string, args *ModelArgs, opts ...pulumi.ResourceOption) (*Model, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExecutionRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionRoleArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Model
	err := ctx.RegisterResource("aws:sagemaker/model:Model", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModel gets an existing Model resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelState, opts ...pulumi.ResourceOption) (*Model, error) {
	var resource Model
	err := ctx.ReadResource("aws:sagemaker/model:Model", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Model resources.
type modelState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this model.
	Arn *string `pulumi:"arn"`
	// Specifies containers in the inference pipeline. If not specified, the `primaryContainer` argument is required. Fields are documented below.
	Containers []ModelContainer `pulumi:"containers"`
	// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
	EnableNetworkIsolation *bool `pulumi:"enableNetworkIsolation"`
	// A role that SageMaker can assume to access model artifacts and docker images for deployment.
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.
	InferenceExecutionConfig *ModelInferenceExecutionConfig `pulumi:"inferenceExecutionConfig"`
	// The name of the model (must be unique). If omitted, this provider will assign a random, unique name.
	Name *string `pulumi:"name"`
	// The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the `container` argument is required. Fields are documented below.
	PrimaryContainer *ModelPrimaryContainer `pulumi:"primaryContainer"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// The `primaryContainer` and `container` block both support:
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
	VpcConfig *ModelVpcConfig `pulumi:"vpcConfig"`
}

type ModelState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this model.
	Arn pulumix.Input[*string]
	// Specifies containers in the inference pipeline. If not specified, the `primaryContainer` argument is required. Fields are documented below.
	Containers pulumix.Input[[]*ModelContainerArgs]
	// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
	EnableNetworkIsolation pulumix.Input[*bool]
	// A role that SageMaker can assume to access model artifacts and docker images for deployment.
	ExecutionRoleArn pulumix.Input[*string]
	// Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.
	InferenceExecutionConfig pulumix.Input[*ModelInferenceExecutionConfigArgs]
	// The name of the model (must be unique). If omitted, this provider will assign a random, unique name.
	Name pulumix.Input[*string]
	// The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the `container` argument is required. Fields are documented below.
	PrimaryContainer pulumix.Input[*ModelPrimaryContainerArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// The `primaryContainer` and `container` block both support:
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
	VpcConfig pulumix.Input[*ModelVpcConfigArgs]
}

func (ModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelState)(nil)).Elem()
}

type modelArgs struct {
	// Specifies containers in the inference pipeline. If not specified, the `primaryContainer` argument is required. Fields are documented below.
	Containers []ModelContainer `pulumi:"containers"`
	// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
	EnableNetworkIsolation *bool `pulumi:"enableNetworkIsolation"`
	// A role that SageMaker can assume to access model artifacts and docker images for deployment.
	ExecutionRoleArn string `pulumi:"executionRoleArn"`
	// Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.
	InferenceExecutionConfig *ModelInferenceExecutionConfig `pulumi:"inferenceExecutionConfig"`
	// The name of the model (must be unique). If omitted, this provider will assign a random, unique name.
	Name *string `pulumi:"name"`
	// The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the `container` argument is required. Fields are documented below.
	PrimaryContainer *ModelPrimaryContainer `pulumi:"primaryContainer"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// The `primaryContainer` and `container` block both support:
	Tags map[string]string `pulumi:"tags"`
	// Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
	VpcConfig *ModelVpcConfig `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a Model resource.
type ModelArgs struct {
	// Specifies containers in the inference pipeline. If not specified, the `primaryContainer` argument is required. Fields are documented below.
	Containers pulumix.Input[[]*ModelContainerArgs]
	// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
	EnableNetworkIsolation pulumix.Input[*bool]
	// A role that SageMaker can assume to access model artifacts and docker images for deployment.
	ExecutionRoleArn pulumix.Input[string]
	// Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.
	InferenceExecutionConfig pulumix.Input[*ModelInferenceExecutionConfigArgs]
	// The name of the model (must be unique). If omitted, this provider will assign a random, unique name.
	Name pulumix.Input[*string]
	// The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the `container` argument is required. Fields are documented below.
	PrimaryContainer pulumix.Input[*ModelPrimaryContainerArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// The `primaryContainer` and `container` block both support:
	Tags pulumix.Input[map[string]string]
	// Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
	VpcConfig pulumix.Input[*ModelVpcConfigArgs]
}

func (ModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelArgs)(nil)).Elem()
}

type ModelOutput struct{ *pulumi.OutputState }

func (ModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Model)(nil)).Elem()
}

func (o ModelOutput) ToModelOutput() ModelOutput {
	return o
}

func (o ModelOutput) ToModelOutputWithContext(ctx context.Context) ModelOutput {
	return o
}

func (o ModelOutput) ToOutput(ctx context.Context) pulumix.Output[Model] {
	return pulumix.Output[Model]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) assigned by AWS to this model.
func (o ModelOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Model](o, func(v Model) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies containers in the inference pipeline. If not specified, the `primaryContainer` argument is required. Fields are documented below.
func (o ModelOutput) Containers() pulumix.GArrayOutput[ModelContainer, ModelContainerOutput] {
	value := pulumix.Apply[Model](o, func(v Model) pulumix.GArrayOutput[ModelContainer, ModelContainerOutput] { return v.Containers })
	unwrapped := pulumix.Flatten[[]ModelContainer, pulumix.GArrayOutput[ModelContainer, ModelContainerOutput]](value)
	return pulumix.GArrayOutput[ModelContainer, ModelContainerOutput]{OutputState: unwrapped.OutputState}
}

// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
func (o ModelOutput) EnableNetworkIsolation() pulumix.Output[*bool] {
	value := pulumix.Apply[Model](o, func(v Model) pulumix.Output[*bool] { return v.EnableNetworkIsolation })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A role that SageMaker can assume to access model artifacts and docker images for deployment.
func (o ModelOutput) ExecutionRoleArn() pulumix.Output[string] {
	value := pulumix.Apply[Model](o, func(v Model) pulumix.Output[string] { return v.ExecutionRoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.
func (o ModelOutput) InferenceExecutionConfig() pulumix.GPtrOutput[ModelInferenceExecutionConfig, ModelInferenceExecutionConfigOutput] {
	value := pulumix.Apply[Model](o, func(v Model) pulumix.GPtrOutput[ModelInferenceExecutionConfig, ModelInferenceExecutionConfigOutput] {
		return v.InferenceExecutionConfig
	})
	unwrapped := pulumix.Flatten[*ModelInferenceExecutionConfig, pulumix.GPtrOutput[ModelInferenceExecutionConfig, ModelInferenceExecutionConfigOutput]](value)
	return pulumix.GPtrOutput[ModelInferenceExecutionConfig, ModelInferenceExecutionConfigOutput]{OutputState: unwrapped.OutputState}
}

// The name of the model (must be unique). If omitted, this provider will assign a random, unique name.
func (o ModelOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Model](o, func(v Model) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the `container` argument is required. Fields are documented below.
func (o ModelOutput) PrimaryContainer() pulumix.GPtrOutput[ModelPrimaryContainer, ModelPrimaryContainerOutput] {
	value := pulumix.Apply[Model](o, func(v Model) pulumix.GPtrOutput[ModelPrimaryContainer, ModelPrimaryContainerOutput] {
		return v.PrimaryContainer
	})
	unwrapped := pulumix.Flatten[*ModelPrimaryContainer, pulumix.GPtrOutput[ModelPrimaryContainer, ModelPrimaryContainerOutput]](value)
	return pulumix.GPtrOutput[ModelPrimaryContainer, ModelPrimaryContainerOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
//
// The `primaryContainer` and `container` block both support:
func (o ModelOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Model](o, func(v Model) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ModelOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Model](o, func(v Model) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
func (o ModelOutput) VpcConfig() pulumix.GPtrOutput[ModelVpcConfig, ModelVpcConfigOutput] {
	value := pulumix.Apply[Model](o, func(v Model) pulumix.GPtrOutput[ModelVpcConfig, ModelVpcConfigOutput] { return v.VpcConfig })
	unwrapped := pulumix.Flatten[*ModelVpcConfig, pulumix.GPtrOutput[ModelVpcConfig, ModelVpcConfigOutput]](value)
	return pulumix.GPtrOutput[ModelVpcConfig, ModelVpcConfigOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ModelOutput{})
}
