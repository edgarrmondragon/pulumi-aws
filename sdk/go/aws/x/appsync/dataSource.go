// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AppSync Data Source.
type DataSource struct {
	pulumi.CustomResourceState

	// API ID for the GraphQL API for the data source.
	ApiId pulumix.Output[string] `pulumi:"apiId"`
	// ARN
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Description of the data source.
	Description pulumix.Output[*string] `pulumi:"description"`
	// DynamoDB settings. See DynamoDB Config
	DynamodbConfig pulumix.GPtrOutput[DataSourceDynamodbConfig, DataSourceDynamodbConfigOutput] `pulumi:"dynamodbConfig"`
	// Amazon Elasticsearch settings. See ElasticSearch Config
	ElasticsearchConfig pulumix.GPtrOutput[DataSourceElasticsearchConfig, DataSourceElasticsearchConfigOutput] `pulumi:"elasticsearchConfig"`
	// AWS EventBridge settings. See Event Bridge Config
	EventBridgeConfig pulumix.GPtrOutput[DataSourceEventBridgeConfig, DataSourceEventBridgeConfigOutput] `pulumi:"eventBridgeConfig"`
	// HTTP settings. See HTTP Config
	HttpConfig pulumix.GPtrOutput[DataSourceHttpConfig, DataSourceHttpConfigOutput] `pulumi:"httpConfig"`
	// AWS Lambda settings. See Lambda Config
	LambdaConfig pulumix.GPtrOutput[DataSourceLambdaConfig, DataSourceLambdaConfigOutput] `pulumi:"lambdaConfig"`
	// User-supplied name for the data source.
	Name pulumix.Output[string] `pulumi:"name"`
	// Amazon OpenSearch Service settings. See OpenSearch Service Config
	OpensearchserviceConfig pulumix.GPtrOutput[DataSourceOpensearchserviceConfig, DataSourceOpensearchserviceConfigOutput] `pulumi:"opensearchserviceConfig"`
	// AWS RDS settings. See Relational Database Config
	RelationalDatabaseConfig pulumix.GPtrOutput[DataSourceRelationalDatabaseConfig, DataSourceRelationalDatabaseConfigOutput] `pulumi:"relationalDatabaseConfig"`
	// IAM service role ARN for the data source.
	ServiceRoleArn pulumix.Output[*string] `pulumi:"serviceRoleArn"`
	// Type of the Data Source. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`, `AMAZON_EVENTBRIDGE`, `AMAZON_OPENSEARCH_SERVICE`.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewDataSource registers a new resource with the given unique name, arguments, and options.
func NewDataSource(ctx *pulumi.Context,
	name string, args *DataSourceArgs, opts ...pulumi.ResourceOption) (*DataSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataSource
	err := ctx.RegisterResource("aws:appsync/dataSource:DataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSource gets an existing DataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourceState, opts ...pulumi.ResourceOption) (*DataSource, error) {
	var resource DataSource
	err := ctx.ReadResource("aws:appsync/dataSource:DataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSource resources.
type dataSourceState struct {
	// API ID for the GraphQL API for the data source.
	ApiId *string `pulumi:"apiId"`
	// ARN
	Arn *string `pulumi:"arn"`
	// Description of the data source.
	Description *string `pulumi:"description"`
	// DynamoDB settings. See DynamoDB Config
	DynamodbConfig *DataSourceDynamodbConfig `pulumi:"dynamodbConfig"`
	// Amazon Elasticsearch settings. See ElasticSearch Config
	ElasticsearchConfig *DataSourceElasticsearchConfig `pulumi:"elasticsearchConfig"`
	// AWS EventBridge settings. See Event Bridge Config
	EventBridgeConfig *DataSourceEventBridgeConfig `pulumi:"eventBridgeConfig"`
	// HTTP settings. See HTTP Config
	HttpConfig *DataSourceHttpConfig `pulumi:"httpConfig"`
	// AWS Lambda settings. See Lambda Config
	LambdaConfig *DataSourceLambdaConfig `pulumi:"lambdaConfig"`
	// User-supplied name for the data source.
	Name *string `pulumi:"name"`
	// Amazon OpenSearch Service settings. See OpenSearch Service Config
	OpensearchserviceConfig *DataSourceOpensearchserviceConfig `pulumi:"opensearchserviceConfig"`
	// AWS RDS settings. See Relational Database Config
	RelationalDatabaseConfig *DataSourceRelationalDatabaseConfig `pulumi:"relationalDatabaseConfig"`
	// IAM service role ARN for the data source.
	ServiceRoleArn *string `pulumi:"serviceRoleArn"`
	// Type of the Data Source. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`, `AMAZON_EVENTBRIDGE`, `AMAZON_OPENSEARCH_SERVICE`.
	Type *string `pulumi:"type"`
}

type DataSourceState struct {
	// API ID for the GraphQL API for the data source.
	ApiId pulumix.Input[*string]
	// ARN
	Arn pulumix.Input[*string]
	// Description of the data source.
	Description pulumix.Input[*string]
	// DynamoDB settings. See DynamoDB Config
	DynamodbConfig pulumix.Input[*DataSourceDynamodbConfigArgs]
	// Amazon Elasticsearch settings. See ElasticSearch Config
	ElasticsearchConfig pulumix.Input[*DataSourceElasticsearchConfigArgs]
	// AWS EventBridge settings. See Event Bridge Config
	EventBridgeConfig pulumix.Input[*DataSourceEventBridgeConfigArgs]
	// HTTP settings. See HTTP Config
	HttpConfig pulumix.Input[*DataSourceHttpConfigArgs]
	// AWS Lambda settings. See Lambda Config
	LambdaConfig pulumix.Input[*DataSourceLambdaConfigArgs]
	// User-supplied name for the data source.
	Name pulumix.Input[*string]
	// Amazon OpenSearch Service settings. See OpenSearch Service Config
	OpensearchserviceConfig pulumix.Input[*DataSourceOpensearchserviceConfigArgs]
	// AWS RDS settings. See Relational Database Config
	RelationalDatabaseConfig pulumix.Input[*DataSourceRelationalDatabaseConfigArgs]
	// IAM service role ARN for the data source.
	ServiceRoleArn pulumix.Input[*string]
	// Type of the Data Source. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`, `AMAZON_EVENTBRIDGE`, `AMAZON_OPENSEARCH_SERVICE`.
	Type pulumix.Input[*string]
}

func (DataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceState)(nil)).Elem()
}

type dataSourceArgs struct {
	// API ID for the GraphQL API for the data source.
	ApiId string `pulumi:"apiId"`
	// Description of the data source.
	Description *string `pulumi:"description"`
	// DynamoDB settings. See DynamoDB Config
	DynamodbConfig *DataSourceDynamodbConfig `pulumi:"dynamodbConfig"`
	// Amazon Elasticsearch settings. See ElasticSearch Config
	ElasticsearchConfig *DataSourceElasticsearchConfig `pulumi:"elasticsearchConfig"`
	// AWS EventBridge settings. See Event Bridge Config
	EventBridgeConfig *DataSourceEventBridgeConfig `pulumi:"eventBridgeConfig"`
	// HTTP settings. See HTTP Config
	HttpConfig *DataSourceHttpConfig `pulumi:"httpConfig"`
	// AWS Lambda settings. See Lambda Config
	LambdaConfig *DataSourceLambdaConfig `pulumi:"lambdaConfig"`
	// User-supplied name for the data source.
	Name *string `pulumi:"name"`
	// Amazon OpenSearch Service settings. See OpenSearch Service Config
	OpensearchserviceConfig *DataSourceOpensearchserviceConfig `pulumi:"opensearchserviceConfig"`
	// AWS RDS settings. See Relational Database Config
	RelationalDatabaseConfig *DataSourceRelationalDatabaseConfig `pulumi:"relationalDatabaseConfig"`
	// IAM service role ARN for the data source.
	ServiceRoleArn *string `pulumi:"serviceRoleArn"`
	// Type of the Data Source. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`, `AMAZON_EVENTBRIDGE`, `AMAZON_OPENSEARCH_SERVICE`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DataSource resource.
type DataSourceArgs struct {
	// API ID for the GraphQL API for the data source.
	ApiId pulumix.Input[string]
	// Description of the data source.
	Description pulumix.Input[*string]
	// DynamoDB settings. See DynamoDB Config
	DynamodbConfig pulumix.Input[*DataSourceDynamodbConfigArgs]
	// Amazon Elasticsearch settings. See ElasticSearch Config
	ElasticsearchConfig pulumix.Input[*DataSourceElasticsearchConfigArgs]
	// AWS EventBridge settings. See Event Bridge Config
	EventBridgeConfig pulumix.Input[*DataSourceEventBridgeConfigArgs]
	// HTTP settings. See HTTP Config
	HttpConfig pulumix.Input[*DataSourceHttpConfigArgs]
	// AWS Lambda settings. See Lambda Config
	LambdaConfig pulumix.Input[*DataSourceLambdaConfigArgs]
	// User-supplied name for the data source.
	Name pulumix.Input[*string]
	// Amazon OpenSearch Service settings. See OpenSearch Service Config
	OpensearchserviceConfig pulumix.Input[*DataSourceOpensearchserviceConfigArgs]
	// AWS RDS settings. See Relational Database Config
	RelationalDatabaseConfig pulumix.Input[*DataSourceRelationalDatabaseConfigArgs]
	// IAM service role ARN for the data source.
	ServiceRoleArn pulumix.Input[*string]
	// Type of the Data Source. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`, `AMAZON_EVENTBRIDGE`, `AMAZON_OPENSEARCH_SERVICE`.
	Type pulumix.Input[string]
}

func (DataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceArgs)(nil)).Elem()
}

type DataSourceOutput struct{ *pulumi.OutputState }

func (DataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSource)(nil)).Elem()
}

func (o DataSourceOutput) ToDataSourceOutput() DataSourceOutput {
	return o
}

func (o DataSourceOutput) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return o
}

func (o DataSourceOutput) ToOutput(ctx context.Context) pulumix.Output[DataSource] {
	return pulumix.Output[DataSource]{
		OutputState: o.OutputState,
	}
}

// API ID for the GraphQL API for the data source.
func (o DataSourceOutput) ApiId() pulumix.Output[string] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.Output[string] { return v.ApiId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN
func (o DataSourceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the data source.
func (o DataSourceOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// DynamoDB settings. See DynamoDB Config
func (o DataSourceOutput) DynamodbConfig() pulumix.GPtrOutput[DataSourceDynamodbConfig, DataSourceDynamodbConfigOutput] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.GPtrOutput[DataSourceDynamodbConfig, DataSourceDynamodbConfigOutput] {
		return v.DynamodbConfig
	})
	unwrapped := pulumix.Flatten[*DataSourceDynamodbConfig, pulumix.GPtrOutput[DataSourceDynamodbConfig, DataSourceDynamodbConfigOutput]](value)
	return pulumix.GPtrOutput[DataSourceDynamodbConfig, DataSourceDynamodbConfigOutput]{OutputState: unwrapped.OutputState}
}

// Amazon Elasticsearch settings. See ElasticSearch Config
func (o DataSourceOutput) ElasticsearchConfig() pulumix.GPtrOutput[DataSourceElasticsearchConfig, DataSourceElasticsearchConfigOutput] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.GPtrOutput[DataSourceElasticsearchConfig, DataSourceElasticsearchConfigOutput] {
		return v.ElasticsearchConfig
	})
	unwrapped := pulumix.Flatten[*DataSourceElasticsearchConfig, pulumix.GPtrOutput[DataSourceElasticsearchConfig, DataSourceElasticsearchConfigOutput]](value)
	return pulumix.GPtrOutput[DataSourceElasticsearchConfig, DataSourceElasticsearchConfigOutput]{OutputState: unwrapped.OutputState}
}

// AWS EventBridge settings. See Event Bridge Config
func (o DataSourceOutput) EventBridgeConfig() pulumix.GPtrOutput[DataSourceEventBridgeConfig, DataSourceEventBridgeConfigOutput] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.GPtrOutput[DataSourceEventBridgeConfig, DataSourceEventBridgeConfigOutput] {
		return v.EventBridgeConfig
	})
	unwrapped := pulumix.Flatten[*DataSourceEventBridgeConfig, pulumix.GPtrOutput[DataSourceEventBridgeConfig, DataSourceEventBridgeConfigOutput]](value)
	return pulumix.GPtrOutput[DataSourceEventBridgeConfig, DataSourceEventBridgeConfigOutput]{OutputState: unwrapped.OutputState}
}

// HTTP settings. See HTTP Config
func (o DataSourceOutput) HttpConfig() pulumix.GPtrOutput[DataSourceHttpConfig, DataSourceHttpConfigOutput] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.GPtrOutput[DataSourceHttpConfig, DataSourceHttpConfigOutput] {
		return v.HttpConfig
	})
	unwrapped := pulumix.Flatten[*DataSourceHttpConfig, pulumix.GPtrOutput[DataSourceHttpConfig, DataSourceHttpConfigOutput]](value)
	return pulumix.GPtrOutput[DataSourceHttpConfig, DataSourceHttpConfigOutput]{OutputState: unwrapped.OutputState}
}

// AWS Lambda settings. See Lambda Config
func (o DataSourceOutput) LambdaConfig() pulumix.GPtrOutput[DataSourceLambdaConfig, DataSourceLambdaConfigOutput] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.GPtrOutput[DataSourceLambdaConfig, DataSourceLambdaConfigOutput] {
		return v.LambdaConfig
	})
	unwrapped := pulumix.Flatten[*DataSourceLambdaConfig, pulumix.GPtrOutput[DataSourceLambdaConfig, DataSourceLambdaConfigOutput]](value)
	return pulumix.GPtrOutput[DataSourceLambdaConfig, DataSourceLambdaConfigOutput]{OutputState: unwrapped.OutputState}
}

// User-supplied name for the data source.
func (o DataSourceOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon OpenSearch Service settings. See OpenSearch Service Config
func (o DataSourceOutput) OpensearchserviceConfig() pulumix.GPtrOutput[DataSourceOpensearchserviceConfig, DataSourceOpensearchserviceConfigOutput] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.GPtrOutput[DataSourceOpensearchserviceConfig, DataSourceOpensearchserviceConfigOutput] {
		return v.OpensearchserviceConfig
	})
	unwrapped := pulumix.Flatten[*DataSourceOpensearchserviceConfig, pulumix.GPtrOutput[DataSourceOpensearchserviceConfig, DataSourceOpensearchserviceConfigOutput]](value)
	return pulumix.GPtrOutput[DataSourceOpensearchserviceConfig, DataSourceOpensearchserviceConfigOutput]{OutputState: unwrapped.OutputState}
}

// AWS RDS settings. See Relational Database Config
func (o DataSourceOutput) RelationalDatabaseConfig() pulumix.GPtrOutput[DataSourceRelationalDatabaseConfig, DataSourceRelationalDatabaseConfigOutput] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.GPtrOutput[DataSourceRelationalDatabaseConfig, DataSourceRelationalDatabaseConfigOutput] {
		return v.RelationalDatabaseConfig
	})
	unwrapped := pulumix.Flatten[*DataSourceRelationalDatabaseConfig, pulumix.GPtrOutput[DataSourceRelationalDatabaseConfig, DataSourceRelationalDatabaseConfigOutput]](value)
	return pulumix.GPtrOutput[DataSourceRelationalDatabaseConfig, DataSourceRelationalDatabaseConfigOutput]{OutputState: unwrapped.OutputState}
}

// IAM service role ARN for the data source.
func (o DataSourceOutput) ServiceRoleArn() pulumix.Output[*string] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.Output[*string] { return v.ServiceRoleArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Type of the Data Source. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`, `AMAZON_EVENTBRIDGE`, `AMAZON_OPENSEARCH_SERVICE`.
func (o DataSourceOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[DataSource](o, func(v DataSource) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DataSourceOutput{})
}
