// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to the client's HSM in order to store and retrieve the keys used to encrypt the cluster databases.
type HsmClientCertificate struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the Hsm Client Certificate.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The identifier of the HSM client certificate.
	HsmClientCertificateIdentifier pulumix.Output[string] `pulumi:"hsmClientCertificateIdentifier"`
	// The public key that the Amazon Redshift cluster will use to connect to the HSM. You must register the public key in the HSM.
	HsmClientCertificatePublicKey pulumix.Output[string] `pulumi:"hsmClientCertificatePublicKey"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewHsmClientCertificate registers a new resource with the given unique name, arguments, and options.
func NewHsmClientCertificate(ctx *pulumi.Context,
	name string, args *HsmClientCertificateArgs, opts ...pulumi.ResourceOption) (*HsmClientCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HsmClientCertificateIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'HsmClientCertificateIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HsmClientCertificate
	err := ctx.RegisterResource("aws:redshift/hsmClientCertificate:HsmClientCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHsmClientCertificate gets an existing HsmClientCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHsmClientCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HsmClientCertificateState, opts ...pulumi.ResourceOption) (*HsmClientCertificate, error) {
	var resource HsmClientCertificate
	err := ctx.ReadResource("aws:redshift/hsmClientCertificate:HsmClientCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HsmClientCertificate resources.
type hsmClientCertificateState struct {
	// Amazon Resource Name (ARN) of the Hsm Client Certificate.
	Arn *string `pulumi:"arn"`
	// The identifier of the HSM client certificate.
	HsmClientCertificateIdentifier *string `pulumi:"hsmClientCertificateIdentifier"`
	// The public key that the Amazon Redshift cluster will use to connect to the HSM. You must register the public key in the HSM.
	HsmClientCertificatePublicKey *string `pulumi:"hsmClientCertificatePublicKey"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type HsmClientCertificateState struct {
	// Amazon Resource Name (ARN) of the Hsm Client Certificate.
	Arn pulumix.Input[*string]
	// The identifier of the HSM client certificate.
	HsmClientCertificateIdentifier pulumix.Input[*string]
	// The public key that the Amazon Redshift cluster will use to connect to the HSM. You must register the public key in the HSM.
	HsmClientCertificatePublicKey pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (HsmClientCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*hsmClientCertificateState)(nil)).Elem()
}

type hsmClientCertificateArgs struct {
	// The identifier of the HSM client certificate.
	HsmClientCertificateIdentifier string `pulumi:"hsmClientCertificateIdentifier"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a HsmClientCertificate resource.
type HsmClientCertificateArgs struct {
	// The identifier of the HSM client certificate.
	HsmClientCertificateIdentifier pulumix.Input[string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (HsmClientCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hsmClientCertificateArgs)(nil)).Elem()
}

type HsmClientCertificateOutput struct{ *pulumi.OutputState }

func (HsmClientCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HsmClientCertificate)(nil)).Elem()
}

func (o HsmClientCertificateOutput) ToHsmClientCertificateOutput() HsmClientCertificateOutput {
	return o
}

func (o HsmClientCertificateOutput) ToHsmClientCertificateOutputWithContext(ctx context.Context) HsmClientCertificateOutput {
	return o
}

func (o HsmClientCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[HsmClientCertificate] {
	return pulumix.Output[HsmClientCertificate]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the Hsm Client Certificate.
func (o HsmClientCertificateOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[HsmClientCertificate](o, func(v HsmClientCertificate) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The identifier of the HSM client certificate.
func (o HsmClientCertificateOutput) HsmClientCertificateIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[HsmClientCertificate](o, func(v HsmClientCertificate) pulumix.Output[string] { return v.HsmClientCertificateIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The public key that the Amazon Redshift cluster will use to connect to the HSM. You must register the public key in the HSM.
func (o HsmClientCertificateOutput) HsmClientCertificatePublicKey() pulumix.Output[string] {
	value := pulumix.Apply[HsmClientCertificate](o, func(v HsmClientCertificate) pulumix.Output[string] { return v.HsmClientCertificatePublicKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o HsmClientCertificateOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[HsmClientCertificate](o, func(v HsmClientCertificate) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o HsmClientCertificateOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[HsmClientCertificate](o, func(v HsmClientCertificate) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(HsmClientCertificateOutput{})
}
