// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AnalysisParameters struct {
	// A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
	DateTimeParameters []AnalysisParametersDateTimeParameter `pulumi:"dateTimeParameters"`
	// A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
	DecimalParameters []AnalysisParametersDecimalParameter `pulumi:"decimalParameters"`
	// A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
	IntegerParameters []AnalysisParametersIntegerParameter `pulumi:"integerParameters"`
	// A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
	StringParameters []AnalysisParametersStringParameter `pulumi:"stringParameters"`
}

type AnalysisParametersArgs struct {
	// A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
	DateTimeParameters pulumix.Input[[]*AnalysisParametersDateTimeParameterArgs] `pulumi:"dateTimeParameters"`
	// A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
	DecimalParameters pulumix.Input[[]*AnalysisParametersDecimalParameterArgs] `pulumi:"decimalParameters"`
	// A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
	IntegerParameters pulumix.Input[[]*AnalysisParametersIntegerParameterArgs] `pulumi:"integerParameters"`
	// A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
	StringParameters pulumix.Input[[]*AnalysisParametersStringParameterArgs] `pulumi:"stringParameters"`
}

func (AnalysisParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParameters)(nil)).Elem()
}

func (i AnalysisParametersArgs) ToAnalysisParametersOutput() AnalysisParametersOutput {
	return i.ToAnalysisParametersOutputWithContext(context.Background())
}

func (i AnalysisParametersArgs) ToAnalysisParametersOutputWithContext(ctx context.Context) AnalysisParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersOutput)
}

func (i *AnalysisParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalysisParametersArgs] {
	return pulumix.Val(i)
}

type AnalysisParametersOutput struct{ *pulumi.OutputState }

func (AnalysisParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParameters)(nil)).Elem()
}

func (o AnalysisParametersOutput) ToAnalysisParametersOutput() AnalysisParametersOutput {
	return o
}

func (o AnalysisParametersOutput) ToAnalysisParametersOutputWithContext(ctx context.Context) AnalysisParametersOutput {
	return o
}

func (o AnalysisParametersOutput) ToOutput(ctx context.Context) pulumix.Output[AnalysisParameters] {
	return pulumix.Output[AnalysisParameters]{
		OutputState: o.OutputState,
	}
}

// A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
func (o AnalysisParametersOutput) DateTimeParameters() pulumix.GArrayOutput[AnalysisParametersDateTimeParameter, AnalysisParametersDateTimeParameterOutput] {
	value := pulumix.Apply[AnalysisParameters](o, func(v AnalysisParameters) []AnalysisParametersDateTimeParameter { return v.DateTimeParameters })
	return pulumix.GArrayOutput[AnalysisParametersDateTimeParameter, AnalysisParametersDateTimeParameterOutput]{OutputState: value.OutputState}
}

// A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
func (o AnalysisParametersOutput) DecimalParameters() pulumix.GArrayOutput[AnalysisParametersDecimalParameter, AnalysisParametersDecimalParameterOutput] {
	value := pulumix.Apply[AnalysisParameters](o, func(v AnalysisParameters) []AnalysisParametersDecimalParameter { return v.DecimalParameters })
	return pulumix.GArrayOutput[AnalysisParametersDecimalParameter, AnalysisParametersDecimalParameterOutput]{OutputState: value.OutputState}
}

// A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
func (o AnalysisParametersOutput) IntegerParameters() pulumix.GArrayOutput[AnalysisParametersIntegerParameter, AnalysisParametersIntegerParameterOutput] {
	value := pulumix.Apply[AnalysisParameters](o, func(v AnalysisParameters) []AnalysisParametersIntegerParameter { return v.IntegerParameters })
	return pulumix.GArrayOutput[AnalysisParametersIntegerParameter, AnalysisParametersIntegerParameterOutput]{OutputState: value.OutputState}
}

// A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
func (o AnalysisParametersOutput) StringParameters() pulumix.GArrayOutput[AnalysisParametersStringParameter, AnalysisParametersStringParameterOutput] {
	value := pulumix.Apply[AnalysisParameters](o, func(v AnalysisParameters) []AnalysisParametersStringParameter { return v.StringParameters })
	return pulumix.GArrayOutput[AnalysisParametersStringParameter, AnalysisParametersStringParameterOutput]{OutputState: value.OutputState}
}

type AnalysisParametersDateTimeParameter struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

type AnalysisParametersDateTimeParameterArgs struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   pulumix.Input[string]   `pulumi:"name"`
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (AnalysisParametersDateTimeParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersDateTimeParameter)(nil)).Elem()
}

func (i AnalysisParametersDateTimeParameterArgs) ToAnalysisParametersDateTimeParameterOutput() AnalysisParametersDateTimeParameterOutput {
	return i.ToAnalysisParametersDateTimeParameterOutputWithContext(context.Background())
}

func (i AnalysisParametersDateTimeParameterArgs) ToAnalysisParametersDateTimeParameterOutputWithContext(ctx context.Context) AnalysisParametersDateTimeParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersDateTimeParameterOutput)
}

func (i *AnalysisParametersDateTimeParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalysisParametersDateTimeParameterArgs] {
	return pulumix.Val(i)
}

type AnalysisParametersDateTimeParameterOutput struct{ *pulumi.OutputState }

func (AnalysisParametersDateTimeParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersDateTimeParameter)(nil)).Elem()
}

func (o AnalysisParametersDateTimeParameterOutput) ToAnalysisParametersDateTimeParameterOutput() AnalysisParametersDateTimeParameterOutput {
	return o
}

func (o AnalysisParametersDateTimeParameterOutput) ToAnalysisParametersDateTimeParameterOutputWithContext(ctx context.Context) AnalysisParametersDateTimeParameterOutput {
	return o
}

func (o AnalysisParametersDateTimeParameterOutput) ToOutput(ctx context.Context) pulumix.Output[AnalysisParametersDateTimeParameter] {
	return pulumix.Output[AnalysisParametersDateTimeParameter]{
		OutputState: o.OutputState,
	}
}

// Display name for the analysis.
//
// The following arguments are optional:
func (o AnalysisParametersDateTimeParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[AnalysisParametersDateTimeParameter](o, func(v AnalysisParametersDateTimeParameter) string { return v.Name })
}

func (o AnalysisParametersDateTimeParameterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnalysisParametersDateTimeParameter](o, func(v AnalysisParametersDateTimeParameter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type AnalysisParametersDecimalParameter struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   string    `pulumi:"name"`
	Values []float64 `pulumi:"values"`
}

type AnalysisParametersDecimalParameterArgs struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   pulumix.Input[string]    `pulumi:"name"`
	Values pulumix.Input[[]float64] `pulumi:"values"`
}

func (AnalysisParametersDecimalParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersDecimalParameter)(nil)).Elem()
}

func (i AnalysisParametersDecimalParameterArgs) ToAnalysisParametersDecimalParameterOutput() AnalysisParametersDecimalParameterOutput {
	return i.ToAnalysisParametersDecimalParameterOutputWithContext(context.Background())
}

func (i AnalysisParametersDecimalParameterArgs) ToAnalysisParametersDecimalParameterOutputWithContext(ctx context.Context) AnalysisParametersDecimalParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersDecimalParameterOutput)
}

func (i *AnalysisParametersDecimalParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalysisParametersDecimalParameterArgs] {
	return pulumix.Val(i)
}

type AnalysisParametersDecimalParameterOutput struct{ *pulumi.OutputState }

func (AnalysisParametersDecimalParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersDecimalParameter)(nil)).Elem()
}

func (o AnalysisParametersDecimalParameterOutput) ToAnalysisParametersDecimalParameterOutput() AnalysisParametersDecimalParameterOutput {
	return o
}

func (o AnalysisParametersDecimalParameterOutput) ToAnalysisParametersDecimalParameterOutputWithContext(ctx context.Context) AnalysisParametersDecimalParameterOutput {
	return o
}

func (o AnalysisParametersDecimalParameterOutput) ToOutput(ctx context.Context) pulumix.Output[AnalysisParametersDecimalParameter] {
	return pulumix.Output[AnalysisParametersDecimalParameter]{
		OutputState: o.OutputState,
	}
}

// Display name for the analysis.
//
// The following arguments are optional:
func (o AnalysisParametersDecimalParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[AnalysisParametersDecimalParameter](o, func(v AnalysisParametersDecimalParameter) string { return v.Name })
}

func (o AnalysisParametersDecimalParameterOutput) Values() pulumix.ArrayOutput[float64] {
	value := pulumix.Apply[AnalysisParametersDecimalParameter](o, func(v AnalysisParametersDecimalParameter) []float64 { return v.Values })
	return pulumix.ArrayOutput[float64]{OutputState: value.OutputState}
}

type AnalysisParametersIntegerParameter struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   string `pulumi:"name"`
	Values []int  `pulumi:"values"`
}

type AnalysisParametersIntegerParameterArgs struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   pulumix.Input[string] `pulumi:"name"`
	Values pulumix.Input[[]int]  `pulumi:"values"`
}

func (AnalysisParametersIntegerParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersIntegerParameter)(nil)).Elem()
}

func (i AnalysisParametersIntegerParameterArgs) ToAnalysisParametersIntegerParameterOutput() AnalysisParametersIntegerParameterOutput {
	return i.ToAnalysisParametersIntegerParameterOutputWithContext(context.Background())
}

func (i AnalysisParametersIntegerParameterArgs) ToAnalysisParametersIntegerParameterOutputWithContext(ctx context.Context) AnalysisParametersIntegerParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersIntegerParameterOutput)
}

func (i *AnalysisParametersIntegerParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalysisParametersIntegerParameterArgs] {
	return pulumix.Val(i)
}

type AnalysisParametersIntegerParameterOutput struct{ *pulumi.OutputState }

func (AnalysisParametersIntegerParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersIntegerParameter)(nil)).Elem()
}

func (o AnalysisParametersIntegerParameterOutput) ToAnalysisParametersIntegerParameterOutput() AnalysisParametersIntegerParameterOutput {
	return o
}

func (o AnalysisParametersIntegerParameterOutput) ToAnalysisParametersIntegerParameterOutputWithContext(ctx context.Context) AnalysisParametersIntegerParameterOutput {
	return o
}

func (o AnalysisParametersIntegerParameterOutput) ToOutput(ctx context.Context) pulumix.Output[AnalysisParametersIntegerParameter] {
	return pulumix.Output[AnalysisParametersIntegerParameter]{
		OutputState: o.OutputState,
	}
}

// Display name for the analysis.
//
// The following arguments are optional:
func (o AnalysisParametersIntegerParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[AnalysisParametersIntegerParameter](o, func(v AnalysisParametersIntegerParameter) string { return v.Name })
}

func (o AnalysisParametersIntegerParameterOutput) Values() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[AnalysisParametersIntegerParameter](o, func(v AnalysisParametersIntegerParameter) []int { return v.Values })
	return pulumix.ArrayOutput[int]{OutputState: value.OutputState}
}

type AnalysisParametersStringParameter struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

type AnalysisParametersStringParameterArgs struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   pulumix.Input[string]   `pulumi:"name"`
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (AnalysisParametersStringParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersStringParameter)(nil)).Elem()
}

func (i AnalysisParametersStringParameterArgs) ToAnalysisParametersStringParameterOutput() AnalysisParametersStringParameterOutput {
	return i.ToAnalysisParametersStringParameterOutputWithContext(context.Background())
}

func (i AnalysisParametersStringParameterArgs) ToAnalysisParametersStringParameterOutputWithContext(ctx context.Context) AnalysisParametersStringParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersStringParameterOutput)
}

func (i *AnalysisParametersStringParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalysisParametersStringParameterArgs] {
	return pulumix.Val(i)
}

type AnalysisParametersStringParameterOutput struct{ *pulumi.OutputState }

func (AnalysisParametersStringParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersStringParameter)(nil)).Elem()
}

func (o AnalysisParametersStringParameterOutput) ToAnalysisParametersStringParameterOutput() AnalysisParametersStringParameterOutput {
	return o
}

func (o AnalysisParametersStringParameterOutput) ToAnalysisParametersStringParameterOutputWithContext(ctx context.Context) AnalysisParametersStringParameterOutput {
	return o
}

func (o AnalysisParametersStringParameterOutput) ToOutput(ctx context.Context) pulumix.Output[AnalysisParametersStringParameter] {
	return pulumix.Output[AnalysisParametersStringParameter]{
		OutputState: o.OutputState,
	}
}

// Display name for the analysis.
//
// The following arguments are optional:
func (o AnalysisParametersStringParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[AnalysisParametersStringParameter](o, func(v AnalysisParametersStringParameter) string { return v.Name })
}

func (o AnalysisParametersStringParameterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnalysisParametersStringParameter](o, func(v AnalysisParametersStringParameter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type AnalysisPermission struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions []string `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal string `pulumi:"principal"`
}

type AnalysisPermissionArgs struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions pulumix.Input[[]string] `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal pulumix.Input[string] `pulumi:"principal"`
}

func (AnalysisPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisPermission)(nil)).Elem()
}

func (i AnalysisPermissionArgs) ToAnalysisPermissionOutput() AnalysisPermissionOutput {
	return i.ToAnalysisPermissionOutputWithContext(context.Background())
}

func (i AnalysisPermissionArgs) ToAnalysisPermissionOutputWithContext(ctx context.Context) AnalysisPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisPermissionOutput)
}

func (i *AnalysisPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalysisPermissionArgs] {
	return pulumix.Val(i)
}

type AnalysisPermissionOutput struct{ *pulumi.OutputState }

func (AnalysisPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisPermission)(nil)).Elem()
}

func (o AnalysisPermissionOutput) ToAnalysisPermissionOutput() AnalysisPermissionOutput {
	return o
}

func (o AnalysisPermissionOutput) ToAnalysisPermissionOutputWithContext(ctx context.Context) AnalysisPermissionOutput {
	return o
}

func (o AnalysisPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[AnalysisPermission] {
	return pulumix.Output[AnalysisPermission]{
		OutputState: o.OutputState,
	}
}

// List of IAM actions to grant or revoke permissions on.
func (o AnalysisPermissionOutput) Actions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnalysisPermission](o, func(v AnalysisPermission) []string { return v.Actions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
func (o AnalysisPermissionOutput) Principal() pulumix.Output[string] {
	return pulumix.Apply[AnalysisPermission](o, func(v AnalysisPermission) string { return v.Principal })
}

type AnalysisSourceEntity struct {
	// The source template. See source_template.
	SourceTemplate *AnalysisSourceEntitySourceTemplate `pulumi:"sourceTemplate"`
}

type AnalysisSourceEntityArgs struct {
	// The source template. See source_template.
	SourceTemplate pulumix.Input[*AnalysisSourceEntitySourceTemplateArgs] `pulumi:"sourceTemplate"`
}

func (AnalysisSourceEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceEntity)(nil)).Elem()
}

func (i AnalysisSourceEntityArgs) ToAnalysisSourceEntityOutput() AnalysisSourceEntityOutput {
	return i.ToAnalysisSourceEntityOutputWithContext(context.Background())
}

func (i AnalysisSourceEntityArgs) ToAnalysisSourceEntityOutputWithContext(ctx context.Context) AnalysisSourceEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceEntityOutput)
}

func (i *AnalysisSourceEntityArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalysisSourceEntityArgs] {
	return pulumix.Val(i)
}

type AnalysisSourceEntityOutput struct{ *pulumi.OutputState }

func (AnalysisSourceEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceEntity)(nil)).Elem()
}

func (o AnalysisSourceEntityOutput) ToAnalysisSourceEntityOutput() AnalysisSourceEntityOutput {
	return o
}

func (o AnalysisSourceEntityOutput) ToAnalysisSourceEntityOutputWithContext(ctx context.Context) AnalysisSourceEntityOutput {
	return o
}

func (o AnalysisSourceEntityOutput) ToOutput(ctx context.Context) pulumix.Output[AnalysisSourceEntity] {
	return pulumix.Output[AnalysisSourceEntity]{
		OutputState: o.OutputState,
	}
}

// The source template. See source_template.
func (o AnalysisSourceEntityOutput) SourceTemplate() pulumix.GPtrOutput[AnalysisSourceEntitySourceTemplate, AnalysisSourceEntitySourceTemplateOutput] {
	value := pulumix.Apply[AnalysisSourceEntity](o, func(v AnalysisSourceEntity) *AnalysisSourceEntitySourceTemplate { return v.SourceTemplate })
	return pulumix.GPtrOutput[AnalysisSourceEntitySourceTemplate, AnalysisSourceEntitySourceTemplateOutput]{OutputState: value.OutputState}
}

type AnalysisSourceEntitySourceTemplate struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn string `pulumi:"arn"`
	// List of dataset references. See data_set_references.
	DataSetReferences []AnalysisSourceEntitySourceTemplateDataSetReference `pulumi:"dataSetReferences"`
}

type AnalysisSourceEntitySourceTemplateArgs struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// List of dataset references. See data_set_references.
	DataSetReferences pulumix.Input[[]*AnalysisSourceEntitySourceTemplateDataSetReferenceArgs] `pulumi:"dataSetReferences"`
}

func (AnalysisSourceEntitySourceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceEntitySourceTemplate)(nil)).Elem()
}

func (i AnalysisSourceEntitySourceTemplateArgs) ToAnalysisSourceEntitySourceTemplateOutput() AnalysisSourceEntitySourceTemplateOutput {
	return i.ToAnalysisSourceEntitySourceTemplateOutputWithContext(context.Background())
}

func (i AnalysisSourceEntitySourceTemplateArgs) ToAnalysisSourceEntitySourceTemplateOutputWithContext(ctx context.Context) AnalysisSourceEntitySourceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceEntitySourceTemplateOutput)
}

func (i *AnalysisSourceEntitySourceTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalysisSourceEntitySourceTemplateArgs] {
	return pulumix.Val(i)
}

type AnalysisSourceEntitySourceTemplateOutput struct{ *pulumi.OutputState }

func (AnalysisSourceEntitySourceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceEntitySourceTemplate)(nil)).Elem()
}

func (o AnalysisSourceEntitySourceTemplateOutput) ToAnalysisSourceEntitySourceTemplateOutput() AnalysisSourceEntitySourceTemplateOutput {
	return o
}

func (o AnalysisSourceEntitySourceTemplateOutput) ToAnalysisSourceEntitySourceTemplateOutputWithContext(ctx context.Context) AnalysisSourceEntitySourceTemplateOutput {
	return o
}

func (o AnalysisSourceEntitySourceTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[AnalysisSourceEntitySourceTemplate] {
	return pulumix.Output[AnalysisSourceEntitySourceTemplate]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the resource.
func (o AnalysisSourceEntitySourceTemplateOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[AnalysisSourceEntitySourceTemplate](o, func(v AnalysisSourceEntitySourceTemplate) string { return v.Arn })
}

// List of dataset references. See data_set_references.
func (o AnalysisSourceEntitySourceTemplateOutput) DataSetReferences() pulumix.GArrayOutput[AnalysisSourceEntitySourceTemplateDataSetReference, AnalysisSourceEntitySourceTemplateDataSetReferenceOutput] {
	value := pulumix.Apply[AnalysisSourceEntitySourceTemplate](o, func(v AnalysisSourceEntitySourceTemplate) []AnalysisSourceEntitySourceTemplateDataSetReference {
		return v.DataSetReferences
	})
	return pulumix.GArrayOutput[AnalysisSourceEntitySourceTemplateDataSetReference, AnalysisSourceEntitySourceTemplateDataSetReferenceOutput]{OutputState: value.OutputState}
}

type AnalysisSourceEntitySourceTemplateDataSetReference struct {
	// Dataset Amazon Resource Name (ARN).
	DataSetArn string `pulumi:"dataSetArn"`
	// Dataset placeholder.
	DataSetPlaceholder string `pulumi:"dataSetPlaceholder"`
}

type AnalysisSourceEntitySourceTemplateDataSetReferenceArgs struct {
	// Dataset Amazon Resource Name (ARN).
	DataSetArn pulumix.Input[string] `pulumi:"dataSetArn"`
	// Dataset placeholder.
	DataSetPlaceholder pulumix.Input[string] `pulumi:"dataSetPlaceholder"`
}

func (AnalysisSourceEntitySourceTemplateDataSetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceEntitySourceTemplateDataSetReference)(nil)).Elem()
}

func (i AnalysisSourceEntitySourceTemplateDataSetReferenceArgs) ToAnalysisSourceEntitySourceTemplateDataSetReferenceOutput() AnalysisSourceEntitySourceTemplateDataSetReferenceOutput {
	return i.ToAnalysisSourceEntitySourceTemplateDataSetReferenceOutputWithContext(context.Background())
}

func (i AnalysisSourceEntitySourceTemplateDataSetReferenceArgs) ToAnalysisSourceEntitySourceTemplateDataSetReferenceOutputWithContext(ctx context.Context) AnalysisSourceEntitySourceTemplateDataSetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceEntitySourceTemplateDataSetReferenceOutput)
}

func (i *AnalysisSourceEntitySourceTemplateDataSetReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalysisSourceEntitySourceTemplateDataSetReferenceArgs] {
	return pulumix.Val(i)
}

type AnalysisSourceEntitySourceTemplateDataSetReferenceOutput struct{ *pulumi.OutputState }

func (AnalysisSourceEntitySourceTemplateDataSetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceEntitySourceTemplateDataSetReference)(nil)).Elem()
}

func (o AnalysisSourceEntitySourceTemplateDataSetReferenceOutput) ToAnalysisSourceEntitySourceTemplateDataSetReferenceOutput() AnalysisSourceEntitySourceTemplateDataSetReferenceOutput {
	return o
}

func (o AnalysisSourceEntitySourceTemplateDataSetReferenceOutput) ToAnalysisSourceEntitySourceTemplateDataSetReferenceOutputWithContext(ctx context.Context) AnalysisSourceEntitySourceTemplateDataSetReferenceOutput {
	return o
}

func (o AnalysisSourceEntitySourceTemplateDataSetReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[AnalysisSourceEntitySourceTemplateDataSetReference] {
	return pulumix.Output[AnalysisSourceEntitySourceTemplateDataSetReference]{
		OutputState: o.OutputState,
	}
}

// Dataset Amazon Resource Name (ARN).
func (o AnalysisSourceEntitySourceTemplateDataSetReferenceOutput) DataSetArn() pulumix.Output[string] {
	return pulumix.Apply[AnalysisSourceEntitySourceTemplateDataSetReference](o, func(v AnalysisSourceEntitySourceTemplateDataSetReference) string { return v.DataSetArn })
}

// Dataset placeholder.
func (o AnalysisSourceEntitySourceTemplateDataSetReferenceOutput) DataSetPlaceholder() pulumix.Output[string] {
	return pulumix.Apply[AnalysisSourceEntitySourceTemplateDataSetReference](o, func(v AnalysisSourceEntitySourceTemplateDataSetReference) string { return v.DataSetPlaceholder })
}

type DashboardDashboardPublishOptions struct {
	// Ad hoc (one-time) filtering option. See ad_hoc_filtering_option.
	AdHocFilteringOption *DashboardDashboardPublishOptionsAdHocFilteringOption `pulumi:"adHocFilteringOption"`
	// The drill-down options of data points in a dashboard. See data_point_drill_up_down_option.
	DataPointDrillUpDownOption *DashboardDashboardPublishOptionsDataPointDrillUpDownOption `pulumi:"dataPointDrillUpDownOption"`
	// The data point menu label options of a dashboard. See data_point_menu_label_option.
	DataPointMenuLabelOption *DashboardDashboardPublishOptionsDataPointMenuLabelOption `pulumi:"dataPointMenuLabelOption"`
	// The data point tool tip options of a dashboard. See data_point_tooltip_option.
	DataPointTooltipOption *DashboardDashboardPublishOptionsDataPointTooltipOption `pulumi:"dataPointTooltipOption"`
	// Export to .csv option. See export_to_csv_option.
	ExportToCsvOption *DashboardDashboardPublishOptionsExportToCsvOption `pulumi:"exportToCsvOption"`
	// Determines if hidden fields are exported with a dashboard. See export_with_hidden_fields_option.
	ExportWithHiddenFieldsOption *DashboardDashboardPublishOptionsExportWithHiddenFieldsOption `pulumi:"exportWithHiddenFieldsOption"`
	// Sheet controls option. See sheet_controls_option.
	SheetControlsOption *DashboardDashboardPublishOptionsSheetControlsOption `pulumi:"sheetControlsOption"`
	// The sheet layout maximization options of a dashboard. See sheet_layout_element_maximization_option.
	SheetLayoutElementMaximizationOption *DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption `pulumi:"sheetLayoutElementMaximizationOption"`
	// The axis sort options of a dashboard. See visual_axis_sort_option.
	VisualAxisSortOption *DashboardDashboardPublishOptionsVisualAxisSortOption `pulumi:"visualAxisSortOption"`
	// The menu options of a visual in a dashboard. See visual_menu_option.
	VisualMenuOption *DashboardDashboardPublishOptionsVisualMenuOption `pulumi:"visualMenuOption"`
}

type DashboardDashboardPublishOptionsArgs struct {
	// Ad hoc (one-time) filtering option. See ad_hoc_filtering_option.
	AdHocFilteringOption pulumix.Input[*DashboardDashboardPublishOptionsAdHocFilteringOptionArgs] `pulumi:"adHocFilteringOption"`
	// The drill-down options of data points in a dashboard. See data_point_drill_up_down_option.
	DataPointDrillUpDownOption pulumix.Input[*DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs] `pulumi:"dataPointDrillUpDownOption"`
	// The data point menu label options of a dashboard. See data_point_menu_label_option.
	DataPointMenuLabelOption pulumix.Input[*DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs] `pulumi:"dataPointMenuLabelOption"`
	// The data point tool tip options of a dashboard. See data_point_tooltip_option.
	DataPointTooltipOption pulumix.Input[*DashboardDashboardPublishOptionsDataPointTooltipOptionArgs] `pulumi:"dataPointTooltipOption"`
	// Export to .csv option. See export_to_csv_option.
	ExportToCsvOption pulumix.Input[*DashboardDashboardPublishOptionsExportToCsvOptionArgs] `pulumi:"exportToCsvOption"`
	// Determines if hidden fields are exported with a dashboard. See export_with_hidden_fields_option.
	ExportWithHiddenFieldsOption pulumix.Input[*DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs] `pulumi:"exportWithHiddenFieldsOption"`
	// Sheet controls option. See sheet_controls_option.
	SheetControlsOption pulumix.Input[*DashboardDashboardPublishOptionsSheetControlsOptionArgs] `pulumi:"sheetControlsOption"`
	// The sheet layout maximization options of a dashboard. See sheet_layout_element_maximization_option.
	SheetLayoutElementMaximizationOption pulumix.Input[*DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs] `pulumi:"sheetLayoutElementMaximizationOption"`
	// The axis sort options of a dashboard. See visual_axis_sort_option.
	VisualAxisSortOption pulumix.Input[*DashboardDashboardPublishOptionsVisualAxisSortOptionArgs] `pulumi:"visualAxisSortOption"`
	// The menu options of a visual in a dashboard. See visual_menu_option.
	VisualMenuOption pulumix.Input[*DashboardDashboardPublishOptionsVisualMenuOptionArgs] `pulumi:"visualMenuOption"`
}

func (DashboardDashboardPublishOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptions)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsArgs) ToDashboardDashboardPublishOptionsOutput() DashboardDashboardPublishOptionsOutput {
	return i.ToDashboardDashboardPublishOptionsOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsArgs) ToDashboardDashboardPublishOptionsOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsOutput)
}

func (i *DashboardDashboardPublishOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardDashboardPublishOptionsArgs] {
	return pulumix.Val(i)
}

type DashboardDashboardPublishOptionsOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptions)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsOutput) ToDashboardDashboardPublishOptionsOutput() DashboardDashboardPublishOptionsOutput {
	return o
}

func (o DashboardDashboardPublishOptionsOutput) ToDashboardDashboardPublishOptionsOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsOutput {
	return o
}

func (o DashboardDashboardPublishOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardDashboardPublishOptions] {
	return pulumix.Output[DashboardDashboardPublishOptions]{
		OutputState: o.OutputState,
	}
}

// Ad hoc (one-time) filtering option. See ad_hoc_filtering_option.
func (o DashboardDashboardPublishOptionsOutput) AdHocFilteringOption() pulumix.GPtrOutput[DashboardDashboardPublishOptionsAdHocFilteringOption, DashboardDashboardPublishOptionsAdHocFilteringOptionOutput] {
	value := pulumix.Apply[DashboardDashboardPublishOptions](o, func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsAdHocFilteringOption {
		return v.AdHocFilteringOption
	})
	return pulumix.GPtrOutput[DashboardDashboardPublishOptionsAdHocFilteringOption, DashboardDashboardPublishOptionsAdHocFilteringOptionOutput]{OutputState: value.OutputState}
}

// The drill-down options of data points in a dashboard. See data_point_drill_up_down_option.
func (o DashboardDashboardPublishOptionsOutput) DataPointDrillUpDownOption() pulumix.GPtrOutput[DashboardDashboardPublishOptionsDataPointDrillUpDownOption, DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput] {
	value := pulumix.Apply[DashboardDashboardPublishOptions](o, func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsDataPointDrillUpDownOption {
		return v.DataPointDrillUpDownOption
	})
	return pulumix.GPtrOutput[DashboardDashboardPublishOptionsDataPointDrillUpDownOption, DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput]{OutputState: value.OutputState}
}

// The data point menu label options of a dashboard. See data_point_menu_label_option.
func (o DashboardDashboardPublishOptionsOutput) DataPointMenuLabelOption() pulumix.GPtrOutput[DashboardDashboardPublishOptionsDataPointMenuLabelOption, DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput] {
	value := pulumix.Apply[DashboardDashboardPublishOptions](o, func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsDataPointMenuLabelOption {
		return v.DataPointMenuLabelOption
	})
	return pulumix.GPtrOutput[DashboardDashboardPublishOptionsDataPointMenuLabelOption, DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput]{OutputState: value.OutputState}
}

// The data point tool tip options of a dashboard. See data_point_tooltip_option.
func (o DashboardDashboardPublishOptionsOutput) DataPointTooltipOption() pulumix.GPtrOutput[DashboardDashboardPublishOptionsDataPointTooltipOption, DashboardDashboardPublishOptionsDataPointTooltipOptionOutput] {
	value := pulumix.Apply[DashboardDashboardPublishOptions](o, func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsDataPointTooltipOption {
		return v.DataPointTooltipOption
	})
	return pulumix.GPtrOutput[DashboardDashboardPublishOptionsDataPointTooltipOption, DashboardDashboardPublishOptionsDataPointTooltipOptionOutput]{OutputState: value.OutputState}
}

// Export to .csv option. See export_to_csv_option.
func (o DashboardDashboardPublishOptionsOutput) ExportToCsvOption() pulumix.GPtrOutput[DashboardDashboardPublishOptionsExportToCsvOption, DashboardDashboardPublishOptionsExportToCsvOptionOutput] {
	value := pulumix.Apply[DashboardDashboardPublishOptions](o, func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsExportToCsvOption {
		return v.ExportToCsvOption
	})
	return pulumix.GPtrOutput[DashboardDashboardPublishOptionsExportToCsvOption, DashboardDashboardPublishOptionsExportToCsvOptionOutput]{OutputState: value.OutputState}
}

// Determines if hidden fields are exported with a dashboard. See export_with_hidden_fields_option.
func (o DashboardDashboardPublishOptionsOutput) ExportWithHiddenFieldsOption() pulumix.GPtrOutput[DashboardDashboardPublishOptionsExportWithHiddenFieldsOption, DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput] {
	value := pulumix.Apply[DashboardDashboardPublishOptions](o, func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsExportWithHiddenFieldsOption {
		return v.ExportWithHiddenFieldsOption
	})
	return pulumix.GPtrOutput[DashboardDashboardPublishOptionsExportWithHiddenFieldsOption, DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput]{OutputState: value.OutputState}
}

// Sheet controls option. See sheet_controls_option.
func (o DashboardDashboardPublishOptionsOutput) SheetControlsOption() pulumix.GPtrOutput[DashboardDashboardPublishOptionsSheetControlsOption, DashboardDashboardPublishOptionsSheetControlsOptionOutput] {
	value := pulumix.Apply[DashboardDashboardPublishOptions](o, func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsSheetControlsOption {
		return v.SheetControlsOption
	})
	return pulumix.GPtrOutput[DashboardDashboardPublishOptionsSheetControlsOption, DashboardDashboardPublishOptionsSheetControlsOptionOutput]{OutputState: value.OutputState}
}

// The sheet layout maximization options of a dashboard. See sheet_layout_element_maximization_option.
func (o DashboardDashboardPublishOptionsOutput) SheetLayoutElementMaximizationOption() pulumix.GPtrOutput[DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption, DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput] {
	value := pulumix.Apply[DashboardDashboardPublishOptions](o, func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption {
		return v.SheetLayoutElementMaximizationOption
	})
	return pulumix.GPtrOutput[DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption, DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput]{OutputState: value.OutputState}
}

// The axis sort options of a dashboard. See visual_axis_sort_option.
func (o DashboardDashboardPublishOptionsOutput) VisualAxisSortOption() pulumix.GPtrOutput[DashboardDashboardPublishOptionsVisualAxisSortOption, DashboardDashboardPublishOptionsVisualAxisSortOptionOutput] {
	value := pulumix.Apply[DashboardDashboardPublishOptions](o, func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsVisualAxisSortOption {
		return v.VisualAxisSortOption
	})
	return pulumix.GPtrOutput[DashboardDashboardPublishOptionsVisualAxisSortOption, DashboardDashboardPublishOptionsVisualAxisSortOptionOutput]{OutputState: value.OutputState}
}

// The menu options of a visual in a dashboard. See visual_menu_option.
func (o DashboardDashboardPublishOptionsOutput) VisualMenuOption() pulumix.GPtrOutput[DashboardDashboardPublishOptionsVisualMenuOption, DashboardDashboardPublishOptionsVisualMenuOptionOutput] {
	value := pulumix.Apply[DashboardDashboardPublishOptions](o, func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsVisualMenuOption {
		return v.VisualMenuOption
	})
	return pulumix.GPtrOutput[DashboardDashboardPublishOptionsVisualMenuOption, DashboardDashboardPublishOptionsVisualMenuOptionOutput]{OutputState: value.OutputState}
}

type DashboardDashboardPublishOptionsAdHocFilteringOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

type DashboardDashboardPublishOptionsAdHocFilteringOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumix.Input[*string] `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsAdHocFilteringOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsAdHocFilteringOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsAdHocFilteringOptionArgs) ToDashboardDashboardPublishOptionsAdHocFilteringOptionOutput() DashboardDashboardPublishOptionsAdHocFilteringOptionOutput {
	return i.ToDashboardDashboardPublishOptionsAdHocFilteringOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsAdHocFilteringOptionArgs) ToDashboardDashboardPublishOptionsAdHocFilteringOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsAdHocFilteringOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsAdHocFilteringOptionOutput)
}

func (i *DashboardDashboardPublishOptionsAdHocFilteringOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardDashboardPublishOptionsAdHocFilteringOptionArgs] {
	return pulumix.Val(i)
}

type DashboardDashboardPublishOptionsAdHocFilteringOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsAdHocFilteringOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsAdHocFilteringOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsAdHocFilteringOptionOutput) ToDashboardDashboardPublishOptionsAdHocFilteringOptionOutput() DashboardDashboardPublishOptionsAdHocFilteringOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsAdHocFilteringOptionOutput) ToDashboardDashboardPublishOptionsAdHocFilteringOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsAdHocFilteringOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsAdHocFilteringOptionOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardDashboardPublishOptionsAdHocFilteringOption] {
	return pulumix.Output[DashboardDashboardPublishOptionsAdHocFilteringOption]{
		OutputState: o.OutputState,
	}
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsAdHocFilteringOptionOutput) AvailabilityStatus() pulumix.Output[*string] {
	return pulumix.Apply[DashboardDashboardPublishOptionsAdHocFilteringOption](o, func(v DashboardDashboardPublishOptionsAdHocFilteringOption) *string { return v.AvailabilityStatus })
}

type DashboardDashboardPublishOptionsDataPointDrillUpDownOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

type DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumix.Input[*string] `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointDrillUpDownOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput() DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput {
	return i.ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput)
}

func (i *DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs] {
	return pulumix.Val(i)
}

type DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointDrillUpDownOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput() DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardDashboardPublishOptionsDataPointDrillUpDownOption] {
	return pulumix.Output[DashboardDashboardPublishOptionsDataPointDrillUpDownOption]{
		OutputState: o.OutputState,
	}
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput) AvailabilityStatus() pulumix.Output[*string] {
	return pulumix.Apply[DashboardDashboardPublishOptionsDataPointDrillUpDownOption](o, func(v DashboardDashboardPublishOptionsDataPointDrillUpDownOption) *string {
		return v.AvailabilityStatus
	})
}

type DashboardDashboardPublishOptionsDataPointMenuLabelOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

type DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumix.Input[*string] `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointMenuLabelOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput() DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput {
	return i.ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput)
}

func (i *DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs] {
	return pulumix.Val(i)
}

type DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointMenuLabelOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput() DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardDashboardPublishOptionsDataPointMenuLabelOption] {
	return pulumix.Output[DashboardDashboardPublishOptionsDataPointMenuLabelOption]{
		OutputState: o.OutputState,
	}
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput) AvailabilityStatus() pulumix.Output[*string] {
	return pulumix.Apply[DashboardDashboardPublishOptionsDataPointMenuLabelOption](o, func(v DashboardDashboardPublishOptionsDataPointMenuLabelOption) *string { return v.AvailabilityStatus })
}

type DashboardDashboardPublishOptionsDataPointTooltipOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

type DashboardDashboardPublishOptionsDataPointTooltipOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumix.Input[*string] `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsDataPointTooltipOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointTooltipOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsDataPointTooltipOptionArgs) ToDashboardDashboardPublishOptionsDataPointTooltipOptionOutput() DashboardDashboardPublishOptionsDataPointTooltipOptionOutput {
	return i.ToDashboardDashboardPublishOptionsDataPointTooltipOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsDataPointTooltipOptionArgs) ToDashboardDashboardPublishOptionsDataPointTooltipOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointTooltipOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsDataPointTooltipOptionOutput)
}

func (i *DashboardDashboardPublishOptionsDataPointTooltipOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardDashboardPublishOptionsDataPointTooltipOptionArgs] {
	return pulumix.Val(i)
}

type DashboardDashboardPublishOptionsDataPointTooltipOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsDataPointTooltipOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointTooltipOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsDataPointTooltipOptionOutput) ToDashboardDashboardPublishOptionsDataPointTooltipOptionOutput() DashboardDashboardPublishOptionsDataPointTooltipOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointTooltipOptionOutput) ToDashboardDashboardPublishOptionsDataPointTooltipOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointTooltipOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointTooltipOptionOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardDashboardPublishOptionsDataPointTooltipOption] {
	return pulumix.Output[DashboardDashboardPublishOptionsDataPointTooltipOption]{
		OutputState: o.OutputState,
	}
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsDataPointTooltipOptionOutput) AvailabilityStatus() pulumix.Output[*string] {
	return pulumix.Apply[DashboardDashboardPublishOptionsDataPointTooltipOption](o, func(v DashboardDashboardPublishOptionsDataPointTooltipOption) *string { return v.AvailabilityStatus })
}

type DashboardDashboardPublishOptionsExportToCsvOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

type DashboardDashboardPublishOptionsExportToCsvOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumix.Input[*string] `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsExportToCsvOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsExportToCsvOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsExportToCsvOptionArgs) ToDashboardDashboardPublishOptionsExportToCsvOptionOutput() DashboardDashboardPublishOptionsExportToCsvOptionOutput {
	return i.ToDashboardDashboardPublishOptionsExportToCsvOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsExportToCsvOptionArgs) ToDashboardDashboardPublishOptionsExportToCsvOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportToCsvOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsExportToCsvOptionOutput)
}

func (i *DashboardDashboardPublishOptionsExportToCsvOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardDashboardPublishOptionsExportToCsvOptionArgs] {
	return pulumix.Val(i)
}

type DashboardDashboardPublishOptionsExportToCsvOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsExportToCsvOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsExportToCsvOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsExportToCsvOptionOutput) ToDashboardDashboardPublishOptionsExportToCsvOptionOutput() DashboardDashboardPublishOptionsExportToCsvOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsExportToCsvOptionOutput) ToDashboardDashboardPublishOptionsExportToCsvOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportToCsvOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsExportToCsvOptionOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardDashboardPublishOptionsExportToCsvOption] {
	return pulumix.Output[DashboardDashboardPublishOptionsExportToCsvOption]{
		OutputState: o.OutputState,
	}
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsExportToCsvOptionOutput) AvailabilityStatus() pulumix.Output[*string] {
	return pulumix.Apply[DashboardDashboardPublishOptionsExportToCsvOption](o, func(v DashboardDashboardPublishOptionsExportToCsvOption) *string { return v.AvailabilityStatus })
}

type DashboardDashboardPublishOptionsExportWithHiddenFieldsOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

type DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumix.Input[*string] `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsExportWithHiddenFieldsOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput() DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput {
	return i.ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput)
}

func (i *DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs] {
	return pulumix.Val(i)
}

type DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsExportWithHiddenFieldsOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput() DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardDashboardPublishOptionsExportWithHiddenFieldsOption] {
	return pulumix.Output[DashboardDashboardPublishOptionsExportWithHiddenFieldsOption]{
		OutputState: o.OutputState,
	}
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput) AvailabilityStatus() pulumix.Output[*string] {
	return pulumix.Apply[DashboardDashboardPublishOptionsExportWithHiddenFieldsOption](o, func(v DashboardDashboardPublishOptionsExportWithHiddenFieldsOption) *string {
		return v.AvailabilityStatus
	})
}

type DashboardDashboardPublishOptionsSheetControlsOption struct {
	// Visibility state. Possibles values: EXPANDED, COLLAPSED.
	VisibilityState *string `pulumi:"visibilityState"`
}

type DashboardDashboardPublishOptionsSheetControlsOptionArgs struct {
	// Visibility state. Possibles values: EXPANDED, COLLAPSED.
	VisibilityState pulumix.Input[*string] `pulumi:"visibilityState"`
}

func (DashboardDashboardPublishOptionsSheetControlsOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsSheetControlsOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsSheetControlsOptionArgs) ToDashboardDashboardPublishOptionsSheetControlsOptionOutput() DashboardDashboardPublishOptionsSheetControlsOptionOutput {
	return i.ToDashboardDashboardPublishOptionsSheetControlsOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsSheetControlsOptionArgs) ToDashboardDashboardPublishOptionsSheetControlsOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetControlsOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsSheetControlsOptionOutput)
}

func (i *DashboardDashboardPublishOptionsSheetControlsOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardDashboardPublishOptionsSheetControlsOptionArgs] {
	return pulumix.Val(i)
}

type DashboardDashboardPublishOptionsSheetControlsOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsSheetControlsOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsSheetControlsOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsSheetControlsOptionOutput) ToDashboardDashboardPublishOptionsSheetControlsOptionOutput() DashboardDashboardPublishOptionsSheetControlsOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsSheetControlsOptionOutput) ToDashboardDashboardPublishOptionsSheetControlsOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetControlsOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsSheetControlsOptionOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardDashboardPublishOptionsSheetControlsOption] {
	return pulumix.Output[DashboardDashboardPublishOptionsSheetControlsOption]{
		OutputState: o.OutputState,
	}
}

// Visibility state. Possibles values: EXPANDED, COLLAPSED.
func (o DashboardDashboardPublishOptionsSheetControlsOptionOutput) VisibilityState() pulumix.Output[*string] {
	return pulumix.Apply[DashboardDashboardPublishOptionsSheetControlsOption](o, func(v DashboardDashboardPublishOptionsSheetControlsOption) *string { return v.VisibilityState })
}

type DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

type DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumix.Input[*string] `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput() DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput {
	return i.ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput)
}

func (i *DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs] {
	return pulumix.Val(i)
}

type DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput() DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption] {
	return pulumix.Output[DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption]{
		OutputState: o.OutputState,
	}
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput) AvailabilityStatus() pulumix.Output[*string] {
	return pulumix.Apply[DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption](o, func(v DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption) *string {
		return v.AvailabilityStatus
	})
}

type DashboardDashboardPublishOptionsVisualAxisSortOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

type DashboardDashboardPublishOptionsVisualAxisSortOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumix.Input[*string] `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsVisualAxisSortOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsVisualAxisSortOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsVisualAxisSortOptionArgs) ToDashboardDashboardPublishOptionsVisualAxisSortOptionOutput() DashboardDashboardPublishOptionsVisualAxisSortOptionOutput {
	return i.ToDashboardDashboardPublishOptionsVisualAxisSortOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsVisualAxisSortOptionArgs) ToDashboardDashboardPublishOptionsVisualAxisSortOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualAxisSortOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsVisualAxisSortOptionOutput)
}

func (i *DashboardDashboardPublishOptionsVisualAxisSortOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardDashboardPublishOptionsVisualAxisSortOptionArgs] {
	return pulumix.Val(i)
}

type DashboardDashboardPublishOptionsVisualAxisSortOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsVisualAxisSortOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsVisualAxisSortOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsVisualAxisSortOptionOutput) ToDashboardDashboardPublishOptionsVisualAxisSortOptionOutput() DashboardDashboardPublishOptionsVisualAxisSortOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsVisualAxisSortOptionOutput) ToDashboardDashboardPublishOptionsVisualAxisSortOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualAxisSortOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsVisualAxisSortOptionOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardDashboardPublishOptionsVisualAxisSortOption] {
	return pulumix.Output[DashboardDashboardPublishOptionsVisualAxisSortOption]{
		OutputState: o.OutputState,
	}
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsVisualAxisSortOptionOutput) AvailabilityStatus() pulumix.Output[*string] {
	return pulumix.Apply[DashboardDashboardPublishOptionsVisualAxisSortOption](o, func(v DashboardDashboardPublishOptionsVisualAxisSortOption) *string { return v.AvailabilityStatus })
}

type DashboardDashboardPublishOptionsVisualMenuOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

type DashboardDashboardPublishOptionsVisualMenuOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumix.Input[*string] `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsVisualMenuOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsVisualMenuOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsVisualMenuOptionArgs) ToDashboardDashboardPublishOptionsVisualMenuOptionOutput() DashboardDashboardPublishOptionsVisualMenuOptionOutput {
	return i.ToDashboardDashboardPublishOptionsVisualMenuOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsVisualMenuOptionArgs) ToDashboardDashboardPublishOptionsVisualMenuOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualMenuOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsVisualMenuOptionOutput)
}

func (i *DashboardDashboardPublishOptionsVisualMenuOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardDashboardPublishOptionsVisualMenuOptionArgs] {
	return pulumix.Val(i)
}

type DashboardDashboardPublishOptionsVisualMenuOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsVisualMenuOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsVisualMenuOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsVisualMenuOptionOutput) ToDashboardDashboardPublishOptionsVisualMenuOptionOutput() DashboardDashboardPublishOptionsVisualMenuOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsVisualMenuOptionOutput) ToDashboardDashboardPublishOptionsVisualMenuOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualMenuOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsVisualMenuOptionOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardDashboardPublishOptionsVisualMenuOption] {
	return pulumix.Output[DashboardDashboardPublishOptionsVisualMenuOption]{
		OutputState: o.OutputState,
	}
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsVisualMenuOptionOutput) AvailabilityStatus() pulumix.Output[*string] {
	return pulumix.Apply[DashboardDashboardPublishOptionsVisualMenuOption](o, func(v DashboardDashboardPublishOptionsVisualMenuOption) *string { return v.AvailabilityStatus })
}

type DashboardParameters struct {
	// A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
	DateTimeParameters []DashboardParametersDateTimeParameter `pulumi:"dateTimeParameters"`
	// A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
	DecimalParameters []DashboardParametersDecimalParameter `pulumi:"decimalParameters"`
	// A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
	IntegerParameters []DashboardParametersIntegerParameter `pulumi:"integerParameters"`
	// A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
	StringParameters []DashboardParametersStringParameter `pulumi:"stringParameters"`
}

type DashboardParametersArgs struct {
	// A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
	DateTimeParameters pulumix.Input[[]*DashboardParametersDateTimeParameterArgs] `pulumi:"dateTimeParameters"`
	// A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
	DecimalParameters pulumix.Input[[]*DashboardParametersDecimalParameterArgs] `pulumi:"decimalParameters"`
	// A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
	IntegerParameters pulumix.Input[[]*DashboardParametersIntegerParameterArgs] `pulumi:"integerParameters"`
	// A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
	StringParameters pulumix.Input[[]*DashboardParametersStringParameterArgs] `pulumi:"stringParameters"`
}

func (DashboardParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParameters)(nil)).Elem()
}

func (i DashboardParametersArgs) ToDashboardParametersOutput() DashboardParametersOutput {
	return i.ToDashboardParametersOutputWithContext(context.Background())
}

func (i DashboardParametersArgs) ToDashboardParametersOutputWithContext(ctx context.Context) DashboardParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersOutput)
}

func (i *DashboardParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardParametersArgs] {
	return pulumix.Val(i)
}

type DashboardParametersOutput struct{ *pulumi.OutputState }

func (DashboardParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParameters)(nil)).Elem()
}

func (o DashboardParametersOutput) ToDashboardParametersOutput() DashboardParametersOutput {
	return o
}

func (o DashboardParametersOutput) ToDashboardParametersOutputWithContext(ctx context.Context) DashboardParametersOutput {
	return o
}

func (o DashboardParametersOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardParameters] {
	return pulumix.Output[DashboardParameters]{
		OutputState: o.OutputState,
	}
}

// A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
func (o DashboardParametersOutput) DateTimeParameters() pulumix.GArrayOutput[DashboardParametersDateTimeParameter, DashboardParametersDateTimeParameterOutput] {
	value := pulumix.Apply[DashboardParameters](o, func(v DashboardParameters) []DashboardParametersDateTimeParameter { return v.DateTimeParameters })
	return pulumix.GArrayOutput[DashboardParametersDateTimeParameter, DashboardParametersDateTimeParameterOutput]{OutputState: value.OutputState}
}

// A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
func (o DashboardParametersOutput) DecimalParameters() pulumix.GArrayOutput[DashboardParametersDecimalParameter, DashboardParametersDecimalParameterOutput] {
	value := pulumix.Apply[DashboardParameters](o, func(v DashboardParameters) []DashboardParametersDecimalParameter { return v.DecimalParameters })
	return pulumix.GArrayOutput[DashboardParametersDecimalParameter, DashboardParametersDecimalParameterOutput]{OutputState: value.OutputState}
}

// A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
func (o DashboardParametersOutput) IntegerParameters() pulumix.GArrayOutput[DashboardParametersIntegerParameter, DashboardParametersIntegerParameterOutput] {
	value := pulumix.Apply[DashboardParameters](o, func(v DashboardParameters) []DashboardParametersIntegerParameter { return v.IntegerParameters })
	return pulumix.GArrayOutput[DashboardParametersIntegerParameter, DashboardParametersIntegerParameterOutput]{OutputState: value.OutputState}
}

// A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
func (o DashboardParametersOutput) StringParameters() pulumix.GArrayOutput[DashboardParametersStringParameter, DashboardParametersStringParameterOutput] {
	value := pulumix.Apply[DashboardParameters](o, func(v DashboardParameters) []DashboardParametersStringParameter { return v.StringParameters })
	return pulumix.GArrayOutput[DashboardParametersStringParameter, DashboardParametersStringParameterOutput]{OutputState: value.OutputState}
}

type DashboardParametersDateTimeParameter struct {
	// Display name for the dashboard.
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

type DashboardParametersDateTimeParameterArgs struct {
	// Display name for the dashboard.
	Name   pulumix.Input[string]   `pulumi:"name"`
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (DashboardParametersDateTimeParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersDateTimeParameter)(nil)).Elem()
}

func (i DashboardParametersDateTimeParameterArgs) ToDashboardParametersDateTimeParameterOutput() DashboardParametersDateTimeParameterOutput {
	return i.ToDashboardParametersDateTimeParameterOutputWithContext(context.Background())
}

func (i DashboardParametersDateTimeParameterArgs) ToDashboardParametersDateTimeParameterOutputWithContext(ctx context.Context) DashboardParametersDateTimeParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersDateTimeParameterOutput)
}

func (i *DashboardParametersDateTimeParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardParametersDateTimeParameterArgs] {
	return pulumix.Val(i)
}

type DashboardParametersDateTimeParameterOutput struct{ *pulumi.OutputState }

func (DashboardParametersDateTimeParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersDateTimeParameter)(nil)).Elem()
}

func (o DashboardParametersDateTimeParameterOutput) ToDashboardParametersDateTimeParameterOutput() DashboardParametersDateTimeParameterOutput {
	return o
}

func (o DashboardParametersDateTimeParameterOutput) ToDashboardParametersDateTimeParameterOutputWithContext(ctx context.Context) DashboardParametersDateTimeParameterOutput {
	return o
}

func (o DashboardParametersDateTimeParameterOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardParametersDateTimeParameter] {
	return pulumix.Output[DashboardParametersDateTimeParameter]{
		OutputState: o.OutputState,
	}
}

// Display name for the dashboard.
func (o DashboardParametersDateTimeParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[DashboardParametersDateTimeParameter](o, func(v DashboardParametersDateTimeParameter) string { return v.Name })
}

func (o DashboardParametersDateTimeParameterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DashboardParametersDateTimeParameter](o, func(v DashboardParametersDateTimeParameter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type DashboardParametersDecimalParameter struct {
	// Display name for the dashboard.
	Name   string    `pulumi:"name"`
	Values []float64 `pulumi:"values"`
}

type DashboardParametersDecimalParameterArgs struct {
	// Display name for the dashboard.
	Name   pulumix.Input[string]    `pulumi:"name"`
	Values pulumix.Input[[]float64] `pulumi:"values"`
}

func (DashboardParametersDecimalParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersDecimalParameter)(nil)).Elem()
}

func (i DashboardParametersDecimalParameterArgs) ToDashboardParametersDecimalParameterOutput() DashboardParametersDecimalParameterOutput {
	return i.ToDashboardParametersDecimalParameterOutputWithContext(context.Background())
}

func (i DashboardParametersDecimalParameterArgs) ToDashboardParametersDecimalParameterOutputWithContext(ctx context.Context) DashboardParametersDecimalParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersDecimalParameterOutput)
}

func (i *DashboardParametersDecimalParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardParametersDecimalParameterArgs] {
	return pulumix.Val(i)
}

type DashboardParametersDecimalParameterOutput struct{ *pulumi.OutputState }

func (DashboardParametersDecimalParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersDecimalParameter)(nil)).Elem()
}

func (o DashboardParametersDecimalParameterOutput) ToDashboardParametersDecimalParameterOutput() DashboardParametersDecimalParameterOutput {
	return o
}

func (o DashboardParametersDecimalParameterOutput) ToDashboardParametersDecimalParameterOutputWithContext(ctx context.Context) DashboardParametersDecimalParameterOutput {
	return o
}

func (o DashboardParametersDecimalParameterOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardParametersDecimalParameter] {
	return pulumix.Output[DashboardParametersDecimalParameter]{
		OutputState: o.OutputState,
	}
}

// Display name for the dashboard.
func (o DashboardParametersDecimalParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[DashboardParametersDecimalParameter](o, func(v DashboardParametersDecimalParameter) string { return v.Name })
}

func (o DashboardParametersDecimalParameterOutput) Values() pulumix.ArrayOutput[float64] {
	value := pulumix.Apply[DashboardParametersDecimalParameter](o, func(v DashboardParametersDecimalParameter) []float64 { return v.Values })
	return pulumix.ArrayOutput[float64]{OutputState: value.OutputState}
}

type DashboardParametersIntegerParameter struct {
	// Display name for the dashboard.
	Name   string `pulumi:"name"`
	Values []int  `pulumi:"values"`
}

type DashboardParametersIntegerParameterArgs struct {
	// Display name for the dashboard.
	Name   pulumix.Input[string] `pulumi:"name"`
	Values pulumix.Input[[]int]  `pulumi:"values"`
}

func (DashboardParametersIntegerParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersIntegerParameter)(nil)).Elem()
}

func (i DashboardParametersIntegerParameterArgs) ToDashboardParametersIntegerParameterOutput() DashboardParametersIntegerParameterOutput {
	return i.ToDashboardParametersIntegerParameterOutputWithContext(context.Background())
}

func (i DashboardParametersIntegerParameterArgs) ToDashboardParametersIntegerParameterOutputWithContext(ctx context.Context) DashboardParametersIntegerParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersIntegerParameterOutput)
}

func (i *DashboardParametersIntegerParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardParametersIntegerParameterArgs] {
	return pulumix.Val(i)
}

type DashboardParametersIntegerParameterOutput struct{ *pulumi.OutputState }

func (DashboardParametersIntegerParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersIntegerParameter)(nil)).Elem()
}

func (o DashboardParametersIntegerParameterOutput) ToDashboardParametersIntegerParameterOutput() DashboardParametersIntegerParameterOutput {
	return o
}

func (o DashboardParametersIntegerParameterOutput) ToDashboardParametersIntegerParameterOutputWithContext(ctx context.Context) DashboardParametersIntegerParameterOutput {
	return o
}

func (o DashboardParametersIntegerParameterOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardParametersIntegerParameter] {
	return pulumix.Output[DashboardParametersIntegerParameter]{
		OutputState: o.OutputState,
	}
}

// Display name for the dashboard.
func (o DashboardParametersIntegerParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[DashboardParametersIntegerParameter](o, func(v DashboardParametersIntegerParameter) string { return v.Name })
}

func (o DashboardParametersIntegerParameterOutput) Values() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[DashboardParametersIntegerParameter](o, func(v DashboardParametersIntegerParameter) []int { return v.Values })
	return pulumix.ArrayOutput[int]{OutputState: value.OutputState}
}

type DashboardParametersStringParameter struct {
	// Display name for the dashboard.
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

type DashboardParametersStringParameterArgs struct {
	// Display name for the dashboard.
	Name   pulumix.Input[string]   `pulumi:"name"`
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (DashboardParametersStringParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersStringParameter)(nil)).Elem()
}

func (i DashboardParametersStringParameterArgs) ToDashboardParametersStringParameterOutput() DashboardParametersStringParameterOutput {
	return i.ToDashboardParametersStringParameterOutputWithContext(context.Background())
}

func (i DashboardParametersStringParameterArgs) ToDashboardParametersStringParameterOutputWithContext(ctx context.Context) DashboardParametersStringParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersStringParameterOutput)
}

func (i *DashboardParametersStringParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardParametersStringParameterArgs] {
	return pulumix.Val(i)
}

type DashboardParametersStringParameterOutput struct{ *pulumi.OutputState }

func (DashboardParametersStringParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersStringParameter)(nil)).Elem()
}

func (o DashboardParametersStringParameterOutput) ToDashboardParametersStringParameterOutput() DashboardParametersStringParameterOutput {
	return o
}

func (o DashboardParametersStringParameterOutput) ToDashboardParametersStringParameterOutputWithContext(ctx context.Context) DashboardParametersStringParameterOutput {
	return o
}

func (o DashboardParametersStringParameterOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardParametersStringParameter] {
	return pulumix.Output[DashboardParametersStringParameter]{
		OutputState: o.OutputState,
	}
}

// Display name for the dashboard.
func (o DashboardParametersStringParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[DashboardParametersStringParameter](o, func(v DashboardParametersStringParameter) string { return v.Name })
}

func (o DashboardParametersStringParameterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DashboardParametersStringParameter](o, func(v DashboardParametersStringParameter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type DashboardPermission struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions []string `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal string `pulumi:"principal"`
}

type DashboardPermissionArgs struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions pulumix.Input[[]string] `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal pulumix.Input[string] `pulumi:"principal"`
}

func (DashboardPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermission)(nil)).Elem()
}

func (i DashboardPermissionArgs) ToDashboardPermissionOutput() DashboardPermissionOutput {
	return i.ToDashboardPermissionOutputWithContext(context.Background())
}

func (i DashboardPermissionArgs) ToDashboardPermissionOutputWithContext(ctx context.Context) DashboardPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionOutput)
}

func (i *DashboardPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardPermissionArgs] {
	return pulumix.Val(i)
}

type DashboardPermissionOutput struct{ *pulumi.OutputState }

func (DashboardPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermission)(nil)).Elem()
}

func (o DashboardPermissionOutput) ToDashboardPermissionOutput() DashboardPermissionOutput {
	return o
}

func (o DashboardPermissionOutput) ToDashboardPermissionOutputWithContext(ctx context.Context) DashboardPermissionOutput {
	return o
}

func (o DashboardPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardPermission] {
	return pulumix.Output[DashboardPermission]{
		OutputState: o.OutputState,
	}
}

// List of IAM actions to grant or revoke permissions on.
func (o DashboardPermissionOutput) Actions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DashboardPermission](o, func(v DashboardPermission) []string { return v.Actions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
func (o DashboardPermissionOutput) Principal() pulumix.Output[string] {
	return pulumix.Apply[DashboardPermission](o, func(v DashboardPermission) string { return v.Principal })
}

type DashboardSourceEntity struct {
	// The source template. See source_template.
	SourceTemplate *DashboardSourceEntitySourceTemplate `pulumi:"sourceTemplate"`
}

type DashboardSourceEntityArgs struct {
	// The source template. See source_template.
	SourceTemplate pulumix.Input[*DashboardSourceEntitySourceTemplateArgs] `pulumi:"sourceTemplate"`
}

func (DashboardSourceEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntity)(nil)).Elem()
}

func (i DashboardSourceEntityArgs) ToDashboardSourceEntityOutput() DashboardSourceEntityOutput {
	return i.ToDashboardSourceEntityOutputWithContext(context.Background())
}

func (i DashboardSourceEntityArgs) ToDashboardSourceEntityOutputWithContext(ctx context.Context) DashboardSourceEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntityOutput)
}

func (i *DashboardSourceEntityArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardSourceEntityArgs] {
	return pulumix.Val(i)
}

type DashboardSourceEntityOutput struct{ *pulumi.OutputState }

func (DashboardSourceEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntity)(nil)).Elem()
}

func (o DashboardSourceEntityOutput) ToDashboardSourceEntityOutput() DashboardSourceEntityOutput {
	return o
}

func (o DashboardSourceEntityOutput) ToDashboardSourceEntityOutputWithContext(ctx context.Context) DashboardSourceEntityOutput {
	return o
}

func (o DashboardSourceEntityOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardSourceEntity] {
	return pulumix.Output[DashboardSourceEntity]{
		OutputState: o.OutputState,
	}
}

// The source template. See source_template.
func (o DashboardSourceEntityOutput) SourceTemplate() pulumix.GPtrOutput[DashboardSourceEntitySourceTemplate, DashboardSourceEntitySourceTemplateOutput] {
	value := pulumix.Apply[DashboardSourceEntity](o, func(v DashboardSourceEntity) *DashboardSourceEntitySourceTemplate { return v.SourceTemplate })
	return pulumix.GPtrOutput[DashboardSourceEntitySourceTemplate, DashboardSourceEntitySourceTemplateOutput]{OutputState: value.OutputState}
}

type DashboardSourceEntitySourceTemplate struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn string `pulumi:"arn"`
	// List of dataset references. See data_set_references.
	DataSetReferences []DashboardSourceEntitySourceTemplateDataSetReference `pulumi:"dataSetReferences"`
}

type DashboardSourceEntitySourceTemplateArgs struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// List of dataset references. See data_set_references.
	DataSetReferences pulumix.Input[[]*DashboardSourceEntitySourceTemplateDataSetReferenceArgs] `pulumi:"dataSetReferences"`
}

func (DashboardSourceEntitySourceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntitySourceTemplate)(nil)).Elem()
}

func (i DashboardSourceEntitySourceTemplateArgs) ToDashboardSourceEntitySourceTemplateOutput() DashboardSourceEntitySourceTemplateOutput {
	return i.ToDashboardSourceEntitySourceTemplateOutputWithContext(context.Background())
}

func (i DashboardSourceEntitySourceTemplateArgs) ToDashboardSourceEntitySourceTemplateOutputWithContext(ctx context.Context) DashboardSourceEntitySourceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntitySourceTemplateOutput)
}

func (i *DashboardSourceEntitySourceTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardSourceEntitySourceTemplateArgs] {
	return pulumix.Val(i)
}

type DashboardSourceEntitySourceTemplateOutput struct{ *pulumi.OutputState }

func (DashboardSourceEntitySourceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntitySourceTemplate)(nil)).Elem()
}

func (o DashboardSourceEntitySourceTemplateOutput) ToDashboardSourceEntitySourceTemplateOutput() DashboardSourceEntitySourceTemplateOutput {
	return o
}

func (o DashboardSourceEntitySourceTemplateOutput) ToDashboardSourceEntitySourceTemplateOutputWithContext(ctx context.Context) DashboardSourceEntitySourceTemplateOutput {
	return o
}

func (o DashboardSourceEntitySourceTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardSourceEntitySourceTemplate] {
	return pulumix.Output[DashboardSourceEntitySourceTemplate]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the resource.
func (o DashboardSourceEntitySourceTemplateOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[DashboardSourceEntitySourceTemplate](o, func(v DashboardSourceEntitySourceTemplate) string { return v.Arn })
}

// List of dataset references. See data_set_references.
func (o DashboardSourceEntitySourceTemplateOutput) DataSetReferences() pulumix.GArrayOutput[DashboardSourceEntitySourceTemplateDataSetReference, DashboardSourceEntitySourceTemplateDataSetReferenceOutput] {
	value := pulumix.Apply[DashboardSourceEntitySourceTemplate](o, func(v DashboardSourceEntitySourceTemplate) []DashboardSourceEntitySourceTemplateDataSetReference {
		return v.DataSetReferences
	})
	return pulumix.GArrayOutput[DashboardSourceEntitySourceTemplateDataSetReference, DashboardSourceEntitySourceTemplateDataSetReferenceOutput]{OutputState: value.OutputState}
}

type DashboardSourceEntitySourceTemplateDataSetReference struct {
	// Dataset Amazon Resource Name (ARN).
	DataSetArn string `pulumi:"dataSetArn"`
	// Dataset placeholder.
	DataSetPlaceholder string `pulumi:"dataSetPlaceholder"`
}

type DashboardSourceEntitySourceTemplateDataSetReferenceArgs struct {
	// Dataset Amazon Resource Name (ARN).
	DataSetArn pulumix.Input[string] `pulumi:"dataSetArn"`
	// Dataset placeholder.
	DataSetPlaceholder pulumix.Input[string] `pulumi:"dataSetPlaceholder"`
}

func (DashboardSourceEntitySourceTemplateDataSetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntitySourceTemplateDataSetReference)(nil)).Elem()
}

func (i DashboardSourceEntitySourceTemplateDataSetReferenceArgs) ToDashboardSourceEntitySourceTemplateDataSetReferenceOutput() DashboardSourceEntitySourceTemplateDataSetReferenceOutput {
	return i.ToDashboardSourceEntitySourceTemplateDataSetReferenceOutputWithContext(context.Background())
}

func (i DashboardSourceEntitySourceTemplateDataSetReferenceArgs) ToDashboardSourceEntitySourceTemplateDataSetReferenceOutputWithContext(ctx context.Context) DashboardSourceEntitySourceTemplateDataSetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntitySourceTemplateDataSetReferenceOutput)
}

func (i *DashboardSourceEntitySourceTemplateDataSetReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardSourceEntitySourceTemplateDataSetReferenceArgs] {
	return pulumix.Val(i)
}

type DashboardSourceEntitySourceTemplateDataSetReferenceOutput struct{ *pulumi.OutputState }

func (DashboardSourceEntitySourceTemplateDataSetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntitySourceTemplateDataSetReference)(nil)).Elem()
}

func (o DashboardSourceEntitySourceTemplateDataSetReferenceOutput) ToDashboardSourceEntitySourceTemplateDataSetReferenceOutput() DashboardSourceEntitySourceTemplateDataSetReferenceOutput {
	return o
}

func (o DashboardSourceEntitySourceTemplateDataSetReferenceOutput) ToDashboardSourceEntitySourceTemplateDataSetReferenceOutputWithContext(ctx context.Context) DashboardSourceEntitySourceTemplateDataSetReferenceOutput {
	return o
}

func (o DashboardSourceEntitySourceTemplateDataSetReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardSourceEntitySourceTemplateDataSetReference] {
	return pulumix.Output[DashboardSourceEntitySourceTemplateDataSetReference]{
		OutputState: o.OutputState,
	}
}

// Dataset Amazon Resource Name (ARN).
func (o DashboardSourceEntitySourceTemplateDataSetReferenceOutput) DataSetArn() pulumix.Output[string] {
	return pulumix.Apply[DashboardSourceEntitySourceTemplateDataSetReference](o, func(v DashboardSourceEntitySourceTemplateDataSetReference) string { return v.DataSetArn })
}

// Dataset placeholder.
func (o DashboardSourceEntitySourceTemplateDataSetReferenceOutput) DataSetPlaceholder() pulumix.Output[string] {
	return pulumix.Apply[DashboardSourceEntitySourceTemplateDataSetReference](o, func(v DashboardSourceEntitySourceTemplateDataSetReference) string { return v.DataSetPlaceholder })
}

type DataSetColumnGroup struct {
	// Geospatial column group that denotes a hierarchy. See geo_spatial_column_group.
	GeoSpatialColumnGroup *DataSetColumnGroupGeoSpatialColumnGroup `pulumi:"geoSpatialColumnGroup"`
}

type DataSetColumnGroupArgs struct {
	// Geospatial column group that denotes a hierarchy. See geo_spatial_column_group.
	GeoSpatialColumnGroup pulumix.Input[*DataSetColumnGroupGeoSpatialColumnGroupArgs] `pulumi:"geoSpatialColumnGroup"`
}

func (DataSetColumnGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnGroup)(nil)).Elem()
}

func (i DataSetColumnGroupArgs) ToDataSetColumnGroupOutput() DataSetColumnGroupOutput {
	return i.ToDataSetColumnGroupOutputWithContext(context.Background())
}

func (i DataSetColumnGroupArgs) ToDataSetColumnGroupOutputWithContext(ctx context.Context) DataSetColumnGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnGroupOutput)
}

func (i *DataSetColumnGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetColumnGroupArgs] {
	return pulumix.Val(i)
}

type DataSetColumnGroupOutput struct{ *pulumi.OutputState }

func (DataSetColumnGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnGroup)(nil)).Elem()
}

func (o DataSetColumnGroupOutput) ToDataSetColumnGroupOutput() DataSetColumnGroupOutput {
	return o
}

func (o DataSetColumnGroupOutput) ToDataSetColumnGroupOutputWithContext(ctx context.Context) DataSetColumnGroupOutput {
	return o
}

func (o DataSetColumnGroupOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetColumnGroup] {
	return pulumix.Output[DataSetColumnGroup]{
		OutputState: o.OutputState,
	}
}

// Geospatial column group that denotes a hierarchy. See geo_spatial_column_group.
func (o DataSetColumnGroupOutput) GeoSpatialColumnGroup() pulumix.GPtrOutput[DataSetColumnGroupGeoSpatialColumnGroup, DataSetColumnGroupGeoSpatialColumnGroupOutput] {
	value := pulumix.Apply[DataSetColumnGroup](o, func(v DataSetColumnGroup) *DataSetColumnGroupGeoSpatialColumnGroup { return v.GeoSpatialColumnGroup })
	return pulumix.GPtrOutput[DataSetColumnGroupGeoSpatialColumnGroup, DataSetColumnGroupGeoSpatialColumnGroupOutput]{OutputState: value.OutputState}
}

type DataSetColumnGroupGeoSpatialColumnGroup struct {
	// Columns in this hierarchy.
	Columns []string `pulumi:"columns"`
	// Country code. Valid values are `US`.
	CountryCode string `pulumi:"countryCode"`
	// A display name for the hierarchy.
	Name string `pulumi:"name"`
}

type DataSetColumnGroupGeoSpatialColumnGroupArgs struct {
	// Columns in this hierarchy.
	Columns pulumix.Input[[]string] `pulumi:"columns"`
	// Country code. Valid values are `US`.
	CountryCode pulumix.Input[string] `pulumi:"countryCode"`
	// A display name for the hierarchy.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (DataSetColumnGroupGeoSpatialColumnGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnGroupGeoSpatialColumnGroup)(nil)).Elem()
}

func (i DataSetColumnGroupGeoSpatialColumnGroupArgs) ToDataSetColumnGroupGeoSpatialColumnGroupOutput() DataSetColumnGroupGeoSpatialColumnGroupOutput {
	return i.ToDataSetColumnGroupGeoSpatialColumnGroupOutputWithContext(context.Background())
}

func (i DataSetColumnGroupGeoSpatialColumnGroupArgs) ToDataSetColumnGroupGeoSpatialColumnGroupOutputWithContext(ctx context.Context) DataSetColumnGroupGeoSpatialColumnGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnGroupGeoSpatialColumnGroupOutput)
}

func (i *DataSetColumnGroupGeoSpatialColumnGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetColumnGroupGeoSpatialColumnGroupArgs] {
	return pulumix.Val(i)
}

type DataSetColumnGroupGeoSpatialColumnGroupOutput struct{ *pulumi.OutputState }

func (DataSetColumnGroupGeoSpatialColumnGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnGroupGeoSpatialColumnGroup)(nil)).Elem()
}

func (o DataSetColumnGroupGeoSpatialColumnGroupOutput) ToDataSetColumnGroupGeoSpatialColumnGroupOutput() DataSetColumnGroupGeoSpatialColumnGroupOutput {
	return o
}

func (o DataSetColumnGroupGeoSpatialColumnGroupOutput) ToDataSetColumnGroupGeoSpatialColumnGroupOutputWithContext(ctx context.Context) DataSetColumnGroupGeoSpatialColumnGroupOutput {
	return o
}

func (o DataSetColumnGroupGeoSpatialColumnGroupOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetColumnGroupGeoSpatialColumnGroup] {
	return pulumix.Output[DataSetColumnGroupGeoSpatialColumnGroup]{
		OutputState: o.OutputState,
	}
}

// Columns in this hierarchy.
func (o DataSetColumnGroupGeoSpatialColumnGroupOutput) Columns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DataSetColumnGroupGeoSpatialColumnGroup](o, func(v DataSetColumnGroupGeoSpatialColumnGroup) []string { return v.Columns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Country code. Valid values are `US`.
func (o DataSetColumnGroupGeoSpatialColumnGroupOutput) CountryCode() pulumix.Output[string] {
	return pulumix.Apply[DataSetColumnGroupGeoSpatialColumnGroup](o, func(v DataSetColumnGroupGeoSpatialColumnGroup) string { return v.CountryCode })
}

// A display name for the hierarchy.
func (o DataSetColumnGroupGeoSpatialColumnGroupOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[DataSetColumnGroupGeoSpatialColumnGroup](o, func(v DataSetColumnGroupGeoSpatialColumnGroup) string { return v.Name })
}

type DataSetColumnLevelPermissionRule struct {
	// An array of column names.
	ColumnNames []string `pulumi:"columnNames"`
	// An array of ARNs for Amazon QuickSight users or groups.
	Principals []string `pulumi:"principals"`
}

type DataSetColumnLevelPermissionRuleArgs struct {
	// An array of column names.
	ColumnNames pulumix.Input[[]string] `pulumi:"columnNames"`
	// An array of ARNs for Amazon QuickSight users or groups.
	Principals pulumix.Input[[]string] `pulumi:"principals"`
}

func (DataSetColumnLevelPermissionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (i DataSetColumnLevelPermissionRuleArgs) ToDataSetColumnLevelPermissionRuleOutput() DataSetColumnLevelPermissionRuleOutput {
	return i.ToDataSetColumnLevelPermissionRuleOutputWithContext(context.Background())
}

func (i DataSetColumnLevelPermissionRuleArgs) ToDataSetColumnLevelPermissionRuleOutputWithContext(ctx context.Context) DataSetColumnLevelPermissionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnLevelPermissionRuleOutput)
}

func (i *DataSetColumnLevelPermissionRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetColumnLevelPermissionRuleArgs] {
	return pulumix.Val(i)
}

type DataSetColumnLevelPermissionRuleOutput struct{ *pulumi.OutputState }

func (DataSetColumnLevelPermissionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (o DataSetColumnLevelPermissionRuleOutput) ToDataSetColumnLevelPermissionRuleOutput() DataSetColumnLevelPermissionRuleOutput {
	return o
}

func (o DataSetColumnLevelPermissionRuleOutput) ToDataSetColumnLevelPermissionRuleOutputWithContext(ctx context.Context) DataSetColumnLevelPermissionRuleOutput {
	return o
}

func (o DataSetColumnLevelPermissionRuleOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetColumnLevelPermissionRule] {
	return pulumix.Output[DataSetColumnLevelPermissionRule]{
		OutputState: o.OutputState,
	}
}

// An array of column names.
func (o DataSetColumnLevelPermissionRuleOutput) ColumnNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DataSetColumnLevelPermissionRule](o, func(v DataSetColumnLevelPermissionRule) []string { return v.ColumnNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// An array of ARNs for Amazon QuickSight users or groups.
func (o DataSetColumnLevelPermissionRuleOutput) Principals() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DataSetColumnLevelPermissionRule](o, func(v DataSetColumnLevelPermissionRule) []string { return v.Principals })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type DataSetDataSetUsageConfiguration struct {
	// Controls whether a child dataset of a direct query can use this dataset as a source.
	DisableUseAsDirectQuerySource *bool `pulumi:"disableUseAsDirectQuerySource"`
	// Controls whether a child dataset that's stored in QuickSight can use this dataset as a source.
	DisableUseAsImportedSource *bool `pulumi:"disableUseAsImportedSource"`
}

type DataSetDataSetUsageConfigurationArgs struct {
	// Controls whether a child dataset of a direct query can use this dataset as a source.
	DisableUseAsDirectQuerySource pulumix.Input[*bool] `pulumi:"disableUseAsDirectQuerySource"`
	// Controls whether a child dataset that's stored in QuickSight can use this dataset as a source.
	DisableUseAsImportedSource pulumix.Input[*bool] `pulumi:"disableUseAsImportedSource"`
}

func (DataSetDataSetUsageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetDataSetUsageConfiguration)(nil)).Elem()
}

func (i DataSetDataSetUsageConfigurationArgs) ToDataSetDataSetUsageConfigurationOutput() DataSetDataSetUsageConfigurationOutput {
	return i.ToDataSetDataSetUsageConfigurationOutputWithContext(context.Background())
}

func (i DataSetDataSetUsageConfigurationArgs) ToDataSetDataSetUsageConfigurationOutputWithContext(ctx context.Context) DataSetDataSetUsageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDataSetUsageConfigurationOutput)
}

func (i *DataSetDataSetUsageConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetDataSetUsageConfigurationArgs] {
	return pulumix.Val(i)
}

type DataSetDataSetUsageConfigurationOutput struct{ *pulumi.OutputState }

func (DataSetDataSetUsageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetDataSetUsageConfiguration)(nil)).Elem()
}

func (o DataSetDataSetUsageConfigurationOutput) ToDataSetDataSetUsageConfigurationOutput() DataSetDataSetUsageConfigurationOutput {
	return o
}

func (o DataSetDataSetUsageConfigurationOutput) ToDataSetDataSetUsageConfigurationOutputWithContext(ctx context.Context) DataSetDataSetUsageConfigurationOutput {
	return o
}

func (o DataSetDataSetUsageConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetDataSetUsageConfiguration] {
	return pulumix.Output[DataSetDataSetUsageConfiguration]{
		OutputState: o.OutputState,
	}
}

// Controls whether a child dataset of a direct query can use this dataset as a source.
func (o DataSetDataSetUsageConfigurationOutput) DisableUseAsDirectQuerySource() pulumix.Output[*bool] {
	return pulumix.Apply[DataSetDataSetUsageConfiguration](o, func(v DataSetDataSetUsageConfiguration) *bool { return v.DisableUseAsDirectQuerySource })
}

// Controls whether a child dataset that's stored in QuickSight can use this dataset as a source.
func (o DataSetDataSetUsageConfigurationOutput) DisableUseAsImportedSource() pulumix.Output[*bool] {
	return pulumix.Apply[DataSetDataSetUsageConfiguration](o, func(v DataSetDataSetUsageConfiguration) *bool { return v.DisableUseAsImportedSource })
}

type DataSetFieldFolder struct {
	// An array of column names to add to the folder. A column can only be in one folder.
	Columns []string `pulumi:"columns"`
	// Field folder description.
	Description *string `pulumi:"description"`
	// Key of the field folder map.
	FieldFoldersId string `pulumi:"fieldFoldersId"`
}

type DataSetFieldFolderArgs struct {
	// An array of column names to add to the folder. A column can only be in one folder.
	Columns pulumix.Input[[]string] `pulumi:"columns"`
	// Field folder description.
	Description pulumix.Input[*string] `pulumi:"description"`
	// Key of the field folder map.
	FieldFoldersId pulumix.Input[string] `pulumi:"fieldFoldersId"`
}

func (DataSetFieldFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetFieldFolder)(nil)).Elem()
}

func (i DataSetFieldFolderArgs) ToDataSetFieldFolderOutput() DataSetFieldFolderOutput {
	return i.ToDataSetFieldFolderOutputWithContext(context.Background())
}

func (i DataSetFieldFolderArgs) ToDataSetFieldFolderOutputWithContext(ctx context.Context) DataSetFieldFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetFieldFolderOutput)
}

func (i *DataSetFieldFolderArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetFieldFolderArgs] {
	return pulumix.Val(i)
}

type DataSetFieldFolderOutput struct{ *pulumi.OutputState }

func (DataSetFieldFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetFieldFolder)(nil)).Elem()
}

func (o DataSetFieldFolderOutput) ToDataSetFieldFolderOutput() DataSetFieldFolderOutput {
	return o
}

func (o DataSetFieldFolderOutput) ToDataSetFieldFolderOutputWithContext(ctx context.Context) DataSetFieldFolderOutput {
	return o
}

func (o DataSetFieldFolderOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetFieldFolder] {
	return pulumix.Output[DataSetFieldFolder]{
		OutputState: o.OutputState,
	}
}

// An array of column names to add to the folder. A column can only be in one folder.
func (o DataSetFieldFolderOutput) Columns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DataSetFieldFolder](o, func(v DataSetFieldFolder) []string { return v.Columns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Field folder description.
func (o DataSetFieldFolderOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[DataSetFieldFolder](o, func(v DataSetFieldFolder) *string { return v.Description })
}

// Key of the field folder map.
func (o DataSetFieldFolderOutput) FieldFoldersId() pulumix.Output[string] {
	return pulumix.Apply[DataSetFieldFolder](o, func(v DataSetFieldFolder) string { return v.FieldFoldersId })
}

type DataSetLogicalTableMap struct {
	// A display name for the logical table.
	Alias string `pulumi:"alias"`
	// Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
	DataTransforms []DataSetLogicalTableMapDataTransform `pulumi:"dataTransforms"`
	// Key of the logical table map.
	LogicalTableMapId string `pulumi:"logicalTableMapId"`
	// Source of this logical table. See source.
	Source DataSetLogicalTableMapSource `pulumi:"source"`
}

type DataSetLogicalTableMapArgs struct {
	// A display name for the logical table.
	Alias pulumix.Input[string] `pulumi:"alias"`
	// Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
	DataTransforms pulumix.Input[[]*DataSetLogicalTableMapDataTransformArgs] `pulumi:"dataTransforms"`
	// Key of the logical table map.
	LogicalTableMapId pulumix.Input[string] `pulumi:"logicalTableMapId"`
	// Source of this logical table. See source.
	Source pulumix.Input[*DataSetLogicalTableMapSourceArgs] `pulumi:"source"`
}

func (DataSetLogicalTableMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMap)(nil)).Elem()
}

func (i DataSetLogicalTableMapArgs) ToDataSetLogicalTableMapOutput() DataSetLogicalTableMapOutput {
	return i.ToDataSetLogicalTableMapOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapArgs) ToDataSetLogicalTableMapOutputWithContext(ctx context.Context) DataSetLogicalTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapOutput)
}

func (i *DataSetLogicalTableMapArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMap)(nil)).Elem()
}

func (o DataSetLogicalTableMapOutput) ToDataSetLogicalTableMapOutput() DataSetLogicalTableMapOutput {
	return o
}

func (o DataSetLogicalTableMapOutput) ToDataSetLogicalTableMapOutputWithContext(ctx context.Context) DataSetLogicalTableMapOutput {
	return o
}

func (o DataSetLogicalTableMapOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMap] {
	return pulumix.Output[DataSetLogicalTableMap]{
		OutputState: o.OutputState,
	}
}

// A display name for the logical table.
func (o DataSetLogicalTableMapOutput) Alias() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMap](o, func(v DataSetLogicalTableMap) string { return v.Alias })
}

// Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
func (o DataSetLogicalTableMapOutput) DataTransforms() pulumix.GArrayOutput[DataSetLogicalTableMapDataTransform, DataSetLogicalTableMapDataTransformOutput] {
	value := pulumix.Apply[DataSetLogicalTableMap](o, func(v DataSetLogicalTableMap) []DataSetLogicalTableMapDataTransform { return v.DataTransforms })
	return pulumix.GArrayOutput[DataSetLogicalTableMapDataTransform, DataSetLogicalTableMapDataTransformOutput]{OutputState: value.OutputState}
}

// Key of the logical table map.
func (o DataSetLogicalTableMapOutput) LogicalTableMapId() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMap](o, func(v DataSetLogicalTableMap) string { return v.LogicalTableMapId })
}

// Source of this logical table. See source.
func (o DataSetLogicalTableMapOutput) Source() pulumix.GPtrOutput[DataSetLogicalTableMapSource, DataSetLogicalTableMapSourceOutput] {
	value := pulumix.Apply[DataSetLogicalTableMap](o, func(v DataSetLogicalTableMap) DataSetLogicalTableMapSource { return v.Source })
	return pulumix.GPtrOutput[DataSetLogicalTableMapSource, DataSetLogicalTableMapSourceOutput]{OutputState: value.OutputState}
}

type DataSetLogicalTableMapDataTransform struct {
	// A transform operation that casts a column to a different type. See cast_column_type_operation.
	CastColumnTypeOperation *DataSetLogicalTableMapDataTransformCastColumnTypeOperation `pulumi:"castColumnTypeOperation"`
	// An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See create_columns_operation.
	CreateColumnsOperation *DataSetLogicalTableMapDataTransformCreateColumnsOperation `pulumi:"createColumnsOperation"`
	// An operation that filters rows based on some condition. See filter_operation.
	FilterOperation *DataSetLogicalTableMapDataTransformFilterOperation `pulumi:"filterOperation"`
	// An operation that projects columns. Operations that come after a projection can only refer to projected columns. See project_operation.
	ProjectOperation *DataSetLogicalTableMapDataTransformProjectOperation `pulumi:"projectOperation"`
	// An operation that renames a column. See rename_column_operation.
	RenameColumnOperation *DataSetLogicalTableMapDataTransformRenameColumnOperation `pulumi:"renameColumnOperation"`
	// An operation that tags a column with additional information. See tag_column_operation.
	TagColumnOperation *DataSetLogicalTableMapDataTransformTagColumnOperation `pulumi:"tagColumnOperation"`
	// A transform operation that removes tags associated with a column. See untag_column_operation.
	UntagColumnOperation *DataSetLogicalTableMapDataTransformUntagColumnOperation `pulumi:"untagColumnOperation"`
}

type DataSetLogicalTableMapDataTransformArgs struct {
	// A transform operation that casts a column to a different type. See cast_column_type_operation.
	CastColumnTypeOperation pulumix.Input[*DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs] `pulumi:"castColumnTypeOperation"`
	// An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See create_columns_operation.
	CreateColumnsOperation pulumix.Input[*DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs] `pulumi:"createColumnsOperation"`
	// An operation that filters rows based on some condition. See filter_operation.
	FilterOperation pulumix.Input[*DataSetLogicalTableMapDataTransformFilterOperationArgs] `pulumi:"filterOperation"`
	// An operation that projects columns. Operations that come after a projection can only refer to projected columns. See project_operation.
	ProjectOperation pulumix.Input[*DataSetLogicalTableMapDataTransformProjectOperationArgs] `pulumi:"projectOperation"`
	// An operation that renames a column. See rename_column_operation.
	RenameColumnOperation pulumix.Input[*DataSetLogicalTableMapDataTransformRenameColumnOperationArgs] `pulumi:"renameColumnOperation"`
	// An operation that tags a column with additional information. See tag_column_operation.
	TagColumnOperation pulumix.Input[*DataSetLogicalTableMapDataTransformTagColumnOperationArgs] `pulumi:"tagColumnOperation"`
	// A transform operation that removes tags associated with a column. See untag_column_operation.
	UntagColumnOperation pulumix.Input[*DataSetLogicalTableMapDataTransformUntagColumnOperationArgs] `pulumi:"untagColumnOperation"`
}

func (DataSetLogicalTableMapDataTransformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransform)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformArgs) ToDataSetLogicalTableMapDataTransformOutput() DataSetLogicalTableMapDataTransformOutput {
	return i.ToDataSetLogicalTableMapDataTransformOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformArgs) ToDataSetLogicalTableMapDataTransformOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformOutput)
}

func (i *DataSetLogicalTableMapDataTransformArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapDataTransformArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapDataTransformOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransform)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformOutput) ToDataSetLogicalTableMapDataTransformOutput() DataSetLogicalTableMapDataTransformOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformOutput) ToDataSetLogicalTableMapDataTransformOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMapDataTransform] {
	return pulumix.Output[DataSetLogicalTableMapDataTransform]{
		OutputState: o.OutputState,
	}
}

// A transform operation that casts a column to a different type. See cast_column_type_operation.
func (o DataSetLogicalTableMapDataTransformOutput) CastColumnTypeOperation() pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformCastColumnTypeOperation, DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput] {
	value := pulumix.Apply[DataSetLogicalTableMapDataTransform](o, func(v DataSetLogicalTableMapDataTransform) *DataSetLogicalTableMapDataTransformCastColumnTypeOperation {
		return v.CastColumnTypeOperation
	})
	return pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformCastColumnTypeOperation, DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput]{OutputState: value.OutputState}
}

// An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See create_columns_operation.
func (o DataSetLogicalTableMapDataTransformOutput) CreateColumnsOperation() pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformCreateColumnsOperation, DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput] {
	value := pulumix.Apply[DataSetLogicalTableMapDataTransform](o, func(v DataSetLogicalTableMapDataTransform) *DataSetLogicalTableMapDataTransformCreateColumnsOperation {
		return v.CreateColumnsOperation
	})
	return pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformCreateColumnsOperation, DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput]{OutputState: value.OutputState}
}

// An operation that filters rows based on some condition. See filter_operation.
func (o DataSetLogicalTableMapDataTransformOutput) FilterOperation() pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformFilterOperation, DataSetLogicalTableMapDataTransformFilterOperationOutput] {
	value := pulumix.Apply[DataSetLogicalTableMapDataTransform](o, func(v DataSetLogicalTableMapDataTransform) *DataSetLogicalTableMapDataTransformFilterOperation {
		return v.FilterOperation
	})
	return pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformFilterOperation, DataSetLogicalTableMapDataTransformFilterOperationOutput]{OutputState: value.OutputState}
}

// An operation that projects columns. Operations that come after a projection can only refer to projected columns. See project_operation.
func (o DataSetLogicalTableMapDataTransformOutput) ProjectOperation() pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformProjectOperation, DataSetLogicalTableMapDataTransformProjectOperationOutput] {
	value := pulumix.Apply[DataSetLogicalTableMapDataTransform](o, func(v DataSetLogicalTableMapDataTransform) *DataSetLogicalTableMapDataTransformProjectOperation {
		return v.ProjectOperation
	})
	return pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformProjectOperation, DataSetLogicalTableMapDataTransformProjectOperationOutput]{OutputState: value.OutputState}
}

// An operation that renames a column. See rename_column_operation.
func (o DataSetLogicalTableMapDataTransformOutput) RenameColumnOperation() pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformRenameColumnOperation, DataSetLogicalTableMapDataTransformRenameColumnOperationOutput] {
	value := pulumix.Apply[DataSetLogicalTableMapDataTransform](o, func(v DataSetLogicalTableMapDataTransform) *DataSetLogicalTableMapDataTransformRenameColumnOperation {
		return v.RenameColumnOperation
	})
	return pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformRenameColumnOperation, DataSetLogicalTableMapDataTransformRenameColumnOperationOutput]{OutputState: value.OutputState}
}

// An operation that tags a column with additional information. See tag_column_operation.
func (o DataSetLogicalTableMapDataTransformOutput) TagColumnOperation() pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformTagColumnOperation, DataSetLogicalTableMapDataTransformTagColumnOperationOutput] {
	value := pulumix.Apply[DataSetLogicalTableMapDataTransform](o, func(v DataSetLogicalTableMapDataTransform) *DataSetLogicalTableMapDataTransformTagColumnOperation {
		return v.TagColumnOperation
	})
	return pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformTagColumnOperation, DataSetLogicalTableMapDataTransformTagColumnOperationOutput]{OutputState: value.OutputState}
}

// A transform operation that removes tags associated with a column. See untag_column_operation.
func (o DataSetLogicalTableMapDataTransformOutput) UntagColumnOperation() pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformUntagColumnOperation, DataSetLogicalTableMapDataTransformUntagColumnOperationOutput] {
	value := pulumix.Apply[DataSetLogicalTableMapDataTransform](o, func(v DataSetLogicalTableMapDataTransform) *DataSetLogicalTableMapDataTransformUntagColumnOperation {
		return v.UntagColumnOperation
	})
	return pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformUntagColumnOperation, DataSetLogicalTableMapDataTransformUntagColumnOperationOutput]{OutputState: value.OutputState}
}

type DataSetLogicalTableMapDataTransformCastColumnTypeOperation struct {
	// Column name.
	ColumnName string `pulumi:"columnName"`
	// When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.
	Format *string `pulumi:"format"`
	// New column data type. Valid values are `STRING`, `INTEGER`, `DECIMAL`, `DATETIME`.
	NewColumnType string `pulumi:"newColumnType"`
}

type DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs struct {
	// Column name.
	ColumnName pulumix.Input[string] `pulumi:"columnName"`
	// When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.
	Format pulumix.Input[*string] `pulumi:"format"`
	// New column data type. Valid values are `STRING`, `INTEGER`, `DECIMAL`, `DATETIME`.
	NewColumnType pulumix.Input[string] `pulumi:"newColumnType"`
}

func (DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformCastColumnTypeOperation)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput() DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return i.ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput)
}

func (i *DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformCastColumnTypeOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput() DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMapDataTransformCastColumnTypeOperation] {
	return pulumix.Output[DataSetLogicalTableMapDataTransformCastColumnTypeOperation]{
		OutputState: o.OutputState,
	}
}

// Column name.
func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ColumnName() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMapDataTransformCastColumnTypeOperation](o, func(v DataSetLogicalTableMapDataTransformCastColumnTypeOperation) string { return v.ColumnName })
}

// When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.
func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) Format() pulumix.Output[*string] {
	return pulumix.Apply[DataSetLogicalTableMapDataTransformCastColumnTypeOperation](o, func(v DataSetLogicalTableMapDataTransformCastColumnTypeOperation) *string { return v.Format })
}

// New column data type. Valid values are `STRING`, `INTEGER`, `DECIMAL`, `DATETIME`.
func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) NewColumnType() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMapDataTransformCastColumnTypeOperation](o, func(v DataSetLogicalTableMapDataTransformCastColumnTypeOperation) string { return v.NewColumnType })
}

type DataSetLogicalTableMapDataTransformCreateColumnsOperation struct {
	// Calculated columns to create. See columns.
	Columns []DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn `pulumi:"columns"`
}

type DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs struct {
	// Calculated columns to create. See columns.
	Columns pulumix.Input[[]*DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs] `pulumi:"columns"`
}

func (DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformCreateColumnsOperation)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return i.ToDataSetLogicalTableMapDataTransformCreateColumnsOperationOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput)
}

func (i *DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformCreateColumnsOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMapDataTransformCreateColumnsOperation] {
	return pulumix.Output[DataSetLogicalTableMapDataTransformCreateColumnsOperation]{
		OutputState: o.OutputState,
	}
}

// Calculated columns to create. See columns.
func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) Columns() pulumix.GArrayOutput[DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn, DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput] {
	value := pulumix.Apply[DataSetLogicalTableMapDataTransformCreateColumnsOperation](o, func(v DataSetLogicalTableMapDataTransformCreateColumnsOperation) []DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn {
		return v.Columns
	})
	return pulumix.GArrayOutput[DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn, DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput]{OutputState: value.OutputState}
}

type DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn struct {
	// A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
	ColumnId string `pulumi:"columnId"`
	// Column name.
	ColumnName string `pulumi:"columnName"`
	// An expression that defines the calculated column.
	Expression string `pulumi:"expression"`
}

type DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs struct {
	// A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
	ColumnId pulumix.Input[string] `pulumi:"columnId"`
	// Column name.
	ColumnName pulumix.Input[string] `pulumi:"columnName"`
	// An expression that defines the calculated column.
	Expression pulumix.Input[string] `pulumi:"expression"`
}

func (DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return i.ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput)
}

func (i *DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn] {
	return pulumix.Output[DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn]{
		OutputState: o.OutputState,
	}
}

// A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ColumnId() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn](o, func(v DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn) string { return v.ColumnId })
}

// Column name.
func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ColumnName() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn](o, func(v DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn) string { return v.ColumnName })
}

// An expression that defines the calculated column.
func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) Expression() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn](o, func(v DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn) string { return v.Expression })
}

type DataSetLogicalTableMapDataTransformFilterOperation struct {
	// An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
	ConditionExpression string `pulumi:"conditionExpression"`
}

type DataSetLogicalTableMapDataTransformFilterOperationArgs struct {
	// An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
	ConditionExpression pulumix.Input[string] `pulumi:"conditionExpression"`
}

func (DataSetLogicalTableMapDataTransformFilterOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformFilterOperation)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformFilterOperationArgs) ToDataSetLogicalTableMapDataTransformFilterOperationOutput() DataSetLogicalTableMapDataTransformFilterOperationOutput {
	return i.ToDataSetLogicalTableMapDataTransformFilterOperationOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformFilterOperationArgs) ToDataSetLogicalTableMapDataTransformFilterOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformFilterOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformFilterOperationOutput)
}

func (i *DataSetLogicalTableMapDataTransformFilterOperationArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapDataTransformFilterOperationArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapDataTransformFilterOperationOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformFilterOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformFilterOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformFilterOperationOutput) ToDataSetLogicalTableMapDataTransformFilterOperationOutput() DataSetLogicalTableMapDataTransformFilterOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformFilterOperationOutput) ToDataSetLogicalTableMapDataTransformFilterOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformFilterOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformFilterOperationOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMapDataTransformFilterOperation] {
	return pulumix.Output[DataSetLogicalTableMapDataTransformFilterOperation]{
		OutputState: o.OutputState,
	}
}

// An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
func (o DataSetLogicalTableMapDataTransformFilterOperationOutput) ConditionExpression() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMapDataTransformFilterOperation](o, func(v DataSetLogicalTableMapDataTransformFilterOperation) string { return v.ConditionExpression })
}

type DataSetLogicalTableMapDataTransformProjectOperation struct {
	// Projected columns.
	ProjectedColumns []string `pulumi:"projectedColumns"`
}

type DataSetLogicalTableMapDataTransformProjectOperationArgs struct {
	// Projected columns.
	ProjectedColumns pulumix.Input[[]string] `pulumi:"projectedColumns"`
}

func (DataSetLogicalTableMapDataTransformProjectOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformProjectOperation)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformProjectOperationArgs) ToDataSetLogicalTableMapDataTransformProjectOperationOutput() DataSetLogicalTableMapDataTransformProjectOperationOutput {
	return i.ToDataSetLogicalTableMapDataTransformProjectOperationOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformProjectOperationArgs) ToDataSetLogicalTableMapDataTransformProjectOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformProjectOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformProjectOperationOutput)
}

func (i *DataSetLogicalTableMapDataTransformProjectOperationArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapDataTransformProjectOperationArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapDataTransformProjectOperationOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformProjectOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformProjectOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformProjectOperationOutput) ToDataSetLogicalTableMapDataTransformProjectOperationOutput() DataSetLogicalTableMapDataTransformProjectOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformProjectOperationOutput) ToDataSetLogicalTableMapDataTransformProjectOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformProjectOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformProjectOperationOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMapDataTransformProjectOperation] {
	return pulumix.Output[DataSetLogicalTableMapDataTransformProjectOperation]{
		OutputState: o.OutputState,
	}
}

// Projected columns.
func (o DataSetLogicalTableMapDataTransformProjectOperationOutput) ProjectedColumns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DataSetLogicalTableMapDataTransformProjectOperation](o, func(v DataSetLogicalTableMapDataTransformProjectOperation) []string { return v.ProjectedColumns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type DataSetLogicalTableMapDataTransformRenameColumnOperation struct {
	// Column to be renamed.
	ColumnName string `pulumi:"columnName"`
	// New name for the column.
	NewColumnName string `pulumi:"newColumnName"`
}

type DataSetLogicalTableMapDataTransformRenameColumnOperationArgs struct {
	// Column to be renamed.
	ColumnName pulumix.Input[string] `pulumi:"columnName"`
	// New name for the column.
	NewColumnName pulumix.Input[string] `pulumi:"newColumnName"`
}

func (DataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformRenameColumnOperation)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ToDataSetLogicalTableMapDataTransformRenameColumnOperationOutput() DataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return i.ToDataSetLogicalTableMapDataTransformRenameColumnOperationOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ToDataSetLogicalTableMapDataTransformRenameColumnOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformRenameColumnOperationOutput)
}

func (i *DataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapDataTransformRenameColumnOperationArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapDataTransformRenameColumnOperationOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformRenameColumnOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ToDataSetLogicalTableMapDataTransformRenameColumnOperationOutput() DataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ToDataSetLogicalTableMapDataTransformRenameColumnOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMapDataTransformRenameColumnOperation] {
	return pulumix.Output[DataSetLogicalTableMapDataTransformRenameColumnOperation]{
		OutputState: o.OutputState,
	}
}

// Column to be renamed.
func (o DataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ColumnName() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMapDataTransformRenameColumnOperation](o, func(v DataSetLogicalTableMapDataTransformRenameColumnOperation) string { return v.ColumnName })
}

// New name for the column.
func (o DataSetLogicalTableMapDataTransformRenameColumnOperationOutput) NewColumnName() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMapDataTransformRenameColumnOperation](o, func(v DataSetLogicalTableMapDataTransformRenameColumnOperation) string { return v.NewColumnName })
}

type DataSetLogicalTableMapDataTransformTagColumnOperation struct {
	// Column name.
	ColumnName string `pulumi:"columnName"`
	// The dataset column tag, currently only used for geospatial type tagging. See tags.
	Tags []DataSetLogicalTableMapDataTransformTagColumnOperationTag `pulumi:"tags"`
}

type DataSetLogicalTableMapDataTransformTagColumnOperationArgs struct {
	// Column name.
	ColumnName pulumix.Input[string] `pulumi:"columnName"`
	// The dataset column tag, currently only used for geospatial type tagging. See tags.
	Tags pulumix.Input[[]*DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs] `pulumi:"tags"`
}

func (DataSetLogicalTableMapDataTransformTagColumnOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperation)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationOutput() DataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return i.ToDataSetLogicalTableMapDataTransformTagColumnOperationOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformTagColumnOperationOutput)
}

func (i *DataSetLogicalTableMapDataTransformTagColumnOperationArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapDataTransformTagColumnOperationArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapDataTransformTagColumnOperationOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformTagColumnOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationOutput() DataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMapDataTransformTagColumnOperation] {
	return pulumix.Output[DataSetLogicalTableMapDataTransformTagColumnOperation]{
		OutputState: o.OutputState,
	}
}

// Column name.
func (o DataSetLogicalTableMapDataTransformTagColumnOperationOutput) ColumnName() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMapDataTransformTagColumnOperation](o, func(v DataSetLogicalTableMapDataTransformTagColumnOperation) string { return v.ColumnName })
}

// The dataset column tag, currently only used for geospatial type tagging. See tags.
func (o DataSetLogicalTableMapDataTransformTagColumnOperationOutput) Tags() pulumix.GArrayOutput[DataSetLogicalTableMapDataTransformTagColumnOperationTag, DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput] {
	value := pulumix.Apply[DataSetLogicalTableMapDataTransformTagColumnOperation](o, func(v DataSetLogicalTableMapDataTransformTagColumnOperation) []DataSetLogicalTableMapDataTransformTagColumnOperationTag {
		return v.Tags
	})
	return pulumix.GArrayOutput[DataSetLogicalTableMapDataTransformTagColumnOperationTag, DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput]{OutputState: value.OutputState}
}

type DataSetLogicalTableMapDataTransformTagColumnOperationTag struct {
	// A description for a column. See column_description.
	ColumnDescription *DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription `pulumi:"columnDescription"`
	// A geospatial role for a column. Valid values are `COUNTRY`, `STATE`, `COUNTY`, `CITY`, `POSTCODE`, `LONGITUDE`, and `LATITUDE`.
	ColumnGeographicRole *string `pulumi:"columnGeographicRole"`
}

type DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs struct {
	// A description for a column. See column_description.
	ColumnDescription pulumix.Input[*DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs] `pulumi:"columnDescription"`
	// A geospatial role for a column. Valid values are `COUNTRY`, `STATE`, `COUNTY`, `CITY`, `POSTCODE`, `LONGITUDE`, and `LATITUDE`.
	ColumnGeographicRole pulumix.Input[*string] `pulumi:"columnGeographicRole"`
}

func (DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperationTag)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return i.ToDataSetLogicalTableMapDataTransformTagColumnOperationTagOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput)
}

func (i *DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperationTag)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMapDataTransformTagColumnOperationTag] {
	return pulumix.Output[DataSetLogicalTableMapDataTransformTagColumnOperationTag]{
		OutputState: o.OutputState,
	}
}

// A description for a column. See column_description.
func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ColumnDescription() pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription, DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput] {
	value := pulumix.Apply[DataSetLogicalTableMapDataTransformTagColumnOperationTag](o, func(v DataSetLogicalTableMapDataTransformTagColumnOperationTag) *DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription {
		return v.ColumnDescription
	})
	return pulumix.GPtrOutput[DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription, DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput]{OutputState: value.OutputState}
}

// A geospatial role for a column. Valid values are `COUNTRY`, `STATE`, `COUNTY`, `CITY`, `POSTCODE`, `LONGITUDE`, and `LATITUDE`.
func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ColumnGeographicRole() pulumix.Output[*string] {
	return pulumix.Apply[DataSetLogicalTableMapDataTransformTagColumnOperationTag](o, func(v DataSetLogicalTableMapDataTransformTagColumnOperationTag) *string {
		return v.ColumnGeographicRole
	})
}

type DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription struct {
	// The text of a description for a column.
	Text *string `pulumi:"text"`
}

type DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs struct {
	// The text of a description for a column.
	Text pulumix.Input[*string] `pulumi:"text"`
}

func (DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return i.ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput)
}

func (i *DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription] {
	return pulumix.Output[DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription]{
		OutputState: o.OutputState,
	}
}

// The text of a description for a column.
func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) Text() pulumix.Output[*string] {
	return pulumix.Apply[DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription](o, func(v DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription) *string {
		return v.Text
	})
}

type DataSetLogicalTableMapDataTransformUntagColumnOperation struct {
	// Column name.
	ColumnName string `pulumi:"columnName"`
	// The column tags to remove from this column.
	TagNames []string `pulumi:"tagNames"`
}

type DataSetLogicalTableMapDataTransformUntagColumnOperationArgs struct {
	// Column name.
	ColumnName pulumix.Input[string] `pulumi:"columnName"`
	// The column tags to remove from this column.
	TagNames pulumix.Input[[]string] `pulumi:"tagNames"`
}

func (DataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformUntagColumnOperation)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ToDataSetLogicalTableMapDataTransformUntagColumnOperationOutput() DataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return i.ToDataSetLogicalTableMapDataTransformUntagColumnOperationOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ToDataSetLogicalTableMapDataTransformUntagColumnOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformUntagColumnOperationOutput)
}

func (i *DataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapDataTransformUntagColumnOperationArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapDataTransformUntagColumnOperationOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformUntagColumnOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ToDataSetLogicalTableMapDataTransformUntagColumnOperationOutput() DataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ToDataSetLogicalTableMapDataTransformUntagColumnOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMapDataTransformUntagColumnOperation] {
	return pulumix.Output[DataSetLogicalTableMapDataTransformUntagColumnOperation]{
		OutputState: o.OutputState,
	}
}

// Column name.
func (o DataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ColumnName() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMapDataTransformUntagColumnOperation](o, func(v DataSetLogicalTableMapDataTransformUntagColumnOperation) string { return v.ColumnName })
}

// The column tags to remove from this column.
func (o DataSetLogicalTableMapDataTransformUntagColumnOperationOutput) TagNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DataSetLogicalTableMapDataTransformUntagColumnOperation](o, func(v DataSetLogicalTableMapDataTransformUntagColumnOperation) []string { return v.TagNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type DataSetLogicalTableMapSource struct {
	// ARN of the parent data set.
	DataSetArn *string `pulumi:"dataSetArn"`
	// Specifies the result of a join of two logical tables. See join_instruction.
	JoinInstruction *DataSetLogicalTableMapSourceJoinInstruction `pulumi:"joinInstruction"`
	// Physical table ID.
	PhysicalTableId *string `pulumi:"physicalTableId"`
}

type DataSetLogicalTableMapSourceArgs struct {
	// ARN of the parent data set.
	DataSetArn pulumix.Input[*string] `pulumi:"dataSetArn"`
	// Specifies the result of a join of two logical tables. See join_instruction.
	JoinInstruction pulumix.Input[*DataSetLogicalTableMapSourceJoinInstructionArgs] `pulumi:"joinInstruction"`
	// Physical table ID.
	PhysicalTableId pulumix.Input[*string] `pulumi:"physicalTableId"`
}

func (DataSetLogicalTableMapSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSource)(nil)).Elem()
}

func (i DataSetLogicalTableMapSourceArgs) ToDataSetLogicalTableMapSourceOutput() DataSetLogicalTableMapSourceOutput {
	return i.ToDataSetLogicalTableMapSourceOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapSourceArgs) ToDataSetLogicalTableMapSourceOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapSourceOutput)
}

func (i *DataSetLogicalTableMapSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapSourceArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapSourceOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSource)(nil)).Elem()
}

func (o DataSetLogicalTableMapSourceOutput) ToDataSetLogicalTableMapSourceOutput() DataSetLogicalTableMapSourceOutput {
	return o
}

func (o DataSetLogicalTableMapSourceOutput) ToDataSetLogicalTableMapSourceOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceOutput {
	return o
}

func (o DataSetLogicalTableMapSourceOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMapSource] {
	return pulumix.Output[DataSetLogicalTableMapSource]{
		OutputState: o.OutputState,
	}
}

// ARN of the parent data set.
func (o DataSetLogicalTableMapSourceOutput) DataSetArn() pulumix.Output[*string] {
	return pulumix.Apply[DataSetLogicalTableMapSource](o, func(v DataSetLogicalTableMapSource) *string { return v.DataSetArn })
}

// Specifies the result of a join of two logical tables. See join_instruction.
func (o DataSetLogicalTableMapSourceOutput) JoinInstruction() pulumix.GPtrOutput[DataSetLogicalTableMapSourceJoinInstruction, DataSetLogicalTableMapSourceJoinInstructionOutput] {
	value := pulumix.Apply[DataSetLogicalTableMapSource](o, func(v DataSetLogicalTableMapSource) *DataSetLogicalTableMapSourceJoinInstruction {
		return v.JoinInstruction
	})
	return pulumix.GPtrOutput[DataSetLogicalTableMapSourceJoinInstruction, DataSetLogicalTableMapSourceJoinInstructionOutput]{OutputState: value.OutputState}
}

// Physical table ID.
func (o DataSetLogicalTableMapSourceOutput) PhysicalTableId() pulumix.Output[*string] {
	return pulumix.Apply[DataSetLogicalTableMapSource](o, func(v DataSetLogicalTableMapSource) *string { return v.PhysicalTableId })
}

type DataSetLogicalTableMapSourceJoinInstruction struct {
	// Join key properties of the left operand. See left_join_key_properties.
	LeftJoinKeyProperties *DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties `pulumi:"leftJoinKeyProperties"`
	// Operand on the left side of a join.
	LeftOperand string `pulumi:"leftOperand"`
	// Join instructions provided in the ON clause of a join.
	OnClause string `pulumi:"onClause"`
	// Join key properties of the right operand. See right_join_key_properties.
	RightJoinKeyProperties *DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties `pulumi:"rightJoinKeyProperties"`
	// Operand on the right side of a join.
	RightOperand string `pulumi:"rightOperand"`
	// Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
	Type string `pulumi:"type"`
}

type DataSetLogicalTableMapSourceJoinInstructionArgs struct {
	// Join key properties of the left operand. See left_join_key_properties.
	LeftJoinKeyProperties pulumix.Input[*DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs] `pulumi:"leftJoinKeyProperties"`
	// Operand on the left side of a join.
	LeftOperand pulumix.Input[string] `pulumi:"leftOperand"`
	// Join instructions provided in the ON clause of a join.
	OnClause pulumix.Input[string] `pulumi:"onClause"`
	// Join key properties of the right operand. See right_join_key_properties.
	RightJoinKeyProperties pulumix.Input[*DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs] `pulumi:"rightJoinKeyProperties"`
	// Operand on the right side of a join.
	RightOperand pulumix.Input[string] `pulumi:"rightOperand"`
	// Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (DataSetLogicalTableMapSourceJoinInstructionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstruction)(nil)).Elem()
}

func (i DataSetLogicalTableMapSourceJoinInstructionArgs) ToDataSetLogicalTableMapSourceJoinInstructionOutput() DataSetLogicalTableMapSourceJoinInstructionOutput {
	return i.ToDataSetLogicalTableMapSourceJoinInstructionOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapSourceJoinInstructionArgs) ToDataSetLogicalTableMapSourceJoinInstructionOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapSourceJoinInstructionOutput)
}

func (i *DataSetLogicalTableMapSourceJoinInstructionArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapSourceJoinInstructionArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapSourceJoinInstructionOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapSourceJoinInstructionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstruction)(nil)).Elem()
}

func (o DataSetLogicalTableMapSourceJoinInstructionOutput) ToDataSetLogicalTableMapSourceJoinInstructionOutput() DataSetLogicalTableMapSourceJoinInstructionOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionOutput) ToDataSetLogicalTableMapSourceJoinInstructionOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMapSourceJoinInstruction] {
	return pulumix.Output[DataSetLogicalTableMapSourceJoinInstruction]{
		OutputState: o.OutputState,
	}
}

// Join key properties of the left operand. See left_join_key_properties.
func (o DataSetLogicalTableMapSourceJoinInstructionOutput) LeftJoinKeyProperties() pulumix.GPtrOutput[DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties, DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput] {
	value := pulumix.Apply[DataSetLogicalTableMapSourceJoinInstruction](o, func(v DataSetLogicalTableMapSourceJoinInstruction) *DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties {
		return v.LeftJoinKeyProperties
	})
	return pulumix.GPtrOutput[DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties, DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput]{OutputState: value.OutputState}
}

// Operand on the left side of a join.
func (o DataSetLogicalTableMapSourceJoinInstructionOutput) LeftOperand() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMapSourceJoinInstruction](o, func(v DataSetLogicalTableMapSourceJoinInstruction) string { return v.LeftOperand })
}

// Join instructions provided in the ON clause of a join.
func (o DataSetLogicalTableMapSourceJoinInstructionOutput) OnClause() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMapSourceJoinInstruction](o, func(v DataSetLogicalTableMapSourceJoinInstruction) string { return v.OnClause })
}

// Join key properties of the right operand. See right_join_key_properties.
func (o DataSetLogicalTableMapSourceJoinInstructionOutput) RightJoinKeyProperties() pulumix.GPtrOutput[DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties, DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput] {
	value := pulumix.Apply[DataSetLogicalTableMapSourceJoinInstruction](o, func(v DataSetLogicalTableMapSourceJoinInstruction) *DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties {
		return v.RightJoinKeyProperties
	})
	return pulumix.GPtrOutput[DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties, DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput]{OutputState: value.OutputState}
}

// Operand on the right side of a join.
func (o DataSetLogicalTableMapSourceJoinInstructionOutput) RightOperand() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMapSourceJoinInstruction](o, func(v DataSetLogicalTableMapSourceJoinInstruction) string { return v.RightOperand })
}

// Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
func (o DataSetLogicalTableMapSourceJoinInstructionOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[DataSetLogicalTableMapSourceJoinInstruction](o, func(v DataSetLogicalTableMapSourceJoinInstruction) string { return v.Type })
}

type DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties struct {
	// A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
	UniqueKey *bool `pulumi:"uniqueKey"`
}

type DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs struct {
	// A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
	UniqueKey pulumix.Input[*bool] `pulumi:"uniqueKey"`
}

func (DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties)(nil)).Elem()
}

func (i DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput() DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput {
	return i.ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput)
}

func (i *DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties)(nil)).Elem()
}

func (o DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput() DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties] {
	return pulumix.Output[DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties]{
		OutputState: o.OutputState,
	}
}

// A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
func (o DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput) UniqueKey() pulumix.Output[*bool] {
	return pulumix.Apply[DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties](o, func(v DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties) *bool { return v.UniqueKey })
}

type DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties struct {
	// A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
	UniqueKey *bool `pulumi:"uniqueKey"`
}

type DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs struct {
	// A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
	UniqueKey pulumix.Input[*bool] `pulumi:"uniqueKey"`
}

func (DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties)(nil)).Elem()
}

func (i DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput() DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput {
	return i.ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput)
}

func (i *DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs] {
	return pulumix.Val(i)
}

type DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties)(nil)).Elem()
}

func (o DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput() DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties] {
	return pulumix.Output[DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties]{
		OutputState: o.OutputState,
	}
}

// A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
func (o DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput) UniqueKey() pulumix.Output[*bool] {
	return pulumix.Apply[DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties](o, func(v DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties) *bool { return v.UniqueKey })
}

type DataSetOutputColumn struct {
	// Field folder description.
	Description *string `pulumi:"description"`
	// Display name for the dataset.
	Name *string `pulumi:"name"`
	// Data type of the column.
	Type *string `pulumi:"type"`
}

type DataSetOutputColumnArgs struct {
	// Field folder description.
	Description pulumix.Input[*string] `pulumi:"description"`
	// Display name for the dataset.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Data type of the column.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (DataSetOutputColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetOutputColumn)(nil)).Elem()
}

func (i DataSetOutputColumnArgs) ToDataSetOutputColumnOutput() DataSetOutputColumnOutput {
	return i.ToDataSetOutputColumnOutputWithContext(context.Background())
}

func (i DataSetOutputColumnArgs) ToDataSetOutputColumnOutputWithContext(ctx context.Context) DataSetOutputColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetOutputColumnOutput)
}

func (i *DataSetOutputColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetOutputColumnArgs] {
	return pulumix.Val(i)
}

type DataSetOutputColumnOutput struct{ *pulumi.OutputState }

func (DataSetOutputColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetOutputColumn)(nil)).Elem()
}

func (o DataSetOutputColumnOutput) ToDataSetOutputColumnOutput() DataSetOutputColumnOutput {
	return o
}

func (o DataSetOutputColumnOutput) ToDataSetOutputColumnOutputWithContext(ctx context.Context) DataSetOutputColumnOutput {
	return o
}

func (o DataSetOutputColumnOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetOutputColumn] {
	return pulumix.Output[DataSetOutputColumn]{
		OutputState: o.OutputState,
	}
}

// Field folder description.
func (o DataSetOutputColumnOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[DataSetOutputColumn](o, func(v DataSetOutputColumn) *string { return v.Description })
}

// Display name for the dataset.
func (o DataSetOutputColumnOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[DataSetOutputColumn](o, func(v DataSetOutputColumn) *string { return v.Name })
}

// Data type of the column.
func (o DataSetOutputColumnOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[DataSetOutputColumn](o, func(v DataSetOutputColumn) *string { return v.Type })
}

type DataSetPermission struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions []string `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal string `pulumi:"principal"`
}

type DataSetPermissionArgs struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions pulumix.Input[[]string] `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal pulumix.Input[string] `pulumi:"principal"`
}

func (DataSetPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPermission)(nil)).Elem()
}

func (i DataSetPermissionArgs) ToDataSetPermissionOutput() DataSetPermissionOutput {
	return i.ToDataSetPermissionOutputWithContext(context.Background())
}

func (i DataSetPermissionArgs) ToDataSetPermissionOutputWithContext(ctx context.Context) DataSetPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPermissionOutput)
}

func (i *DataSetPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetPermissionArgs] {
	return pulumix.Val(i)
}

type DataSetPermissionOutput struct{ *pulumi.OutputState }

func (DataSetPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPermission)(nil)).Elem()
}

func (o DataSetPermissionOutput) ToDataSetPermissionOutput() DataSetPermissionOutput {
	return o
}

func (o DataSetPermissionOutput) ToDataSetPermissionOutputWithContext(ctx context.Context) DataSetPermissionOutput {
	return o
}

func (o DataSetPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetPermission] {
	return pulumix.Output[DataSetPermission]{
		OutputState: o.OutputState,
	}
}

// List of IAM actions to grant or revoke permissions on.
func (o DataSetPermissionOutput) Actions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DataSetPermission](o, func(v DataSetPermission) []string { return v.Actions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
func (o DataSetPermissionOutput) Principal() pulumix.Output[string] {
	return pulumix.Apply[DataSetPermission](o, func(v DataSetPermission) string { return v.Principal })
}

type DataSetPhysicalTableMap struct {
	// A physical table type built from the results of the custom SQL query. See custom_sql.
	CustomSql *DataSetPhysicalTableMapCustomSql `pulumi:"customSql"`
	// Key of the physical table map.
	PhysicalTableMapId string `pulumi:"physicalTableMapId"`
	// A physical table type for relational data sources. See relational_table.
	RelationalTable *DataSetPhysicalTableMapRelationalTable `pulumi:"relationalTable"`
	// A physical table type for as S3 data source. See s3_source.
	S3Source *DataSetPhysicalTableMapS3Source `pulumi:"s3Source"`
}

type DataSetPhysicalTableMapArgs struct {
	// A physical table type built from the results of the custom SQL query. See custom_sql.
	CustomSql pulumix.Input[*DataSetPhysicalTableMapCustomSqlArgs] `pulumi:"customSql"`
	// Key of the physical table map.
	PhysicalTableMapId pulumix.Input[string] `pulumi:"physicalTableMapId"`
	// A physical table type for relational data sources. See relational_table.
	RelationalTable pulumix.Input[*DataSetPhysicalTableMapRelationalTableArgs] `pulumi:"relationalTable"`
	// A physical table type for as S3 data source. See s3_source.
	S3Source pulumix.Input[*DataSetPhysicalTableMapS3SourceArgs] `pulumi:"s3Source"`
}

func (DataSetPhysicalTableMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMap)(nil)).Elem()
}

func (i DataSetPhysicalTableMapArgs) ToDataSetPhysicalTableMapOutput() DataSetPhysicalTableMapOutput {
	return i.ToDataSetPhysicalTableMapOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapArgs) ToDataSetPhysicalTableMapOutputWithContext(ctx context.Context) DataSetPhysicalTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapOutput)
}

func (i *DataSetPhysicalTableMapArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetPhysicalTableMapArgs] {
	return pulumix.Val(i)
}

type DataSetPhysicalTableMapOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMap)(nil)).Elem()
}

func (o DataSetPhysicalTableMapOutput) ToDataSetPhysicalTableMapOutput() DataSetPhysicalTableMapOutput {
	return o
}

func (o DataSetPhysicalTableMapOutput) ToDataSetPhysicalTableMapOutputWithContext(ctx context.Context) DataSetPhysicalTableMapOutput {
	return o
}

func (o DataSetPhysicalTableMapOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetPhysicalTableMap] {
	return pulumix.Output[DataSetPhysicalTableMap]{
		OutputState: o.OutputState,
	}
}

// A physical table type built from the results of the custom SQL query. See custom_sql.
func (o DataSetPhysicalTableMapOutput) CustomSql() pulumix.GPtrOutput[DataSetPhysicalTableMapCustomSql, DataSetPhysicalTableMapCustomSqlOutput] {
	value := pulumix.Apply[DataSetPhysicalTableMap](o, func(v DataSetPhysicalTableMap) *DataSetPhysicalTableMapCustomSql { return v.CustomSql })
	return pulumix.GPtrOutput[DataSetPhysicalTableMapCustomSql, DataSetPhysicalTableMapCustomSqlOutput]{OutputState: value.OutputState}
}

// Key of the physical table map.
func (o DataSetPhysicalTableMapOutput) PhysicalTableMapId() pulumix.Output[string] {
	return pulumix.Apply[DataSetPhysicalTableMap](o, func(v DataSetPhysicalTableMap) string { return v.PhysicalTableMapId })
}

// A physical table type for relational data sources. See relational_table.
func (o DataSetPhysicalTableMapOutput) RelationalTable() pulumix.GPtrOutput[DataSetPhysicalTableMapRelationalTable, DataSetPhysicalTableMapRelationalTableOutput] {
	value := pulumix.Apply[DataSetPhysicalTableMap](o, func(v DataSetPhysicalTableMap) *DataSetPhysicalTableMapRelationalTable { return v.RelationalTable })
	return pulumix.GPtrOutput[DataSetPhysicalTableMapRelationalTable, DataSetPhysicalTableMapRelationalTableOutput]{OutputState: value.OutputState}
}

// A physical table type for as S3 data source. See s3_source.
func (o DataSetPhysicalTableMapOutput) S3Source() pulumix.GPtrOutput[DataSetPhysicalTableMapS3Source, DataSetPhysicalTableMapS3SourceOutput] {
	value := pulumix.Apply[DataSetPhysicalTableMap](o, func(v DataSetPhysicalTableMap) *DataSetPhysicalTableMapS3Source { return v.S3Source })
	return pulumix.GPtrOutput[DataSetPhysicalTableMapS3Source, DataSetPhysicalTableMapS3SourceOutput]{OutputState: value.OutputState}
}

type DataSetPhysicalTableMapCustomSql struct {
	// Column schema from the SQL query result set. See columns.
	Columns []DataSetPhysicalTableMapCustomSqlColumn `pulumi:"columns"`
	// ARN of the data source.
	DataSourceArn string `pulumi:"dataSourceArn"`
	// Display name for the SQL query result.
	Name string `pulumi:"name"`
	// SQL query.
	SqlQuery string `pulumi:"sqlQuery"`
}

type DataSetPhysicalTableMapCustomSqlArgs struct {
	// Column schema from the SQL query result set. See columns.
	Columns pulumix.Input[[]*DataSetPhysicalTableMapCustomSqlColumnArgs] `pulumi:"columns"`
	// ARN of the data source.
	DataSourceArn pulumix.Input[string] `pulumi:"dataSourceArn"`
	// Display name for the SQL query result.
	Name pulumix.Input[string] `pulumi:"name"`
	// SQL query.
	SqlQuery pulumix.Input[string] `pulumi:"sqlQuery"`
}

func (DataSetPhysicalTableMapCustomSqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapCustomSql)(nil)).Elem()
}

func (i DataSetPhysicalTableMapCustomSqlArgs) ToDataSetPhysicalTableMapCustomSqlOutput() DataSetPhysicalTableMapCustomSqlOutput {
	return i.ToDataSetPhysicalTableMapCustomSqlOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapCustomSqlArgs) ToDataSetPhysicalTableMapCustomSqlOutputWithContext(ctx context.Context) DataSetPhysicalTableMapCustomSqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapCustomSqlOutput)
}

func (i *DataSetPhysicalTableMapCustomSqlArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetPhysicalTableMapCustomSqlArgs] {
	return pulumix.Val(i)
}

type DataSetPhysicalTableMapCustomSqlOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapCustomSqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapCustomSql)(nil)).Elem()
}

func (o DataSetPhysicalTableMapCustomSqlOutput) ToDataSetPhysicalTableMapCustomSqlOutput() DataSetPhysicalTableMapCustomSqlOutput {
	return o
}

func (o DataSetPhysicalTableMapCustomSqlOutput) ToDataSetPhysicalTableMapCustomSqlOutputWithContext(ctx context.Context) DataSetPhysicalTableMapCustomSqlOutput {
	return o
}

func (o DataSetPhysicalTableMapCustomSqlOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetPhysicalTableMapCustomSql] {
	return pulumix.Output[DataSetPhysicalTableMapCustomSql]{
		OutputState: o.OutputState,
	}
}

// Column schema from the SQL query result set. See columns.
func (o DataSetPhysicalTableMapCustomSqlOutput) Columns() pulumix.GArrayOutput[DataSetPhysicalTableMapCustomSqlColumn, DataSetPhysicalTableMapCustomSqlColumnOutput] {
	value := pulumix.Apply[DataSetPhysicalTableMapCustomSql](o, func(v DataSetPhysicalTableMapCustomSql) []DataSetPhysicalTableMapCustomSqlColumn { return v.Columns })
	return pulumix.GArrayOutput[DataSetPhysicalTableMapCustomSqlColumn, DataSetPhysicalTableMapCustomSqlColumnOutput]{OutputState: value.OutputState}
}

// ARN of the data source.
func (o DataSetPhysicalTableMapCustomSqlOutput) DataSourceArn() pulumix.Output[string] {
	return pulumix.Apply[DataSetPhysicalTableMapCustomSql](o, func(v DataSetPhysicalTableMapCustomSql) string { return v.DataSourceArn })
}

// Display name for the SQL query result.
func (o DataSetPhysicalTableMapCustomSqlOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[DataSetPhysicalTableMapCustomSql](o, func(v DataSetPhysicalTableMapCustomSql) string { return v.Name })
}

// SQL query.
func (o DataSetPhysicalTableMapCustomSqlOutput) SqlQuery() pulumix.Output[string] {
	return pulumix.Apply[DataSetPhysicalTableMapCustomSql](o, func(v DataSetPhysicalTableMapCustomSql) string { return v.SqlQuery })
}

type DataSetPhysicalTableMapCustomSqlColumn struct {
	// Name of this column in the underlying data source.
	Name string `pulumi:"name"`
	// Data type of the column.
	Type string `pulumi:"type"`
}

type DataSetPhysicalTableMapCustomSqlColumnArgs struct {
	// Name of this column in the underlying data source.
	Name pulumix.Input[string] `pulumi:"name"`
	// Data type of the column.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (DataSetPhysicalTableMapCustomSqlColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapCustomSqlColumn)(nil)).Elem()
}

func (i DataSetPhysicalTableMapCustomSqlColumnArgs) ToDataSetPhysicalTableMapCustomSqlColumnOutput() DataSetPhysicalTableMapCustomSqlColumnOutput {
	return i.ToDataSetPhysicalTableMapCustomSqlColumnOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapCustomSqlColumnArgs) ToDataSetPhysicalTableMapCustomSqlColumnOutputWithContext(ctx context.Context) DataSetPhysicalTableMapCustomSqlColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapCustomSqlColumnOutput)
}

func (i *DataSetPhysicalTableMapCustomSqlColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetPhysicalTableMapCustomSqlColumnArgs] {
	return pulumix.Val(i)
}

type DataSetPhysicalTableMapCustomSqlColumnOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapCustomSqlColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapCustomSqlColumn)(nil)).Elem()
}

func (o DataSetPhysicalTableMapCustomSqlColumnOutput) ToDataSetPhysicalTableMapCustomSqlColumnOutput() DataSetPhysicalTableMapCustomSqlColumnOutput {
	return o
}

func (o DataSetPhysicalTableMapCustomSqlColumnOutput) ToDataSetPhysicalTableMapCustomSqlColumnOutputWithContext(ctx context.Context) DataSetPhysicalTableMapCustomSqlColumnOutput {
	return o
}

func (o DataSetPhysicalTableMapCustomSqlColumnOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetPhysicalTableMapCustomSqlColumn] {
	return pulumix.Output[DataSetPhysicalTableMapCustomSqlColumn]{
		OutputState: o.OutputState,
	}
}

// Name of this column in the underlying data source.
func (o DataSetPhysicalTableMapCustomSqlColumnOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[DataSetPhysicalTableMapCustomSqlColumn](o, func(v DataSetPhysicalTableMapCustomSqlColumn) string { return v.Name })
}

// Data type of the column.
func (o DataSetPhysicalTableMapCustomSqlColumnOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[DataSetPhysicalTableMapCustomSqlColumn](o, func(v DataSetPhysicalTableMapCustomSqlColumn) string { return v.Type })
}

type DataSetPhysicalTableMapRelationalTable struct {
	// Catalog associated with the table.
	Catalog *string `pulumi:"catalog"`
	// ARN of the data source.
	DataSourceArn string `pulumi:"dataSourceArn"`
	// Column schema of the table. See input_columns.
	InputColumns []DataSetPhysicalTableMapRelationalTableInputColumn `pulumi:"inputColumns"`
	// Name of the relational table.
	Name string `pulumi:"name"`
	// Schema name. This name applies to certain relational database engines.
	Schema *string `pulumi:"schema"`
}

type DataSetPhysicalTableMapRelationalTableArgs struct {
	// Catalog associated with the table.
	Catalog pulumix.Input[*string] `pulumi:"catalog"`
	// ARN of the data source.
	DataSourceArn pulumix.Input[string] `pulumi:"dataSourceArn"`
	// Column schema of the table. See input_columns.
	InputColumns pulumix.Input[[]*DataSetPhysicalTableMapRelationalTableInputColumnArgs] `pulumi:"inputColumns"`
	// Name of the relational table.
	Name pulumix.Input[string] `pulumi:"name"`
	// Schema name. This name applies to certain relational database engines.
	Schema pulumix.Input[*string] `pulumi:"schema"`
}

func (DataSetPhysicalTableMapRelationalTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapRelationalTable)(nil)).Elem()
}

func (i DataSetPhysicalTableMapRelationalTableArgs) ToDataSetPhysicalTableMapRelationalTableOutput() DataSetPhysicalTableMapRelationalTableOutput {
	return i.ToDataSetPhysicalTableMapRelationalTableOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapRelationalTableArgs) ToDataSetPhysicalTableMapRelationalTableOutputWithContext(ctx context.Context) DataSetPhysicalTableMapRelationalTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapRelationalTableOutput)
}

func (i *DataSetPhysicalTableMapRelationalTableArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetPhysicalTableMapRelationalTableArgs] {
	return pulumix.Val(i)
}

type DataSetPhysicalTableMapRelationalTableOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapRelationalTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapRelationalTable)(nil)).Elem()
}

func (o DataSetPhysicalTableMapRelationalTableOutput) ToDataSetPhysicalTableMapRelationalTableOutput() DataSetPhysicalTableMapRelationalTableOutput {
	return o
}

func (o DataSetPhysicalTableMapRelationalTableOutput) ToDataSetPhysicalTableMapRelationalTableOutputWithContext(ctx context.Context) DataSetPhysicalTableMapRelationalTableOutput {
	return o
}

func (o DataSetPhysicalTableMapRelationalTableOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetPhysicalTableMapRelationalTable] {
	return pulumix.Output[DataSetPhysicalTableMapRelationalTable]{
		OutputState: o.OutputState,
	}
}

// Catalog associated with the table.
func (o DataSetPhysicalTableMapRelationalTableOutput) Catalog() pulumix.Output[*string] {
	return pulumix.Apply[DataSetPhysicalTableMapRelationalTable](o, func(v DataSetPhysicalTableMapRelationalTable) *string { return v.Catalog })
}

// ARN of the data source.
func (o DataSetPhysicalTableMapRelationalTableOutput) DataSourceArn() pulumix.Output[string] {
	return pulumix.Apply[DataSetPhysicalTableMapRelationalTable](o, func(v DataSetPhysicalTableMapRelationalTable) string { return v.DataSourceArn })
}

// Column schema of the table. See input_columns.
func (o DataSetPhysicalTableMapRelationalTableOutput) InputColumns() pulumix.GArrayOutput[DataSetPhysicalTableMapRelationalTableInputColumn, DataSetPhysicalTableMapRelationalTableInputColumnOutput] {
	value := pulumix.Apply[DataSetPhysicalTableMapRelationalTable](o, func(v DataSetPhysicalTableMapRelationalTable) []DataSetPhysicalTableMapRelationalTableInputColumn {
		return v.InputColumns
	})
	return pulumix.GArrayOutput[DataSetPhysicalTableMapRelationalTableInputColumn, DataSetPhysicalTableMapRelationalTableInputColumnOutput]{OutputState: value.OutputState}
}

// Name of the relational table.
func (o DataSetPhysicalTableMapRelationalTableOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[DataSetPhysicalTableMapRelationalTable](o, func(v DataSetPhysicalTableMapRelationalTable) string { return v.Name })
}

// Schema name. This name applies to certain relational database engines.
func (o DataSetPhysicalTableMapRelationalTableOutput) Schema() pulumix.Output[*string] {
	return pulumix.Apply[DataSetPhysicalTableMapRelationalTable](o, func(v DataSetPhysicalTableMapRelationalTable) *string { return v.Schema })
}

type DataSetPhysicalTableMapRelationalTableInputColumn struct {
	// Name of this column in the underlying data source.
	Name string `pulumi:"name"`
	// Data type of the column.
	Type string `pulumi:"type"`
}

type DataSetPhysicalTableMapRelationalTableInputColumnArgs struct {
	// Name of this column in the underlying data source.
	Name pulumix.Input[string] `pulumi:"name"`
	// Data type of the column.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (DataSetPhysicalTableMapRelationalTableInputColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapRelationalTableInputColumn)(nil)).Elem()
}

func (i DataSetPhysicalTableMapRelationalTableInputColumnArgs) ToDataSetPhysicalTableMapRelationalTableInputColumnOutput() DataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return i.ToDataSetPhysicalTableMapRelationalTableInputColumnOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapRelationalTableInputColumnArgs) ToDataSetPhysicalTableMapRelationalTableInputColumnOutputWithContext(ctx context.Context) DataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapRelationalTableInputColumnOutput)
}

func (i *DataSetPhysicalTableMapRelationalTableInputColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetPhysicalTableMapRelationalTableInputColumnArgs] {
	return pulumix.Val(i)
}

type DataSetPhysicalTableMapRelationalTableInputColumnOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapRelationalTableInputColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapRelationalTableInputColumn)(nil)).Elem()
}

func (o DataSetPhysicalTableMapRelationalTableInputColumnOutput) ToDataSetPhysicalTableMapRelationalTableInputColumnOutput() DataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return o
}

func (o DataSetPhysicalTableMapRelationalTableInputColumnOutput) ToDataSetPhysicalTableMapRelationalTableInputColumnOutputWithContext(ctx context.Context) DataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return o
}

func (o DataSetPhysicalTableMapRelationalTableInputColumnOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetPhysicalTableMapRelationalTableInputColumn] {
	return pulumix.Output[DataSetPhysicalTableMapRelationalTableInputColumn]{
		OutputState: o.OutputState,
	}
}

// Name of this column in the underlying data source.
func (o DataSetPhysicalTableMapRelationalTableInputColumnOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[DataSetPhysicalTableMapRelationalTableInputColumn](o, func(v DataSetPhysicalTableMapRelationalTableInputColumn) string { return v.Name })
}

// Data type of the column.
func (o DataSetPhysicalTableMapRelationalTableInputColumnOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[DataSetPhysicalTableMapRelationalTableInputColumn](o, func(v DataSetPhysicalTableMapRelationalTableInputColumn) string { return v.Type })
}

type DataSetPhysicalTableMapS3Source struct {
	// ARN of the data source.
	DataSourceArn string `pulumi:"dataSourceArn"`
	// Column schema of the table. See input_columns.
	InputColumns []DataSetPhysicalTableMapS3SourceInputColumn `pulumi:"inputColumns"`
	// Information about the format for the S3 source file or files. See upload_settings.
	UploadSettings DataSetPhysicalTableMapS3SourceUploadSettings `pulumi:"uploadSettings"`
}

type DataSetPhysicalTableMapS3SourceArgs struct {
	// ARN of the data source.
	DataSourceArn pulumix.Input[string] `pulumi:"dataSourceArn"`
	// Column schema of the table. See input_columns.
	InputColumns pulumix.Input[[]*DataSetPhysicalTableMapS3SourceInputColumnArgs] `pulumi:"inputColumns"`
	// Information about the format for the S3 source file or files. See upload_settings.
	UploadSettings pulumix.Input[*DataSetPhysicalTableMapS3SourceUploadSettingsArgs] `pulumi:"uploadSettings"`
}

func (DataSetPhysicalTableMapS3SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapS3Source)(nil)).Elem()
}

func (i DataSetPhysicalTableMapS3SourceArgs) ToDataSetPhysicalTableMapS3SourceOutput() DataSetPhysicalTableMapS3SourceOutput {
	return i.ToDataSetPhysicalTableMapS3SourceOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapS3SourceArgs) ToDataSetPhysicalTableMapS3SourceOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapS3SourceOutput)
}

func (i *DataSetPhysicalTableMapS3SourceArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetPhysicalTableMapS3SourceArgs] {
	return pulumix.Val(i)
}

type DataSetPhysicalTableMapS3SourceOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapS3SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapS3Source)(nil)).Elem()
}

func (o DataSetPhysicalTableMapS3SourceOutput) ToDataSetPhysicalTableMapS3SourceOutput() DataSetPhysicalTableMapS3SourceOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourceOutput) ToDataSetPhysicalTableMapS3SourceOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourceOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetPhysicalTableMapS3Source] {
	return pulumix.Output[DataSetPhysicalTableMapS3Source]{
		OutputState: o.OutputState,
	}
}

// ARN of the data source.
func (o DataSetPhysicalTableMapS3SourceOutput) DataSourceArn() pulumix.Output[string] {
	return pulumix.Apply[DataSetPhysicalTableMapS3Source](o, func(v DataSetPhysicalTableMapS3Source) string { return v.DataSourceArn })
}

// Column schema of the table. See input_columns.
func (o DataSetPhysicalTableMapS3SourceOutput) InputColumns() pulumix.GArrayOutput[DataSetPhysicalTableMapS3SourceInputColumn, DataSetPhysicalTableMapS3SourceInputColumnOutput] {
	value := pulumix.Apply[DataSetPhysicalTableMapS3Source](o, func(v DataSetPhysicalTableMapS3Source) []DataSetPhysicalTableMapS3SourceInputColumn {
		return v.InputColumns
	})
	return pulumix.GArrayOutput[DataSetPhysicalTableMapS3SourceInputColumn, DataSetPhysicalTableMapS3SourceInputColumnOutput]{OutputState: value.OutputState}
}

// Information about the format for the S3 source file or files. See upload_settings.
func (o DataSetPhysicalTableMapS3SourceOutput) UploadSettings() pulumix.GPtrOutput[DataSetPhysicalTableMapS3SourceUploadSettings, DataSetPhysicalTableMapS3SourceUploadSettingsOutput] {
	value := pulumix.Apply[DataSetPhysicalTableMapS3Source](o, func(v DataSetPhysicalTableMapS3Source) DataSetPhysicalTableMapS3SourceUploadSettings {
		return v.UploadSettings
	})
	return pulumix.GPtrOutput[DataSetPhysicalTableMapS3SourceUploadSettings, DataSetPhysicalTableMapS3SourceUploadSettingsOutput]{OutputState: value.OutputState}
}

type DataSetPhysicalTableMapS3SourceInputColumn struct {
	// Name of this column in the underlying data source.
	Name string `pulumi:"name"`
	// Data type of the column.
	Type string `pulumi:"type"`
}

type DataSetPhysicalTableMapS3SourceInputColumnArgs struct {
	// Name of this column in the underlying data source.
	Name pulumix.Input[string] `pulumi:"name"`
	// Data type of the column.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (DataSetPhysicalTableMapS3SourceInputColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapS3SourceInputColumn)(nil)).Elem()
}

func (i DataSetPhysicalTableMapS3SourceInputColumnArgs) ToDataSetPhysicalTableMapS3SourceInputColumnOutput() DataSetPhysicalTableMapS3SourceInputColumnOutput {
	return i.ToDataSetPhysicalTableMapS3SourceInputColumnOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapS3SourceInputColumnArgs) ToDataSetPhysicalTableMapS3SourceInputColumnOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceInputColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapS3SourceInputColumnOutput)
}

func (i *DataSetPhysicalTableMapS3SourceInputColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetPhysicalTableMapS3SourceInputColumnArgs] {
	return pulumix.Val(i)
}

type DataSetPhysicalTableMapS3SourceInputColumnOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapS3SourceInputColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapS3SourceInputColumn)(nil)).Elem()
}

func (o DataSetPhysicalTableMapS3SourceInputColumnOutput) ToDataSetPhysicalTableMapS3SourceInputColumnOutput() DataSetPhysicalTableMapS3SourceInputColumnOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourceInputColumnOutput) ToDataSetPhysicalTableMapS3SourceInputColumnOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceInputColumnOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourceInputColumnOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetPhysicalTableMapS3SourceInputColumn] {
	return pulumix.Output[DataSetPhysicalTableMapS3SourceInputColumn]{
		OutputState: o.OutputState,
	}
}

// Name of this column in the underlying data source.
func (o DataSetPhysicalTableMapS3SourceInputColumnOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[DataSetPhysicalTableMapS3SourceInputColumn](o, func(v DataSetPhysicalTableMapS3SourceInputColumn) string { return v.Name })
}

// Data type of the column.
func (o DataSetPhysicalTableMapS3SourceInputColumnOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[DataSetPhysicalTableMapS3SourceInputColumn](o, func(v DataSetPhysicalTableMapS3SourceInputColumn) string { return v.Type })
}

type DataSetPhysicalTableMapS3SourceUploadSettings struct {
	// Whether the file has a header row, or the files each have a header row.
	ContainsHeader *bool `pulumi:"containsHeader"`
	// Delimiter between values in the file.
	Delimiter *string `pulumi:"delimiter"`
	// File format. Valid values are `CSV`, `TSV`, `CLF`, `ELF`, `XLSX`, and `JSON`.
	Format *string `pulumi:"format"`
	// A row number to start reading data from.
	StartFromRow *int `pulumi:"startFromRow"`
	// Text qualifier. Valid values are `DOUBLE_QUOTE` and `SINGLE_QUOTE`.
	TextQualifier *string `pulumi:"textQualifier"`
}

type DataSetPhysicalTableMapS3SourceUploadSettingsArgs struct {
	// Whether the file has a header row, or the files each have a header row.
	ContainsHeader pulumix.Input[*bool] `pulumi:"containsHeader"`
	// Delimiter between values in the file.
	Delimiter pulumix.Input[*string] `pulumi:"delimiter"`
	// File format. Valid values are `CSV`, `TSV`, `CLF`, `ELF`, `XLSX`, and `JSON`.
	Format pulumix.Input[*string] `pulumi:"format"`
	// A row number to start reading data from.
	StartFromRow pulumix.Input[*int] `pulumi:"startFromRow"`
	// Text qualifier. Valid values are `DOUBLE_QUOTE` and `SINGLE_QUOTE`.
	TextQualifier pulumix.Input[*string] `pulumi:"textQualifier"`
}

func (DataSetPhysicalTableMapS3SourceUploadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapS3SourceUploadSettings)(nil)).Elem()
}

func (i DataSetPhysicalTableMapS3SourceUploadSettingsArgs) ToDataSetPhysicalTableMapS3SourceUploadSettingsOutput() DataSetPhysicalTableMapS3SourceUploadSettingsOutput {
	return i.ToDataSetPhysicalTableMapS3SourceUploadSettingsOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapS3SourceUploadSettingsArgs) ToDataSetPhysicalTableMapS3SourceUploadSettingsOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceUploadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapS3SourceUploadSettingsOutput)
}

func (i *DataSetPhysicalTableMapS3SourceUploadSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetPhysicalTableMapS3SourceUploadSettingsArgs] {
	return pulumix.Val(i)
}

type DataSetPhysicalTableMapS3SourceUploadSettingsOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapS3SourceUploadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapS3SourceUploadSettings)(nil)).Elem()
}

func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) ToDataSetPhysicalTableMapS3SourceUploadSettingsOutput() DataSetPhysicalTableMapS3SourceUploadSettingsOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) ToDataSetPhysicalTableMapS3SourceUploadSettingsOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceUploadSettingsOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetPhysicalTableMapS3SourceUploadSettings] {
	return pulumix.Output[DataSetPhysicalTableMapS3SourceUploadSettings]{
		OutputState: o.OutputState,
	}
}

// Whether the file has a header row, or the files each have a header row.
func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) ContainsHeader() pulumix.Output[*bool] {
	return pulumix.Apply[DataSetPhysicalTableMapS3SourceUploadSettings](o, func(v DataSetPhysicalTableMapS3SourceUploadSettings) *bool { return v.ContainsHeader })
}

// Delimiter between values in the file.
func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) Delimiter() pulumix.Output[*string] {
	return pulumix.Apply[DataSetPhysicalTableMapS3SourceUploadSettings](o, func(v DataSetPhysicalTableMapS3SourceUploadSettings) *string { return v.Delimiter })
}

// File format. Valid values are `CSV`, `TSV`, `CLF`, `ELF`, `XLSX`, and `JSON`.
func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) Format() pulumix.Output[*string] {
	return pulumix.Apply[DataSetPhysicalTableMapS3SourceUploadSettings](o, func(v DataSetPhysicalTableMapS3SourceUploadSettings) *string { return v.Format })
}

// A row number to start reading data from.
func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) StartFromRow() pulumix.Output[*int] {
	return pulumix.Apply[DataSetPhysicalTableMapS3SourceUploadSettings](o, func(v DataSetPhysicalTableMapS3SourceUploadSettings) *int { return v.StartFromRow })
}

// Text qualifier. Valid values are `DOUBLE_QUOTE` and `SINGLE_QUOTE`.
func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) TextQualifier() pulumix.Output[*string] {
	return pulumix.Apply[DataSetPhysicalTableMapS3SourceUploadSettings](o, func(v DataSetPhysicalTableMapS3SourceUploadSettings) *string { return v.TextQualifier })
}

type DataSetRefreshProperties struct {
	// The refresh configuration for the data set. See refresh_configuration.
	RefreshConfiguration DataSetRefreshPropertiesRefreshConfiguration `pulumi:"refreshConfiguration"`
}

type DataSetRefreshPropertiesArgs struct {
	// The refresh configuration for the data set. See refresh_configuration.
	RefreshConfiguration pulumix.Input[*DataSetRefreshPropertiesRefreshConfigurationArgs] `pulumi:"refreshConfiguration"`
}

func (DataSetRefreshPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshProperties)(nil)).Elem()
}

func (i DataSetRefreshPropertiesArgs) ToDataSetRefreshPropertiesOutput() DataSetRefreshPropertiesOutput {
	return i.ToDataSetRefreshPropertiesOutputWithContext(context.Background())
}

func (i DataSetRefreshPropertiesArgs) ToDataSetRefreshPropertiesOutputWithContext(ctx context.Context) DataSetRefreshPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesOutput)
}

func (i *DataSetRefreshPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetRefreshPropertiesArgs] {
	return pulumix.Val(i)
}

type DataSetRefreshPropertiesOutput struct{ *pulumi.OutputState }

func (DataSetRefreshPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshProperties)(nil)).Elem()
}

func (o DataSetRefreshPropertiesOutput) ToDataSetRefreshPropertiesOutput() DataSetRefreshPropertiesOutput {
	return o
}

func (o DataSetRefreshPropertiesOutput) ToDataSetRefreshPropertiesOutputWithContext(ctx context.Context) DataSetRefreshPropertiesOutput {
	return o
}

func (o DataSetRefreshPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetRefreshProperties] {
	return pulumix.Output[DataSetRefreshProperties]{
		OutputState: o.OutputState,
	}
}

// The refresh configuration for the data set. See refresh_configuration.
func (o DataSetRefreshPropertiesOutput) RefreshConfiguration() pulumix.GPtrOutput[DataSetRefreshPropertiesRefreshConfiguration, DataSetRefreshPropertiesRefreshConfigurationOutput] {
	value := pulumix.Apply[DataSetRefreshProperties](o, func(v DataSetRefreshProperties) DataSetRefreshPropertiesRefreshConfiguration {
		return v.RefreshConfiguration
	})
	return pulumix.GPtrOutput[DataSetRefreshPropertiesRefreshConfiguration, DataSetRefreshPropertiesRefreshConfigurationOutput]{OutputState: value.OutputState}
}

type DataSetRefreshPropertiesRefreshConfiguration struct {
	// The incremental refresh for the data set. See incremental_refresh.
	IncrementalRefresh DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh `pulumi:"incrementalRefresh"`
}

type DataSetRefreshPropertiesRefreshConfigurationArgs struct {
	// The incremental refresh for the data set. See incremental_refresh.
	IncrementalRefresh pulumix.Input[*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs] `pulumi:"incrementalRefresh"`
}

func (DataSetRefreshPropertiesRefreshConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfiguration)(nil)).Elem()
}

func (i DataSetRefreshPropertiesRefreshConfigurationArgs) ToDataSetRefreshPropertiesRefreshConfigurationOutput() DataSetRefreshPropertiesRefreshConfigurationOutput {
	return i.ToDataSetRefreshPropertiesRefreshConfigurationOutputWithContext(context.Background())
}

func (i DataSetRefreshPropertiesRefreshConfigurationArgs) ToDataSetRefreshPropertiesRefreshConfigurationOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesRefreshConfigurationOutput)
}

func (i *DataSetRefreshPropertiesRefreshConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetRefreshPropertiesRefreshConfigurationArgs] {
	return pulumix.Val(i)
}

type DataSetRefreshPropertiesRefreshConfigurationOutput struct{ *pulumi.OutputState }

func (DataSetRefreshPropertiesRefreshConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfiguration)(nil)).Elem()
}

func (o DataSetRefreshPropertiesRefreshConfigurationOutput) ToDataSetRefreshPropertiesRefreshConfigurationOutput() DataSetRefreshPropertiesRefreshConfigurationOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationOutput) ToDataSetRefreshPropertiesRefreshConfigurationOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetRefreshPropertiesRefreshConfiguration] {
	return pulumix.Output[DataSetRefreshPropertiesRefreshConfiguration]{
		OutputState: o.OutputState,
	}
}

// The incremental refresh for the data set. See incremental_refresh.
func (o DataSetRefreshPropertiesRefreshConfigurationOutput) IncrementalRefresh() pulumix.GPtrOutput[DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh, DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput] {
	value := pulumix.Apply[DataSetRefreshPropertiesRefreshConfiguration](o, func(v DataSetRefreshPropertiesRefreshConfiguration) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh {
		return v.IncrementalRefresh
	})
	return pulumix.GPtrOutput[DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh, DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput]{OutputState: value.OutputState}
}

type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh struct {
	// The lookback window setup for an incremental refresh configuration. See lookback_window.
	LookbackWindow DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow `pulumi:"lookbackWindow"`
}

type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs struct {
	// The lookback window setup for an incremental refresh configuration. See lookback_window.
	LookbackWindow pulumix.Input[*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs] `pulumi:"lookbackWindow"`
}

func (DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh)(nil)).Elem()
}

func (i DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput {
	return i.ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutputWithContext(context.Background())
}

func (i DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput)
}

func (i *DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs] {
	return pulumix.Val(i)
}

type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput struct{ *pulumi.OutputState }

func (DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh)(nil)).Elem()
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh] {
	return pulumix.Output[DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh]{
		OutputState: o.OutputState,
	}
}

// The lookback window setup for an incremental refresh configuration. See lookback_window.
func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput) LookbackWindow() pulumix.GPtrOutput[DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow, DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput] {
	value := pulumix.Apply[DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh](o, func(v DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow {
		return v.LookbackWindow
	})
	return pulumix.GPtrOutput[DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow, DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput]{OutputState: value.OutputState}
}

type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow struct {
	// The name of the lookback window column.
	ColumnName string `pulumi:"columnName"`
	// The lookback window column size.
	Size int `pulumi:"size"`
	// The size unit that is used for the lookback window column. Valid values for this structure are `HOUR`, `DAY`, and `WEEK`.
	SizeUnit string `pulumi:"sizeUnit"`
}

type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs struct {
	// The name of the lookback window column.
	ColumnName pulumix.Input[string] `pulumi:"columnName"`
	// The lookback window column size.
	Size pulumix.Input[int] `pulumi:"size"`
	// The size unit that is used for the lookback window column. Valid values for this structure are `HOUR`, `DAY`, and `WEEK`.
	SizeUnit pulumix.Input[string] `pulumi:"sizeUnit"`
}

func (DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow)(nil)).Elem()
}

func (i DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput {
	return i.ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutputWithContext(context.Background())
}

func (i DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput)
}

func (i *DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs] {
	return pulumix.Val(i)
}

type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput struct{ *pulumi.OutputState }

func (DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow)(nil)).Elem()
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow] {
	return pulumix.Output[DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow]{
		OutputState: o.OutputState,
	}
}

// The name of the lookback window column.
func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput) ColumnName() pulumix.Output[string] {
	return pulumix.Apply[DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow](o, func(v DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow) string {
		return v.ColumnName
	})
}

// The lookback window column size.
func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow](o, func(v DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow) int {
		return v.Size
	})
}

// The size unit that is used for the lookback window column. Valid values for this structure are `HOUR`, `DAY`, and `WEEK`.
func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput) SizeUnit() pulumix.Output[string] {
	return pulumix.Apply[DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow](o, func(v DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow) string {
		return v.SizeUnit
	})
}

type DataSetRowLevelPermissionDataSet struct {
	// ARN of the dataset that contains permissions for RLS.
	Arn string `pulumi:"arn"`
	// User or group rules associated with the dataset that contains permissions for RLS.
	FormatVersion *string `pulumi:"formatVersion"`
	// Namespace associated with the dataset that contains permissions for RLS.
	Namespace *string `pulumi:"namespace"`
	// Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
	PermissionPolicy string `pulumi:"permissionPolicy"`
	// Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
	Status *string `pulumi:"status"`
}

type DataSetRowLevelPermissionDataSetArgs struct {
	// ARN of the dataset that contains permissions for RLS.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// User or group rules associated with the dataset that contains permissions for RLS.
	FormatVersion pulumix.Input[*string] `pulumi:"formatVersion"`
	// Namespace associated with the dataset that contains permissions for RLS.
	Namespace pulumix.Input[*string] `pulumi:"namespace"`
	// Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
	PermissionPolicy pulumix.Input[string] `pulumi:"permissionPolicy"`
	// Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
	Status pulumix.Input[*string] `pulumi:"status"`
}

func (DataSetRowLevelPermissionDataSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (i DataSetRowLevelPermissionDataSetArgs) ToDataSetRowLevelPermissionDataSetOutput() DataSetRowLevelPermissionDataSetOutput {
	return i.ToDataSetRowLevelPermissionDataSetOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionDataSetArgs) ToDataSetRowLevelPermissionDataSetOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionDataSetOutput)
}

func (i *DataSetRowLevelPermissionDataSetArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetRowLevelPermissionDataSetArgs] {
	return pulumix.Val(i)
}

type DataSetRowLevelPermissionDataSetOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionDataSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (o DataSetRowLevelPermissionDataSetOutput) ToDataSetRowLevelPermissionDataSetOutput() DataSetRowLevelPermissionDataSetOutput {
	return o
}

func (o DataSetRowLevelPermissionDataSetOutput) ToDataSetRowLevelPermissionDataSetOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetOutput {
	return o
}

func (o DataSetRowLevelPermissionDataSetOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetRowLevelPermissionDataSet] {
	return pulumix.Output[DataSetRowLevelPermissionDataSet]{
		OutputState: o.OutputState,
	}
}

// ARN of the dataset that contains permissions for RLS.
func (o DataSetRowLevelPermissionDataSetOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[DataSetRowLevelPermissionDataSet](o, func(v DataSetRowLevelPermissionDataSet) string { return v.Arn })
}

// User or group rules associated with the dataset that contains permissions for RLS.
func (o DataSetRowLevelPermissionDataSetOutput) FormatVersion() pulumix.Output[*string] {
	return pulumix.Apply[DataSetRowLevelPermissionDataSet](o, func(v DataSetRowLevelPermissionDataSet) *string { return v.FormatVersion })
}

// Namespace associated with the dataset that contains permissions for RLS.
func (o DataSetRowLevelPermissionDataSetOutput) Namespace() pulumix.Output[*string] {
	return pulumix.Apply[DataSetRowLevelPermissionDataSet](o, func(v DataSetRowLevelPermissionDataSet) *string { return v.Namespace })
}

// Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
func (o DataSetRowLevelPermissionDataSetOutput) PermissionPolicy() pulumix.Output[string] {
	return pulumix.Apply[DataSetRowLevelPermissionDataSet](o, func(v DataSetRowLevelPermissionDataSet) string { return v.PermissionPolicy })
}

// Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
func (o DataSetRowLevelPermissionDataSetOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[DataSetRowLevelPermissionDataSet](o, func(v DataSetRowLevelPermissionDataSet) *string { return v.Status })
}

type DataSetRowLevelPermissionTagConfiguration struct {
	// The status of row-level security tags. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
	Status *string `pulumi:"status"`
	// A set of rules associated with row-level security, such as the tag names and columns that they are assigned to. See tag_rules.
	TagRules []DataSetRowLevelPermissionTagConfigurationTagRule `pulumi:"tagRules"`
}

type DataSetRowLevelPermissionTagConfigurationArgs struct {
	// The status of row-level security tags. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
	Status pulumix.Input[*string] `pulumi:"status"`
	// A set of rules associated with row-level security, such as the tag names and columns that they are assigned to. See tag_rules.
	TagRules pulumix.Input[[]*DataSetRowLevelPermissionTagConfigurationTagRuleArgs] `pulumi:"tagRules"`
}

func (DataSetRowLevelPermissionTagConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (i DataSetRowLevelPermissionTagConfigurationArgs) ToDataSetRowLevelPermissionTagConfigurationOutput() DataSetRowLevelPermissionTagConfigurationOutput {
	return i.ToDataSetRowLevelPermissionTagConfigurationOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionTagConfigurationArgs) ToDataSetRowLevelPermissionTagConfigurationOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionTagConfigurationOutput)
}

func (i *DataSetRowLevelPermissionTagConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetRowLevelPermissionTagConfigurationArgs] {
	return pulumix.Val(i)
}

type DataSetRowLevelPermissionTagConfigurationOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionTagConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (o DataSetRowLevelPermissionTagConfigurationOutput) ToDataSetRowLevelPermissionTagConfigurationOutput() DataSetRowLevelPermissionTagConfigurationOutput {
	return o
}

func (o DataSetRowLevelPermissionTagConfigurationOutput) ToDataSetRowLevelPermissionTagConfigurationOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationOutput {
	return o
}

func (o DataSetRowLevelPermissionTagConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetRowLevelPermissionTagConfiguration] {
	return pulumix.Output[DataSetRowLevelPermissionTagConfiguration]{
		OutputState: o.OutputState,
	}
}

// The status of row-level security tags. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
func (o DataSetRowLevelPermissionTagConfigurationOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[DataSetRowLevelPermissionTagConfiguration](o, func(v DataSetRowLevelPermissionTagConfiguration) *string { return v.Status })
}

// A set of rules associated with row-level security, such as the tag names and columns that they are assigned to. See tag_rules.
func (o DataSetRowLevelPermissionTagConfigurationOutput) TagRules() pulumix.GArrayOutput[DataSetRowLevelPermissionTagConfigurationTagRule, DataSetRowLevelPermissionTagConfigurationTagRuleOutput] {
	value := pulumix.Apply[DataSetRowLevelPermissionTagConfiguration](o, func(v DataSetRowLevelPermissionTagConfiguration) []DataSetRowLevelPermissionTagConfigurationTagRule {
		return v.TagRules
	})
	return pulumix.GArrayOutput[DataSetRowLevelPermissionTagConfigurationTagRule, DataSetRowLevelPermissionTagConfigurationTagRuleOutput]{OutputState: value.OutputState}
}

type DataSetRowLevelPermissionTagConfigurationTagRule struct {
	// Column name that a tag key is assigned to.
	ColumnName string `pulumi:"columnName"`
	// A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one.
	MatchAllValue *string `pulumi:"matchAllValue"`
	// Unique key for a tag.
	TagKey string `pulumi:"tagKey"`
	// A string that you want to use to delimit the values when you pass the values at run time.
	TagMultiValueDelimiter *string `pulumi:"tagMultiValueDelimiter"`
}

type DataSetRowLevelPermissionTagConfigurationTagRuleArgs struct {
	// Column name that a tag key is assigned to.
	ColumnName pulumix.Input[string] `pulumi:"columnName"`
	// A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one.
	MatchAllValue pulumix.Input[*string] `pulumi:"matchAllValue"`
	// Unique key for a tag.
	TagKey pulumix.Input[string] `pulumi:"tagKey"`
	// A string that you want to use to delimit the values when you pass the values at run time.
	TagMultiValueDelimiter pulumix.Input[*string] `pulumi:"tagMultiValueDelimiter"`
}

func (DataSetRowLevelPermissionTagConfigurationTagRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionTagConfigurationTagRule)(nil)).Elem()
}

func (i DataSetRowLevelPermissionTagConfigurationTagRuleArgs) ToDataSetRowLevelPermissionTagConfigurationTagRuleOutput() DataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return i.ToDataSetRowLevelPermissionTagConfigurationTagRuleOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionTagConfigurationTagRuleArgs) ToDataSetRowLevelPermissionTagConfigurationTagRuleOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionTagConfigurationTagRuleOutput)
}

func (i *DataSetRowLevelPermissionTagConfigurationTagRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSetRowLevelPermissionTagConfigurationTagRuleArgs] {
	return pulumix.Val(i)
}

type DataSetRowLevelPermissionTagConfigurationTagRuleOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionTagConfigurationTagRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionTagConfigurationTagRule)(nil)).Elem()
}

func (o DataSetRowLevelPermissionTagConfigurationTagRuleOutput) ToDataSetRowLevelPermissionTagConfigurationTagRuleOutput() DataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return o
}

func (o DataSetRowLevelPermissionTagConfigurationTagRuleOutput) ToDataSetRowLevelPermissionTagConfigurationTagRuleOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return o
}

func (o DataSetRowLevelPermissionTagConfigurationTagRuleOutput) ToOutput(ctx context.Context) pulumix.Output[DataSetRowLevelPermissionTagConfigurationTagRule] {
	return pulumix.Output[DataSetRowLevelPermissionTagConfigurationTagRule]{
		OutputState: o.OutputState,
	}
}

// Column name that a tag key is assigned to.
func (o DataSetRowLevelPermissionTagConfigurationTagRuleOutput) ColumnName() pulumix.Output[string] {
	return pulumix.Apply[DataSetRowLevelPermissionTagConfigurationTagRule](o, func(v DataSetRowLevelPermissionTagConfigurationTagRule) string { return v.ColumnName })
}

// A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one.
func (o DataSetRowLevelPermissionTagConfigurationTagRuleOutput) MatchAllValue() pulumix.Output[*string] {
	return pulumix.Apply[DataSetRowLevelPermissionTagConfigurationTagRule](o, func(v DataSetRowLevelPermissionTagConfigurationTagRule) *string { return v.MatchAllValue })
}

// Unique key for a tag.
func (o DataSetRowLevelPermissionTagConfigurationTagRuleOutput) TagKey() pulumix.Output[string] {
	return pulumix.Apply[DataSetRowLevelPermissionTagConfigurationTagRule](o, func(v DataSetRowLevelPermissionTagConfigurationTagRule) string { return v.TagKey })
}

// A string that you want to use to delimit the values when you pass the values at run time.
func (o DataSetRowLevelPermissionTagConfigurationTagRuleOutput) TagMultiValueDelimiter() pulumix.Output[*string] {
	return pulumix.Apply[DataSetRowLevelPermissionTagConfigurationTagRule](o, func(v DataSetRowLevelPermissionTagConfigurationTagRule) *string { return v.TagMultiValueDelimiter })
}

type DataSourceCredentials struct {
	// The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
	// When the value is not null, the `credentialPair` from the data source in the ARN is used.
	CopySourceArn *string `pulumi:"copySourceArn"`
	// Credential pair. See Credential Pair below for more details.
	CredentialPair *DataSourceCredentialsCredentialPair `pulumi:"credentialPair"`
}

type DataSourceCredentialsArgs struct {
	// The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
	// When the value is not null, the `credentialPair` from the data source in the ARN is used.
	CopySourceArn pulumix.Input[*string] `pulumi:"copySourceArn"`
	// Credential pair. See Credential Pair below for more details.
	CredentialPair pulumix.Input[*DataSourceCredentialsCredentialPairArgs] `pulumi:"credentialPair"`
}

func (DataSourceCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentials)(nil)).Elem()
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsOutput() DataSourceCredentialsOutput {
	return i.ToDataSourceCredentialsOutputWithContext(context.Background())
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsOutputWithContext(ctx context.Context) DataSourceCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsOutput)
}

func (i *DataSourceCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceCredentialsArgs] {
	return pulumix.Val(i)
}

type DataSourceCredentialsOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentials)(nil)).Elem()
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsOutput() DataSourceCredentialsOutput {
	return o
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsOutputWithContext(ctx context.Context) DataSourceCredentialsOutput {
	return o
}

func (o DataSourceCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceCredentials] {
	return pulumix.Output[DataSourceCredentials]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
// When the value is not null, the `credentialPair` from the data source in the ARN is used.
func (o DataSourceCredentialsOutput) CopySourceArn() pulumix.Output[*string] {
	return pulumix.Apply[DataSourceCredentials](o, func(v DataSourceCredentials) *string { return v.CopySourceArn })
}

// Credential pair. See Credential Pair below for more details.
func (o DataSourceCredentialsOutput) CredentialPair() pulumix.GPtrOutput[DataSourceCredentialsCredentialPair, DataSourceCredentialsCredentialPairOutput] {
	value := pulumix.Apply[DataSourceCredentials](o, func(v DataSourceCredentials) *DataSourceCredentialsCredentialPair { return v.CredentialPair })
	return pulumix.GPtrOutput[DataSourceCredentialsCredentialPair, DataSourceCredentialsCredentialPairOutput]{OutputState: value.OutputState}
}

type DataSourceCredentialsCredentialPair struct {
	// Password, maximum length of 1024 characters.
	Password string `pulumi:"password"`
	// User name, maximum length of 64 characters.
	Username string `pulumi:"username"`
}

type DataSourceCredentialsCredentialPairArgs struct {
	// Password, maximum length of 1024 characters.
	Password pulumix.Input[string] `pulumi:"password"`
	// User name, maximum length of 64 characters.
	Username pulumix.Input[string] `pulumi:"username"`
}

func (DataSourceCredentialsCredentialPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentialsCredentialPair)(nil)).Elem()
}

func (i DataSourceCredentialsCredentialPairArgs) ToDataSourceCredentialsCredentialPairOutput() DataSourceCredentialsCredentialPairOutput {
	return i.ToDataSourceCredentialsCredentialPairOutputWithContext(context.Background())
}

func (i DataSourceCredentialsCredentialPairArgs) ToDataSourceCredentialsCredentialPairOutputWithContext(ctx context.Context) DataSourceCredentialsCredentialPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsCredentialPairOutput)
}

func (i *DataSourceCredentialsCredentialPairArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceCredentialsCredentialPairArgs] {
	return pulumix.Val(i)
}

type DataSourceCredentialsCredentialPairOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialsCredentialPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentialsCredentialPair)(nil)).Elem()
}

func (o DataSourceCredentialsCredentialPairOutput) ToDataSourceCredentialsCredentialPairOutput() DataSourceCredentialsCredentialPairOutput {
	return o
}

func (o DataSourceCredentialsCredentialPairOutput) ToDataSourceCredentialsCredentialPairOutputWithContext(ctx context.Context) DataSourceCredentialsCredentialPairOutput {
	return o
}

func (o DataSourceCredentialsCredentialPairOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceCredentialsCredentialPair] {
	return pulumix.Output[DataSourceCredentialsCredentialPair]{
		OutputState: o.OutputState,
	}
}

// Password, maximum length of 1024 characters.
func (o DataSourceCredentialsCredentialPairOutput) Password() pulumix.Output[string] {
	return pulumix.Apply[DataSourceCredentialsCredentialPair](o, func(v DataSourceCredentialsCredentialPair) string { return v.Password })
}

// User name, maximum length of 64 characters.
func (o DataSourceCredentialsCredentialPairOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[DataSourceCredentialsCredentialPair](o, func(v DataSourceCredentialsCredentialPair) string { return v.Username })
}

type DataSourceParameters struct {
	// Parameters for connecting to Amazon Elasticsearch.
	AmazonElasticsearch *DataSourceParametersAmazonElasticsearch `pulumi:"amazonElasticsearch"`
	// Parameters for connecting to Athena.
	Athena *DataSourceParametersAthena `pulumi:"athena"`
	// Parameters for connecting to Aurora MySQL.
	Aurora *DataSourceParametersAurora `pulumi:"aurora"`
	// Parameters for connecting to Aurora Postgresql.
	AuroraPostgresql *DataSourceParametersAuroraPostgresql `pulumi:"auroraPostgresql"`
	// Parameters for connecting to AWS IOT Analytics.
	AwsIotAnalytics *DataSourceParametersAwsIotAnalytics `pulumi:"awsIotAnalytics"`
	// Parameters for connecting to Jira.
	Jira *DataSourceParametersJira `pulumi:"jira"`
	// Parameters for connecting to MariaDB.
	MariaDb *DataSourceParametersMariaDb `pulumi:"mariaDb"`
	// Parameters for connecting to MySQL.
	Mysql *DataSourceParametersMysql `pulumi:"mysql"`
	// Parameters for connecting to Oracle.
	Oracle *DataSourceParametersOracle `pulumi:"oracle"`
	// Parameters for connecting to Postgresql.
	Postgresql *DataSourceParametersPostgresql `pulumi:"postgresql"`
	// Parameters for connecting to Presto.
	Presto *DataSourceParametersPresto `pulumi:"presto"`
	// Parameters for connecting to RDS.
	Rds *DataSourceParametersRds `pulumi:"rds"`
	// Parameters for connecting to Redshift.
	Redshift *DataSourceParametersRedshift `pulumi:"redshift"`
	// Parameters for connecting to S3.
	S3 *DataSourceParametersS3 `pulumi:"s3"`
	// Parameters for connecting to ServiceNow.
	ServiceNow *DataSourceParametersServiceNow `pulumi:"serviceNow"`
	// Parameters for connecting to Snowflake.
	Snowflake *DataSourceParametersSnowflake `pulumi:"snowflake"`
	// Parameters for connecting to Spark.
	Spark *DataSourceParametersSpark `pulumi:"spark"`
	// Parameters for connecting to SQL Server.
	SqlServer *DataSourceParametersSqlServer `pulumi:"sqlServer"`
	// Parameters for connecting to Teradata.
	Teradata *DataSourceParametersTeradata `pulumi:"teradata"`
	// Parameters for connecting to Twitter.
	Twitter *DataSourceParametersTwitter `pulumi:"twitter"`
}

type DataSourceParametersArgs struct {
	// Parameters for connecting to Amazon Elasticsearch.
	AmazonElasticsearch pulumix.Input[*DataSourceParametersAmazonElasticsearchArgs] `pulumi:"amazonElasticsearch"`
	// Parameters for connecting to Athena.
	Athena pulumix.Input[*DataSourceParametersAthenaArgs] `pulumi:"athena"`
	// Parameters for connecting to Aurora MySQL.
	Aurora pulumix.Input[*DataSourceParametersAuroraArgs] `pulumi:"aurora"`
	// Parameters for connecting to Aurora Postgresql.
	AuroraPostgresql pulumix.Input[*DataSourceParametersAuroraPostgresqlArgs] `pulumi:"auroraPostgresql"`
	// Parameters for connecting to AWS IOT Analytics.
	AwsIotAnalytics pulumix.Input[*DataSourceParametersAwsIotAnalyticsArgs] `pulumi:"awsIotAnalytics"`
	// Parameters for connecting to Jira.
	Jira pulumix.Input[*DataSourceParametersJiraArgs] `pulumi:"jira"`
	// Parameters for connecting to MariaDB.
	MariaDb pulumix.Input[*DataSourceParametersMariaDbArgs] `pulumi:"mariaDb"`
	// Parameters for connecting to MySQL.
	Mysql pulumix.Input[*DataSourceParametersMysqlArgs] `pulumi:"mysql"`
	// Parameters for connecting to Oracle.
	Oracle pulumix.Input[*DataSourceParametersOracleArgs] `pulumi:"oracle"`
	// Parameters for connecting to Postgresql.
	Postgresql pulumix.Input[*DataSourceParametersPostgresqlArgs] `pulumi:"postgresql"`
	// Parameters for connecting to Presto.
	Presto pulumix.Input[*DataSourceParametersPrestoArgs] `pulumi:"presto"`
	// Parameters for connecting to RDS.
	Rds pulumix.Input[*DataSourceParametersRdsArgs] `pulumi:"rds"`
	// Parameters for connecting to Redshift.
	Redshift pulumix.Input[*DataSourceParametersRedshiftArgs] `pulumi:"redshift"`
	// Parameters for connecting to S3.
	S3 pulumix.Input[*DataSourceParametersS3Args] `pulumi:"s3"`
	// Parameters for connecting to ServiceNow.
	ServiceNow pulumix.Input[*DataSourceParametersServiceNowArgs] `pulumi:"serviceNow"`
	// Parameters for connecting to Snowflake.
	Snowflake pulumix.Input[*DataSourceParametersSnowflakeArgs] `pulumi:"snowflake"`
	// Parameters for connecting to Spark.
	Spark pulumix.Input[*DataSourceParametersSparkArgs] `pulumi:"spark"`
	// Parameters for connecting to SQL Server.
	SqlServer pulumix.Input[*DataSourceParametersSqlServerArgs] `pulumi:"sqlServer"`
	// Parameters for connecting to Teradata.
	Teradata pulumix.Input[*DataSourceParametersTeradataArgs] `pulumi:"teradata"`
	// Parameters for connecting to Twitter.
	Twitter pulumix.Input[*DataSourceParametersTwitterArgs] `pulumi:"twitter"`
}

func (DataSourceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParameters)(nil)).Elem()
}

func (i DataSourceParametersArgs) ToDataSourceParametersOutput() DataSourceParametersOutput {
	return i.ToDataSourceParametersOutputWithContext(context.Background())
}

func (i DataSourceParametersArgs) ToDataSourceParametersOutputWithContext(ctx context.Context) DataSourceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOutput)
}

func (i *DataSourceParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersOutput struct{ *pulumi.OutputState }

func (DataSourceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParameters)(nil)).Elem()
}

func (o DataSourceParametersOutput) ToDataSourceParametersOutput() DataSourceParametersOutput {
	return o
}

func (o DataSourceParametersOutput) ToDataSourceParametersOutputWithContext(ctx context.Context) DataSourceParametersOutput {
	return o
}

func (o DataSourceParametersOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParameters] {
	return pulumix.Output[DataSourceParameters]{
		OutputState: o.OutputState,
	}
}

// Parameters for connecting to Amazon Elasticsearch.
func (o DataSourceParametersOutput) AmazonElasticsearch() pulumix.GPtrOutput[DataSourceParametersAmazonElasticsearch, DataSourceParametersAmazonElasticsearchOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersAmazonElasticsearch { return v.AmazonElasticsearch })
	return pulumix.GPtrOutput[DataSourceParametersAmazonElasticsearch, DataSourceParametersAmazonElasticsearchOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to Athena.
func (o DataSourceParametersOutput) Athena() pulumix.GPtrOutput[DataSourceParametersAthena, DataSourceParametersAthenaOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersAthena { return v.Athena })
	return pulumix.GPtrOutput[DataSourceParametersAthena, DataSourceParametersAthenaOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to Aurora MySQL.
func (o DataSourceParametersOutput) Aurora() pulumix.GPtrOutput[DataSourceParametersAurora, DataSourceParametersAuroraOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersAurora { return v.Aurora })
	return pulumix.GPtrOutput[DataSourceParametersAurora, DataSourceParametersAuroraOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to Aurora Postgresql.
func (o DataSourceParametersOutput) AuroraPostgresql() pulumix.GPtrOutput[DataSourceParametersAuroraPostgresql, DataSourceParametersAuroraPostgresqlOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersAuroraPostgresql { return v.AuroraPostgresql })
	return pulumix.GPtrOutput[DataSourceParametersAuroraPostgresql, DataSourceParametersAuroraPostgresqlOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to AWS IOT Analytics.
func (o DataSourceParametersOutput) AwsIotAnalytics() pulumix.GPtrOutput[DataSourceParametersAwsIotAnalytics, DataSourceParametersAwsIotAnalyticsOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersAwsIotAnalytics { return v.AwsIotAnalytics })
	return pulumix.GPtrOutput[DataSourceParametersAwsIotAnalytics, DataSourceParametersAwsIotAnalyticsOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to Jira.
func (o DataSourceParametersOutput) Jira() pulumix.GPtrOutput[DataSourceParametersJira, DataSourceParametersJiraOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersJira { return v.Jira })
	return pulumix.GPtrOutput[DataSourceParametersJira, DataSourceParametersJiraOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to MariaDB.
func (o DataSourceParametersOutput) MariaDb() pulumix.GPtrOutput[DataSourceParametersMariaDb, DataSourceParametersMariaDbOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersMariaDb { return v.MariaDb })
	return pulumix.GPtrOutput[DataSourceParametersMariaDb, DataSourceParametersMariaDbOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to MySQL.
func (o DataSourceParametersOutput) Mysql() pulumix.GPtrOutput[DataSourceParametersMysql, DataSourceParametersMysqlOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersMysql { return v.Mysql })
	return pulumix.GPtrOutput[DataSourceParametersMysql, DataSourceParametersMysqlOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to Oracle.
func (o DataSourceParametersOutput) Oracle() pulumix.GPtrOutput[DataSourceParametersOracle, DataSourceParametersOracleOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersOracle { return v.Oracle })
	return pulumix.GPtrOutput[DataSourceParametersOracle, DataSourceParametersOracleOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to Postgresql.
func (o DataSourceParametersOutput) Postgresql() pulumix.GPtrOutput[DataSourceParametersPostgresql, DataSourceParametersPostgresqlOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersPostgresql { return v.Postgresql })
	return pulumix.GPtrOutput[DataSourceParametersPostgresql, DataSourceParametersPostgresqlOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to Presto.
func (o DataSourceParametersOutput) Presto() pulumix.GPtrOutput[DataSourceParametersPresto, DataSourceParametersPrestoOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersPresto { return v.Presto })
	return pulumix.GPtrOutput[DataSourceParametersPresto, DataSourceParametersPrestoOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to RDS.
func (o DataSourceParametersOutput) Rds() pulumix.GPtrOutput[DataSourceParametersRds, DataSourceParametersRdsOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersRds { return v.Rds })
	return pulumix.GPtrOutput[DataSourceParametersRds, DataSourceParametersRdsOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to Redshift.
func (o DataSourceParametersOutput) Redshift() pulumix.GPtrOutput[DataSourceParametersRedshift, DataSourceParametersRedshiftOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersRedshift { return v.Redshift })
	return pulumix.GPtrOutput[DataSourceParametersRedshift, DataSourceParametersRedshiftOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to S3.
func (o DataSourceParametersOutput) S3() pulumix.GPtrOutput[DataSourceParametersS3, DataSourceParametersS3Output] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersS3 { return v.S3 })
	return pulumix.GPtrOutput[DataSourceParametersS3, DataSourceParametersS3Output]{OutputState: value.OutputState}
}

// Parameters for connecting to ServiceNow.
func (o DataSourceParametersOutput) ServiceNow() pulumix.GPtrOutput[DataSourceParametersServiceNow, DataSourceParametersServiceNowOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersServiceNow { return v.ServiceNow })
	return pulumix.GPtrOutput[DataSourceParametersServiceNow, DataSourceParametersServiceNowOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to Snowflake.
func (o DataSourceParametersOutput) Snowflake() pulumix.GPtrOutput[DataSourceParametersSnowflake, DataSourceParametersSnowflakeOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersSnowflake { return v.Snowflake })
	return pulumix.GPtrOutput[DataSourceParametersSnowflake, DataSourceParametersSnowflakeOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to Spark.
func (o DataSourceParametersOutput) Spark() pulumix.GPtrOutput[DataSourceParametersSpark, DataSourceParametersSparkOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersSpark { return v.Spark })
	return pulumix.GPtrOutput[DataSourceParametersSpark, DataSourceParametersSparkOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to SQL Server.
func (o DataSourceParametersOutput) SqlServer() pulumix.GPtrOutput[DataSourceParametersSqlServer, DataSourceParametersSqlServerOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersSqlServer { return v.SqlServer })
	return pulumix.GPtrOutput[DataSourceParametersSqlServer, DataSourceParametersSqlServerOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to Teradata.
func (o DataSourceParametersOutput) Teradata() pulumix.GPtrOutput[DataSourceParametersTeradata, DataSourceParametersTeradataOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersTeradata { return v.Teradata })
	return pulumix.GPtrOutput[DataSourceParametersTeradata, DataSourceParametersTeradataOutput]{OutputState: value.OutputState}
}

// Parameters for connecting to Twitter.
func (o DataSourceParametersOutput) Twitter() pulumix.GPtrOutput[DataSourceParametersTwitter, DataSourceParametersTwitterOutput] {
	value := pulumix.Apply[DataSourceParameters](o, func(v DataSourceParameters) *DataSourceParametersTwitter { return v.Twitter })
	return pulumix.GPtrOutput[DataSourceParametersTwitter, DataSourceParametersTwitterOutput]{OutputState: value.OutputState}
}

type DataSourceParametersAmazonElasticsearch struct {
	// The OpenSearch domain.
	Domain string `pulumi:"domain"`
}

type DataSourceParametersAmazonElasticsearchArgs struct {
	// The OpenSearch domain.
	Domain pulumix.Input[string] `pulumi:"domain"`
}

func (DataSourceParametersAmazonElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAmazonElasticsearch)(nil)).Elem()
}

func (i DataSourceParametersAmazonElasticsearchArgs) ToDataSourceParametersAmazonElasticsearchOutput() DataSourceParametersAmazonElasticsearchOutput {
	return i.ToDataSourceParametersAmazonElasticsearchOutputWithContext(context.Background())
}

func (i DataSourceParametersAmazonElasticsearchArgs) ToDataSourceParametersAmazonElasticsearchOutputWithContext(ctx context.Context) DataSourceParametersAmazonElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAmazonElasticsearchOutput)
}

func (i *DataSourceParametersAmazonElasticsearchArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersAmazonElasticsearchArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersAmazonElasticsearchOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAmazonElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAmazonElasticsearch)(nil)).Elem()
}

func (o DataSourceParametersAmazonElasticsearchOutput) ToDataSourceParametersAmazonElasticsearchOutput() DataSourceParametersAmazonElasticsearchOutput {
	return o
}

func (o DataSourceParametersAmazonElasticsearchOutput) ToDataSourceParametersAmazonElasticsearchOutputWithContext(ctx context.Context) DataSourceParametersAmazonElasticsearchOutput {
	return o
}

func (o DataSourceParametersAmazonElasticsearchOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersAmazonElasticsearch] {
	return pulumix.Output[DataSourceParametersAmazonElasticsearch]{
		OutputState: o.OutputState,
	}
}

// The OpenSearch domain.
func (o DataSourceParametersAmazonElasticsearchOutput) Domain() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersAmazonElasticsearch](o, func(v DataSourceParametersAmazonElasticsearch) string { return v.Domain })
}

type DataSourceParametersAthena struct {
	// The work-group to which to connect.
	WorkGroup *string `pulumi:"workGroup"`
}

type DataSourceParametersAthenaArgs struct {
	// The work-group to which to connect.
	WorkGroup pulumix.Input[*string] `pulumi:"workGroup"`
}

func (DataSourceParametersAthenaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAthena)(nil)).Elem()
}

func (i DataSourceParametersAthenaArgs) ToDataSourceParametersAthenaOutput() DataSourceParametersAthenaOutput {
	return i.ToDataSourceParametersAthenaOutputWithContext(context.Background())
}

func (i DataSourceParametersAthenaArgs) ToDataSourceParametersAthenaOutputWithContext(ctx context.Context) DataSourceParametersAthenaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAthenaOutput)
}

func (i *DataSourceParametersAthenaArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersAthenaArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersAthenaOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAthenaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAthena)(nil)).Elem()
}

func (o DataSourceParametersAthenaOutput) ToDataSourceParametersAthenaOutput() DataSourceParametersAthenaOutput {
	return o
}

func (o DataSourceParametersAthenaOutput) ToDataSourceParametersAthenaOutputWithContext(ctx context.Context) DataSourceParametersAthenaOutput {
	return o
}

func (o DataSourceParametersAthenaOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersAthena] {
	return pulumix.Output[DataSourceParametersAthena]{
		OutputState: o.OutputState,
	}
}

// The work-group to which to connect.
func (o DataSourceParametersAthenaOutput) WorkGroup() pulumix.Output[*string] {
	return pulumix.Apply[DataSourceParametersAthena](o, func(v DataSourceParametersAthena) *string { return v.WorkGroup })
}

type DataSourceParametersAurora struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

type DataSourceParametersAuroraArgs struct {
	// The database to which to connect.
	Database pulumix.Input[string] `pulumi:"database"`
	// The host to which to connect.
	Host pulumix.Input[string] `pulumi:"host"`
	// The port to which to connect.
	Port pulumix.Input[int] `pulumi:"port"`
}

func (DataSourceParametersAuroraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAurora)(nil)).Elem()
}

func (i DataSourceParametersAuroraArgs) ToDataSourceParametersAuroraOutput() DataSourceParametersAuroraOutput {
	return i.ToDataSourceParametersAuroraOutputWithContext(context.Background())
}

func (i DataSourceParametersAuroraArgs) ToDataSourceParametersAuroraOutputWithContext(ctx context.Context) DataSourceParametersAuroraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAuroraOutput)
}

func (i *DataSourceParametersAuroraArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersAuroraArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersAuroraOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAuroraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAurora)(nil)).Elem()
}

func (o DataSourceParametersAuroraOutput) ToDataSourceParametersAuroraOutput() DataSourceParametersAuroraOutput {
	return o
}

func (o DataSourceParametersAuroraOutput) ToDataSourceParametersAuroraOutputWithContext(ctx context.Context) DataSourceParametersAuroraOutput {
	return o
}

func (o DataSourceParametersAuroraOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersAurora] {
	return pulumix.Output[DataSourceParametersAurora]{
		OutputState: o.OutputState,
	}
}

// The database to which to connect.
func (o DataSourceParametersAuroraOutput) Database() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersAurora](o, func(v DataSourceParametersAurora) string { return v.Database })
}

// The host to which to connect.
func (o DataSourceParametersAuroraOutput) Host() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersAurora](o, func(v DataSourceParametersAurora) string { return v.Host })
}

// The port to which to connect.
func (o DataSourceParametersAuroraOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[DataSourceParametersAurora](o, func(v DataSourceParametersAurora) int { return v.Port })
}

type DataSourceParametersAuroraPostgresql struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

type DataSourceParametersAuroraPostgresqlArgs struct {
	// The database to which to connect.
	Database pulumix.Input[string] `pulumi:"database"`
	// The host to which to connect.
	Host pulumix.Input[string] `pulumi:"host"`
	// The port to which to connect.
	Port pulumix.Input[int] `pulumi:"port"`
}

func (DataSourceParametersAuroraPostgresqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAuroraPostgresql)(nil)).Elem()
}

func (i DataSourceParametersAuroraPostgresqlArgs) ToDataSourceParametersAuroraPostgresqlOutput() DataSourceParametersAuroraPostgresqlOutput {
	return i.ToDataSourceParametersAuroraPostgresqlOutputWithContext(context.Background())
}

func (i DataSourceParametersAuroraPostgresqlArgs) ToDataSourceParametersAuroraPostgresqlOutputWithContext(ctx context.Context) DataSourceParametersAuroraPostgresqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAuroraPostgresqlOutput)
}

func (i *DataSourceParametersAuroraPostgresqlArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersAuroraPostgresqlArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersAuroraPostgresqlOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAuroraPostgresqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAuroraPostgresql)(nil)).Elem()
}

func (o DataSourceParametersAuroraPostgresqlOutput) ToDataSourceParametersAuroraPostgresqlOutput() DataSourceParametersAuroraPostgresqlOutput {
	return o
}

func (o DataSourceParametersAuroraPostgresqlOutput) ToDataSourceParametersAuroraPostgresqlOutputWithContext(ctx context.Context) DataSourceParametersAuroraPostgresqlOutput {
	return o
}

func (o DataSourceParametersAuroraPostgresqlOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersAuroraPostgresql] {
	return pulumix.Output[DataSourceParametersAuroraPostgresql]{
		OutputState: o.OutputState,
	}
}

// The database to which to connect.
func (o DataSourceParametersAuroraPostgresqlOutput) Database() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersAuroraPostgresql](o, func(v DataSourceParametersAuroraPostgresql) string { return v.Database })
}

// The host to which to connect.
func (o DataSourceParametersAuroraPostgresqlOutput) Host() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersAuroraPostgresql](o, func(v DataSourceParametersAuroraPostgresql) string { return v.Host })
}

// The port to which to connect.
func (o DataSourceParametersAuroraPostgresqlOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[DataSourceParametersAuroraPostgresql](o, func(v DataSourceParametersAuroraPostgresql) int { return v.Port })
}

type DataSourceParametersAwsIotAnalytics struct {
	// The name of the data set to which to connect.
	DataSetName string `pulumi:"dataSetName"`
}

type DataSourceParametersAwsIotAnalyticsArgs struct {
	// The name of the data set to which to connect.
	DataSetName pulumix.Input[string] `pulumi:"dataSetName"`
}

func (DataSourceParametersAwsIotAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAwsIotAnalytics)(nil)).Elem()
}

func (i DataSourceParametersAwsIotAnalyticsArgs) ToDataSourceParametersAwsIotAnalyticsOutput() DataSourceParametersAwsIotAnalyticsOutput {
	return i.ToDataSourceParametersAwsIotAnalyticsOutputWithContext(context.Background())
}

func (i DataSourceParametersAwsIotAnalyticsArgs) ToDataSourceParametersAwsIotAnalyticsOutputWithContext(ctx context.Context) DataSourceParametersAwsIotAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAwsIotAnalyticsOutput)
}

func (i *DataSourceParametersAwsIotAnalyticsArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersAwsIotAnalyticsArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersAwsIotAnalyticsOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAwsIotAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAwsIotAnalytics)(nil)).Elem()
}

func (o DataSourceParametersAwsIotAnalyticsOutput) ToDataSourceParametersAwsIotAnalyticsOutput() DataSourceParametersAwsIotAnalyticsOutput {
	return o
}

func (o DataSourceParametersAwsIotAnalyticsOutput) ToDataSourceParametersAwsIotAnalyticsOutputWithContext(ctx context.Context) DataSourceParametersAwsIotAnalyticsOutput {
	return o
}

func (o DataSourceParametersAwsIotAnalyticsOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersAwsIotAnalytics] {
	return pulumix.Output[DataSourceParametersAwsIotAnalytics]{
		OutputState: o.OutputState,
	}
}

// The name of the data set to which to connect.
func (o DataSourceParametersAwsIotAnalyticsOutput) DataSetName() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersAwsIotAnalytics](o, func(v DataSourceParametersAwsIotAnalytics) string { return v.DataSetName })
}

type DataSourceParametersJira struct {
	// The base URL of the Jira instance's site to which to connect.
	SiteBaseUrl string `pulumi:"siteBaseUrl"`
}

type DataSourceParametersJiraArgs struct {
	// The base URL of the Jira instance's site to which to connect.
	SiteBaseUrl pulumix.Input[string] `pulumi:"siteBaseUrl"`
}

func (DataSourceParametersJiraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersJira)(nil)).Elem()
}

func (i DataSourceParametersJiraArgs) ToDataSourceParametersJiraOutput() DataSourceParametersJiraOutput {
	return i.ToDataSourceParametersJiraOutputWithContext(context.Background())
}

func (i DataSourceParametersJiraArgs) ToDataSourceParametersJiraOutputWithContext(ctx context.Context) DataSourceParametersJiraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersJiraOutput)
}

func (i *DataSourceParametersJiraArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersJiraArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersJiraOutput struct{ *pulumi.OutputState }

func (DataSourceParametersJiraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersJira)(nil)).Elem()
}

func (o DataSourceParametersJiraOutput) ToDataSourceParametersJiraOutput() DataSourceParametersJiraOutput {
	return o
}

func (o DataSourceParametersJiraOutput) ToDataSourceParametersJiraOutputWithContext(ctx context.Context) DataSourceParametersJiraOutput {
	return o
}

func (o DataSourceParametersJiraOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersJira] {
	return pulumix.Output[DataSourceParametersJira]{
		OutputState: o.OutputState,
	}
}

// The base URL of the Jira instance's site to which to connect.
func (o DataSourceParametersJiraOutput) SiteBaseUrl() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersJira](o, func(v DataSourceParametersJira) string { return v.SiteBaseUrl })
}

type DataSourceParametersMariaDb struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

type DataSourceParametersMariaDbArgs struct {
	// The database to which to connect.
	Database pulumix.Input[string] `pulumi:"database"`
	// The host to which to connect.
	Host pulumix.Input[string] `pulumi:"host"`
	// The port to which to connect.
	Port pulumix.Input[int] `pulumi:"port"`
}

func (DataSourceParametersMariaDbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersMariaDb)(nil)).Elem()
}

func (i DataSourceParametersMariaDbArgs) ToDataSourceParametersMariaDbOutput() DataSourceParametersMariaDbOutput {
	return i.ToDataSourceParametersMariaDbOutputWithContext(context.Background())
}

func (i DataSourceParametersMariaDbArgs) ToDataSourceParametersMariaDbOutputWithContext(ctx context.Context) DataSourceParametersMariaDbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersMariaDbOutput)
}

func (i *DataSourceParametersMariaDbArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersMariaDbArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersMariaDbOutput struct{ *pulumi.OutputState }

func (DataSourceParametersMariaDbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersMariaDb)(nil)).Elem()
}

func (o DataSourceParametersMariaDbOutput) ToDataSourceParametersMariaDbOutput() DataSourceParametersMariaDbOutput {
	return o
}

func (o DataSourceParametersMariaDbOutput) ToDataSourceParametersMariaDbOutputWithContext(ctx context.Context) DataSourceParametersMariaDbOutput {
	return o
}

func (o DataSourceParametersMariaDbOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersMariaDb] {
	return pulumix.Output[DataSourceParametersMariaDb]{
		OutputState: o.OutputState,
	}
}

// The database to which to connect.
func (o DataSourceParametersMariaDbOutput) Database() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersMariaDb](o, func(v DataSourceParametersMariaDb) string { return v.Database })
}

// The host to which to connect.
func (o DataSourceParametersMariaDbOutput) Host() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersMariaDb](o, func(v DataSourceParametersMariaDb) string { return v.Host })
}

// The port to which to connect.
func (o DataSourceParametersMariaDbOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[DataSourceParametersMariaDb](o, func(v DataSourceParametersMariaDb) int { return v.Port })
}

type DataSourceParametersMysql struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

type DataSourceParametersMysqlArgs struct {
	// The database to which to connect.
	Database pulumix.Input[string] `pulumi:"database"`
	// The host to which to connect.
	Host pulumix.Input[string] `pulumi:"host"`
	// The port to which to connect.
	Port pulumix.Input[int] `pulumi:"port"`
}

func (DataSourceParametersMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersMysql)(nil)).Elem()
}

func (i DataSourceParametersMysqlArgs) ToDataSourceParametersMysqlOutput() DataSourceParametersMysqlOutput {
	return i.ToDataSourceParametersMysqlOutputWithContext(context.Background())
}

func (i DataSourceParametersMysqlArgs) ToDataSourceParametersMysqlOutputWithContext(ctx context.Context) DataSourceParametersMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersMysqlOutput)
}

func (i *DataSourceParametersMysqlArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersMysqlArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersMysqlOutput struct{ *pulumi.OutputState }

func (DataSourceParametersMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersMysql)(nil)).Elem()
}

func (o DataSourceParametersMysqlOutput) ToDataSourceParametersMysqlOutput() DataSourceParametersMysqlOutput {
	return o
}

func (o DataSourceParametersMysqlOutput) ToDataSourceParametersMysqlOutputWithContext(ctx context.Context) DataSourceParametersMysqlOutput {
	return o
}

func (o DataSourceParametersMysqlOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersMysql] {
	return pulumix.Output[DataSourceParametersMysql]{
		OutputState: o.OutputState,
	}
}

// The database to which to connect.
func (o DataSourceParametersMysqlOutput) Database() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersMysql](o, func(v DataSourceParametersMysql) string { return v.Database })
}

// The host to which to connect.
func (o DataSourceParametersMysqlOutput) Host() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersMysql](o, func(v DataSourceParametersMysql) string { return v.Host })
}

// The port to which to connect.
func (o DataSourceParametersMysqlOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[DataSourceParametersMysql](o, func(v DataSourceParametersMysql) int { return v.Port })
}

type DataSourceParametersOracle struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

type DataSourceParametersOracleArgs struct {
	// The database to which to connect.
	Database pulumix.Input[string] `pulumi:"database"`
	// The host to which to connect.
	Host pulumix.Input[string] `pulumi:"host"`
	// The port to which to connect.
	Port pulumix.Input[int] `pulumi:"port"`
}

func (DataSourceParametersOracleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersOracle)(nil)).Elem()
}

func (i DataSourceParametersOracleArgs) ToDataSourceParametersOracleOutput() DataSourceParametersOracleOutput {
	return i.ToDataSourceParametersOracleOutputWithContext(context.Background())
}

func (i DataSourceParametersOracleArgs) ToDataSourceParametersOracleOutputWithContext(ctx context.Context) DataSourceParametersOracleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOracleOutput)
}

func (i *DataSourceParametersOracleArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersOracleArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersOracleOutput struct{ *pulumi.OutputState }

func (DataSourceParametersOracleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersOracle)(nil)).Elem()
}

func (o DataSourceParametersOracleOutput) ToDataSourceParametersOracleOutput() DataSourceParametersOracleOutput {
	return o
}

func (o DataSourceParametersOracleOutput) ToDataSourceParametersOracleOutputWithContext(ctx context.Context) DataSourceParametersOracleOutput {
	return o
}

func (o DataSourceParametersOracleOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersOracle] {
	return pulumix.Output[DataSourceParametersOracle]{
		OutputState: o.OutputState,
	}
}

// The database to which to connect.
func (o DataSourceParametersOracleOutput) Database() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersOracle](o, func(v DataSourceParametersOracle) string { return v.Database })
}

// The host to which to connect.
func (o DataSourceParametersOracleOutput) Host() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersOracle](o, func(v DataSourceParametersOracle) string { return v.Host })
}

// The port to which to connect.
func (o DataSourceParametersOracleOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[DataSourceParametersOracle](o, func(v DataSourceParametersOracle) int { return v.Port })
}

type DataSourceParametersPostgresql struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

type DataSourceParametersPostgresqlArgs struct {
	// The database to which to connect.
	Database pulumix.Input[string] `pulumi:"database"`
	// The host to which to connect.
	Host pulumix.Input[string] `pulumi:"host"`
	// The port to which to connect.
	Port pulumix.Input[int] `pulumi:"port"`
}

func (DataSourceParametersPostgresqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersPostgresql)(nil)).Elem()
}

func (i DataSourceParametersPostgresqlArgs) ToDataSourceParametersPostgresqlOutput() DataSourceParametersPostgresqlOutput {
	return i.ToDataSourceParametersPostgresqlOutputWithContext(context.Background())
}

func (i DataSourceParametersPostgresqlArgs) ToDataSourceParametersPostgresqlOutputWithContext(ctx context.Context) DataSourceParametersPostgresqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPostgresqlOutput)
}

func (i *DataSourceParametersPostgresqlArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersPostgresqlArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersPostgresqlOutput struct{ *pulumi.OutputState }

func (DataSourceParametersPostgresqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersPostgresql)(nil)).Elem()
}

func (o DataSourceParametersPostgresqlOutput) ToDataSourceParametersPostgresqlOutput() DataSourceParametersPostgresqlOutput {
	return o
}

func (o DataSourceParametersPostgresqlOutput) ToDataSourceParametersPostgresqlOutputWithContext(ctx context.Context) DataSourceParametersPostgresqlOutput {
	return o
}

func (o DataSourceParametersPostgresqlOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersPostgresql] {
	return pulumix.Output[DataSourceParametersPostgresql]{
		OutputState: o.OutputState,
	}
}

// The database to which to connect.
func (o DataSourceParametersPostgresqlOutput) Database() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersPostgresql](o, func(v DataSourceParametersPostgresql) string { return v.Database })
}

// The host to which to connect.
func (o DataSourceParametersPostgresqlOutput) Host() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersPostgresql](o, func(v DataSourceParametersPostgresql) string { return v.Host })
}

// The port to which to connect.
func (o DataSourceParametersPostgresqlOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[DataSourceParametersPostgresql](o, func(v DataSourceParametersPostgresql) int { return v.Port })
}

type DataSourceParametersPresto struct {
	// The catalog to which to connect.
	Catalog string `pulumi:"catalog"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

type DataSourceParametersPrestoArgs struct {
	// The catalog to which to connect.
	Catalog pulumix.Input[string] `pulumi:"catalog"`
	// The host to which to connect.
	Host pulumix.Input[string] `pulumi:"host"`
	// The port to which to connect.
	Port pulumix.Input[int] `pulumi:"port"`
}

func (DataSourceParametersPrestoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersPresto)(nil)).Elem()
}

func (i DataSourceParametersPrestoArgs) ToDataSourceParametersPrestoOutput() DataSourceParametersPrestoOutput {
	return i.ToDataSourceParametersPrestoOutputWithContext(context.Background())
}

func (i DataSourceParametersPrestoArgs) ToDataSourceParametersPrestoOutputWithContext(ctx context.Context) DataSourceParametersPrestoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPrestoOutput)
}

func (i *DataSourceParametersPrestoArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersPrestoArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersPrestoOutput struct{ *pulumi.OutputState }

func (DataSourceParametersPrestoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersPresto)(nil)).Elem()
}

func (o DataSourceParametersPrestoOutput) ToDataSourceParametersPrestoOutput() DataSourceParametersPrestoOutput {
	return o
}

func (o DataSourceParametersPrestoOutput) ToDataSourceParametersPrestoOutputWithContext(ctx context.Context) DataSourceParametersPrestoOutput {
	return o
}

func (o DataSourceParametersPrestoOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersPresto] {
	return pulumix.Output[DataSourceParametersPresto]{
		OutputState: o.OutputState,
	}
}

// The catalog to which to connect.
func (o DataSourceParametersPrestoOutput) Catalog() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersPresto](o, func(v DataSourceParametersPresto) string { return v.Catalog })
}

// The host to which to connect.
func (o DataSourceParametersPrestoOutput) Host() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersPresto](o, func(v DataSourceParametersPresto) string { return v.Host })
}

// The port to which to connect.
func (o DataSourceParametersPrestoOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[DataSourceParametersPresto](o, func(v DataSourceParametersPresto) int { return v.Port })
}

type DataSourceParametersRds struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The instance ID to which to connect.
	InstanceId string `pulumi:"instanceId"`
}

type DataSourceParametersRdsArgs struct {
	// The database to which to connect.
	Database pulumix.Input[string] `pulumi:"database"`
	// The instance ID to which to connect.
	InstanceId pulumix.Input[string] `pulumi:"instanceId"`
}

func (DataSourceParametersRdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersRds)(nil)).Elem()
}

func (i DataSourceParametersRdsArgs) ToDataSourceParametersRdsOutput() DataSourceParametersRdsOutput {
	return i.ToDataSourceParametersRdsOutputWithContext(context.Background())
}

func (i DataSourceParametersRdsArgs) ToDataSourceParametersRdsOutputWithContext(ctx context.Context) DataSourceParametersRdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersRdsOutput)
}

func (i *DataSourceParametersRdsArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersRdsArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersRdsOutput struct{ *pulumi.OutputState }

func (DataSourceParametersRdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersRds)(nil)).Elem()
}

func (o DataSourceParametersRdsOutput) ToDataSourceParametersRdsOutput() DataSourceParametersRdsOutput {
	return o
}

func (o DataSourceParametersRdsOutput) ToDataSourceParametersRdsOutputWithContext(ctx context.Context) DataSourceParametersRdsOutput {
	return o
}

func (o DataSourceParametersRdsOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersRds] {
	return pulumix.Output[DataSourceParametersRds]{
		OutputState: o.OutputState,
	}
}

// The database to which to connect.
func (o DataSourceParametersRdsOutput) Database() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersRds](o, func(v DataSourceParametersRds) string { return v.Database })
}

// The instance ID to which to connect.
func (o DataSourceParametersRdsOutput) InstanceId() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersRds](o, func(v DataSourceParametersRds) string { return v.InstanceId })
}

type DataSourceParametersRedshift struct {
	// The ID of the cluster to which to connect.
	ClusterId *string `pulumi:"clusterId"`
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host *string `pulumi:"host"`
	// The port to which to connect.
	Port *int `pulumi:"port"`
}

type DataSourceParametersRedshiftArgs struct {
	// The ID of the cluster to which to connect.
	ClusterId pulumix.Input[*string] `pulumi:"clusterId"`
	// The database to which to connect.
	Database pulumix.Input[string] `pulumi:"database"`
	// The host to which to connect.
	Host pulumix.Input[*string] `pulumi:"host"`
	// The port to which to connect.
	Port pulumix.Input[*int] `pulumi:"port"`
}

func (DataSourceParametersRedshiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersRedshift)(nil)).Elem()
}

func (i DataSourceParametersRedshiftArgs) ToDataSourceParametersRedshiftOutput() DataSourceParametersRedshiftOutput {
	return i.ToDataSourceParametersRedshiftOutputWithContext(context.Background())
}

func (i DataSourceParametersRedshiftArgs) ToDataSourceParametersRedshiftOutputWithContext(ctx context.Context) DataSourceParametersRedshiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersRedshiftOutput)
}

func (i *DataSourceParametersRedshiftArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersRedshiftArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersRedshiftOutput struct{ *pulumi.OutputState }

func (DataSourceParametersRedshiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersRedshift)(nil)).Elem()
}

func (o DataSourceParametersRedshiftOutput) ToDataSourceParametersRedshiftOutput() DataSourceParametersRedshiftOutput {
	return o
}

func (o DataSourceParametersRedshiftOutput) ToDataSourceParametersRedshiftOutputWithContext(ctx context.Context) DataSourceParametersRedshiftOutput {
	return o
}

func (o DataSourceParametersRedshiftOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersRedshift] {
	return pulumix.Output[DataSourceParametersRedshift]{
		OutputState: o.OutputState,
	}
}

// The ID of the cluster to which to connect.
func (o DataSourceParametersRedshiftOutput) ClusterId() pulumix.Output[*string] {
	return pulumix.Apply[DataSourceParametersRedshift](o, func(v DataSourceParametersRedshift) *string { return v.ClusterId })
}

// The database to which to connect.
func (o DataSourceParametersRedshiftOutput) Database() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersRedshift](o, func(v DataSourceParametersRedshift) string { return v.Database })
}

// The host to which to connect.
func (o DataSourceParametersRedshiftOutput) Host() pulumix.Output[*string] {
	return pulumix.Apply[DataSourceParametersRedshift](o, func(v DataSourceParametersRedshift) *string { return v.Host })
}

// The port to which to connect.
func (o DataSourceParametersRedshiftOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[DataSourceParametersRedshift](o, func(v DataSourceParametersRedshift) *int { return v.Port })
}

type DataSourceParametersS3 struct {
	// An object containing the S3 location of the S3 manifest file.
	ManifestFileLocation DataSourceParametersS3ManifestFileLocation `pulumi:"manifestFileLocation"`
}

type DataSourceParametersS3Args struct {
	// An object containing the S3 location of the S3 manifest file.
	ManifestFileLocation pulumix.Input[*DataSourceParametersS3ManifestFileLocationArgs] `pulumi:"manifestFileLocation"`
}

func (DataSourceParametersS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersS3)(nil)).Elem()
}

func (i DataSourceParametersS3Args) ToDataSourceParametersS3Output() DataSourceParametersS3Output {
	return i.ToDataSourceParametersS3OutputWithContext(context.Background())
}

func (i DataSourceParametersS3Args) ToDataSourceParametersS3OutputWithContext(ctx context.Context) DataSourceParametersS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersS3Output)
}

func (i *DataSourceParametersS3Args) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersS3Args] {
	return pulumix.Val(i)
}

type DataSourceParametersS3Output struct{ *pulumi.OutputState }

func (DataSourceParametersS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersS3)(nil)).Elem()
}

func (o DataSourceParametersS3Output) ToDataSourceParametersS3Output() DataSourceParametersS3Output {
	return o
}

func (o DataSourceParametersS3Output) ToDataSourceParametersS3OutputWithContext(ctx context.Context) DataSourceParametersS3Output {
	return o
}

func (o DataSourceParametersS3Output) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersS3] {
	return pulumix.Output[DataSourceParametersS3]{
		OutputState: o.OutputState,
	}
}

// An object containing the S3 location of the S3 manifest file.
func (o DataSourceParametersS3Output) ManifestFileLocation() pulumix.GPtrOutput[DataSourceParametersS3ManifestFileLocation, DataSourceParametersS3ManifestFileLocationOutput] {
	value := pulumix.Apply[DataSourceParametersS3](o, func(v DataSourceParametersS3) DataSourceParametersS3ManifestFileLocation {
		return v.ManifestFileLocation
	})
	return pulumix.GPtrOutput[DataSourceParametersS3ManifestFileLocation, DataSourceParametersS3ManifestFileLocationOutput]{OutputState: value.OutputState}
}

type DataSourceParametersS3ManifestFileLocation struct {
	// The name of the bucket that contains the manifest file.
	Bucket string `pulumi:"bucket"`
	// The key of the manifest file within the bucket.
	Key string `pulumi:"key"`
}

type DataSourceParametersS3ManifestFileLocationArgs struct {
	// The name of the bucket that contains the manifest file.
	Bucket pulumix.Input[string] `pulumi:"bucket"`
	// The key of the manifest file within the bucket.
	Key pulumix.Input[string] `pulumi:"key"`
}

func (DataSourceParametersS3ManifestFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersS3ManifestFileLocation)(nil)).Elem()
}

func (i DataSourceParametersS3ManifestFileLocationArgs) ToDataSourceParametersS3ManifestFileLocationOutput() DataSourceParametersS3ManifestFileLocationOutput {
	return i.ToDataSourceParametersS3ManifestFileLocationOutputWithContext(context.Background())
}

func (i DataSourceParametersS3ManifestFileLocationArgs) ToDataSourceParametersS3ManifestFileLocationOutputWithContext(ctx context.Context) DataSourceParametersS3ManifestFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersS3ManifestFileLocationOutput)
}

func (i *DataSourceParametersS3ManifestFileLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersS3ManifestFileLocationArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersS3ManifestFileLocationOutput struct{ *pulumi.OutputState }

func (DataSourceParametersS3ManifestFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersS3ManifestFileLocation)(nil)).Elem()
}

func (o DataSourceParametersS3ManifestFileLocationOutput) ToDataSourceParametersS3ManifestFileLocationOutput() DataSourceParametersS3ManifestFileLocationOutput {
	return o
}

func (o DataSourceParametersS3ManifestFileLocationOutput) ToDataSourceParametersS3ManifestFileLocationOutputWithContext(ctx context.Context) DataSourceParametersS3ManifestFileLocationOutput {
	return o
}

func (o DataSourceParametersS3ManifestFileLocationOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersS3ManifestFileLocation] {
	return pulumix.Output[DataSourceParametersS3ManifestFileLocation]{
		OutputState: o.OutputState,
	}
}

// The name of the bucket that contains the manifest file.
func (o DataSourceParametersS3ManifestFileLocationOutput) Bucket() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersS3ManifestFileLocation](o, func(v DataSourceParametersS3ManifestFileLocation) string { return v.Bucket })
}

// The key of the manifest file within the bucket.
func (o DataSourceParametersS3ManifestFileLocationOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersS3ManifestFileLocation](o, func(v DataSourceParametersS3ManifestFileLocation) string { return v.Key })
}

type DataSourceParametersServiceNow struct {
	// The base URL of the Jira instance's site to which to connect.
	SiteBaseUrl string `pulumi:"siteBaseUrl"`
}

type DataSourceParametersServiceNowArgs struct {
	// The base URL of the Jira instance's site to which to connect.
	SiteBaseUrl pulumix.Input[string] `pulumi:"siteBaseUrl"`
}

func (DataSourceParametersServiceNowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersServiceNow)(nil)).Elem()
}

func (i DataSourceParametersServiceNowArgs) ToDataSourceParametersServiceNowOutput() DataSourceParametersServiceNowOutput {
	return i.ToDataSourceParametersServiceNowOutputWithContext(context.Background())
}

func (i DataSourceParametersServiceNowArgs) ToDataSourceParametersServiceNowOutputWithContext(ctx context.Context) DataSourceParametersServiceNowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersServiceNowOutput)
}

func (i *DataSourceParametersServiceNowArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersServiceNowArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersServiceNowOutput struct{ *pulumi.OutputState }

func (DataSourceParametersServiceNowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersServiceNow)(nil)).Elem()
}

func (o DataSourceParametersServiceNowOutput) ToDataSourceParametersServiceNowOutput() DataSourceParametersServiceNowOutput {
	return o
}

func (o DataSourceParametersServiceNowOutput) ToDataSourceParametersServiceNowOutputWithContext(ctx context.Context) DataSourceParametersServiceNowOutput {
	return o
}

func (o DataSourceParametersServiceNowOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersServiceNow] {
	return pulumix.Output[DataSourceParametersServiceNow]{
		OutputState: o.OutputState,
	}
}

// The base URL of the Jira instance's site to which to connect.
func (o DataSourceParametersServiceNowOutput) SiteBaseUrl() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersServiceNow](o, func(v DataSourceParametersServiceNow) string { return v.SiteBaseUrl })
}

type DataSourceParametersSnowflake struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The warehouse to which to connect.
	Warehouse string `pulumi:"warehouse"`
}

type DataSourceParametersSnowflakeArgs struct {
	// The database to which to connect.
	Database pulumix.Input[string] `pulumi:"database"`
	// The host to which to connect.
	Host pulumix.Input[string] `pulumi:"host"`
	// The warehouse to which to connect.
	Warehouse pulumix.Input[string] `pulumi:"warehouse"`
}

func (DataSourceParametersSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSnowflake)(nil)).Elem()
}

func (i DataSourceParametersSnowflakeArgs) ToDataSourceParametersSnowflakeOutput() DataSourceParametersSnowflakeOutput {
	return i.ToDataSourceParametersSnowflakeOutputWithContext(context.Background())
}

func (i DataSourceParametersSnowflakeArgs) ToDataSourceParametersSnowflakeOutputWithContext(ctx context.Context) DataSourceParametersSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSnowflakeOutput)
}

func (i *DataSourceParametersSnowflakeArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersSnowflakeArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersSnowflakeOutput struct{ *pulumi.OutputState }

func (DataSourceParametersSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSnowflake)(nil)).Elem()
}

func (o DataSourceParametersSnowflakeOutput) ToDataSourceParametersSnowflakeOutput() DataSourceParametersSnowflakeOutput {
	return o
}

func (o DataSourceParametersSnowflakeOutput) ToDataSourceParametersSnowflakeOutputWithContext(ctx context.Context) DataSourceParametersSnowflakeOutput {
	return o
}

func (o DataSourceParametersSnowflakeOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersSnowflake] {
	return pulumix.Output[DataSourceParametersSnowflake]{
		OutputState: o.OutputState,
	}
}

// The database to which to connect.
func (o DataSourceParametersSnowflakeOutput) Database() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersSnowflake](o, func(v DataSourceParametersSnowflake) string { return v.Database })
}

// The host to which to connect.
func (o DataSourceParametersSnowflakeOutput) Host() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersSnowflake](o, func(v DataSourceParametersSnowflake) string { return v.Host })
}

// The warehouse to which to connect.
func (o DataSourceParametersSnowflakeOutput) Warehouse() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersSnowflake](o, func(v DataSourceParametersSnowflake) string { return v.Warehouse })
}

type DataSourceParametersSpark struct {
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The warehouse to which to connect.
	Port int `pulumi:"port"`
}

type DataSourceParametersSparkArgs struct {
	// The host to which to connect.
	Host pulumix.Input[string] `pulumi:"host"`
	// The warehouse to which to connect.
	Port pulumix.Input[int] `pulumi:"port"`
}

func (DataSourceParametersSparkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSpark)(nil)).Elem()
}

func (i DataSourceParametersSparkArgs) ToDataSourceParametersSparkOutput() DataSourceParametersSparkOutput {
	return i.ToDataSourceParametersSparkOutputWithContext(context.Background())
}

func (i DataSourceParametersSparkArgs) ToDataSourceParametersSparkOutputWithContext(ctx context.Context) DataSourceParametersSparkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSparkOutput)
}

func (i *DataSourceParametersSparkArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersSparkArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersSparkOutput struct{ *pulumi.OutputState }

func (DataSourceParametersSparkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSpark)(nil)).Elem()
}

func (o DataSourceParametersSparkOutput) ToDataSourceParametersSparkOutput() DataSourceParametersSparkOutput {
	return o
}

func (o DataSourceParametersSparkOutput) ToDataSourceParametersSparkOutputWithContext(ctx context.Context) DataSourceParametersSparkOutput {
	return o
}

func (o DataSourceParametersSparkOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersSpark] {
	return pulumix.Output[DataSourceParametersSpark]{
		OutputState: o.OutputState,
	}
}

// The host to which to connect.
func (o DataSourceParametersSparkOutput) Host() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersSpark](o, func(v DataSourceParametersSpark) string { return v.Host })
}

// The warehouse to which to connect.
func (o DataSourceParametersSparkOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[DataSourceParametersSpark](o, func(v DataSourceParametersSpark) int { return v.Port })
}

type DataSourceParametersSqlServer struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The warehouse to which to connect.
	Port int `pulumi:"port"`
}

type DataSourceParametersSqlServerArgs struct {
	// The database to which to connect.
	Database pulumix.Input[string] `pulumi:"database"`
	// The host to which to connect.
	Host pulumix.Input[string] `pulumi:"host"`
	// The warehouse to which to connect.
	Port pulumix.Input[int] `pulumi:"port"`
}

func (DataSourceParametersSqlServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSqlServer)(nil)).Elem()
}

func (i DataSourceParametersSqlServerArgs) ToDataSourceParametersSqlServerOutput() DataSourceParametersSqlServerOutput {
	return i.ToDataSourceParametersSqlServerOutputWithContext(context.Background())
}

func (i DataSourceParametersSqlServerArgs) ToDataSourceParametersSqlServerOutputWithContext(ctx context.Context) DataSourceParametersSqlServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSqlServerOutput)
}

func (i *DataSourceParametersSqlServerArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersSqlServerArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersSqlServerOutput struct{ *pulumi.OutputState }

func (DataSourceParametersSqlServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSqlServer)(nil)).Elem()
}

func (o DataSourceParametersSqlServerOutput) ToDataSourceParametersSqlServerOutput() DataSourceParametersSqlServerOutput {
	return o
}

func (o DataSourceParametersSqlServerOutput) ToDataSourceParametersSqlServerOutputWithContext(ctx context.Context) DataSourceParametersSqlServerOutput {
	return o
}

func (o DataSourceParametersSqlServerOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersSqlServer] {
	return pulumix.Output[DataSourceParametersSqlServer]{
		OutputState: o.OutputState,
	}
}

// The database to which to connect.
func (o DataSourceParametersSqlServerOutput) Database() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersSqlServer](o, func(v DataSourceParametersSqlServer) string { return v.Database })
}

// The host to which to connect.
func (o DataSourceParametersSqlServerOutput) Host() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersSqlServer](o, func(v DataSourceParametersSqlServer) string { return v.Host })
}

// The warehouse to which to connect.
func (o DataSourceParametersSqlServerOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[DataSourceParametersSqlServer](o, func(v DataSourceParametersSqlServer) int { return v.Port })
}

type DataSourceParametersTeradata struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The warehouse to which to connect.
	Port int `pulumi:"port"`
}

type DataSourceParametersTeradataArgs struct {
	// The database to which to connect.
	Database pulumix.Input[string] `pulumi:"database"`
	// The host to which to connect.
	Host pulumix.Input[string] `pulumi:"host"`
	// The warehouse to which to connect.
	Port pulumix.Input[int] `pulumi:"port"`
}

func (DataSourceParametersTeradataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersTeradata)(nil)).Elem()
}

func (i DataSourceParametersTeradataArgs) ToDataSourceParametersTeradataOutput() DataSourceParametersTeradataOutput {
	return i.ToDataSourceParametersTeradataOutputWithContext(context.Background())
}

func (i DataSourceParametersTeradataArgs) ToDataSourceParametersTeradataOutputWithContext(ctx context.Context) DataSourceParametersTeradataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersTeradataOutput)
}

func (i *DataSourceParametersTeradataArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersTeradataArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersTeradataOutput struct{ *pulumi.OutputState }

func (DataSourceParametersTeradataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersTeradata)(nil)).Elem()
}

func (o DataSourceParametersTeradataOutput) ToDataSourceParametersTeradataOutput() DataSourceParametersTeradataOutput {
	return o
}

func (o DataSourceParametersTeradataOutput) ToDataSourceParametersTeradataOutputWithContext(ctx context.Context) DataSourceParametersTeradataOutput {
	return o
}

func (o DataSourceParametersTeradataOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersTeradata] {
	return pulumix.Output[DataSourceParametersTeradata]{
		OutputState: o.OutputState,
	}
}

// The database to which to connect.
func (o DataSourceParametersTeradataOutput) Database() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersTeradata](o, func(v DataSourceParametersTeradata) string { return v.Database })
}

// The host to which to connect.
func (o DataSourceParametersTeradataOutput) Host() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersTeradata](o, func(v DataSourceParametersTeradata) string { return v.Host })
}

// The warehouse to which to connect.
func (o DataSourceParametersTeradataOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[DataSourceParametersTeradata](o, func(v DataSourceParametersTeradata) int { return v.Port })
}

type DataSourceParametersTwitter struct {
	// The maximum number of rows to query.
	MaxRows int `pulumi:"maxRows"`
	// The Twitter query to retrieve the data.
	Query string `pulumi:"query"`
}

type DataSourceParametersTwitterArgs struct {
	// The maximum number of rows to query.
	MaxRows pulumix.Input[int] `pulumi:"maxRows"`
	// The Twitter query to retrieve the data.
	Query pulumix.Input[string] `pulumi:"query"`
}

func (DataSourceParametersTwitterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersTwitter)(nil)).Elem()
}

func (i DataSourceParametersTwitterArgs) ToDataSourceParametersTwitterOutput() DataSourceParametersTwitterOutput {
	return i.ToDataSourceParametersTwitterOutputWithContext(context.Background())
}

func (i DataSourceParametersTwitterArgs) ToDataSourceParametersTwitterOutputWithContext(ctx context.Context) DataSourceParametersTwitterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersTwitterOutput)
}

func (i *DataSourceParametersTwitterArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceParametersTwitterArgs] {
	return pulumix.Val(i)
}

type DataSourceParametersTwitterOutput struct{ *pulumi.OutputState }

func (DataSourceParametersTwitterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersTwitter)(nil)).Elem()
}

func (o DataSourceParametersTwitterOutput) ToDataSourceParametersTwitterOutput() DataSourceParametersTwitterOutput {
	return o
}

func (o DataSourceParametersTwitterOutput) ToDataSourceParametersTwitterOutputWithContext(ctx context.Context) DataSourceParametersTwitterOutput {
	return o
}

func (o DataSourceParametersTwitterOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceParametersTwitter] {
	return pulumix.Output[DataSourceParametersTwitter]{
		OutputState: o.OutputState,
	}
}

// The maximum number of rows to query.
func (o DataSourceParametersTwitterOutput) MaxRows() pulumix.Output[int] {
	return pulumix.Apply[DataSourceParametersTwitter](o, func(v DataSourceParametersTwitter) int { return v.MaxRows })
}

// The Twitter query to retrieve the data.
func (o DataSourceParametersTwitterOutput) Query() pulumix.Output[string] {
	return pulumix.Apply[DataSourceParametersTwitter](o, func(v DataSourceParametersTwitter) string { return v.Query })
}

type DataSourcePermission struct {
	// Set of IAM actions to grant or revoke permissions on. Max of 16 items.
	Actions []string `pulumi:"actions"`
	// The Amazon Resource Name (ARN) of the principal.
	Principal string `pulumi:"principal"`
}

type DataSourcePermissionArgs struct {
	// Set of IAM actions to grant or revoke permissions on. Max of 16 items.
	Actions pulumix.Input[[]string] `pulumi:"actions"`
	// The Amazon Resource Name (ARN) of the principal.
	Principal pulumix.Input[string] `pulumi:"principal"`
}

func (DataSourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePermission)(nil)).Elem()
}

func (i DataSourcePermissionArgs) ToDataSourcePermissionOutput() DataSourcePermissionOutput {
	return i.ToDataSourcePermissionOutputWithContext(context.Background())
}

func (i DataSourcePermissionArgs) ToDataSourcePermissionOutputWithContext(ctx context.Context) DataSourcePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePermissionOutput)
}

func (i *DataSourcePermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourcePermissionArgs] {
	return pulumix.Val(i)
}

type DataSourcePermissionOutput struct{ *pulumi.OutputState }

func (DataSourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePermission)(nil)).Elem()
}

func (o DataSourcePermissionOutput) ToDataSourcePermissionOutput() DataSourcePermissionOutput {
	return o
}

func (o DataSourcePermissionOutput) ToDataSourcePermissionOutputWithContext(ctx context.Context) DataSourcePermissionOutput {
	return o
}

func (o DataSourcePermissionOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourcePermission] {
	return pulumix.Output[DataSourcePermission]{
		OutputState: o.OutputState,
	}
}

// Set of IAM actions to grant or revoke permissions on. Max of 16 items.
func (o DataSourcePermissionOutput) Actions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DataSourcePermission](o, func(v DataSourcePermission) []string { return v.Actions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The Amazon Resource Name (ARN) of the principal.
func (o DataSourcePermissionOutput) Principal() pulumix.Output[string] {
	return pulumix.Apply[DataSourcePermission](o, func(v DataSourcePermission) string { return v.Principal })
}

type DataSourceSslProperties struct {
	// A Boolean option to control whether SSL should be disabled.
	DisableSsl bool `pulumi:"disableSsl"`
}

type DataSourceSslPropertiesArgs struct {
	// A Boolean option to control whether SSL should be disabled.
	DisableSsl pulumix.Input[bool] `pulumi:"disableSsl"`
}

func (DataSourceSslPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSslProperties)(nil)).Elem()
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesOutput() DataSourceSslPropertiesOutput {
	return i.ToDataSourceSslPropertiesOutputWithContext(context.Background())
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesOutputWithContext(ctx context.Context) DataSourceSslPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSslPropertiesOutput)
}

func (i *DataSourceSslPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceSslPropertiesArgs] {
	return pulumix.Val(i)
}

type DataSourceSslPropertiesOutput struct{ *pulumi.OutputState }

func (DataSourceSslPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSslProperties)(nil)).Elem()
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesOutput() DataSourceSslPropertiesOutput {
	return o
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesOutputWithContext(ctx context.Context) DataSourceSslPropertiesOutput {
	return o
}

func (o DataSourceSslPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceSslProperties] {
	return pulumix.Output[DataSourceSslProperties]{
		OutputState: o.OutputState,
	}
}

// A Boolean option to control whether SSL should be disabled.
func (o DataSourceSslPropertiesOutput) DisableSsl() pulumix.Output[bool] {
	return pulumix.Apply[DataSourceSslProperties](o, func(v DataSourceSslProperties) bool { return v.DisableSsl })
}

type DataSourceVpcConnectionProperties struct {
	// The Amazon Resource Name (ARN) for the VPC connection.
	VpcConnectionArn string `pulumi:"vpcConnectionArn"`
}

type DataSourceVpcConnectionPropertiesArgs struct {
	// The Amazon Resource Name (ARN) for the VPC connection.
	VpcConnectionArn pulumix.Input[string] `pulumi:"vpcConnectionArn"`
}

func (DataSourceVpcConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesOutput() DataSourceVpcConnectionPropertiesOutput {
	return i.ToDataSourceVpcConnectionPropertiesOutputWithContext(context.Background())
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceVpcConnectionPropertiesOutput)
}

func (i *DataSourceVpcConnectionPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceVpcConnectionPropertiesArgs] {
	return pulumix.Val(i)
}

type DataSourceVpcConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (DataSourceVpcConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesOutput() DataSourceVpcConnectionPropertiesOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceVpcConnectionProperties] {
	return pulumix.Output[DataSourceVpcConnectionProperties]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) for the VPC connection.
func (o DataSourceVpcConnectionPropertiesOutput) VpcConnectionArn() pulumix.Output[string] {
	return pulumix.Apply[DataSourceVpcConnectionProperties](o, func(v DataSourceVpcConnectionProperties) string { return v.VpcConnectionArn })
}

type FolderPermission struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions []string `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal string `pulumi:"principal"`
}

type FolderPermissionArgs struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions pulumix.Input[[]string] `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal pulumix.Input[string] `pulumi:"principal"`
}

func (FolderPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermission)(nil)).Elem()
}

func (i FolderPermissionArgs) ToFolderPermissionOutput() FolderPermissionOutput {
	return i.ToFolderPermissionOutputWithContext(context.Background())
}

func (i FolderPermissionArgs) ToFolderPermissionOutputWithContext(ctx context.Context) FolderPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionOutput)
}

func (i *FolderPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*FolderPermissionArgs] {
	return pulumix.Val(i)
}

type FolderPermissionOutput struct{ *pulumi.OutputState }

func (FolderPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermission)(nil)).Elem()
}

func (o FolderPermissionOutput) ToFolderPermissionOutput() FolderPermissionOutput {
	return o
}

func (o FolderPermissionOutput) ToFolderPermissionOutputWithContext(ctx context.Context) FolderPermissionOutput {
	return o
}

func (o FolderPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[FolderPermission] {
	return pulumix.Output[FolderPermission]{
		OutputState: o.OutputState,
	}
}

// List of IAM actions to grant or revoke permissions on.
func (o FolderPermissionOutput) Actions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FolderPermission](o, func(v FolderPermission) []string { return v.Actions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
func (o FolderPermissionOutput) Principal() pulumix.Output[string] {
	return pulumix.Apply[FolderPermission](o, func(v FolderPermission) string { return v.Principal })
}

type IamPolicyAssignmentIdentities struct {
	Groups []string `pulumi:"groups"`
	// Array of Quicksight user names to assign the policy to.
	Users []string `pulumi:"users"`
}

type IamPolicyAssignmentIdentitiesArgs struct {
	Groups pulumix.Input[[]string] `pulumi:"groups"`
	// Array of Quicksight user names to assign the policy to.
	Users pulumix.Input[[]string] `pulumi:"users"`
}

func (IamPolicyAssignmentIdentitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IamPolicyAssignmentIdentities)(nil)).Elem()
}

func (i IamPolicyAssignmentIdentitiesArgs) ToIamPolicyAssignmentIdentitiesOutput() IamPolicyAssignmentIdentitiesOutput {
	return i.ToIamPolicyAssignmentIdentitiesOutputWithContext(context.Background())
}

func (i IamPolicyAssignmentIdentitiesArgs) ToIamPolicyAssignmentIdentitiesOutputWithContext(ctx context.Context) IamPolicyAssignmentIdentitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyAssignmentIdentitiesOutput)
}

func (i *IamPolicyAssignmentIdentitiesArgs) ToOutput(ctx context.Context) pulumix.Output[*IamPolicyAssignmentIdentitiesArgs] {
	return pulumix.Val(i)
}

type IamPolicyAssignmentIdentitiesOutput struct{ *pulumi.OutputState }

func (IamPolicyAssignmentIdentitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IamPolicyAssignmentIdentities)(nil)).Elem()
}

func (o IamPolicyAssignmentIdentitiesOutput) ToIamPolicyAssignmentIdentitiesOutput() IamPolicyAssignmentIdentitiesOutput {
	return o
}

func (o IamPolicyAssignmentIdentitiesOutput) ToIamPolicyAssignmentIdentitiesOutputWithContext(ctx context.Context) IamPolicyAssignmentIdentitiesOutput {
	return o
}

func (o IamPolicyAssignmentIdentitiesOutput) ToOutput(ctx context.Context) pulumix.Output[IamPolicyAssignmentIdentities] {
	return pulumix.Output[IamPolicyAssignmentIdentities]{
		OutputState: o.OutputState,
	}
}

func (o IamPolicyAssignmentIdentitiesOutput) Groups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[IamPolicyAssignmentIdentities](o, func(v IamPolicyAssignmentIdentities) []string { return v.Groups })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Array of Quicksight user names to assign the policy to.
func (o IamPolicyAssignmentIdentitiesOutput) Users() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[IamPolicyAssignmentIdentities](o, func(v IamPolicyAssignmentIdentities) []string { return v.Users })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type NamespaceTimeouts struct {
	Create *string `pulumi:"create"`
	Delete *string `pulumi:"delete"`
}

type NamespaceTimeoutsArgs struct {
	Create pulumix.Input[*string] `pulumi:"create"`
	Delete pulumix.Input[*string] `pulumi:"delete"`
}

func (NamespaceTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceTimeouts)(nil)).Elem()
}

func (i NamespaceTimeoutsArgs) ToNamespaceTimeoutsOutput() NamespaceTimeoutsOutput {
	return i.ToNamespaceTimeoutsOutputWithContext(context.Background())
}

func (i NamespaceTimeoutsArgs) ToNamespaceTimeoutsOutputWithContext(ctx context.Context) NamespaceTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTimeoutsOutput)
}

func (i *NamespaceTimeoutsArgs) ToOutput(ctx context.Context) pulumix.Output[*NamespaceTimeoutsArgs] {
	return pulumix.Val(i)
}

type NamespaceTimeoutsOutput struct{ *pulumi.OutputState }

func (NamespaceTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceTimeouts)(nil)).Elem()
}

func (o NamespaceTimeoutsOutput) ToNamespaceTimeoutsOutput() NamespaceTimeoutsOutput {
	return o
}

func (o NamespaceTimeoutsOutput) ToNamespaceTimeoutsOutputWithContext(ctx context.Context) NamespaceTimeoutsOutput {
	return o
}

func (o NamespaceTimeoutsOutput) ToOutput(ctx context.Context) pulumix.Output[NamespaceTimeouts] {
	return pulumix.Output[NamespaceTimeouts]{
		OutputState: o.OutputState,
	}
}

func (o NamespaceTimeoutsOutput) Create() pulumix.Output[*string] {
	return pulumix.Apply[NamespaceTimeouts](o, func(v NamespaceTimeouts) *string { return v.Create })
}

func (o NamespaceTimeoutsOutput) Delete() pulumix.Output[*string] {
	return pulumix.Apply[NamespaceTimeouts](o, func(v NamespaceTimeouts) *string { return v.Delete })
}

type RefreshScheduleSchedule struct {
	// The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
	RefreshType string `pulumi:"refreshType"`
	// The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
	ScheduleFrequency *RefreshScheduleScheduleScheduleFrequency `pulumi:"scheduleFrequency"`
	// Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
	StartAfterDateTime *string `pulumi:"startAfterDateTime"`
}

type RefreshScheduleScheduleArgs struct {
	// The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
	RefreshType pulumix.Input[string] `pulumi:"refreshType"`
	// The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
	ScheduleFrequency pulumix.Input[*RefreshScheduleScheduleScheduleFrequencyArgs] `pulumi:"scheduleFrequency"`
	// Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
	StartAfterDateTime pulumix.Input[*string] `pulumi:"startAfterDateTime"`
}

func (RefreshScheduleScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleSchedule)(nil)).Elem()
}

func (i RefreshScheduleScheduleArgs) ToRefreshScheduleScheduleOutput() RefreshScheduleScheduleOutput {
	return i.ToRefreshScheduleScheduleOutputWithContext(context.Background())
}

func (i RefreshScheduleScheduleArgs) ToRefreshScheduleScheduleOutputWithContext(ctx context.Context) RefreshScheduleScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleOutput)
}

func (i *RefreshScheduleScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[*RefreshScheduleScheduleArgs] {
	return pulumix.Val(i)
}

type RefreshScheduleScheduleOutput struct{ *pulumi.OutputState }

func (RefreshScheduleScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleSchedule)(nil)).Elem()
}

func (o RefreshScheduleScheduleOutput) ToRefreshScheduleScheduleOutput() RefreshScheduleScheduleOutput {
	return o
}

func (o RefreshScheduleScheduleOutput) ToRefreshScheduleScheduleOutputWithContext(ctx context.Context) RefreshScheduleScheduleOutput {
	return o
}

func (o RefreshScheduleScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[RefreshScheduleSchedule] {
	return pulumix.Output[RefreshScheduleSchedule]{
		OutputState: o.OutputState,
	}
}

// The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
func (o RefreshScheduleScheduleOutput) RefreshType() pulumix.Output[string] {
	return pulumix.Apply[RefreshScheduleSchedule](o, func(v RefreshScheduleSchedule) string { return v.RefreshType })
}

// The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
func (o RefreshScheduleScheduleOutput) ScheduleFrequency() pulumix.GPtrOutput[RefreshScheduleScheduleScheduleFrequency, RefreshScheduleScheduleScheduleFrequencyOutput] {
	value := pulumix.Apply[RefreshScheduleSchedule](o, func(v RefreshScheduleSchedule) *RefreshScheduleScheduleScheduleFrequency { return v.ScheduleFrequency })
	return pulumix.GPtrOutput[RefreshScheduleScheduleScheduleFrequency, RefreshScheduleScheduleScheduleFrequencyOutput]{OutputState: value.OutputState}
}

// Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
func (o RefreshScheduleScheduleOutput) StartAfterDateTime() pulumix.Output[*string] {
	return pulumix.Apply[RefreshScheduleSchedule](o, func(v RefreshScheduleSchedule) *string { return v.StartAfterDateTime })
}

type RefreshScheduleScheduleScheduleFrequency struct {
	// The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
	Interval string `pulumi:"interval"`
	// The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
	RefreshOnDay *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay `pulumi:"refreshOnDay"`
	// The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
	TimeOfTheDay *string `pulumi:"timeOfTheDay"`
	// The timezone that you want the refresh schedule to use.
	Timezone *string `pulumi:"timezone"`
}

type RefreshScheduleScheduleScheduleFrequencyArgs struct {
	// The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
	Interval pulumix.Input[string] `pulumi:"interval"`
	// The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
	RefreshOnDay pulumix.Input[*RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs] `pulumi:"refreshOnDay"`
	// The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
	TimeOfTheDay pulumix.Input[*string] `pulumi:"timeOfTheDay"`
	// The timezone that you want the refresh schedule to use.
	Timezone pulumix.Input[*string] `pulumi:"timezone"`
}

func (RefreshScheduleScheduleScheduleFrequencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequency)(nil)).Elem()
}

func (i RefreshScheduleScheduleScheduleFrequencyArgs) ToRefreshScheduleScheduleScheduleFrequencyOutput() RefreshScheduleScheduleScheduleFrequencyOutput {
	return i.ToRefreshScheduleScheduleScheduleFrequencyOutputWithContext(context.Background())
}

func (i RefreshScheduleScheduleScheduleFrequencyArgs) ToRefreshScheduleScheduleScheduleFrequencyOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleScheduleFrequencyOutput)
}

func (i *RefreshScheduleScheduleScheduleFrequencyArgs) ToOutput(ctx context.Context) pulumix.Output[*RefreshScheduleScheduleScheduleFrequencyArgs] {
	return pulumix.Val(i)
}

type RefreshScheduleScheduleScheduleFrequencyOutput struct{ *pulumi.OutputState }

func (RefreshScheduleScheduleScheduleFrequencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequency)(nil)).Elem()
}

func (o RefreshScheduleScheduleScheduleFrequencyOutput) ToRefreshScheduleScheduleScheduleFrequencyOutput() RefreshScheduleScheduleScheduleFrequencyOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyOutput) ToRefreshScheduleScheduleScheduleFrequencyOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyOutput) ToOutput(ctx context.Context) pulumix.Output[RefreshScheduleScheduleScheduleFrequency] {
	return pulumix.Output[RefreshScheduleScheduleScheduleFrequency]{
		OutputState: o.OutputState,
	}
}

// The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
func (o RefreshScheduleScheduleScheduleFrequencyOutput) Interval() pulumix.Output[string] {
	return pulumix.Apply[RefreshScheduleScheduleScheduleFrequency](o, func(v RefreshScheduleScheduleScheduleFrequency) string { return v.Interval })
}

// The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
func (o RefreshScheduleScheduleScheduleFrequencyOutput) RefreshOnDay() pulumix.GPtrOutput[RefreshScheduleScheduleScheduleFrequencyRefreshOnDay, RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput] {
	value := pulumix.Apply[RefreshScheduleScheduleScheduleFrequency](o, func(v RefreshScheduleScheduleScheduleFrequency) *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay {
		return v.RefreshOnDay
	})
	return pulumix.GPtrOutput[RefreshScheduleScheduleScheduleFrequencyRefreshOnDay, RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput]{OutputState: value.OutputState}
}

// The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
func (o RefreshScheduleScheduleScheduleFrequencyOutput) TimeOfTheDay() pulumix.Output[*string] {
	return pulumix.Apply[RefreshScheduleScheduleScheduleFrequency](o, func(v RefreshScheduleScheduleScheduleFrequency) *string { return v.TimeOfTheDay })
}

// The timezone that you want the refresh schedule to use.
func (o RefreshScheduleScheduleScheduleFrequencyOutput) Timezone() pulumix.Output[*string] {
	return pulumix.Apply[RefreshScheduleScheduleScheduleFrequency](o, func(v RefreshScheduleScheduleScheduleFrequency) *string { return v.Timezone })
}

type RefreshScheduleScheduleScheduleFrequencyRefreshOnDay struct {
	// The day of the month that you want to schedule refresh on.
	DayOfMonth *string `pulumi:"dayOfMonth"`
	// The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
	DayOfWeek *string `pulumi:"dayOfWeek"`
}

type RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs struct {
	// The day of the month that you want to schedule refresh on.
	DayOfMonth pulumix.Input[*string] `pulumi:"dayOfMonth"`
	// The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
	DayOfWeek pulumix.Input[*string] `pulumi:"dayOfWeek"`
}

func (RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequencyRefreshOnDay)(nil)).Elem()
}

func (i RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput {
	return i.ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutputWithContext(context.Background())
}

func (i RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput)
}

func (i *RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) ToOutput(ctx context.Context) pulumix.Output[*RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs] {
	return pulumix.Val(i)
}

type RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput struct{ *pulumi.OutputState }

func (RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequencyRefreshOnDay)(nil)).Elem()
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) ToOutput(ctx context.Context) pulumix.Output[RefreshScheduleScheduleScheduleFrequencyRefreshOnDay] {
	return pulumix.Output[RefreshScheduleScheduleScheduleFrequencyRefreshOnDay]{
		OutputState: o.OutputState,
	}
}

// The day of the month that you want to schedule refresh on.
func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) DayOfMonth() pulumix.Output[*string] {
	return pulumix.Apply[RefreshScheduleScheduleScheduleFrequencyRefreshOnDay](o, func(v RefreshScheduleScheduleScheduleFrequencyRefreshOnDay) *string { return v.DayOfMonth })
}

// The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) DayOfWeek() pulumix.Output[*string] {
	return pulumix.Apply[RefreshScheduleScheduleScheduleFrequencyRefreshOnDay](o, func(v RefreshScheduleScheduleScheduleFrequencyRefreshOnDay) *string { return v.DayOfWeek })
}

type TemplatePermission struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions []string `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal string `pulumi:"principal"`
}

type TemplatePermissionArgs struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions pulumix.Input[[]string] `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal pulumix.Input[string] `pulumi:"principal"`
}

func (TemplatePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePermission)(nil)).Elem()
}

func (i TemplatePermissionArgs) ToTemplatePermissionOutput() TemplatePermissionOutput {
	return i.ToTemplatePermissionOutputWithContext(context.Background())
}

func (i TemplatePermissionArgs) ToTemplatePermissionOutputWithContext(ctx context.Context) TemplatePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePermissionOutput)
}

func (i *TemplatePermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*TemplatePermissionArgs] {
	return pulumix.Val(i)
}

type TemplatePermissionOutput struct{ *pulumi.OutputState }

func (TemplatePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePermission)(nil)).Elem()
}

func (o TemplatePermissionOutput) ToTemplatePermissionOutput() TemplatePermissionOutput {
	return o
}

func (o TemplatePermissionOutput) ToTemplatePermissionOutputWithContext(ctx context.Context) TemplatePermissionOutput {
	return o
}

func (o TemplatePermissionOutput) ToOutput(ctx context.Context) pulumix.Output[TemplatePermission] {
	return pulumix.Output[TemplatePermission]{
		OutputState: o.OutputState,
	}
}

// List of IAM actions to grant or revoke permissions on.
func (o TemplatePermissionOutput) Actions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TemplatePermission](o, func(v TemplatePermission) []string { return v.Actions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
func (o TemplatePermissionOutput) Principal() pulumix.Output[string] {
	return pulumix.Apply[TemplatePermission](o, func(v TemplatePermission) string { return v.Principal })
}

type TemplateSourceEntity struct {
	// The source analysis, if it is based on an analysis.. Only one of `sourceAnalysis` or `sourceTemplate` should be configured. See source_analysis.
	SourceAnalysis *TemplateSourceEntitySourceAnalysis `pulumi:"sourceAnalysis"`
	// The source template, if it is based on an template.. Only one of `sourceAnalysis` or `sourceTemplate` should be configured. See source_template.
	SourceTemplate *TemplateSourceEntitySourceTemplate `pulumi:"sourceTemplate"`
}

type TemplateSourceEntityArgs struct {
	// The source analysis, if it is based on an analysis.. Only one of `sourceAnalysis` or `sourceTemplate` should be configured. See source_analysis.
	SourceAnalysis pulumix.Input[*TemplateSourceEntitySourceAnalysisArgs] `pulumi:"sourceAnalysis"`
	// The source template, if it is based on an template.. Only one of `sourceAnalysis` or `sourceTemplate` should be configured. See source_template.
	SourceTemplate pulumix.Input[*TemplateSourceEntitySourceTemplateArgs] `pulumi:"sourceTemplate"`
}

func (TemplateSourceEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntity)(nil)).Elem()
}

func (i TemplateSourceEntityArgs) ToTemplateSourceEntityOutput() TemplateSourceEntityOutput {
	return i.ToTemplateSourceEntityOutputWithContext(context.Background())
}

func (i TemplateSourceEntityArgs) ToTemplateSourceEntityOutputWithContext(ctx context.Context) TemplateSourceEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntityOutput)
}

func (i *TemplateSourceEntityArgs) ToOutput(ctx context.Context) pulumix.Output[*TemplateSourceEntityArgs] {
	return pulumix.Val(i)
}

type TemplateSourceEntityOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntity)(nil)).Elem()
}

func (o TemplateSourceEntityOutput) ToTemplateSourceEntityOutput() TemplateSourceEntityOutput {
	return o
}

func (o TemplateSourceEntityOutput) ToTemplateSourceEntityOutputWithContext(ctx context.Context) TemplateSourceEntityOutput {
	return o
}

func (o TemplateSourceEntityOutput) ToOutput(ctx context.Context) pulumix.Output[TemplateSourceEntity] {
	return pulumix.Output[TemplateSourceEntity]{
		OutputState: o.OutputState,
	}
}

// The source analysis, if it is based on an analysis.. Only one of `sourceAnalysis` or `sourceTemplate` should be configured. See source_analysis.
func (o TemplateSourceEntityOutput) SourceAnalysis() pulumix.GPtrOutput[TemplateSourceEntitySourceAnalysis, TemplateSourceEntitySourceAnalysisOutput] {
	value := pulumix.Apply[TemplateSourceEntity](o, func(v TemplateSourceEntity) *TemplateSourceEntitySourceAnalysis { return v.SourceAnalysis })
	return pulumix.GPtrOutput[TemplateSourceEntitySourceAnalysis, TemplateSourceEntitySourceAnalysisOutput]{OutputState: value.OutputState}
}

// The source template, if it is based on an template.. Only one of `sourceAnalysis` or `sourceTemplate` should be configured. See source_template.
func (o TemplateSourceEntityOutput) SourceTemplate() pulumix.GPtrOutput[TemplateSourceEntitySourceTemplate, TemplateSourceEntitySourceTemplateOutput] {
	value := pulumix.Apply[TemplateSourceEntity](o, func(v TemplateSourceEntity) *TemplateSourceEntitySourceTemplate { return v.SourceTemplate })
	return pulumix.GPtrOutput[TemplateSourceEntitySourceTemplate, TemplateSourceEntitySourceTemplateOutput]{OutputState: value.OutputState}
}

type TemplateSourceEntitySourceAnalysis struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn string `pulumi:"arn"`
	// A list of dataset references used as placeholders in the template. See data_set_references.
	DataSetReferences []TemplateSourceEntitySourceAnalysisDataSetReference `pulumi:"dataSetReferences"`
}

type TemplateSourceEntitySourceAnalysisArgs struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// A list of dataset references used as placeholders in the template. See data_set_references.
	DataSetReferences pulumix.Input[[]*TemplateSourceEntitySourceAnalysisDataSetReferenceArgs] `pulumi:"dataSetReferences"`
}

func (TemplateSourceEntitySourceAnalysisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntitySourceAnalysis)(nil)).Elem()
}

func (i TemplateSourceEntitySourceAnalysisArgs) ToTemplateSourceEntitySourceAnalysisOutput() TemplateSourceEntitySourceAnalysisOutput {
	return i.ToTemplateSourceEntitySourceAnalysisOutputWithContext(context.Background())
}

func (i TemplateSourceEntitySourceAnalysisArgs) ToTemplateSourceEntitySourceAnalysisOutputWithContext(ctx context.Context) TemplateSourceEntitySourceAnalysisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntitySourceAnalysisOutput)
}

func (i *TemplateSourceEntitySourceAnalysisArgs) ToOutput(ctx context.Context) pulumix.Output[*TemplateSourceEntitySourceAnalysisArgs] {
	return pulumix.Val(i)
}

type TemplateSourceEntitySourceAnalysisOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntitySourceAnalysisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntitySourceAnalysis)(nil)).Elem()
}

func (o TemplateSourceEntitySourceAnalysisOutput) ToTemplateSourceEntitySourceAnalysisOutput() TemplateSourceEntitySourceAnalysisOutput {
	return o
}

func (o TemplateSourceEntitySourceAnalysisOutput) ToTemplateSourceEntitySourceAnalysisOutputWithContext(ctx context.Context) TemplateSourceEntitySourceAnalysisOutput {
	return o
}

func (o TemplateSourceEntitySourceAnalysisOutput) ToOutput(ctx context.Context) pulumix.Output[TemplateSourceEntitySourceAnalysis] {
	return pulumix.Output[TemplateSourceEntitySourceAnalysis]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the resource.
func (o TemplateSourceEntitySourceAnalysisOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[TemplateSourceEntitySourceAnalysis](o, func(v TemplateSourceEntitySourceAnalysis) string { return v.Arn })
}

// A list of dataset references used as placeholders in the template. See data_set_references.
func (o TemplateSourceEntitySourceAnalysisOutput) DataSetReferences() pulumix.GArrayOutput[TemplateSourceEntitySourceAnalysisDataSetReference, TemplateSourceEntitySourceAnalysisDataSetReferenceOutput] {
	value := pulumix.Apply[TemplateSourceEntitySourceAnalysis](o, func(v TemplateSourceEntitySourceAnalysis) []TemplateSourceEntitySourceAnalysisDataSetReference {
		return v.DataSetReferences
	})
	return pulumix.GArrayOutput[TemplateSourceEntitySourceAnalysisDataSetReference, TemplateSourceEntitySourceAnalysisDataSetReferenceOutput]{OutputState: value.OutputState}
}

type TemplateSourceEntitySourceAnalysisDataSetReference struct {
	// Dataset Amazon Resource Name (ARN).
	DataSetArn string `pulumi:"dataSetArn"`
	// Dataset placeholder.
	DataSetPlaceholder string `pulumi:"dataSetPlaceholder"`
}

type TemplateSourceEntitySourceAnalysisDataSetReferenceArgs struct {
	// Dataset Amazon Resource Name (ARN).
	DataSetArn pulumix.Input[string] `pulumi:"dataSetArn"`
	// Dataset placeholder.
	DataSetPlaceholder pulumix.Input[string] `pulumi:"dataSetPlaceholder"`
}

func (TemplateSourceEntitySourceAnalysisDataSetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntitySourceAnalysisDataSetReference)(nil)).Elem()
}

func (i TemplateSourceEntitySourceAnalysisDataSetReferenceArgs) ToTemplateSourceEntitySourceAnalysisDataSetReferenceOutput() TemplateSourceEntitySourceAnalysisDataSetReferenceOutput {
	return i.ToTemplateSourceEntitySourceAnalysisDataSetReferenceOutputWithContext(context.Background())
}

func (i TemplateSourceEntitySourceAnalysisDataSetReferenceArgs) ToTemplateSourceEntitySourceAnalysisDataSetReferenceOutputWithContext(ctx context.Context) TemplateSourceEntitySourceAnalysisDataSetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntitySourceAnalysisDataSetReferenceOutput)
}

func (i *TemplateSourceEntitySourceAnalysisDataSetReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[*TemplateSourceEntitySourceAnalysisDataSetReferenceArgs] {
	return pulumix.Val(i)
}

type TemplateSourceEntitySourceAnalysisDataSetReferenceOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntitySourceAnalysisDataSetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntitySourceAnalysisDataSetReference)(nil)).Elem()
}

func (o TemplateSourceEntitySourceAnalysisDataSetReferenceOutput) ToTemplateSourceEntitySourceAnalysisDataSetReferenceOutput() TemplateSourceEntitySourceAnalysisDataSetReferenceOutput {
	return o
}

func (o TemplateSourceEntitySourceAnalysisDataSetReferenceOutput) ToTemplateSourceEntitySourceAnalysisDataSetReferenceOutputWithContext(ctx context.Context) TemplateSourceEntitySourceAnalysisDataSetReferenceOutput {
	return o
}

func (o TemplateSourceEntitySourceAnalysisDataSetReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[TemplateSourceEntitySourceAnalysisDataSetReference] {
	return pulumix.Output[TemplateSourceEntitySourceAnalysisDataSetReference]{
		OutputState: o.OutputState,
	}
}

// Dataset Amazon Resource Name (ARN).
func (o TemplateSourceEntitySourceAnalysisDataSetReferenceOutput) DataSetArn() pulumix.Output[string] {
	return pulumix.Apply[TemplateSourceEntitySourceAnalysisDataSetReference](o, func(v TemplateSourceEntitySourceAnalysisDataSetReference) string { return v.DataSetArn })
}

// Dataset placeholder.
func (o TemplateSourceEntitySourceAnalysisDataSetReferenceOutput) DataSetPlaceholder() pulumix.Output[string] {
	return pulumix.Apply[TemplateSourceEntitySourceAnalysisDataSetReference](o, func(v TemplateSourceEntitySourceAnalysisDataSetReference) string { return v.DataSetPlaceholder })
}

type TemplateSourceEntitySourceTemplate struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn string `pulumi:"arn"`
}

type TemplateSourceEntitySourceTemplateArgs struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn pulumix.Input[string] `pulumi:"arn"`
}

func (TemplateSourceEntitySourceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntitySourceTemplate)(nil)).Elem()
}

func (i TemplateSourceEntitySourceTemplateArgs) ToTemplateSourceEntitySourceTemplateOutput() TemplateSourceEntitySourceTemplateOutput {
	return i.ToTemplateSourceEntitySourceTemplateOutputWithContext(context.Background())
}

func (i TemplateSourceEntitySourceTemplateArgs) ToTemplateSourceEntitySourceTemplateOutputWithContext(ctx context.Context) TemplateSourceEntitySourceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntitySourceTemplateOutput)
}

func (i *TemplateSourceEntitySourceTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[*TemplateSourceEntitySourceTemplateArgs] {
	return pulumix.Val(i)
}

type TemplateSourceEntitySourceTemplateOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntitySourceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntitySourceTemplate)(nil)).Elem()
}

func (o TemplateSourceEntitySourceTemplateOutput) ToTemplateSourceEntitySourceTemplateOutput() TemplateSourceEntitySourceTemplateOutput {
	return o
}

func (o TemplateSourceEntitySourceTemplateOutput) ToTemplateSourceEntitySourceTemplateOutputWithContext(ctx context.Context) TemplateSourceEntitySourceTemplateOutput {
	return o
}

func (o TemplateSourceEntitySourceTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[TemplateSourceEntitySourceTemplate] {
	return pulumix.Output[TemplateSourceEntitySourceTemplate]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the resource.
func (o TemplateSourceEntitySourceTemplateOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[TemplateSourceEntitySourceTemplate](o, func(v TemplateSourceEntitySourceTemplate) string { return v.Arn })
}

type ThemeConfiguration struct {
	// Color properties that apply to chart data colors. See data_color_palette.
	DataColorPalette *ThemeConfigurationDataColorPalette `pulumi:"dataColorPalette"`
	// Display options related to sheets. See sheet.
	Sheet *ThemeConfigurationSheet `pulumi:"sheet"`
	// Determines the typography options. See typography.
	Typography *ThemeConfigurationTypography `pulumi:"typography"`
	// Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
	UiColorPalette *ThemeConfigurationUiColorPalette `pulumi:"uiColorPalette"`
}

type ThemeConfigurationArgs struct {
	// Color properties that apply to chart data colors. See data_color_palette.
	DataColorPalette pulumix.Input[*ThemeConfigurationDataColorPaletteArgs] `pulumi:"dataColorPalette"`
	// Display options related to sheets. See sheet.
	Sheet pulumix.Input[*ThemeConfigurationSheetArgs] `pulumi:"sheet"`
	// Determines the typography options. See typography.
	Typography pulumix.Input[*ThemeConfigurationTypographyArgs] `pulumi:"typography"`
	// Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
	UiColorPalette pulumix.Input[*ThemeConfigurationUiColorPaletteArgs] `pulumi:"uiColorPalette"`
}

func (ThemeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfiguration)(nil)).Elem()
}

func (i ThemeConfigurationArgs) ToThemeConfigurationOutput() ThemeConfigurationOutput {
	return i.ToThemeConfigurationOutputWithContext(context.Background())
}

func (i ThemeConfigurationArgs) ToThemeConfigurationOutputWithContext(ctx context.Context) ThemeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationOutput)
}

func (i *ThemeConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ThemeConfigurationArgs] {
	return pulumix.Val(i)
}

type ThemeConfigurationOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfiguration)(nil)).Elem()
}

func (o ThemeConfigurationOutput) ToThemeConfigurationOutput() ThemeConfigurationOutput {
	return o
}

func (o ThemeConfigurationOutput) ToThemeConfigurationOutputWithContext(ctx context.Context) ThemeConfigurationOutput {
	return o
}

func (o ThemeConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ThemeConfiguration] {
	return pulumix.Output[ThemeConfiguration]{
		OutputState: o.OutputState,
	}
}

// Color properties that apply to chart data colors. See data_color_palette.
func (o ThemeConfigurationOutput) DataColorPalette() pulumix.GPtrOutput[ThemeConfigurationDataColorPalette, ThemeConfigurationDataColorPaletteOutput] {
	value := pulumix.Apply[ThemeConfiguration](o, func(v ThemeConfiguration) *ThemeConfigurationDataColorPalette { return v.DataColorPalette })
	return pulumix.GPtrOutput[ThemeConfigurationDataColorPalette, ThemeConfigurationDataColorPaletteOutput]{OutputState: value.OutputState}
}

// Display options related to sheets. See sheet.
func (o ThemeConfigurationOutput) Sheet() pulumix.GPtrOutput[ThemeConfigurationSheet, ThemeConfigurationSheetOutput] {
	value := pulumix.Apply[ThemeConfiguration](o, func(v ThemeConfiguration) *ThemeConfigurationSheet { return v.Sheet })
	return pulumix.GPtrOutput[ThemeConfigurationSheet, ThemeConfigurationSheetOutput]{OutputState: value.OutputState}
}

// Determines the typography options. See typography.
func (o ThemeConfigurationOutput) Typography() pulumix.GPtrOutput[ThemeConfigurationTypography, ThemeConfigurationTypographyOutput] {
	value := pulumix.Apply[ThemeConfiguration](o, func(v ThemeConfiguration) *ThemeConfigurationTypography { return v.Typography })
	return pulumix.GPtrOutput[ThemeConfigurationTypography, ThemeConfigurationTypographyOutput]{OutputState: value.OutputState}
}

// Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
func (o ThemeConfigurationOutput) UiColorPalette() pulumix.GPtrOutput[ThemeConfigurationUiColorPalette, ThemeConfigurationUiColorPaletteOutput] {
	value := pulumix.Apply[ThemeConfiguration](o, func(v ThemeConfiguration) *ThemeConfigurationUiColorPalette { return v.UiColorPalette })
	return pulumix.GPtrOutput[ThemeConfigurationUiColorPalette, ThemeConfigurationUiColorPaletteOutput]{OutputState: value.OutputState}
}

type ThemeConfigurationDataColorPalette struct {
	// List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
	Colors []string `pulumi:"colors"`
	// The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
	EmptyFillColor *string `pulumi:"emptyFillColor"`
	// The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
	MinMaxGradients []string `pulumi:"minMaxGradients"`
}

type ThemeConfigurationDataColorPaletteArgs struct {
	// List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
	Colors pulumix.Input[[]string] `pulumi:"colors"`
	// The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
	EmptyFillColor pulumix.Input[*string] `pulumi:"emptyFillColor"`
	// The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
	MinMaxGradients pulumix.Input[[]string] `pulumi:"minMaxGradients"`
}

func (ThemeConfigurationDataColorPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationDataColorPalette)(nil)).Elem()
}

func (i ThemeConfigurationDataColorPaletteArgs) ToThemeConfigurationDataColorPaletteOutput() ThemeConfigurationDataColorPaletteOutput {
	return i.ToThemeConfigurationDataColorPaletteOutputWithContext(context.Background())
}

func (i ThemeConfigurationDataColorPaletteArgs) ToThemeConfigurationDataColorPaletteOutputWithContext(ctx context.Context) ThemeConfigurationDataColorPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationDataColorPaletteOutput)
}

func (i *ThemeConfigurationDataColorPaletteArgs) ToOutput(ctx context.Context) pulumix.Output[*ThemeConfigurationDataColorPaletteArgs] {
	return pulumix.Val(i)
}

type ThemeConfigurationDataColorPaletteOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationDataColorPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationDataColorPalette)(nil)).Elem()
}

func (o ThemeConfigurationDataColorPaletteOutput) ToThemeConfigurationDataColorPaletteOutput() ThemeConfigurationDataColorPaletteOutput {
	return o
}

func (o ThemeConfigurationDataColorPaletteOutput) ToThemeConfigurationDataColorPaletteOutputWithContext(ctx context.Context) ThemeConfigurationDataColorPaletteOutput {
	return o
}

func (o ThemeConfigurationDataColorPaletteOutput) ToOutput(ctx context.Context) pulumix.Output[ThemeConfigurationDataColorPalette] {
	return pulumix.Output[ThemeConfigurationDataColorPalette]{
		OutputState: o.OutputState,
	}
}

// List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
func (o ThemeConfigurationDataColorPaletteOutput) Colors() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ThemeConfigurationDataColorPalette](o, func(v ThemeConfigurationDataColorPalette) []string { return v.Colors })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
func (o ThemeConfigurationDataColorPaletteOutput) EmptyFillColor() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationDataColorPalette](o, func(v ThemeConfigurationDataColorPalette) *string { return v.EmptyFillColor })
}

// The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
func (o ThemeConfigurationDataColorPaletteOutput) MinMaxGradients() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ThemeConfigurationDataColorPalette](o, func(v ThemeConfigurationDataColorPalette) []string { return v.MinMaxGradients })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ThemeConfigurationSheet struct {
	// The display options for tiles. See tile.
	Tile *ThemeConfigurationSheetTile `pulumi:"tile"`
	// The layout options for tiles. See tile_layout.
	TileLayout *ThemeConfigurationSheetTileLayout `pulumi:"tileLayout"`
}

type ThemeConfigurationSheetArgs struct {
	// The display options for tiles. See tile.
	Tile pulumix.Input[*ThemeConfigurationSheetTileArgs] `pulumi:"tile"`
	// The layout options for tiles. See tile_layout.
	TileLayout pulumix.Input[*ThemeConfigurationSheetTileLayoutArgs] `pulumi:"tileLayout"`
}

func (ThemeConfigurationSheetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheet)(nil)).Elem()
}

func (i ThemeConfigurationSheetArgs) ToThemeConfigurationSheetOutput() ThemeConfigurationSheetOutput {
	return i.ToThemeConfigurationSheetOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetArgs) ToThemeConfigurationSheetOutputWithContext(ctx context.Context) ThemeConfigurationSheetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetOutput)
}

func (i *ThemeConfigurationSheetArgs) ToOutput(ctx context.Context) pulumix.Output[*ThemeConfigurationSheetArgs] {
	return pulumix.Val(i)
}

type ThemeConfigurationSheetOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheet)(nil)).Elem()
}

func (o ThemeConfigurationSheetOutput) ToThemeConfigurationSheetOutput() ThemeConfigurationSheetOutput {
	return o
}

func (o ThemeConfigurationSheetOutput) ToThemeConfigurationSheetOutputWithContext(ctx context.Context) ThemeConfigurationSheetOutput {
	return o
}

func (o ThemeConfigurationSheetOutput) ToOutput(ctx context.Context) pulumix.Output[ThemeConfigurationSheet] {
	return pulumix.Output[ThemeConfigurationSheet]{
		OutputState: o.OutputState,
	}
}

// The display options for tiles. See tile.
func (o ThemeConfigurationSheetOutput) Tile() pulumix.GPtrOutput[ThemeConfigurationSheetTile, ThemeConfigurationSheetTileOutput] {
	value := pulumix.Apply[ThemeConfigurationSheet](o, func(v ThemeConfigurationSheet) *ThemeConfigurationSheetTile { return v.Tile })
	return pulumix.GPtrOutput[ThemeConfigurationSheetTile, ThemeConfigurationSheetTileOutput]{OutputState: value.OutputState}
}

// The layout options for tiles. See tile_layout.
func (o ThemeConfigurationSheetOutput) TileLayout() pulumix.GPtrOutput[ThemeConfigurationSheetTileLayout, ThemeConfigurationSheetTileLayoutOutput] {
	value := pulumix.Apply[ThemeConfigurationSheet](o, func(v ThemeConfigurationSheet) *ThemeConfigurationSheetTileLayout { return v.TileLayout })
	return pulumix.GPtrOutput[ThemeConfigurationSheetTileLayout, ThemeConfigurationSheetTileLayoutOutput]{OutputState: value.OutputState}
}

type ThemeConfigurationSheetTile struct {
	// The border around a tile. See border.
	Border *ThemeConfigurationSheetTileBorder `pulumi:"border"`
}

type ThemeConfigurationSheetTileArgs struct {
	// The border around a tile. See border.
	Border pulumix.Input[*ThemeConfigurationSheetTileBorderArgs] `pulumi:"border"`
}

func (ThemeConfigurationSheetTileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTile)(nil)).Elem()
}

func (i ThemeConfigurationSheetTileArgs) ToThemeConfigurationSheetTileOutput() ThemeConfigurationSheetTileOutput {
	return i.ToThemeConfigurationSheetTileOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetTileArgs) ToThemeConfigurationSheetTileOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileOutput)
}

func (i *ThemeConfigurationSheetTileArgs) ToOutput(ctx context.Context) pulumix.Output[*ThemeConfigurationSheetTileArgs] {
	return pulumix.Val(i)
}

type ThemeConfigurationSheetTileOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetTileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTile)(nil)).Elem()
}

func (o ThemeConfigurationSheetTileOutput) ToThemeConfigurationSheetTileOutput() ThemeConfigurationSheetTileOutput {
	return o
}

func (o ThemeConfigurationSheetTileOutput) ToThemeConfigurationSheetTileOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileOutput {
	return o
}

func (o ThemeConfigurationSheetTileOutput) ToOutput(ctx context.Context) pulumix.Output[ThemeConfigurationSheetTile] {
	return pulumix.Output[ThemeConfigurationSheetTile]{
		OutputState: o.OutputState,
	}
}

// The border around a tile. See border.
func (o ThemeConfigurationSheetTileOutput) Border() pulumix.GPtrOutput[ThemeConfigurationSheetTileBorder, ThemeConfigurationSheetTileBorderOutput] {
	value := pulumix.Apply[ThemeConfigurationSheetTile](o, func(v ThemeConfigurationSheetTile) *ThemeConfigurationSheetTileBorder { return v.Border })
	return pulumix.GPtrOutput[ThemeConfigurationSheetTileBorder, ThemeConfigurationSheetTileBorderOutput]{OutputState: value.OutputState}
}

type ThemeConfigurationSheetTileBorder struct {
	// The option to enable display of borders for visuals.
	Show *bool `pulumi:"show"`
}

type ThemeConfigurationSheetTileBorderArgs struct {
	// The option to enable display of borders for visuals.
	Show pulumix.Input[*bool] `pulumi:"show"`
}

func (ThemeConfigurationSheetTileBorderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileBorder)(nil)).Elem()
}

func (i ThemeConfigurationSheetTileBorderArgs) ToThemeConfigurationSheetTileBorderOutput() ThemeConfigurationSheetTileBorderOutput {
	return i.ToThemeConfigurationSheetTileBorderOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetTileBorderArgs) ToThemeConfigurationSheetTileBorderOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileBorderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileBorderOutput)
}

func (i *ThemeConfigurationSheetTileBorderArgs) ToOutput(ctx context.Context) pulumix.Output[*ThemeConfigurationSheetTileBorderArgs] {
	return pulumix.Val(i)
}

type ThemeConfigurationSheetTileBorderOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetTileBorderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileBorder)(nil)).Elem()
}

func (o ThemeConfigurationSheetTileBorderOutput) ToThemeConfigurationSheetTileBorderOutput() ThemeConfigurationSheetTileBorderOutput {
	return o
}

func (o ThemeConfigurationSheetTileBorderOutput) ToThemeConfigurationSheetTileBorderOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileBorderOutput {
	return o
}

func (o ThemeConfigurationSheetTileBorderOutput) ToOutput(ctx context.Context) pulumix.Output[ThemeConfigurationSheetTileBorder] {
	return pulumix.Output[ThemeConfigurationSheetTileBorder]{
		OutputState: o.OutputState,
	}
}

// The option to enable display of borders for visuals.
func (o ThemeConfigurationSheetTileBorderOutput) Show() pulumix.Output[*bool] {
	return pulumix.Apply[ThemeConfigurationSheetTileBorder](o, func(v ThemeConfigurationSheetTileBorder) *bool { return v.Show })
}

type ThemeConfigurationSheetTileLayout struct {
	// The gutter settings that apply between tiles. See gutter.
	Gutter *ThemeConfigurationSheetTileLayoutGutter `pulumi:"gutter"`
	// The margin settings that apply around the outside edge of sheets. See margin.
	Margin *ThemeConfigurationSheetTileLayoutMargin `pulumi:"margin"`
}

type ThemeConfigurationSheetTileLayoutArgs struct {
	// The gutter settings that apply between tiles. See gutter.
	Gutter pulumix.Input[*ThemeConfigurationSheetTileLayoutGutterArgs] `pulumi:"gutter"`
	// The margin settings that apply around the outside edge of sheets. See margin.
	Margin pulumix.Input[*ThemeConfigurationSheetTileLayoutMarginArgs] `pulumi:"margin"`
}

func (ThemeConfigurationSheetTileLayoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileLayout)(nil)).Elem()
}

func (i ThemeConfigurationSheetTileLayoutArgs) ToThemeConfigurationSheetTileLayoutOutput() ThemeConfigurationSheetTileLayoutOutput {
	return i.ToThemeConfigurationSheetTileLayoutOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetTileLayoutArgs) ToThemeConfigurationSheetTileLayoutOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileLayoutOutput)
}

func (i *ThemeConfigurationSheetTileLayoutArgs) ToOutput(ctx context.Context) pulumix.Output[*ThemeConfigurationSheetTileLayoutArgs] {
	return pulumix.Val(i)
}

type ThemeConfigurationSheetTileLayoutOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetTileLayoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileLayout)(nil)).Elem()
}

func (o ThemeConfigurationSheetTileLayoutOutput) ToThemeConfigurationSheetTileLayoutOutput() ThemeConfigurationSheetTileLayoutOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutOutput) ToThemeConfigurationSheetTileLayoutOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutOutput) ToOutput(ctx context.Context) pulumix.Output[ThemeConfigurationSheetTileLayout] {
	return pulumix.Output[ThemeConfigurationSheetTileLayout]{
		OutputState: o.OutputState,
	}
}

// The gutter settings that apply between tiles. See gutter.
func (o ThemeConfigurationSheetTileLayoutOutput) Gutter() pulumix.GPtrOutput[ThemeConfigurationSheetTileLayoutGutter, ThemeConfigurationSheetTileLayoutGutterOutput] {
	value := pulumix.Apply[ThemeConfigurationSheetTileLayout](o, func(v ThemeConfigurationSheetTileLayout) *ThemeConfigurationSheetTileLayoutGutter { return v.Gutter })
	return pulumix.GPtrOutput[ThemeConfigurationSheetTileLayoutGutter, ThemeConfigurationSheetTileLayoutGutterOutput]{OutputState: value.OutputState}
}

// The margin settings that apply around the outside edge of sheets. See margin.
func (o ThemeConfigurationSheetTileLayoutOutput) Margin() pulumix.GPtrOutput[ThemeConfigurationSheetTileLayoutMargin, ThemeConfigurationSheetTileLayoutMarginOutput] {
	value := pulumix.Apply[ThemeConfigurationSheetTileLayout](o, func(v ThemeConfigurationSheetTileLayout) *ThemeConfigurationSheetTileLayoutMargin { return v.Margin })
	return pulumix.GPtrOutput[ThemeConfigurationSheetTileLayoutMargin, ThemeConfigurationSheetTileLayoutMarginOutput]{OutputState: value.OutputState}
}

type ThemeConfigurationSheetTileLayoutGutter struct {
	// This Boolean value controls whether to display a gutter space between sheet tiles.
	Show *bool `pulumi:"show"`
}

type ThemeConfigurationSheetTileLayoutGutterArgs struct {
	// This Boolean value controls whether to display a gutter space between sheet tiles.
	Show pulumix.Input[*bool] `pulumi:"show"`
}

func (ThemeConfigurationSheetTileLayoutGutterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileLayoutGutter)(nil)).Elem()
}

func (i ThemeConfigurationSheetTileLayoutGutterArgs) ToThemeConfigurationSheetTileLayoutGutterOutput() ThemeConfigurationSheetTileLayoutGutterOutput {
	return i.ToThemeConfigurationSheetTileLayoutGutterOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetTileLayoutGutterArgs) ToThemeConfigurationSheetTileLayoutGutterOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutGutterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileLayoutGutterOutput)
}

func (i *ThemeConfigurationSheetTileLayoutGutterArgs) ToOutput(ctx context.Context) pulumix.Output[*ThemeConfigurationSheetTileLayoutGutterArgs] {
	return pulumix.Val(i)
}

type ThemeConfigurationSheetTileLayoutGutterOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetTileLayoutGutterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileLayoutGutter)(nil)).Elem()
}

func (o ThemeConfigurationSheetTileLayoutGutterOutput) ToThemeConfigurationSheetTileLayoutGutterOutput() ThemeConfigurationSheetTileLayoutGutterOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutGutterOutput) ToThemeConfigurationSheetTileLayoutGutterOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutGutterOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutGutterOutput) ToOutput(ctx context.Context) pulumix.Output[ThemeConfigurationSheetTileLayoutGutter] {
	return pulumix.Output[ThemeConfigurationSheetTileLayoutGutter]{
		OutputState: o.OutputState,
	}
}

// This Boolean value controls whether to display a gutter space between sheet tiles.
func (o ThemeConfigurationSheetTileLayoutGutterOutput) Show() pulumix.Output[*bool] {
	return pulumix.Apply[ThemeConfigurationSheetTileLayoutGutter](o, func(v ThemeConfigurationSheetTileLayoutGutter) *bool { return v.Show })
}

type ThemeConfigurationSheetTileLayoutMargin struct {
	// This Boolean value controls whether to display sheet margins.
	Show *bool `pulumi:"show"`
}

type ThemeConfigurationSheetTileLayoutMarginArgs struct {
	// This Boolean value controls whether to display sheet margins.
	Show pulumix.Input[*bool] `pulumi:"show"`
}

func (ThemeConfigurationSheetTileLayoutMarginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileLayoutMargin)(nil)).Elem()
}

func (i ThemeConfigurationSheetTileLayoutMarginArgs) ToThemeConfigurationSheetTileLayoutMarginOutput() ThemeConfigurationSheetTileLayoutMarginOutput {
	return i.ToThemeConfigurationSheetTileLayoutMarginOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetTileLayoutMarginArgs) ToThemeConfigurationSheetTileLayoutMarginOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutMarginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileLayoutMarginOutput)
}

func (i *ThemeConfigurationSheetTileLayoutMarginArgs) ToOutput(ctx context.Context) pulumix.Output[*ThemeConfigurationSheetTileLayoutMarginArgs] {
	return pulumix.Val(i)
}

type ThemeConfigurationSheetTileLayoutMarginOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetTileLayoutMarginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileLayoutMargin)(nil)).Elem()
}

func (o ThemeConfigurationSheetTileLayoutMarginOutput) ToThemeConfigurationSheetTileLayoutMarginOutput() ThemeConfigurationSheetTileLayoutMarginOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutMarginOutput) ToThemeConfigurationSheetTileLayoutMarginOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutMarginOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutMarginOutput) ToOutput(ctx context.Context) pulumix.Output[ThemeConfigurationSheetTileLayoutMargin] {
	return pulumix.Output[ThemeConfigurationSheetTileLayoutMargin]{
		OutputState: o.OutputState,
	}
}

// This Boolean value controls whether to display sheet margins.
func (o ThemeConfigurationSheetTileLayoutMarginOutput) Show() pulumix.Output[*bool] {
	return pulumix.Apply[ThemeConfigurationSheetTileLayoutMargin](o, func(v ThemeConfigurationSheetTileLayoutMargin) *bool { return v.Show })
}

type ThemeConfigurationTypography struct {
	// Determines the list of font families. Maximum number of 5 items. See font_families.
	FontFamilies []ThemeConfigurationTypographyFontFamily `pulumi:"fontFamilies"`
}

type ThemeConfigurationTypographyArgs struct {
	// Determines the list of font families. Maximum number of 5 items. See font_families.
	FontFamilies pulumix.Input[[]*ThemeConfigurationTypographyFontFamilyArgs] `pulumi:"fontFamilies"`
}

func (ThemeConfigurationTypographyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationTypography)(nil)).Elem()
}

func (i ThemeConfigurationTypographyArgs) ToThemeConfigurationTypographyOutput() ThemeConfigurationTypographyOutput {
	return i.ToThemeConfigurationTypographyOutputWithContext(context.Background())
}

func (i ThemeConfigurationTypographyArgs) ToThemeConfigurationTypographyOutputWithContext(ctx context.Context) ThemeConfigurationTypographyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationTypographyOutput)
}

func (i *ThemeConfigurationTypographyArgs) ToOutput(ctx context.Context) pulumix.Output[*ThemeConfigurationTypographyArgs] {
	return pulumix.Val(i)
}

type ThemeConfigurationTypographyOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationTypographyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationTypography)(nil)).Elem()
}

func (o ThemeConfigurationTypographyOutput) ToThemeConfigurationTypographyOutput() ThemeConfigurationTypographyOutput {
	return o
}

func (o ThemeConfigurationTypographyOutput) ToThemeConfigurationTypographyOutputWithContext(ctx context.Context) ThemeConfigurationTypographyOutput {
	return o
}

func (o ThemeConfigurationTypographyOutput) ToOutput(ctx context.Context) pulumix.Output[ThemeConfigurationTypography] {
	return pulumix.Output[ThemeConfigurationTypography]{
		OutputState: o.OutputState,
	}
}

// Determines the list of font families. Maximum number of 5 items. See font_families.
func (o ThemeConfigurationTypographyOutput) FontFamilies() pulumix.GArrayOutput[ThemeConfigurationTypographyFontFamily, ThemeConfigurationTypographyFontFamilyOutput] {
	value := pulumix.Apply[ThemeConfigurationTypography](o, func(v ThemeConfigurationTypography) []ThemeConfigurationTypographyFontFamily { return v.FontFamilies })
	return pulumix.GArrayOutput[ThemeConfigurationTypographyFontFamily, ThemeConfigurationTypographyFontFamilyOutput]{OutputState: value.OutputState}
}

type ThemeConfigurationTypographyFontFamily struct {
	// Font family name.
	FontFamily *string `pulumi:"fontFamily"`
}

type ThemeConfigurationTypographyFontFamilyArgs struct {
	// Font family name.
	FontFamily pulumix.Input[*string] `pulumi:"fontFamily"`
}

func (ThemeConfigurationTypographyFontFamilyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationTypographyFontFamily)(nil)).Elem()
}

func (i ThemeConfigurationTypographyFontFamilyArgs) ToThemeConfigurationTypographyFontFamilyOutput() ThemeConfigurationTypographyFontFamilyOutput {
	return i.ToThemeConfigurationTypographyFontFamilyOutputWithContext(context.Background())
}

func (i ThemeConfigurationTypographyFontFamilyArgs) ToThemeConfigurationTypographyFontFamilyOutputWithContext(ctx context.Context) ThemeConfigurationTypographyFontFamilyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationTypographyFontFamilyOutput)
}

func (i *ThemeConfigurationTypographyFontFamilyArgs) ToOutput(ctx context.Context) pulumix.Output[*ThemeConfigurationTypographyFontFamilyArgs] {
	return pulumix.Val(i)
}

type ThemeConfigurationTypographyFontFamilyOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationTypographyFontFamilyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationTypographyFontFamily)(nil)).Elem()
}

func (o ThemeConfigurationTypographyFontFamilyOutput) ToThemeConfigurationTypographyFontFamilyOutput() ThemeConfigurationTypographyFontFamilyOutput {
	return o
}

func (o ThemeConfigurationTypographyFontFamilyOutput) ToThemeConfigurationTypographyFontFamilyOutputWithContext(ctx context.Context) ThemeConfigurationTypographyFontFamilyOutput {
	return o
}

func (o ThemeConfigurationTypographyFontFamilyOutput) ToOutput(ctx context.Context) pulumix.Output[ThemeConfigurationTypographyFontFamily] {
	return pulumix.Output[ThemeConfigurationTypographyFontFamily]{
		OutputState: o.OutputState,
	}
}

// Font family name.
func (o ThemeConfigurationTypographyFontFamilyOutput) FontFamily() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationTypographyFontFamily](o, func(v ThemeConfigurationTypographyFontFamily) *string { return v.FontFamily })
}

type ThemeConfigurationUiColorPalette struct {
	// Color (hexadecimal) that applies to selected states and buttons.
	Accent *string `pulumi:"accent"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
	AccentForeground *string `pulumi:"accentForeground"`
	// Color (hexadecimal) that applies to error messages.
	Danger *string `pulumi:"danger"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the error color.
	DangerForeground *string `pulumi:"dangerForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
	Dimension *string `pulumi:"dimension"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
	DimensionForeground *string `pulumi:"dimensionForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as measures.
	Measure *string `pulumi:"measure"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
	MeasureForeground *string `pulumi:"measureForeground"`
	// Color (hexadecimal) that applies to visuals and other high emphasis UI.
	PrimaryBackground *string `pulumi:"primaryBackground"`
	// Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
	PrimaryForeground *string `pulumi:"primaryForeground"`
	// Color (hexadecimal) that applies to the sheet background and sheet controls.
	SecondaryBackground *string `pulumi:"secondaryBackground"`
	// Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
	SecondaryForeground *string `pulumi:"secondaryForeground"`
	// Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
	Success *string `pulumi:"success"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the success color.
	SuccessForeground *string `pulumi:"successForeground"`
	// Color (hexadecimal) that applies to warning and informational messages.
	Warning *string `pulumi:"warning"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
	WarningForeground *string `pulumi:"warningForeground"`
}

type ThemeConfigurationUiColorPaletteArgs struct {
	// Color (hexadecimal) that applies to selected states and buttons.
	Accent pulumix.Input[*string] `pulumi:"accent"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
	AccentForeground pulumix.Input[*string] `pulumi:"accentForeground"`
	// Color (hexadecimal) that applies to error messages.
	Danger pulumix.Input[*string] `pulumi:"danger"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the error color.
	DangerForeground pulumix.Input[*string] `pulumi:"dangerForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
	Dimension pulumix.Input[*string] `pulumi:"dimension"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
	DimensionForeground pulumix.Input[*string] `pulumi:"dimensionForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as measures.
	Measure pulumix.Input[*string] `pulumi:"measure"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
	MeasureForeground pulumix.Input[*string] `pulumi:"measureForeground"`
	// Color (hexadecimal) that applies to visuals and other high emphasis UI.
	PrimaryBackground pulumix.Input[*string] `pulumi:"primaryBackground"`
	// Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
	PrimaryForeground pulumix.Input[*string] `pulumi:"primaryForeground"`
	// Color (hexadecimal) that applies to the sheet background and sheet controls.
	SecondaryBackground pulumix.Input[*string] `pulumi:"secondaryBackground"`
	// Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
	SecondaryForeground pulumix.Input[*string] `pulumi:"secondaryForeground"`
	// Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
	Success pulumix.Input[*string] `pulumi:"success"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the success color.
	SuccessForeground pulumix.Input[*string] `pulumi:"successForeground"`
	// Color (hexadecimal) that applies to warning and informational messages.
	Warning pulumix.Input[*string] `pulumi:"warning"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
	WarningForeground pulumix.Input[*string] `pulumi:"warningForeground"`
}

func (ThemeConfigurationUiColorPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationUiColorPalette)(nil)).Elem()
}

func (i ThemeConfigurationUiColorPaletteArgs) ToThemeConfigurationUiColorPaletteOutput() ThemeConfigurationUiColorPaletteOutput {
	return i.ToThemeConfigurationUiColorPaletteOutputWithContext(context.Background())
}

func (i ThemeConfigurationUiColorPaletteArgs) ToThemeConfigurationUiColorPaletteOutputWithContext(ctx context.Context) ThemeConfigurationUiColorPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationUiColorPaletteOutput)
}

func (i *ThemeConfigurationUiColorPaletteArgs) ToOutput(ctx context.Context) pulumix.Output[*ThemeConfigurationUiColorPaletteArgs] {
	return pulumix.Val(i)
}

type ThemeConfigurationUiColorPaletteOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationUiColorPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationUiColorPalette)(nil)).Elem()
}

func (o ThemeConfigurationUiColorPaletteOutput) ToThemeConfigurationUiColorPaletteOutput() ThemeConfigurationUiColorPaletteOutput {
	return o
}

func (o ThemeConfigurationUiColorPaletteOutput) ToThemeConfigurationUiColorPaletteOutputWithContext(ctx context.Context) ThemeConfigurationUiColorPaletteOutput {
	return o
}

func (o ThemeConfigurationUiColorPaletteOutput) ToOutput(ctx context.Context) pulumix.Output[ThemeConfigurationUiColorPalette] {
	return pulumix.Output[ThemeConfigurationUiColorPalette]{
		OutputState: o.OutputState,
	}
}

// Color (hexadecimal) that applies to selected states and buttons.
func (o ThemeConfigurationUiColorPaletteOutput) Accent() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.Accent })
}

// Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
func (o ThemeConfigurationUiColorPaletteOutput) AccentForeground() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.AccentForeground })
}

// Color (hexadecimal) that applies to error messages.
func (o ThemeConfigurationUiColorPaletteOutput) Danger() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.Danger })
}

// Color (hexadecimal) that applies to any text or other elements that appear over the error color.
func (o ThemeConfigurationUiColorPaletteOutput) DangerForeground() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.DangerForeground })
}

// Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
func (o ThemeConfigurationUiColorPaletteOutput) Dimension() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.Dimension })
}

// Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
func (o ThemeConfigurationUiColorPaletteOutput) DimensionForeground() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.DimensionForeground })
}

// Color (hexadecimal) that applies to the names of fields that are identified as measures.
func (o ThemeConfigurationUiColorPaletteOutput) Measure() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.Measure })
}

// Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
func (o ThemeConfigurationUiColorPaletteOutput) MeasureForeground() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.MeasureForeground })
}

// Color (hexadecimal) that applies to visuals and other high emphasis UI.
func (o ThemeConfigurationUiColorPaletteOutput) PrimaryBackground() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.PrimaryBackground })
}

// Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
func (o ThemeConfigurationUiColorPaletteOutput) PrimaryForeground() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.PrimaryForeground })
}

// Color (hexadecimal) that applies to the sheet background and sheet controls.
func (o ThemeConfigurationUiColorPaletteOutput) SecondaryBackground() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.SecondaryBackground })
}

// Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
func (o ThemeConfigurationUiColorPaletteOutput) SecondaryForeground() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.SecondaryForeground })
}

// Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
func (o ThemeConfigurationUiColorPaletteOutput) Success() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.Success })
}

// Color (hexadecimal) that applies to any text or other elements that appear over the success color.
func (o ThemeConfigurationUiColorPaletteOutput) SuccessForeground() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.SuccessForeground })
}

// Color (hexadecimal) that applies to warning and informational messages.
func (o ThemeConfigurationUiColorPaletteOutput) Warning() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.Warning })
}

// Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
func (o ThemeConfigurationUiColorPaletteOutput) WarningForeground() pulumix.Output[*string] {
	return pulumix.Apply[ThemeConfigurationUiColorPalette](o, func(v ThemeConfigurationUiColorPalette) *string { return v.WarningForeground })
}

type ThemePermission struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions []string `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal string `pulumi:"principal"`
}

type ThemePermissionArgs struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions pulumix.Input[[]string] `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal pulumix.Input[string] `pulumi:"principal"`
}

func (ThemePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemePermission)(nil)).Elem()
}

func (i ThemePermissionArgs) ToThemePermissionOutput() ThemePermissionOutput {
	return i.ToThemePermissionOutputWithContext(context.Background())
}

func (i ThemePermissionArgs) ToThemePermissionOutputWithContext(ctx context.Context) ThemePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemePermissionOutput)
}

func (i *ThemePermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*ThemePermissionArgs] {
	return pulumix.Val(i)
}

type ThemePermissionOutput struct{ *pulumi.OutputState }

func (ThemePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemePermission)(nil)).Elem()
}

func (o ThemePermissionOutput) ToThemePermissionOutput() ThemePermissionOutput {
	return o
}

func (o ThemePermissionOutput) ToThemePermissionOutputWithContext(ctx context.Context) ThemePermissionOutput {
	return o
}

func (o ThemePermissionOutput) ToOutput(ctx context.Context) pulumix.Output[ThemePermission] {
	return pulumix.Output[ThemePermission]{
		OutputState: o.OutputState,
	}
}

// List of IAM actions to grant or revoke permissions on.
func (o ThemePermissionOutput) Actions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ThemePermission](o, func(v ThemePermission) []string { return v.Actions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
func (o ThemePermissionOutput) Principal() pulumix.Output[string] {
	return pulumix.Apply[ThemePermission](o, func(v ThemePermission) string { return v.Principal })
}

type VpcConnectionTimeouts struct {
	Create *string `pulumi:"create"`
	Delete *string `pulumi:"delete"`
	Update *string `pulumi:"update"`
}

type VpcConnectionTimeoutsArgs struct {
	Create pulumix.Input[*string] `pulumi:"create"`
	Delete pulumix.Input[*string] `pulumi:"delete"`
	Update pulumix.Input[*string] `pulumi:"update"`
}

func (VpcConnectionTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionTimeouts)(nil)).Elem()
}

func (i VpcConnectionTimeoutsArgs) ToVpcConnectionTimeoutsOutput() VpcConnectionTimeoutsOutput {
	return i.ToVpcConnectionTimeoutsOutputWithContext(context.Background())
}

func (i VpcConnectionTimeoutsArgs) ToVpcConnectionTimeoutsOutputWithContext(ctx context.Context) VpcConnectionTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionTimeoutsOutput)
}

func (i *VpcConnectionTimeoutsArgs) ToOutput(ctx context.Context) pulumix.Output[*VpcConnectionTimeoutsArgs] {
	return pulumix.Val(i)
}

type VpcConnectionTimeoutsOutput struct{ *pulumi.OutputState }

func (VpcConnectionTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionTimeouts)(nil)).Elem()
}

func (o VpcConnectionTimeoutsOutput) ToVpcConnectionTimeoutsOutput() VpcConnectionTimeoutsOutput {
	return o
}

func (o VpcConnectionTimeoutsOutput) ToVpcConnectionTimeoutsOutputWithContext(ctx context.Context) VpcConnectionTimeoutsOutput {
	return o
}

func (o VpcConnectionTimeoutsOutput) ToOutput(ctx context.Context) pulumix.Output[VpcConnectionTimeouts] {
	return pulumix.Output[VpcConnectionTimeouts]{
		OutputState: o.OutputState,
	}
}

func (o VpcConnectionTimeoutsOutput) Create() pulumix.Output[*string] {
	return pulumix.Apply[VpcConnectionTimeouts](o, func(v VpcConnectionTimeouts) *string { return v.Create })
}

func (o VpcConnectionTimeoutsOutput) Delete() pulumix.Output[*string] {
	return pulumix.Apply[VpcConnectionTimeouts](o, func(v VpcConnectionTimeouts) *string { return v.Delete })
}

func (o VpcConnectionTimeoutsOutput) Update() pulumix.Output[*string] {
	return pulumix.Apply[VpcConnectionTimeouts](o, func(v VpcConnectionTimeouts) *string { return v.Update })
}

type GetDataSetColumnGroup struct {
	GeoSpatialColumnGroups []GetDataSetColumnGroupGeoSpatialColumnGroup `pulumi:"geoSpatialColumnGroups"`
}

type GetDataSetColumnGroupArgs struct {
	GeoSpatialColumnGroups pulumix.Input[[]*GetDataSetColumnGroupGeoSpatialColumnGroupArgs] `pulumi:"geoSpatialColumnGroups"`
}

func (GetDataSetColumnGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetColumnGroup)(nil)).Elem()
}

func (i GetDataSetColumnGroupArgs) ToGetDataSetColumnGroupOutput() GetDataSetColumnGroupOutput {
	return i.ToGetDataSetColumnGroupOutputWithContext(context.Background())
}

func (i GetDataSetColumnGroupArgs) ToGetDataSetColumnGroupOutputWithContext(ctx context.Context) GetDataSetColumnGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetColumnGroupOutput)
}

func (i *GetDataSetColumnGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetColumnGroupArgs] {
	return pulumix.Val(i)
}

type GetDataSetColumnGroupOutput struct{ *pulumi.OutputState }

func (GetDataSetColumnGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetColumnGroup)(nil)).Elem()
}

func (o GetDataSetColumnGroupOutput) ToGetDataSetColumnGroupOutput() GetDataSetColumnGroupOutput {
	return o
}

func (o GetDataSetColumnGroupOutput) ToGetDataSetColumnGroupOutputWithContext(ctx context.Context) GetDataSetColumnGroupOutput {
	return o
}

func (o GetDataSetColumnGroupOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetColumnGroup] {
	return pulumix.Output[GetDataSetColumnGroup]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetColumnGroupOutput) GeoSpatialColumnGroups() pulumix.GArrayOutput[GetDataSetColumnGroupGeoSpatialColumnGroup, GetDataSetColumnGroupGeoSpatialColumnGroupOutput] {
	value := pulumix.Apply[GetDataSetColumnGroup](o, func(v GetDataSetColumnGroup) []GetDataSetColumnGroupGeoSpatialColumnGroup {
		return v.GeoSpatialColumnGroups
	})
	return pulumix.GArrayOutput[GetDataSetColumnGroupGeoSpatialColumnGroup, GetDataSetColumnGroupGeoSpatialColumnGroupOutput]{OutputState: value.OutputState}
}

type GetDataSetColumnGroupGeoSpatialColumnGroup struct {
	Columns     []string `pulumi:"columns"`
	CountryCode string   `pulumi:"countryCode"`
	Name        string   `pulumi:"name"`
}

type GetDataSetColumnGroupGeoSpatialColumnGroupArgs struct {
	Columns     pulumix.Input[[]string] `pulumi:"columns"`
	CountryCode pulumix.Input[string]   `pulumi:"countryCode"`
	Name        pulumix.Input[string]   `pulumi:"name"`
}

func (GetDataSetColumnGroupGeoSpatialColumnGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetColumnGroupGeoSpatialColumnGroup)(nil)).Elem()
}

func (i GetDataSetColumnGroupGeoSpatialColumnGroupArgs) ToGetDataSetColumnGroupGeoSpatialColumnGroupOutput() GetDataSetColumnGroupGeoSpatialColumnGroupOutput {
	return i.ToGetDataSetColumnGroupGeoSpatialColumnGroupOutputWithContext(context.Background())
}

func (i GetDataSetColumnGroupGeoSpatialColumnGroupArgs) ToGetDataSetColumnGroupGeoSpatialColumnGroupOutputWithContext(ctx context.Context) GetDataSetColumnGroupGeoSpatialColumnGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetColumnGroupGeoSpatialColumnGroupOutput)
}

func (i *GetDataSetColumnGroupGeoSpatialColumnGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetColumnGroupGeoSpatialColumnGroupArgs] {
	return pulumix.Val(i)
}

type GetDataSetColumnGroupGeoSpatialColumnGroupOutput struct{ *pulumi.OutputState }

func (GetDataSetColumnGroupGeoSpatialColumnGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetColumnGroupGeoSpatialColumnGroup)(nil)).Elem()
}

func (o GetDataSetColumnGroupGeoSpatialColumnGroupOutput) ToGetDataSetColumnGroupGeoSpatialColumnGroupOutput() GetDataSetColumnGroupGeoSpatialColumnGroupOutput {
	return o
}

func (o GetDataSetColumnGroupGeoSpatialColumnGroupOutput) ToGetDataSetColumnGroupGeoSpatialColumnGroupOutputWithContext(ctx context.Context) GetDataSetColumnGroupGeoSpatialColumnGroupOutput {
	return o
}

func (o GetDataSetColumnGroupGeoSpatialColumnGroupOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetColumnGroupGeoSpatialColumnGroup] {
	return pulumix.Output[GetDataSetColumnGroupGeoSpatialColumnGroup]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetColumnGroupGeoSpatialColumnGroupOutput) Columns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDataSetColumnGroupGeoSpatialColumnGroup](o, func(v GetDataSetColumnGroupGeoSpatialColumnGroup) []string { return v.Columns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetDataSetColumnGroupGeoSpatialColumnGroupOutput) CountryCode() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetColumnGroupGeoSpatialColumnGroup](o, func(v GetDataSetColumnGroupGeoSpatialColumnGroup) string { return v.CountryCode })
}

func (o GetDataSetColumnGroupGeoSpatialColumnGroupOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetColumnGroupGeoSpatialColumnGroup](o, func(v GetDataSetColumnGroupGeoSpatialColumnGroup) string { return v.Name })
}

type GetDataSetColumnLevelPermissionRule struct {
	ColumnNames []string `pulumi:"columnNames"`
	Principals  []string `pulumi:"principals"`
}

type GetDataSetColumnLevelPermissionRuleArgs struct {
	ColumnNames pulumix.Input[[]string] `pulumi:"columnNames"`
	Principals  pulumix.Input[[]string] `pulumi:"principals"`
}

func (GetDataSetColumnLevelPermissionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (i GetDataSetColumnLevelPermissionRuleArgs) ToGetDataSetColumnLevelPermissionRuleOutput() GetDataSetColumnLevelPermissionRuleOutput {
	return i.ToGetDataSetColumnLevelPermissionRuleOutputWithContext(context.Background())
}

func (i GetDataSetColumnLevelPermissionRuleArgs) ToGetDataSetColumnLevelPermissionRuleOutputWithContext(ctx context.Context) GetDataSetColumnLevelPermissionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetColumnLevelPermissionRuleOutput)
}

func (i *GetDataSetColumnLevelPermissionRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetColumnLevelPermissionRuleArgs] {
	return pulumix.Val(i)
}

type GetDataSetColumnLevelPermissionRuleOutput struct{ *pulumi.OutputState }

func (GetDataSetColumnLevelPermissionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (o GetDataSetColumnLevelPermissionRuleOutput) ToGetDataSetColumnLevelPermissionRuleOutput() GetDataSetColumnLevelPermissionRuleOutput {
	return o
}

func (o GetDataSetColumnLevelPermissionRuleOutput) ToGetDataSetColumnLevelPermissionRuleOutputWithContext(ctx context.Context) GetDataSetColumnLevelPermissionRuleOutput {
	return o
}

func (o GetDataSetColumnLevelPermissionRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetColumnLevelPermissionRule] {
	return pulumix.Output[GetDataSetColumnLevelPermissionRule]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetColumnLevelPermissionRuleOutput) ColumnNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDataSetColumnLevelPermissionRule](o, func(v GetDataSetColumnLevelPermissionRule) []string { return v.ColumnNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetDataSetColumnLevelPermissionRuleOutput) Principals() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDataSetColumnLevelPermissionRule](o, func(v GetDataSetColumnLevelPermissionRule) []string { return v.Principals })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetDataSetDataSetUsageConfiguration struct {
	DisableUseAsDirectQuerySource bool `pulumi:"disableUseAsDirectQuerySource"`
	DisableUseAsImportedSource    bool `pulumi:"disableUseAsImportedSource"`
}

type GetDataSetDataSetUsageConfigurationArgs struct {
	DisableUseAsDirectQuerySource pulumix.Input[bool] `pulumi:"disableUseAsDirectQuerySource"`
	DisableUseAsImportedSource    pulumix.Input[bool] `pulumi:"disableUseAsImportedSource"`
}

func (GetDataSetDataSetUsageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetDataSetUsageConfiguration)(nil)).Elem()
}

func (i GetDataSetDataSetUsageConfigurationArgs) ToGetDataSetDataSetUsageConfigurationOutput() GetDataSetDataSetUsageConfigurationOutput {
	return i.ToGetDataSetDataSetUsageConfigurationOutputWithContext(context.Background())
}

func (i GetDataSetDataSetUsageConfigurationArgs) ToGetDataSetDataSetUsageConfigurationOutputWithContext(ctx context.Context) GetDataSetDataSetUsageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetDataSetUsageConfigurationOutput)
}

func (i *GetDataSetDataSetUsageConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetDataSetUsageConfigurationArgs] {
	return pulumix.Val(i)
}

type GetDataSetDataSetUsageConfigurationOutput struct{ *pulumi.OutputState }

func (GetDataSetDataSetUsageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetDataSetUsageConfiguration)(nil)).Elem()
}

func (o GetDataSetDataSetUsageConfigurationOutput) ToGetDataSetDataSetUsageConfigurationOutput() GetDataSetDataSetUsageConfigurationOutput {
	return o
}

func (o GetDataSetDataSetUsageConfigurationOutput) ToGetDataSetDataSetUsageConfigurationOutputWithContext(ctx context.Context) GetDataSetDataSetUsageConfigurationOutput {
	return o
}

func (o GetDataSetDataSetUsageConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetDataSetUsageConfiguration] {
	return pulumix.Output[GetDataSetDataSetUsageConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetDataSetUsageConfigurationOutput) DisableUseAsDirectQuerySource() pulumix.Output[bool] {
	return pulumix.Apply[GetDataSetDataSetUsageConfiguration](o, func(v GetDataSetDataSetUsageConfiguration) bool { return v.DisableUseAsDirectQuerySource })
}

func (o GetDataSetDataSetUsageConfigurationOutput) DisableUseAsImportedSource() pulumix.Output[bool] {
	return pulumix.Apply[GetDataSetDataSetUsageConfiguration](o, func(v GetDataSetDataSetUsageConfiguration) bool { return v.DisableUseAsImportedSource })
}

type GetDataSetFieldFolder struct {
	Columns        []string `pulumi:"columns"`
	Description    string   `pulumi:"description"`
	FieldFoldersId string   `pulumi:"fieldFoldersId"`
}

type GetDataSetFieldFolderArgs struct {
	Columns        pulumix.Input[[]string] `pulumi:"columns"`
	Description    pulumix.Input[string]   `pulumi:"description"`
	FieldFoldersId pulumix.Input[string]   `pulumi:"fieldFoldersId"`
}

func (GetDataSetFieldFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetFieldFolder)(nil)).Elem()
}

func (i GetDataSetFieldFolderArgs) ToGetDataSetFieldFolderOutput() GetDataSetFieldFolderOutput {
	return i.ToGetDataSetFieldFolderOutputWithContext(context.Background())
}

func (i GetDataSetFieldFolderArgs) ToGetDataSetFieldFolderOutputWithContext(ctx context.Context) GetDataSetFieldFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetFieldFolderOutput)
}

func (i *GetDataSetFieldFolderArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetFieldFolderArgs] {
	return pulumix.Val(i)
}

type GetDataSetFieldFolderOutput struct{ *pulumi.OutputState }

func (GetDataSetFieldFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetFieldFolder)(nil)).Elem()
}

func (o GetDataSetFieldFolderOutput) ToGetDataSetFieldFolderOutput() GetDataSetFieldFolderOutput {
	return o
}

func (o GetDataSetFieldFolderOutput) ToGetDataSetFieldFolderOutputWithContext(ctx context.Context) GetDataSetFieldFolderOutput {
	return o
}

func (o GetDataSetFieldFolderOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetFieldFolder] {
	return pulumix.Output[GetDataSetFieldFolder]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetFieldFolderOutput) Columns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDataSetFieldFolder](o, func(v GetDataSetFieldFolder) []string { return v.Columns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetDataSetFieldFolderOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetFieldFolder](o, func(v GetDataSetFieldFolder) string { return v.Description })
}

func (o GetDataSetFieldFolderOutput) FieldFoldersId() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetFieldFolder](o, func(v GetDataSetFieldFolder) string { return v.FieldFoldersId })
}

type GetDataSetLogicalTableMap struct {
	Alias             string                                   `pulumi:"alias"`
	DataTransforms    []GetDataSetLogicalTableMapDataTransform `pulumi:"dataTransforms"`
	LogicalTableMapId string                                   `pulumi:"logicalTableMapId"`
	Sources           []GetDataSetLogicalTableMapSource        `pulumi:"sources"`
}

type GetDataSetLogicalTableMapArgs struct {
	Alias             pulumix.Input[string]                                        `pulumi:"alias"`
	DataTransforms    pulumix.Input[[]*GetDataSetLogicalTableMapDataTransformArgs] `pulumi:"dataTransforms"`
	LogicalTableMapId pulumix.Input[string]                                        `pulumi:"logicalTableMapId"`
	Sources           pulumix.Input[[]*GetDataSetLogicalTableMapSourceArgs]        `pulumi:"sources"`
}

func (GetDataSetLogicalTableMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMap)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapArgs) ToGetDataSetLogicalTableMapOutput() GetDataSetLogicalTableMapOutput {
	return i.ToGetDataSetLogicalTableMapOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapArgs) ToGetDataSetLogicalTableMapOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapOutput)
}

func (i *GetDataSetLogicalTableMapArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMap)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapOutput) ToGetDataSetLogicalTableMapOutput() GetDataSetLogicalTableMapOutput {
	return o
}

func (o GetDataSetLogicalTableMapOutput) ToGetDataSetLogicalTableMapOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapOutput {
	return o
}

func (o GetDataSetLogicalTableMapOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMap] {
	return pulumix.Output[GetDataSetLogicalTableMap]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapOutput) Alias() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMap](o, func(v GetDataSetLogicalTableMap) string { return v.Alias })
}

func (o GetDataSetLogicalTableMapOutput) DataTransforms() pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransform, GetDataSetLogicalTableMapDataTransformOutput] {
	value := pulumix.Apply[GetDataSetLogicalTableMap](o, func(v GetDataSetLogicalTableMap) []GetDataSetLogicalTableMapDataTransform { return v.DataTransforms })
	return pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransform, GetDataSetLogicalTableMapDataTransformOutput]{OutputState: value.OutputState}
}

func (o GetDataSetLogicalTableMapOutput) LogicalTableMapId() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMap](o, func(v GetDataSetLogicalTableMap) string { return v.LogicalTableMapId })
}

func (o GetDataSetLogicalTableMapOutput) Sources() pulumix.GArrayOutput[GetDataSetLogicalTableMapSource, GetDataSetLogicalTableMapSourceOutput] {
	value := pulumix.Apply[GetDataSetLogicalTableMap](o, func(v GetDataSetLogicalTableMap) []GetDataSetLogicalTableMapSource { return v.Sources })
	return pulumix.GArrayOutput[GetDataSetLogicalTableMapSource, GetDataSetLogicalTableMapSourceOutput]{OutputState: value.OutputState}
}

type GetDataSetLogicalTableMapDataTransform struct {
	CastColumnTypeOperations []GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation `pulumi:"castColumnTypeOperations"`
	CreateColumnsOperations  []GetDataSetLogicalTableMapDataTransformCreateColumnsOperation  `pulumi:"createColumnsOperations"`
	FilterOperations         []GetDataSetLogicalTableMapDataTransformFilterOperation         `pulumi:"filterOperations"`
	ProjectOperations        []GetDataSetLogicalTableMapDataTransformProjectOperation        `pulumi:"projectOperations"`
	RenameColumnOperations   []GetDataSetLogicalTableMapDataTransformRenameColumnOperation   `pulumi:"renameColumnOperations"`
	TagColumnOperations      []GetDataSetLogicalTableMapDataTransformTagColumnOperation      `pulumi:"tagColumnOperations"`
	UntagColumnOperations    []GetDataSetLogicalTableMapDataTransformUntagColumnOperation    `pulumi:"untagColumnOperations"`
}

type GetDataSetLogicalTableMapDataTransformArgs struct {
	CastColumnTypeOperations pulumix.Input[[]*GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs] `pulumi:"castColumnTypeOperations"`
	CreateColumnsOperations  pulumix.Input[[]*GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArgs]  `pulumi:"createColumnsOperations"`
	FilterOperations         pulumix.Input[[]*GetDataSetLogicalTableMapDataTransformFilterOperationArgs]         `pulumi:"filterOperations"`
	ProjectOperations        pulumix.Input[[]*GetDataSetLogicalTableMapDataTransformProjectOperationArgs]        `pulumi:"projectOperations"`
	RenameColumnOperations   pulumix.Input[[]*GetDataSetLogicalTableMapDataTransformRenameColumnOperationArgs]   `pulumi:"renameColumnOperations"`
	TagColumnOperations      pulumix.Input[[]*GetDataSetLogicalTableMapDataTransformTagColumnOperationArgs]      `pulumi:"tagColumnOperations"`
	UntagColumnOperations    pulumix.Input[[]*GetDataSetLogicalTableMapDataTransformUntagColumnOperationArgs]    `pulumi:"untagColumnOperations"`
}

func (GetDataSetLogicalTableMapDataTransformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransform)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformArgs) ToGetDataSetLogicalTableMapDataTransformOutput() GetDataSetLogicalTableMapDataTransformOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformArgs) ToGetDataSetLogicalTableMapDataTransformOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformOutput)
}

func (i *GetDataSetLogicalTableMapDataTransformArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapDataTransformArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapDataTransformOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransform)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformOutput) ToGetDataSetLogicalTableMapDataTransformOutput() GetDataSetLogicalTableMapDataTransformOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformOutput) ToGetDataSetLogicalTableMapDataTransformOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMapDataTransform] {
	return pulumix.Output[GetDataSetLogicalTableMapDataTransform]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapDataTransformOutput) CastColumnTypeOperations() pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation, GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput] {
	value := pulumix.Apply[GetDataSetLogicalTableMapDataTransform](o, func(v GetDataSetLogicalTableMapDataTransform) []GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation {
		return v.CastColumnTypeOperations
	})
	return pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation, GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput]{OutputState: value.OutputState}
}

func (o GetDataSetLogicalTableMapDataTransformOutput) CreateColumnsOperations() pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformCreateColumnsOperation, GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput] {
	value := pulumix.Apply[GetDataSetLogicalTableMapDataTransform](o, func(v GetDataSetLogicalTableMapDataTransform) []GetDataSetLogicalTableMapDataTransformCreateColumnsOperation {
		return v.CreateColumnsOperations
	})
	return pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformCreateColumnsOperation, GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput]{OutputState: value.OutputState}
}

func (o GetDataSetLogicalTableMapDataTransformOutput) FilterOperations() pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformFilterOperation, GetDataSetLogicalTableMapDataTransformFilterOperationOutput] {
	value := pulumix.Apply[GetDataSetLogicalTableMapDataTransform](o, func(v GetDataSetLogicalTableMapDataTransform) []GetDataSetLogicalTableMapDataTransformFilterOperation {
		return v.FilterOperations
	})
	return pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformFilterOperation, GetDataSetLogicalTableMapDataTransformFilterOperationOutput]{OutputState: value.OutputState}
}

func (o GetDataSetLogicalTableMapDataTransformOutput) ProjectOperations() pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformProjectOperation, GetDataSetLogicalTableMapDataTransformProjectOperationOutput] {
	value := pulumix.Apply[GetDataSetLogicalTableMapDataTransform](o, func(v GetDataSetLogicalTableMapDataTransform) []GetDataSetLogicalTableMapDataTransformProjectOperation {
		return v.ProjectOperations
	})
	return pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformProjectOperation, GetDataSetLogicalTableMapDataTransformProjectOperationOutput]{OutputState: value.OutputState}
}

func (o GetDataSetLogicalTableMapDataTransformOutput) RenameColumnOperations() pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformRenameColumnOperation, GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput] {
	value := pulumix.Apply[GetDataSetLogicalTableMapDataTransform](o, func(v GetDataSetLogicalTableMapDataTransform) []GetDataSetLogicalTableMapDataTransformRenameColumnOperation {
		return v.RenameColumnOperations
	})
	return pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformRenameColumnOperation, GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput]{OutputState: value.OutputState}
}

func (o GetDataSetLogicalTableMapDataTransformOutput) TagColumnOperations() pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformTagColumnOperation, GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput] {
	value := pulumix.Apply[GetDataSetLogicalTableMapDataTransform](o, func(v GetDataSetLogicalTableMapDataTransform) []GetDataSetLogicalTableMapDataTransformTagColumnOperation {
		return v.TagColumnOperations
	})
	return pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformTagColumnOperation, GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput]{OutputState: value.OutputState}
}

func (o GetDataSetLogicalTableMapDataTransformOutput) UntagColumnOperations() pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformUntagColumnOperation, GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput] {
	value := pulumix.Apply[GetDataSetLogicalTableMapDataTransform](o, func(v GetDataSetLogicalTableMapDataTransform) []GetDataSetLogicalTableMapDataTransformUntagColumnOperation {
		return v.UntagColumnOperations
	})
	return pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformUntagColumnOperation, GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput]{OutputState: value.OutputState}
}

type GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation struct {
	ColumnName    string `pulumi:"columnName"`
	Format        string `pulumi:"format"`
	NewColumnType string `pulumi:"newColumnType"`
}

type GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs struct {
	ColumnName    pulumix.Input[string] `pulumi:"columnName"`
	Format        pulumix.Input[string] `pulumi:"format"`
	NewColumnType pulumix.Input[string] `pulumi:"newColumnType"`
}

func (GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput() GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput)
}

func (i *GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput() GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation] {
	return pulumix.Output[GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ColumnName() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation](o, func(v GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation) string { return v.ColumnName })
}

func (o GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) Format() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation](o, func(v GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation) string { return v.Format })
}

func (o GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) NewColumnType() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation](o, func(v GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation) string { return v.NewColumnType })
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperation struct {
	Columns []GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn `pulumi:"columns"`
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArgs struct {
	Columns pulumix.Input[[]*GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs] `pulumi:"columns"`
}

func (GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCreateColumnsOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput)
}

func (i *GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCreateColumnsOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMapDataTransformCreateColumnsOperation] {
	return pulumix.Output[GetDataSetLogicalTableMapDataTransformCreateColumnsOperation]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) Columns() pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn, GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput] {
	value := pulumix.Apply[GetDataSetLogicalTableMapDataTransformCreateColumnsOperation](o, func(v GetDataSetLogicalTableMapDataTransformCreateColumnsOperation) []GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn {
		return v.Columns
	})
	return pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn, GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput]{OutputState: value.OutputState}
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn struct {
	ColumnId   string `pulumi:"columnId"`
	ColumnName string `pulumi:"columnName"`
	Expression string `pulumi:"expression"`
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs struct {
	ColumnId   pulumix.Input[string] `pulumi:"columnId"`
	ColumnName pulumix.Input[string] `pulumi:"columnName"`
	Expression pulumix.Input[string] `pulumi:"expression"`
}

func (GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput)
}

func (i *GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn] {
	return pulumix.Output[GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ColumnId() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn](o, func(v GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn) string { return v.ColumnId })
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ColumnName() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn](o, func(v GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn) string { return v.ColumnName })
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) Expression() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn](o, func(v GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn) string { return v.Expression })
}

type GetDataSetLogicalTableMapDataTransformFilterOperation struct {
	ConditionExpression string `pulumi:"conditionExpression"`
}

type GetDataSetLogicalTableMapDataTransformFilterOperationArgs struct {
	ConditionExpression pulumix.Input[string] `pulumi:"conditionExpression"`
}

func (GetDataSetLogicalTableMapDataTransformFilterOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformFilterOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformFilterOperationArgs) ToGetDataSetLogicalTableMapDataTransformFilterOperationOutput() GetDataSetLogicalTableMapDataTransformFilterOperationOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformFilterOperationOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformFilterOperationArgs) ToGetDataSetLogicalTableMapDataTransformFilterOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformFilterOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformFilterOperationOutput)
}

func (i *GetDataSetLogicalTableMapDataTransformFilterOperationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapDataTransformFilterOperationArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapDataTransformFilterOperationOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformFilterOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformFilterOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformFilterOperationOutput) ToGetDataSetLogicalTableMapDataTransformFilterOperationOutput() GetDataSetLogicalTableMapDataTransformFilterOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformFilterOperationOutput) ToGetDataSetLogicalTableMapDataTransformFilterOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformFilterOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformFilterOperationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMapDataTransformFilterOperation] {
	return pulumix.Output[GetDataSetLogicalTableMapDataTransformFilterOperation]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapDataTransformFilterOperationOutput) ConditionExpression() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapDataTransformFilterOperation](o, func(v GetDataSetLogicalTableMapDataTransformFilterOperation) string { return v.ConditionExpression })
}

type GetDataSetLogicalTableMapDataTransformProjectOperation struct {
	ProjectedColumns []string `pulumi:"projectedColumns"`
}

type GetDataSetLogicalTableMapDataTransformProjectOperationArgs struct {
	ProjectedColumns pulumix.Input[[]string] `pulumi:"projectedColumns"`
}

func (GetDataSetLogicalTableMapDataTransformProjectOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformProjectOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformProjectOperationArgs) ToGetDataSetLogicalTableMapDataTransformProjectOperationOutput() GetDataSetLogicalTableMapDataTransformProjectOperationOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformProjectOperationOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformProjectOperationArgs) ToGetDataSetLogicalTableMapDataTransformProjectOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformProjectOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformProjectOperationOutput)
}

func (i *GetDataSetLogicalTableMapDataTransformProjectOperationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapDataTransformProjectOperationArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapDataTransformProjectOperationOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformProjectOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformProjectOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformProjectOperationOutput) ToGetDataSetLogicalTableMapDataTransformProjectOperationOutput() GetDataSetLogicalTableMapDataTransformProjectOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformProjectOperationOutput) ToGetDataSetLogicalTableMapDataTransformProjectOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformProjectOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformProjectOperationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMapDataTransformProjectOperation] {
	return pulumix.Output[GetDataSetLogicalTableMapDataTransformProjectOperation]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapDataTransformProjectOperationOutput) ProjectedColumns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDataSetLogicalTableMapDataTransformProjectOperation](o, func(v GetDataSetLogicalTableMapDataTransformProjectOperation) []string { return v.ProjectedColumns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetDataSetLogicalTableMapDataTransformRenameColumnOperation struct {
	ColumnName    string `pulumi:"columnName"`
	NewColumnName string `pulumi:"newColumnName"`
}

type GetDataSetLogicalTableMapDataTransformRenameColumnOperationArgs struct {
	ColumnName    pulumix.Input[string] `pulumi:"columnName"`
	NewColumnName pulumix.Input[string] `pulumi:"newColumnName"`
}

func (GetDataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformRenameColumnOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput() GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput)
}

func (i *GetDataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapDataTransformRenameColumnOperationArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformRenameColumnOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput() GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMapDataTransformRenameColumnOperation] {
	return pulumix.Output[GetDataSetLogicalTableMapDataTransformRenameColumnOperation]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ColumnName() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapDataTransformRenameColumnOperation](o, func(v GetDataSetLogicalTableMapDataTransformRenameColumnOperation) string { return v.ColumnName })
}

func (o GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput) NewColumnName() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapDataTransformRenameColumnOperation](o, func(v GetDataSetLogicalTableMapDataTransformRenameColumnOperation) string { return v.NewColumnName })
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperation struct {
	ColumnName string                                                        `pulumi:"columnName"`
	Tags       []GetDataSetLogicalTableMapDataTransformTagColumnOperationTag `pulumi:"tags"`
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationArgs struct {
	ColumnName pulumix.Input[string]                                                             `pulumi:"columnName"`
	Tags       pulumix.Input[[]*GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArgs] `pulumi:"tags"`
}

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationArgs) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformTagColumnOperationOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationArgs) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput)
}

func (i *GetDataSetLogicalTableMapDataTransformTagColumnOperationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapDataTransformTagColumnOperationArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMapDataTransformTagColumnOperation] {
	return pulumix.Output[GetDataSetLogicalTableMapDataTransformTagColumnOperation]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput) ColumnName() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapDataTransformTagColumnOperation](o, func(v GetDataSetLogicalTableMapDataTransformTagColumnOperation) string { return v.ColumnName })
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput) Tags() pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformTagColumnOperationTag, GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput] {
	value := pulumix.Apply[GetDataSetLogicalTableMapDataTransformTagColumnOperation](o, func(v GetDataSetLogicalTableMapDataTransformTagColumnOperation) []GetDataSetLogicalTableMapDataTransformTagColumnOperationTag {
		return v.Tags
	})
	return pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformTagColumnOperationTag, GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput]{OutputState: value.OutputState}
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTag struct {
	ColumnDescriptions   []GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription `pulumi:"columnDescriptions"`
	ColumnGeographicRole string                                                                         `pulumi:"columnGeographicRole"`
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArgs struct {
	ColumnDescriptions   pulumix.Input[[]*GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs] `pulumi:"columnDescriptions"`
	ColumnGeographicRole pulumix.Input[string]                                                                              `pulumi:"columnGeographicRole"`
}

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperationTag)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArgs) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArgs) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput)
}

func (i *GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperationTag)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMapDataTransformTagColumnOperationTag] {
	return pulumix.Output[GetDataSetLogicalTableMapDataTransformTagColumnOperationTag]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ColumnDescriptions() pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription, GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput] {
	value := pulumix.Apply[GetDataSetLogicalTableMapDataTransformTagColumnOperationTag](o, func(v GetDataSetLogicalTableMapDataTransformTagColumnOperationTag) []GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription {
		return v.ColumnDescriptions
	})
	return pulumix.GArrayOutput[GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription, GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput]{OutputState: value.OutputState}
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ColumnGeographicRole() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapDataTransformTagColumnOperationTag](o, func(v GetDataSetLogicalTableMapDataTransformTagColumnOperationTag) string {
		return v.ColumnGeographicRole
	})
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription struct {
	Text string `pulumi:"text"`
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs struct {
	Text pulumix.Input[string] `pulumi:"text"`
}

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput)
}

func (i *GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription] {
	return pulumix.Output[GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) Text() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription](o, func(v GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription) string {
		return v.Text
	})
}

type GetDataSetLogicalTableMapDataTransformUntagColumnOperation struct {
	ColumnName string   `pulumi:"columnName"`
	TagNames   []string `pulumi:"tagNames"`
}

type GetDataSetLogicalTableMapDataTransformUntagColumnOperationArgs struct {
	ColumnName pulumix.Input[string]   `pulumi:"columnName"`
	TagNames   pulumix.Input[[]string] `pulumi:"tagNames"`
}

func (GetDataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformUntagColumnOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput() GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput)
}

func (i *GetDataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapDataTransformUntagColumnOperationArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformUntagColumnOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput() GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMapDataTransformUntagColumnOperation] {
	return pulumix.Output[GetDataSetLogicalTableMapDataTransformUntagColumnOperation]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ColumnName() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapDataTransformUntagColumnOperation](o, func(v GetDataSetLogicalTableMapDataTransformUntagColumnOperation) string { return v.ColumnName })
}

func (o GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput) TagNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDataSetLogicalTableMapDataTransformUntagColumnOperation](o, func(v GetDataSetLogicalTableMapDataTransformUntagColumnOperation) []string { return v.TagNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetDataSetLogicalTableMapSource struct {
	DataSetArn       string                                           `pulumi:"dataSetArn"`
	JoinInstructions []GetDataSetLogicalTableMapSourceJoinInstruction `pulumi:"joinInstructions"`
	PhysicalTableId  string                                           `pulumi:"physicalTableId"`
}

type GetDataSetLogicalTableMapSourceArgs struct {
	DataSetArn       pulumix.Input[string]                                                `pulumi:"dataSetArn"`
	JoinInstructions pulumix.Input[[]*GetDataSetLogicalTableMapSourceJoinInstructionArgs] `pulumi:"joinInstructions"`
	PhysicalTableId  pulumix.Input[string]                                                `pulumi:"physicalTableId"`
}

func (GetDataSetLogicalTableMapSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSource)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapSourceArgs) ToGetDataSetLogicalTableMapSourceOutput() GetDataSetLogicalTableMapSourceOutput {
	return i.ToGetDataSetLogicalTableMapSourceOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapSourceArgs) ToGetDataSetLogicalTableMapSourceOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapSourceOutput)
}

func (i *GetDataSetLogicalTableMapSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapSourceArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapSourceOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSource)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapSourceOutput) ToGetDataSetLogicalTableMapSourceOutput() GetDataSetLogicalTableMapSourceOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceOutput) ToGetDataSetLogicalTableMapSourceOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMapSource] {
	return pulumix.Output[GetDataSetLogicalTableMapSource]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapSourceOutput) DataSetArn() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapSource](o, func(v GetDataSetLogicalTableMapSource) string { return v.DataSetArn })
}

func (o GetDataSetLogicalTableMapSourceOutput) JoinInstructions() pulumix.GArrayOutput[GetDataSetLogicalTableMapSourceJoinInstruction, GetDataSetLogicalTableMapSourceJoinInstructionOutput] {
	value := pulumix.Apply[GetDataSetLogicalTableMapSource](o, func(v GetDataSetLogicalTableMapSource) []GetDataSetLogicalTableMapSourceJoinInstruction {
		return v.JoinInstructions
	})
	return pulumix.GArrayOutput[GetDataSetLogicalTableMapSourceJoinInstruction, GetDataSetLogicalTableMapSourceJoinInstructionOutput]{OutputState: value.OutputState}
}

func (o GetDataSetLogicalTableMapSourceOutput) PhysicalTableId() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapSource](o, func(v GetDataSetLogicalTableMapSource) string { return v.PhysicalTableId })
}

type GetDataSetLogicalTableMapSourceJoinInstruction struct {
	LeftJoinKeyProperties  []GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty  `pulumi:"leftJoinKeyProperties"`
	LeftOperand            string                                                               `pulumi:"leftOperand"`
	OnClause               string                                                               `pulumi:"onClause"`
	RightJoinKeyProperties []GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty `pulumi:"rightJoinKeyProperties"`
	RightOperand           string                                                               `pulumi:"rightOperand"`
	Type                   string                                                               `pulumi:"type"`
}

type GetDataSetLogicalTableMapSourceJoinInstructionArgs struct {
	LeftJoinKeyProperties  pulumix.Input[[]*GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArgs]  `pulumi:"leftJoinKeyProperties"`
	LeftOperand            pulumix.Input[string]                                                                    `pulumi:"leftOperand"`
	OnClause               pulumix.Input[string]                                                                    `pulumi:"onClause"`
	RightJoinKeyProperties pulumix.Input[[]*GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArgs] `pulumi:"rightJoinKeyProperties"`
	RightOperand           pulumix.Input[string]                                                                    `pulumi:"rightOperand"`
	Type                   pulumix.Input[string]                                                                    `pulumi:"type"`
}

func (GetDataSetLogicalTableMapSourceJoinInstructionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstruction)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionArgs) ToGetDataSetLogicalTableMapSourceJoinInstructionOutput() GetDataSetLogicalTableMapSourceJoinInstructionOutput {
	return i.ToGetDataSetLogicalTableMapSourceJoinInstructionOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionArgs) ToGetDataSetLogicalTableMapSourceJoinInstructionOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapSourceJoinInstructionOutput)
}

func (i *GetDataSetLogicalTableMapSourceJoinInstructionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapSourceJoinInstructionArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapSourceJoinInstructionOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapSourceJoinInstructionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstruction)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionOutput() GetDataSetLogicalTableMapSourceJoinInstructionOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMapSourceJoinInstruction] {
	return pulumix.Output[GetDataSetLogicalTableMapSourceJoinInstruction]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) LeftJoinKeyProperties() pulumix.GArrayOutput[GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty, GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput] {
	value := pulumix.Apply[GetDataSetLogicalTableMapSourceJoinInstruction](o, func(v GetDataSetLogicalTableMapSourceJoinInstruction) []GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty {
		return v.LeftJoinKeyProperties
	})
	return pulumix.GArrayOutput[GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty, GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput]{OutputState: value.OutputState}
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) LeftOperand() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapSourceJoinInstruction](o, func(v GetDataSetLogicalTableMapSourceJoinInstruction) string { return v.LeftOperand })
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) OnClause() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapSourceJoinInstruction](o, func(v GetDataSetLogicalTableMapSourceJoinInstruction) string { return v.OnClause })
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) RightJoinKeyProperties() pulumix.GArrayOutput[GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty, GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput] {
	value := pulumix.Apply[GetDataSetLogicalTableMapSourceJoinInstruction](o, func(v GetDataSetLogicalTableMapSourceJoinInstruction) []GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty {
		return v.RightJoinKeyProperties
	})
	return pulumix.GArrayOutput[GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty, GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput]{OutputState: value.OutputState}
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) RightOperand() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapSourceJoinInstruction](o, func(v GetDataSetLogicalTableMapSourceJoinInstruction) string { return v.RightOperand })
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetLogicalTableMapSourceJoinInstruction](o, func(v GetDataSetLogicalTableMapSourceJoinInstruction) string { return v.Type })
}

type GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty struct {
	UniqueKey bool `pulumi:"uniqueKey"`
}

type GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArgs struct {
	UniqueKey pulumix.Input[bool] `pulumi:"uniqueKey"`
}

func (GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArgs) ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput() GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput {
	return i.ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArgs) ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput)
}

func (i *GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput() GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty] {
	return pulumix.Output[GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput) UniqueKey() pulumix.Output[bool] {
	return pulumix.Apply[GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty](o, func(v GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty) bool { return v.UniqueKey })
}

type GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty struct {
	UniqueKey bool `pulumi:"uniqueKey"`
}

type GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArgs struct {
	UniqueKey pulumix.Input[bool] `pulumi:"uniqueKey"`
}

func (GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArgs) ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput() GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput {
	return i.ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArgs) ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput)
}

func (i *GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArgs] {
	return pulumix.Val(i)
}

type GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput() GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty] {
	return pulumix.Output[GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput) UniqueKey() pulumix.Output[bool] {
	return pulumix.Apply[GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty](o, func(v GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty) bool { return v.UniqueKey })
}

type GetDataSetPermission struct {
	Actions   []string `pulumi:"actions"`
	Principal string   `pulumi:"principal"`
}

type GetDataSetPermissionArgs struct {
	Actions   pulumix.Input[[]string] `pulumi:"actions"`
	Principal pulumix.Input[string]   `pulumi:"principal"`
}

func (GetDataSetPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPermission)(nil)).Elem()
}

func (i GetDataSetPermissionArgs) ToGetDataSetPermissionOutput() GetDataSetPermissionOutput {
	return i.ToGetDataSetPermissionOutputWithContext(context.Background())
}

func (i GetDataSetPermissionArgs) ToGetDataSetPermissionOutputWithContext(ctx context.Context) GetDataSetPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPermissionOutput)
}

func (i *GetDataSetPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetPermissionArgs] {
	return pulumix.Val(i)
}

type GetDataSetPermissionOutput struct{ *pulumi.OutputState }

func (GetDataSetPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPermission)(nil)).Elem()
}

func (o GetDataSetPermissionOutput) ToGetDataSetPermissionOutput() GetDataSetPermissionOutput {
	return o
}

func (o GetDataSetPermissionOutput) ToGetDataSetPermissionOutputWithContext(ctx context.Context) GetDataSetPermissionOutput {
	return o
}

func (o GetDataSetPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetPermission] {
	return pulumix.Output[GetDataSetPermission]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetPermissionOutput) Actions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDataSetPermission](o, func(v GetDataSetPermission) []string { return v.Actions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetDataSetPermissionOutput) Principal() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPermission](o, func(v GetDataSetPermission) string { return v.Principal })
}

type GetDataSetPhysicalTableMap struct {
	CustomSqls         []GetDataSetPhysicalTableMapCustomSql       `pulumi:"customSqls"`
	PhysicalTableMapId string                                      `pulumi:"physicalTableMapId"`
	RelationalTables   []GetDataSetPhysicalTableMapRelationalTable `pulumi:"relationalTables"`
	S3Sources          []GetDataSetPhysicalTableMapS3Source        `pulumi:"s3Sources"`
}

type GetDataSetPhysicalTableMapArgs struct {
	CustomSqls         pulumix.Input[[]*GetDataSetPhysicalTableMapCustomSqlArgs]       `pulumi:"customSqls"`
	PhysicalTableMapId pulumix.Input[string]                                           `pulumi:"physicalTableMapId"`
	RelationalTables   pulumix.Input[[]*GetDataSetPhysicalTableMapRelationalTableArgs] `pulumi:"relationalTables"`
	S3Sources          pulumix.Input[[]*GetDataSetPhysicalTableMapS3SourceArgs]        `pulumi:"s3Sources"`
}

func (GetDataSetPhysicalTableMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMap)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapArgs) ToGetDataSetPhysicalTableMapOutput() GetDataSetPhysicalTableMapOutput {
	return i.ToGetDataSetPhysicalTableMapOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapArgs) ToGetDataSetPhysicalTableMapOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapOutput)
}

func (i *GetDataSetPhysicalTableMapArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetPhysicalTableMapArgs] {
	return pulumix.Val(i)
}

type GetDataSetPhysicalTableMapOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMap)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapOutput) ToGetDataSetPhysicalTableMapOutput() GetDataSetPhysicalTableMapOutput {
	return o
}

func (o GetDataSetPhysicalTableMapOutput) ToGetDataSetPhysicalTableMapOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapOutput {
	return o
}

func (o GetDataSetPhysicalTableMapOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetPhysicalTableMap] {
	return pulumix.Output[GetDataSetPhysicalTableMap]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetPhysicalTableMapOutput) CustomSqls() pulumix.GArrayOutput[GetDataSetPhysicalTableMapCustomSql, GetDataSetPhysicalTableMapCustomSqlOutput] {
	value := pulumix.Apply[GetDataSetPhysicalTableMap](o, func(v GetDataSetPhysicalTableMap) []GetDataSetPhysicalTableMapCustomSql { return v.CustomSqls })
	return pulumix.GArrayOutput[GetDataSetPhysicalTableMapCustomSql, GetDataSetPhysicalTableMapCustomSqlOutput]{OutputState: value.OutputState}
}

func (o GetDataSetPhysicalTableMapOutput) PhysicalTableMapId() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMap](o, func(v GetDataSetPhysicalTableMap) string { return v.PhysicalTableMapId })
}

func (o GetDataSetPhysicalTableMapOutput) RelationalTables() pulumix.GArrayOutput[GetDataSetPhysicalTableMapRelationalTable, GetDataSetPhysicalTableMapRelationalTableOutput] {
	value := pulumix.Apply[GetDataSetPhysicalTableMap](o, func(v GetDataSetPhysicalTableMap) []GetDataSetPhysicalTableMapRelationalTable {
		return v.RelationalTables
	})
	return pulumix.GArrayOutput[GetDataSetPhysicalTableMapRelationalTable, GetDataSetPhysicalTableMapRelationalTableOutput]{OutputState: value.OutputState}
}

func (o GetDataSetPhysicalTableMapOutput) S3Sources() pulumix.GArrayOutput[GetDataSetPhysicalTableMapS3Source, GetDataSetPhysicalTableMapS3SourceOutput] {
	value := pulumix.Apply[GetDataSetPhysicalTableMap](o, func(v GetDataSetPhysicalTableMap) []GetDataSetPhysicalTableMapS3Source { return v.S3Sources })
	return pulumix.GArrayOutput[GetDataSetPhysicalTableMapS3Source, GetDataSetPhysicalTableMapS3SourceOutput]{OutputState: value.OutputState}
}

type GetDataSetPhysicalTableMapCustomSql struct {
	Columns       []GetDataSetPhysicalTableMapCustomSqlColumn `pulumi:"columns"`
	DataSourceArn string                                      `pulumi:"dataSourceArn"`
	Name          string                                      `pulumi:"name"`
	SqlQuery      string                                      `pulumi:"sqlQuery"`
}

type GetDataSetPhysicalTableMapCustomSqlArgs struct {
	Columns       pulumix.Input[[]*GetDataSetPhysicalTableMapCustomSqlColumnArgs] `pulumi:"columns"`
	DataSourceArn pulumix.Input[string]                                           `pulumi:"dataSourceArn"`
	Name          pulumix.Input[string]                                           `pulumi:"name"`
	SqlQuery      pulumix.Input[string]                                           `pulumi:"sqlQuery"`
}

func (GetDataSetPhysicalTableMapCustomSqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapCustomSql)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapCustomSqlArgs) ToGetDataSetPhysicalTableMapCustomSqlOutput() GetDataSetPhysicalTableMapCustomSqlOutput {
	return i.ToGetDataSetPhysicalTableMapCustomSqlOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapCustomSqlArgs) ToGetDataSetPhysicalTableMapCustomSqlOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapCustomSqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapCustomSqlOutput)
}

func (i *GetDataSetPhysicalTableMapCustomSqlArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetPhysicalTableMapCustomSqlArgs] {
	return pulumix.Val(i)
}

type GetDataSetPhysicalTableMapCustomSqlOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapCustomSqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapCustomSql)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapCustomSqlOutput) ToGetDataSetPhysicalTableMapCustomSqlOutput() GetDataSetPhysicalTableMapCustomSqlOutput {
	return o
}

func (o GetDataSetPhysicalTableMapCustomSqlOutput) ToGetDataSetPhysicalTableMapCustomSqlOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapCustomSqlOutput {
	return o
}

func (o GetDataSetPhysicalTableMapCustomSqlOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetPhysicalTableMapCustomSql] {
	return pulumix.Output[GetDataSetPhysicalTableMapCustomSql]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetPhysicalTableMapCustomSqlOutput) Columns() pulumix.GArrayOutput[GetDataSetPhysicalTableMapCustomSqlColumn, GetDataSetPhysicalTableMapCustomSqlColumnOutput] {
	value := pulumix.Apply[GetDataSetPhysicalTableMapCustomSql](o, func(v GetDataSetPhysicalTableMapCustomSql) []GetDataSetPhysicalTableMapCustomSqlColumn {
		return v.Columns
	})
	return pulumix.GArrayOutput[GetDataSetPhysicalTableMapCustomSqlColumn, GetDataSetPhysicalTableMapCustomSqlColumnOutput]{OutputState: value.OutputState}
}

func (o GetDataSetPhysicalTableMapCustomSqlOutput) DataSourceArn() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapCustomSql](o, func(v GetDataSetPhysicalTableMapCustomSql) string { return v.DataSourceArn })
}

func (o GetDataSetPhysicalTableMapCustomSqlOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapCustomSql](o, func(v GetDataSetPhysicalTableMapCustomSql) string { return v.Name })
}

func (o GetDataSetPhysicalTableMapCustomSqlOutput) SqlQuery() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapCustomSql](o, func(v GetDataSetPhysicalTableMapCustomSql) string { return v.SqlQuery })
}

type GetDataSetPhysicalTableMapCustomSqlColumn struct {
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

type GetDataSetPhysicalTableMapCustomSqlColumnArgs struct {
	Name pulumix.Input[string] `pulumi:"name"`
	Type pulumix.Input[string] `pulumi:"type"`
}

func (GetDataSetPhysicalTableMapCustomSqlColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapCustomSqlColumn)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapCustomSqlColumnArgs) ToGetDataSetPhysicalTableMapCustomSqlColumnOutput() GetDataSetPhysicalTableMapCustomSqlColumnOutput {
	return i.ToGetDataSetPhysicalTableMapCustomSqlColumnOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapCustomSqlColumnArgs) ToGetDataSetPhysicalTableMapCustomSqlColumnOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapCustomSqlColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapCustomSqlColumnOutput)
}

func (i *GetDataSetPhysicalTableMapCustomSqlColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetPhysicalTableMapCustomSqlColumnArgs] {
	return pulumix.Val(i)
}

type GetDataSetPhysicalTableMapCustomSqlColumnOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapCustomSqlColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapCustomSqlColumn)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapCustomSqlColumnOutput) ToGetDataSetPhysicalTableMapCustomSqlColumnOutput() GetDataSetPhysicalTableMapCustomSqlColumnOutput {
	return o
}

func (o GetDataSetPhysicalTableMapCustomSqlColumnOutput) ToGetDataSetPhysicalTableMapCustomSqlColumnOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapCustomSqlColumnOutput {
	return o
}

func (o GetDataSetPhysicalTableMapCustomSqlColumnOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetPhysicalTableMapCustomSqlColumn] {
	return pulumix.Output[GetDataSetPhysicalTableMapCustomSqlColumn]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetPhysicalTableMapCustomSqlColumnOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapCustomSqlColumn](o, func(v GetDataSetPhysicalTableMapCustomSqlColumn) string { return v.Name })
}

func (o GetDataSetPhysicalTableMapCustomSqlColumnOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapCustomSqlColumn](o, func(v GetDataSetPhysicalTableMapCustomSqlColumn) string { return v.Type })
}

type GetDataSetPhysicalTableMapRelationalTable struct {
	Catalog       string                                                 `pulumi:"catalog"`
	DataSourceArn string                                                 `pulumi:"dataSourceArn"`
	InputColumns  []GetDataSetPhysicalTableMapRelationalTableInputColumn `pulumi:"inputColumns"`
	Name          string                                                 `pulumi:"name"`
	Schema        string                                                 `pulumi:"schema"`
}

type GetDataSetPhysicalTableMapRelationalTableArgs struct {
	Catalog       pulumix.Input[string]                                                      `pulumi:"catalog"`
	DataSourceArn pulumix.Input[string]                                                      `pulumi:"dataSourceArn"`
	InputColumns  pulumix.Input[[]*GetDataSetPhysicalTableMapRelationalTableInputColumnArgs] `pulumi:"inputColumns"`
	Name          pulumix.Input[string]                                                      `pulumi:"name"`
	Schema        pulumix.Input[string]                                                      `pulumi:"schema"`
}

func (GetDataSetPhysicalTableMapRelationalTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapRelationalTable)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapRelationalTableArgs) ToGetDataSetPhysicalTableMapRelationalTableOutput() GetDataSetPhysicalTableMapRelationalTableOutput {
	return i.ToGetDataSetPhysicalTableMapRelationalTableOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapRelationalTableArgs) ToGetDataSetPhysicalTableMapRelationalTableOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapRelationalTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapRelationalTableOutput)
}

func (i *GetDataSetPhysicalTableMapRelationalTableArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetPhysicalTableMapRelationalTableArgs] {
	return pulumix.Val(i)
}

type GetDataSetPhysicalTableMapRelationalTableOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapRelationalTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapRelationalTable)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapRelationalTableOutput) ToGetDataSetPhysicalTableMapRelationalTableOutput() GetDataSetPhysicalTableMapRelationalTableOutput {
	return o
}

func (o GetDataSetPhysicalTableMapRelationalTableOutput) ToGetDataSetPhysicalTableMapRelationalTableOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapRelationalTableOutput {
	return o
}

func (o GetDataSetPhysicalTableMapRelationalTableOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetPhysicalTableMapRelationalTable] {
	return pulumix.Output[GetDataSetPhysicalTableMapRelationalTable]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetPhysicalTableMapRelationalTableOutput) Catalog() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapRelationalTable](o, func(v GetDataSetPhysicalTableMapRelationalTable) string { return v.Catalog })
}

func (o GetDataSetPhysicalTableMapRelationalTableOutput) DataSourceArn() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapRelationalTable](o, func(v GetDataSetPhysicalTableMapRelationalTable) string { return v.DataSourceArn })
}

func (o GetDataSetPhysicalTableMapRelationalTableOutput) InputColumns() pulumix.GArrayOutput[GetDataSetPhysicalTableMapRelationalTableInputColumn, GetDataSetPhysicalTableMapRelationalTableInputColumnOutput] {
	value := pulumix.Apply[GetDataSetPhysicalTableMapRelationalTable](o, func(v GetDataSetPhysicalTableMapRelationalTable) []GetDataSetPhysicalTableMapRelationalTableInputColumn {
		return v.InputColumns
	})
	return pulumix.GArrayOutput[GetDataSetPhysicalTableMapRelationalTableInputColumn, GetDataSetPhysicalTableMapRelationalTableInputColumnOutput]{OutputState: value.OutputState}
}

func (o GetDataSetPhysicalTableMapRelationalTableOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapRelationalTable](o, func(v GetDataSetPhysicalTableMapRelationalTable) string { return v.Name })
}

func (o GetDataSetPhysicalTableMapRelationalTableOutput) Schema() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapRelationalTable](o, func(v GetDataSetPhysicalTableMapRelationalTable) string { return v.Schema })
}

type GetDataSetPhysicalTableMapRelationalTableInputColumn struct {
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

type GetDataSetPhysicalTableMapRelationalTableInputColumnArgs struct {
	Name pulumix.Input[string] `pulumi:"name"`
	Type pulumix.Input[string] `pulumi:"type"`
}

func (GetDataSetPhysicalTableMapRelationalTableInputColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapRelationalTableInputColumn)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapRelationalTableInputColumnArgs) ToGetDataSetPhysicalTableMapRelationalTableInputColumnOutput() GetDataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return i.ToGetDataSetPhysicalTableMapRelationalTableInputColumnOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapRelationalTableInputColumnArgs) ToGetDataSetPhysicalTableMapRelationalTableInputColumnOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapRelationalTableInputColumnOutput)
}

func (i *GetDataSetPhysicalTableMapRelationalTableInputColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetPhysicalTableMapRelationalTableInputColumnArgs] {
	return pulumix.Val(i)
}

type GetDataSetPhysicalTableMapRelationalTableInputColumnOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapRelationalTableInputColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapRelationalTableInputColumn)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapRelationalTableInputColumnOutput) ToGetDataSetPhysicalTableMapRelationalTableInputColumnOutput() GetDataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return o
}

func (o GetDataSetPhysicalTableMapRelationalTableInputColumnOutput) ToGetDataSetPhysicalTableMapRelationalTableInputColumnOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return o
}

func (o GetDataSetPhysicalTableMapRelationalTableInputColumnOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetPhysicalTableMapRelationalTableInputColumn] {
	return pulumix.Output[GetDataSetPhysicalTableMapRelationalTableInputColumn]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetPhysicalTableMapRelationalTableInputColumnOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapRelationalTableInputColumn](o, func(v GetDataSetPhysicalTableMapRelationalTableInputColumn) string { return v.Name })
}

func (o GetDataSetPhysicalTableMapRelationalTableInputColumnOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapRelationalTableInputColumn](o, func(v GetDataSetPhysicalTableMapRelationalTableInputColumn) string { return v.Type })
}

type GetDataSetPhysicalTableMapS3Source struct {
	DataSourceArn  string                                            `pulumi:"dataSourceArn"`
	InputColumns   []GetDataSetPhysicalTableMapS3SourceInputColumn   `pulumi:"inputColumns"`
	UploadSettings []GetDataSetPhysicalTableMapS3SourceUploadSetting `pulumi:"uploadSettings"`
}

type GetDataSetPhysicalTableMapS3SourceArgs struct {
	DataSourceArn  pulumix.Input[string]                                                 `pulumi:"dataSourceArn"`
	InputColumns   pulumix.Input[[]*GetDataSetPhysicalTableMapS3SourceInputColumnArgs]   `pulumi:"inputColumns"`
	UploadSettings pulumix.Input[[]*GetDataSetPhysicalTableMapS3SourceUploadSettingArgs] `pulumi:"uploadSettings"`
}

func (GetDataSetPhysicalTableMapS3SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapS3Source)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapS3SourceArgs) ToGetDataSetPhysicalTableMapS3SourceOutput() GetDataSetPhysicalTableMapS3SourceOutput {
	return i.ToGetDataSetPhysicalTableMapS3SourceOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapS3SourceArgs) ToGetDataSetPhysicalTableMapS3SourceOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapS3SourceOutput)
}

func (i *GetDataSetPhysicalTableMapS3SourceArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetPhysicalTableMapS3SourceArgs] {
	return pulumix.Val(i)
}

type GetDataSetPhysicalTableMapS3SourceOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapS3SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapS3Source)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapS3SourceOutput) ToGetDataSetPhysicalTableMapS3SourceOutput() GetDataSetPhysicalTableMapS3SourceOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceOutput) ToGetDataSetPhysicalTableMapS3SourceOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetPhysicalTableMapS3Source] {
	return pulumix.Output[GetDataSetPhysicalTableMapS3Source]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetPhysicalTableMapS3SourceOutput) DataSourceArn() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapS3Source](o, func(v GetDataSetPhysicalTableMapS3Source) string { return v.DataSourceArn })
}

func (o GetDataSetPhysicalTableMapS3SourceOutput) InputColumns() pulumix.GArrayOutput[GetDataSetPhysicalTableMapS3SourceInputColumn, GetDataSetPhysicalTableMapS3SourceInputColumnOutput] {
	value := pulumix.Apply[GetDataSetPhysicalTableMapS3Source](o, func(v GetDataSetPhysicalTableMapS3Source) []GetDataSetPhysicalTableMapS3SourceInputColumn {
		return v.InputColumns
	})
	return pulumix.GArrayOutput[GetDataSetPhysicalTableMapS3SourceInputColumn, GetDataSetPhysicalTableMapS3SourceInputColumnOutput]{OutputState: value.OutputState}
}

func (o GetDataSetPhysicalTableMapS3SourceOutput) UploadSettings() pulumix.GArrayOutput[GetDataSetPhysicalTableMapS3SourceUploadSetting, GetDataSetPhysicalTableMapS3SourceUploadSettingOutput] {
	value := pulumix.Apply[GetDataSetPhysicalTableMapS3Source](o, func(v GetDataSetPhysicalTableMapS3Source) []GetDataSetPhysicalTableMapS3SourceUploadSetting {
		return v.UploadSettings
	})
	return pulumix.GArrayOutput[GetDataSetPhysicalTableMapS3SourceUploadSetting, GetDataSetPhysicalTableMapS3SourceUploadSettingOutput]{OutputState: value.OutputState}
}

type GetDataSetPhysicalTableMapS3SourceInputColumn struct {
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

type GetDataSetPhysicalTableMapS3SourceInputColumnArgs struct {
	Name pulumix.Input[string] `pulumi:"name"`
	Type pulumix.Input[string] `pulumi:"type"`
}

func (GetDataSetPhysicalTableMapS3SourceInputColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapS3SourceInputColumn)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapS3SourceInputColumnArgs) ToGetDataSetPhysicalTableMapS3SourceInputColumnOutput() GetDataSetPhysicalTableMapS3SourceInputColumnOutput {
	return i.ToGetDataSetPhysicalTableMapS3SourceInputColumnOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapS3SourceInputColumnArgs) ToGetDataSetPhysicalTableMapS3SourceInputColumnOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceInputColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapS3SourceInputColumnOutput)
}

func (i *GetDataSetPhysicalTableMapS3SourceInputColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetPhysicalTableMapS3SourceInputColumnArgs] {
	return pulumix.Val(i)
}

type GetDataSetPhysicalTableMapS3SourceInputColumnOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapS3SourceInputColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapS3SourceInputColumn)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapS3SourceInputColumnOutput) ToGetDataSetPhysicalTableMapS3SourceInputColumnOutput() GetDataSetPhysicalTableMapS3SourceInputColumnOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceInputColumnOutput) ToGetDataSetPhysicalTableMapS3SourceInputColumnOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceInputColumnOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceInputColumnOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetPhysicalTableMapS3SourceInputColumn] {
	return pulumix.Output[GetDataSetPhysicalTableMapS3SourceInputColumn]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetPhysicalTableMapS3SourceInputColumnOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapS3SourceInputColumn](o, func(v GetDataSetPhysicalTableMapS3SourceInputColumn) string { return v.Name })
}

func (o GetDataSetPhysicalTableMapS3SourceInputColumnOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapS3SourceInputColumn](o, func(v GetDataSetPhysicalTableMapS3SourceInputColumn) string { return v.Type })
}

type GetDataSetPhysicalTableMapS3SourceUploadSetting struct {
	ContainsHeader bool   `pulumi:"containsHeader"`
	Delimiter      string `pulumi:"delimiter"`
	Format         string `pulumi:"format"`
	StartFromRow   int    `pulumi:"startFromRow"`
	TextQualifier  string `pulumi:"textQualifier"`
}

type GetDataSetPhysicalTableMapS3SourceUploadSettingArgs struct {
	ContainsHeader pulumix.Input[bool]   `pulumi:"containsHeader"`
	Delimiter      pulumix.Input[string] `pulumi:"delimiter"`
	Format         pulumix.Input[string] `pulumi:"format"`
	StartFromRow   pulumix.Input[int]    `pulumi:"startFromRow"`
	TextQualifier  pulumix.Input[string] `pulumi:"textQualifier"`
}

func (GetDataSetPhysicalTableMapS3SourceUploadSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapS3SourceUploadSetting)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapS3SourceUploadSettingArgs) ToGetDataSetPhysicalTableMapS3SourceUploadSettingOutput() GetDataSetPhysicalTableMapS3SourceUploadSettingOutput {
	return i.ToGetDataSetPhysicalTableMapS3SourceUploadSettingOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapS3SourceUploadSettingArgs) ToGetDataSetPhysicalTableMapS3SourceUploadSettingOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceUploadSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapS3SourceUploadSettingOutput)
}

func (i *GetDataSetPhysicalTableMapS3SourceUploadSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetPhysicalTableMapS3SourceUploadSettingArgs] {
	return pulumix.Val(i)
}

type GetDataSetPhysicalTableMapS3SourceUploadSettingOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapS3SourceUploadSetting)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) ToGetDataSetPhysicalTableMapS3SourceUploadSettingOutput() GetDataSetPhysicalTableMapS3SourceUploadSettingOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) ToGetDataSetPhysicalTableMapS3SourceUploadSettingOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceUploadSettingOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetPhysicalTableMapS3SourceUploadSetting] {
	return pulumix.Output[GetDataSetPhysicalTableMapS3SourceUploadSetting]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) ContainsHeader() pulumix.Output[bool] {
	return pulumix.Apply[GetDataSetPhysicalTableMapS3SourceUploadSetting](o, func(v GetDataSetPhysicalTableMapS3SourceUploadSetting) bool { return v.ContainsHeader })
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) Delimiter() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapS3SourceUploadSetting](o, func(v GetDataSetPhysicalTableMapS3SourceUploadSetting) string { return v.Delimiter })
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) Format() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapS3SourceUploadSetting](o, func(v GetDataSetPhysicalTableMapS3SourceUploadSetting) string { return v.Format })
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) StartFromRow() pulumix.Output[int] {
	return pulumix.Apply[GetDataSetPhysicalTableMapS3SourceUploadSetting](o, func(v GetDataSetPhysicalTableMapS3SourceUploadSetting) int { return v.StartFromRow })
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) TextQualifier() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetPhysicalTableMapS3SourceUploadSetting](o, func(v GetDataSetPhysicalTableMapS3SourceUploadSetting) string { return v.TextQualifier })
}

type GetDataSetRowLevelPermissionDataSet struct {
	Arn              string `pulumi:"arn"`
	FormatVersion    string `pulumi:"formatVersion"`
	Namespace        string `pulumi:"namespace"`
	PermissionPolicy string `pulumi:"permissionPolicy"`
	Status           string `pulumi:"status"`
}

type GetDataSetRowLevelPermissionDataSetArgs struct {
	Arn              pulumix.Input[string] `pulumi:"arn"`
	FormatVersion    pulumix.Input[string] `pulumi:"formatVersion"`
	Namespace        pulumix.Input[string] `pulumi:"namespace"`
	PermissionPolicy pulumix.Input[string] `pulumi:"permissionPolicy"`
	Status           pulumix.Input[string] `pulumi:"status"`
}

func (GetDataSetRowLevelPermissionDataSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (i GetDataSetRowLevelPermissionDataSetArgs) ToGetDataSetRowLevelPermissionDataSetOutput() GetDataSetRowLevelPermissionDataSetOutput {
	return i.ToGetDataSetRowLevelPermissionDataSetOutputWithContext(context.Background())
}

func (i GetDataSetRowLevelPermissionDataSetArgs) ToGetDataSetRowLevelPermissionDataSetOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionDataSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetRowLevelPermissionDataSetOutput)
}

func (i *GetDataSetRowLevelPermissionDataSetArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetRowLevelPermissionDataSetArgs] {
	return pulumix.Val(i)
}

type GetDataSetRowLevelPermissionDataSetOutput struct{ *pulumi.OutputState }

func (GetDataSetRowLevelPermissionDataSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (o GetDataSetRowLevelPermissionDataSetOutput) ToGetDataSetRowLevelPermissionDataSetOutput() GetDataSetRowLevelPermissionDataSetOutput {
	return o
}

func (o GetDataSetRowLevelPermissionDataSetOutput) ToGetDataSetRowLevelPermissionDataSetOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionDataSetOutput {
	return o
}

func (o GetDataSetRowLevelPermissionDataSetOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetRowLevelPermissionDataSet] {
	return pulumix.Output[GetDataSetRowLevelPermissionDataSet]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetRowLevelPermissionDataSetOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetRowLevelPermissionDataSet](o, func(v GetDataSetRowLevelPermissionDataSet) string { return v.Arn })
}

func (o GetDataSetRowLevelPermissionDataSetOutput) FormatVersion() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetRowLevelPermissionDataSet](o, func(v GetDataSetRowLevelPermissionDataSet) string { return v.FormatVersion })
}

func (o GetDataSetRowLevelPermissionDataSetOutput) Namespace() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetRowLevelPermissionDataSet](o, func(v GetDataSetRowLevelPermissionDataSet) string { return v.Namespace })
}

func (o GetDataSetRowLevelPermissionDataSetOutput) PermissionPolicy() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetRowLevelPermissionDataSet](o, func(v GetDataSetRowLevelPermissionDataSet) string { return v.PermissionPolicy })
}

func (o GetDataSetRowLevelPermissionDataSetOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetRowLevelPermissionDataSet](o, func(v GetDataSetRowLevelPermissionDataSet) string { return v.Status })
}

type GetDataSetRowLevelPermissionTagConfiguration struct {
	Status   string                                                `pulumi:"status"`
	TagRules []GetDataSetRowLevelPermissionTagConfigurationTagRule `pulumi:"tagRules"`
}

type GetDataSetRowLevelPermissionTagConfigurationArgs struct {
	Status   pulumix.Input[string]                                                     `pulumi:"status"`
	TagRules pulumix.Input[[]*GetDataSetRowLevelPermissionTagConfigurationTagRuleArgs] `pulumi:"tagRules"`
}

func (GetDataSetRowLevelPermissionTagConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (i GetDataSetRowLevelPermissionTagConfigurationArgs) ToGetDataSetRowLevelPermissionTagConfigurationOutput() GetDataSetRowLevelPermissionTagConfigurationOutput {
	return i.ToGetDataSetRowLevelPermissionTagConfigurationOutputWithContext(context.Background())
}

func (i GetDataSetRowLevelPermissionTagConfigurationArgs) ToGetDataSetRowLevelPermissionTagConfigurationOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionTagConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetRowLevelPermissionTagConfigurationOutput)
}

func (i *GetDataSetRowLevelPermissionTagConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetRowLevelPermissionTagConfigurationArgs] {
	return pulumix.Val(i)
}

type GetDataSetRowLevelPermissionTagConfigurationOutput struct{ *pulumi.OutputState }

func (GetDataSetRowLevelPermissionTagConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (o GetDataSetRowLevelPermissionTagConfigurationOutput) ToGetDataSetRowLevelPermissionTagConfigurationOutput() GetDataSetRowLevelPermissionTagConfigurationOutput {
	return o
}

func (o GetDataSetRowLevelPermissionTagConfigurationOutput) ToGetDataSetRowLevelPermissionTagConfigurationOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionTagConfigurationOutput {
	return o
}

func (o GetDataSetRowLevelPermissionTagConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetRowLevelPermissionTagConfiguration] {
	return pulumix.Output[GetDataSetRowLevelPermissionTagConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetRowLevelPermissionTagConfigurationOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetRowLevelPermissionTagConfiguration](o, func(v GetDataSetRowLevelPermissionTagConfiguration) string { return v.Status })
}

func (o GetDataSetRowLevelPermissionTagConfigurationOutput) TagRules() pulumix.GArrayOutput[GetDataSetRowLevelPermissionTagConfigurationTagRule, GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput] {
	value := pulumix.Apply[GetDataSetRowLevelPermissionTagConfiguration](o, func(v GetDataSetRowLevelPermissionTagConfiguration) []GetDataSetRowLevelPermissionTagConfigurationTagRule {
		return v.TagRules
	})
	return pulumix.GArrayOutput[GetDataSetRowLevelPermissionTagConfigurationTagRule, GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput]{OutputState: value.OutputState}
}

type GetDataSetRowLevelPermissionTagConfigurationTagRule struct {
	ColumnName             string `pulumi:"columnName"`
	MatchAllValue          string `pulumi:"matchAllValue"`
	TagKey                 string `pulumi:"tagKey"`
	TagMultiValueDelimiter string `pulumi:"tagMultiValueDelimiter"`
}

type GetDataSetRowLevelPermissionTagConfigurationTagRuleArgs struct {
	ColumnName             pulumix.Input[string] `pulumi:"columnName"`
	MatchAllValue          pulumix.Input[string] `pulumi:"matchAllValue"`
	TagKey                 pulumix.Input[string] `pulumi:"tagKey"`
	TagMultiValueDelimiter pulumix.Input[string] `pulumi:"tagMultiValueDelimiter"`
}

func (GetDataSetRowLevelPermissionTagConfigurationTagRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetRowLevelPermissionTagConfigurationTagRule)(nil)).Elem()
}

func (i GetDataSetRowLevelPermissionTagConfigurationTagRuleArgs) ToGetDataSetRowLevelPermissionTagConfigurationTagRuleOutput() GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return i.ToGetDataSetRowLevelPermissionTagConfigurationTagRuleOutputWithContext(context.Background())
}

func (i GetDataSetRowLevelPermissionTagConfigurationTagRuleArgs) ToGetDataSetRowLevelPermissionTagConfigurationTagRuleOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput)
}

func (i *GetDataSetRowLevelPermissionTagConfigurationTagRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataSetRowLevelPermissionTagConfigurationTagRuleArgs] {
	return pulumix.Val(i)
}

type GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput struct{ *pulumi.OutputState }

func (GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetRowLevelPermissionTagConfigurationTagRule)(nil)).Elem()
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput) ToGetDataSetRowLevelPermissionTagConfigurationTagRuleOutput() GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return o
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput) ToGetDataSetRowLevelPermissionTagConfigurationTagRuleOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return o
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataSetRowLevelPermissionTagConfigurationTagRule] {
	return pulumix.Output[GetDataSetRowLevelPermissionTagConfigurationTagRule]{
		OutputState: o.OutputState,
	}
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput) ColumnName() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetRowLevelPermissionTagConfigurationTagRule](o, func(v GetDataSetRowLevelPermissionTagConfigurationTagRule) string { return v.ColumnName })
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput) MatchAllValue() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetRowLevelPermissionTagConfigurationTagRule](o, func(v GetDataSetRowLevelPermissionTagConfigurationTagRule) string { return v.MatchAllValue })
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput) TagKey() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetRowLevelPermissionTagConfigurationTagRule](o, func(v GetDataSetRowLevelPermissionTagConfigurationTagRule) string { return v.TagKey })
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput) TagMultiValueDelimiter() pulumix.Output[string] {
	return pulumix.Apply[GetDataSetRowLevelPermissionTagConfigurationTagRule](o, func(v GetDataSetRowLevelPermissionTagConfigurationTagRule) string { return v.TagMultiValueDelimiter })
}

type GetThemeConfiguration struct {
	// Color properties that apply to chart data colors. See data_color_palette.
	DataColorPalettes []GetThemeConfigurationDataColorPalette `pulumi:"dataColorPalettes"`
	// Display options related to sheets. See sheet.
	Sheets []GetThemeConfigurationSheet `pulumi:"sheets"`
	// Determines the typography options. See typography.
	Typographies []GetThemeConfigurationTypography `pulumi:"typographies"`
	// Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
	UiColorPalettes []GetThemeConfigurationUiColorPalette `pulumi:"uiColorPalettes"`
}

type GetThemeConfigurationArgs struct {
	// Color properties that apply to chart data colors. See data_color_palette.
	DataColorPalettes pulumix.Input[[]*GetThemeConfigurationDataColorPaletteArgs] `pulumi:"dataColorPalettes"`
	// Display options related to sheets. See sheet.
	Sheets pulumix.Input[[]*GetThemeConfigurationSheetArgs] `pulumi:"sheets"`
	// Determines the typography options. See typography.
	Typographies pulumix.Input[[]*GetThemeConfigurationTypographyArgs] `pulumi:"typographies"`
	// Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
	UiColorPalettes pulumix.Input[[]*GetThemeConfigurationUiColorPaletteArgs] `pulumi:"uiColorPalettes"`
}

func (GetThemeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfiguration)(nil)).Elem()
}

func (i GetThemeConfigurationArgs) ToGetThemeConfigurationOutput() GetThemeConfigurationOutput {
	return i.ToGetThemeConfigurationOutputWithContext(context.Background())
}

func (i GetThemeConfigurationArgs) ToGetThemeConfigurationOutputWithContext(ctx context.Context) GetThemeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationOutput)
}

func (i *GetThemeConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetThemeConfigurationArgs] {
	return pulumix.Val(i)
}

type GetThemeConfigurationOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfiguration)(nil)).Elem()
}

func (o GetThemeConfigurationOutput) ToGetThemeConfigurationOutput() GetThemeConfigurationOutput {
	return o
}

func (o GetThemeConfigurationOutput) ToGetThemeConfigurationOutputWithContext(ctx context.Context) GetThemeConfigurationOutput {
	return o
}

func (o GetThemeConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetThemeConfiguration] {
	return pulumix.Output[GetThemeConfiguration]{
		OutputState: o.OutputState,
	}
}

// Color properties that apply to chart data colors. See data_color_palette.
func (o GetThemeConfigurationOutput) DataColorPalettes() pulumix.GArrayOutput[GetThemeConfigurationDataColorPalette, GetThemeConfigurationDataColorPaletteOutput] {
	value := pulumix.Apply[GetThemeConfiguration](o, func(v GetThemeConfiguration) []GetThemeConfigurationDataColorPalette { return v.DataColorPalettes })
	return pulumix.GArrayOutput[GetThemeConfigurationDataColorPalette, GetThemeConfigurationDataColorPaletteOutput]{OutputState: value.OutputState}
}

// Display options related to sheets. See sheet.
func (o GetThemeConfigurationOutput) Sheets() pulumix.GArrayOutput[GetThemeConfigurationSheet, GetThemeConfigurationSheetOutput] {
	value := pulumix.Apply[GetThemeConfiguration](o, func(v GetThemeConfiguration) []GetThemeConfigurationSheet { return v.Sheets })
	return pulumix.GArrayOutput[GetThemeConfigurationSheet, GetThemeConfigurationSheetOutput]{OutputState: value.OutputState}
}

// Determines the typography options. See typography.
func (o GetThemeConfigurationOutput) Typographies() pulumix.GArrayOutput[GetThemeConfigurationTypography, GetThemeConfigurationTypographyOutput] {
	value := pulumix.Apply[GetThemeConfiguration](o, func(v GetThemeConfiguration) []GetThemeConfigurationTypography { return v.Typographies })
	return pulumix.GArrayOutput[GetThemeConfigurationTypography, GetThemeConfigurationTypographyOutput]{OutputState: value.OutputState}
}

// Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
func (o GetThemeConfigurationOutput) UiColorPalettes() pulumix.GArrayOutput[GetThemeConfigurationUiColorPalette, GetThemeConfigurationUiColorPaletteOutput] {
	value := pulumix.Apply[GetThemeConfiguration](o, func(v GetThemeConfiguration) []GetThemeConfigurationUiColorPalette { return v.UiColorPalettes })
	return pulumix.GArrayOutput[GetThemeConfigurationUiColorPalette, GetThemeConfigurationUiColorPaletteOutput]{OutputState: value.OutputState}
}

type GetThemeConfigurationDataColorPalette struct {
	// List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
	Colors []string `pulumi:"colors"`
	// The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
	EmptyFillColor string `pulumi:"emptyFillColor"`
	// The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
	MinMaxGradients []string `pulumi:"minMaxGradients"`
}

type GetThemeConfigurationDataColorPaletteArgs struct {
	// List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
	Colors pulumix.Input[[]string] `pulumi:"colors"`
	// The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
	EmptyFillColor pulumix.Input[string] `pulumi:"emptyFillColor"`
	// The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
	MinMaxGradients pulumix.Input[[]string] `pulumi:"minMaxGradients"`
}

func (GetThemeConfigurationDataColorPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationDataColorPalette)(nil)).Elem()
}

func (i GetThemeConfigurationDataColorPaletteArgs) ToGetThemeConfigurationDataColorPaletteOutput() GetThemeConfigurationDataColorPaletteOutput {
	return i.ToGetThemeConfigurationDataColorPaletteOutputWithContext(context.Background())
}

func (i GetThemeConfigurationDataColorPaletteArgs) ToGetThemeConfigurationDataColorPaletteOutputWithContext(ctx context.Context) GetThemeConfigurationDataColorPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationDataColorPaletteOutput)
}

func (i *GetThemeConfigurationDataColorPaletteArgs) ToOutput(ctx context.Context) pulumix.Output[*GetThemeConfigurationDataColorPaletteArgs] {
	return pulumix.Val(i)
}

type GetThemeConfigurationDataColorPaletteOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationDataColorPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationDataColorPalette)(nil)).Elem()
}

func (o GetThemeConfigurationDataColorPaletteOutput) ToGetThemeConfigurationDataColorPaletteOutput() GetThemeConfigurationDataColorPaletteOutput {
	return o
}

func (o GetThemeConfigurationDataColorPaletteOutput) ToGetThemeConfigurationDataColorPaletteOutputWithContext(ctx context.Context) GetThemeConfigurationDataColorPaletteOutput {
	return o
}

func (o GetThemeConfigurationDataColorPaletteOutput) ToOutput(ctx context.Context) pulumix.Output[GetThemeConfigurationDataColorPalette] {
	return pulumix.Output[GetThemeConfigurationDataColorPalette]{
		OutputState: o.OutputState,
	}
}

// List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
func (o GetThemeConfigurationDataColorPaletteOutput) Colors() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetThemeConfigurationDataColorPalette](o, func(v GetThemeConfigurationDataColorPalette) []string { return v.Colors })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
func (o GetThemeConfigurationDataColorPaletteOutput) EmptyFillColor() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationDataColorPalette](o, func(v GetThemeConfigurationDataColorPalette) string { return v.EmptyFillColor })
}

// The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
func (o GetThemeConfigurationDataColorPaletteOutput) MinMaxGradients() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetThemeConfigurationDataColorPalette](o, func(v GetThemeConfigurationDataColorPalette) []string { return v.MinMaxGradients })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetThemeConfigurationSheet struct {
	// The layout options for tiles. See tile_layout.
	TileLayouts []GetThemeConfigurationSheetTileLayout `pulumi:"tileLayouts"`
	// The display options for tiles. See tile.
	Tiles []GetThemeConfigurationSheetTile `pulumi:"tiles"`
}

type GetThemeConfigurationSheetArgs struct {
	// The layout options for tiles. See tile_layout.
	TileLayouts pulumix.Input[[]*GetThemeConfigurationSheetTileLayoutArgs] `pulumi:"tileLayouts"`
	// The display options for tiles. See tile.
	Tiles pulumix.Input[[]*GetThemeConfigurationSheetTileArgs] `pulumi:"tiles"`
}

func (GetThemeConfigurationSheetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheet)(nil)).Elem()
}

func (i GetThemeConfigurationSheetArgs) ToGetThemeConfigurationSheetOutput() GetThemeConfigurationSheetOutput {
	return i.ToGetThemeConfigurationSheetOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetArgs) ToGetThemeConfigurationSheetOutputWithContext(ctx context.Context) GetThemeConfigurationSheetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetOutput)
}

func (i *GetThemeConfigurationSheetArgs) ToOutput(ctx context.Context) pulumix.Output[*GetThemeConfigurationSheetArgs] {
	return pulumix.Val(i)
}

type GetThemeConfigurationSheetOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheet)(nil)).Elem()
}

func (o GetThemeConfigurationSheetOutput) ToGetThemeConfigurationSheetOutput() GetThemeConfigurationSheetOutput {
	return o
}

func (o GetThemeConfigurationSheetOutput) ToGetThemeConfigurationSheetOutputWithContext(ctx context.Context) GetThemeConfigurationSheetOutput {
	return o
}

func (o GetThemeConfigurationSheetOutput) ToOutput(ctx context.Context) pulumix.Output[GetThemeConfigurationSheet] {
	return pulumix.Output[GetThemeConfigurationSheet]{
		OutputState: o.OutputState,
	}
}

// The layout options for tiles. See tile_layout.
func (o GetThemeConfigurationSheetOutput) TileLayouts() pulumix.GArrayOutput[GetThemeConfigurationSheetTileLayout, GetThemeConfigurationSheetTileLayoutOutput] {
	value := pulumix.Apply[GetThemeConfigurationSheet](o, func(v GetThemeConfigurationSheet) []GetThemeConfigurationSheetTileLayout { return v.TileLayouts })
	return pulumix.GArrayOutput[GetThemeConfigurationSheetTileLayout, GetThemeConfigurationSheetTileLayoutOutput]{OutputState: value.OutputState}
}

// The display options for tiles. See tile.
func (o GetThemeConfigurationSheetOutput) Tiles() pulumix.GArrayOutput[GetThemeConfigurationSheetTile, GetThemeConfigurationSheetTileOutput] {
	value := pulumix.Apply[GetThemeConfigurationSheet](o, func(v GetThemeConfigurationSheet) []GetThemeConfigurationSheetTile { return v.Tiles })
	return pulumix.GArrayOutput[GetThemeConfigurationSheetTile, GetThemeConfigurationSheetTileOutput]{OutputState: value.OutputState}
}

type GetThemeConfigurationSheetTile struct {
	// The border around a tile. See border.
	Borders []GetThemeConfigurationSheetTileBorder `pulumi:"borders"`
}

type GetThemeConfigurationSheetTileArgs struct {
	// The border around a tile. See border.
	Borders pulumix.Input[[]*GetThemeConfigurationSheetTileBorderArgs] `pulumi:"borders"`
}

func (GetThemeConfigurationSheetTileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTile)(nil)).Elem()
}

func (i GetThemeConfigurationSheetTileArgs) ToGetThemeConfigurationSheetTileOutput() GetThemeConfigurationSheetTileOutput {
	return i.ToGetThemeConfigurationSheetTileOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetTileArgs) ToGetThemeConfigurationSheetTileOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetTileOutput)
}

func (i *GetThemeConfigurationSheetTileArgs) ToOutput(ctx context.Context) pulumix.Output[*GetThemeConfigurationSheetTileArgs] {
	return pulumix.Val(i)
}

type GetThemeConfigurationSheetTileOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetTileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTile)(nil)).Elem()
}

func (o GetThemeConfigurationSheetTileOutput) ToGetThemeConfigurationSheetTileOutput() GetThemeConfigurationSheetTileOutput {
	return o
}

func (o GetThemeConfigurationSheetTileOutput) ToGetThemeConfigurationSheetTileOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileOutput {
	return o
}

func (o GetThemeConfigurationSheetTileOutput) ToOutput(ctx context.Context) pulumix.Output[GetThemeConfigurationSheetTile] {
	return pulumix.Output[GetThemeConfigurationSheetTile]{
		OutputState: o.OutputState,
	}
}

// The border around a tile. See border.
func (o GetThemeConfigurationSheetTileOutput) Borders() pulumix.GArrayOutput[GetThemeConfigurationSheetTileBorder, GetThemeConfigurationSheetTileBorderOutput] {
	value := pulumix.Apply[GetThemeConfigurationSheetTile](o, func(v GetThemeConfigurationSheetTile) []GetThemeConfigurationSheetTileBorder { return v.Borders })
	return pulumix.GArrayOutput[GetThemeConfigurationSheetTileBorder, GetThemeConfigurationSheetTileBorderOutput]{OutputState: value.OutputState}
}

type GetThemeConfigurationSheetTileBorder struct {
	// This Boolean value controls whether to display sheet margins.
	Show bool `pulumi:"show"`
}

type GetThemeConfigurationSheetTileBorderArgs struct {
	// This Boolean value controls whether to display sheet margins.
	Show pulumix.Input[bool] `pulumi:"show"`
}

func (GetThemeConfigurationSheetTileBorderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileBorder)(nil)).Elem()
}

func (i GetThemeConfigurationSheetTileBorderArgs) ToGetThemeConfigurationSheetTileBorderOutput() GetThemeConfigurationSheetTileBorderOutput {
	return i.ToGetThemeConfigurationSheetTileBorderOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetTileBorderArgs) ToGetThemeConfigurationSheetTileBorderOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileBorderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetTileBorderOutput)
}

func (i *GetThemeConfigurationSheetTileBorderArgs) ToOutput(ctx context.Context) pulumix.Output[*GetThemeConfigurationSheetTileBorderArgs] {
	return pulumix.Val(i)
}

type GetThemeConfigurationSheetTileBorderOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetTileBorderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileBorder)(nil)).Elem()
}

func (o GetThemeConfigurationSheetTileBorderOutput) ToGetThemeConfigurationSheetTileBorderOutput() GetThemeConfigurationSheetTileBorderOutput {
	return o
}

func (o GetThemeConfigurationSheetTileBorderOutput) ToGetThemeConfigurationSheetTileBorderOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileBorderOutput {
	return o
}

func (o GetThemeConfigurationSheetTileBorderOutput) ToOutput(ctx context.Context) pulumix.Output[GetThemeConfigurationSheetTileBorder] {
	return pulumix.Output[GetThemeConfigurationSheetTileBorder]{
		OutputState: o.OutputState,
	}
}

// This Boolean value controls whether to display sheet margins.
func (o GetThemeConfigurationSheetTileBorderOutput) Show() pulumix.Output[bool] {
	return pulumix.Apply[GetThemeConfigurationSheetTileBorder](o, func(v GetThemeConfigurationSheetTileBorder) bool { return v.Show })
}

type GetThemeConfigurationSheetTileLayout struct {
	// The gutter settings that apply between tiles. See gutter.
	Gutters []GetThemeConfigurationSheetTileLayoutGutter `pulumi:"gutters"`
	// The margin settings that apply around the outside edge of sheets. See margin.
	Margins []GetThemeConfigurationSheetTileLayoutMargin `pulumi:"margins"`
}

type GetThemeConfigurationSheetTileLayoutArgs struct {
	// The gutter settings that apply between tiles. See gutter.
	Gutters pulumix.Input[[]*GetThemeConfigurationSheetTileLayoutGutterArgs] `pulumi:"gutters"`
	// The margin settings that apply around the outside edge of sheets. See margin.
	Margins pulumix.Input[[]*GetThemeConfigurationSheetTileLayoutMarginArgs] `pulumi:"margins"`
}

func (GetThemeConfigurationSheetTileLayoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileLayout)(nil)).Elem()
}

func (i GetThemeConfigurationSheetTileLayoutArgs) ToGetThemeConfigurationSheetTileLayoutOutput() GetThemeConfigurationSheetTileLayoutOutput {
	return i.ToGetThemeConfigurationSheetTileLayoutOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetTileLayoutArgs) ToGetThemeConfigurationSheetTileLayoutOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetTileLayoutOutput)
}

func (i *GetThemeConfigurationSheetTileLayoutArgs) ToOutput(ctx context.Context) pulumix.Output[*GetThemeConfigurationSheetTileLayoutArgs] {
	return pulumix.Val(i)
}

type GetThemeConfigurationSheetTileLayoutOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetTileLayoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileLayout)(nil)).Elem()
}

func (o GetThemeConfigurationSheetTileLayoutOutput) ToGetThemeConfigurationSheetTileLayoutOutput() GetThemeConfigurationSheetTileLayoutOutput {
	return o
}

func (o GetThemeConfigurationSheetTileLayoutOutput) ToGetThemeConfigurationSheetTileLayoutOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutOutput {
	return o
}

func (o GetThemeConfigurationSheetTileLayoutOutput) ToOutput(ctx context.Context) pulumix.Output[GetThemeConfigurationSheetTileLayout] {
	return pulumix.Output[GetThemeConfigurationSheetTileLayout]{
		OutputState: o.OutputState,
	}
}

// The gutter settings that apply between tiles. See gutter.
func (o GetThemeConfigurationSheetTileLayoutOutput) Gutters() pulumix.GArrayOutput[GetThemeConfigurationSheetTileLayoutGutter, GetThemeConfigurationSheetTileLayoutGutterOutput] {
	value := pulumix.Apply[GetThemeConfigurationSheetTileLayout](o, func(v GetThemeConfigurationSheetTileLayout) []GetThemeConfigurationSheetTileLayoutGutter {
		return v.Gutters
	})
	return pulumix.GArrayOutput[GetThemeConfigurationSheetTileLayoutGutter, GetThemeConfigurationSheetTileLayoutGutterOutput]{OutputState: value.OutputState}
}

// The margin settings that apply around the outside edge of sheets. See margin.
func (o GetThemeConfigurationSheetTileLayoutOutput) Margins() pulumix.GArrayOutput[GetThemeConfigurationSheetTileLayoutMargin, GetThemeConfigurationSheetTileLayoutMarginOutput] {
	value := pulumix.Apply[GetThemeConfigurationSheetTileLayout](o, func(v GetThemeConfigurationSheetTileLayout) []GetThemeConfigurationSheetTileLayoutMargin {
		return v.Margins
	})
	return pulumix.GArrayOutput[GetThemeConfigurationSheetTileLayoutMargin, GetThemeConfigurationSheetTileLayoutMarginOutput]{OutputState: value.OutputState}
}

type GetThemeConfigurationSheetTileLayoutGutter struct {
	// This Boolean value controls whether to display sheet margins.
	Show bool `pulumi:"show"`
}

type GetThemeConfigurationSheetTileLayoutGutterArgs struct {
	// This Boolean value controls whether to display sheet margins.
	Show pulumix.Input[bool] `pulumi:"show"`
}

func (GetThemeConfigurationSheetTileLayoutGutterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileLayoutGutter)(nil)).Elem()
}

func (i GetThemeConfigurationSheetTileLayoutGutterArgs) ToGetThemeConfigurationSheetTileLayoutGutterOutput() GetThemeConfigurationSheetTileLayoutGutterOutput {
	return i.ToGetThemeConfigurationSheetTileLayoutGutterOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetTileLayoutGutterArgs) ToGetThemeConfigurationSheetTileLayoutGutterOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutGutterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetTileLayoutGutterOutput)
}

func (i *GetThemeConfigurationSheetTileLayoutGutterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetThemeConfigurationSheetTileLayoutGutterArgs] {
	return pulumix.Val(i)
}

type GetThemeConfigurationSheetTileLayoutGutterOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetTileLayoutGutterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileLayoutGutter)(nil)).Elem()
}

func (o GetThemeConfigurationSheetTileLayoutGutterOutput) ToGetThemeConfigurationSheetTileLayoutGutterOutput() GetThemeConfigurationSheetTileLayoutGutterOutput {
	return o
}

func (o GetThemeConfigurationSheetTileLayoutGutterOutput) ToGetThemeConfigurationSheetTileLayoutGutterOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutGutterOutput {
	return o
}

func (o GetThemeConfigurationSheetTileLayoutGutterOutput) ToOutput(ctx context.Context) pulumix.Output[GetThemeConfigurationSheetTileLayoutGutter] {
	return pulumix.Output[GetThemeConfigurationSheetTileLayoutGutter]{
		OutputState: o.OutputState,
	}
}

// This Boolean value controls whether to display sheet margins.
func (o GetThemeConfigurationSheetTileLayoutGutterOutput) Show() pulumix.Output[bool] {
	return pulumix.Apply[GetThemeConfigurationSheetTileLayoutGutter](o, func(v GetThemeConfigurationSheetTileLayoutGutter) bool { return v.Show })
}

type GetThemeConfigurationSheetTileLayoutMargin struct {
	// This Boolean value controls whether to display sheet margins.
	Show bool `pulumi:"show"`
}

type GetThemeConfigurationSheetTileLayoutMarginArgs struct {
	// This Boolean value controls whether to display sheet margins.
	Show pulumix.Input[bool] `pulumi:"show"`
}

func (GetThemeConfigurationSheetTileLayoutMarginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileLayoutMargin)(nil)).Elem()
}

func (i GetThemeConfigurationSheetTileLayoutMarginArgs) ToGetThemeConfigurationSheetTileLayoutMarginOutput() GetThemeConfigurationSheetTileLayoutMarginOutput {
	return i.ToGetThemeConfigurationSheetTileLayoutMarginOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetTileLayoutMarginArgs) ToGetThemeConfigurationSheetTileLayoutMarginOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutMarginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetTileLayoutMarginOutput)
}

func (i *GetThemeConfigurationSheetTileLayoutMarginArgs) ToOutput(ctx context.Context) pulumix.Output[*GetThemeConfigurationSheetTileLayoutMarginArgs] {
	return pulumix.Val(i)
}

type GetThemeConfigurationSheetTileLayoutMarginOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetTileLayoutMarginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileLayoutMargin)(nil)).Elem()
}

func (o GetThemeConfigurationSheetTileLayoutMarginOutput) ToGetThemeConfigurationSheetTileLayoutMarginOutput() GetThemeConfigurationSheetTileLayoutMarginOutput {
	return o
}

func (o GetThemeConfigurationSheetTileLayoutMarginOutput) ToGetThemeConfigurationSheetTileLayoutMarginOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutMarginOutput {
	return o
}

func (o GetThemeConfigurationSheetTileLayoutMarginOutput) ToOutput(ctx context.Context) pulumix.Output[GetThemeConfigurationSheetTileLayoutMargin] {
	return pulumix.Output[GetThemeConfigurationSheetTileLayoutMargin]{
		OutputState: o.OutputState,
	}
}

// This Boolean value controls whether to display sheet margins.
func (o GetThemeConfigurationSheetTileLayoutMarginOutput) Show() pulumix.Output[bool] {
	return pulumix.Apply[GetThemeConfigurationSheetTileLayoutMargin](o, func(v GetThemeConfigurationSheetTileLayoutMargin) bool { return v.Show })
}

type GetThemeConfigurationTypography struct {
	// Determines the list of font families. Maximum number of 5 items. See font_families.
	FontFamilies []GetThemeConfigurationTypographyFontFamily `pulumi:"fontFamilies"`
}

type GetThemeConfigurationTypographyArgs struct {
	// Determines the list of font families. Maximum number of 5 items. See font_families.
	FontFamilies pulumix.Input[[]*GetThemeConfigurationTypographyFontFamilyArgs] `pulumi:"fontFamilies"`
}

func (GetThemeConfigurationTypographyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationTypography)(nil)).Elem()
}

func (i GetThemeConfigurationTypographyArgs) ToGetThemeConfigurationTypographyOutput() GetThemeConfigurationTypographyOutput {
	return i.ToGetThemeConfigurationTypographyOutputWithContext(context.Background())
}

func (i GetThemeConfigurationTypographyArgs) ToGetThemeConfigurationTypographyOutputWithContext(ctx context.Context) GetThemeConfigurationTypographyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationTypographyOutput)
}

func (i *GetThemeConfigurationTypographyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetThemeConfigurationTypographyArgs] {
	return pulumix.Val(i)
}

type GetThemeConfigurationTypographyOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationTypographyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationTypography)(nil)).Elem()
}

func (o GetThemeConfigurationTypographyOutput) ToGetThemeConfigurationTypographyOutput() GetThemeConfigurationTypographyOutput {
	return o
}

func (o GetThemeConfigurationTypographyOutput) ToGetThemeConfigurationTypographyOutputWithContext(ctx context.Context) GetThemeConfigurationTypographyOutput {
	return o
}

func (o GetThemeConfigurationTypographyOutput) ToOutput(ctx context.Context) pulumix.Output[GetThemeConfigurationTypography] {
	return pulumix.Output[GetThemeConfigurationTypography]{
		OutputState: o.OutputState,
	}
}

// Determines the list of font families. Maximum number of 5 items. See font_families.
func (o GetThemeConfigurationTypographyOutput) FontFamilies() pulumix.GArrayOutput[GetThemeConfigurationTypographyFontFamily, GetThemeConfigurationTypographyFontFamilyOutput] {
	value := pulumix.Apply[GetThemeConfigurationTypography](o, func(v GetThemeConfigurationTypography) []GetThemeConfigurationTypographyFontFamily {
		return v.FontFamilies
	})
	return pulumix.GArrayOutput[GetThemeConfigurationTypographyFontFamily, GetThemeConfigurationTypographyFontFamilyOutput]{OutputState: value.OutputState}
}

type GetThemeConfigurationTypographyFontFamily struct {
	// Font family name.
	FontFamily string `pulumi:"fontFamily"`
}

type GetThemeConfigurationTypographyFontFamilyArgs struct {
	// Font family name.
	FontFamily pulumix.Input[string] `pulumi:"fontFamily"`
}

func (GetThemeConfigurationTypographyFontFamilyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationTypographyFontFamily)(nil)).Elem()
}

func (i GetThemeConfigurationTypographyFontFamilyArgs) ToGetThemeConfigurationTypographyFontFamilyOutput() GetThemeConfigurationTypographyFontFamilyOutput {
	return i.ToGetThemeConfigurationTypographyFontFamilyOutputWithContext(context.Background())
}

func (i GetThemeConfigurationTypographyFontFamilyArgs) ToGetThemeConfigurationTypographyFontFamilyOutputWithContext(ctx context.Context) GetThemeConfigurationTypographyFontFamilyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationTypographyFontFamilyOutput)
}

func (i *GetThemeConfigurationTypographyFontFamilyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetThemeConfigurationTypographyFontFamilyArgs] {
	return pulumix.Val(i)
}

type GetThemeConfigurationTypographyFontFamilyOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationTypographyFontFamilyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationTypographyFontFamily)(nil)).Elem()
}

func (o GetThemeConfigurationTypographyFontFamilyOutput) ToGetThemeConfigurationTypographyFontFamilyOutput() GetThemeConfigurationTypographyFontFamilyOutput {
	return o
}

func (o GetThemeConfigurationTypographyFontFamilyOutput) ToGetThemeConfigurationTypographyFontFamilyOutputWithContext(ctx context.Context) GetThemeConfigurationTypographyFontFamilyOutput {
	return o
}

func (o GetThemeConfigurationTypographyFontFamilyOutput) ToOutput(ctx context.Context) pulumix.Output[GetThemeConfigurationTypographyFontFamily] {
	return pulumix.Output[GetThemeConfigurationTypographyFontFamily]{
		OutputState: o.OutputState,
	}
}

// Font family name.
func (o GetThemeConfigurationTypographyFontFamilyOutput) FontFamily() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationTypographyFontFamily](o, func(v GetThemeConfigurationTypographyFontFamily) string { return v.FontFamily })
}

type GetThemeConfigurationUiColorPalette struct {
	// Color (hexadecimal) that applies to selected states and buttons.
	Accent string `pulumi:"accent"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
	AccentForeground string `pulumi:"accentForeground"`
	// Color (hexadecimal) that applies to error messages.
	Danger string `pulumi:"danger"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the error color.
	DangerForeground string `pulumi:"dangerForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
	Dimension string `pulumi:"dimension"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
	DimensionForeground string `pulumi:"dimensionForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as measures.
	Measure string `pulumi:"measure"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
	MeasureForeground string `pulumi:"measureForeground"`
	// Color (hexadecimal) that applies to visuals and other high emphasis UI.
	PrimaryBackground string `pulumi:"primaryBackground"`
	// Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
	PrimaryForeground string `pulumi:"primaryForeground"`
	// Color (hexadecimal) that applies to the sheet background and sheet controls.
	SecondaryBackground string `pulumi:"secondaryBackground"`
	// Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
	SecondaryForeground string `pulumi:"secondaryForeground"`
	// Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
	Success string `pulumi:"success"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the success color.
	SuccessForeground string `pulumi:"successForeground"`
	// Color (hexadecimal) that applies to warning and informational messages.
	Warning string `pulumi:"warning"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
	WarningForeground string `pulumi:"warningForeground"`
}

type GetThemeConfigurationUiColorPaletteArgs struct {
	// Color (hexadecimal) that applies to selected states and buttons.
	Accent pulumix.Input[string] `pulumi:"accent"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
	AccentForeground pulumix.Input[string] `pulumi:"accentForeground"`
	// Color (hexadecimal) that applies to error messages.
	Danger pulumix.Input[string] `pulumi:"danger"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the error color.
	DangerForeground pulumix.Input[string] `pulumi:"dangerForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
	Dimension pulumix.Input[string] `pulumi:"dimension"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
	DimensionForeground pulumix.Input[string] `pulumi:"dimensionForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as measures.
	Measure pulumix.Input[string] `pulumi:"measure"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
	MeasureForeground pulumix.Input[string] `pulumi:"measureForeground"`
	// Color (hexadecimal) that applies to visuals and other high emphasis UI.
	PrimaryBackground pulumix.Input[string] `pulumi:"primaryBackground"`
	// Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
	PrimaryForeground pulumix.Input[string] `pulumi:"primaryForeground"`
	// Color (hexadecimal) that applies to the sheet background and sheet controls.
	SecondaryBackground pulumix.Input[string] `pulumi:"secondaryBackground"`
	// Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
	SecondaryForeground pulumix.Input[string] `pulumi:"secondaryForeground"`
	// Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
	Success pulumix.Input[string] `pulumi:"success"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the success color.
	SuccessForeground pulumix.Input[string] `pulumi:"successForeground"`
	// Color (hexadecimal) that applies to warning and informational messages.
	Warning pulumix.Input[string] `pulumi:"warning"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
	WarningForeground pulumix.Input[string] `pulumi:"warningForeground"`
}

func (GetThemeConfigurationUiColorPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationUiColorPalette)(nil)).Elem()
}

func (i GetThemeConfigurationUiColorPaletteArgs) ToGetThemeConfigurationUiColorPaletteOutput() GetThemeConfigurationUiColorPaletteOutput {
	return i.ToGetThemeConfigurationUiColorPaletteOutputWithContext(context.Background())
}

func (i GetThemeConfigurationUiColorPaletteArgs) ToGetThemeConfigurationUiColorPaletteOutputWithContext(ctx context.Context) GetThemeConfigurationUiColorPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationUiColorPaletteOutput)
}

func (i *GetThemeConfigurationUiColorPaletteArgs) ToOutput(ctx context.Context) pulumix.Output[*GetThemeConfigurationUiColorPaletteArgs] {
	return pulumix.Val(i)
}

type GetThemeConfigurationUiColorPaletteOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationUiColorPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationUiColorPalette)(nil)).Elem()
}

func (o GetThemeConfigurationUiColorPaletteOutput) ToGetThemeConfigurationUiColorPaletteOutput() GetThemeConfigurationUiColorPaletteOutput {
	return o
}

func (o GetThemeConfigurationUiColorPaletteOutput) ToGetThemeConfigurationUiColorPaletteOutputWithContext(ctx context.Context) GetThemeConfigurationUiColorPaletteOutput {
	return o
}

func (o GetThemeConfigurationUiColorPaletteOutput) ToOutput(ctx context.Context) pulumix.Output[GetThemeConfigurationUiColorPalette] {
	return pulumix.Output[GetThemeConfigurationUiColorPalette]{
		OutputState: o.OutputState,
	}
}

// Color (hexadecimal) that applies to selected states and buttons.
func (o GetThemeConfigurationUiColorPaletteOutput) Accent() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.Accent })
}

// Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
func (o GetThemeConfigurationUiColorPaletteOutput) AccentForeground() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.AccentForeground })
}

// Color (hexadecimal) that applies to error messages.
func (o GetThemeConfigurationUiColorPaletteOutput) Danger() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.Danger })
}

// Color (hexadecimal) that applies to any text or other elements that appear over the error color.
func (o GetThemeConfigurationUiColorPaletteOutput) DangerForeground() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.DangerForeground })
}

// Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
func (o GetThemeConfigurationUiColorPaletteOutput) Dimension() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.Dimension })
}

// Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
func (o GetThemeConfigurationUiColorPaletteOutput) DimensionForeground() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.DimensionForeground })
}

// Color (hexadecimal) that applies to the names of fields that are identified as measures.
func (o GetThemeConfigurationUiColorPaletteOutput) Measure() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.Measure })
}

// Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
func (o GetThemeConfigurationUiColorPaletteOutput) MeasureForeground() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.MeasureForeground })
}

// Color (hexadecimal) that applies to visuals and other high emphasis UI.
func (o GetThemeConfigurationUiColorPaletteOutput) PrimaryBackground() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.PrimaryBackground })
}

// Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
func (o GetThemeConfigurationUiColorPaletteOutput) PrimaryForeground() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.PrimaryForeground })
}

// Color (hexadecimal) that applies to the sheet background and sheet controls.
func (o GetThemeConfigurationUiColorPaletteOutput) SecondaryBackground() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.SecondaryBackground })
}

// Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
func (o GetThemeConfigurationUiColorPaletteOutput) SecondaryForeground() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.SecondaryForeground })
}

// Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
func (o GetThemeConfigurationUiColorPaletteOutput) Success() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.Success })
}

// Color (hexadecimal) that applies to any text or other elements that appear over the success color.
func (o GetThemeConfigurationUiColorPaletteOutput) SuccessForeground() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.SuccessForeground })
}

// Color (hexadecimal) that applies to warning and informational messages.
func (o GetThemeConfigurationUiColorPaletteOutput) Warning() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.Warning })
}

// Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
func (o GetThemeConfigurationUiColorPaletteOutput) WarningForeground() pulumix.Output[string] {
	return pulumix.Apply[GetThemeConfigurationUiColorPalette](o, func(v GetThemeConfigurationUiColorPalette) string { return v.WarningForeground })
}

type GetThemePermission struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions []string `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal string `pulumi:"principal"`
}

type GetThemePermissionArgs struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions pulumix.Input[[]string] `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal pulumix.Input[string] `pulumi:"principal"`
}

func (GetThemePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemePermission)(nil)).Elem()
}

func (i GetThemePermissionArgs) ToGetThemePermissionOutput() GetThemePermissionOutput {
	return i.ToGetThemePermissionOutputWithContext(context.Background())
}

func (i GetThemePermissionArgs) ToGetThemePermissionOutputWithContext(ctx context.Context) GetThemePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemePermissionOutput)
}

func (i *GetThemePermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetThemePermissionArgs] {
	return pulumix.Val(i)
}

type GetThemePermissionOutput struct{ *pulumi.OutputState }

func (GetThemePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemePermission)(nil)).Elem()
}

func (o GetThemePermissionOutput) ToGetThemePermissionOutput() GetThemePermissionOutput {
	return o
}

func (o GetThemePermissionOutput) ToGetThemePermissionOutputWithContext(ctx context.Context) GetThemePermissionOutput {
	return o
}

func (o GetThemePermissionOutput) ToOutput(ctx context.Context) pulumix.Output[GetThemePermission] {
	return pulumix.Output[GetThemePermission]{
		OutputState: o.OutputState,
	}
}

// List of IAM actions to grant or revoke permissions on.
func (o GetThemePermissionOutput) Actions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetThemePermission](o, func(v GetThemePermission) []string { return v.Actions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
func (o GetThemePermissionOutput) Principal() pulumix.Output[string] {
	return pulumix.Apply[GetThemePermission](o, func(v GetThemePermission) string { return v.Principal })
}

func init() {
	pulumi.RegisterOutputType(AnalysisParametersOutput{})
	pulumi.RegisterOutputType(AnalysisParametersDateTimeParameterOutput{})
	pulumi.RegisterOutputType(AnalysisParametersDecimalParameterOutput{})
	pulumi.RegisterOutputType(AnalysisParametersIntegerParameterOutput{})
	pulumi.RegisterOutputType(AnalysisParametersStringParameterOutput{})
	pulumi.RegisterOutputType(AnalysisPermissionOutput{})
	pulumi.RegisterOutputType(AnalysisSourceEntityOutput{})
	pulumi.RegisterOutputType(AnalysisSourceEntitySourceTemplateOutput{})
	pulumi.RegisterOutputType(AnalysisSourceEntitySourceTemplateDataSetReferenceOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsAdHocFilteringOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsDataPointTooltipOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsExportToCsvOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsSheetControlsOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsVisualAxisSortOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsVisualMenuOptionOutput{})
	pulumi.RegisterOutputType(DashboardParametersOutput{})
	pulumi.RegisterOutputType(DashboardParametersDateTimeParameterOutput{})
	pulumi.RegisterOutputType(DashboardParametersDecimalParameterOutput{})
	pulumi.RegisterOutputType(DashboardParametersIntegerParameterOutput{})
	pulumi.RegisterOutputType(DashboardParametersStringParameterOutput{})
	pulumi.RegisterOutputType(DashboardPermissionOutput{})
	pulumi.RegisterOutputType(DashboardSourceEntityOutput{})
	pulumi.RegisterOutputType(DashboardSourceEntitySourceTemplateOutput{})
	pulumi.RegisterOutputType(DashboardSourceEntitySourceTemplateDataSetReferenceOutput{})
	pulumi.RegisterOutputType(DataSetColumnGroupOutput{})
	pulumi.RegisterOutputType(DataSetColumnGroupGeoSpatialColumnGroupOutput{})
	pulumi.RegisterOutputType(DataSetColumnLevelPermissionRuleOutput{})
	pulumi.RegisterOutputType(DataSetDataSetUsageConfigurationOutput{})
	pulumi.RegisterOutputType(DataSetFieldFolderOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformFilterOperationOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformProjectOperationOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformRenameColumnOperationOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformTagColumnOperationOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformUntagColumnOperationOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapSourceOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapSourceJoinInstructionOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput{})
	pulumi.RegisterOutputType(DataSetOutputColumnOutput{})
	pulumi.RegisterOutputType(DataSetPermissionOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapCustomSqlOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapCustomSqlColumnOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapRelationalTableOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapRelationalTableInputColumnOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapS3SourceOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapS3SourceInputColumnOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapS3SourceUploadSettingsOutput{})
	pulumi.RegisterOutputType(DataSetRefreshPropertiesOutput{})
	pulumi.RegisterOutputType(DataSetRefreshPropertiesRefreshConfigurationOutput{})
	pulumi.RegisterOutputType(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput{})
	pulumi.RegisterOutputType(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionDataSetOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionTagConfigurationOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionTagConfigurationTagRuleOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialsOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialsCredentialPairOutput{})
	pulumi.RegisterOutputType(DataSourceParametersOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAmazonElasticsearchOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAthenaOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAuroraOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAuroraPostgresqlOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAwsIotAnalyticsOutput{})
	pulumi.RegisterOutputType(DataSourceParametersJiraOutput{})
	pulumi.RegisterOutputType(DataSourceParametersMariaDbOutput{})
	pulumi.RegisterOutputType(DataSourceParametersMysqlOutput{})
	pulumi.RegisterOutputType(DataSourceParametersOracleOutput{})
	pulumi.RegisterOutputType(DataSourceParametersPostgresqlOutput{})
	pulumi.RegisterOutputType(DataSourceParametersPrestoOutput{})
	pulumi.RegisterOutputType(DataSourceParametersRdsOutput{})
	pulumi.RegisterOutputType(DataSourceParametersRedshiftOutput{})
	pulumi.RegisterOutputType(DataSourceParametersS3Output{})
	pulumi.RegisterOutputType(DataSourceParametersS3ManifestFileLocationOutput{})
	pulumi.RegisterOutputType(DataSourceParametersServiceNowOutput{})
	pulumi.RegisterOutputType(DataSourceParametersSnowflakeOutput{})
	pulumi.RegisterOutputType(DataSourceParametersSparkOutput{})
	pulumi.RegisterOutputType(DataSourceParametersSqlServerOutput{})
	pulumi.RegisterOutputType(DataSourceParametersTeradataOutput{})
	pulumi.RegisterOutputType(DataSourceParametersTwitterOutput{})
	pulumi.RegisterOutputType(DataSourcePermissionOutput{})
	pulumi.RegisterOutputType(DataSourceSslPropertiesOutput{})
	pulumi.RegisterOutputType(DataSourceVpcConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(FolderPermissionOutput{})
	pulumi.RegisterOutputType(IamPolicyAssignmentIdentitiesOutput{})
	pulumi.RegisterOutputType(NamespaceTimeoutsOutput{})
	pulumi.RegisterOutputType(RefreshScheduleScheduleOutput{})
	pulumi.RegisterOutputType(RefreshScheduleScheduleScheduleFrequencyOutput{})
	pulumi.RegisterOutputType(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput{})
	pulumi.RegisterOutputType(TemplatePermissionOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntityOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntitySourceAnalysisOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntitySourceAnalysisDataSetReferenceOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntitySourceTemplateOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationDataColorPaletteOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetTileOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetTileBorderOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetTileLayoutOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetTileLayoutGutterOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetTileLayoutMarginOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationTypographyOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationTypographyFontFamilyOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationUiColorPaletteOutput{})
	pulumi.RegisterOutputType(ThemePermissionOutput{})
	pulumi.RegisterOutputType(VpcConnectionTimeoutsOutput{})
	pulumi.RegisterOutputType(GetDataSetColumnGroupOutput{})
	pulumi.RegisterOutputType(GetDataSetColumnGroupGeoSpatialColumnGroupOutput{})
	pulumi.RegisterOutputType(GetDataSetColumnLevelPermissionRuleOutput{})
	pulumi.RegisterOutputType(GetDataSetDataSetUsageConfigurationOutput{})
	pulumi.RegisterOutputType(GetDataSetFieldFolderOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformFilterOperationOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformProjectOperationOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapSourceOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapSourceJoinInstructionOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput{})
	pulumi.RegisterOutputType(GetDataSetPermissionOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapCustomSqlOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapCustomSqlColumnOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapRelationalTableOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapRelationalTableInputColumnOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapS3SourceOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapS3SourceInputColumnOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapS3SourceUploadSettingOutput{})
	pulumi.RegisterOutputType(GetDataSetRowLevelPermissionDataSetOutput{})
	pulumi.RegisterOutputType(GetDataSetRowLevelPermissionTagConfigurationOutput{})
	pulumi.RegisterOutputType(GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationDataColorPaletteOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetTileOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetTileBorderOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetTileLayoutOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetTileLayoutGutterOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetTileLayoutMarginOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationTypographyOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationTypographyFontFamilyOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationUiColorPaletteOutput{})
	pulumi.RegisterOutputType(GetThemePermissionOutput{})
}
