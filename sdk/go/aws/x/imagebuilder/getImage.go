// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about an Image Builder Image.
func LookupImage(ctx *pulumi.Context, args *LookupImageArgs, opts ...pulumi.InvokeOption) (*LookupImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupImageResult
	err := ctx.Invoke("aws:imagebuilder/getImage:getImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImage.
type LookupImageArgs struct {
	// ARN of the image. The suffix can either be specified with wildcards (`x.x.x`) to fetch the latest build version or a full build version (e.g., `2020.11.26/1`) to fetch an exact version.
	Arn string `pulumi:"arn"`
	// Key-value map of resource tags for the image.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getImage.
type LookupImageResult struct {
	Arn string `pulumi:"arn"`
	// Build version ARN of the image. This will always have the `#.#.#/#` suffix.
	BuildVersionArn string `pulumi:"buildVersionArn"`
	// ARN of the container recipe.
	ContainerRecipeArn string `pulumi:"containerRecipeArn"`
	// Date the image was created.
	DateCreated string `pulumi:"dateCreated"`
	// ARN of the Image Builder Distribution Configuration.
	DistributionConfigurationArn string `pulumi:"distributionConfigurationArn"`
	// Whether additional information about the image being created is collected.
	EnhancedImageMetadataEnabled bool `pulumi:"enhancedImageMetadataEnabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN of the image recipe.
	ImageRecipeArn string `pulumi:"imageRecipeArn"`
	// List of an object with image tests configuration.
	ImageTestsConfigurations []GetImageImageTestsConfiguration `pulumi:"imageTestsConfigurations"`
	// ARN of the Image Builder Infrastructure Configuration.
	InfrastructureConfigurationArn string `pulumi:"infrastructureConfigurationArn"`
	// Name of the AMI.
	Name string `pulumi:"name"`
	// Operating System version of the image.
	OsVersion string `pulumi:"osVersion"`
	// List of objects with resources created by the image.
	OutputResources []GetImageOutputResource `pulumi:"outputResources"`
	// Platform of the image.
	Platform string `pulumi:"platform"`
	// Key-value map of resource tags for the image.
	Tags map[string]string `pulumi:"tags"`
	// Version of the image.
	Version string `pulumi:"version"`
}

func LookupImageOutput(ctx *pulumi.Context, args LookupImageOutputArgs, opts ...pulumi.InvokeOption) LookupImageResultOutput {
	outputResult := pulumix.ApplyErr[*LookupImageArgs](args.ToOutput(), func(plainArgs *LookupImageArgs) (*LookupImageResult, error) {
		return LookupImage(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupImageResultOutput, *LookupImageResult](outputResult)
}

// A collection of arguments for invoking getImage.
type LookupImageOutputArgs struct {
	// ARN of the image. The suffix can either be specified with wildcards (`x.x.x`) to fetch the latest build version or a full build version (e.g., `2020.11.26/1`) to fetch an exact version.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Key-value map of resource tags for the image.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupImageOutputArgs) ToOutput() pulumix.Output[*LookupImageArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupImageArgs {
		return &LookupImageArgs{
			Arn:  resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupImageResultOutput struct{ *pulumi.OutputState }

func (LookupImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageResult)(nil)).Elem()
}

func (o LookupImageResultOutput) ToOutput(context.Context) pulumix.Output[*LookupImageResult] {
	return pulumix.Output[*LookupImageResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupImageResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) string { return v.Arn })
}

func (o LookupImageResultOutput) BuildVersionArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) string { return v.BuildVersionArn })
}

func (o LookupImageResultOutput) ContainerRecipeArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) string { return v.ContainerRecipeArn })
}

func (o LookupImageResultOutput) DateCreated() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) string { return v.DateCreated })
}

func (o LookupImageResultOutput) DistributionConfigurationArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) string { return v.DistributionConfigurationArn })
}

func (o LookupImageResultOutput) EnhancedImageMetadataEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) bool { return v.EnhancedImageMetadataEnabled })
}

func (o LookupImageResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) string { return v.Id })
}

func (o LookupImageResultOutput) ImageRecipeArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) string { return v.ImageRecipeArn })
}

func (o LookupImageResultOutput) ImageTestsConfigurations() pulumix.GArrayOutput[GetImageImageTestsConfiguration, GetImageImageTestsConfigurationOutput] {
	value := pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) []GetImageImageTestsConfiguration { return v.ImageTestsConfigurations })
	return pulumix.GArrayOutput[GetImageImageTestsConfiguration, GetImageImageTestsConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupImageResultOutput) InfrastructureConfigurationArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) string { return v.InfrastructureConfigurationArn })
}

func (o LookupImageResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) string { return v.Name })
}

func (o LookupImageResultOutput) OsVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) string { return v.OsVersion })
}

func (o LookupImageResultOutput) OutputResources() pulumix.GArrayOutput[GetImageOutputResource, GetImageOutputResourceOutput] {
	value := pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) []GetImageOutputResource { return v.OutputResources })
	return pulumix.GArrayOutput[GetImageOutputResource, GetImageOutputResourceOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupImageResultOutput) Platform() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) string { return v.Platform })
}

func (o LookupImageResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupImageResultOutput) Version() pulumix.Output[string] {
	return pulumix.Apply[*LookupImageResult](o, func(v *LookupImageResult) string { return v.Version })
}
