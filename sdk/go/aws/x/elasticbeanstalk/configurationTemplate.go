// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticbeanstalk

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Elastic Beanstalk Configuration Template, which are associated with
// a specific application and are used to deploy different versions of the
// application with the same configuration settings.
type ConfigurationTemplate struct {
	pulumi.CustomResourceState

	// name of the application to associate with this configuration template
	Application pulumix.Output[string] `pulumi:"application"`
	// Short description of the Template
	Description pulumix.Output[*string] `pulumi:"description"`
	// The ID of the environment used with this configuration template
	EnvironmentId pulumix.Output[*string] `pulumi:"environmentId"`
	// A unique name for this Template.
	Name pulumix.Output[string] `pulumi:"name"`
	// Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in Option Settings
	Settings pulumix.GArrayOutput[ConfigurationTemplateSetting, ConfigurationTemplateSettingOutput] `pulumi:"settings"`
	// A solution stack to base your Template
	// off of. Example stacks can be found in the [Amazon API documentation][1]
	SolutionStackName pulumix.Output[*string] `pulumi:"solutionStackName"`
}

// NewConfigurationTemplate registers a new resource with the given unique name, arguments, and options.
func NewConfigurationTemplate(ctx *pulumi.Context,
	name string, args *ConfigurationTemplateArgs, opts ...pulumi.ResourceOption) (*ConfigurationTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Application == nil {
		return nil, errors.New("invalid value for required argument 'Application'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigurationTemplate
	err := ctx.RegisterResource("aws:elasticbeanstalk/configurationTemplate:ConfigurationTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationTemplate gets an existing ConfigurationTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationTemplateState, opts ...pulumi.ResourceOption) (*ConfigurationTemplate, error) {
	var resource ConfigurationTemplate
	err := ctx.ReadResource("aws:elasticbeanstalk/configurationTemplate:ConfigurationTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigurationTemplate resources.
type configurationTemplateState struct {
	// name of the application to associate with this configuration template
	Application *string `pulumi:"application"`
	// Short description of the Template
	Description *string `pulumi:"description"`
	// The ID of the environment used with this configuration template
	EnvironmentId *string `pulumi:"environmentId"`
	// A unique name for this Template.
	Name *string `pulumi:"name"`
	// Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in Option Settings
	Settings []ConfigurationTemplateSetting `pulumi:"settings"`
	// A solution stack to base your Template
	// off of. Example stacks can be found in the [Amazon API documentation][1]
	SolutionStackName *string `pulumi:"solutionStackName"`
}

type ConfigurationTemplateState struct {
	// name of the application to associate with this configuration template
	Application pulumix.Input[*string]
	// Short description of the Template
	Description pulumix.Input[*string]
	// The ID of the environment used with this configuration template
	EnvironmentId pulumix.Input[*string]
	// A unique name for this Template.
	Name pulumix.Input[*string]
	// Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in Option Settings
	Settings pulumix.Input[[]*ConfigurationTemplateSettingArgs]
	// A solution stack to base your Template
	// off of. Example stacks can be found in the [Amazon API documentation][1]
	SolutionStackName pulumix.Input[*string]
}

func (ConfigurationTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationTemplateState)(nil)).Elem()
}

type configurationTemplateArgs struct {
	// name of the application to associate with this configuration template
	Application string `pulumi:"application"`
	// Short description of the Template
	Description *string `pulumi:"description"`
	// The ID of the environment used with this configuration template
	EnvironmentId *string `pulumi:"environmentId"`
	// A unique name for this Template.
	Name *string `pulumi:"name"`
	// Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in Option Settings
	Settings []ConfigurationTemplateSetting `pulumi:"settings"`
	// A solution stack to base your Template
	// off of. Example stacks can be found in the [Amazon API documentation][1]
	SolutionStackName *string `pulumi:"solutionStackName"`
}

// The set of arguments for constructing a ConfigurationTemplate resource.
type ConfigurationTemplateArgs struct {
	// name of the application to associate with this configuration template
	Application pulumix.Input[string]
	// Short description of the Template
	Description pulumix.Input[*string]
	// The ID of the environment used with this configuration template
	EnvironmentId pulumix.Input[*string]
	// A unique name for this Template.
	Name pulumix.Input[*string]
	// Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in Option Settings
	Settings pulumix.Input[[]*ConfigurationTemplateSettingArgs]
	// A solution stack to base your Template
	// off of. Example stacks can be found in the [Amazon API documentation][1]
	SolutionStackName pulumix.Input[*string]
}

func (ConfigurationTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationTemplateArgs)(nil)).Elem()
}

type ConfigurationTemplateOutput struct{ *pulumi.OutputState }

func (ConfigurationTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationTemplate)(nil)).Elem()
}

func (o ConfigurationTemplateOutput) ToConfigurationTemplateOutput() ConfigurationTemplateOutput {
	return o
}

func (o ConfigurationTemplateOutput) ToConfigurationTemplateOutputWithContext(ctx context.Context) ConfigurationTemplateOutput {
	return o
}

func (o ConfigurationTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigurationTemplate] {
	return pulumix.Output[ConfigurationTemplate]{
		OutputState: o.OutputState,
	}
}

// name of the application to associate with this configuration template
func (o ConfigurationTemplateOutput) Application() pulumix.Output[string] {
	value := pulumix.Apply[ConfigurationTemplate](o, func(v ConfigurationTemplate) pulumix.Output[string] { return v.Application })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Short description of the Template
func (o ConfigurationTemplateOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[ConfigurationTemplate](o, func(v ConfigurationTemplate) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the environment used with this configuration template
func (o ConfigurationTemplateOutput) EnvironmentId() pulumix.Output[*string] {
	value := pulumix.Apply[ConfigurationTemplate](o, func(v ConfigurationTemplate) pulumix.Output[*string] { return v.EnvironmentId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A unique name for this Template.
func (o ConfigurationTemplateOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ConfigurationTemplate](o, func(v ConfigurationTemplate) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Option settings to configure the new Environment. These
// override specific values that are set as defaults. The format is detailed
// below in Option Settings
func (o ConfigurationTemplateOutput) Settings() pulumix.GArrayOutput[ConfigurationTemplateSetting, ConfigurationTemplateSettingOutput] {
	value := pulumix.Apply[ConfigurationTemplate](o, func(v ConfigurationTemplate) pulumix.GArrayOutput[ConfigurationTemplateSetting, ConfigurationTemplateSettingOutput] {
		return v.Settings
	})
	unwrapped := pulumix.Flatten[[]ConfigurationTemplateSetting, pulumix.GArrayOutput[ConfigurationTemplateSetting, ConfigurationTemplateSettingOutput]](value)
	return pulumix.GArrayOutput[ConfigurationTemplateSetting, ConfigurationTemplateSettingOutput]{OutputState: unwrapped.OutputState}
}

// A solution stack to base your Template
// off of. Example stacks can be found in the [Amazon API documentation][1]
func (o ConfigurationTemplateOutput) SolutionStackName() pulumix.Output[*string] {
	value := pulumix.Apply[ConfigurationTemplate](o, func(v ConfigurationTemplate) pulumix.Output[*string] { return v.SolutionStackName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(ConfigurationTemplateOutput{})
}
