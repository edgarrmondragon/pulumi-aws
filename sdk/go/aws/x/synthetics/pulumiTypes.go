// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synthetics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type CanaryArtifactConfig struct {
	// Configuration of the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3. See S3 Encryption.
	S3Encryption *CanaryArtifactConfigS3Encryption `pulumi:"s3Encryption"`
}

type CanaryArtifactConfigArgs struct {
	// Configuration of the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3. See S3 Encryption.
	S3Encryption pulumix.Input[*CanaryArtifactConfigS3EncryptionArgs] `pulumi:"s3Encryption"`
}

func (CanaryArtifactConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryArtifactConfig)(nil)).Elem()
}

func (i CanaryArtifactConfigArgs) ToCanaryArtifactConfigOutput() CanaryArtifactConfigOutput {
	return i.ToCanaryArtifactConfigOutputWithContext(context.Background())
}

func (i CanaryArtifactConfigArgs) ToCanaryArtifactConfigOutputWithContext(ctx context.Context) CanaryArtifactConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryArtifactConfigOutput)
}

func (i *CanaryArtifactConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*CanaryArtifactConfigArgs] {
	return pulumix.Val(i)
}

type CanaryArtifactConfigOutput struct{ *pulumi.OutputState }

func (CanaryArtifactConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryArtifactConfig)(nil)).Elem()
}

func (o CanaryArtifactConfigOutput) ToCanaryArtifactConfigOutput() CanaryArtifactConfigOutput {
	return o
}

func (o CanaryArtifactConfigOutput) ToCanaryArtifactConfigOutputWithContext(ctx context.Context) CanaryArtifactConfigOutput {
	return o
}

func (o CanaryArtifactConfigOutput) ToOutput(ctx context.Context) pulumix.Output[CanaryArtifactConfig] {
	return pulumix.Output[CanaryArtifactConfig]{
		OutputState: o.OutputState,
	}
}

// Configuration of the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3. See S3 Encryption.
func (o CanaryArtifactConfigOutput) S3Encryption() pulumix.GPtrOutput[CanaryArtifactConfigS3Encryption, CanaryArtifactConfigS3EncryptionOutput] {
	value := pulumix.Apply[CanaryArtifactConfig](o, func(v CanaryArtifactConfig) *CanaryArtifactConfigS3Encryption { return v.S3Encryption })
	return pulumix.GPtrOutput[CanaryArtifactConfigS3Encryption, CanaryArtifactConfigS3EncryptionOutput]{OutputState: value.OutputState}
}

type CanaryArtifactConfigS3Encryption struct {
	// The encryption method to use for artifacts created by this canary. Valid values are: `SSE_S3` and `SSE_KMS`.
	EncryptionMode *string `pulumi:"encryptionMode"`
	// The ARN of the customer-managed KMS key to use, if you specify `SSE_KMS` for `encryptionMode`.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
}

type CanaryArtifactConfigS3EncryptionArgs struct {
	// The encryption method to use for artifacts created by this canary. Valid values are: `SSE_S3` and `SSE_KMS`.
	EncryptionMode pulumix.Input[*string] `pulumi:"encryptionMode"`
	// The ARN of the customer-managed KMS key to use, if you specify `SSE_KMS` for `encryptionMode`.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
}

func (CanaryArtifactConfigS3EncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryArtifactConfigS3Encryption)(nil)).Elem()
}

func (i CanaryArtifactConfigS3EncryptionArgs) ToCanaryArtifactConfigS3EncryptionOutput() CanaryArtifactConfigS3EncryptionOutput {
	return i.ToCanaryArtifactConfigS3EncryptionOutputWithContext(context.Background())
}

func (i CanaryArtifactConfigS3EncryptionArgs) ToCanaryArtifactConfigS3EncryptionOutputWithContext(ctx context.Context) CanaryArtifactConfigS3EncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryArtifactConfigS3EncryptionOutput)
}

func (i *CanaryArtifactConfigS3EncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[*CanaryArtifactConfigS3EncryptionArgs] {
	return pulumix.Val(i)
}

type CanaryArtifactConfigS3EncryptionOutput struct{ *pulumi.OutputState }

func (CanaryArtifactConfigS3EncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryArtifactConfigS3Encryption)(nil)).Elem()
}

func (o CanaryArtifactConfigS3EncryptionOutput) ToCanaryArtifactConfigS3EncryptionOutput() CanaryArtifactConfigS3EncryptionOutput {
	return o
}

func (o CanaryArtifactConfigS3EncryptionOutput) ToCanaryArtifactConfigS3EncryptionOutputWithContext(ctx context.Context) CanaryArtifactConfigS3EncryptionOutput {
	return o
}

func (o CanaryArtifactConfigS3EncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[CanaryArtifactConfigS3Encryption] {
	return pulumix.Output[CanaryArtifactConfigS3Encryption]{
		OutputState: o.OutputState,
	}
}

// The encryption method to use for artifacts created by this canary. Valid values are: `SSE_S3` and `SSE_KMS`.
func (o CanaryArtifactConfigS3EncryptionOutput) EncryptionMode() pulumix.Output[*string] {
	return pulumix.Apply[CanaryArtifactConfigS3Encryption](o, func(v CanaryArtifactConfigS3Encryption) *string { return v.EncryptionMode })
}

// The ARN of the customer-managed KMS key to use, if you specify `SSE_KMS` for `encryptionMode`.
func (o CanaryArtifactConfigS3EncryptionOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[CanaryArtifactConfigS3Encryption](o, func(v CanaryArtifactConfigS3Encryption) *string { return v.KmsKeyArn })
}

type CanaryRunConfig struct {
	// Whether this canary is to use active AWS X-Ray tracing when it runs. You can enable active tracing only for canaries that use version syn-nodejs-2.0 or later for their canary runtime.
	ActiveTracing *bool `pulumi:"activeTracing"`
	// Map of environment variables that are accessible from the canary during execution. Please see [AWS Docs](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime) for variables reserved for Lambda.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Maximum amount of memory available to the canary while it is running, in MB. The value you specify must be a multiple of 64.
	MemoryInMb *int `pulumi:"memoryInMb"`
	// Number of seconds the canary is allowed to run before it must stop. If you omit this field, the frequency of the canary is used, up to a maximum of 840 (14 minutes).
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
}

type CanaryRunConfigArgs struct {
	// Whether this canary is to use active AWS X-Ray tracing when it runs. You can enable active tracing only for canaries that use version syn-nodejs-2.0 or later for their canary runtime.
	ActiveTracing pulumix.Input[*bool] `pulumi:"activeTracing"`
	// Map of environment variables that are accessible from the canary during execution. Please see [AWS Docs](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime) for variables reserved for Lambda.
	EnvironmentVariables pulumix.Input[map[string]string] `pulumi:"environmentVariables"`
	// Maximum amount of memory available to the canary while it is running, in MB. The value you specify must be a multiple of 64.
	MemoryInMb pulumix.Input[*int] `pulumi:"memoryInMb"`
	// Number of seconds the canary is allowed to run before it must stop. If you omit this field, the frequency of the canary is used, up to a maximum of 840 (14 minutes).
	TimeoutInSeconds pulumix.Input[*int] `pulumi:"timeoutInSeconds"`
}

func (CanaryRunConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryRunConfig)(nil)).Elem()
}

func (i CanaryRunConfigArgs) ToCanaryRunConfigOutput() CanaryRunConfigOutput {
	return i.ToCanaryRunConfigOutputWithContext(context.Background())
}

func (i CanaryRunConfigArgs) ToCanaryRunConfigOutputWithContext(ctx context.Context) CanaryRunConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryRunConfigOutput)
}

func (i *CanaryRunConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*CanaryRunConfigArgs] {
	return pulumix.Val(i)
}

type CanaryRunConfigOutput struct{ *pulumi.OutputState }

func (CanaryRunConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryRunConfig)(nil)).Elem()
}

func (o CanaryRunConfigOutput) ToCanaryRunConfigOutput() CanaryRunConfigOutput {
	return o
}

func (o CanaryRunConfigOutput) ToCanaryRunConfigOutputWithContext(ctx context.Context) CanaryRunConfigOutput {
	return o
}

func (o CanaryRunConfigOutput) ToOutput(ctx context.Context) pulumix.Output[CanaryRunConfig] {
	return pulumix.Output[CanaryRunConfig]{
		OutputState: o.OutputState,
	}
}

// Whether this canary is to use active AWS X-Ray tracing when it runs. You can enable active tracing only for canaries that use version syn-nodejs-2.0 or later for their canary runtime.
func (o CanaryRunConfigOutput) ActiveTracing() pulumix.Output[*bool] {
	return pulumix.Apply[CanaryRunConfig](o, func(v CanaryRunConfig) *bool { return v.ActiveTracing })
}

// Map of environment variables that are accessible from the canary during execution. Please see [AWS Docs](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime) for variables reserved for Lambda.
func (o CanaryRunConfigOutput) EnvironmentVariables() pulumix.MapOutput[string] {
	value := pulumix.Apply[CanaryRunConfig](o, func(v CanaryRunConfig) map[string]string { return v.EnvironmentVariables })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Maximum amount of memory available to the canary while it is running, in MB. The value you specify must be a multiple of 64.
func (o CanaryRunConfigOutput) MemoryInMb() pulumix.Output[*int] {
	return pulumix.Apply[CanaryRunConfig](o, func(v CanaryRunConfig) *int { return v.MemoryInMb })
}

// Number of seconds the canary is allowed to run before it must stop. If you omit this field, the frequency of the canary is used, up to a maximum of 840 (14 minutes).
func (o CanaryRunConfigOutput) TimeoutInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[CanaryRunConfig](o, func(v CanaryRunConfig) *int { return v.TimeoutInSeconds })
}

type CanarySchedule struct {
	// Duration in seconds, for the canary to continue making regular runs according to the schedule in the Expression value.
	DurationInSeconds *int `pulumi:"durationInSeconds"`
	// Rate expression or cron expression that defines how often the canary is to run. For rate expression, the syntax is `rate(number unit)`. _unit_ can be `minute`, `minutes`, or `hour`. For cron expression, the syntax is `cron(expression)`. For more information about the syntax for cron expressions, see [Scheduling canary runs using cron](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_cron.html).
	Expression string `pulumi:"expression"`
}

type CanaryScheduleArgs struct {
	// Duration in seconds, for the canary to continue making regular runs according to the schedule in the Expression value.
	DurationInSeconds pulumix.Input[*int] `pulumi:"durationInSeconds"`
	// Rate expression or cron expression that defines how often the canary is to run. For rate expression, the syntax is `rate(number unit)`. _unit_ can be `minute`, `minutes`, or `hour`. For cron expression, the syntax is `cron(expression)`. For more information about the syntax for cron expressions, see [Scheduling canary runs using cron](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_cron.html).
	Expression pulumix.Input[string] `pulumi:"expression"`
}

func (CanaryScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanarySchedule)(nil)).Elem()
}

func (i CanaryScheduleArgs) ToCanaryScheduleOutput() CanaryScheduleOutput {
	return i.ToCanaryScheduleOutputWithContext(context.Background())
}

func (i CanaryScheduleArgs) ToCanaryScheduleOutputWithContext(ctx context.Context) CanaryScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryScheduleOutput)
}

func (i *CanaryScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[*CanaryScheduleArgs] {
	return pulumix.Val(i)
}

type CanaryScheduleOutput struct{ *pulumi.OutputState }

func (CanaryScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanarySchedule)(nil)).Elem()
}

func (o CanaryScheduleOutput) ToCanaryScheduleOutput() CanaryScheduleOutput {
	return o
}

func (o CanaryScheduleOutput) ToCanaryScheduleOutputWithContext(ctx context.Context) CanaryScheduleOutput {
	return o
}

func (o CanaryScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[CanarySchedule] {
	return pulumix.Output[CanarySchedule]{
		OutputState: o.OutputState,
	}
}

// Duration in seconds, for the canary to continue making regular runs according to the schedule in the Expression value.
func (o CanaryScheduleOutput) DurationInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[CanarySchedule](o, func(v CanarySchedule) *int { return v.DurationInSeconds })
}

// Rate expression or cron expression that defines how often the canary is to run. For rate expression, the syntax is `rate(number unit)`. _unit_ can be `minute`, `minutes`, or `hour`. For cron expression, the syntax is `cron(expression)`. For more information about the syntax for cron expressions, see [Scheduling canary runs using cron](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_cron.html).
func (o CanaryScheduleOutput) Expression() pulumix.Output[string] {
	return pulumix.Apply[CanarySchedule](o, func(v CanarySchedule) string { return v.Expression })
}

type CanaryTimeline struct {
	// Date and time the canary was created.
	Created *string `pulumi:"created"`
	// Date and time the canary was most recently modified.
	LastModified *string `pulumi:"lastModified"`
	// Date and time that the canary's most recent run started.
	LastStarted *string `pulumi:"lastStarted"`
	// Date and time that the canary's most recent run ended.
	LastStopped *string `pulumi:"lastStopped"`
}

type CanaryTimelineArgs struct {
	// Date and time the canary was created.
	Created pulumix.Input[*string] `pulumi:"created"`
	// Date and time the canary was most recently modified.
	LastModified pulumix.Input[*string] `pulumi:"lastModified"`
	// Date and time that the canary's most recent run started.
	LastStarted pulumix.Input[*string] `pulumi:"lastStarted"`
	// Date and time that the canary's most recent run ended.
	LastStopped pulumix.Input[*string] `pulumi:"lastStopped"`
}

func (CanaryTimelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryTimeline)(nil)).Elem()
}

func (i CanaryTimelineArgs) ToCanaryTimelineOutput() CanaryTimelineOutput {
	return i.ToCanaryTimelineOutputWithContext(context.Background())
}

func (i CanaryTimelineArgs) ToCanaryTimelineOutputWithContext(ctx context.Context) CanaryTimelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryTimelineOutput)
}

func (i *CanaryTimelineArgs) ToOutput(ctx context.Context) pulumix.Output[*CanaryTimelineArgs] {
	return pulumix.Val(i)
}

type CanaryTimelineOutput struct{ *pulumi.OutputState }

func (CanaryTimelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryTimeline)(nil)).Elem()
}

func (o CanaryTimelineOutput) ToCanaryTimelineOutput() CanaryTimelineOutput {
	return o
}

func (o CanaryTimelineOutput) ToCanaryTimelineOutputWithContext(ctx context.Context) CanaryTimelineOutput {
	return o
}

func (o CanaryTimelineOutput) ToOutput(ctx context.Context) pulumix.Output[CanaryTimeline] {
	return pulumix.Output[CanaryTimeline]{
		OutputState: o.OutputState,
	}
}

// Date and time the canary was created.
func (o CanaryTimelineOutput) Created() pulumix.Output[*string] {
	return pulumix.Apply[CanaryTimeline](o, func(v CanaryTimeline) *string { return v.Created })
}

// Date and time the canary was most recently modified.
func (o CanaryTimelineOutput) LastModified() pulumix.Output[*string] {
	return pulumix.Apply[CanaryTimeline](o, func(v CanaryTimeline) *string { return v.LastModified })
}

// Date and time that the canary's most recent run started.
func (o CanaryTimelineOutput) LastStarted() pulumix.Output[*string] {
	return pulumix.Apply[CanaryTimeline](o, func(v CanaryTimeline) *string { return v.LastStarted })
}

// Date and time that the canary's most recent run ended.
func (o CanaryTimelineOutput) LastStopped() pulumix.Output[*string] {
	return pulumix.Apply[CanaryTimeline](o, func(v CanaryTimeline) *string { return v.LastStopped })
}

type CanaryVpcConfig struct {
	// IDs of the security groups for this canary.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// IDs of the subnets where this canary is to run.
	SubnetIds []string `pulumi:"subnetIds"`
	// ID of the VPC where this canary is to run.
	VpcId *string `pulumi:"vpcId"`
}

type CanaryVpcConfigArgs struct {
	// IDs of the security groups for this canary.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// IDs of the subnets where this canary is to run.
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
	// ID of the VPC where this canary is to run.
	VpcId pulumix.Input[*string] `pulumi:"vpcId"`
}

func (CanaryVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryVpcConfig)(nil)).Elem()
}

func (i CanaryVpcConfigArgs) ToCanaryVpcConfigOutput() CanaryVpcConfigOutput {
	return i.ToCanaryVpcConfigOutputWithContext(context.Background())
}

func (i CanaryVpcConfigArgs) ToCanaryVpcConfigOutputWithContext(ctx context.Context) CanaryVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryVpcConfigOutput)
}

func (i *CanaryVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*CanaryVpcConfigArgs] {
	return pulumix.Val(i)
}

type CanaryVpcConfigOutput struct{ *pulumi.OutputState }

func (CanaryVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryVpcConfig)(nil)).Elem()
}

func (o CanaryVpcConfigOutput) ToCanaryVpcConfigOutput() CanaryVpcConfigOutput {
	return o
}

func (o CanaryVpcConfigOutput) ToCanaryVpcConfigOutputWithContext(ctx context.Context) CanaryVpcConfigOutput {
	return o
}

func (o CanaryVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[CanaryVpcConfig] {
	return pulumix.Output[CanaryVpcConfig]{
		OutputState: o.OutputState,
	}
}

// IDs of the security groups for this canary.
func (o CanaryVpcConfigOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CanaryVpcConfig](o, func(v CanaryVpcConfig) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// IDs of the subnets where this canary is to run.
func (o CanaryVpcConfigOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CanaryVpcConfig](o, func(v CanaryVpcConfig) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ID of the VPC where this canary is to run.
func (o CanaryVpcConfigOutput) VpcId() pulumix.Output[*string] {
	return pulumix.Apply[CanaryVpcConfig](o, func(v CanaryVpcConfig) *string { return v.VpcId })
}

func init() {
	pulumi.RegisterOutputType(CanaryArtifactConfigOutput{})
	pulumi.RegisterOutputType(CanaryArtifactConfigS3EncryptionOutput{})
	pulumi.RegisterOutputType(CanaryRunConfigOutput{})
	pulumi.RegisterOutputType(CanaryScheduleOutput{})
	pulumi.RegisterOutputType(CanaryTimelineOutput{})
	pulumi.RegisterOutputType(CanaryVpcConfigOutput{})
}
