// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Amazon Managed Grafana workspace API Key resource.
type WorkspaceApiKey struct {
	pulumi.CustomResourceState

	// The key token in JSON format. Use this value as a bearer token to authenticate HTTP requests to the workspace.
	Key pulumix.Output[string] `pulumi:"key"`
	// Specifies the name of the API key. Key names must be unique to the workspace.
	KeyName pulumix.Output[string] `pulumi:"keyName"`
	// Specifies the permission level of the API key. Valid values are `VIEWER`, `EDITOR`, or `ADMIN`.
	KeyRole pulumix.Output[string] `pulumi:"keyRole"`
	// Specifies the time in seconds until the API key expires. Keys can be valid for up to 30 days.
	SecondsToLive pulumix.Output[int] `pulumi:"secondsToLive"`
	// The ID of the workspace that the API key is valid for.
	WorkspaceId pulumix.Output[string] `pulumi:"workspaceId"`
}

// NewWorkspaceApiKey registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceApiKey(ctx *pulumi.Context,
	name string, args *WorkspaceApiKeyArgs, opts ...pulumi.ResourceOption) (*WorkspaceApiKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyName == nil {
		return nil, errors.New("invalid value for required argument 'KeyName'")
	}
	if args.KeyRole == nil {
		return nil, errors.New("invalid value for required argument 'KeyRole'")
	}
	if args.SecondsToLive == nil {
		return nil, errors.New("invalid value for required argument 'SecondsToLive'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceApiKey
	err := ctx.RegisterResource("aws:grafana/workspaceApiKey:WorkspaceApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceApiKey gets an existing WorkspaceApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceApiKeyState, opts ...pulumi.ResourceOption) (*WorkspaceApiKey, error) {
	var resource WorkspaceApiKey
	err := ctx.ReadResource("aws:grafana/workspaceApiKey:WorkspaceApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceApiKey resources.
type workspaceApiKeyState struct {
	// The key token in JSON format. Use this value as a bearer token to authenticate HTTP requests to the workspace.
	Key *string `pulumi:"key"`
	// Specifies the name of the API key. Key names must be unique to the workspace.
	KeyName *string `pulumi:"keyName"`
	// Specifies the permission level of the API key. Valid values are `VIEWER`, `EDITOR`, or `ADMIN`.
	KeyRole *string `pulumi:"keyRole"`
	// Specifies the time in seconds until the API key expires. Keys can be valid for up to 30 days.
	SecondsToLive *int `pulumi:"secondsToLive"`
	// The ID of the workspace that the API key is valid for.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type WorkspaceApiKeyState struct {
	// The key token in JSON format. Use this value as a bearer token to authenticate HTTP requests to the workspace.
	Key pulumix.Input[*string]
	// Specifies the name of the API key. Key names must be unique to the workspace.
	KeyName pulumix.Input[*string]
	// Specifies the permission level of the API key. Valid values are `VIEWER`, `EDITOR`, or `ADMIN`.
	KeyRole pulumix.Input[*string]
	// Specifies the time in seconds until the API key expires. Keys can be valid for up to 30 days.
	SecondsToLive pulumix.Input[*int]
	// The ID of the workspace that the API key is valid for.
	WorkspaceId pulumix.Input[*string]
}

func (WorkspaceApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceApiKeyState)(nil)).Elem()
}

type workspaceApiKeyArgs struct {
	// Specifies the name of the API key. Key names must be unique to the workspace.
	KeyName string `pulumi:"keyName"`
	// Specifies the permission level of the API key. Valid values are `VIEWER`, `EDITOR`, or `ADMIN`.
	KeyRole string `pulumi:"keyRole"`
	// Specifies the time in seconds until the API key expires. Keys can be valid for up to 30 days.
	SecondsToLive int `pulumi:"secondsToLive"`
	// The ID of the workspace that the API key is valid for.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceApiKey resource.
type WorkspaceApiKeyArgs struct {
	// Specifies the name of the API key. Key names must be unique to the workspace.
	KeyName pulumix.Input[string]
	// Specifies the permission level of the API key. Valid values are `VIEWER`, `EDITOR`, or `ADMIN`.
	KeyRole pulumix.Input[string]
	// Specifies the time in seconds until the API key expires. Keys can be valid for up to 30 days.
	SecondsToLive pulumix.Input[int]
	// The ID of the workspace that the API key is valid for.
	WorkspaceId pulumix.Input[string]
}

func (WorkspaceApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceApiKeyArgs)(nil)).Elem()
}

type WorkspaceApiKeyOutput struct{ *pulumi.OutputState }

func (WorkspaceApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceApiKey)(nil)).Elem()
}

func (o WorkspaceApiKeyOutput) ToWorkspaceApiKeyOutput() WorkspaceApiKeyOutput {
	return o
}

func (o WorkspaceApiKeyOutput) ToWorkspaceApiKeyOutputWithContext(ctx context.Context) WorkspaceApiKeyOutput {
	return o
}

func (o WorkspaceApiKeyOutput) ToOutput(ctx context.Context) pulumix.Output[WorkspaceApiKey] {
	return pulumix.Output[WorkspaceApiKey]{
		OutputState: o.OutputState,
	}
}

// The key token in JSON format. Use this value as a bearer token to authenticate HTTP requests to the workspace.
func (o WorkspaceApiKeyOutput) Key() pulumix.Output[string] {
	value := pulumix.Apply[WorkspaceApiKey](o, func(v WorkspaceApiKey) pulumix.Output[string] { return v.Key })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the name of the API key. Key names must be unique to the workspace.
func (o WorkspaceApiKeyOutput) KeyName() pulumix.Output[string] {
	value := pulumix.Apply[WorkspaceApiKey](o, func(v WorkspaceApiKey) pulumix.Output[string] { return v.KeyName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the permission level of the API key. Valid values are `VIEWER`, `EDITOR`, or `ADMIN`.
func (o WorkspaceApiKeyOutput) KeyRole() pulumix.Output[string] {
	value := pulumix.Apply[WorkspaceApiKey](o, func(v WorkspaceApiKey) pulumix.Output[string] { return v.KeyRole })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the time in seconds until the API key expires. Keys can be valid for up to 30 days.
func (o WorkspaceApiKeyOutput) SecondsToLive() pulumix.Output[int] {
	value := pulumix.Apply[WorkspaceApiKey](o, func(v WorkspaceApiKey) pulumix.Output[int] { return v.SecondsToLive })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The ID of the workspace that the API key is valid for.
func (o WorkspaceApiKeyOutput) WorkspaceId() pulumix.Output[string] {
	value := pulumix.Apply[WorkspaceApiKey](o, func(v WorkspaceApiKey) pulumix.Output[string] { return v.WorkspaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(WorkspaceApiKeyOutput{})
}
