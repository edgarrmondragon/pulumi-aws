// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Attaches a load balancer policy to an ELB Listener.
type ListenerPolicy struct {
	pulumi.CustomResourceState

	// The load balancer to attach the policy to.
	LoadBalancerName pulumix.Output[string] `pulumi:"loadBalancerName"`
	// The load balancer listener port to apply the policy to.
	LoadBalancerPort pulumix.Output[int] `pulumi:"loadBalancerPort"`
	// List of Policy Names to apply to the backend server.
	PolicyNames pulumix.ArrayOutput[string] `pulumi:"policyNames"`
	// Map of arbitrary keys and values that, when changed, will trigger an update.
	Triggers pulumix.MapOutput[string] `pulumi:"triggers"`
}

// NewListenerPolicy registers a new resource with the given unique name, arguments, and options.
func NewListenerPolicy(ctx *pulumi.Context,
	name string, args *ListenerPolicyArgs, opts ...pulumi.ResourceOption) (*ListenerPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadBalancerName == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerName'")
	}
	if args.LoadBalancerPort == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerPort'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:elasticloadbalancing/listenerPolicy:ListenerPolicy"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ListenerPolicy
	err := ctx.RegisterResource("aws:elb/listenerPolicy:ListenerPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListenerPolicy gets an existing ListenerPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListenerPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerPolicyState, opts ...pulumi.ResourceOption) (*ListenerPolicy, error) {
	var resource ListenerPolicy
	err := ctx.ReadResource("aws:elb/listenerPolicy:ListenerPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ListenerPolicy resources.
type listenerPolicyState struct {
	// The load balancer to attach the policy to.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// The load balancer listener port to apply the policy to.
	LoadBalancerPort *int `pulumi:"loadBalancerPort"`
	// List of Policy Names to apply to the backend server.
	PolicyNames []string `pulumi:"policyNames"`
	// Map of arbitrary keys and values that, when changed, will trigger an update.
	Triggers map[string]string `pulumi:"triggers"`
}

type ListenerPolicyState struct {
	// The load balancer to attach the policy to.
	LoadBalancerName pulumix.Input[*string]
	// The load balancer listener port to apply the policy to.
	LoadBalancerPort pulumix.Input[*int]
	// List of Policy Names to apply to the backend server.
	PolicyNames pulumix.Input[[]string]
	// Map of arbitrary keys and values that, when changed, will trigger an update.
	Triggers pulumix.Input[map[string]string]
}

func (ListenerPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerPolicyState)(nil)).Elem()
}

type listenerPolicyArgs struct {
	// The load balancer to attach the policy to.
	LoadBalancerName string `pulumi:"loadBalancerName"`
	// The load balancer listener port to apply the policy to.
	LoadBalancerPort int `pulumi:"loadBalancerPort"`
	// List of Policy Names to apply to the backend server.
	PolicyNames []string `pulumi:"policyNames"`
	// Map of arbitrary keys and values that, when changed, will trigger an update.
	Triggers map[string]string `pulumi:"triggers"`
}

// The set of arguments for constructing a ListenerPolicy resource.
type ListenerPolicyArgs struct {
	// The load balancer to attach the policy to.
	LoadBalancerName pulumix.Input[string]
	// The load balancer listener port to apply the policy to.
	LoadBalancerPort pulumix.Input[int]
	// List of Policy Names to apply to the backend server.
	PolicyNames pulumix.Input[[]string]
	// Map of arbitrary keys and values that, when changed, will trigger an update.
	Triggers pulumix.Input[map[string]string]
}

func (ListenerPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerPolicyArgs)(nil)).Elem()
}

type ListenerPolicyOutput struct{ *pulumi.OutputState }

func (ListenerPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerPolicy)(nil)).Elem()
}

func (o ListenerPolicyOutput) ToListenerPolicyOutput() ListenerPolicyOutput {
	return o
}

func (o ListenerPolicyOutput) ToListenerPolicyOutputWithContext(ctx context.Context) ListenerPolicyOutput {
	return o
}

func (o ListenerPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerPolicy] {
	return pulumix.Output[ListenerPolicy]{
		OutputState: o.OutputState,
	}
}

// The load balancer to attach the policy to.
func (o ListenerPolicyOutput) LoadBalancerName() pulumix.Output[string] {
	value := pulumix.Apply[ListenerPolicy](o, func(v ListenerPolicy) pulumix.Output[string] { return v.LoadBalancerName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The load balancer listener port to apply the policy to.
func (o ListenerPolicyOutput) LoadBalancerPort() pulumix.Output[int] {
	value := pulumix.Apply[ListenerPolicy](o, func(v ListenerPolicy) pulumix.Output[int] { return v.LoadBalancerPort })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// List of Policy Names to apply to the backend server.
func (o ListenerPolicyOutput) PolicyNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ListenerPolicy](o, func(v ListenerPolicy) pulumix.ArrayOutput[string] { return v.PolicyNames })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of arbitrary keys and values that, when changed, will trigger an update.
func (o ListenerPolicyOutput) Triggers() pulumix.MapOutput[string] {
	value := pulumix.Apply[ListenerPolicy](o, func(v ListenerPolicy) pulumix.MapOutput[string] { return v.Triggers })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ListenerPolicyOutput{})
}
