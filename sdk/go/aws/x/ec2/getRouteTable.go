// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `ec2.RouteTable` provides details about a specific Route Table.
//
// This resource can prove useful when a module accepts a Subnet ID as an input variable and needs to, for example, add a route in the Route Table.
func LookupRouteTable(ctx *pulumi.Context, args *LookupRouteTableArgs, opts ...pulumi.InvokeOption) (*LookupRouteTableResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRouteTableResult
	err := ctx.Invoke("aws:ec2/getRouteTable:getRouteTable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRouteTable.
type LookupRouteTableArgs struct {
	// Configuration block. Detailed below.
	Filters []GetRouteTableFilter `pulumi:"filters"`
	// ID of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
	GatewayId *string `pulumi:"gatewayId"`
	// ID of the specific Route Table to retrieve.
	RouteTableId *string `pulumi:"routeTableId"`
	// ID of a Subnet which is connected to the Route Table (not exported if not passed as a parameter).
	SubnetId *string `pulumi:"subnetId"`
	// Map of tags, each pair of which must exactly match a pair on the desired Route Table.
	Tags map[string]string `pulumi:"tags"`
	// ID of the VPC that the desired Route Table belongs to.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getRouteTable.
type LookupRouteTableResult struct {
	// ARN of the route table.
	Arn string `pulumi:"arn"`
	// List of associations with attributes detailed below.
	Associations []GetRouteTableAssociationType `pulumi:"associations"`
	Filters      []GetRouteTableFilter          `pulumi:"filters"`
	// Gateway ID. Only set when associated with an Internet Gateway or Virtual Private Gateway.
	GatewayId string `pulumi:"gatewayId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ID of the AWS account that owns the route table.
	OwnerId string `pulumi:"ownerId"`
	// Route Table ID.
	RouteTableId string `pulumi:"routeTableId"`
	// List of routes with attributes detailed below.
	Routes []GetRouteTableRoute `pulumi:"routes"`
	// Subnet ID. Only set when associated with a subnet.
	SubnetId string            `pulumi:"subnetId"`
	Tags     map[string]string `pulumi:"tags"`
	VpcId    string            `pulumi:"vpcId"`
}

func LookupRouteTableOutput(ctx *pulumi.Context, args LookupRouteTableOutputArgs, opts ...pulumi.InvokeOption) LookupRouteTableResultOutput {
	outputResult := pulumix.ApplyErr[*LookupRouteTableArgs](args.ToOutput(), func(plainArgs *LookupRouteTableArgs) (*LookupRouteTableResult, error) {
		return LookupRouteTable(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupRouteTableResultOutput, *LookupRouteTableResult](outputResult)
}

// A collection of arguments for invoking getRouteTable.
type LookupRouteTableOutputArgs struct {
	// Configuration block. Detailed below.
	Filters pulumix.Input[[]*GetRouteTableFilterArgs] `pulumi:"filters"`
	// ID of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
	GatewayId pulumix.Input[*string] `pulumi:"gatewayId"`
	// ID of the specific Route Table to retrieve.
	RouteTableId pulumix.Input[*string] `pulumi:"routeTableId"`
	// ID of a Subnet which is connected to the Route Table (not exported if not passed as a parameter).
	SubnetId pulumix.Input[*string] `pulumi:"subnetId"`
	// Map of tags, each pair of which must exactly match a pair on the desired Route Table.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// ID of the VPC that the desired Route Table belongs to.
	VpcId pulumix.Input[*string] `pulumi:"vpcId"`
}

func (args LookupRouteTableOutputArgs) ToOutput() pulumix.Output[*LookupRouteTableArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.GatewayId.ToOutput(context.Background()).AsAny(),
		args.RouteTableId.ToOutput(context.Background()).AsAny(),
		args.SubnetId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.VpcId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupRouteTableArgs {
		return &LookupRouteTableArgs{
			Filters:      resolvedArgs[0].([]GetRouteTableFilter),
			GatewayId:    resolvedArgs[1].(*string),
			RouteTableId: resolvedArgs[2].(*string),
			SubnetId:     resolvedArgs[3].(*string),
			Tags:         resolvedArgs[4].(map[string]string),
			VpcId:        resolvedArgs[5].(*string),
		}
	})
}

type LookupRouteTableResultOutput struct{ *pulumi.OutputState }

func (LookupRouteTableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteTableResult)(nil)).Elem()
}

func (o LookupRouteTableResultOutput) ToOutput(context.Context) pulumix.Output[*LookupRouteTableResult] {
	return pulumix.Output[*LookupRouteTableResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupRouteTableResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) string { return v.Arn })
}

func (o LookupRouteTableResultOutput) Associations() pulumix.GArrayOutput[GetRouteTableAssociationType, GetRouteTableAssociationTypeOutput] {
	value := pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) []GetRouteTableAssociationType { return v.Associations })
	return pulumix.GArrayOutput[GetRouteTableAssociationType, GetRouteTableAssociationTypeOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupRouteTableResultOutput) Filters() pulumix.GArrayOutput[GetRouteTableFilter, GetRouteTableFilterOutput] {
	value := pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) []GetRouteTableFilter { return v.Filters })
	return pulumix.GArrayOutput[GetRouteTableFilter, GetRouteTableFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupRouteTableResultOutput) GatewayId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) string { return v.GatewayId })
}

func (o LookupRouteTableResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) string { return v.Id })
}

func (o LookupRouteTableResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) string { return v.OwnerId })
}

func (o LookupRouteTableResultOutput) RouteTableId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) string { return v.RouteTableId })
}

func (o LookupRouteTableResultOutput) Routes() pulumix.GArrayOutput[GetRouteTableRoute, GetRouteTableRouteOutput] {
	value := pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) []GetRouteTableRoute { return v.Routes })
	return pulumix.GArrayOutput[GetRouteTableRoute, GetRouteTableRouteOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupRouteTableResultOutput) SubnetId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) string { return v.SubnetId })
}

func (o LookupRouteTableResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupRouteTableResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) string { return v.VpcId })
}
