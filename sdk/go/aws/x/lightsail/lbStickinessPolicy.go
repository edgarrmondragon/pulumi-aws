// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Configures Session Stickiness for a Lightsail Load Balancer.
type LbStickinessPolicy struct {
	pulumi.CustomResourceState

	// The cookie duration in seconds. This determines the length of the session stickiness.
	CookieDuration pulumix.Output[int] `pulumi:"cookieDuration"`
	// The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
	Enabled pulumix.Output[bool] `pulumi:"enabled"`
	// The name of the load balancer to which you want to enable session stickiness.
	LbName pulumix.Output[string] `pulumi:"lbName"`
}

// NewLbStickinessPolicy registers a new resource with the given unique name, arguments, and options.
func NewLbStickinessPolicy(ctx *pulumi.Context,
	name string, args *LbStickinessPolicyArgs, opts ...pulumi.ResourceOption) (*LbStickinessPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CookieDuration == nil {
		return nil, errors.New("invalid value for required argument 'CookieDuration'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.LbName == nil {
		return nil, errors.New("invalid value for required argument 'LbName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LbStickinessPolicy
	err := ctx.RegisterResource("aws:lightsail/lbStickinessPolicy:LbStickinessPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbStickinessPolicy gets an existing LbStickinessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbStickinessPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbStickinessPolicyState, opts ...pulumi.ResourceOption) (*LbStickinessPolicy, error) {
	var resource LbStickinessPolicy
	err := ctx.ReadResource("aws:lightsail/lbStickinessPolicy:LbStickinessPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbStickinessPolicy resources.
type lbStickinessPolicyState struct {
	// The cookie duration in seconds. This determines the length of the session stickiness.
	CookieDuration *int `pulumi:"cookieDuration"`
	// The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
	Enabled *bool `pulumi:"enabled"`
	// The name of the load balancer to which you want to enable session stickiness.
	LbName *string `pulumi:"lbName"`
}

type LbStickinessPolicyState struct {
	// The cookie duration in seconds. This determines the length of the session stickiness.
	CookieDuration pulumix.Input[*int]
	// The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
	Enabled pulumix.Input[*bool]
	// The name of the load balancer to which you want to enable session stickiness.
	LbName pulumix.Input[*string]
}

func (LbStickinessPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbStickinessPolicyState)(nil)).Elem()
}

type lbStickinessPolicyArgs struct {
	// The cookie duration in seconds. This determines the length of the session stickiness.
	CookieDuration int `pulumi:"cookieDuration"`
	// The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
	Enabled bool `pulumi:"enabled"`
	// The name of the load balancer to which you want to enable session stickiness.
	LbName string `pulumi:"lbName"`
}

// The set of arguments for constructing a LbStickinessPolicy resource.
type LbStickinessPolicyArgs struct {
	// The cookie duration in seconds. This determines the length of the session stickiness.
	CookieDuration pulumix.Input[int]
	// The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
	Enabled pulumix.Input[bool]
	// The name of the load balancer to which you want to enable session stickiness.
	LbName pulumix.Input[string]
}

func (LbStickinessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbStickinessPolicyArgs)(nil)).Elem()
}

type LbStickinessPolicyOutput struct{ *pulumi.OutputState }

func (LbStickinessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbStickinessPolicy)(nil)).Elem()
}

func (o LbStickinessPolicyOutput) ToLbStickinessPolicyOutput() LbStickinessPolicyOutput {
	return o
}

func (o LbStickinessPolicyOutput) ToLbStickinessPolicyOutputWithContext(ctx context.Context) LbStickinessPolicyOutput {
	return o
}

func (o LbStickinessPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[LbStickinessPolicy] {
	return pulumix.Output[LbStickinessPolicy]{
		OutputState: o.OutputState,
	}
}

// The cookie duration in seconds. This determines the length of the session stickiness.
func (o LbStickinessPolicyOutput) CookieDuration() pulumix.Output[int] {
	value := pulumix.Apply[LbStickinessPolicy](o, func(v LbStickinessPolicy) pulumix.Output[int] { return v.CookieDuration })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
func (o LbStickinessPolicyOutput) Enabled() pulumix.Output[bool] {
	value := pulumix.Apply[LbStickinessPolicy](o, func(v LbStickinessPolicy) pulumix.Output[bool] { return v.Enabled })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The name of the load balancer to which you want to enable session stickiness.
func (o LbStickinessPolicyOutput) LbName() pulumix.Output[string] {
	value := pulumix.Apply[LbStickinessPolicy](o, func(v LbStickinessPolicy) pulumix.Output[string] { return v.LbName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LbStickinessPolicyOutput{})
}
