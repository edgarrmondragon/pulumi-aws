// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elastictranscoder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type PipelineContentConfig struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
	Bucket *string `pulumi:"bucket"`
	// The Amazon S3 storage class, `Standard` or `ReducedRedundancy`, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
	StorageClass *string `pulumi:"storageClass"`
}

type PipelineContentConfigArgs struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
	Bucket pulumix.Input[*string] `pulumi:"bucket"`
	// The Amazon S3 storage class, `Standard` or `ReducedRedundancy`, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
	StorageClass pulumix.Input[*string] `pulumi:"storageClass"`
}

func (PipelineContentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfig)(nil)).Elem()
}

func (i PipelineContentConfigArgs) ToPipelineContentConfigOutput() PipelineContentConfigOutput {
	return i.ToPipelineContentConfigOutputWithContext(context.Background())
}

func (i PipelineContentConfigArgs) ToPipelineContentConfigOutputWithContext(ctx context.Context) PipelineContentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineContentConfigOutput)
}

func (i *PipelineContentConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*PipelineContentConfigArgs] {
	return pulumix.Val(i)
}

type PipelineContentConfigOutput struct{ *pulumi.OutputState }

func (PipelineContentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfig)(nil)).Elem()
}

func (o PipelineContentConfigOutput) ToPipelineContentConfigOutput() PipelineContentConfigOutput {
	return o
}

func (o PipelineContentConfigOutput) ToPipelineContentConfigOutputWithContext(ctx context.Context) PipelineContentConfigOutput {
	return o
}

func (o PipelineContentConfigOutput) ToOutput(ctx context.Context) pulumix.Output[PipelineContentConfig] {
	return pulumix.Output[PipelineContentConfig]{
		OutputState: o.OutputState,
	}
}

// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
func (o PipelineContentConfigOutput) Bucket() pulumix.Output[*string] {
	return pulumix.Apply[PipelineContentConfig](o, func(v PipelineContentConfig) *string { return v.Bucket })
}

// The Amazon S3 storage class, `Standard` or `ReducedRedundancy`, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
func (o PipelineContentConfigOutput) StorageClass() pulumix.Output[*string] {
	return pulumix.Apply[PipelineContentConfig](o, func(v PipelineContentConfig) *string { return v.StorageClass })
}

type PipelineContentConfigPermission struct {
	// The permission that you want to give to the AWS user that you specified in `content_config_permissions.grantee`. Valid values are `Read`, `ReadAcp`, `WriteAcp` or `FullControl`.
	Accesses []string `pulumi:"accesses"`
	// The AWS user or group that you want to have access to transcoded files and playlists.
	Grantee *string `pulumi:"grantee"`
	// Specify the type of value that appears in the `content_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
	GranteeType *string `pulumi:"granteeType"`
}

type PipelineContentConfigPermissionArgs struct {
	// The permission that you want to give to the AWS user that you specified in `content_config_permissions.grantee`. Valid values are `Read`, `ReadAcp`, `WriteAcp` or `FullControl`.
	Accesses pulumix.Input[[]string] `pulumi:"accesses"`
	// The AWS user or group that you want to have access to transcoded files and playlists.
	Grantee pulumix.Input[*string] `pulumi:"grantee"`
	// Specify the type of value that appears in the `content_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
	GranteeType pulumix.Input[*string] `pulumi:"granteeType"`
}

func (PipelineContentConfigPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfigPermission)(nil)).Elem()
}

func (i PipelineContentConfigPermissionArgs) ToPipelineContentConfigPermissionOutput() PipelineContentConfigPermissionOutput {
	return i.ToPipelineContentConfigPermissionOutputWithContext(context.Background())
}

func (i PipelineContentConfigPermissionArgs) ToPipelineContentConfigPermissionOutputWithContext(ctx context.Context) PipelineContentConfigPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineContentConfigPermissionOutput)
}

func (i *PipelineContentConfigPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*PipelineContentConfigPermissionArgs] {
	return pulumix.Val(i)
}

type PipelineContentConfigPermissionOutput struct{ *pulumi.OutputState }

func (PipelineContentConfigPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineContentConfigPermission)(nil)).Elem()
}

func (o PipelineContentConfigPermissionOutput) ToPipelineContentConfigPermissionOutput() PipelineContentConfigPermissionOutput {
	return o
}

func (o PipelineContentConfigPermissionOutput) ToPipelineContentConfigPermissionOutputWithContext(ctx context.Context) PipelineContentConfigPermissionOutput {
	return o
}

func (o PipelineContentConfigPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[PipelineContentConfigPermission] {
	return pulumix.Output[PipelineContentConfigPermission]{
		OutputState: o.OutputState,
	}
}

// The permission that you want to give to the AWS user that you specified in `content_config_permissions.grantee`. Valid values are `Read`, `ReadAcp`, `WriteAcp` or `FullControl`.
func (o PipelineContentConfigPermissionOutput) Accesses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PipelineContentConfigPermission](o, func(v PipelineContentConfigPermission) []string { return v.Accesses })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The AWS user or group that you want to have access to transcoded files and playlists.
func (o PipelineContentConfigPermissionOutput) Grantee() pulumix.Output[*string] {
	return pulumix.Apply[PipelineContentConfigPermission](o, func(v PipelineContentConfigPermission) *string { return v.Grantee })
}

// Specify the type of value that appears in the `content_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
func (o PipelineContentConfigPermissionOutput) GranteeType() pulumix.Output[*string] {
	return pulumix.Apply[PipelineContentConfigPermission](o, func(v PipelineContentConfigPermission) *string { return v.GranteeType })
}

type PipelineNotifications struct {
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
	Completed *string `pulumi:"completed"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
	Error *string `pulumi:"error"`
	// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
	Progressing *string `pulumi:"progressing"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
	//
	// The `thumbnailConfig` object specifies information about the Amazon S3 bucket in
	// which you want Elastic Transcoder to save thumbnail files: which bucket to use,
	// which users you want to have access to the files, the type of access you want
	// users to have, and the storage class that you want to assign to the files. If
	// you specify values for `contentConfig`, you must also specify values for
	// `thumbnailConfig` even if you don't want to create thumbnails. (You control
	// whether to create thumbnails when you create a job. For more information, see
	// ThumbnailPattern in the topic Create Job.) If you specify values for
	// `contentConfig` and `thumbnailConfig`, omit the OutputBucket object.
	Warning *string `pulumi:"warning"`
}

type PipelineNotificationsArgs struct {
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
	Completed pulumix.Input[*string] `pulumi:"completed"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
	Error pulumix.Input[*string] `pulumi:"error"`
	// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
	Progressing pulumix.Input[*string] `pulumi:"progressing"`
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
	//
	// The `thumbnailConfig` object specifies information about the Amazon S3 bucket in
	// which you want Elastic Transcoder to save thumbnail files: which bucket to use,
	// which users you want to have access to the files, the type of access you want
	// users to have, and the storage class that you want to assign to the files. If
	// you specify values for `contentConfig`, you must also specify values for
	// `thumbnailConfig` even if you don't want to create thumbnails. (You control
	// whether to create thumbnails when you create a job. For more information, see
	// ThumbnailPattern in the topic Create Job.) If you specify values for
	// `contentConfig` and `thumbnailConfig`, omit the OutputBucket object.
	Warning pulumix.Input[*string] `pulumi:"warning"`
}

func (PipelineNotificationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineNotifications)(nil)).Elem()
}

func (i PipelineNotificationsArgs) ToPipelineNotificationsOutput() PipelineNotificationsOutput {
	return i.ToPipelineNotificationsOutputWithContext(context.Background())
}

func (i PipelineNotificationsArgs) ToPipelineNotificationsOutputWithContext(ctx context.Context) PipelineNotificationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineNotificationsOutput)
}

func (i *PipelineNotificationsArgs) ToOutput(ctx context.Context) pulumix.Output[*PipelineNotificationsArgs] {
	return pulumix.Val(i)
}

type PipelineNotificationsOutput struct{ *pulumi.OutputState }

func (PipelineNotificationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineNotifications)(nil)).Elem()
}

func (o PipelineNotificationsOutput) ToPipelineNotificationsOutput() PipelineNotificationsOutput {
	return o
}

func (o PipelineNotificationsOutput) ToPipelineNotificationsOutputWithContext(ctx context.Context) PipelineNotificationsOutput {
	return o
}

func (o PipelineNotificationsOutput) ToOutput(ctx context.Context) pulumix.Output[PipelineNotifications] {
	return pulumix.Output[PipelineNotifications]{
		OutputState: o.OutputState,
	}
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
func (o PipelineNotificationsOutput) Completed() pulumix.Output[*string] {
	return pulumix.Apply[PipelineNotifications](o, func(v PipelineNotifications) *string { return v.Completed })
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
func (o PipelineNotificationsOutput) Error() pulumix.Output[*string] {
	return pulumix.Apply[PipelineNotifications](o, func(v PipelineNotifications) *string { return v.Error })
}

// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
func (o PipelineNotificationsOutput) Progressing() pulumix.Output[*string] {
	return pulumix.Apply[PipelineNotifications](o, func(v PipelineNotifications) *string { return v.Progressing })
}

// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
//
// The `thumbnailConfig` object specifies information about the Amazon S3 bucket in
// which you want Elastic Transcoder to save thumbnail files: which bucket to use,
// which users you want to have access to the files, the type of access you want
// users to have, and the storage class that you want to assign to the files. If
// you specify values for `contentConfig`, you must also specify values for
// `thumbnailConfig` even if you don't want to create thumbnails. (You control
// whether to create thumbnails when you create a job. For more information, see
// ThumbnailPattern in the topic Create Job.) If you specify values for
// `contentConfig` and `thumbnailConfig`, omit the OutputBucket object.
func (o PipelineNotificationsOutput) Warning() pulumix.Output[*string] {
	return pulumix.Apply[PipelineNotifications](o, func(v PipelineNotifications) *string { return v.Warning })
}

type PipelineThumbnailConfig struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
	Bucket *string `pulumi:"bucket"`
	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
	StorageClass *string `pulumi:"storageClass"`
}

type PipelineThumbnailConfigArgs struct {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
	Bucket pulumix.Input[*string] `pulumi:"bucket"`
	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
	StorageClass pulumix.Input[*string] `pulumi:"storageClass"`
}

func (PipelineThumbnailConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfig)(nil)).Elem()
}

func (i PipelineThumbnailConfigArgs) ToPipelineThumbnailConfigOutput() PipelineThumbnailConfigOutput {
	return i.ToPipelineThumbnailConfigOutputWithContext(context.Background())
}

func (i PipelineThumbnailConfigArgs) ToPipelineThumbnailConfigOutputWithContext(ctx context.Context) PipelineThumbnailConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineThumbnailConfigOutput)
}

func (i *PipelineThumbnailConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*PipelineThumbnailConfigArgs] {
	return pulumix.Val(i)
}

type PipelineThumbnailConfigOutput struct{ *pulumi.OutputState }

func (PipelineThumbnailConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfig)(nil)).Elem()
}

func (o PipelineThumbnailConfigOutput) ToPipelineThumbnailConfigOutput() PipelineThumbnailConfigOutput {
	return o
}

func (o PipelineThumbnailConfigOutput) ToPipelineThumbnailConfigOutputWithContext(ctx context.Context) PipelineThumbnailConfigOutput {
	return o
}

func (o PipelineThumbnailConfigOutput) ToOutput(ctx context.Context) pulumix.Output[PipelineThumbnailConfig] {
	return pulumix.Output[PipelineThumbnailConfig]{
		OutputState: o.OutputState,
	}
}

// The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
func (o PipelineThumbnailConfigOutput) Bucket() pulumix.Output[*string] {
	return pulumix.Apply[PipelineThumbnailConfig](o, func(v PipelineThumbnailConfig) *string { return v.Bucket })
}

// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
func (o PipelineThumbnailConfigOutput) StorageClass() pulumix.Output[*string] {
	return pulumix.Apply[PipelineThumbnailConfig](o, func(v PipelineThumbnailConfig) *string { return v.StorageClass })
}

type PipelineThumbnailConfigPermission struct {
	// The permission that you want to give to the AWS user that you specified in `thumbnail_config_permissions.grantee`. Valid values are `Read`, `ReadAcp`, `WriteAcp` or `FullControl`.
	Accesses []string `pulumi:"accesses"`
	// The AWS user or group that you want to have access to thumbnail files.
	Grantee *string `pulumi:"grantee"`
	// Specify the type of value that appears in the `thumbnail_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
	GranteeType *string `pulumi:"granteeType"`
}

type PipelineThumbnailConfigPermissionArgs struct {
	// The permission that you want to give to the AWS user that you specified in `thumbnail_config_permissions.grantee`. Valid values are `Read`, `ReadAcp`, `WriteAcp` or `FullControl`.
	Accesses pulumix.Input[[]string] `pulumi:"accesses"`
	// The AWS user or group that you want to have access to thumbnail files.
	Grantee pulumix.Input[*string] `pulumi:"grantee"`
	// Specify the type of value that appears in the `thumbnail_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
	GranteeType pulumix.Input[*string] `pulumi:"granteeType"`
}

func (PipelineThumbnailConfigPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfigPermission)(nil)).Elem()
}

func (i PipelineThumbnailConfigPermissionArgs) ToPipelineThumbnailConfigPermissionOutput() PipelineThumbnailConfigPermissionOutput {
	return i.ToPipelineThumbnailConfigPermissionOutputWithContext(context.Background())
}

func (i PipelineThumbnailConfigPermissionArgs) ToPipelineThumbnailConfigPermissionOutputWithContext(ctx context.Context) PipelineThumbnailConfigPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineThumbnailConfigPermissionOutput)
}

func (i *PipelineThumbnailConfigPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*PipelineThumbnailConfigPermissionArgs] {
	return pulumix.Val(i)
}

type PipelineThumbnailConfigPermissionOutput struct{ *pulumi.OutputState }

func (PipelineThumbnailConfigPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineThumbnailConfigPermission)(nil)).Elem()
}

func (o PipelineThumbnailConfigPermissionOutput) ToPipelineThumbnailConfigPermissionOutput() PipelineThumbnailConfigPermissionOutput {
	return o
}

func (o PipelineThumbnailConfigPermissionOutput) ToPipelineThumbnailConfigPermissionOutputWithContext(ctx context.Context) PipelineThumbnailConfigPermissionOutput {
	return o
}

func (o PipelineThumbnailConfigPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[PipelineThumbnailConfigPermission] {
	return pulumix.Output[PipelineThumbnailConfigPermission]{
		OutputState: o.OutputState,
	}
}

// The permission that you want to give to the AWS user that you specified in `thumbnail_config_permissions.grantee`. Valid values are `Read`, `ReadAcp`, `WriteAcp` or `FullControl`.
func (o PipelineThumbnailConfigPermissionOutput) Accesses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PipelineThumbnailConfigPermission](o, func(v PipelineThumbnailConfigPermission) []string { return v.Accesses })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The AWS user or group that you want to have access to thumbnail files.
func (o PipelineThumbnailConfigPermissionOutput) Grantee() pulumix.Output[*string] {
	return pulumix.Apply[PipelineThumbnailConfigPermission](o, func(v PipelineThumbnailConfigPermission) *string { return v.Grantee })
}

// Specify the type of value that appears in the `thumbnail_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
func (o PipelineThumbnailConfigPermissionOutput) GranteeType() pulumix.Output[*string] {
	return pulumix.Apply[PipelineThumbnailConfigPermission](o, func(v PipelineThumbnailConfigPermission) *string { return v.GranteeType })
}

type PresetAudio struct {
	// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
	AudioPackingMode *string `pulumi:"audioPackingMode"`
	// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
	BitRate *string `pulumi:"bitRate"`
	// The number of audio channels in the output file
	Channels *string `pulumi:"channels"`
	// The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
	Codec *string `pulumi:"codec"`
	// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
	SampleRate *string `pulumi:"sampleRate"`
}

type PresetAudioArgs struct {
	// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
	AudioPackingMode pulumix.Input[*string] `pulumi:"audioPackingMode"`
	// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
	BitRate pulumix.Input[*string] `pulumi:"bitRate"`
	// The number of audio channels in the output file
	Channels pulumix.Input[*string] `pulumi:"channels"`
	// The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
	Codec pulumix.Input[*string] `pulumi:"codec"`
	// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
	SampleRate pulumix.Input[*string] `pulumi:"sampleRate"`
}

func (PresetAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudio)(nil)).Elem()
}

func (i PresetAudioArgs) ToPresetAudioOutput() PresetAudioOutput {
	return i.ToPresetAudioOutputWithContext(context.Background())
}

func (i PresetAudioArgs) ToPresetAudioOutputWithContext(ctx context.Context) PresetAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioOutput)
}

func (i *PresetAudioArgs) ToOutput(ctx context.Context) pulumix.Output[*PresetAudioArgs] {
	return pulumix.Val(i)
}

type PresetAudioOutput struct{ *pulumi.OutputState }

func (PresetAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudio)(nil)).Elem()
}

func (o PresetAudioOutput) ToPresetAudioOutput() PresetAudioOutput {
	return o
}

func (o PresetAudioOutput) ToPresetAudioOutputWithContext(ctx context.Context) PresetAudioOutput {
	return o
}

func (o PresetAudioOutput) ToOutput(ctx context.Context) pulumix.Output[PresetAudio] {
	return pulumix.Output[PresetAudio]{
		OutputState: o.OutputState,
	}
}

// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
func (o PresetAudioOutput) AudioPackingMode() pulumix.Output[*string] {
	return pulumix.Apply[PresetAudio](o, func(v PresetAudio) *string { return v.AudioPackingMode })
}

// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
func (o PresetAudioOutput) BitRate() pulumix.Output[*string] {
	return pulumix.Apply[PresetAudio](o, func(v PresetAudio) *string { return v.BitRate })
}

// The number of audio channels in the output file
func (o PresetAudioOutput) Channels() pulumix.Output[*string] {
	return pulumix.Apply[PresetAudio](o, func(v PresetAudio) *string { return v.Channels })
}

// The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
func (o PresetAudioOutput) Codec() pulumix.Output[*string] {
	return pulumix.Apply[PresetAudio](o, func(v PresetAudio) *string { return v.Codec })
}

// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
func (o PresetAudioOutput) SampleRate() pulumix.Output[*string] {
	return pulumix.Apply[PresetAudio](o, func(v PresetAudio) *string { return v.SampleRate })
}

type PresetAudioCodecOptions struct {
	// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
	BitDepth *string `pulumi:"bitDepth"`
	// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
	BitOrder *string `pulumi:"bitOrder"`
	// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
	Profile *string `pulumi:"profile"`
	// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
	Signed *string `pulumi:"signed"`
}

type PresetAudioCodecOptionsArgs struct {
	// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
	BitDepth pulumix.Input[*string] `pulumi:"bitDepth"`
	// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
	BitOrder pulumix.Input[*string] `pulumi:"bitOrder"`
	// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
	Profile pulumix.Input[*string] `pulumi:"profile"`
	// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
	Signed pulumix.Input[*string] `pulumi:"signed"`
}

func (PresetAudioCodecOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudioCodecOptions)(nil)).Elem()
}

func (i PresetAudioCodecOptionsArgs) ToPresetAudioCodecOptionsOutput() PresetAudioCodecOptionsOutput {
	return i.ToPresetAudioCodecOptionsOutputWithContext(context.Background())
}

func (i PresetAudioCodecOptionsArgs) ToPresetAudioCodecOptionsOutputWithContext(ctx context.Context) PresetAudioCodecOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetAudioCodecOptionsOutput)
}

func (i *PresetAudioCodecOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*PresetAudioCodecOptionsArgs] {
	return pulumix.Val(i)
}

type PresetAudioCodecOptionsOutput struct{ *pulumi.OutputState }

func (PresetAudioCodecOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetAudioCodecOptions)(nil)).Elem()
}

func (o PresetAudioCodecOptionsOutput) ToPresetAudioCodecOptionsOutput() PresetAudioCodecOptionsOutput {
	return o
}

func (o PresetAudioCodecOptionsOutput) ToPresetAudioCodecOptionsOutputWithContext(ctx context.Context) PresetAudioCodecOptionsOutput {
	return o
}

func (o PresetAudioCodecOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[PresetAudioCodecOptions] {
	return pulumix.Output[PresetAudioCodecOptions]{
		OutputState: o.OutputState,
	}
}

// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
func (o PresetAudioCodecOptionsOutput) BitDepth() pulumix.Output[*string] {
	return pulumix.Apply[PresetAudioCodecOptions](o, func(v PresetAudioCodecOptions) *string { return v.BitDepth })
}

// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
func (o PresetAudioCodecOptionsOutput) BitOrder() pulumix.Output[*string] {
	return pulumix.Apply[PresetAudioCodecOptions](o, func(v PresetAudioCodecOptions) *string { return v.BitOrder })
}

// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
func (o PresetAudioCodecOptionsOutput) Profile() pulumix.Output[*string] {
	return pulumix.Apply[PresetAudioCodecOptions](o, func(v PresetAudioCodecOptions) *string { return v.Profile })
}

// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
func (o PresetAudioCodecOptionsOutput) Signed() pulumix.Output[*string] {
	return pulumix.Apply[PresetAudioCodecOptions](o, func(v PresetAudioCodecOptions) *string { return v.Signed })
}

type PresetThumbnails struct {
	// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
	AspectRatio *string `pulumi:"aspectRatio"`
	// The format of thumbnails, if any. Valid formats are jpg and png.
	Format *string `pulumi:"format"`
	// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
	Interval *string `pulumi:"interval"`
	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	MaxHeight *string `pulumi:"maxHeight"`
	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	MaxWidth *string `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
	PaddingPolicy *string `pulumi:"paddingPolicy"`
	// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `maxWidth`, `maxHeight`, `sizingPolicy`, and `paddingPolicy` instead of `resolution` and `aspectRatio`. The two groups of settings are mutually exclusive. Do not use them together)
	Resolution *string `pulumi:"resolution"`
	// A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
	SizingPolicy *string `pulumi:"sizingPolicy"`
}

type PresetThumbnailsArgs struct {
	// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
	AspectRatio pulumix.Input[*string] `pulumi:"aspectRatio"`
	// The format of thumbnails, if any. Valid formats are jpg and png.
	Format pulumix.Input[*string] `pulumi:"format"`
	// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
	Interval pulumix.Input[*string] `pulumi:"interval"`
	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	MaxHeight pulumix.Input[*string] `pulumi:"maxHeight"`
	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	MaxWidth pulumix.Input[*string] `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
	PaddingPolicy pulumix.Input[*string] `pulumi:"paddingPolicy"`
	// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `maxWidth`, `maxHeight`, `sizingPolicy`, and `paddingPolicy` instead of `resolution` and `aspectRatio`. The two groups of settings are mutually exclusive. Do not use them together)
	Resolution pulumix.Input[*string] `pulumi:"resolution"`
	// A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
	SizingPolicy pulumix.Input[*string] `pulumi:"sizingPolicy"`
}

func (PresetThumbnailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetThumbnails)(nil)).Elem()
}

func (i PresetThumbnailsArgs) ToPresetThumbnailsOutput() PresetThumbnailsOutput {
	return i.ToPresetThumbnailsOutputWithContext(context.Background())
}

func (i PresetThumbnailsArgs) ToPresetThumbnailsOutputWithContext(ctx context.Context) PresetThumbnailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetThumbnailsOutput)
}

func (i *PresetThumbnailsArgs) ToOutput(ctx context.Context) pulumix.Output[*PresetThumbnailsArgs] {
	return pulumix.Val(i)
}

type PresetThumbnailsOutput struct{ *pulumi.OutputState }

func (PresetThumbnailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetThumbnails)(nil)).Elem()
}

func (o PresetThumbnailsOutput) ToPresetThumbnailsOutput() PresetThumbnailsOutput {
	return o
}

func (o PresetThumbnailsOutput) ToPresetThumbnailsOutputWithContext(ctx context.Context) PresetThumbnailsOutput {
	return o
}

func (o PresetThumbnailsOutput) ToOutput(ctx context.Context) pulumix.Output[PresetThumbnails] {
	return pulumix.Output[PresetThumbnails]{
		OutputState: o.OutputState,
	}
}

// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
func (o PresetThumbnailsOutput) AspectRatio() pulumix.Output[*string] {
	return pulumix.Apply[PresetThumbnails](o, func(v PresetThumbnails) *string { return v.AspectRatio })
}

// The format of thumbnails, if any. Valid formats are jpg and png.
func (o PresetThumbnailsOutput) Format() pulumix.Output[*string] {
	return pulumix.Apply[PresetThumbnails](o, func(v PresetThumbnails) *string { return v.Format })
}

// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
func (o PresetThumbnailsOutput) Interval() pulumix.Output[*string] {
	return pulumix.Apply[PresetThumbnails](o, func(v PresetThumbnails) *string { return v.Interval })
}

// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
func (o PresetThumbnailsOutput) MaxHeight() pulumix.Output[*string] {
	return pulumix.Apply[PresetThumbnails](o, func(v PresetThumbnails) *string { return v.MaxHeight })
}

// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
func (o PresetThumbnailsOutput) MaxWidth() pulumix.Output[*string] {
	return pulumix.Apply[PresetThumbnails](o, func(v PresetThumbnails) *string { return v.MaxWidth })
}

// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
func (o PresetThumbnailsOutput) PaddingPolicy() pulumix.Output[*string] {
	return pulumix.Apply[PresetThumbnails](o, func(v PresetThumbnails) *string { return v.PaddingPolicy })
}

// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `maxWidth`, `maxHeight`, `sizingPolicy`, and `paddingPolicy` instead of `resolution` and `aspectRatio`. The two groups of settings are mutually exclusive. Do not use them together)
func (o PresetThumbnailsOutput) Resolution() pulumix.Output[*string] {
	return pulumix.Apply[PresetThumbnails](o, func(v PresetThumbnails) *string { return v.Resolution })
}

// A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
func (o PresetThumbnailsOutput) SizingPolicy() pulumix.Output[*string] {
	return pulumix.Apply[PresetThumbnails](o, func(v PresetThumbnails) *string { return v.SizingPolicy })
}

type PresetVideo struct {
	// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
	AspectRatio *string `pulumi:"aspectRatio"`
	// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
	BitRate *string `pulumi:"bitRate"`
	// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
	Codec *string `pulumi:"codec"`
	// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
	DisplayAspectRatio *string `pulumi:"displayAspectRatio"`
	// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
	FixedGop *string `pulumi:"fixedGop"`
	// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
	FrameRate *string `pulumi:"frameRate"`
	// The maximum number of frames between key frames. Not applicable for containers of type gif.
	KeyframesMaxDist *string `pulumi:"keyframesMaxDist"`
	// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
	MaxFrameRate *string `pulumi:"maxFrameRate"`
	// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
	MaxHeight *string `pulumi:"maxHeight"`
	// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
	MaxWidth *string `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
	PaddingPolicy *string `pulumi:"paddingPolicy"`
	// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
	Resolution *string `pulumi:"resolution"`
	// A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
	SizingPolicy *string `pulumi:"sizingPolicy"`
}

type PresetVideoArgs struct {
	// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
	AspectRatio pulumix.Input[*string] `pulumi:"aspectRatio"`
	// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
	BitRate pulumix.Input[*string] `pulumi:"bitRate"`
	// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
	Codec pulumix.Input[*string] `pulumi:"codec"`
	// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
	DisplayAspectRatio pulumix.Input[*string] `pulumi:"displayAspectRatio"`
	// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
	FixedGop pulumix.Input[*string] `pulumi:"fixedGop"`
	// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
	FrameRate pulumix.Input[*string] `pulumi:"frameRate"`
	// The maximum number of frames between key frames. Not applicable for containers of type gif.
	KeyframesMaxDist pulumix.Input[*string] `pulumi:"keyframesMaxDist"`
	// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
	MaxFrameRate pulumix.Input[*string] `pulumi:"maxFrameRate"`
	// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
	MaxHeight pulumix.Input[*string] `pulumi:"maxHeight"`
	// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
	MaxWidth pulumix.Input[*string] `pulumi:"maxWidth"`
	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
	PaddingPolicy pulumix.Input[*string] `pulumi:"paddingPolicy"`
	// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
	Resolution pulumix.Input[*string] `pulumi:"resolution"`
	// A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
	SizingPolicy pulumix.Input[*string] `pulumi:"sizingPolicy"`
}

func (PresetVideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideo)(nil)).Elem()
}

func (i PresetVideoArgs) ToPresetVideoOutput() PresetVideoOutput {
	return i.ToPresetVideoOutputWithContext(context.Background())
}

func (i PresetVideoArgs) ToPresetVideoOutputWithContext(ctx context.Context) PresetVideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoOutput)
}

func (i *PresetVideoArgs) ToOutput(ctx context.Context) pulumix.Output[*PresetVideoArgs] {
	return pulumix.Val(i)
}

type PresetVideoOutput struct{ *pulumi.OutputState }

func (PresetVideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideo)(nil)).Elem()
}

func (o PresetVideoOutput) ToPresetVideoOutput() PresetVideoOutput {
	return o
}

func (o PresetVideoOutput) ToPresetVideoOutputWithContext(ctx context.Context) PresetVideoOutput {
	return o
}

func (o PresetVideoOutput) ToOutput(ctx context.Context) pulumix.Output[PresetVideo] {
	return pulumix.Output[PresetVideo]{
		OutputState: o.OutputState,
	}
}

// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
func (o PresetVideoOutput) AspectRatio() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideo](o, func(v PresetVideo) *string { return v.AspectRatio })
}

// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
func (o PresetVideoOutput) BitRate() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideo](o, func(v PresetVideo) *string { return v.BitRate })
}

// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
func (o PresetVideoOutput) Codec() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideo](o, func(v PresetVideo) *string { return v.Codec })
}

// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
func (o PresetVideoOutput) DisplayAspectRatio() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideo](o, func(v PresetVideo) *string { return v.DisplayAspectRatio })
}

// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
func (o PresetVideoOutput) FixedGop() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideo](o, func(v PresetVideo) *string { return v.FixedGop })
}

// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
func (o PresetVideoOutput) FrameRate() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideo](o, func(v PresetVideo) *string { return v.FrameRate })
}

// The maximum number of frames between key frames. Not applicable for containers of type gif.
func (o PresetVideoOutput) KeyframesMaxDist() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideo](o, func(v PresetVideo) *string { return v.KeyframesMaxDist })
}

// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
func (o PresetVideoOutput) MaxFrameRate() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideo](o, func(v PresetVideo) *string { return v.MaxFrameRate })
}

// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
func (o PresetVideoOutput) MaxHeight() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideo](o, func(v PresetVideo) *string { return v.MaxHeight })
}

// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
func (o PresetVideoOutput) MaxWidth() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideo](o, func(v PresetVideo) *string { return v.MaxWidth })
}

// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
func (o PresetVideoOutput) PaddingPolicy() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideo](o, func(v PresetVideo) *string { return v.PaddingPolicy })
}

// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
func (o PresetVideoOutput) Resolution() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideo](o, func(v PresetVideo) *string { return v.Resolution })
}

// A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
func (o PresetVideoOutput) SizingPolicy() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideo](o, func(v PresetVideo) *string { return v.SizingPolicy })
}

type PresetVideoWatermark struct {
	// The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
	HorizontalAlign *string `pulumi:"horizontalAlign"`
	// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
	HorizontalOffset *string `pulumi:"horizontalOffset"`
	// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
	Id *string `pulumi:"id"`
	// The maximum height of the watermark.
	MaxHeight *string `pulumi:"maxHeight"`
	// The maximum width of the watermark.
	MaxWidth *string `pulumi:"maxWidth"`
	// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
	Opacity *string `pulumi:"opacity"`
	// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
	SizingPolicy *string `pulumi:"sizingPolicy"`
	// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
	Target *string `pulumi:"target"`
	// The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
	VerticalAlign *string `pulumi:"verticalAlign"`
	// The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
	VerticalOffset *string `pulumi:"verticalOffset"`
}

type PresetVideoWatermarkArgs struct {
	// The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
	HorizontalAlign pulumix.Input[*string] `pulumi:"horizontalAlign"`
	// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
	HorizontalOffset pulumix.Input[*string] `pulumi:"horizontalOffset"`
	// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
	Id pulumix.Input[*string] `pulumi:"id"`
	// The maximum height of the watermark.
	MaxHeight pulumix.Input[*string] `pulumi:"maxHeight"`
	// The maximum width of the watermark.
	MaxWidth pulumix.Input[*string] `pulumi:"maxWidth"`
	// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
	Opacity pulumix.Input[*string] `pulumi:"opacity"`
	// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
	SizingPolicy pulumix.Input[*string] `pulumi:"sizingPolicy"`
	// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
	Target pulumix.Input[*string] `pulumi:"target"`
	// The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
	VerticalAlign pulumix.Input[*string] `pulumi:"verticalAlign"`
	// The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
	VerticalOffset pulumix.Input[*string] `pulumi:"verticalOffset"`
}

func (PresetVideoWatermarkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideoWatermark)(nil)).Elem()
}

func (i PresetVideoWatermarkArgs) ToPresetVideoWatermarkOutput() PresetVideoWatermarkOutput {
	return i.ToPresetVideoWatermarkOutputWithContext(context.Background())
}

func (i PresetVideoWatermarkArgs) ToPresetVideoWatermarkOutputWithContext(ctx context.Context) PresetVideoWatermarkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetVideoWatermarkOutput)
}

func (i *PresetVideoWatermarkArgs) ToOutput(ctx context.Context) pulumix.Output[*PresetVideoWatermarkArgs] {
	return pulumix.Val(i)
}

type PresetVideoWatermarkOutput struct{ *pulumi.OutputState }

func (PresetVideoWatermarkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetVideoWatermark)(nil)).Elem()
}

func (o PresetVideoWatermarkOutput) ToPresetVideoWatermarkOutput() PresetVideoWatermarkOutput {
	return o
}

func (o PresetVideoWatermarkOutput) ToPresetVideoWatermarkOutputWithContext(ctx context.Context) PresetVideoWatermarkOutput {
	return o
}

func (o PresetVideoWatermarkOutput) ToOutput(ctx context.Context) pulumix.Output[PresetVideoWatermark] {
	return pulumix.Output[PresetVideoWatermark]{
		OutputState: o.OutputState,
	}
}

// The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
func (o PresetVideoWatermarkOutput) HorizontalAlign() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideoWatermark](o, func(v PresetVideoWatermark) *string { return v.HorizontalAlign })
}

// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
func (o PresetVideoWatermarkOutput) HorizontalOffset() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideoWatermark](o, func(v PresetVideoWatermark) *string { return v.HorizontalOffset })
}

// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
func (o PresetVideoWatermarkOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideoWatermark](o, func(v PresetVideoWatermark) *string { return v.Id })
}

// The maximum height of the watermark.
func (o PresetVideoWatermarkOutput) MaxHeight() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideoWatermark](o, func(v PresetVideoWatermark) *string { return v.MaxHeight })
}

// The maximum width of the watermark.
func (o PresetVideoWatermarkOutput) MaxWidth() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideoWatermark](o, func(v PresetVideoWatermark) *string { return v.MaxWidth })
}

// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
func (o PresetVideoWatermarkOutput) Opacity() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideoWatermark](o, func(v PresetVideoWatermark) *string { return v.Opacity })
}

// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
func (o PresetVideoWatermarkOutput) SizingPolicy() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideoWatermark](o, func(v PresetVideoWatermark) *string { return v.SizingPolicy })
}

// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
func (o PresetVideoWatermarkOutput) Target() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideoWatermark](o, func(v PresetVideoWatermark) *string { return v.Target })
}

// The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
func (o PresetVideoWatermarkOutput) VerticalAlign() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideoWatermark](o, func(v PresetVideoWatermark) *string { return v.VerticalAlign })
}

// The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
func (o PresetVideoWatermarkOutput) VerticalOffset() pulumix.Output[*string] {
	return pulumix.Apply[PresetVideoWatermark](o, func(v PresetVideoWatermark) *string { return v.VerticalOffset })
}

func init() {
	pulumi.RegisterOutputType(PipelineContentConfigOutput{})
	pulumi.RegisterOutputType(PipelineContentConfigPermissionOutput{})
	pulumi.RegisterOutputType(PipelineNotificationsOutput{})
	pulumi.RegisterOutputType(PipelineThumbnailConfigOutput{})
	pulumi.RegisterOutputType(PipelineThumbnailConfigPermissionOutput{})
	pulumi.RegisterOutputType(PresetAudioOutput{})
	pulumi.RegisterOutputType(PresetAudioCodecOptionsOutput{})
	pulumi.RegisterOutputType(PresetThumbnailsOutput{})
	pulumi.RegisterOutputType(PresetVideoOutput{})
	pulumi.RegisterOutputType(PresetVideoWatermarkOutput{})
}
