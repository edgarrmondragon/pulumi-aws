// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Allocates (reserves) a CIDR from an IPAM address pool, preventing usage by IPAM. Only works for private IPv4.
type VpcIpamPoolCidrAllocation struct {
	pulumi.CustomResourceState

	// The CIDR you want to assign to the pool.
	Cidr pulumix.Output[string] `pulumi:"cidr"`
	// The description for the allocation.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Exclude a particular CIDR range from being returned by the pool.
	DisallowedCidrs      pulumix.ArrayOutput[string] `pulumi:"disallowedCidrs"`
	IpamPoolAllocationId pulumix.Output[string]      `pulumi:"ipamPoolAllocationId"`
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId pulumix.Output[string] `pulumi:"ipamPoolId"`
	// The netmask length of the CIDR you would like to allocate to the IPAM pool. Valid Values: `0-128`.
	NetmaskLength pulumix.Output[*int] `pulumi:"netmaskLength"`
	// The ID of the resource.
	ResourceId pulumix.Output[string] `pulumi:"resourceId"`
	// The owner of the resource.
	ResourceOwner pulumix.Output[string] `pulumi:"resourceOwner"`
	// The type of the resource.
	ResourceType pulumix.Output[string] `pulumi:"resourceType"`
}

// NewVpcIpamPoolCidrAllocation registers a new resource with the given unique name, arguments, and options.
func NewVpcIpamPoolCidrAllocation(ctx *pulumi.Context,
	name string, args *VpcIpamPoolCidrAllocationArgs, opts ...pulumi.ResourceOption) (*VpcIpamPoolCidrAllocation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpamPoolId == nil {
		return nil, errors.New("invalid value for required argument 'IpamPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcIpamPoolCidrAllocation
	err := ctx.RegisterResource("aws:ec2/vpcIpamPoolCidrAllocation:VpcIpamPoolCidrAllocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcIpamPoolCidrAllocation gets an existing VpcIpamPoolCidrAllocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcIpamPoolCidrAllocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcIpamPoolCidrAllocationState, opts ...pulumi.ResourceOption) (*VpcIpamPoolCidrAllocation, error) {
	var resource VpcIpamPoolCidrAllocation
	err := ctx.ReadResource("aws:ec2/vpcIpamPoolCidrAllocation:VpcIpamPoolCidrAllocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcIpamPoolCidrAllocation resources.
type vpcIpamPoolCidrAllocationState struct {
	// The CIDR you want to assign to the pool.
	Cidr *string `pulumi:"cidr"`
	// The description for the allocation.
	Description *string `pulumi:"description"`
	// Exclude a particular CIDR range from being returned by the pool.
	DisallowedCidrs      []string `pulumi:"disallowedCidrs"`
	IpamPoolAllocationId *string  `pulumi:"ipamPoolAllocationId"`
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId *string `pulumi:"ipamPoolId"`
	// The netmask length of the CIDR you would like to allocate to the IPAM pool. Valid Values: `0-128`.
	NetmaskLength *int `pulumi:"netmaskLength"`
	// The ID of the resource.
	ResourceId *string `pulumi:"resourceId"`
	// The owner of the resource.
	ResourceOwner *string `pulumi:"resourceOwner"`
	// The type of the resource.
	ResourceType *string `pulumi:"resourceType"`
}

type VpcIpamPoolCidrAllocationState struct {
	// The CIDR you want to assign to the pool.
	Cidr pulumix.Input[*string]
	// The description for the allocation.
	Description pulumix.Input[*string]
	// Exclude a particular CIDR range from being returned by the pool.
	DisallowedCidrs      pulumix.Input[[]string]
	IpamPoolAllocationId pulumix.Input[*string]
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId pulumix.Input[*string]
	// The netmask length of the CIDR you would like to allocate to the IPAM pool. Valid Values: `0-128`.
	NetmaskLength pulumix.Input[*int]
	// The ID of the resource.
	ResourceId pulumix.Input[*string]
	// The owner of the resource.
	ResourceOwner pulumix.Input[*string]
	// The type of the resource.
	ResourceType pulumix.Input[*string]
}

func (VpcIpamPoolCidrAllocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpamPoolCidrAllocationState)(nil)).Elem()
}

type vpcIpamPoolCidrAllocationArgs struct {
	// The CIDR you want to assign to the pool.
	Cidr *string `pulumi:"cidr"`
	// The description for the allocation.
	Description *string `pulumi:"description"`
	// Exclude a particular CIDR range from being returned by the pool.
	DisallowedCidrs []string `pulumi:"disallowedCidrs"`
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId string `pulumi:"ipamPoolId"`
	// The netmask length of the CIDR you would like to allocate to the IPAM pool. Valid Values: `0-128`.
	NetmaskLength *int `pulumi:"netmaskLength"`
}

// The set of arguments for constructing a VpcIpamPoolCidrAllocation resource.
type VpcIpamPoolCidrAllocationArgs struct {
	// The CIDR you want to assign to the pool.
	Cidr pulumix.Input[*string]
	// The description for the allocation.
	Description pulumix.Input[*string]
	// Exclude a particular CIDR range from being returned by the pool.
	DisallowedCidrs pulumix.Input[[]string]
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId pulumix.Input[string]
	// The netmask length of the CIDR you would like to allocate to the IPAM pool. Valid Values: `0-128`.
	NetmaskLength pulumix.Input[*int]
}

func (VpcIpamPoolCidrAllocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpamPoolCidrAllocationArgs)(nil)).Elem()
}

type VpcIpamPoolCidrAllocationOutput struct{ *pulumi.OutputState }

func (VpcIpamPoolCidrAllocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcIpamPoolCidrAllocation)(nil)).Elem()
}

func (o VpcIpamPoolCidrAllocationOutput) ToVpcIpamPoolCidrAllocationOutput() VpcIpamPoolCidrAllocationOutput {
	return o
}

func (o VpcIpamPoolCidrAllocationOutput) ToVpcIpamPoolCidrAllocationOutputWithContext(ctx context.Context) VpcIpamPoolCidrAllocationOutput {
	return o
}

func (o VpcIpamPoolCidrAllocationOutput) ToOutput(ctx context.Context) pulumix.Output[VpcIpamPoolCidrAllocation] {
	return pulumix.Output[VpcIpamPoolCidrAllocation]{
		OutputState: o.OutputState,
	}
}

// The CIDR you want to assign to the pool.
func (o VpcIpamPoolCidrAllocationOutput) Cidr() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpamPoolCidrAllocation](o, func(v VpcIpamPoolCidrAllocation) pulumix.Output[string] { return v.Cidr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The description for the allocation.
func (o VpcIpamPoolCidrAllocationOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[VpcIpamPoolCidrAllocation](o, func(v VpcIpamPoolCidrAllocation) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Exclude a particular CIDR range from being returned by the pool.
func (o VpcIpamPoolCidrAllocationOutput) DisallowedCidrs() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcIpamPoolCidrAllocation](o, func(v VpcIpamPoolCidrAllocation) pulumix.ArrayOutput[string] { return v.DisallowedCidrs })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o VpcIpamPoolCidrAllocationOutput) IpamPoolAllocationId() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpamPoolCidrAllocation](o, func(v VpcIpamPoolCidrAllocation) pulumix.Output[string] { return v.IpamPoolAllocationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the pool to which you want to assign a CIDR.
func (o VpcIpamPoolCidrAllocationOutput) IpamPoolId() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpamPoolCidrAllocation](o, func(v VpcIpamPoolCidrAllocation) pulumix.Output[string] { return v.IpamPoolId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The netmask length of the CIDR you would like to allocate to the IPAM pool. Valid Values: `0-128`.
func (o VpcIpamPoolCidrAllocationOutput) NetmaskLength() pulumix.Output[*int] {
	value := pulumix.Apply[VpcIpamPoolCidrAllocation](o, func(v VpcIpamPoolCidrAllocation) pulumix.Output[*int] { return v.NetmaskLength })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The ID of the resource.
func (o VpcIpamPoolCidrAllocationOutput) ResourceId() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpamPoolCidrAllocation](o, func(v VpcIpamPoolCidrAllocation) pulumix.Output[string] { return v.ResourceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The owner of the resource.
func (o VpcIpamPoolCidrAllocationOutput) ResourceOwner() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpamPoolCidrAllocation](o, func(v VpcIpamPoolCidrAllocation) pulumix.Output[string] { return v.ResourceOwner })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of the resource.
func (o VpcIpamPoolCidrAllocationOutput) ResourceType() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpamPoolCidrAllocation](o, func(v VpcIpamPoolCidrAllocation) pulumix.Output[string] { return v.ResourceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VpcIpamPoolCidrAllocationOutput{})
}
