// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS OpenSearch Serverless VPC Endpoint.
func LookupServerlessVpcEndpoint(ctx *pulumi.Context, args *LookupServerlessVpcEndpointArgs, opts ...pulumi.InvokeOption) (*LookupServerlessVpcEndpointResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServerlessVpcEndpointResult
	err := ctx.Invoke("aws:opensearch/getServerlessVpcEndpoint:getServerlessVpcEndpoint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServerlessVpcEndpoint.
type LookupServerlessVpcEndpointArgs struct {
	// The unique identifier of the endpoint.
	VpcEndpointId string `pulumi:"vpcEndpointId"`
}

// A collection of values returned by getServerlessVpcEndpoint.
type LookupServerlessVpcEndpointResult struct {
	// The date the endpoint was created.
	CreatedDate string `pulumi:"createdDate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the endpoint.
	Name string `pulumi:"name"`
	// The IDs of the security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The IDs of the subnets from which you access OpenSearch Serverless.
	SubnetIds     []string `pulumi:"subnetIds"`
	VpcEndpointId string   `pulumi:"vpcEndpointId"`
	// The ID of the VPC from which you access OpenSearch Serverless.
	VpcId string `pulumi:"vpcId"`
}

func LookupServerlessVpcEndpointOutput(ctx *pulumi.Context, args LookupServerlessVpcEndpointOutputArgs, opts ...pulumi.InvokeOption) LookupServerlessVpcEndpointResultOutput {
	outputResult := pulumix.ApplyErr[*LookupServerlessVpcEndpointArgs](args.ToOutput(), func(plainArgs *LookupServerlessVpcEndpointArgs) (*LookupServerlessVpcEndpointResult, error) {
		return LookupServerlessVpcEndpoint(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupServerlessVpcEndpointResultOutput, *LookupServerlessVpcEndpointResult](outputResult)
}

// A collection of arguments for invoking getServerlessVpcEndpoint.
type LookupServerlessVpcEndpointOutputArgs struct {
	// The unique identifier of the endpoint.
	VpcEndpointId pulumix.Input[string] `pulumi:"vpcEndpointId"`
}

func (args LookupServerlessVpcEndpointOutputArgs) ToOutput() pulumix.Output[*LookupServerlessVpcEndpointArgs] {
	allArgs := pulumix.All(
		args.VpcEndpointId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupServerlessVpcEndpointArgs {
		return &LookupServerlessVpcEndpointArgs{
			VpcEndpointId: resolvedArgs[0].(string),
		}
	})
}

type LookupServerlessVpcEndpointResultOutput struct{ *pulumi.OutputState }

func (LookupServerlessVpcEndpointResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerlessVpcEndpointResult)(nil)).Elem()
}

func (o LookupServerlessVpcEndpointResultOutput) ToOutput(context.Context) pulumix.Output[*LookupServerlessVpcEndpointResult] {
	return pulumix.Output[*LookupServerlessVpcEndpointResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupServerlessVpcEndpointResultOutput) CreatedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerlessVpcEndpointResult](o, func(v *LookupServerlessVpcEndpointResult) string { return v.CreatedDate })
}

func (o LookupServerlessVpcEndpointResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerlessVpcEndpointResult](o, func(v *LookupServerlessVpcEndpointResult) string { return v.Id })
}

func (o LookupServerlessVpcEndpointResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerlessVpcEndpointResult](o, func(v *LookupServerlessVpcEndpointResult) string { return v.Name })
}

func (o LookupServerlessVpcEndpointResultOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupServerlessVpcEndpointResult](o, func(v *LookupServerlessVpcEndpointResult) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupServerlessVpcEndpointResultOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupServerlessVpcEndpointResult](o, func(v *LookupServerlessVpcEndpointResult) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupServerlessVpcEndpointResultOutput) VpcEndpointId() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerlessVpcEndpointResult](o, func(v *LookupServerlessVpcEndpointResult) string { return v.VpcEndpointId })
}

func (o LookupServerlessVpcEndpointResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerlessVpcEndpointResult](o, func(v *LookupServerlessVpcEndpointResult) string { return v.VpcId })
}
