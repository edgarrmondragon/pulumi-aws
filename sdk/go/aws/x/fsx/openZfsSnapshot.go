// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Amazon FSx for OpenZFS volume.
// See the [FSx OpenZFS User Guide](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/what-is-fsx.html) for more information.
type OpenZfsSnapshot struct {
	pulumi.CustomResourceState

	// Amazon Resource Name of the snapshot.
	Arn          pulumix.Output[string] `pulumi:"arn"`
	CreationTime pulumix.Output[string] `pulumi:"creationTime"`
	// The name of the Snapshot. You can use a maximum of 203 alphanumeric characters plus either _ or -  or : or . for the name.
	Name pulumix.Output[string] `pulumi:"name"`
	// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The ID of the volume to snapshot. This can be the root volume or a child volume.
	VolumeId pulumix.Output[string] `pulumi:"volumeId"`
}

// NewOpenZfsSnapshot registers a new resource with the given unique name, arguments, and options.
func NewOpenZfsSnapshot(ctx *pulumi.Context,
	name string, args *OpenZfsSnapshotArgs, opts ...pulumi.ResourceOption) (*OpenZfsSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenZfsSnapshot
	err := ctx.RegisterResource("aws:fsx/openZfsSnapshot:OpenZfsSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenZfsSnapshot gets an existing OpenZfsSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenZfsSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenZfsSnapshotState, opts ...pulumi.ResourceOption) (*OpenZfsSnapshot, error) {
	var resource OpenZfsSnapshot
	err := ctx.ReadResource("aws:fsx/openZfsSnapshot:OpenZfsSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenZfsSnapshot resources.
type openZfsSnapshotState struct {
	// Amazon Resource Name of the snapshot.
	Arn          *string `pulumi:"arn"`
	CreationTime *string `pulumi:"creationTime"`
	// The name of the Snapshot. You can use a maximum of 203 alphanumeric characters plus either _ or -  or : or . for the name.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ID of the volume to snapshot. This can be the root volume or a child volume.
	VolumeId *string `pulumi:"volumeId"`
}

type OpenZfsSnapshotState struct {
	// Amazon Resource Name of the snapshot.
	Arn          pulumix.Input[*string]
	CreationTime pulumix.Input[*string]
	// The name of the Snapshot. You can use a maximum of 203 alphanumeric characters plus either _ or -  or : or . for the name.
	Name pulumix.Input[*string]
	// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The ID of the volume to snapshot. This can be the root volume or a child volume.
	VolumeId pulumix.Input[*string]
}

func (OpenZfsSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*openZfsSnapshotState)(nil)).Elem()
}

type openZfsSnapshotArgs struct {
	// The name of the Snapshot. You can use a maximum of 203 alphanumeric characters plus either _ or -  or : or . for the name.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the volume to snapshot. This can be the root volume or a child volume.
	VolumeId string `pulumi:"volumeId"`
}

// The set of arguments for constructing a OpenZfsSnapshot resource.
type OpenZfsSnapshotArgs struct {
	// The name of the Snapshot. You can use a maximum of 203 alphanumeric characters plus either _ or -  or : or . for the name.
	Name pulumix.Input[*string]
	// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags pulumix.Input[map[string]string]
	// The ID of the volume to snapshot. This can be the root volume or a child volume.
	VolumeId pulumix.Input[string]
}

func (OpenZfsSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openZfsSnapshotArgs)(nil)).Elem()
}

type OpenZfsSnapshotOutput struct{ *pulumi.OutputState }

func (OpenZfsSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenZfsSnapshot)(nil)).Elem()
}

func (o OpenZfsSnapshotOutput) ToOpenZfsSnapshotOutput() OpenZfsSnapshotOutput {
	return o
}

func (o OpenZfsSnapshotOutput) ToOpenZfsSnapshotOutputWithContext(ctx context.Context) OpenZfsSnapshotOutput {
	return o
}

func (o OpenZfsSnapshotOutput) ToOutput(ctx context.Context) pulumix.Output[OpenZfsSnapshot] {
	return pulumix.Output[OpenZfsSnapshot]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name of the snapshot.
func (o OpenZfsSnapshotOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[OpenZfsSnapshot](o, func(v OpenZfsSnapshot) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o OpenZfsSnapshotOutput) CreationTime() pulumix.Output[string] {
	value := pulumix.Apply[OpenZfsSnapshot](o, func(v OpenZfsSnapshot) pulumix.Output[string] { return v.CreationTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Snapshot. You can use a maximum of 203 alphanumeric characters plus either _ or -  or : or . for the name.
func (o OpenZfsSnapshotOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[OpenZfsSnapshot](o, func(v OpenZfsSnapshot) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
func (o OpenZfsSnapshotOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[OpenZfsSnapshot](o, func(v OpenZfsSnapshot) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o OpenZfsSnapshotOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[OpenZfsSnapshot](o, func(v OpenZfsSnapshot) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of the volume to snapshot. This can be the root volume or a child volume.
func (o OpenZfsSnapshotOutput) VolumeId() pulumix.Output[string] {
	value := pulumix.Apply[OpenZfsSnapshot](o, func(v OpenZfsSnapshot) pulumix.Output[string] { return v.VolumeId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(OpenZfsSnapshotOutput{})
}
