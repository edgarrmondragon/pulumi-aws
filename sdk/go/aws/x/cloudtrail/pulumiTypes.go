// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudtrail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type EventDataStoreAdvancedEventSelector struct {
	// Specifies the selector statements in an advanced event selector. Fields documented below.
	FieldSelectors []EventDataStoreAdvancedEventSelectorFieldSelector `pulumi:"fieldSelectors"`
	// Specifies the name of the advanced event selector.
	Name *string `pulumi:"name"`
}

type EventDataStoreAdvancedEventSelectorArgs struct {
	// Specifies the selector statements in an advanced event selector. Fields documented below.
	FieldSelectors pulumix.Input[[]*EventDataStoreAdvancedEventSelectorFieldSelectorArgs] `pulumi:"fieldSelectors"`
	// Specifies the name of the advanced event selector.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (EventDataStoreAdvancedEventSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreAdvancedEventSelector)(nil)).Elem()
}

func (i EventDataStoreAdvancedEventSelectorArgs) ToEventDataStoreAdvancedEventSelectorOutput() EventDataStoreAdvancedEventSelectorOutput {
	return i.ToEventDataStoreAdvancedEventSelectorOutputWithContext(context.Background())
}

func (i EventDataStoreAdvancedEventSelectorArgs) ToEventDataStoreAdvancedEventSelectorOutputWithContext(ctx context.Context) EventDataStoreAdvancedEventSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreAdvancedEventSelectorOutput)
}

func (i *EventDataStoreAdvancedEventSelectorArgs) ToOutput(ctx context.Context) pulumix.Output[*EventDataStoreAdvancedEventSelectorArgs] {
	return pulumix.Val(i)
}

type EventDataStoreAdvancedEventSelectorOutput struct{ *pulumi.OutputState }

func (EventDataStoreAdvancedEventSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreAdvancedEventSelector)(nil)).Elem()
}

func (o EventDataStoreAdvancedEventSelectorOutput) ToEventDataStoreAdvancedEventSelectorOutput() EventDataStoreAdvancedEventSelectorOutput {
	return o
}

func (o EventDataStoreAdvancedEventSelectorOutput) ToEventDataStoreAdvancedEventSelectorOutputWithContext(ctx context.Context) EventDataStoreAdvancedEventSelectorOutput {
	return o
}

func (o EventDataStoreAdvancedEventSelectorOutput) ToOutput(ctx context.Context) pulumix.Output[EventDataStoreAdvancedEventSelector] {
	return pulumix.Output[EventDataStoreAdvancedEventSelector]{
		OutputState: o.OutputState,
	}
}

// Specifies the selector statements in an advanced event selector. Fields documented below.
func (o EventDataStoreAdvancedEventSelectorOutput) FieldSelectors() pulumix.GArrayOutput[EventDataStoreAdvancedEventSelectorFieldSelector, EventDataStoreAdvancedEventSelectorFieldSelectorOutput] {
	value := pulumix.Apply[EventDataStoreAdvancedEventSelector](o, func(v EventDataStoreAdvancedEventSelector) []EventDataStoreAdvancedEventSelectorFieldSelector {
		return v.FieldSelectors
	})
	return pulumix.GArrayOutput[EventDataStoreAdvancedEventSelectorFieldSelector, EventDataStoreAdvancedEventSelectorFieldSelectorOutput]{OutputState: value.OutputState}
}

// Specifies the name of the advanced event selector.
func (o EventDataStoreAdvancedEventSelectorOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[EventDataStoreAdvancedEventSelector](o, func(v EventDataStoreAdvancedEventSelector) *string { return v.Name })
}

type EventDataStoreAdvancedEventSelectorFieldSelector struct {
	// A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
	EndsWiths []string `pulumi:"endsWiths"`
	// A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
	Equals []string `pulumi:"equals"`
	// Specifies a field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
	Field *string `pulumi:"field"`
	// A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
	NotEndsWiths []string `pulumi:"notEndsWiths"`
	// A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
	NotEquals []string `pulumi:"notEquals"`
	// A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
	NotStartsWiths []string `pulumi:"notStartsWiths"`
	// A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
	StartsWiths []string `pulumi:"startsWiths"`
}

type EventDataStoreAdvancedEventSelectorFieldSelectorArgs struct {
	// A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
	EndsWiths pulumix.Input[[]string] `pulumi:"endsWiths"`
	// A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
	Equals pulumix.Input[[]string] `pulumi:"equals"`
	// Specifies a field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
	Field pulumix.Input[*string] `pulumi:"field"`
	// A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
	NotEndsWiths pulumix.Input[[]string] `pulumi:"notEndsWiths"`
	// A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
	NotEquals pulumix.Input[[]string] `pulumi:"notEquals"`
	// A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
	NotStartsWiths pulumix.Input[[]string] `pulumi:"notStartsWiths"`
	// A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
	StartsWiths pulumix.Input[[]string] `pulumi:"startsWiths"`
}

func (EventDataStoreAdvancedEventSelectorFieldSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreAdvancedEventSelectorFieldSelector)(nil)).Elem()
}

func (i EventDataStoreAdvancedEventSelectorFieldSelectorArgs) ToEventDataStoreAdvancedEventSelectorFieldSelectorOutput() EventDataStoreAdvancedEventSelectorFieldSelectorOutput {
	return i.ToEventDataStoreAdvancedEventSelectorFieldSelectorOutputWithContext(context.Background())
}

func (i EventDataStoreAdvancedEventSelectorFieldSelectorArgs) ToEventDataStoreAdvancedEventSelectorFieldSelectorOutputWithContext(ctx context.Context) EventDataStoreAdvancedEventSelectorFieldSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreAdvancedEventSelectorFieldSelectorOutput)
}

func (i *EventDataStoreAdvancedEventSelectorFieldSelectorArgs) ToOutput(ctx context.Context) pulumix.Output[*EventDataStoreAdvancedEventSelectorFieldSelectorArgs] {
	return pulumix.Val(i)
}

type EventDataStoreAdvancedEventSelectorFieldSelectorOutput struct{ *pulumi.OutputState }

func (EventDataStoreAdvancedEventSelectorFieldSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreAdvancedEventSelectorFieldSelector)(nil)).Elem()
}

func (o EventDataStoreAdvancedEventSelectorFieldSelectorOutput) ToEventDataStoreAdvancedEventSelectorFieldSelectorOutput() EventDataStoreAdvancedEventSelectorFieldSelectorOutput {
	return o
}

func (o EventDataStoreAdvancedEventSelectorFieldSelectorOutput) ToEventDataStoreAdvancedEventSelectorFieldSelectorOutputWithContext(ctx context.Context) EventDataStoreAdvancedEventSelectorFieldSelectorOutput {
	return o
}

func (o EventDataStoreAdvancedEventSelectorFieldSelectorOutput) ToOutput(ctx context.Context) pulumix.Output[EventDataStoreAdvancedEventSelectorFieldSelector] {
	return pulumix.Output[EventDataStoreAdvancedEventSelectorFieldSelector]{
		OutputState: o.OutputState,
	}
}

// A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
func (o EventDataStoreAdvancedEventSelectorFieldSelectorOutput) EndsWiths() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EventDataStoreAdvancedEventSelectorFieldSelector](o, func(v EventDataStoreAdvancedEventSelectorFieldSelector) []string { return v.EndsWiths })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
func (o EventDataStoreAdvancedEventSelectorFieldSelectorOutput) Equals() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EventDataStoreAdvancedEventSelectorFieldSelector](o, func(v EventDataStoreAdvancedEventSelectorFieldSelector) []string { return v.Equals })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies a field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
func (o EventDataStoreAdvancedEventSelectorFieldSelectorOutput) Field() pulumix.Output[*string] {
	return pulumix.Apply[EventDataStoreAdvancedEventSelectorFieldSelector](o, func(v EventDataStoreAdvancedEventSelectorFieldSelector) *string { return v.Field })
}

// A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
func (o EventDataStoreAdvancedEventSelectorFieldSelectorOutput) NotEndsWiths() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EventDataStoreAdvancedEventSelectorFieldSelector](o, func(v EventDataStoreAdvancedEventSelectorFieldSelector) []string { return v.NotEndsWiths })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
func (o EventDataStoreAdvancedEventSelectorFieldSelectorOutput) NotEquals() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EventDataStoreAdvancedEventSelectorFieldSelector](o, func(v EventDataStoreAdvancedEventSelectorFieldSelector) []string { return v.NotEquals })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
func (o EventDataStoreAdvancedEventSelectorFieldSelectorOutput) NotStartsWiths() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EventDataStoreAdvancedEventSelectorFieldSelector](o, func(v EventDataStoreAdvancedEventSelectorFieldSelector) []string { return v.NotStartsWiths })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
func (o EventDataStoreAdvancedEventSelectorFieldSelectorOutput) StartsWiths() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EventDataStoreAdvancedEventSelectorFieldSelector](o, func(v EventDataStoreAdvancedEventSelectorFieldSelector) []string { return v.StartsWiths })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type TrailAdvancedEventSelector struct {
	// Specifies the selector statements in an advanced event selector. Fields documented below.
	FieldSelectors []TrailAdvancedEventSelectorFieldSelector `pulumi:"fieldSelectors"`
	// Name of the trail.
	Name *string `pulumi:"name"`
}

type TrailAdvancedEventSelectorArgs struct {
	// Specifies the selector statements in an advanced event selector. Fields documented below.
	FieldSelectors pulumix.Input[[]*TrailAdvancedEventSelectorFieldSelectorArgs] `pulumi:"fieldSelectors"`
	// Name of the trail.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (TrailAdvancedEventSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailAdvancedEventSelector)(nil)).Elem()
}

func (i TrailAdvancedEventSelectorArgs) ToTrailAdvancedEventSelectorOutput() TrailAdvancedEventSelectorOutput {
	return i.ToTrailAdvancedEventSelectorOutputWithContext(context.Background())
}

func (i TrailAdvancedEventSelectorArgs) ToTrailAdvancedEventSelectorOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailAdvancedEventSelectorOutput)
}

func (i *TrailAdvancedEventSelectorArgs) ToOutput(ctx context.Context) pulumix.Output[*TrailAdvancedEventSelectorArgs] {
	return pulumix.Val(i)
}

type TrailAdvancedEventSelectorOutput struct{ *pulumi.OutputState }

func (TrailAdvancedEventSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailAdvancedEventSelector)(nil)).Elem()
}

func (o TrailAdvancedEventSelectorOutput) ToTrailAdvancedEventSelectorOutput() TrailAdvancedEventSelectorOutput {
	return o
}

func (o TrailAdvancedEventSelectorOutput) ToTrailAdvancedEventSelectorOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorOutput {
	return o
}

func (o TrailAdvancedEventSelectorOutput) ToOutput(ctx context.Context) pulumix.Output[TrailAdvancedEventSelector] {
	return pulumix.Output[TrailAdvancedEventSelector]{
		OutputState: o.OutputState,
	}
}

// Specifies the selector statements in an advanced event selector. Fields documented below.
func (o TrailAdvancedEventSelectorOutput) FieldSelectors() pulumix.GArrayOutput[TrailAdvancedEventSelectorFieldSelector, TrailAdvancedEventSelectorFieldSelectorOutput] {
	value := pulumix.Apply[TrailAdvancedEventSelector](o, func(v TrailAdvancedEventSelector) []TrailAdvancedEventSelectorFieldSelector { return v.FieldSelectors })
	return pulumix.GArrayOutput[TrailAdvancedEventSelectorFieldSelector, TrailAdvancedEventSelectorFieldSelectorOutput]{OutputState: value.OutputState}
}

// Name of the trail.
func (o TrailAdvancedEventSelectorOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[TrailAdvancedEventSelector](o, func(v TrailAdvancedEventSelector) *string { return v.Name })
}

type TrailAdvancedEventSelectorFieldSelector struct {
	// A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
	EndsWiths []string `pulumi:"endsWiths"`
	// A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
	Equals []string `pulumi:"equals"`
	// Field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
	Field string `pulumi:"field"`
	// A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
	NotEndsWiths []string `pulumi:"notEndsWiths"`
	// A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
	NotEquals []string `pulumi:"notEquals"`
	// A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
	NotStartsWiths []string `pulumi:"notStartsWiths"`
	// A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
	StartsWiths []string `pulumi:"startsWiths"`
}

type TrailAdvancedEventSelectorFieldSelectorArgs struct {
	// A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
	EndsWiths pulumix.Input[[]string] `pulumi:"endsWiths"`
	// A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
	Equals pulumix.Input[[]string] `pulumi:"equals"`
	// Field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
	Field pulumix.Input[string] `pulumi:"field"`
	// A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
	NotEndsWiths pulumix.Input[[]string] `pulumi:"notEndsWiths"`
	// A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
	NotEquals pulumix.Input[[]string] `pulumi:"notEquals"`
	// A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
	NotStartsWiths pulumix.Input[[]string] `pulumi:"notStartsWiths"`
	// A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
	StartsWiths pulumix.Input[[]string] `pulumi:"startsWiths"`
}

func (TrailAdvancedEventSelectorFieldSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailAdvancedEventSelectorFieldSelector)(nil)).Elem()
}

func (i TrailAdvancedEventSelectorFieldSelectorArgs) ToTrailAdvancedEventSelectorFieldSelectorOutput() TrailAdvancedEventSelectorFieldSelectorOutput {
	return i.ToTrailAdvancedEventSelectorFieldSelectorOutputWithContext(context.Background())
}

func (i TrailAdvancedEventSelectorFieldSelectorArgs) ToTrailAdvancedEventSelectorFieldSelectorOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorFieldSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailAdvancedEventSelectorFieldSelectorOutput)
}

func (i *TrailAdvancedEventSelectorFieldSelectorArgs) ToOutput(ctx context.Context) pulumix.Output[*TrailAdvancedEventSelectorFieldSelectorArgs] {
	return pulumix.Val(i)
}

type TrailAdvancedEventSelectorFieldSelectorOutput struct{ *pulumi.OutputState }

func (TrailAdvancedEventSelectorFieldSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailAdvancedEventSelectorFieldSelector)(nil)).Elem()
}

func (o TrailAdvancedEventSelectorFieldSelectorOutput) ToTrailAdvancedEventSelectorFieldSelectorOutput() TrailAdvancedEventSelectorFieldSelectorOutput {
	return o
}

func (o TrailAdvancedEventSelectorFieldSelectorOutput) ToTrailAdvancedEventSelectorFieldSelectorOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorFieldSelectorOutput {
	return o
}

func (o TrailAdvancedEventSelectorFieldSelectorOutput) ToOutput(ctx context.Context) pulumix.Output[TrailAdvancedEventSelectorFieldSelector] {
	return pulumix.Output[TrailAdvancedEventSelectorFieldSelector]{
		OutputState: o.OutputState,
	}
}

// A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
func (o TrailAdvancedEventSelectorFieldSelectorOutput) EndsWiths() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TrailAdvancedEventSelectorFieldSelector](o, func(v TrailAdvancedEventSelectorFieldSelector) []string { return v.EndsWiths })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
func (o TrailAdvancedEventSelectorFieldSelectorOutput) Equals() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TrailAdvancedEventSelectorFieldSelector](o, func(v TrailAdvancedEventSelectorFieldSelector) []string { return v.Equals })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
func (o TrailAdvancedEventSelectorFieldSelectorOutput) Field() pulumix.Output[string] {
	return pulumix.Apply[TrailAdvancedEventSelectorFieldSelector](o, func(v TrailAdvancedEventSelectorFieldSelector) string { return v.Field })
}

// A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
func (o TrailAdvancedEventSelectorFieldSelectorOutput) NotEndsWiths() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TrailAdvancedEventSelectorFieldSelector](o, func(v TrailAdvancedEventSelectorFieldSelector) []string { return v.NotEndsWiths })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
func (o TrailAdvancedEventSelectorFieldSelectorOutput) NotEquals() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TrailAdvancedEventSelectorFieldSelector](o, func(v TrailAdvancedEventSelectorFieldSelector) []string { return v.NotEquals })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
func (o TrailAdvancedEventSelectorFieldSelectorOutput) NotStartsWiths() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TrailAdvancedEventSelectorFieldSelector](o, func(v TrailAdvancedEventSelectorFieldSelector) []string { return v.NotStartsWiths })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
func (o TrailAdvancedEventSelectorFieldSelectorOutput) StartsWiths() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TrailAdvancedEventSelectorFieldSelector](o, func(v TrailAdvancedEventSelectorFieldSelector) []string { return v.StartsWiths })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type TrailEventSelector struct {
	// Configuration block for data events. See details below.
	DataResources []TrailEventSelectorDataResource `pulumi:"dataResources"`
	// A set of event sources to exclude. Valid values include: `kms.amazonaws.com` and `rdsdata.amazonaws.com`. `includeManagementEvents` must be set to`true` to allow this.
	ExcludeManagementEventSources []string `pulumi:"excludeManagementEventSources"`
	// Whether to include management events for your trail. Defaults to `true`.
	IncludeManagementEvents *bool `pulumi:"includeManagementEvents"`
	// Type of events to log. Valid values are `ReadOnly`, `WriteOnly`, `All`. Default value is `All`.
	ReadWriteType *string `pulumi:"readWriteType"`
}

type TrailEventSelectorArgs struct {
	// Configuration block for data events. See details below.
	DataResources pulumix.Input[[]*TrailEventSelectorDataResourceArgs] `pulumi:"dataResources"`
	// A set of event sources to exclude. Valid values include: `kms.amazonaws.com` and `rdsdata.amazonaws.com`. `includeManagementEvents` must be set to`true` to allow this.
	ExcludeManagementEventSources pulumix.Input[[]string] `pulumi:"excludeManagementEventSources"`
	// Whether to include management events for your trail. Defaults to `true`.
	IncludeManagementEvents pulumix.Input[*bool] `pulumi:"includeManagementEvents"`
	// Type of events to log. Valid values are `ReadOnly`, `WriteOnly`, `All`. Default value is `All`.
	ReadWriteType pulumix.Input[*string] `pulumi:"readWriteType"`
}

func (TrailEventSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelector)(nil)).Elem()
}

func (i TrailEventSelectorArgs) ToTrailEventSelectorOutput() TrailEventSelectorOutput {
	return i.ToTrailEventSelectorOutputWithContext(context.Background())
}

func (i TrailEventSelectorArgs) ToTrailEventSelectorOutputWithContext(ctx context.Context) TrailEventSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailEventSelectorOutput)
}

func (i *TrailEventSelectorArgs) ToOutput(ctx context.Context) pulumix.Output[*TrailEventSelectorArgs] {
	return pulumix.Val(i)
}

type TrailEventSelectorOutput struct{ *pulumi.OutputState }

func (TrailEventSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelector)(nil)).Elem()
}

func (o TrailEventSelectorOutput) ToTrailEventSelectorOutput() TrailEventSelectorOutput {
	return o
}

func (o TrailEventSelectorOutput) ToTrailEventSelectorOutputWithContext(ctx context.Context) TrailEventSelectorOutput {
	return o
}

func (o TrailEventSelectorOutput) ToOutput(ctx context.Context) pulumix.Output[TrailEventSelector] {
	return pulumix.Output[TrailEventSelector]{
		OutputState: o.OutputState,
	}
}

// Configuration block for data events. See details below.
func (o TrailEventSelectorOutput) DataResources() pulumix.GArrayOutput[TrailEventSelectorDataResource, TrailEventSelectorDataResourceOutput] {
	value := pulumix.Apply[TrailEventSelector](o, func(v TrailEventSelector) []TrailEventSelectorDataResource { return v.DataResources })
	return pulumix.GArrayOutput[TrailEventSelectorDataResource, TrailEventSelectorDataResourceOutput]{OutputState: value.OutputState}
}

// A set of event sources to exclude. Valid values include: `kms.amazonaws.com` and `rdsdata.amazonaws.com`. `includeManagementEvents` must be set to`true` to allow this.
func (o TrailEventSelectorOutput) ExcludeManagementEventSources() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TrailEventSelector](o, func(v TrailEventSelector) []string { return v.ExcludeManagementEventSources })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Whether to include management events for your trail. Defaults to `true`.
func (o TrailEventSelectorOutput) IncludeManagementEvents() pulumix.Output[*bool] {
	return pulumix.Apply[TrailEventSelector](o, func(v TrailEventSelector) *bool { return v.IncludeManagementEvents })
}

// Type of events to log. Valid values are `ReadOnly`, `WriteOnly`, `All`. Default value is `All`.
func (o TrailEventSelectorOutput) ReadWriteType() pulumix.Output[*string] {
	return pulumix.Apply[TrailEventSelector](o, func(v TrailEventSelector) *string { return v.ReadWriteType })
}

type TrailEventSelectorDataResource struct {
	// Resource type in which you want to log data events. You can specify only the following value: "AWS::S3::Object", "AWS::Lambda::Function" and "AWS::DynamoDB::Table".
	Type string `pulumi:"type"`
	// List of ARN strings or partial ARN strings to specify selectors for data audit events over data resources. ARN list is specific to single-valued `type`. For example, `arn:aws:s3:::<bucket name>/` for all objects in a bucket, `arn:aws:s3:::<bucket name>/key` for specific objects, `arn:aws:lambda` for all lambda events within an account, `arn:aws:lambda:<region>:<account number>:function:<function name>` for a specific Lambda function, `arn:aws:dynamodb` for all DDB events for all tables within an account, or `arn:aws:dynamodb:<region>:<account number>:table/<table name>` for a specific DynamoDB table.
	Values []string `pulumi:"values"`
}

type TrailEventSelectorDataResourceArgs struct {
	// Resource type in which you want to log data events. You can specify only the following value: "AWS::S3::Object", "AWS::Lambda::Function" and "AWS::DynamoDB::Table".
	Type pulumix.Input[string] `pulumi:"type"`
	// List of ARN strings or partial ARN strings to specify selectors for data audit events over data resources. ARN list is specific to single-valued `type`. For example, `arn:aws:s3:::<bucket name>/` for all objects in a bucket, `arn:aws:s3:::<bucket name>/key` for specific objects, `arn:aws:lambda` for all lambda events within an account, `arn:aws:lambda:<region>:<account number>:function:<function name>` for a specific Lambda function, `arn:aws:dynamodb` for all DDB events for all tables within an account, or `arn:aws:dynamodb:<region>:<account number>:table/<table name>` for a specific DynamoDB table.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (TrailEventSelectorDataResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelectorDataResource)(nil)).Elem()
}

func (i TrailEventSelectorDataResourceArgs) ToTrailEventSelectorDataResourceOutput() TrailEventSelectorDataResourceOutput {
	return i.ToTrailEventSelectorDataResourceOutputWithContext(context.Background())
}

func (i TrailEventSelectorDataResourceArgs) ToTrailEventSelectorDataResourceOutputWithContext(ctx context.Context) TrailEventSelectorDataResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailEventSelectorDataResourceOutput)
}

func (i *TrailEventSelectorDataResourceArgs) ToOutput(ctx context.Context) pulumix.Output[*TrailEventSelectorDataResourceArgs] {
	return pulumix.Val(i)
}

type TrailEventSelectorDataResourceOutput struct{ *pulumi.OutputState }

func (TrailEventSelectorDataResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelectorDataResource)(nil)).Elem()
}

func (o TrailEventSelectorDataResourceOutput) ToTrailEventSelectorDataResourceOutput() TrailEventSelectorDataResourceOutput {
	return o
}

func (o TrailEventSelectorDataResourceOutput) ToTrailEventSelectorDataResourceOutputWithContext(ctx context.Context) TrailEventSelectorDataResourceOutput {
	return o
}

func (o TrailEventSelectorDataResourceOutput) ToOutput(ctx context.Context) pulumix.Output[TrailEventSelectorDataResource] {
	return pulumix.Output[TrailEventSelectorDataResource]{
		OutputState: o.OutputState,
	}
}

// Resource type in which you want to log data events. You can specify only the following value: "AWS::S3::Object", "AWS::Lambda::Function" and "AWS::DynamoDB::Table".
func (o TrailEventSelectorDataResourceOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[TrailEventSelectorDataResource](o, func(v TrailEventSelectorDataResource) string { return v.Type })
}

// List of ARN strings or partial ARN strings to specify selectors for data audit events over data resources. ARN list is specific to single-valued `type`. For example, `arn:aws:s3:::<bucket name>/` for all objects in a bucket, `arn:aws:s3:::<bucket name>/key` for specific objects, `arn:aws:lambda` for all lambda events within an account, `arn:aws:lambda:<region>:<account number>:function:<function name>` for a specific Lambda function, `arn:aws:dynamodb` for all DDB events for all tables within an account, or `arn:aws:dynamodb:<region>:<account number>:table/<table name>` for a specific DynamoDB table.
func (o TrailEventSelectorDataResourceOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TrailEventSelectorDataResource](o, func(v TrailEventSelectorDataResource) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type TrailInsightSelector struct {
	// Type of insights to log on a trail. Valid values are: `ApiCallRateInsight` and `ApiErrorRateInsight`.
	InsightType string `pulumi:"insightType"`
}

type TrailInsightSelectorArgs struct {
	// Type of insights to log on a trail. Valid values are: `ApiCallRateInsight` and `ApiErrorRateInsight`.
	InsightType pulumix.Input[string] `pulumi:"insightType"`
}

func (TrailInsightSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailInsightSelector)(nil)).Elem()
}

func (i TrailInsightSelectorArgs) ToTrailInsightSelectorOutput() TrailInsightSelectorOutput {
	return i.ToTrailInsightSelectorOutputWithContext(context.Background())
}

func (i TrailInsightSelectorArgs) ToTrailInsightSelectorOutputWithContext(ctx context.Context) TrailInsightSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailInsightSelectorOutput)
}

func (i *TrailInsightSelectorArgs) ToOutput(ctx context.Context) pulumix.Output[*TrailInsightSelectorArgs] {
	return pulumix.Val(i)
}

type TrailInsightSelectorOutput struct{ *pulumi.OutputState }

func (TrailInsightSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailInsightSelector)(nil)).Elem()
}

func (o TrailInsightSelectorOutput) ToTrailInsightSelectorOutput() TrailInsightSelectorOutput {
	return o
}

func (o TrailInsightSelectorOutput) ToTrailInsightSelectorOutputWithContext(ctx context.Context) TrailInsightSelectorOutput {
	return o
}

func (o TrailInsightSelectorOutput) ToOutput(ctx context.Context) pulumix.Output[TrailInsightSelector] {
	return pulumix.Output[TrailInsightSelector]{
		OutputState: o.OutputState,
	}
}

// Type of insights to log on a trail. Valid values are: `ApiCallRateInsight` and `ApiErrorRateInsight`.
func (o TrailInsightSelectorOutput) InsightType() pulumix.Output[string] {
	return pulumix.Apply[TrailInsightSelector](o, func(v TrailInsightSelector) string { return v.InsightType })
}

func init() {
	pulumi.RegisterOutputType(EventDataStoreAdvancedEventSelectorOutput{})
	pulumi.RegisterOutputType(EventDataStoreAdvancedEventSelectorFieldSelectorOutput{})
	pulumi.RegisterOutputType(TrailAdvancedEventSelectorOutput{})
	pulumi.RegisterOutputType(TrailAdvancedEventSelectorFieldSelectorOutput{})
	pulumi.RegisterOutputType(TrailEventSelectorOutput{})
	pulumi.RegisterOutputType(TrailEventSelectorDataResourceOutput{})
	pulumi.RegisterOutputType(TrailInsightSelectorOutput{})
}
