// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scheduler

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an EventBridge Scheduler Schedule Group resource.
//
// You can find out more about EventBridge Scheduler in the [User Guide](https://docs.aws.amazon.com/scheduler/latest/UserGuide/what-is-scheduler.html).
//
// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
type ScheduleGroup struct {
	pulumi.CustomResourceState

	// ARN of the schedule group.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Time at which the schedule group was created.
	CreationDate pulumix.Output[string] `pulumi:"creationDate"`
	// Time at which the schedule group was last modified.
	LastModificationDate pulumix.Output[string] `pulumi:"lastModificationDate"`
	// Name of the schedule group. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[string] `pulumi:"namePrefix"`
	// State of the schedule group. Can be `ACTIVE` or `DELETING`.
	State pulumix.Output[string] `pulumi:"state"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewScheduleGroup registers a new resource with the given unique name, arguments, and options.
func NewScheduleGroup(ctx *pulumi.Context,
	name string, args *ScheduleGroupArgs, opts ...pulumi.ResourceOption) (*ScheduleGroup, error) {
	if args == nil {
		args = &ScheduleGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScheduleGroup
	err := ctx.RegisterResource("aws:scheduler/scheduleGroup:ScheduleGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduleGroup gets an existing ScheduleGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduleGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleGroupState, opts ...pulumi.ResourceOption) (*ScheduleGroup, error) {
	var resource ScheduleGroup
	err := ctx.ReadResource("aws:scheduler/scheduleGroup:ScheduleGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduleGroup resources.
type scheduleGroupState struct {
	// ARN of the schedule group.
	Arn *string `pulumi:"arn"`
	// Time at which the schedule group was created.
	CreationDate *string `pulumi:"creationDate"`
	// Time at which the schedule group was last modified.
	LastModificationDate *string `pulumi:"lastModificationDate"`
	// Name of the schedule group. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// State of the schedule group. Can be `ACTIVE` or `DELETING`.
	State *string `pulumi:"state"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ScheduleGroupState struct {
	// ARN of the schedule group.
	Arn pulumix.Input[*string]
	// Time at which the schedule group was created.
	CreationDate pulumix.Input[*string]
	// Time at which the schedule group was last modified.
	LastModificationDate pulumix.Input[*string]
	// Name of the schedule group. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// State of the schedule group. Can be `ACTIVE` or `DELETING`.
	State pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ScheduleGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleGroupState)(nil)).Elem()
}

type scheduleGroupArgs struct {
	// Name of the schedule group. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ScheduleGroup resource.
type ScheduleGroupArgs struct {
	// Name of the schedule group. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ScheduleGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleGroupArgs)(nil)).Elem()
}

type ScheduleGroupOutput struct{ *pulumi.OutputState }

func (ScheduleGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleGroup)(nil)).Elem()
}

func (o ScheduleGroupOutput) ToScheduleGroupOutput() ScheduleGroupOutput {
	return o
}

func (o ScheduleGroupOutput) ToScheduleGroupOutputWithContext(ctx context.Context) ScheduleGroupOutput {
	return o
}

func (o ScheduleGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleGroup] {
	return pulumix.Output[ScheduleGroup]{
		OutputState: o.OutputState,
	}
}

// ARN of the schedule group.
func (o ScheduleGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ScheduleGroup](o, func(v ScheduleGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Time at which the schedule group was created.
func (o ScheduleGroupOutput) CreationDate() pulumix.Output[string] {
	value := pulumix.Apply[ScheduleGroup](o, func(v ScheduleGroup) pulumix.Output[string] { return v.CreationDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Time at which the schedule group was last modified.
func (o ScheduleGroupOutput) LastModificationDate() pulumix.Output[string] {
	value := pulumix.Apply[ScheduleGroup](o, func(v ScheduleGroup) pulumix.Output[string] { return v.LastModificationDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the schedule group. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o ScheduleGroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ScheduleGroup](o, func(v ScheduleGroup) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o ScheduleGroupOutput) NamePrefix() pulumix.Output[string] {
	value := pulumix.Apply[ScheduleGroup](o, func(v ScheduleGroup) pulumix.Output[string] { return v.NamePrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// State of the schedule group. Can be `ACTIVE` or `DELETING`.
func (o ScheduleGroupOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[ScheduleGroup](o, func(v ScheduleGroup) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ScheduleGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ScheduleGroup](o, func(v ScheduleGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ScheduleGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ScheduleGroup](o, func(v ScheduleGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ScheduleGroupOutput{})
}
