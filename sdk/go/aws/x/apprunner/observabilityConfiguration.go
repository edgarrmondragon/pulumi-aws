// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apprunner

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an App Runner Observability Configuration.
type ObservabilityConfiguration struct {
	pulumi.CustomResourceState

	// ARN of this observability configuration.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Whether the observability configuration has the highest `observabilityConfigurationRevision` among all configurations that share the same `observabilityConfigurationName`.
	Latest pulumix.Output[bool] `pulumi:"latest"`
	// Name of the observability configuration.
	ObservabilityConfigurationName pulumix.Output[string] `pulumi:"observabilityConfigurationName"`
	// The revision of this observability configuration.
	ObservabilityConfigurationRevision pulumix.Output[int] `pulumi:"observabilityConfigurationRevision"`
	// Current state of the observability configuration. An INACTIVE configuration revision has been deleted and can't be used. It is permanently removed some time after deletion.
	Status pulumix.Output[string] `pulumi:"status"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing. See Trace Configuration below for more details.
	TraceConfiguration pulumix.GPtrOutput[ObservabilityConfigurationTraceConfiguration, ObservabilityConfigurationTraceConfigurationOutput] `pulumi:"traceConfiguration"`
}

// NewObservabilityConfiguration registers a new resource with the given unique name, arguments, and options.
func NewObservabilityConfiguration(ctx *pulumi.Context,
	name string, args *ObservabilityConfigurationArgs, opts ...pulumi.ResourceOption) (*ObservabilityConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ObservabilityConfigurationName == nil {
		return nil, errors.New("invalid value for required argument 'ObservabilityConfigurationName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObservabilityConfiguration
	err := ctx.RegisterResource("aws:apprunner/observabilityConfiguration:ObservabilityConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObservabilityConfiguration gets an existing ObservabilityConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObservabilityConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObservabilityConfigurationState, opts ...pulumi.ResourceOption) (*ObservabilityConfiguration, error) {
	var resource ObservabilityConfiguration
	err := ctx.ReadResource("aws:apprunner/observabilityConfiguration:ObservabilityConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObservabilityConfiguration resources.
type observabilityConfigurationState struct {
	// ARN of this observability configuration.
	Arn *string `pulumi:"arn"`
	// Whether the observability configuration has the highest `observabilityConfigurationRevision` among all configurations that share the same `observabilityConfigurationName`.
	Latest *bool `pulumi:"latest"`
	// Name of the observability configuration.
	ObservabilityConfigurationName *string `pulumi:"observabilityConfigurationName"`
	// The revision of this observability configuration.
	ObservabilityConfigurationRevision *int `pulumi:"observabilityConfigurationRevision"`
	// Current state of the observability configuration. An INACTIVE configuration revision has been deleted and can't be used. It is permanently removed some time after deletion.
	Status *string `pulumi:"status"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing. See Trace Configuration below for more details.
	TraceConfiguration *ObservabilityConfigurationTraceConfiguration `pulumi:"traceConfiguration"`
}

type ObservabilityConfigurationState struct {
	// ARN of this observability configuration.
	Arn pulumix.Input[*string]
	// Whether the observability configuration has the highest `observabilityConfigurationRevision` among all configurations that share the same `observabilityConfigurationName`.
	Latest pulumix.Input[*bool]
	// Name of the observability configuration.
	ObservabilityConfigurationName pulumix.Input[*string]
	// The revision of this observability configuration.
	ObservabilityConfigurationRevision pulumix.Input[*int]
	// Current state of the observability configuration. An INACTIVE configuration revision has been deleted and can't be used. It is permanently removed some time after deletion.
	Status pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing. See Trace Configuration below for more details.
	TraceConfiguration pulumix.Input[*ObservabilityConfigurationTraceConfigurationArgs]
}

func (ObservabilityConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityConfigurationState)(nil)).Elem()
}

type observabilityConfigurationArgs struct {
	// Name of the observability configuration.
	ObservabilityConfigurationName string `pulumi:"observabilityConfigurationName"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing. See Trace Configuration below for more details.
	TraceConfiguration *ObservabilityConfigurationTraceConfiguration `pulumi:"traceConfiguration"`
}

// The set of arguments for constructing a ObservabilityConfiguration resource.
type ObservabilityConfigurationArgs struct {
	// Name of the observability configuration.
	ObservabilityConfigurationName pulumix.Input[string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing. See Trace Configuration below for more details.
	TraceConfiguration pulumix.Input[*ObservabilityConfigurationTraceConfigurationArgs]
}

func (ObservabilityConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityConfigurationArgs)(nil)).Elem()
}

type ObservabilityConfigurationOutput struct{ *pulumi.OutputState }

func (ObservabilityConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityConfiguration)(nil)).Elem()
}

func (o ObservabilityConfigurationOutput) ToObservabilityConfigurationOutput() ObservabilityConfigurationOutput {
	return o
}

func (o ObservabilityConfigurationOutput) ToObservabilityConfigurationOutputWithContext(ctx context.Context) ObservabilityConfigurationOutput {
	return o
}

func (o ObservabilityConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ObservabilityConfiguration] {
	return pulumix.Output[ObservabilityConfiguration]{
		OutputState: o.OutputState,
	}
}

// ARN of this observability configuration.
func (o ObservabilityConfigurationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ObservabilityConfiguration](o, func(v ObservabilityConfiguration) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether the observability configuration has the highest `observabilityConfigurationRevision` among all configurations that share the same `observabilityConfigurationName`.
func (o ObservabilityConfigurationOutput) Latest() pulumix.Output[bool] {
	value := pulumix.Apply[ObservabilityConfiguration](o, func(v ObservabilityConfiguration) pulumix.Output[bool] { return v.Latest })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Name of the observability configuration.
func (o ObservabilityConfigurationOutput) ObservabilityConfigurationName() pulumix.Output[string] {
	value := pulumix.Apply[ObservabilityConfiguration](o, func(v ObservabilityConfiguration) pulumix.Output[string] { return v.ObservabilityConfigurationName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The revision of this observability configuration.
func (o ObservabilityConfigurationOutput) ObservabilityConfigurationRevision() pulumix.Output[int] {
	value := pulumix.Apply[ObservabilityConfiguration](o, func(v ObservabilityConfiguration) pulumix.Output[int] { return v.ObservabilityConfigurationRevision })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Current state of the observability configuration. An INACTIVE configuration revision has been deleted and can't be used. It is permanently removed some time after deletion.
func (o ObservabilityConfigurationOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[ObservabilityConfiguration](o, func(v ObservabilityConfiguration) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ObservabilityConfigurationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ObservabilityConfiguration](o, func(v ObservabilityConfiguration) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ObservabilityConfigurationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ObservabilityConfiguration](o, func(v ObservabilityConfiguration) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing. See Trace Configuration below for more details.
func (o ObservabilityConfigurationOutput) TraceConfiguration() pulumix.GPtrOutput[ObservabilityConfigurationTraceConfiguration, ObservabilityConfigurationTraceConfigurationOutput] {
	value := pulumix.Apply[ObservabilityConfiguration](o, func(v ObservabilityConfiguration) pulumix.GPtrOutput[ObservabilityConfigurationTraceConfiguration, ObservabilityConfigurationTraceConfigurationOutput] {
		return v.TraceConfiguration
	})
	unwrapped := pulumix.Flatten[*ObservabilityConfigurationTraceConfiguration, pulumix.GPtrOutput[ObservabilityConfigurationTraceConfiguration, ObservabilityConfigurationTraceConfigurationOutput]](value)
	return pulumix.GPtrOutput[ObservabilityConfigurationTraceConfiguration, ObservabilityConfigurationTraceConfigurationOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ObservabilityConfigurationOutput{})
}
