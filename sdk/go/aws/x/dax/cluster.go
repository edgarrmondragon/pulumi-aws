// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dax

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a DAX Cluster resource.
type Cluster struct {
	pulumi.CustomResourceState

	// The ARN of the DAX cluster
	Arn pulumix.Output[string] `pulumi:"arn"`
	// List of Availability Zones in which the
	// nodes will be created
	AvailabilityZones pulumix.ArrayOutput[string] `pulumi:"availabilityZones"`
	// The DNS name of the DAX cluster without the port appended
	ClusterAddress pulumix.Output[string] `pulumi:"clusterAddress"`
	// The type of encryption the
	// cluster's endpoint should support. Valid values are: `NONE` and `TLS`.
	// Default value is `NONE`.
	ClusterEndpointEncryptionType pulumix.Output[*string] `pulumi:"clusterEndpointEncryptionType"`
	// Group identifier. DAX converts this name to
	// lowercase
	ClusterName pulumix.Output[string] `pulumi:"clusterName"`
	// The configuration endpoint for this DAX cluster,
	// consisting of a DNS name and a port number
	ConfigurationEndpoint pulumix.Output[string] `pulumi:"configurationEndpoint"`
	// Description for the cluster
	Description pulumix.Output[*string] `pulumi:"description"`
	// A valid Amazon Resource Name (ARN) that identifies
	// an IAM role. At runtime, DAX will assume this role and use the role's
	// permissions to access DynamoDB on your behalf
	IamRoleArn pulumix.Output[string] `pulumi:"iamRoleArn"`
	// Specifies the weekly time range for when
	// maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
	// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
	// `sun:05:00-sun:09:00`
	MaintenanceWindow pulumix.Output[string] `pulumi:"maintenanceWindow"`
	// The compute and memory capacity of the nodes. See
	// [Nodes](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.concepts.cluster.html#DAX.concepts.nodes) for supported node types
	NodeType pulumix.Output[string] `pulumi:"nodeType"`
	// List of node objects including `id`, `address`, `port` and
	// `availabilityZone`. Referenceable e.g., as
	// `${aws_dax_cluster.test.nodes.0.address}`
	Nodes pulumix.GArrayOutput[ClusterNode, ClusterNodeOutput] `pulumi:"nodes"`
	// An Amazon Resource Name (ARN) of an
	// SNS topic to send DAX notifications to. Example:
	// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
	NotificationTopicArn pulumix.Output[*string] `pulumi:"notificationTopicArn"`
	// Name of the parameter group to associate
	// with this DAX cluster
	ParameterGroupName pulumix.Output[string] `pulumi:"parameterGroupName"`
	// The port used by the configuration endpoint
	Port pulumix.Output[int] `pulumi:"port"`
	// The number of nodes in the DAX cluster. A
	// replication factor of 1 will create a single-node cluster, without any read
	// replicas
	ReplicationFactor pulumix.Output[int] `pulumi:"replicationFactor"`
	// One or more VPC security groups associated
	// with the cluster
	SecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"securityGroupIds"`
	// Encrypt at rest options
	ServerSideEncryption pulumix.GPtrOutput[ClusterServerSideEncryption, ClusterServerSideEncryptionOutput] `pulumi:"serverSideEncryption"`
	// Name of the subnet group to be used for the
	// cluster
	SubnetGroupName pulumix.Output[string] `pulumi:"subnetGroupName"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.IamRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'IamRoleArn'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.ReplicationFactor == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationFactor'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("aws:dax/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws:dax/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// The ARN of the DAX cluster
	Arn *string `pulumi:"arn"`
	// List of Availability Zones in which the
	// nodes will be created
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The DNS name of the DAX cluster without the port appended
	ClusterAddress *string `pulumi:"clusterAddress"`
	// The type of encryption the
	// cluster's endpoint should support. Valid values are: `NONE` and `TLS`.
	// Default value is `NONE`.
	ClusterEndpointEncryptionType *string `pulumi:"clusterEndpointEncryptionType"`
	// Group identifier. DAX converts this name to
	// lowercase
	ClusterName *string `pulumi:"clusterName"`
	// The configuration endpoint for this DAX cluster,
	// consisting of a DNS name and a port number
	ConfigurationEndpoint *string `pulumi:"configurationEndpoint"`
	// Description for the cluster
	Description *string `pulumi:"description"`
	// A valid Amazon Resource Name (ARN) that identifies
	// an IAM role. At runtime, DAX will assume this role and use the role's
	// permissions to access DynamoDB on your behalf
	IamRoleArn *string `pulumi:"iamRoleArn"`
	// Specifies the weekly time range for when
	// maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
	// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
	// `sun:05:00-sun:09:00`
	MaintenanceWindow *string `pulumi:"maintenanceWindow"`
	// The compute and memory capacity of the nodes. See
	// [Nodes](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.concepts.cluster.html#DAX.concepts.nodes) for supported node types
	NodeType *string `pulumi:"nodeType"`
	// List of node objects including `id`, `address`, `port` and
	// `availabilityZone`. Referenceable e.g., as
	// `${aws_dax_cluster.test.nodes.0.address}`
	Nodes []ClusterNode `pulumi:"nodes"`
	// An Amazon Resource Name (ARN) of an
	// SNS topic to send DAX notifications to. Example:
	// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
	NotificationTopicArn *string `pulumi:"notificationTopicArn"`
	// Name of the parameter group to associate
	// with this DAX cluster
	ParameterGroupName *string `pulumi:"parameterGroupName"`
	// The port used by the configuration endpoint
	Port *int `pulumi:"port"`
	// The number of nodes in the DAX cluster. A
	// replication factor of 1 will create a single-node cluster, without any read
	// replicas
	ReplicationFactor *int `pulumi:"replicationFactor"`
	// One or more VPC security groups associated
	// with the cluster
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Encrypt at rest options
	ServerSideEncryption *ClusterServerSideEncryption `pulumi:"serverSideEncryption"`
	// Name of the subnet group to be used for the
	// cluster
	SubnetGroupName *string `pulumi:"subnetGroupName"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ClusterState struct {
	// The ARN of the DAX cluster
	Arn pulumix.Input[*string]
	// List of Availability Zones in which the
	// nodes will be created
	AvailabilityZones pulumix.Input[[]string]
	// The DNS name of the DAX cluster without the port appended
	ClusterAddress pulumix.Input[*string]
	// The type of encryption the
	// cluster's endpoint should support. Valid values are: `NONE` and `TLS`.
	// Default value is `NONE`.
	ClusterEndpointEncryptionType pulumix.Input[*string]
	// Group identifier. DAX converts this name to
	// lowercase
	ClusterName pulumix.Input[*string]
	// The configuration endpoint for this DAX cluster,
	// consisting of a DNS name and a port number
	ConfigurationEndpoint pulumix.Input[*string]
	// Description for the cluster
	Description pulumix.Input[*string]
	// A valid Amazon Resource Name (ARN) that identifies
	// an IAM role. At runtime, DAX will assume this role and use the role's
	// permissions to access DynamoDB on your behalf
	IamRoleArn pulumix.Input[*string]
	// Specifies the weekly time range for when
	// maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
	// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
	// `sun:05:00-sun:09:00`
	MaintenanceWindow pulumix.Input[*string]
	// The compute and memory capacity of the nodes. See
	// [Nodes](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.concepts.cluster.html#DAX.concepts.nodes) for supported node types
	NodeType pulumix.Input[*string]
	// List of node objects including `id`, `address`, `port` and
	// `availabilityZone`. Referenceable e.g., as
	// `${aws_dax_cluster.test.nodes.0.address}`
	Nodes pulumix.Input[[]*ClusterNodeArgs]
	// An Amazon Resource Name (ARN) of an
	// SNS topic to send DAX notifications to. Example:
	// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
	NotificationTopicArn pulumix.Input[*string]
	// Name of the parameter group to associate
	// with this DAX cluster
	ParameterGroupName pulumix.Input[*string]
	// The port used by the configuration endpoint
	Port pulumix.Input[*int]
	// The number of nodes in the DAX cluster. A
	// replication factor of 1 will create a single-node cluster, without any read
	// replicas
	ReplicationFactor pulumix.Input[*int]
	// One or more VPC security groups associated
	// with the cluster
	SecurityGroupIds pulumix.Input[[]string]
	// Encrypt at rest options
	ServerSideEncryption pulumix.Input[*ClusterServerSideEncryptionArgs]
	// Name of the subnet group to be used for the
	// cluster
	SubnetGroupName pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// List of Availability Zones in which the
	// nodes will be created
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The type of encryption the
	// cluster's endpoint should support. Valid values are: `NONE` and `TLS`.
	// Default value is `NONE`.
	ClusterEndpointEncryptionType *string `pulumi:"clusterEndpointEncryptionType"`
	// Group identifier. DAX converts this name to
	// lowercase
	ClusterName string `pulumi:"clusterName"`
	// Description for the cluster
	Description *string `pulumi:"description"`
	// A valid Amazon Resource Name (ARN) that identifies
	// an IAM role. At runtime, DAX will assume this role and use the role's
	// permissions to access DynamoDB on your behalf
	IamRoleArn string `pulumi:"iamRoleArn"`
	// Specifies the weekly time range for when
	// maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
	// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
	// `sun:05:00-sun:09:00`
	MaintenanceWindow *string `pulumi:"maintenanceWindow"`
	// The compute and memory capacity of the nodes. See
	// [Nodes](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.concepts.cluster.html#DAX.concepts.nodes) for supported node types
	NodeType string `pulumi:"nodeType"`
	// An Amazon Resource Name (ARN) of an
	// SNS topic to send DAX notifications to. Example:
	// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
	NotificationTopicArn *string `pulumi:"notificationTopicArn"`
	// Name of the parameter group to associate
	// with this DAX cluster
	ParameterGroupName *string `pulumi:"parameterGroupName"`
	// The number of nodes in the DAX cluster. A
	// replication factor of 1 will create a single-node cluster, without any read
	// replicas
	ReplicationFactor int `pulumi:"replicationFactor"`
	// One or more VPC security groups associated
	// with the cluster
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Encrypt at rest options
	ServerSideEncryption *ClusterServerSideEncryption `pulumi:"serverSideEncryption"`
	// Name of the subnet group to be used for the
	// cluster
	SubnetGroupName *string `pulumi:"subnetGroupName"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// List of Availability Zones in which the
	// nodes will be created
	AvailabilityZones pulumix.Input[[]string]
	// The type of encryption the
	// cluster's endpoint should support. Valid values are: `NONE` and `TLS`.
	// Default value is `NONE`.
	ClusterEndpointEncryptionType pulumix.Input[*string]
	// Group identifier. DAX converts this name to
	// lowercase
	ClusterName pulumix.Input[string]
	// Description for the cluster
	Description pulumix.Input[*string]
	// A valid Amazon Resource Name (ARN) that identifies
	// an IAM role. At runtime, DAX will assume this role and use the role's
	// permissions to access DynamoDB on your behalf
	IamRoleArn pulumix.Input[string]
	// Specifies the weekly time range for when
	// maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
	// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
	// `sun:05:00-sun:09:00`
	MaintenanceWindow pulumix.Input[*string]
	// The compute and memory capacity of the nodes. See
	// [Nodes](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.concepts.cluster.html#DAX.concepts.nodes) for supported node types
	NodeType pulumix.Input[string]
	// An Amazon Resource Name (ARN) of an
	// SNS topic to send DAX notifications to. Example:
	// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
	NotificationTopicArn pulumix.Input[*string]
	// Name of the parameter group to associate
	// with this DAX cluster
	ParameterGroupName pulumix.Input[*string]
	// The number of nodes in the DAX cluster. A
	// replication factor of 1 will create a single-node cluster, without any read
	// replicas
	ReplicationFactor pulumix.Input[int]
	// One or more VPC security groups associated
	// with the cluster
	SecurityGroupIds pulumix.Input[[]string]
	// Encrypt at rest options
	ServerSideEncryption pulumix.Input[*ClusterServerSideEncryptionArgs]
	// Name of the subnet group to be used for the
	// cluster
	SubnetGroupName pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) ToOutput(ctx context.Context) pulumix.Output[Cluster] {
	return pulumix.Output[Cluster]{
		OutputState: o.OutputState,
	}
}

// The ARN of the DAX cluster
func (o ClusterOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of Availability Zones in which the
// nodes will be created
func (o ClusterOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.ArrayOutput[string] { return v.AvailabilityZones })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The DNS name of the DAX cluster without the port appended
func (o ClusterOutput) ClusterAddress() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.ClusterAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of encryption the
// cluster's endpoint should support. Valid values are: `NONE` and `TLS`.
// Default value is `NONE`.
func (o ClusterOutput) ClusterEndpointEncryptionType() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.ClusterEndpointEncryptionType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Group identifier. DAX converts this name to
// lowercase
func (o ClusterOutput) ClusterName() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.ClusterName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The configuration endpoint for this DAX cluster,
// consisting of a DNS name and a port number
func (o ClusterOutput) ConfigurationEndpoint() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.ConfigurationEndpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description for the cluster
func (o ClusterOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A valid Amazon Resource Name (ARN) that identifies
// an IAM role. At runtime, DAX will assume this role and use the role's
// permissions to access DynamoDB on your behalf
func (o ClusterOutput) IamRoleArn() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.IamRoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the weekly time range for when
// maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
// `sun:05:00-sun:09:00`
func (o ClusterOutput) MaintenanceWindow() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.MaintenanceWindow })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The compute and memory capacity of the nodes. See
// [Nodes](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.concepts.cluster.html#DAX.concepts.nodes) for supported node types
func (o ClusterOutput) NodeType() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.NodeType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of node objects including `id`, `address`, `port` and
// `availabilityZone`. Referenceable e.g., as
// `${aws_dax_cluster.test.nodes.0.address}`
func (o ClusterOutput) Nodes() pulumix.GArrayOutput[ClusterNode, ClusterNodeOutput] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.GArrayOutput[ClusterNode, ClusterNodeOutput] { return v.Nodes })
	unwrapped := pulumix.Flatten[[]ClusterNode, pulumix.GArrayOutput[ClusterNode, ClusterNodeOutput]](value)
	return pulumix.GArrayOutput[ClusterNode, ClusterNodeOutput]{OutputState: unwrapped.OutputState}
}

// An Amazon Resource Name (ARN) of an
// SNS topic to send DAX notifications to. Example:
// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
func (o ClusterOutput) NotificationTopicArn() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.NotificationTopicArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the parameter group to associate
// with this DAX cluster
func (o ClusterOutput) ParameterGroupName() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.ParameterGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The port used by the configuration endpoint
func (o ClusterOutput) Port() pulumix.Output[int] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[int] { return v.Port })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The number of nodes in the DAX cluster. A
// replication factor of 1 will create a single-node cluster, without any read
// replicas
func (o ClusterOutput) ReplicationFactor() pulumix.Output[int] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[int] { return v.ReplicationFactor })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// One or more VPC security groups associated
// with the cluster
func (o ClusterOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.ArrayOutput[string] { return v.SecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Encrypt at rest options
func (o ClusterOutput) ServerSideEncryption() pulumix.GPtrOutput[ClusterServerSideEncryption, ClusterServerSideEncryptionOutput] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.GPtrOutput[ClusterServerSideEncryption, ClusterServerSideEncryptionOutput] {
		return v.ServerSideEncryption
	})
	unwrapped := pulumix.Flatten[*ClusterServerSideEncryption, pulumix.GPtrOutput[ClusterServerSideEncryption, ClusterServerSideEncryptionOutput]](value)
	return pulumix.GPtrOutput[ClusterServerSideEncryption, ClusterServerSideEncryptionOutput]{OutputState: unwrapped.OutputState}
}

// Name of the subnet group to be used for the
// cluster
func (o ClusterOutput) SubnetGroupName() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.SubnetGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ClusterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ClusterOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ClusterOutput{})
}
