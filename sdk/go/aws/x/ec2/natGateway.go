// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to create a VPC NAT Gateway.
type NatGateway struct {
	pulumi.CustomResourceState

	// The Allocation ID of the Elastic IP address for the NAT Gateway. Required for `connectivityType` of `public`.
	AllocationId pulumix.Output[*string] `pulumi:"allocationId"`
	// The association ID of the Elastic IP address that's associated with the NAT Gateway. Only available when `connectivityType` is `public`.
	AssociationId pulumix.Output[string] `pulumi:"associationId"`
	// Connectivity type for the NAT Gateway. Valid values are `private` and `public`. Defaults to `public`.
	ConnectivityType pulumix.Output[*string] `pulumi:"connectivityType"`
	// The ID of the network interface associated with the NAT Gateway.
	NetworkInterfaceId pulumix.Output[string] `pulumi:"networkInterfaceId"`
	// The private IPv4 address to assign to the NAT Gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
	PrivateIp pulumix.Output[string] `pulumi:"privateIp"`
	// The Elastic IP address associated with the NAT Gateway.
	PublicIp pulumix.Output[string] `pulumi:"publicIp"`
	// A list of secondary allocation EIP IDs for this NAT Gateway.
	SecondaryAllocationIds pulumix.ArrayOutput[string] `pulumi:"secondaryAllocationIds"`
	// [Private NAT Gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT Gateway.
	SecondaryPrivateIpAddressCount pulumix.Output[int] `pulumi:"secondaryPrivateIpAddressCount"`
	// A list of secondary private IPv4 addresses to assign to the NAT Gateway.
	SecondaryPrivateIpAddresses pulumix.ArrayOutput[string] `pulumi:"secondaryPrivateIpAddresses"`
	// The Subnet ID of the subnet in which to place the NAT Gateway.
	SubnetId pulumix.Output[string] `pulumi:"subnetId"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewNatGateway registers a new resource with the given unique name, arguments, and options.
func NewNatGateway(ctx *pulumi.Context,
	name string, args *NatGatewayArgs, opts ...pulumi.ResourceOption) (*NatGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NatGateway
	err := ctx.RegisterResource("aws:ec2/natGateway:NatGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatGateway gets an existing NatGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatGatewayState, opts ...pulumi.ResourceOption) (*NatGateway, error) {
	var resource NatGateway
	err := ctx.ReadResource("aws:ec2/natGateway:NatGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NatGateway resources.
type natGatewayState struct {
	// The Allocation ID of the Elastic IP address for the NAT Gateway. Required for `connectivityType` of `public`.
	AllocationId *string `pulumi:"allocationId"`
	// The association ID of the Elastic IP address that's associated with the NAT Gateway. Only available when `connectivityType` is `public`.
	AssociationId *string `pulumi:"associationId"`
	// Connectivity type for the NAT Gateway. Valid values are `private` and `public`. Defaults to `public`.
	ConnectivityType *string `pulumi:"connectivityType"`
	// The ID of the network interface associated with the NAT Gateway.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The private IPv4 address to assign to the NAT Gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
	PrivateIp *string `pulumi:"privateIp"`
	// The Elastic IP address associated with the NAT Gateway.
	PublicIp *string `pulumi:"publicIp"`
	// A list of secondary allocation EIP IDs for this NAT Gateway.
	SecondaryAllocationIds []string `pulumi:"secondaryAllocationIds"`
	// [Private NAT Gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT Gateway.
	SecondaryPrivateIpAddressCount *int `pulumi:"secondaryPrivateIpAddressCount"`
	// A list of secondary private IPv4 addresses to assign to the NAT Gateway.
	SecondaryPrivateIpAddresses []string `pulumi:"secondaryPrivateIpAddresses"`
	// The Subnet ID of the subnet in which to place the NAT Gateway.
	SubnetId *string `pulumi:"subnetId"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type NatGatewayState struct {
	// The Allocation ID of the Elastic IP address for the NAT Gateway. Required for `connectivityType` of `public`.
	AllocationId pulumix.Input[*string]
	// The association ID of the Elastic IP address that's associated with the NAT Gateway. Only available when `connectivityType` is `public`.
	AssociationId pulumix.Input[*string]
	// Connectivity type for the NAT Gateway. Valid values are `private` and `public`. Defaults to `public`.
	ConnectivityType pulumix.Input[*string]
	// The ID of the network interface associated with the NAT Gateway.
	NetworkInterfaceId pulumix.Input[*string]
	// The private IPv4 address to assign to the NAT Gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
	PrivateIp pulumix.Input[*string]
	// The Elastic IP address associated with the NAT Gateway.
	PublicIp pulumix.Input[*string]
	// A list of secondary allocation EIP IDs for this NAT Gateway.
	SecondaryAllocationIds pulumix.Input[[]string]
	// [Private NAT Gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT Gateway.
	SecondaryPrivateIpAddressCount pulumix.Input[*int]
	// A list of secondary private IPv4 addresses to assign to the NAT Gateway.
	SecondaryPrivateIpAddresses pulumix.Input[[]string]
	// The Subnet ID of the subnet in which to place the NAT Gateway.
	SubnetId pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (NatGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*natGatewayState)(nil)).Elem()
}

type natGatewayArgs struct {
	// The Allocation ID of the Elastic IP address for the NAT Gateway. Required for `connectivityType` of `public`.
	AllocationId *string `pulumi:"allocationId"`
	// Connectivity type for the NAT Gateway. Valid values are `private` and `public`. Defaults to `public`.
	ConnectivityType *string `pulumi:"connectivityType"`
	// The private IPv4 address to assign to the NAT Gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
	PrivateIp *string `pulumi:"privateIp"`
	// A list of secondary allocation EIP IDs for this NAT Gateway.
	SecondaryAllocationIds []string `pulumi:"secondaryAllocationIds"`
	// [Private NAT Gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT Gateway.
	SecondaryPrivateIpAddressCount *int `pulumi:"secondaryPrivateIpAddressCount"`
	// A list of secondary private IPv4 addresses to assign to the NAT Gateway.
	SecondaryPrivateIpAddresses []string `pulumi:"secondaryPrivateIpAddresses"`
	// The Subnet ID of the subnet in which to place the NAT Gateway.
	SubnetId string `pulumi:"subnetId"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a NatGateway resource.
type NatGatewayArgs struct {
	// The Allocation ID of the Elastic IP address for the NAT Gateway. Required for `connectivityType` of `public`.
	AllocationId pulumix.Input[*string]
	// Connectivity type for the NAT Gateway. Valid values are `private` and `public`. Defaults to `public`.
	ConnectivityType pulumix.Input[*string]
	// The private IPv4 address to assign to the NAT Gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
	PrivateIp pulumix.Input[*string]
	// A list of secondary allocation EIP IDs for this NAT Gateway.
	SecondaryAllocationIds pulumix.Input[[]string]
	// [Private NAT Gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT Gateway.
	SecondaryPrivateIpAddressCount pulumix.Input[*int]
	// A list of secondary private IPv4 addresses to assign to the NAT Gateway.
	SecondaryPrivateIpAddresses pulumix.Input[[]string]
	// The Subnet ID of the subnet in which to place the NAT Gateway.
	SubnetId pulumix.Input[string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (NatGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natGatewayArgs)(nil)).Elem()
}

type NatGatewayOutput struct{ *pulumi.OutputState }

func (NatGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NatGateway)(nil)).Elem()
}

func (o NatGatewayOutput) ToNatGatewayOutput() NatGatewayOutput {
	return o
}

func (o NatGatewayOutput) ToNatGatewayOutputWithContext(ctx context.Context) NatGatewayOutput {
	return o
}

func (o NatGatewayOutput) ToOutput(ctx context.Context) pulumix.Output[NatGateway] {
	return pulumix.Output[NatGateway]{
		OutputState: o.OutputState,
	}
}

// The Allocation ID of the Elastic IP address for the NAT Gateway. Required for `connectivityType` of `public`.
func (o NatGatewayOutput) AllocationId() pulumix.Output[*string] {
	value := pulumix.Apply[NatGateway](o, func(v NatGateway) pulumix.Output[*string] { return v.AllocationId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The association ID of the Elastic IP address that's associated with the NAT Gateway. Only available when `connectivityType` is `public`.
func (o NatGatewayOutput) AssociationId() pulumix.Output[string] {
	value := pulumix.Apply[NatGateway](o, func(v NatGateway) pulumix.Output[string] { return v.AssociationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Connectivity type for the NAT Gateway. Valid values are `private` and `public`. Defaults to `public`.
func (o NatGatewayOutput) ConnectivityType() pulumix.Output[*string] {
	value := pulumix.Apply[NatGateway](o, func(v NatGateway) pulumix.Output[*string] { return v.ConnectivityType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the network interface associated with the NAT Gateway.
func (o NatGatewayOutput) NetworkInterfaceId() pulumix.Output[string] {
	value := pulumix.Apply[NatGateway](o, func(v NatGateway) pulumix.Output[string] { return v.NetworkInterfaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The private IPv4 address to assign to the NAT Gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
func (o NatGatewayOutput) PrivateIp() pulumix.Output[string] {
	value := pulumix.Apply[NatGateway](o, func(v NatGateway) pulumix.Output[string] { return v.PrivateIp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Elastic IP address associated with the NAT Gateway.
func (o NatGatewayOutput) PublicIp() pulumix.Output[string] {
	value := pulumix.Apply[NatGateway](o, func(v NatGateway) pulumix.Output[string] { return v.PublicIp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of secondary allocation EIP IDs for this NAT Gateway.
func (o NatGatewayOutput) SecondaryAllocationIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NatGateway](o, func(v NatGateway) pulumix.ArrayOutput[string] { return v.SecondaryAllocationIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// [Private NAT Gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT Gateway.
func (o NatGatewayOutput) SecondaryPrivateIpAddressCount() pulumix.Output[int] {
	value := pulumix.Apply[NatGateway](o, func(v NatGateway) pulumix.Output[int] { return v.SecondaryPrivateIpAddressCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// A list of secondary private IPv4 addresses to assign to the NAT Gateway.
func (o NatGatewayOutput) SecondaryPrivateIpAddresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NatGateway](o, func(v NatGateway) pulumix.ArrayOutput[string] { return v.SecondaryPrivateIpAddresses })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The Subnet ID of the subnet in which to place the NAT Gateway.
func (o NatGatewayOutput) SubnetId() pulumix.Output[string] {
	value := pulumix.Apply[NatGateway](o, func(v NatGateway) pulumix.Output[string] { return v.SubnetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o NatGatewayOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[NatGateway](o, func(v NatGateway) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o NatGatewayOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[NatGateway](o, func(v NatGateway) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(NatGatewayOutput{})
}
