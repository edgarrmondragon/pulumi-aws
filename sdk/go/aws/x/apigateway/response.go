// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an API Gateway Gateway Response for a REST API Gateway.
type Response struct {
	pulumi.CustomResourceState

	// Map of parameters (paths, query strings and headers) of the Gateway Response.
	ResponseParameters pulumix.MapOutput[string] `pulumi:"responseParameters"`
	// Map of templates used to transform the response body.
	ResponseTemplates pulumix.MapOutput[string] `pulumi:"responseTemplates"`
	// Response type of the associated GatewayResponse.
	ResponseType pulumix.Output[string] `pulumi:"responseType"`
	// String identifier of the associated REST API.
	RestApiId pulumix.Output[string] `pulumi:"restApiId"`
	// HTTP status code of the Gateway Response.
	StatusCode pulumix.Output[*string] `pulumi:"statusCode"`
}

// NewResponse registers a new resource with the given unique name, arguments, and options.
func NewResponse(ctx *pulumi.Context,
	name string, args *ResponseArgs, opts ...pulumi.ResourceOption) (*Response, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResponseType == nil {
		return nil, errors.New("invalid value for required argument 'ResponseType'")
	}
	if args.RestApiId == nil {
		return nil, errors.New("invalid value for required argument 'RestApiId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Response
	err := ctx.RegisterResource("aws:apigateway/response:Response", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResponse gets an existing Response resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResponse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResponseState, opts ...pulumi.ResourceOption) (*Response, error) {
	var resource Response
	err := ctx.ReadResource("aws:apigateway/response:Response", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Response resources.
type responseState struct {
	// Map of parameters (paths, query strings and headers) of the Gateway Response.
	ResponseParameters map[string]string `pulumi:"responseParameters"`
	// Map of templates used to transform the response body.
	ResponseTemplates map[string]string `pulumi:"responseTemplates"`
	// Response type of the associated GatewayResponse.
	ResponseType *string `pulumi:"responseType"`
	// String identifier of the associated REST API.
	RestApiId *string `pulumi:"restApiId"`
	// HTTP status code of the Gateway Response.
	StatusCode *string `pulumi:"statusCode"`
}

type ResponseState struct {
	// Map of parameters (paths, query strings and headers) of the Gateway Response.
	ResponseParameters pulumix.Input[map[string]string]
	// Map of templates used to transform the response body.
	ResponseTemplates pulumix.Input[map[string]string]
	// Response type of the associated GatewayResponse.
	ResponseType pulumix.Input[*string]
	// String identifier of the associated REST API.
	RestApiId pulumix.Input[*string]
	// HTTP status code of the Gateway Response.
	StatusCode pulumix.Input[*string]
}

func (ResponseState) ElementType() reflect.Type {
	return reflect.TypeOf((*responseState)(nil)).Elem()
}

type responseArgs struct {
	// Map of parameters (paths, query strings and headers) of the Gateway Response.
	ResponseParameters map[string]string `pulumi:"responseParameters"`
	// Map of templates used to transform the response body.
	ResponseTemplates map[string]string `pulumi:"responseTemplates"`
	// Response type of the associated GatewayResponse.
	ResponseType string `pulumi:"responseType"`
	// String identifier of the associated REST API.
	RestApiId string `pulumi:"restApiId"`
	// HTTP status code of the Gateway Response.
	StatusCode *string `pulumi:"statusCode"`
}

// The set of arguments for constructing a Response resource.
type ResponseArgs struct {
	// Map of parameters (paths, query strings and headers) of the Gateway Response.
	ResponseParameters pulumix.Input[map[string]string]
	// Map of templates used to transform the response body.
	ResponseTemplates pulumix.Input[map[string]string]
	// Response type of the associated GatewayResponse.
	ResponseType pulumix.Input[string]
	// String identifier of the associated REST API.
	RestApiId pulumix.Input[string]
	// HTTP status code of the Gateway Response.
	StatusCode pulumix.Input[*string]
}

func (ResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*responseArgs)(nil)).Elem()
}

type ResponseOutput struct{ *pulumi.OutputState }

func (ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Response)(nil)).Elem()
}

func (o ResponseOutput) ToResponseOutput() ResponseOutput {
	return o
}

func (o ResponseOutput) ToResponseOutputWithContext(ctx context.Context) ResponseOutput {
	return o
}

func (o ResponseOutput) ToOutput(ctx context.Context) pulumix.Output[Response] {
	return pulumix.Output[Response]{
		OutputState: o.OutputState,
	}
}

// Map of parameters (paths, query strings and headers) of the Gateway Response.
func (o ResponseOutput) ResponseParameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[Response](o, func(v Response) pulumix.MapOutput[string] { return v.ResponseParameters })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of templates used to transform the response body.
func (o ResponseOutput) ResponseTemplates() pulumix.MapOutput[string] {
	value := pulumix.Apply[Response](o, func(v Response) pulumix.MapOutput[string] { return v.ResponseTemplates })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Response type of the associated GatewayResponse.
func (o ResponseOutput) ResponseType() pulumix.Output[string] {
	value := pulumix.Apply[Response](o, func(v Response) pulumix.Output[string] { return v.ResponseType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// String identifier of the associated REST API.
func (o ResponseOutput) RestApiId() pulumix.Output[string] {
	value := pulumix.Apply[Response](o, func(v Response) pulumix.Output[string] { return v.RestApiId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// HTTP status code of the Gateway Response.
func (o ResponseOutput) StatusCode() pulumix.Output[*string] {
	value := pulumix.Apply[Response](o, func(v Response) pulumix.Output[*string] { return v.StatusCode })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(ResponseOutput{})
}
