// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2clientvpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides additional routes for AWS Client VPN endpoints. For more information on usage, please see the
// [AWS Client VPN Administrator's Guide](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/what-is.html).
type Route struct {
	pulumi.CustomResourceState

	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId pulumix.Output[string] `pulumi:"clientVpnEndpointId"`
	// A brief description of the route.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The IPv4 address range, in CIDR notation, of the route destination.
	DestinationCidrBlock pulumix.Output[string] `pulumi:"destinationCidrBlock"`
	// Indicates how the Client VPN route was added. Will be `add-route` for routes created by this resource.
	Origin pulumix.Output[string] `pulumi:"origin"`
	// The ID of the Subnet to route the traffic through. It must already be attached to the Client VPN.
	TargetVpcSubnetId pulumix.Output[string] `pulumi:"targetVpcSubnetId"`
	// The type of the route.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientVpnEndpointId == nil {
		return nil, errors.New("invalid value for required argument 'ClientVpnEndpointId'")
	}
	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.TargetVpcSubnetId == nil {
		return nil, errors.New("invalid value for required argument 'TargetVpcSubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Route
	err := ctx.RegisterResource("aws:ec2clientvpn/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("aws:ec2clientvpn/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId *string `pulumi:"clientVpnEndpointId"`
	// A brief description of the route.
	Description *string `pulumi:"description"`
	// The IPv4 address range, in CIDR notation, of the route destination.
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// Indicates how the Client VPN route was added. Will be `add-route` for routes created by this resource.
	Origin *string `pulumi:"origin"`
	// The ID of the Subnet to route the traffic through. It must already be attached to the Client VPN.
	TargetVpcSubnetId *string `pulumi:"targetVpcSubnetId"`
	// The type of the route.
	Type *string `pulumi:"type"`
}

type RouteState struct {
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId pulumix.Input[*string]
	// A brief description of the route.
	Description pulumix.Input[*string]
	// The IPv4 address range, in CIDR notation, of the route destination.
	DestinationCidrBlock pulumix.Input[*string]
	// Indicates how the Client VPN route was added. Will be `add-route` for routes created by this resource.
	Origin pulumix.Input[*string]
	// The ID of the Subnet to route the traffic through. It must already be attached to the Client VPN.
	TargetVpcSubnetId pulumix.Input[*string]
	// The type of the route.
	Type pulumix.Input[*string]
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId string `pulumi:"clientVpnEndpointId"`
	// A brief description of the route.
	Description *string `pulumi:"description"`
	// The IPv4 address range, in CIDR notation, of the route destination.
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// The ID of the Subnet to route the traffic through. It must already be attached to the Client VPN.
	TargetVpcSubnetId string `pulumi:"targetVpcSubnetId"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId pulumix.Input[string]
	// A brief description of the route.
	Description pulumix.Input[*string]
	// The IPv4 address range, in CIDR notation, of the route destination.
	DestinationCidrBlock pulumix.Input[string]
	// The ID of the Subnet to route the traffic through. It must already be attached to the Client VPN.
	TargetVpcSubnetId pulumix.Input[string]
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

func (o RouteOutput) ToOutput(ctx context.Context) pulumix.Output[Route] {
	return pulumix.Output[Route]{
		OutputState: o.OutputState,
	}
}

// The ID of the Client VPN endpoint.
func (o RouteOutput) ClientVpnEndpointId() pulumix.Output[string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[string] { return v.ClientVpnEndpointId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A brief description of the route.
func (o RouteOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The IPv4 address range, in CIDR notation, of the route destination.
func (o RouteOutput) DestinationCidrBlock() pulumix.Output[string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[string] { return v.DestinationCidrBlock })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates how the Client VPN route was added. Will be `add-route` for routes created by this resource.
func (o RouteOutput) Origin() pulumix.Output[string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[string] { return v.Origin })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the Subnet to route the traffic through. It must already be attached to the Client VPN.
func (o RouteOutput) TargetVpcSubnetId() pulumix.Output[string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[string] { return v.TargetVpcSubnetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of the route.
func (o RouteOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RouteOutput{})
}
