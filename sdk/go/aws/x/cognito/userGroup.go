// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Cognito User Group resource.
type UserGroup struct {
	pulumi.CustomResourceState

	// The description of the user group.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The name of the user group.
	Name pulumix.Output[string] `pulumi:"name"`
	// The precedence of the user group.
	Precedence pulumix.Output[*int] `pulumi:"precedence"`
	// The ARN of the IAM role to be associated with the user group.
	RoleArn pulumix.Output[*string] `pulumi:"roleArn"`
	// The user pool ID.
	UserPoolId pulumix.Output[string] `pulumi:"userPoolId"`
}

// NewUserGroup registers a new resource with the given unique name, arguments, and options.
func NewUserGroup(ctx *pulumi.Context,
	name string, args *UserGroupArgs, opts ...pulumi.ResourceOption) (*UserGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserGroup
	err := ctx.RegisterResource("aws:cognito/userGroup:UserGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroup gets an existing UserGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupState, opts ...pulumi.ResourceOption) (*UserGroup, error) {
	var resource UserGroup
	err := ctx.ReadResource("aws:cognito/userGroup:UserGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroup resources.
type userGroupState struct {
	// The description of the user group.
	Description *string `pulumi:"description"`
	// The name of the user group.
	Name *string `pulumi:"name"`
	// The precedence of the user group.
	Precedence *int `pulumi:"precedence"`
	// The ARN of the IAM role to be associated with the user group.
	RoleArn *string `pulumi:"roleArn"`
	// The user pool ID.
	UserPoolId *string `pulumi:"userPoolId"`
}

type UserGroupState struct {
	// The description of the user group.
	Description pulumix.Input[*string]
	// The name of the user group.
	Name pulumix.Input[*string]
	// The precedence of the user group.
	Precedence pulumix.Input[*int]
	// The ARN of the IAM role to be associated with the user group.
	RoleArn pulumix.Input[*string]
	// The user pool ID.
	UserPoolId pulumix.Input[*string]
}

func (UserGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupState)(nil)).Elem()
}

type userGroupArgs struct {
	// The description of the user group.
	Description *string `pulumi:"description"`
	// The name of the user group.
	Name *string `pulumi:"name"`
	// The precedence of the user group.
	Precedence *int `pulumi:"precedence"`
	// The ARN of the IAM role to be associated with the user group.
	RoleArn *string `pulumi:"roleArn"`
	// The user pool ID.
	UserPoolId string `pulumi:"userPoolId"`
}

// The set of arguments for constructing a UserGroup resource.
type UserGroupArgs struct {
	// The description of the user group.
	Description pulumix.Input[*string]
	// The name of the user group.
	Name pulumix.Input[*string]
	// The precedence of the user group.
	Precedence pulumix.Input[*int]
	// The ARN of the IAM role to be associated with the user group.
	RoleArn pulumix.Input[*string]
	// The user pool ID.
	UserPoolId pulumix.Input[string]
}

func (UserGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupArgs)(nil)).Elem()
}

type UserGroupOutput struct{ *pulumi.OutputState }

func (UserGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroup)(nil)).Elem()
}

func (o UserGroupOutput) ToUserGroupOutput() UserGroupOutput {
	return o
}

func (o UserGroupOutput) ToUserGroupOutputWithContext(ctx context.Context) UserGroupOutput {
	return o
}

func (o UserGroupOutput) ToOutput(ctx context.Context) pulumix.Output[UserGroup] {
	return pulumix.Output[UserGroup]{
		OutputState: o.OutputState,
	}
}

// The description of the user group.
func (o UserGroupOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[UserGroup](o, func(v UserGroup) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the user group.
func (o UserGroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[UserGroup](o, func(v UserGroup) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The precedence of the user group.
func (o UserGroupOutput) Precedence() pulumix.Output[*int] {
	value := pulumix.Apply[UserGroup](o, func(v UserGroup) pulumix.Output[*int] { return v.Precedence })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The ARN of the IAM role to be associated with the user group.
func (o UserGroupOutput) RoleArn() pulumix.Output[*string] {
	value := pulumix.Apply[UserGroup](o, func(v UserGroup) pulumix.Output[*string] { return v.RoleArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The user pool ID.
func (o UserGroupOutput) UserPoolId() pulumix.Output[string] {
	value := pulumix.Apply[UserGroup](o, func(v UserGroup) pulumix.Output[string] { return v.UserPoolId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(UserGroupOutput{})
}
