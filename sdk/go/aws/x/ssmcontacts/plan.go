// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssmcontacts

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS SSM Contact Plan.
type Plan struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	ContactId pulumix.Output[string] `pulumi:"contactId"`
	// List of stages. A contact has an engagement plan with stages that contact specified contact channels. An escalation plan uses stages that contact specified contacts.
	Stages pulumix.GArrayOutput[PlanStage, PlanStageOutput] `pulumi:"stages"`
}

// NewPlan registers a new resource with the given unique name, arguments, and options.
func NewPlan(ctx *pulumi.Context,
	name string, args *PlanArgs, opts ...pulumi.ResourceOption) (*Plan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContactId == nil {
		return nil, errors.New("invalid value for required argument 'ContactId'")
	}
	if args.Stages == nil {
		return nil, errors.New("invalid value for required argument 'Stages'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Plan
	err := ctx.RegisterResource("aws:ssmcontacts/plan:Plan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlan gets an existing Plan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlanState, opts ...pulumi.ResourceOption) (*Plan, error) {
	var resource Plan
	err := ctx.ReadResource("aws:ssmcontacts/plan:Plan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Plan resources.
type planState struct {
	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	ContactId *string `pulumi:"contactId"`
	// List of stages. A contact has an engagement plan with stages that contact specified contact channels. An escalation plan uses stages that contact specified contacts.
	Stages []PlanStage `pulumi:"stages"`
}

type PlanState struct {
	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	ContactId pulumix.Input[*string]
	// List of stages. A contact has an engagement plan with stages that contact specified contact channels. An escalation plan uses stages that contact specified contacts.
	Stages pulumix.Input[[]*PlanStageArgs]
}

func (PlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*planState)(nil)).Elem()
}

type planArgs struct {
	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	ContactId string `pulumi:"contactId"`
	// List of stages. A contact has an engagement plan with stages that contact specified contact channels. An escalation plan uses stages that contact specified contacts.
	Stages []PlanStage `pulumi:"stages"`
}

// The set of arguments for constructing a Plan resource.
type PlanArgs struct {
	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	ContactId pulumix.Input[string]
	// List of stages. A contact has an engagement plan with stages that contact specified contact channels. An escalation plan uses stages that contact specified contacts.
	Stages pulumix.Input[[]*PlanStageArgs]
}

func (PlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*planArgs)(nil)).Elem()
}

type PlanOutput struct{ *pulumi.OutputState }

func (PlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Plan)(nil)).Elem()
}

func (o PlanOutput) ToPlanOutput() PlanOutput {
	return o
}

func (o PlanOutput) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return o
}

func (o PlanOutput) ToOutput(ctx context.Context) pulumix.Output[Plan] {
	return pulumix.Output[Plan]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the contact or escalation plan.
func (o PlanOutput) ContactId() pulumix.Output[string] {
	value := pulumix.Apply[Plan](o, func(v Plan) pulumix.Output[string] { return v.ContactId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of stages. A contact has an engagement plan with stages that contact specified contact channels. An escalation plan uses stages that contact specified contacts.
func (o PlanOutput) Stages() pulumix.GArrayOutput[PlanStage, PlanStageOutput] {
	value := pulumix.Apply[Plan](o, func(v Plan) pulumix.GArrayOutput[PlanStage, PlanStageOutput] { return v.Stages })
	unwrapped := pulumix.Flatten[[]PlanStage, pulumix.GArrayOutput[PlanStage, PlanStageOutput]](value)
	return pulumix.GArrayOutput[PlanStage, PlanStageOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(PlanOutput{})
}
