// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an ECS task set - effectively a task that is expected to run until an error occurs or a user terminates it (typically a webserver or a database).
//
// See [ECS Task Set section in AWS developer guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-external.html).
type TaskSet struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) that identifies the task set.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The capacity provider strategy to use for the service. Can be one or more.  Defined below.
	CapacityProviderStrategies pulumix.GArrayOutput[TaskSetCapacityProviderStrategy, TaskSetCapacityProviderStrategyOutput] `pulumi:"capacityProviderStrategies"`
	// The short name or ARN of the cluster that hosts the service to create the task set in.
	Cluster pulumix.Output[string] `pulumi:"cluster"`
	// The external ID associated with the task set.
	ExternalId pulumix.Output[string] `pulumi:"externalId"`
	// Whether to allow deleting the task set without waiting for scaling down to 0. You can force a task set to delete even if it's in the process of scaling a resource. Normally, the provider drains all the tasks before deleting the task set. This bypasses that behavior and potentially leaves resources dangling.
	ForceDelete pulumix.Output[*bool] `pulumi:"forceDelete"`
	// The launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
	LaunchType pulumix.Output[string] `pulumi:"launchType"`
	// Details on load balancers that are used with a task set. Detailed below.
	LoadBalancers pulumix.GArrayOutput[TaskSetLoadBalancer, TaskSetLoadBalancerOutput] `pulumi:"loadBalancers"`
	// The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. Detailed below.
	NetworkConfiguration pulumix.GPtrOutput[TaskSetNetworkConfiguration, TaskSetNetworkConfigurationOutput] `pulumi:"networkConfiguration"`
	// The platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumix.Output[string] `pulumi:"platformVersion"`
	// A floating-point percentage of the desired number of tasks to place and keep running in the task set. Detailed below.
	Scale pulumix.GPtrOutput[TaskSetScale, TaskSetScaleOutput] `pulumi:"scale"`
	// The short name or ARN of the ECS service.
	Service pulumix.Output[string] `pulumi:"service"`
	// The service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`. Detailed below.
	ServiceRegistries pulumix.GPtrOutput[TaskSetServiceRegistries, TaskSetServiceRegistriesOutput] `pulumi:"serviceRegistries"`
	// The stability status. This indicates whether the task set has reached a steady state.
	StabilityStatus pulumix.Output[string] `pulumi:"stabilityStatus"`
	// The status of the task set.
	Status pulumix.Output[string] `pulumi:"status"`
	// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
	//
	// The following arguments are optional:
	TaskDefinition pulumix.Output[string] `pulumi:"taskDefinition"`
	// The ID of the task set.
	TaskSetId pulumix.Output[string] `pulumi:"taskSetId"`
	// Whether the provider should wait until the task set has reached `STEADY_STATE`.
	WaitUntilStable pulumix.Output[*bool] `pulumi:"waitUntilStable"`
	// Wait timeout for task set to reach `STEADY_STATE`. Valid time units include `ns`, `us` (or `µs`), `ms`, `s`, `m`, and `h`. Default `10m`.
	WaitUntilStableTimeout pulumix.Output[*string] `pulumi:"waitUntilStableTimeout"`
}

// NewTaskSet registers a new resource with the given unique name, arguments, and options.
func NewTaskSet(ctx *pulumi.Context,
	name string, args *TaskSetArgs, opts ...pulumi.ResourceOption) (*TaskSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.TaskDefinition == nil {
		return nil, errors.New("invalid value for required argument 'TaskDefinition'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TaskSet
	err := ctx.RegisterResource("aws:ecs/taskSet:TaskSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTaskSet gets an existing TaskSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTaskSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskSetState, opts ...pulumi.ResourceOption) (*TaskSet, error) {
	var resource TaskSet
	err := ctx.ReadResource("aws:ecs/taskSet:TaskSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TaskSet resources.
type taskSetState struct {
	// The Amazon Resource Name (ARN) that identifies the task set.
	Arn *string `pulumi:"arn"`
	// The capacity provider strategy to use for the service. Can be one or more.  Defined below.
	CapacityProviderStrategies []TaskSetCapacityProviderStrategy `pulumi:"capacityProviderStrategies"`
	// The short name or ARN of the cluster that hosts the service to create the task set in.
	Cluster *string `pulumi:"cluster"`
	// The external ID associated with the task set.
	ExternalId *string `pulumi:"externalId"`
	// Whether to allow deleting the task set without waiting for scaling down to 0. You can force a task set to delete even if it's in the process of scaling a resource. Normally, the provider drains all the tasks before deleting the task set. This bypasses that behavior and potentially leaves resources dangling.
	ForceDelete *bool `pulumi:"forceDelete"`
	// The launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
	LaunchType *string `pulumi:"launchType"`
	// Details on load balancers that are used with a task set. Detailed below.
	LoadBalancers []TaskSetLoadBalancer `pulumi:"loadBalancers"`
	// The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. Detailed below.
	NetworkConfiguration *TaskSetNetworkConfiguration `pulumi:"networkConfiguration"`
	// The platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion *string `pulumi:"platformVersion"`
	// A floating-point percentage of the desired number of tasks to place and keep running in the task set. Detailed below.
	Scale *TaskSetScale `pulumi:"scale"`
	// The short name or ARN of the ECS service.
	Service *string `pulumi:"service"`
	// The service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`. Detailed below.
	ServiceRegistries *TaskSetServiceRegistries `pulumi:"serviceRegistries"`
	// The stability status. This indicates whether the task set has reached a steady state.
	StabilityStatus *string `pulumi:"stabilityStatus"`
	// The status of the task set.
	Status *string `pulumi:"status"`
	// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
	//
	// The following arguments are optional:
	TaskDefinition *string `pulumi:"taskDefinition"`
	// The ID of the task set.
	TaskSetId *string `pulumi:"taskSetId"`
	// Whether the provider should wait until the task set has reached `STEADY_STATE`.
	WaitUntilStable *bool `pulumi:"waitUntilStable"`
	// Wait timeout for task set to reach `STEADY_STATE`. Valid time units include `ns`, `us` (or `µs`), `ms`, `s`, `m`, and `h`. Default `10m`.
	WaitUntilStableTimeout *string `pulumi:"waitUntilStableTimeout"`
}

type TaskSetState struct {
	// The Amazon Resource Name (ARN) that identifies the task set.
	Arn pulumix.Input[*string]
	// The capacity provider strategy to use for the service. Can be one or more.  Defined below.
	CapacityProviderStrategies pulumix.Input[[]*TaskSetCapacityProviderStrategyArgs]
	// The short name or ARN of the cluster that hosts the service to create the task set in.
	Cluster pulumix.Input[*string]
	// The external ID associated with the task set.
	ExternalId pulumix.Input[*string]
	// Whether to allow deleting the task set without waiting for scaling down to 0. You can force a task set to delete even if it's in the process of scaling a resource. Normally, the provider drains all the tasks before deleting the task set. This bypasses that behavior and potentially leaves resources dangling.
	ForceDelete pulumix.Input[*bool]
	// The launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
	LaunchType pulumix.Input[*string]
	// Details on load balancers that are used with a task set. Detailed below.
	LoadBalancers pulumix.Input[[]*TaskSetLoadBalancerArgs]
	// The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. Detailed below.
	NetworkConfiguration pulumix.Input[*TaskSetNetworkConfigurationArgs]
	// The platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumix.Input[*string]
	// A floating-point percentage of the desired number of tasks to place and keep running in the task set. Detailed below.
	Scale pulumix.Input[*TaskSetScaleArgs]
	// The short name or ARN of the ECS service.
	Service pulumix.Input[*string]
	// The service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`. Detailed below.
	ServiceRegistries pulumix.Input[*TaskSetServiceRegistriesArgs]
	// The stability status. This indicates whether the task set has reached a steady state.
	StabilityStatus pulumix.Input[*string]
	// The status of the task set.
	Status pulumix.Input[*string]
	// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
	//
	// The following arguments are optional:
	TaskDefinition pulumix.Input[*string]
	// The ID of the task set.
	TaskSetId pulumix.Input[*string]
	// Whether the provider should wait until the task set has reached `STEADY_STATE`.
	WaitUntilStable pulumix.Input[*bool]
	// Wait timeout for task set to reach `STEADY_STATE`. Valid time units include `ns`, `us` (or `µs`), `ms`, `s`, `m`, and `h`. Default `10m`.
	WaitUntilStableTimeout pulumix.Input[*string]
}

func (TaskSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskSetState)(nil)).Elem()
}

type taskSetArgs struct {
	// The capacity provider strategy to use for the service. Can be one or more.  Defined below.
	CapacityProviderStrategies []TaskSetCapacityProviderStrategy `pulumi:"capacityProviderStrategies"`
	// The short name or ARN of the cluster that hosts the service to create the task set in.
	Cluster string `pulumi:"cluster"`
	// The external ID associated with the task set.
	ExternalId *string `pulumi:"externalId"`
	// Whether to allow deleting the task set without waiting for scaling down to 0. You can force a task set to delete even if it's in the process of scaling a resource. Normally, the provider drains all the tasks before deleting the task set. This bypasses that behavior and potentially leaves resources dangling.
	ForceDelete *bool `pulumi:"forceDelete"`
	// The launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
	LaunchType *string `pulumi:"launchType"`
	// Details on load balancers that are used with a task set. Detailed below.
	LoadBalancers []TaskSetLoadBalancer `pulumi:"loadBalancers"`
	// The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. Detailed below.
	NetworkConfiguration *TaskSetNetworkConfiguration `pulumi:"networkConfiguration"`
	// The platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion *string `pulumi:"platformVersion"`
	// A floating-point percentage of the desired number of tasks to place and keep running in the task set. Detailed below.
	Scale *TaskSetScale `pulumi:"scale"`
	// The short name or ARN of the ECS service.
	Service string `pulumi:"service"`
	// The service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`. Detailed below.
	ServiceRegistries *TaskSetServiceRegistries `pulumi:"serviceRegistries"`
	// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags map[string]string `pulumi:"tags"`
	// The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
	//
	// The following arguments are optional:
	TaskDefinition string `pulumi:"taskDefinition"`
	// Whether the provider should wait until the task set has reached `STEADY_STATE`.
	WaitUntilStable *bool `pulumi:"waitUntilStable"`
	// Wait timeout for task set to reach `STEADY_STATE`. Valid time units include `ns`, `us` (or `µs`), `ms`, `s`, `m`, and `h`. Default `10m`.
	WaitUntilStableTimeout *string `pulumi:"waitUntilStableTimeout"`
}

// The set of arguments for constructing a TaskSet resource.
type TaskSetArgs struct {
	// The capacity provider strategy to use for the service. Can be one or more.  Defined below.
	CapacityProviderStrategies pulumix.Input[[]*TaskSetCapacityProviderStrategyArgs]
	// The short name or ARN of the cluster that hosts the service to create the task set in.
	Cluster pulumix.Input[string]
	// The external ID associated with the task set.
	ExternalId pulumix.Input[*string]
	// Whether to allow deleting the task set without waiting for scaling down to 0. You can force a task set to delete even if it's in the process of scaling a resource. Normally, the provider drains all the tasks before deleting the task set. This bypasses that behavior and potentially leaves resources dangling.
	ForceDelete pulumix.Input[*bool]
	// The launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
	LaunchType pulumix.Input[*string]
	// Details on load balancers that are used with a task set. Detailed below.
	LoadBalancers pulumix.Input[[]*TaskSetLoadBalancerArgs]
	// The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. Detailed below.
	NetworkConfiguration pulumix.Input[*TaskSetNetworkConfigurationArgs]
	// The platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumix.Input[*string]
	// A floating-point percentage of the desired number of tasks to place and keep running in the task set. Detailed below.
	Scale pulumix.Input[*TaskSetScaleArgs]
	// The short name or ARN of the ECS service.
	Service pulumix.Input[string]
	// The service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`. Detailed below.
	ServiceRegistries pulumix.Input[*TaskSetServiceRegistriesArgs]
	// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags pulumix.Input[map[string]string]
	// The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
	//
	// The following arguments are optional:
	TaskDefinition pulumix.Input[string]
	// Whether the provider should wait until the task set has reached `STEADY_STATE`.
	WaitUntilStable pulumix.Input[*bool]
	// Wait timeout for task set to reach `STEADY_STATE`. Valid time units include `ns`, `us` (or `µs`), `ms`, `s`, `m`, and `h`. Default `10m`.
	WaitUntilStableTimeout pulumix.Input[*string]
}

func (TaskSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskSetArgs)(nil)).Elem()
}

type TaskSetOutput struct{ *pulumi.OutputState }

func (TaskSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSet)(nil)).Elem()
}

func (o TaskSetOutput) ToTaskSetOutput() TaskSetOutput {
	return o
}

func (o TaskSetOutput) ToTaskSetOutputWithContext(ctx context.Context) TaskSetOutput {
	return o
}

func (o TaskSetOutput) ToOutput(ctx context.Context) pulumix.Output[TaskSet] {
	return pulumix.Output[TaskSet]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) that identifies the task set.
func (o TaskSetOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The capacity provider strategy to use for the service. Can be one or more.  Defined below.
func (o TaskSetOutput) CapacityProviderStrategies() pulumix.GArrayOutput[TaskSetCapacityProviderStrategy, TaskSetCapacityProviderStrategyOutput] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.GArrayOutput[TaskSetCapacityProviderStrategy, TaskSetCapacityProviderStrategyOutput] {
		return v.CapacityProviderStrategies
	})
	unwrapped := pulumix.Flatten[[]TaskSetCapacityProviderStrategy, pulumix.GArrayOutput[TaskSetCapacityProviderStrategy, TaskSetCapacityProviderStrategyOutput]](value)
	return pulumix.GArrayOutput[TaskSetCapacityProviderStrategy, TaskSetCapacityProviderStrategyOutput]{OutputState: unwrapped.OutputState}
}

// The short name or ARN of the cluster that hosts the service to create the task set in.
func (o TaskSetOutput) Cluster() pulumix.Output[string] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.Output[string] { return v.Cluster })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The external ID associated with the task set.
func (o TaskSetOutput) ExternalId() pulumix.Output[string] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.Output[string] { return v.ExternalId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to allow deleting the task set without waiting for scaling down to 0. You can force a task set to delete even if it's in the process of scaling a resource. Normally, the provider drains all the tasks before deleting the task set. This bypasses that behavior and potentially leaves resources dangling.
func (o TaskSetOutput) ForceDelete() pulumix.Output[*bool] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.Output[*bool] { return v.ForceDelete })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
func (o TaskSetOutput) LaunchType() pulumix.Output[string] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.Output[string] { return v.LaunchType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Details on load balancers that are used with a task set. Detailed below.
func (o TaskSetOutput) LoadBalancers() pulumix.GArrayOutput[TaskSetLoadBalancer, TaskSetLoadBalancerOutput] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.GArrayOutput[TaskSetLoadBalancer, TaskSetLoadBalancerOutput] {
		return v.LoadBalancers
	})
	unwrapped := pulumix.Flatten[[]TaskSetLoadBalancer, pulumix.GArrayOutput[TaskSetLoadBalancer, TaskSetLoadBalancerOutput]](value)
	return pulumix.GArrayOutput[TaskSetLoadBalancer, TaskSetLoadBalancerOutput]{OutputState: unwrapped.OutputState}
}

// The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. Detailed below.
func (o TaskSetOutput) NetworkConfiguration() pulumix.GPtrOutput[TaskSetNetworkConfiguration, TaskSetNetworkConfigurationOutput] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.GPtrOutput[TaskSetNetworkConfiguration, TaskSetNetworkConfigurationOutput] {
		return v.NetworkConfiguration
	})
	unwrapped := pulumix.Flatten[*TaskSetNetworkConfiguration, pulumix.GPtrOutput[TaskSetNetworkConfiguration, TaskSetNetworkConfigurationOutput]](value)
	return pulumix.GPtrOutput[TaskSetNetworkConfiguration, TaskSetNetworkConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
func (o TaskSetOutput) PlatformVersion() pulumix.Output[string] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.Output[string] { return v.PlatformVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A floating-point percentage of the desired number of tasks to place and keep running in the task set. Detailed below.
func (o TaskSetOutput) Scale() pulumix.GPtrOutput[TaskSetScale, TaskSetScaleOutput] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.GPtrOutput[TaskSetScale, TaskSetScaleOutput] { return v.Scale })
	unwrapped := pulumix.Flatten[*TaskSetScale, pulumix.GPtrOutput[TaskSetScale, TaskSetScaleOutput]](value)
	return pulumix.GPtrOutput[TaskSetScale, TaskSetScaleOutput]{OutputState: unwrapped.OutputState}
}

// The short name or ARN of the ECS service.
func (o TaskSetOutput) Service() pulumix.Output[string] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.Output[string] { return v.Service })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`. Detailed below.
func (o TaskSetOutput) ServiceRegistries() pulumix.GPtrOutput[TaskSetServiceRegistries, TaskSetServiceRegistriesOutput] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.GPtrOutput[TaskSetServiceRegistries, TaskSetServiceRegistriesOutput] {
		return v.ServiceRegistries
	})
	unwrapped := pulumix.Flatten[*TaskSetServiceRegistries, pulumix.GPtrOutput[TaskSetServiceRegistries, TaskSetServiceRegistriesOutput]](value)
	return pulumix.GPtrOutput[TaskSetServiceRegistries, TaskSetServiceRegistriesOutput]{OutputState: unwrapped.OutputState}
}

// The stability status. This indicates whether the task set has reached a steady state.
func (o TaskSetOutput) StabilityStatus() pulumix.Output[string] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.Output[string] { return v.StabilityStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The status of the task set.
func (o TaskSetOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
func (o TaskSetOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TaskSetOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
//
// The following arguments are optional:
func (o TaskSetOutput) TaskDefinition() pulumix.Output[string] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.Output[string] { return v.TaskDefinition })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the task set.
func (o TaskSetOutput) TaskSetId() pulumix.Output[string] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.Output[string] { return v.TaskSetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether the provider should wait until the task set has reached `STEADY_STATE`.
func (o TaskSetOutput) WaitUntilStable() pulumix.Output[*bool] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.Output[*bool] { return v.WaitUntilStable })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Wait timeout for task set to reach `STEADY_STATE`. Valid time units include `ns`, `us` (or `µs`), `ms`, `s`, `m`, and `h`. Default `10m`.
func (o TaskSetOutput) WaitUntilStableTimeout() pulumix.Output[*string] {
	value := pulumix.Apply[TaskSet](o, func(v TaskSet) pulumix.Output[*string] { return v.WaitUntilStableTimeout })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(TaskSetOutput{})
}
