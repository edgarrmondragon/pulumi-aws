// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apprunner

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type CustomDomainAssociationCertificateValidationRecord struct {
	// Certificate CNAME record name.
	Name *string `pulumi:"name"`
	// Current state of the certificate CNAME record validation. It should change to `SUCCESS` after App Runner completes validation with your DNS.
	Status *string `pulumi:"status"`
	// Record type, always `CNAME`.
	Type *string `pulumi:"type"`
	// Certificate CNAME record value.
	Value *string `pulumi:"value"`
}

type CustomDomainAssociationCertificateValidationRecordArgs struct {
	// Certificate CNAME record name.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Current state of the certificate CNAME record validation. It should change to `SUCCESS` after App Runner completes validation with your DNS.
	Status pulumix.Input[*string] `pulumi:"status"`
	// Record type, always `CNAME`.
	Type pulumix.Input[*string] `pulumi:"type"`
	// Certificate CNAME record value.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (CustomDomainAssociationCertificateValidationRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDomainAssociationCertificateValidationRecord)(nil)).Elem()
}

func (i CustomDomainAssociationCertificateValidationRecordArgs) ToCustomDomainAssociationCertificateValidationRecordOutput() CustomDomainAssociationCertificateValidationRecordOutput {
	return i.ToCustomDomainAssociationCertificateValidationRecordOutputWithContext(context.Background())
}

func (i CustomDomainAssociationCertificateValidationRecordArgs) ToCustomDomainAssociationCertificateValidationRecordOutputWithContext(ctx context.Context) CustomDomainAssociationCertificateValidationRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainAssociationCertificateValidationRecordOutput)
}

func (i *CustomDomainAssociationCertificateValidationRecordArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomDomainAssociationCertificateValidationRecordArgs] {
	return pulumix.Val(i)
}

type CustomDomainAssociationCertificateValidationRecordOutput struct{ *pulumi.OutputState }

func (CustomDomainAssociationCertificateValidationRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDomainAssociationCertificateValidationRecord)(nil)).Elem()
}

func (o CustomDomainAssociationCertificateValidationRecordOutput) ToCustomDomainAssociationCertificateValidationRecordOutput() CustomDomainAssociationCertificateValidationRecordOutput {
	return o
}

func (o CustomDomainAssociationCertificateValidationRecordOutput) ToCustomDomainAssociationCertificateValidationRecordOutputWithContext(ctx context.Context) CustomDomainAssociationCertificateValidationRecordOutput {
	return o
}

func (o CustomDomainAssociationCertificateValidationRecordOutput) ToOutput(ctx context.Context) pulumix.Output[CustomDomainAssociationCertificateValidationRecord] {
	return pulumix.Output[CustomDomainAssociationCertificateValidationRecord]{
		OutputState: o.OutputState,
	}
}

// Certificate CNAME record name.
func (o CustomDomainAssociationCertificateValidationRecordOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[CustomDomainAssociationCertificateValidationRecord](o, func(v CustomDomainAssociationCertificateValidationRecord) *string { return v.Name })
}

// Current state of the certificate CNAME record validation. It should change to `SUCCESS` after App Runner completes validation with your DNS.
func (o CustomDomainAssociationCertificateValidationRecordOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[CustomDomainAssociationCertificateValidationRecord](o, func(v CustomDomainAssociationCertificateValidationRecord) *string { return v.Status })
}

// Record type, always `CNAME`.
func (o CustomDomainAssociationCertificateValidationRecordOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[CustomDomainAssociationCertificateValidationRecord](o, func(v CustomDomainAssociationCertificateValidationRecord) *string { return v.Type })
}

// Certificate CNAME record value.
func (o CustomDomainAssociationCertificateValidationRecordOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[CustomDomainAssociationCertificateValidationRecord](o, func(v CustomDomainAssociationCertificateValidationRecord) *string { return v.Value })
}

type ObservabilityConfigurationTraceConfiguration struct {
	// Implementation provider chosen for tracing App Runner services. Valid values: `AWSXRAY`.
	Vendor *string `pulumi:"vendor"`
}

type ObservabilityConfigurationTraceConfigurationArgs struct {
	// Implementation provider chosen for tracing App Runner services. Valid values: `AWSXRAY`.
	Vendor pulumix.Input[*string] `pulumi:"vendor"`
}

func (ObservabilityConfigurationTraceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityConfigurationTraceConfiguration)(nil)).Elem()
}

func (i ObservabilityConfigurationTraceConfigurationArgs) ToObservabilityConfigurationTraceConfigurationOutput() ObservabilityConfigurationTraceConfigurationOutput {
	return i.ToObservabilityConfigurationTraceConfigurationOutputWithContext(context.Background())
}

func (i ObservabilityConfigurationTraceConfigurationArgs) ToObservabilityConfigurationTraceConfigurationOutputWithContext(ctx context.Context) ObservabilityConfigurationTraceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityConfigurationTraceConfigurationOutput)
}

func (i *ObservabilityConfigurationTraceConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ObservabilityConfigurationTraceConfigurationArgs] {
	return pulumix.Val(i)
}

type ObservabilityConfigurationTraceConfigurationOutput struct{ *pulumi.OutputState }

func (ObservabilityConfigurationTraceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityConfigurationTraceConfiguration)(nil)).Elem()
}

func (o ObservabilityConfigurationTraceConfigurationOutput) ToObservabilityConfigurationTraceConfigurationOutput() ObservabilityConfigurationTraceConfigurationOutput {
	return o
}

func (o ObservabilityConfigurationTraceConfigurationOutput) ToObservabilityConfigurationTraceConfigurationOutputWithContext(ctx context.Context) ObservabilityConfigurationTraceConfigurationOutput {
	return o
}

func (o ObservabilityConfigurationTraceConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ObservabilityConfigurationTraceConfiguration] {
	return pulumix.Output[ObservabilityConfigurationTraceConfiguration]{
		OutputState: o.OutputState,
	}
}

// Implementation provider chosen for tracing App Runner services. Valid values: `AWSXRAY`.
func (o ObservabilityConfigurationTraceConfigurationOutput) Vendor() pulumix.Output[*string] {
	return pulumix.Apply[ObservabilityConfigurationTraceConfiguration](o, func(v ObservabilityConfigurationTraceConfiguration) *string { return v.Vendor })
}

type ServiceEncryptionConfiguration struct {
	// ARN of the KMS key used for encryption.
	KmsKey string `pulumi:"kmsKey"`
}

type ServiceEncryptionConfigurationArgs struct {
	// ARN of the KMS key used for encryption.
	KmsKey pulumix.Input[string] `pulumi:"kmsKey"`
}

func (ServiceEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEncryptionConfiguration)(nil)).Elem()
}

func (i ServiceEncryptionConfigurationArgs) ToServiceEncryptionConfigurationOutput() ServiceEncryptionConfigurationOutput {
	return i.ToServiceEncryptionConfigurationOutputWithContext(context.Background())
}

func (i ServiceEncryptionConfigurationArgs) ToServiceEncryptionConfigurationOutputWithContext(ctx context.Context) ServiceEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEncryptionConfigurationOutput)
}

func (i *ServiceEncryptionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceEncryptionConfigurationArgs] {
	return pulumix.Val(i)
}

type ServiceEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEncryptionConfiguration)(nil)).Elem()
}

func (o ServiceEncryptionConfigurationOutput) ToServiceEncryptionConfigurationOutput() ServiceEncryptionConfigurationOutput {
	return o
}

func (o ServiceEncryptionConfigurationOutput) ToServiceEncryptionConfigurationOutputWithContext(ctx context.Context) ServiceEncryptionConfigurationOutput {
	return o
}

func (o ServiceEncryptionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceEncryptionConfiguration] {
	return pulumix.Output[ServiceEncryptionConfiguration]{
		OutputState: o.OutputState,
	}
}

// ARN of the KMS key used for encryption.
func (o ServiceEncryptionConfigurationOutput) KmsKey() pulumix.Output[string] {
	return pulumix.Apply[ServiceEncryptionConfiguration](o, func(v ServiceEncryptionConfiguration) string { return v.KmsKey })
}

type ServiceHealthCheckConfiguration struct {
	// Number of consecutive checks that must succeed before App Runner decides that the service is healthy. Defaults to 1. Minimum value of 1. Maximum value of 20.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// Time interval, in seconds, between health checks. Defaults to 5. Minimum value of 1. Maximum value of 20.
	Interval *int `pulumi:"interval"`
	// URL to send requests to for health checks. Defaults to `/`. Minimum length of 0. Maximum length of 51200.
	Path *string `pulumi:"path"`
	// IP protocol that App Runner uses to perform health checks for your service. Valid values: `TCP`, `HTTP`. Defaults to `TCP`. If you set protocol to `HTTP`, App Runner sends health check requests to the HTTP path specified by `path`.
	Protocol *string `pulumi:"protocol"`
	// Time, in seconds, to wait for a health check response before deciding it failed. Defaults to 2. Minimum value of  1. Maximum value of 20.
	Timeout *int `pulumi:"timeout"`
	// Number of consecutive checks that must fail before App Runner decides that the service is unhealthy. Defaults to 5. Minimum value of  1. Maximum value of 20.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

type ServiceHealthCheckConfigurationArgs struct {
	// Number of consecutive checks that must succeed before App Runner decides that the service is healthy. Defaults to 1. Minimum value of 1. Maximum value of 20.
	HealthyThreshold pulumix.Input[*int] `pulumi:"healthyThreshold"`
	// Time interval, in seconds, between health checks. Defaults to 5. Minimum value of 1. Maximum value of 20.
	Interval pulumix.Input[*int] `pulumi:"interval"`
	// URL to send requests to for health checks. Defaults to `/`. Minimum length of 0. Maximum length of 51200.
	Path pulumix.Input[*string] `pulumi:"path"`
	// IP protocol that App Runner uses to perform health checks for your service. Valid values: `TCP`, `HTTP`. Defaults to `TCP`. If you set protocol to `HTTP`, App Runner sends health check requests to the HTTP path specified by `path`.
	Protocol pulumix.Input[*string] `pulumi:"protocol"`
	// Time, in seconds, to wait for a health check response before deciding it failed. Defaults to 2. Minimum value of  1. Maximum value of 20.
	Timeout pulumix.Input[*int] `pulumi:"timeout"`
	// Number of consecutive checks that must fail before App Runner decides that the service is unhealthy. Defaults to 5. Minimum value of  1. Maximum value of 20.
	UnhealthyThreshold pulumix.Input[*int] `pulumi:"unhealthyThreshold"`
}

func (ServiceHealthCheckConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceHealthCheckConfiguration)(nil)).Elem()
}

func (i ServiceHealthCheckConfigurationArgs) ToServiceHealthCheckConfigurationOutput() ServiceHealthCheckConfigurationOutput {
	return i.ToServiceHealthCheckConfigurationOutputWithContext(context.Background())
}

func (i ServiceHealthCheckConfigurationArgs) ToServiceHealthCheckConfigurationOutputWithContext(ctx context.Context) ServiceHealthCheckConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceHealthCheckConfigurationOutput)
}

func (i *ServiceHealthCheckConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceHealthCheckConfigurationArgs] {
	return pulumix.Val(i)
}

type ServiceHealthCheckConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceHealthCheckConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceHealthCheckConfiguration)(nil)).Elem()
}

func (o ServiceHealthCheckConfigurationOutput) ToServiceHealthCheckConfigurationOutput() ServiceHealthCheckConfigurationOutput {
	return o
}

func (o ServiceHealthCheckConfigurationOutput) ToServiceHealthCheckConfigurationOutputWithContext(ctx context.Context) ServiceHealthCheckConfigurationOutput {
	return o
}

func (o ServiceHealthCheckConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceHealthCheckConfiguration] {
	return pulumix.Output[ServiceHealthCheckConfiguration]{
		OutputState: o.OutputState,
	}
}

// Number of consecutive checks that must succeed before App Runner decides that the service is healthy. Defaults to 1. Minimum value of 1. Maximum value of 20.
func (o ServiceHealthCheckConfigurationOutput) HealthyThreshold() pulumix.Output[*int] {
	return pulumix.Apply[ServiceHealthCheckConfiguration](o, func(v ServiceHealthCheckConfiguration) *int { return v.HealthyThreshold })
}

// Time interval, in seconds, between health checks. Defaults to 5. Minimum value of 1. Maximum value of 20.
func (o ServiceHealthCheckConfigurationOutput) Interval() pulumix.Output[*int] {
	return pulumix.Apply[ServiceHealthCheckConfiguration](o, func(v ServiceHealthCheckConfiguration) *int { return v.Interval })
}

// URL to send requests to for health checks. Defaults to `/`. Minimum length of 0. Maximum length of 51200.
func (o ServiceHealthCheckConfigurationOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[ServiceHealthCheckConfiguration](o, func(v ServiceHealthCheckConfiguration) *string { return v.Path })
}

// IP protocol that App Runner uses to perform health checks for your service. Valid values: `TCP`, `HTTP`. Defaults to `TCP`. If you set protocol to `HTTP`, App Runner sends health check requests to the HTTP path specified by `path`.
func (o ServiceHealthCheckConfigurationOutput) Protocol() pulumix.Output[*string] {
	return pulumix.Apply[ServiceHealthCheckConfiguration](o, func(v ServiceHealthCheckConfiguration) *string { return v.Protocol })
}

// Time, in seconds, to wait for a health check response before deciding it failed. Defaults to 2. Minimum value of  1. Maximum value of 20.
func (o ServiceHealthCheckConfigurationOutput) Timeout() pulumix.Output[*int] {
	return pulumix.Apply[ServiceHealthCheckConfiguration](o, func(v ServiceHealthCheckConfiguration) *int { return v.Timeout })
}

// Number of consecutive checks that must fail before App Runner decides that the service is unhealthy. Defaults to 5. Minimum value of  1. Maximum value of 20.
func (o ServiceHealthCheckConfigurationOutput) UnhealthyThreshold() pulumix.Output[*int] {
	return pulumix.Apply[ServiceHealthCheckConfiguration](o, func(v ServiceHealthCheckConfiguration) *int { return v.UnhealthyThreshold })
}

type ServiceInstanceConfiguration struct {
	// Number of CPU units reserved for each instance of your App Runner service represented as a String. Defaults to `1024`. Valid values: `256|512|1024|2048|4096|(0.25|0.5|1|2|4) vCPU`.
	Cpu *string `pulumi:"cpu"`
	// ARN of an IAM role that provides permissions to your App Runner service. These are permissions that your code needs when it calls any AWS APIs.
	InstanceRoleArn *string `pulumi:"instanceRoleArn"`
	// Amount of memory, in MB or GB, reserved for each instance of your App Runner service. Defaults to `2048`. Valid values: `512|1024|2048|3072|4096|6144|8192|10240|12288|(0.5|1|2|3|4|6|8|10|12) GB`.
	Memory *string `pulumi:"memory"`
}

type ServiceInstanceConfigurationArgs struct {
	// Number of CPU units reserved for each instance of your App Runner service represented as a String. Defaults to `1024`. Valid values: `256|512|1024|2048|4096|(0.25|0.5|1|2|4) vCPU`.
	Cpu pulumix.Input[*string] `pulumi:"cpu"`
	// ARN of an IAM role that provides permissions to your App Runner service. These are permissions that your code needs when it calls any AWS APIs.
	InstanceRoleArn pulumix.Input[*string] `pulumi:"instanceRoleArn"`
	// Amount of memory, in MB or GB, reserved for each instance of your App Runner service. Defaults to `2048`. Valid values: `512|1024|2048|3072|4096|6144|8192|10240|12288|(0.5|1|2|3|4|6|8|10|12) GB`.
	Memory pulumix.Input[*string] `pulumi:"memory"`
}

func (ServiceInstanceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceInstanceConfiguration)(nil)).Elem()
}

func (i ServiceInstanceConfigurationArgs) ToServiceInstanceConfigurationOutput() ServiceInstanceConfigurationOutput {
	return i.ToServiceInstanceConfigurationOutputWithContext(context.Background())
}

func (i ServiceInstanceConfigurationArgs) ToServiceInstanceConfigurationOutputWithContext(ctx context.Context) ServiceInstanceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceInstanceConfigurationOutput)
}

func (i *ServiceInstanceConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceInstanceConfigurationArgs] {
	return pulumix.Val(i)
}

type ServiceInstanceConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceInstanceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceInstanceConfiguration)(nil)).Elem()
}

func (o ServiceInstanceConfigurationOutput) ToServiceInstanceConfigurationOutput() ServiceInstanceConfigurationOutput {
	return o
}

func (o ServiceInstanceConfigurationOutput) ToServiceInstanceConfigurationOutputWithContext(ctx context.Context) ServiceInstanceConfigurationOutput {
	return o
}

func (o ServiceInstanceConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceInstanceConfiguration] {
	return pulumix.Output[ServiceInstanceConfiguration]{
		OutputState: o.OutputState,
	}
}

// Number of CPU units reserved for each instance of your App Runner service represented as a String. Defaults to `1024`. Valid values: `256|512|1024|2048|4096|(0.25|0.5|1|2|4) vCPU`.
func (o ServiceInstanceConfigurationOutput) Cpu() pulumix.Output[*string] {
	return pulumix.Apply[ServiceInstanceConfiguration](o, func(v ServiceInstanceConfiguration) *string { return v.Cpu })
}

// ARN of an IAM role that provides permissions to your App Runner service. These are permissions that your code needs when it calls any AWS APIs.
func (o ServiceInstanceConfigurationOutput) InstanceRoleArn() pulumix.Output[*string] {
	return pulumix.Apply[ServiceInstanceConfiguration](o, func(v ServiceInstanceConfiguration) *string { return v.InstanceRoleArn })
}

// Amount of memory, in MB or GB, reserved for each instance of your App Runner service. Defaults to `2048`. Valid values: `512|1024|2048|3072|4096|6144|8192|10240|12288|(0.5|1|2|3|4|6|8|10|12) GB`.
func (o ServiceInstanceConfigurationOutput) Memory() pulumix.Output[*string] {
	return pulumix.Apply[ServiceInstanceConfiguration](o, func(v ServiceInstanceConfiguration) *string { return v.Memory })
}

type ServiceNetworkConfiguration struct {
	// Network configuration settings for outbound message traffic. See Egress Configuration below for more details.
	EgressConfiguration *ServiceNetworkConfigurationEgressConfiguration `pulumi:"egressConfiguration"`
	// Network configuration settings for inbound network traffic. See Ingress Configuration below for more details.
	IngressConfiguration *ServiceNetworkConfigurationIngressConfiguration `pulumi:"ingressConfiguration"`
}

type ServiceNetworkConfigurationArgs struct {
	// Network configuration settings for outbound message traffic. See Egress Configuration below for more details.
	EgressConfiguration pulumix.Input[*ServiceNetworkConfigurationEgressConfigurationArgs] `pulumi:"egressConfiguration"`
	// Network configuration settings for inbound network traffic. See Ingress Configuration below for more details.
	IngressConfiguration pulumix.Input[*ServiceNetworkConfigurationIngressConfigurationArgs] `pulumi:"ingressConfiguration"`
}

func (ServiceNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkConfiguration)(nil)).Elem()
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput {
	return i.ToServiceNetworkConfigurationOutputWithContext(context.Background())
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkConfigurationOutput)
}

func (i *ServiceNetworkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceNetworkConfigurationArgs] {
	return pulumix.Val(i)
}

type ServiceNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkConfiguration)(nil)).Elem()
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput {
	return o
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationOutput {
	return o
}

func (o ServiceNetworkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceNetworkConfiguration] {
	return pulumix.Output[ServiceNetworkConfiguration]{
		OutputState: o.OutputState,
	}
}

// Network configuration settings for outbound message traffic. See Egress Configuration below for more details.
func (o ServiceNetworkConfigurationOutput) EgressConfiguration() pulumix.GPtrOutput[ServiceNetworkConfigurationEgressConfiguration, ServiceNetworkConfigurationEgressConfigurationOutput] {
	value := pulumix.Apply[ServiceNetworkConfiguration](o, func(v ServiceNetworkConfiguration) *ServiceNetworkConfigurationEgressConfiguration {
		return v.EgressConfiguration
	})
	return pulumix.GPtrOutput[ServiceNetworkConfigurationEgressConfiguration, ServiceNetworkConfigurationEgressConfigurationOutput]{OutputState: value.OutputState}
}

// Network configuration settings for inbound network traffic. See Ingress Configuration below for more details.
func (o ServiceNetworkConfigurationOutput) IngressConfiguration() pulumix.GPtrOutput[ServiceNetworkConfigurationIngressConfiguration, ServiceNetworkConfigurationIngressConfigurationOutput] {
	value := pulumix.Apply[ServiceNetworkConfiguration](o, func(v ServiceNetworkConfiguration) *ServiceNetworkConfigurationIngressConfiguration {
		return v.IngressConfiguration
	})
	return pulumix.GPtrOutput[ServiceNetworkConfigurationIngressConfiguration, ServiceNetworkConfigurationIngressConfigurationOutput]{OutputState: value.OutputState}
}

type ServiceNetworkConfigurationEgressConfiguration struct {
	// The type of egress configuration. Valid values are: `DEFAULT` and `VPC`.
	EgressType *string `pulumi:"egressType"`
	// The Amazon Resource Name (ARN) of the App Runner VPC connector that you want to associate with your App Runner service. Only valid when `EgressType = VPC`.
	VpcConnectorArn *string `pulumi:"vpcConnectorArn"`
}

type ServiceNetworkConfigurationEgressConfigurationArgs struct {
	// The type of egress configuration. Valid values are: `DEFAULT` and `VPC`.
	EgressType pulumix.Input[*string] `pulumi:"egressType"`
	// The Amazon Resource Name (ARN) of the App Runner VPC connector that you want to associate with your App Runner service. Only valid when `EgressType = VPC`.
	VpcConnectorArn pulumix.Input[*string] `pulumi:"vpcConnectorArn"`
}

func (ServiceNetworkConfigurationEgressConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkConfigurationEgressConfiguration)(nil)).Elem()
}

func (i ServiceNetworkConfigurationEgressConfigurationArgs) ToServiceNetworkConfigurationEgressConfigurationOutput() ServiceNetworkConfigurationEgressConfigurationOutput {
	return i.ToServiceNetworkConfigurationEgressConfigurationOutputWithContext(context.Background())
}

func (i ServiceNetworkConfigurationEgressConfigurationArgs) ToServiceNetworkConfigurationEgressConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationEgressConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkConfigurationEgressConfigurationOutput)
}

func (i *ServiceNetworkConfigurationEgressConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceNetworkConfigurationEgressConfigurationArgs] {
	return pulumix.Val(i)
}

type ServiceNetworkConfigurationEgressConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceNetworkConfigurationEgressConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkConfigurationEgressConfiguration)(nil)).Elem()
}

func (o ServiceNetworkConfigurationEgressConfigurationOutput) ToServiceNetworkConfigurationEgressConfigurationOutput() ServiceNetworkConfigurationEgressConfigurationOutput {
	return o
}

func (o ServiceNetworkConfigurationEgressConfigurationOutput) ToServiceNetworkConfigurationEgressConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationEgressConfigurationOutput {
	return o
}

func (o ServiceNetworkConfigurationEgressConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceNetworkConfigurationEgressConfiguration] {
	return pulumix.Output[ServiceNetworkConfigurationEgressConfiguration]{
		OutputState: o.OutputState,
	}
}

// The type of egress configuration. Valid values are: `DEFAULT` and `VPC`.
func (o ServiceNetworkConfigurationEgressConfigurationOutput) EgressType() pulumix.Output[*string] {
	return pulumix.Apply[ServiceNetworkConfigurationEgressConfiguration](o, func(v ServiceNetworkConfigurationEgressConfiguration) *string { return v.EgressType })
}

// The Amazon Resource Name (ARN) of the App Runner VPC connector that you want to associate with your App Runner service. Only valid when `EgressType = VPC`.
func (o ServiceNetworkConfigurationEgressConfigurationOutput) VpcConnectorArn() pulumix.Output[*string] {
	return pulumix.Apply[ServiceNetworkConfigurationEgressConfiguration](o, func(v ServiceNetworkConfigurationEgressConfiguration) *string { return v.VpcConnectorArn })
}

type ServiceNetworkConfigurationIngressConfiguration struct {
	// Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to True. To make the service privately accessible, from only within an Amazon VPC set it to False.
	IsPubliclyAccessible *bool `pulumi:"isPubliclyAccessible"`
}

type ServiceNetworkConfigurationIngressConfigurationArgs struct {
	// Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to True. To make the service privately accessible, from only within an Amazon VPC set it to False.
	IsPubliclyAccessible pulumix.Input[*bool] `pulumi:"isPubliclyAccessible"`
}

func (ServiceNetworkConfigurationIngressConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkConfigurationIngressConfiguration)(nil)).Elem()
}

func (i ServiceNetworkConfigurationIngressConfigurationArgs) ToServiceNetworkConfigurationIngressConfigurationOutput() ServiceNetworkConfigurationIngressConfigurationOutput {
	return i.ToServiceNetworkConfigurationIngressConfigurationOutputWithContext(context.Background())
}

func (i ServiceNetworkConfigurationIngressConfigurationArgs) ToServiceNetworkConfigurationIngressConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationIngressConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkConfigurationIngressConfigurationOutput)
}

func (i *ServiceNetworkConfigurationIngressConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceNetworkConfigurationIngressConfigurationArgs] {
	return pulumix.Val(i)
}

type ServiceNetworkConfigurationIngressConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceNetworkConfigurationIngressConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkConfigurationIngressConfiguration)(nil)).Elem()
}

func (o ServiceNetworkConfigurationIngressConfigurationOutput) ToServiceNetworkConfigurationIngressConfigurationOutput() ServiceNetworkConfigurationIngressConfigurationOutput {
	return o
}

func (o ServiceNetworkConfigurationIngressConfigurationOutput) ToServiceNetworkConfigurationIngressConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationIngressConfigurationOutput {
	return o
}

func (o ServiceNetworkConfigurationIngressConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceNetworkConfigurationIngressConfiguration] {
	return pulumix.Output[ServiceNetworkConfigurationIngressConfiguration]{
		OutputState: o.OutputState,
	}
}

// Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to True. To make the service privately accessible, from only within an Amazon VPC set it to False.
func (o ServiceNetworkConfigurationIngressConfigurationOutput) IsPubliclyAccessible() pulumix.Output[*bool] {
	return pulumix.Apply[ServiceNetworkConfigurationIngressConfiguration](o, func(v ServiceNetworkConfigurationIngressConfiguration) *bool { return v.IsPubliclyAccessible })
}

type ServiceObservabilityConfiguration struct {
	// ARN of the observability configuration that is associated with the service. Specified only when `observabilityEnabled` is `true`.
	ObservabilityConfigurationArn *string `pulumi:"observabilityConfigurationArn"`
	// When `true`, an observability configuration resource is associated with the service.
	ObservabilityEnabled bool `pulumi:"observabilityEnabled"`
}

type ServiceObservabilityConfigurationArgs struct {
	// ARN of the observability configuration that is associated with the service. Specified only when `observabilityEnabled` is `true`.
	ObservabilityConfigurationArn pulumix.Input[*string] `pulumi:"observabilityConfigurationArn"`
	// When `true`, an observability configuration resource is associated with the service.
	ObservabilityEnabled pulumix.Input[bool] `pulumi:"observabilityEnabled"`
}

func (ServiceObservabilityConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceObservabilityConfiguration)(nil)).Elem()
}

func (i ServiceObservabilityConfigurationArgs) ToServiceObservabilityConfigurationOutput() ServiceObservabilityConfigurationOutput {
	return i.ToServiceObservabilityConfigurationOutputWithContext(context.Background())
}

func (i ServiceObservabilityConfigurationArgs) ToServiceObservabilityConfigurationOutputWithContext(ctx context.Context) ServiceObservabilityConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceObservabilityConfigurationOutput)
}

func (i *ServiceObservabilityConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceObservabilityConfigurationArgs] {
	return pulumix.Val(i)
}

type ServiceObservabilityConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceObservabilityConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceObservabilityConfiguration)(nil)).Elem()
}

func (o ServiceObservabilityConfigurationOutput) ToServiceObservabilityConfigurationOutput() ServiceObservabilityConfigurationOutput {
	return o
}

func (o ServiceObservabilityConfigurationOutput) ToServiceObservabilityConfigurationOutputWithContext(ctx context.Context) ServiceObservabilityConfigurationOutput {
	return o
}

func (o ServiceObservabilityConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceObservabilityConfiguration] {
	return pulumix.Output[ServiceObservabilityConfiguration]{
		OutputState: o.OutputState,
	}
}

// ARN of the observability configuration that is associated with the service. Specified only when `observabilityEnabled` is `true`.
func (o ServiceObservabilityConfigurationOutput) ObservabilityConfigurationArn() pulumix.Output[*string] {
	return pulumix.Apply[ServiceObservabilityConfiguration](o, func(v ServiceObservabilityConfiguration) *string { return v.ObservabilityConfigurationArn })
}

// When `true`, an observability configuration resource is associated with the service.
func (o ServiceObservabilityConfigurationOutput) ObservabilityEnabled() pulumix.Output[bool] {
	return pulumix.Apply[ServiceObservabilityConfiguration](o, func(v ServiceObservabilityConfiguration) bool { return v.ObservabilityEnabled })
}

type ServiceSourceConfiguration struct {
	// Describes resources needed to authenticate access to some source repositories. See Authentication Configuration below for more details.
	AuthenticationConfiguration *ServiceSourceConfigurationAuthenticationConfiguration `pulumi:"authenticationConfiguration"`
	// Whether continuous integration from the source repository is enabled for the App Runner service. If set to `true`, each repository change (source code commit or new image version) starts a deployment. Defaults to `true`.
	AutoDeploymentsEnabled *bool `pulumi:"autoDeploymentsEnabled"`
	// Description of a source code repository. See Code Repository below for more details.
	CodeRepository *ServiceSourceConfigurationCodeRepository `pulumi:"codeRepository"`
	// Description of a source image repository. See Image Repository below for more details.
	ImageRepository *ServiceSourceConfigurationImageRepository `pulumi:"imageRepository"`
}

type ServiceSourceConfigurationArgs struct {
	// Describes resources needed to authenticate access to some source repositories. See Authentication Configuration below for more details.
	AuthenticationConfiguration pulumix.Input[*ServiceSourceConfigurationAuthenticationConfigurationArgs] `pulumi:"authenticationConfiguration"`
	// Whether continuous integration from the source repository is enabled for the App Runner service. If set to `true`, each repository change (source code commit or new image version) starts a deployment. Defaults to `true`.
	AutoDeploymentsEnabled pulumix.Input[*bool] `pulumi:"autoDeploymentsEnabled"`
	// Description of a source code repository. See Code Repository below for more details.
	CodeRepository pulumix.Input[*ServiceSourceConfigurationCodeRepositoryArgs] `pulumi:"codeRepository"`
	// Description of a source image repository. See Image Repository below for more details.
	ImageRepository pulumix.Input[*ServiceSourceConfigurationImageRepositoryArgs] `pulumi:"imageRepository"`
}

func (ServiceSourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfiguration)(nil)).Elem()
}

func (i ServiceSourceConfigurationArgs) ToServiceSourceConfigurationOutput() ServiceSourceConfigurationOutput {
	return i.ToServiceSourceConfigurationOutputWithContext(context.Background())
}

func (i ServiceSourceConfigurationArgs) ToServiceSourceConfigurationOutputWithContext(ctx context.Context) ServiceSourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSourceConfigurationOutput)
}

func (i *ServiceSourceConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceSourceConfigurationArgs] {
	return pulumix.Val(i)
}

type ServiceSourceConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceSourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfiguration)(nil)).Elem()
}

func (o ServiceSourceConfigurationOutput) ToServiceSourceConfigurationOutput() ServiceSourceConfigurationOutput {
	return o
}

func (o ServiceSourceConfigurationOutput) ToServiceSourceConfigurationOutputWithContext(ctx context.Context) ServiceSourceConfigurationOutput {
	return o
}

func (o ServiceSourceConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceSourceConfiguration] {
	return pulumix.Output[ServiceSourceConfiguration]{
		OutputState: o.OutputState,
	}
}

// Describes resources needed to authenticate access to some source repositories. See Authentication Configuration below for more details.
func (o ServiceSourceConfigurationOutput) AuthenticationConfiguration() pulumix.GPtrOutput[ServiceSourceConfigurationAuthenticationConfiguration, ServiceSourceConfigurationAuthenticationConfigurationOutput] {
	value := pulumix.Apply[ServiceSourceConfiguration](o, func(v ServiceSourceConfiguration) *ServiceSourceConfigurationAuthenticationConfiguration {
		return v.AuthenticationConfiguration
	})
	return pulumix.GPtrOutput[ServiceSourceConfigurationAuthenticationConfiguration, ServiceSourceConfigurationAuthenticationConfigurationOutput]{OutputState: value.OutputState}
}

// Whether continuous integration from the source repository is enabled for the App Runner service. If set to `true`, each repository change (source code commit or new image version) starts a deployment. Defaults to `true`.
func (o ServiceSourceConfigurationOutput) AutoDeploymentsEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[ServiceSourceConfiguration](o, func(v ServiceSourceConfiguration) *bool { return v.AutoDeploymentsEnabled })
}

// Description of a source code repository. See Code Repository below for more details.
func (o ServiceSourceConfigurationOutput) CodeRepository() pulumix.GPtrOutput[ServiceSourceConfigurationCodeRepository, ServiceSourceConfigurationCodeRepositoryOutput] {
	value := pulumix.Apply[ServiceSourceConfiguration](o, func(v ServiceSourceConfiguration) *ServiceSourceConfigurationCodeRepository { return v.CodeRepository })
	return pulumix.GPtrOutput[ServiceSourceConfigurationCodeRepository, ServiceSourceConfigurationCodeRepositoryOutput]{OutputState: value.OutputState}
}

// Description of a source image repository. See Image Repository below for more details.
func (o ServiceSourceConfigurationOutput) ImageRepository() pulumix.GPtrOutput[ServiceSourceConfigurationImageRepository, ServiceSourceConfigurationImageRepositoryOutput] {
	value := pulumix.Apply[ServiceSourceConfiguration](o, func(v ServiceSourceConfiguration) *ServiceSourceConfigurationImageRepository {
		return v.ImageRepository
	})
	return pulumix.GPtrOutput[ServiceSourceConfigurationImageRepository, ServiceSourceConfigurationImageRepositoryOutput]{OutputState: value.OutputState}
}

type ServiceSourceConfigurationAuthenticationConfiguration struct {
	// ARN of the IAM role that grants the App Runner service access to a source repository. Required for ECR image repositories (but not for ECR Public)
	AccessRoleArn *string `pulumi:"accessRoleArn"`
	// ARN of the App Runner connection that enables the App Runner service to connect to a source repository. Required for GitHub code repositories.
	ConnectionArn *string `pulumi:"connectionArn"`
}

type ServiceSourceConfigurationAuthenticationConfigurationArgs struct {
	// ARN of the IAM role that grants the App Runner service access to a source repository. Required for ECR image repositories (but not for ECR Public)
	AccessRoleArn pulumix.Input[*string] `pulumi:"accessRoleArn"`
	// ARN of the App Runner connection that enables the App Runner service to connect to a source repository. Required for GitHub code repositories.
	ConnectionArn pulumix.Input[*string] `pulumi:"connectionArn"`
}

func (ServiceSourceConfigurationAuthenticationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfigurationAuthenticationConfiguration)(nil)).Elem()
}

func (i ServiceSourceConfigurationAuthenticationConfigurationArgs) ToServiceSourceConfigurationAuthenticationConfigurationOutput() ServiceSourceConfigurationAuthenticationConfigurationOutput {
	return i.ToServiceSourceConfigurationAuthenticationConfigurationOutputWithContext(context.Background())
}

func (i ServiceSourceConfigurationAuthenticationConfigurationArgs) ToServiceSourceConfigurationAuthenticationConfigurationOutputWithContext(ctx context.Context) ServiceSourceConfigurationAuthenticationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSourceConfigurationAuthenticationConfigurationOutput)
}

func (i *ServiceSourceConfigurationAuthenticationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceSourceConfigurationAuthenticationConfigurationArgs] {
	return pulumix.Val(i)
}

type ServiceSourceConfigurationAuthenticationConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceSourceConfigurationAuthenticationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfigurationAuthenticationConfiguration)(nil)).Elem()
}

func (o ServiceSourceConfigurationAuthenticationConfigurationOutput) ToServiceSourceConfigurationAuthenticationConfigurationOutput() ServiceSourceConfigurationAuthenticationConfigurationOutput {
	return o
}

func (o ServiceSourceConfigurationAuthenticationConfigurationOutput) ToServiceSourceConfigurationAuthenticationConfigurationOutputWithContext(ctx context.Context) ServiceSourceConfigurationAuthenticationConfigurationOutput {
	return o
}

func (o ServiceSourceConfigurationAuthenticationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceSourceConfigurationAuthenticationConfiguration] {
	return pulumix.Output[ServiceSourceConfigurationAuthenticationConfiguration]{
		OutputState: o.OutputState,
	}
}

// ARN of the IAM role that grants the App Runner service access to a source repository. Required for ECR image repositories (but not for ECR Public)
func (o ServiceSourceConfigurationAuthenticationConfigurationOutput) AccessRoleArn() pulumix.Output[*string] {
	return pulumix.Apply[ServiceSourceConfigurationAuthenticationConfiguration](o, func(v ServiceSourceConfigurationAuthenticationConfiguration) *string { return v.AccessRoleArn })
}

// ARN of the App Runner connection that enables the App Runner service to connect to a source repository. Required for GitHub code repositories.
func (o ServiceSourceConfigurationAuthenticationConfigurationOutput) ConnectionArn() pulumix.Output[*string] {
	return pulumix.Apply[ServiceSourceConfigurationAuthenticationConfiguration](o, func(v ServiceSourceConfigurationAuthenticationConfiguration) *string { return v.ConnectionArn })
}

type ServiceSourceConfigurationCodeRepository struct {
	// Configuration for building and running the service from a source code repository. See Code Configuration below for more details.
	CodeConfiguration *ServiceSourceConfigurationCodeRepositoryCodeConfiguration `pulumi:"codeConfiguration"`
	// Location of the repository that contains the source code.
	RepositoryUrl string `pulumi:"repositoryUrl"`
	// Version that should be used within the source code repository. See Source Code Version below for more details.
	SourceCodeVersion ServiceSourceConfigurationCodeRepositorySourceCodeVersion `pulumi:"sourceCodeVersion"`
}

type ServiceSourceConfigurationCodeRepositoryArgs struct {
	// Configuration for building and running the service from a source code repository. See Code Configuration below for more details.
	CodeConfiguration pulumix.Input[*ServiceSourceConfigurationCodeRepositoryCodeConfigurationArgs] `pulumi:"codeConfiguration"`
	// Location of the repository that contains the source code.
	RepositoryUrl pulumix.Input[string] `pulumi:"repositoryUrl"`
	// Version that should be used within the source code repository. See Source Code Version below for more details.
	SourceCodeVersion pulumix.Input[*ServiceSourceConfigurationCodeRepositorySourceCodeVersionArgs] `pulumi:"sourceCodeVersion"`
}

func (ServiceSourceConfigurationCodeRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfigurationCodeRepository)(nil)).Elem()
}

func (i ServiceSourceConfigurationCodeRepositoryArgs) ToServiceSourceConfigurationCodeRepositoryOutput() ServiceSourceConfigurationCodeRepositoryOutput {
	return i.ToServiceSourceConfigurationCodeRepositoryOutputWithContext(context.Background())
}

func (i ServiceSourceConfigurationCodeRepositoryArgs) ToServiceSourceConfigurationCodeRepositoryOutputWithContext(ctx context.Context) ServiceSourceConfigurationCodeRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSourceConfigurationCodeRepositoryOutput)
}

func (i *ServiceSourceConfigurationCodeRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceSourceConfigurationCodeRepositoryArgs] {
	return pulumix.Val(i)
}

type ServiceSourceConfigurationCodeRepositoryOutput struct{ *pulumi.OutputState }

func (ServiceSourceConfigurationCodeRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfigurationCodeRepository)(nil)).Elem()
}

func (o ServiceSourceConfigurationCodeRepositoryOutput) ToServiceSourceConfigurationCodeRepositoryOutput() ServiceSourceConfigurationCodeRepositoryOutput {
	return o
}

func (o ServiceSourceConfigurationCodeRepositoryOutput) ToServiceSourceConfigurationCodeRepositoryOutputWithContext(ctx context.Context) ServiceSourceConfigurationCodeRepositoryOutput {
	return o
}

func (o ServiceSourceConfigurationCodeRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceSourceConfigurationCodeRepository] {
	return pulumix.Output[ServiceSourceConfigurationCodeRepository]{
		OutputState: o.OutputState,
	}
}

// Configuration for building and running the service from a source code repository. See Code Configuration below for more details.
func (o ServiceSourceConfigurationCodeRepositoryOutput) CodeConfiguration() pulumix.GPtrOutput[ServiceSourceConfigurationCodeRepositoryCodeConfiguration, ServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput] {
	value := pulumix.Apply[ServiceSourceConfigurationCodeRepository](o, func(v ServiceSourceConfigurationCodeRepository) *ServiceSourceConfigurationCodeRepositoryCodeConfiguration {
		return v.CodeConfiguration
	})
	return pulumix.GPtrOutput[ServiceSourceConfigurationCodeRepositoryCodeConfiguration, ServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput]{OutputState: value.OutputState}
}

// Location of the repository that contains the source code.
func (o ServiceSourceConfigurationCodeRepositoryOutput) RepositoryUrl() pulumix.Output[string] {
	return pulumix.Apply[ServiceSourceConfigurationCodeRepository](o, func(v ServiceSourceConfigurationCodeRepository) string { return v.RepositoryUrl })
}

// Version that should be used within the source code repository. See Source Code Version below for more details.
func (o ServiceSourceConfigurationCodeRepositoryOutput) SourceCodeVersion() pulumix.GPtrOutput[ServiceSourceConfigurationCodeRepositorySourceCodeVersion, ServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput] {
	value := pulumix.Apply[ServiceSourceConfigurationCodeRepository](o, func(v ServiceSourceConfigurationCodeRepository) ServiceSourceConfigurationCodeRepositorySourceCodeVersion {
		return v.SourceCodeVersion
	})
	return pulumix.GPtrOutput[ServiceSourceConfigurationCodeRepositorySourceCodeVersion, ServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput]{OutputState: value.OutputState}
}

type ServiceSourceConfigurationCodeRepositoryCodeConfiguration struct {
	// Basic configuration for building and running the App Runner service. Use this parameter to quickly launch an App Runner service without providing an apprunner.yaml file in the source code repository (or ignoring the file if it exists). See Code Configuration Values below for more details.
	CodeConfigurationValues *ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues `pulumi:"codeConfigurationValues"`
	// Source of the App Runner configuration. Valid values: `REPOSITORY`, `API`. Values are interpreted as follows:
	ConfigurationSource string `pulumi:"configurationSource"`
}

type ServiceSourceConfigurationCodeRepositoryCodeConfigurationArgs struct {
	// Basic configuration for building and running the App Runner service. Use this parameter to quickly launch an App Runner service without providing an apprunner.yaml file in the source code repository (or ignoring the file if it exists). See Code Configuration Values below for more details.
	CodeConfigurationValues pulumix.Input[*ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesArgs] `pulumi:"codeConfigurationValues"`
	// Source of the App Runner configuration. Valid values: `REPOSITORY`, `API`. Values are interpreted as follows:
	ConfigurationSource pulumix.Input[string] `pulumi:"configurationSource"`
}

func (ServiceSourceConfigurationCodeRepositoryCodeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfigurationCodeRepositoryCodeConfiguration)(nil)).Elem()
}

func (i ServiceSourceConfigurationCodeRepositoryCodeConfigurationArgs) ToServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput() ServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput {
	return i.ToServiceSourceConfigurationCodeRepositoryCodeConfigurationOutputWithContext(context.Background())
}

func (i ServiceSourceConfigurationCodeRepositoryCodeConfigurationArgs) ToServiceSourceConfigurationCodeRepositoryCodeConfigurationOutputWithContext(ctx context.Context) ServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput)
}

func (i *ServiceSourceConfigurationCodeRepositoryCodeConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceSourceConfigurationCodeRepositoryCodeConfigurationArgs] {
	return pulumix.Val(i)
}

type ServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfigurationCodeRepositoryCodeConfiguration)(nil)).Elem()
}

func (o ServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput) ToServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput() ServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput {
	return o
}

func (o ServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput) ToServiceSourceConfigurationCodeRepositoryCodeConfigurationOutputWithContext(ctx context.Context) ServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput {
	return o
}

func (o ServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceSourceConfigurationCodeRepositoryCodeConfiguration] {
	return pulumix.Output[ServiceSourceConfigurationCodeRepositoryCodeConfiguration]{
		OutputState: o.OutputState,
	}
}

// Basic configuration for building and running the App Runner service. Use this parameter to quickly launch an App Runner service without providing an apprunner.yaml file in the source code repository (or ignoring the file if it exists). See Code Configuration Values below for more details.
func (o ServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput) CodeConfigurationValues() pulumix.GPtrOutput[ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues, ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput] {
	value := pulumix.Apply[ServiceSourceConfigurationCodeRepositoryCodeConfiguration](o, func(v ServiceSourceConfigurationCodeRepositoryCodeConfiguration) *ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues {
		return v.CodeConfigurationValues
	})
	return pulumix.GPtrOutput[ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues, ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput]{OutputState: value.OutputState}
}

// Source of the App Runner configuration. Valid values: `REPOSITORY`, `API`. Values are interpreted as follows:
func (o ServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput) ConfigurationSource() pulumix.Output[string] {
	return pulumix.Apply[ServiceSourceConfigurationCodeRepositoryCodeConfiguration](o, func(v ServiceSourceConfigurationCodeRepositoryCodeConfiguration) string { return v.ConfigurationSource })
}

type ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues struct {
	// Command App Runner runs to build your application.
	BuildCommand *string `pulumi:"buildCommand"`
	// Port that your application listens to in the container. Defaults to `"8080"`.
	Port *string `pulumi:"port"`
	// Runtime environment type for building and running an App Runner service. Represents a programming language runtime. Valid values: `PYTHON_3`, `NODEJS_12`, `NODEJS_14`, `NODEJS_16`, `CORRETTO_8`, `CORRETTO_11`, `GO_1`, `DOTNET_6`, `PHP_81`, `RUBY_31`.
	Runtime string `pulumi:"runtime"`
	// Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.
	RuntimeEnvironmentSecrets map[string]string `pulumi:"runtimeEnvironmentSecrets"`
	// Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of `AWSAPPRUNNER` are reserved for system use and aren't valid.
	RuntimeEnvironmentVariables map[string]string `pulumi:"runtimeEnvironmentVariables"`
	// Command App Runner runs to start your application.
	StartCommand *string `pulumi:"startCommand"`
}

type ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesArgs struct {
	// Command App Runner runs to build your application.
	BuildCommand pulumix.Input[*string] `pulumi:"buildCommand"`
	// Port that your application listens to in the container. Defaults to `"8080"`.
	Port pulumix.Input[*string] `pulumi:"port"`
	// Runtime environment type for building and running an App Runner service. Represents a programming language runtime. Valid values: `PYTHON_3`, `NODEJS_12`, `NODEJS_14`, `NODEJS_16`, `CORRETTO_8`, `CORRETTO_11`, `GO_1`, `DOTNET_6`, `PHP_81`, `RUBY_31`.
	Runtime pulumix.Input[string] `pulumi:"runtime"`
	// Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.
	RuntimeEnvironmentSecrets pulumix.Input[map[string]string] `pulumi:"runtimeEnvironmentSecrets"`
	// Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of `AWSAPPRUNNER` are reserved for system use and aren't valid.
	RuntimeEnvironmentVariables pulumix.Input[map[string]string] `pulumi:"runtimeEnvironmentVariables"`
	// Command App Runner runs to start your application.
	StartCommand pulumix.Input[*string] `pulumi:"startCommand"`
}

func (ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues)(nil)).Elem()
}

func (i ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesArgs) ToServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput() ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput {
	return i.ToServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutputWithContext(context.Background())
}

func (i ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesArgs) ToServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutputWithContext(ctx context.Context) ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput)
}

func (i *ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesArgs] {
	return pulumix.Val(i)
}

type ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput struct{ *pulumi.OutputState }

func (ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues)(nil)).Elem()
}

func (o ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput) ToServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput() ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput {
	return o
}

func (o ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput) ToServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutputWithContext(ctx context.Context) ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput {
	return o
}

func (o ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues] {
	return pulumix.Output[ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues]{
		OutputState: o.OutputState,
	}
}

// Command App Runner runs to build your application.
func (o ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput) BuildCommand() pulumix.Output[*string] {
	return pulumix.Apply[ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues](o, func(v ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues) *string {
		return v.BuildCommand
	})
}

// Port that your application listens to in the container. Defaults to `"8080"`.
func (o ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput) Port() pulumix.Output[*string] {
	return pulumix.Apply[ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues](o, func(v ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues) *string {
		return v.Port
	})
}

// Runtime environment type for building and running an App Runner service. Represents a programming language runtime. Valid values: `PYTHON_3`, `NODEJS_12`, `NODEJS_14`, `NODEJS_16`, `CORRETTO_8`, `CORRETTO_11`, `GO_1`, `DOTNET_6`, `PHP_81`, `RUBY_31`.
func (o ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput) Runtime() pulumix.Output[string] {
	return pulumix.Apply[ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues](o, func(v ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues) string {
		return v.Runtime
	})
}

// Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.
func (o ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput) RuntimeEnvironmentSecrets() pulumix.MapOutput[string] {
	value := pulumix.Apply[ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues](o, func(v ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues) map[string]string {
		return v.RuntimeEnvironmentSecrets
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of `AWSAPPRUNNER` are reserved for system use and aren't valid.
func (o ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput) RuntimeEnvironmentVariables() pulumix.MapOutput[string] {
	value := pulumix.Apply[ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues](o, func(v ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues) map[string]string {
		return v.RuntimeEnvironmentVariables
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Command App Runner runs to start your application.
func (o ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput) StartCommand() pulumix.Output[*string] {
	return pulumix.Apply[ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues](o, func(v ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues) *string {
		return v.StartCommand
	})
}

type ServiceSourceConfigurationCodeRepositorySourceCodeVersion struct {
	// Type of version identifier. For a git-based repository, branches represent versions. Valid values: `BRANCH`.
	Type string `pulumi:"type"`
	// Source code version. For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.
	Value string `pulumi:"value"`
}

type ServiceSourceConfigurationCodeRepositorySourceCodeVersionArgs struct {
	// Type of version identifier. For a git-based repository, branches represent versions. Valid values: `BRANCH`.
	Type pulumix.Input[string] `pulumi:"type"`
	// Source code version. For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ServiceSourceConfigurationCodeRepositorySourceCodeVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfigurationCodeRepositorySourceCodeVersion)(nil)).Elem()
}

func (i ServiceSourceConfigurationCodeRepositorySourceCodeVersionArgs) ToServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput() ServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput {
	return i.ToServiceSourceConfigurationCodeRepositorySourceCodeVersionOutputWithContext(context.Background())
}

func (i ServiceSourceConfigurationCodeRepositorySourceCodeVersionArgs) ToServiceSourceConfigurationCodeRepositorySourceCodeVersionOutputWithContext(ctx context.Context) ServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput)
}

func (i *ServiceSourceConfigurationCodeRepositorySourceCodeVersionArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceSourceConfigurationCodeRepositorySourceCodeVersionArgs] {
	return pulumix.Val(i)
}

type ServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput struct{ *pulumi.OutputState }

func (ServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfigurationCodeRepositorySourceCodeVersion)(nil)).Elem()
}

func (o ServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput) ToServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput() ServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput {
	return o
}

func (o ServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput) ToServiceSourceConfigurationCodeRepositorySourceCodeVersionOutputWithContext(ctx context.Context) ServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput {
	return o
}

func (o ServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceSourceConfigurationCodeRepositorySourceCodeVersion] {
	return pulumix.Output[ServiceSourceConfigurationCodeRepositorySourceCodeVersion]{
		OutputState: o.OutputState,
	}
}

// Type of version identifier. For a git-based repository, branches represent versions. Valid values: `BRANCH`.
func (o ServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ServiceSourceConfigurationCodeRepositorySourceCodeVersion](o, func(v ServiceSourceConfigurationCodeRepositorySourceCodeVersion) string { return v.Type })
}

// Source code version. For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.
func (o ServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ServiceSourceConfigurationCodeRepositorySourceCodeVersion](o, func(v ServiceSourceConfigurationCodeRepositorySourceCodeVersion) string { return v.Value })
}

type ServiceSourceConfigurationImageRepository struct {
	// Configuration for running the identified image. See Image Configuration below for more details.
	ImageConfiguration *ServiceSourceConfigurationImageRepositoryImageConfiguration `pulumi:"imageConfiguration"`
	// Identifier of an image. For an image in Amazon Elastic Container Registry (Amazon ECR), this is an image name. For the
	// image name format, see Pulling an image in the Amazon ECR User Guide.
	ImageIdentifier string `pulumi:"imageIdentifier"`
	// Type of the image repository. This reflects the repository provider and whether the repository is private or public. Valid values: `ECR` , `ECR_PUBLIC`.
	ImageRepositoryType string `pulumi:"imageRepositoryType"`
}

type ServiceSourceConfigurationImageRepositoryArgs struct {
	// Configuration for running the identified image. See Image Configuration below for more details.
	ImageConfiguration pulumix.Input[*ServiceSourceConfigurationImageRepositoryImageConfigurationArgs] `pulumi:"imageConfiguration"`
	// Identifier of an image. For an image in Amazon Elastic Container Registry (Amazon ECR), this is an image name. For the
	// image name format, see Pulling an image in the Amazon ECR User Guide.
	ImageIdentifier pulumix.Input[string] `pulumi:"imageIdentifier"`
	// Type of the image repository. This reflects the repository provider and whether the repository is private or public. Valid values: `ECR` , `ECR_PUBLIC`.
	ImageRepositoryType pulumix.Input[string] `pulumi:"imageRepositoryType"`
}

func (ServiceSourceConfigurationImageRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfigurationImageRepository)(nil)).Elem()
}

func (i ServiceSourceConfigurationImageRepositoryArgs) ToServiceSourceConfigurationImageRepositoryOutput() ServiceSourceConfigurationImageRepositoryOutput {
	return i.ToServiceSourceConfigurationImageRepositoryOutputWithContext(context.Background())
}

func (i ServiceSourceConfigurationImageRepositoryArgs) ToServiceSourceConfigurationImageRepositoryOutputWithContext(ctx context.Context) ServiceSourceConfigurationImageRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSourceConfigurationImageRepositoryOutput)
}

func (i *ServiceSourceConfigurationImageRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceSourceConfigurationImageRepositoryArgs] {
	return pulumix.Val(i)
}

type ServiceSourceConfigurationImageRepositoryOutput struct{ *pulumi.OutputState }

func (ServiceSourceConfigurationImageRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfigurationImageRepository)(nil)).Elem()
}

func (o ServiceSourceConfigurationImageRepositoryOutput) ToServiceSourceConfigurationImageRepositoryOutput() ServiceSourceConfigurationImageRepositoryOutput {
	return o
}

func (o ServiceSourceConfigurationImageRepositoryOutput) ToServiceSourceConfigurationImageRepositoryOutputWithContext(ctx context.Context) ServiceSourceConfigurationImageRepositoryOutput {
	return o
}

func (o ServiceSourceConfigurationImageRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceSourceConfigurationImageRepository] {
	return pulumix.Output[ServiceSourceConfigurationImageRepository]{
		OutputState: o.OutputState,
	}
}

// Configuration for running the identified image. See Image Configuration below for more details.
func (o ServiceSourceConfigurationImageRepositoryOutput) ImageConfiguration() pulumix.GPtrOutput[ServiceSourceConfigurationImageRepositoryImageConfiguration, ServiceSourceConfigurationImageRepositoryImageConfigurationOutput] {
	value := pulumix.Apply[ServiceSourceConfigurationImageRepository](o, func(v ServiceSourceConfigurationImageRepository) *ServiceSourceConfigurationImageRepositoryImageConfiguration {
		return v.ImageConfiguration
	})
	return pulumix.GPtrOutput[ServiceSourceConfigurationImageRepositoryImageConfiguration, ServiceSourceConfigurationImageRepositoryImageConfigurationOutput]{OutputState: value.OutputState}
}

// Identifier of an image. For an image in Amazon Elastic Container Registry (Amazon ECR), this is an image name. For the
// image name format, see Pulling an image in the Amazon ECR User Guide.
func (o ServiceSourceConfigurationImageRepositoryOutput) ImageIdentifier() pulumix.Output[string] {
	return pulumix.Apply[ServiceSourceConfigurationImageRepository](o, func(v ServiceSourceConfigurationImageRepository) string { return v.ImageIdentifier })
}

// Type of the image repository. This reflects the repository provider and whether the repository is private or public. Valid values: `ECR` , `ECR_PUBLIC`.
func (o ServiceSourceConfigurationImageRepositoryOutput) ImageRepositoryType() pulumix.Output[string] {
	return pulumix.Apply[ServiceSourceConfigurationImageRepository](o, func(v ServiceSourceConfigurationImageRepository) string { return v.ImageRepositoryType })
}

type ServiceSourceConfigurationImageRepositoryImageConfiguration struct {
	// Port that your application listens to in the container. Defaults to `"8080"`.
	Port *string `pulumi:"port"`
	// Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.
	RuntimeEnvironmentSecrets map[string]string `pulumi:"runtimeEnvironmentSecrets"`
	// Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of `AWSAPPRUNNER` are reserved for system use and aren't valid.
	RuntimeEnvironmentVariables map[string]string `pulumi:"runtimeEnvironmentVariables"`
	// Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.
	StartCommand *string `pulumi:"startCommand"`
}

type ServiceSourceConfigurationImageRepositoryImageConfigurationArgs struct {
	// Port that your application listens to in the container. Defaults to `"8080"`.
	Port pulumix.Input[*string] `pulumi:"port"`
	// Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.
	RuntimeEnvironmentSecrets pulumix.Input[map[string]string] `pulumi:"runtimeEnvironmentSecrets"`
	// Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of `AWSAPPRUNNER` are reserved for system use and aren't valid.
	RuntimeEnvironmentVariables pulumix.Input[map[string]string] `pulumi:"runtimeEnvironmentVariables"`
	// Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.
	StartCommand pulumix.Input[*string] `pulumi:"startCommand"`
}

func (ServiceSourceConfigurationImageRepositoryImageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfigurationImageRepositoryImageConfiguration)(nil)).Elem()
}

func (i ServiceSourceConfigurationImageRepositoryImageConfigurationArgs) ToServiceSourceConfigurationImageRepositoryImageConfigurationOutput() ServiceSourceConfigurationImageRepositoryImageConfigurationOutput {
	return i.ToServiceSourceConfigurationImageRepositoryImageConfigurationOutputWithContext(context.Background())
}

func (i ServiceSourceConfigurationImageRepositoryImageConfigurationArgs) ToServiceSourceConfigurationImageRepositoryImageConfigurationOutputWithContext(ctx context.Context) ServiceSourceConfigurationImageRepositoryImageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSourceConfigurationImageRepositoryImageConfigurationOutput)
}

func (i *ServiceSourceConfigurationImageRepositoryImageConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceSourceConfigurationImageRepositoryImageConfigurationArgs] {
	return pulumix.Val(i)
}

type ServiceSourceConfigurationImageRepositoryImageConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceSourceConfigurationImageRepositoryImageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSourceConfigurationImageRepositoryImageConfiguration)(nil)).Elem()
}

func (o ServiceSourceConfigurationImageRepositoryImageConfigurationOutput) ToServiceSourceConfigurationImageRepositoryImageConfigurationOutput() ServiceSourceConfigurationImageRepositoryImageConfigurationOutput {
	return o
}

func (o ServiceSourceConfigurationImageRepositoryImageConfigurationOutput) ToServiceSourceConfigurationImageRepositoryImageConfigurationOutputWithContext(ctx context.Context) ServiceSourceConfigurationImageRepositoryImageConfigurationOutput {
	return o
}

func (o ServiceSourceConfigurationImageRepositoryImageConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceSourceConfigurationImageRepositoryImageConfiguration] {
	return pulumix.Output[ServiceSourceConfigurationImageRepositoryImageConfiguration]{
		OutputState: o.OutputState,
	}
}

// Port that your application listens to in the container. Defaults to `"8080"`.
func (o ServiceSourceConfigurationImageRepositoryImageConfigurationOutput) Port() pulumix.Output[*string] {
	return pulumix.Apply[ServiceSourceConfigurationImageRepositoryImageConfiguration](o, func(v ServiceSourceConfigurationImageRepositoryImageConfiguration) *string { return v.Port })
}

// Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.
func (o ServiceSourceConfigurationImageRepositoryImageConfigurationOutput) RuntimeEnvironmentSecrets() pulumix.MapOutput[string] {
	value := pulumix.Apply[ServiceSourceConfigurationImageRepositoryImageConfiguration](o, func(v ServiceSourceConfigurationImageRepositoryImageConfiguration) map[string]string {
		return v.RuntimeEnvironmentSecrets
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of `AWSAPPRUNNER` are reserved for system use and aren't valid.
func (o ServiceSourceConfigurationImageRepositoryImageConfigurationOutput) RuntimeEnvironmentVariables() pulumix.MapOutput[string] {
	value := pulumix.Apply[ServiceSourceConfigurationImageRepositoryImageConfiguration](o, func(v ServiceSourceConfigurationImageRepositoryImageConfiguration) map[string]string {
		return v.RuntimeEnvironmentVariables
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.
func (o ServiceSourceConfigurationImageRepositoryImageConfigurationOutput) StartCommand() pulumix.Output[*string] {
	return pulumix.Apply[ServiceSourceConfigurationImageRepositoryImageConfiguration](o, func(v ServiceSourceConfigurationImageRepositoryImageConfiguration) *string { return v.StartCommand })
}

type VpcIngressConnectionIngressVpcConfiguration struct {
	// The ID of the VPC endpoint that your App Runner service connects to.
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
	// The ID of the VPC that is used for the VPC endpoint.
	VpcId *string `pulumi:"vpcId"`
}

type VpcIngressConnectionIngressVpcConfigurationArgs struct {
	// The ID of the VPC endpoint that your App Runner service connects to.
	VpcEndpointId pulumix.Input[*string] `pulumi:"vpcEndpointId"`
	// The ID of the VPC that is used for the VPC endpoint.
	VpcId pulumix.Input[*string] `pulumi:"vpcId"`
}

func (VpcIngressConnectionIngressVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcIngressConnectionIngressVpcConfiguration)(nil)).Elem()
}

func (i VpcIngressConnectionIngressVpcConfigurationArgs) ToVpcIngressConnectionIngressVpcConfigurationOutput() VpcIngressConnectionIngressVpcConfigurationOutput {
	return i.ToVpcIngressConnectionIngressVpcConfigurationOutputWithContext(context.Background())
}

func (i VpcIngressConnectionIngressVpcConfigurationArgs) ToVpcIngressConnectionIngressVpcConfigurationOutputWithContext(ctx context.Context) VpcIngressConnectionIngressVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcIngressConnectionIngressVpcConfigurationOutput)
}

func (i *VpcIngressConnectionIngressVpcConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*VpcIngressConnectionIngressVpcConfigurationArgs] {
	return pulumix.Val(i)
}

type VpcIngressConnectionIngressVpcConfigurationOutput struct{ *pulumi.OutputState }

func (VpcIngressConnectionIngressVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcIngressConnectionIngressVpcConfiguration)(nil)).Elem()
}

func (o VpcIngressConnectionIngressVpcConfigurationOutput) ToVpcIngressConnectionIngressVpcConfigurationOutput() VpcIngressConnectionIngressVpcConfigurationOutput {
	return o
}

func (o VpcIngressConnectionIngressVpcConfigurationOutput) ToVpcIngressConnectionIngressVpcConfigurationOutputWithContext(ctx context.Context) VpcIngressConnectionIngressVpcConfigurationOutput {
	return o
}

func (o VpcIngressConnectionIngressVpcConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[VpcIngressConnectionIngressVpcConfiguration] {
	return pulumix.Output[VpcIngressConnectionIngressVpcConfiguration]{
		OutputState: o.OutputState,
	}
}

// The ID of the VPC endpoint that your App Runner service connects to.
func (o VpcIngressConnectionIngressVpcConfigurationOutput) VpcEndpointId() pulumix.Output[*string] {
	return pulumix.Apply[VpcIngressConnectionIngressVpcConfiguration](o, func(v VpcIngressConnectionIngressVpcConfiguration) *string { return v.VpcEndpointId })
}

// The ID of the VPC that is used for the VPC endpoint.
func (o VpcIngressConnectionIngressVpcConfigurationOutput) VpcId() pulumix.Output[*string] {
	return pulumix.Apply[VpcIngressConnectionIngressVpcConfiguration](o, func(v VpcIngressConnectionIngressVpcConfiguration) *string { return v.VpcId })
}

func init() {
	pulumi.RegisterOutputType(CustomDomainAssociationCertificateValidationRecordOutput{})
	pulumi.RegisterOutputType(ObservabilityConfigurationTraceConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceHealthCheckConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceInstanceConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceNetworkConfigurationEgressConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceNetworkConfigurationIngressConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceObservabilityConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceSourceConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceSourceConfigurationAuthenticationConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceSourceConfigurationCodeRepositoryOutput{})
	pulumi.RegisterOutputType(ServiceSourceConfigurationCodeRepositoryCodeConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesOutput{})
	pulumi.RegisterOutputType(ServiceSourceConfigurationCodeRepositorySourceCodeVersionOutput{})
	pulumi.RegisterOutputType(ServiceSourceConfigurationImageRepositoryOutput{})
	pulumi.RegisterOutputType(ServiceSourceConfigurationImageRepositoryImageConfigurationOutput{})
	pulumi.RegisterOutputType(VpcIngressConnectionIngressVpcConfigurationOutput{})
}
