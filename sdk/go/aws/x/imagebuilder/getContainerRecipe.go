// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about an Image builder Container Recipe.
func LookupContainerRecipe(ctx *pulumi.Context, args *LookupContainerRecipeArgs, opts ...pulumi.InvokeOption) (*LookupContainerRecipeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupContainerRecipeResult
	err := ctx.Invoke("aws:imagebuilder/getContainerRecipe:getContainerRecipe", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainerRecipe.
type LookupContainerRecipeArgs struct {
	// ARN of the container recipe.
	Arn string `pulumi:"arn"`
	// Key-value map of resource tags for the container recipe.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getContainerRecipe.
type LookupContainerRecipeResult struct {
	Arn string `pulumi:"arn"`
	// List of objects with components for the container recipe.
	Components []GetContainerRecipeComponent `pulumi:"components"`
	// Type of the container.
	ContainerType string `pulumi:"containerType"`
	// Date the container recipe was created.
	DateCreated string `pulumi:"dateCreated"`
	// Description of the container recipe.
	Description string `pulumi:"description"`
	// Dockerfile template used to build the image.
	DockerfileTemplateData string `pulumi:"dockerfileTemplateData"`
	// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
	Encrypted bool `pulumi:"encrypted"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of objects with instance configurations for building and testing container images.
	InstanceConfigurations []GetContainerRecipeInstanceConfiguration `pulumi:"instanceConfigurations"`
	// KMS key used to encrypt the container image.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// Name of the container recipe.
	Name string `pulumi:"name"`
	// Owner of the container recipe.
	Owner string `pulumi:"owner"`
	// Base image for the container recipe.
	ParentImage string `pulumi:"parentImage"`
	// Platform of the container recipe.
	Platform string `pulumi:"platform"`
	// Key-value map of resource tags for the container recipe.
	Tags map[string]string `pulumi:"tags"`
	// Destination repository for the container image.
	TargetRepositories []GetContainerRecipeTargetRepository `pulumi:"targetRepositories"`
	// Version of the container recipe.
	Version string `pulumi:"version"`
	// Working directory used during build and test workflows.
	WorkingDirectory string `pulumi:"workingDirectory"`
}

func LookupContainerRecipeOutput(ctx *pulumi.Context, args LookupContainerRecipeOutputArgs, opts ...pulumi.InvokeOption) LookupContainerRecipeResultOutput {
	outputResult := pulumix.ApplyErr[*LookupContainerRecipeArgs](args.ToOutput(), func(plainArgs *LookupContainerRecipeArgs) (*LookupContainerRecipeResult, error) {
		return LookupContainerRecipe(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupContainerRecipeResultOutput, *LookupContainerRecipeResult](outputResult)
}

// A collection of arguments for invoking getContainerRecipe.
type LookupContainerRecipeOutputArgs struct {
	// ARN of the container recipe.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Key-value map of resource tags for the container recipe.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupContainerRecipeOutputArgs) ToOutput() pulumix.Output[*LookupContainerRecipeArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupContainerRecipeArgs {
		return &LookupContainerRecipeArgs{
			Arn:  resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupContainerRecipeResultOutput struct{ *pulumi.OutputState }

func (LookupContainerRecipeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerRecipeResult)(nil)).Elem()
}

func (o LookupContainerRecipeResultOutput) ToOutput(context.Context) pulumix.Output[*LookupContainerRecipeResult] {
	return pulumix.Output[*LookupContainerRecipeResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupContainerRecipeResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) string { return v.Arn })
}

func (o LookupContainerRecipeResultOutput) Components() pulumix.GArrayOutput[GetContainerRecipeComponent, GetContainerRecipeComponentOutput] {
	value := pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) []GetContainerRecipeComponent { return v.Components })
	return pulumix.GArrayOutput[GetContainerRecipeComponent, GetContainerRecipeComponentOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupContainerRecipeResultOutput) ContainerType() pulumix.Output[string] {
	return pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) string { return v.ContainerType })
}

func (o LookupContainerRecipeResultOutput) DateCreated() pulumix.Output[string] {
	return pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) string { return v.DateCreated })
}

func (o LookupContainerRecipeResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) string { return v.Description })
}

func (o LookupContainerRecipeResultOutput) DockerfileTemplateData() pulumix.Output[string] {
	return pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) string { return v.DockerfileTemplateData })
}

func (o LookupContainerRecipeResultOutput) Encrypted() pulumix.Output[bool] {
	return pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) bool { return v.Encrypted })
}

func (o LookupContainerRecipeResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) string { return v.Id })
}

func (o LookupContainerRecipeResultOutput) InstanceConfigurations() pulumix.GArrayOutput[GetContainerRecipeInstanceConfiguration, GetContainerRecipeInstanceConfigurationOutput] {
	value := pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) []GetContainerRecipeInstanceConfiguration {
		return v.InstanceConfigurations
	})
	return pulumix.GArrayOutput[GetContainerRecipeInstanceConfiguration, GetContainerRecipeInstanceConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupContainerRecipeResultOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) string { return v.KmsKeyId })
}

func (o LookupContainerRecipeResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) string { return v.Name })
}

func (o LookupContainerRecipeResultOutput) Owner() pulumix.Output[string] {
	return pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) string { return v.Owner })
}

func (o LookupContainerRecipeResultOutput) ParentImage() pulumix.Output[string] {
	return pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) string { return v.ParentImage })
}

func (o LookupContainerRecipeResultOutput) Platform() pulumix.Output[string] {
	return pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) string { return v.Platform })
}

func (o LookupContainerRecipeResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupContainerRecipeResultOutput) TargetRepositories() pulumix.GArrayOutput[GetContainerRecipeTargetRepository, GetContainerRecipeTargetRepositoryOutput] {
	value := pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) []GetContainerRecipeTargetRepository { return v.TargetRepositories })
	return pulumix.GArrayOutput[GetContainerRecipeTargetRepository, GetContainerRecipeTargetRepositoryOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupContainerRecipeResultOutput) Version() pulumix.Output[string] {
	return pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) string { return v.Version })
}

func (o LookupContainerRecipeResultOutput) WorkingDirectory() pulumix.Output[string] {
	return pulumix.Apply[*LookupContainerRecipeResult](o, func(v *LookupContainerRecipeResult) string { return v.WorkingDirectory })
}
