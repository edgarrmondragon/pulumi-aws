// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get attributes of AWS Directory Service directory (SimpleAD, Managed AD, AD Connector). It's especially useful to refer AWS Managed AD or on-premise AD in AD Connector configuration.
func LookupDirectory(ctx *pulumi.Context, args *LookupDirectoryArgs, opts ...pulumi.InvokeOption) (*LookupDirectoryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDirectoryResult
	err := ctx.Invoke("aws:directoryservice/getDirectory:getDirectory", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDirectory.
type LookupDirectoryArgs struct {
	// ID of the directory.
	DirectoryId string `pulumi:"directoryId"`
	// A map of tags assigned to the directory/connector.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getDirectory.
type LookupDirectoryResult struct {
	// Access URL for the directory/connector, such as http://alias.awsapps.com.
	AccessUrl string `pulumi:"accessUrl"`
	// Alias for the directory/connector, such as `d-991708b282.awsapps.com`.
	Alias           string                       `pulumi:"alias"`
	ConnectSettings []GetDirectoryConnectSetting `pulumi:"connectSettings"`
	// Textual description for the directory/connector.
	Description string `pulumi:"description"`
	DirectoryId string `pulumi:"directoryId"`
	// List of IP addresses of the DNS servers for the directory/connector.
	DnsIpAddresses []string `pulumi:"dnsIpAddresses"`
	// (for `MicrosoftAD`) Microsoft AD edition (`Standard` or `Enterprise`).
	Edition string `pulumi:"edition"`
	// Directory/connector single-sign on status.
	EnableSso bool `pulumi:"enableSso"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Fully qualified name for the directory/connector.
	Name           string                      `pulumi:"name"`
	RadiusSettings []GetDirectoryRadiusSetting `pulumi:"radiusSettings"`
	// ID of the security group created by the directory/connector.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// Short name of the directory/connector, such as `CORP`.
	ShortName string `pulumi:"shortName"`
	// (for `SimpleAD` and `ADConnector`) Size of the directory/connector (`Small` or `Large`).
	Size string `pulumi:"size"`
	// A map of tags assigned to the directory/connector.
	Tags map[string]string `pulumi:"tags"`
	// Directory type (`SimpleAD`, `ADConnector` or `MicrosoftAD`).
	Type        string                   `pulumi:"type"`
	VpcSettings []GetDirectoryVpcSetting `pulumi:"vpcSettings"`
}

func LookupDirectoryOutput(ctx *pulumi.Context, args LookupDirectoryOutputArgs, opts ...pulumi.InvokeOption) LookupDirectoryResultOutput {
	outputResult := pulumix.ApplyErr[*LookupDirectoryArgs](args.ToOutput(), func(plainArgs *LookupDirectoryArgs) (*LookupDirectoryResult, error) {
		return LookupDirectory(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupDirectoryResultOutput, *LookupDirectoryResult](outputResult)
}

// A collection of arguments for invoking getDirectory.
type LookupDirectoryOutputArgs struct {
	// ID of the directory.
	DirectoryId pulumix.Input[string] `pulumi:"directoryId"`
	// A map of tags assigned to the directory/connector.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupDirectoryOutputArgs) ToOutput() pulumix.Output[*LookupDirectoryArgs] {
	allArgs := pulumix.All(
		args.DirectoryId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupDirectoryArgs {
		return &LookupDirectoryArgs{
			DirectoryId: resolvedArgs[0].(string),
			Tags:        resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupDirectoryResultOutput struct{ *pulumi.OutputState }

func (LookupDirectoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDirectoryResult)(nil)).Elem()
}

func (o LookupDirectoryResultOutput) ToOutput(context.Context) pulumix.Output[*LookupDirectoryResult] {
	return pulumix.Output[*LookupDirectoryResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDirectoryResultOutput) AccessUrl() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.AccessUrl })
}

func (o LookupDirectoryResultOutput) Alias() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.Alias })
}

func (o LookupDirectoryResultOutput) ConnectSettings() pulumix.GArrayOutput[GetDirectoryConnectSetting, GetDirectoryConnectSettingOutput] {
	value := pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) []GetDirectoryConnectSetting { return v.ConnectSettings })
	return pulumix.GArrayOutput[GetDirectoryConnectSetting, GetDirectoryConnectSettingOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDirectoryResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.Description })
}

func (o LookupDirectoryResultOutput) DirectoryId() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.DirectoryId })
}

func (o LookupDirectoryResultOutput) DnsIpAddresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) []string { return v.DnsIpAddresses })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupDirectoryResultOutput) Edition() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.Edition })
}

func (o LookupDirectoryResultOutput) EnableSso() pulumix.Output[bool] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) bool { return v.EnableSso })
}

func (o LookupDirectoryResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.Id })
}

func (o LookupDirectoryResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.Name })
}

func (o LookupDirectoryResultOutput) RadiusSettings() pulumix.GArrayOutput[GetDirectoryRadiusSetting, GetDirectoryRadiusSettingOutput] {
	value := pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) []GetDirectoryRadiusSetting { return v.RadiusSettings })
	return pulumix.GArrayOutput[GetDirectoryRadiusSetting, GetDirectoryRadiusSettingOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDirectoryResultOutput) SecurityGroupId() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.SecurityGroupId })
}

func (o LookupDirectoryResultOutput) ShortName() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.ShortName })
}

func (o LookupDirectoryResultOutput) Size() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.Size })
}

func (o LookupDirectoryResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupDirectoryResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.Type })
}

func (o LookupDirectoryResultOutput) VpcSettings() pulumix.GArrayOutput[GetDirectoryVpcSetting, GetDirectoryVpcSettingOutput] {
	value := pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) []GetDirectoryVpcSetting { return v.VpcSettings })
	return pulumix.GArrayOutput[GetDirectoryVpcSetting, GetDirectoryVpcSettingOutput]{
		OutputState: value.OutputState,
	}
}
