// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudWatch Logs destination resource.
type LogDestination struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) specifying the log destination.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A name for the log destination.
	Name pulumix.Output[string] `pulumi:"name"`
	// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to put data into the target.
	RoleArn pulumix.Output[string] `pulumi:"roleArn"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The ARN of the target Amazon Kinesis stream resource for the destination.
	TargetArn pulumix.Output[string] `pulumi:"targetArn"`
}

// NewLogDestination registers a new resource with the given unique name, arguments, and options.
func NewLogDestination(ctx *pulumi.Context,
	name string, args *LogDestinationArgs, opts ...pulumi.ResourceOption) (*LogDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.TargetArn == nil {
		return nil, errors.New("invalid value for required argument 'TargetArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogDestination
	err := ctx.RegisterResource("aws:cloudwatch/logDestination:LogDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogDestination gets an existing LogDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogDestinationState, opts ...pulumi.ResourceOption) (*LogDestination, error) {
	var resource LogDestination
	err := ctx.ReadResource("aws:cloudwatch/logDestination:LogDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogDestination resources.
type logDestinationState struct {
	// The Amazon Resource Name (ARN) specifying the log destination.
	Arn *string `pulumi:"arn"`
	// A name for the log destination.
	Name *string `pulumi:"name"`
	// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to put data into the target.
	RoleArn *string `pulumi:"roleArn"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ARN of the target Amazon Kinesis stream resource for the destination.
	TargetArn *string `pulumi:"targetArn"`
}

type LogDestinationState struct {
	// The Amazon Resource Name (ARN) specifying the log destination.
	Arn pulumix.Input[*string]
	// A name for the log destination.
	Name pulumix.Input[*string]
	// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to put data into the target.
	RoleArn pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The ARN of the target Amazon Kinesis stream resource for the destination.
	TargetArn pulumix.Input[*string]
}

func (LogDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*logDestinationState)(nil)).Elem()
}

type logDestinationArgs struct {
	// A name for the log destination.
	Name *string `pulumi:"name"`
	// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to put data into the target.
	RoleArn string `pulumi:"roleArn"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The ARN of the target Amazon Kinesis stream resource for the destination.
	TargetArn string `pulumi:"targetArn"`
}

// The set of arguments for constructing a LogDestination resource.
type LogDestinationArgs struct {
	// A name for the log destination.
	Name pulumix.Input[*string]
	// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to put data into the target.
	RoleArn pulumix.Input[string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The ARN of the target Amazon Kinesis stream resource for the destination.
	TargetArn pulumix.Input[string]
}

func (LogDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logDestinationArgs)(nil)).Elem()
}

type LogDestinationOutput struct{ *pulumi.OutputState }

func (LogDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogDestination)(nil)).Elem()
}

func (o LogDestinationOutput) ToLogDestinationOutput() LogDestinationOutput {
	return o
}

func (o LogDestinationOutput) ToLogDestinationOutputWithContext(ctx context.Context) LogDestinationOutput {
	return o
}

func (o LogDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[LogDestination] {
	return pulumix.Output[LogDestination]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) specifying the log destination.
func (o LogDestinationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[LogDestination](o, func(v LogDestination) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A name for the log destination.
func (o LogDestinationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[LogDestination](o, func(v LogDestination) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to put data into the target.
func (o LogDestinationOutput) RoleArn() pulumix.Output[string] {
	value := pulumix.Apply[LogDestination](o, func(v LogDestination) pulumix.Output[string] { return v.RoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LogDestinationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[LogDestination](o, func(v LogDestination) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o LogDestinationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[LogDestination](o, func(v LogDestination) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The ARN of the target Amazon Kinesis stream resource for the destination.
func (o LogDestinationOutput) TargetArn() pulumix.Output[string] {
	value := pulumix.Apply[LogDestination](o, func(v LogDestination) pulumix.Output[string] { return v.TargetArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LogDestinationOutput{})
}
