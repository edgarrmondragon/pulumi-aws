// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicediscovery

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type HttpNamespace struct {
	pulumi.CustomResourceState

	// The ARN that Amazon Route 53 assigns to the namespace when you create it.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The description that you specify for the namespace when you create it.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The name of an HTTP namespace.
	HttpName pulumix.Output[string] `pulumi:"httpName"`
	// The name of the http namespace.
	Name pulumix.Output[string] `pulumi:"name"`
	// A map of tags to assign to the namespace. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewHttpNamespace registers a new resource with the given unique name, arguments, and options.
func NewHttpNamespace(ctx *pulumi.Context,
	name string, args *HttpNamespaceArgs, opts ...pulumi.ResourceOption) (*HttpNamespace, error) {
	if args == nil {
		args = &HttpNamespaceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HttpNamespace
	err := ctx.RegisterResource("aws:servicediscovery/httpNamespace:HttpNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHttpNamespace gets an existing HttpNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHttpNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HttpNamespaceState, opts ...pulumi.ResourceOption) (*HttpNamespace, error) {
	var resource HttpNamespace
	err := ctx.ReadResource("aws:servicediscovery/httpNamespace:HttpNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HttpNamespace resources.
type httpNamespaceState struct {
	// The ARN that Amazon Route 53 assigns to the namespace when you create it.
	Arn *string `pulumi:"arn"`
	// The description that you specify for the namespace when you create it.
	Description *string `pulumi:"description"`
	// The name of an HTTP namespace.
	HttpName *string `pulumi:"httpName"`
	// The name of the http namespace.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the namespace. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type HttpNamespaceState struct {
	// The ARN that Amazon Route 53 assigns to the namespace when you create it.
	Arn pulumix.Input[*string]
	// The description that you specify for the namespace when you create it.
	Description pulumix.Input[*string]
	// The name of an HTTP namespace.
	HttpName pulumix.Input[*string]
	// The name of the http namespace.
	Name pulumix.Input[*string]
	// A map of tags to assign to the namespace. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (HttpNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*httpNamespaceState)(nil)).Elem()
}

type httpNamespaceArgs struct {
	// The description that you specify for the namespace when you create it.
	Description *string `pulumi:"description"`
	// The name of the http namespace.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the namespace. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a HttpNamespace resource.
type HttpNamespaceArgs struct {
	// The description that you specify for the namespace when you create it.
	Description pulumix.Input[*string]
	// The name of the http namespace.
	Name pulumix.Input[*string]
	// A map of tags to assign to the namespace. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (HttpNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httpNamespaceArgs)(nil)).Elem()
}

type HttpNamespaceOutput struct{ *pulumi.OutputState }

func (HttpNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpNamespace)(nil)).Elem()
}

func (o HttpNamespaceOutput) ToHttpNamespaceOutput() HttpNamespaceOutput {
	return o
}

func (o HttpNamespaceOutput) ToHttpNamespaceOutputWithContext(ctx context.Context) HttpNamespaceOutput {
	return o
}

func (o HttpNamespaceOutput) ToOutput(ctx context.Context) pulumix.Output[HttpNamespace] {
	return pulumix.Output[HttpNamespace]{
		OutputState: o.OutputState,
	}
}

// The ARN that Amazon Route 53 assigns to the namespace when you create it.
func (o HttpNamespaceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[HttpNamespace](o, func(v HttpNamespace) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The description that you specify for the namespace when you create it.
func (o HttpNamespaceOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[HttpNamespace](o, func(v HttpNamespace) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of an HTTP namespace.
func (o HttpNamespaceOutput) HttpName() pulumix.Output[string] {
	value := pulumix.Apply[HttpNamespace](o, func(v HttpNamespace) pulumix.Output[string] { return v.HttpName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the http namespace.
func (o HttpNamespaceOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[HttpNamespace](o, func(v HttpNamespace) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the namespace. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o HttpNamespaceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[HttpNamespace](o, func(v HttpNamespace) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o HttpNamespaceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[HttpNamespace](o, func(v HttpNamespace) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(HttpNamespaceOutput{})
}
