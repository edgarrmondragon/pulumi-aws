// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get information on an EC2 Transit Gateway Peering Attachment.
func LookupPeeringAttachment(ctx *pulumi.Context, args *LookupPeeringAttachmentArgs, opts ...pulumi.InvokeOption) (*LookupPeeringAttachmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPeeringAttachmentResult
	err := ctx.Invoke("aws:ec2transitgateway/getPeeringAttachment:getPeeringAttachment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPeeringAttachment.
type LookupPeeringAttachmentArgs struct {
	// One or more configuration blocks containing name-values filters. Detailed below.
	Filters []GetPeeringAttachmentFilter `pulumi:"filters"`
	// Identifier of the EC2 Transit Gateway Peering Attachment.
	Id *string `pulumi:"id"`
	// Mapping of tags, each pair of which must exactly match
	// a pair on the specific EC2 Transit Gateway Peering Attachment to retrieve.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getPeeringAttachment.
type LookupPeeringAttachmentResult struct {
	Filters []GetPeeringAttachmentFilter `pulumi:"filters"`
	Id      string                       `pulumi:"id"`
	// Identifier of the peer AWS account
	PeerAccountId string `pulumi:"peerAccountId"`
	// Identifier of the peer AWS region
	PeerRegion string `pulumi:"peerRegion"`
	// Identifier of the peer EC2 Transit Gateway
	PeerTransitGatewayId string            `pulumi:"peerTransitGatewayId"`
	Tags                 map[string]string `pulumi:"tags"`
	// Identifier of the local EC2 Transit Gateway
	TransitGatewayId string `pulumi:"transitGatewayId"`
}

func LookupPeeringAttachmentOutput(ctx *pulumi.Context, args LookupPeeringAttachmentOutputArgs, opts ...pulumi.InvokeOption) LookupPeeringAttachmentResultOutput {
	outputResult := pulumix.ApplyErr[*LookupPeeringAttachmentArgs](args.ToOutput(), func(plainArgs *LookupPeeringAttachmentArgs) (*LookupPeeringAttachmentResult, error) {
		return LookupPeeringAttachment(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupPeeringAttachmentResultOutput, *LookupPeeringAttachmentResult](outputResult)
}

// A collection of arguments for invoking getPeeringAttachment.
type LookupPeeringAttachmentOutputArgs struct {
	// One or more configuration blocks containing name-values filters. Detailed below.
	Filters pulumix.Input[[]*GetPeeringAttachmentFilterArgs] `pulumi:"filters"`
	// Identifier of the EC2 Transit Gateway Peering Attachment.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Mapping of tags, each pair of which must exactly match
	// a pair on the specific EC2 Transit Gateway Peering Attachment to retrieve.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupPeeringAttachmentOutputArgs) ToOutput() pulumix.Output[*LookupPeeringAttachmentArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupPeeringAttachmentArgs {
		return &LookupPeeringAttachmentArgs{
			Filters: resolvedArgs[0].([]GetPeeringAttachmentFilter),
			Id:      resolvedArgs[1].(*string),
			Tags:    resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupPeeringAttachmentResultOutput struct{ *pulumi.OutputState }

func (LookupPeeringAttachmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPeeringAttachmentResult)(nil)).Elem()
}

func (o LookupPeeringAttachmentResultOutput) ToOutput(context.Context) pulumix.Output[*LookupPeeringAttachmentResult] {
	return pulumix.Output[*LookupPeeringAttachmentResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupPeeringAttachmentResultOutput) Filters() pulumix.GArrayOutput[GetPeeringAttachmentFilter, GetPeeringAttachmentFilterOutput] {
	value := pulumix.Apply[*LookupPeeringAttachmentResult](o, func(v *LookupPeeringAttachmentResult) []GetPeeringAttachmentFilter { return v.Filters })
	return pulumix.GArrayOutput[GetPeeringAttachmentFilter, GetPeeringAttachmentFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupPeeringAttachmentResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupPeeringAttachmentResult](o, func(v *LookupPeeringAttachmentResult) string { return v.Id })
}

func (o LookupPeeringAttachmentResultOutput) PeerAccountId() pulumix.Output[string] {
	return pulumix.Apply[*LookupPeeringAttachmentResult](o, func(v *LookupPeeringAttachmentResult) string { return v.PeerAccountId })
}

func (o LookupPeeringAttachmentResultOutput) PeerRegion() pulumix.Output[string] {
	return pulumix.Apply[*LookupPeeringAttachmentResult](o, func(v *LookupPeeringAttachmentResult) string { return v.PeerRegion })
}

func (o LookupPeeringAttachmentResultOutput) PeerTransitGatewayId() pulumix.Output[string] {
	return pulumix.Apply[*LookupPeeringAttachmentResult](o, func(v *LookupPeeringAttachmentResult) string { return v.PeerTransitGatewayId })
}

func (o LookupPeeringAttachmentResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupPeeringAttachmentResult](o, func(v *LookupPeeringAttachmentResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupPeeringAttachmentResultOutput) TransitGatewayId() pulumix.Output[string] {
	return pulumix.Apply[*LookupPeeringAttachmentResult](o, func(v *LookupPeeringAttachmentResult) string { return v.TransitGatewayId })
}
