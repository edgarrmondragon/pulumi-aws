// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an OpsWorks instance resource.
type Instance struct {
	pulumi.CustomResourceState

	// OpsWorks agent to install. Default is `INHERIT`.
	AgentVersion pulumix.Output[*string] `pulumi:"agentVersion"`
	// AMI to use for the instance.  If an AMI is specified, `os` must be `Custom`.
	AmiId pulumix.Output[string] `pulumi:"amiId"`
	// Machine architecture for created instances.  Valid values are `x8664` or `i386`. The default is `x8664`.
	Architecture pulumix.Output[*string] `pulumi:"architecture"`
	// Creates load-based or time-based instances.  Valid values are `load`, `timer`.
	AutoScalingType pulumix.Output[*string] `pulumi:"autoScalingType"`
	// Name of the availability zone where instances will be created by default.
	AvailabilityZone pulumix.Output[string] `pulumi:"availabilityZone"`
	// Time that the instance was created.
	CreatedAt pulumix.Output[string] `pulumi:"createdAt"`
	// Whether to delete EBS volume on deletion. Default is `true`.
	DeleteEbs pulumix.Output[*bool] `pulumi:"deleteEbs"`
	// Whether to delete the Elastic IP on deletion.
	DeleteEip pulumix.Output[*bool] `pulumi:"deleteEip"`
	// Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.
	EbsBlockDevices pulumix.GArrayOutput[InstanceEbsBlockDevice, InstanceEbsBlockDeviceOutput] `pulumi:"ebsBlockDevices"`
	// Whether the launched EC2 instance will be EBS-optimized.
	EbsOptimized pulumix.Output[*bool] `pulumi:"ebsOptimized"`
	// EC2 instance ID.
	Ec2InstanceId pulumix.Output[string] `pulumi:"ec2InstanceId"`
	// ECS cluster's ARN for container instances.
	EcsClusterArn pulumix.Output[string] `pulumi:"ecsClusterArn"`
	// Instance Elastic IP address.
	ElasticIp pulumix.Output[string] `pulumi:"elasticIp"`
	// Configuration block for ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below.
	EphemeralBlockDevices pulumix.GArrayOutput[InstanceEphemeralBlockDevice, InstanceEphemeralBlockDeviceOutput] `pulumi:"ephemeralBlockDevices"`
	// Instance's host name.
	Hostname pulumix.Output[string] `pulumi:"hostname"`
	// For registered instances, infrastructure class: ec2 or on-premises.
	InfrastructureClass pulumix.Output[string] `pulumi:"infrastructureClass"`
	// Controls where to install OS and package updates when the instance boots.  Default is `true`.
	InstallUpdatesOnBoot pulumix.Output[*bool] `pulumi:"installUpdatesOnBoot"`
	// ARN of the instance's IAM profile.
	InstanceProfileArn pulumix.Output[string] `pulumi:"instanceProfileArn"`
	// Type of instance to start.
	InstanceType pulumix.Output[*string] `pulumi:"instanceType"`
	// ID of the last service error.
	LastServiceErrorId pulumix.Output[string] `pulumi:"lastServiceErrorId"`
	// List of the layers the instance will belong to.
	LayerIds pulumix.ArrayOutput[string] `pulumi:"layerIds"`
	// Name of operating system that will be installed.
	Os pulumix.Output[string] `pulumi:"os"`
	// Instance's platform.
	Platform pulumix.Output[string] `pulumi:"platform"`
	// Private DNS name assigned to the instance. Can only be used inside the Amazon EC2, and only available if you've enabled DNS hostnames for your VPC.
	PrivateDns pulumix.Output[string] `pulumi:"privateDns"`
	// Private IP address assigned to the instance.
	PrivateIp pulumix.Output[string] `pulumi:"privateIp"`
	// Public DNS name assigned to the instance. For EC2-VPC, this is only available if you've enabled DNS hostnames for your VPC.
	PublicDns pulumix.Output[string] `pulumi:"publicDns"`
	// Public IP address assigned to the instance, if applicable.
	PublicIp pulumix.Output[string] `pulumi:"publicIp"`
	// For registered instances, who performed the registration.
	RegisteredBy pulumix.Output[string] `pulumi:"registeredBy"`
	// Instance's reported AWS OpsWorks Stacks agent version.
	ReportedAgentVersion pulumix.Output[string] `pulumi:"reportedAgentVersion"`
	// For registered instances, the reported operating system family.
	ReportedOsFamily pulumix.Output[string] `pulumi:"reportedOsFamily"`
	// For registered instances, the reported operating system name.
	ReportedOsName pulumix.Output[string] `pulumi:"reportedOsName"`
	// For registered instances, the reported operating system version.
	ReportedOsVersion pulumix.Output[string] `pulumi:"reportedOsVersion"`
	// Configuration block for the root block device of the instance. See Block Devices below.
	RootBlockDevices pulumix.GArrayOutput[InstanceRootBlockDevice, InstanceRootBlockDeviceOutput] `pulumi:"rootBlockDevices"`
	// Name of the type of root device instances will have by default. Valid values are `ebs` or `instance-store`.
	RootDeviceType pulumix.Output[string] `pulumi:"rootDeviceType"`
	// Root device volume ID.
	RootDeviceVolumeId pulumix.Output[string] `pulumi:"rootDeviceVolumeId"`
	// Associated security groups.
	SecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"securityGroupIds"`
	// SSH key's Deep Security Agent (DSA) fingerprint.
	SshHostDsaKeyFingerprint pulumix.Output[string] `pulumi:"sshHostDsaKeyFingerprint"`
	// SSH key's RSA fingerprint.
	SshHostRsaKeyFingerprint pulumix.Output[string] `pulumi:"sshHostRsaKeyFingerprint"`
	// Name of the SSH keypair that instances will have by default.
	SshKeyName pulumix.Output[string] `pulumi:"sshKeyName"`
	// Identifier of the stack the instance will belong to.
	//
	// The following arguments are optional:
	StackId pulumix.Output[string] `pulumi:"stackId"`
	// Desired state of the instance. Valid values are `running` or `stopped`.
	State pulumix.Output[*string] `pulumi:"state"`
	// Instance status. Will be one of `booting`, `connectionLost`, `online`, `pending`, `rebooting`, `requested`, `runningSetup`, `setupFailed`, `shuttingDown`, `startFailed`, `stopFailed`, `stopped`, `stopping`, `terminated`, or `terminating`.
	Status pulumix.Output[string] `pulumi:"status"`
	// Subnet ID to attach to.
	SubnetId pulumix.Output[string] `pulumi:"subnetId"`
	// Instance tenancy to use. Valid values are `default`, `dedicated` or `host`.
	Tenancy pulumix.Output[string] `pulumi:"tenancy"`
	// Keyword to choose what virtualization mode created instances will use. Valid values are `paravirtual` or `hvm`.
	VirtualizationType pulumix.Output[string] `pulumi:"virtualizationType"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LayerIds == nil {
		return nil, errors.New("invalid value for required argument 'LayerIds'")
	}
	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("aws:opsworks/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("aws:opsworks/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// OpsWorks agent to install. Default is `INHERIT`.
	AgentVersion *string `pulumi:"agentVersion"`
	// AMI to use for the instance.  If an AMI is specified, `os` must be `Custom`.
	AmiId *string `pulumi:"amiId"`
	// Machine architecture for created instances.  Valid values are `x8664` or `i386`. The default is `x8664`.
	Architecture *string `pulumi:"architecture"`
	// Creates load-based or time-based instances.  Valid values are `load`, `timer`.
	AutoScalingType *string `pulumi:"autoScalingType"`
	// Name of the availability zone where instances will be created by default.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Time that the instance was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Whether to delete EBS volume on deletion. Default is `true`.
	DeleteEbs *bool `pulumi:"deleteEbs"`
	// Whether to delete the Elastic IP on deletion.
	DeleteEip *bool `pulumi:"deleteEip"`
	// Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.
	EbsBlockDevices []InstanceEbsBlockDevice `pulumi:"ebsBlockDevices"`
	// Whether the launched EC2 instance will be EBS-optimized.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// EC2 instance ID.
	Ec2InstanceId *string `pulumi:"ec2InstanceId"`
	// ECS cluster's ARN for container instances.
	EcsClusterArn *string `pulumi:"ecsClusterArn"`
	// Instance Elastic IP address.
	ElasticIp *string `pulumi:"elasticIp"`
	// Configuration block for ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below.
	EphemeralBlockDevices []InstanceEphemeralBlockDevice `pulumi:"ephemeralBlockDevices"`
	// Instance's host name.
	Hostname *string `pulumi:"hostname"`
	// For registered instances, infrastructure class: ec2 or on-premises.
	InfrastructureClass *string `pulumi:"infrastructureClass"`
	// Controls where to install OS and package updates when the instance boots.  Default is `true`.
	InstallUpdatesOnBoot *bool `pulumi:"installUpdatesOnBoot"`
	// ARN of the instance's IAM profile.
	InstanceProfileArn *string `pulumi:"instanceProfileArn"`
	// Type of instance to start.
	InstanceType *string `pulumi:"instanceType"`
	// ID of the last service error.
	LastServiceErrorId *string `pulumi:"lastServiceErrorId"`
	// List of the layers the instance will belong to.
	LayerIds []string `pulumi:"layerIds"`
	// Name of operating system that will be installed.
	Os *string `pulumi:"os"`
	// Instance's platform.
	Platform *string `pulumi:"platform"`
	// Private DNS name assigned to the instance. Can only be used inside the Amazon EC2, and only available if you've enabled DNS hostnames for your VPC.
	PrivateDns *string `pulumi:"privateDns"`
	// Private IP address assigned to the instance.
	PrivateIp *string `pulumi:"privateIp"`
	// Public DNS name assigned to the instance. For EC2-VPC, this is only available if you've enabled DNS hostnames for your VPC.
	PublicDns *string `pulumi:"publicDns"`
	// Public IP address assigned to the instance, if applicable.
	PublicIp *string `pulumi:"publicIp"`
	// For registered instances, who performed the registration.
	RegisteredBy *string `pulumi:"registeredBy"`
	// Instance's reported AWS OpsWorks Stacks agent version.
	ReportedAgentVersion *string `pulumi:"reportedAgentVersion"`
	// For registered instances, the reported operating system family.
	ReportedOsFamily *string `pulumi:"reportedOsFamily"`
	// For registered instances, the reported operating system name.
	ReportedOsName *string `pulumi:"reportedOsName"`
	// For registered instances, the reported operating system version.
	ReportedOsVersion *string `pulumi:"reportedOsVersion"`
	// Configuration block for the root block device of the instance. See Block Devices below.
	RootBlockDevices []InstanceRootBlockDevice `pulumi:"rootBlockDevices"`
	// Name of the type of root device instances will have by default. Valid values are `ebs` or `instance-store`.
	RootDeviceType *string `pulumi:"rootDeviceType"`
	// Root device volume ID.
	RootDeviceVolumeId *string `pulumi:"rootDeviceVolumeId"`
	// Associated security groups.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// SSH key's Deep Security Agent (DSA) fingerprint.
	SshHostDsaKeyFingerprint *string `pulumi:"sshHostDsaKeyFingerprint"`
	// SSH key's RSA fingerprint.
	SshHostRsaKeyFingerprint *string `pulumi:"sshHostRsaKeyFingerprint"`
	// Name of the SSH keypair that instances will have by default.
	SshKeyName *string `pulumi:"sshKeyName"`
	// Identifier of the stack the instance will belong to.
	//
	// The following arguments are optional:
	StackId *string `pulumi:"stackId"`
	// Desired state of the instance. Valid values are `running` or `stopped`.
	State *string `pulumi:"state"`
	// Instance status. Will be one of `booting`, `connectionLost`, `online`, `pending`, `rebooting`, `requested`, `runningSetup`, `setupFailed`, `shuttingDown`, `startFailed`, `stopFailed`, `stopped`, `stopping`, `terminated`, or `terminating`.
	Status *string `pulumi:"status"`
	// Subnet ID to attach to.
	SubnetId *string `pulumi:"subnetId"`
	// Instance tenancy to use. Valid values are `default`, `dedicated` or `host`.
	Tenancy *string `pulumi:"tenancy"`
	// Keyword to choose what virtualization mode created instances will use. Valid values are `paravirtual` or `hvm`.
	VirtualizationType *string `pulumi:"virtualizationType"`
}

type InstanceState struct {
	// OpsWorks agent to install. Default is `INHERIT`.
	AgentVersion pulumix.Input[*string]
	// AMI to use for the instance.  If an AMI is specified, `os` must be `Custom`.
	AmiId pulumix.Input[*string]
	// Machine architecture for created instances.  Valid values are `x8664` or `i386`. The default is `x8664`.
	Architecture pulumix.Input[*string]
	// Creates load-based or time-based instances.  Valid values are `load`, `timer`.
	AutoScalingType pulumix.Input[*string]
	// Name of the availability zone where instances will be created by default.
	AvailabilityZone pulumix.Input[*string]
	// Time that the instance was created.
	CreatedAt pulumix.Input[*string]
	// Whether to delete EBS volume on deletion. Default is `true`.
	DeleteEbs pulumix.Input[*bool]
	// Whether to delete the Elastic IP on deletion.
	DeleteEip pulumix.Input[*bool]
	// Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.
	EbsBlockDevices pulumix.Input[[]*InstanceEbsBlockDeviceArgs]
	// Whether the launched EC2 instance will be EBS-optimized.
	EbsOptimized pulumix.Input[*bool]
	// EC2 instance ID.
	Ec2InstanceId pulumix.Input[*string]
	// ECS cluster's ARN for container instances.
	EcsClusterArn pulumix.Input[*string]
	// Instance Elastic IP address.
	ElasticIp pulumix.Input[*string]
	// Configuration block for ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below.
	EphemeralBlockDevices pulumix.Input[[]*InstanceEphemeralBlockDeviceArgs]
	// Instance's host name.
	Hostname pulumix.Input[*string]
	// For registered instances, infrastructure class: ec2 or on-premises.
	InfrastructureClass pulumix.Input[*string]
	// Controls where to install OS and package updates when the instance boots.  Default is `true`.
	InstallUpdatesOnBoot pulumix.Input[*bool]
	// ARN of the instance's IAM profile.
	InstanceProfileArn pulumix.Input[*string]
	// Type of instance to start.
	InstanceType pulumix.Input[*string]
	// ID of the last service error.
	LastServiceErrorId pulumix.Input[*string]
	// List of the layers the instance will belong to.
	LayerIds pulumix.Input[[]string]
	// Name of operating system that will be installed.
	Os pulumix.Input[*string]
	// Instance's platform.
	Platform pulumix.Input[*string]
	// Private DNS name assigned to the instance. Can only be used inside the Amazon EC2, and only available if you've enabled DNS hostnames for your VPC.
	PrivateDns pulumix.Input[*string]
	// Private IP address assigned to the instance.
	PrivateIp pulumix.Input[*string]
	// Public DNS name assigned to the instance. For EC2-VPC, this is only available if you've enabled DNS hostnames for your VPC.
	PublicDns pulumix.Input[*string]
	// Public IP address assigned to the instance, if applicable.
	PublicIp pulumix.Input[*string]
	// For registered instances, who performed the registration.
	RegisteredBy pulumix.Input[*string]
	// Instance's reported AWS OpsWorks Stacks agent version.
	ReportedAgentVersion pulumix.Input[*string]
	// For registered instances, the reported operating system family.
	ReportedOsFamily pulumix.Input[*string]
	// For registered instances, the reported operating system name.
	ReportedOsName pulumix.Input[*string]
	// For registered instances, the reported operating system version.
	ReportedOsVersion pulumix.Input[*string]
	// Configuration block for the root block device of the instance. See Block Devices below.
	RootBlockDevices pulumix.Input[[]*InstanceRootBlockDeviceArgs]
	// Name of the type of root device instances will have by default. Valid values are `ebs` or `instance-store`.
	RootDeviceType pulumix.Input[*string]
	// Root device volume ID.
	RootDeviceVolumeId pulumix.Input[*string]
	// Associated security groups.
	SecurityGroupIds pulumix.Input[[]string]
	// SSH key's Deep Security Agent (DSA) fingerprint.
	SshHostDsaKeyFingerprint pulumix.Input[*string]
	// SSH key's RSA fingerprint.
	SshHostRsaKeyFingerprint pulumix.Input[*string]
	// Name of the SSH keypair that instances will have by default.
	SshKeyName pulumix.Input[*string]
	// Identifier of the stack the instance will belong to.
	//
	// The following arguments are optional:
	StackId pulumix.Input[*string]
	// Desired state of the instance. Valid values are `running` or `stopped`.
	State pulumix.Input[*string]
	// Instance status. Will be one of `booting`, `connectionLost`, `online`, `pending`, `rebooting`, `requested`, `runningSetup`, `setupFailed`, `shuttingDown`, `startFailed`, `stopFailed`, `stopped`, `stopping`, `terminated`, or `terminating`.
	Status pulumix.Input[*string]
	// Subnet ID to attach to.
	SubnetId pulumix.Input[*string]
	// Instance tenancy to use. Valid values are `default`, `dedicated` or `host`.
	Tenancy pulumix.Input[*string]
	// Keyword to choose what virtualization mode created instances will use. Valid values are `paravirtual` or `hvm`.
	VirtualizationType pulumix.Input[*string]
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// OpsWorks agent to install. Default is `INHERIT`.
	AgentVersion *string `pulumi:"agentVersion"`
	// AMI to use for the instance.  If an AMI is specified, `os` must be `Custom`.
	AmiId *string `pulumi:"amiId"`
	// Machine architecture for created instances.  Valid values are `x8664` or `i386`. The default is `x8664`.
	Architecture *string `pulumi:"architecture"`
	// Creates load-based or time-based instances.  Valid values are `load`, `timer`.
	AutoScalingType *string `pulumi:"autoScalingType"`
	// Name of the availability zone where instances will be created by default.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Time that the instance was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Whether to delete EBS volume on deletion. Default is `true`.
	DeleteEbs *bool `pulumi:"deleteEbs"`
	// Whether to delete the Elastic IP on deletion.
	DeleteEip *bool `pulumi:"deleteEip"`
	// Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.
	EbsBlockDevices []InstanceEbsBlockDevice `pulumi:"ebsBlockDevices"`
	// Whether the launched EC2 instance will be EBS-optimized.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// ECS cluster's ARN for container instances.
	EcsClusterArn *string `pulumi:"ecsClusterArn"`
	// Instance Elastic IP address.
	ElasticIp *string `pulumi:"elasticIp"`
	// Configuration block for ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below.
	EphemeralBlockDevices []InstanceEphemeralBlockDevice `pulumi:"ephemeralBlockDevices"`
	// Instance's host name.
	Hostname *string `pulumi:"hostname"`
	// For registered instances, infrastructure class: ec2 or on-premises.
	InfrastructureClass *string `pulumi:"infrastructureClass"`
	// Controls where to install OS and package updates when the instance boots.  Default is `true`.
	InstallUpdatesOnBoot *bool `pulumi:"installUpdatesOnBoot"`
	// ARN of the instance's IAM profile.
	InstanceProfileArn *string `pulumi:"instanceProfileArn"`
	// Type of instance to start.
	InstanceType *string `pulumi:"instanceType"`
	// List of the layers the instance will belong to.
	LayerIds []string `pulumi:"layerIds"`
	// Name of operating system that will be installed.
	Os *string `pulumi:"os"`
	// Configuration block for the root block device of the instance. See Block Devices below.
	RootBlockDevices []InstanceRootBlockDevice `pulumi:"rootBlockDevices"`
	// Name of the type of root device instances will have by default. Valid values are `ebs` or `instance-store`.
	RootDeviceType *string `pulumi:"rootDeviceType"`
	// Associated security groups.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Name of the SSH keypair that instances will have by default.
	SshKeyName *string `pulumi:"sshKeyName"`
	// Identifier of the stack the instance will belong to.
	//
	// The following arguments are optional:
	StackId string `pulumi:"stackId"`
	// Desired state of the instance. Valid values are `running` or `stopped`.
	State *string `pulumi:"state"`
	// Instance status. Will be one of `booting`, `connectionLost`, `online`, `pending`, `rebooting`, `requested`, `runningSetup`, `setupFailed`, `shuttingDown`, `startFailed`, `stopFailed`, `stopped`, `stopping`, `terminated`, or `terminating`.
	Status *string `pulumi:"status"`
	// Subnet ID to attach to.
	SubnetId *string `pulumi:"subnetId"`
	// Instance tenancy to use. Valid values are `default`, `dedicated` or `host`.
	Tenancy *string `pulumi:"tenancy"`
	// Keyword to choose what virtualization mode created instances will use. Valid values are `paravirtual` or `hvm`.
	VirtualizationType *string `pulumi:"virtualizationType"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// OpsWorks agent to install. Default is `INHERIT`.
	AgentVersion pulumix.Input[*string]
	// AMI to use for the instance.  If an AMI is specified, `os` must be `Custom`.
	AmiId pulumix.Input[*string]
	// Machine architecture for created instances.  Valid values are `x8664` or `i386`. The default is `x8664`.
	Architecture pulumix.Input[*string]
	// Creates load-based or time-based instances.  Valid values are `load`, `timer`.
	AutoScalingType pulumix.Input[*string]
	// Name of the availability zone where instances will be created by default.
	AvailabilityZone pulumix.Input[*string]
	// Time that the instance was created.
	CreatedAt pulumix.Input[*string]
	// Whether to delete EBS volume on deletion. Default is `true`.
	DeleteEbs pulumix.Input[*bool]
	// Whether to delete the Elastic IP on deletion.
	DeleteEip pulumix.Input[*bool]
	// Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.
	EbsBlockDevices pulumix.Input[[]*InstanceEbsBlockDeviceArgs]
	// Whether the launched EC2 instance will be EBS-optimized.
	EbsOptimized pulumix.Input[*bool]
	// ECS cluster's ARN for container instances.
	EcsClusterArn pulumix.Input[*string]
	// Instance Elastic IP address.
	ElasticIp pulumix.Input[*string]
	// Configuration block for ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below.
	EphemeralBlockDevices pulumix.Input[[]*InstanceEphemeralBlockDeviceArgs]
	// Instance's host name.
	Hostname pulumix.Input[*string]
	// For registered instances, infrastructure class: ec2 or on-premises.
	InfrastructureClass pulumix.Input[*string]
	// Controls where to install OS and package updates when the instance boots.  Default is `true`.
	InstallUpdatesOnBoot pulumix.Input[*bool]
	// ARN of the instance's IAM profile.
	InstanceProfileArn pulumix.Input[*string]
	// Type of instance to start.
	InstanceType pulumix.Input[*string]
	// List of the layers the instance will belong to.
	LayerIds pulumix.Input[[]string]
	// Name of operating system that will be installed.
	Os pulumix.Input[*string]
	// Configuration block for the root block device of the instance. See Block Devices below.
	RootBlockDevices pulumix.Input[[]*InstanceRootBlockDeviceArgs]
	// Name of the type of root device instances will have by default. Valid values are `ebs` or `instance-store`.
	RootDeviceType pulumix.Input[*string]
	// Associated security groups.
	SecurityGroupIds pulumix.Input[[]string]
	// Name of the SSH keypair that instances will have by default.
	SshKeyName pulumix.Input[*string]
	// Identifier of the stack the instance will belong to.
	//
	// The following arguments are optional:
	StackId pulumix.Input[string]
	// Desired state of the instance. Valid values are `running` or `stopped`.
	State pulumix.Input[*string]
	// Instance status. Will be one of `booting`, `connectionLost`, `online`, `pending`, `rebooting`, `requested`, `runningSetup`, `setupFailed`, `shuttingDown`, `startFailed`, `stopFailed`, `stopped`, `stopping`, `terminated`, or `terminating`.
	Status pulumix.Input[*string]
	// Subnet ID to attach to.
	SubnetId pulumix.Input[*string]
	// Instance tenancy to use. Valid values are `default`, `dedicated` or `host`.
	Tenancy pulumix.Input[*string]
	// Keyword to choose what virtualization mode created instances will use. Valid values are `paravirtual` or `hvm`.
	VirtualizationType pulumix.Input[*string]
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

func (o InstanceOutput) ToOutput(ctx context.Context) pulumix.Output[Instance] {
	return pulumix.Output[Instance]{
		OutputState: o.OutputState,
	}
}

// OpsWorks agent to install. Default is `INHERIT`.
func (o InstanceOutput) AgentVersion() pulumix.Output[*string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[*string] { return v.AgentVersion })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// AMI to use for the instance.  If an AMI is specified, `os` must be `Custom`.
func (o InstanceOutput) AmiId() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.AmiId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Machine architecture for created instances.  Valid values are `x8664` or `i386`. The default is `x8664`.
func (o InstanceOutput) Architecture() pulumix.Output[*string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[*string] { return v.Architecture })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Creates load-based or time-based instances.  Valid values are `load`, `timer`.
func (o InstanceOutput) AutoScalingType() pulumix.Output[*string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[*string] { return v.AutoScalingType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the availability zone where instances will be created by default.
func (o InstanceOutput) AvailabilityZone() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.AvailabilityZone })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Time that the instance was created.
func (o InstanceOutput) CreatedAt() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.CreatedAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to delete EBS volume on deletion. Default is `true`.
func (o InstanceOutput) DeleteEbs() pulumix.Output[*bool] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[*bool] { return v.DeleteEbs })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Whether to delete the Elastic IP on deletion.
func (o InstanceOutput) DeleteEip() pulumix.Output[*bool] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[*bool] { return v.DeleteEip })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.
func (o InstanceOutput) EbsBlockDevices() pulumix.GArrayOutput[InstanceEbsBlockDevice, InstanceEbsBlockDeviceOutput] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.GArrayOutput[InstanceEbsBlockDevice, InstanceEbsBlockDeviceOutput] {
		return v.EbsBlockDevices
	})
	unwrapped := pulumix.Flatten[[]InstanceEbsBlockDevice, pulumix.GArrayOutput[InstanceEbsBlockDevice, InstanceEbsBlockDeviceOutput]](value)
	return pulumix.GArrayOutput[InstanceEbsBlockDevice, InstanceEbsBlockDeviceOutput]{OutputState: unwrapped.OutputState}
}

// Whether the launched EC2 instance will be EBS-optimized.
func (o InstanceOutput) EbsOptimized() pulumix.Output[*bool] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[*bool] { return v.EbsOptimized })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// EC2 instance ID.
func (o InstanceOutput) Ec2InstanceId() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.Ec2InstanceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ECS cluster's ARN for container instances.
func (o InstanceOutput) EcsClusterArn() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.EcsClusterArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Instance Elastic IP address.
func (o InstanceOutput) ElasticIp() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.ElasticIp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below.
func (o InstanceOutput) EphemeralBlockDevices() pulumix.GArrayOutput[InstanceEphemeralBlockDevice, InstanceEphemeralBlockDeviceOutput] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.GArrayOutput[InstanceEphemeralBlockDevice, InstanceEphemeralBlockDeviceOutput] {
		return v.EphemeralBlockDevices
	})
	unwrapped := pulumix.Flatten[[]InstanceEphemeralBlockDevice, pulumix.GArrayOutput[InstanceEphemeralBlockDevice, InstanceEphemeralBlockDeviceOutput]](value)
	return pulumix.GArrayOutput[InstanceEphemeralBlockDevice, InstanceEphemeralBlockDeviceOutput]{OutputState: unwrapped.OutputState}
}

// Instance's host name.
func (o InstanceOutput) Hostname() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.Hostname })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// For registered instances, infrastructure class: ec2 or on-premises.
func (o InstanceOutput) InfrastructureClass() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.InfrastructureClass })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Controls where to install OS and package updates when the instance boots.  Default is `true`.
func (o InstanceOutput) InstallUpdatesOnBoot() pulumix.Output[*bool] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[*bool] { return v.InstallUpdatesOnBoot })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// ARN of the instance's IAM profile.
func (o InstanceOutput) InstanceProfileArn() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.InstanceProfileArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Type of instance to start.
func (o InstanceOutput) InstanceType() pulumix.Output[*string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[*string] { return v.InstanceType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ID of the last service error.
func (o InstanceOutput) LastServiceErrorId() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.LastServiceErrorId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of the layers the instance will belong to.
func (o InstanceOutput) LayerIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.ArrayOutput[string] { return v.LayerIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Name of operating system that will be installed.
func (o InstanceOutput) Os() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.Os })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Instance's platform.
func (o InstanceOutput) Platform() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.Platform })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Private DNS name assigned to the instance. Can only be used inside the Amazon EC2, and only available if you've enabled DNS hostnames for your VPC.
func (o InstanceOutput) PrivateDns() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.PrivateDns })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Private IP address assigned to the instance.
func (o InstanceOutput) PrivateIp() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.PrivateIp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Public DNS name assigned to the instance. For EC2-VPC, this is only available if you've enabled DNS hostnames for your VPC.
func (o InstanceOutput) PublicDns() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.PublicDns })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Public IP address assigned to the instance, if applicable.
func (o InstanceOutput) PublicIp() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.PublicIp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// For registered instances, who performed the registration.
func (o InstanceOutput) RegisteredBy() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.RegisteredBy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Instance's reported AWS OpsWorks Stacks agent version.
func (o InstanceOutput) ReportedAgentVersion() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.ReportedAgentVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// For registered instances, the reported operating system family.
func (o InstanceOutput) ReportedOsFamily() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.ReportedOsFamily })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// For registered instances, the reported operating system name.
func (o InstanceOutput) ReportedOsName() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.ReportedOsName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// For registered instances, the reported operating system version.
func (o InstanceOutput) ReportedOsVersion() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.ReportedOsVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for the root block device of the instance. See Block Devices below.
func (o InstanceOutput) RootBlockDevices() pulumix.GArrayOutput[InstanceRootBlockDevice, InstanceRootBlockDeviceOutput] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.GArrayOutput[InstanceRootBlockDevice, InstanceRootBlockDeviceOutput] {
		return v.RootBlockDevices
	})
	unwrapped := pulumix.Flatten[[]InstanceRootBlockDevice, pulumix.GArrayOutput[InstanceRootBlockDevice, InstanceRootBlockDeviceOutput]](value)
	return pulumix.GArrayOutput[InstanceRootBlockDevice, InstanceRootBlockDeviceOutput]{OutputState: unwrapped.OutputState}
}

// Name of the type of root device instances will have by default. Valid values are `ebs` or `instance-store`.
func (o InstanceOutput) RootDeviceType() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.RootDeviceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Root device volume ID.
func (o InstanceOutput) RootDeviceVolumeId() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.RootDeviceVolumeId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Associated security groups.
func (o InstanceOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.ArrayOutput[string] { return v.SecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// SSH key's Deep Security Agent (DSA) fingerprint.
func (o InstanceOutput) SshHostDsaKeyFingerprint() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.SshHostDsaKeyFingerprint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// SSH key's RSA fingerprint.
func (o InstanceOutput) SshHostRsaKeyFingerprint() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.SshHostRsaKeyFingerprint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the SSH keypair that instances will have by default.
func (o InstanceOutput) SshKeyName() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.SshKeyName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identifier of the stack the instance will belong to.
//
// The following arguments are optional:
func (o InstanceOutput) StackId() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.StackId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Desired state of the instance. Valid values are `running` or `stopped`.
func (o InstanceOutput) State() pulumix.Output[*string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[*string] { return v.State })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Instance status. Will be one of `booting`, `connectionLost`, `online`, `pending`, `rebooting`, `requested`, `runningSetup`, `setupFailed`, `shuttingDown`, `startFailed`, `stopFailed`, `stopped`, `stopping`, `terminated`, or `terminating`.
func (o InstanceOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Subnet ID to attach to.
func (o InstanceOutput) SubnetId() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.SubnetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Instance tenancy to use. Valid values are `default`, `dedicated` or `host`.
func (o InstanceOutput) Tenancy() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.Tenancy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Keyword to choose what virtualization mode created instances will use. Valid values are `paravirtual` or `hvm`.
func (o InstanceOutput) VirtualizationType() pulumix.Output[string] {
	value := pulumix.Apply[Instance](o, func(v Instance) pulumix.Output[string] { return v.VirtualizationType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(InstanceOutput{})
}
