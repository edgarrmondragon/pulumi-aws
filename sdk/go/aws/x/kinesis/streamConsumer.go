// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage a Kinesis Stream Consumer.
//
// > **Note:** You can register up to 20 consumers per stream. A given consumer can only be registered with one stream at a time.
//
// For more details, see the [Amazon Kinesis Stream Consumer Documentation](https://docs.aws.amazon.com/streams/latest/dev/amazon-kinesis-consumers.html).
type StreamConsumer struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the stream consumer.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Approximate timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of when the stream consumer was created.
	CreationTimestamp pulumix.Output[string] `pulumi:"creationTimestamp"`
	// Name of the stream consumer.
	Name pulumix.Output[string] `pulumi:"name"`
	// Amazon Resource Name (ARN) of the data stream the consumer is registered with.
	StreamArn pulumix.Output[string] `pulumi:"streamArn"`
}

// NewStreamConsumer registers a new resource with the given unique name, arguments, and options.
func NewStreamConsumer(ctx *pulumi.Context,
	name string, args *StreamConsumerArgs, opts ...pulumi.ResourceOption) (*StreamConsumer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StreamArn == nil {
		return nil, errors.New("invalid value for required argument 'StreamArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamConsumer
	err := ctx.RegisterResource("aws:kinesis/streamConsumer:StreamConsumer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamConsumer gets an existing StreamConsumer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamConsumer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamConsumerState, opts ...pulumi.ResourceOption) (*StreamConsumer, error) {
	var resource StreamConsumer
	err := ctx.ReadResource("aws:kinesis/streamConsumer:StreamConsumer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamConsumer resources.
type streamConsumerState struct {
	// Amazon Resource Name (ARN) of the stream consumer.
	Arn *string `pulumi:"arn"`
	// Approximate timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of when the stream consumer was created.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// Name of the stream consumer.
	Name *string `pulumi:"name"`
	// Amazon Resource Name (ARN) of the data stream the consumer is registered with.
	StreamArn *string `pulumi:"streamArn"`
}

type StreamConsumerState struct {
	// Amazon Resource Name (ARN) of the stream consumer.
	Arn pulumix.Input[*string]
	// Approximate timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of when the stream consumer was created.
	CreationTimestamp pulumix.Input[*string]
	// Name of the stream consumer.
	Name pulumix.Input[*string]
	// Amazon Resource Name (ARN) of the data stream the consumer is registered with.
	StreamArn pulumix.Input[*string]
}

func (StreamConsumerState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamConsumerState)(nil)).Elem()
}

type streamConsumerArgs struct {
	// Name of the stream consumer.
	Name *string `pulumi:"name"`
	// Amazon Resource Name (ARN) of the data stream the consumer is registered with.
	StreamArn string `pulumi:"streamArn"`
}

// The set of arguments for constructing a StreamConsumer resource.
type StreamConsumerArgs struct {
	// Name of the stream consumer.
	Name pulumix.Input[*string]
	// Amazon Resource Name (ARN) of the data stream the consumer is registered with.
	StreamArn pulumix.Input[string]
}

func (StreamConsumerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamConsumerArgs)(nil)).Elem()
}

type StreamConsumerOutput struct{ *pulumi.OutputState }

func (StreamConsumerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamConsumer)(nil)).Elem()
}

func (o StreamConsumerOutput) ToStreamConsumerOutput() StreamConsumerOutput {
	return o
}

func (o StreamConsumerOutput) ToStreamConsumerOutputWithContext(ctx context.Context) StreamConsumerOutput {
	return o
}

func (o StreamConsumerOutput) ToOutput(ctx context.Context) pulumix.Output[StreamConsumer] {
	return pulumix.Output[StreamConsumer]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the stream consumer.
func (o StreamConsumerOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[StreamConsumer](o, func(v StreamConsumer) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Approximate timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of when the stream consumer was created.
func (o StreamConsumerOutput) CreationTimestamp() pulumix.Output[string] {
	value := pulumix.Apply[StreamConsumer](o, func(v StreamConsumer) pulumix.Output[string] { return v.CreationTimestamp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the stream consumer.
func (o StreamConsumerOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[StreamConsumer](o, func(v StreamConsumer) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon Resource Name (ARN) of the data stream the consumer is registered with.
func (o StreamConsumerOutput) StreamArn() pulumix.Output[string] {
	value := pulumix.Apply[StreamConsumer](o, func(v StreamConsumer) pulumix.Output[string] { return v.StreamArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(StreamConsumerOutput{})
}
