// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoveryreadiness

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ResourceSetResource struct {
	ComponentId *string `pulumi:"componentId"`
	// Component for DNS/Routing Control Readiness Checks.
	DnsTargetResource *ResourceSetResourceDnsTargetResource `pulumi:"dnsTargetResource"`
	// Recovery group ARN or cell ARN that contains this resource set.
	ReadinessScopes []string `pulumi:"readinessScopes"`
	// ARN of the resource.
	ResourceArn *string `pulumi:"resourceArn"`
}

type ResourceSetResourceArgs struct {
	ComponentId pulumix.Input[*string] `pulumi:"componentId"`
	// Component for DNS/Routing Control Readiness Checks.
	DnsTargetResource pulumix.Input[*ResourceSetResourceDnsTargetResourceArgs] `pulumi:"dnsTargetResource"`
	// Recovery group ARN or cell ARN that contains this resource set.
	ReadinessScopes pulumix.Input[[]string] `pulumi:"readinessScopes"`
	// ARN of the resource.
	ResourceArn pulumix.Input[*string] `pulumi:"resourceArn"`
}

func (ResourceSetResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetResource)(nil)).Elem()
}

func (i ResourceSetResourceArgs) ToResourceSetResourceOutput() ResourceSetResourceOutput {
	return i.ToResourceSetResourceOutputWithContext(context.Background())
}

func (i ResourceSetResourceArgs) ToResourceSetResourceOutputWithContext(ctx context.Context) ResourceSetResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetResourceOutput)
}

func (i *ResourceSetResourceArgs) ToOutput(ctx context.Context) pulumix.Output[*ResourceSetResourceArgs] {
	return pulumix.Val(i)
}

type ResourceSetResourceOutput struct{ *pulumi.OutputState }

func (ResourceSetResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetResource)(nil)).Elem()
}

func (o ResourceSetResourceOutput) ToResourceSetResourceOutput() ResourceSetResourceOutput {
	return o
}

func (o ResourceSetResourceOutput) ToResourceSetResourceOutputWithContext(ctx context.Context) ResourceSetResourceOutput {
	return o
}

func (o ResourceSetResourceOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceSetResource] {
	return pulumix.Output[ResourceSetResource]{
		OutputState: o.OutputState,
	}
}

func (o ResourceSetResourceOutput) ComponentId() pulumix.Output[*string] {
	return pulumix.Apply[ResourceSetResource](o, func(v ResourceSetResource) *string { return v.ComponentId })
}

// Component for DNS/Routing Control Readiness Checks.
func (o ResourceSetResourceOutput) DnsTargetResource() pulumix.GPtrOutput[ResourceSetResourceDnsTargetResource, ResourceSetResourceDnsTargetResourceOutput] {
	value := pulumix.Apply[ResourceSetResource](o, func(v ResourceSetResource) *ResourceSetResourceDnsTargetResource { return v.DnsTargetResource })
	return pulumix.GPtrOutput[ResourceSetResourceDnsTargetResource, ResourceSetResourceDnsTargetResourceOutput]{OutputState: value.OutputState}
}

// Recovery group ARN or cell ARN that contains this resource set.
func (o ResourceSetResourceOutput) ReadinessScopes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ResourceSetResource](o, func(v ResourceSetResource) []string { return v.ReadinessScopes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ARN of the resource.
func (o ResourceSetResourceOutput) ResourceArn() pulumix.Output[*string] {
	return pulumix.Apply[ResourceSetResource](o, func(v ResourceSetResource) *string { return v.ResourceArn })
}

type ResourceSetResourceDnsTargetResource struct {
	// DNS Name that acts as the ingress point to a portion of application.
	DomainName string `pulumi:"domainName"`
	// Hosted Zone ARN that contains the DNS record with the provided name of target resource.
	HostedZoneArn *string `pulumi:"hostedZoneArn"`
	// Route53 record set id to uniquely identify a record given a `domainName` and a `recordType`.
	RecordSetId *string `pulumi:"recordSetId"`
	// Type of DNS Record of target resource.
	RecordType *string `pulumi:"recordType"`
	// Target resource the R53 record specified with the above params points to.
	TargetResource *ResourceSetResourceDnsTargetResourceTargetResource `pulumi:"targetResource"`
}

type ResourceSetResourceDnsTargetResourceArgs struct {
	// DNS Name that acts as the ingress point to a portion of application.
	DomainName pulumix.Input[string] `pulumi:"domainName"`
	// Hosted Zone ARN that contains the DNS record with the provided name of target resource.
	HostedZoneArn pulumix.Input[*string] `pulumi:"hostedZoneArn"`
	// Route53 record set id to uniquely identify a record given a `domainName` and a `recordType`.
	RecordSetId pulumix.Input[*string] `pulumi:"recordSetId"`
	// Type of DNS Record of target resource.
	RecordType pulumix.Input[*string] `pulumi:"recordType"`
	// Target resource the R53 record specified with the above params points to.
	TargetResource pulumix.Input[*ResourceSetResourceDnsTargetResourceTargetResourceArgs] `pulumi:"targetResource"`
}

func (ResourceSetResourceDnsTargetResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetResourceDnsTargetResource)(nil)).Elem()
}

func (i ResourceSetResourceDnsTargetResourceArgs) ToResourceSetResourceDnsTargetResourceOutput() ResourceSetResourceDnsTargetResourceOutput {
	return i.ToResourceSetResourceDnsTargetResourceOutputWithContext(context.Background())
}

func (i ResourceSetResourceDnsTargetResourceArgs) ToResourceSetResourceDnsTargetResourceOutputWithContext(ctx context.Context) ResourceSetResourceDnsTargetResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetResourceDnsTargetResourceOutput)
}

func (i *ResourceSetResourceDnsTargetResourceArgs) ToOutput(ctx context.Context) pulumix.Output[*ResourceSetResourceDnsTargetResourceArgs] {
	return pulumix.Val(i)
}

type ResourceSetResourceDnsTargetResourceOutput struct{ *pulumi.OutputState }

func (ResourceSetResourceDnsTargetResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetResourceDnsTargetResource)(nil)).Elem()
}

func (o ResourceSetResourceDnsTargetResourceOutput) ToResourceSetResourceDnsTargetResourceOutput() ResourceSetResourceDnsTargetResourceOutput {
	return o
}

func (o ResourceSetResourceDnsTargetResourceOutput) ToResourceSetResourceDnsTargetResourceOutputWithContext(ctx context.Context) ResourceSetResourceDnsTargetResourceOutput {
	return o
}

func (o ResourceSetResourceDnsTargetResourceOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceSetResourceDnsTargetResource] {
	return pulumix.Output[ResourceSetResourceDnsTargetResource]{
		OutputState: o.OutputState,
	}
}

// DNS Name that acts as the ingress point to a portion of application.
func (o ResourceSetResourceDnsTargetResourceOutput) DomainName() pulumix.Output[string] {
	return pulumix.Apply[ResourceSetResourceDnsTargetResource](o, func(v ResourceSetResourceDnsTargetResource) string { return v.DomainName })
}

// Hosted Zone ARN that contains the DNS record with the provided name of target resource.
func (o ResourceSetResourceDnsTargetResourceOutput) HostedZoneArn() pulumix.Output[*string] {
	return pulumix.Apply[ResourceSetResourceDnsTargetResource](o, func(v ResourceSetResourceDnsTargetResource) *string { return v.HostedZoneArn })
}

// Route53 record set id to uniquely identify a record given a `domainName` and a `recordType`.
func (o ResourceSetResourceDnsTargetResourceOutput) RecordSetId() pulumix.Output[*string] {
	return pulumix.Apply[ResourceSetResourceDnsTargetResource](o, func(v ResourceSetResourceDnsTargetResource) *string { return v.RecordSetId })
}

// Type of DNS Record of target resource.
func (o ResourceSetResourceDnsTargetResourceOutput) RecordType() pulumix.Output[*string] {
	return pulumix.Apply[ResourceSetResourceDnsTargetResource](o, func(v ResourceSetResourceDnsTargetResource) *string { return v.RecordType })
}

// Target resource the R53 record specified with the above params points to.
func (o ResourceSetResourceDnsTargetResourceOutput) TargetResource() pulumix.GPtrOutput[ResourceSetResourceDnsTargetResourceTargetResource, ResourceSetResourceDnsTargetResourceTargetResourceOutput] {
	value := pulumix.Apply[ResourceSetResourceDnsTargetResource](o, func(v ResourceSetResourceDnsTargetResource) *ResourceSetResourceDnsTargetResourceTargetResource {
		return v.TargetResource
	})
	return pulumix.GPtrOutput[ResourceSetResourceDnsTargetResourceTargetResource, ResourceSetResourceDnsTargetResourceTargetResourceOutput]{OutputState: value.OutputState}
}

type ResourceSetResourceDnsTargetResourceTargetResource struct {
	// NLB resource a DNS Target Resource points to. Required if `r53Resource` is not set.
	NlbResource *ResourceSetResourceDnsTargetResourceTargetResourceNlbResource `pulumi:"nlbResource"`
	// Route53 resource a DNS Target Resource record points to.
	R53Resource *ResourceSetResourceDnsTargetResourceTargetResourceR53Resource `pulumi:"r53Resource"`
}

type ResourceSetResourceDnsTargetResourceTargetResourceArgs struct {
	// NLB resource a DNS Target Resource points to. Required if `r53Resource` is not set.
	NlbResource pulumix.Input[*ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceArgs] `pulumi:"nlbResource"`
	// Route53 resource a DNS Target Resource record points to.
	R53Resource pulumix.Input[*ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceArgs] `pulumi:"r53Resource"`
}

func (ResourceSetResourceDnsTargetResourceTargetResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetResourceDnsTargetResourceTargetResource)(nil)).Elem()
}

func (i ResourceSetResourceDnsTargetResourceTargetResourceArgs) ToResourceSetResourceDnsTargetResourceTargetResourceOutput() ResourceSetResourceDnsTargetResourceTargetResourceOutput {
	return i.ToResourceSetResourceDnsTargetResourceTargetResourceOutputWithContext(context.Background())
}

func (i ResourceSetResourceDnsTargetResourceTargetResourceArgs) ToResourceSetResourceDnsTargetResourceTargetResourceOutputWithContext(ctx context.Context) ResourceSetResourceDnsTargetResourceTargetResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetResourceDnsTargetResourceTargetResourceOutput)
}

func (i *ResourceSetResourceDnsTargetResourceTargetResourceArgs) ToOutput(ctx context.Context) pulumix.Output[*ResourceSetResourceDnsTargetResourceTargetResourceArgs] {
	return pulumix.Val(i)
}

type ResourceSetResourceDnsTargetResourceTargetResourceOutput struct{ *pulumi.OutputState }

func (ResourceSetResourceDnsTargetResourceTargetResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetResourceDnsTargetResourceTargetResource)(nil)).Elem()
}

func (o ResourceSetResourceDnsTargetResourceTargetResourceOutput) ToResourceSetResourceDnsTargetResourceTargetResourceOutput() ResourceSetResourceDnsTargetResourceTargetResourceOutput {
	return o
}

func (o ResourceSetResourceDnsTargetResourceTargetResourceOutput) ToResourceSetResourceDnsTargetResourceTargetResourceOutputWithContext(ctx context.Context) ResourceSetResourceDnsTargetResourceTargetResourceOutput {
	return o
}

func (o ResourceSetResourceDnsTargetResourceTargetResourceOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceSetResourceDnsTargetResourceTargetResource] {
	return pulumix.Output[ResourceSetResourceDnsTargetResourceTargetResource]{
		OutputState: o.OutputState,
	}
}

// NLB resource a DNS Target Resource points to. Required if `r53Resource` is not set.
func (o ResourceSetResourceDnsTargetResourceTargetResourceOutput) NlbResource() pulumix.GPtrOutput[ResourceSetResourceDnsTargetResourceTargetResourceNlbResource, ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput] {
	value := pulumix.Apply[ResourceSetResourceDnsTargetResourceTargetResource](o, func(v ResourceSetResourceDnsTargetResourceTargetResource) *ResourceSetResourceDnsTargetResourceTargetResourceNlbResource {
		return v.NlbResource
	})
	return pulumix.GPtrOutput[ResourceSetResourceDnsTargetResourceTargetResourceNlbResource, ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput]{OutputState: value.OutputState}
}

// Route53 resource a DNS Target Resource record points to.
func (o ResourceSetResourceDnsTargetResourceTargetResourceOutput) R53Resource() pulumix.GPtrOutput[ResourceSetResourceDnsTargetResourceTargetResourceR53Resource, ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput] {
	value := pulumix.Apply[ResourceSetResourceDnsTargetResourceTargetResource](o, func(v ResourceSetResourceDnsTargetResourceTargetResource) *ResourceSetResourceDnsTargetResourceTargetResourceR53Resource {
		return v.R53Resource
	})
	return pulumix.GPtrOutput[ResourceSetResourceDnsTargetResourceTargetResourceR53Resource, ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput]{OutputState: value.OutputState}
}

type ResourceSetResourceDnsTargetResourceTargetResourceNlbResource struct {
	// NLB resource ARN.
	Arn *string `pulumi:"arn"`
}

type ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceArgs struct {
	// NLB resource ARN.
	Arn pulumix.Input[*string] `pulumi:"arn"`
}

func (ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetResourceDnsTargetResourceTargetResourceNlbResource)(nil)).Elem()
}

func (i ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceArgs) ToResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput() ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput {
	return i.ToResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutputWithContext(context.Background())
}

func (i ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceArgs) ToResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutputWithContext(ctx context.Context) ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput)
}

func (i *ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceArgs) ToOutput(ctx context.Context) pulumix.Output[*ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceArgs] {
	return pulumix.Val(i)
}

type ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput struct{ *pulumi.OutputState }

func (ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetResourceDnsTargetResourceTargetResourceNlbResource)(nil)).Elem()
}

func (o ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput) ToResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput() ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput {
	return o
}

func (o ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput) ToResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutputWithContext(ctx context.Context) ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput {
	return o
}

func (o ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceSetResourceDnsTargetResourceTargetResourceNlbResource] {
	return pulumix.Output[ResourceSetResourceDnsTargetResourceTargetResourceNlbResource]{
		OutputState: o.OutputState,
	}
}

// NLB resource ARN.
func (o ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[ResourceSetResourceDnsTargetResourceTargetResourceNlbResource](o, func(v ResourceSetResourceDnsTargetResourceTargetResourceNlbResource) *string { return v.Arn })
}

type ResourceSetResourceDnsTargetResourceTargetResourceR53Resource struct {
	// DNS Name that acts as the ingress point to a portion of application.
	DomainName *string `pulumi:"domainName"`
	// Route53 record set id to uniquely identify a record given a `domainName` and a `recordType`.
	RecordSetId *string `pulumi:"recordSetId"`
}

type ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceArgs struct {
	// DNS Name that acts as the ingress point to a portion of application.
	DomainName pulumix.Input[*string] `pulumi:"domainName"`
	// Route53 record set id to uniquely identify a record given a `domainName` and a `recordType`.
	RecordSetId pulumix.Input[*string] `pulumi:"recordSetId"`
}

func (ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetResourceDnsTargetResourceTargetResourceR53Resource)(nil)).Elem()
}

func (i ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceArgs) ToResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput() ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput {
	return i.ToResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutputWithContext(context.Background())
}

func (i ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceArgs) ToResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutputWithContext(ctx context.Context) ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput)
}

func (i *ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceArgs) ToOutput(ctx context.Context) pulumix.Output[*ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceArgs] {
	return pulumix.Val(i)
}

type ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput struct{ *pulumi.OutputState }

func (ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetResourceDnsTargetResourceTargetResourceR53Resource)(nil)).Elem()
}

func (o ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput) ToResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput() ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput {
	return o
}

func (o ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput) ToResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutputWithContext(ctx context.Context) ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput {
	return o
}

func (o ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceSetResourceDnsTargetResourceTargetResourceR53Resource] {
	return pulumix.Output[ResourceSetResourceDnsTargetResourceTargetResourceR53Resource]{
		OutputState: o.OutputState,
	}
}

// DNS Name that acts as the ingress point to a portion of application.
func (o ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput) DomainName() pulumix.Output[*string] {
	return pulumix.Apply[ResourceSetResourceDnsTargetResourceTargetResourceR53Resource](o, func(v ResourceSetResourceDnsTargetResourceTargetResourceR53Resource) *string { return v.DomainName })
}

// Route53 record set id to uniquely identify a record given a `domainName` and a `recordType`.
func (o ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput) RecordSetId() pulumix.Output[*string] {
	return pulumix.Apply[ResourceSetResourceDnsTargetResourceTargetResourceR53Resource](o, func(v ResourceSetResourceDnsTargetResourceTargetResourceR53Resource) *string { return v.RecordSetId })
}

func init() {
	pulumi.RegisterOutputType(ResourceSetResourceOutput{})
	pulumi.RegisterOutputType(ResourceSetResourceDnsTargetResourceOutput{})
	pulumi.RegisterOutputType(ResourceSetResourceDnsTargetResourceTargetResourceOutput{})
	pulumi.RegisterOutputType(ResourceSetResourceDnsTargetResourceTargetResourceNlbResourceOutput{})
	pulumi.RegisterOutputType(ResourceSetResourceDnsTargetResourceTargetResourceR53ResourceOutput{})
}
