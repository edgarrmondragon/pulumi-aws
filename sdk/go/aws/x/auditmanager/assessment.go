// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Audit Manager Assessment.
type Assessment struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the assessment.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Assessment report storage destination configuration. See `assessmentReportsDestination` below.
	AssessmentReportsDestination pulumix.GPtrOutput[AssessmentAssessmentReportsDestination, AssessmentAssessmentReportsDestinationOutput] `pulumi:"assessmentReportsDestination"`
	// Description of the assessment.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Unique identifier of the framework the assessment will be created from.
	FrameworkId pulumix.Output[string] `pulumi:"frameworkId"`
	// Name of the assessment.
	Name pulumix.Output[string] `pulumi:"name"`
	// List of roles for the assessment. See `roles` below.
	Roles pulumix.GArrayOutput[AssessmentRole, AssessmentRoleOutput] `pulumi:"roles"`
	// Complete list of all roles with access to the assessment. This includes both roles explicitly configured via the `roles` block, and any roles which have access to all Audit Manager assessments by default.
	RolesAlls pulumix.GArrayOutput[AssessmentRolesAll, AssessmentRolesAllOutput] `pulumi:"rolesAlls"`
	// Amazon Web Services accounts and services that are in scope for the assessment. See `scope` below.
	//
	// The following arguments are optional:
	Scope pulumix.GPtrOutput[AssessmentScope, AssessmentScopeOutput] `pulumi:"scope"`
	// Status of the assessment. Valid values are `ACTIVE` and `INACTIVE`.
	Status pulumix.Output[string] `pulumi:"status"`
	// A map of tags to assign to the assessment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewAssessment registers a new resource with the given unique name, arguments, and options.
func NewAssessment(ctx *pulumi.Context,
	name string, args *AssessmentArgs, opts ...pulumi.ResourceOption) (*Assessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FrameworkId == nil {
		return nil, errors.New("invalid value for required argument 'FrameworkId'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Assessment
	err := ctx.RegisterResource("aws:auditmanager/assessment:Assessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessment gets an existing Assessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentState, opts ...pulumi.ResourceOption) (*Assessment, error) {
	var resource Assessment
	err := ctx.ReadResource("aws:auditmanager/assessment:Assessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Assessment resources.
type assessmentState struct {
	// Amazon Resource Name (ARN) of the assessment.
	Arn *string `pulumi:"arn"`
	// Assessment report storage destination configuration. See `assessmentReportsDestination` below.
	AssessmentReportsDestination *AssessmentAssessmentReportsDestination `pulumi:"assessmentReportsDestination"`
	// Description of the assessment.
	Description *string `pulumi:"description"`
	// Unique identifier of the framework the assessment will be created from.
	FrameworkId *string `pulumi:"frameworkId"`
	// Name of the assessment.
	Name *string `pulumi:"name"`
	// List of roles for the assessment. See `roles` below.
	Roles []AssessmentRole `pulumi:"roles"`
	// Complete list of all roles with access to the assessment. This includes both roles explicitly configured via the `roles` block, and any roles which have access to all Audit Manager assessments by default.
	RolesAlls []AssessmentRolesAll `pulumi:"rolesAlls"`
	// Amazon Web Services accounts and services that are in scope for the assessment. See `scope` below.
	//
	// The following arguments are optional:
	Scope *AssessmentScope `pulumi:"scope"`
	// Status of the assessment. Valid values are `ACTIVE` and `INACTIVE`.
	Status *string `pulumi:"status"`
	// A map of tags to assign to the assessment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type AssessmentState struct {
	// Amazon Resource Name (ARN) of the assessment.
	Arn pulumix.Input[*string]
	// Assessment report storage destination configuration. See `assessmentReportsDestination` below.
	AssessmentReportsDestination pulumix.Input[*AssessmentAssessmentReportsDestinationArgs]
	// Description of the assessment.
	Description pulumix.Input[*string]
	// Unique identifier of the framework the assessment will be created from.
	FrameworkId pulumix.Input[*string]
	// Name of the assessment.
	Name pulumix.Input[*string]
	// List of roles for the assessment. See `roles` below.
	Roles pulumix.Input[[]*AssessmentRoleArgs]
	// Complete list of all roles with access to the assessment. This includes both roles explicitly configured via the `roles` block, and any roles which have access to all Audit Manager assessments by default.
	RolesAlls pulumix.Input[[]*AssessmentRolesAllArgs]
	// Amazon Web Services accounts and services that are in scope for the assessment. See `scope` below.
	//
	// The following arguments are optional:
	Scope pulumix.Input[*AssessmentScopeArgs]
	// Status of the assessment. Valid values are `ACTIVE` and `INACTIVE`.
	Status pulumix.Input[*string]
	// A map of tags to assign to the assessment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
}

func (AssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentState)(nil)).Elem()
}

type assessmentArgs struct {
	// Assessment report storage destination configuration. See `assessmentReportsDestination` below.
	AssessmentReportsDestination *AssessmentAssessmentReportsDestination `pulumi:"assessmentReportsDestination"`
	// Description of the assessment.
	Description *string `pulumi:"description"`
	// Unique identifier of the framework the assessment will be created from.
	FrameworkId string `pulumi:"frameworkId"`
	// Name of the assessment.
	Name *string `pulumi:"name"`
	// List of roles for the assessment. See `roles` below.
	Roles []AssessmentRole `pulumi:"roles"`
	// Amazon Web Services accounts and services that are in scope for the assessment. See `scope` below.
	//
	// The following arguments are optional:
	Scope *AssessmentScope `pulumi:"scope"`
	// A map of tags to assign to the assessment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Assessment resource.
type AssessmentArgs struct {
	// Assessment report storage destination configuration. See `assessmentReportsDestination` below.
	AssessmentReportsDestination pulumix.Input[*AssessmentAssessmentReportsDestinationArgs]
	// Description of the assessment.
	Description pulumix.Input[*string]
	// Unique identifier of the framework the assessment will be created from.
	FrameworkId pulumix.Input[string]
	// Name of the assessment.
	Name pulumix.Input[*string]
	// List of roles for the assessment. See `roles` below.
	Roles pulumix.Input[[]*AssessmentRoleArgs]
	// Amazon Web Services accounts and services that are in scope for the assessment. See `scope` below.
	//
	// The following arguments are optional:
	Scope pulumix.Input[*AssessmentScopeArgs]
	// A map of tags to assign to the assessment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (AssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentArgs)(nil)).Elem()
}

type AssessmentOutput struct{ *pulumi.OutputState }

func (AssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Assessment)(nil)).Elem()
}

func (o AssessmentOutput) ToAssessmentOutput() AssessmentOutput {
	return o
}

func (o AssessmentOutput) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return o
}

func (o AssessmentOutput) ToOutput(ctx context.Context) pulumix.Output[Assessment] {
	return pulumix.Output[Assessment]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the assessment.
func (o AssessmentOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Assessment](o, func(v Assessment) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Assessment report storage destination configuration. See `assessmentReportsDestination` below.
func (o AssessmentOutput) AssessmentReportsDestination() pulumix.GPtrOutput[AssessmentAssessmentReportsDestination, AssessmentAssessmentReportsDestinationOutput] {
	value := pulumix.Apply[Assessment](o, func(v Assessment) pulumix.GPtrOutput[AssessmentAssessmentReportsDestination, AssessmentAssessmentReportsDestinationOutput] {
		return v.AssessmentReportsDestination
	})
	unwrapped := pulumix.Flatten[*AssessmentAssessmentReportsDestination, pulumix.GPtrOutput[AssessmentAssessmentReportsDestination, AssessmentAssessmentReportsDestinationOutput]](value)
	return pulumix.GPtrOutput[AssessmentAssessmentReportsDestination, AssessmentAssessmentReportsDestinationOutput]{OutputState: unwrapped.OutputState}
}

// Description of the assessment.
func (o AssessmentOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Assessment](o, func(v Assessment) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Unique identifier of the framework the assessment will be created from.
func (o AssessmentOutput) FrameworkId() pulumix.Output[string] {
	value := pulumix.Apply[Assessment](o, func(v Assessment) pulumix.Output[string] { return v.FrameworkId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the assessment.
func (o AssessmentOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Assessment](o, func(v Assessment) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of roles for the assessment. See `roles` below.
func (o AssessmentOutput) Roles() pulumix.GArrayOutput[AssessmentRole, AssessmentRoleOutput] {
	value := pulumix.Apply[Assessment](o, func(v Assessment) pulumix.GArrayOutput[AssessmentRole, AssessmentRoleOutput] { return v.Roles })
	unwrapped := pulumix.Flatten[[]AssessmentRole, pulumix.GArrayOutput[AssessmentRole, AssessmentRoleOutput]](value)
	return pulumix.GArrayOutput[AssessmentRole, AssessmentRoleOutput]{OutputState: unwrapped.OutputState}
}

// Complete list of all roles with access to the assessment. This includes both roles explicitly configured via the `roles` block, and any roles which have access to all Audit Manager assessments by default.
func (o AssessmentOutput) RolesAlls() pulumix.GArrayOutput[AssessmentRolesAll, AssessmentRolesAllOutput] {
	value := pulumix.Apply[Assessment](o, func(v Assessment) pulumix.GArrayOutput[AssessmentRolesAll, AssessmentRolesAllOutput] {
		return v.RolesAlls
	})
	unwrapped := pulumix.Flatten[[]AssessmentRolesAll, pulumix.GArrayOutput[AssessmentRolesAll, AssessmentRolesAllOutput]](value)
	return pulumix.GArrayOutput[AssessmentRolesAll, AssessmentRolesAllOutput]{OutputState: unwrapped.OutputState}
}

// Amazon Web Services accounts and services that are in scope for the assessment. See `scope` below.
//
// The following arguments are optional:
func (o AssessmentOutput) Scope() pulumix.GPtrOutput[AssessmentScope, AssessmentScopeOutput] {
	value := pulumix.Apply[Assessment](o, func(v Assessment) pulumix.GPtrOutput[AssessmentScope, AssessmentScopeOutput] { return v.Scope })
	unwrapped := pulumix.Flatten[*AssessmentScope, pulumix.GPtrOutput[AssessmentScope, AssessmentScopeOutput]](value)
	return pulumix.GPtrOutput[AssessmentScope, AssessmentScopeOutput]{OutputState: unwrapped.OutputState}
}

// Status of the assessment. Valid values are `ACTIVE` and `INACTIVE`.
func (o AssessmentOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Assessment](o, func(v Assessment) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the assessment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AssessmentOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Assessment](o, func(v Assessment) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o AssessmentOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Assessment](o, func(v Assessment) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(AssessmentOutput{})
}
