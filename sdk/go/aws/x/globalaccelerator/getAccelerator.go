// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package globalaccelerator

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a Global Accelerator accelerator.
func LookupAccelerator(ctx *pulumi.Context, args *LookupAcceleratorArgs, opts ...pulumi.InvokeOption) (*LookupAcceleratorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAcceleratorResult
	err := ctx.Invoke("aws:globalaccelerator/getAccelerator:getAccelerator", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccelerator.
type LookupAcceleratorArgs struct {
	// Full ARN of the Global Accelerator.
	Arn *string `pulumi:"arn"`
	Id  *string `pulumi:"id"`
	// Unique name of the Global Accelerator.
	//
	// > **NOTE:** When both `arn` and `name` are specified, `arn` takes precedence.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getAccelerator.
type LookupAcceleratorResult struct {
	Arn              string                    `pulumi:"arn"`
	Attributes       []GetAcceleratorAttribute `pulumi:"attributes"`
	DnsName          string                    `pulumi:"dnsName"`
	DualStackDnsName string                    `pulumi:"dualStackDnsName"`
	Enabled          bool                      `pulumi:"enabled"`
	HostedZoneId     string                    `pulumi:"hostedZoneId"`
	Id               string                    `pulumi:"id"`
	IpAddressType    string                    `pulumi:"ipAddressType"`
	IpSets           []GetAcceleratorIpSet     `pulumi:"ipSets"`
	Name             string                    `pulumi:"name"`
	Tags             map[string]string         `pulumi:"tags"`
}

func LookupAcceleratorOutput(ctx *pulumi.Context, args LookupAcceleratorOutputArgs, opts ...pulumi.InvokeOption) LookupAcceleratorResultOutput {
	outputResult := pulumix.ApplyErr[*LookupAcceleratorArgs](args.ToOutput(), func(plainArgs *LookupAcceleratorArgs) (*LookupAcceleratorResult, error) {
		return LookupAccelerator(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupAcceleratorResultOutput, *LookupAcceleratorResult](outputResult)
}

// A collection of arguments for invoking getAccelerator.
type LookupAcceleratorOutputArgs struct {
	// Full ARN of the Global Accelerator.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	Id  pulumix.Input[*string] `pulumi:"id"`
	// Unique name of the Global Accelerator.
	//
	// > **NOTE:** When both `arn` and `name` are specified, `arn` takes precedence.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (args LookupAcceleratorOutputArgs) ToOutput() pulumix.Output[*LookupAcceleratorArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupAcceleratorArgs {
		return &LookupAcceleratorArgs{
			Arn:  resolvedArgs[0].(*string),
			Id:   resolvedArgs[1].(*string),
			Name: resolvedArgs[2].(*string),
		}
	})
}

type LookupAcceleratorResultOutput struct{ *pulumi.OutputState }

func (LookupAcceleratorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAcceleratorResult)(nil)).Elem()
}

func (o LookupAcceleratorResultOutput) ToOutput(context.Context) pulumix.Output[*LookupAcceleratorResult] {
	return pulumix.Output[*LookupAcceleratorResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupAcceleratorResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupAcceleratorResult](o, func(v *LookupAcceleratorResult) string { return v.Arn })
}

func (o LookupAcceleratorResultOutput) Attributes() pulumix.GArrayOutput[GetAcceleratorAttribute, GetAcceleratorAttributeOutput] {
	value := pulumix.Apply[*LookupAcceleratorResult](o, func(v *LookupAcceleratorResult) []GetAcceleratorAttribute { return v.Attributes })
	return pulumix.GArrayOutput[GetAcceleratorAttribute, GetAcceleratorAttributeOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupAcceleratorResultOutput) DnsName() pulumix.Output[string] {
	return pulumix.Apply[*LookupAcceleratorResult](o, func(v *LookupAcceleratorResult) string { return v.DnsName })
}

func (o LookupAcceleratorResultOutput) DualStackDnsName() pulumix.Output[string] {
	return pulumix.Apply[*LookupAcceleratorResult](o, func(v *LookupAcceleratorResult) string { return v.DualStackDnsName })
}

func (o LookupAcceleratorResultOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupAcceleratorResult](o, func(v *LookupAcceleratorResult) bool { return v.Enabled })
}

func (o LookupAcceleratorResultOutput) HostedZoneId() pulumix.Output[string] {
	return pulumix.Apply[*LookupAcceleratorResult](o, func(v *LookupAcceleratorResult) string { return v.HostedZoneId })
}

func (o LookupAcceleratorResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupAcceleratorResult](o, func(v *LookupAcceleratorResult) string { return v.Id })
}

func (o LookupAcceleratorResultOutput) IpAddressType() pulumix.Output[string] {
	return pulumix.Apply[*LookupAcceleratorResult](o, func(v *LookupAcceleratorResult) string { return v.IpAddressType })
}

func (o LookupAcceleratorResultOutput) IpSets() pulumix.GArrayOutput[GetAcceleratorIpSet, GetAcceleratorIpSetOutput] {
	value := pulumix.Apply[*LookupAcceleratorResult](o, func(v *LookupAcceleratorResult) []GetAcceleratorIpSet { return v.IpSets })
	return pulumix.GArrayOutput[GetAcceleratorIpSet, GetAcceleratorIpSetOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupAcceleratorResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupAcceleratorResult](o, func(v *LookupAcceleratorResult) string { return v.Name })
}

func (o LookupAcceleratorResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupAcceleratorResult](o, func(v *LookupAcceleratorResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
