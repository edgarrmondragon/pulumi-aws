// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an EventBridge event archive resource.
//
// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
type EventArchive struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the event archive.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The description of the new event archive.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Instructs the new event archive to only capture events matched by this pattern. By default, it attempts to archive every event received in the `eventSourceArn`.
	EventPattern pulumix.Output[*string] `pulumi:"eventPattern"`
	// Event bus source ARN from where these events should be archived.
	EventSourceArn pulumix.Output[string] `pulumi:"eventSourceArn"`
	// The name of the new event archive. The archive name cannot exceed 48 characters.
	Name pulumix.Output[string] `pulumi:"name"`
	// The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
	RetentionDays pulumix.Output[*int] `pulumi:"retentionDays"`
}

// NewEventArchive registers a new resource with the given unique name, arguments, and options.
func NewEventArchive(ctx *pulumi.Context,
	name string, args *EventArchiveArgs, opts ...pulumi.ResourceOption) (*EventArchive, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventSourceArn == nil {
		return nil, errors.New("invalid value for required argument 'EventSourceArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventArchive
	err := ctx.RegisterResource("aws:cloudwatch/eventArchive:EventArchive", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventArchive gets an existing EventArchive resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventArchive(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventArchiveState, opts ...pulumi.ResourceOption) (*EventArchive, error) {
	var resource EventArchive
	err := ctx.ReadResource("aws:cloudwatch/eventArchive:EventArchive", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventArchive resources.
type eventArchiveState struct {
	// The Amazon Resource Name (ARN) of the event archive.
	Arn *string `pulumi:"arn"`
	// The description of the new event archive.
	Description *string `pulumi:"description"`
	// Instructs the new event archive to only capture events matched by this pattern. By default, it attempts to archive every event received in the `eventSourceArn`.
	EventPattern *string `pulumi:"eventPattern"`
	// Event bus source ARN from where these events should be archived.
	EventSourceArn *string `pulumi:"eventSourceArn"`
	// The name of the new event archive. The archive name cannot exceed 48 characters.
	Name *string `pulumi:"name"`
	// The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
	RetentionDays *int `pulumi:"retentionDays"`
}

type EventArchiveState struct {
	// The Amazon Resource Name (ARN) of the event archive.
	Arn pulumix.Input[*string]
	// The description of the new event archive.
	Description pulumix.Input[*string]
	// Instructs the new event archive to only capture events matched by this pattern. By default, it attempts to archive every event received in the `eventSourceArn`.
	EventPattern pulumix.Input[*string]
	// Event bus source ARN from where these events should be archived.
	EventSourceArn pulumix.Input[*string]
	// The name of the new event archive. The archive name cannot exceed 48 characters.
	Name pulumix.Input[*string]
	// The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
	RetentionDays pulumix.Input[*int]
}

func (EventArchiveState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventArchiveState)(nil)).Elem()
}

type eventArchiveArgs struct {
	// The description of the new event archive.
	Description *string `pulumi:"description"`
	// Instructs the new event archive to only capture events matched by this pattern. By default, it attempts to archive every event received in the `eventSourceArn`.
	EventPattern *string `pulumi:"eventPattern"`
	// Event bus source ARN from where these events should be archived.
	EventSourceArn string `pulumi:"eventSourceArn"`
	// The name of the new event archive. The archive name cannot exceed 48 characters.
	Name *string `pulumi:"name"`
	// The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
	RetentionDays *int `pulumi:"retentionDays"`
}

// The set of arguments for constructing a EventArchive resource.
type EventArchiveArgs struct {
	// The description of the new event archive.
	Description pulumix.Input[*string]
	// Instructs the new event archive to only capture events matched by this pattern. By default, it attempts to archive every event received in the `eventSourceArn`.
	EventPattern pulumix.Input[*string]
	// Event bus source ARN from where these events should be archived.
	EventSourceArn pulumix.Input[string]
	// The name of the new event archive. The archive name cannot exceed 48 characters.
	Name pulumix.Input[*string]
	// The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
	RetentionDays pulumix.Input[*int]
}

func (EventArchiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventArchiveArgs)(nil)).Elem()
}

type EventArchiveOutput struct{ *pulumi.OutputState }

func (EventArchiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventArchive)(nil)).Elem()
}

func (o EventArchiveOutput) ToEventArchiveOutput() EventArchiveOutput {
	return o
}

func (o EventArchiveOutput) ToEventArchiveOutputWithContext(ctx context.Context) EventArchiveOutput {
	return o
}

func (o EventArchiveOutput) ToOutput(ctx context.Context) pulumix.Output[EventArchive] {
	return pulumix.Output[EventArchive]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the event archive.
func (o EventArchiveOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[EventArchive](o, func(v EventArchive) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The description of the new event archive.
func (o EventArchiveOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[EventArchive](o, func(v EventArchive) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Instructs the new event archive to only capture events matched by this pattern. By default, it attempts to archive every event received in the `eventSourceArn`.
func (o EventArchiveOutput) EventPattern() pulumix.Output[*string] {
	value := pulumix.Apply[EventArchive](o, func(v EventArchive) pulumix.Output[*string] { return v.EventPattern })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Event bus source ARN from where these events should be archived.
func (o EventArchiveOutput) EventSourceArn() pulumix.Output[string] {
	value := pulumix.Apply[EventArchive](o, func(v EventArchive) pulumix.Output[string] { return v.EventSourceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the new event archive. The archive name cannot exceed 48 characters.
func (o EventArchiveOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[EventArchive](o, func(v EventArchive) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
func (o EventArchiveOutput) RetentionDays() pulumix.Output[*int] {
	value := pulumix.Apply[EventArchive](o, func(v EventArchive) pulumix.Output[*int] { return v.RetentionDays })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func init() {
	pulumi.RegisterOutputType(EventArchiveOutput{})
}
