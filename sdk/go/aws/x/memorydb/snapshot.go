// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a MemoryDB Snapshot.
//
// More information about snapshot and restore can be found in the [MemoryDB User Guide](https://docs.aws.amazon.com/memorydb/latest/devguide/snapshots.html).
type Snapshot struct {
	pulumi.CustomResourceState

	// The ARN of the snapshot.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The configuration of the cluster from which the snapshot was taken.
	ClusterConfigurations pulumix.GArrayOutput[SnapshotClusterConfiguration, SnapshotClusterConfigurationOutput] `pulumi:"clusterConfigurations"`
	// Name of the MemoryDB cluster to take a snapshot of.
	ClusterName pulumix.Output[string] `pulumi:"clusterName"`
	// ARN of the KMS key used to encrypt the snapshot at rest.
	KmsKeyArn pulumix.Output[*string] `pulumi:"kmsKeyArn"`
	// Name of the snapshot. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[string] `pulumi:"namePrefix"`
	// Indicates whether the snapshot is from an automatic backup (`automated`) or was created manually (`manual`).
	Source pulumix.Output[string] `pulumi:"source"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snapshot
	err := ctx.RegisterResource("aws:memorydb/snapshot:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("aws:memorydb/snapshot:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
	// The ARN of the snapshot.
	Arn *string `pulumi:"arn"`
	// The configuration of the cluster from which the snapshot was taken.
	ClusterConfigurations []SnapshotClusterConfiguration `pulumi:"clusterConfigurations"`
	// Name of the MemoryDB cluster to take a snapshot of.
	ClusterName *string `pulumi:"clusterName"`
	// ARN of the KMS key used to encrypt the snapshot at rest.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Name of the snapshot. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Indicates whether the snapshot is from an automatic backup (`automated`) or was created manually (`manual`).
	Source *string `pulumi:"source"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type SnapshotState struct {
	// The ARN of the snapshot.
	Arn pulumix.Input[*string]
	// The configuration of the cluster from which the snapshot was taken.
	ClusterConfigurations pulumix.Input[[]*SnapshotClusterConfigurationArgs]
	// Name of the MemoryDB cluster to take a snapshot of.
	ClusterName pulumix.Input[*string]
	// ARN of the KMS key used to encrypt the snapshot at rest.
	KmsKeyArn pulumix.Input[*string]
	// Name of the snapshot. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// Indicates whether the snapshot is from an automatic backup (`automated`) or was created manually (`manual`).
	Source pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	// Name of the MemoryDB cluster to take a snapshot of.
	ClusterName string `pulumi:"clusterName"`
	// ARN of the KMS key used to encrypt the snapshot at rest.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Name of the snapshot. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// Name of the MemoryDB cluster to take a snapshot of.
	ClusterName pulumix.Input[string]
	// ARN of the KMS key used to encrypt the snapshot at rest.
	KmsKeyArn pulumix.Input[*string]
	// Name of the snapshot. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToOutput(ctx context.Context) pulumix.Output[Snapshot] {
	return pulumix.Output[Snapshot]{
		OutputState: o.OutputState,
	}
}

// The ARN of the snapshot.
func (o SnapshotOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The configuration of the cluster from which the snapshot was taken.
func (o SnapshotOutput) ClusterConfigurations() pulumix.GArrayOutput[SnapshotClusterConfiguration, SnapshotClusterConfigurationOutput] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.GArrayOutput[SnapshotClusterConfiguration, SnapshotClusterConfigurationOutput] {
		return v.ClusterConfigurations
	})
	unwrapped := pulumix.Flatten[[]SnapshotClusterConfiguration, pulumix.GArrayOutput[SnapshotClusterConfiguration, SnapshotClusterConfigurationOutput]](value)
	return pulumix.GArrayOutput[SnapshotClusterConfiguration, SnapshotClusterConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Name of the MemoryDB cluster to take a snapshot of.
func (o SnapshotOutput) ClusterName() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.ClusterName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the KMS key used to encrypt the snapshot at rest.
func (o SnapshotOutput) KmsKeyArn() pulumix.Output[*string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[*string] { return v.KmsKeyArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the snapshot. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o SnapshotOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o SnapshotOutput) NamePrefix() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.NamePrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether the snapshot is from an automatic backup (`automated`) or was created manually (`manual`).
func (o SnapshotOutput) Source() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.Source })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SnapshotOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SnapshotOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(SnapshotOutput{})
}
