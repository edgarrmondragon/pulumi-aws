// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Backup vault resource.
type Vault struct {
	pulumi.CustomResourceState

	// The ARN of the vault.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A boolean that indicates that all recovery points stored in the vault are deleted so that the vault can be destroyed without error.
	ForceDestroy pulumix.Output[*bool] `pulumi:"forceDestroy"`
	// The server-side encryption key that is used to protect your backups.
	KmsKeyArn pulumix.Output[string] `pulumi:"kmsKeyArn"`
	// Name of the backup vault to create.
	Name pulumix.Output[string] `pulumi:"name"`
	// The number of recovery points that are stored in a backup vault.
	RecoveryPoints pulumix.Output[int] `pulumi:"recoveryPoints"`
	// Metadata that you can assign to help organize the resources that you create. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewVault registers a new resource with the given unique name, arguments, and options.
func NewVault(ctx *pulumi.Context,
	name string, args *VaultArgs, opts ...pulumi.ResourceOption) (*Vault, error) {
	if args == nil {
		args = &VaultArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vault
	err := ctx.RegisterResource("aws:backup/vault:Vault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVault gets an existing Vault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VaultState, opts ...pulumi.ResourceOption) (*Vault, error) {
	var resource Vault
	err := ctx.ReadResource("aws:backup/vault:Vault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vault resources.
type vaultState struct {
	// The ARN of the vault.
	Arn *string `pulumi:"arn"`
	// A boolean that indicates that all recovery points stored in the vault are deleted so that the vault can be destroyed without error.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// The server-side encryption key that is used to protect your backups.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Name of the backup vault to create.
	Name *string `pulumi:"name"`
	// The number of recovery points that are stored in a backup vault.
	RecoveryPoints *int `pulumi:"recoveryPoints"`
	// Metadata that you can assign to help organize the resources that you create. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type VaultState struct {
	// The ARN of the vault.
	Arn pulumix.Input[*string]
	// A boolean that indicates that all recovery points stored in the vault are deleted so that the vault can be destroyed without error.
	ForceDestroy pulumix.Input[*bool]
	// The server-side encryption key that is used to protect your backups.
	KmsKeyArn pulumix.Input[*string]
	// Name of the backup vault to create.
	Name pulumix.Input[*string]
	// The number of recovery points that are stored in a backup vault.
	RecoveryPoints pulumix.Input[*int]
	// Metadata that you can assign to help organize the resources that you create. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (VaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultState)(nil)).Elem()
}

type vaultArgs struct {
	// A boolean that indicates that all recovery points stored in the vault are deleted so that the vault can be destroyed without error.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// The server-side encryption key that is used to protect your backups.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Name of the backup vault to create.
	Name *string `pulumi:"name"`
	// Metadata that you can assign to help organize the resources that you create. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Vault resource.
type VaultArgs struct {
	// A boolean that indicates that all recovery points stored in the vault are deleted so that the vault can be destroyed without error.
	ForceDestroy pulumix.Input[*bool]
	// The server-side encryption key that is used to protect your backups.
	KmsKeyArn pulumix.Input[*string]
	// Name of the backup vault to create.
	Name pulumix.Input[*string]
	// Metadata that you can assign to help organize the resources that you create. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (VaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultArgs)(nil)).Elem()
}

type VaultOutput struct{ *pulumi.OutputState }

func (VaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Vault)(nil)).Elem()
}

func (o VaultOutput) ToVaultOutput() VaultOutput {
	return o
}

func (o VaultOutput) ToVaultOutputWithContext(ctx context.Context) VaultOutput {
	return o
}

func (o VaultOutput) ToOutput(ctx context.Context) pulumix.Output[Vault] {
	return pulumix.Output[Vault]{
		OutputState: o.OutputState,
	}
}

// The ARN of the vault.
func (o VaultOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Vault](o, func(v Vault) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A boolean that indicates that all recovery points stored in the vault are deleted so that the vault can be destroyed without error.
func (o VaultOutput) ForceDestroy() pulumix.Output[*bool] {
	value := pulumix.Apply[Vault](o, func(v Vault) pulumix.Output[*bool] { return v.ForceDestroy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The server-side encryption key that is used to protect your backups.
func (o VaultOutput) KmsKeyArn() pulumix.Output[string] {
	value := pulumix.Apply[Vault](o, func(v Vault) pulumix.Output[string] { return v.KmsKeyArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the backup vault to create.
func (o VaultOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Vault](o, func(v Vault) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The number of recovery points that are stored in a backup vault.
func (o VaultOutput) RecoveryPoints() pulumix.Output[int] {
	value := pulumix.Apply[Vault](o, func(v Vault) pulumix.Output[int] { return v.RecoveryPoints })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Metadata that you can assign to help organize the resources that you create. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VaultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Vault](o, func(v Vault) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VaultOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Vault](o, func(v Vault) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(VaultOutput{})
}
