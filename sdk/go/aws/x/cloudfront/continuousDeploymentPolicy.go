// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfront

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS CloudFront Continuous Deployment Policy.
type ContinuousDeploymentPolicy struct {
	pulumi.CustomResourceState

	// Whether this continuous deployment policy is enabled.
	Enabled pulumix.Output[bool] `pulumi:"enabled"`
	// Current version of the continuous distribution policy.
	Etag pulumix.Output[string] `pulumi:"etag"`
	// Date and time the continuous deployment policy was last modified.
	LastModifiedTime pulumix.Output[string] `pulumi:"lastModifiedTime"`
	// CloudFront domain name of the staging distribution. See `stagingDistributionDnsNames`.
	StagingDistributionDnsNames pulumix.GPtrOutput[ContinuousDeploymentPolicyStagingDistributionDnsNames, ContinuousDeploymentPolicyStagingDistributionDnsNamesOutput] `pulumi:"stagingDistributionDnsNames"`
	// Parameters for routing production traffic from primary to staging distributions. See `trafficConfig`.
	TrafficConfig pulumix.GPtrOutput[ContinuousDeploymentPolicyTrafficConfig, ContinuousDeploymentPolicyTrafficConfigOutput] `pulumi:"trafficConfig"`
}

// NewContinuousDeploymentPolicy registers a new resource with the given unique name, arguments, and options.
func NewContinuousDeploymentPolicy(ctx *pulumi.Context,
	name string, args *ContinuousDeploymentPolicyArgs, opts ...pulumi.ResourceOption) (*ContinuousDeploymentPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContinuousDeploymentPolicy
	err := ctx.RegisterResource("aws:cloudfront/continuousDeploymentPolicy:ContinuousDeploymentPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContinuousDeploymentPolicy gets an existing ContinuousDeploymentPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContinuousDeploymentPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContinuousDeploymentPolicyState, opts ...pulumi.ResourceOption) (*ContinuousDeploymentPolicy, error) {
	var resource ContinuousDeploymentPolicy
	err := ctx.ReadResource("aws:cloudfront/continuousDeploymentPolicy:ContinuousDeploymentPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContinuousDeploymentPolicy resources.
type continuousDeploymentPolicyState struct {
	// Whether this continuous deployment policy is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Current version of the continuous distribution policy.
	Etag *string `pulumi:"etag"`
	// Date and time the continuous deployment policy was last modified.
	LastModifiedTime *string `pulumi:"lastModifiedTime"`
	// CloudFront domain name of the staging distribution. See `stagingDistributionDnsNames`.
	StagingDistributionDnsNames *ContinuousDeploymentPolicyStagingDistributionDnsNames `pulumi:"stagingDistributionDnsNames"`
	// Parameters for routing production traffic from primary to staging distributions. See `trafficConfig`.
	TrafficConfig *ContinuousDeploymentPolicyTrafficConfig `pulumi:"trafficConfig"`
}

type ContinuousDeploymentPolicyState struct {
	// Whether this continuous deployment policy is enabled.
	Enabled pulumix.Input[*bool]
	// Current version of the continuous distribution policy.
	Etag pulumix.Input[*string]
	// Date and time the continuous deployment policy was last modified.
	LastModifiedTime pulumix.Input[*string]
	// CloudFront domain name of the staging distribution. See `stagingDistributionDnsNames`.
	StagingDistributionDnsNames pulumix.Input[*ContinuousDeploymentPolicyStagingDistributionDnsNamesArgs]
	// Parameters for routing production traffic from primary to staging distributions. See `trafficConfig`.
	TrafficConfig pulumix.Input[*ContinuousDeploymentPolicyTrafficConfigArgs]
}

func (ContinuousDeploymentPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*continuousDeploymentPolicyState)(nil)).Elem()
}

type continuousDeploymentPolicyArgs struct {
	// Whether this continuous deployment policy is enabled.
	Enabled bool `pulumi:"enabled"`
	// CloudFront domain name of the staging distribution. See `stagingDistributionDnsNames`.
	StagingDistributionDnsNames *ContinuousDeploymentPolicyStagingDistributionDnsNames `pulumi:"stagingDistributionDnsNames"`
	// Parameters for routing production traffic from primary to staging distributions. See `trafficConfig`.
	TrafficConfig *ContinuousDeploymentPolicyTrafficConfig `pulumi:"trafficConfig"`
}

// The set of arguments for constructing a ContinuousDeploymentPolicy resource.
type ContinuousDeploymentPolicyArgs struct {
	// Whether this continuous deployment policy is enabled.
	Enabled pulumix.Input[bool]
	// CloudFront domain name of the staging distribution. See `stagingDistributionDnsNames`.
	StagingDistributionDnsNames pulumix.Input[*ContinuousDeploymentPolicyStagingDistributionDnsNamesArgs]
	// Parameters for routing production traffic from primary to staging distributions. See `trafficConfig`.
	TrafficConfig pulumix.Input[*ContinuousDeploymentPolicyTrafficConfigArgs]
}

func (ContinuousDeploymentPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*continuousDeploymentPolicyArgs)(nil)).Elem()
}

type ContinuousDeploymentPolicyOutput struct{ *pulumi.OutputState }

func (ContinuousDeploymentPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContinuousDeploymentPolicy)(nil)).Elem()
}

func (o ContinuousDeploymentPolicyOutput) ToContinuousDeploymentPolicyOutput() ContinuousDeploymentPolicyOutput {
	return o
}

func (o ContinuousDeploymentPolicyOutput) ToContinuousDeploymentPolicyOutputWithContext(ctx context.Context) ContinuousDeploymentPolicyOutput {
	return o
}

func (o ContinuousDeploymentPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ContinuousDeploymentPolicy] {
	return pulumix.Output[ContinuousDeploymentPolicy]{
		OutputState: o.OutputState,
	}
}

// Whether this continuous deployment policy is enabled.
func (o ContinuousDeploymentPolicyOutput) Enabled() pulumix.Output[bool] {
	value := pulumix.Apply[ContinuousDeploymentPolicy](o, func(v ContinuousDeploymentPolicy) pulumix.Output[bool] { return v.Enabled })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Current version of the continuous distribution policy.
func (o ContinuousDeploymentPolicyOutput) Etag() pulumix.Output[string] {
	value := pulumix.Apply[ContinuousDeploymentPolicy](o, func(v ContinuousDeploymentPolicy) pulumix.Output[string] { return v.Etag })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date and time the continuous deployment policy was last modified.
func (o ContinuousDeploymentPolicyOutput) LastModifiedTime() pulumix.Output[string] {
	value := pulumix.Apply[ContinuousDeploymentPolicy](o, func(v ContinuousDeploymentPolicy) pulumix.Output[string] { return v.LastModifiedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// CloudFront domain name of the staging distribution. See `stagingDistributionDnsNames`.
func (o ContinuousDeploymentPolicyOutput) StagingDistributionDnsNames() pulumix.GPtrOutput[ContinuousDeploymentPolicyStagingDistributionDnsNames, ContinuousDeploymentPolicyStagingDistributionDnsNamesOutput] {
	value := pulumix.Apply[ContinuousDeploymentPolicy](o, func(v ContinuousDeploymentPolicy) pulumix.GPtrOutput[ContinuousDeploymentPolicyStagingDistributionDnsNames, ContinuousDeploymentPolicyStagingDistributionDnsNamesOutput] {
		return v.StagingDistributionDnsNames
	})
	unwrapped := pulumix.Flatten[*ContinuousDeploymentPolicyStagingDistributionDnsNames, pulumix.GPtrOutput[ContinuousDeploymentPolicyStagingDistributionDnsNames, ContinuousDeploymentPolicyStagingDistributionDnsNamesOutput]](value)
	return pulumix.GPtrOutput[ContinuousDeploymentPolicyStagingDistributionDnsNames, ContinuousDeploymentPolicyStagingDistributionDnsNamesOutput]{OutputState: unwrapped.OutputState}
}

// Parameters for routing production traffic from primary to staging distributions. See `trafficConfig`.
func (o ContinuousDeploymentPolicyOutput) TrafficConfig() pulumix.GPtrOutput[ContinuousDeploymentPolicyTrafficConfig, ContinuousDeploymentPolicyTrafficConfigOutput] {
	value := pulumix.Apply[ContinuousDeploymentPolicy](o, func(v ContinuousDeploymentPolicy) pulumix.GPtrOutput[ContinuousDeploymentPolicyTrafficConfig, ContinuousDeploymentPolicyTrafficConfigOutput] {
		return v.TrafficConfig
	})
	unwrapped := pulumix.Flatten[*ContinuousDeploymentPolicyTrafficConfig, pulumix.GPtrOutput[ContinuousDeploymentPolicyTrafficConfig, ContinuousDeploymentPolicyTrafficConfigOutput]](value)
	return pulumix.GPtrOutput[ContinuousDeploymentPolicyTrafficConfig, ContinuousDeploymentPolicyTrafficConfigOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ContinuousDeploymentPolicyOutput{})
}
