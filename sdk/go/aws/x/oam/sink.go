// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS CloudWatch Observability Access Manager Sink.
type Sink struct {
	pulumi.CustomResourceState

	// ARN of the Sink.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Name for the sink.
	//
	// The following arguments are optional:
	Name pulumix.Output[string] `pulumi:"name"`
	// ID string that AWS generated as part of the sink ARN.
	SinkId pulumix.Output[string] `pulumi:"sinkId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewSink registers a new resource with the given unique name, arguments, and options.
func NewSink(ctx *pulumi.Context,
	name string, args *SinkArgs, opts ...pulumi.ResourceOption) (*Sink, error) {
	if args == nil {
		args = &SinkArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Sink
	err := ctx.RegisterResource("aws:oam/sink:Sink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSink gets an existing Sink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SinkState, opts ...pulumi.ResourceOption) (*Sink, error) {
	var resource Sink
	err := ctx.ReadResource("aws:oam/sink:Sink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sink resources.
type sinkState struct {
	// ARN of the Sink.
	Arn *string `pulumi:"arn"`
	// Name for the sink.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// ID string that AWS generated as part of the sink ARN.
	SinkId *string `pulumi:"sinkId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type SinkState struct {
	// ARN of the Sink.
	Arn pulumix.Input[*string]
	// Name for the sink.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// ID string that AWS generated as part of the sink ARN.
	SinkId pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
}

func (SinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*sinkState)(nil)).Elem()
}

type sinkArgs struct {
	// Name for the sink.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Sink resource.
type SinkArgs struct {
	// Name for the sink.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (SinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sinkArgs)(nil)).Elem()
}

type SinkOutput struct{ *pulumi.OutputState }

func (SinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sink)(nil)).Elem()
}

func (o SinkOutput) ToSinkOutput() SinkOutput {
	return o
}

func (o SinkOutput) ToSinkOutputWithContext(ctx context.Context) SinkOutput {
	return o
}

func (o SinkOutput) ToOutput(ctx context.Context) pulumix.Output[Sink] {
	return pulumix.Output[Sink]{
		OutputState: o.OutputState,
	}
}

// ARN of the Sink.
func (o SinkOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Sink](o, func(v Sink) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name for the sink.
//
// The following arguments are optional:
func (o SinkOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Sink](o, func(v Sink) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID string that AWS generated as part of the sink ARN.
func (o SinkOutput) SinkId() pulumix.Output[string] {
	value := pulumix.Apply[Sink](o, func(v Sink) pulumix.Output[string] { return v.SinkId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SinkOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Sink](o, func(v Sink) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o SinkOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Sink](o, func(v Sink) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(SinkOutput{})
}
