// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SnapshotSchedule struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the Redshift Snapshot Schedule.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The definition of the snapshot schedule. The definition is made up of schedule expressions, for example `cron(30 12 *)` or `rate(12 hours)`.
	Definitions pulumix.ArrayOutput[string] `pulumi:"definitions"`
	// The description of the snapshot schedule.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Whether to destroy all associated clusters with this snapshot schedule on deletion. Must be enabled and applied before attempting deletion.
	ForceDestroy pulumix.Output[*bool] `pulumi:"forceDestroy"`
	// The snapshot schedule identifier. If omitted, this provider will assign a random, unique identifier.
	Identifier pulumix.Output[string] `pulumi:"identifier"`
	// Creates a unique
	// identifier beginning with the specified prefix. Conflicts with `identifier`.
	IdentifierPrefix pulumix.Output[string] `pulumi:"identifierPrefix"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewSnapshotSchedule registers a new resource with the given unique name, arguments, and options.
func NewSnapshotSchedule(ctx *pulumi.Context,
	name string, args *SnapshotScheduleArgs, opts ...pulumi.ResourceOption) (*SnapshotSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Definitions == nil {
		return nil, errors.New("invalid value for required argument 'Definitions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnapshotSchedule
	err := ctx.RegisterResource("aws:redshift/snapshotSchedule:SnapshotSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotSchedule gets an existing SnapshotSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotScheduleState, opts ...pulumi.ResourceOption) (*SnapshotSchedule, error) {
	var resource SnapshotSchedule
	err := ctx.ReadResource("aws:redshift/snapshotSchedule:SnapshotSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotSchedule resources.
type snapshotScheduleState struct {
	// Amazon Resource Name (ARN) of the Redshift Snapshot Schedule.
	Arn *string `pulumi:"arn"`
	// The definition of the snapshot schedule. The definition is made up of schedule expressions, for example `cron(30 12 *)` or `rate(12 hours)`.
	Definitions []string `pulumi:"definitions"`
	// The description of the snapshot schedule.
	Description *string `pulumi:"description"`
	// Whether to destroy all associated clusters with this snapshot schedule on deletion. Must be enabled and applied before attempting deletion.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// The snapshot schedule identifier. If omitted, this provider will assign a random, unique identifier.
	Identifier *string `pulumi:"identifier"`
	// Creates a unique
	// identifier beginning with the specified prefix. Conflicts with `identifier`.
	IdentifierPrefix *string `pulumi:"identifierPrefix"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type SnapshotScheduleState struct {
	// Amazon Resource Name (ARN) of the Redshift Snapshot Schedule.
	Arn pulumix.Input[*string]
	// The definition of the snapshot schedule. The definition is made up of schedule expressions, for example `cron(30 12 *)` or `rate(12 hours)`.
	Definitions pulumix.Input[[]string]
	// The description of the snapshot schedule.
	Description pulumix.Input[*string]
	// Whether to destroy all associated clusters with this snapshot schedule on deletion. Must be enabled and applied before attempting deletion.
	ForceDestroy pulumix.Input[*bool]
	// The snapshot schedule identifier. If omitted, this provider will assign a random, unique identifier.
	Identifier pulumix.Input[*string]
	// Creates a unique
	// identifier beginning with the specified prefix. Conflicts with `identifier`.
	IdentifierPrefix pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (SnapshotScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotScheduleState)(nil)).Elem()
}

type snapshotScheduleArgs struct {
	// The definition of the snapshot schedule. The definition is made up of schedule expressions, for example `cron(30 12 *)` or `rate(12 hours)`.
	Definitions []string `pulumi:"definitions"`
	// The description of the snapshot schedule.
	Description *string `pulumi:"description"`
	// Whether to destroy all associated clusters with this snapshot schedule on deletion. Must be enabled and applied before attempting deletion.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// The snapshot schedule identifier. If omitted, this provider will assign a random, unique identifier.
	Identifier *string `pulumi:"identifier"`
	// Creates a unique
	// identifier beginning with the specified prefix. Conflicts with `identifier`.
	IdentifierPrefix *string `pulumi:"identifierPrefix"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SnapshotSchedule resource.
type SnapshotScheduleArgs struct {
	// The definition of the snapshot schedule. The definition is made up of schedule expressions, for example `cron(30 12 *)` or `rate(12 hours)`.
	Definitions pulumix.Input[[]string]
	// The description of the snapshot schedule.
	Description pulumix.Input[*string]
	// Whether to destroy all associated clusters with this snapshot schedule on deletion. Must be enabled and applied before attempting deletion.
	ForceDestroy pulumix.Input[*bool]
	// The snapshot schedule identifier. If omitted, this provider will assign a random, unique identifier.
	Identifier pulumix.Input[*string]
	// Creates a unique
	// identifier beginning with the specified prefix. Conflicts with `identifier`.
	IdentifierPrefix pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (SnapshotScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotScheduleArgs)(nil)).Elem()
}

type SnapshotScheduleOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSchedule)(nil)).Elem()
}

func (o SnapshotScheduleOutput) ToSnapshotScheduleOutput() SnapshotScheduleOutput {
	return o
}

func (o SnapshotScheduleOutput) ToSnapshotScheduleOutputWithContext(ctx context.Context) SnapshotScheduleOutput {
	return o
}

func (o SnapshotScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[SnapshotSchedule] {
	return pulumix.Output[SnapshotSchedule]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the Redshift Snapshot Schedule.
func (o SnapshotScheduleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotSchedule](o, func(v SnapshotSchedule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The definition of the snapshot schedule. The definition is made up of schedule expressions, for example `cron(30 12 *)` or `rate(12 hours)`.
func (o SnapshotScheduleOutput) Definitions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SnapshotSchedule](o, func(v SnapshotSchedule) pulumix.ArrayOutput[string] { return v.Definitions })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The description of the snapshot schedule.
func (o SnapshotScheduleOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[SnapshotSchedule](o, func(v SnapshotSchedule) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether to destroy all associated clusters with this snapshot schedule on deletion. Must be enabled and applied before attempting deletion.
func (o SnapshotScheduleOutput) ForceDestroy() pulumix.Output[*bool] {
	value := pulumix.Apply[SnapshotSchedule](o, func(v SnapshotSchedule) pulumix.Output[*bool] { return v.ForceDestroy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The snapshot schedule identifier. If omitted, this provider will assign a random, unique identifier.
func (o SnapshotScheduleOutput) Identifier() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotSchedule](o, func(v SnapshotSchedule) pulumix.Output[string] { return v.Identifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique
// identifier beginning with the specified prefix. Conflicts with `identifier`.
func (o SnapshotScheduleOutput) IdentifierPrefix() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotSchedule](o, func(v SnapshotSchedule) pulumix.Output[string] { return v.IdentifierPrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SnapshotScheduleOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[SnapshotSchedule](o, func(v SnapshotSchedule) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SnapshotScheduleOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[SnapshotSchedule](o, func(v SnapshotSchedule) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(SnapshotScheduleOutput{})
}
