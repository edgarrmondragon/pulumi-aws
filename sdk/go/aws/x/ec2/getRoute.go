// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `ec2.Route` provides details about a specific Route.
//
// This resource can prove useful when finding the resource associated with a CIDR. For example, finding the peering connection associated with a CIDR value.
func LookupRoute(ctx *pulumi.Context, args *LookupRouteArgs, opts ...pulumi.InvokeOption) (*LookupRouteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRouteResult
	err := ctx.Invoke("aws:ec2/getRoute:getRoute", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRoute.
type LookupRouteArgs struct {
	// EC2 Carrier Gateway ID of the Route belonging to the Route Table.
	CarrierGatewayId *string `pulumi:"carrierGatewayId"`
	// Core network ARN of the Route belonging to the Route Table.
	CoreNetworkArn *string `pulumi:"coreNetworkArn"`
	// CIDR block of the Route belonging to the Route Table.
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// IPv6 CIDR block of the Route belonging to the Route Table.
	DestinationIpv6CidrBlock *string `pulumi:"destinationIpv6CidrBlock"`
	// ID of a managed prefix list destination of the Route belonging to the Route Table.
	DestinationPrefixListId *string `pulumi:"destinationPrefixListId"`
	// Egress Only Gateway ID of the Route belonging to the Route Table.
	EgressOnlyGatewayId *string `pulumi:"egressOnlyGatewayId"`
	// Gateway ID of the Route belonging to the Route Table.
	GatewayId *string `pulumi:"gatewayId"`
	// Instance ID of the Route belonging to the Route Table.
	InstanceId *string `pulumi:"instanceId"`
	// Local Gateway ID of the Route belonging to the Route Table.
	LocalGatewayId *string `pulumi:"localGatewayId"`
	// NAT Gateway ID of the Route belonging to the Route Table.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// Network Interface ID of the Route belonging to the Route Table.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// ID of the specific Route Table containing the Route entry.
	//
	// The following arguments are optional:
	RouteTableId string `pulumi:"routeTableId"`
	// EC2 Transit Gateway ID of the Route belonging to the Route Table.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
	// VPC Peering Connection ID of the Route belonging to the Route Table.
	VpcPeeringConnectionId *string `pulumi:"vpcPeeringConnectionId"`
}

// A collection of values returned by getRoute.
type LookupRouteResult struct {
	CarrierGatewayId         string `pulumi:"carrierGatewayId"`
	CoreNetworkArn           string `pulumi:"coreNetworkArn"`
	DestinationCidrBlock     string `pulumi:"destinationCidrBlock"`
	DestinationIpv6CidrBlock string `pulumi:"destinationIpv6CidrBlock"`
	DestinationPrefixListId  string `pulumi:"destinationPrefixListId"`
	EgressOnlyGatewayId      string `pulumi:"egressOnlyGatewayId"`
	GatewayId                string `pulumi:"gatewayId"`
	// The provider-assigned unique ID for this managed resource.
	Id                     string `pulumi:"id"`
	InstanceId             string `pulumi:"instanceId"`
	LocalGatewayId         string `pulumi:"localGatewayId"`
	NatGatewayId           string `pulumi:"natGatewayId"`
	NetworkInterfaceId     string `pulumi:"networkInterfaceId"`
	RouteTableId           string `pulumi:"routeTableId"`
	TransitGatewayId       string `pulumi:"transitGatewayId"`
	VpcPeeringConnectionId string `pulumi:"vpcPeeringConnectionId"`
}

func LookupRouteOutput(ctx *pulumi.Context, args LookupRouteOutputArgs, opts ...pulumi.InvokeOption) LookupRouteResultOutput {
	outputResult := pulumix.ApplyErr[*LookupRouteArgs](args.ToOutput(), func(plainArgs *LookupRouteArgs) (*LookupRouteResult, error) {
		return LookupRoute(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupRouteResultOutput, *LookupRouteResult](outputResult)
}

// A collection of arguments for invoking getRoute.
type LookupRouteOutputArgs struct {
	// EC2 Carrier Gateway ID of the Route belonging to the Route Table.
	CarrierGatewayId pulumix.Input[*string] `pulumi:"carrierGatewayId"`
	// Core network ARN of the Route belonging to the Route Table.
	CoreNetworkArn pulumix.Input[*string] `pulumi:"coreNetworkArn"`
	// CIDR block of the Route belonging to the Route Table.
	DestinationCidrBlock pulumix.Input[*string] `pulumi:"destinationCidrBlock"`
	// IPv6 CIDR block of the Route belonging to the Route Table.
	DestinationIpv6CidrBlock pulumix.Input[*string] `pulumi:"destinationIpv6CidrBlock"`
	// ID of a managed prefix list destination of the Route belonging to the Route Table.
	DestinationPrefixListId pulumix.Input[*string] `pulumi:"destinationPrefixListId"`
	// Egress Only Gateway ID of the Route belonging to the Route Table.
	EgressOnlyGatewayId pulumix.Input[*string] `pulumi:"egressOnlyGatewayId"`
	// Gateway ID of the Route belonging to the Route Table.
	GatewayId pulumix.Input[*string] `pulumi:"gatewayId"`
	// Instance ID of the Route belonging to the Route Table.
	InstanceId pulumix.Input[*string] `pulumi:"instanceId"`
	// Local Gateway ID of the Route belonging to the Route Table.
	LocalGatewayId pulumix.Input[*string] `pulumi:"localGatewayId"`
	// NAT Gateway ID of the Route belonging to the Route Table.
	NatGatewayId pulumix.Input[*string] `pulumi:"natGatewayId"`
	// Network Interface ID of the Route belonging to the Route Table.
	NetworkInterfaceId pulumix.Input[*string] `pulumi:"networkInterfaceId"`
	// ID of the specific Route Table containing the Route entry.
	//
	// The following arguments are optional:
	RouteTableId pulumix.Input[string] `pulumi:"routeTableId"`
	// EC2 Transit Gateway ID of the Route belonging to the Route Table.
	TransitGatewayId pulumix.Input[*string] `pulumi:"transitGatewayId"`
	// VPC Peering Connection ID of the Route belonging to the Route Table.
	VpcPeeringConnectionId pulumix.Input[*string] `pulumi:"vpcPeeringConnectionId"`
}

func (args LookupRouteOutputArgs) ToOutput() pulumix.Output[*LookupRouteArgs] {
	allArgs := pulumix.All(
		args.CarrierGatewayId.ToOutput(context.Background()).AsAny(),
		args.CoreNetworkArn.ToOutput(context.Background()).AsAny(),
		args.DestinationCidrBlock.ToOutput(context.Background()).AsAny(),
		args.DestinationIpv6CidrBlock.ToOutput(context.Background()).AsAny(),
		args.DestinationPrefixListId.ToOutput(context.Background()).AsAny(),
		args.EgressOnlyGatewayId.ToOutput(context.Background()).AsAny(),
		args.GatewayId.ToOutput(context.Background()).AsAny(),
		args.InstanceId.ToOutput(context.Background()).AsAny(),
		args.LocalGatewayId.ToOutput(context.Background()).AsAny(),
		args.NatGatewayId.ToOutput(context.Background()).AsAny(),
		args.NetworkInterfaceId.ToOutput(context.Background()).AsAny(),
		args.RouteTableId.ToOutput(context.Background()).AsAny(),
		args.TransitGatewayId.ToOutput(context.Background()).AsAny(),
		args.VpcPeeringConnectionId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupRouteArgs {
		return &LookupRouteArgs{
			CarrierGatewayId:         resolvedArgs[0].(*string),
			CoreNetworkArn:           resolvedArgs[1].(*string),
			DestinationCidrBlock:     resolvedArgs[2].(*string),
			DestinationIpv6CidrBlock: resolvedArgs[3].(*string),
			DestinationPrefixListId:  resolvedArgs[4].(*string),
			EgressOnlyGatewayId:      resolvedArgs[5].(*string),
			GatewayId:                resolvedArgs[6].(*string),
			InstanceId:               resolvedArgs[7].(*string),
			LocalGatewayId:           resolvedArgs[8].(*string),
			NatGatewayId:             resolvedArgs[9].(*string),
			NetworkInterfaceId:       resolvedArgs[10].(*string),
			RouteTableId:             resolvedArgs[11].(string),
			TransitGatewayId:         resolvedArgs[12].(*string),
			VpcPeeringConnectionId:   resolvedArgs[13].(*string),
		}
	})
}

type LookupRouteResultOutput struct{ *pulumi.OutputState }

func (LookupRouteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteResult)(nil)).Elem()
}

func (o LookupRouteResultOutput) ToOutput(context.Context) pulumix.Output[*LookupRouteResult] {
	return pulumix.Output[*LookupRouteResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupRouteResultOutput) CarrierGatewayId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.CarrierGatewayId })
}

func (o LookupRouteResultOutput) CoreNetworkArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.CoreNetworkArn })
}

func (o LookupRouteResultOutput) DestinationCidrBlock() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.DestinationCidrBlock })
}

func (o LookupRouteResultOutput) DestinationIpv6CidrBlock() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.DestinationIpv6CidrBlock })
}

func (o LookupRouteResultOutput) DestinationPrefixListId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.DestinationPrefixListId })
}

func (o LookupRouteResultOutput) EgressOnlyGatewayId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.EgressOnlyGatewayId })
}

func (o LookupRouteResultOutput) GatewayId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.GatewayId })
}

func (o LookupRouteResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.Id })
}

func (o LookupRouteResultOutput) InstanceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.InstanceId })
}

func (o LookupRouteResultOutput) LocalGatewayId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.LocalGatewayId })
}

func (o LookupRouteResultOutput) NatGatewayId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.NatGatewayId })
}

func (o LookupRouteResultOutput) NetworkInterfaceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.NetworkInterfaceId })
}

func (o LookupRouteResultOutput) RouteTableId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.RouteTableId })
}

func (o LookupRouteResultOutput) TransitGatewayId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.TransitGatewayId })
}

func (o LookupRouteResultOutput) VpcPeeringConnectionId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.VpcPeeringConnectionId })
}
