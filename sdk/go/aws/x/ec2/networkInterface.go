// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Elastic network interface (ENI) resource.
type NetworkInterface struct {
	pulumi.CustomResourceState

	// ARN of the network interface.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Configuration block to define the attachment of the ENI. See Attachment below for more details!
	Attachments pulumix.GArrayOutput[NetworkInterfaceAttachmentType, NetworkInterfaceAttachmentTypeOutput] `pulumi:"attachments"`
	// Description for the network interface.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Type of network interface to create. Set to `efa` for Elastic Fabric Adapter. Changing `interfaceType` will cause the resource to be destroyed and re-created.
	InterfaceType pulumix.Output[string] `pulumi:"interfaceType"`
	// Number of IPv4 prefixes that AWS automatically assigns to the network interface.
	Ipv4PrefixCount pulumix.Output[int] `pulumi:"ipv4PrefixCount"`
	// One or more IPv4 prefixes assigned to the network interface.
	Ipv4Prefixes pulumix.ArrayOutput[string] `pulumi:"ipv4Prefixes"`
	// Number of IPv6 addresses to assign to a network interface. You can't use this option if specifying specific `ipv6Addresses`. If your subnet has the AssignIpv6AddressOnCreation attribute set to `true`, you can specify `0` to override this setting.
	Ipv6AddressCount pulumix.Output[int] `pulumi:"ipv6AddressCount"`
	// Whether `ipv6AddressList` is allowed and controls the IPs to assign to the ENI and `ipv6Addresses` and `ipv6AddressCount` become read-only. Default false.
	Ipv6AddressListEnabled pulumix.Output[*bool] `pulumi:"ipv6AddressListEnabled"`
	// List of private IPs to assign to the ENI in sequential order.
	Ipv6AddressLists pulumix.ArrayOutput[string] `pulumi:"ipv6AddressLists"`
	// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Addresses are assigned without regard to order. You can't use this option if you're specifying `ipv6AddressCount`.
	Ipv6Addresses pulumix.ArrayOutput[string] `pulumi:"ipv6Addresses"`
	// Number of IPv6 prefixes that AWS automatically assigns to the network interface.
	Ipv6PrefixCount pulumix.Output[int] `pulumi:"ipv6PrefixCount"`
	// One or more IPv6 prefixes assigned to the network interface.
	Ipv6Prefixes pulumix.ArrayOutput[string] `pulumi:"ipv6Prefixes"`
	// MAC address of the network interface.
	MacAddress pulumix.Output[string] `pulumi:"macAddress"`
	OutpostArn pulumix.Output[string] `pulumi:"outpostArn"`
	// AWS account ID of the owner of the network interface.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// Private DNS name of the network interface (IPv4).
	PrivateDnsName pulumix.Output[string] `pulumi:"privateDnsName"`
	PrivateIp      pulumix.Output[string] `pulumi:"privateIp"`
	// Whether `privateIpList` is allowed and controls the IPs to assign to the ENI and `privateIps` and `privateIpsCount` become read-only. Default false.
	PrivateIpListEnabled pulumix.Output[*bool] `pulumi:"privateIpListEnabled"`
	// List of private IPs to assign to the ENI in sequential order. Requires setting `privateIpListEnabled` to `true`.
	PrivateIpLists pulumix.ArrayOutput[string] `pulumi:"privateIpLists"`
	// List of private IPs to assign to the ENI without regard to order.
	PrivateIps pulumix.ArrayOutput[string] `pulumi:"privateIps"`
	// Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + `privateIpsCount`, as a primary private IP will be assiged to an ENI by default.
	PrivateIpsCount pulumix.Output[int] `pulumi:"privateIpsCount"`
	// List of security group IDs to assign to the ENI.
	SecurityGroups pulumix.ArrayOutput[string] `pulumi:"securityGroups"`
	// Whether to enable source destination checking for the ENI. Default true.
	SourceDestCheck pulumix.Output[*bool] `pulumi:"sourceDestCheck"`
	// Subnet ID to create the ENI in.
	//
	// The following arguments are optional:
	SubnetId pulumix.Output[string] `pulumi:"subnetId"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewNetworkInterface registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterface(ctx *pulumi.Context,
	name string, args *NetworkInterfaceArgs, opts ...pulumi.ResourceOption) (*NetworkInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkInterface
	err := ctx.RegisterResource("aws:ec2/networkInterface:NetworkInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInterface gets an existing NetworkInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkInterfaceState, opts ...pulumi.ResourceOption) (*NetworkInterface, error) {
	var resource NetworkInterface
	err := ctx.ReadResource("aws:ec2/networkInterface:NetworkInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkInterface resources.
type networkInterfaceState struct {
	// ARN of the network interface.
	Arn *string `pulumi:"arn"`
	// Configuration block to define the attachment of the ENI. See Attachment below for more details!
	Attachments []NetworkInterfaceAttachmentType `pulumi:"attachments"`
	// Description for the network interface.
	Description *string `pulumi:"description"`
	// Type of network interface to create. Set to `efa` for Elastic Fabric Adapter. Changing `interfaceType` will cause the resource to be destroyed and re-created.
	InterfaceType *string `pulumi:"interfaceType"`
	// Number of IPv4 prefixes that AWS automatically assigns to the network interface.
	Ipv4PrefixCount *int `pulumi:"ipv4PrefixCount"`
	// One or more IPv4 prefixes assigned to the network interface.
	Ipv4Prefixes []string `pulumi:"ipv4Prefixes"`
	// Number of IPv6 addresses to assign to a network interface. You can't use this option if specifying specific `ipv6Addresses`. If your subnet has the AssignIpv6AddressOnCreation attribute set to `true`, you can specify `0` to override this setting.
	Ipv6AddressCount *int `pulumi:"ipv6AddressCount"`
	// Whether `ipv6AddressList` is allowed and controls the IPs to assign to the ENI and `ipv6Addresses` and `ipv6AddressCount` become read-only. Default false.
	Ipv6AddressListEnabled *bool `pulumi:"ipv6AddressListEnabled"`
	// List of private IPs to assign to the ENI in sequential order.
	Ipv6AddressLists []string `pulumi:"ipv6AddressLists"`
	// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Addresses are assigned without regard to order. You can't use this option if you're specifying `ipv6AddressCount`.
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
	// Number of IPv6 prefixes that AWS automatically assigns to the network interface.
	Ipv6PrefixCount *int `pulumi:"ipv6PrefixCount"`
	// One or more IPv6 prefixes assigned to the network interface.
	Ipv6Prefixes []string `pulumi:"ipv6Prefixes"`
	// MAC address of the network interface.
	MacAddress *string `pulumi:"macAddress"`
	OutpostArn *string `pulumi:"outpostArn"`
	// AWS account ID of the owner of the network interface.
	OwnerId *string `pulumi:"ownerId"`
	// Private DNS name of the network interface (IPv4).
	PrivateDnsName *string `pulumi:"privateDnsName"`
	PrivateIp      *string `pulumi:"privateIp"`
	// Whether `privateIpList` is allowed and controls the IPs to assign to the ENI and `privateIps` and `privateIpsCount` become read-only. Default false.
	PrivateIpListEnabled *bool `pulumi:"privateIpListEnabled"`
	// List of private IPs to assign to the ENI in sequential order. Requires setting `privateIpListEnabled` to `true`.
	PrivateIpLists []string `pulumi:"privateIpLists"`
	// List of private IPs to assign to the ENI without regard to order.
	PrivateIps []string `pulumi:"privateIps"`
	// Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + `privateIpsCount`, as a primary private IP will be assiged to an ENI by default.
	PrivateIpsCount *int `pulumi:"privateIpsCount"`
	// List of security group IDs to assign to the ENI.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Whether to enable source destination checking for the ENI. Default true.
	SourceDestCheck *bool `pulumi:"sourceDestCheck"`
	// Subnet ID to create the ENI in.
	//
	// The following arguments are optional:
	SubnetId *string `pulumi:"subnetId"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type NetworkInterfaceState struct {
	// ARN of the network interface.
	Arn pulumix.Input[*string]
	// Configuration block to define the attachment of the ENI. See Attachment below for more details!
	Attachments pulumix.Input[[]*NetworkInterfaceAttachmentTypeArgs]
	// Description for the network interface.
	Description pulumix.Input[*string]
	// Type of network interface to create. Set to `efa` for Elastic Fabric Adapter. Changing `interfaceType` will cause the resource to be destroyed and re-created.
	InterfaceType pulumix.Input[*string]
	// Number of IPv4 prefixes that AWS automatically assigns to the network interface.
	Ipv4PrefixCount pulumix.Input[*int]
	// One or more IPv4 prefixes assigned to the network interface.
	Ipv4Prefixes pulumix.Input[[]string]
	// Number of IPv6 addresses to assign to a network interface. You can't use this option if specifying specific `ipv6Addresses`. If your subnet has the AssignIpv6AddressOnCreation attribute set to `true`, you can specify `0` to override this setting.
	Ipv6AddressCount pulumix.Input[*int]
	// Whether `ipv6AddressList` is allowed and controls the IPs to assign to the ENI and `ipv6Addresses` and `ipv6AddressCount` become read-only. Default false.
	Ipv6AddressListEnabled pulumix.Input[*bool]
	// List of private IPs to assign to the ENI in sequential order.
	Ipv6AddressLists pulumix.Input[[]string]
	// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Addresses are assigned without regard to order. You can't use this option if you're specifying `ipv6AddressCount`.
	Ipv6Addresses pulumix.Input[[]string]
	// Number of IPv6 prefixes that AWS automatically assigns to the network interface.
	Ipv6PrefixCount pulumix.Input[*int]
	// One or more IPv6 prefixes assigned to the network interface.
	Ipv6Prefixes pulumix.Input[[]string]
	// MAC address of the network interface.
	MacAddress pulumix.Input[*string]
	OutpostArn pulumix.Input[*string]
	// AWS account ID of the owner of the network interface.
	OwnerId pulumix.Input[*string]
	// Private DNS name of the network interface (IPv4).
	PrivateDnsName pulumix.Input[*string]
	PrivateIp      pulumix.Input[*string]
	// Whether `privateIpList` is allowed and controls the IPs to assign to the ENI and `privateIps` and `privateIpsCount` become read-only. Default false.
	PrivateIpListEnabled pulumix.Input[*bool]
	// List of private IPs to assign to the ENI in sequential order. Requires setting `privateIpListEnabled` to `true`.
	PrivateIpLists pulumix.Input[[]string]
	// List of private IPs to assign to the ENI without regard to order.
	PrivateIps pulumix.Input[[]string]
	// Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + `privateIpsCount`, as a primary private IP will be assiged to an ENI by default.
	PrivateIpsCount pulumix.Input[*int]
	// List of security group IDs to assign to the ENI.
	SecurityGroups pulumix.Input[[]string]
	// Whether to enable source destination checking for the ENI. Default true.
	SourceDestCheck pulumix.Input[*bool]
	// Subnet ID to create the ENI in.
	//
	// The following arguments are optional:
	SubnetId pulumix.Input[*string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (NetworkInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceState)(nil)).Elem()
}

type networkInterfaceArgs struct {
	// Configuration block to define the attachment of the ENI. See Attachment below for more details!
	Attachments []NetworkInterfaceAttachmentType `pulumi:"attachments"`
	// Description for the network interface.
	Description *string `pulumi:"description"`
	// Type of network interface to create. Set to `efa` for Elastic Fabric Adapter. Changing `interfaceType` will cause the resource to be destroyed and re-created.
	InterfaceType *string `pulumi:"interfaceType"`
	// Number of IPv4 prefixes that AWS automatically assigns to the network interface.
	Ipv4PrefixCount *int `pulumi:"ipv4PrefixCount"`
	// One or more IPv4 prefixes assigned to the network interface.
	Ipv4Prefixes []string `pulumi:"ipv4Prefixes"`
	// Number of IPv6 addresses to assign to a network interface. You can't use this option if specifying specific `ipv6Addresses`. If your subnet has the AssignIpv6AddressOnCreation attribute set to `true`, you can specify `0` to override this setting.
	Ipv6AddressCount *int `pulumi:"ipv6AddressCount"`
	// Whether `ipv6AddressList` is allowed and controls the IPs to assign to the ENI and `ipv6Addresses` and `ipv6AddressCount` become read-only. Default false.
	Ipv6AddressListEnabled *bool `pulumi:"ipv6AddressListEnabled"`
	// List of private IPs to assign to the ENI in sequential order.
	Ipv6AddressLists []string `pulumi:"ipv6AddressLists"`
	// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Addresses are assigned without regard to order. You can't use this option if you're specifying `ipv6AddressCount`.
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
	// Number of IPv6 prefixes that AWS automatically assigns to the network interface.
	Ipv6PrefixCount *int `pulumi:"ipv6PrefixCount"`
	// One or more IPv6 prefixes assigned to the network interface.
	Ipv6Prefixes []string `pulumi:"ipv6Prefixes"`
	PrivateIp    *string  `pulumi:"privateIp"`
	// Whether `privateIpList` is allowed and controls the IPs to assign to the ENI and `privateIps` and `privateIpsCount` become read-only. Default false.
	PrivateIpListEnabled *bool `pulumi:"privateIpListEnabled"`
	// List of private IPs to assign to the ENI in sequential order. Requires setting `privateIpListEnabled` to `true`.
	PrivateIpLists []string `pulumi:"privateIpLists"`
	// List of private IPs to assign to the ENI without regard to order.
	PrivateIps []string `pulumi:"privateIps"`
	// Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + `privateIpsCount`, as a primary private IP will be assiged to an ENI by default.
	PrivateIpsCount *int `pulumi:"privateIpsCount"`
	// List of security group IDs to assign to the ENI.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Whether to enable source destination checking for the ENI. Default true.
	SourceDestCheck *bool `pulumi:"sourceDestCheck"`
	// Subnet ID to create the ENI in.
	//
	// The following arguments are optional:
	SubnetId string `pulumi:"subnetId"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a NetworkInterface resource.
type NetworkInterfaceArgs struct {
	// Configuration block to define the attachment of the ENI. See Attachment below for more details!
	Attachments pulumix.Input[[]*NetworkInterfaceAttachmentTypeArgs]
	// Description for the network interface.
	Description pulumix.Input[*string]
	// Type of network interface to create. Set to `efa` for Elastic Fabric Adapter. Changing `interfaceType` will cause the resource to be destroyed and re-created.
	InterfaceType pulumix.Input[*string]
	// Number of IPv4 prefixes that AWS automatically assigns to the network interface.
	Ipv4PrefixCount pulumix.Input[*int]
	// One or more IPv4 prefixes assigned to the network interface.
	Ipv4Prefixes pulumix.Input[[]string]
	// Number of IPv6 addresses to assign to a network interface. You can't use this option if specifying specific `ipv6Addresses`. If your subnet has the AssignIpv6AddressOnCreation attribute set to `true`, you can specify `0` to override this setting.
	Ipv6AddressCount pulumix.Input[*int]
	// Whether `ipv6AddressList` is allowed and controls the IPs to assign to the ENI and `ipv6Addresses` and `ipv6AddressCount` become read-only. Default false.
	Ipv6AddressListEnabled pulumix.Input[*bool]
	// List of private IPs to assign to the ENI in sequential order.
	Ipv6AddressLists pulumix.Input[[]string]
	// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Addresses are assigned without regard to order. You can't use this option if you're specifying `ipv6AddressCount`.
	Ipv6Addresses pulumix.Input[[]string]
	// Number of IPv6 prefixes that AWS automatically assigns to the network interface.
	Ipv6PrefixCount pulumix.Input[*int]
	// One or more IPv6 prefixes assigned to the network interface.
	Ipv6Prefixes pulumix.Input[[]string]
	PrivateIp    pulumix.Input[*string]
	// Whether `privateIpList` is allowed and controls the IPs to assign to the ENI and `privateIps` and `privateIpsCount` become read-only. Default false.
	PrivateIpListEnabled pulumix.Input[*bool]
	// List of private IPs to assign to the ENI in sequential order. Requires setting `privateIpListEnabled` to `true`.
	PrivateIpLists pulumix.Input[[]string]
	// List of private IPs to assign to the ENI without regard to order.
	PrivateIps pulumix.Input[[]string]
	// Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + `privateIpsCount`, as a primary private IP will be assiged to an ENI by default.
	PrivateIpsCount pulumix.Input[*int]
	// List of security group IDs to assign to the ENI.
	SecurityGroups pulumix.Input[[]string]
	// Whether to enable source destination checking for the ENI. Default true.
	SourceDestCheck pulumix.Input[*bool]
	// Subnet ID to create the ENI in.
	//
	// The following arguments are optional:
	SubnetId pulumix.Input[string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (NetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceArgs)(nil)).Elem()
}

type NetworkInterfaceOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkInterface] {
	return pulumix.Output[NetworkInterface]{
		OutputState: o.OutputState,
	}
}

// ARN of the network interface.
func (o NetworkInterfaceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block to define the attachment of the ENI. See Attachment below for more details!
func (o NetworkInterfaceOutput) Attachments() pulumix.GArrayOutput[NetworkInterfaceAttachmentType, NetworkInterfaceAttachmentTypeOutput] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.GArrayOutput[NetworkInterfaceAttachmentType, NetworkInterfaceAttachmentTypeOutput] {
		return v.Attachments
	})
	unwrapped := pulumix.Flatten[[]NetworkInterfaceAttachmentType, pulumix.GArrayOutput[NetworkInterfaceAttachmentType, NetworkInterfaceAttachmentTypeOutput]](value)
	return pulumix.GArrayOutput[NetworkInterfaceAttachmentType, NetworkInterfaceAttachmentTypeOutput]{OutputState: unwrapped.OutputState}
}

// Description for the network interface.
func (o NetworkInterfaceOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Type of network interface to create. Set to `efa` for Elastic Fabric Adapter. Changing `interfaceType` will cause the resource to be destroyed and re-created.
func (o NetworkInterfaceOutput) InterfaceType() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[string] { return v.InterfaceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Number of IPv4 prefixes that AWS automatically assigns to the network interface.
func (o NetworkInterfaceOutput) Ipv4PrefixCount() pulumix.Output[int] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[int] { return v.Ipv4PrefixCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// One or more IPv4 prefixes assigned to the network interface.
func (o NetworkInterfaceOutput) Ipv4Prefixes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.ArrayOutput[string] { return v.Ipv4Prefixes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Number of IPv6 addresses to assign to a network interface. You can't use this option if specifying specific `ipv6Addresses`. If your subnet has the AssignIpv6AddressOnCreation attribute set to `true`, you can specify `0` to override this setting.
func (o NetworkInterfaceOutput) Ipv6AddressCount() pulumix.Output[int] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[int] { return v.Ipv6AddressCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Whether `ipv6AddressList` is allowed and controls the IPs to assign to the ENI and `ipv6Addresses` and `ipv6AddressCount` become read-only. Default false.
func (o NetworkInterfaceOutput) Ipv6AddressListEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[*bool] { return v.Ipv6AddressListEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// List of private IPs to assign to the ENI in sequential order.
func (o NetworkInterfaceOutput) Ipv6AddressLists() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.ArrayOutput[string] { return v.Ipv6AddressLists })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Addresses are assigned without regard to order. You can't use this option if you're specifying `ipv6AddressCount`.
func (o NetworkInterfaceOutput) Ipv6Addresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.ArrayOutput[string] { return v.Ipv6Addresses })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Number of IPv6 prefixes that AWS automatically assigns to the network interface.
func (o NetworkInterfaceOutput) Ipv6PrefixCount() pulumix.Output[int] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[int] { return v.Ipv6PrefixCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// One or more IPv6 prefixes assigned to the network interface.
func (o NetworkInterfaceOutput) Ipv6Prefixes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.ArrayOutput[string] { return v.Ipv6Prefixes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// MAC address of the network interface.
func (o NetworkInterfaceOutput) MacAddress() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[string] { return v.MacAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o NetworkInterfaceOutput) OutpostArn() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[string] { return v.OutpostArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS account ID of the owner of the network interface.
func (o NetworkInterfaceOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Private DNS name of the network interface (IPv4).
func (o NetworkInterfaceOutput) PrivateDnsName() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[string] { return v.PrivateDnsName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o NetworkInterfaceOutput) PrivateIp() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[string] { return v.PrivateIp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether `privateIpList` is allowed and controls the IPs to assign to the ENI and `privateIps` and `privateIpsCount` become read-only. Default false.
func (o NetworkInterfaceOutput) PrivateIpListEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[*bool] { return v.PrivateIpListEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// List of private IPs to assign to the ENI in sequential order. Requires setting `privateIpListEnabled` to `true`.
func (o NetworkInterfaceOutput) PrivateIpLists() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.ArrayOutput[string] { return v.PrivateIpLists })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// List of private IPs to assign to the ENI without regard to order.
func (o NetworkInterfaceOutput) PrivateIps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.ArrayOutput[string] { return v.PrivateIps })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + `privateIpsCount`, as a primary private IP will be assiged to an ENI by default.
func (o NetworkInterfaceOutput) PrivateIpsCount() pulumix.Output[int] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[int] { return v.PrivateIpsCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// List of security group IDs to assign to the ENI.
func (o NetworkInterfaceOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.ArrayOutput[string] { return v.SecurityGroups })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Whether to enable source destination checking for the ENI. Default true.
func (o NetworkInterfaceOutput) SourceDestCheck() pulumix.Output[*bool] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[*bool] { return v.SourceDestCheck })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Subnet ID to create the ENI in.
//
// The following arguments are optional:
func (o NetworkInterfaceOutput) SubnetId() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.Output[string] { return v.SubnetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o NetworkInterfaceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o NetworkInterfaceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[NetworkInterface](o, func(v NetworkInterface) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(NetworkInterfaceOutput{})
}
