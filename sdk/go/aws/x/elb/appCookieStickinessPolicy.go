// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an application cookie stickiness policy, which allows an ELB to wed its sticky cookie's expiration to a cookie generated by your application.
type AppCookieStickinessPolicy struct {
	pulumi.CustomResourceState

	// Application cookie whose lifetime the ELB's cookie should follow.
	CookieName pulumix.Output[string] `pulumi:"cookieName"`
	// Load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort pulumix.Output[int] `pulumi:"lbPort"`
	// Name of load balancer to which the policy
	// should be attached.
	LoadBalancer pulumix.Output[string] `pulumi:"loadBalancer"`
	// Name of the stickiness policy.
	Name pulumix.Output[string] `pulumi:"name"`
}

// NewAppCookieStickinessPolicy registers a new resource with the given unique name, arguments, and options.
func NewAppCookieStickinessPolicy(ctx *pulumi.Context,
	name string, args *AppCookieStickinessPolicyArgs, opts ...pulumi.ResourceOption) (*AppCookieStickinessPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CookieName == nil {
		return nil, errors.New("invalid value for required argument 'CookieName'")
	}
	if args.LbPort == nil {
		return nil, errors.New("invalid value for required argument 'LbPort'")
	}
	if args.LoadBalancer == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancer'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:elasticloadbalancing/appCookieStickinessPolicy:AppCookieStickinessPolicy"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppCookieStickinessPolicy
	err := ctx.RegisterResource("aws:elb/appCookieStickinessPolicy:AppCookieStickinessPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppCookieStickinessPolicy gets an existing AppCookieStickinessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppCookieStickinessPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppCookieStickinessPolicyState, opts ...pulumi.ResourceOption) (*AppCookieStickinessPolicy, error) {
	var resource AppCookieStickinessPolicy
	err := ctx.ReadResource("aws:elb/appCookieStickinessPolicy:AppCookieStickinessPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppCookieStickinessPolicy resources.
type appCookieStickinessPolicyState struct {
	// Application cookie whose lifetime the ELB's cookie should follow.
	CookieName *string `pulumi:"cookieName"`
	// Load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort *int `pulumi:"lbPort"`
	// Name of load balancer to which the policy
	// should be attached.
	LoadBalancer *string `pulumi:"loadBalancer"`
	// Name of the stickiness policy.
	Name *string `pulumi:"name"`
}

type AppCookieStickinessPolicyState struct {
	// Application cookie whose lifetime the ELB's cookie should follow.
	CookieName pulumix.Input[*string]
	// Load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort pulumix.Input[*int]
	// Name of load balancer to which the policy
	// should be attached.
	LoadBalancer pulumix.Input[*string]
	// Name of the stickiness policy.
	Name pulumix.Input[*string]
}

func (AppCookieStickinessPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*appCookieStickinessPolicyState)(nil)).Elem()
}

type appCookieStickinessPolicyArgs struct {
	// Application cookie whose lifetime the ELB's cookie should follow.
	CookieName string `pulumi:"cookieName"`
	// Load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort int `pulumi:"lbPort"`
	// Name of load balancer to which the policy
	// should be attached.
	LoadBalancer string `pulumi:"loadBalancer"`
	// Name of the stickiness policy.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppCookieStickinessPolicy resource.
type AppCookieStickinessPolicyArgs struct {
	// Application cookie whose lifetime the ELB's cookie should follow.
	CookieName pulumix.Input[string]
	// Load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort pulumix.Input[int]
	// Name of load balancer to which the policy
	// should be attached.
	LoadBalancer pulumix.Input[string]
	// Name of the stickiness policy.
	Name pulumix.Input[*string]
}

func (AppCookieStickinessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appCookieStickinessPolicyArgs)(nil)).Elem()
}

type AppCookieStickinessPolicyOutput struct{ *pulumi.OutputState }

func (AppCookieStickinessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppCookieStickinessPolicy)(nil)).Elem()
}

func (o AppCookieStickinessPolicyOutput) ToAppCookieStickinessPolicyOutput() AppCookieStickinessPolicyOutput {
	return o
}

func (o AppCookieStickinessPolicyOutput) ToAppCookieStickinessPolicyOutputWithContext(ctx context.Context) AppCookieStickinessPolicyOutput {
	return o
}

func (o AppCookieStickinessPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[AppCookieStickinessPolicy] {
	return pulumix.Output[AppCookieStickinessPolicy]{
		OutputState: o.OutputState,
	}
}

// Application cookie whose lifetime the ELB's cookie should follow.
func (o AppCookieStickinessPolicyOutput) CookieName() pulumix.Output[string] {
	value := pulumix.Apply[AppCookieStickinessPolicy](o, func(v AppCookieStickinessPolicy) pulumix.Output[string] { return v.CookieName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Load balancer port to which the policy
// should be applied. This must be an active listener on the load
// balancer.
func (o AppCookieStickinessPolicyOutput) LbPort() pulumix.Output[int] {
	value := pulumix.Apply[AppCookieStickinessPolicy](o, func(v AppCookieStickinessPolicy) pulumix.Output[int] { return v.LbPort })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Name of load balancer to which the policy
// should be attached.
func (o AppCookieStickinessPolicyOutput) LoadBalancer() pulumix.Output[string] {
	value := pulumix.Apply[AppCookieStickinessPolicy](o, func(v AppCookieStickinessPolicy) pulumix.Output[string] { return v.LoadBalancer })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the stickiness policy.
func (o AppCookieStickinessPolicyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[AppCookieStickinessPolicy](o, func(v AppCookieStickinessPolicy) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(AppCookieStickinessPolicyOutput{})
}
