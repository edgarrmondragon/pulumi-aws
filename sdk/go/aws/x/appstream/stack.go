// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appstream

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AppStream stack.
type Stack struct {
	pulumi.CustomResourceState

	// Set of configuration blocks defining the interface VPC endpoints. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
	// See `accessEndpoints` below.
	AccessEndpoints pulumix.GArrayOutput[StackAccessEndpoint, StackAccessEndpointOutput] `pulumi:"accessEndpoints"`
	// Settings for application settings persistence.
	// See `applicationSettings` below.
	ApplicationSettings pulumix.GPtrOutput[StackApplicationSettings, StackApplicationSettingsOutput] `pulumi:"applicationSettings"`
	// ARN of the appstream stack.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Date and time, in UTC and extended RFC 3339 format, when the stack was created.
	CreatedTime pulumix.Output[string] `pulumi:"createdTime"`
	// Description for the AppStream stack.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Stack name to display.
	DisplayName pulumix.Output[*string] `pulumi:"displayName"`
	// Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
	EmbedHostDomains pulumix.ArrayOutput[string] `pulumi:"embedHostDomains"`
	// URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
	FeedbackUrl pulumix.Output[string] `pulumi:"feedbackUrl"`
	// Unique name for the AppStream stack.
	//
	// The following arguments are optional:
	Name pulumix.Output[string] `pulumi:"name"`
	// URL that users are redirected to after their streaming session ends.
	RedirectUrl pulumix.Output[string] `pulumi:"redirectUrl"`
	// Configuration block for the storage connectors to enable.
	// See `storageConnectors` below.
	StorageConnectors pulumix.GArrayOutput[StackStorageConnector, StackStorageConnectorOutput] `pulumi:"storageConnectors"`
	// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
	// See `streamingExperienceSettings` below.
	StreamingExperienceSettings pulumix.GPtrOutput[StackStreamingExperienceSettings, StackStreamingExperienceSettingsOutput] `pulumi:"streamingExperienceSettings"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Configuration block for the actions that are enabled or disabled for users during their streaming sessions. If not provided, these settings are configured automatically by AWS. If provided, the configuration should include a block for each configurable action.
	// See `userSettings` below.
	UserSettings pulumix.GArrayOutput[StackUserSetting, StackUserSettingOutput] `pulumi:"userSettings"`
}

// NewStack registers a new resource with the given unique name, arguments, and options.
func NewStack(ctx *pulumi.Context,
	name string, args *StackArgs, opts ...pulumi.ResourceOption) (*Stack, error) {
	if args == nil {
		args = &StackArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Stack
	err := ctx.RegisterResource("aws:appstream/stack:Stack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStack gets an existing Stack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackState, opts ...pulumi.ResourceOption) (*Stack, error) {
	var resource Stack
	err := ctx.ReadResource("aws:appstream/stack:Stack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stack resources.
type stackState struct {
	// Set of configuration blocks defining the interface VPC endpoints. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
	// See `accessEndpoints` below.
	AccessEndpoints []StackAccessEndpoint `pulumi:"accessEndpoints"`
	// Settings for application settings persistence.
	// See `applicationSettings` below.
	ApplicationSettings *StackApplicationSettings `pulumi:"applicationSettings"`
	// ARN of the appstream stack.
	Arn *string `pulumi:"arn"`
	// Date and time, in UTC and extended RFC 3339 format, when the stack was created.
	CreatedTime *string `pulumi:"createdTime"`
	// Description for the AppStream stack.
	Description *string `pulumi:"description"`
	// Stack name to display.
	DisplayName *string `pulumi:"displayName"`
	// Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
	EmbedHostDomains []string `pulumi:"embedHostDomains"`
	// URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
	FeedbackUrl *string `pulumi:"feedbackUrl"`
	// Unique name for the AppStream stack.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// URL that users are redirected to after their streaming session ends.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Configuration block for the storage connectors to enable.
	// See `storageConnectors` below.
	StorageConnectors []StackStorageConnector `pulumi:"storageConnectors"`
	// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
	// See `streamingExperienceSettings` below.
	StreamingExperienceSettings *StackStreamingExperienceSettings `pulumi:"streamingExperienceSettings"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Configuration block for the actions that are enabled or disabled for users during their streaming sessions. If not provided, these settings are configured automatically by AWS. If provided, the configuration should include a block for each configurable action.
	// See `userSettings` below.
	UserSettings []StackUserSetting `pulumi:"userSettings"`
}

type StackState struct {
	// Set of configuration blocks defining the interface VPC endpoints. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
	// See `accessEndpoints` below.
	AccessEndpoints pulumix.Input[[]*StackAccessEndpointArgs]
	// Settings for application settings persistence.
	// See `applicationSettings` below.
	ApplicationSettings pulumix.Input[*StackApplicationSettingsArgs]
	// ARN of the appstream stack.
	Arn pulumix.Input[*string]
	// Date and time, in UTC and extended RFC 3339 format, when the stack was created.
	CreatedTime pulumix.Input[*string]
	// Description for the AppStream stack.
	Description pulumix.Input[*string]
	// Stack name to display.
	DisplayName pulumix.Input[*string]
	// Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
	EmbedHostDomains pulumix.Input[[]string]
	// URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
	FeedbackUrl pulumix.Input[*string]
	// Unique name for the AppStream stack.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// URL that users are redirected to after their streaming session ends.
	RedirectUrl pulumix.Input[*string]
	// Configuration block for the storage connectors to enable.
	// See `storageConnectors` below.
	StorageConnectors pulumix.Input[[]*StackStorageConnectorArgs]
	// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
	// See `streamingExperienceSettings` below.
	StreamingExperienceSettings pulumix.Input[*StackStreamingExperienceSettingsArgs]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// Configuration block for the actions that are enabled or disabled for users during their streaming sessions. If not provided, these settings are configured automatically by AWS. If provided, the configuration should include a block for each configurable action.
	// See `userSettings` below.
	UserSettings pulumix.Input[[]*StackUserSettingArgs]
}

func (StackState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackState)(nil)).Elem()
}

type stackArgs struct {
	// Set of configuration blocks defining the interface VPC endpoints. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
	// See `accessEndpoints` below.
	AccessEndpoints []StackAccessEndpoint `pulumi:"accessEndpoints"`
	// Settings for application settings persistence.
	// See `applicationSettings` below.
	ApplicationSettings *StackApplicationSettings `pulumi:"applicationSettings"`
	// Description for the AppStream stack.
	Description *string `pulumi:"description"`
	// Stack name to display.
	DisplayName *string `pulumi:"displayName"`
	// Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
	EmbedHostDomains []string `pulumi:"embedHostDomains"`
	// URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
	FeedbackUrl *string `pulumi:"feedbackUrl"`
	// Unique name for the AppStream stack.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// URL that users are redirected to after their streaming session ends.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Configuration block for the storage connectors to enable.
	// See `storageConnectors` below.
	StorageConnectors []StackStorageConnector `pulumi:"storageConnectors"`
	// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
	// See `streamingExperienceSettings` below.
	StreamingExperienceSettings *StackStreamingExperienceSettings `pulumi:"streamingExperienceSettings"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Configuration block for the actions that are enabled or disabled for users during their streaming sessions. If not provided, these settings are configured automatically by AWS. If provided, the configuration should include a block for each configurable action.
	// See `userSettings` below.
	UserSettings []StackUserSetting `pulumi:"userSettings"`
}

// The set of arguments for constructing a Stack resource.
type StackArgs struct {
	// Set of configuration blocks defining the interface VPC endpoints. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
	// See `accessEndpoints` below.
	AccessEndpoints pulumix.Input[[]*StackAccessEndpointArgs]
	// Settings for application settings persistence.
	// See `applicationSettings` below.
	ApplicationSettings pulumix.Input[*StackApplicationSettingsArgs]
	// Description for the AppStream stack.
	Description pulumix.Input[*string]
	// Stack name to display.
	DisplayName pulumix.Input[*string]
	// Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
	EmbedHostDomains pulumix.Input[[]string]
	// URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
	FeedbackUrl pulumix.Input[*string]
	// Unique name for the AppStream stack.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// URL that users are redirected to after their streaming session ends.
	RedirectUrl pulumix.Input[*string]
	// Configuration block for the storage connectors to enable.
	// See `storageConnectors` below.
	StorageConnectors pulumix.Input[[]*StackStorageConnectorArgs]
	// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
	// See `streamingExperienceSettings` below.
	StreamingExperienceSettings pulumix.Input[*StackStreamingExperienceSettingsArgs]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Configuration block for the actions that are enabled or disabled for users during their streaming sessions. If not provided, these settings are configured automatically by AWS. If provided, the configuration should include a block for each configurable action.
	// See `userSettings` below.
	UserSettings pulumix.Input[[]*StackUserSettingArgs]
}

func (StackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackArgs)(nil)).Elem()
}

type StackOutput struct{ *pulumi.OutputState }

func (StackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Stack)(nil)).Elem()
}

func (o StackOutput) ToStackOutput() StackOutput {
	return o
}

func (o StackOutput) ToStackOutputWithContext(ctx context.Context) StackOutput {
	return o
}

func (o StackOutput) ToOutput(ctx context.Context) pulumix.Output[Stack] {
	return pulumix.Output[Stack]{
		OutputState: o.OutputState,
	}
}

// Set of configuration blocks defining the interface VPC endpoints. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
// See `accessEndpoints` below.
func (o StackOutput) AccessEndpoints() pulumix.GArrayOutput[StackAccessEndpoint, StackAccessEndpointOutput] {
	value := pulumix.Apply[Stack](o, func(v Stack) pulumix.GArrayOutput[StackAccessEndpoint, StackAccessEndpointOutput] {
		return v.AccessEndpoints
	})
	unwrapped := pulumix.Flatten[[]StackAccessEndpoint, pulumix.GArrayOutput[StackAccessEndpoint, StackAccessEndpointOutput]](value)
	return pulumix.GArrayOutput[StackAccessEndpoint, StackAccessEndpointOutput]{OutputState: unwrapped.OutputState}
}

// Settings for application settings persistence.
// See `applicationSettings` below.
func (o StackOutput) ApplicationSettings() pulumix.GPtrOutput[StackApplicationSettings, StackApplicationSettingsOutput] {
	value := pulumix.Apply[Stack](o, func(v Stack) pulumix.GPtrOutput[StackApplicationSettings, StackApplicationSettingsOutput] {
		return v.ApplicationSettings
	})
	unwrapped := pulumix.Flatten[*StackApplicationSettings, pulumix.GPtrOutput[StackApplicationSettings, StackApplicationSettingsOutput]](value)
	return pulumix.GPtrOutput[StackApplicationSettings, StackApplicationSettingsOutput]{OutputState: unwrapped.OutputState}
}

// ARN of the appstream stack.
func (o StackOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Stack](o, func(v Stack) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date and time, in UTC and extended RFC 3339 format, when the stack was created.
func (o StackOutput) CreatedTime() pulumix.Output[string] {
	value := pulumix.Apply[Stack](o, func(v Stack) pulumix.Output[string] { return v.CreatedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description for the AppStream stack.
func (o StackOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Stack](o, func(v Stack) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Stack name to display.
func (o StackOutput) DisplayName() pulumix.Output[*string] {
	value := pulumix.Apply[Stack](o, func(v Stack) pulumix.Output[*string] { return v.DisplayName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
func (o StackOutput) EmbedHostDomains() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Stack](o, func(v Stack) pulumix.ArrayOutput[string] { return v.EmbedHostDomains })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
func (o StackOutput) FeedbackUrl() pulumix.Output[string] {
	value := pulumix.Apply[Stack](o, func(v Stack) pulumix.Output[string] { return v.FeedbackUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique name for the AppStream stack.
//
// The following arguments are optional:
func (o StackOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Stack](o, func(v Stack) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// URL that users are redirected to after their streaming session ends.
func (o StackOutput) RedirectUrl() pulumix.Output[string] {
	value := pulumix.Apply[Stack](o, func(v Stack) pulumix.Output[string] { return v.RedirectUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for the storage connectors to enable.
// See `storageConnectors` below.
func (o StackOutput) StorageConnectors() pulumix.GArrayOutput[StackStorageConnector, StackStorageConnectorOutput] {
	value := pulumix.Apply[Stack](o, func(v Stack) pulumix.GArrayOutput[StackStorageConnector, StackStorageConnectorOutput] {
		return v.StorageConnectors
	})
	unwrapped := pulumix.Flatten[[]StackStorageConnector, pulumix.GArrayOutput[StackStorageConnector, StackStorageConnectorOutput]](value)
	return pulumix.GArrayOutput[StackStorageConnector, StackStorageConnectorOutput]{OutputState: unwrapped.OutputState}
}

// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
// See `streamingExperienceSettings` below.
func (o StackOutput) StreamingExperienceSettings() pulumix.GPtrOutput[StackStreamingExperienceSettings, StackStreamingExperienceSettingsOutput] {
	value := pulumix.Apply[Stack](o, func(v Stack) pulumix.GPtrOutput[StackStreamingExperienceSettings, StackStreamingExperienceSettingsOutput] {
		return v.StreamingExperienceSettings
	})
	unwrapped := pulumix.Flatten[*StackStreamingExperienceSettings, pulumix.GPtrOutput[StackStreamingExperienceSettings, StackStreamingExperienceSettingsOutput]](value)
	return pulumix.GPtrOutput[StackStreamingExperienceSettings, StackStreamingExperienceSettingsOutput]{OutputState: unwrapped.OutputState}
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o StackOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Stack](o, func(v Stack) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o StackOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Stack](o, func(v Stack) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Configuration block for the actions that are enabled or disabled for users during their streaming sessions. If not provided, these settings are configured automatically by AWS. If provided, the configuration should include a block for each configurable action.
// See `userSettings` below.
func (o StackOutput) UserSettings() pulumix.GArrayOutput[StackUserSetting, StackUserSettingOutput] {
	value := pulumix.Apply[Stack](o, func(v Stack) pulumix.GArrayOutput[StackUserSetting, StackUserSettingOutput] { return v.UserSettings })
	unwrapped := pulumix.Flatten[[]StackUserSetting, pulumix.GArrayOutput[StackUserSetting, StackUserSettingOutput]](value)
	return pulumix.GArrayOutput[StackUserSetting, StackUserSettingOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(StackOutput{})
}
