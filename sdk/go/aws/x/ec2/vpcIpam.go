// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an IPAM resource.
type VpcIpam struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of IPAM
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Enables you to quickly delete an IPAM, private scopes, pools in private scopes, and any allocations in the pools in private scopes.
	Cascade pulumix.Output[*bool] `pulumi:"cascade"`
	// The IPAM's default resource discovery association ID.
	DefaultResourceDiscoveryAssociationId pulumix.Output[string] `pulumi:"defaultResourceDiscoveryAssociationId"`
	// The IPAM's default resource discovery ID.
	DefaultResourceDiscoveryId pulumix.Output[string] `pulumi:"defaultResourceDiscoveryId"`
	// A description for the IPAM.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Determines which locales can be chosen when you create pools. Locale is the Region where you want to make an IPAM pool available for allocations. You can only create pools with locales that match the operating Regions of the IPAM. You can only create VPCs from a pool whose locale matches the VPC's Region. You specify a region using the regionName parameter. You **must** set your provider block region as an operating_region.
	OperatingRegions pulumix.GArrayOutput[VpcIpamOperatingRegion, VpcIpamOperatingRegionOutput] `pulumi:"operatingRegions"`
	// The ID of the IPAM's private scope. A scope is a top-level container in IPAM. Each scope represents an IP-independent network. Scopes enable you to represent networks where you have overlapping IP space. When you create an IPAM, IPAM automatically creates two scopes: public and private. The private scope is intended for private IP space. The public scope is intended for all internet-routable IP space.
	PrivateDefaultScopeId pulumix.Output[string] `pulumi:"privateDefaultScopeId"`
	// The ID of the IPAM's public scope. A scope is a top-level container in IPAM. Each scope represents an IP-independent network. Scopes enable you to represent networks where you have overlapping IP space. When you create an IPAM, IPAM automatically creates two scopes: public and private. The private scope is intended for private
	// IP space. The public scope is intended for all internet-routable IP space.
	PublicDefaultScopeId pulumix.Output[string] `pulumi:"publicDefaultScopeId"`
	// The number of scopes in the IPAM.
	ScopeCount pulumix.Output[int] `pulumi:"scopeCount"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewVpcIpam registers a new resource with the given unique name, arguments, and options.
func NewVpcIpam(ctx *pulumi.Context,
	name string, args *VpcIpamArgs, opts ...pulumi.ResourceOption) (*VpcIpam, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OperatingRegions == nil {
		return nil, errors.New("invalid value for required argument 'OperatingRegions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcIpam
	err := ctx.RegisterResource("aws:ec2/vpcIpam:VpcIpam", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcIpam gets an existing VpcIpam resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcIpam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcIpamState, opts ...pulumi.ResourceOption) (*VpcIpam, error) {
	var resource VpcIpam
	err := ctx.ReadResource("aws:ec2/vpcIpam:VpcIpam", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcIpam resources.
type vpcIpamState struct {
	// Amazon Resource Name (ARN) of IPAM
	Arn *string `pulumi:"arn"`
	// Enables you to quickly delete an IPAM, private scopes, pools in private scopes, and any allocations in the pools in private scopes.
	Cascade *bool `pulumi:"cascade"`
	// The IPAM's default resource discovery association ID.
	DefaultResourceDiscoveryAssociationId *string `pulumi:"defaultResourceDiscoveryAssociationId"`
	// The IPAM's default resource discovery ID.
	DefaultResourceDiscoveryId *string `pulumi:"defaultResourceDiscoveryId"`
	// A description for the IPAM.
	Description *string `pulumi:"description"`
	// Determines which locales can be chosen when you create pools. Locale is the Region where you want to make an IPAM pool available for allocations. You can only create pools with locales that match the operating Regions of the IPAM. You can only create VPCs from a pool whose locale matches the VPC's Region. You specify a region using the regionName parameter. You **must** set your provider block region as an operating_region.
	OperatingRegions []VpcIpamOperatingRegion `pulumi:"operatingRegions"`
	// The ID of the IPAM's private scope. A scope is a top-level container in IPAM. Each scope represents an IP-independent network. Scopes enable you to represent networks where you have overlapping IP space. When you create an IPAM, IPAM automatically creates two scopes: public and private. The private scope is intended for private IP space. The public scope is intended for all internet-routable IP space.
	PrivateDefaultScopeId *string `pulumi:"privateDefaultScopeId"`
	// The ID of the IPAM's public scope. A scope is a top-level container in IPAM. Each scope represents an IP-independent network. Scopes enable you to represent networks where you have overlapping IP space. When you create an IPAM, IPAM automatically creates two scopes: public and private. The private scope is intended for private
	// IP space. The public scope is intended for all internet-routable IP space.
	PublicDefaultScopeId *string `pulumi:"publicDefaultScopeId"`
	// The number of scopes in the IPAM.
	ScopeCount *int `pulumi:"scopeCount"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type VpcIpamState struct {
	// Amazon Resource Name (ARN) of IPAM
	Arn pulumix.Input[*string]
	// Enables you to quickly delete an IPAM, private scopes, pools in private scopes, and any allocations in the pools in private scopes.
	Cascade pulumix.Input[*bool]
	// The IPAM's default resource discovery association ID.
	DefaultResourceDiscoveryAssociationId pulumix.Input[*string]
	// The IPAM's default resource discovery ID.
	DefaultResourceDiscoveryId pulumix.Input[*string]
	// A description for the IPAM.
	Description pulumix.Input[*string]
	// Determines which locales can be chosen when you create pools. Locale is the Region where you want to make an IPAM pool available for allocations. You can only create pools with locales that match the operating Regions of the IPAM. You can only create VPCs from a pool whose locale matches the VPC's Region. You specify a region using the regionName parameter. You **must** set your provider block region as an operating_region.
	OperatingRegions pulumix.Input[[]*VpcIpamOperatingRegionArgs]
	// The ID of the IPAM's private scope. A scope is a top-level container in IPAM. Each scope represents an IP-independent network. Scopes enable you to represent networks where you have overlapping IP space. When you create an IPAM, IPAM automatically creates two scopes: public and private. The private scope is intended for private IP space. The public scope is intended for all internet-routable IP space.
	PrivateDefaultScopeId pulumix.Input[*string]
	// The ID of the IPAM's public scope. A scope is a top-level container in IPAM. Each scope represents an IP-independent network. Scopes enable you to represent networks where you have overlapping IP space. When you create an IPAM, IPAM automatically creates two scopes: public and private. The private scope is intended for private
	// IP space. The public scope is intended for all internet-routable IP space.
	PublicDefaultScopeId pulumix.Input[*string]
	// The number of scopes in the IPAM.
	ScopeCount pulumix.Input[*int]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (VpcIpamState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpamState)(nil)).Elem()
}

type vpcIpamArgs struct {
	// Enables you to quickly delete an IPAM, private scopes, pools in private scopes, and any allocations in the pools in private scopes.
	Cascade *bool `pulumi:"cascade"`
	// A description for the IPAM.
	Description *string `pulumi:"description"`
	// Determines which locales can be chosen when you create pools. Locale is the Region where you want to make an IPAM pool available for allocations. You can only create pools with locales that match the operating Regions of the IPAM. You can only create VPCs from a pool whose locale matches the VPC's Region. You specify a region using the regionName parameter. You **must** set your provider block region as an operating_region.
	OperatingRegions []VpcIpamOperatingRegion `pulumi:"operatingRegions"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a VpcIpam resource.
type VpcIpamArgs struct {
	// Enables you to quickly delete an IPAM, private scopes, pools in private scopes, and any allocations in the pools in private scopes.
	Cascade pulumix.Input[*bool]
	// A description for the IPAM.
	Description pulumix.Input[*string]
	// Determines which locales can be chosen when you create pools. Locale is the Region where you want to make an IPAM pool available for allocations. You can only create pools with locales that match the operating Regions of the IPAM. You can only create VPCs from a pool whose locale matches the VPC's Region. You specify a region using the regionName parameter. You **must** set your provider block region as an operating_region.
	OperatingRegions pulumix.Input[[]*VpcIpamOperatingRegionArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (VpcIpamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpamArgs)(nil)).Elem()
}

type VpcIpamOutput struct{ *pulumi.OutputState }

func (VpcIpamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcIpam)(nil)).Elem()
}

func (o VpcIpamOutput) ToVpcIpamOutput() VpcIpamOutput {
	return o
}

func (o VpcIpamOutput) ToVpcIpamOutputWithContext(ctx context.Context) VpcIpamOutput {
	return o
}

func (o VpcIpamOutput) ToOutput(ctx context.Context) pulumix.Output[VpcIpam] {
	return pulumix.Output[VpcIpam]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of IPAM
func (o VpcIpamOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpam](o, func(v VpcIpam) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Enables you to quickly delete an IPAM, private scopes, pools in private scopes, and any allocations in the pools in private scopes.
func (o VpcIpamOutput) Cascade() pulumix.Output[*bool] {
	value := pulumix.Apply[VpcIpam](o, func(v VpcIpam) pulumix.Output[*bool] { return v.Cascade })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The IPAM's default resource discovery association ID.
func (o VpcIpamOutput) DefaultResourceDiscoveryAssociationId() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpam](o, func(v VpcIpam) pulumix.Output[string] { return v.DefaultResourceDiscoveryAssociationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IPAM's default resource discovery ID.
func (o VpcIpamOutput) DefaultResourceDiscoveryId() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpam](o, func(v VpcIpam) pulumix.Output[string] { return v.DefaultResourceDiscoveryId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description for the IPAM.
func (o VpcIpamOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[VpcIpam](o, func(v VpcIpam) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Determines which locales can be chosen when you create pools. Locale is the Region where you want to make an IPAM pool available for allocations. You can only create pools with locales that match the operating Regions of the IPAM. You can only create VPCs from a pool whose locale matches the VPC's Region. You specify a region using the regionName parameter. You **must** set your provider block region as an operating_region.
func (o VpcIpamOutput) OperatingRegions() pulumix.GArrayOutput[VpcIpamOperatingRegion, VpcIpamOperatingRegionOutput] {
	value := pulumix.Apply[VpcIpam](o, func(v VpcIpam) pulumix.GArrayOutput[VpcIpamOperatingRegion, VpcIpamOperatingRegionOutput] {
		return v.OperatingRegions
	})
	unwrapped := pulumix.Flatten[[]VpcIpamOperatingRegion, pulumix.GArrayOutput[VpcIpamOperatingRegion, VpcIpamOperatingRegionOutput]](value)
	return pulumix.GArrayOutput[VpcIpamOperatingRegion, VpcIpamOperatingRegionOutput]{OutputState: unwrapped.OutputState}
}

// The ID of the IPAM's private scope. A scope is a top-level container in IPAM. Each scope represents an IP-independent network. Scopes enable you to represent networks where you have overlapping IP space. When you create an IPAM, IPAM automatically creates two scopes: public and private. The private scope is intended for private IP space. The public scope is intended for all internet-routable IP space.
func (o VpcIpamOutput) PrivateDefaultScopeId() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpam](o, func(v VpcIpam) pulumix.Output[string] { return v.PrivateDefaultScopeId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the IPAM's public scope. A scope is a top-level container in IPAM. Each scope represents an IP-independent network. Scopes enable you to represent networks where you have overlapping IP space. When you create an IPAM, IPAM automatically creates two scopes: public and private. The private scope is intended for private
// IP space. The public scope is intended for all internet-routable IP space.
func (o VpcIpamOutput) PublicDefaultScopeId() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpam](o, func(v VpcIpam) pulumix.Output[string] { return v.PublicDefaultScopeId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The number of scopes in the IPAM.
func (o VpcIpamOutput) ScopeCount() pulumix.Output[int] {
	value := pulumix.Apply[VpcIpam](o, func(v VpcIpam) pulumix.Output[int] { return v.ScopeCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VpcIpamOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcIpam](o, func(v VpcIpam) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VpcIpamOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcIpam](o, func(v VpcIpam) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(VpcIpamOutput{})
}
