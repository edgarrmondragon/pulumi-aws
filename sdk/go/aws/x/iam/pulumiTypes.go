// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type RoleInlinePolicy struct {
	// Name of the role policy.
	Name *string `pulumi:"name"`
	// Policy document as a JSON formatted string.
	Policy *string `pulumi:"policy"`
}

type RoleInlinePolicyArgs struct {
	// Name of the role policy.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Policy document as a JSON formatted string.
	Policy pulumix.Input[*string] `pulumi:"policy"`
}

func (RoleInlinePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleInlinePolicy)(nil)).Elem()
}

func (i RoleInlinePolicyArgs) ToRoleInlinePolicyOutput() RoleInlinePolicyOutput {
	return i.ToRoleInlinePolicyOutputWithContext(context.Background())
}

func (i RoleInlinePolicyArgs) ToRoleInlinePolicyOutputWithContext(ctx context.Context) RoleInlinePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleInlinePolicyOutput)
}

func (i *RoleInlinePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*RoleInlinePolicyArgs] {
	return pulumix.Val(i)
}

type RoleInlinePolicyOutput struct{ *pulumi.OutputState }

func (RoleInlinePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleInlinePolicy)(nil)).Elem()
}

func (o RoleInlinePolicyOutput) ToRoleInlinePolicyOutput() RoleInlinePolicyOutput {
	return o
}

func (o RoleInlinePolicyOutput) ToRoleInlinePolicyOutputWithContext(ctx context.Context) RoleInlinePolicyOutput {
	return o
}

func (o RoleInlinePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RoleInlinePolicy] {
	return pulumix.Output[RoleInlinePolicy]{
		OutputState: o.OutputState,
	}
}

// Name of the role policy.
func (o RoleInlinePolicyOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[RoleInlinePolicy](o, func(v RoleInlinePolicy) *string { return v.Name })
}

// Policy document as a JSON formatted string.
func (o RoleInlinePolicyOutput) Policy() pulumix.Output[*string] {
	return pulumix.Apply[RoleInlinePolicy](o, func(v RoleInlinePolicy) *string { return v.Policy })
}

type GetAccessKeysAccessKey struct {
	// Access key ID.
	AccessKeyId string `pulumi:"accessKeyId"`
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the access key was created.
	CreateDate string `pulumi:"createDate"`
	// Access key status. Possible values are `Active` and `Inactive`.
	Status string `pulumi:"status"`
}

type GetAccessKeysAccessKeyArgs struct {
	// Access key ID.
	AccessKeyId pulumix.Input[string] `pulumi:"accessKeyId"`
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the access key was created.
	CreateDate pulumix.Input[string] `pulumi:"createDate"`
	// Access key status. Possible values are `Active` and `Inactive`.
	Status pulumix.Input[string] `pulumi:"status"`
}

func (GetAccessKeysAccessKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessKeysAccessKey)(nil)).Elem()
}

func (i GetAccessKeysAccessKeyArgs) ToGetAccessKeysAccessKeyOutput() GetAccessKeysAccessKeyOutput {
	return i.ToGetAccessKeysAccessKeyOutputWithContext(context.Background())
}

func (i GetAccessKeysAccessKeyArgs) ToGetAccessKeysAccessKeyOutputWithContext(ctx context.Context) GetAccessKeysAccessKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccessKeysAccessKeyOutput)
}

func (i *GetAccessKeysAccessKeyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetAccessKeysAccessKeyArgs] {
	return pulumix.Val(i)
}

type GetAccessKeysAccessKeyOutput struct{ *pulumi.OutputState }

func (GetAccessKeysAccessKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessKeysAccessKey)(nil)).Elem()
}

func (o GetAccessKeysAccessKeyOutput) ToGetAccessKeysAccessKeyOutput() GetAccessKeysAccessKeyOutput {
	return o
}

func (o GetAccessKeysAccessKeyOutput) ToGetAccessKeysAccessKeyOutputWithContext(ctx context.Context) GetAccessKeysAccessKeyOutput {
	return o
}

func (o GetAccessKeysAccessKeyOutput) ToOutput(ctx context.Context) pulumix.Output[GetAccessKeysAccessKey] {
	return pulumix.Output[GetAccessKeysAccessKey]{
		OutputState: o.OutputState,
	}
}

// Access key ID.
func (o GetAccessKeysAccessKeyOutput) AccessKeyId() pulumix.Output[string] {
	return pulumix.Apply[GetAccessKeysAccessKey](o, func(v GetAccessKeysAccessKey) string { return v.AccessKeyId })
}

// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the access key was created.
func (o GetAccessKeysAccessKeyOutput) CreateDate() pulumix.Output[string] {
	return pulumix.Apply[GetAccessKeysAccessKey](o, func(v GetAccessKeysAccessKey) string { return v.CreateDate })
}

// Access key status. Possible values are `Active` and `Inactive`.
func (o GetAccessKeysAccessKeyOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[GetAccessKeysAccessKey](o, func(v GetAccessKeysAccessKey) string { return v.Status })
}

type GetGroupUser struct {
	// User ARN.
	Arn string `pulumi:"arn"`
	// Path to the IAM user.
	Path string `pulumi:"path"`
	// Stable and unique string identifying the IAM user.
	UserId string `pulumi:"userId"`
	// Name of the IAM user.
	UserName string `pulumi:"userName"`
}

type GetGroupUserArgs struct {
	// User ARN.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Path to the IAM user.
	Path pulumix.Input[string] `pulumi:"path"`
	// Stable and unique string identifying the IAM user.
	UserId pulumix.Input[string] `pulumi:"userId"`
	// Name of the IAM user.
	UserName pulumix.Input[string] `pulumi:"userName"`
}

func (GetGroupUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupUser)(nil)).Elem()
}

func (i GetGroupUserArgs) ToGetGroupUserOutput() GetGroupUserOutput {
	return i.ToGetGroupUserOutputWithContext(context.Background())
}

func (i GetGroupUserArgs) ToGetGroupUserOutputWithContext(ctx context.Context) GetGroupUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupUserOutput)
}

func (i *GetGroupUserArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGroupUserArgs] {
	return pulumix.Val(i)
}

type GetGroupUserOutput struct{ *pulumi.OutputState }

func (GetGroupUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupUser)(nil)).Elem()
}

func (o GetGroupUserOutput) ToGetGroupUserOutput() GetGroupUserOutput {
	return o
}

func (o GetGroupUserOutput) ToGetGroupUserOutputWithContext(ctx context.Context) GetGroupUserOutput {
	return o
}

func (o GetGroupUserOutput) ToOutput(ctx context.Context) pulumix.Output[GetGroupUser] {
	return pulumix.Output[GetGroupUser]{
		OutputState: o.OutputState,
	}
}

// User ARN.
func (o GetGroupUserOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetGroupUser](o, func(v GetGroupUser) string { return v.Arn })
}

// Path to the IAM user.
func (o GetGroupUserOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[GetGroupUser](o, func(v GetGroupUser) string { return v.Path })
}

// Stable and unique string identifying the IAM user.
func (o GetGroupUserOutput) UserId() pulumix.Output[string] {
	return pulumix.Apply[GetGroupUser](o, func(v GetGroupUser) string { return v.UserId })
}

// Name of the IAM user.
func (o GetGroupUserOutput) UserName() pulumix.Output[string] {
	return pulumix.Apply[GetGroupUser](o, func(v GetGroupUser) string { return v.UserName })
}

type GetPolicyDocumentStatement struct {
	// List of actions that this statement either allows or denies. For example, `["ec2:RunInstances", "s3:*"]`.
	Actions []string `pulumi:"actions"`
	// Configuration block for a condition. Detailed below.
	Conditions []GetPolicyDocumentStatementCondition `pulumi:"conditions"`
	// Whether this statement allows or denies the given actions. Valid values are `Allow` and `Deny`. Defaults to `Allow`.
	Effect *string `pulumi:"effect"`
	// List of actions that this statement does *not* apply to. Use to apply a policy statement to all actions *except* those listed.
	NotActions []string `pulumi:"notActions"`
	// Like `principals` except these are principals that the statement does *not* apply to.
	NotPrincipals []GetPolicyDocumentStatementNotPrincipal `pulumi:"notPrincipals"`
	// List of resource ARNs that this statement does *not* apply to. Use to apply a policy statement to all resources *except* those listed. Conflicts with `resources`.
	NotResources []string `pulumi:"notResources"`
	// Configuration block for principals. Detailed below.
	Principals []GetPolicyDocumentStatementPrincipal `pulumi:"principals"`
	// List of resource ARNs that this statement applies to. This is required by AWS if used for an IAM policy. Conflicts with `notResources`.
	Resources []string `pulumi:"resources"`
	// Sid (statement ID) is an identifier for a policy statement.
	Sid *string `pulumi:"sid"`
}

type GetPolicyDocumentStatementArgs struct {
	// List of actions that this statement either allows or denies. For example, `["ec2:RunInstances", "s3:*"]`.
	Actions pulumix.Input[[]string] `pulumi:"actions"`
	// Configuration block for a condition. Detailed below.
	Conditions pulumix.Input[[]*GetPolicyDocumentStatementConditionArgs] `pulumi:"conditions"`
	// Whether this statement allows or denies the given actions. Valid values are `Allow` and `Deny`. Defaults to `Allow`.
	Effect pulumix.Input[*string] `pulumi:"effect"`
	// List of actions that this statement does *not* apply to. Use to apply a policy statement to all actions *except* those listed.
	NotActions pulumix.Input[[]string] `pulumi:"notActions"`
	// Like `principals` except these are principals that the statement does *not* apply to.
	NotPrincipals pulumix.Input[[]*GetPolicyDocumentStatementNotPrincipalArgs] `pulumi:"notPrincipals"`
	// List of resource ARNs that this statement does *not* apply to. Use to apply a policy statement to all resources *except* those listed. Conflicts with `resources`.
	NotResources pulumix.Input[[]string] `pulumi:"notResources"`
	// Configuration block for principals. Detailed below.
	Principals pulumix.Input[[]*GetPolicyDocumentStatementPrincipalArgs] `pulumi:"principals"`
	// List of resource ARNs that this statement applies to. This is required by AWS if used for an IAM policy. Conflicts with `notResources`.
	Resources pulumix.Input[[]string] `pulumi:"resources"`
	// Sid (statement ID) is an identifier for a policy statement.
	Sid pulumix.Input[*string] `pulumi:"sid"`
}

func (GetPolicyDocumentStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatement)(nil)).Elem()
}

func (i GetPolicyDocumentStatementArgs) ToGetPolicyDocumentStatementOutput() GetPolicyDocumentStatementOutput {
	return i.ToGetPolicyDocumentStatementOutputWithContext(context.Background())
}

func (i GetPolicyDocumentStatementArgs) ToGetPolicyDocumentStatementOutputWithContext(ctx context.Context) GetPolicyDocumentStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentStatementOutput)
}

func (i *GetPolicyDocumentStatementArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPolicyDocumentStatementArgs] {
	return pulumix.Val(i)
}

type GetPolicyDocumentStatementOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatement)(nil)).Elem()
}

func (o GetPolicyDocumentStatementOutput) ToGetPolicyDocumentStatementOutput() GetPolicyDocumentStatementOutput {
	return o
}

func (o GetPolicyDocumentStatementOutput) ToGetPolicyDocumentStatementOutputWithContext(ctx context.Context) GetPolicyDocumentStatementOutput {
	return o
}

func (o GetPolicyDocumentStatementOutput) ToOutput(ctx context.Context) pulumix.Output[GetPolicyDocumentStatement] {
	return pulumix.Output[GetPolicyDocumentStatement]{
		OutputState: o.OutputState,
	}
}

// List of actions that this statement either allows or denies. For example, `["ec2:RunInstances", "s3:*"]`.
func (o GetPolicyDocumentStatementOutput) Actions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPolicyDocumentStatement](o, func(v GetPolicyDocumentStatement) []string { return v.Actions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Configuration block for a condition. Detailed below.
func (o GetPolicyDocumentStatementOutput) Conditions() pulumix.GArrayOutput[GetPolicyDocumentStatementCondition, GetPolicyDocumentStatementConditionOutput] {
	value := pulumix.Apply[GetPolicyDocumentStatement](o, func(v GetPolicyDocumentStatement) []GetPolicyDocumentStatementCondition { return v.Conditions })
	return pulumix.GArrayOutput[GetPolicyDocumentStatementCondition, GetPolicyDocumentStatementConditionOutput]{OutputState: value.OutputState}
}

// Whether this statement allows or denies the given actions. Valid values are `Allow` and `Deny`. Defaults to `Allow`.
func (o GetPolicyDocumentStatementOutput) Effect() pulumix.Output[*string] {
	return pulumix.Apply[GetPolicyDocumentStatement](o, func(v GetPolicyDocumentStatement) *string { return v.Effect })
}

// List of actions that this statement does *not* apply to. Use to apply a policy statement to all actions *except* those listed.
func (o GetPolicyDocumentStatementOutput) NotActions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPolicyDocumentStatement](o, func(v GetPolicyDocumentStatement) []string { return v.NotActions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Like `principals` except these are principals that the statement does *not* apply to.
func (o GetPolicyDocumentStatementOutput) NotPrincipals() pulumix.GArrayOutput[GetPolicyDocumentStatementNotPrincipal, GetPolicyDocumentStatementNotPrincipalOutput] {
	value := pulumix.Apply[GetPolicyDocumentStatement](o, func(v GetPolicyDocumentStatement) []GetPolicyDocumentStatementNotPrincipal { return v.NotPrincipals })
	return pulumix.GArrayOutput[GetPolicyDocumentStatementNotPrincipal, GetPolicyDocumentStatementNotPrincipalOutput]{OutputState: value.OutputState}
}

// List of resource ARNs that this statement does *not* apply to. Use to apply a policy statement to all resources *except* those listed. Conflicts with `resources`.
func (o GetPolicyDocumentStatementOutput) NotResources() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPolicyDocumentStatement](o, func(v GetPolicyDocumentStatement) []string { return v.NotResources })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Configuration block for principals. Detailed below.
func (o GetPolicyDocumentStatementOutput) Principals() pulumix.GArrayOutput[GetPolicyDocumentStatementPrincipal, GetPolicyDocumentStatementPrincipalOutput] {
	value := pulumix.Apply[GetPolicyDocumentStatement](o, func(v GetPolicyDocumentStatement) []GetPolicyDocumentStatementPrincipal { return v.Principals })
	return pulumix.GArrayOutput[GetPolicyDocumentStatementPrincipal, GetPolicyDocumentStatementPrincipalOutput]{OutputState: value.OutputState}
}

// List of resource ARNs that this statement applies to. This is required by AWS if used for an IAM policy. Conflicts with `notResources`.
func (o GetPolicyDocumentStatementOutput) Resources() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPolicyDocumentStatement](o, func(v GetPolicyDocumentStatement) []string { return v.Resources })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Sid (statement ID) is an identifier for a policy statement.
func (o GetPolicyDocumentStatementOutput) Sid() pulumix.Output[*string] {
	return pulumix.Apply[GetPolicyDocumentStatement](o, func(v GetPolicyDocumentStatement) *string { return v.Sid })
}

type GetPolicyDocumentStatementCondition struct {
	// Name of the [IAM condition operator](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html) to evaluate.
	Test string `pulumi:"test"`
	// Values to evaluate the condition against. If multiple values are provided, the condition matches if at least one of them applies. That is, AWS evaluates multiple values as though using an "OR" boolean operation.
	Values []string `pulumi:"values"`
	// Name of a [Context Variable](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#AvailableKeys) to apply the condition to. Context variables may either be standard AWS variables starting with `aws:` or service-specific variables prefixed with the service name.
	Variable string `pulumi:"variable"`
}

type GetPolicyDocumentStatementConditionArgs struct {
	// Name of the [IAM condition operator](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html) to evaluate.
	Test pulumix.Input[string] `pulumi:"test"`
	// Values to evaluate the condition against. If multiple values are provided, the condition matches if at least one of them applies. That is, AWS evaluates multiple values as though using an "OR" boolean operation.
	Values pulumix.Input[[]string] `pulumi:"values"`
	// Name of a [Context Variable](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#AvailableKeys) to apply the condition to. Context variables may either be standard AWS variables starting with `aws:` or service-specific variables prefixed with the service name.
	Variable pulumix.Input[string] `pulumi:"variable"`
}

func (GetPolicyDocumentStatementConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatementCondition)(nil)).Elem()
}

func (i GetPolicyDocumentStatementConditionArgs) ToGetPolicyDocumentStatementConditionOutput() GetPolicyDocumentStatementConditionOutput {
	return i.ToGetPolicyDocumentStatementConditionOutputWithContext(context.Background())
}

func (i GetPolicyDocumentStatementConditionArgs) ToGetPolicyDocumentStatementConditionOutputWithContext(ctx context.Context) GetPolicyDocumentStatementConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentStatementConditionOutput)
}

func (i *GetPolicyDocumentStatementConditionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPolicyDocumentStatementConditionArgs] {
	return pulumix.Val(i)
}

type GetPolicyDocumentStatementConditionOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentStatementConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatementCondition)(nil)).Elem()
}

func (o GetPolicyDocumentStatementConditionOutput) ToGetPolicyDocumentStatementConditionOutput() GetPolicyDocumentStatementConditionOutput {
	return o
}

func (o GetPolicyDocumentStatementConditionOutput) ToGetPolicyDocumentStatementConditionOutputWithContext(ctx context.Context) GetPolicyDocumentStatementConditionOutput {
	return o
}

func (o GetPolicyDocumentStatementConditionOutput) ToOutput(ctx context.Context) pulumix.Output[GetPolicyDocumentStatementCondition] {
	return pulumix.Output[GetPolicyDocumentStatementCondition]{
		OutputState: o.OutputState,
	}
}

// Name of the [IAM condition operator](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html) to evaluate.
func (o GetPolicyDocumentStatementConditionOutput) Test() pulumix.Output[string] {
	return pulumix.Apply[GetPolicyDocumentStatementCondition](o, func(v GetPolicyDocumentStatementCondition) string { return v.Test })
}

// Values to evaluate the condition against. If multiple values are provided, the condition matches if at least one of them applies. That is, AWS evaluates multiple values as though using an "OR" boolean operation.
func (o GetPolicyDocumentStatementConditionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPolicyDocumentStatementCondition](o, func(v GetPolicyDocumentStatementCondition) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Name of a [Context Variable](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#AvailableKeys) to apply the condition to. Context variables may either be standard AWS variables starting with `aws:` or service-specific variables prefixed with the service name.
func (o GetPolicyDocumentStatementConditionOutput) Variable() pulumix.Output[string] {
	return pulumix.Apply[GetPolicyDocumentStatementCondition](o, func(v GetPolicyDocumentStatementCondition) string { return v.Variable })
}

type GetPolicyDocumentStatementNotPrincipal struct {
	// List of identifiers for principals. When `type` is `AWS`, these are IAM principal ARNs, e.g., `arn:aws:iam::12345678901:role/yak-role`.  When `type` is `Service`, these are AWS Service roles, e.g., `lambda.amazonaws.com`. When `type` is `Federated`, these are web identity users or SAML provider ARNs, e.g., `accounts.google.com` or `arn:aws:iam::12345678901:saml-provider/yak-saml-provider`. When `type` is `CanonicalUser`, these are [canonical user IDs](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html#FindingCanonicalId), e.g., `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`.
	Identifiers []string `pulumi:"identifiers"`
	// Type of principal. Valid values include `AWS`, `Service`, `Federated`, `CanonicalUser` and `*`.
	Type string `pulumi:"type"`
}

type GetPolicyDocumentStatementNotPrincipalArgs struct {
	// List of identifiers for principals. When `type` is `AWS`, these are IAM principal ARNs, e.g., `arn:aws:iam::12345678901:role/yak-role`.  When `type` is `Service`, these are AWS Service roles, e.g., `lambda.amazonaws.com`. When `type` is `Federated`, these are web identity users or SAML provider ARNs, e.g., `accounts.google.com` or `arn:aws:iam::12345678901:saml-provider/yak-saml-provider`. When `type` is `CanonicalUser`, these are [canonical user IDs](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html#FindingCanonicalId), e.g., `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`.
	Identifiers pulumix.Input[[]string] `pulumi:"identifiers"`
	// Type of principal. Valid values include `AWS`, `Service`, `Federated`, `CanonicalUser` and `*`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (GetPolicyDocumentStatementNotPrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatementNotPrincipal)(nil)).Elem()
}

func (i GetPolicyDocumentStatementNotPrincipalArgs) ToGetPolicyDocumentStatementNotPrincipalOutput() GetPolicyDocumentStatementNotPrincipalOutput {
	return i.ToGetPolicyDocumentStatementNotPrincipalOutputWithContext(context.Background())
}

func (i GetPolicyDocumentStatementNotPrincipalArgs) ToGetPolicyDocumentStatementNotPrincipalOutputWithContext(ctx context.Context) GetPolicyDocumentStatementNotPrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentStatementNotPrincipalOutput)
}

func (i *GetPolicyDocumentStatementNotPrincipalArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPolicyDocumentStatementNotPrincipalArgs] {
	return pulumix.Val(i)
}

type GetPolicyDocumentStatementNotPrincipalOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentStatementNotPrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatementNotPrincipal)(nil)).Elem()
}

func (o GetPolicyDocumentStatementNotPrincipalOutput) ToGetPolicyDocumentStatementNotPrincipalOutput() GetPolicyDocumentStatementNotPrincipalOutput {
	return o
}

func (o GetPolicyDocumentStatementNotPrincipalOutput) ToGetPolicyDocumentStatementNotPrincipalOutputWithContext(ctx context.Context) GetPolicyDocumentStatementNotPrincipalOutput {
	return o
}

func (o GetPolicyDocumentStatementNotPrincipalOutput) ToOutput(ctx context.Context) pulumix.Output[GetPolicyDocumentStatementNotPrincipal] {
	return pulumix.Output[GetPolicyDocumentStatementNotPrincipal]{
		OutputState: o.OutputState,
	}
}

// List of identifiers for principals. When `type` is `AWS`, these are IAM principal ARNs, e.g., `arn:aws:iam::12345678901:role/yak-role`.  When `type` is `Service`, these are AWS Service roles, e.g., `lambda.amazonaws.com`. When `type` is `Federated`, these are web identity users or SAML provider ARNs, e.g., `accounts.google.com` or `arn:aws:iam::12345678901:saml-provider/yak-saml-provider`. When `type` is `CanonicalUser`, these are [canonical user IDs](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html#FindingCanonicalId), e.g., `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`.
func (o GetPolicyDocumentStatementNotPrincipalOutput) Identifiers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPolicyDocumentStatementNotPrincipal](o, func(v GetPolicyDocumentStatementNotPrincipal) []string { return v.Identifiers })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Type of principal. Valid values include `AWS`, `Service`, `Federated`, `CanonicalUser` and `*`.
func (o GetPolicyDocumentStatementNotPrincipalOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetPolicyDocumentStatementNotPrincipal](o, func(v GetPolicyDocumentStatementNotPrincipal) string { return v.Type })
}

type GetPolicyDocumentStatementPrincipal struct {
	// List of identifiers for principals. When `type` is `AWS`, these are IAM principal ARNs, e.g., `arn:aws:iam::12345678901:role/yak-role`.  When `type` is `Service`, these are AWS Service roles, e.g., `lambda.amazonaws.com`. When `type` is `Federated`, these are web identity users or SAML provider ARNs, e.g., `accounts.google.com` or `arn:aws:iam::12345678901:saml-provider/yak-saml-provider`. When `type` is `CanonicalUser`, these are [canonical user IDs](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html#FindingCanonicalId), e.g., `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`.
	Identifiers []string `pulumi:"identifiers"`
	// Type of principal. Valid values include `AWS`, `Service`, `Federated`, `CanonicalUser` and `*`.
	Type string `pulumi:"type"`
}

type GetPolicyDocumentStatementPrincipalArgs struct {
	// List of identifiers for principals. When `type` is `AWS`, these are IAM principal ARNs, e.g., `arn:aws:iam::12345678901:role/yak-role`.  When `type` is `Service`, these are AWS Service roles, e.g., `lambda.amazonaws.com`. When `type` is `Federated`, these are web identity users or SAML provider ARNs, e.g., `accounts.google.com` or `arn:aws:iam::12345678901:saml-provider/yak-saml-provider`. When `type` is `CanonicalUser`, these are [canonical user IDs](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html#FindingCanonicalId), e.g., `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`.
	Identifiers pulumix.Input[[]string] `pulumi:"identifiers"`
	// Type of principal. Valid values include `AWS`, `Service`, `Federated`, `CanonicalUser` and `*`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (GetPolicyDocumentStatementPrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatementPrincipal)(nil)).Elem()
}

func (i GetPolicyDocumentStatementPrincipalArgs) ToGetPolicyDocumentStatementPrincipalOutput() GetPolicyDocumentStatementPrincipalOutput {
	return i.ToGetPolicyDocumentStatementPrincipalOutputWithContext(context.Background())
}

func (i GetPolicyDocumentStatementPrincipalArgs) ToGetPolicyDocumentStatementPrincipalOutputWithContext(ctx context.Context) GetPolicyDocumentStatementPrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentStatementPrincipalOutput)
}

func (i *GetPolicyDocumentStatementPrincipalArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPolicyDocumentStatementPrincipalArgs] {
	return pulumix.Val(i)
}

type GetPolicyDocumentStatementPrincipalOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentStatementPrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatementPrincipal)(nil)).Elem()
}

func (o GetPolicyDocumentStatementPrincipalOutput) ToGetPolicyDocumentStatementPrincipalOutput() GetPolicyDocumentStatementPrincipalOutput {
	return o
}

func (o GetPolicyDocumentStatementPrincipalOutput) ToGetPolicyDocumentStatementPrincipalOutputWithContext(ctx context.Context) GetPolicyDocumentStatementPrincipalOutput {
	return o
}

func (o GetPolicyDocumentStatementPrincipalOutput) ToOutput(ctx context.Context) pulumix.Output[GetPolicyDocumentStatementPrincipal] {
	return pulumix.Output[GetPolicyDocumentStatementPrincipal]{
		OutputState: o.OutputState,
	}
}

// List of identifiers for principals. When `type` is `AWS`, these are IAM principal ARNs, e.g., `arn:aws:iam::12345678901:role/yak-role`.  When `type` is `Service`, these are AWS Service roles, e.g., `lambda.amazonaws.com`. When `type` is `Federated`, these are web identity users or SAML provider ARNs, e.g., `accounts.google.com` or `arn:aws:iam::12345678901:saml-provider/yak-saml-provider`. When `type` is `CanonicalUser`, these are [canonical user IDs](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html#FindingCanonicalId), e.g., `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`.
func (o GetPolicyDocumentStatementPrincipalOutput) Identifiers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPolicyDocumentStatementPrincipal](o, func(v GetPolicyDocumentStatementPrincipal) []string { return v.Identifiers })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Type of principal. Valid values include `AWS`, `Service`, `Federated`, `CanonicalUser` and `*`.
func (o GetPolicyDocumentStatementPrincipalOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetPolicyDocumentStatementPrincipal](o, func(v GetPolicyDocumentStatementPrincipal) string { return v.Type })
}

type GetPrincipalPolicySimulationContext struct {
	// The context _condition key_ to set.
	//
	// If you have policies containing `Condition` elements or using dynamic interpolations then you will need to provide suitable values for each condition key your policies use. See [Actions, resources, and condition keys for AWS services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) to find the various condition keys that are normally provided for real requests to each action of each AWS service.
	Key string `pulumi:"key"`
	// An IAM value type that determines how the policy simulator will interpret the strings given in `values`.
	//
	// For more information, see the `ContextKeyType` field of [`iam.ContextEntry`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ContextEntry.html) in the underlying API.
	Type string `pulumi:"type"`
	// A set of one or more values for this context entry.
	Values []string `pulumi:"values"`
}

type GetPrincipalPolicySimulationContextArgs struct {
	// The context _condition key_ to set.
	//
	// If you have policies containing `Condition` elements or using dynamic interpolations then you will need to provide suitable values for each condition key your policies use. See [Actions, resources, and condition keys for AWS services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) to find the various condition keys that are normally provided for real requests to each action of each AWS service.
	Key pulumix.Input[string] `pulumi:"key"`
	// An IAM value type that determines how the policy simulator will interpret the strings given in `values`.
	//
	// For more information, see the `ContextKeyType` field of [`iam.ContextEntry`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ContextEntry.html) in the underlying API.
	Type pulumix.Input[string] `pulumi:"type"`
	// A set of one or more values for this context entry.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetPrincipalPolicySimulationContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrincipalPolicySimulationContext)(nil)).Elem()
}

func (i GetPrincipalPolicySimulationContextArgs) ToGetPrincipalPolicySimulationContextOutput() GetPrincipalPolicySimulationContextOutput {
	return i.ToGetPrincipalPolicySimulationContextOutputWithContext(context.Background())
}

func (i GetPrincipalPolicySimulationContextArgs) ToGetPrincipalPolicySimulationContextOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrincipalPolicySimulationContextOutput)
}

func (i *GetPrincipalPolicySimulationContextArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPrincipalPolicySimulationContextArgs] {
	return pulumix.Val(i)
}

type GetPrincipalPolicySimulationContextOutput struct{ *pulumi.OutputState }

func (GetPrincipalPolicySimulationContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrincipalPolicySimulationContext)(nil)).Elem()
}

func (o GetPrincipalPolicySimulationContextOutput) ToGetPrincipalPolicySimulationContextOutput() GetPrincipalPolicySimulationContextOutput {
	return o
}

func (o GetPrincipalPolicySimulationContextOutput) ToGetPrincipalPolicySimulationContextOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationContextOutput {
	return o
}

func (o GetPrincipalPolicySimulationContextOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrincipalPolicySimulationContext] {
	return pulumix.Output[GetPrincipalPolicySimulationContext]{
		OutputState: o.OutputState,
	}
}

// The context _condition key_ to set.
//
// If you have policies containing `Condition` elements or using dynamic interpolations then you will need to provide suitable values for each condition key your policies use. See [Actions, resources, and condition keys for AWS services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) to find the various condition keys that are normally provided for real requests to each action of each AWS service.
func (o GetPrincipalPolicySimulationContextOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetPrincipalPolicySimulationContext](o, func(v GetPrincipalPolicySimulationContext) string { return v.Key })
}

// An IAM value type that determines how the policy simulator will interpret the strings given in `values`.
//
// For more information, see the `ContextKeyType` field of [`iam.ContextEntry`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ContextEntry.html) in the underlying API.
func (o GetPrincipalPolicySimulationContextOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetPrincipalPolicySimulationContext](o, func(v GetPrincipalPolicySimulationContext) string { return v.Type })
}

// A set of one or more values for this context entry.
func (o GetPrincipalPolicySimulationContextOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPrincipalPolicySimulationContext](o, func(v GetPrincipalPolicySimulationContext) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetPrincipalPolicySimulationResult struct {
	// The name of the single IAM action used for this particular request.
	ActionName string `pulumi:"actionName"`
	// `true` if `decision` is "allowed", and `false` otherwise.
	Allowed bool `pulumi:"allowed"`
	// The raw decision determined from all of the policies in scope; either "allowed", "explicitDeny", or "implicitDeny".
	Decision string `pulumi:"decision"`
	// A map of arbitrary metadata entries returned by the policy simulator for this request.
	DecisionDetails map[string]string `pulumi:"decisionDetails"`
	// A nested set of objects describing which policies contained statements that were relevant to this simulation request. Each object has attributes `sourcePolicyId` and `sourcePolicyType` to identify one of the policies.
	MatchedStatements []GetPrincipalPolicySimulationResultMatchedStatement `pulumi:"matchedStatements"`
	// A set of context keys (or condition keys) that were needed by some of the policies contributing to this result but not specified using a `context` block in the configuration. Missing or incorrect context keys will typically cause a simulated request to be disallowed.
	MissingContextKeys []string `pulumi:"missingContextKeys"`
	// ARN of the resource that was used for this particular request. When you specify multiple actions and multiple resource ARNs, that causes a separate policy request for each combination of unique action and resource.
	ResourceArn string `pulumi:"resourceArn"`
}

type GetPrincipalPolicySimulationResultArgs struct {
	// The name of the single IAM action used for this particular request.
	ActionName pulumix.Input[string] `pulumi:"actionName"`
	// `true` if `decision` is "allowed", and `false` otherwise.
	Allowed pulumix.Input[bool] `pulumi:"allowed"`
	// The raw decision determined from all of the policies in scope; either "allowed", "explicitDeny", or "implicitDeny".
	Decision pulumix.Input[string] `pulumi:"decision"`
	// A map of arbitrary metadata entries returned by the policy simulator for this request.
	DecisionDetails pulumix.Input[map[string]string] `pulumi:"decisionDetails"`
	// A nested set of objects describing which policies contained statements that were relevant to this simulation request. Each object has attributes `sourcePolicyId` and `sourcePolicyType` to identify one of the policies.
	MatchedStatements pulumix.Input[[]*GetPrincipalPolicySimulationResultMatchedStatementArgs] `pulumi:"matchedStatements"`
	// A set of context keys (or condition keys) that were needed by some of the policies contributing to this result but not specified using a `context` block in the configuration. Missing or incorrect context keys will typically cause a simulated request to be disallowed.
	MissingContextKeys pulumix.Input[[]string] `pulumi:"missingContextKeys"`
	// ARN of the resource that was used for this particular request. When you specify multiple actions and multiple resource ARNs, that causes a separate policy request for each combination of unique action and resource.
	ResourceArn pulumix.Input[string] `pulumi:"resourceArn"`
}

func (GetPrincipalPolicySimulationResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrincipalPolicySimulationResult)(nil)).Elem()
}

func (i GetPrincipalPolicySimulationResultArgs) ToGetPrincipalPolicySimulationResultOutput() GetPrincipalPolicySimulationResultOutput {
	return i.ToGetPrincipalPolicySimulationResultOutputWithContext(context.Background())
}

func (i GetPrincipalPolicySimulationResultArgs) ToGetPrincipalPolicySimulationResultOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrincipalPolicySimulationResultOutput)
}

func (i *GetPrincipalPolicySimulationResultArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPrincipalPolicySimulationResultArgs] {
	return pulumix.Val(i)
}

type GetPrincipalPolicySimulationResultOutput struct{ *pulumi.OutputState }

func (GetPrincipalPolicySimulationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrincipalPolicySimulationResult)(nil)).Elem()
}

func (o GetPrincipalPolicySimulationResultOutput) ToGetPrincipalPolicySimulationResultOutput() GetPrincipalPolicySimulationResultOutput {
	return o
}

func (o GetPrincipalPolicySimulationResultOutput) ToGetPrincipalPolicySimulationResultOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationResultOutput {
	return o
}

func (o GetPrincipalPolicySimulationResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrincipalPolicySimulationResult] {
	return pulumix.Output[GetPrincipalPolicySimulationResult]{
		OutputState: o.OutputState,
	}
}

// The name of the single IAM action used for this particular request.
func (o GetPrincipalPolicySimulationResultOutput) ActionName() pulumix.Output[string] {
	return pulumix.Apply[GetPrincipalPolicySimulationResult](o, func(v GetPrincipalPolicySimulationResult) string { return v.ActionName })
}

// `true` if `decision` is "allowed", and `false` otherwise.
func (o GetPrincipalPolicySimulationResultOutput) Allowed() pulumix.Output[bool] {
	return pulumix.Apply[GetPrincipalPolicySimulationResult](o, func(v GetPrincipalPolicySimulationResult) bool { return v.Allowed })
}

// The raw decision determined from all of the policies in scope; either "allowed", "explicitDeny", or "implicitDeny".
func (o GetPrincipalPolicySimulationResultOutput) Decision() pulumix.Output[string] {
	return pulumix.Apply[GetPrincipalPolicySimulationResult](o, func(v GetPrincipalPolicySimulationResult) string { return v.Decision })
}

// A map of arbitrary metadata entries returned by the policy simulator for this request.
func (o GetPrincipalPolicySimulationResultOutput) DecisionDetails() pulumix.MapOutput[string] {
	value := pulumix.Apply[GetPrincipalPolicySimulationResult](o, func(v GetPrincipalPolicySimulationResult) map[string]string { return v.DecisionDetails })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// A nested set of objects describing which policies contained statements that were relevant to this simulation request. Each object has attributes `sourcePolicyId` and `sourcePolicyType` to identify one of the policies.
func (o GetPrincipalPolicySimulationResultOutput) MatchedStatements() pulumix.GArrayOutput[GetPrincipalPolicySimulationResultMatchedStatement, GetPrincipalPolicySimulationResultMatchedStatementOutput] {
	value := pulumix.Apply[GetPrincipalPolicySimulationResult](o, func(v GetPrincipalPolicySimulationResult) []GetPrincipalPolicySimulationResultMatchedStatement {
		return v.MatchedStatements
	})
	return pulumix.GArrayOutput[GetPrincipalPolicySimulationResultMatchedStatement, GetPrincipalPolicySimulationResultMatchedStatementOutput]{OutputState: value.OutputState}
}

// A set of context keys (or condition keys) that were needed by some of the policies contributing to this result but not specified using a `context` block in the configuration. Missing or incorrect context keys will typically cause a simulated request to be disallowed.
func (o GetPrincipalPolicySimulationResultOutput) MissingContextKeys() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPrincipalPolicySimulationResult](o, func(v GetPrincipalPolicySimulationResult) []string { return v.MissingContextKeys })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ARN of the resource that was used for this particular request. When you specify multiple actions and multiple resource ARNs, that causes a separate policy request for each combination of unique action and resource.
func (o GetPrincipalPolicySimulationResultOutput) ResourceArn() pulumix.Output[string] {
	return pulumix.Apply[GetPrincipalPolicySimulationResult](o, func(v GetPrincipalPolicySimulationResult) string { return v.ResourceArn })
}

type GetPrincipalPolicySimulationResultMatchedStatement struct {
	SourcePolicyId   string `pulumi:"sourcePolicyId"`
	SourcePolicyType string `pulumi:"sourcePolicyType"`
}

type GetPrincipalPolicySimulationResultMatchedStatementArgs struct {
	SourcePolicyId   pulumix.Input[string] `pulumi:"sourcePolicyId"`
	SourcePolicyType pulumix.Input[string] `pulumi:"sourcePolicyType"`
}

func (GetPrincipalPolicySimulationResultMatchedStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrincipalPolicySimulationResultMatchedStatement)(nil)).Elem()
}

func (i GetPrincipalPolicySimulationResultMatchedStatementArgs) ToGetPrincipalPolicySimulationResultMatchedStatementOutput() GetPrincipalPolicySimulationResultMatchedStatementOutput {
	return i.ToGetPrincipalPolicySimulationResultMatchedStatementOutputWithContext(context.Background())
}

func (i GetPrincipalPolicySimulationResultMatchedStatementArgs) ToGetPrincipalPolicySimulationResultMatchedStatementOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationResultMatchedStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrincipalPolicySimulationResultMatchedStatementOutput)
}

func (i *GetPrincipalPolicySimulationResultMatchedStatementArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPrincipalPolicySimulationResultMatchedStatementArgs] {
	return pulumix.Val(i)
}

type GetPrincipalPolicySimulationResultMatchedStatementOutput struct{ *pulumi.OutputState }

func (GetPrincipalPolicySimulationResultMatchedStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrincipalPolicySimulationResultMatchedStatement)(nil)).Elem()
}

func (o GetPrincipalPolicySimulationResultMatchedStatementOutput) ToGetPrincipalPolicySimulationResultMatchedStatementOutput() GetPrincipalPolicySimulationResultMatchedStatementOutput {
	return o
}

func (o GetPrincipalPolicySimulationResultMatchedStatementOutput) ToGetPrincipalPolicySimulationResultMatchedStatementOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationResultMatchedStatementOutput {
	return o
}

func (o GetPrincipalPolicySimulationResultMatchedStatementOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrincipalPolicySimulationResultMatchedStatement] {
	return pulumix.Output[GetPrincipalPolicySimulationResultMatchedStatement]{
		OutputState: o.OutputState,
	}
}

func (o GetPrincipalPolicySimulationResultMatchedStatementOutput) SourcePolicyId() pulumix.Output[string] {
	return pulumix.Apply[GetPrincipalPolicySimulationResultMatchedStatement](o, func(v GetPrincipalPolicySimulationResultMatchedStatement) string { return v.SourcePolicyId })
}

func (o GetPrincipalPolicySimulationResultMatchedStatementOutput) SourcePolicyType() pulumix.Output[string] {
	return pulumix.Apply[GetPrincipalPolicySimulationResultMatchedStatement](o, func(v GetPrincipalPolicySimulationResultMatchedStatement) string { return v.SourcePolicyType })
}

type GetRoleRoleLastUsed struct {
	// The date and time, in RFC 3339 format, that the role was last used.
	LastUsedDate string `pulumi:"lastUsedDate"`
	// The name of the AWS Region in which the role was last used.
	Region string `pulumi:"region"`
}

type GetRoleRoleLastUsedArgs struct {
	// The date and time, in RFC 3339 format, that the role was last used.
	LastUsedDate pulumix.Input[string] `pulumi:"lastUsedDate"`
	// The name of the AWS Region in which the role was last used.
	Region pulumix.Input[string] `pulumi:"region"`
}

func (GetRoleRoleLastUsedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoleRoleLastUsed)(nil)).Elem()
}

func (i GetRoleRoleLastUsedArgs) ToGetRoleRoleLastUsedOutput() GetRoleRoleLastUsedOutput {
	return i.ToGetRoleRoleLastUsedOutputWithContext(context.Background())
}

func (i GetRoleRoleLastUsedArgs) ToGetRoleRoleLastUsedOutputWithContext(ctx context.Context) GetRoleRoleLastUsedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoleRoleLastUsedOutput)
}

func (i *GetRoleRoleLastUsedArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRoleRoleLastUsedArgs] {
	return pulumix.Val(i)
}

type GetRoleRoleLastUsedOutput struct{ *pulumi.OutputState }

func (GetRoleRoleLastUsedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoleRoleLastUsed)(nil)).Elem()
}

func (o GetRoleRoleLastUsedOutput) ToGetRoleRoleLastUsedOutput() GetRoleRoleLastUsedOutput {
	return o
}

func (o GetRoleRoleLastUsedOutput) ToGetRoleRoleLastUsedOutputWithContext(ctx context.Context) GetRoleRoleLastUsedOutput {
	return o
}

func (o GetRoleRoleLastUsedOutput) ToOutput(ctx context.Context) pulumix.Output[GetRoleRoleLastUsed] {
	return pulumix.Output[GetRoleRoleLastUsed]{
		OutputState: o.OutputState,
	}
}

// The date and time, in RFC 3339 format, that the role was last used.
func (o GetRoleRoleLastUsedOutput) LastUsedDate() pulumix.Output[string] {
	return pulumix.Apply[GetRoleRoleLastUsed](o, func(v GetRoleRoleLastUsed) string { return v.LastUsedDate })
}

// The name of the AWS Region in which the role was last used.
func (o GetRoleRoleLastUsedOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[GetRoleRoleLastUsed](o, func(v GetRoleRoleLastUsed) string { return v.Region })
}

func init() {
	pulumi.RegisterOutputType(RoleInlinePolicyOutput{})
	pulumi.RegisterOutputType(GetAccessKeysAccessKeyOutput{})
	pulumi.RegisterOutputType(GetGroupUserOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementConditionOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementNotPrincipalOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementPrincipalOutput{})
	pulumi.RegisterOutputType(GetPrincipalPolicySimulationContextOutput{})
	pulumi.RegisterOutputType(GetPrincipalPolicySimulationResultOutput{})
	pulumi.RegisterOutputType(GetPrincipalPolicySimulationResultMatchedStatementOutput{})
	pulumi.RegisterOutputType(GetRoleRoleLastUsedOutput{})
}
