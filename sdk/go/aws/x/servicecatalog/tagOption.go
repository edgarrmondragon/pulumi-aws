// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Service Catalog Tag Option.
type TagOption struct {
	pulumi.CustomResourceState

	// Whether tag option is active. Default is `true`.
	Active pulumix.Output[*bool] `pulumi:"active"`
	// Tag option key.
	Key   pulumix.Output[string] `pulumi:"key"`
	Owner pulumix.Output[string] `pulumi:"owner"`
	// Tag option value.
	//
	// The following arguments are optional:
	Value pulumix.Output[string] `pulumi:"value"`
}

// NewTagOption registers a new resource with the given unique name, arguments, and options.
func NewTagOption(ctx *pulumi.Context,
	name string, args *TagOptionArgs, opts ...pulumi.ResourceOption) (*TagOption, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TagOption
	err := ctx.RegisterResource("aws:servicecatalog/tagOption:TagOption", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagOption gets an existing TagOption resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagOption(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagOptionState, opts ...pulumi.ResourceOption) (*TagOption, error) {
	var resource TagOption
	err := ctx.ReadResource("aws:servicecatalog/tagOption:TagOption", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagOption resources.
type tagOptionState struct {
	// Whether tag option is active. Default is `true`.
	Active *bool `pulumi:"active"`
	// Tag option key.
	Key   *string `pulumi:"key"`
	Owner *string `pulumi:"owner"`
	// Tag option value.
	//
	// The following arguments are optional:
	Value *string `pulumi:"value"`
}

type TagOptionState struct {
	// Whether tag option is active. Default is `true`.
	Active pulumix.Input[*bool]
	// Tag option key.
	Key   pulumix.Input[*string]
	Owner pulumix.Input[*string]
	// Tag option value.
	//
	// The following arguments are optional:
	Value pulumix.Input[*string]
}

func (TagOptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagOptionState)(nil)).Elem()
}

type tagOptionArgs struct {
	// Whether tag option is active. Default is `true`.
	Active *bool `pulumi:"active"`
	// Tag option key.
	Key string `pulumi:"key"`
	// Tag option value.
	//
	// The following arguments are optional:
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a TagOption resource.
type TagOptionArgs struct {
	// Whether tag option is active. Default is `true`.
	Active pulumix.Input[*bool]
	// Tag option key.
	Key pulumix.Input[string]
	// Tag option value.
	//
	// The following arguments are optional:
	Value pulumix.Input[string]
}

func (TagOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagOptionArgs)(nil)).Elem()
}

type TagOptionOutput struct{ *pulumi.OutputState }

func (TagOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagOption)(nil)).Elem()
}

func (o TagOptionOutput) ToTagOptionOutput() TagOptionOutput {
	return o
}

func (o TagOptionOutput) ToTagOptionOutputWithContext(ctx context.Context) TagOptionOutput {
	return o
}

func (o TagOptionOutput) ToOutput(ctx context.Context) pulumix.Output[TagOption] {
	return pulumix.Output[TagOption]{
		OutputState: o.OutputState,
	}
}

// Whether tag option is active. Default is `true`.
func (o TagOptionOutput) Active() pulumix.Output[*bool] {
	value := pulumix.Apply[TagOption](o, func(v TagOption) pulumix.Output[*bool] { return v.Active })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Tag option key.
func (o TagOptionOutput) Key() pulumix.Output[string] {
	value := pulumix.Apply[TagOption](o, func(v TagOption) pulumix.Output[string] { return v.Key })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o TagOptionOutput) Owner() pulumix.Output[string] {
	value := pulumix.Apply[TagOption](o, func(v TagOption) pulumix.Output[string] { return v.Owner })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Tag option value.
//
// The following arguments are optional:
func (o TagOptionOutput) Value() pulumix.Output[string] {
	value := pulumix.Apply[TagOption](o, func(v TagOption) pulumix.Output[string] { return v.Value })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(TagOptionOutput{})
}
