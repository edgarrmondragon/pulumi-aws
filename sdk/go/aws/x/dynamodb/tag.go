// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an individual DynamoDB resource tag. This resource should only be used in cases where DynamoDB resources are created outside the provider (e.g., Table replicas in other regions).
//
// > **NOTE:** This tagging resource should not be combined with the resource for managing the parent resource. For example, using `dynamodb.Table` and `dynamodb.Tag` to manage tags of the same DynamoDB Table in the same region will cause a perpetual difference where the `awsDynamodbCluster` resource will try to remove the tag being added by the `dynamodb.Tag` resource.
//
// > **NOTE:** This tagging resource does not use the provider `ignoreTags` configuration.
type Tag struct {
	pulumi.CustomResourceState

	// Tag name.
	Key pulumix.Output[string] `pulumi:"key"`
	// Amazon Resource Name (ARN) of the DynamoDB resource to tag.
	ResourceArn pulumix.Output[string] `pulumi:"resourceArn"`
	// Tag value.
	Value pulumix.Output[string] `pulumi:"value"`
}

// NewTag registers a new resource with the given unique name, arguments, and options.
func NewTag(ctx *pulumi.Context,
	name string, args *TagArgs, opts ...pulumi.ResourceOption) (*Tag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.ResourceArn == nil {
		return nil, errors.New("invalid value for required argument 'ResourceArn'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tag
	err := ctx.RegisterResource("aws:dynamodb/tag:Tag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTag gets an existing Tag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagState, opts ...pulumi.ResourceOption) (*Tag, error) {
	var resource Tag
	err := ctx.ReadResource("aws:dynamodb/tag:Tag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tag resources.
type tagState struct {
	// Tag name.
	Key *string `pulumi:"key"`
	// Amazon Resource Name (ARN) of the DynamoDB resource to tag.
	ResourceArn *string `pulumi:"resourceArn"`
	// Tag value.
	Value *string `pulumi:"value"`
}

type TagState struct {
	// Tag name.
	Key pulumix.Input[*string]
	// Amazon Resource Name (ARN) of the DynamoDB resource to tag.
	ResourceArn pulumix.Input[*string]
	// Tag value.
	Value pulumix.Input[*string]
}

func (TagState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagState)(nil)).Elem()
}

type tagArgs struct {
	// Tag name.
	Key string `pulumi:"key"`
	// Amazon Resource Name (ARN) of the DynamoDB resource to tag.
	ResourceArn string `pulumi:"resourceArn"`
	// Tag value.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a Tag resource.
type TagArgs struct {
	// Tag name.
	Key pulumix.Input[string]
	// Amazon Resource Name (ARN) of the DynamoDB resource to tag.
	ResourceArn pulumix.Input[string]
	// Tag value.
	Value pulumix.Input[string]
}

func (TagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagArgs)(nil)).Elem()
}

type TagOutput struct{ *pulumi.OutputState }

func (TagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Tag)(nil)).Elem()
}

func (o TagOutput) ToTagOutput() TagOutput {
	return o
}

func (o TagOutput) ToTagOutputWithContext(ctx context.Context) TagOutput {
	return o
}

func (o TagOutput) ToOutput(ctx context.Context) pulumix.Output[Tag] {
	return pulumix.Output[Tag]{
		OutputState: o.OutputState,
	}
}

// Tag name.
func (o TagOutput) Key() pulumix.Output[string] {
	value := pulumix.Apply[Tag](o, func(v Tag) pulumix.Output[string] { return v.Key })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon Resource Name (ARN) of the DynamoDB resource to tag.
func (o TagOutput) ResourceArn() pulumix.Output[string] {
	value := pulumix.Apply[Tag](o, func(v Tag) pulumix.Output[string] { return v.ResourceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Tag value.
func (o TagOutput) Value() pulumix.Output[string] {
	value := pulumix.Apply[Tag](o, func(v Tag) pulumix.Output[string] { return v.Value })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(TagOutput{})
}
