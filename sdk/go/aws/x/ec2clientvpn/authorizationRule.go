// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2clientvpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides authorization rules for AWS Client VPN endpoints. For more information on usage, please see the
// [AWS Client VPN Administrator's Guide](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/what-is.html).
type AuthorizationRule struct {
	pulumi.CustomResourceState

	// The ID of the group to which the authorization rule grants access. One of `accessGroupId` or `authorizeAllGroups` must be set.
	AccessGroupId pulumix.Output[*string] `pulumi:"accessGroupId"`
	// Indicates whether the authorization rule grants access to all clients. One of `accessGroupId` or `authorizeAllGroups` must be set.
	AuthorizeAllGroups pulumix.Output[*bool] `pulumi:"authorizeAllGroups"`
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId pulumix.Output[string] `pulumi:"clientVpnEndpointId"`
	// A brief description of the authorization rule.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The IPv4 address range, in CIDR notation, of the network to which the authorization rule applies.
	TargetNetworkCidr pulumix.Output[string] `pulumi:"targetNetworkCidr"`
}

// NewAuthorizationRule registers a new resource with the given unique name, arguments, and options.
func NewAuthorizationRule(ctx *pulumi.Context,
	name string, args *AuthorizationRuleArgs, opts ...pulumi.ResourceOption) (*AuthorizationRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientVpnEndpointId == nil {
		return nil, errors.New("invalid value for required argument 'ClientVpnEndpointId'")
	}
	if args.TargetNetworkCidr == nil {
		return nil, errors.New("invalid value for required argument 'TargetNetworkCidr'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthorizationRule
	err := ctx.RegisterResource("aws:ec2clientvpn/authorizationRule:AuthorizationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizationRule gets an existing AuthorizationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizationRuleState, opts ...pulumi.ResourceOption) (*AuthorizationRule, error) {
	var resource AuthorizationRule
	err := ctx.ReadResource("aws:ec2clientvpn/authorizationRule:AuthorizationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizationRule resources.
type authorizationRuleState struct {
	// The ID of the group to which the authorization rule grants access. One of `accessGroupId` or `authorizeAllGroups` must be set.
	AccessGroupId *string `pulumi:"accessGroupId"`
	// Indicates whether the authorization rule grants access to all clients. One of `accessGroupId` or `authorizeAllGroups` must be set.
	AuthorizeAllGroups *bool `pulumi:"authorizeAllGroups"`
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId *string `pulumi:"clientVpnEndpointId"`
	// A brief description of the authorization rule.
	Description *string `pulumi:"description"`
	// The IPv4 address range, in CIDR notation, of the network to which the authorization rule applies.
	TargetNetworkCidr *string `pulumi:"targetNetworkCidr"`
}

type AuthorizationRuleState struct {
	// The ID of the group to which the authorization rule grants access. One of `accessGroupId` or `authorizeAllGroups` must be set.
	AccessGroupId pulumix.Input[*string]
	// Indicates whether the authorization rule grants access to all clients. One of `accessGroupId` or `authorizeAllGroups` must be set.
	AuthorizeAllGroups pulumix.Input[*bool]
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId pulumix.Input[*string]
	// A brief description of the authorization rule.
	Description pulumix.Input[*string]
	// The IPv4 address range, in CIDR notation, of the network to which the authorization rule applies.
	TargetNetworkCidr pulumix.Input[*string]
}

func (AuthorizationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationRuleState)(nil)).Elem()
}

type authorizationRuleArgs struct {
	// The ID of the group to which the authorization rule grants access. One of `accessGroupId` or `authorizeAllGroups` must be set.
	AccessGroupId *string `pulumi:"accessGroupId"`
	// Indicates whether the authorization rule grants access to all clients. One of `accessGroupId` or `authorizeAllGroups` must be set.
	AuthorizeAllGroups *bool `pulumi:"authorizeAllGroups"`
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId string `pulumi:"clientVpnEndpointId"`
	// A brief description of the authorization rule.
	Description *string `pulumi:"description"`
	// The IPv4 address range, in CIDR notation, of the network to which the authorization rule applies.
	TargetNetworkCidr string `pulumi:"targetNetworkCidr"`
}

// The set of arguments for constructing a AuthorizationRule resource.
type AuthorizationRuleArgs struct {
	// The ID of the group to which the authorization rule grants access. One of `accessGroupId` or `authorizeAllGroups` must be set.
	AccessGroupId pulumix.Input[*string]
	// Indicates whether the authorization rule grants access to all clients. One of `accessGroupId` or `authorizeAllGroups` must be set.
	AuthorizeAllGroups pulumix.Input[*bool]
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId pulumix.Input[string]
	// A brief description of the authorization rule.
	Description pulumix.Input[*string]
	// The IPv4 address range, in CIDR notation, of the network to which the authorization rule applies.
	TargetNetworkCidr pulumix.Input[string]
}

func (AuthorizationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationRuleArgs)(nil)).Elem()
}

type AuthorizationRuleOutput struct{ *pulumi.OutputState }

func (AuthorizationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationRule)(nil)).Elem()
}

func (o AuthorizationRuleOutput) ToAuthorizationRuleOutput() AuthorizationRuleOutput {
	return o
}

func (o AuthorizationRuleOutput) ToAuthorizationRuleOutputWithContext(ctx context.Context) AuthorizationRuleOutput {
	return o
}

func (o AuthorizationRuleOutput) ToOutput(ctx context.Context) pulumix.Output[AuthorizationRule] {
	return pulumix.Output[AuthorizationRule]{
		OutputState: o.OutputState,
	}
}

// The ID of the group to which the authorization rule grants access. One of `accessGroupId` or `authorizeAllGroups` must be set.
func (o AuthorizationRuleOutput) AccessGroupId() pulumix.Output[*string] {
	value := pulumix.Apply[AuthorizationRule](o, func(v AuthorizationRule) pulumix.Output[*string] { return v.AccessGroupId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Indicates whether the authorization rule grants access to all clients. One of `accessGroupId` or `authorizeAllGroups` must be set.
func (o AuthorizationRuleOutput) AuthorizeAllGroups() pulumix.Output[*bool] {
	value := pulumix.Apply[AuthorizationRule](o, func(v AuthorizationRule) pulumix.Output[*bool] { return v.AuthorizeAllGroups })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The ID of the Client VPN endpoint.
func (o AuthorizationRuleOutput) ClientVpnEndpointId() pulumix.Output[string] {
	value := pulumix.Apply[AuthorizationRule](o, func(v AuthorizationRule) pulumix.Output[string] { return v.ClientVpnEndpointId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A brief description of the authorization rule.
func (o AuthorizationRuleOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[AuthorizationRule](o, func(v AuthorizationRule) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The IPv4 address range, in CIDR notation, of the network to which the authorization rule applies.
func (o AuthorizationRuleOutput) TargetNetworkCidr() pulumix.Output[string] {
	value := pulumix.Apply[AuthorizationRule](o, func(v AuthorizationRule) pulumix.Output[string] { return v.TargetNetworkCidr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(AuthorizationRuleOutput{})
}
