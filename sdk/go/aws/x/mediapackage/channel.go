// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediapackage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Elemental MediaPackage Channel.
type Channel struct {
	pulumi.CustomResourceState

	// The ARN of the channel
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A unique identifier describing the channel
	ChannelId pulumix.Output[string] `pulumi:"channelId"`
	// A description of the channel
	Description pulumix.Output[string] `pulumi:"description"`
	// A single item list of HLS ingest information
	HlsIngests pulumix.GArrayOutput[ChannelHlsIngest, ChannelHlsIngestOutput] `pulumi:"hlsIngests"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewChannel registers a new resource with the given unique name, arguments, and options.
func NewChannel(ctx *pulumi.Context,
	name string, args *ChannelArgs, opts ...pulumi.ResourceOption) (*Channel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChannelId == nil {
		return nil, errors.New("invalid value for required argument 'ChannelId'")
	}
	if args.Description == nil {
		args.Description = pulumix.Ptr("Managed by Pulumi")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Channel
	err := ctx.RegisterResource("aws:mediapackage/channel:Channel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannel gets an existing Channel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelState, opts ...pulumi.ResourceOption) (*Channel, error) {
	var resource Channel
	err := ctx.ReadResource("aws:mediapackage/channel:Channel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Channel resources.
type channelState struct {
	// The ARN of the channel
	Arn *string `pulumi:"arn"`
	// A unique identifier describing the channel
	ChannelId *string `pulumi:"channelId"`
	// A description of the channel
	Description *string `pulumi:"description"`
	// A single item list of HLS ingest information
	HlsIngests []ChannelHlsIngest `pulumi:"hlsIngests"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ChannelState struct {
	// The ARN of the channel
	Arn pulumix.Input[*string]
	// A unique identifier describing the channel
	ChannelId pulumix.Input[*string]
	// A description of the channel
	Description pulumix.Input[*string]
	// A single item list of HLS ingest information
	HlsIngests pulumix.Input[[]*ChannelHlsIngestArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelState)(nil)).Elem()
}

type channelArgs struct {
	// A unique identifier describing the channel
	ChannelId string `pulumi:"channelId"`
	// A description of the channel
	Description *string `pulumi:"description"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Channel resource.
type ChannelArgs struct {
	// A unique identifier describing the channel
	ChannelId pulumix.Input[string]
	// A description of the channel
	Description pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelArgs)(nil)).Elem()
}

type ChannelOutput struct{ *pulumi.OutputState }

func (ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Channel)(nil)).Elem()
}

func (o ChannelOutput) ToChannelOutput() ChannelOutput {
	return o
}

func (o ChannelOutput) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return o
}

func (o ChannelOutput) ToOutput(ctx context.Context) pulumix.Output[Channel] {
	return pulumix.Output[Channel]{
		OutputState: o.OutputState,
	}
}

// The ARN of the channel
func (o ChannelOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A unique identifier describing the channel
func (o ChannelOutput) ChannelId() pulumix.Output[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[string] { return v.ChannelId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description of the channel
func (o ChannelOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A single item list of HLS ingest information
func (o ChannelOutput) HlsIngests() pulumix.GArrayOutput[ChannelHlsIngest, ChannelHlsIngestOutput] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.GArrayOutput[ChannelHlsIngest, ChannelHlsIngestOutput] { return v.HlsIngests })
	unwrapped := pulumix.Flatten[[]ChannelHlsIngest, pulumix.GArrayOutput[ChannelHlsIngest, ChannelHlsIngestOutput]](value)
	return pulumix.GArrayOutput[ChannelHlsIngest, ChannelHlsIngestOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ChannelOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ChannelOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ChannelOutput{})
}
