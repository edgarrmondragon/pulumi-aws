// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appintegrations

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information on an existing AppIntegrations Event Integration.
func GetEventIntegration(ctx *pulumi.Context, args *GetEventIntegrationArgs, opts ...pulumi.InvokeOption) (*GetEventIntegrationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetEventIntegrationResult
	err := ctx.Invoke("aws:appintegrations/getEventIntegration:getEventIntegration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEventIntegration.
type GetEventIntegrationArgs struct {
	// The AppIntegrations Event Integration name.
	Name string `pulumi:"name"`
	// Metadata that you can assign to help organize the report plans you create.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getEventIntegration.
type GetEventIntegrationResult struct {
	// The ARN of the AppIntegrations Event Integration.
	Arn string `pulumi:"arn"`
	// The description of the Event Integration.
	Description string `pulumi:"description"`
	// A block that defines the configuration information for the event filter. The Event Filter block is documented below.
	EventFilters []GetEventIntegrationEventFilter `pulumi:"eventFilters"`
	// The EventBridge bus.
	EventbridgeBus string `pulumi:"eventbridgeBus"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Metadata that you can assign to help organize the report plans you create.
	Tags map[string]string `pulumi:"tags"`
}

func GetEventIntegrationOutput(ctx *pulumi.Context, args GetEventIntegrationOutputArgs, opts ...pulumi.InvokeOption) GetEventIntegrationResultOutput {
	outputResult := pulumix.ApplyErr[*GetEventIntegrationArgs](args.ToOutput(), func(plainArgs *GetEventIntegrationArgs) (*GetEventIntegrationResult, error) {
		return GetEventIntegration(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetEventIntegrationResultOutput, *GetEventIntegrationResult](outputResult)
}

// A collection of arguments for invoking getEventIntegration.
type GetEventIntegrationOutputArgs struct {
	// The AppIntegrations Event Integration name.
	Name pulumix.Input[string] `pulumi:"name"`
	// Metadata that you can assign to help organize the report plans you create.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetEventIntegrationOutputArgs) ToOutput() pulumix.Output[*GetEventIntegrationArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetEventIntegrationArgs {
		return &GetEventIntegrationArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type GetEventIntegrationResultOutput struct{ *pulumi.OutputState }

func (GetEventIntegrationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventIntegrationResult)(nil)).Elem()
}

func (o GetEventIntegrationResultOutput) ToOutput(context.Context) pulumix.Output[*GetEventIntegrationResult] {
	return pulumix.Output[*GetEventIntegrationResult]{
		OutputState: o.OutputState,
	}
}

func (o GetEventIntegrationResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*GetEventIntegrationResult](o, func(v *GetEventIntegrationResult) string { return v.Arn })
}

func (o GetEventIntegrationResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*GetEventIntegrationResult](o, func(v *GetEventIntegrationResult) string { return v.Description })
}

func (o GetEventIntegrationResultOutput) EventFilters() pulumix.GArrayOutput[GetEventIntegrationEventFilter, GetEventIntegrationEventFilterOutput] {
	value := pulumix.Apply[*GetEventIntegrationResult](o, func(v *GetEventIntegrationResult) []GetEventIntegrationEventFilter { return v.EventFilters })
	return pulumix.GArrayOutput[GetEventIntegrationEventFilter, GetEventIntegrationEventFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetEventIntegrationResultOutput) EventbridgeBus() pulumix.Output[string] {
	return pulumix.Apply[*GetEventIntegrationResult](o, func(v *GetEventIntegrationResult) string { return v.EventbridgeBus })
}

func (o GetEventIntegrationResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetEventIntegrationResult](o, func(v *GetEventIntegrationResult) string { return v.Id })
}

func (o GetEventIntegrationResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*GetEventIntegrationResult](o, func(v *GetEventIntegrationResult) string { return v.Name })
}

func (o GetEventIntegrationResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetEventIntegrationResult](o, func(v *GetEventIntegrationResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
