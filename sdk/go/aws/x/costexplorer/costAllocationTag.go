// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package costexplorer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CE Cost Allocation Tag.
type CostAllocationTag struct {
	pulumi.CustomResourceState

	// The status of a cost allocation tag. Valid values are `Active` and `Inactive`.
	Status pulumix.Output[string] `pulumi:"status"`
	// The key for the cost allocation tag.
	TagKey pulumix.Output[string] `pulumi:"tagKey"`
	// The type of cost allocation tag.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewCostAllocationTag registers a new resource with the given unique name, arguments, and options.
func NewCostAllocationTag(ctx *pulumi.Context,
	name string, args *CostAllocationTagArgs, opts ...pulumi.ResourceOption) (*CostAllocationTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.TagKey == nil {
		return nil, errors.New("invalid value for required argument 'TagKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CostAllocationTag
	err := ctx.RegisterResource("aws:costexplorer/costAllocationTag:CostAllocationTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCostAllocationTag gets an existing CostAllocationTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCostAllocationTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CostAllocationTagState, opts ...pulumi.ResourceOption) (*CostAllocationTag, error) {
	var resource CostAllocationTag
	err := ctx.ReadResource("aws:costexplorer/costAllocationTag:CostAllocationTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CostAllocationTag resources.
type costAllocationTagState struct {
	// The status of a cost allocation tag. Valid values are `Active` and `Inactive`.
	Status *string `pulumi:"status"`
	// The key for the cost allocation tag.
	TagKey *string `pulumi:"tagKey"`
	// The type of cost allocation tag.
	Type *string `pulumi:"type"`
}

type CostAllocationTagState struct {
	// The status of a cost allocation tag. Valid values are `Active` and `Inactive`.
	Status pulumix.Input[*string]
	// The key for the cost allocation tag.
	TagKey pulumix.Input[*string]
	// The type of cost allocation tag.
	Type pulumix.Input[*string]
}

func (CostAllocationTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*costAllocationTagState)(nil)).Elem()
}

type costAllocationTagArgs struct {
	// The status of a cost allocation tag. Valid values are `Active` and `Inactive`.
	Status string `pulumi:"status"`
	// The key for the cost allocation tag.
	TagKey string `pulumi:"tagKey"`
}

// The set of arguments for constructing a CostAllocationTag resource.
type CostAllocationTagArgs struct {
	// The status of a cost allocation tag. Valid values are `Active` and `Inactive`.
	Status pulumix.Input[string]
	// The key for the cost allocation tag.
	TagKey pulumix.Input[string]
}

func (CostAllocationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*costAllocationTagArgs)(nil)).Elem()
}

type CostAllocationTagOutput struct{ *pulumi.OutputState }

func (CostAllocationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationTag)(nil)).Elem()
}

func (o CostAllocationTagOutput) ToCostAllocationTagOutput() CostAllocationTagOutput {
	return o
}

func (o CostAllocationTagOutput) ToCostAllocationTagOutputWithContext(ctx context.Context) CostAllocationTagOutput {
	return o
}

func (o CostAllocationTagOutput) ToOutput(ctx context.Context) pulumix.Output[CostAllocationTag] {
	return pulumix.Output[CostAllocationTag]{
		OutputState: o.OutputState,
	}
}

// The status of a cost allocation tag. Valid values are `Active` and `Inactive`.
func (o CostAllocationTagOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[CostAllocationTag](o, func(v CostAllocationTag) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The key for the cost allocation tag.
func (o CostAllocationTagOutput) TagKey() pulumix.Output[string] {
	value := pulumix.Apply[CostAllocationTag](o, func(v CostAllocationTag) pulumix.Output[string] { return v.TagKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of cost allocation tag.
func (o CostAllocationTagOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[CostAllocationTag](o, func(v CostAllocationTag) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CostAllocationTagOutput{})
}
