// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3control

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage an S3 Control Bucket Policy.
//
// > This functionality is for managing [S3 on Outposts](https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html). To manage S3 Bucket Policies in an AWS Partition, see the `s3.BucketPolicy` resource.
type BucketPolicy struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the bucket.
	Bucket pulumix.Output[string] `pulumi:"bucket"`
	// JSON string of the resource policy.
	Policy pulumix.Output[string] `pulumi:"policy"`
}

// NewBucketPolicy registers a new resource with the given unique name, arguments, and options.
func NewBucketPolicy(ctx *pulumi.Context,
	name string, args *BucketPolicyArgs, opts ...pulumi.ResourceOption) (*BucketPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketPolicy
	err := ctx.RegisterResource("aws:s3control/bucketPolicy:BucketPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketPolicy gets an existing BucketPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketPolicyState, opts ...pulumi.ResourceOption) (*BucketPolicy, error) {
	var resource BucketPolicy
	err := ctx.ReadResource("aws:s3control/bucketPolicy:BucketPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketPolicy resources.
type bucketPolicyState struct {
	// Amazon Resource Name (ARN) of the bucket.
	Bucket *string `pulumi:"bucket"`
	// JSON string of the resource policy.
	Policy *string `pulumi:"policy"`
}

type BucketPolicyState struct {
	// Amazon Resource Name (ARN) of the bucket.
	Bucket pulumix.Input[*string]
	// JSON string of the resource policy.
	Policy pulumix.Input[*string]
}

func (BucketPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketPolicyState)(nil)).Elem()
}

type bucketPolicyArgs struct {
	// Amazon Resource Name (ARN) of the bucket.
	Bucket string `pulumi:"bucket"`
	// JSON string of the resource policy.
	Policy string `pulumi:"policy"`
}

// The set of arguments for constructing a BucketPolicy resource.
type BucketPolicyArgs struct {
	// Amazon Resource Name (ARN) of the bucket.
	Bucket pulumix.Input[string]
	// JSON string of the resource policy.
	Policy pulumix.Input[string]
}

func (BucketPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketPolicyArgs)(nil)).Elem()
}

type BucketPolicyOutput struct{ *pulumi.OutputState }

func (BucketPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketPolicy)(nil)).Elem()
}

func (o BucketPolicyOutput) ToBucketPolicyOutput() BucketPolicyOutput {
	return o
}

func (o BucketPolicyOutput) ToBucketPolicyOutputWithContext(ctx context.Context) BucketPolicyOutput {
	return o
}

func (o BucketPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[BucketPolicy] {
	return pulumix.Output[BucketPolicy]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the bucket.
func (o BucketPolicyOutput) Bucket() pulumix.Output[string] {
	value := pulumix.Apply[BucketPolicy](o, func(v BucketPolicy) pulumix.Output[string] { return v.Bucket })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// JSON string of the resource policy.
func (o BucketPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[BucketPolicy](o, func(v BucketPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(BucketPolicyOutput{})
}
