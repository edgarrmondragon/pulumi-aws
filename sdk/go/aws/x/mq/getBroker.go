// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a MQ Broker.
func LookupBroker(ctx *pulumi.Context, args *LookupBrokerArgs, opts ...pulumi.InvokeOption) (*LookupBrokerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBrokerResult
	err := ctx.Invoke("aws:mq/getBroker:getBroker", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBroker.
type LookupBrokerArgs struct {
	// Unique id of the mq broker.
	BrokerId *string `pulumi:"brokerId"`
	// Unique name of the mq broker.
	BrokerName *string           `pulumi:"brokerName"`
	Tags       map[string]string `pulumi:"tags"`
}

// A collection of values returned by getBroker.
type LookupBrokerResult struct {
	Arn                     string                      `pulumi:"arn"`
	AuthenticationStrategy  string                      `pulumi:"authenticationStrategy"`
	AutoMinorVersionUpgrade bool                        `pulumi:"autoMinorVersionUpgrade"`
	BrokerId                string                      `pulumi:"brokerId"`
	BrokerName              string                      `pulumi:"brokerName"`
	Configuration           GetBrokerConfiguration      `pulumi:"configuration"`
	DeploymentMode          string                      `pulumi:"deploymentMode"`
	EncryptionOptions       []GetBrokerEncryptionOption `pulumi:"encryptionOptions"`
	EngineType              string                      `pulumi:"engineType"`
	EngineVersion           string                      `pulumi:"engineVersion"`
	HostInstanceType        string                      `pulumi:"hostInstanceType"`
	// The provider-assigned unique ID for this managed resource.
	Id                         string                              `pulumi:"id"`
	Instances                  []GetBrokerInstance                 `pulumi:"instances"`
	LdapServerMetadatas        []GetBrokerLdapServerMetadata       `pulumi:"ldapServerMetadatas"`
	Logs                       GetBrokerLogs                       `pulumi:"logs"`
	MaintenanceWindowStartTime GetBrokerMaintenanceWindowStartTime `pulumi:"maintenanceWindowStartTime"`
	PubliclyAccessible         bool                                `pulumi:"publiclyAccessible"`
	SecurityGroups             []string                            `pulumi:"securityGroups"`
	StorageType                string                              `pulumi:"storageType"`
	SubnetIds                  []string                            `pulumi:"subnetIds"`
	Tags                       map[string]string                   `pulumi:"tags"`
	Users                      []GetBrokerUser                     `pulumi:"users"`
}

func LookupBrokerOutput(ctx *pulumi.Context, args LookupBrokerOutputArgs, opts ...pulumi.InvokeOption) LookupBrokerResultOutput {
	outputResult := pulumix.ApplyErr[*LookupBrokerArgs](args.ToOutput(), func(plainArgs *LookupBrokerArgs) (*LookupBrokerResult, error) {
		return LookupBroker(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupBrokerResultOutput, *LookupBrokerResult](outputResult)
}

// A collection of arguments for invoking getBroker.
type LookupBrokerOutputArgs struct {
	// Unique id of the mq broker.
	BrokerId pulumix.Input[*string] `pulumi:"brokerId"`
	// Unique name of the mq broker.
	BrokerName pulumix.Input[*string]           `pulumi:"brokerName"`
	Tags       pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupBrokerOutputArgs) ToOutput() pulumix.Output[*LookupBrokerArgs] {
	allArgs := pulumix.All(
		args.BrokerId.ToOutput(context.Background()).AsAny(),
		args.BrokerName.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupBrokerArgs {
		return &LookupBrokerArgs{
			BrokerId:   resolvedArgs[0].(*string),
			BrokerName: resolvedArgs[1].(*string),
			Tags:       resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupBrokerResultOutput struct{ *pulumi.OutputState }

func (LookupBrokerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBrokerResult)(nil)).Elem()
}

func (o LookupBrokerResultOutput) ToOutput(context.Context) pulumix.Output[*LookupBrokerResult] {
	return pulumix.Output[*LookupBrokerResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupBrokerResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) string { return v.Arn })
}

func (o LookupBrokerResultOutput) AuthenticationStrategy() pulumix.Output[string] {
	return pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) string { return v.AuthenticationStrategy })
}

func (o LookupBrokerResultOutput) AutoMinorVersionUpgrade() pulumix.Output[bool] {
	return pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) bool { return v.AutoMinorVersionUpgrade })
}

func (o LookupBrokerResultOutput) BrokerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) string { return v.BrokerId })
}

func (o LookupBrokerResultOutput) BrokerName() pulumix.Output[string] {
	return pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) string { return v.BrokerName })
}

func (o LookupBrokerResultOutput) Configuration() pulumix.GPtrOutput[GetBrokerConfiguration, GetBrokerConfigurationOutput] {
	value := pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) GetBrokerConfiguration { return v.Configuration })
	return pulumix.GPtrOutput[GetBrokerConfiguration, GetBrokerConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupBrokerResultOutput) DeploymentMode() pulumix.Output[string] {
	return pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) string { return v.DeploymentMode })
}

func (o LookupBrokerResultOutput) EncryptionOptions() pulumix.GArrayOutput[GetBrokerEncryptionOption, GetBrokerEncryptionOptionOutput] {
	value := pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) []GetBrokerEncryptionOption { return v.EncryptionOptions })
	return pulumix.GArrayOutput[GetBrokerEncryptionOption, GetBrokerEncryptionOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupBrokerResultOutput) EngineType() pulumix.Output[string] {
	return pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) string { return v.EngineType })
}

func (o LookupBrokerResultOutput) EngineVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) string { return v.EngineVersion })
}

func (o LookupBrokerResultOutput) HostInstanceType() pulumix.Output[string] {
	return pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) string { return v.HostInstanceType })
}

func (o LookupBrokerResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) string { return v.Id })
}

func (o LookupBrokerResultOutput) Instances() pulumix.GArrayOutput[GetBrokerInstance, GetBrokerInstanceOutput] {
	value := pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) []GetBrokerInstance { return v.Instances })
	return pulumix.GArrayOutput[GetBrokerInstance, GetBrokerInstanceOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupBrokerResultOutput) LdapServerMetadatas() pulumix.GArrayOutput[GetBrokerLdapServerMetadata, GetBrokerLdapServerMetadataOutput] {
	value := pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) []GetBrokerLdapServerMetadata { return v.LdapServerMetadatas })
	return pulumix.GArrayOutput[GetBrokerLdapServerMetadata, GetBrokerLdapServerMetadataOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupBrokerResultOutput) Logs() pulumix.GPtrOutput[GetBrokerLogs, GetBrokerLogsOutput] {
	value := pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) GetBrokerLogs { return v.Logs })
	return pulumix.GPtrOutput[GetBrokerLogs, GetBrokerLogsOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupBrokerResultOutput) MaintenanceWindowStartTime() pulumix.GPtrOutput[GetBrokerMaintenanceWindowStartTime, GetBrokerMaintenanceWindowStartTimeOutput] {
	value := pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) GetBrokerMaintenanceWindowStartTime { return v.MaintenanceWindowStartTime })
	return pulumix.GPtrOutput[GetBrokerMaintenanceWindowStartTime, GetBrokerMaintenanceWindowStartTimeOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupBrokerResultOutput) PubliclyAccessible() pulumix.Output[bool] {
	return pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) bool { return v.PubliclyAccessible })
}

func (o LookupBrokerResultOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) []string { return v.SecurityGroups })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupBrokerResultOutput) StorageType() pulumix.Output[string] {
	return pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) string { return v.StorageType })
}

func (o LookupBrokerResultOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupBrokerResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupBrokerResultOutput) Users() pulumix.GArrayOutput[GetBrokerUser, GetBrokerUserOutput] {
	value := pulumix.Apply[*LookupBrokerResult](o, func(v *LookupBrokerResult) []GetBrokerUser { return v.Users })
	return pulumix.GArrayOutput[GetBrokerUser, GetBrokerUserOutput]{
		OutputState: value.OutputState,
	}
}
