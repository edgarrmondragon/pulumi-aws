// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package macie2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ClassificationExportConfigurationS3Destination struct {
	// The Amazon S3 bucket name in which Amazon Macie exports the data classification results.
	BucketName string `pulumi:"bucketName"`
	// The object key for the bucket in which Amazon Macie exports the data classification results.
	KeyPrefix *string `pulumi:"keyPrefix"`
	// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
	//
	// Additional information can be found in the [Storing and retaining sensitive data discovery results with Amazon Macie for AWS Macie documentation](https://docs.aws.amazon.com/macie/latest/user/discovery-results-repository-s3.html).
	KmsKeyArn string `pulumi:"kmsKeyArn"`
}

type ClassificationExportConfigurationS3DestinationArgs struct {
	// The Amazon S3 bucket name in which Amazon Macie exports the data classification results.
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// The object key for the bucket in which Amazon Macie exports the data classification results.
	KeyPrefix pulumix.Input[*string] `pulumi:"keyPrefix"`
	// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
	//
	// Additional information can be found in the [Storing and retaining sensitive data discovery results with Amazon Macie for AWS Macie documentation](https://docs.aws.amazon.com/macie/latest/user/discovery-results-repository-s3.html).
	KmsKeyArn pulumix.Input[string] `pulumi:"kmsKeyArn"`
}

func (ClassificationExportConfigurationS3DestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationExportConfigurationS3Destination)(nil)).Elem()
}

func (i ClassificationExportConfigurationS3DestinationArgs) ToClassificationExportConfigurationS3DestinationOutput() ClassificationExportConfigurationS3DestinationOutput {
	return i.ToClassificationExportConfigurationS3DestinationOutputWithContext(context.Background())
}

func (i ClassificationExportConfigurationS3DestinationArgs) ToClassificationExportConfigurationS3DestinationOutputWithContext(ctx context.Context) ClassificationExportConfigurationS3DestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationExportConfigurationS3DestinationOutput)
}

func (i *ClassificationExportConfigurationS3DestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationExportConfigurationS3DestinationArgs] {
	return pulumix.Val(i)
}

type ClassificationExportConfigurationS3DestinationOutput struct{ *pulumi.OutputState }

func (ClassificationExportConfigurationS3DestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationExportConfigurationS3Destination)(nil)).Elem()
}

func (o ClassificationExportConfigurationS3DestinationOutput) ToClassificationExportConfigurationS3DestinationOutput() ClassificationExportConfigurationS3DestinationOutput {
	return o
}

func (o ClassificationExportConfigurationS3DestinationOutput) ToClassificationExportConfigurationS3DestinationOutputWithContext(ctx context.Context) ClassificationExportConfigurationS3DestinationOutput {
	return o
}

func (o ClassificationExportConfigurationS3DestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationExportConfigurationS3Destination] {
	return pulumix.Output[ClassificationExportConfigurationS3Destination]{
		OutputState: o.OutputState,
	}
}

// The Amazon S3 bucket name in which Amazon Macie exports the data classification results.
func (o ClassificationExportConfigurationS3DestinationOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[ClassificationExportConfigurationS3Destination](o, func(v ClassificationExportConfigurationS3Destination) string { return v.BucketName })
}

// The object key for the bucket in which Amazon Macie exports the data classification results.
func (o ClassificationExportConfigurationS3DestinationOutput) KeyPrefix() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationExportConfigurationS3Destination](o, func(v ClassificationExportConfigurationS3Destination) *string { return v.KeyPrefix })
}

// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
//
// Additional information can be found in the [Storing and retaining sensitive data discovery results with Amazon Macie for AWS Macie documentation](https://docs.aws.amazon.com/macie/latest/user/discovery-results-repository-s3.html).
func (o ClassificationExportConfigurationS3DestinationOutput) KmsKeyArn() pulumix.Output[string] {
	return pulumix.Apply[ClassificationExportConfigurationS3Destination](o, func(v ClassificationExportConfigurationS3Destination) string { return v.KmsKeyArn })
}

type ClassificationJobS3JobDefinition struct {
	// The property- and tag-based conditions that determine which S3 buckets to include or exclude from the analysis. Conflicts with `bucketDefinitions`. (documented below)
	BucketCriteria *ClassificationJobS3JobDefinitionBucketCriteria `pulumi:"bucketCriteria"`
	// An array of objects, one for each AWS account that owns buckets to analyze. Each object specifies the account ID for an account and one or more buckets to analyze for the account. Conflicts with `bucketCriteria`. (documented below)
	BucketDefinitions []ClassificationJobS3JobDefinitionBucketDefinition `pulumi:"bucketDefinitions"`
	// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
	Scoping *ClassificationJobS3JobDefinitionScoping `pulumi:"scoping"`
}

type ClassificationJobS3JobDefinitionArgs struct {
	// The property- and tag-based conditions that determine which S3 buckets to include or exclude from the analysis. Conflicts with `bucketDefinitions`. (documented below)
	BucketCriteria pulumix.Input[*ClassificationJobS3JobDefinitionBucketCriteriaArgs] `pulumi:"bucketCriteria"`
	// An array of objects, one for each AWS account that owns buckets to analyze. Each object specifies the account ID for an account and one or more buckets to analyze for the account. Conflicts with `bucketCriteria`. (documented below)
	BucketDefinitions pulumix.Input[[]*ClassificationJobS3JobDefinitionBucketDefinitionArgs] `pulumi:"bucketDefinitions"`
	// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
	Scoping pulumix.Input[*ClassificationJobS3JobDefinitionScopingArgs] `pulumi:"scoping"`
}

func (ClassificationJobS3JobDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinition)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionArgs) ToClassificationJobS3JobDefinitionOutput() ClassificationJobS3JobDefinitionOutput {
	return i.ToClassificationJobS3JobDefinitionOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionArgs) ToClassificationJobS3JobDefinitionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionOutput)
}

func (i *ClassificationJobS3JobDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinition)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionOutput) ToClassificationJobS3JobDefinitionOutput() ClassificationJobS3JobDefinitionOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionOutput) ToClassificationJobS3JobDefinitionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinition] {
	return pulumix.Output[ClassificationJobS3JobDefinition]{
		OutputState: o.OutputState,
	}
}

// The property- and tag-based conditions that determine which S3 buckets to include or exclude from the analysis. Conflicts with `bucketDefinitions`. (documented below)
func (o ClassificationJobS3JobDefinitionOutput) BucketCriteria() pulumix.GPtrOutput[ClassificationJobS3JobDefinitionBucketCriteria, ClassificationJobS3JobDefinitionBucketCriteriaOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinition](o, func(v ClassificationJobS3JobDefinition) *ClassificationJobS3JobDefinitionBucketCriteria {
		return v.BucketCriteria
	})
	return pulumix.GPtrOutput[ClassificationJobS3JobDefinitionBucketCriteria, ClassificationJobS3JobDefinitionBucketCriteriaOutput]{OutputState: value.OutputState}
}

// An array of objects, one for each AWS account that owns buckets to analyze. Each object specifies the account ID for an account and one or more buckets to analyze for the account. Conflicts with `bucketCriteria`. (documented below)
func (o ClassificationJobS3JobDefinitionOutput) BucketDefinitions() pulumix.GArrayOutput[ClassificationJobS3JobDefinitionBucketDefinition, ClassificationJobS3JobDefinitionBucketDefinitionOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinition](o, func(v ClassificationJobS3JobDefinition) []ClassificationJobS3JobDefinitionBucketDefinition {
		return v.BucketDefinitions
	})
	return pulumix.GArrayOutput[ClassificationJobS3JobDefinitionBucketDefinition, ClassificationJobS3JobDefinitionBucketDefinitionOutput]{OutputState: value.OutputState}
}

// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
func (o ClassificationJobS3JobDefinitionOutput) Scoping() pulumix.GPtrOutput[ClassificationJobS3JobDefinitionScoping, ClassificationJobS3JobDefinitionScopingOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinition](o, func(v ClassificationJobS3JobDefinition) *ClassificationJobS3JobDefinitionScoping { return v.Scoping })
	return pulumix.GPtrOutput[ClassificationJobS3JobDefinitionScoping, ClassificationJobS3JobDefinitionScopingOutput]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionBucketCriteria struct {
	// The property- or tag-based conditions that determine which S3 buckets to exclude from the analysis. (documented below)
	Excludes *ClassificationJobS3JobDefinitionBucketCriteriaExcludes `pulumi:"excludes"`
	// The property- or tag-based conditions that determine which S3 buckets to include in the analysis. (documented below)
	Includes *ClassificationJobS3JobDefinitionBucketCriteriaIncludes `pulumi:"includes"`
}

type ClassificationJobS3JobDefinitionBucketCriteriaArgs struct {
	// The property- or tag-based conditions that determine which S3 buckets to exclude from the analysis. (documented below)
	Excludes pulumix.Input[*ClassificationJobS3JobDefinitionBucketCriteriaExcludesArgs] `pulumi:"excludes"`
	// The property- or tag-based conditions that determine which S3 buckets to include in the analysis. (documented below)
	Includes pulumix.Input[*ClassificationJobS3JobDefinitionBucketCriteriaIncludesArgs] `pulumi:"includes"`
}

func (ClassificationJobS3JobDefinitionBucketCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteria)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaArgs) ToClassificationJobS3JobDefinitionBucketCriteriaOutput() ClassificationJobS3JobDefinitionBucketCriteriaOutput {
	return i.ToClassificationJobS3JobDefinitionBucketCriteriaOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaArgs) ToClassificationJobS3JobDefinitionBucketCriteriaOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionBucketCriteriaOutput)
}

func (i *ClassificationJobS3JobDefinitionBucketCriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionBucketCriteriaArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionBucketCriteriaOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionBucketCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteria)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaOutput) ToClassificationJobS3JobDefinitionBucketCriteriaOutput() ClassificationJobS3JobDefinitionBucketCriteriaOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaOutput) ToClassificationJobS3JobDefinitionBucketCriteriaOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteria] {
	return pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteria]{
		OutputState: o.OutputState,
	}
}

// The property- or tag-based conditions that determine which S3 buckets to exclude from the analysis. (documented below)
func (o ClassificationJobS3JobDefinitionBucketCriteriaOutput) Excludes() pulumix.GPtrOutput[ClassificationJobS3JobDefinitionBucketCriteriaExcludes, ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteria](o, func(v ClassificationJobS3JobDefinitionBucketCriteria) *ClassificationJobS3JobDefinitionBucketCriteriaExcludes {
		return v.Excludes
	})
	return pulumix.GPtrOutput[ClassificationJobS3JobDefinitionBucketCriteriaExcludes, ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput]{OutputState: value.OutputState}
}

// The property- or tag-based conditions that determine which S3 buckets to include in the analysis. (documented below)
func (o ClassificationJobS3JobDefinitionBucketCriteriaOutput) Includes() pulumix.GPtrOutput[ClassificationJobS3JobDefinitionBucketCriteriaIncludes, ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteria](o, func(v ClassificationJobS3JobDefinitionBucketCriteria) *ClassificationJobS3JobDefinitionBucketCriteriaIncludes {
		return v.Includes
	})
	return pulumix.GPtrOutput[ClassificationJobS3JobDefinitionBucketCriteriaIncludes, ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionBucketCriteriaExcludes struct {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	Ands []ClassificationJobS3JobDefinitionBucketCriteriaExcludesAnd `pulumi:"ands"`
}

type ClassificationJobS3JobDefinitionBucketCriteriaExcludesArgs struct {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	Ands pulumix.Input[[]*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndArgs] `pulumi:"ands"`
}

func (ClassificationJobS3JobDefinitionBucketCriteriaExcludesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaExcludes)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaExcludesArgs) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput() ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput {
	return i.ToClassificationJobS3JobDefinitionBucketCriteriaExcludesOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaExcludesArgs) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput)
}

func (i *ClassificationJobS3JobDefinitionBucketCriteriaExcludesArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionBucketCriteriaExcludesArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaExcludes)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput() ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaExcludes] {
	return pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaExcludes]{
		OutputState: o.OutputState,
	}
}

// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput) Ands() pulumix.GArrayOutput[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAnd, ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaExcludes](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaExcludes) []ClassificationJobS3JobDefinitionBucketCriteriaExcludesAnd {
		return v.Ands
	})
	return pulumix.GArrayOutput[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAnd, ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionBucketCriteriaExcludesAnd struct {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
	SimpleCriterion *ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion `pulumi:"simpleCriterion"`
	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
	TagCriterion *ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterion `pulumi:"tagCriterion"`
}

type ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndArgs struct {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
	SimpleCriterion pulumix.Input[*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionArgs] `pulumi:"simpleCriterion"`
	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
	TagCriterion pulumix.Input[*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionArgs] `pulumi:"tagCriterion"`
}

func (ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAnd)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndArgs) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput() ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput {
	return i.ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndArgs) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput)
}

func (i *ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAnd)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput() ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAnd] {
	return pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAnd]{
		OutputState: o.OutputState,
	}
}

// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput) SimpleCriterion() pulumix.GPtrOutput[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion, ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAnd](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaExcludesAnd) *ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion {
		return v.SimpleCriterion
	})
	return pulumix.GPtrOutput[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion, ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput]{OutputState: value.OutputState}
}

// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput) TagCriterion() pulumix.GPtrOutput[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterion, ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAnd](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaExcludesAnd) *ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterion {
		return v.TagCriterion
	})
	return pulumix.GPtrOutput[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterion, ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion struct {
	// The operator to use in a condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-jobcomparator)
	Comparator *string `pulumi:"comparator"`
	// The object property to use in the condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-simplecriterionkeyforjob)
	Key *string `pulumi:"key"`
	// An array that lists the values to use in the condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-simplecriterionforjob)
	Values []string `pulumi:"values"`
}

type ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionArgs struct {
	// The operator to use in a condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-jobcomparator)
	Comparator pulumix.Input[*string] `pulumi:"comparator"`
	// The object property to use in the condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-simplecriterionkeyforjob)
	Key pulumix.Input[*string] `pulumi:"key"`
	// An array that lists the values to use in the condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-simplecriterionforjob)
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionArgs) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput() ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput {
	return i.ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionArgs) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput)
}

func (i *ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput() ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion] {
	return pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion]{
		OutputState: o.OutputState,
	}
}

// The operator to use in a condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-jobcomparator)
func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput) Comparator() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion) *string {
		return v.Comparator
	})
}

// The object property to use in the condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-simplecriterionkeyforjob)
func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion) *string { return v.Key })
}

// An array that lists the values to use in the condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-simplecriterionforjob)
func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterion) []string {
		return v.Values
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterion struct {
	// The operator to use in the condition. Valid combination and values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-jobcomparator)
	Comparator *string `pulumi:"comparator"`
	// The  tag key and value pairs to use in the condition. One or more blocks are allowed. (documented below)
	TagValues []ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValue `pulumi:"tagValues"`
}

type ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionArgs struct {
	// The operator to use in the condition. Valid combination and values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-jobcomparator)
	Comparator pulumix.Input[*string] `pulumi:"comparator"`
	// The  tag key and value pairs to use in the condition. One or more blocks are allowed. (documented below)
	TagValues pulumix.Input[[]*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueArgs] `pulumi:"tagValues"`
}

func (ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterion)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionArgs) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput() ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput {
	return i.ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionArgs) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput)
}

func (i *ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterion)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput() ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterion] {
	return pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterion]{
		OutputState: o.OutputState,
	}
}

// The operator to use in the condition. Valid combination and values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-jobcomparator)
func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput) Comparator() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterion](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterion) *string {
		return v.Comparator
	})
}

// The  tag key and value pairs to use in the condition. One or more blocks are allowed. (documented below)
func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput) TagValues() pulumix.GArrayOutput[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValue, ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterion](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterion) []ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValue {
		return v.TagValues
	})
	return pulumix.GArrayOutput[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValue, ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValue struct {
	// The tag key.
	Key *string `pulumi:"key"`
	// The tag value.
	Value *string `pulumi:"value"`
}

type ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueArgs struct {
	// The tag key.
	Key pulumix.Input[*string] `pulumi:"key"`
	// The tag value.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValue)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueArgs) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput() ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput {
	return i.ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueArgs) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput)
}

func (i *ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValue)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput() ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput) ToClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValue] {
	return pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValue]{
		OutputState: o.OutputState,
	}
}

// The tag key.
func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValue](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValue) *string {
		return v.Key
	})
}

// The tag value.
func (o ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValue](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValue) *string {
		return v.Value
	})
}

type ClassificationJobS3JobDefinitionBucketCriteriaIncludes struct {
	// An array of conditions, one for each condition that determines which S3 buckets to include or exclude from the job. (documented below)
	Ands []ClassificationJobS3JobDefinitionBucketCriteriaIncludesAnd `pulumi:"ands"`
}

type ClassificationJobS3JobDefinitionBucketCriteriaIncludesArgs struct {
	// An array of conditions, one for each condition that determines which S3 buckets to include or exclude from the job. (documented below)
	Ands pulumix.Input[[]*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndArgs] `pulumi:"ands"`
}

func (ClassificationJobS3JobDefinitionBucketCriteriaIncludesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaIncludes)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaIncludesArgs) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput() ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput {
	return i.ToClassificationJobS3JobDefinitionBucketCriteriaIncludesOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaIncludesArgs) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput)
}

func (i *ClassificationJobS3JobDefinitionBucketCriteriaIncludesArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionBucketCriteriaIncludesArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaIncludes)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput() ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaIncludes] {
	return pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaIncludes]{
		OutputState: o.OutputState,
	}
}

// An array of conditions, one for each condition that determines which S3 buckets to include or exclude from the job. (documented below)
func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput) Ands() pulumix.GArrayOutput[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAnd, ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaIncludes](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaIncludes) []ClassificationJobS3JobDefinitionBucketCriteriaIncludesAnd {
		return v.Ands
	})
	return pulumix.GArrayOutput[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAnd, ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionBucketCriteriaIncludesAnd struct {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
	SimpleCriterion *ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion `pulumi:"simpleCriterion"`
	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
	TagCriterion *ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterion `pulumi:"tagCriterion"`
}

type ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndArgs struct {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
	SimpleCriterion pulumix.Input[*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionArgs] `pulumi:"simpleCriterion"`
	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
	TagCriterion pulumix.Input[*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionArgs] `pulumi:"tagCriterion"`
}

func (ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAnd)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndArgs) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput() ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput {
	return i.ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndArgs) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput)
}

func (i *ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAnd)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput() ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAnd] {
	return pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAnd]{
		OutputState: o.OutputState,
	}
}

// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput) SimpleCriterion() pulumix.GPtrOutput[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion, ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAnd](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaIncludesAnd) *ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion {
		return v.SimpleCriterion
	})
	return pulumix.GPtrOutput[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion, ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput]{OutputState: value.OutputState}
}

// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput) TagCriterion() pulumix.GPtrOutput[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterion, ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAnd](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaIncludesAnd) *ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterion {
		return v.TagCriterion
	})
	return pulumix.GPtrOutput[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterion, ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion struct {
	// The operator to use in a condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-jobcomparator)
	Comparator *string `pulumi:"comparator"`
	// The object property to use in the condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-simplecriterionkeyforjob)
	Key *string `pulumi:"key"`
	// An array that lists the values to use in the condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-simplecriterionforjob)
	Values []string `pulumi:"values"`
}

type ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionArgs struct {
	// The operator to use in a condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-jobcomparator)
	Comparator pulumix.Input[*string] `pulumi:"comparator"`
	// The object property to use in the condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-simplecriterionkeyforjob)
	Key pulumix.Input[*string] `pulumi:"key"`
	// An array that lists the values to use in the condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-simplecriterionforjob)
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionArgs) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput() ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput {
	return i.ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionArgs) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput)
}

func (i *ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput() ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion] {
	return pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion]{
		OutputState: o.OutputState,
	}
}

// The operator to use in a condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-jobcomparator)
func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput) Comparator() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion) *string {
		return v.Comparator
	})
}

// The object property to use in the condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-simplecriterionkeyforjob)
func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion) *string { return v.Key })
}

// An array that lists the values to use in the condition. Valid combination of values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-simplecriterionforjob)
func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterion) []string {
		return v.Values
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterion struct {
	// The operator to use in the condition. Valid combination and values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-jobcomparator)
	Comparator *string `pulumi:"comparator"`
	// The  tag key and value pairs to use in the condition. One or more blocks are allowed. (documented below)
	TagValues []ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValue `pulumi:"tagValues"`
}

type ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionArgs struct {
	// The operator to use in the condition. Valid combination and values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-jobcomparator)
	Comparator pulumix.Input[*string] `pulumi:"comparator"`
	// The  tag key and value pairs to use in the condition. One or more blocks are allowed. (documented below)
	TagValues pulumix.Input[[]*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueArgs] `pulumi:"tagValues"`
}

func (ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterion)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionArgs) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput() ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput {
	return i.ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionArgs) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput)
}

func (i *ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterion)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput() ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterion] {
	return pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterion]{
		OutputState: o.OutputState,
	}
}

// The operator to use in the condition. Valid combination and values are available in the [AWS Documentation](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html#jobs-model-jobcomparator)
func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput) Comparator() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterion](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterion) *string {
		return v.Comparator
	})
}

// The  tag key and value pairs to use in the condition. One or more blocks are allowed. (documented below)
func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput) TagValues() pulumix.GArrayOutput[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValue, ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterion](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterion) []ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValue {
		return v.TagValues
	})
	return pulumix.GArrayOutput[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValue, ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValue struct {
	// The tag key.
	Key *string `pulumi:"key"`
	// The tag value.
	Value *string `pulumi:"value"`
}

type ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueArgs struct {
	// The tag key.
	Key pulumix.Input[*string] `pulumi:"key"`
	// The tag value.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValue)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueArgs) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput() ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput {
	return i.ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueArgs) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput)
}

func (i *ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValue)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput() ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput) ToClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValue] {
	return pulumix.Output[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValue]{
		OutputState: o.OutputState,
	}
}

// The tag key.
func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValue](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValue) *string {
		return v.Key
	})
}

// The tag value.
func (o ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValue](o, func(v ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValue) *string {
		return v.Value
	})
}

type ClassificationJobS3JobDefinitionBucketDefinition struct {
	// The unique identifier for the AWS account that owns the buckets.
	AccountId string `pulumi:"accountId"`
	// An array that lists the names of the buckets.
	Buckets []string `pulumi:"buckets"`
}

type ClassificationJobS3JobDefinitionBucketDefinitionArgs struct {
	// The unique identifier for the AWS account that owns the buckets.
	AccountId pulumix.Input[string] `pulumi:"accountId"`
	// An array that lists the names of the buckets.
	Buckets pulumix.Input[[]string] `pulumi:"buckets"`
}

func (ClassificationJobS3JobDefinitionBucketDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketDefinition)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionBucketDefinitionArgs) ToClassificationJobS3JobDefinitionBucketDefinitionOutput() ClassificationJobS3JobDefinitionBucketDefinitionOutput {
	return i.ToClassificationJobS3JobDefinitionBucketDefinitionOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionBucketDefinitionArgs) ToClassificationJobS3JobDefinitionBucketDefinitionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionBucketDefinitionOutput)
}

func (i *ClassificationJobS3JobDefinitionBucketDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionBucketDefinitionArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionBucketDefinitionOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionBucketDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketDefinition)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionBucketDefinitionOutput) ToClassificationJobS3JobDefinitionBucketDefinitionOutput() ClassificationJobS3JobDefinitionBucketDefinitionOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketDefinitionOutput) ToClassificationJobS3JobDefinitionBucketDefinitionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketDefinitionOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionBucketDefinition] {
	return pulumix.Output[ClassificationJobS3JobDefinitionBucketDefinition]{
		OutputState: o.OutputState,
	}
}

// The unique identifier for the AWS account that owns the buckets.
func (o ClassificationJobS3JobDefinitionBucketDefinitionOutput) AccountId() pulumix.Output[string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionBucketDefinition](o, func(v ClassificationJobS3JobDefinitionBucketDefinition) string { return v.AccountId })
}

// An array that lists the names of the buckets.
func (o ClassificationJobS3JobDefinitionBucketDefinitionOutput) Buckets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionBucketDefinition](o, func(v ClassificationJobS3JobDefinitionBucketDefinition) []string { return v.Buckets })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionScoping struct {
	// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
	Excludes *ClassificationJobS3JobDefinitionScopingExcludes `pulumi:"excludes"`
	// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
	Includes *ClassificationJobS3JobDefinitionScopingIncludes `pulumi:"includes"`
}

type ClassificationJobS3JobDefinitionScopingArgs struct {
	// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
	Excludes pulumix.Input[*ClassificationJobS3JobDefinitionScopingExcludesArgs] `pulumi:"excludes"`
	// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
	Includes pulumix.Input[*ClassificationJobS3JobDefinitionScopingIncludesArgs] `pulumi:"includes"`
}

func (ClassificationJobS3JobDefinitionScopingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScoping)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingArgs) ToClassificationJobS3JobDefinitionScopingOutput() ClassificationJobS3JobDefinitionScopingOutput {
	return i.ToClassificationJobS3JobDefinitionScopingOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingArgs) ToClassificationJobS3JobDefinitionScopingOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingOutput)
}

func (i *ClassificationJobS3JobDefinitionScopingArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionScopingArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionScopingOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScoping)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingOutput) ToClassificationJobS3JobDefinitionScopingOutput() ClassificationJobS3JobDefinitionScopingOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingOutput) ToClassificationJobS3JobDefinitionScopingOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionScoping] {
	return pulumix.Output[ClassificationJobS3JobDefinitionScoping]{
		OutputState: o.OutputState,
	}
}

// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
func (o ClassificationJobS3JobDefinitionScopingOutput) Excludes() pulumix.GPtrOutput[ClassificationJobS3JobDefinitionScopingExcludes, ClassificationJobS3JobDefinitionScopingExcludesOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionScoping](o, func(v ClassificationJobS3JobDefinitionScoping) *ClassificationJobS3JobDefinitionScopingExcludes {
		return v.Excludes
	})
	return pulumix.GPtrOutput[ClassificationJobS3JobDefinitionScopingExcludes, ClassificationJobS3JobDefinitionScopingExcludesOutput]{OutputState: value.OutputState}
}

// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
func (o ClassificationJobS3JobDefinitionScopingOutput) Includes() pulumix.GPtrOutput[ClassificationJobS3JobDefinitionScopingIncludes, ClassificationJobS3JobDefinitionScopingIncludesOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionScoping](o, func(v ClassificationJobS3JobDefinitionScoping) *ClassificationJobS3JobDefinitionScopingIncludes {
		return v.Includes
	})
	return pulumix.GPtrOutput[ClassificationJobS3JobDefinitionScopingIncludes, ClassificationJobS3JobDefinitionScopingIncludesOutput]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionScopingExcludes struct {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	Ands []ClassificationJobS3JobDefinitionScopingExcludesAnd `pulumi:"ands"`
}

type ClassificationJobS3JobDefinitionScopingExcludesArgs struct {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	Ands pulumix.Input[[]*ClassificationJobS3JobDefinitionScopingExcludesAndArgs] `pulumi:"ands"`
}

func (ClassificationJobS3JobDefinitionScopingExcludesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludes)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingExcludesArgs) ToClassificationJobS3JobDefinitionScopingExcludesOutput() ClassificationJobS3JobDefinitionScopingExcludesOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingExcludesArgs) ToClassificationJobS3JobDefinitionScopingExcludesOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesOutput)
}

func (i *ClassificationJobS3JobDefinitionScopingExcludesArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionScopingExcludesArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionScopingExcludesOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingExcludesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludes)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingExcludesOutput) ToClassificationJobS3JobDefinitionScopingExcludesOutput() ClassificationJobS3JobDefinitionScopingExcludesOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesOutput) ToClassificationJobS3JobDefinitionScopingExcludesOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionScopingExcludes] {
	return pulumix.Output[ClassificationJobS3JobDefinitionScopingExcludes]{
		OutputState: o.OutputState,
	}
}

// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
func (o ClassificationJobS3JobDefinitionScopingExcludesOutput) Ands() pulumix.GArrayOutput[ClassificationJobS3JobDefinitionScopingExcludesAnd, ClassificationJobS3JobDefinitionScopingExcludesAndOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionScopingExcludes](o, func(v ClassificationJobS3JobDefinitionScopingExcludes) []ClassificationJobS3JobDefinitionScopingExcludesAnd {
		return v.Ands
	})
	return pulumix.GArrayOutput[ClassificationJobS3JobDefinitionScopingExcludesAnd, ClassificationJobS3JobDefinitionScopingExcludesAndOutput]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionScopingExcludesAnd struct {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
	SimpleScopeTerm *ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm `pulumi:"simpleScopeTerm"`
	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
	TagScopeTerm *ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm `pulumi:"tagScopeTerm"`
}

type ClassificationJobS3JobDefinitionScopingExcludesAndArgs struct {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
	SimpleScopeTerm pulumix.Input[*ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs] `pulumi:"simpleScopeTerm"`
	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
	TagScopeTerm pulumix.Input[*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs] `pulumi:"tagScopeTerm"`
}

func (ClassificationJobS3JobDefinitionScopingExcludesAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAnd)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndOutput() ClassificationJobS3JobDefinitionScopingExcludesAndOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesAndOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesAndOutput)
}

func (i *ClassificationJobS3JobDefinitionScopingExcludesAndArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionScopingExcludesAndArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionScopingExcludesAndOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingExcludesAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAnd)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndOutput() ClassificationJobS3JobDefinitionScopingExcludesAndOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionScopingExcludesAnd] {
	return pulumix.Output[ClassificationJobS3JobDefinitionScopingExcludesAnd]{
		OutputState: o.OutputState,
	}
}

// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
func (o ClassificationJobS3JobDefinitionScopingExcludesAndOutput) SimpleScopeTerm() pulumix.GPtrOutput[ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm, ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionScopingExcludesAnd](o, func(v ClassificationJobS3JobDefinitionScopingExcludesAnd) *ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm {
		return v.SimpleScopeTerm
	})
	return pulumix.GPtrOutput[ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm, ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput]{OutputState: value.OutputState}
}

// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
func (o ClassificationJobS3JobDefinitionScopingExcludesAndOutput) TagScopeTerm() pulumix.GPtrOutput[ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm, ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionScopingExcludesAnd](o, func(v ClassificationJobS3JobDefinitionScopingExcludesAnd) *ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm {
		return v.TagScopeTerm
	})
	return pulumix.GPtrOutput[ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm, ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm struct {
	// The operator to use in a condition. Valid values are: `EQ`, `GT`, `GTE`, `LT`, `LTE`, `NE`, `CONTAINS`, `STARTS_WITH`
	Comparator *string `pulumi:"comparator"`
	// The object property to use in the condition.
	Key *string `pulumi:"key"`
	// An array that lists the values to use in the condition.
	Values []string `pulumi:"values"`
}

type ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs struct {
	// The operator to use in a condition. Valid values are: `EQ`, `GT`, `GTE`, `LT`, `LTE`, `NE`, `CONTAINS`, `STARTS_WITH`
	Comparator pulumix.Input[*string] `pulumi:"comparator"`
	// The object property to use in the condition.
	Key pulumix.Input[*string] `pulumi:"key"`
	// An array that lists the values to use in the condition.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput() ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput)
}

func (i *ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput() ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm] {
	return pulumix.Output[ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm]{
		OutputState: o.OutputState,
	}
}

// The operator to use in a condition. Valid values are: `EQ`, `GT`, `GTE`, `LT`, `LTE`, `NE`, `CONTAINS`, `STARTS_WITH`
func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput) Comparator() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm](o, func(v ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm) *string { return v.Comparator })
}

// The object property to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm](o, func(v ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm) *string { return v.Key })
}

// An array that lists the values to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm](o, func(v ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm struct {
	// The operator to use in the condition.
	Comparator *string `pulumi:"comparator"`
	// The tag key to use in the condition. The only valid value is `TAG`.
	Key *string `pulumi:"key"`
	// The tag keys or tag key and value pairs to use in the condition.
	TagValues []ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue `pulumi:"tagValues"`
	// The type of object to apply the condition to. The only valid value is `S3_OBJECT`.
	Target *string `pulumi:"target"`
}

type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs struct {
	// The operator to use in the condition.
	Comparator pulumix.Input[*string] `pulumi:"comparator"`
	// The tag key to use in the condition. The only valid value is `TAG`.
	Key pulumix.Input[*string] `pulumi:"key"`
	// The tag keys or tag key and value pairs to use in the condition.
	TagValues pulumix.Input[[]*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs] `pulumi:"tagValues"`
	// The type of object to apply the condition to. The only valid value is `S3_OBJECT`.
	Target pulumix.Input[*string] `pulumi:"target"`
}

func (ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput)
}

func (i *ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm] {
	return pulumix.Output[ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm]{
		OutputState: o.OutputState,
	}
}

// The operator to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) Comparator() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm](o, func(v ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm) *string { return v.Comparator })
}

// The tag key to use in the condition. The only valid value is `TAG`.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm](o, func(v ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm) *string { return v.Key })
}

// The tag keys or tag key and value pairs to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) TagValues() pulumix.GArrayOutput[ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue, ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm](o, func(v ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm) []ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue {
		return v.TagValues
	})
	return pulumix.GArrayOutput[ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue, ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput]{OutputState: value.OutputState}
}

// The type of object to apply the condition to. The only valid value is `S3_OBJECT`.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) Target() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm](o, func(v ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm) *string { return v.Target })
}

type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue struct {
	// The tag key.
	Key *string `pulumi:"key"`
	// The tag value.
	Value *string `pulumi:"value"`
}

type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs struct {
	// The tag key.
	Key pulumix.Input[*string] `pulumi:"key"`
	// The tag value.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput)
}

func (i *ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue] {
	return pulumix.Output[ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue]{
		OutputState: o.OutputState,
	}
}

// The tag key.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue](o, func(v ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue) *string { return v.Key })
}

// The tag value.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue](o, func(v ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue) *string { return v.Value })
}

type ClassificationJobS3JobDefinitionScopingIncludes struct {
	// An array of conditions, one for each condition that determines which S3 buckets to include or exclude from the job. (documented below)
	Ands []ClassificationJobS3JobDefinitionScopingIncludesAnd `pulumi:"ands"`
}

type ClassificationJobS3JobDefinitionScopingIncludesArgs struct {
	// An array of conditions, one for each condition that determines which S3 buckets to include or exclude from the job. (documented below)
	Ands pulumix.Input[[]*ClassificationJobS3JobDefinitionScopingIncludesAndArgs] `pulumi:"ands"`
}

func (ClassificationJobS3JobDefinitionScopingIncludesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludes)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingIncludesArgs) ToClassificationJobS3JobDefinitionScopingIncludesOutput() ClassificationJobS3JobDefinitionScopingIncludesOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingIncludesArgs) ToClassificationJobS3JobDefinitionScopingIncludesOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesOutput)
}

func (i *ClassificationJobS3JobDefinitionScopingIncludesArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionScopingIncludesArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionScopingIncludesOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingIncludesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludes)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingIncludesOutput) ToClassificationJobS3JobDefinitionScopingIncludesOutput() ClassificationJobS3JobDefinitionScopingIncludesOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesOutput) ToClassificationJobS3JobDefinitionScopingIncludesOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionScopingIncludes] {
	return pulumix.Output[ClassificationJobS3JobDefinitionScopingIncludes]{
		OutputState: o.OutputState,
	}
}

// An array of conditions, one for each condition that determines which S3 buckets to include or exclude from the job. (documented below)
func (o ClassificationJobS3JobDefinitionScopingIncludesOutput) Ands() pulumix.GArrayOutput[ClassificationJobS3JobDefinitionScopingIncludesAnd, ClassificationJobS3JobDefinitionScopingIncludesAndOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionScopingIncludes](o, func(v ClassificationJobS3JobDefinitionScopingIncludes) []ClassificationJobS3JobDefinitionScopingIncludesAnd {
		return v.Ands
	})
	return pulumix.GArrayOutput[ClassificationJobS3JobDefinitionScopingIncludesAnd, ClassificationJobS3JobDefinitionScopingIncludesAndOutput]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionScopingIncludesAnd struct {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
	SimpleScopeTerm *ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm `pulumi:"simpleScopeTerm"`
	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
	TagScopeTerm *ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm `pulumi:"tagScopeTerm"`
}

type ClassificationJobS3JobDefinitionScopingIncludesAndArgs struct {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
	SimpleScopeTerm pulumix.Input[*ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs] `pulumi:"simpleScopeTerm"`
	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
	TagScopeTerm pulumix.Input[*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs] `pulumi:"tagScopeTerm"`
}

func (ClassificationJobS3JobDefinitionScopingIncludesAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAnd)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndOutput() ClassificationJobS3JobDefinitionScopingIncludesAndOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesAndOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesAndOutput)
}

func (i *ClassificationJobS3JobDefinitionScopingIncludesAndArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionScopingIncludesAndArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionScopingIncludesAndOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingIncludesAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAnd)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndOutput() ClassificationJobS3JobDefinitionScopingIncludesAndOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionScopingIncludesAnd] {
	return pulumix.Output[ClassificationJobS3JobDefinitionScopingIncludesAnd]{
		OutputState: o.OutputState,
	}
}

// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
func (o ClassificationJobS3JobDefinitionScopingIncludesAndOutput) SimpleScopeTerm() pulumix.GPtrOutput[ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm, ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionScopingIncludesAnd](o, func(v ClassificationJobS3JobDefinitionScopingIncludesAnd) *ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm {
		return v.SimpleScopeTerm
	})
	return pulumix.GPtrOutput[ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm, ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput]{OutputState: value.OutputState}
}

// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
func (o ClassificationJobS3JobDefinitionScopingIncludesAndOutput) TagScopeTerm() pulumix.GPtrOutput[ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm, ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionScopingIncludesAnd](o, func(v ClassificationJobS3JobDefinitionScopingIncludesAnd) *ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm {
		return v.TagScopeTerm
	})
	return pulumix.GPtrOutput[ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm, ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm struct {
	// The operator to use in a condition. Valid values are: `EQ`, `GT`, `GTE`, `LT`, `LTE`, `NE`, `CONTAINS`, `STARTS_WITH`
	Comparator *string `pulumi:"comparator"`
	// The object property to use in the condition.
	Key *string `pulumi:"key"`
	// An array that lists the values to use in the condition.
	Values []string `pulumi:"values"`
}

type ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs struct {
	// The operator to use in a condition. Valid values are: `EQ`, `GT`, `GTE`, `LT`, `LTE`, `NE`, `CONTAINS`, `STARTS_WITH`
	Comparator pulumix.Input[*string] `pulumi:"comparator"`
	// The object property to use in the condition.
	Key pulumix.Input[*string] `pulumi:"key"`
	// An array that lists the values to use in the condition.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput() ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput)
}

func (i *ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput() ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm] {
	return pulumix.Output[ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm]{
		OutputState: o.OutputState,
	}
}

// The operator to use in a condition. Valid values are: `EQ`, `GT`, `GTE`, `LT`, `LTE`, `NE`, `CONTAINS`, `STARTS_WITH`
func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput) Comparator() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm](o, func(v ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm) *string { return v.Comparator })
}

// The object property to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm](o, func(v ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm) *string { return v.Key })
}

// An array that lists the values to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm](o, func(v ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm struct {
	// The operator to use in the condition.
	Comparator *string `pulumi:"comparator"`
	// The tag key to use in the condition. The only valid value is `TAG`.
	Key *string `pulumi:"key"`
	// The tag keys or tag key and value pairs to use in the condition.
	TagValues []ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue `pulumi:"tagValues"`
	// The type of object to apply the condition to. The only valid value is `S3_OBJECT`.
	Target *string `pulumi:"target"`
}

type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs struct {
	// The operator to use in the condition.
	Comparator pulumix.Input[*string] `pulumi:"comparator"`
	// The tag key to use in the condition. The only valid value is `TAG`.
	Key pulumix.Input[*string] `pulumi:"key"`
	// The tag keys or tag key and value pairs to use in the condition.
	TagValues pulumix.Input[[]*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArgs] `pulumi:"tagValues"`
	// The type of object to apply the condition to. The only valid value is `S3_OBJECT`.
	Target pulumix.Input[*string] `pulumi:"target"`
}

func (ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput)
}

func (i *ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm] {
	return pulumix.Output[ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm]{
		OutputState: o.OutputState,
	}
}

// The operator to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) Comparator() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm](o, func(v ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm) *string { return v.Comparator })
}

// The tag key to use in the condition. The only valid value is `TAG`.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm](o, func(v ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm) *string { return v.Key })
}

// The tag keys or tag key and value pairs to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) TagValues() pulumix.GArrayOutput[ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue, ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput] {
	value := pulumix.Apply[ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm](o, func(v ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm) []ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue {
		return v.TagValues
	})
	return pulumix.GArrayOutput[ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue, ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput]{OutputState: value.OutputState}
}

// The type of object to apply the condition to. The only valid value is `S3_OBJECT`.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) Target() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm](o, func(v ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm) *string { return v.Target })
}

type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue struct {
	// The tag key.
	Key *string `pulumi:"key"`
	// The tag value.
	Value *string `pulumi:"value"`
}

type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArgs struct {
	// The tag key.
	Key pulumix.Input[*string] `pulumi:"key"`
	// The tag value.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput)
}

func (i *ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArgs] {
	return pulumix.Val(i)
}

type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue] {
	return pulumix.Output[ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue]{
		OutputState: o.OutputState,
	}
}

// The tag key.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue](o, func(v ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue) *string { return v.Key })
}

// The tag value.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue](o, func(v ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue) *string { return v.Value })
}

type ClassificationJobScheduleFrequency struct {
	// Specifies a daily recurrence pattern for running the job.
	DailySchedule *bool `pulumi:"dailySchedule"`
	// Specifies a monthly recurrence pattern for running the job.
	//
	// The `s3JobDefinition` object supports the following:
	MonthlySchedule *int `pulumi:"monthlySchedule"`
	// Specifies a weekly recurrence pattern for running the job.
	WeeklySchedule *string `pulumi:"weeklySchedule"`
}

type ClassificationJobScheduleFrequencyArgs struct {
	// Specifies a daily recurrence pattern for running the job.
	DailySchedule pulumix.Input[*bool] `pulumi:"dailySchedule"`
	// Specifies a monthly recurrence pattern for running the job.
	//
	// The `s3JobDefinition` object supports the following:
	MonthlySchedule pulumix.Input[*int] `pulumi:"monthlySchedule"`
	// Specifies a weekly recurrence pattern for running the job.
	WeeklySchedule pulumix.Input[*string] `pulumi:"weeklySchedule"`
}

func (ClassificationJobScheduleFrequencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobScheduleFrequency)(nil)).Elem()
}

func (i ClassificationJobScheduleFrequencyArgs) ToClassificationJobScheduleFrequencyOutput() ClassificationJobScheduleFrequencyOutput {
	return i.ToClassificationJobScheduleFrequencyOutputWithContext(context.Background())
}

func (i ClassificationJobScheduleFrequencyArgs) ToClassificationJobScheduleFrequencyOutputWithContext(ctx context.Context) ClassificationJobScheduleFrequencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobScheduleFrequencyOutput)
}

func (i *ClassificationJobScheduleFrequencyArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobScheduleFrequencyArgs] {
	return pulumix.Val(i)
}

type ClassificationJobScheduleFrequencyOutput struct{ *pulumi.OutputState }

func (ClassificationJobScheduleFrequencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobScheduleFrequency)(nil)).Elem()
}

func (o ClassificationJobScheduleFrequencyOutput) ToClassificationJobScheduleFrequencyOutput() ClassificationJobScheduleFrequencyOutput {
	return o
}

func (o ClassificationJobScheduleFrequencyOutput) ToClassificationJobScheduleFrequencyOutputWithContext(ctx context.Context) ClassificationJobScheduleFrequencyOutput {
	return o
}

func (o ClassificationJobScheduleFrequencyOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobScheduleFrequency] {
	return pulumix.Output[ClassificationJobScheduleFrequency]{
		OutputState: o.OutputState,
	}
}

// Specifies a daily recurrence pattern for running the job.
func (o ClassificationJobScheduleFrequencyOutput) DailySchedule() pulumix.Output[*bool] {
	return pulumix.Apply[ClassificationJobScheduleFrequency](o, func(v ClassificationJobScheduleFrequency) *bool { return v.DailySchedule })
}

// Specifies a monthly recurrence pattern for running the job.
//
// The `s3JobDefinition` object supports the following:
func (o ClassificationJobScheduleFrequencyOutput) MonthlySchedule() pulumix.Output[*int] {
	return pulumix.Apply[ClassificationJobScheduleFrequency](o, func(v ClassificationJobScheduleFrequency) *int { return v.MonthlySchedule })
}

// Specifies a weekly recurrence pattern for running the job.
func (o ClassificationJobScheduleFrequencyOutput) WeeklySchedule() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobScheduleFrequency](o, func(v ClassificationJobScheduleFrequency) *string { return v.WeeklySchedule })
}

type ClassificationJobUserPausedDetail struct {
	JobExpiresAt                        *string `pulumi:"jobExpiresAt"`
	JobImminentExpirationHealthEventArn *string `pulumi:"jobImminentExpirationHealthEventArn"`
	JobPausedAt                         *string `pulumi:"jobPausedAt"`
}

type ClassificationJobUserPausedDetailArgs struct {
	JobExpiresAt                        pulumix.Input[*string] `pulumi:"jobExpiresAt"`
	JobImminentExpirationHealthEventArn pulumix.Input[*string] `pulumi:"jobImminentExpirationHealthEventArn"`
	JobPausedAt                         pulumix.Input[*string] `pulumi:"jobPausedAt"`
}

func (ClassificationJobUserPausedDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobUserPausedDetail)(nil)).Elem()
}

func (i ClassificationJobUserPausedDetailArgs) ToClassificationJobUserPausedDetailOutput() ClassificationJobUserPausedDetailOutput {
	return i.ToClassificationJobUserPausedDetailOutputWithContext(context.Background())
}

func (i ClassificationJobUserPausedDetailArgs) ToClassificationJobUserPausedDetailOutputWithContext(ctx context.Context) ClassificationJobUserPausedDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobUserPausedDetailOutput)
}

func (i *ClassificationJobUserPausedDetailArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassificationJobUserPausedDetailArgs] {
	return pulumix.Val(i)
}

type ClassificationJobUserPausedDetailOutput struct{ *pulumi.OutputState }

func (ClassificationJobUserPausedDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobUserPausedDetail)(nil)).Elem()
}

func (o ClassificationJobUserPausedDetailOutput) ToClassificationJobUserPausedDetailOutput() ClassificationJobUserPausedDetailOutput {
	return o
}

func (o ClassificationJobUserPausedDetailOutput) ToClassificationJobUserPausedDetailOutputWithContext(ctx context.Context) ClassificationJobUserPausedDetailOutput {
	return o
}

func (o ClassificationJobUserPausedDetailOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJobUserPausedDetail] {
	return pulumix.Output[ClassificationJobUserPausedDetail]{
		OutputState: o.OutputState,
	}
}

func (o ClassificationJobUserPausedDetailOutput) JobExpiresAt() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobUserPausedDetail](o, func(v ClassificationJobUserPausedDetail) *string { return v.JobExpiresAt })
}

func (o ClassificationJobUserPausedDetailOutput) JobImminentExpirationHealthEventArn() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobUserPausedDetail](o, func(v ClassificationJobUserPausedDetail) *string { return v.JobImminentExpirationHealthEventArn })
}

func (o ClassificationJobUserPausedDetailOutput) JobPausedAt() pulumix.Output[*string] {
	return pulumix.Apply[ClassificationJobUserPausedDetail](o, func(v ClassificationJobUserPausedDetail) *string { return v.JobPausedAt })
}

func init() {
	pulumi.RegisterOutputType(ClassificationExportConfigurationS3DestinationOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionBucketCriteriaOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValueOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValueOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionBucketDefinitionOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingExcludesOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingExcludesAndOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingIncludesOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingIncludesAndOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput{})
	pulumi.RegisterOutputType(ClassificationJobScheduleFrequencyOutput{})
	pulumi.RegisterOutputType(ClassificationJobUserPausedDetailOutput{})
}
