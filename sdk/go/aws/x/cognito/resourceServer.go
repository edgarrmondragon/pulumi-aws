// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Cognito Resource Server.
type ResourceServer struct {
	pulumi.CustomResourceState

	// An identifier for the resource server.
	Identifier pulumix.Output[string] `pulumi:"identifier"`
	// A name for the resource server.
	Name pulumix.Output[string] `pulumi:"name"`
	// A list of all scopes configured for this resource server in the format identifier/scope_name.
	ScopeIdentifiers pulumix.ArrayOutput[string] `pulumi:"scopeIdentifiers"`
	// A list of Authorization Scope.
	Scopes     pulumix.GArrayOutput[ResourceServerScope, ResourceServerScopeOutput] `pulumi:"scopes"`
	UserPoolId pulumix.Output[string]                                               `pulumi:"userPoolId"`
}

// NewResourceServer registers a new resource with the given unique name, arguments, and options.
func NewResourceServer(ctx *pulumi.Context,
	name string, args *ResourceServerArgs, opts ...pulumi.ResourceOption) (*ResourceServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceServer
	err := ctx.RegisterResource("aws:cognito/resourceServer:ResourceServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceServer gets an existing ResourceServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceServerState, opts ...pulumi.ResourceOption) (*ResourceServer, error) {
	var resource ResourceServer
	err := ctx.ReadResource("aws:cognito/resourceServer:ResourceServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceServer resources.
type resourceServerState struct {
	// An identifier for the resource server.
	Identifier *string `pulumi:"identifier"`
	// A name for the resource server.
	Name *string `pulumi:"name"`
	// A list of all scopes configured for this resource server in the format identifier/scope_name.
	ScopeIdentifiers []string `pulumi:"scopeIdentifiers"`
	// A list of Authorization Scope.
	Scopes     []ResourceServerScope `pulumi:"scopes"`
	UserPoolId *string               `pulumi:"userPoolId"`
}

type ResourceServerState struct {
	// An identifier for the resource server.
	Identifier pulumix.Input[*string]
	// A name for the resource server.
	Name pulumix.Input[*string]
	// A list of all scopes configured for this resource server in the format identifier/scope_name.
	ScopeIdentifiers pulumix.Input[[]string]
	// A list of Authorization Scope.
	Scopes     pulumix.Input[[]*ResourceServerScopeArgs]
	UserPoolId pulumix.Input[*string]
}

func (ResourceServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceServerState)(nil)).Elem()
}

type resourceServerArgs struct {
	// An identifier for the resource server.
	Identifier string `pulumi:"identifier"`
	// A name for the resource server.
	Name *string `pulumi:"name"`
	// A list of Authorization Scope.
	Scopes     []ResourceServerScope `pulumi:"scopes"`
	UserPoolId string                `pulumi:"userPoolId"`
}

// The set of arguments for constructing a ResourceServer resource.
type ResourceServerArgs struct {
	// An identifier for the resource server.
	Identifier pulumix.Input[string]
	// A name for the resource server.
	Name pulumix.Input[*string]
	// A list of Authorization Scope.
	Scopes     pulumix.Input[[]*ResourceServerScopeArgs]
	UserPoolId pulumix.Input[string]
}

func (ResourceServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceServerArgs)(nil)).Elem()
}

type ResourceServerOutput struct{ *pulumi.OutputState }

func (ResourceServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceServer)(nil)).Elem()
}

func (o ResourceServerOutput) ToResourceServerOutput() ResourceServerOutput {
	return o
}

func (o ResourceServerOutput) ToResourceServerOutputWithContext(ctx context.Context) ResourceServerOutput {
	return o
}

func (o ResourceServerOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceServer] {
	return pulumix.Output[ResourceServer]{
		OutputState: o.OutputState,
	}
}

// An identifier for the resource server.
func (o ResourceServerOutput) Identifier() pulumix.Output[string] {
	value := pulumix.Apply[ResourceServer](o, func(v ResourceServer) pulumix.Output[string] { return v.Identifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A name for the resource server.
func (o ResourceServerOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ResourceServer](o, func(v ResourceServer) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of all scopes configured for this resource server in the format identifier/scope_name.
func (o ResourceServerOutput) ScopeIdentifiers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ResourceServer](o, func(v ResourceServer) pulumix.ArrayOutput[string] { return v.ScopeIdentifiers })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A list of Authorization Scope.
func (o ResourceServerOutput) Scopes() pulumix.GArrayOutput[ResourceServerScope, ResourceServerScopeOutput] {
	value := pulumix.Apply[ResourceServer](o, func(v ResourceServer) pulumix.GArrayOutput[ResourceServerScope, ResourceServerScopeOutput] {
		return v.Scopes
	})
	unwrapped := pulumix.Flatten[[]ResourceServerScope, pulumix.GArrayOutput[ResourceServerScope, ResourceServerScopeOutput]](value)
	return pulumix.GArrayOutput[ResourceServerScope, ResourceServerScopeOutput]{OutputState: unwrapped.OutputState}
}

func (o ResourceServerOutput) UserPoolId() pulumix.Output[string] {
	value := pulumix.Apply[ResourceServer](o, func(v ResourceServer) pulumix.Output[string] { return v.UserPoolId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ResourceServerOutput{})
}
