// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transcribe

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Transcribe VocabularyFilter.
type VocabularyFilter struct {
	pulumi.CustomResourceState

	// ARN of the VocabularyFilter.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Generated download URI.
	DownloadUri pulumix.Output[string] `pulumi:"downloadUri"`
	// The language code you selected for your vocabulary filter. Refer to the [supported languages](https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html) page for accepted codes.
	LanguageCode pulumix.Output[string] `pulumi:"languageCode"`
	// A map of tags to assign to the VocabularyFilter. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The Amazon S3 location (URI) of the text file that contains your custom VocabularyFilter. Conflicts with `words` argument.
	VocabularyFilterFileUri pulumix.Output[*string] `pulumi:"vocabularyFilterFileUri"`
	// The name of the VocabularyFilter.
	//
	// The following arguments are optional:
	VocabularyFilterName pulumix.Output[string] `pulumi:"vocabularyFilterName"`
	// A list of terms to include in the vocabulary. Conflicts with `vocabularyFilterFileUri` argument.
	Words pulumix.ArrayOutput[string] `pulumi:"words"`
}

// NewVocabularyFilter registers a new resource with the given unique name, arguments, and options.
func NewVocabularyFilter(ctx *pulumi.Context,
	name string, args *VocabularyFilterArgs, opts ...pulumi.ResourceOption) (*VocabularyFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LanguageCode == nil {
		return nil, errors.New("invalid value for required argument 'LanguageCode'")
	}
	if args.VocabularyFilterName == nil {
		return nil, errors.New("invalid value for required argument 'VocabularyFilterName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VocabularyFilter
	err := ctx.RegisterResource("aws:transcribe/vocabularyFilter:VocabularyFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVocabularyFilter gets an existing VocabularyFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVocabularyFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VocabularyFilterState, opts ...pulumi.ResourceOption) (*VocabularyFilter, error) {
	var resource VocabularyFilter
	err := ctx.ReadResource("aws:transcribe/vocabularyFilter:VocabularyFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VocabularyFilter resources.
type vocabularyFilterState struct {
	// ARN of the VocabularyFilter.
	Arn *string `pulumi:"arn"`
	// Generated download URI.
	DownloadUri *string `pulumi:"downloadUri"`
	// The language code you selected for your vocabulary filter. Refer to the [supported languages](https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html) page for accepted codes.
	LanguageCode *string `pulumi:"languageCode"`
	// A map of tags to assign to the VocabularyFilter. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The Amazon S3 location (URI) of the text file that contains your custom VocabularyFilter. Conflicts with `words` argument.
	VocabularyFilterFileUri *string `pulumi:"vocabularyFilterFileUri"`
	// The name of the VocabularyFilter.
	//
	// The following arguments are optional:
	VocabularyFilterName *string `pulumi:"vocabularyFilterName"`
	// A list of terms to include in the vocabulary. Conflicts with `vocabularyFilterFileUri` argument.
	Words []string `pulumi:"words"`
}

type VocabularyFilterState struct {
	// ARN of the VocabularyFilter.
	Arn pulumix.Input[*string]
	// Generated download URI.
	DownloadUri pulumix.Input[*string]
	// The language code you selected for your vocabulary filter. Refer to the [supported languages](https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html) page for accepted codes.
	LanguageCode pulumix.Input[*string]
	// A map of tags to assign to the VocabularyFilter. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// The Amazon S3 location (URI) of the text file that contains your custom VocabularyFilter. Conflicts with `words` argument.
	VocabularyFilterFileUri pulumix.Input[*string]
	// The name of the VocabularyFilter.
	//
	// The following arguments are optional:
	VocabularyFilterName pulumix.Input[*string]
	// A list of terms to include in the vocabulary. Conflicts with `vocabularyFilterFileUri` argument.
	Words pulumix.Input[[]string]
}

func (VocabularyFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*vocabularyFilterState)(nil)).Elem()
}

type vocabularyFilterArgs struct {
	// The language code you selected for your vocabulary filter. Refer to the [supported languages](https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html) page for accepted codes.
	LanguageCode string `pulumi:"languageCode"`
	// A map of tags to assign to the VocabularyFilter. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The Amazon S3 location (URI) of the text file that contains your custom VocabularyFilter. Conflicts with `words` argument.
	VocabularyFilterFileUri *string `pulumi:"vocabularyFilterFileUri"`
	// The name of the VocabularyFilter.
	//
	// The following arguments are optional:
	VocabularyFilterName string `pulumi:"vocabularyFilterName"`
	// A list of terms to include in the vocabulary. Conflicts with `vocabularyFilterFileUri` argument.
	Words []string `pulumi:"words"`
}

// The set of arguments for constructing a VocabularyFilter resource.
type VocabularyFilterArgs struct {
	// The language code you selected for your vocabulary filter. Refer to the [supported languages](https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html) page for accepted codes.
	LanguageCode pulumix.Input[string]
	// A map of tags to assign to the VocabularyFilter. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The Amazon S3 location (URI) of the text file that contains your custom VocabularyFilter. Conflicts with `words` argument.
	VocabularyFilterFileUri pulumix.Input[*string]
	// The name of the VocabularyFilter.
	//
	// The following arguments are optional:
	VocabularyFilterName pulumix.Input[string]
	// A list of terms to include in the vocabulary. Conflicts with `vocabularyFilterFileUri` argument.
	Words pulumix.Input[[]string]
}

func (VocabularyFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vocabularyFilterArgs)(nil)).Elem()
}

type VocabularyFilterOutput struct{ *pulumi.OutputState }

func (VocabularyFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VocabularyFilter)(nil)).Elem()
}

func (o VocabularyFilterOutput) ToVocabularyFilterOutput() VocabularyFilterOutput {
	return o
}

func (o VocabularyFilterOutput) ToVocabularyFilterOutputWithContext(ctx context.Context) VocabularyFilterOutput {
	return o
}

func (o VocabularyFilterOutput) ToOutput(ctx context.Context) pulumix.Output[VocabularyFilter] {
	return pulumix.Output[VocabularyFilter]{
		OutputState: o.OutputState,
	}
}

// ARN of the VocabularyFilter.
func (o VocabularyFilterOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[VocabularyFilter](o, func(v VocabularyFilter) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Generated download URI.
func (o VocabularyFilterOutput) DownloadUri() pulumix.Output[string] {
	value := pulumix.Apply[VocabularyFilter](o, func(v VocabularyFilter) pulumix.Output[string] { return v.DownloadUri })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The language code you selected for your vocabulary filter. Refer to the [supported languages](https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html) page for accepted codes.
func (o VocabularyFilterOutput) LanguageCode() pulumix.Output[string] {
	value := pulumix.Apply[VocabularyFilter](o, func(v VocabularyFilter) pulumix.Output[string] { return v.LanguageCode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the VocabularyFilter. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VocabularyFilterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VocabularyFilter](o, func(v VocabularyFilter) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o VocabularyFilterOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VocabularyFilter](o, func(v VocabularyFilter) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The Amazon S3 location (URI) of the text file that contains your custom VocabularyFilter. Conflicts with `words` argument.
func (o VocabularyFilterOutput) VocabularyFilterFileUri() pulumix.Output[*string] {
	value := pulumix.Apply[VocabularyFilter](o, func(v VocabularyFilter) pulumix.Output[*string] { return v.VocabularyFilterFileUri })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the VocabularyFilter.
//
// The following arguments are optional:
func (o VocabularyFilterOutput) VocabularyFilterName() pulumix.Output[string] {
	value := pulumix.Apply[VocabularyFilter](o, func(v VocabularyFilter) pulumix.Output[string] { return v.VocabularyFilterName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of terms to include in the vocabulary. Conflicts with `vocabularyFilterFileUri` argument.
func (o VocabularyFilterOutput) Words() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VocabularyFilter](o, func(v VocabularyFilter) pulumix.ArrayOutput[string] { return v.Words })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(VocabularyFilterOutput{})
}
