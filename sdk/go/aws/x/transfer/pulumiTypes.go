// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AccessHomeDirectoryMapping struct {
	// Represents an entry and a target.
	Entry string `pulumi:"entry"`
	// Represents the map target.
	Target string `pulumi:"target"`
}

type AccessHomeDirectoryMappingArgs struct {
	// Represents an entry and a target.
	Entry pulumix.Input[string] `pulumi:"entry"`
	// Represents the map target.
	Target pulumix.Input[string] `pulumi:"target"`
}

func (AccessHomeDirectoryMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessHomeDirectoryMapping)(nil)).Elem()
}

func (i AccessHomeDirectoryMappingArgs) ToAccessHomeDirectoryMappingOutput() AccessHomeDirectoryMappingOutput {
	return i.ToAccessHomeDirectoryMappingOutputWithContext(context.Background())
}

func (i AccessHomeDirectoryMappingArgs) ToAccessHomeDirectoryMappingOutputWithContext(ctx context.Context) AccessHomeDirectoryMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessHomeDirectoryMappingOutput)
}

func (i *AccessHomeDirectoryMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*AccessHomeDirectoryMappingArgs] {
	return pulumix.Val(i)
}

type AccessHomeDirectoryMappingOutput struct{ *pulumi.OutputState }

func (AccessHomeDirectoryMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessHomeDirectoryMapping)(nil)).Elem()
}

func (o AccessHomeDirectoryMappingOutput) ToAccessHomeDirectoryMappingOutput() AccessHomeDirectoryMappingOutput {
	return o
}

func (o AccessHomeDirectoryMappingOutput) ToAccessHomeDirectoryMappingOutputWithContext(ctx context.Context) AccessHomeDirectoryMappingOutput {
	return o
}

func (o AccessHomeDirectoryMappingOutput) ToOutput(ctx context.Context) pulumix.Output[AccessHomeDirectoryMapping] {
	return pulumix.Output[AccessHomeDirectoryMapping]{
		OutputState: o.OutputState,
	}
}

// Represents an entry and a target.
func (o AccessHomeDirectoryMappingOutput) Entry() pulumix.Output[string] {
	return pulumix.Apply[AccessHomeDirectoryMapping](o, func(v AccessHomeDirectoryMapping) string { return v.Entry })
}

// Represents the map target.
func (o AccessHomeDirectoryMappingOutput) Target() pulumix.Output[string] {
	return pulumix.Apply[AccessHomeDirectoryMapping](o, func(v AccessHomeDirectoryMapping) string { return v.Target })
}

type AccessPosixProfile struct {
	// The POSIX group ID used for all EFS operations by this user.
	Gid int `pulumi:"gid"`
	// The secondary POSIX group IDs used for all EFS operations by this user.
	SecondaryGids []int `pulumi:"secondaryGids"`
	// The POSIX user ID used for all EFS operations by this user.
	Uid int `pulumi:"uid"`
}

type AccessPosixProfileArgs struct {
	// The POSIX group ID used for all EFS operations by this user.
	Gid pulumix.Input[int] `pulumi:"gid"`
	// The secondary POSIX group IDs used for all EFS operations by this user.
	SecondaryGids pulumix.Input[[]int] `pulumi:"secondaryGids"`
	// The POSIX user ID used for all EFS operations by this user.
	Uid pulumix.Input[int] `pulumi:"uid"`
}

func (AccessPosixProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPosixProfile)(nil)).Elem()
}

func (i AccessPosixProfileArgs) ToAccessPosixProfileOutput() AccessPosixProfileOutput {
	return i.ToAccessPosixProfileOutputWithContext(context.Background())
}

func (i AccessPosixProfileArgs) ToAccessPosixProfileOutputWithContext(ctx context.Context) AccessPosixProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPosixProfileOutput)
}

func (i *AccessPosixProfileArgs) ToOutput(ctx context.Context) pulumix.Output[*AccessPosixProfileArgs] {
	return pulumix.Val(i)
}

type AccessPosixProfileOutput struct{ *pulumi.OutputState }

func (AccessPosixProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPosixProfile)(nil)).Elem()
}

func (o AccessPosixProfileOutput) ToAccessPosixProfileOutput() AccessPosixProfileOutput {
	return o
}

func (o AccessPosixProfileOutput) ToAccessPosixProfileOutputWithContext(ctx context.Context) AccessPosixProfileOutput {
	return o
}

func (o AccessPosixProfileOutput) ToOutput(ctx context.Context) pulumix.Output[AccessPosixProfile] {
	return pulumix.Output[AccessPosixProfile]{
		OutputState: o.OutputState,
	}
}

// The POSIX group ID used for all EFS operations by this user.
func (o AccessPosixProfileOutput) Gid() pulumix.Output[int] {
	return pulumix.Apply[AccessPosixProfile](o, func(v AccessPosixProfile) int { return v.Gid })
}

// The secondary POSIX group IDs used for all EFS operations by this user.
func (o AccessPosixProfileOutput) SecondaryGids() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[AccessPosixProfile](o, func(v AccessPosixProfile) []int { return v.SecondaryGids })
	return pulumix.ArrayOutput[int]{OutputState: value.OutputState}
}

// The POSIX user ID used for all EFS operations by this user.
func (o AccessPosixProfileOutput) Uid() pulumix.Output[int] {
	return pulumix.Apply[AccessPosixProfile](o, func(v AccessPosixProfile) int { return v.Uid })
}

type ConnectorAs2Config struct {
	// Specifies weather AS2 file is compressed. The valud values are ZLIB and  DISABLED.
	Compression string `pulumi:"compression"`
	// The algorithm that is used to encrypt the file. The valid values are AES128_CBC | AES192_CBC | AES256_CBC | NONE.
	EncryptionAlgorithm string `pulumi:"encryptionAlgorithm"`
	// The unique identifier for the AS2 local profile.
	LocalProfileId string `pulumi:"localProfileId"`
	// Used for outbound requests to determine if a partner response for transfers is synchronous or asynchronous. The valid values are SYNC and NONE.
	MdnResponse string `pulumi:"mdnResponse"`
	// The signing algorithm for the Mdn response. The valid values are SHA256 | SHA384 | SHA512 | SHA1 | NONE | DEFAULT.
	MdnSigningAlgorithm *string `pulumi:"mdnSigningAlgorithm"`
	// Used as the subject HTTP header attribute in AS2 messages that are being sent with the connector.
	MessageSubject *string `pulumi:"messageSubject"`
	// The unique identifier for the AS2 partner profile.
	PartnerProfileId string `pulumi:"partnerProfileId"`
	// The algorithm that is used to sign AS2 messages sent with the connector. The valid values are SHA256 | SHA384 | SHA512 | SHA1 | NONE .
	SigningAlgorithm string `pulumi:"signingAlgorithm"`
}

type ConnectorAs2ConfigArgs struct {
	// Specifies weather AS2 file is compressed. The valud values are ZLIB and  DISABLED.
	Compression pulumix.Input[string] `pulumi:"compression"`
	// The algorithm that is used to encrypt the file. The valid values are AES128_CBC | AES192_CBC | AES256_CBC | NONE.
	EncryptionAlgorithm pulumix.Input[string] `pulumi:"encryptionAlgorithm"`
	// The unique identifier for the AS2 local profile.
	LocalProfileId pulumix.Input[string] `pulumi:"localProfileId"`
	// Used for outbound requests to determine if a partner response for transfers is synchronous or asynchronous. The valid values are SYNC and NONE.
	MdnResponse pulumix.Input[string] `pulumi:"mdnResponse"`
	// The signing algorithm for the Mdn response. The valid values are SHA256 | SHA384 | SHA512 | SHA1 | NONE | DEFAULT.
	MdnSigningAlgorithm pulumix.Input[*string] `pulumi:"mdnSigningAlgorithm"`
	// Used as the subject HTTP header attribute in AS2 messages that are being sent with the connector.
	MessageSubject pulumix.Input[*string] `pulumi:"messageSubject"`
	// The unique identifier for the AS2 partner profile.
	PartnerProfileId pulumix.Input[string] `pulumi:"partnerProfileId"`
	// The algorithm that is used to sign AS2 messages sent with the connector. The valid values are SHA256 | SHA384 | SHA512 | SHA1 | NONE .
	SigningAlgorithm pulumix.Input[string] `pulumi:"signingAlgorithm"`
}

func (ConnectorAs2ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorAs2Config)(nil)).Elem()
}

func (i ConnectorAs2ConfigArgs) ToConnectorAs2ConfigOutput() ConnectorAs2ConfigOutput {
	return i.ToConnectorAs2ConfigOutputWithContext(context.Background())
}

func (i ConnectorAs2ConfigArgs) ToConnectorAs2ConfigOutputWithContext(ctx context.Context) ConnectorAs2ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorAs2ConfigOutput)
}

func (i *ConnectorAs2ConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorAs2ConfigArgs] {
	return pulumix.Val(i)
}

type ConnectorAs2ConfigOutput struct{ *pulumi.OutputState }

func (ConnectorAs2ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorAs2Config)(nil)).Elem()
}

func (o ConnectorAs2ConfigOutput) ToConnectorAs2ConfigOutput() ConnectorAs2ConfigOutput {
	return o
}

func (o ConnectorAs2ConfigOutput) ToConnectorAs2ConfigOutputWithContext(ctx context.Context) ConnectorAs2ConfigOutput {
	return o
}

func (o ConnectorAs2ConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorAs2Config] {
	return pulumix.Output[ConnectorAs2Config]{
		OutputState: o.OutputState,
	}
}

// Specifies weather AS2 file is compressed. The valud values are ZLIB and  DISABLED.
func (o ConnectorAs2ConfigOutput) Compression() pulumix.Output[string] {
	return pulumix.Apply[ConnectorAs2Config](o, func(v ConnectorAs2Config) string { return v.Compression })
}

// The algorithm that is used to encrypt the file. The valid values are AES128_CBC | AES192_CBC | AES256_CBC | NONE.
func (o ConnectorAs2ConfigOutput) EncryptionAlgorithm() pulumix.Output[string] {
	return pulumix.Apply[ConnectorAs2Config](o, func(v ConnectorAs2Config) string { return v.EncryptionAlgorithm })
}

// The unique identifier for the AS2 local profile.
func (o ConnectorAs2ConfigOutput) LocalProfileId() pulumix.Output[string] {
	return pulumix.Apply[ConnectorAs2Config](o, func(v ConnectorAs2Config) string { return v.LocalProfileId })
}

// Used for outbound requests to determine if a partner response for transfers is synchronous or asynchronous. The valid values are SYNC and NONE.
func (o ConnectorAs2ConfigOutput) MdnResponse() pulumix.Output[string] {
	return pulumix.Apply[ConnectorAs2Config](o, func(v ConnectorAs2Config) string { return v.MdnResponse })
}

// The signing algorithm for the Mdn response. The valid values are SHA256 | SHA384 | SHA512 | SHA1 | NONE | DEFAULT.
func (o ConnectorAs2ConfigOutput) MdnSigningAlgorithm() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorAs2Config](o, func(v ConnectorAs2Config) *string { return v.MdnSigningAlgorithm })
}

// Used as the subject HTTP header attribute in AS2 messages that are being sent with the connector.
func (o ConnectorAs2ConfigOutput) MessageSubject() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorAs2Config](o, func(v ConnectorAs2Config) *string { return v.MessageSubject })
}

// The unique identifier for the AS2 partner profile.
func (o ConnectorAs2ConfigOutput) PartnerProfileId() pulumix.Output[string] {
	return pulumix.Apply[ConnectorAs2Config](o, func(v ConnectorAs2Config) string { return v.PartnerProfileId })
}

// The algorithm that is used to sign AS2 messages sent with the connector. The valid values are SHA256 | SHA384 | SHA512 | SHA1 | NONE .
func (o ConnectorAs2ConfigOutput) SigningAlgorithm() pulumix.Output[string] {
	return pulumix.Apply[ConnectorAs2Config](o, func(v ConnectorAs2Config) string { return v.SigningAlgorithm })
}

type ServerEndpointDetails struct {
	// A list of address allocation IDs that are required to attach an Elastic IP address to your SFTP server's endpoint. This property can only be used when `endpointType` is set to `VPC`.
	AddressAllocationIds []string `pulumi:"addressAllocationIds"`
	// A list of security groups IDs that are available to attach to your server's endpoint. If no security groups are specified, the VPC's default security groups are automatically assigned to your endpoint. This property can only be used when `endpointType` is set to `VPC`.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of subnet IDs that are required to host your SFTP server endpoint in your VPC. This property can only be used when `endpointType` is set to `VPC`.
	SubnetIds []string `pulumi:"subnetIds"`
	// The ID of the VPC endpoint. This property can only be used when `endpointType` is set to `VPC_ENDPOINT`
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
	// The VPC ID of the virtual private cloud in which the SFTP server's endpoint will be hosted. This property can only be used when `endpointType` is set to `VPC`.
	VpcId *string `pulumi:"vpcId"`
}

type ServerEndpointDetailsArgs struct {
	// A list of address allocation IDs that are required to attach an Elastic IP address to your SFTP server's endpoint. This property can only be used when `endpointType` is set to `VPC`.
	AddressAllocationIds pulumix.Input[[]string] `pulumi:"addressAllocationIds"`
	// A list of security groups IDs that are available to attach to your server's endpoint. If no security groups are specified, the VPC's default security groups are automatically assigned to your endpoint. This property can only be used when `endpointType` is set to `VPC`.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// A list of subnet IDs that are required to host your SFTP server endpoint in your VPC. This property can only be used when `endpointType` is set to `VPC`.
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
	// The ID of the VPC endpoint. This property can only be used when `endpointType` is set to `VPC_ENDPOINT`
	VpcEndpointId pulumix.Input[*string] `pulumi:"vpcEndpointId"`
	// The VPC ID of the virtual private cloud in which the SFTP server's endpoint will be hosted. This property can only be used when `endpointType` is set to `VPC`.
	VpcId pulumix.Input[*string] `pulumi:"vpcId"`
}

func (ServerEndpointDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerEndpointDetails)(nil)).Elem()
}

func (i ServerEndpointDetailsArgs) ToServerEndpointDetailsOutput() ServerEndpointDetailsOutput {
	return i.ToServerEndpointDetailsOutputWithContext(context.Background())
}

func (i ServerEndpointDetailsArgs) ToServerEndpointDetailsOutputWithContext(ctx context.Context) ServerEndpointDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerEndpointDetailsOutput)
}

func (i *ServerEndpointDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*ServerEndpointDetailsArgs] {
	return pulumix.Val(i)
}

type ServerEndpointDetailsOutput struct{ *pulumi.OutputState }

func (ServerEndpointDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerEndpointDetails)(nil)).Elem()
}

func (o ServerEndpointDetailsOutput) ToServerEndpointDetailsOutput() ServerEndpointDetailsOutput {
	return o
}

func (o ServerEndpointDetailsOutput) ToServerEndpointDetailsOutputWithContext(ctx context.Context) ServerEndpointDetailsOutput {
	return o
}

func (o ServerEndpointDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[ServerEndpointDetails] {
	return pulumix.Output[ServerEndpointDetails]{
		OutputState: o.OutputState,
	}
}

// A list of address allocation IDs that are required to attach an Elastic IP address to your SFTP server's endpoint. This property can only be used when `endpointType` is set to `VPC`.
func (o ServerEndpointDetailsOutput) AddressAllocationIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ServerEndpointDetails](o, func(v ServerEndpointDetails) []string { return v.AddressAllocationIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of security groups IDs that are available to attach to your server's endpoint. If no security groups are specified, the VPC's default security groups are automatically assigned to your endpoint. This property can only be used when `endpointType` is set to `VPC`.
func (o ServerEndpointDetailsOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ServerEndpointDetails](o, func(v ServerEndpointDetails) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of subnet IDs that are required to host your SFTP server endpoint in your VPC. This property can only be used when `endpointType` is set to `VPC`.
func (o ServerEndpointDetailsOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ServerEndpointDetails](o, func(v ServerEndpointDetails) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The ID of the VPC endpoint. This property can only be used when `endpointType` is set to `VPC_ENDPOINT`
func (o ServerEndpointDetailsOutput) VpcEndpointId() pulumix.Output[*string] {
	return pulumix.Apply[ServerEndpointDetails](o, func(v ServerEndpointDetails) *string { return v.VpcEndpointId })
}

// The VPC ID of the virtual private cloud in which the SFTP server's endpoint will be hosted. This property can only be used when `endpointType` is set to `VPC`.
func (o ServerEndpointDetailsOutput) VpcId() pulumix.Output[*string] {
	return pulumix.Apply[ServerEndpointDetails](o, func(v ServerEndpointDetails) *string { return v.VpcId })
}

type ServerProtocolDetails struct {
	// Indicates the transport method for the AS2 messages. Currently, only `HTTP` is supported.
	As2Transports []string `pulumi:"as2Transports"`
	// Indicates passive mode, for FTP and FTPS protocols. Enter a single IPv4 address, such as the public IP address of a firewall, router, or load balancer.
	PassiveIp *string `pulumi:"passiveIp"`
	// Use to ignore the error that is generated when the client attempts to use `SETSTAT` on a file you are uploading to an S3 bucket. Valid values: `DEFAULT`, `ENABLE_NO_OP`.
	SetStatOption *string `pulumi:"setStatOption"`
	// A property used with Transfer Family servers that use the FTPS protocol. Provides a mechanism to resume or share a negotiated secret key between the control and data connection for an FTPS session. Valid values: `DISABLED`, `ENABLED`, `ENFORCED`.
	TlsSessionResumptionMode *string `pulumi:"tlsSessionResumptionMode"`
}

type ServerProtocolDetailsArgs struct {
	// Indicates the transport method for the AS2 messages. Currently, only `HTTP` is supported.
	As2Transports pulumix.Input[[]string] `pulumi:"as2Transports"`
	// Indicates passive mode, for FTP and FTPS protocols. Enter a single IPv4 address, such as the public IP address of a firewall, router, or load balancer.
	PassiveIp pulumix.Input[*string] `pulumi:"passiveIp"`
	// Use to ignore the error that is generated when the client attempts to use `SETSTAT` on a file you are uploading to an S3 bucket. Valid values: `DEFAULT`, `ENABLE_NO_OP`.
	SetStatOption pulumix.Input[*string] `pulumi:"setStatOption"`
	// A property used with Transfer Family servers that use the FTPS protocol. Provides a mechanism to resume or share a negotiated secret key between the control and data connection for an FTPS session. Valid values: `DISABLED`, `ENABLED`, `ENFORCED`.
	TlsSessionResumptionMode pulumix.Input[*string] `pulumi:"tlsSessionResumptionMode"`
}

func (ServerProtocolDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerProtocolDetails)(nil)).Elem()
}

func (i ServerProtocolDetailsArgs) ToServerProtocolDetailsOutput() ServerProtocolDetailsOutput {
	return i.ToServerProtocolDetailsOutputWithContext(context.Background())
}

func (i ServerProtocolDetailsArgs) ToServerProtocolDetailsOutputWithContext(ctx context.Context) ServerProtocolDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerProtocolDetailsOutput)
}

func (i *ServerProtocolDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*ServerProtocolDetailsArgs] {
	return pulumix.Val(i)
}

type ServerProtocolDetailsOutput struct{ *pulumi.OutputState }

func (ServerProtocolDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerProtocolDetails)(nil)).Elem()
}

func (o ServerProtocolDetailsOutput) ToServerProtocolDetailsOutput() ServerProtocolDetailsOutput {
	return o
}

func (o ServerProtocolDetailsOutput) ToServerProtocolDetailsOutputWithContext(ctx context.Context) ServerProtocolDetailsOutput {
	return o
}

func (o ServerProtocolDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[ServerProtocolDetails] {
	return pulumix.Output[ServerProtocolDetails]{
		OutputState: o.OutputState,
	}
}

// Indicates the transport method for the AS2 messages. Currently, only `HTTP` is supported.
func (o ServerProtocolDetailsOutput) As2Transports() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ServerProtocolDetails](o, func(v ServerProtocolDetails) []string { return v.As2Transports })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Indicates passive mode, for FTP and FTPS protocols. Enter a single IPv4 address, such as the public IP address of a firewall, router, or load balancer.
func (o ServerProtocolDetailsOutput) PassiveIp() pulumix.Output[*string] {
	return pulumix.Apply[ServerProtocolDetails](o, func(v ServerProtocolDetails) *string { return v.PassiveIp })
}

// Use to ignore the error that is generated when the client attempts to use `SETSTAT` on a file you are uploading to an S3 bucket. Valid values: `DEFAULT`, `ENABLE_NO_OP`.
func (o ServerProtocolDetailsOutput) SetStatOption() pulumix.Output[*string] {
	return pulumix.Apply[ServerProtocolDetails](o, func(v ServerProtocolDetails) *string { return v.SetStatOption })
}

// A property used with Transfer Family servers that use the FTPS protocol. Provides a mechanism to resume or share a negotiated secret key between the control and data connection for an FTPS session. Valid values: `DISABLED`, `ENABLED`, `ENFORCED`.
func (o ServerProtocolDetailsOutput) TlsSessionResumptionMode() pulumix.Output[*string] {
	return pulumix.Apply[ServerProtocolDetails](o, func(v ServerProtocolDetails) *string { return v.TlsSessionResumptionMode })
}

type ServerWorkflowDetails struct {
	// A trigger that starts a workflow if a file is only partially uploaded. See Workflow Detail below.
	OnPartialUpload *ServerWorkflowDetailsOnPartialUpload `pulumi:"onPartialUpload"`
	// A trigger that starts a workflow: the workflow begins to execute after a file is uploaded. See Workflow Detail below.
	OnUpload *ServerWorkflowDetailsOnUpload `pulumi:"onUpload"`
}

type ServerWorkflowDetailsArgs struct {
	// A trigger that starts a workflow if a file is only partially uploaded. See Workflow Detail below.
	OnPartialUpload pulumix.Input[*ServerWorkflowDetailsOnPartialUploadArgs] `pulumi:"onPartialUpload"`
	// A trigger that starts a workflow: the workflow begins to execute after a file is uploaded. See Workflow Detail below.
	OnUpload pulumix.Input[*ServerWorkflowDetailsOnUploadArgs] `pulumi:"onUpload"`
}

func (ServerWorkflowDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerWorkflowDetails)(nil)).Elem()
}

func (i ServerWorkflowDetailsArgs) ToServerWorkflowDetailsOutput() ServerWorkflowDetailsOutput {
	return i.ToServerWorkflowDetailsOutputWithContext(context.Background())
}

func (i ServerWorkflowDetailsArgs) ToServerWorkflowDetailsOutputWithContext(ctx context.Context) ServerWorkflowDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerWorkflowDetailsOutput)
}

func (i *ServerWorkflowDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*ServerWorkflowDetailsArgs] {
	return pulumix.Val(i)
}

type ServerWorkflowDetailsOutput struct{ *pulumi.OutputState }

func (ServerWorkflowDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerWorkflowDetails)(nil)).Elem()
}

func (o ServerWorkflowDetailsOutput) ToServerWorkflowDetailsOutput() ServerWorkflowDetailsOutput {
	return o
}

func (o ServerWorkflowDetailsOutput) ToServerWorkflowDetailsOutputWithContext(ctx context.Context) ServerWorkflowDetailsOutput {
	return o
}

func (o ServerWorkflowDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[ServerWorkflowDetails] {
	return pulumix.Output[ServerWorkflowDetails]{
		OutputState: o.OutputState,
	}
}

// A trigger that starts a workflow if a file is only partially uploaded. See Workflow Detail below.
func (o ServerWorkflowDetailsOutput) OnPartialUpload() pulumix.GPtrOutput[ServerWorkflowDetailsOnPartialUpload, ServerWorkflowDetailsOnPartialUploadOutput] {
	value := pulumix.Apply[ServerWorkflowDetails](o, func(v ServerWorkflowDetails) *ServerWorkflowDetailsOnPartialUpload { return v.OnPartialUpload })
	return pulumix.GPtrOutput[ServerWorkflowDetailsOnPartialUpload, ServerWorkflowDetailsOnPartialUploadOutput]{OutputState: value.OutputState}
}

// A trigger that starts a workflow: the workflow begins to execute after a file is uploaded. See Workflow Detail below.
func (o ServerWorkflowDetailsOutput) OnUpload() pulumix.GPtrOutput[ServerWorkflowDetailsOnUpload, ServerWorkflowDetailsOnUploadOutput] {
	value := pulumix.Apply[ServerWorkflowDetails](o, func(v ServerWorkflowDetails) *ServerWorkflowDetailsOnUpload { return v.OnUpload })
	return pulumix.GPtrOutput[ServerWorkflowDetailsOnUpload, ServerWorkflowDetailsOnUploadOutput]{OutputState: value.OutputState}
}

type ServerWorkflowDetailsOnPartialUpload struct {
	// Includes the necessary permissions for S3, EFS, and Lambda operations that Transfer can assume, so that all workflow steps can operate on the required resources.
	ExecutionRole string `pulumi:"executionRole"`
	// A unique identifier for the workflow.
	WorkflowId string `pulumi:"workflowId"`
}

type ServerWorkflowDetailsOnPartialUploadArgs struct {
	// Includes the necessary permissions for S3, EFS, and Lambda operations that Transfer can assume, so that all workflow steps can operate on the required resources.
	ExecutionRole pulumix.Input[string] `pulumi:"executionRole"`
	// A unique identifier for the workflow.
	WorkflowId pulumix.Input[string] `pulumi:"workflowId"`
}

func (ServerWorkflowDetailsOnPartialUploadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerWorkflowDetailsOnPartialUpload)(nil)).Elem()
}

func (i ServerWorkflowDetailsOnPartialUploadArgs) ToServerWorkflowDetailsOnPartialUploadOutput() ServerWorkflowDetailsOnPartialUploadOutput {
	return i.ToServerWorkflowDetailsOnPartialUploadOutputWithContext(context.Background())
}

func (i ServerWorkflowDetailsOnPartialUploadArgs) ToServerWorkflowDetailsOnPartialUploadOutputWithContext(ctx context.Context) ServerWorkflowDetailsOnPartialUploadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerWorkflowDetailsOnPartialUploadOutput)
}

func (i *ServerWorkflowDetailsOnPartialUploadArgs) ToOutput(ctx context.Context) pulumix.Output[*ServerWorkflowDetailsOnPartialUploadArgs] {
	return pulumix.Val(i)
}

type ServerWorkflowDetailsOnPartialUploadOutput struct{ *pulumi.OutputState }

func (ServerWorkflowDetailsOnPartialUploadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerWorkflowDetailsOnPartialUpload)(nil)).Elem()
}

func (o ServerWorkflowDetailsOnPartialUploadOutput) ToServerWorkflowDetailsOnPartialUploadOutput() ServerWorkflowDetailsOnPartialUploadOutput {
	return o
}

func (o ServerWorkflowDetailsOnPartialUploadOutput) ToServerWorkflowDetailsOnPartialUploadOutputWithContext(ctx context.Context) ServerWorkflowDetailsOnPartialUploadOutput {
	return o
}

func (o ServerWorkflowDetailsOnPartialUploadOutput) ToOutput(ctx context.Context) pulumix.Output[ServerWorkflowDetailsOnPartialUpload] {
	return pulumix.Output[ServerWorkflowDetailsOnPartialUpload]{
		OutputState: o.OutputState,
	}
}

// Includes the necessary permissions for S3, EFS, and Lambda operations that Transfer can assume, so that all workflow steps can operate on the required resources.
func (o ServerWorkflowDetailsOnPartialUploadOutput) ExecutionRole() pulumix.Output[string] {
	return pulumix.Apply[ServerWorkflowDetailsOnPartialUpload](o, func(v ServerWorkflowDetailsOnPartialUpload) string { return v.ExecutionRole })
}

// A unique identifier for the workflow.
func (o ServerWorkflowDetailsOnPartialUploadOutput) WorkflowId() pulumix.Output[string] {
	return pulumix.Apply[ServerWorkflowDetailsOnPartialUpload](o, func(v ServerWorkflowDetailsOnPartialUpload) string { return v.WorkflowId })
}

type ServerWorkflowDetailsOnUpload struct {
	// Includes the necessary permissions for S3, EFS, and Lambda operations that Transfer can assume, so that all workflow steps can operate on the required resources.
	ExecutionRole string `pulumi:"executionRole"`
	// A unique identifier for the workflow.
	WorkflowId string `pulumi:"workflowId"`
}

type ServerWorkflowDetailsOnUploadArgs struct {
	// Includes the necessary permissions for S3, EFS, and Lambda operations that Transfer can assume, so that all workflow steps can operate on the required resources.
	ExecutionRole pulumix.Input[string] `pulumi:"executionRole"`
	// A unique identifier for the workflow.
	WorkflowId pulumix.Input[string] `pulumi:"workflowId"`
}

func (ServerWorkflowDetailsOnUploadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerWorkflowDetailsOnUpload)(nil)).Elem()
}

func (i ServerWorkflowDetailsOnUploadArgs) ToServerWorkflowDetailsOnUploadOutput() ServerWorkflowDetailsOnUploadOutput {
	return i.ToServerWorkflowDetailsOnUploadOutputWithContext(context.Background())
}

func (i ServerWorkflowDetailsOnUploadArgs) ToServerWorkflowDetailsOnUploadOutputWithContext(ctx context.Context) ServerWorkflowDetailsOnUploadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerWorkflowDetailsOnUploadOutput)
}

func (i *ServerWorkflowDetailsOnUploadArgs) ToOutput(ctx context.Context) pulumix.Output[*ServerWorkflowDetailsOnUploadArgs] {
	return pulumix.Val(i)
}

type ServerWorkflowDetailsOnUploadOutput struct{ *pulumi.OutputState }

func (ServerWorkflowDetailsOnUploadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerWorkflowDetailsOnUpload)(nil)).Elem()
}

func (o ServerWorkflowDetailsOnUploadOutput) ToServerWorkflowDetailsOnUploadOutput() ServerWorkflowDetailsOnUploadOutput {
	return o
}

func (o ServerWorkflowDetailsOnUploadOutput) ToServerWorkflowDetailsOnUploadOutputWithContext(ctx context.Context) ServerWorkflowDetailsOnUploadOutput {
	return o
}

func (o ServerWorkflowDetailsOnUploadOutput) ToOutput(ctx context.Context) pulumix.Output[ServerWorkflowDetailsOnUpload] {
	return pulumix.Output[ServerWorkflowDetailsOnUpload]{
		OutputState: o.OutputState,
	}
}

// Includes the necessary permissions for S3, EFS, and Lambda operations that Transfer can assume, so that all workflow steps can operate on the required resources.
func (o ServerWorkflowDetailsOnUploadOutput) ExecutionRole() pulumix.Output[string] {
	return pulumix.Apply[ServerWorkflowDetailsOnUpload](o, func(v ServerWorkflowDetailsOnUpload) string { return v.ExecutionRole })
}

// A unique identifier for the workflow.
func (o ServerWorkflowDetailsOnUploadOutput) WorkflowId() pulumix.Output[string] {
	return pulumix.Apply[ServerWorkflowDetailsOnUpload](o, func(v ServerWorkflowDetailsOnUpload) string { return v.WorkflowId })
}

type UserHomeDirectoryMapping struct {
	// Represents an entry and a target.
	Entry string `pulumi:"entry"`
	// Represents the map target.
	//
	// The `Restricted` option is achieved using the following mapping:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	Target string `pulumi:"target"`
}

type UserHomeDirectoryMappingArgs struct {
	// Represents an entry and a target.
	Entry pulumix.Input[string] `pulumi:"entry"`
	// Represents the map target.
	//
	// The `Restricted` option is achieved using the following mapping:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	Target pulumix.Input[string] `pulumi:"target"`
}

func (UserHomeDirectoryMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHomeDirectoryMapping)(nil)).Elem()
}

func (i UserHomeDirectoryMappingArgs) ToUserHomeDirectoryMappingOutput() UserHomeDirectoryMappingOutput {
	return i.ToUserHomeDirectoryMappingOutputWithContext(context.Background())
}

func (i UserHomeDirectoryMappingArgs) ToUserHomeDirectoryMappingOutputWithContext(ctx context.Context) UserHomeDirectoryMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHomeDirectoryMappingOutput)
}

func (i *UserHomeDirectoryMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*UserHomeDirectoryMappingArgs] {
	return pulumix.Val(i)
}

type UserHomeDirectoryMappingOutput struct{ *pulumi.OutputState }

func (UserHomeDirectoryMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHomeDirectoryMapping)(nil)).Elem()
}

func (o UserHomeDirectoryMappingOutput) ToUserHomeDirectoryMappingOutput() UserHomeDirectoryMappingOutput {
	return o
}

func (o UserHomeDirectoryMappingOutput) ToUserHomeDirectoryMappingOutputWithContext(ctx context.Context) UserHomeDirectoryMappingOutput {
	return o
}

func (o UserHomeDirectoryMappingOutput) ToOutput(ctx context.Context) pulumix.Output[UserHomeDirectoryMapping] {
	return pulumix.Output[UserHomeDirectoryMapping]{
		OutputState: o.OutputState,
	}
}

// Represents an entry and a target.
func (o UserHomeDirectoryMappingOutput) Entry() pulumix.Output[string] {
	return pulumix.Apply[UserHomeDirectoryMapping](o, func(v UserHomeDirectoryMapping) string { return v.Entry })
}

// Represents the map target.
//
// The `Restricted` option is achieved using the following mapping:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
func (o UserHomeDirectoryMappingOutput) Target() pulumix.Output[string] {
	return pulumix.Apply[UserHomeDirectoryMapping](o, func(v UserHomeDirectoryMapping) string { return v.Target })
}

type UserPosixProfile struct {
	// The POSIX group ID used for all EFS operations by this user.
	Gid int `pulumi:"gid"`
	// The secondary POSIX group IDs used for all EFS operations by this user.
	SecondaryGids []int `pulumi:"secondaryGids"`
	// The POSIX user ID used for all EFS operations by this user.
	Uid int `pulumi:"uid"`
}

type UserPosixProfileArgs struct {
	// The POSIX group ID used for all EFS operations by this user.
	Gid pulumix.Input[int] `pulumi:"gid"`
	// The secondary POSIX group IDs used for all EFS operations by this user.
	SecondaryGids pulumix.Input[[]int] `pulumi:"secondaryGids"`
	// The POSIX user ID used for all EFS operations by this user.
	Uid pulumix.Input[int] `pulumi:"uid"`
}

func (UserPosixProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPosixProfile)(nil)).Elem()
}

func (i UserPosixProfileArgs) ToUserPosixProfileOutput() UserPosixProfileOutput {
	return i.ToUserPosixProfileOutputWithContext(context.Background())
}

func (i UserPosixProfileArgs) ToUserPosixProfileOutputWithContext(ctx context.Context) UserPosixProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPosixProfileOutput)
}

func (i *UserPosixProfileArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPosixProfileArgs] {
	return pulumix.Val(i)
}

type UserPosixProfileOutput struct{ *pulumi.OutputState }

func (UserPosixProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPosixProfile)(nil)).Elem()
}

func (o UserPosixProfileOutput) ToUserPosixProfileOutput() UserPosixProfileOutput {
	return o
}

func (o UserPosixProfileOutput) ToUserPosixProfileOutputWithContext(ctx context.Context) UserPosixProfileOutput {
	return o
}

func (o UserPosixProfileOutput) ToOutput(ctx context.Context) pulumix.Output[UserPosixProfile] {
	return pulumix.Output[UserPosixProfile]{
		OutputState: o.OutputState,
	}
}

// The POSIX group ID used for all EFS operations by this user.
func (o UserPosixProfileOutput) Gid() pulumix.Output[int] {
	return pulumix.Apply[UserPosixProfile](o, func(v UserPosixProfile) int { return v.Gid })
}

// The secondary POSIX group IDs used for all EFS operations by this user.
func (o UserPosixProfileOutput) SecondaryGids() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[UserPosixProfile](o, func(v UserPosixProfile) []int { return v.SecondaryGids })
	return pulumix.ArrayOutput[int]{OutputState: value.OutputState}
}

// The POSIX user ID used for all EFS operations by this user.
func (o UserPosixProfileOutput) Uid() pulumix.Output[int] {
	return pulumix.Apply[UserPosixProfile](o, func(v UserPosixProfile) int { return v.Uid })
}

type WorkflowOnExceptionStep struct {
	// Details for a step that performs a file copy. See Copy Step Details below.
	CopyStepDetails *WorkflowOnExceptionStepCopyStepDetails `pulumi:"copyStepDetails"`
	// Details for a step that invokes a lambda function.
	CustomStepDetails *WorkflowOnExceptionStepCustomStepDetails `pulumi:"customStepDetails"`
	// Details for a step that decrypts the file.
	DecryptStepDetails *WorkflowOnExceptionStepDecryptStepDetails `pulumi:"decryptStepDetails"`
	// Details for a step that deletes the file.
	DeleteStepDetails *WorkflowOnExceptionStepDeleteStepDetails `pulumi:"deleteStepDetails"`
	// Details for a step that creates one or more tags.
	TagStepDetails *WorkflowOnExceptionStepTagStepDetails `pulumi:"tagStepDetails"`
	// One of the following step types are supported. `COPY`, `CUSTOM`, `DECRYPT`, `DELETE`, and `TAG`.
	Type string `pulumi:"type"`
}

type WorkflowOnExceptionStepArgs struct {
	// Details for a step that performs a file copy. See Copy Step Details below.
	CopyStepDetails pulumix.Input[*WorkflowOnExceptionStepCopyStepDetailsArgs] `pulumi:"copyStepDetails"`
	// Details for a step that invokes a lambda function.
	CustomStepDetails pulumix.Input[*WorkflowOnExceptionStepCustomStepDetailsArgs] `pulumi:"customStepDetails"`
	// Details for a step that decrypts the file.
	DecryptStepDetails pulumix.Input[*WorkflowOnExceptionStepDecryptStepDetailsArgs] `pulumi:"decryptStepDetails"`
	// Details for a step that deletes the file.
	DeleteStepDetails pulumix.Input[*WorkflowOnExceptionStepDeleteStepDetailsArgs] `pulumi:"deleteStepDetails"`
	// Details for a step that creates one or more tags.
	TagStepDetails pulumix.Input[*WorkflowOnExceptionStepTagStepDetailsArgs] `pulumi:"tagStepDetails"`
	// One of the following step types are supported. `COPY`, `CUSTOM`, `DECRYPT`, `DELETE`, and `TAG`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (WorkflowOnExceptionStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStep)(nil)).Elem()
}

func (i WorkflowOnExceptionStepArgs) ToWorkflowOnExceptionStepOutput() WorkflowOnExceptionStepOutput {
	return i.ToWorkflowOnExceptionStepOutputWithContext(context.Background())
}

func (i WorkflowOnExceptionStepArgs) ToWorkflowOnExceptionStepOutputWithContext(ctx context.Context) WorkflowOnExceptionStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOnExceptionStepOutput)
}

func (i *WorkflowOnExceptionStepArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowOnExceptionStepArgs] {
	return pulumix.Val(i)
}

type WorkflowOnExceptionStepOutput struct{ *pulumi.OutputState }

func (WorkflowOnExceptionStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStep)(nil)).Elem()
}

func (o WorkflowOnExceptionStepOutput) ToWorkflowOnExceptionStepOutput() WorkflowOnExceptionStepOutput {
	return o
}

func (o WorkflowOnExceptionStepOutput) ToWorkflowOnExceptionStepOutputWithContext(ctx context.Context) WorkflowOnExceptionStepOutput {
	return o
}

func (o WorkflowOnExceptionStepOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowOnExceptionStep] {
	return pulumix.Output[WorkflowOnExceptionStep]{
		OutputState: o.OutputState,
	}
}

// Details for a step that performs a file copy. See Copy Step Details below.
func (o WorkflowOnExceptionStepOutput) CopyStepDetails() pulumix.GPtrOutput[WorkflowOnExceptionStepCopyStepDetails, WorkflowOnExceptionStepCopyStepDetailsOutput] {
	value := pulumix.Apply[WorkflowOnExceptionStep](o, func(v WorkflowOnExceptionStep) *WorkflowOnExceptionStepCopyStepDetails { return v.CopyStepDetails })
	return pulumix.GPtrOutput[WorkflowOnExceptionStepCopyStepDetails, WorkflowOnExceptionStepCopyStepDetailsOutput]{OutputState: value.OutputState}
}

// Details for a step that invokes a lambda function.
func (o WorkflowOnExceptionStepOutput) CustomStepDetails() pulumix.GPtrOutput[WorkflowOnExceptionStepCustomStepDetails, WorkflowOnExceptionStepCustomStepDetailsOutput] {
	value := pulumix.Apply[WorkflowOnExceptionStep](o, func(v WorkflowOnExceptionStep) *WorkflowOnExceptionStepCustomStepDetails { return v.CustomStepDetails })
	return pulumix.GPtrOutput[WorkflowOnExceptionStepCustomStepDetails, WorkflowOnExceptionStepCustomStepDetailsOutput]{OutputState: value.OutputState}
}

// Details for a step that decrypts the file.
func (o WorkflowOnExceptionStepOutput) DecryptStepDetails() pulumix.GPtrOutput[WorkflowOnExceptionStepDecryptStepDetails, WorkflowOnExceptionStepDecryptStepDetailsOutput] {
	value := pulumix.Apply[WorkflowOnExceptionStep](o, func(v WorkflowOnExceptionStep) *WorkflowOnExceptionStepDecryptStepDetails {
		return v.DecryptStepDetails
	})
	return pulumix.GPtrOutput[WorkflowOnExceptionStepDecryptStepDetails, WorkflowOnExceptionStepDecryptStepDetailsOutput]{OutputState: value.OutputState}
}

// Details for a step that deletes the file.
func (o WorkflowOnExceptionStepOutput) DeleteStepDetails() pulumix.GPtrOutput[WorkflowOnExceptionStepDeleteStepDetails, WorkflowOnExceptionStepDeleteStepDetailsOutput] {
	value := pulumix.Apply[WorkflowOnExceptionStep](o, func(v WorkflowOnExceptionStep) *WorkflowOnExceptionStepDeleteStepDetails { return v.DeleteStepDetails })
	return pulumix.GPtrOutput[WorkflowOnExceptionStepDeleteStepDetails, WorkflowOnExceptionStepDeleteStepDetailsOutput]{OutputState: value.OutputState}
}

// Details for a step that creates one or more tags.
func (o WorkflowOnExceptionStepOutput) TagStepDetails() pulumix.GPtrOutput[WorkflowOnExceptionStepTagStepDetails, WorkflowOnExceptionStepTagStepDetailsOutput] {
	value := pulumix.Apply[WorkflowOnExceptionStep](o, func(v WorkflowOnExceptionStep) *WorkflowOnExceptionStepTagStepDetails { return v.TagStepDetails })
	return pulumix.GPtrOutput[WorkflowOnExceptionStepTagStepDetails, WorkflowOnExceptionStepTagStepDetailsOutput]{OutputState: value.OutputState}
}

// One of the following step types are supported. `COPY`, `CUSTOM`, `DECRYPT`, `DELETE`, and `TAG`.
func (o WorkflowOnExceptionStepOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[WorkflowOnExceptionStep](o, func(v WorkflowOnExceptionStep) string { return v.Type })
}

type WorkflowOnExceptionStepCopyStepDetails struct {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation *WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation `pulumi:"destinationFileLocation"`
	// The name of the step, used as an identifier.
	Name *string `pulumi:"name"`
	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is `FALSE`. Valid values are `TRUE` and `FALSE`.
	OverwriteExisting *string `pulumi:"overwriteExisting"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `pulumi:"sourceFileLocation"`
}

type WorkflowOnExceptionStepCopyStepDetailsArgs struct {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation pulumix.Input[*WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationArgs] `pulumi:"destinationFileLocation"`
	// The name of the step, used as an identifier.
	Name pulumix.Input[*string] `pulumi:"name"`
	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is `FALSE`. Valid values are `TRUE` and `FALSE`.
	OverwriteExisting pulumix.Input[*string] `pulumi:"overwriteExisting"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation pulumix.Input[*string] `pulumi:"sourceFileLocation"`
}

func (WorkflowOnExceptionStepCopyStepDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepCopyStepDetails)(nil)).Elem()
}

func (i WorkflowOnExceptionStepCopyStepDetailsArgs) ToWorkflowOnExceptionStepCopyStepDetailsOutput() WorkflowOnExceptionStepCopyStepDetailsOutput {
	return i.ToWorkflowOnExceptionStepCopyStepDetailsOutputWithContext(context.Background())
}

func (i WorkflowOnExceptionStepCopyStepDetailsArgs) ToWorkflowOnExceptionStepCopyStepDetailsOutputWithContext(ctx context.Context) WorkflowOnExceptionStepCopyStepDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOnExceptionStepCopyStepDetailsOutput)
}

func (i *WorkflowOnExceptionStepCopyStepDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowOnExceptionStepCopyStepDetailsArgs] {
	return pulumix.Val(i)
}

type WorkflowOnExceptionStepCopyStepDetailsOutput struct{ *pulumi.OutputState }

func (WorkflowOnExceptionStepCopyStepDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepCopyStepDetails)(nil)).Elem()
}

func (o WorkflowOnExceptionStepCopyStepDetailsOutput) ToWorkflowOnExceptionStepCopyStepDetailsOutput() WorkflowOnExceptionStepCopyStepDetailsOutput {
	return o
}

func (o WorkflowOnExceptionStepCopyStepDetailsOutput) ToWorkflowOnExceptionStepCopyStepDetailsOutputWithContext(ctx context.Context) WorkflowOnExceptionStepCopyStepDetailsOutput {
	return o
}

func (o WorkflowOnExceptionStepCopyStepDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowOnExceptionStepCopyStepDetails] {
	return pulumix.Output[WorkflowOnExceptionStepCopyStepDetails]{
		OutputState: o.OutputState,
	}
}

// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
func (o WorkflowOnExceptionStepCopyStepDetailsOutput) DestinationFileLocation() pulumix.GPtrOutput[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation, WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput] {
	value := pulumix.Apply[WorkflowOnExceptionStepCopyStepDetails](o, func(v WorkflowOnExceptionStepCopyStepDetails) *WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation {
		return v.DestinationFileLocation
	})
	return pulumix.GPtrOutput[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation, WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput]{OutputState: value.OutputState}
}

// The name of the step, used as an identifier.
func (o WorkflowOnExceptionStepCopyStepDetailsOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepCopyStepDetails](o, func(v WorkflowOnExceptionStepCopyStepDetails) *string { return v.Name })
}

// A flag that indicates whether or not to overwrite an existing file of the same name. The default is `FALSE`. Valid values are `TRUE` and `FALSE`.
func (o WorkflowOnExceptionStepCopyStepDetailsOutput) OverwriteExisting() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepCopyStepDetails](o, func(v WorkflowOnExceptionStepCopyStepDetails) *string { return v.OverwriteExisting })
}

// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
func (o WorkflowOnExceptionStepCopyStepDetailsOutput) SourceFileLocation() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepCopyStepDetails](o, func(v WorkflowOnExceptionStepCopyStepDetails) *string { return v.SourceFileLocation })
}

type WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation struct {
	// Specifies the details for the EFS file being copied.
	EfsFileLocation *WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocation `pulumi:"efsFileLocation"`
	// Specifies the details for the S3 file being copied.
	S3FileLocation *WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocation `pulumi:"s3FileLocation"`
}

type WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationArgs struct {
	// Specifies the details for the EFS file being copied.
	EfsFileLocation pulumix.Input[*WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationArgs] `pulumi:"efsFileLocation"`
	// Specifies the details for the S3 file being copied.
	S3FileLocation pulumix.Input[*WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationArgs] `pulumi:"s3FileLocation"`
}

func (WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation)(nil)).Elem()
}

func (i WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationArgs) ToWorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput() WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput {
	return i.ToWorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutputWithContext(context.Background())
}

func (i WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationArgs) ToWorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutputWithContext(ctx context.Context) WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput)
}

func (i *WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationArgs] {
	return pulumix.Val(i)
}

type WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation)(nil)).Elem()
}

func (o WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput) ToWorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput() WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput {
	return o
}

func (o WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput) ToWorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutputWithContext(ctx context.Context) WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput {
	return o
}

func (o WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation] {
	return pulumix.Output[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation]{
		OutputState: o.OutputState,
	}
}

// Specifies the details for the EFS file being copied.
func (o WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput) EfsFileLocation() pulumix.GPtrOutput[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocation, WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput] {
	value := pulumix.Apply[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation](o, func(v WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation) *WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocation {
		return v.EfsFileLocation
	})
	return pulumix.GPtrOutput[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocation, WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput]{OutputState: value.OutputState}
}

// Specifies the details for the S3 file being copied.
func (o WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput) S3FileLocation() pulumix.GPtrOutput[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocation, WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput] {
	value := pulumix.Apply[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation](o, func(v WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation) *WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocation {
		return v.S3FileLocation
	})
	return pulumix.GPtrOutput[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocation, WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput]{OutputState: value.OutputState}
}

type WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocation struct {
	// The ID of the file system, assigned by Amazon EFS.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The pathname for the folder being used by a workflow.
	Path *string `pulumi:"path"`
}

type WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationArgs struct {
	// The ID of the file system, assigned by Amazon EFS.
	FileSystemId pulumix.Input[*string] `pulumi:"fileSystemId"`
	// The pathname for the folder being used by a workflow.
	Path pulumix.Input[*string] `pulumi:"path"`
}

func (WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocation)(nil)).Elem()
}

func (i WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationArgs) ToWorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput() WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return i.ToWorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutputWithContext(context.Background())
}

func (i WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationArgs) ToWorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutputWithContext(ctx context.Context) WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput)
}

func (i *WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationArgs] {
	return pulumix.Val(i)
}

type WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocation)(nil)).Elem()
}

func (o WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput) ToWorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput() WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return o
}

func (o WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput) ToWorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutputWithContext(ctx context.Context) WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return o
}

func (o WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocation] {
	return pulumix.Output[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocation]{
		OutputState: o.OutputState,
	}
}

// The ID of the file system, assigned by Amazon EFS.
func (o WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput) FileSystemId() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocation](o, func(v WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocation) *string {
		return v.FileSystemId
	})
}

// The pathname for the folder being used by a workflow.
func (o WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocation](o, func(v WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocation) *string {
		return v.Path
	})
}

type WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocation struct {
	// Specifies the S3 bucket for the customer input file.
	Bucket *string `pulumi:"bucket"`
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `pulumi:"key"`
}

type WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationArgs struct {
	// Specifies the S3 bucket for the customer input file.
	Bucket pulumix.Input[*string] `pulumi:"bucket"`
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key pulumix.Input[*string] `pulumi:"key"`
}

func (WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocation)(nil)).Elem()
}

func (i WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationArgs) ToWorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput() WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput {
	return i.ToWorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutputWithContext(context.Background())
}

func (i WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationArgs) ToWorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutputWithContext(ctx context.Context) WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput)
}

func (i *WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationArgs] {
	return pulumix.Val(i)
}

type WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocation)(nil)).Elem()
}

func (o WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput) ToWorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput() WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput {
	return o
}

func (o WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput) ToWorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutputWithContext(ctx context.Context) WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput {
	return o
}

func (o WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocation] {
	return pulumix.Output[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocation]{
		OutputState: o.OutputState,
	}
}

// Specifies the S3 bucket for the customer input file.
func (o WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput) Bucket() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocation](o, func(v WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocation) *string {
		return v.Bucket
	})
}

// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
func (o WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocation](o, func(v WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocation) *string {
		return v.Key
	})
}

type WorkflowOnExceptionStepCustomStepDetails struct {
	// The name of the step, used as an identifier.
	Name *string `pulumi:"name"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `pulumi:"sourceFileLocation"`
	// The ARN for the lambda function that is being called.
	Target *string `pulumi:"target"`
	// Timeout, in seconds, for the step.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

type WorkflowOnExceptionStepCustomStepDetailsArgs struct {
	// The name of the step, used as an identifier.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation pulumix.Input[*string] `pulumi:"sourceFileLocation"`
	// The ARN for the lambda function that is being called.
	Target pulumix.Input[*string] `pulumi:"target"`
	// Timeout, in seconds, for the step.
	TimeoutSeconds pulumix.Input[*int] `pulumi:"timeoutSeconds"`
}

func (WorkflowOnExceptionStepCustomStepDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepCustomStepDetails)(nil)).Elem()
}

func (i WorkflowOnExceptionStepCustomStepDetailsArgs) ToWorkflowOnExceptionStepCustomStepDetailsOutput() WorkflowOnExceptionStepCustomStepDetailsOutput {
	return i.ToWorkflowOnExceptionStepCustomStepDetailsOutputWithContext(context.Background())
}

func (i WorkflowOnExceptionStepCustomStepDetailsArgs) ToWorkflowOnExceptionStepCustomStepDetailsOutputWithContext(ctx context.Context) WorkflowOnExceptionStepCustomStepDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOnExceptionStepCustomStepDetailsOutput)
}

func (i *WorkflowOnExceptionStepCustomStepDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowOnExceptionStepCustomStepDetailsArgs] {
	return pulumix.Val(i)
}

type WorkflowOnExceptionStepCustomStepDetailsOutput struct{ *pulumi.OutputState }

func (WorkflowOnExceptionStepCustomStepDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepCustomStepDetails)(nil)).Elem()
}

func (o WorkflowOnExceptionStepCustomStepDetailsOutput) ToWorkflowOnExceptionStepCustomStepDetailsOutput() WorkflowOnExceptionStepCustomStepDetailsOutput {
	return o
}

func (o WorkflowOnExceptionStepCustomStepDetailsOutput) ToWorkflowOnExceptionStepCustomStepDetailsOutputWithContext(ctx context.Context) WorkflowOnExceptionStepCustomStepDetailsOutput {
	return o
}

func (o WorkflowOnExceptionStepCustomStepDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowOnExceptionStepCustomStepDetails] {
	return pulumix.Output[WorkflowOnExceptionStepCustomStepDetails]{
		OutputState: o.OutputState,
	}
}

// The name of the step, used as an identifier.
func (o WorkflowOnExceptionStepCustomStepDetailsOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepCustomStepDetails](o, func(v WorkflowOnExceptionStepCustomStepDetails) *string { return v.Name })
}

// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
func (o WorkflowOnExceptionStepCustomStepDetailsOutput) SourceFileLocation() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepCustomStepDetails](o, func(v WorkflowOnExceptionStepCustomStepDetails) *string { return v.SourceFileLocation })
}

// The ARN for the lambda function that is being called.
func (o WorkflowOnExceptionStepCustomStepDetailsOutput) Target() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepCustomStepDetails](o, func(v WorkflowOnExceptionStepCustomStepDetails) *string { return v.Target })
}

// Timeout, in seconds, for the step.
func (o WorkflowOnExceptionStepCustomStepDetailsOutput) TimeoutSeconds() pulumix.Output[*int] {
	return pulumix.Apply[WorkflowOnExceptionStepCustomStepDetails](o, func(v WorkflowOnExceptionStepCustomStepDetails) *int { return v.TimeoutSeconds })
}

type WorkflowOnExceptionStepDecryptStepDetails struct {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation *WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocation `pulumi:"destinationFileLocation"`
	// The name of the step, used as an identifier.
	Name *string `pulumi:"name"`
	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is `FALSE`. Valid values are `TRUE` and `FALSE`.
	OverwriteExisting *string `pulumi:"overwriteExisting"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `pulumi:"sourceFileLocation"`
	// The type of encryption used. Currently, this value must be `"PGP"`.
	Type string `pulumi:"type"`
}

type WorkflowOnExceptionStepDecryptStepDetailsArgs struct {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation pulumix.Input[*WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationArgs] `pulumi:"destinationFileLocation"`
	// The name of the step, used as an identifier.
	Name pulumix.Input[*string] `pulumi:"name"`
	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is `FALSE`. Valid values are `TRUE` and `FALSE`.
	OverwriteExisting pulumix.Input[*string] `pulumi:"overwriteExisting"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation pulumix.Input[*string] `pulumi:"sourceFileLocation"`
	// The type of encryption used. Currently, this value must be `"PGP"`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (WorkflowOnExceptionStepDecryptStepDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepDecryptStepDetails)(nil)).Elem()
}

func (i WorkflowOnExceptionStepDecryptStepDetailsArgs) ToWorkflowOnExceptionStepDecryptStepDetailsOutput() WorkflowOnExceptionStepDecryptStepDetailsOutput {
	return i.ToWorkflowOnExceptionStepDecryptStepDetailsOutputWithContext(context.Background())
}

func (i WorkflowOnExceptionStepDecryptStepDetailsArgs) ToWorkflowOnExceptionStepDecryptStepDetailsOutputWithContext(ctx context.Context) WorkflowOnExceptionStepDecryptStepDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOnExceptionStepDecryptStepDetailsOutput)
}

func (i *WorkflowOnExceptionStepDecryptStepDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowOnExceptionStepDecryptStepDetailsArgs] {
	return pulumix.Val(i)
}

type WorkflowOnExceptionStepDecryptStepDetailsOutput struct{ *pulumi.OutputState }

func (WorkflowOnExceptionStepDecryptStepDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepDecryptStepDetails)(nil)).Elem()
}

func (o WorkflowOnExceptionStepDecryptStepDetailsOutput) ToWorkflowOnExceptionStepDecryptStepDetailsOutput() WorkflowOnExceptionStepDecryptStepDetailsOutput {
	return o
}

func (o WorkflowOnExceptionStepDecryptStepDetailsOutput) ToWorkflowOnExceptionStepDecryptStepDetailsOutputWithContext(ctx context.Context) WorkflowOnExceptionStepDecryptStepDetailsOutput {
	return o
}

func (o WorkflowOnExceptionStepDecryptStepDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowOnExceptionStepDecryptStepDetails] {
	return pulumix.Output[WorkflowOnExceptionStepDecryptStepDetails]{
		OutputState: o.OutputState,
	}
}

// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
func (o WorkflowOnExceptionStepDecryptStepDetailsOutput) DestinationFileLocation() pulumix.GPtrOutput[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocation, WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput] {
	value := pulumix.Apply[WorkflowOnExceptionStepDecryptStepDetails](o, func(v WorkflowOnExceptionStepDecryptStepDetails) *WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocation {
		return v.DestinationFileLocation
	})
	return pulumix.GPtrOutput[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocation, WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput]{OutputState: value.OutputState}
}

// The name of the step, used as an identifier.
func (o WorkflowOnExceptionStepDecryptStepDetailsOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepDecryptStepDetails](o, func(v WorkflowOnExceptionStepDecryptStepDetails) *string { return v.Name })
}

// A flag that indicates whether or not to overwrite an existing file of the same name. The default is `FALSE`. Valid values are `TRUE` and `FALSE`.
func (o WorkflowOnExceptionStepDecryptStepDetailsOutput) OverwriteExisting() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepDecryptStepDetails](o, func(v WorkflowOnExceptionStepDecryptStepDetails) *string { return v.OverwriteExisting })
}

// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
func (o WorkflowOnExceptionStepDecryptStepDetailsOutput) SourceFileLocation() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepDecryptStepDetails](o, func(v WorkflowOnExceptionStepDecryptStepDetails) *string { return v.SourceFileLocation })
}

// The type of encryption used. Currently, this value must be `"PGP"`.
func (o WorkflowOnExceptionStepDecryptStepDetailsOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[WorkflowOnExceptionStepDecryptStepDetails](o, func(v WorkflowOnExceptionStepDecryptStepDetails) string { return v.Type })
}

type WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocation struct {
	// Specifies the details for the EFS file being copied.
	EfsFileLocation *WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocation `pulumi:"efsFileLocation"`
	// Specifies the details for the S3 file being copied.
	S3FileLocation *WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocation `pulumi:"s3FileLocation"`
}

type WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationArgs struct {
	// Specifies the details for the EFS file being copied.
	EfsFileLocation pulumix.Input[*WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationArgs] `pulumi:"efsFileLocation"`
	// Specifies the details for the S3 file being copied.
	S3FileLocation pulumix.Input[*WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationArgs] `pulumi:"s3FileLocation"`
}

func (WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocation)(nil)).Elem()
}

func (i WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationArgs) ToWorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput() WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput {
	return i.ToWorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutputWithContext(context.Background())
}

func (i WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationArgs) ToWorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutputWithContext(ctx context.Context) WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput)
}

func (i *WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationArgs] {
	return pulumix.Val(i)
}

type WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocation)(nil)).Elem()
}

func (o WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput) ToWorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput() WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput {
	return o
}

func (o WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput) ToWorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutputWithContext(ctx context.Context) WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput {
	return o
}

func (o WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocation] {
	return pulumix.Output[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocation]{
		OutputState: o.OutputState,
	}
}

// Specifies the details for the EFS file being copied.
func (o WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput) EfsFileLocation() pulumix.GPtrOutput[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocation, WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput] {
	value := pulumix.Apply[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocation](o, func(v WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocation) *WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocation {
		return v.EfsFileLocation
	})
	return pulumix.GPtrOutput[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocation, WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput]{OutputState: value.OutputState}
}

// Specifies the details for the S3 file being copied.
func (o WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput) S3FileLocation() pulumix.GPtrOutput[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocation, WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput] {
	value := pulumix.Apply[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocation](o, func(v WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocation) *WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocation {
		return v.S3FileLocation
	})
	return pulumix.GPtrOutput[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocation, WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput]{OutputState: value.OutputState}
}

type WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocation struct {
	// The ID of the file system, assigned by Amazon EFS.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The pathname for the folder being used by a workflow.
	Path *string `pulumi:"path"`
}

type WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationArgs struct {
	// The ID of the file system, assigned by Amazon EFS.
	FileSystemId pulumix.Input[*string] `pulumi:"fileSystemId"`
	// The pathname for the folder being used by a workflow.
	Path pulumix.Input[*string] `pulumi:"path"`
}

func (WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocation)(nil)).Elem()
}

func (i WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationArgs) ToWorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput() WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return i.ToWorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutputWithContext(context.Background())
}

func (i WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationArgs) ToWorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutputWithContext(ctx context.Context) WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput)
}

func (i *WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationArgs] {
	return pulumix.Val(i)
}

type WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocation)(nil)).Elem()
}

func (o WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput) ToWorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput() WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return o
}

func (o WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput) ToWorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutputWithContext(ctx context.Context) WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return o
}

func (o WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocation] {
	return pulumix.Output[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocation]{
		OutputState: o.OutputState,
	}
}

// The ID of the file system, assigned by Amazon EFS.
func (o WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput) FileSystemId() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocation](o, func(v WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocation) *string {
		return v.FileSystemId
	})
}

// The pathname for the folder being used by a workflow.
func (o WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocation](o, func(v WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocation) *string {
		return v.Path
	})
}

type WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocation struct {
	// Specifies the S3 bucket for the customer input file.
	Bucket *string `pulumi:"bucket"`
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `pulumi:"key"`
}

type WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationArgs struct {
	// Specifies the S3 bucket for the customer input file.
	Bucket pulumix.Input[*string] `pulumi:"bucket"`
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key pulumix.Input[*string] `pulumi:"key"`
}

func (WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocation)(nil)).Elem()
}

func (i WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationArgs) ToWorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput() WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput {
	return i.ToWorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutputWithContext(context.Background())
}

func (i WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationArgs) ToWorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutputWithContext(ctx context.Context) WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput)
}

func (i *WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationArgs] {
	return pulumix.Val(i)
}

type WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocation)(nil)).Elem()
}

func (o WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput) ToWorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput() WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput {
	return o
}

func (o WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput) ToWorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutputWithContext(ctx context.Context) WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput {
	return o
}

func (o WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocation] {
	return pulumix.Output[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocation]{
		OutputState: o.OutputState,
	}
}

// Specifies the S3 bucket for the customer input file.
func (o WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput) Bucket() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocation](o, func(v WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocation) *string {
		return v.Bucket
	})
}

// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
func (o WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocation](o, func(v WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocation) *string {
		return v.Key
	})
}

type WorkflowOnExceptionStepDeleteStepDetails struct {
	// The name of the step, used as an identifier.
	Name *string `pulumi:"name"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `pulumi:"sourceFileLocation"`
}

type WorkflowOnExceptionStepDeleteStepDetailsArgs struct {
	// The name of the step, used as an identifier.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation pulumix.Input[*string] `pulumi:"sourceFileLocation"`
}

func (WorkflowOnExceptionStepDeleteStepDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepDeleteStepDetails)(nil)).Elem()
}

func (i WorkflowOnExceptionStepDeleteStepDetailsArgs) ToWorkflowOnExceptionStepDeleteStepDetailsOutput() WorkflowOnExceptionStepDeleteStepDetailsOutput {
	return i.ToWorkflowOnExceptionStepDeleteStepDetailsOutputWithContext(context.Background())
}

func (i WorkflowOnExceptionStepDeleteStepDetailsArgs) ToWorkflowOnExceptionStepDeleteStepDetailsOutputWithContext(ctx context.Context) WorkflowOnExceptionStepDeleteStepDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOnExceptionStepDeleteStepDetailsOutput)
}

func (i *WorkflowOnExceptionStepDeleteStepDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowOnExceptionStepDeleteStepDetailsArgs] {
	return pulumix.Val(i)
}

type WorkflowOnExceptionStepDeleteStepDetailsOutput struct{ *pulumi.OutputState }

func (WorkflowOnExceptionStepDeleteStepDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepDeleteStepDetails)(nil)).Elem()
}

func (o WorkflowOnExceptionStepDeleteStepDetailsOutput) ToWorkflowOnExceptionStepDeleteStepDetailsOutput() WorkflowOnExceptionStepDeleteStepDetailsOutput {
	return o
}

func (o WorkflowOnExceptionStepDeleteStepDetailsOutput) ToWorkflowOnExceptionStepDeleteStepDetailsOutputWithContext(ctx context.Context) WorkflowOnExceptionStepDeleteStepDetailsOutput {
	return o
}

func (o WorkflowOnExceptionStepDeleteStepDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowOnExceptionStepDeleteStepDetails] {
	return pulumix.Output[WorkflowOnExceptionStepDeleteStepDetails]{
		OutputState: o.OutputState,
	}
}

// The name of the step, used as an identifier.
func (o WorkflowOnExceptionStepDeleteStepDetailsOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepDeleteStepDetails](o, func(v WorkflowOnExceptionStepDeleteStepDetails) *string { return v.Name })
}

// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
func (o WorkflowOnExceptionStepDeleteStepDetailsOutput) SourceFileLocation() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepDeleteStepDetails](o, func(v WorkflowOnExceptionStepDeleteStepDetails) *string { return v.SourceFileLocation })
}

type WorkflowOnExceptionStepTagStepDetails struct {
	// The name of the step, used as an identifier.
	Name *string `pulumi:"name"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `pulumi:"sourceFileLocation"`
	// Array that contains from 1 to 10 key/value pairs. See S3 Tags below.
	Tags []WorkflowOnExceptionStepTagStepDetailsTag `pulumi:"tags"`
}

type WorkflowOnExceptionStepTagStepDetailsArgs struct {
	// The name of the step, used as an identifier.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation pulumix.Input[*string] `pulumi:"sourceFileLocation"`
	// Array that contains from 1 to 10 key/value pairs. See S3 Tags below.
	Tags pulumix.Input[[]*WorkflowOnExceptionStepTagStepDetailsTagArgs] `pulumi:"tags"`
}

func (WorkflowOnExceptionStepTagStepDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepTagStepDetails)(nil)).Elem()
}

func (i WorkflowOnExceptionStepTagStepDetailsArgs) ToWorkflowOnExceptionStepTagStepDetailsOutput() WorkflowOnExceptionStepTagStepDetailsOutput {
	return i.ToWorkflowOnExceptionStepTagStepDetailsOutputWithContext(context.Background())
}

func (i WorkflowOnExceptionStepTagStepDetailsArgs) ToWorkflowOnExceptionStepTagStepDetailsOutputWithContext(ctx context.Context) WorkflowOnExceptionStepTagStepDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOnExceptionStepTagStepDetailsOutput)
}

func (i *WorkflowOnExceptionStepTagStepDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowOnExceptionStepTagStepDetailsArgs] {
	return pulumix.Val(i)
}

type WorkflowOnExceptionStepTagStepDetailsOutput struct{ *pulumi.OutputState }

func (WorkflowOnExceptionStepTagStepDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepTagStepDetails)(nil)).Elem()
}

func (o WorkflowOnExceptionStepTagStepDetailsOutput) ToWorkflowOnExceptionStepTagStepDetailsOutput() WorkflowOnExceptionStepTagStepDetailsOutput {
	return o
}

func (o WorkflowOnExceptionStepTagStepDetailsOutput) ToWorkflowOnExceptionStepTagStepDetailsOutputWithContext(ctx context.Context) WorkflowOnExceptionStepTagStepDetailsOutput {
	return o
}

func (o WorkflowOnExceptionStepTagStepDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowOnExceptionStepTagStepDetails] {
	return pulumix.Output[WorkflowOnExceptionStepTagStepDetails]{
		OutputState: o.OutputState,
	}
}

// The name of the step, used as an identifier.
func (o WorkflowOnExceptionStepTagStepDetailsOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepTagStepDetails](o, func(v WorkflowOnExceptionStepTagStepDetails) *string { return v.Name })
}

// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
func (o WorkflowOnExceptionStepTagStepDetailsOutput) SourceFileLocation() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowOnExceptionStepTagStepDetails](o, func(v WorkflowOnExceptionStepTagStepDetails) *string { return v.SourceFileLocation })
}

// Array that contains from 1 to 10 key/value pairs. See S3 Tags below.
func (o WorkflowOnExceptionStepTagStepDetailsOutput) Tags() pulumix.GArrayOutput[WorkflowOnExceptionStepTagStepDetailsTag, WorkflowOnExceptionStepTagStepDetailsTagOutput] {
	value := pulumix.Apply[WorkflowOnExceptionStepTagStepDetails](o, func(v WorkflowOnExceptionStepTagStepDetails) []WorkflowOnExceptionStepTagStepDetailsTag {
		return v.Tags
	})
	return pulumix.GArrayOutput[WorkflowOnExceptionStepTagStepDetailsTag, WorkflowOnExceptionStepTagStepDetailsTagOutput]{OutputState: value.OutputState}
}

type WorkflowOnExceptionStepTagStepDetailsTag struct {
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key string `pulumi:"key"`
	// The value that corresponds to the key.
	Value string `pulumi:"value"`
}

type WorkflowOnExceptionStepTagStepDetailsTagArgs struct {
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key pulumix.Input[string] `pulumi:"key"`
	// The value that corresponds to the key.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (WorkflowOnExceptionStepTagStepDetailsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepTagStepDetailsTag)(nil)).Elem()
}

func (i WorkflowOnExceptionStepTagStepDetailsTagArgs) ToWorkflowOnExceptionStepTagStepDetailsTagOutput() WorkflowOnExceptionStepTagStepDetailsTagOutput {
	return i.ToWorkflowOnExceptionStepTagStepDetailsTagOutputWithContext(context.Background())
}

func (i WorkflowOnExceptionStepTagStepDetailsTagArgs) ToWorkflowOnExceptionStepTagStepDetailsTagOutputWithContext(ctx context.Context) WorkflowOnExceptionStepTagStepDetailsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOnExceptionStepTagStepDetailsTagOutput)
}

func (i *WorkflowOnExceptionStepTagStepDetailsTagArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowOnExceptionStepTagStepDetailsTagArgs] {
	return pulumix.Val(i)
}

type WorkflowOnExceptionStepTagStepDetailsTagOutput struct{ *pulumi.OutputState }

func (WorkflowOnExceptionStepTagStepDetailsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowOnExceptionStepTagStepDetailsTag)(nil)).Elem()
}

func (o WorkflowOnExceptionStepTagStepDetailsTagOutput) ToWorkflowOnExceptionStepTagStepDetailsTagOutput() WorkflowOnExceptionStepTagStepDetailsTagOutput {
	return o
}

func (o WorkflowOnExceptionStepTagStepDetailsTagOutput) ToWorkflowOnExceptionStepTagStepDetailsTagOutputWithContext(ctx context.Context) WorkflowOnExceptionStepTagStepDetailsTagOutput {
	return o
}

func (o WorkflowOnExceptionStepTagStepDetailsTagOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowOnExceptionStepTagStepDetailsTag] {
	return pulumix.Output[WorkflowOnExceptionStepTagStepDetailsTag]{
		OutputState: o.OutputState,
	}
}

// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
func (o WorkflowOnExceptionStepTagStepDetailsTagOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[WorkflowOnExceptionStepTagStepDetailsTag](o, func(v WorkflowOnExceptionStepTagStepDetailsTag) string { return v.Key })
}

// The value that corresponds to the key.
func (o WorkflowOnExceptionStepTagStepDetailsTagOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[WorkflowOnExceptionStepTagStepDetailsTag](o, func(v WorkflowOnExceptionStepTagStepDetailsTag) string { return v.Value })
}

type WorkflowStep struct {
	// Details for a step that performs a file copy. See Copy Step Details below.
	CopyStepDetails *WorkflowStepCopyStepDetails `pulumi:"copyStepDetails"`
	// Details for a step that invokes a lambda function.
	CustomStepDetails *WorkflowStepCustomStepDetails `pulumi:"customStepDetails"`
	// Details for a step that decrypts the file.
	DecryptStepDetails *WorkflowStepDecryptStepDetails `pulumi:"decryptStepDetails"`
	// Details for a step that deletes the file.
	DeleteStepDetails *WorkflowStepDeleteStepDetails `pulumi:"deleteStepDetails"`
	// Details for a step that creates one or more tags.
	TagStepDetails *WorkflowStepTagStepDetails `pulumi:"tagStepDetails"`
	// One of the following step types are supported. `COPY`, `CUSTOM`, `DECRYPT`, `DELETE`, and `TAG`.
	Type string `pulumi:"type"`
}

type WorkflowStepArgs struct {
	// Details for a step that performs a file copy. See Copy Step Details below.
	CopyStepDetails pulumix.Input[*WorkflowStepCopyStepDetailsArgs] `pulumi:"copyStepDetails"`
	// Details for a step that invokes a lambda function.
	CustomStepDetails pulumix.Input[*WorkflowStepCustomStepDetailsArgs] `pulumi:"customStepDetails"`
	// Details for a step that decrypts the file.
	DecryptStepDetails pulumix.Input[*WorkflowStepDecryptStepDetailsArgs] `pulumi:"decryptStepDetails"`
	// Details for a step that deletes the file.
	DeleteStepDetails pulumix.Input[*WorkflowStepDeleteStepDetailsArgs] `pulumi:"deleteStepDetails"`
	// Details for a step that creates one or more tags.
	TagStepDetails pulumix.Input[*WorkflowStepTagStepDetailsArgs] `pulumi:"tagStepDetails"`
	// One of the following step types are supported. `COPY`, `CUSTOM`, `DECRYPT`, `DELETE`, and `TAG`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (WorkflowStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStep)(nil)).Elem()
}

func (i WorkflowStepArgs) ToWorkflowStepOutput() WorkflowStepOutput {
	return i.ToWorkflowStepOutputWithContext(context.Background())
}

func (i WorkflowStepArgs) ToWorkflowStepOutputWithContext(ctx context.Context) WorkflowStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepOutput)
}

func (i *WorkflowStepArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowStepArgs] {
	return pulumix.Val(i)
}

type WorkflowStepOutput struct{ *pulumi.OutputState }

func (WorkflowStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStep)(nil)).Elem()
}

func (o WorkflowStepOutput) ToWorkflowStepOutput() WorkflowStepOutput {
	return o
}

func (o WorkflowStepOutput) ToWorkflowStepOutputWithContext(ctx context.Context) WorkflowStepOutput {
	return o
}

func (o WorkflowStepOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowStep] {
	return pulumix.Output[WorkflowStep]{
		OutputState: o.OutputState,
	}
}

// Details for a step that performs a file copy. See Copy Step Details below.
func (o WorkflowStepOutput) CopyStepDetails() pulumix.GPtrOutput[WorkflowStepCopyStepDetails, WorkflowStepCopyStepDetailsOutput] {
	value := pulumix.Apply[WorkflowStep](o, func(v WorkflowStep) *WorkflowStepCopyStepDetails { return v.CopyStepDetails })
	return pulumix.GPtrOutput[WorkflowStepCopyStepDetails, WorkflowStepCopyStepDetailsOutput]{OutputState: value.OutputState}
}

// Details for a step that invokes a lambda function.
func (o WorkflowStepOutput) CustomStepDetails() pulumix.GPtrOutput[WorkflowStepCustomStepDetails, WorkflowStepCustomStepDetailsOutput] {
	value := pulumix.Apply[WorkflowStep](o, func(v WorkflowStep) *WorkflowStepCustomStepDetails { return v.CustomStepDetails })
	return pulumix.GPtrOutput[WorkflowStepCustomStepDetails, WorkflowStepCustomStepDetailsOutput]{OutputState: value.OutputState}
}

// Details for a step that decrypts the file.
func (o WorkflowStepOutput) DecryptStepDetails() pulumix.GPtrOutput[WorkflowStepDecryptStepDetails, WorkflowStepDecryptStepDetailsOutput] {
	value := pulumix.Apply[WorkflowStep](o, func(v WorkflowStep) *WorkflowStepDecryptStepDetails { return v.DecryptStepDetails })
	return pulumix.GPtrOutput[WorkflowStepDecryptStepDetails, WorkflowStepDecryptStepDetailsOutput]{OutputState: value.OutputState}
}

// Details for a step that deletes the file.
func (o WorkflowStepOutput) DeleteStepDetails() pulumix.GPtrOutput[WorkflowStepDeleteStepDetails, WorkflowStepDeleteStepDetailsOutput] {
	value := pulumix.Apply[WorkflowStep](o, func(v WorkflowStep) *WorkflowStepDeleteStepDetails { return v.DeleteStepDetails })
	return pulumix.GPtrOutput[WorkflowStepDeleteStepDetails, WorkflowStepDeleteStepDetailsOutput]{OutputState: value.OutputState}
}

// Details for a step that creates one or more tags.
func (o WorkflowStepOutput) TagStepDetails() pulumix.GPtrOutput[WorkflowStepTagStepDetails, WorkflowStepTagStepDetailsOutput] {
	value := pulumix.Apply[WorkflowStep](o, func(v WorkflowStep) *WorkflowStepTagStepDetails { return v.TagStepDetails })
	return pulumix.GPtrOutput[WorkflowStepTagStepDetails, WorkflowStepTagStepDetailsOutput]{OutputState: value.OutputState}
}

// One of the following step types are supported. `COPY`, `CUSTOM`, `DECRYPT`, `DELETE`, and `TAG`.
func (o WorkflowStepOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[WorkflowStep](o, func(v WorkflowStep) string { return v.Type })
}

type WorkflowStepCopyStepDetails struct {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation *WorkflowStepCopyStepDetailsDestinationFileLocation `pulumi:"destinationFileLocation"`
	// The name of the step, used as an identifier.
	Name *string `pulumi:"name"`
	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is `FALSE`. Valid values are `TRUE` and `FALSE`.
	OverwriteExisting *string `pulumi:"overwriteExisting"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `pulumi:"sourceFileLocation"`
}

type WorkflowStepCopyStepDetailsArgs struct {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation pulumix.Input[*WorkflowStepCopyStepDetailsDestinationFileLocationArgs] `pulumi:"destinationFileLocation"`
	// The name of the step, used as an identifier.
	Name pulumix.Input[*string] `pulumi:"name"`
	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is `FALSE`. Valid values are `TRUE` and `FALSE`.
	OverwriteExisting pulumix.Input[*string] `pulumi:"overwriteExisting"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation pulumix.Input[*string] `pulumi:"sourceFileLocation"`
}

func (WorkflowStepCopyStepDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepCopyStepDetails)(nil)).Elem()
}

func (i WorkflowStepCopyStepDetailsArgs) ToWorkflowStepCopyStepDetailsOutput() WorkflowStepCopyStepDetailsOutput {
	return i.ToWorkflowStepCopyStepDetailsOutputWithContext(context.Background())
}

func (i WorkflowStepCopyStepDetailsArgs) ToWorkflowStepCopyStepDetailsOutputWithContext(ctx context.Context) WorkflowStepCopyStepDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepCopyStepDetailsOutput)
}

func (i *WorkflowStepCopyStepDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowStepCopyStepDetailsArgs] {
	return pulumix.Val(i)
}

type WorkflowStepCopyStepDetailsOutput struct{ *pulumi.OutputState }

func (WorkflowStepCopyStepDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepCopyStepDetails)(nil)).Elem()
}

func (o WorkflowStepCopyStepDetailsOutput) ToWorkflowStepCopyStepDetailsOutput() WorkflowStepCopyStepDetailsOutput {
	return o
}

func (o WorkflowStepCopyStepDetailsOutput) ToWorkflowStepCopyStepDetailsOutputWithContext(ctx context.Context) WorkflowStepCopyStepDetailsOutput {
	return o
}

func (o WorkflowStepCopyStepDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowStepCopyStepDetails] {
	return pulumix.Output[WorkflowStepCopyStepDetails]{
		OutputState: o.OutputState,
	}
}

// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
func (o WorkflowStepCopyStepDetailsOutput) DestinationFileLocation() pulumix.GPtrOutput[WorkflowStepCopyStepDetailsDestinationFileLocation, WorkflowStepCopyStepDetailsDestinationFileLocationOutput] {
	value := pulumix.Apply[WorkflowStepCopyStepDetails](o, func(v WorkflowStepCopyStepDetails) *WorkflowStepCopyStepDetailsDestinationFileLocation {
		return v.DestinationFileLocation
	})
	return pulumix.GPtrOutput[WorkflowStepCopyStepDetailsDestinationFileLocation, WorkflowStepCopyStepDetailsDestinationFileLocationOutput]{OutputState: value.OutputState}
}

// The name of the step, used as an identifier.
func (o WorkflowStepCopyStepDetailsOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepCopyStepDetails](o, func(v WorkflowStepCopyStepDetails) *string { return v.Name })
}

// A flag that indicates whether or not to overwrite an existing file of the same name. The default is `FALSE`. Valid values are `TRUE` and `FALSE`.
func (o WorkflowStepCopyStepDetailsOutput) OverwriteExisting() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepCopyStepDetails](o, func(v WorkflowStepCopyStepDetails) *string { return v.OverwriteExisting })
}

// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
func (o WorkflowStepCopyStepDetailsOutput) SourceFileLocation() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepCopyStepDetails](o, func(v WorkflowStepCopyStepDetails) *string { return v.SourceFileLocation })
}

type WorkflowStepCopyStepDetailsDestinationFileLocation struct {
	// Specifies the details for the EFS file being copied.
	EfsFileLocation *WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocation `pulumi:"efsFileLocation"`
	// Specifies the details for the S3 file being copied.
	S3FileLocation *WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocation `pulumi:"s3FileLocation"`
}

type WorkflowStepCopyStepDetailsDestinationFileLocationArgs struct {
	// Specifies the details for the EFS file being copied.
	EfsFileLocation pulumix.Input[*WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationArgs] `pulumi:"efsFileLocation"`
	// Specifies the details for the S3 file being copied.
	S3FileLocation pulumix.Input[*WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationArgs] `pulumi:"s3FileLocation"`
}

func (WorkflowStepCopyStepDetailsDestinationFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepCopyStepDetailsDestinationFileLocation)(nil)).Elem()
}

func (i WorkflowStepCopyStepDetailsDestinationFileLocationArgs) ToWorkflowStepCopyStepDetailsDestinationFileLocationOutput() WorkflowStepCopyStepDetailsDestinationFileLocationOutput {
	return i.ToWorkflowStepCopyStepDetailsDestinationFileLocationOutputWithContext(context.Background())
}

func (i WorkflowStepCopyStepDetailsDestinationFileLocationArgs) ToWorkflowStepCopyStepDetailsDestinationFileLocationOutputWithContext(ctx context.Context) WorkflowStepCopyStepDetailsDestinationFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepCopyStepDetailsDestinationFileLocationOutput)
}

func (i *WorkflowStepCopyStepDetailsDestinationFileLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowStepCopyStepDetailsDestinationFileLocationArgs] {
	return pulumix.Val(i)
}

type WorkflowStepCopyStepDetailsDestinationFileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowStepCopyStepDetailsDestinationFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepCopyStepDetailsDestinationFileLocation)(nil)).Elem()
}

func (o WorkflowStepCopyStepDetailsDestinationFileLocationOutput) ToWorkflowStepCopyStepDetailsDestinationFileLocationOutput() WorkflowStepCopyStepDetailsDestinationFileLocationOutput {
	return o
}

func (o WorkflowStepCopyStepDetailsDestinationFileLocationOutput) ToWorkflowStepCopyStepDetailsDestinationFileLocationOutputWithContext(ctx context.Context) WorkflowStepCopyStepDetailsDestinationFileLocationOutput {
	return o
}

func (o WorkflowStepCopyStepDetailsDestinationFileLocationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowStepCopyStepDetailsDestinationFileLocation] {
	return pulumix.Output[WorkflowStepCopyStepDetailsDestinationFileLocation]{
		OutputState: o.OutputState,
	}
}

// Specifies the details for the EFS file being copied.
func (o WorkflowStepCopyStepDetailsDestinationFileLocationOutput) EfsFileLocation() pulumix.GPtrOutput[WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocation, WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput] {
	value := pulumix.Apply[WorkflowStepCopyStepDetailsDestinationFileLocation](o, func(v WorkflowStepCopyStepDetailsDestinationFileLocation) *WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocation {
		return v.EfsFileLocation
	})
	return pulumix.GPtrOutput[WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocation, WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput]{OutputState: value.OutputState}
}

// Specifies the details for the S3 file being copied.
func (o WorkflowStepCopyStepDetailsDestinationFileLocationOutput) S3FileLocation() pulumix.GPtrOutput[WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocation, WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput] {
	value := pulumix.Apply[WorkflowStepCopyStepDetailsDestinationFileLocation](o, func(v WorkflowStepCopyStepDetailsDestinationFileLocation) *WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocation {
		return v.S3FileLocation
	})
	return pulumix.GPtrOutput[WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocation, WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput]{OutputState: value.OutputState}
}

type WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocation struct {
	// The ID of the file system, assigned by Amazon EFS.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The pathname for the folder being used by a workflow.
	Path *string `pulumi:"path"`
}

type WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationArgs struct {
	// The ID of the file system, assigned by Amazon EFS.
	FileSystemId pulumix.Input[*string] `pulumi:"fileSystemId"`
	// The pathname for the folder being used by a workflow.
	Path pulumix.Input[*string] `pulumi:"path"`
}

func (WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocation)(nil)).Elem()
}

func (i WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationArgs) ToWorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput() WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return i.ToWorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutputWithContext(context.Background())
}

func (i WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationArgs) ToWorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutputWithContext(ctx context.Context) WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput)
}

func (i *WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationArgs] {
	return pulumix.Val(i)
}

type WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocation)(nil)).Elem()
}

func (o WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput) ToWorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput() WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return o
}

func (o WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput) ToWorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutputWithContext(ctx context.Context) WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return o
}

func (o WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocation] {
	return pulumix.Output[WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocation]{
		OutputState: o.OutputState,
	}
}

// The ID of the file system, assigned by Amazon EFS.
func (o WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput) FileSystemId() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocation](o, func(v WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocation) *string {
		return v.FileSystemId
	})
}

// The pathname for the folder being used by a workflow.
func (o WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocation](o, func(v WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocation) *string { return v.Path })
}

type WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocation struct {
	// Specifies the S3 bucket for the customer input file.
	Bucket *string `pulumi:"bucket"`
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `pulumi:"key"`
}

type WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationArgs struct {
	// Specifies the S3 bucket for the customer input file.
	Bucket pulumix.Input[*string] `pulumi:"bucket"`
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key pulumix.Input[*string] `pulumi:"key"`
}

func (WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocation)(nil)).Elem()
}

func (i WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationArgs) ToWorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput() WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput {
	return i.ToWorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutputWithContext(context.Background())
}

func (i WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationArgs) ToWorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutputWithContext(ctx context.Context) WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput)
}

func (i *WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationArgs] {
	return pulumix.Val(i)
}

type WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocation)(nil)).Elem()
}

func (o WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput) ToWorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput() WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput {
	return o
}

func (o WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput) ToWorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutputWithContext(ctx context.Context) WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput {
	return o
}

func (o WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocation] {
	return pulumix.Output[WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocation]{
		OutputState: o.OutputState,
	}
}

// Specifies the S3 bucket for the customer input file.
func (o WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput) Bucket() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocation](o, func(v WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocation) *string { return v.Bucket })
}

// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
func (o WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocation](o, func(v WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocation) *string { return v.Key })
}

type WorkflowStepCustomStepDetails struct {
	// The name of the step, used as an identifier.
	Name *string `pulumi:"name"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `pulumi:"sourceFileLocation"`
	// The ARN for the lambda function that is being called.
	Target *string `pulumi:"target"`
	// Timeout, in seconds, for the step.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

type WorkflowStepCustomStepDetailsArgs struct {
	// The name of the step, used as an identifier.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation pulumix.Input[*string] `pulumi:"sourceFileLocation"`
	// The ARN for the lambda function that is being called.
	Target pulumix.Input[*string] `pulumi:"target"`
	// Timeout, in seconds, for the step.
	TimeoutSeconds pulumix.Input[*int] `pulumi:"timeoutSeconds"`
}

func (WorkflowStepCustomStepDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepCustomStepDetails)(nil)).Elem()
}

func (i WorkflowStepCustomStepDetailsArgs) ToWorkflowStepCustomStepDetailsOutput() WorkflowStepCustomStepDetailsOutput {
	return i.ToWorkflowStepCustomStepDetailsOutputWithContext(context.Background())
}

func (i WorkflowStepCustomStepDetailsArgs) ToWorkflowStepCustomStepDetailsOutputWithContext(ctx context.Context) WorkflowStepCustomStepDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepCustomStepDetailsOutput)
}

func (i *WorkflowStepCustomStepDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowStepCustomStepDetailsArgs] {
	return pulumix.Val(i)
}

type WorkflowStepCustomStepDetailsOutput struct{ *pulumi.OutputState }

func (WorkflowStepCustomStepDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepCustomStepDetails)(nil)).Elem()
}

func (o WorkflowStepCustomStepDetailsOutput) ToWorkflowStepCustomStepDetailsOutput() WorkflowStepCustomStepDetailsOutput {
	return o
}

func (o WorkflowStepCustomStepDetailsOutput) ToWorkflowStepCustomStepDetailsOutputWithContext(ctx context.Context) WorkflowStepCustomStepDetailsOutput {
	return o
}

func (o WorkflowStepCustomStepDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowStepCustomStepDetails] {
	return pulumix.Output[WorkflowStepCustomStepDetails]{
		OutputState: o.OutputState,
	}
}

// The name of the step, used as an identifier.
func (o WorkflowStepCustomStepDetailsOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepCustomStepDetails](o, func(v WorkflowStepCustomStepDetails) *string { return v.Name })
}

// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
func (o WorkflowStepCustomStepDetailsOutput) SourceFileLocation() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepCustomStepDetails](o, func(v WorkflowStepCustomStepDetails) *string { return v.SourceFileLocation })
}

// The ARN for the lambda function that is being called.
func (o WorkflowStepCustomStepDetailsOutput) Target() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepCustomStepDetails](o, func(v WorkflowStepCustomStepDetails) *string { return v.Target })
}

// Timeout, in seconds, for the step.
func (o WorkflowStepCustomStepDetailsOutput) TimeoutSeconds() pulumix.Output[*int] {
	return pulumix.Apply[WorkflowStepCustomStepDetails](o, func(v WorkflowStepCustomStepDetails) *int { return v.TimeoutSeconds })
}

type WorkflowStepDecryptStepDetails struct {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation *WorkflowStepDecryptStepDetailsDestinationFileLocation `pulumi:"destinationFileLocation"`
	// The name of the step, used as an identifier.
	Name *string `pulumi:"name"`
	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is `FALSE`. Valid values are `TRUE` and `FALSE`.
	OverwriteExisting *string `pulumi:"overwriteExisting"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `pulumi:"sourceFileLocation"`
	// The type of encryption used. Currently, this value must be `"PGP"`.
	Type string `pulumi:"type"`
}

type WorkflowStepDecryptStepDetailsArgs struct {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation pulumix.Input[*WorkflowStepDecryptStepDetailsDestinationFileLocationArgs] `pulumi:"destinationFileLocation"`
	// The name of the step, used as an identifier.
	Name pulumix.Input[*string] `pulumi:"name"`
	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is `FALSE`. Valid values are `TRUE` and `FALSE`.
	OverwriteExisting pulumix.Input[*string] `pulumi:"overwriteExisting"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation pulumix.Input[*string] `pulumi:"sourceFileLocation"`
	// The type of encryption used. Currently, this value must be `"PGP"`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (WorkflowStepDecryptStepDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepDecryptStepDetails)(nil)).Elem()
}

func (i WorkflowStepDecryptStepDetailsArgs) ToWorkflowStepDecryptStepDetailsOutput() WorkflowStepDecryptStepDetailsOutput {
	return i.ToWorkflowStepDecryptStepDetailsOutputWithContext(context.Background())
}

func (i WorkflowStepDecryptStepDetailsArgs) ToWorkflowStepDecryptStepDetailsOutputWithContext(ctx context.Context) WorkflowStepDecryptStepDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepDecryptStepDetailsOutput)
}

func (i *WorkflowStepDecryptStepDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowStepDecryptStepDetailsArgs] {
	return pulumix.Val(i)
}

type WorkflowStepDecryptStepDetailsOutput struct{ *pulumi.OutputState }

func (WorkflowStepDecryptStepDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepDecryptStepDetails)(nil)).Elem()
}

func (o WorkflowStepDecryptStepDetailsOutput) ToWorkflowStepDecryptStepDetailsOutput() WorkflowStepDecryptStepDetailsOutput {
	return o
}

func (o WorkflowStepDecryptStepDetailsOutput) ToWorkflowStepDecryptStepDetailsOutputWithContext(ctx context.Context) WorkflowStepDecryptStepDetailsOutput {
	return o
}

func (o WorkflowStepDecryptStepDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowStepDecryptStepDetails] {
	return pulumix.Output[WorkflowStepDecryptStepDetails]{
		OutputState: o.OutputState,
	}
}

// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
func (o WorkflowStepDecryptStepDetailsOutput) DestinationFileLocation() pulumix.GPtrOutput[WorkflowStepDecryptStepDetailsDestinationFileLocation, WorkflowStepDecryptStepDetailsDestinationFileLocationOutput] {
	value := pulumix.Apply[WorkflowStepDecryptStepDetails](o, func(v WorkflowStepDecryptStepDetails) *WorkflowStepDecryptStepDetailsDestinationFileLocation {
		return v.DestinationFileLocation
	})
	return pulumix.GPtrOutput[WorkflowStepDecryptStepDetailsDestinationFileLocation, WorkflowStepDecryptStepDetailsDestinationFileLocationOutput]{OutputState: value.OutputState}
}

// The name of the step, used as an identifier.
func (o WorkflowStepDecryptStepDetailsOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepDecryptStepDetails](o, func(v WorkflowStepDecryptStepDetails) *string { return v.Name })
}

// A flag that indicates whether or not to overwrite an existing file of the same name. The default is `FALSE`. Valid values are `TRUE` and `FALSE`.
func (o WorkflowStepDecryptStepDetailsOutput) OverwriteExisting() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepDecryptStepDetails](o, func(v WorkflowStepDecryptStepDetails) *string { return v.OverwriteExisting })
}

// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
func (o WorkflowStepDecryptStepDetailsOutput) SourceFileLocation() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepDecryptStepDetails](o, func(v WorkflowStepDecryptStepDetails) *string { return v.SourceFileLocation })
}

// The type of encryption used. Currently, this value must be `"PGP"`.
func (o WorkflowStepDecryptStepDetailsOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[WorkflowStepDecryptStepDetails](o, func(v WorkflowStepDecryptStepDetails) string { return v.Type })
}

type WorkflowStepDecryptStepDetailsDestinationFileLocation struct {
	// Specifies the details for the EFS file being copied.
	EfsFileLocation *WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocation `pulumi:"efsFileLocation"`
	// Specifies the details for the S3 file being copied.
	S3FileLocation *WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocation `pulumi:"s3FileLocation"`
}

type WorkflowStepDecryptStepDetailsDestinationFileLocationArgs struct {
	// Specifies the details for the EFS file being copied.
	EfsFileLocation pulumix.Input[*WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationArgs] `pulumi:"efsFileLocation"`
	// Specifies the details for the S3 file being copied.
	S3FileLocation pulumix.Input[*WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationArgs] `pulumi:"s3FileLocation"`
}

func (WorkflowStepDecryptStepDetailsDestinationFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepDecryptStepDetailsDestinationFileLocation)(nil)).Elem()
}

func (i WorkflowStepDecryptStepDetailsDestinationFileLocationArgs) ToWorkflowStepDecryptStepDetailsDestinationFileLocationOutput() WorkflowStepDecryptStepDetailsDestinationFileLocationOutput {
	return i.ToWorkflowStepDecryptStepDetailsDestinationFileLocationOutputWithContext(context.Background())
}

func (i WorkflowStepDecryptStepDetailsDestinationFileLocationArgs) ToWorkflowStepDecryptStepDetailsDestinationFileLocationOutputWithContext(ctx context.Context) WorkflowStepDecryptStepDetailsDestinationFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepDecryptStepDetailsDestinationFileLocationOutput)
}

func (i *WorkflowStepDecryptStepDetailsDestinationFileLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowStepDecryptStepDetailsDestinationFileLocationArgs] {
	return pulumix.Val(i)
}

type WorkflowStepDecryptStepDetailsDestinationFileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowStepDecryptStepDetailsDestinationFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepDecryptStepDetailsDestinationFileLocation)(nil)).Elem()
}

func (o WorkflowStepDecryptStepDetailsDestinationFileLocationOutput) ToWorkflowStepDecryptStepDetailsDestinationFileLocationOutput() WorkflowStepDecryptStepDetailsDestinationFileLocationOutput {
	return o
}

func (o WorkflowStepDecryptStepDetailsDestinationFileLocationOutput) ToWorkflowStepDecryptStepDetailsDestinationFileLocationOutputWithContext(ctx context.Context) WorkflowStepDecryptStepDetailsDestinationFileLocationOutput {
	return o
}

func (o WorkflowStepDecryptStepDetailsDestinationFileLocationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowStepDecryptStepDetailsDestinationFileLocation] {
	return pulumix.Output[WorkflowStepDecryptStepDetailsDestinationFileLocation]{
		OutputState: o.OutputState,
	}
}

// Specifies the details for the EFS file being copied.
func (o WorkflowStepDecryptStepDetailsDestinationFileLocationOutput) EfsFileLocation() pulumix.GPtrOutput[WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocation, WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput] {
	value := pulumix.Apply[WorkflowStepDecryptStepDetailsDestinationFileLocation](o, func(v WorkflowStepDecryptStepDetailsDestinationFileLocation) *WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocation {
		return v.EfsFileLocation
	})
	return pulumix.GPtrOutput[WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocation, WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput]{OutputState: value.OutputState}
}

// Specifies the details for the S3 file being copied.
func (o WorkflowStepDecryptStepDetailsDestinationFileLocationOutput) S3FileLocation() pulumix.GPtrOutput[WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocation, WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput] {
	value := pulumix.Apply[WorkflowStepDecryptStepDetailsDestinationFileLocation](o, func(v WorkflowStepDecryptStepDetailsDestinationFileLocation) *WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocation {
		return v.S3FileLocation
	})
	return pulumix.GPtrOutput[WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocation, WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput]{OutputState: value.OutputState}
}

type WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocation struct {
	// The ID of the file system, assigned by Amazon EFS.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The pathname for the folder being used by a workflow.
	Path *string `pulumi:"path"`
}

type WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationArgs struct {
	// The ID of the file system, assigned by Amazon EFS.
	FileSystemId pulumix.Input[*string] `pulumi:"fileSystemId"`
	// The pathname for the folder being used by a workflow.
	Path pulumix.Input[*string] `pulumi:"path"`
}

func (WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocation)(nil)).Elem()
}

func (i WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationArgs) ToWorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput() WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return i.ToWorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutputWithContext(context.Background())
}

func (i WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationArgs) ToWorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutputWithContext(ctx context.Context) WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput)
}

func (i *WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationArgs] {
	return pulumix.Val(i)
}

type WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocation)(nil)).Elem()
}

func (o WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput) ToWorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput() WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return o
}

func (o WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput) ToWorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutputWithContext(ctx context.Context) WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput {
	return o
}

func (o WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocation] {
	return pulumix.Output[WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocation]{
		OutputState: o.OutputState,
	}
}

// The ID of the file system, assigned by Amazon EFS.
func (o WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput) FileSystemId() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocation](o, func(v WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocation) *string {
		return v.FileSystemId
	})
}

// The pathname for the folder being used by a workflow.
func (o WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocation](o, func(v WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocation) *string { return v.Path })
}

type WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocation struct {
	// Specifies the S3 bucket for the customer input file.
	Bucket *string `pulumi:"bucket"`
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `pulumi:"key"`
}

type WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationArgs struct {
	// Specifies the S3 bucket for the customer input file.
	Bucket pulumix.Input[*string] `pulumi:"bucket"`
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key pulumix.Input[*string] `pulumi:"key"`
}

func (WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocation)(nil)).Elem()
}

func (i WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationArgs) ToWorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput() WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput {
	return i.ToWorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutputWithContext(context.Background())
}

func (i WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationArgs) ToWorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutputWithContext(ctx context.Context) WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput)
}

func (i *WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationArgs] {
	return pulumix.Val(i)
}

type WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocation)(nil)).Elem()
}

func (o WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput) ToWorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput() WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput {
	return o
}

func (o WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput) ToWorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutputWithContext(ctx context.Context) WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput {
	return o
}

func (o WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocation] {
	return pulumix.Output[WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocation]{
		OutputState: o.OutputState,
	}
}

// Specifies the S3 bucket for the customer input file.
func (o WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput) Bucket() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocation](o, func(v WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocation) *string { return v.Bucket })
}

// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
func (o WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocation](o, func(v WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocation) *string { return v.Key })
}

type WorkflowStepDeleteStepDetails struct {
	// The name of the step, used as an identifier.
	Name *string `pulumi:"name"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `pulumi:"sourceFileLocation"`
}

type WorkflowStepDeleteStepDetailsArgs struct {
	// The name of the step, used as an identifier.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation pulumix.Input[*string] `pulumi:"sourceFileLocation"`
}

func (WorkflowStepDeleteStepDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepDeleteStepDetails)(nil)).Elem()
}

func (i WorkflowStepDeleteStepDetailsArgs) ToWorkflowStepDeleteStepDetailsOutput() WorkflowStepDeleteStepDetailsOutput {
	return i.ToWorkflowStepDeleteStepDetailsOutputWithContext(context.Background())
}

func (i WorkflowStepDeleteStepDetailsArgs) ToWorkflowStepDeleteStepDetailsOutputWithContext(ctx context.Context) WorkflowStepDeleteStepDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepDeleteStepDetailsOutput)
}

func (i *WorkflowStepDeleteStepDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowStepDeleteStepDetailsArgs] {
	return pulumix.Val(i)
}

type WorkflowStepDeleteStepDetailsOutput struct{ *pulumi.OutputState }

func (WorkflowStepDeleteStepDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepDeleteStepDetails)(nil)).Elem()
}

func (o WorkflowStepDeleteStepDetailsOutput) ToWorkflowStepDeleteStepDetailsOutput() WorkflowStepDeleteStepDetailsOutput {
	return o
}

func (o WorkflowStepDeleteStepDetailsOutput) ToWorkflowStepDeleteStepDetailsOutputWithContext(ctx context.Context) WorkflowStepDeleteStepDetailsOutput {
	return o
}

func (o WorkflowStepDeleteStepDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowStepDeleteStepDetails] {
	return pulumix.Output[WorkflowStepDeleteStepDetails]{
		OutputState: o.OutputState,
	}
}

// The name of the step, used as an identifier.
func (o WorkflowStepDeleteStepDetailsOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepDeleteStepDetails](o, func(v WorkflowStepDeleteStepDetails) *string { return v.Name })
}

// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
func (o WorkflowStepDeleteStepDetailsOutput) SourceFileLocation() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepDeleteStepDetails](o, func(v WorkflowStepDeleteStepDetails) *string { return v.SourceFileLocation })
}

type WorkflowStepTagStepDetails struct {
	// The name of the step, used as an identifier.
	Name *string `pulumi:"name"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `pulumi:"sourceFileLocation"`
	// Array that contains from 1 to 10 key/value pairs. See S3 Tags below.
	Tags []WorkflowStepTagStepDetailsTag `pulumi:"tags"`
}

type WorkflowStepTagStepDetailsArgs struct {
	// The name of the step, used as an identifier.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation pulumix.Input[*string] `pulumi:"sourceFileLocation"`
	// Array that contains from 1 to 10 key/value pairs. See S3 Tags below.
	Tags pulumix.Input[[]*WorkflowStepTagStepDetailsTagArgs] `pulumi:"tags"`
}

func (WorkflowStepTagStepDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepTagStepDetails)(nil)).Elem()
}

func (i WorkflowStepTagStepDetailsArgs) ToWorkflowStepTagStepDetailsOutput() WorkflowStepTagStepDetailsOutput {
	return i.ToWorkflowStepTagStepDetailsOutputWithContext(context.Background())
}

func (i WorkflowStepTagStepDetailsArgs) ToWorkflowStepTagStepDetailsOutputWithContext(ctx context.Context) WorkflowStepTagStepDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepTagStepDetailsOutput)
}

func (i *WorkflowStepTagStepDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowStepTagStepDetailsArgs] {
	return pulumix.Val(i)
}

type WorkflowStepTagStepDetailsOutput struct{ *pulumi.OutputState }

func (WorkflowStepTagStepDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepTagStepDetails)(nil)).Elem()
}

func (o WorkflowStepTagStepDetailsOutput) ToWorkflowStepTagStepDetailsOutput() WorkflowStepTagStepDetailsOutput {
	return o
}

func (o WorkflowStepTagStepDetailsOutput) ToWorkflowStepTagStepDetailsOutputWithContext(ctx context.Context) WorkflowStepTagStepDetailsOutput {
	return o
}

func (o WorkflowStepTagStepDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowStepTagStepDetails] {
	return pulumix.Output[WorkflowStepTagStepDetails]{
		OutputState: o.OutputState,
	}
}

// The name of the step, used as an identifier.
func (o WorkflowStepTagStepDetailsOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepTagStepDetails](o, func(v WorkflowStepTagStepDetails) *string { return v.Name })
}

// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
func (o WorkflowStepTagStepDetailsOutput) SourceFileLocation() pulumix.Output[*string] {
	return pulumix.Apply[WorkflowStepTagStepDetails](o, func(v WorkflowStepTagStepDetails) *string { return v.SourceFileLocation })
}

// Array that contains from 1 to 10 key/value pairs. See S3 Tags below.
func (o WorkflowStepTagStepDetailsOutput) Tags() pulumix.GArrayOutput[WorkflowStepTagStepDetailsTag, WorkflowStepTagStepDetailsTagOutput] {
	value := pulumix.Apply[WorkflowStepTagStepDetails](o, func(v WorkflowStepTagStepDetails) []WorkflowStepTagStepDetailsTag { return v.Tags })
	return pulumix.GArrayOutput[WorkflowStepTagStepDetailsTag, WorkflowStepTagStepDetailsTagOutput]{OutputState: value.OutputState}
}

type WorkflowStepTagStepDetailsTag struct {
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key string `pulumi:"key"`
	// The value that corresponds to the key.
	Value string `pulumi:"value"`
}

type WorkflowStepTagStepDetailsTagArgs struct {
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key pulumix.Input[string] `pulumi:"key"`
	// The value that corresponds to the key.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (WorkflowStepTagStepDetailsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepTagStepDetailsTag)(nil)).Elem()
}

func (i WorkflowStepTagStepDetailsTagArgs) ToWorkflowStepTagStepDetailsTagOutput() WorkflowStepTagStepDetailsTagOutput {
	return i.ToWorkflowStepTagStepDetailsTagOutputWithContext(context.Background())
}

func (i WorkflowStepTagStepDetailsTagArgs) ToWorkflowStepTagStepDetailsTagOutputWithContext(ctx context.Context) WorkflowStepTagStepDetailsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepTagStepDetailsTagOutput)
}

func (i *WorkflowStepTagStepDetailsTagArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkflowStepTagStepDetailsTagArgs] {
	return pulumix.Val(i)
}

type WorkflowStepTagStepDetailsTagOutput struct{ *pulumi.OutputState }

func (WorkflowStepTagStepDetailsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepTagStepDetailsTag)(nil)).Elem()
}

func (o WorkflowStepTagStepDetailsTagOutput) ToWorkflowStepTagStepDetailsTagOutput() WorkflowStepTagStepDetailsTagOutput {
	return o
}

func (o WorkflowStepTagStepDetailsTagOutput) ToWorkflowStepTagStepDetailsTagOutputWithContext(ctx context.Context) WorkflowStepTagStepDetailsTagOutput {
	return o
}

func (o WorkflowStepTagStepDetailsTagOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowStepTagStepDetailsTag] {
	return pulumix.Output[WorkflowStepTagStepDetailsTag]{
		OutputState: o.OutputState,
	}
}

// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
func (o WorkflowStepTagStepDetailsTagOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[WorkflowStepTagStepDetailsTag](o, func(v WorkflowStepTagStepDetailsTag) string { return v.Key })
}

// The value that corresponds to the key.
func (o WorkflowStepTagStepDetailsTagOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[WorkflowStepTagStepDetailsTag](o, func(v WorkflowStepTagStepDetailsTag) string { return v.Value })
}

func init() {
	pulumi.RegisterOutputType(AccessHomeDirectoryMappingOutput{})
	pulumi.RegisterOutputType(AccessPosixProfileOutput{})
	pulumi.RegisterOutputType(ConnectorAs2ConfigOutput{})
	pulumi.RegisterOutputType(ServerEndpointDetailsOutput{})
	pulumi.RegisterOutputType(ServerProtocolDetailsOutput{})
	pulumi.RegisterOutputType(ServerWorkflowDetailsOutput{})
	pulumi.RegisterOutputType(ServerWorkflowDetailsOnPartialUploadOutput{})
	pulumi.RegisterOutputType(ServerWorkflowDetailsOnUploadOutput{})
	pulumi.RegisterOutputType(UserHomeDirectoryMappingOutput{})
	pulumi.RegisterOutputType(UserPosixProfileOutput{})
	pulumi.RegisterOutputType(WorkflowOnExceptionStepOutput{})
	pulumi.RegisterOutputType(WorkflowOnExceptionStepCopyStepDetailsOutput{})
	pulumi.RegisterOutputType(WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowOnExceptionStepCustomStepDetailsOutput{})
	pulumi.RegisterOutputType(WorkflowOnExceptionStepDecryptStepDetailsOutput{})
	pulumi.RegisterOutputType(WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowOnExceptionStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowOnExceptionStepDeleteStepDetailsOutput{})
	pulumi.RegisterOutputType(WorkflowOnExceptionStepTagStepDetailsOutput{})
	pulumi.RegisterOutputType(WorkflowOnExceptionStepTagStepDetailsTagOutput{})
	pulumi.RegisterOutputType(WorkflowStepOutput{})
	pulumi.RegisterOutputType(WorkflowStepCopyStepDetailsOutput{})
	pulumi.RegisterOutputType(WorkflowStepCopyStepDetailsDestinationFileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowStepCopyStepDetailsDestinationFileLocationEfsFileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowStepCopyStepDetailsDestinationFileLocationS3FileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowStepCustomStepDetailsOutput{})
	pulumi.RegisterOutputType(WorkflowStepDecryptStepDetailsOutput{})
	pulumi.RegisterOutputType(WorkflowStepDecryptStepDetailsDestinationFileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowStepDecryptStepDetailsDestinationFileLocationEfsFileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowStepDecryptStepDetailsDestinationFileLocationS3FileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowStepDeleteStepDetailsOutput{})
	pulumi.RegisterOutputType(WorkflowStepTagStepDetailsOutput{})
	pulumi.RegisterOutputType(WorkflowStepTagStepDetailsTagOutput{})
}
