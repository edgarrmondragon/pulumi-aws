// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an OpsWorks permission resource.
type Permission struct {
	pulumi.CustomResourceState

	// Whether the user is allowed to use SSH to communicate with the instance
	AllowSsh pulumix.Output[bool] `pulumi:"allowSsh"`
	// Whether the user is allowed to use sudo to elevate privileges
	AllowSudo pulumix.Output[bool] `pulumi:"allowSudo"`
	// The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iamOnly`
	Level pulumix.Output[string] `pulumi:"level"`
	// The stack to set the permissions for
	StackId pulumix.Output[string] `pulumi:"stackId"`
	// The user's IAM ARN to set permissions for
	UserArn pulumix.Output[string] `pulumi:"userArn"`
}

// NewPermission registers a new resource with the given unique name, arguments, and options.
func NewPermission(ctx *pulumi.Context,
	name string, args *PermissionArgs, opts ...pulumi.ResourceOption) (*Permission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	if args.UserArn == nil {
		return nil, errors.New("invalid value for required argument 'UserArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Permission
	err := ctx.RegisterResource("aws:opsworks/permission:Permission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermission gets an existing Permission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionState, opts ...pulumi.ResourceOption) (*Permission, error) {
	var resource Permission
	err := ctx.ReadResource("aws:opsworks/permission:Permission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Permission resources.
type permissionState struct {
	// Whether the user is allowed to use SSH to communicate with the instance
	AllowSsh *bool `pulumi:"allowSsh"`
	// Whether the user is allowed to use sudo to elevate privileges
	AllowSudo *bool `pulumi:"allowSudo"`
	// The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iamOnly`
	Level *string `pulumi:"level"`
	// The stack to set the permissions for
	StackId *string `pulumi:"stackId"`
	// The user's IAM ARN to set permissions for
	UserArn *string `pulumi:"userArn"`
}

type PermissionState struct {
	// Whether the user is allowed to use SSH to communicate with the instance
	AllowSsh pulumix.Input[*bool]
	// Whether the user is allowed to use sudo to elevate privileges
	AllowSudo pulumix.Input[*bool]
	// The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iamOnly`
	Level pulumix.Input[*string]
	// The stack to set the permissions for
	StackId pulumix.Input[*string]
	// The user's IAM ARN to set permissions for
	UserArn pulumix.Input[*string]
}

func (PermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionState)(nil)).Elem()
}

type permissionArgs struct {
	// Whether the user is allowed to use SSH to communicate with the instance
	AllowSsh *bool `pulumi:"allowSsh"`
	// Whether the user is allowed to use sudo to elevate privileges
	AllowSudo *bool `pulumi:"allowSudo"`
	// The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iamOnly`
	Level *string `pulumi:"level"`
	// The stack to set the permissions for
	StackId string `pulumi:"stackId"`
	// The user's IAM ARN to set permissions for
	UserArn string `pulumi:"userArn"`
}

// The set of arguments for constructing a Permission resource.
type PermissionArgs struct {
	// Whether the user is allowed to use SSH to communicate with the instance
	AllowSsh pulumix.Input[*bool]
	// Whether the user is allowed to use sudo to elevate privileges
	AllowSudo pulumix.Input[*bool]
	// The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iamOnly`
	Level pulumix.Input[*string]
	// The stack to set the permissions for
	StackId pulumix.Input[string]
	// The user's IAM ARN to set permissions for
	UserArn pulumix.Input[string]
}

func (PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionArgs)(nil)).Elem()
}

type PermissionOutput struct{ *pulumi.OutputState }

func (PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Permission)(nil)).Elem()
}

func (o PermissionOutput) ToPermissionOutput() PermissionOutput {
	return o
}

func (o PermissionOutput) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return o
}

func (o PermissionOutput) ToOutput(ctx context.Context) pulumix.Output[Permission] {
	return pulumix.Output[Permission]{
		OutputState: o.OutputState,
	}
}

// Whether the user is allowed to use SSH to communicate with the instance
func (o PermissionOutput) AllowSsh() pulumix.Output[bool] {
	value := pulumix.Apply[Permission](o, func(v Permission) pulumix.Output[bool] { return v.AllowSsh })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Whether the user is allowed to use sudo to elevate privileges
func (o PermissionOutput) AllowSudo() pulumix.Output[bool] {
	value := pulumix.Apply[Permission](o, func(v Permission) pulumix.Output[bool] { return v.AllowSudo })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iamOnly`
func (o PermissionOutput) Level() pulumix.Output[string] {
	value := pulumix.Apply[Permission](o, func(v Permission) pulumix.Output[string] { return v.Level })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The stack to set the permissions for
func (o PermissionOutput) StackId() pulumix.Output[string] {
	value := pulumix.Apply[Permission](o, func(v Permission) pulumix.Output[string] { return v.StackId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The user's IAM ARN to set permissions for
func (o PermissionOutput) UserArn() pulumix.Output[string] {
	value := pulumix.Apply[Permission](o, func(v Permission) pulumix.Output[string] { return v.UserArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(PermissionOutput{})
}
