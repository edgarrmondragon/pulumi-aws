// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to create a new launch configuration, used for autoscaling groups.
//
// !> **WARNING:** The use of launch configurations is discouraged in favour of launch templates. Read more in the [AWS EC2 Documentation](https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-configurations.html).
//
// > **Note** When using `ec2.LaunchConfiguration` with `autoscaling.Group`, it is recommended to use the `namePrefix` (Optional) instead of the `name` (Optional) attribute.
type LaunchConfiguration struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name of the launch configuration.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Associate a public ip address with an instance in a VPC.
	AssociatePublicIpAddress pulumix.Output[*bool] `pulumi:"associatePublicIpAddress"`
	// Additional EBS block devices to attach to the instance. See Block Devices below for details.
	EbsBlockDevices pulumix.GArrayOutput[LaunchConfigurationEbsBlockDevice, LaunchConfigurationEbsBlockDeviceOutput] `pulumi:"ebsBlockDevices"`
	// If true, the launched EC2 instance will be EBS-optimized.
	EbsOptimized pulumix.Output[bool] `pulumi:"ebsOptimized"`
	// Enables/disables detailed monitoring. This is enabled by default.
	EnableMonitoring pulumix.Output[*bool] `pulumi:"enableMonitoring"`
	// Customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details.
	EphemeralBlockDevices pulumix.GArrayOutput[LaunchConfigurationEphemeralBlockDevice, LaunchConfigurationEphemeralBlockDeviceOutput] `pulumi:"ephemeralBlockDevices"`
	// The name attribute of the IAM instance profile to associate with launched instances.
	IamInstanceProfile pulumix.Output[*string] `pulumi:"iamInstanceProfile"`
	// The EC2 image ID to launch.
	ImageId pulumix.Output[string] `pulumi:"imageId"`
	// The size of instance to launch.
	//
	// The following arguments are optional:
	InstanceType pulumix.Output[string] `pulumi:"instanceType"`
	// The key name that should be used for the instance.
	KeyName pulumix.Output[string] `pulumi:"keyName"`
	// The metadata options for the instance.
	MetadataOptions pulumix.GPtrOutput[LaunchConfigurationMetadataOptions, LaunchConfigurationMetadataOptionsOutput] `pulumi:"metadataOptions"`
	// The name of the launch configuration. If you leave this blank, this provider will auto-generate a unique name. Conflicts with `namePrefix`.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[string] `pulumi:"namePrefix"`
	// The tenancy of the instance. Valid values are `default` or `dedicated`, see [AWS's Create Launch Configuration](http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_CreateLaunchConfiguration.html) for more details.
	PlacementTenancy pulumix.Output[*string] `pulumi:"placementTenancy"`
	// Customize details about the root block device of the instance. See Block Devices below for details.
	RootBlockDevice pulumix.GPtrOutput[LaunchConfigurationRootBlockDevice, LaunchConfigurationRootBlockDeviceOutput] `pulumi:"rootBlockDevice"`
	// A list of associated security group IDS.
	SecurityGroups pulumix.ArrayOutput[string] `pulumi:"securityGroups"`
	// The maximum price to use for reserving spot instances.
	SpotPrice pulumix.Output[*string] `pulumi:"spotPrice"`
	// The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `userDataBase64` instead.
	UserData pulumix.Output[*string] `pulumi:"userData"`
	// Can be used instead of `userData` to pass base64-encoded binary data directly. Use this instead of `userData` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
	UserDataBase64 pulumix.Output[*string] `pulumi:"userDataBase64"`
}

// NewLaunchConfiguration registers a new resource with the given unique name, arguments, and options.
func NewLaunchConfiguration(ctx *pulumi.Context,
	name string, args *LaunchConfigurationArgs, opts ...pulumi.ResourceOption) (*LaunchConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LaunchConfiguration
	err := ctx.RegisterResource("aws:ec2/launchConfiguration:LaunchConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLaunchConfiguration gets an existing LaunchConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLaunchConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LaunchConfigurationState, opts ...pulumi.ResourceOption) (*LaunchConfiguration, error) {
	var resource LaunchConfiguration
	err := ctx.ReadResource("aws:ec2/launchConfiguration:LaunchConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LaunchConfiguration resources.
type launchConfigurationState struct {
	// The Amazon Resource Name of the launch configuration.
	Arn *string `pulumi:"arn"`
	// Associate a public ip address with an instance in a VPC.
	AssociatePublicIpAddress *bool `pulumi:"associatePublicIpAddress"`
	// Additional EBS block devices to attach to the instance. See Block Devices below for details.
	EbsBlockDevices []LaunchConfigurationEbsBlockDevice `pulumi:"ebsBlockDevices"`
	// If true, the launched EC2 instance will be EBS-optimized.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// Enables/disables detailed monitoring. This is enabled by default.
	EnableMonitoring *bool `pulumi:"enableMonitoring"`
	// Customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details.
	EphemeralBlockDevices []LaunchConfigurationEphemeralBlockDevice `pulumi:"ephemeralBlockDevices"`
	// The name attribute of the IAM instance profile to associate with launched instances.
	IamInstanceProfile interface{} `pulumi:"iamInstanceProfile"`
	// The EC2 image ID to launch.
	ImageId *string `pulumi:"imageId"`
	// The size of instance to launch.
	//
	// The following arguments are optional:
	InstanceType *string `pulumi:"instanceType"`
	// The key name that should be used for the instance.
	KeyName *string `pulumi:"keyName"`
	// The metadata options for the instance.
	MetadataOptions *LaunchConfigurationMetadataOptions `pulumi:"metadataOptions"`
	// The name of the launch configuration. If you leave this blank, this provider will auto-generate a unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// The tenancy of the instance. Valid values are `default` or `dedicated`, see [AWS's Create Launch Configuration](http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_CreateLaunchConfiguration.html) for more details.
	PlacementTenancy *string `pulumi:"placementTenancy"`
	// Customize details about the root block device of the instance. See Block Devices below for details.
	RootBlockDevice *LaunchConfigurationRootBlockDevice `pulumi:"rootBlockDevice"`
	// A list of associated security group IDS.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The maximum price to use for reserving spot instances.
	SpotPrice *string `pulumi:"spotPrice"`
	// The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `userDataBase64` instead.
	UserData *string `pulumi:"userData"`
	// Can be used instead of `userData` to pass base64-encoded binary data directly. Use this instead of `userData` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
	UserDataBase64 *string `pulumi:"userDataBase64"`
}

type LaunchConfigurationState struct {
	// The Amazon Resource Name of the launch configuration.
	Arn pulumix.Input[*string]
	// Associate a public ip address with an instance in a VPC.
	AssociatePublicIpAddress pulumix.Input[*bool]
	// Additional EBS block devices to attach to the instance. See Block Devices below for details.
	EbsBlockDevices pulumix.Input[[]*LaunchConfigurationEbsBlockDeviceArgs]
	// If true, the launched EC2 instance will be EBS-optimized.
	EbsOptimized pulumix.Input[*bool]
	// Enables/disables detailed monitoring. This is enabled by default.
	EnableMonitoring pulumix.Input[*bool]
	// Customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details.
	EphemeralBlockDevices pulumix.Input[[]*LaunchConfigurationEphemeralBlockDeviceArgs]
	// The name attribute of the IAM instance profile to associate with launched instances.
	IamInstanceProfile pulumix.Input[*any]
	// The EC2 image ID to launch.
	ImageId pulumix.Input[*string]
	// The size of instance to launch.
	//
	// The following arguments are optional:
	InstanceType pulumix.Input[*string]
	// The key name that should be used for the instance.
	KeyName pulumix.Input[*string]
	// The metadata options for the instance.
	MetadataOptions pulumix.Input[*LaunchConfigurationMetadataOptionsArgs]
	// The name of the launch configuration. If you leave this blank, this provider will auto-generate a unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// The tenancy of the instance. Valid values are `default` or `dedicated`, see [AWS's Create Launch Configuration](http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_CreateLaunchConfiguration.html) for more details.
	PlacementTenancy pulumix.Input[*string]
	// Customize details about the root block device of the instance. See Block Devices below for details.
	RootBlockDevice pulumix.Input[*LaunchConfigurationRootBlockDeviceArgs]
	// A list of associated security group IDS.
	SecurityGroups pulumix.Input[[]string]
	// The maximum price to use for reserving spot instances.
	SpotPrice pulumix.Input[*string]
	// The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `userDataBase64` instead.
	UserData pulumix.Input[*string]
	// Can be used instead of `userData` to pass base64-encoded binary data directly. Use this instead of `userData` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
	UserDataBase64 pulumix.Input[*string]
}

func (LaunchConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*launchConfigurationState)(nil)).Elem()
}

type launchConfigurationArgs struct {
	// Associate a public ip address with an instance in a VPC.
	AssociatePublicIpAddress *bool `pulumi:"associatePublicIpAddress"`
	// Additional EBS block devices to attach to the instance. See Block Devices below for details.
	EbsBlockDevices []LaunchConfigurationEbsBlockDevice `pulumi:"ebsBlockDevices"`
	// If true, the launched EC2 instance will be EBS-optimized.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// Enables/disables detailed monitoring. This is enabled by default.
	EnableMonitoring *bool `pulumi:"enableMonitoring"`
	// Customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details.
	EphemeralBlockDevices []LaunchConfigurationEphemeralBlockDevice `pulumi:"ephemeralBlockDevices"`
	// The name attribute of the IAM instance profile to associate with launched instances.
	IamInstanceProfile interface{} `pulumi:"iamInstanceProfile"`
	// The EC2 image ID to launch.
	ImageId string `pulumi:"imageId"`
	// The size of instance to launch.
	//
	// The following arguments are optional:
	InstanceType string `pulumi:"instanceType"`
	// The key name that should be used for the instance.
	KeyName *string `pulumi:"keyName"`
	// The metadata options for the instance.
	MetadataOptions *LaunchConfigurationMetadataOptions `pulumi:"metadataOptions"`
	// The name of the launch configuration. If you leave this blank, this provider will auto-generate a unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// The tenancy of the instance. Valid values are `default` or `dedicated`, see [AWS's Create Launch Configuration](http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_CreateLaunchConfiguration.html) for more details.
	PlacementTenancy *string `pulumi:"placementTenancy"`
	// Customize details about the root block device of the instance. See Block Devices below for details.
	RootBlockDevice *LaunchConfigurationRootBlockDevice `pulumi:"rootBlockDevice"`
	// A list of associated security group IDS.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The maximum price to use for reserving spot instances.
	SpotPrice *string `pulumi:"spotPrice"`
	// The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `userDataBase64` instead.
	UserData *string `pulumi:"userData"`
	// Can be used instead of `userData` to pass base64-encoded binary data directly. Use this instead of `userData` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
	UserDataBase64 *string `pulumi:"userDataBase64"`
}

// The set of arguments for constructing a LaunchConfiguration resource.
type LaunchConfigurationArgs struct {
	// Associate a public ip address with an instance in a VPC.
	AssociatePublicIpAddress pulumix.Input[*bool]
	// Additional EBS block devices to attach to the instance. See Block Devices below for details.
	EbsBlockDevices pulumix.Input[[]*LaunchConfigurationEbsBlockDeviceArgs]
	// If true, the launched EC2 instance will be EBS-optimized.
	EbsOptimized pulumix.Input[*bool]
	// Enables/disables detailed monitoring. This is enabled by default.
	EnableMonitoring pulumix.Input[*bool]
	// Customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details.
	EphemeralBlockDevices pulumix.Input[[]*LaunchConfigurationEphemeralBlockDeviceArgs]
	// The name attribute of the IAM instance profile to associate with launched instances.
	IamInstanceProfile pulumix.Input[*any]
	// The EC2 image ID to launch.
	ImageId pulumix.Input[string]
	// The size of instance to launch.
	//
	// The following arguments are optional:
	InstanceType pulumix.Input[string]
	// The key name that should be used for the instance.
	KeyName pulumix.Input[*string]
	// The metadata options for the instance.
	MetadataOptions pulumix.Input[*LaunchConfigurationMetadataOptionsArgs]
	// The name of the launch configuration. If you leave this blank, this provider will auto-generate a unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// The tenancy of the instance. Valid values are `default` or `dedicated`, see [AWS's Create Launch Configuration](http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_CreateLaunchConfiguration.html) for more details.
	PlacementTenancy pulumix.Input[*string]
	// Customize details about the root block device of the instance. See Block Devices below for details.
	RootBlockDevice pulumix.Input[*LaunchConfigurationRootBlockDeviceArgs]
	// A list of associated security group IDS.
	SecurityGroups pulumix.Input[[]string]
	// The maximum price to use for reserving spot instances.
	SpotPrice pulumix.Input[*string]
	// The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `userDataBase64` instead.
	UserData pulumix.Input[*string]
	// Can be used instead of `userData` to pass base64-encoded binary data directly. Use this instead of `userData` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
	UserDataBase64 pulumix.Input[*string]
}

func (LaunchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*launchConfigurationArgs)(nil)).Elem()
}

type LaunchConfigurationOutput struct{ *pulumi.OutputState }

func (LaunchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchConfiguration)(nil)).Elem()
}

func (o LaunchConfigurationOutput) ToLaunchConfigurationOutput() LaunchConfigurationOutput {
	return o
}

func (o LaunchConfigurationOutput) ToLaunchConfigurationOutputWithContext(ctx context.Context) LaunchConfigurationOutput {
	return o
}

func (o LaunchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[LaunchConfiguration] {
	return pulumix.Output[LaunchConfiguration]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name of the launch configuration.
func (o LaunchConfigurationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Associate a public ip address with an instance in a VPC.
func (o LaunchConfigurationOutput) AssociatePublicIpAddress() pulumix.Output[*bool] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.Output[*bool] { return v.AssociatePublicIpAddress })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Additional EBS block devices to attach to the instance. See Block Devices below for details.
func (o LaunchConfigurationOutput) EbsBlockDevices() pulumix.GArrayOutput[LaunchConfigurationEbsBlockDevice, LaunchConfigurationEbsBlockDeviceOutput] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.GArrayOutput[LaunchConfigurationEbsBlockDevice, LaunchConfigurationEbsBlockDeviceOutput] {
		return v.EbsBlockDevices
	})
	unwrapped := pulumix.Flatten[[]LaunchConfigurationEbsBlockDevice, pulumix.GArrayOutput[LaunchConfigurationEbsBlockDevice, LaunchConfigurationEbsBlockDeviceOutput]](value)
	return pulumix.GArrayOutput[LaunchConfigurationEbsBlockDevice, LaunchConfigurationEbsBlockDeviceOutput]{OutputState: unwrapped.OutputState}
}

// If true, the launched EC2 instance will be EBS-optimized.
func (o LaunchConfigurationOutput) EbsOptimized() pulumix.Output[bool] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.Output[bool] { return v.EbsOptimized })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Enables/disables detailed monitoring. This is enabled by default.
func (o LaunchConfigurationOutput) EnableMonitoring() pulumix.Output[*bool] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.Output[*bool] { return v.EnableMonitoring })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details.
func (o LaunchConfigurationOutput) EphemeralBlockDevices() pulumix.GArrayOutput[LaunchConfigurationEphemeralBlockDevice, LaunchConfigurationEphemeralBlockDeviceOutput] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.GArrayOutput[LaunchConfigurationEphemeralBlockDevice, LaunchConfigurationEphemeralBlockDeviceOutput] {
		return v.EphemeralBlockDevices
	})
	unwrapped := pulumix.Flatten[[]LaunchConfigurationEphemeralBlockDevice, pulumix.GArrayOutput[LaunchConfigurationEphemeralBlockDevice, LaunchConfigurationEphemeralBlockDeviceOutput]](value)
	return pulumix.GArrayOutput[LaunchConfigurationEphemeralBlockDevice, LaunchConfigurationEphemeralBlockDeviceOutput]{OutputState: unwrapped.OutputState}
}

// The name attribute of the IAM instance profile to associate with launched instances.
func (o LaunchConfigurationOutput) IamInstanceProfile() pulumix.Output[*string] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.Output[*string] { return v.IamInstanceProfile })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The EC2 image ID to launch.
func (o LaunchConfigurationOutput) ImageId() pulumix.Output[string] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.Output[string] { return v.ImageId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The size of instance to launch.
//
// The following arguments are optional:
func (o LaunchConfigurationOutput) InstanceType() pulumix.Output[string] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.Output[string] { return v.InstanceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The key name that should be used for the instance.
func (o LaunchConfigurationOutput) KeyName() pulumix.Output[string] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.Output[string] { return v.KeyName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The metadata options for the instance.
func (o LaunchConfigurationOutput) MetadataOptions() pulumix.GPtrOutput[LaunchConfigurationMetadataOptions, LaunchConfigurationMetadataOptionsOutput] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.GPtrOutput[LaunchConfigurationMetadataOptions, LaunchConfigurationMetadataOptionsOutput] {
		return v.MetadataOptions
	})
	unwrapped := pulumix.Flatten[*LaunchConfigurationMetadataOptions, pulumix.GPtrOutput[LaunchConfigurationMetadataOptions, LaunchConfigurationMetadataOptionsOutput]](value)
	return pulumix.GPtrOutput[LaunchConfigurationMetadataOptions, LaunchConfigurationMetadataOptionsOutput]{OutputState: unwrapped.OutputState}
}

// The name of the launch configuration. If you leave this blank, this provider will auto-generate a unique name. Conflicts with `namePrefix`.
func (o LaunchConfigurationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o LaunchConfigurationOutput) NamePrefix() pulumix.Output[string] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.Output[string] { return v.NamePrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The tenancy of the instance. Valid values are `default` or `dedicated`, see [AWS's Create Launch Configuration](http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_CreateLaunchConfiguration.html) for more details.
func (o LaunchConfigurationOutput) PlacementTenancy() pulumix.Output[*string] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.Output[*string] { return v.PlacementTenancy })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Customize details about the root block device of the instance. See Block Devices below for details.
func (o LaunchConfigurationOutput) RootBlockDevice() pulumix.GPtrOutput[LaunchConfigurationRootBlockDevice, LaunchConfigurationRootBlockDeviceOutput] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.GPtrOutput[LaunchConfigurationRootBlockDevice, LaunchConfigurationRootBlockDeviceOutput] {
		return v.RootBlockDevice
	})
	unwrapped := pulumix.Flatten[*LaunchConfigurationRootBlockDevice, pulumix.GPtrOutput[LaunchConfigurationRootBlockDevice, LaunchConfigurationRootBlockDeviceOutput]](value)
	return pulumix.GPtrOutput[LaunchConfigurationRootBlockDevice, LaunchConfigurationRootBlockDeviceOutput]{OutputState: unwrapped.OutputState}
}

// A list of associated security group IDS.
func (o LaunchConfigurationOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.ArrayOutput[string] { return v.SecurityGroups })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The maximum price to use for reserving spot instances.
func (o LaunchConfigurationOutput) SpotPrice() pulumix.Output[*string] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.Output[*string] { return v.SpotPrice })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `userDataBase64` instead.
func (o LaunchConfigurationOutput) UserData() pulumix.Output[*string] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.Output[*string] { return v.UserData })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Can be used instead of `userData` to pass base64-encoded binary data directly. Use this instead of `userData` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
func (o LaunchConfigurationOutput) UserDataBase64() pulumix.Output[*string] {
	value := pulumix.Apply[LaunchConfiguration](o, func(v LaunchConfiguration) pulumix.Output[*string] { return v.UserDataBase64 })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(LaunchConfigurationOutput{})
}
