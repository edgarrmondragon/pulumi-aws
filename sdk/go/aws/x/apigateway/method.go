// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a HTTP Method for an API Gateway Resource.
type Method struct {
	pulumi.CustomResourceState

	// Specify if the method requires an API key
	ApiKeyRequired pulumix.Output[*bool] `pulumi:"apiKeyRequired"`
	// Type of authorization used for the method (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)
	Authorization pulumix.Output[string] `pulumi:"authorization"`
	// Authorization scopes used when the authorization is `COGNITO_USER_POOLS`
	AuthorizationScopes pulumix.ArrayOutput[string] `pulumi:"authorizationScopes"`
	// Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`
	AuthorizerId pulumix.Output[*string] `pulumi:"authorizerId"`
	// HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
	HttpMethod pulumix.Output[string] `pulumi:"httpMethod"`
	// Function name that will be given to the method when generating an SDK through API Gateway. If omitted, API Gateway will generate a function name based on the resource path and HTTP verb.
	OperationName pulumix.Output[*string] `pulumi:"operationName"`
	// Map of the API models used for the request's content type
	// where key is the content type (e.g., `application/json`)
	// and value is either `Error`, `Empty` (built-in models) or `apigateway.Model`'s `name`.
	RequestModels pulumix.MapOutput[string] `pulumi:"requestModels"`
	// Map of request parameters (from the path, query string and headers) that should be passed to the integration. The boolean value indicates whether the parameter is required (`true`) or optional (`false`).
	// For example: `requestParameters = {"method.request.header.X-Some-Header" = true "method.request.querystring.some-query-param" = true}` would define that the header `X-Some-Header` and the query string `some-query-param` must be provided in the request.
	RequestParameters pulumix.MapOutput[bool] `pulumi:"requestParameters"`
	// ID of a `apigateway.RequestValidator`
	RequestValidatorId pulumix.Output[*string] `pulumi:"requestValidatorId"`
	// API resource ID
	ResourceId pulumix.Output[string] `pulumi:"resourceId"`
	// ID of the associated REST API
	RestApi pulumix.Output[string] `pulumi:"restApi"`
}

// NewMethod registers a new resource with the given unique name, arguments, and options.
func NewMethod(ctx *pulumi.Context,
	name string, args *MethodArgs, opts ...pulumi.ResourceOption) (*Method, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authorization == nil {
		return nil, errors.New("invalid value for required argument 'Authorization'")
	}
	if args.HttpMethod == nil {
		return nil, errors.New("invalid value for required argument 'HttpMethod'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.RestApi == nil {
		return nil, errors.New("invalid value for required argument 'RestApi'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Method
	err := ctx.RegisterResource("aws:apigateway/method:Method", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMethod gets an existing Method resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMethod(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MethodState, opts ...pulumi.ResourceOption) (*Method, error) {
	var resource Method
	err := ctx.ReadResource("aws:apigateway/method:Method", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Method resources.
type methodState struct {
	// Specify if the method requires an API key
	ApiKeyRequired *bool `pulumi:"apiKeyRequired"`
	// Type of authorization used for the method (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)
	Authorization *string `pulumi:"authorization"`
	// Authorization scopes used when the authorization is `COGNITO_USER_POOLS`
	AuthorizationScopes []string `pulumi:"authorizationScopes"`
	// Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`
	AuthorizerId *string `pulumi:"authorizerId"`
	// HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
	HttpMethod *string `pulumi:"httpMethod"`
	// Function name that will be given to the method when generating an SDK through API Gateway. If omitted, API Gateway will generate a function name based on the resource path and HTTP verb.
	OperationName *string `pulumi:"operationName"`
	// Map of the API models used for the request's content type
	// where key is the content type (e.g., `application/json`)
	// and value is either `Error`, `Empty` (built-in models) or `apigateway.Model`'s `name`.
	RequestModels map[string]string `pulumi:"requestModels"`
	// Map of request parameters (from the path, query string and headers) that should be passed to the integration. The boolean value indicates whether the parameter is required (`true`) or optional (`false`).
	// For example: `requestParameters = {"method.request.header.X-Some-Header" = true "method.request.querystring.some-query-param" = true}` would define that the header `X-Some-Header` and the query string `some-query-param` must be provided in the request.
	RequestParameters map[string]bool `pulumi:"requestParameters"`
	// ID of a `apigateway.RequestValidator`
	RequestValidatorId *string `pulumi:"requestValidatorId"`
	// API resource ID
	ResourceId *string `pulumi:"resourceId"`
	// ID of the associated REST API
	RestApi interface{} `pulumi:"restApi"`
}

type MethodState struct {
	// Specify if the method requires an API key
	ApiKeyRequired pulumix.Input[*bool]
	// Type of authorization used for the method (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)
	Authorization pulumix.Input[*string]
	// Authorization scopes used when the authorization is `COGNITO_USER_POOLS`
	AuthorizationScopes pulumix.Input[[]string]
	// Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`
	AuthorizerId pulumix.Input[*string]
	// HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
	HttpMethod pulumix.Input[*string]
	// Function name that will be given to the method when generating an SDK through API Gateway. If omitted, API Gateway will generate a function name based on the resource path and HTTP verb.
	OperationName pulumix.Input[*string]
	// Map of the API models used for the request's content type
	// where key is the content type (e.g., `application/json`)
	// and value is either `Error`, `Empty` (built-in models) or `apigateway.Model`'s `name`.
	RequestModels pulumix.Input[map[string]string]
	// Map of request parameters (from the path, query string and headers) that should be passed to the integration. The boolean value indicates whether the parameter is required (`true`) or optional (`false`).
	// For example: `requestParameters = {"method.request.header.X-Some-Header" = true "method.request.querystring.some-query-param" = true}` would define that the header `X-Some-Header` and the query string `some-query-param` must be provided in the request.
	RequestParameters pulumix.Input[map[string]bool]
	// ID of a `apigateway.RequestValidator`
	RequestValidatorId pulumix.Input[*string]
	// API resource ID
	ResourceId pulumix.Input[*string]
	// ID of the associated REST API
	RestApi pulumix.Input[*any]
}

func (MethodState) ElementType() reflect.Type {
	return reflect.TypeOf((*methodState)(nil)).Elem()
}

type methodArgs struct {
	// Specify if the method requires an API key
	ApiKeyRequired *bool `pulumi:"apiKeyRequired"`
	// Type of authorization used for the method (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)
	Authorization string `pulumi:"authorization"`
	// Authorization scopes used when the authorization is `COGNITO_USER_POOLS`
	AuthorizationScopes []string `pulumi:"authorizationScopes"`
	// Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`
	AuthorizerId *string `pulumi:"authorizerId"`
	// HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
	HttpMethod string `pulumi:"httpMethod"`
	// Function name that will be given to the method when generating an SDK through API Gateway. If omitted, API Gateway will generate a function name based on the resource path and HTTP verb.
	OperationName *string `pulumi:"operationName"`
	// Map of the API models used for the request's content type
	// where key is the content type (e.g., `application/json`)
	// and value is either `Error`, `Empty` (built-in models) or `apigateway.Model`'s `name`.
	RequestModels map[string]string `pulumi:"requestModels"`
	// Map of request parameters (from the path, query string and headers) that should be passed to the integration. The boolean value indicates whether the parameter is required (`true`) or optional (`false`).
	// For example: `requestParameters = {"method.request.header.X-Some-Header" = true "method.request.querystring.some-query-param" = true}` would define that the header `X-Some-Header` and the query string `some-query-param` must be provided in the request.
	RequestParameters map[string]bool `pulumi:"requestParameters"`
	// ID of a `apigateway.RequestValidator`
	RequestValidatorId *string `pulumi:"requestValidatorId"`
	// API resource ID
	ResourceId string `pulumi:"resourceId"`
	// ID of the associated REST API
	RestApi interface{} `pulumi:"restApi"`
}

// The set of arguments for constructing a Method resource.
type MethodArgs struct {
	// Specify if the method requires an API key
	ApiKeyRequired pulumix.Input[*bool]
	// Type of authorization used for the method (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)
	Authorization pulumix.Input[string]
	// Authorization scopes used when the authorization is `COGNITO_USER_POOLS`
	AuthorizationScopes pulumix.Input[[]string]
	// Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`
	AuthorizerId pulumix.Input[*string]
	// HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
	HttpMethod pulumix.Input[string]
	// Function name that will be given to the method when generating an SDK through API Gateway. If omitted, API Gateway will generate a function name based on the resource path and HTTP verb.
	OperationName pulumix.Input[*string]
	// Map of the API models used for the request's content type
	// where key is the content type (e.g., `application/json`)
	// and value is either `Error`, `Empty` (built-in models) or `apigateway.Model`'s `name`.
	RequestModels pulumix.Input[map[string]string]
	// Map of request parameters (from the path, query string and headers) that should be passed to the integration. The boolean value indicates whether the parameter is required (`true`) or optional (`false`).
	// For example: `requestParameters = {"method.request.header.X-Some-Header" = true "method.request.querystring.some-query-param" = true}` would define that the header `X-Some-Header` and the query string `some-query-param` must be provided in the request.
	RequestParameters pulumix.Input[map[string]bool]
	// ID of a `apigateway.RequestValidator`
	RequestValidatorId pulumix.Input[*string]
	// API resource ID
	ResourceId pulumix.Input[string]
	// ID of the associated REST API
	RestApi pulumix.Input[any]
}

func (MethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*methodArgs)(nil)).Elem()
}

type MethodOutput struct{ *pulumi.OutputState }

func (MethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Method)(nil)).Elem()
}

func (o MethodOutput) ToMethodOutput() MethodOutput {
	return o
}

func (o MethodOutput) ToMethodOutputWithContext(ctx context.Context) MethodOutput {
	return o
}

func (o MethodOutput) ToOutput(ctx context.Context) pulumix.Output[Method] {
	return pulumix.Output[Method]{
		OutputState: o.OutputState,
	}
}

// Specify if the method requires an API key
func (o MethodOutput) ApiKeyRequired() pulumix.Output[*bool] {
	value := pulumix.Apply[Method](o, func(v Method) pulumix.Output[*bool] { return v.ApiKeyRequired })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Type of authorization used for the method (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)
func (o MethodOutput) Authorization() pulumix.Output[string] {
	value := pulumix.Apply[Method](o, func(v Method) pulumix.Output[string] { return v.Authorization })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Authorization scopes used when the authorization is `COGNITO_USER_POOLS`
func (o MethodOutput) AuthorizationScopes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Method](o, func(v Method) pulumix.ArrayOutput[string] { return v.AuthorizationScopes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`
func (o MethodOutput) AuthorizerId() pulumix.Output[*string] {
	value := pulumix.Apply[Method](o, func(v Method) pulumix.Output[*string] { return v.AuthorizerId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
func (o MethodOutput) HttpMethod() pulumix.Output[string] {
	value := pulumix.Apply[Method](o, func(v Method) pulumix.Output[string] { return v.HttpMethod })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Function name that will be given to the method when generating an SDK through API Gateway. If omitted, API Gateway will generate a function name based on the resource path and HTTP verb.
func (o MethodOutput) OperationName() pulumix.Output[*string] {
	value := pulumix.Apply[Method](o, func(v Method) pulumix.Output[*string] { return v.OperationName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Map of the API models used for the request's content type
// where key is the content type (e.g., `application/json`)
// and value is either `Error`, `Empty` (built-in models) or `apigateway.Model`'s `name`.
func (o MethodOutput) RequestModels() pulumix.MapOutput[string] {
	value := pulumix.Apply[Method](o, func(v Method) pulumix.MapOutput[string] { return v.RequestModels })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of request parameters (from the path, query string and headers) that should be passed to the integration. The boolean value indicates whether the parameter is required (`true`) or optional (`false`).
// For example: `requestParameters = {"method.request.header.X-Some-Header" = true "method.request.querystring.some-query-param" = true}` would define that the header `X-Some-Header` and the query string `some-query-param` must be provided in the request.
func (o MethodOutput) RequestParameters() pulumix.MapOutput[bool] {
	value := pulumix.Apply[Method](o, func(v Method) pulumix.MapOutput[bool] { return v.RequestParameters })
	unwrapped := pulumix.Flatten[map[string]bool, pulumix.MapOutput[bool]](value)
	return pulumix.MapOutput[bool]{OutputState: unwrapped.OutputState}
}

// ID of a `apigateway.RequestValidator`
func (o MethodOutput) RequestValidatorId() pulumix.Output[*string] {
	value := pulumix.Apply[Method](o, func(v Method) pulumix.Output[*string] { return v.RequestValidatorId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// API resource ID
func (o MethodOutput) ResourceId() pulumix.Output[string] {
	value := pulumix.Apply[Method](o, func(v Method) pulumix.Output[string] { return v.ResourceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the associated REST API
func (o MethodOutput) RestApi() pulumix.Output[string] {
	value := pulumix.Apply[Method](o, func(v Method) pulumix.Output[string] { return v.RestApi })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MethodOutput{})
}
