// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package detective

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage an [Amazon Detective Member](https://docs.aws.amazon.com/detective/latest/APIReference/API_CreateMembers.html).
type Member struct {
	pulumi.CustomResourceState

	// AWS account ID for the account.
	AccountId pulumix.Output[string] `pulumi:"accountId"`
	// AWS account ID for the administrator account.
	AdministratorId pulumix.Output[string] `pulumi:"administratorId"`
	// If set to true, then the root user of the invited account will _not_ receive an email notification. This notification is in addition to an alert that the root user receives in AWS Personal Health Dashboard. By default, this is set to `false`.
	DisableEmailNotification pulumix.Output[*bool]  `pulumi:"disableEmailNotification"`
	DisabledReason           pulumix.Output[string] `pulumi:"disabledReason"`
	// Email address for the account.
	EmailAddress pulumix.Output[string] `pulumi:"emailAddress"`
	// ARN of the behavior graph to invite the member accounts to contribute their data to.
	GraphArn pulumix.Output[string] `pulumi:"graphArn"`
	// Date and time, in UTC and extended RFC 3339 format, when an Amazon Detective membership invitation was last sent to the account.
	InvitedTime pulumix.Output[string] `pulumi:"invitedTime"`
	// A custom message to include in the invitation. Amazon Detective adds this message to the standard content that it sends for an invitation.
	Message pulumix.Output[*string] `pulumi:"message"`
	// Current membership status of the member account.
	Status pulumix.Output[string] `pulumi:"status"`
	// Date and time, in UTC and extended RFC 3339 format, of the most recent change to the member account's status.
	UpdatedTime pulumix.Output[string] `pulumi:"updatedTime"`
	// Data volume in bytes per day for the member account.
	VolumeUsageInBytes pulumix.Output[string] `pulumi:"volumeUsageInBytes"`
}

// NewMember registers a new resource with the given unique name, arguments, and options.
func NewMember(ctx *pulumi.Context,
	name string, args *MemberArgs, opts ...pulumi.ResourceOption) (*Member, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.EmailAddress == nil {
		return nil, errors.New("invalid value for required argument 'EmailAddress'")
	}
	if args.GraphArn == nil {
		return nil, errors.New("invalid value for required argument 'GraphArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Member
	err := ctx.RegisterResource("aws:detective/member:Member", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMember gets an existing Member resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MemberState, opts ...pulumi.ResourceOption) (*Member, error) {
	var resource Member
	err := ctx.ReadResource("aws:detective/member:Member", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Member resources.
type memberState struct {
	// AWS account ID for the account.
	AccountId *string `pulumi:"accountId"`
	// AWS account ID for the administrator account.
	AdministratorId *string `pulumi:"administratorId"`
	// If set to true, then the root user of the invited account will _not_ receive an email notification. This notification is in addition to an alert that the root user receives in AWS Personal Health Dashboard. By default, this is set to `false`.
	DisableEmailNotification *bool   `pulumi:"disableEmailNotification"`
	DisabledReason           *string `pulumi:"disabledReason"`
	// Email address for the account.
	EmailAddress *string `pulumi:"emailAddress"`
	// ARN of the behavior graph to invite the member accounts to contribute their data to.
	GraphArn *string `pulumi:"graphArn"`
	// Date and time, in UTC and extended RFC 3339 format, when an Amazon Detective membership invitation was last sent to the account.
	InvitedTime *string `pulumi:"invitedTime"`
	// A custom message to include in the invitation. Amazon Detective adds this message to the standard content that it sends for an invitation.
	Message *string `pulumi:"message"`
	// Current membership status of the member account.
	Status *string `pulumi:"status"`
	// Date and time, in UTC and extended RFC 3339 format, of the most recent change to the member account's status.
	UpdatedTime *string `pulumi:"updatedTime"`
	// Data volume in bytes per day for the member account.
	VolumeUsageInBytes *string `pulumi:"volumeUsageInBytes"`
}

type MemberState struct {
	// AWS account ID for the account.
	AccountId pulumix.Input[*string]
	// AWS account ID for the administrator account.
	AdministratorId pulumix.Input[*string]
	// If set to true, then the root user of the invited account will _not_ receive an email notification. This notification is in addition to an alert that the root user receives in AWS Personal Health Dashboard. By default, this is set to `false`.
	DisableEmailNotification pulumix.Input[*bool]
	DisabledReason           pulumix.Input[*string]
	// Email address for the account.
	EmailAddress pulumix.Input[*string]
	// ARN of the behavior graph to invite the member accounts to contribute their data to.
	GraphArn pulumix.Input[*string]
	// Date and time, in UTC and extended RFC 3339 format, when an Amazon Detective membership invitation was last sent to the account.
	InvitedTime pulumix.Input[*string]
	// A custom message to include in the invitation. Amazon Detective adds this message to the standard content that it sends for an invitation.
	Message pulumix.Input[*string]
	// Current membership status of the member account.
	Status pulumix.Input[*string]
	// Date and time, in UTC and extended RFC 3339 format, of the most recent change to the member account's status.
	UpdatedTime pulumix.Input[*string]
	// Data volume in bytes per day for the member account.
	VolumeUsageInBytes pulumix.Input[*string]
}

func (MemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*memberState)(nil)).Elem()
}

type memberArgs struct {
	// AWS account ID for the account.
	AccountId string `pulumi:"accountId"`
	// If set to true, then the root user of the invited account will _not_ receive an email notification. This notification is in addition to an alert that the root user receives in AWS Personal Health Dashboard. By default, this is set to `false`.
	DisableEmailNotification *bool `pulumi:"disableEmailNotification"`
	// Email address for the account.
	EmailAddress string `pulumi:"emailAddress"`
	// ARN of the behavior graph to invite the member accounts to contribute their data to.
	GraphArn string `pulumi:"graphArn"`
	// A custom message to include in the invitation. Amazon Detective adds this message to the standard content that it sends for an invitation.
	Message *string `pulumi:"message"`
}

// The set of arguments for constructing a Member resource.
type MemberArgs struct {
	// AWS account ID for the account.
	AccountId pulumix.Input[string]
	// If set to true, then the root user of the invited account will _not_ receive an email notification. This notification is in addition to an alert that the root user receives in AWS Personal Health Dashboard. By default, this is set to `false`.
	DisableEmailNotification pulumix.Input[*bool]
	// Email address for the account.
	EmailAddress pulumix.Input[string]
	// ARN of the behavior graph to invite the member accounts to contribute their data to.
	GraphArn pulumix.Input[string]
	// A custom message to include in the invitation. Amazon Detective adds this message to the standard content that it sends for an invitation.
	Message pulumix.Input[*string]
}

func (MemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*memberArgs)(nil)).Elem()
}

type MemberOutput struct{ *pulumi.OutputState }

func (MemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Member)(nil)).Elem()
}

func (o MemberOutput) ToMemberOutput() MemberOutput {
	return o
}

func (o MemberOutput) ToMemberOutputWithContext(ctx context.Context) MemberOutput {
	return o
}

func (o MemberOutput) ToOutput(ctx context.Context) pulumix.Output[Member] {
	return pulumix.Output[Member]{
		OutputState: o.OutputState,
	}
}

// AWS account ID for the account.
func (o MemberOutput) AccountId() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.AccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS account ID for the administrator account.
func (o MemberOutput) AdministratorId() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.AdministratorId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If set to true, then the root user of the invited account will _not_ receive an email notification. This notification is in addition to an alert that the root user receives in AWS Personal Health Dashboard. By default, this is set to `false`.
func (o MemberOutput) DisableEmailNotification() pulumix.Output[*bool] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[*bool] { return v.DisableEmailNotification })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func (o MemberOutput) DisabledReason() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.DisabledReason })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Email address for the account.
func (o MemberOutput) EmailAddress() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.EmailAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the behavior graph to invite the member accounts to contribute their data to.
func (o MemberOutput) GraphArn() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.GraphArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date and time, in UTC and extended RFC 3339 format, when an Amazon Detective membership invitation was last sent to the account.
func (o MemberOutput) InvitedTime() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.InvitedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A custom message to include in the invitation. Amazon Detective adds this message to the standard content that it sends for an invitation.
func (o MemberOutput) Message() pulumix.Output[*string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[*string] { return v.Message })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Current membership status of the member account.
func (o MemberOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date and time, in UTC and extended RFC 3339 format, of the most recent change to the member account's status.
func (o MemberOutput) UpdatedTime() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.UpdatedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Data volume in bytes per day for the member account.
func (o MemberOutput) VolumeUsageInBytes() pulumix.Output[string] {
	value := pulumix.Apply[Member](o, func(v Member) pulumix.Output[string] { return v.VolumeUsageInBytes })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MemberOutput{})
}
