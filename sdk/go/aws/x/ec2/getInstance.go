// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the ID of an Amazon EC2 Instance for use in other resources.
func LookupInstance(ctx *pulumi.Context, args *LookupInstanceArgs, opts ...pulumi.InvokeOption) (*LookupInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInstanceResult
	err := ctx.Invoke("aws:ec2/getInstance:getInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstance.
type LookupInstanceArgs struct {
	// One or more name/value pairs to use as filters. There are
	// several valid keys, for a full reference, check out
	// [describe-instances in the AWS CLI reference][1].
	Filters []GetInstanceFilter `pulumi:"filters"`
	// If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the `passwordData` attribute. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
	GetPasswordData *bool `pulumi:"getPasswordData"`
	// Retrieve Base64 encoded User Data contents into the `userDataBase64` attribute. A SHA-1 hash of the User Data contents will always be present in the `userData` attribute. Defaults to `false`.
	//
	// > **NOTE:** At least one of `filter`, `instanceTags`, or `instanceId` must be specified.
	//
	// > **NOTE:** If anything other than a single match is returned by the search,
	// this call will fail. Ensure that your search is specific enough to return
	// a single Instance ID only.
	GetUserData *bool `pulumi:"getUserData"`
	// Specify the exact Instance ID with which to populate the data source.
	InstanceId *string `pulumi:"instanceId"`
	// Map of tags, each pair of which must
	// exactly match a pair on the desired Instance.
	InstanceTags map[string]string `pulumi:"instanceTags"`
	// Map of tags assigned to the Instance.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getInstance.
type LookupInstanceResult struct {
	// ID of the AMI used to launch the instance.
	Ami string `pulumi:"ami"`
	// ARN of the instance.
	Arn string `pulumi:"arn"`
	// Whether or not the Instance is associated with a public IP address or not (Boolean).
	AssociatePublicIpAddress bool `pulumi:"associatePublicIpAddress"`
	// Availability zone of the Instance.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Credit specification of the Instance.
	CreditSpecifications []GetInstanceCreditSpecification `pulumi:"creditSpecifications"`
	// Whether or not EC2 Instance Stop Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection) is enabled (Boolean).
	DisableApiStop bool `pulumi:"disableApiStop"`
	// Whether or not [EC2 Instance Termination Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination) is enabled (Boolean).
	DisableApiTermination bool `pulumi:"disableApiTermination"`
	// EBS block device mappings of the Instance.
	EbsBlockDevices []GetInstanceEbsBlockDevice `pulumi:"ebsBlockDevices"`
	// Whether the Instance is EBS optimized or not (Boolean).
	EbsOptimized bool `pulumi:"ebsOptimized"`
	// Enclave options of the instance.
	EnclaveOptions []GetInstanceEnclaveOption `pulumi:"enclaveOptions"`
	// Ephemeral block device mappings of the Instance.
	EphemeralBlockDevices []GetInstanceEphemeralBlockDevice `pulumi:"ephemeralBlockDevices"`
	Filters               []GetInstanceFilter               `pulumi:"filters"`
	GetPasswordData       *bool                             `pulumi:"getPasswordData"`
	GetUserData           *bool                             `pulumi:"getUserData"`
	// ID of the dedicated host the instance will be assigned to.
	HostId string `pulumi:"hostId"`
	// ARN of the host resource group the instance is associated with.
	HostResourceGroupArn string `pulumi:"hostResourceGroupArn"`
	// Name of the instance profile associated with the Instance.
	IamInstanceProfile string `pulumi:"iamInstanceProfile"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	InstanceId *string `pulumi:"instanceId"`
	// State of the instance. One of: `pending`, `running`, `shutting-down`, `terminated`, `stopping`, `stopped`. See [Instance Lifecycle](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html) for more information.
	InstanceState string            `pulumi:"instanceState"`
	InstanceTags  map[string]string `pulumi:"instanceTags"`
	// Type of the Instance.
	InstanceType string `pulumi:"instanceType"`
	// IPv6 addresses associated to the Instance, if applicable. **NOTE**: Unlike the IPv4 address, this doesn't change if you attach an EIP to the instance.
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
	// Key name of the Instance.
	KeyName string `pulumi:"keyName"`
	// Maintenance and recovery options for the instance.
	MaintenanceOptions []GetInstanceMaintenanceOption `pulumi:"maintenanceOptions"`
	// Metadata options of the Instance.
	MetadataOptions []GetInstanceMetadataOption `pulumi:"metadataOptions"`
	// Whether detailed monitoring is enabled or disabled for the Instance (Boolean).
	Monitoring bool `pulumi:"monitoring"`
	// ID of the network interface that was created with the Instance.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// ARN of the Outpost.
	OutpostArn string `pulumi:"outpostArn"`
	// Base-64 encoded encrypted password data for the instance. Useful for getting the administrator password for instances running Microsoft Windows. This attribute is only exported if `getPasswordData` is true. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
	PasswordData string `pulumi:"passwordData"`
	// Placement group of the Instance.
	PlacementGroup string `pulumi:"placementGroup"`
	// Number of the partition the instance is in.
	PlacementPartitionNumber int `pulumi:"placementPartitionNumber"`
	// Private DNS name assigned to the Instance. Can only be used inside the Amazon EC2, and only available if you've enabled DNS hostnames for your VPC.
	PrivateDns string `pulumi:"privateDns"`
	// Options for the instance hostname.
	PrivateDnsNameOptions []GetInstancePrivateDnsNameOption `pulumi:"privateDnsNameOptions"`
	// Private IP address assigned to the Instance.
	PrivateIp string `pulumi:"privateIp"`
	// Public DNS name assigned to the Instance. For EC2-VPC, this is only available if you've enabled DNS hostnames for your VPC.
	PublicDns string `pulumi:"publicDns"`
	// Public IP address assigned to the Instance, if applicable. **NOTE**: If you are using an `ec2.Eip` with your instance, you should refer to the EIP's address directly and not use `publicIp`, as this field will change after the EIP is attached.
	PublicIp string `pulumi:"publicIp"`
	// Root block device mappings of the Instance
	RootBlockDevices []GetInstanceRootBlockDevice `pulumi:"rootBlockDevices"`
	// Secondary private IPv4 addresses assigned to the instance's primary network interface (eth0) in a VPC.
	SecondaryPrivateIps []string `pulumi:"secondaryPrivateIps"`
	// Associated security groups.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Whether the network interface performs source/destination checking (Boolean).
	SourceDestCheck bool `pulumi:"sourceDestCheck"`
	// VPC subnet ID.
	SubnetId string `pulumi:"subnetId"`
	// Map of tags assigned to the Instance.
	Tags map[string]string `pulumi:"tags"`
	// Tenancy of the instance: `dedicated`, `default`, `host`.
	Tenancy string `pulumi:"tenancy"`
	// SHA-1 hash of User Data supplied to the Instance.
	UserData string `pulumi:"userData"`
	// Base64 encoded contents of User Data supplied to the Instance. This attribute is only exported if `getUserData` is true.
	UserDataBase64 string `pulumi:"userDataBase64"`
	// Associated security groups in a non-default VPC.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
}

func LookupInstanceOutput(ctx *pulumi.Context, args LookupInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupInstanceResultOutput {
	outputResult := pulumix.ApplyErr[*LookupInstanceArgs](args.ToOutput(), func(plainArgs *LookupInstanceArgs) (*LookupInstanceResult, error) {
		return LookupInstance(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupInstanceResultOutput, *LookupInstanceResult](outputResult)
}

// A collection of arguments for invoking getInstance.
type LookupInstanceOutputArgs struct {
	// One or more name/value pairs to use as filters. There are
	// several valid keys, for a full reference, check out
	// [describe-instances in the AWS CLI reference][1].
	Filters pulumix.Input[[]*GetInstanceFilterArgs] `pulumi:"filters"`
	// If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the `passwordData` attribute. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
	GetPasswordData pulumix.Input[*bool] `pulumi:"getPasswordData"`
	// Retrieve Base64 encoded User Data contents into the `userDataBase64` attribute. A SHA-1 hash of the User Data contents will always be present in the `userData` attribute. Defaults to `false`.
	//
	// > **NOTE:** At least one of `filter`, `instanceTags`, or `instanceId` must be specified.
	//
	// > **NOTE:** If anything other than a single match is returned by the search,
	// this call will fail. Ensure that your search is specific enough to return
	// a single Instance ID only.
	GetUserData pulumix.Input[*bool] `pulumi:"getUserData"`
	// Specify the exact Instance ID with which to populate the data source.
	InstanceId pulumix.Input[*string] `pulumi:"instanceId"`
	// Map of tags, each pair of which must
	// exactly match a pair on the desired Instance.
	InstanceTags pulumix.Input[map[string]string] `pulumi:"instanceTags"`
	// Map of tags assigned to the Instance.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupInstanceOutputArgs) ToOutput() pulumix.Output[*LookupInstanceArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.GetPasswordData.ToOutput(context.Background()).AsAny(),
		args.GetUserData.ToOutput(context.Background()).AsAny(),
		args.InstanceId.ToOutput(context.Background()).AsAny(),
		args.InstanceTags.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupInstanceArgs {
		return &LookupInstanceArgs{
			Filters:         resolvedArgs[0].([]GetInstanceFilter),
			GetPasswordData: resolvedArgs[1].(*bool),
			GetUserData:     resolvedArgs[2].(*bool),
			InstanceId:      resolvedArgs[3].(*string),
			InstanceTags:    resolvedArgs[4].(map[string]string),
			Tags:            resolvedArgs[5].(map[string]string),
		}
	})
}

type LookupInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceResult)(nil)).Elem()
}

func (o LookupInstanceResultOutput) ToOutput(context.Context) pulumix.Output[*LookupInstanceResult] {
	return pulumix.Output[*LookupInstanceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupInstanceResultOutput) Ami() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.Ami })
}

func (o LookupInstanceResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.Arn })
}

func (o LookupInstanceResultOutput) AssociatePublicIpAddress() pulumix.Output[bool] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) bool { return v.AssociatePublicIpAddress })
}

func (o LookupInstanceResultOutput) AvailabilityZone() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.AvailabilityZone })
}

func (o LookupInstanceResultOutput) CreditSpecifications() pulumix.GArrayOutput[GetInstanceCreditSpecification, GetInstanceCreditSpecificationOutput] {
	value := pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) []GetInstanceCreditSpecification { return v.CreditSpecifications })
	return pulumix.GArrayOutput[GetInstanceCreditSpecification, GetInstanceCreditSpecificationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupInstanceResultOutput) DisableApiStop() pulumix.Output[bool] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) bool { return v.DisableApiStop })
}

func (o LookupInstanceResultOutput) DisableApiTermination() pulumix.Output[bool] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) bool { return v.DisableApiTermination })
}

func (o LookupInstanceResultOutput) EbsBlockDevices() pulumix.GArrayOutput[GetInstanceEbsBlockDevice, GetInstanceEbsBlockDeviceOutput] {
	value := pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) []GetInstanceEbsBlockDevice { return v.EbsBlockDevices })
	return pulumix.GArrayOutput[GetInstanceEbsBlockDevice, GetInstanceEbsBlockDeviceOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupInstanceResultOutput) EbsOptimized() pulumix.Output[bool] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) bool { return v.EbsOptimized })
}

func (o LookupInstanceResultOutput) EnclaveOptions() pulumix.GArrayOutput[GetInstanceEnclaveOption, GetInstanceEnclaveOptionOutput] {
	value := pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) []GetInstanceEnclaveOption { return v.EnclaveOptions })
	return pulumix.GArrayOutput[GetInstanceEnclaveOption, GetInstanceEnclaveOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupInstanceResultOutput) EphemeralBlockDevices() pulumix.GArrayOutput[GetInstanceEphemeralBlockDevice, GetInstanceEphemeralBlockDeviceOutput] {
	value := pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) []GetInstanceEphemeralBlockDevice { return v.EphemeralBlockDevices })
	return pulumix.GArrayOutput[GetInstanceEphemeralBlockDevice, GetInstanceEphemeralBlockDeviceOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupInstanceResultOutput) Filters() pulumix.GArrayOutput[GetInstanceFilter, GetInstanceFilterOutput] {
	value := pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) []GetInstanceFilter { return v.Filters })
	return pulumix.GArrayOutput[GetInstanceFilter, GetInstanceFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupInstanceResultOutput) GetPasswordData() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) *bool { return v.GetPasswordData })
}

func (o LookupInstanceResultOutput) GetUserData() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) *bool { return v.GetUserData })
}

func (o LookupInstanceResultOutput) HostId() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.HostId })
}

func (o LookupInstanceResultOutput) HostResourceGroupArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.HostResourceGroupArn })
}

func (o LookupInstanceResultOutput) IamInstanceProfile() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.IamInstanceProfile })
}

func (o LookupInstanceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.Id })
}

func (o LookupInstanceResultOutput) InstanceId() pulumix.Output[*string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) *string { return v.InstanceId })
}

func (o LookupInstanceResultOutput) InstanceState() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.InstanceState })
}

func (o LookupInstanceResultOutput) InstanceTags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) map[string]string { return v.InstanceTags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupInstanceResultOutput) InstanceType() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.InstanceType })
}

func (o LookupInstanceResultOutput) Ipv6Addresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) []string { return v.Ipv6Addresses })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupInstanceResultOutput) KeyName() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.KeyName })
}

func (o LookupInstanceResultOutput) MaintenanceOptions() pulumix.GArrayOutput[GetInstanceMaintenanceOption, GetInstanceMaintenanceOptionOutput] {
	value := pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) []GetInstanceMaintenanceOption { return v.MaintenanceOptions })
	return pulumix.GArrayOutput[GetInstanceMaintenanceOption, GetInstanceMaintenanceOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupInstanceResultOutput) MetadataOptions() pulumix.GArrayOutput[GetInstanceMetadataOption, GetInstanceMetadataOptionOutput] {
	value := pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) []GetInstanceMetadataOption { return v.MetadataOptions })
	return pulumix.GArrayOutput[GetInstanceMetadataOption, GetInstanceMetadataOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupInstanceResultOutput) Monitoring() pulumix.Output[bool] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) bool { return v.Monitoring })
}

func (o LookupInstanceResultOutput) NetworkInterfaceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.NetworkInterfaceId })
}

func (o LookupInstanceResultOutput) OutpostArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.OutpostArn })
}

func (o LookupInstanceResultOutput) PasswordData() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.PasswordData })
}

func (o LookupInstanceResultOutput) PlacementGroup() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.PlacementGroup })
}

func (o LookupInstanceResultOutput) PlacementPartitionNumber() pulumix.Output[int] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) int { return v.PlacementPartitionNumber })
}

func (o LookupInstanceResultOutput) PrivateDns() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.PrivateDns })
}

func (o LookupInstanceResultOutput) PrivateDnsNameOptions() pulumix.GArrayOutput[GetInstancePrivateDnsNameOption, GetInstancePrivateDnsNameOptionOutput] {
	value := pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) []GetInstancePrivateDnsNameOption { return v.PrivateDnsNameOptions })
	return pulumix.GArrayOutput[GetInstancePrivateDnsNameOption, GetInstancePrivateDnsNameOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupInstanceResultOutput) PrivateIp() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.PrivateIp })
}

func (o LookupInstanceResultOutput) PublicDns() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.PublicDns })
}

func (o LookupInstanceResultOutput) PublicIp() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.PublicIp })
}

func (o LookupInstanceResultOutput) RootBlockDevices() pulumix.GArrayOutput[GetInstanceRootBlockDevice, GetInstanceRootBlockDeviceOutput] {
	value := pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) []GetInstanceRootBlockDevice { return v.RootBlockDevices })
	return pulumix.GArrayOutput[GetInstanceRootBlockDevice, GetInstanceRootBlockDeviceOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupInstanceResultOutput) SecondaryPrivateIps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) []string { return v.SecondaryPrivateIps })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupInstanceResultOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) []string { return v.SecurityGroups })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupInstanceResultOutput) SourceDestCheck() pulumix.Output[bool] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) bool { return v.SourceDestCheck })
}

func (o LookupInstanceResultOutput) SubnetId() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.SubnetId })
}

func (o LookupInstanceResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupInstanceResultOutput) Tenancy() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.Tenancy })
}

func (o LookupInstanceResultOutput) UserData() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.UserData })
}

func (o LookupInstanceResultOutput) UserDataBase64() pulumix.Output[string] {
	return pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) string { return v.UserDataBase64 })
}

func (o LookupInstanceResultOutput) VpcSecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupInstanceResult](o, func(v *LookupInstanceResult) []string { return v.VpcSecurityGroupIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
