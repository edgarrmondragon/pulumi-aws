// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codecatalyst

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS CodeCatalyst Source Repository.
type SourceRepository struct {
	pulumi.CustomResourceState

	// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The name of the source repository. For more information about name requirements, see [Quotas for source repositories](https://docs.aws.amazon.com/codecatalyst/latest/userguide/source-quotas.html).
	Name pulumix.Output[string] `pulumi:"name"`
	// The name of the project in the CodeCatalyst space.
	//
	// The following arguments are optional:
	ProjectName pulumix.Output[string] `pulumi:"projectName"`
	// The name of the CodeCatalyst space.
	SpaceName pulumix.Output[string] `pulumi:"spaceName"`
}

// NewSourceRepository registers a new resource with the given unique name, arguments, and options.
func NewSourceRepository(ctx *pulumi.Context,
	name string, args *SourceRepositoryArgs, opts ...pulumi.ResourceOption) (*SourceRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.SpaceName == nil {
		return nil, errors.New("invalid value for required argument 'SpaceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceRepository
	err := ctx.RegisterResource("aws:codecatalyst/sourceRepository:SourceRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceRepository gets an existing SourceRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceRepositoryState, opts ...pulumi.ResourceOption) (*SourceRepository, error) {
	var resource SourceRepository
	err := ctx.ReadResource("aws:codecatalyst/sourceRepository:SourceRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceRepository resources.
type sourceRepositoryState struct {
	// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
	Description *string `pulumi:"description"`
	// The name of the source repository. For more information about name requirements, see [Quotas for source repositories](https://docs.aws.amazon.com/codecatalyst/latest/userguide/source-quotas.html).
	Name *string `pulumi:"name"`
	// The name of the project in the CodeCatalyst space.
	//
	// The following arguments are optional:
	ProjectName *string `pulumi:"projectName"`
	// The name of the CodeCatalyst space.
	SpaceName *string `pulumi:"spaceName"`
}

type SourceRepositoryState struct {
	// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
	Description pulumix.Input[*string]
	// The name of the source repository. For more information about name requirements, see [Quotas for source repositories](https://docs.aws.amazon.com/codecatalyst/latest/userguide/source-quotas.html).
	Name pulumix.Input[*string]
	// The name of the project in the CodeCatalyst space.
	//
	// The following arguments are optional:
	ProjectName pulumix.Input[*string]
	// The name of the CodeCatalyst space.
	SpaceName pulumix.Input[*string]
}

func (SourceRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceRepositoryState)(nil)).Elem()
}

type sourceRepositoryArgs struct {
	// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
	Description *string `pulumi:"description"`
	// The name of the source repository. For more information about name requirements, see [Quotas for source repositories](https://docs.aws.amazon.com/codecatalyst/latest/userguide/source-quotas.html).
	Name *string `pulumi:"name"`
	// The name of the project in the CodeCatalyst space.
	//
	// The following arguments are optional:
	ProjectName string `pulumi:"projectName"`
	// The name of the CodeCatalyst space.
	SpaceName string `pulumi:"spaceName"`
}

// The set of arguments for constructing a SourceRepository resource.
type SourceRepositoryArgs struct {
	// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
	Description pulumix.Input[*string]
	// The name of the source repository. For more information about name requirements, see [Quotas for source repositories](https://docs.aws.amazon.com/codecatalyst/latest/userguide/source-quotas.html).
	Name pulumix.Input[*string]
	// The name of the project in the CodeCatalyst space.
	//
	// The following arguments are optional:
	ProjectName pulumix.Input[string]
	// The name of the CodeCatalyst space.
	SpaceName pulumix.Input[string]
}

func (SourceRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceRepositoryArgs)(nil)).Elem()
}

type SourceRepositoryOutput struct{ *pulumi.OutputState }

func (SourceRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepository)(nil)).Elem()
}

func (o SourceRepositoryOutput) ToSourceRepositoryOutput() SourceRepositoryOutput {
	return o
}

func (o SourceRepositoryOutput) ToSourceRepositoryOutputWithContext(ctx context.Context) SourceRepositoryOutput {
	return o
}

func (o SourceRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[SourceRepository] {
	return pulumix.Output[SourceRepository]{
		OutputState: o.OutputState,
	}
}

// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
func (o SourceRepositoryOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[SourceRepository](o, func(v SourceRepository) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the source repository. For more information about name requirements, see [Quotas for source repositories](https://docs.aws.amazon.com/codecatalyst/latest/userguide/source-quotas.html).
func (o SourceRepositoryOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[SourceRepository](o, func(v SourceRepository) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the project in the CodeCatalyst space.
//
// The following arguments are optional:
func (o SourceRepositoryOutput) ProjectName() pulumix.Output[string] {
	value := pulumix.Apply[SourceRepository](o, func(v SourceRepository) pulumix.Output[string] { return v.ProjectName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the CodeCatalyst space.
func (o SourceRepositoryOutput) SpaceName() pulumix.Output[string] {
	value := pulumix.Apply[SourceRepository](o, func(v SourceRepository) pulumix.Output[string] { return v.SpaceName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SourceRepositoryOutput{})
}
