// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package neptune

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Neptune Parameter Group
type ParameterGroup struct {
	pulumi.CustomResourceState

	// The Neptune parameter group Amazon Resource Name (ARN).
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The description of the Neptune parameter group. Defaults to "Managed by Pulumi".
	Description pulumix.Output[*string] `pulumi:"description"`
	// The family of the Neptune parameter group.
	Family pulumix.Output[string] `pulumi:"family"`
	// The name of the Neptune parameter.
	Name pulumix.Output[string] `pulumi:"name"`
	// A list of Neptune parameters to apply.
	Parameters pulumix.GArrayOutput[ParameterGroupParameter, ParameterGroupParameterOutput] `pulumi:"parameters"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewParameterGroup registers a new resource with the given unique name, arguments, and options.
func NewParameterGroup(ctx *pulumi.Context,
	name string, args *ParameterGroupArgs, opts ...pulumi.ResourceOption) (*ParameterGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Family == nil {
		return nil, errors.New("invalid value for required argument 'Family'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ParameterGroup
	err := ctx.RegisterResource("aws:neptune/parameterGroup:ParameterGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetParameterGroup gets an existing ParameterGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetParameterGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ParameterGroupState, opts ...pulumi.ResourceOption) (*ParameterGroup, error) {
	var resource ParameterGroup
	err := ctx.ReadResource("aws:neptune/parameterGroup:ParameterGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ParameterGroup resources.
type parameterGroupState struct {
	// The Neptune parameter group Amazon Resource Name (ARN).
	Arn *string `pulumi:"arn"`
	// The description of the Neptune parameter group. Defaults to "Managed by Pulumi".
	Description *string `pulumi:"description"`
	// The family of the Neptune parameter group.
	Family *string `pulumi:"family"`
	// The name of the Neptune parameter.
	Name *string `pulumi:"name"`
	// A list of Neptune parameters to apply.
	Parameters []ParameterGroupParameter `pulumi:"parameters"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ParameterGroupState struct {
	// The Neptune parameter group Amazon Resource Name (ARN).
	Arn pulumix.Input[*string]
	// The description of the Neptune parameter group. Defaults to "Managed by Pulumi".
	Description pulumix.Input[*string]
	// The family of the Neptune parameter group.
	Family pulumix.Input[*string]
	// The name of the Neptune parameter.
	Name pulumix.Input[*string]
	// A list of Neptune parameters to apply.
	Parameters pulumix.Input[[]*ParameterGroupParameterArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ParameterGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*parameterGroupState)(nil)).Elem()
}

type parameterGroupArgs struct {
	// The description of the Neptune parameter group. Defaults to "Managed by Pulumi".
	Description *string `pulumi:"description"`
	// The family of the Neptune parameter group.
	Family string `pulumi:"family"`
	// The name of the Neptune parameter.
	Name *string `pulumi:"name"`
	// A list of Neptune parameters to apply.
	Parameters []ParameterGroupParameter `pulumi:"parameters"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ParameterGroup resource.
type ParameterGroupArgs struct {
	// The description of the Neptune parameter group. Defaults to "Managed by Pulumi".
	Description pulumix.Input[*string]
	// The family of the Neptune parameter group.
	Family pulumix.Input[string]
	// The name of the Neptune parameter.
	Name pulumix.Input[*string]
	// A list of Neptune parameters to apply.
	Parameters pulumix.Input[[]*ParameterGroupParameterArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ParameterGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*parameterGroupArgs)(nil)).Elem()
}

type ParameterGroupOutput struct{ *pulumi.OutputState }

func (ParameterGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroup)(nil)).Elem()
}

func (o ParameterGroupOutput) ToParameterGroupOutput() ParameterGroupOutput {
	return o
}

func (o ParameterGroupOutput) ToParameterGroupOutputWithContext(ctx context.Context) ParameterGroupOutput {
	return o
}

func (o ParameterGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ParameterGroup] {
	return pulumix.Output[ParameterGroup]{
		OutputState: o.OutputState,
	}
}

// The Neptune parameter group Amazon Resource Name (ARN).
func (o ParameterGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ParameterGroup](o, func(v ParameterGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The description of the Neptune parameter group. Defaults to "Managed by Pulumi".
func (o ParameterGroupOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[ParameterGroup](o, func(v ParameterGroup) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The family of the Neptune parameter group.
func (o ParameterGroupOutput) Family() pulumix.Output[string] {
	value := pulumix.Apply[ParameterGroup](o, func(v ParameterGroup) pulumix.Output[string] { return v.Family })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Neptune parameter.
func (o ParameterGroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ParameterGroup](o, func(v ParameterGroup) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of Neptune parameters to apply.
func (o ParameterGroupOutput) Parameters() pulumix.GArrayOutput[ParameterGroupParameter, ParameterGroupParameterOutput] {
	value := pulumix.Apply[ParameterGroup](o, func(v ParameterGroup) pulumix.GArrayOutput[ParameterGroupParameter, ParameterGroupParameterOutput] {
		return v.Parameters
	})
	unwrapped := pulumix.Flatten[[]ParameterGroupParameter, pulumix.GArrayOutput[ParameterGroupParameter, ParameterGroupParameterOutput]](value)
	return pulumix.GArrayOutput[ParameterGroupParameter, ParameterGroupParameterOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ParameterGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ParameterGroup](o, func(v ParameterGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ParameterGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ParameterGroup](o, func(v ParameterGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ParameterGroupOutput{})
}
