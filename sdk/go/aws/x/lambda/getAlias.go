// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a Lambda Alias.
func LookupAlias(ctx *pulumi.Context, args *LookupAliasArgs, opts ...pulumi.InvokeOption) (*LookupAliasResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAliasResult
	err := ctx.Invoke("aws:lambda/getAlias:getAlias", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAlias.
type LookupAliasArgs struct {
	// Name of the aliased Lambda function.
	FunctionName string `pulumi:"functionName"`
	// Name of the Lambda alias.
	Name string `pulumi:"name"`
}

// A collection of values returned by getAlias.
type LookupAliasResult struct {
	// ARN identifying the Lambda function alias.
	Arn string `pulumi:"arn"`
	// Description of alias.
	Description  string `pulumi:"description"`
	FunctionName string `pulumi:"functionName"`
	// Lambda function version which the alias uses.
	FunctionVersion string `pulumi:"functionVersion"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN to be used for invoking Lambda Function from API Gateway - to be used in aws_api_gateway_integration's `uri`.
	InvokeArn string `pulumi:"invokeArn"`
	Name      string `pulumi:"name"`
}

func LookupAliasOutput(ctx *pulumi.Context, args LookupAliasOutputArgs, opts ...pulumi.InvokeOption) LookupAliasResultOutput {
	outputResult := pulumix.ApplyErr[*LookupAliasArgs](args.ToOutput(), func(plainArgs *LookupAliasArgs) (*LookupAliasResult, error) {
		return LookupAlias(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupAliasResultOutput, *LookupAliasResult](outputResult)
}

// A collection of arguments for invoking getAlias.
type LookupAliasOutputArgs struct {
	// Name of the aliased Lambda function.
	FunctionName pulumix.Input[string] `pulumi:"functionName"`
	// Name of the Lambda alias.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupAliasOutputArgs) ToOutput() pulumix.Output[*LookupAliasArgs] {
	allArgs := pulumix.All(
		args.FunctionName.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupAliasArgs {
		return &LookupAliasArgs{
			FunctionName: resolvedArgs[0].(string),
			Name:         resolvedArgs[1].(string),
		}
	})
}

type LookupAliasResultOutput struct{ *pulumi.OutputState }

func (LookupAliasResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAliasResult)(nil)).Elem()
}

func (o LookupAliasResultOutput) ToOutput(context.Context) pulumix.Output[*LookupAliasResult] {
	return pulumix.Output[*LookupAliasResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupAliasResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupAliasResult](o, func(v *LookupAliasResult) string { return v.Arn })
}

func (o LookupAliasResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupAliasResult](o, func(v *LookupAliasResult) string { return v.Description })
}

func (o LookupAliasResultOutput) FunctionName() pulumix.Output[string] {
	return pulumix.Apply[*LookupAliasResult](o, func(v *LookupAliasResult) string { return v.FunctionName })
}

func (o LookupAliasResultOutput) FunctionVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupAliasResult](o, func(v *LookupAliasResult) string { return v.FunctionVersion })
}

func (o LookupAliasResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupAliasResult](o, func(v *LookupAliasResult) string { return v.Id })
}

func (o LookupAliasResultOutput) InvokeArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupAliasResult](o, func(v *LookupAliasResult) string { return v.InvokeArn })
}

func (o LookupAliasResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupAliasResult](o, func(v *LookupAliasResult) string { return v.Name })
}
