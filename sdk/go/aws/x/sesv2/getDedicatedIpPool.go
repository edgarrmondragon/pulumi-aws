// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sesv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS SESv2 (Simple Email V2) Dedicated IP Pool.
func LookupDedicatedIpPool(ctx *pulumi.Context, args *LookupDedicatedIpPoolArgs, opts ...pulumi.InvokeOption) (*LookupDedicatedIpPoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDedicatedIpPoolResult
	err := ctx.Invoke("aws:sesv2/getDedicatedIpPool:getDedicatedIpPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDedicatedIpPool.
type LookupDedicatedIpPoolArgs struct {
	// Name of the dedicated IP pool.
	PoolName string `pulumi:"poolName"`
	// A map of tags attached to the pool.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getDedicatedIpPool.
type LookupDedicatedIpPoolResult struct {
	// ARN of the Dedicated IP Pool.
	Arn string `pulumi:"arn"`
	// A list of objects describing the pool's dedicated IP's. See `dedicatedIps`.
	DedicatedIps []GetDedicatedIpPoolDedicatedIp `pulumi:"dedicatedIps"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	PoolName string `pulumi:"poolName"`
	// (Optional) IP pool scaling mode. Valid values: `STANDARD`, `MANAGED`.
	ScalingMode string `pulumi:"scalingMode"`
	// A map of tags attached to the pool.
	Tags map[string]string `pulumi:"tags"`
}

func LookupDedicatedIpPoolOutput(ctx *pulumi.Context, args LookupDedicatedIpPoolOutputArgs, opts ...pulumi.InvokeOption) LookupDedicatedIpPoolResultOutput {
	outputResult := pulumix.ApplyErr[*LookupDedicatedIpPoolArgs](args.ToOutput(), func(plainArgs *LookupDedicatedIpPoolArgs) (*LookupDedicatedIpPoolResult, error) {
		return LookupDedicatedIpPool(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupDedicatedIpPoolResultOutput, *LookupDedicatedIpPoolResult](outputResult)
}

// A collection of arguments for invoking getDedicatedIpPool.
type LookupDedicatedIpPoolOutputArgs struct {
	// Name of the dedicated IP pool.
	PoolName pulumix.Input[string] `pulumi:"poolName"`
	// A map of tags attached to the pool.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupDedicatedIpPoolOutputArgs) ToOutput() pulumix.Output[*LookupDedicatedIpPoolArgs] {
	allArgs := pulumix.All(
		args.PoolName.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupDedicatedIpPoolArgs {
		return &LookupDedicatedIpPoolArgs{
			PoolName: resolvedArgs[0].(string),
			Tags:     resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupDedicatedIpPoolResultOutput struct{ *pulumi.OutputState }

func (LookupDedicatedIpPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDedicatedIpPoolResult)(nil)).Elem()
}

func (o LookupDedicatedIpPoolResultOutput) ToOutput(context.Context) pulumix.Output[*LookupDedicatedIpPoolResult] {
	return pulumix.Output[*LookupDedicatedIpPoolResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDedicatedIpPoolResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupDedicatedIpPoolResult](o, func(v *LookupDedicatedIpPoolResult) string { return v.Arn })
}

func (o LookupDedicatedIpPoolResultOutput) DedicatedIps() pulumix.GArrayOutput[GetDedicatedIpPoolDedicatedIp, GetDedicatedIpPoolDedicatedIpOutput] {
	value := pulumix.Apply[*LookupDedicatedIpPoolResult](o, func(v *LookupDedicatedIpPoolResult) []GetDedicatedIpPoolDedicatedIp { return v.DedicatedIps })
	return pulumix.GArrayOutput[GetDedicatedIpPoolDedicatedIp, GetDedicatedIpPoolDedicatedIpOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDedicatedIpPoolResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupDedicatedIpPoolResult](o, func(v *LookupDedicatedIpPoolResult) string { return v.Id })
}

func (o LookupDedicatedIpPoolResultOutput) PoolName() pulumix.Output[string] {
	return pulumix.Apply[*LookupDedicatedIpPoolResult](o, func(v *LookupDedicatedIpPoolResult) string { return v.PoolName })
}

func (o LookupDedicatedIpPoolResultOutput) ScalingMode() pulumix.Output[string] {
	return pulumix.Apply[*LookupDedicatedIpPoolResult](o, func(v *LookupDedicatedIpPoolResult) string { return v.ScalingMode })
}

func (o LookupDedicatedIpPoolResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupDedicatedIpPoolResult](o, func(v *LookupDedicatedIpPoolResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
