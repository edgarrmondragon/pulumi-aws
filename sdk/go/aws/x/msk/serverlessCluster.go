// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Amazon MSK Serverless cluster.
//
// > **Note:** To manage a _provisioned_ Amazon MSK cluster, use the `msk.Cluster` resource.
type ServerlessCluster struct {
	pulumi.CustomResourceState

	// The ARN of the serverless cluster.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Specifies client authentication information for the serverless cluster. See below.
	ClientAuthentication pulumix.GPtrOutput[ServerlessClusterClientAuthentication, ServerlessClusterClientAuthenticationOutput] `pulumi:"clientAuthentication"`
	// The name of the serverless cluster.
	ClusterName pulumix.Output[string] `pulumi:"clusterName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// VPC configuration information. See below.
	VpcConfigs pulumix.GArrayOutput[ServerlessClusterVpcConfig, ServerlessClusterVpcConfigOutput] `pulumi:"vpcConfigs"`
}

// NewServerlessCluster registers a new resource with the given unique name, arguments, and options.
func NewServerlessCluster(ctx *pulumi.Context,
	name string, args *ServerlessClusterArgs, opts ...pulumi.ResourceOption) (*ServerlessCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientAuthentication == nil {
		return nil, errors.New("invalid value for required argument 'ClientAuthentication'")
	}
	if args.VpcConfigs == nil {
		return nil, errors.New("invalid value for required argument 'VpcConfigs'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerlessCluster
	err := ctx.RegisterResource("aws:msk/serverlessCluster:ServerlessCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerlessCluster gets an existing ServerlessCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerlessCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerlessClusterState, opts ...pulumi.ResourceOption) (*ServerlessCluster, error) {
	var resource ServerlessCluster
	err := ctx.ReadResource("aws:msk/serverlessCluster:ServerlessCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerlessCluster resources.
type serverlessClusterState struct {
	// The ARN of the serverless cluster.
	Arn *string `pulumi:"arn"`
	// Specifies client authentication information for the serverless cluster. See below.
	ClientAuthentication *ServerlessClusterClientAuthentication `pulumi:"clientAuthentication"`
	// The name of the serverless cluster.
	ClusterName *string `pulumi:"clusterName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// VPC configuration information. See below.
	VpcConfigs []ServerlessClusterVpcConfig `pulumi:"vpcConfigs"`
}

type ServerlessClusterState struct {
	// The ARN of the serverless cluster.
	Arn pulumix.Input[*string]
	// Specifies client authentication information for the serverless cluster. See below.
	ClientAuthentication pulumix.Input[*ServerlessClusterClientAuthenticationArgs]
	// The name of the serverless cluster.
	ClusterName pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// VPC configuration information. See below.
	VpcConfigs pulumix.Input[[]*ServerlessClusterVpcConfigArgs]
}

func (ServerlessClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessClusterState)(nil)).Elem()
}

type serverlessClusterArgs struct {
	// Specifies client authentication information for the serverless cluster. See below.
	ClientAuthentication ServerlessClusterClientAuthentication `pulumi:"clientAuthentication"`
	// The name of the serverless cluster.
	ClusterName *string `pulumi:"clusterName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// VPC configuration information. See below.
	VpcConfigs []ServerlessClusterVpcConfig `pulumi:"vpcConfigs"`
}

// The set of arguments for constructing a ServerlessCluster resource.
type ServerlessClusterArgs struct {
	// Specifies client authentication information for the serverless cluster. See below.
	ClientAuthentication pulumix.Input[*ServerlessClusterClientAuthenticationArgs]
	// The name of the serverless cluster.
	ClusterName pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// VPC configuration information. See below.
	VpcConfigs pulumix.Input[[]*ServerlessClusterVpcConfigArgs]
}

func (ServerlessClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessClusterArgs)(nil)).Elem()
}

type ServerlessClusterOutput struct{ *pulumi.OutputState }

func (ServerlessClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessCluster)(nil)).Elem()
}

func (o ServerlessClusterOutput) ToServerlessClusterOutput() ServerlessClusterOutput {
	return o
}

func (o ServerlessClusterOutput) ToServerlessClusterOutputWithContext(ctx context.Context) ServerlessClusterOutput {
	return o
}

func (o ServerlessClusterOutput) ToOutput(ctx context.Context) pulumix.Output[ServerlessCluster] {
	return pulumix.Output[ServerlessCluster]{
		OutputState: o.OutputState,
	}
}

// The ARN of the serverless cluster.
func (o ServerlessClusterOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessCluster](o, func(v ServerlessCluster) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies client authentication information for the serverless cluster. See below.
func (o ServerlessClusterOutput) ClientAuthentication() pulumix.GPtrOutput[ServerlessClusterClientAuthentication, ServerlessClusterClientAuthenticationOutput] {
	value := pulumix.Apply[ServerlessCluster](o, func(v ServerlessCluster) pulumix.GPtrOutput[ServerlessClusterClientAuthentication, ServerlessClusterClientAuthenticationOutput] {
		return v.ClientAuthentication
	})
	unwrapped := pulumix.Flatten[*ServerlessClusterClientAuthentication, pulumix.GPtrOutput[ServerlessClusterClientAuthentication, ServerlessClusterClientAuthenticationOutput]](value)
	return pulumix.GPtrOutput[ServerlessClusterClientAuthentication, ServerlessClusterClientAuthenticationOutput]{OutputState: unwrapped.OutputState}
}

// The name of the serverless cluster.
func (o ServerlessClusterOutput) ClusterName() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessCluster](o, func(v ServerlessCluster) pulumix.Output[string] { return v.ClusterName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ServerlessClusterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ServerlessCluster](o, func(v ServerlessCluster) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ServerlessClusterOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ServerlessCluster](o, func(v ServerlessCluster) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// VPC configuration information. See below.
func (o ServerlessClusterOutput) VpcConfigs() pulumix.GArrayOutput[ServerlessClusterVpcConfig, ServerlessClusterVpcConfigOutput] {
	value := pulumix.Apply[ServerlessCluster](o, func(v ServerlessCluster) pulumix.GArrayOutput[ServerlessClusterVpcConfig, ServerlessClusterVpcConfigOutput] {
		return v.VpcConfigs
	})
	unwrapped := pulumix.Flatten[[]ServerlessClusterVpcConfig, pulumix.GArrayOutput[ServerlessClusterVpcConfig, ServerlessClusterVpcConfigOutput]](value)
	return pulumix.GArrayOutput[ServerlessClusterVpcConfig, ServerlessClusterVpcConfigOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ServerlessClusterOutput{})
}
