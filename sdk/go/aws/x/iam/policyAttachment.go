// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Attaches a Managed IAM Policy to user(s), role(s), and/or group(s)
//
// !> **WARNING:** The iam.PolicyAttachment resource creates **exclusive** attachments of IAM policies. Across the entire AWS account, all of the users/roles/groups to which a single policy is attached must be declared by a single iam.PolicyAttachment resource. This means that even any users/roles/groups that have the attached policy via any other mechanism (including other resources managed by this provider) will have that attached policy revoked by this resource. Consider `iam.RolePolicyAttachment`, `iam.UserPolicyAttachment`, or `iam.GroupPolicyAttachment` instead. These resources do not enforce exclusive attachment of an IAM policy.
//
// > **NOTE:** The usage of this resource conflicts with the `iam.GroupPolicyAttachment`, `iam.RolePolicyAttachment`, and `iam.UserPolicyAttachment` resources and will permanently show a difference if both are defined.
//
// > **NOTE:** For a given role, this resource is incompatible with using the `iam.Role` resource `managedPolicyArns` argument. When using that argument and this resource, both will attempt to manage the role's managed policy attachments and the provider will show a permanent difference.
type PolicyAttachment struct {
	pulumi.CustomResourceState

	// The group(s) the policy should be applied to
	Groups pulumix.ArrayOutput[string] `pulumi:"groups"`
	// The name of the attachment. This cannot be an empty string.
	Name pulumix.Output[string] `pulumi:"name"`
	// The ARN of the policy you want to apply
	PolicyArn pulumix.Output[string] `pulumi:"policyArn"`
	// The role(s) the policy should be applied to
	Roles pulumix.ArrayOutput[string] `pulumi:"roles"`
	// The user(s) the policy should be applied to
	Users pulumix.ArrayOutput[string] `pulumi:"users"`
}

// NewPolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewPolicyAttachment(ctx *pulumi.Context,
	name string, args *PolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*PolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyArn == nil {
		return nil, errors.New("invalid value for required argument 'PolicyArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyAttachment
	err := ctx.RegisterResource("aws:iam/policyAttachment:PolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyAttachment gets an existing PolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyAttachmentState, opts ...pulumi.ResourceOption) (*PolicyAttachment, error) {
	var resource PolicyAttachment
	err := ctx.ReadResource("aws:iam/policyAttachment:PolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyAttachment resources.
type policyAttachmentState struct {
	// The group(s) the policy should be applied to
	Groups []interface{} `pulumi:"groups"`
	// The name of the attachment. This cannot be an empty string.
	Name *string `pulumi:"name"`
	// The ARN of the policy you want to apply
	PolicyArn *string `pulumi:"policyArn"`
	// The role(s) the policy should be applied to
	Roles []interface{} `pulumi:"roles"`
	// The user(s) the policy should be applied to
	Users []interface{} `pulumi:"users"`
}

type PolicyAttachmentState struct {
	// The group(s) the policy should be applied to
	Groups pulumix.Input[[]any]
	// The name of the attachment. This cannot be an empty string.
	Name pulumix.Input[*string]
	// The ARN of the policy you want to apply
	PolicyArn pulumix.Input[*string]
	// The role(s) the policy should be applied to
	Roles pulumix.Input[[]any]
	// The user(s) the policy should be applied to
	Users pulumix.Input[[]any]
}

func (PolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAttachmentState)(nil)).Elem()
}

type policyAttachmentArgs struct {
	// The group(s) the policy should be applied to
	Groups []interface{} `pulumi:"groups"`
	// The name of the attachment. This cannot be an empty string.
	Name *string `pulumi:"name"`
	// The ARN of the policy you want to apply
	PolicyArn string `pulumi:"policyArn"`
	// The role(s) the policy should be applied to
	Roles []interface{} `pulumi:"roles"`
	// The user(s) the policy should be applied to
	Users []interface{} `pulumi:"users"`
}

// The set of arguments for constructing a PolicyAttachment resource.
type PolicyAttachmentArgs struct {
	// The group(s) the policy should be applied to
	Groups pulumix.Input[[]any]
	// The name of the attachment. This cannot be an empty string.
	Name pulumix.Input[*string]
	// The ARN of the policy you want to apply
	PolicyArn pulumix.Input[string]
	// The role(s) the policy should be applied to
	Roles pulumix.Input[[]any]
	// The user(s) the policy should be applied to
	Users pulumix.Input[[]any]
}

func (PolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAttachmentArgs)(nil)).Elem()
}

type PolicyAttachmentOutput struct{ *pulumi.OutputState }

func (PolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAttachment)(nil)).Elem()
}

func (o PolicyAttachmentOutput) ToPolicyAttachmentOutput() PolicyAttachmentOutput {
	return o
}

func (o PolicyAttachmentOutput) ToPolicyAttachmentOutputWithContext(ctx context.Context) PolicyAttachmentOutput {
	return o
}

func (o PolicyAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyAttachment] {
	return pulumix.Output[PolicyAttachment]{
		OutputState: o.OutputState,
	}
}

// The group(s) the policy should be applied to
func (o PolicyAttachmentOutput) Groups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PolicyAttachment](o, func(v PolicyAttachment) pulumix.ArrayOutput[string] { return v.Groups })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The name of the attachment. This cannot be an empty string.
func (o PolicyAttachmentOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[PolicyAttachment](o, func(v PolicyAttachment) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the policy you want to apply
func (o PolicyAttachmentOutput) PolicyArn() pulumix.Output[string] {
	value := pulumix.Apply[PolicyAttachment](o, func(v PolicyAttachment) pulumix.Output[string] { return v.PolicyArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The role(s) the policy should be applied to
func (o PolicyAttachmentOutput) Roles() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PolicyAttachment](o, func(v PolicyAttachment) pulumix.ArrayOutput[string] { return v.Roles })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The user(s) the policy should be applied to
func (o PolicyAttachmentOutput) Users() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PolicyAttachment](o, func(v PolicyAttachment) pulumix.ArrayOutput[string] { return v.Users })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(PolicyAttachmentOutput{})
}
