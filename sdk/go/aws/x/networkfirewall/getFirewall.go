// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkfirewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a firewall.
func LookupFirewall(ctx *pulumi.Context, args *LookupFirewallArgs, opts ...pulumi.InvokeOption) (*LookupFirewallResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFirewallResult
	err := ctx.Invoke("aws:networkfirewall/getFirewall:getFirewall", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFirewall.
type LookupFirewallArgs struct {
	// ARN of the firewall.
	Arn *string `pulumi:"arn"`
	// Descriptive name of the firewall.
	Name *string `pulumi:"name"`
	// Map of resource tags to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getFirewall.
type LookupFirewallResult struct {
	// ARN of the firewall.
	Arn string `pulumi:"arn"`
	// Boolean flag indicating whether it is possible to delete the firewall.
	DeleteProtection bool `pulumi:"deleteProtection"`
	// Description of the firewall.
	Description string `pulumi:"description"`
	// AWS Key Management Service (AWS KMS) encryption settings for the firewall.
	EncryptionConfigurations []GetFirewallEncryptionConfiguration `pulumi:"encryptionConfigurations"`
	// ARN of the VPC Firewall policy.
	FirewallPolicyArn string `pulumi:"firewallPolicyArn"`
	// A boolean flag indicating whether it is possible to change the associated firewall policy.
	FirewallPolicyChangeProtection bool `pulumi:"firewallPolicyChangeProtection"`
	// Nested list of information about the current status of the firewall.
	FirewallStatuses []GetFirewallFirewallStatus `pulumi:"firewallStatuses"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Descriptive name of the firewall.
	Name string `pulumi:"name"`
	// A boolean flag indicating whether it is possible to change the associated subnet(s).
	SubnetChangeProtection bool `pulumi:"subnetChangeProtection"`
	// Set of configuration blocks describing the public subnets. Each subnet must belong to a different Availability Zone in the VPC. AWS Network Firewall creates a firewall endpoint in each subnet.
	SubnetMappings []GetFirewallSubnetMapping `pulumi:"subnetMappings"`
	// Map of resource tags to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// String token used when updating a firewall.
	UpdateToken string `pulumi:"updateToken"`
	// Unique identifier of the VPC where AWS Network Firewall should create the firewall.
	VpcId string `pulumi:"vpcId"`
}

func LookupFirewallOutput(ctx *pulumi.Context, args LookupFirewallOutputArgs, opts ...pulumi.InvokeOption) LookupFirewallResultOutput {
	outputResult := pulumix.ApplyErr[*LookupFirewallArgs](args.ToOutput(), func(plainArgs *LookupFirewallArgs) (*LookupFirewallResult, error) {
		return LookupFirewall(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupFirewallResultOutput, *LookupFirewallResult](outputResult)
}

// A collection of arguments for invoking getFirewall.
type LookupFirewallOutputArgs struct {
	// ARN of the firewall.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// Descriptive name of the firewall.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Map of resource tags to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupFirewallOutputArgs) ToOutput() pulumix.Output[*LookupFirewallArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupFirewallArgs {
		return &LookupFirewallArgs{
			Arn:  resolvedArgs[0].(*string),
			Name: resolvedArgs[1].(*string),
			Tags: resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupFirewallResultOutput struct{ *pulumi.OutputState }

func (LookupFirewallResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFirewallResult)(nil)).Elem()
}

func (o LookupFirewallResultOutput) ToOutput(context.Context) pulumix.Output[*LookupFirewallResult] {
	return pulumix.Output[*LookupFirewallResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupFirewallResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupFirewallResult](o, func(v *LookupFirewallResult) string { return v.Arn })
}

func (o LookupFirewallResultOutput) DeleteProtection() pulumix.Output[bool] {
	return pulumix.Apply[*LookupFirewallResult](o, func(v *LookupFirewallResult) bool { return v.DeleteProtection })
}

func (o LookupFirewallResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupFirewallResult](o, func(v *LookupFirewallResult) string { return v.Description })
}

func (o LookupFirewallResultOutput) EncryptionConfigurations() pulumix.GArrayOutput[GetFirewallEncryptionConfiguration, GetFirewallEncryptionConfigurationOutput] {
	value := pulumix.Apply[*LookupFirewallResult](o, func(v *LookupFirewallResult) []GetFirewallEncryptionConfiguration { return v.EncryptionConfigurations })
	return pulumix.GArrayOutput[GetFirewallEncryptionConfiguration, GetFirewallEncryptionConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupFirewallResultOutput) FirewallPolicyArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupFirewallResult](o, func(v *LookupFirewallResult) string { return v.FirewallPolicyArn })
}

func (o LookupFirewallResultOutput) FirewallPolicyChangeProtection() pulumix.Output[bool] {
	return pulumix.Apply[*LookupFirewallResult](o, func(v *LookupFirewallResult) bool { return v.FirewallPolicyChangeProtection })
}

func (o LookupFirewallResultOutput) FirewallStatuses() pulumix.GArrayOutput[GetFirewallFirewallStatus, GetFirewallFirewallStatusOutput] {
	value := pulumix.Apply[*LookupFirewallResult](o, func(v *LookupFirewallResult) []GetFirewallFirewallStatus { return v.FirewallStatuses })
	return pulumix.GArrayOutput[GetFirewallFirewallStatus, GetFirewallFirewallStatusOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupFirewallResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupFirewallResult](o, func(v *LookupFirewallResult) string { return v.Id })
}

func (o LookupFirewallResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupFirewallResult](o, func(v *LookupFirewallResult) string { return v.Name })
}

func (o LookupFirewallResultOutput) SubnetChangeProtection() pulumix.Output[bool] {
	return pulumix.Apply[*LookupFirewallResult](o, func(v *LookupFirewallResult) bool { return v.SubnetChangeProtection })
}

func (o LookupFirewallResultOutput) SubnetMappings() pulumix.GArrayOutput[GetFirewallSubnetMapping, GetFirewallSubnetMappingOutput] {
	value := pulumix.Apply[*LookupFirewallResult](o, func(v *LookupFirewallResult) []GetFirewallSubnetMapping { return v.SubnetMappings })
	return pulumix.GArrayOutput[GetFirewallSubnetMapping, GetFirewallSubnetMappingOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupFirewallResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupFirewallResult](o, func(v *LookupFirewallResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupFirewallResultOutput) UpdateToken() pulumix.Output[string] {
	return pulumix.Apply[*LookupFirewallResult](o, func(v *LookupFirewallResult) string { return v.UpdateToken })
}

func (o LookupFirewallResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupFirewallResult](o, func(v *LookupFirewallResult) string { return v.VpcId })
}
