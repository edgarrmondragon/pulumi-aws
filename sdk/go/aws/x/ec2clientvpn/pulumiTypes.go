// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2clientvpn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type EndpointAuthenticationOption struct {
	// The ID of the Active Directory to be used for authentication if type is `directory-service-authentication`.
	ActiveDirectoryId *string `pulumi:"activeDirectoryId"`
	// The ARN of the client certificate. The certificate must be signed by a certificate authority (CA) and it must be provisioned in AWS Certificate Manager (ACM). Only necessary when type is set to `certificate-authentication`.
	RootCertificateChainArn *string `pulumi:"rootCertificateChainArn"`
	// The ARN of the IAM SAML identity provider if type is `federated-authentication`.
	SamlProviderArn *string `pulumi:"samlProviderArn"`
	// The ARN of the IAM SAML identity provider for the self service portal if type is `federated-authentication`.
	SelfServiceSamlProviderArn *string `pulumi:"selfServiceSamlProviderArn"`
	// The type of client authentication to be used. Specify `certificate-authentication` to use certificate-based authentication, `directory-service-authentication` to use Active Directory authentication, or `federated-authentication` to use Federated Authentication via SAML 2.0.
	Type string `pulumi:"type"`
}

type EndpointAuthenticationOptionArgs struct {
	// The ID of the Active Directory to be used for authentication if type is `directory-service-authentication`.
	ActiveDirectoryId pulumix.Input[*string] `pulumi:"activeDirectoryId"`
	// The ARN of the client certificate. The certificate must be signed by a certificate authority (CA) and it must be provisioned in AWS Certificate Manager (ACM). Only necessary when type is set to `certificate-authentication`.
	RootCertificateChainArn pulumix.Input[*string] `pulumi:"rootCertificateChainArn"`
	// The ARN of the IAM SAML identity provider if type is `federated-authentication`.
	SamlProviderArn pulumix.Input[*string] `pulumi:"samlProviderArn"`
	// The ARN of the IAM SAML identity provider for the self service portal if type is `federated-authentication`.
	SelfServiceSamlProviderArn pulumix.Input[*string] `pulumi:"selfServiceSamlProviderArn"`
	// The type of client authentication to be used. Specify `certificate-authentication` to use certificate-based authentication, `directory-service-authentication` to use Active Directory authentication, or `federated-authentication` to use Federated Authentication via SAML 2.0.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (EndpointAuthenticationOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAuthenticationOption)(nil)).Elem()
}

func (i EndpointAuthenticationOptionArgs) ToEndpointAuthenticationOptionOutput() EndpointAuthenticationOptionOutput {
	return i.ToEndpointAuthenticationOptionOutputWithContext(context.Background())
}

func (i EndpointAuthenticationOptionArgs) ToEndpointAuthenticationOptionOutputWithContext(ctx context.Context) EndpointAuthenticationOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthenticationOptionOutput)
}

func (i *EndpointAuthenticationOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointAuthenticationOptionArgs] {
	return pulumix.Val(i)
}

type EndpointAuthenticationOptionOutput struct{ *pulumi.OutputState }

func (EndpointAuthenticationOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAuthenticationOption)(nil)).Elem()
}

func (o EndpointAuthenticationOptionOutput) ToEndpointAuthenticationOptionOutput() EndpointAuthenticationOptionOutput {
	return o
}

func (o EndpointAuthenticationOptionOutput) ToEndpointAuthenticationOptionOutputWithContext(ctx context.Context) EndpointAuthenticationOptionOutput {
	return o
}

func (o EndpointAuthenticationOptionOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointAuthenticationOption] {
	return pulumix.Output[EndpointAuthenticationOption]{
		OutputState: o.OutputState,
	}
}

// The ID of the Active Directory to be used for authentication if type is `directory-service-authentication`.
func (o EndpointAuthenticationOptionOutput) ActiveDirectoryId() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAuthenticationOption](o, func(v EndpointAuthenticationOption) *string { return v.ActiveDirectoryId })
}

// The ARN of the client certificate. The certificate must be signed by a certificate authority (CA) and it must be provisioned in AWS Certificate Manager (ACM). Only necessary when type is set to `certificate-authentication`.
func (o EndpointAuthenticationOptionOutput) RootCertificateChainArn() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAuthenticationOption](o, func(v EndpointAuthenticationOption) *string { return v.RootCertificateChainArn })
}

// The ARN of the IAM SAML identity provider if type is `federated-authentication`.
func (o EndpointAuthenticationOptionOutput) SamlProviderArn() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAuthenticationOption](o, func(v EndpointAuthenticationOption) *string { return v.SamlProviderArn })
}

// The ARN of the IAM SAML identity provider for the self service portal if type is `federated-authentication`.
func (o EndpointAuthenticationOptionOutput) SelfServiceSamlProviderArn() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAuthenticationOption](o, func(v EndpointAuthenticationOption) *string { return v.SelfServiceSamlProviderArn })
}

// The type of client authentication to be used. Specify `certificate-authentication` to use certificate-based authentication, `directory-service-authentication` to use Active Directory authentication, or `federated-authentication` to use Federated Authentication via SAML 2.0.
func (o EndpointAuthenticationOptionOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[EndpointAuthenticationOption](o, func(v EndpointAuthenticationOption) string { return v.Type })
}

type EndpointClientConnectOptions struct {
	// Indicates whether client connect options are enabled. The default is `false` (not enabled).
	Enabled *bool `pulumi:"enabled"`
	// The Amazon Resource Name (ARN) of the Lambda function used for connection authorization.
	LambdaFunctionArn *string `pulumi:"lambdaFunctionArn"`
}

type EndpointClientConnectOptionsArgs struct {
	// Indicates whether client connect options are enabled. The default is `false` (not enabled).
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The Amazon Resource Name (ARN) of the Lambda function used for connection authorization.
	LambdaFunctionArn pulumix.Input[*string] `pulumi:"lambdaFunctionArn"`
}

func (EndpointClientConnectOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointClientConnectOptions)(nil)).Elem()
}

func (i EndpointClientConnectOptionsArgs) ToEndpointClientConnectOptionsOutput() EndpointClientConnectOptionsOutput {
	return i.ToEndpointClientConnectOptionsOutputWithContext(context.Background())
}

func (i EndpointClientConnectOptionsArgs) ToEndpointClientConnectOptionsOutputWithContext(ctx context.Context) EndpointClientConnectOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointClientConnectOptionsOutput)
}

func (i *EndpointClientConnectOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointClientConnectOptionsArgs] {
	return pulumix.Val(i)
}

type EndpointClientConnectOptionsOutput struct{ *pulumi.OutputState }

func (EndpointClientConnectOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointClientConnectOptions)(nil)).Elem()
}

func (o EndpointClientConnectOptionsOutput) ToEndpointClientConnectOptionsOutput() EndpointClientConnectOptionsOutput {
	return o
}

func (o EndpointClientConnectOptionsOutput) ToEndpointClientConnectOptionsOutputWithContext(ctx context.Context) EndpointClientConnectOptionsOutput {
	return o
}

func (o EndpointClientConnectOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointClientConnectOptions] {
	return pulumix.Output[EndpointClientConnectOptions]{
		OutputState: o.OutputState,
	}
}

// Indicates whether client connect options are enabled. The default is `false` (not enabled).
func (o EndpointClientConnectOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointClientConnectOptions](o, func(v EndpointClientConnectOptions) *bool { return v.Enabled })
}

// The Amazon Resource Name (ARN) of the Lambda function used for connection authorization.
func (o EndpointClientConnectOptionsOutput) LambdaFunctionArn() pulumix.Output[*string] {
	return pulumix.Apply[EndpointClientConnectOptions](o, func(v EndpointClientConnectOptions) *string { return v.LambdaFunctionArn })
}

type EndpointClientLoginBannerOptions struct {
	// Customizable text that will be displayed in a banner on AWS provided clients when a VPN session is established. UTF-8 encoded characters only. Maximum of 1400 characters.
	BannerText *string `pulumi:"bannerText"`
	// Enable or disable a customizable text banner that will be displayed on AWS provided clients when a VPN session is established. The default is `false` (not enabled).
	Enabled *bool `pulumi:"enabled"`
}

type EndpointClientLoginBannerOptionsArgs struct {
	// Customizable text that will be displayed in a banner on AWS provided clients when a VPN session is established. UTF-8 encoded characters only. Maximum of 1400 characters.
	BannerText pulumix.Input[*string] `pulumi:"bannerText"`
	// Enable or disable a customizable text banner that will be displayed on AWS provided clients when a VPN session is established. The default is `false` (not enabled).
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
}

func (EndpointClientLoginBannerOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointClientLoginBannerOptions)(nil)).Elem()
}

func (i EndpointClientLoginBannerOptionsArgs) ToEndpointClientLoginBannerOptionsOutput() EndpointClientLoginBannerOptionsOutput {
	return i.ToEndpointClientLoginBannerOptionsOutputWithContext(context.Background())
}

func (i EndpointClientLoginBannerOptionsArgs) ToEndpointClientLoginBannerOptionsOutputWithContext(ctx context.Context) EndpointClientLoginBannerOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointClientLoginBannerOptionsOutput)
}

func (i *EndpointClientLoginBannerOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointClientLoginBannerOptionsArgs] {
	return pulumix.Val(i)
}

type EndpointClientLoginBannerOptionsOutput struct{ *pulumi.OutputState }

func (EndpointClientLoginBannerOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointClientLoginBannerOptions)(nil)).Elem()
}

func (o EndpointClientLoginBannerOptionsOutput) ToEndpointClientLoginBannerOptionsOutput() EndpointClientLoginBannerOptionsOutput {
	return o
}

func (o EndpointClientLoginBannerOptionsOutput) ToEndpointClientLoginBannerOptionsOutputWithContext(ctx context.Context) EndpointClientLoginBannerOptionsOutput {
	return o
}

func (o EndpointClientLoginBannerOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointClientLoginBannerOptions] {
	return pulumix.Output[EndpointClientLoginBannerOptions]{
		OutputState: o.OutputState,
	}
}

// Customizable text that will be displayed in a banner on AWS provided clients when a VPN session is established. UTF-8 encoded characters only. Maximum of 1400 characters.
func (o EndpointClientLoginBannerOptionsOutput) BannerText() pulumix.Output[*string] {
	return pulumix.Apply[EndpointClientLoginBannerOptions](o, func(v EndpointClientLoginBannerOptions) *string { return v.BannerText })
}

// Enable or disable a customizable text banner that will be displayed on AWS provided clients when a VPN session is established. The default is `false` (not enabled).
func (o EndpointClientLoginBannerOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointClientLoginBannerOptions](o, func(v EndpointClientLoginBannerOptions) *bool { return v.Enabled })
}

type EndpointConnectionLogOptions struct {
	// The name of the CloudWatch Logs log group.
	CloudwatchLogGroup *string `pulumi:"cloudwatchLogGroup"`
	// The name of the CloudWatch Logs log stream to which the connection data is published.
	CloudwatchLogStream *string `pulumi:"cloudwatchLogStream"`
	// Indicates whether connection logging is enabled.
	Enabled bool `pulumi:"enabled"`
}

type EndpointConnectionLogOptionsArgs struct {
	// The name of the CloudWatch Logs log group.
	CloudwatchLogGroup pulumix.Input[*string] `pulumi:"cloudwatchLogGroup"`
	// The name of the CloudWatch Logs log stream to which the connection data is published.
	CloudwatchLogStream pulumix.Input[*string] `pulumi:"cloudwatchLogStream"`
	// Indicates whether connection logging is enabled.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
}

func (EndpointConnectionLogOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointConnectionLogOptions)(nil)).Elem()
}

func (i EndpointConnectionLogOptionsArgs) ToEndpointConnectionLogOptionsOutput() EndpointConnectionLogOptionsOutput {
	return i.ToEndpointConnectionLogOptionsOutputWithContext(context.Background())
}

func (i EndpointConnectionLogOptionsArgs) ToEndpointConnectionLogOptionsOutputWithContext(ctx context.Context) EndpointConnectionLogOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointConnectionLogOptionsOutput)
}

func (i *EndpointConnectionLogOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointConnectionLogOptionsArgs] {
	return pulumix.Val(i)
}

type EndpointConnectionLogOptionsOutput struct{ *pulumi.OutputState }

func (EndpointConnectionLogOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointConnectionLogOptions)(nil)).Elem()
}

func (o EndpointConnectionLogOptionsOutput) ToEndpointConnectionLogOptionsOutput() EndpointConnectionLogOptionsOutput {
	return o
}

func (o EndpointConnectionLogOptionsOutput) ToEndpointConnectionLogOptionsOutputWithContext(ctx context.Context) EndpointConnectionLogOptionsOutput {
	return o
}

func (o EndpointConnectionLogOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointConnectionLogOptions] {
	return pulumix.Output[EndpointConnectionLogOptions]{
		OutputState: o.OutputState,
	}
}

// The name of the CloudWatch Logs log group.
func (o EndpointConnectionLogOptionsOutput) CloudwatchLogGroup() pulumix.Output[*string] {
	return pulumix.Apply[EndpointConnectionLogOptions](o, func(v EndpointConnectionLogOptions) *string { return v.CloudwatchLogGroup })
}

// The name of the CloudWatch Logs log stream to which the connection data is published.
func (o EndpointConnectionLogOptionsOutput) CloudwatchLogStream() pulumix.Output[*string] {
	return pulumix.Apply[EndpointConnectionLogOptions](o, func(v EndpointConnectionLogOptions) *string { return v.CloudwatchLogStream })
}

// Indicates whether connection logging is enabled.
func (o EndpointConnectionLogOptionsOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[EndpointConnectionLogOptions](o, func(v EndpointConnectionLogOptions) bool { return v.Enabled })
}

type GetEndpointAuthenticationOption struct {
	ActiveDirectoryId          string `pulumi:"activeDirectoryId"`
	RootCertificateChainArn    string `pulumi:"rootCertificateChainArn"`
	SamlProviderArn            string `pulumi:"samlProviderArn"`
	SelfServiceSamlProviderArn string `pulumi:"selfServiceSamlProviderArn"`
	Type                       string `pulumi:"type"`
}

type GetEndpointAuthenticationOptionArgs struct {
	ActiveDirectoryId          pulumix.Input[string] `pulumi:"activeDirectoryId"`
	RootCertificateChainArn    pulumix.Input[string] `pulumi:"rootCertificateChainArn"`
	SamlProviderArn            pulumix.Input[string] `pulumi:"samlProviderArn"`
	SelfServiceSamlProviderArn pulumix.Input[string] `pulumi:"selfServiceSamlProviderArn"`
	Type                       pulumix.Input[string] `pulumi:"type"`
}

func (GetEndpointAuthenticationOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointAuthenticationOption)(nil)).Elem()
}

func (i GetEndpointAuthenticationOptionArgs) ToGetEndpointAuthenticationOptionOutput() GetEndpointAuthenticationOptionOutput {
	return i.ToGetEndpointAuthenticationOptionOutputWithContext(context.Background())
}

func (i GetEndpointAuthenticationOptionArgs) ToGetEndpointAuthenticationOptionOutputWithContext(ctx context.Context) GetEndpointAuthenticationOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointAuthenticationOptionOutput)
}

func (i *GetEndpointAuthenticationOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetEndpointAuthenticationOptionArgs] {
	return pulumix.Val(i)
}

type GetEndpointAuthenticationOptionOutput struct{ *pulumi.OutputState }

func (GetEndpointAuthenticationOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointAuthenticationOption)(nil)).Elem()
}

func (o GetEndpointAuthenticationOptionOutput) ToGetEndpointAuthenticationOptionOutput() GetEndpointAuthenticationOptionOutput {
	return o
}

func (o GetEndpointAuthenticationOptionOutput) ToGetEndpointAuthenticationOptionOutputWithContext(ctx context.Context) GetEndpointAuthenticationOptionOutput {
	return o
}

func (o GetEndpointAuthenticationOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetEndpointAuthenticationOption] {
	return pulumix.Output[GetEndpointAuthenticationOption]{
		OutputState: o.OutputState,
	}
}

func (o GetEndpointAuthenticationOptionOutput) ActiveDirectoryId() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointAuthenticationOption](o, func(v GetEndpointAuthenticationOption) string { return v.ActiveDirectoryId })
}

func (o GetEndpointAuthenticationOptionOutput) RootCertificateChainArn() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointAuthenticationOption](o, func(v GetEndpointAuthenticationOption) string { return v.RootCertificateChainArn })
}

func (o GetEndpointAuthenticationOptionOutput) SamlProviderArn() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointAuthenticationOption](o, func(v GetEndpointAuthenticationOption) string { return v.SamlProviderArn })
}

func (o GetEndpointAuthenticationOptionOutput) SelfServiceSamlProviderArn() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointAuthenticationOption](o, func(v GetEndpointAuthenticationOption) string { return v.SelfServiceSamlProviderArn })
}

func (o GetEndpointAuthenticationOptionOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointAuthenticationOption](o, func(v GetEndpointAuthenticationOption) string { return v.Type })
}

type GetEndpointClientConnectOption struct {
	Enabled           bool   `pulumi:"enabled"`
	LambdaFunctionArn string `pulumi:"lambdaFunctionArn"`
}

type GetEndpointClientConnectOptionArgs struct {
	Enabled           pulumix.Input[bool]   `pulumi:"enabled"`
	LambdaFunctionArn pulumix.Input[string] `pulumi:"lambdaFunctionArn"`
}

func (GetEndpointClientConnectOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointClientConnectOption)(nil)).Elem()
}

func (i GetEndpointClientConnectOptionArgs) ToGetEndpointClientConnectOptionOutput() GetEndpointClientConnectOptionOutput {
	return i.ToGetEndpointClientConnectOptionOutputWithContext(context.Background())
}

func (i GetEndpointClientConnectOptionArgs) ToGetEndpointClientConnectOptionOutputWithContext(ctx context.Context) GetEndpointClientConnectOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointClientConnectOptionOutput)
}

func (i *GetEndpointClientConnectOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetEndpointClientConnectOptionArgs] {
	return pulumix.Val(i)
}

type GetEndpointClientConnectOptionOutput struct{ *pulumi.OutputState }

func (GetEndpointClientConnectOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointClientConnectOption)(nil)).Elem()
}

func (o GetEndpointClientConnectOptionOutput) ToGetEndpointClientConnectOptionOutput() GetEndpointClientConnectOptionOutput {
	return o
}

func (o GetEndpointClientConnectOptionOutput) ToGetEndpointClientConnectOptionOutputWithContext(ctx context.Context) GetEndpointClientConnectOptionOutput {
	return o
}

func (o GetEndpointClientConnectOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetEndpointClientConnectOption] {
	return pulumix.Output[GetEndpointClientConnectOption]{
		OutputState: o.OutputState,
	}
}

func (o GetEndpointClientConnectOptionOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointClientConnectOption](o, func(v GetEndpointClientConnectOption) bool { return v.Enabled })
}

func (o GetEndpointClientConnectOptionOutput) LambdaFunctionArn() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointClientConnectOption](o, func(v GetEndpointClientConnectOption) string { return v.LambdaFunctionArn })
}

type GetEndpointClientLoginBannerOption struct {
	BannerText string `pulumi:"bannerText"`
	Enabled    bool   `pulumi:"enabled"`
}

type GetEndpointClientLoginBannerOptionArgs struct {
	BannerText pulumix.Input[string] `pulumi:"bannerText"`
	Enabled    pulumix.Input[bool]   `pulumi:"enabled"`
}

func (GetEndpointClientLoginBannerOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointClientLoginBannerOption)(nil)).Elem()
}

func (i GetEndpointClientLoginBannerOptionArgs) ToGetEndpointClientLoginBannerOptionOutput() GetEndpointClientLoginBannerOptionOutput {
	return i.ToGetEndpointClientLoginBannerOptionOutputWithContext(context.Background())
}

func (i GetEndpointClientLoginBannerOptionArgs) ToGetEndpointClientLoginBannerOptionOutputWithContext(ctx context.Context) GetEndpointClientLoginBannerOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointClientLoginBannerOptionOutput)
}

func (i *GetEndpointClientLoginBannerOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetEndpointClientLoginBannerOptionArgs] {
	return pulumix.Val(i)
}

type GetEndpointClientLoginBannerOptionOutput struct{ *pulumi.OutputState }

func (GetEndpointClientLoginBannerOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointClientLoginBannerOption)(nil)).Elem()
}

func (o GetEndpointClientLoginBannerOptionOutput) ToGetEndpointClientLoginBannerOptionOutput() GetEndpointClientLoginBannerOptionOutput {
	return o
}

func (o GetEndpointClientLoginBannerOptionOutput) ToGetEndpointClientLoginBannerOptionOutputWithContext(ctx context.Context) GetEndpointClientLoginBannerOptionOutput {
	return o
}

func (o GetEndpointClientLoginBannerOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetEndpointClientLoginBannerOption] {
	return pulumix.Output[GetEndpointClientLoginBannerOption]{
		OutputState: o.OutputState,
	}
}

func (o GetEndpointClientLoginBannerOptionOutput) BannerText() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointClientLoginBannerOption](o, func(v GetEndpointClientLoginBannerOption) string { return v.BannerText })
}

func (o GetEndpointClientLoginBannerOptionOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointClientLoginBannerOption](o, func(v GetEndpointClientLoginBannerOption) bool { return v.Enabled })
}

type GetEndpointConnectionLogOption struct {
	CloudwatchLogGroup  string `pulumi:"cloudwatchLogGroup"`
	CloudwatchLogStream string `pulumi:"cloudwatchLogStream"`
	Enabled             bool   `pulumi:"enabled"`
}

type GetEndpointConnectionLogOptionArgs struct {
	CloudwatchLogGroup  pulumix.Input[string] `pulumi:"cloudwatchLogGroup"`
	CloudwatchLogStream pulumix.Input[string] `pulumi:"cloudwatchLogStream"`
	Enabled             pulumix.Input[bool]   `pulumi:"enabled"`
}

func (GetEndpointConnectionLogOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointConnectionLogOption)(nil)).Elem()
}

func (i GetEndpointConnectionLogOptionArgs) ToGetEndpointConnectionLogOptionOutput() GetEndpointConnectionLogOptionOutput {
	return i.ToGetEndpointConnectionLogOptionOutputWithContext(context.Background())
}

func (i GetEndpointConnectionLogOptionArgs) ToGetEndpointConnectionLogOptionOutputWithContext(ctx context.Context) GetEndpointConnectionLogOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointConnectionLogOptionOutput)
}

func (i *GetEndpointConnectionLogOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetEndpointConnectionLogOptionArgs] {
	return pulumix.Val(i)
}

type GetEndpointConnectionLogOptionOutput struct{ *pulumi.OutputState }

func (GetEndpointConnectionLogOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointConnectionLogOption)(nil)).Elem()
}

func (o GetEndpointConnectionLogOptionOutput) ToGetEndpointConnectionLogOptionOutput() GetEndpointConnectionLogOptionOutput {
	return o
}

func (o GetEndpointConnectionLogOptionOutput) ToGetEndpointConnectionLogOptionOutputWithContext(ctx context.Context) GetEndpointConnectionLogOptionOutput {
	return o
}

func (o GetEndpointConnectionLogOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetEndpointConnectionLogOption] {
	return pulumix.Output[GetEndpointConnectionLogOption]{
		OutputState: o.OutputState,
	}
}

func (o GetEndpointConnectionLogOptionOutput) CloudwatchLogGroup() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointConnectionLogOption](o, func(v GetEndpointConnectionLogOption) string { return v.CloudwatchLogGroup })
}

func (o GetEndpointConnectionLogOptionOutput) CloudwatchLogStream() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointConnectionLogOption](o, func(v GetEndpointConnectionLogOption) string { return v.CloudwatchLogStream })
}

func (o GetEndpointConnectionLogOptionOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointConnectionLogOption](o, func(v GetEndpointConnectionLogOption) bool { return v.Enabled })
}

type GetEndpointFilter struct {
	// Name of the field to filter by, as defined by [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeClientVpnEndpoints.html).
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given field. An endpoint will be selected if any one of the given values matches.
	Values []string `pulumi:"values"`
}

type GetEndpointFilterArgs struct {
	// Name of the field to filter by, as defined by [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeClientVpnEndpoints.html).
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of values that are accepted for the given field. An endpoint will be selected if any one of the given values matches.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetEndpointFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointFilter)(nil)).Elem()
}

func (i GetEndpointFilterArgs) ToGetEndpointFilterOutput() GetEndpointFilterOutput {
	return i.ToGetEndpointFilterOutputWithContext(context.Background())
}

func (i GetEndpointFilterArgs) ToGetEndpointFilterOutputWithContext(ctx context.Context) GetEndpointFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointFilterOutput)
}

func (i *GetEndpointFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetEndpointFilterArgs] {
	return pulumix.Val(i)
}

type GetEndpointFilterOutput struct{ *pulumi.OutputState }

func (GetEndpointFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointFilter)(nil)).Elem()
}

func (o GetEndpointFilterOutput) ToGetEndpointFilterOutput() GetEndpointFilterOutput {
	return o
}

func (o GetEndpointFilterOutput) ToGetEndpointFilterOutputWithContext(ctx context.Context) GetEndpointFilterOutput {
	return o
}

func (o GetEndpointFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetEndpointFilter] {
	return pulumix.Output[GetEndpointFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the field to filter by, as defined by [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeClientVpnEndpoints.html).
func (o GetEndpointFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointFilter](o, func(v GetEndpointFilter) string { return v.Name })
}

// Set of values that are accepted for the given field. An endpoint will be selected if any one of the given values matches.
func (o GetEndpointFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetEndpointFilter](o, func(v GetEndpointFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func init() {
	pulumi.RegisterOutputType(EndpointAuthenticationOptionOutput{})
	pulumi.RegisterOutputType(EndpointClientConnectOptionsOutput{})
	pulumi.RegisterOutputType(EndpointClientLoginBannerOptionsOutput{})
	pulumi.RegisterOutputType(EndpointConnectionLogOptionsOutput{})
	pulumi.RegisterOutputType(GetEndpointAuthenticationOptionOutput{})
	pulumi.RegisterOutputType(GetEndpointClientConnectOptionOutput{})
	pulumi.RegisterOutputType(GetEndpointClientLoginBannerOptionOutput{})
	pulumi.RegisterOutputType(GetEndpointConnectionLogOptionOutput{})
	pulumi.RegisterOutputType(GetEndpointFilterOutput{})
}
