// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an EC2 Transit Gateway Prefix List Reference.
type PrefixListReference struct {
	pulumi.CustomResourceState

	// Indicates whether to drop traffic that matches the Prefix List. Defaults to `false`.
	Blackhole pulumix.Output[*bool] `pulumi:"blackhole"`
	// Identifier of EC2 Prefix List.
	PrefixListId      pulumix.Output[string] `pulumi:"prefixListId"`
	PrefixListOwnerId pulumix.Output[string] `pulumi:"prefixListOwnerId"`
	// Identifier of EC2 Transit Gateway Attachment.
	TransitGatewayAttachmentId pulumix.Output[*string] `pulumi:"transitGatewayAttachmentId"`
	// Identifier of EC2 Transit Gateway Route Table.
	//
	// The following arguments are optional:
	TransitGatewayRouteTableId pulumix.Output[string] `pulumi:"transitGatewayRouteTableId"`
}

// NewPrefixListReference registers a new resource with the given unique name, arguments, and options.
func NewPrefixListReference(ctx *pulumi.Context,
	name string, args *PrefixListReferenceArgs, opts ...pulumi.ResourceOption) (*PrefixListReference, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrefixListId == nil {
		return nil, errors.New("invalid value for required argument 'PrefixListId'")
	}
	if args.TransitGatewayRouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayRouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrefixListReference
	err := ctx.RegisterResource("aws:ec2transitgateway/prefixListReference:PrefixListReference", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrefixListReference gets an existing PrefixListReference resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrefixListReference(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrefixListReferenceState, opts ...pulumi.ResourceOption) (*PrefixListReference, error) {
	var resource PrefixListReference
	err := ctx.ReadResource("aws:ec2transitgateway/prefixListReference:PrefixListReference", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrefixListReference resources.
type prefixListReferenceState struct {
	// Indicates whether to drop traffic that matches the Prefix List. Defaults to `false`.
	Blackhole *bool `pulumi:"blackhole"`
	// Identifier of EC2 Prefix List.
	PrefixListId      *string `pulumi:"prefixListId"`
	PrefixListOwnerId *string `pulumi:"prefixListOwnerId"`
	// Identifier of EC2 Transit Gateway Attachment.
	TransitGatewayAttachmentId *string `pulumi:"transitGatewayAttachmentId"`
	// Identifier of EC2 Transit Gateway Route Table.
	//
	// The following arguments are optional:
	TransitGatewayRouteTableId *string `pulumi:"transitGatewayRouteTableId"`
}

type PrefixListReferenceState struct {
	// Indicates whether to drop traffic that matches the Prefix List. Defaults to `false`.
	Blackhole pulumix.Input[*bool]
	// Identifier of EC2 Prefix List.
	PrefixListId      pulumix.Input[*string]
	PrefixListOwnerId pulumix.Input[*string]
	// Identifier of EC2 Transit Gateway Attachment.
	TransitGatewayAttachmentId pulumix.Input[*string]
	// Identifier of EC2 Transit Gateway Route Table.
	//
	// The following arguments are optional:
	TransitGatewayRouteTableId pulumix.Input[*string]
}

func (PrefixListReferenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*prefixListReferenceState)(nil)).Elem()
}

type prefixListReferenceArgs struct {
	// Indicates whether to drop traffic that matches the Prefix List. Defaults to `false`.
	Blackhole *bool `pulumi:"blackhole"`
	// Identifier of EC2 Prefix List.
	PrefixListId string `pulumi:"prefixListId"`
	// Identifier of EC2 Transit Gateway Attachment.
	TransitGatewayAttachmentId *string `pulumi:"transitGatewayAttachmentId"`
	// Identifier of EC2 Transit Gateway Route Table.
	//
	// The following arguments are optional:
	TransitGatewayRouteTableId string `pulumi:"transitGatewayRouteTableId"`
}

// The set of arguments for constructing a PrefixListReference resource.
type PrefixListReferenceArgs struct {
	// Indicates whether to drop traffic that matches the Prefix List. Defaults to `false`.
	Blackhole pulumix.Input[*bool]
	// Identifier of EC2 Prefix List.
	PrefixListId pulumix.Input[string]
	// Identifier of EC2 Transit Gateway Attachment.
	TransitGatewayAttachmentId pulumix.Input[*string]
	// Identifier of EC2 Transit Gateway Route Table.
	//
	// The following arguments are optional:
	TransitGatewayRouteTableId pulumix.Input[string]
}

func (PrefixListReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*prefixListReferenceArgs)(nil)).Elem()
}

type PrefixListReferenceOutput struct{ *pulumi.OutputState }

func (PrefixListReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrefixListReference)(nil)).Elem()
}

func (o PrefixListReferenceOutput) ToPrefixListReferenceOutput() PrefixListReferenceOutput {
	return o
}

func (o PrefixListReferenceOutput) ToPrefixListReferenceOutputWithContext(ctx context.Context) PrefixListReferenceOutput {
	return o
}

func (o PrefixListReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[PrefixListReference] {
	return pulumix.Output[PrefixListReference]{
		OutputState: o.OutputState,
	}
}

// Indicates whether to drop traffic that matches the Prefix List. Defaults to `false`.
func (o PrefixListReferenceOutput) Blackhole() pulumix.Output[*bool] {
	value := pulumix.Apply[PrefixListReference](o, func(v PrefixListReference) pulumix.Output[*bool] { return v.Blackhole })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Identifier of EC2 Prefix List.
func (o PrefixListReferenceOutput) PrefixListId() pulumix.Output[string] {
	value := pulumix.Apply[PrefixListReference](o, func(v PrefixListReference) pulumix.Output[string] { return v.PrefixListId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o PrefixListReferenceOutput) PrefixListOwnerId() pulumix.Output[string] {
	value := pulumix.Apply[PrefixListReference](o, func(v PrefixListReference) pulumix.Output[string] { return v.PrefixListOwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identifier of EC2 Transit Gateway Attachment.
func (o PrefixListReferenceOutput) TransitGatewayAttachmentId() pulumix.Output[*string] {
	value := pulumix.Apply[PrefixListReference](o, func(v PrefixListReference) pulumix.Output[*string] { return v.TransitGatewayAttachmentId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Identifier of EC2 Transit Gateway Route Table.
//
// The following arguments are optional:
func (o PrefixListReferenceOutput) TransitGatewayRouteTableId() pulumix.Output[string] {
	value := pulumix.Apply[PrefixListReference](o, func(v PrefixListReference) pulumix.Output[string] { return v.TransitGatewayRouteTableId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(PrefixListReferenceOutput{})
}
