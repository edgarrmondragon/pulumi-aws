// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a Lightsail load balancer resource.
type Lb struct {
	pulumi.CustomResourceState

	// The ARN of the Lightsail load balancer.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The timestamp when the load balancer was created.
	CreatedAt pulumix.Output[string] `pulumi:"createdAt"`
	// The DNS name of the load balancer.
	DnsName pulumix.Output[string] `pulumi:"dnsName"`
	// The health check path of the load balancer. Default value "/".
	HealthCheckPath pulumix.Output[*string] `pulumi:"healthCheckPath"`
	// The instance port the load balancer will connect.
	InstancePort  pulumix.Output[int]     `pulumi:"instancePort"`
	IpAddressType pulumix.Output[*string] `pulumi:"ipAddressType"`
	// The name of the Lightsail load balancer.
	Name pulumix.Output[string] `pulumi:"name"`
	// The protocol of the load balancer.
	Protocol pulumix.Output[string] `pulumi:"protocol"`
	// The public ports of the load balancer.
	PublicPorts pulumix.ArrayOutput[int] `pulumi:"publicPorts"`
	// The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
	SupportCode pulumix.Output[string] `pulumi:"supportCode"`
	// A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewLb registers a new resource with the given unique name, arguments, and options.
func NewLb(ctx *pulumi.Context,
	name string, args *LbArgs, opts ...pulumi.ResourceOption) (*Lb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstancePort == nil {
		return nil, errors.New("invalid value for required argument 'InstancePort'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Lb
	err := ctx.RegisterResource("aws:lightsail/lb:Lb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLb gets an existing Lb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbState, opts ...pulumi.ResourceOption) (*Lb, error) {
	var resource Lb
	err := ctx.ReadResource("aws:lightsail/lb:Lb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Lb resources.
type lbState struct {
	// The ARN of the Lightsail load balancer.
	Arn *string `pulumi:"arn"`
	// The timestamp when the load balancer was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The DNS name of the load balancer.
	DnsName *string `pulumi:"dnsName"`
	// The health check path of the load balancer. Default value "/".
	HealthCheckPath *string `pulumi:"healthCheckPath"`
	// The instance port the load balancer will connect.
	InstancePort  *int    `pulumi:"instancePort"`
	IpAddressType *string `pulumi:"ipAddressType"`
	// The name of the Lightsail load balancer.
	Name *string `pulumi:"name"`
	// The protocol of the load balancer.
	Protocol *string `pulumi:"protocol"`
	// The public ports of the load balancer.
	PublicPorts []int `pulumi:"publicPorts"`
	// The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
	SupportCode *string `pulumi:"supportCode"`
	// A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type LbState struct {
	// The ARN of the Lightsail load balancer.
	Arn pulumix.Input[*string]
	// The timestamp when the load balancer was created.
	CreatedAt pulumix.Input[*string]
	// The DNS name of the load balancer.
	DnsName pulumix.Input[*string]
	// The health check path of the load balancer. Default value "/".
	HealthCheckPath pulumix.Input[*string]
	// The instance port the load balancer will connect.
	InstancePort  pulumix.Input[*int]
	IpAddressType pulumix.Input[*string]
	// The name of the Lightsail load balancer.
	Name pulumix.Input[*string]
	// The protocol of the load balancer.
	Protocol pulumix.Input[*string]
	// The public ports of the load balancer.
	PublicPorts pulumix.Input[[]int]
	// The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
	SupportCode pulumix.Input[*string]
	// A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (LbState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbState)(nil)).Elem()
}

type lbArgs struct {
	// The health check path of the load balancer. Default value "/".
	HealthCheckPath *string `pulumi:"healthCheckPath"`
	// The instance port the load balancer will connect.
	InstancePort  int     `pulumi:"instancePort"`
	IpAddressType *string `pulumi:"ipAddressType"`
	// The name of the Lightsail load balancer.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Lb resource.
type LbArgs struct {
	// The health check path of the load balancer. Default value "/".
	HealthCheckPath pulumix.Input[*string]
	// The instance port the load balancer will connect.
	InstancePort  pulumix.Input[int]
	IpAddressType pulumix.Input[*string]
	// The name of the Lightsail load balancer.
	Name pulumix.Input[*string]
	// A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (LbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbArgs)(nil)).Elem()
}

type LbOutput struct{ *pulumi.OutputState }

func (LbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Lb)(nil)).Elem()
}

func (o LbOutput) ToLbOutput() LbOutput {
	return o
}

func (o LbOutput) ToLbOutputWithContext(ctx context.Context) LbOutput {
	return o
}

func (o LbOutput) ToOutput(ctx context.Context) pulumix.Output[Lb] {
	return pulumix.Output[Lb]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Lightsail load balancer.
func (o LbOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Lb](o, func(v Lb) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The timestamp when the load balancer was created.
func (o LbOutput) CreatedAt() pulumix.Output[string] {
	value := pulumix.Apply[Lb](o, func(v Lb) pulumix.Output[string] { return v.CreatedAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The DNS name of the load balancer.
func (o LbOutput) DnsName() pulumix.Output[string] {
	value := pulumix.Apply[Lb](o, func(v Lb) pulumix.Output[string] { return v.DnsName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The health check path of the load balancer. Default value "/".
func (o LbOutput) HealthCheckPath() pulumix.Output[*string] {
	value := pulumix.Apply[Lb](o, func(v Lb) pulumix.Output[*string] { return v.HealthCheckPath })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The instance port the load balancer will connect.
func (o LbOutput) InstancePort() pulumix.Output[int] {
	value := pulumix.Apply[Lb](o, func(v Lb) pulumix.Output[int] { return v.InstancePort })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func (o LbOutput) IpAddressType() pulumix.Output[*string] {
	value := pulumix.Apply[Lb](o, func(v Lb) pulumix.Output[*string] { return v.IpAddressType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the Lightsail load balancer.
func (o LbOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Lb](o, func(v Lb) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The protocol of the load balancer.
func (o LbOutput) Protocol() pulumix.Output[string] {
	value := pulumix.Apply[Lb](o, func(v Lb) pulumix.Output[string] { return v.Protocol })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The public ports of the load balancer.
func (o LbOutput) PublicPorts() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[Lb](o, func(v Lb) pulumix.ArrayOutput[int] { return v.PublicPorts })
	unwrapped := pulumix.Flatten[[]int, pulumix.ArrayOutput[int]](value)
	return pulumix.ArrayOutput[int]{OutputState: unwrapped.OutputState}
}

// The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
func (o LbOutput) SupportCode() pulumix.Output[string] {
	value := pulumix.Apply[Lb](o, func(v Lb) pulumix.Output[string] { return v.SupportCode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LbOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Lb](o, func(v Lb) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o LbOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Lb](o, func(v Lb) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(LbOutput{})
}
