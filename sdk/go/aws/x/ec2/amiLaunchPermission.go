// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Adds a launch permission to an Amazon Machine Image (AMI).
type AmiLaunchPermission struct {
	pulumi.CustomResourceState

	// AWS account ID for the launch permission.
	AccountId pulumix.Output[*string] `pulumi:"accountId"`
	// Name of the group for the launch permission. Valid values: `"all"`.
	Group pulumix.Output[*string] `pulumi:"group"`
	// ID of the AMI.
	ImageId pulumix.Output[string] `pulumi:"imageId"`
	// ARN of an organization for the launch permission.
	OrganizationArn pulumix.Output[*string] `pulumi:"organizationArn"`
	// ARN of an organizational unit for the launch permission.
	OrganizationalUnitArn pulumix.Output[*string] `pulumi:"organizationalUnitArn"`
}

// NewAmiLaunchPermission registers a new resource with the given unique name, arguments, and options.
func NewAmiLaunchPermission(ctx *pulumi.Context,
	name string, args *AmiLaunchPermissionArgs, opts ...pulumi.ResourceOption) (*AmiLaunchPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AmiLaunchPermission
	err := ctx.RegisterResource("aws:ec2/amiLaunchPermission:AmiLaunchPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAmiLaunchPermission gets an existing AmiLaunchPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAmiLaunchPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AmiLaunchPermissionState, opts ...pulumi.ResourceOption) (*AmiLaunchPermission, error) {
	var resource AmiLaunchPermission
	err := ctx.ReadResource("aws:ec2/amiLaunchPermission:AmiLaunchPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AmiLaunchPermission resources.
type amiLaunchPermissionState struct {
	// AWS account ID for the launch permission.
	AccountId *string `pulumi:"accountId"`
	// Name of the group for the launch permission. Valid values: `"all"`.
	Group *string `pulumi:"group"`
	// ID of the AMI.
	ImageId *string `pulumi:"imageId"`
	// ARN of an organization for the launch permission.
	OrganizationArn *string `pulumi:"organizationArn"`
	// ARN of an organizational unit for the launch permission.
	OrganizationalUnitArn *string `pulumi:"organizationalUnitArn"`
}

type AmiLaunchPermissionState struct {
	// AWS account ID for the launch permission.
	AccountId pulumix.Input[*string]
	// Name of the group for the launch permission. Valid values: `"all"`.
	Group pulumix.Input[*string]
	// ID of the AMI.
	ImageId pulumix.Input[*string]
	// ARN of an organization for the launch permission.
	OrganizationArn pulumix.Input[*string]
	// ARN of an organizational unit for the launch permission.
	OrganizationalUnitArn pulumix.Input[*string]
}

func (AmiLaunchPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*amiLaunchPermissionState)(nil)).Elem()
}

type amiLaunchPermissionArgs struct {
	// AWS account ID for the launch permission.
	AccountId *string `pulumi:"accountId"`
	// Name of the group for the launch permission. Valid values: `"all"`.
	Group *string `pulumi:"group"`
	// ID of the AMI.
	ImageId string `pulumi:"imageId"`
	// ARN of an organization for the launch permission.
	OrganizationArn *string `pulumi:"organizationArn"`
	// ARN of an organizational unit for the launch permission.
	OrganizationalUnitArn *string `pulumi:"organizationalUnitArn"`
}

// The set of arguments for constructing a AmiLaunchPermission resource.
type AmiLaunchPermissionArgs struct {
	// AWS account ID for the launch permission.
	AccountId pulumix.Input[*string]
	// Name of the group for the launch permission. Valid values: `"all"`.
	Group pulumix.Input[*string]
	// ID of the AMI.
	ImageId pulumix.Input[string]
	// ARN of an organization for the launch permission.
	OrganizationArn pulumix.Input[*string]
	// ARN of an organizational unit for the launch permission.
	OrganizationalUnitArn pulumix.Input[*string]
}

func (AmiLaunchPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*amiLaunchPermissionArgs)(nil)).Elem()
}

type AmiLaunchPermissionOutput struct{ *pulumi.OutputState }

func (AmiLaunchPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmiLaunchPermission)(nil)).Elem()
}

func (o AmiLaunchPermissionOutput) ToAmiLaunchPermissionOutput() AmiLaunchPermissionOutput {
	return o
}

func (o AmiLaunchPermissionOutput) ToAmiLaunchPermissionOutputWithContext(ctx context.Context) AmiLaunchPermissionOutput {
	return o
}

func (o AmiLaunchPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[AmiLaunchPermission] {
	return pulumix.Output[AmiLaunchPermission]{
		OutputState: o.OutputState,
	}
}

// AWS account ID for the launch permission.
func (o AmiLaunchPermissionOutput) AccountId() pulumix.Output[*string] {
	value := pulumix.Apply[AmiLaunchPermission](o, func(v AmiLaunchPermission) pulumix.Output[*string] { return v.AccountId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the group for the launch permission. Valid values: `"all"`.
func (o AmiLaunchPermissionOutput) Group() pulumix.Output[*string] {
	value := pulumix.Apply[AmiLaunchPermission](o, func(v AmiLaunchPermission) pulumix.Output[*string] { return v.Group })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ID of the AMI.
func (o AmiLaunchPermissionOutput) ImageId() pulumix.Output[string] {
	value := pulumix.Apply[AmiLaunchPermission](o, func(v AmiLaunchPermission) pulumix.Output[string] { return v.ImageId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of an organization for the launch permission.
func (o AmiLaunchPermissionOutput) OrganizationArn() pulumix.Output[*string] {
	value := pulumix.Apply[AmiLaunchPermission](o, func(v AmiLaunchPermission) pulumix.Output[*string] { return v.OrganizationArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ARN of an organizational unit for the launch permission.
func (o AmiLaunchPermissionOutput) OrganizationalUnitArn() pulumix.Output[*string] {
	value := pulumix.Apply[AmiLaunchPermission](o, func(v AmiLaunchPermission) pulumix.Output[*string] { return v.OrganizationalUnitArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(AmiLaunchPermissionOutput{})
}
