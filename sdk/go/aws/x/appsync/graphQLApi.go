// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type GraphQLApi struct {
	pulumi.CustomResourceState

	// One or more additional authentication providers for the GraphqlApi. Defined below.
	AdditionalAuthenticationProviders pulumix.GArrayOutput[GraphQLApiAdditionalAuthenticationProvider, GraphQLApiAdditionalAuthenticationProviderOutput] `pulumi:"additionalAuthenticationProviders"`
	// ARN
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`
	AuthenticationType pulumix.Output[string] `pulumi:"authenticationType"`
	// Nested argument containing Lambda authorizer configuration. Defined below.
	LambdaAuthorizerConfig pulumix.GPtrOutput[GraphQLApiLambdaAuthorizerConfig, GraphQLApiLambdaAuthorizerConfigOutput] `pulumi:"lambdaAuthorizerConfig"`
	// Nested argument containing logging configuration. Defined below.
	LogConfig pulumix.GPtrOutput[GraphQLApiLogConfig, GraphQLApiLogConfigOutput] `pulumi:"logConfig"`
	// User-supplied name for the GraphqlApi.
	Name pulumix.Output[string] `pulumi:"name"`
	// Nested argument containing OpenID Connect configuration. Defined below.
	OpenidConnectConfig pulumix.GPtrOutput[GraphQLApiOpenidConnectConfig, GraphQLApiOpenidConnectConfigOutput] `pulumi:"openidConnectConfig"`
	// Schema definition, in GraphQL schema language format. This provider cannot perform drift detection of this configuration.
	Schema pulumix.Output[*string] `pulumi:"schema"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Map of URIs associated with the APIE.g., `uris["GRAPHQL"] = https://ID.appsync-api.REGION.amazonaws.com/graphql`
	Uris pulumix.MapOutput[string] `pulumi:"uris"`
	// Amazon Cognito User Pool configuration. Defined below.
	UserPoolConfig pulumix.GPtrOutput[GraphQLApiUserPoolConfig, GraphQLApiUserPoolConfigOutput] `pulumi:"userPoolConfig"`
	// Sets the value of the GraphQL API to public (`GLOBAL`) or private (`PRIVATE`). If no value is provided, the visibility will be set to `GLOBAL` by default. This value cannot be changed once the API has been created.
	Visibility pulumix.Output[*string] `pulumi:"visibility"`
	// Whether tracing with X-ray is enabled. Defaults to false.
	XrayEnabled pulumix.Output[*bool] `pulumi:"xrayEnabled"`
}

// NewGraphQLApi registers a new resource with the given unique name, arguments, and options.
func NewGraphQLApi(ctx *pulumi.Context,
	name string, args *GraphQLApiArgs, opts ...pulumi.ResourceOption) (*GraphQLApi, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationType == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GraphQLApi
	err := ctx.RegisterResource("aws:appsync/graphQLApi:GraphQLApi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGraphQLApi gets an existing GraphQLApi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGraphQLApi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GraphQLApiState, opts ...pulumi.ResourceOption) (*GraphQLApi, error) {
	var resource GraphQLApi
	err := ctx.ReadResource("aws:appsync/graphQLApi:GraphQLApi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GraphQLApi resources.
type graphQLApiState struct {
	// One or more additional authentication providers for the GraphqlApi. Defined below.
	AdditionalAuthenticationProviders []GraphQLApiAdditionalAuthenticationProvider `pulumi:"additionalAuthenticationProviders"`
	// ARN
	Arn *string `pulumi:"arn"`
	// Authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`
	AuthenticationType *string `pulumi:"authenticationType"`
	// Nested argument containing Lambda authorizer configuration. Defined below.
	LambdaAuthorizerConfig *GraphQLApiLambdaAuthorizerConfig `pulumi:"lambdaAuthorizerConfig"`
	// Nested argument containing logging configuration. Defined below.
	LogConfig *GraphQLApiLogConfig `pulumi:"logConfig"`
	// User-supplied name for the GraphqlApi.
	Name *string `pulumi:"name"`
	// Nested argument containing OpenID Connect configuration. Defined below.
	OpenidConnectConfig *GraphQLApiOpenidConnectConfig `pulumi:"openidConnectConfig"`
	// Schema definition, in GraphQL schema language format. This provider cannot perform drift detection of this configuration.
	Schema *string `pulumi:"schema"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Map of URIs associated with the APIE.g., `uris["GRAPHQL"] = https://ID.appsync-api.REGION.amazonaws.com/graphql`
	Uris map[string]string `pulumi:"uris"`
	// Amazon Cognito User Pool configuration. Defined below.
	UserPoolConfig *GraphQLApiUserPoolConfig `pulumi:"userPoolConfig"`
	// Sets the value of the GraphQL API to public (`GLOBAL`) or private (`PRIVATE`). If no value is provided, the visibility will be set to `GLOBAL` by default. This value cannot be changed once the API has been created.
	Visibility *string `pulumi:"visibility"`
	// Whether tracing with X-ray is enabled. Defaults to false.
	XrayEnabled *bool `pulumi:"xrayEnabled"`
}

type GraphQLApiState struct {
	// One or more additional authentication providers for the GraphqlApi. Defined below.
	AdditionalAuthenticationProviders pulumix.Input[[]*GraphQLApiAdditionalAuthenticationProviderArgs]
	// ARN
	Arn pulumix.Input[*string]
	// Authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`
	AuthenticationType pulumix.Input[*string]
	// Nested argument containing Lambda authorizer configuration. Defined below.
	LambdaAuthorizerConfig pulumix.Input[*GraphQLApiLambdaAuthorizerConfigArgs]
	// Nested argument containing logging configuration. Defined below.
	LogConfig pulumix.Input[*GraphQLApiLogConfigArgs]
	// User-supplied name for the GraphqlApi.
	Name pulumix.Input[*string]
	// Nested argument containing OpenID Connect configuration. Defined below.
	OpenidConnectConfig pulumix.Input[*GraphQLApiOpenidConnectConfigArgs]
	// Schema definition, in GraphQL schema language format. This provider cannot perform drift detection of this configuration.
	Schema pulumix.Input[*string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Map of URIs associated with the APIE.g., `uris["GRAPHQL"] = https://ID.appsync-api.REGION.amazonaws.com/graphql`
	Uris pulumix.Input[map[string]string]
	// Amazon Cognito User Pool configuration. Defined below.
	UserPoolConfig pulumix.Input[*GraphQLApiUserPoolConfigArgs]
	// Sets the value of the GraphQL API to public (`GLOBAL`) or private (`PRIVATE`). If no value is provided, the visibility will be set to `GLOBAL` by default. This value cannot be changed once the API has been created.
	Visibility pulumix.Input[*string]
	// Whether tracing with X-ray is enabled. Defaults to false.
	XrayEnabled pulumix.Input[*bool]
}

func (GraphQLApiState) ElementType() reflect.Type {
	return reflect.TypeOf((*graphQLApiState)(nil)).Elem()
}

type graphQLApiArgs struct {
	// One or more additional authentication providers for the GraphqlApi. Defined below.
	AdditionalAuthenticationProviders []GraphQLApiAdditionalAuthenticationProvider `pulumi:"additionalAuthenticationProviders"`
	// Authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`
	AuthenticationType string `pulumi:"authenticationType"`
	// Nested argument containing Lambda authorizer configuration. Defined below.
	LambdaAuthorizerConfig *GraphQLApiLambdaAuthorizerConfig `pulumi:"lambdaAuthorizerConfig"`
	// Nested argument containing logging configuration. Defined below.
	LogConfig *GraphQLApiLogConfig `pulumi:"logConfig"`
	// User-supplied name for the GraphqlApi.
	Name *string `pulumi:"name"`
	// Nested argument containing OpenID Connect configuration. Defined below.
	OpenidConnectConfig *GraphQLApiOpenidConnectConfig `pulumi:"openidConnectConfig"`
	// Schema definition, in GraphQL schema language format. This provider cannot perform drift detection of this configuration.
	Schema *string `pulumi:"schema"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Amazon Cognito User Pool configuration. Defined below.
	UserPoolConfig *GraphQLApiUserPoolConfig `pulumi:"userPoolConfig"`
	// Sets the value of the GraphQL API to public (`GLOBAL`) or private (`PRIVATE`). If no value is provided, the visibility will be set to `GLOBAL` by default. This value cannot be changed once the API has been created.
	Visibility *string `pulumi:"visibility"`
	// Whether tracing with X-ray is enabled. Defaults to false.
	XrayEnabled *bool `pulumi:"xrayEnabled"`
}

// The set of arguments for constructing a GraphQLApi resource.
type GraphQLApiArgs struct {
	// One or more additional authentication providers for the GraphqlApi. Defined below.
	AdditionalAuthenticationProviders pulumix.Input[[]*GraphQLApiAdditionalAuthenticationProviderArgs]
	// Authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`
	AuthenticationType pulumix.Input[string]
	// Nested argument containing Lambda authorizer configuration. Defined below.
	LambdaAuthorizerConfig pulumix.Input[*GraphQLApiLambdaAuthorizerConfigArgs]
	// Nested argument containing logging configuration. Defined below.
	LogConfig pulumix.Input[*GraphQLApiLogConfigArgs]
	// User-supplied name for the GraphqlApi.
	Name pulumix.Input[*string]
	// Nested argument containing OpenID Connect configuration. Defined below.
	OpenidConnectConfig pulumix.Input[*GraphQLApiOpenidConnectConfigArgs]
	// Schema definition, in GraphQL schema language format. This provider cannot perform drift detection of this configuration.
	Schema pulumix.Input[*string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Amazon Cognito User Pool configuration. Defined below.
	UserPoolConfig pulumix.Input[*GraphQLApiUserPoolConfigArgs]
	// Sets the value of the GraphQL API to public (`GLOBAL`) or private (`PRIVATE`). If no value is provided, the visibility will be set to `GLOBAL` by default. This value cannot be changed once the API has been created.
	Visibility pulumix.Input[*string]
	// Whether tracing with X-ray is enabled. Defaults to false.
	XrayEnabled pulumix.Input[*bool]
}

func (GraphQLApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*graphQLApiArgs)(nil)).Elem()
}

type GraphQLApiOutput struct{ *pulumi.OutputState }

func (GraphQLApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApi)(nil)).Elem()
}

func (o GraphQLApiOutput) ToGraphQLApiOutput() GraphQLApiOutput {
	return o
}

func (o GraphQLApiOutput) ToGraphQLApiOutputWithContext(ctx context.Context) GraphQLApiOutput {
	return o
}

func (o GraphQLApiOutput) ToOutput(ctx context.Context) pulumix.Output[GraphQLApi] {
	return pulumix.Output[GraphQLApi]{
		OutputState: o.OutputState,
	}
}

// One or more additional authentication providers for the GraphqlApi. Defined below.
func (o GraphQLApiOutput) AdditionalAuthenticationProviders() pulumix.GArrayOutput[GraphQLApiAdditionalAuthenticationProvider, GraphQLApiAdditionalAuthenticationProviderOutput] {
	value := pulumix.Apply[GraphQLApi](o, func(v GraphQLApi) pulumix.GArrayOutput[GraphQLApiAdditionalAuthenticationProvider, GraphQLApiAdditionalAuthenticationProviderOutput] {
		return v.AdditionalAuthenticationProviders
	})
	unwrapped := pulumix.Flatten[[]GraphQLApiAdditionalAuthenticationProvider, pulumix.GArrayOutput[GraphQLApiAdditionalAuthenticationProvider, GraphQLApiAdditionalAuthenticationProviderOutput]](value)
	return pulumix.GArrayOutput[GraphQLApiAdditionalAuthenticationProvider, GraphQLApiAdditionalAuthenticationProviderOutput]{OutputState: unwrapped.OutputState}
}

// ARN
func (o GraphQLApiOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[GraphQLApi](o, func(v GraphQLApi) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`
func (o GraphQLApiOutput) AuthenticationType() pulumix.Output[string] {
	value := pulumix.Apply[GraphQLApi](o, func(v GraphQLApi) pulumix.Output[string] { return v.AuthenticationType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Nested argument containing Lambda authorizer configuration. Defined below.
func (o GraphQLApiOutput) LambdaAuthorizerConfig() pulumix.GPtrOutput[GraphQLApiLambdaAuthorizerConfig, GraphQLApiLambdaAuthorizerConfigOutput] {
	value := pulumix.Apply[GraphQLApi](o, func(v GraphQLApi) pulumix.GPtrOutput[GraphQLApiLambdaAuthorizerConfig, GraphQLApiLambdaAuthorizerConfigOutput] {
		return v.LambdaAuthorizerConfig
	})
	unwrapped := pulumix.Flatten[*GraphQLApiLambdaAuthorizerConfig, pulumix.GPtrOutput[GraphQLApiLambdaAuthorizerConfig, GraphQLApiLambdaAuthorizerConfigOutput]](value)
	return pulumix.GPtrOutput[GraphQLApiLambdaAuthorizerConfig, GraphQLApiLambdaAuthorizerConfigOutput]{OutputState: unwrapped.OutputState}
}

// Nested argument containing logging configuration. Defined below.
func (o GraphQLApiOutput) LogConfig() pulumix.GPtrOutput[GraphQLApiLogConfig, GraphQLApiLogConfigOutput] {
	value := pulumix.Apply[GraphQLApi](o, func(v GraphQLApi) pulumix.GPtrOutput[GraphQLApiLogConfig, GraphQLApiLogConfigOutput] {
		return v.LogConfig
	})
	unwrapped := pulumix.Flatten[*GraphQLApiLogConfig, pulumix.GPtrOutput[GraphQLApiLogConfig, GraphQLApiLogConfigOutput]](value)
	return pulumix.GPtrOutput[GraphQLApiLogConfig, GraphQLApiLogConfigOutput]{OutputState: unwrapped.OutputState}
}

// User-supplied name for the GraphqlApi.
func (o GraphQLApiOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[GraphQLApi](o, func(v GraphQLApi) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Nested argument containing OpenID Connect configuration. Defined below.
func (o GraphQLApiOutput) OpenidConnectConfig() pulumix.GPtrOutput[GraphQLApiOpenidConnectConfig, GraphQLApiOpenidConnectConfigOutput] {
	value := pulumix.Apply[GraphQLApi](o, func(v GraphQLApi) pulumix.GPtrOutput[GraphQLApiOpenidConnectConfig, GraphQLApiOpenidConnectConfigOutput] {
		return v.OpenidConnectConfig
	})
	unwrapped := pulumix.Flatten[*GraphQLApiOpenidConnectConfig, pulumix.GPtrOutput[GraphQLApiOpenidConnectConfig, GraphQLApiOpenidConnectConfigOutput]](value)
	return pulumix.GPtrOutput[GraphQLApiOpenidConnectConfig, GraphQLApiOpenidConnectConfigOutput]{OutputState: unwrapped.OutputState}
}

// Schema definition, in GraphQL schema language format. This provider cannot perform drift detection of this configuration.
func (o GraphQLApiOutput) Schema() pulumix.Output[*string] {
	value := pulumix.Apply[GraphQLApi](o, func(v GraphQLApi) pulumix.Output[*string] { return v.Schema })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o GraphQLApiOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[GraphQLApi](o, func(v GraphQLApi) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o GraphQLApiOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[GraphQLApi](o, func(v GraphQLApi) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of URIs associated with the APIE.g., `uris["GRAPHQL"] = https://ID.appsync-api.REGION.amazonaws.com/graphql`
func (o GraphQLApiOutput) Uris() pulumix.MapOutput[string] {
	value := pulumix.Apply[GraphQLApi](o, func(v GraphQLApi) pulumix.MapOutput[string] { return v.Uris })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Amazon Cognito User Pool configuration. Defined below.
func (o GraphQLApiOutput) UserPoolConfig() pulumix.GPtrOutput[GraphQLApiUserPoolConfig, GraphQLApiUserPoolConfigOutput] {
	value := pulumix.Apply[GraphQLApi](o, func(v GraphQLApi) pulumix.GPtrOutput[GraphQLApiUserPoolConfig, GraphQLApiUserPoolConfigOutput] {
		return v.UserPoolConfig
	})
	unwrapped := pulumix.Flatten[*GraphQLApiUserPoolConfig, pulumix.GPtrOutput[GraphQLApiUserPoolConfig, GraphQLApiUserPoolConfigOutput]](value)
	return pulumix.GPtrOutput[GraphQLApiUserPoolConfig, GraphQLApiUserPoolConfigOutput]{OutputState: unwrapped.OutputState}
}

// Sets the value of the GraphQL API to public (`GLOBAL`) or private (`PRIVATE`). If no value is provided, the visibility will be set to `GLOBAL` by default. This value cannot be changed once the API has been created.
func (o GraphQLApiOutput) Visibility() pulumix.Output[*string] {
	value := pulumix.Apply[GraphQLApi](o, func(v GraphQLApi) pulumix.Output[*string] { return v.Visibility })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether tracing with X-ray is enabled. Defaults to false.
func (o GraphQLApiOutput) XrayEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[GraphQLApi](o, func(v GraphQLApi) pulumix.Output[*bool] { return v.XrayEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(GraphQLApiOutput{})
}
