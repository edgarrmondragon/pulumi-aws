// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a Snapshot of a snapshot.
type SnapshotCopy struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the EBS Snapshot.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The data encryption key identifier for the snapshot.
	DataEncryptionKeyId pulumix.Output[string] `pulumi:"dataEncryptionKeyId"`
	// A description of what the snapshot is.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Whether the snapshot is encrypted.
	Encrypted pulumix.Output[*bool] `pulumi:"encrypted"`
	// The ARN for the KMS encryption key.
	KmsKeyId   pulumix.Output[*string] `pulumi:"kmsKeyId"`
	OutpostArn pulumix.Output[string]  `pulumi:"outpostArn"`
	// Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
	OwnerAlias pulumix.Output[string] `pulumi:"ownerAlias"`
	// The AWS account ID of the snapshot owner.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// Indicates whether to permanently restore an archived snapshot.
	PermanentRestore pulumix.Output[*bool] `pulumi:"permanentRestore"`
	// The region of the source snapshot.
	SourceRegion pulumix.Output[string] `pulumi:"sourceRegion"`
	// The ARN for the snapshot to be copied.
	SourceSnapshotId pulumix.Output[string] `pulumi:"sourceSnapshotId"`
	// The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
	StorageTier pulumix.Output[string] `pulumi:"storageTier"`
	// A map of tags for the snapshot.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
	TemporaryRestoreDays pulumix.Output[*int]   `pulumi:"temporaryRestoreDays"`
	VolumeId             pulumix.Output[string] `pulumi:"volumeId"`
	// The size of the drive in GiBs.
	VolumeSize pulumix.Output[int] `pulumi:"volumeSize"`
}

// NewSnapshotCopy registers a new resource with the given unique name, arguments, and options.
func NewSnapshotCopy(ctx *pulumi.Context,
	name string, args *SnapshotCopyArgs, opts ...pulumi.ResourceOption) (*SnapshotCopy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceRegion == nil {
		return nil, errors.New("invalid value for required argument 'SourceRegion'")
	}
	if args.SourceSnapshotId == nil {
		return nil, errors.New("invalid value for required argument 'SourceSnapshotId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnapshotCopy
	err := ctx.RegisterResource("aws:ebs/snapshotCopy:SnapshotCopy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotCopy gets an existing SnapshotCopy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotCopy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotCopyState, opts ...pulumi.ResourceOption) (*SnapshotCopy, error) {
	var resource SnapshotCopy
	err := ctx.ReadResource("aws:ebs/snapshotCopy:SnapshotCopy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotCopy resources.
type snapshotCopyState struct {
	// Amazon Resource Name (ARN) of the EBS Snapshot.
	Arn *string `pulumi:"arn"`
	// The data encryption key identifier for the snapshot.
	DataEncryptionKeyId *string `pulumi:"dataEncryptionKeyId"`
	// A description of what the snapshot is.
	Description *string `pulumi:"description"`
	// Whether the snapshot is encrypted.
	Encrypted *bool `pulumi:"encrypted"`
	// The ARN for the KMS encryption key.
	KmsKeyId   *string `pulumi:"kmsKeyId"`
	OutpostArn *string `pulumi:"outpostArn"`
	// Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
	OwnerAlias *string `pulumi:"ownerAlias"`
	// The AWS account ID of the snapshot owner.
	OwnerId *string `pulumi:"ownerId"`
	// Indicates whether to permanently restore an archived snapshot.
	PermanentRestore *bool `pulumi:"permanentRestore"`
	// The region of the source snapshot.
	SourceRegion *string `pulumi:"sourceRegion"`
	// The ARN for the snapshot to be copied.
	SourceSnapshotId *string `pulumi:"sourceSnapshotId"`
	// The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
	StorageTier *string `pulumi:"storageTier"`
	// A map of tags for the snapshot.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
	TemporaryRestoreDays *int    `pulumi:"temporaryRestoreDays"`
	VolumeId             *string `pulumi:"volumeId"`
	// The size of the drive in GiBs.
	VolumeSize *int `pulumi:"volumeSize"`
}

type SnapshotCopyState struct {
	// Amazon Resource Name (ARN) of the EBS Snapshot.
	Arn pulumix.Input[*string]
	// The data encryption key identifier for the snapshot.
	DataEncryptionKeyId pulumix.Input[*string]
	// A description of what the snapshot is.
	Description pulumix.Input[*string]
	// Whether the snapshot is encrypted.
	Encrypted pulumix.Input[*bool]
	// The ARN for the KMS encryption key.
	KmsKeyId   pulumix.Input[*string]
	OutpostArn pulumix.Input[*string]
	// Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
	OwnerAlias pulumix.Input[*string]
	// The AWS account ID of the snapshot owner.
	OwnerId pulumix.Input[*string]
	// Indicates whether to permanently restore an archived snapshot.
	PermanentRestore pulumix.Input[*bool]
	// The region of the source snapshot.
	SourceRegion pulumix.Input[*string]
	// The ARN for the snapshot to be copied.
	SourceSnapshotId pulumix.Input[*string]
	// The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
	StorageTier pulumix.Input[*string]
	// A map of tags for the snapshot.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
	TemporaryRestoreDays pulumix.Input[*int]
	VolumeId             pulumix.Input[*string]
	// The size of the drive in GiBs.
	VolumeSize pulumix.Input[*int]
}

func (SnapshotCopyState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotCopyState)(nil)).Elem()
}

type snapshotCopyArgs struct {
	// A description of what the snapshot is.
	Description *string `pulumi:"description"`
	// Whether the snapshot is encrypted.
	Encrypted *bool `pulumi:"encrypted"`
	// The ARN for the KMS encryption key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Indicates whether to permanently restore an archived snapshot.
	PermanentRestore *bool `pulumi:"permanentRestore"`
	// The region of the source snapshot.
	SourceRegion string `pulumi:"sourceRegion"`
	// The ARN for the snapshot to be copied.
	SourceSnapshotId string `pulumi:"sourceSnapshotId"`
	// The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
	StorageTier *string `pulumi:"storageTier"`
	// A map of tags for the snapshot.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
	TemporaryRestoreDays *int `pulumi:"temporaryRestoreDays"`
}

// The set of arguments for constructing a SnapshotCopy resource.
type SnapshotCopyArgs struct {
	// A description of what the snapshot is.
	Description pulumix.Input[*string]
	// Whether the snapshot is encrypted.
	Encrypted pulumix.Input[*bool]
	// The ARN for the KMS encryption key.
	KmsKeyId pulumix.Input[*string]
	// Indicates whether to permanently restore an archived snapshot.
	PermanentRestore pulumix.Input[*bool]
	// The region of the source snapshot.
	SourceRegion pulumix.Input[string]
	// The ARN for the snapshot to be copied.
	SourceSnapshotId pulumix.Input[string]
	// The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
	StorageTier pulumix.Input[*string]
	// A map of tags for the snapshot.
	Tags pulumix.Input[map[string]string]
	// Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
	TemporaryRestoreDays pulumix.Input[*int]
}

func (SnapshotCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotCopyArgs)(nil)).Elem()
}

type SnapshotCopyOutput struct{ *pulumi.OutputState }

func (SnapshotCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotCopy)(nil)).Elem()
}

func (o SnapshotCopyOutput) ToSnapshotCopyOutput() SnapshotCopyOutput {
	return o
}

func (o SnapshotCopyOutput) ToSnapshotCopyOutputWithContext(ctx context.Context) SnapshotCopyOutput {
	return o
}

func (o SnapshotCopyOutput) ToOutput(ctx context.Context) pulumix.Output[SnapshotCopy] {
	return pulumix.Output[SnapshotCopy]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the EBS Snapshot.
func (o SnapshotCopyOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The data encryption key identifier for the snapshot.
func (o SnapshotCopyOutput) DataEncryptionKeyId() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.DataEncryptionKeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description of what the snapshot is.
func (o SnapshotCopyOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether the snapshot is encrypted.
func (o SnapshotCopyOutput) Encrypted() pulumix.Output[*bool] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[*bool] { return v.Encrypted })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The ARN for the KMS encryption key.
func (o SnapshotCopyOutput) KmsKeyId() pulumix.Output[*string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[*string] { return v.KmsKeyId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o SnapshotCopyOutput) OutpostArn() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.OutpostArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
func (o SnapshotCopyOutput) OwnerAlias() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.OwnerAlias })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The AWS account ID of the snapshot owner.
func (o SnapshotCopyOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether to permanently restore an archived snapshot.
func (o SnapshotCopyOutput) PermanentRestore() pulumix.Output[*bool] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[*bool] { return v.PermanentRestore })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The region of the source snapshot.
func (o SnapshotCopyOutput) SourceRegion() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.SourceRegion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN for the snapshot to be copied.
func (o SnapshotCopyOutput) SourceSnapshotId() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.SourceSnapshotId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
func (o SnapshotCopyOutput) StorageTier() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.StorageTier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags for the snapshot.
func (o SnapshotCopyOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SnapshotCopyOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
func (o SnapshotCopyOutput) TemporaryRestoreDays() pulumix.Output[*int] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[*int] { return v.TemporaryRestoreDays })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o SnapshotCopyOutput) VolumeId() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.VolumeId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The size of the drive in GiBs.
func (o SnapshotCopyOutput) VolumeSize() pulumix.Output[int] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[int] { return v.VolumeSize })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(SnapshotCopyOutput{})
}
