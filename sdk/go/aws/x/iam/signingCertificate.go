// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an IAM Signing Certificate resource to upload Signing Certificates.
//
// > **Note:** All arguments including the certificate body will be stored in the raw state as plain-text.
type SigningCertificate struct {
	pulumi.CustomResourceState

	// The contents of the signing certificate in PEM-encoded format.
	CertificateBody pulumix.Output[string] `pulumi:"certificateBody"`
	// The ID for the signing certificate.
	CertificateId pulumix.Output[string] `pulumi:"certificateId"`
	// The status you want to assign to the certificate. `Active` means that the certificate can be used for programmatic calls to Amazon Web Services `Inactive` means that the certificate cannot be used.
	Status pulumix.Output[*string] `pulumi:"status"`
	// The name of the user the signing certificate is for.
	UserName pulumix.Output[string] `pulumi:"userName"`
}

// NewSigningCertificate registers a new resource with the given unique name, arguments, and options.
func NewSigningCertificate(ctx *pulumi.Context,
	name string, args *SigningCertificateArgs, opts ...pulumi.ResourceOption) (*SigningCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateBody == nil {
		return nil, errors.New("invalid value for required argument 'CertificateBody'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SigningCertificate
	err := ctx.RegisterResource("aws:iam/signingCertificate:SigningCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSigningCertificate gets an existing SigningCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSigningCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SigningCertificateState, opts ...pulumi.ResourceOption) (*SigningCertificate, error) {
	var resource SigningCertificate
	err := ctx.ReadResource("aws:iam/signingCertificate:SigningCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SigningCertificate resources.
type signingCertificateState struct {
	// The contents of the signing certificate in PEM-encoded format.
	CertificateBody *string `pulumi:"certificateBody"`
	// The ID for the signing certificate.
	CertificateId *string `pulumi:"certificateId"`
	// The status you want to assign to the certificate. `Active` means that the certificate can be used for programmatic calls to Amazon Web Services `Inactive` means that the certificate cannot be used.
	Status *string `pulumi:"status"`
	// The name of the user the signing certificate is for.
	UserName *string `pulumi:"userName"`
}

type SigningCertificateState struct {
	// The contents of the signing certificate in PEM-encoded format.
	CertificateBody pulumix.Input[*string]
	// The ID for the signing certificate.
	CertificateId pulumix.Input[*string]
	// The status you want to assign to the certificate. `Active` means that the certificate can be used for programmatic calls to Amazon Web Services `Inactive` means that the certificate cannot be used.
	Status pulumix.Input[*string]
	// The name of the user the signing certificate is for.
	UserName pulumix.Input[*string]
}

func (SigningCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*signingCertificateState)(nil)).Elem()
}

type signingCertificateArgs struct {
	// The contents of the signing certificate in PEM-encoded format.
	CertificateBody string `pulumi:"certificateBody"`
	// The status you want to assign to the certificate. `Active` means that the certificate can be used for programmatic calls to Amazon Web Services `Inactive` means that the certificate cannot be used.
	Status *string `pulumi:"status"`
	// The name of the user the signing certificate is for.
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a SigningCertificate resource.
type SigningCertificateArgs struct {
	// The contents of the signing certificate in PEM-encoded format.
	CertificateBody pulumix.Input[string]
	// The status you want to assign to the certificate. `Active` means that the certificate can be used for programmatic calls to Amazon Web Services `Inactive` means that the certificate cannot be used.
	Status pulumix.Input[*string]
	// The name of the user the signing certificate is for.
	UserName pulumix.Input[string]
}

func (SigningCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*signingCertificateArgs)(nil)).Elem()
}

type SigningCertificateOutput struct{ *pulumi.OutputState }

func (SigningCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SigningCertificate)(nil)).Elem()
}

func (o SigningCertificateOutput) ToSigningCertificateOutput() SigningCertificateOutput {
	return o
}

func (o SigningCertificateOutput) ToSigningCertificateOutputWithContext(ctx context.Context) SigningCertificateOutput {
	return o
}

func (o SigningCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[SigningCertificate] {
	return pulumix.Output[SigningCertificate]{
		OutputState: o.OutputState,
	}
}

// The contents of the signing certificate in PEM-encoded format.
func (o SigningCertificateOutput) CertificateBody() pulumix.Output[string] {
	value := pulumix.Apply[SigningCertificate](o, func(v SigningCertificate) pulumix.Output[string] { return v.CertificateBody })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID for the signing certificate.
func (o SigningCertificateOutput) CertificateId() pulumix.Output[string] {
	value := pulumix.Apply[SigningCertificate](o, func(v SigningCertificate) pulumix.Output[string] { return v.CertificateId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The status you want to assign to the certificate. `Active` means that the certificate can be used for programmatic calls to Amazon Web Services `Inactive` means that the certificate cannot be used.
func (o SigningCertificateOutput) Status() pulumix.Output[*string] {
	value := pulumix.Apply[SigningCertificate](o, func(v SigningCertificate) pulumix.Output[*string] { return v.Status })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the user the signing certificate is for.
func (o SigningCertificateOutput) UserName() pulumix.Output[string] {
	value := pulumix.Apply[SigningCertificate](o, func(v SigningCertificate) pulumix.Output[string] { return v.UserName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SigningCertificateOutput{})
}
