// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codecatalyst

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type DevEnvironmentIdes struct {
	// The name of the IDE. Valid values include Cloud9, IntelliJ, PyCharm, GoLand, and VSCode.
	Name *string `pulumi:"name"`
	// A link to the IDE runtime image. This parameter is not required if the name is VSCode. Values of the runtime can be for example public.ecr.aws/jetbrains/py,public.ecr.aws/jetbrains/go
	Runtime *string `pulumi:"runtime"`
}

type DevEnvironmentIdesArgs struct {
	// The name of the IDE. Valid values include Cloud9, IntelliJ, PyCharm, GoLand, and VSCode.
	Name pulumix.Input[*string] `pulumi:"name"`
	// A link to the IDE runtime image. This parameter is not required if the name is VSCode. Values of the runtime can be for example public.ecr.aws/jetbrains/py,public.ecr.aws/jetbrains/go
	Runtime pulumix.Input[*string] `pulumi:"runtime"`
}

func (DevEnvironmentIdesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevEnvironmentIdes)(nil)).Elem()
}

func (i DevEnvironmentIdesArgs) ToDevEnvironmentIdesOutput() DevEnvironmentIdesOutput {
	return i.ToDevEnvironmentIdesOutputWithContext(context.Background())
}

func (i DevEnvironmentIdesArgs) ToDevEnvironmentIdesOutputWithContext(ctx context.Context) DevEnvironmentIdesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevEnvironmentIdesOutput)
}

func (i *DevEnvironmentIdesArgs) ToOutput(ctx context.Context) pulumix.Output[*DevEnvironmentIdesArgs] {
	return pulumix.Val(i)
}

type DevEnvironmentIdesOutput struct{ *pulumi.OutputState }

func (DevEnvironmentIdesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevEnvironmentIdes)(nil)).Elem()
}

func (o DevEnvironmentIdesOutput) ToDevEnvironmentIdesOutput() DevEnvironmentIdesOutput {
	return o
}

func (o DevEnvironmentIdesOutput) ToDevEnvironmentIdesOutputWithContext(ctx context.Context) DevEnvironmentIdesOutput {
	return o
}

func (o DevEnvironmentIdesOutput) ToOutput(ctx context.Context) pulumix.Output[DevEnvironmentIdes] {
	return pulumix.Output[DevEnvironmentIdes]{
		OutputState: o.OutputState,
	}
}

// The name of the IDE. Valid values include Cloud9, IntelliJ, PyCharm, GoLand, and VSCode.
func (o DevEnvironmentIdesOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[DevEnvironmentIdes](o, func(v DevEnvironmentIdes) *string { return v.Name })
}

// A link to the IDE runtime image. This parameter is not required if the name is VSCode. Values of the runtime can be for example public.ecr.aws/jetbrains/py,public.ecr.aws/jetbrains/go
func (o DevEnvironmentIdesOutput) Runtime() pulumix.Output[*string] {
	return pulumix.Apply[DevEnvironmentIdes](o, func(v DevEnvironmentIdes) *string { return v.Runtime })
}

type DevEnvironmentPersistentStorage struct {
	// The size of the persistent storage in gigabytes (specifically GiB). Valid values for storage are based on memory sizes in 16GB increments. Valid values are 16, 32, and 64.
	Size int `pulumi:"size"`
}

type DevEnvironmentPersistentStorageArgs struct {
	// The size of the persistent storage in gigabytes (specifically GiB). Valid values for storage are based on memory sizes in 16GB increments. Valid values are 16, 32, and 64.
	Size pulumix.Input[int] `pulumi:"size"`
}

func (DevEnvironmentPersistentStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevEnvironmentPersistentStorage)(nil)).Elem()
}

func (i DevEnvironmentPersistentStorageArgs) ToDevEnvironmentPersistentStorageOutput() DevEnvironmentPersistentStorageOutput {
	return i.ToDevEnvironmentPersistentStorageOutputWithContext(context.Background())
}

func (i DevEnvironmentPersistentStorageArgs) ToDevEnvironmentPersistentStorageOutputWithContext(ctx context.Context) DevEnvironmentPersistentStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevEnvironmentPersistentStorageOutput)
}

func (i *DevEnvironmentPersistentStorageArgs) ToOutput(ctx context.Context) pulumix.Output[*DevEnvironmentPersistentStorageArgs] {
	return pulumix.Val(i)
}

type DevEnvironmentPersistentStorageOutput struct{ *pulumi.OutputState }

func (DevEnvironmentPersistentStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevEnvironmentPersistentStorage)(nil)).Elem()
}

func (o DevEnvironmentPersistentStorageOutput) ToDevEnvironmentPersistentStorageOutput() DevEnvironmentPersistentStorageOutput {
	return o
}

func (o DevEnvironmentPersistentStorageOutput) ToDevEnvironmentPersistentStorageOutputWithContext(ctx context.Context) DevEnvironmentPersistentStorageOutput {
	return o
}

func (o DevEnvironmentPersistentStorageOutput) ToOutput(ctx context.Context) pulumix.Output[DevEnvironmentPersistentStorage] {
	return pulumix.Output[DevEnvironmentPersistentStorage]{
		OutputState: o.OutputState,
	}
}

// The size of the persistent storage in gigabytes (specifically GiB). Valid values for storage are based on memory sizes in 16GB increments. Valid values are 16, 32, and 64.
func (o DevEnvironmentPersistentStorageOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[DevEnvironmentPersistentStorage](o, func(v DevEnvironmentPersistentStorage) int { return v.Size })
}

type DevEnvironmentRepository struct {
	// The name of the branch in a source repository.
	//
	// persistent storage (`  persistentStorage `) supports the following:
	BranchName *string `pulumi:"branchName"`
	// The name of the source repository.
	RepositoryName string `pulumi:"repositoryName"`
}

type DevEnvironmentRepositoryArgs struct {
	// The name of the branch in a source repository.
	//
	// persistent storage (`  persistentStorage `) supports the following:
	BranchName pulumix.Input[*string] `pulumi:"branchName"`
	// The name of the source repository.
	RepositoryName pulumix.Input[string] `pulumi:"repositoryName"`
}

func (DevEnvironmentRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevEnvironmentRepository)(nil)).Elem()
}

func (i DevEnvironmentRepositoryArgs) ToDevEnvironmentRepositoryOutput() DevEnvironmentRepositoryOutput {
	return i.ToDevEnvironmentRepositoryOutputWithContext(context.Background())
}

func (i DevEnvironmentRepositoryArgs) ToDevEnvironmentRepositoryOutputWithContext(ctx context.Context) DevEnvironmentRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevEnvironmentRepositoryOutput)
}

func (i *DevEnvironmentRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[*DevEnvironmentRepositoryArgs] {
	return pulumix.Val(i)
}

type DevEnvironmentRepositoryOutput struct{ *pulumi.OutputState }

func (DevEnvironmentRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevEnvironmentRepository)(nil)).Elem()
}

func (o DevEnvironmentRepositoryOutput) ToDevEnvironmentRepositoryOutput() DevEnvironmentRepositoryOutput {
	return o
}

func (o DevEnvironmentRepositoryOutput) ToDevEnvironmentRepositoryOutputWithContext(ctx context.Context) DevEnvironmentRepositoryOutput {
	return o
}

func (o DevEnvironmentRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[DevEnvironmentRepository] {
	return pulumix.Output[DevEnvironmentRepository]{
		OutputState: o.OutputState,
	}
}

// The name of the branch in a source repository.
//
// persistent storage (`  persistentStorage `) supports the following:
func (o DevEnvironmentRepositoryOutput) BranchName() pulumix.Output[*string] {
	return pulumix.Apply[DevEnvironmentRepository](o, func(v DevEnvironmentRepository) *string { return v.BranchName })
}

// The name of the source repository.
func (o DevEnvironmentRepositoryOutput) RepositoryName() pulumix.Output[string] {
	return pulumix.Apply[DevEnvironmentRepository](o, func(v DevEnvironmentRepository) string { return v.RepositoryName })
}

type GetDevEnvironmentIde struct {
	Name    string `pulumi:"name"`
	Runtime string `pulumi:"runtime"`
}

type GetDevEnvironmentIdeArgs struct {
	Name    pulumix.Input[string] `pulumi:"name"`
	Runtime pulumix.Input[string] `pulumi:"runtime"`
}

func (GetDevEnvironmentIdeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDevEnvironmentIde)(nil)).Elem()
}

func (i GetDevEnvironmentIdeArgs) ToGetDevEnvironmentIdeOutput() GetDevEnvironmentIdeOutput {
	return i.ToGetDevEnvironmentIdeOutputWithContext(context.Background())
}

func (i GetDevEnvironmentIdeArgs) ToGetDevEnvironmentIdeOutputWithContext(ctx context.Context) GetDevEnvironmentIdeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDevEnvironmentIdeOutput)
}

func (i *GetDevEnvironmentIdeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDevEnvironmentIdeArgs] {
	return pulumix.Val(i)
}

type GetDevEnvironmentIdeOutput struct{ *pulumi.OutputState }

func (GetDevEnvironmentIdeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDevEnvironmentIde)(nil)).Elem()
}

func (o GetDevEnvironmentIdeOutput) ToGetDevEnvironmentIdeOutput() GetDevEnvironmentIdeOutput {
	return o
}

func (o GetDevEnvironmentIdeOutput) ToGetDevEnvironmentIdeOutputWithContext(ctx context.Context) GetDevEnvironmentIdeOutput {
	return o
}

func (o GetDevEnvironmentIdeOutput) ToOutput(ctx context.Context) pulumix.Output[GetDevEnvironmentIde] {
	return pulumix.Output[GetDevEnvironmentIde]{
		OutputState: o.OutputState,
	}
}

func (o GetDevEnvironmentIdeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetDevEnvironmentIde](o, func(v GetDevEnvironmentIde) string { return v.Name })
}

func (o GetDevEnvironmentIdeOutput) Runtime() pulumix.Output[string] {
	return pulumix.Apply[GetDevEnvironmentIde](o, func(v GetDevEnvironmentIde) string { return v.Runtime })
}

type GetDevEnvironmentPersistentStorage struct {
	Size int `pulumi:"size"`
}

type GetDevEnvironmentPersistentStorageArgs struct {
	Size pulumix.Input[int] `pulumi:"size"`
}

func (GetDevEnvironmentPersistentStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDevEnvironmentPersistentStorage)(nil)).Elem()
}

func (i GetDevEnvironmentPersistentStorageArgs) ToGetDevEnvironmentPersistentStorageOutput() GetDevEnvironmentPersistentStorageOutput {
	return i.ToGetDevEnvironmentPersistentStorageOutputWithContext(context.Background())
}

func (i GetDevEnvironmentPersistentStorageArgs) ToGetDevEnvironmentPersistentStorageOutputWithContext(ctx context.Context) GetDevEnvironmentPersistentStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDevEnvironmentPersistentStorageOutput)
}

func (i *GetDevEnvironmentPersistentStorageArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDevEnvironmentPersistentStorageArgs] {
	return pulumix.Val(i)
}

type GetDevEnvironmentPersistentStorageOutput struct{ *pulumi.OutputState }

func (GetDevEnvironmentPersistentStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDevEnvironmentPersistentStorage)(nil)).Elem()
}

func (o GetDevEnvironmentPersistentStorageOutput) ToGetDevEnvironmentPersistentStorageOutput() GetDevEnvironmentPersistentStorageOutput {
	return o
}

func (o GetDevEnvironmentPersistentStorageOutput) ToGetDevEnvironmentPersistentStorageOutputWithContext(ctx context.Context) GetDevEnvironmentPersistentStorageOutput {
	return o
}

func (o GetDevEnvironmentPersistentStorageOutput) ToOutput(ctx context.Context) pulumix.Output[GetDevEnvironmentPersistentStorage] {
	return pulumix.Output[GetDevEnvironmentPersistentStorage]{
		OutputState: o.OutputState,
	}
}

func (o GetDevEnvironmentPersistentStorageOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[GetDevEnvironmentPersistentStorage](o, func(v GetDevEnvironmentPersistentStorage) int { return v.Size })
}

type GetDevEnvironmentRepository struct {
	BranchName     string `pulumi:"branchName"`
	RepositoryName string `pulumi:"repositoryName"`
}

type GetDevEnvironmentRepositoryArgs struct {
	BranchName     pulumix.Input[string] `pulumi:"branchName"`
	RepositoryName pulumix.Input[string] `pulumi:"repositoryName"`
}

func (GetDevEnvironmentRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDevEnvironmentRepository)(nil)).Elem()
}

func (i GetDevEnvironmentRepositoryArgs) ToGetDevEnvironmentRepositoryOutput() GetDevEnvironmentRepositoryOutput {
	return i.ToGetDevEnvironmentRepositoryOutputWithContext(context.Background())
}

func (i GetDevEnvironmentRepositoryArgs) ToGetDevEnvironmentRepositoryOutputWithContext(ctx context.Context) GetDevEnvironmentRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDevEnvironmentRepositoryOutput)
}

func (i *GetDevEnvironmentRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDevEnvironmentRepositoryArgs] {
	return pulumix.Val(i)
}

type GetDevEnvironmentRepositoryOutput struct{ *pulumi.OutputState }

func (GetDevEnvironmentRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDevEnvironmentRepository)(nil)).Elem()
}

func (o GetDevEnvironmentRepositoryOutput) ToGetDevEnvironmentRepositoryOutput() GetDevEnvironmentRepositoryOutput {
	return o
}

func (o GetDevEnvironmentRepositoryOutput) ToGetDevEnvironmentRepositoryOutputWithContext(ctx context.Context) GetDevEnvironmentRepositoryOutput {
	return o
}

func (o GetDevEnvironmentRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetDevEnvironmentRepository] {
	return pulumix.Output[GetDevEnvironmentRepository]{
		OutputState: o.OutputState,
	}
}

func (o GetDevEnvironmentRepositoryOutput) BranchName() pulumix.Output[string] {
	return pulumix.Apply[GetDevEnvironmentRepository](o, func(v GetDevEnvironmentRepository) string { return v.BranchName })
}

func (o GetDevEnvironmentRepositoryOutput) RepositoryName() pulumix.Output[string] {
	return pulumix.Apply[GetDevEnvironmentRepository](o, func(v GetDevEnvironmentRepository) string { return v.RepositoryName })
}

func init() {
	pulumi.RegisterOutputType(DevEnvironmentIdesOutput{})
	pulumi.RegisterOutputType(DevEnvironmentPersistentStorageOutput{})
	pulumi.RegisterOutputType(DevEnvironmentRepositoryOutput{})
	pulumi.RegisterOutputType(GetDevEnvironmentIdeOutput{})
	pulumi.RegisterOutputType(GetDevEnvironmentPersistentStorageOutput{})
	pulumi.RegisterOutputType(GetDevEnvironmentRepositoryOutput{})
}
