// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about an EKS add-on.
func LookupAddon(ctx *pulumi.Context, args *LookupAddonArgs, opts ...pulumi.InvokeOption) (*LookupAddonResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAddonResult
	err := ctx.Invoke("aws:eks/getAddon:getAddon", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAddon.
type LookupAddonArgs struct {
	// Name of the EKS add-on. The name must match one of
	// the names returned by [list-addon](https://docs.aws.amazon.com/cli/latest/reference/eks/list-addons.html).
	AddonName string `pulumi:"addonName"`
	// Name of the EKS Cluster. Must be between 1-100 characters in length. Must begin with an alphanumeric character, and must only contain alphanumeric characters, dashes and underscores (`^[0-9A-Za-z][A-Za-z0-9\-_]+$`).
	ClusterName string            `pulumi:"clusterName"`
	Tags        map[string]string `pulumi:"tags"`
}

// A collection of values returned by getAddon.
type LookupAddonResult struct {
	AddonName string `pulumi:"addonName"`
	// Version of EKS add-on.
	AddonVersion string `pulumi:"addonVersion"`
	// ARN of the EKS add-on.
	Arn         string `pulumi:"arn"`
	ClusterName string `pulumi:"clusterName"`
	// Configuration values for the addon with a single JSON string.
	ConfigurationValues string `pulumi:"configurationValues"`
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the EKS add-on was created.
	CreatedAt string `pulumi:"createdAt"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the EKS add-on was updated.
	ModifiedAt string `pulumi:"modifiedAt"`
	// ARN of IAM role used for EKS add-on. If value is empty -
	// then add-on uses the IAM role assigned to the EKS Cluster node.
	ServiceAccountRoleArn string            `pulumi:"serviceAccountRoleArn"`
	Tags                  map[string]string `pulumi:"tags"`
}

func LookupAddonOutput(ctx *pulumi.Context, args LookupAddonOutputArgs, opts ...pulumi.InvokeOption) LookupAddonResultOutput {
	outputResult := pulumix.ApplyErr[*LookupAddonArgs](args.ToOutput(), func(plainArgs *LookupAddonArgs) (*LookupAddonResult, error) {
		return LookupAddon(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupAddonResultOutput, *LookupAddonResult](outputResult)
}

// A collection of arguments for invoking getAddon.
type LookupAddonOutputArgs struct {
	// Name of the EKS add-on. The name must match one of
	// the names returned by [list-addon](https://docs.aws.amazon.com/cli/latest/reference/eks/list-addons.html).
	AddonName pulumix.Input[string] `pulumi:"addonName"`
	// Name of the EKS Cluster. Must be between 1-100 characters in length. Must begin with an alphanumeric character, and must only contain alphanumeric characters, dashes and underscores (`^[0-9A-Za-z][A-Za-z0-9\-_]+$`).
	ClusterName pulumix.Input[string]            `pulumi:"clusterName"`
	Tags        pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupAddonOutputArgs) ToOutput() pulumix.Output[*LookupAddonArgs] {
	allArgs := pulumix.All(
		args.AddonName.ToOutput(context.Background()).AsAny(),
		args.ClusterName.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupAddonArgs {
		return &LookupAddonArgs{
			AddonName:   resolvedArgs[0].(string),
			ClusterName: resolvedArgs[1].(string),
			Tags:        resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupAddonResultOutput struct{ *pulumi.OutputState }

func (LookupAddonResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAddonResult)(nil)).Elem()
}

func (o LookupAddonResultOutput) ToOutput(context.Context) pulumix.Output[*LookupAddonResult] {
	return pulumix.Output[*LookupAddonResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupAddonResultOutput) AddonName() pulumix.Output[string] {
	return pulumix.Apply[*LookupAddonResult](o, func(v *LookupAddonResult) string { return v.AddonName })
}

func (o LookupAddonResultOutput) AddonVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupAddonResult](o, func(v *LookupAddonResult) string { return v.AddonVersion })
}

func (o LookupAddonResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupAddonResult](o, func(v *LookupAddonResult) string { return v.Arn })
}

func (o LookupAddonResultOutput) ClusterName() pulumix.Output[string] {
	return pulumix.Apply[*LookupAddonResult](o, func(v *LookupAddonResult) string { return v.ClusterName })
}

func (o LookupAddonResultOutput) ConfigurationValues() pulumix.Output[string] {
	return pulumix.Apply[*LookupAddonResult](o, func(v *LookupAddonResult) string { return v.ConfigurationValues })
}

func (o LookupAddonResultOutput) CreatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupAddonResult](o, func(v *LookupAddonResult) string { return v.CreatedAt })
}

func (o LookupAddonResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupAddonResult](o, func(v *LookupAddonResult) string { return v.Id })
}

func (o LookupAddonResultOutput) ModifiedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupAddonResult](o, func(v *LookupAddonResult) string { return v.ModifiedAt })
}

func (o LookupAddonResultOutput) ServiceAccountRoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupAddonResult](o, func(v *LookupAddonResult) string { return v.ServiceAccountRoleArn })
}

func (o LookupAddonResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupAddonResult](o, func(v *LookupAddonResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
