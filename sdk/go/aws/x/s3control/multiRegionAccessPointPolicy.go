// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3control

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage an S3 Multi-Region Access Point access control policy.
type MultiRegionAccessPointPolicy struct {
	pulumi.CustomResourceState

	// The AWS account ID for the owner of the Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
	AccountId pulumix.Output[string] `pulumi:"accountId"`
	// A configuration block containing details about the policy for the Multi-Region Access Point. See Details Configuration Block below for more details
	Details pulumix.GPtrOutput[MultiRegionAccessPointPolicyDetails, MultiRegionAccessPointPolicyDetailsOutput] `pulumi:"details"`
	// The last established policy for the Multi-Region Access Point.
	Established pulumix.Output[string] `pulumi:"established"`
	// The proposed policy for the Multi-Region Access Point.
	Proposed pulumix.Output[string] `pulumi:"proposed"`
}

// NewMultiRegionAccessPointPolicy registers a new resource with the given unique name, arguments, and options.
func NewMultiRegionAccessPointPolicy(ctx *pulumi.Context,
	name string, args *MultiRegionAccessPointPolicyArgs, opts ...pulumi.ResourceOption) (*MultiRegionAccessPointPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Details == nil {
		return nil, errors.New("invalid value for required argument 'Details'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MultiRegionAccessPointPolicy
	err := ctx.RegisterResource("aws:s3control/multiRegionAccessPointPolicy:MultiRegionAccessPointPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMultiRegionAccessPointPolicy gets an existing MultiRegionAccessPointPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMultiRegionAccessPointPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MultiRegionAccessPointPolicyState, opts ...pulumi.ResourceOption) (*MultiRegionAccessPointPolicy, error) {
	var resource MultiRegionAccessPointPolicy
	err := ctx.ReadResource("aws:s3control/multiRegionAccessPointPolicy:MultiRegionAccessPointPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MultiRegionAccessPointPolicy resources.
type multiRegionAccessPointPolicyState struct {
	// The AWS account ID for the owner of the Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
	AccountId *string `pulumi:"accountId"`
	// A configuration block containing details about the policy for the Multi-Region Access Point. See Details Configuration Block below for more details
	Details *MultiRegionAccessPointPolicyDetails `pulumi:"details"`
	// The last established policy for the Multi-Region Access Point.
	Established *string `pulumi:"established"`
	// The proposed policy for the Multi-Region Access Point.
	Proposed *string `pulumi:"proposed"`
}

type MultiRegionAccessPointPolicyState struct {
	// The AWS account ID for the owner of the Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
	AccountId pulumix.Input[*string]
	// A configuration block containing details about the policy for the Multi-Region Access Point. See Details Configuration Block below for more details
	Details pulumix.Input[*MultiRegionAccessPointPolicyDetailsArgs]
	// The last established policy for the Multi-Region Access Point.
	Established pulumix.Input[*string]
	// The proposed policy for the Multi-Region Access Point.
	Proposed pulumix.Input[*string]
}

func (MultiRegionAccessPointPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*multiRegionAccessPointPolicyState)(nil)).Elem()
}

type multiRegionAccessPointPolicyArgs struct {
	// The AWS account ID for the owner of the Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
	AccountId *string `pulumi:"accountId"`
	// A configuration block containing details about the policy for the Multi-Region Access Point. See Details Configuration Block below for more details
	Details MultiRegionAccessPointPolicyDetails `pulumi:"details"`
}

// The set of arguments for constructing a MultiRegionAccessPointPolicy resource.
type MultiRegionAccessPointPolicyArgs struct {
	// The AWS account ID for the owner of the Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
	AccountId pulumix.Input[*string]
	// A configuration block containing details about the policy for the Multi-Region Access Point. See Details Configuration Block below for more details
	Details pulumix.Input[*MultiRegionAccessPointPolicyDetailsArgs]
}

func (MultiRegionAccessPointPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multiRegionAccessPointPolicyArgs)(nil)).Elem()
}

type MultiRegionAccessPointPolicyOutput struct{ *pulumi.OutputState }

func (MultiRegionAccessPointPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiRegionAccessPointPolicy)(nil)).Elem()
}

func (o MultiRegionAccessPointPolicyOutput) ToMultiRegionAccessPointPolicyOutput() MultiRegionAccessPointPolicyOutput {
	return o
}

func (o MultiRegionAccessPointPolicyOutput) ToMultiRegionAccessPointPolicyOutputWithContext(ctx context.Context) MultiRegionAccessPointPolicyOutput {
	return o
}

func (o MultiRegionAccessPointPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[MultiRegionAccessPointPolicy] {
	return pulumix.Output[MultiRegionAccessPointPolicy]{
		OutputState: o.OutputState,
	}
}

// The AWS account ID for the owner of the Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
func (o MultiRegionAccessPointPolicyOutput) AccountId() pulumix.Output[string] {
	value := pulumix.Apply[MultiRegionAccessPointPolicy](o, func(v MultiRegionAccessPointPolicy) pulumix.Output[string] { return v.AccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A configuration block containing details about the policy for the Multi-Region Access Point. See Details Configuration Block below for more details
func (o MultiRegionAccessPointPolicyOutput) Details() pulumix.GPtrOutput[MultiRegionAccessPointPolicyDetails, MultiRegionAccessPointPolicyDetailsOutput] {
	value := pulumix.Apply[MultiRegionAccessPointPolicy](o, func(v MultiRegionAccessPointPolicy) pulumix.GPtrOutput[MultiRegionAccessPointPolicyDetails, MultiRegionAccessPointPolicyDetailsOutput] {
		return v.Details
	})
	unwrapped := pulumix.Flatten[*MultiRegionAccessPointPolicyDetails, pulumix.GPtrOutput[MultiRegionAccessPointPolicyDetails, MultiRegionAccessPointPolicyDetailsOutput]](value)
	return pulumix.GPtrOutput[MultiRegionAccessPointPolicyDetails, MultiRegionAccessPointPolicyDetailsOutput]{OutputState: unwrapped.OutputState}
}

// The last established policy for the Multi-Region Access Point.
func (o MultiRegionAccessPointPolicyOutput) Established() pulumix.Output[string] {
	value := pulumix.Apply[MultiRegionAccessPointPolicy](o, func(v MultiRegionAccessPointPolicy) pulumix.Output[string] { return v.Established })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The proposed policy for the Multi-Region Access Point.
func (o MultiRegionAccessPointPolicyOutput) Proposed() pulumix.Output[string] {
	value := pulumix.Apply[MultiRegionAccessPointPolicy](o, func(v MultiRegionAccessPointPolicy) pulumix.Output[string] { return v.Proposed })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MultiRegionAccessPointPolicyOutput{})
}
