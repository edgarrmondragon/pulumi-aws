// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evidently

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type FeatureEvaluationRule struct {
	// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
	Name *string `pulumi:"name"`
	// This value is `aws.evidently.splits` if this is an evaluation rule for a launch, and it is `aws.evidently.onlineab` if this is an evaluation rule for an experiment.
	Type *string `pulumi:"type"`
}

type FeatureEvaluationRuleArgs struct {
	// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
	Name pulumix.Input[*string] `pulumi:"name"`
	// This value is `aws.evidently.splits` if this is an evaluation rule for a launch, and it is `aws.evidently.onlineab` if this is an evaluation rule for an experiment.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (FeatureEvaluationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureEvaluationRule)(nil)).Elem()
}

func (i FeatureEvaluationRuleArgs) ToFeatureEvaluationRuleOutput() FeatureEvaluationRuleOutput {
	return i.ToFeatureEvaluationRuleOutputWithContext(context.Background())
}

func (i FeatureEvaluationRuleArgs) ToFeatureEvaluationRuleOutputWithContext(ctx context.Context) FeatureEvaluationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureEvaluationRuleOutput)
}

func (i *FeatureEvaluationRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*FeatureEvaluationRuleArgs] {
	return pulumix.Val(i)
}

type FeatureEvaluationRuleOutput struct{ *pulumi.OutputState }

func (FeatureEvaluationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureEvaluationRule)(nil)).Elem()
}

func (o FeatureEvaluationRuleOutput) ToFeatureEvaluationRuleOutput() FeatureEvaluationRuleOutput {
	return o
}

func (o FeatureEvaluationRuleOutput) ToFeatureEvaluationRuleOutputWithContext(ctx context.Context) FeatureEvaluationRuleOutput {
	return o
}

func (o FeatureEvaluationRuleOutput) ToOutput(ctx context.Context) pulumix.Output[FeatureEvaluationRule] {
	return pulumix.Output[FeatureEvaluationRule]{
		OutputState: o.OutputState,
	}
}

// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
func (o FeatureEvaluationRuleOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[FeatureEvaluationRule](o, func(v FeatureEvaluationRule) *string { return v.Name })
}

// This value is `aws.evidently.splits` if this is an evaluation rule for a launch, and it is `aws.evidently.onlineab` if this is an evaluation rule for an experiment.
func (o FeatureEvaluationRuleOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[FeatureEvaluationRule](o, func(v FeatureEvaluationRule) *string { return v.Type })
}

type FeatureVariation struct {
	// The name of the variation. Minimum length of `1`. Maximum length of `127`.
	Name string `pulumi:"name"`
	// A block that specifies the value assigned to this variation. Detailed below
	Value FeatureVariationValue `pulumi:"value"`
}

type FeatureVariationArgs struct {
	// The name of the variation. Minimum length of `1`. Maximum length of `127`.
	Name pulumix.Input[string] `pulumi:"name"`
	// A block that specifies the value assigned to this variation. Detailed below
	Value pulumix.Input[*FeatureVariationValueArgs] `pulumi:"value"`
}

func (FeatureVariationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureVariation)(nil)).Elem()
}

func (i FeatureVariationArgs) ToFeatureVariationOutput() FeatureVariationOutput {
	return i.ToFeatureVariationOutputWithContext(context.Background())
}

func (i FeatureVariationArgs) ToFeatureVariationOutputWithContext(ctx context.Context) FeatureVariationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureVariationOutput)
}

func (i *FeatureVariationArgs) ToOutput(ctx context.Context) pulumix.Output[*FeatureVariationArgs] {
	return pulumix.Val(i)
}

type FeatureVariationOutput struct{ *pulumi.OutputState }

func (FeatureVariationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureVariation)(nil)).Elem()
}

func (o FeatureVariationOutput) ToFeatureVariationOutput() FeatureVariationOutput {
	return o
}

func (o FeatureVariationOutput) ToFeatureVariationOutputWithContext(ctx context.Context) FeatureVariationOutput {
	return o
}

func (o FeatureVariationOutput) ToOutput(ctx context.Context) pulumix.Output[FeatureVariation] {
	return pulumix.Output[FeatureVariation]{
		OutputState: o.OutputState,
	}
}

// The name of the variation. Minimum length of `1`. Maximum length of `127`.
func (o FeatureVariationOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[FeatureVariation](o, func(v FeatureVariation) string { return v.Name })
}

// A block that specifies the value assigned to this variation. Detailed below
func (o FeatureVariationOutput) Value() pulumix.GPtrOutput[FeatureVariationValue, FeatureVariationValueOutput] {
	value := pulumix.Apply[FeatureVariation](o, func(v FeatureVariation) FeatureVariationValue { return v.Value })
	return pulumix.GPtrOutput[FeatureVariationValue, FeatureVariationValueOutput]{OutputState: value.OutputState}
}

type FeatureVariationValue struct {
	// If this feature uses the Boolean variation type, this field contains the Boolean value of this variation.
	BoolValue *string `pulumi:"boolValue"`
	// If this feature uses the double integer variation type, this field contains the double integer value of this variation.
	DoubleValue *string `pulumi:"doubleValue"`
	// If this feature uses the long variation type, this field contains the long value of this variation. Minimum value of `-9007199254740991`. Maximum value of `9007199254740991`.
	LongValue *string `pulumi:"longValue"`
	// If this feature uses the string variation type, this field contains the string value of this variation. Minimum length of `0`. Maximum length of `512`.
	StringValue *string `pulumi:"stringValue"`
}

type FeatureVariationValueArgs struct {
	// If this feature uses the Boolean variation type, this field contains the Boolean value of this variation.
	BoolValue pulumix.Input[*string] `pulumi:"boolValue"`
	// If this feature uses the double integer variation type, this field contains the double integer value of this variation.
	DoubleValue pulumix.Input[*string] `pulumi:"doubleValue"`
	// If this feature uses the long variation type, this field contains the long value of this variation. Minimum value of `-9007199254740991`. Maximum value of `9007199254740991`.
	LongValue pulumix.Input[*string] `pulumi:"longValue"`
	// If this feature uses the string variation type, this field contains the string value of this variation. Minimum length of `0`. Maximum length of `512`.
	StringValue pulumix.Input[*string] `pulumi:"stringValue"`
}

func (FeatureVariationValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureVariationValue)(nil)).Elem()
}

func (i FeatureVariationValueArgs) ToFeatureVariationValueOutput() FeatureVariationValueOutput {
	return i.ToFeatureVariationValueOutputWithContext(context.Background())
}

func (i FeatureVariationValueArgs) ToFeatureVariationValueOutputWithContext(ctx context.Context) FeatureVariationValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureVariationValueOutput)
}

func (i *FeatureVariationValueArgs) ToOutput(ctx context.Context) pulumix.Output[*FeatureVariationValueArgs] {
	return pulumix.Val(i)
}

type FeatureVariationValueOutput struct{ *pulumi.OutputState }

func (FeatureVariationValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureVariationValue)(nil)).Elem()
}

func (o FeatureVariationValueOutput) ToFeatureVariationValueOutput() FeatureVariationValueOutput {
	return o
}

func (o FeatureVariationValueOutput) ToFeatureVariationValueOutputWithContext(ctx context.Context) FeatureVariationValueOutput {
	return o
}

func (o FeatureVariationValueOutput) ToOutput(ctx context.Context) pulumix.Output[FeatureVariationValue] {
	return pulumix.Output[FeatureVariationValue]{
		OutputState: o.OutputState,
	}
}

// If this feature uses the Boolean variation type, this field contains the Boolean value of this variation.
func (o FeatureVariationValueOutput) BoolValue() pulumix.Output[*string] {
	return pulumix.Apply[FeatureVariationValue](o, func(v FeatureVariationValue) *string { return v.BoolValue })
}

// If this feature uses the double integer variation type, this field contains the double integer value of this variation.
func (o FeatureVariationValueOutput) DoubleValue() pulumix.Output[*string] {
	return pulumix.Apply[FeatureVariationValue](o, func(v FeatureVariationValue) *string { return v.DoubleValue })
}

// If this feature uses the long variation type, this field contains the long value of this variation. Minimum value of `-9007199254740991`. Maximum value of `9007199254740991`.
func (o FeatureVariationValueOutput) LongValue() pulumix.Output[*string] {
	return pulumix.Apply[FeatureVariationValue](o, func(v FeatureVariationValue) *string { return v.LongValue })
}

// If this feature uses the string variation type, this field contains the string value of this variation. Minimum length of `0`. Maximum length of `512`.
func (o FeatureVariationValueOutput) StringValue() pulumix.Output[*string] {
	return pulumix.Apply[FeatureVariationValue](o, func(v FeatureVariationValue) *string { return v.StringValue })
}

type LaunchExecution struct {
	// The date and time that the launch ended.
	EndedTime *string `pulumi:"endedTime"`
	// The date and time that the launch started.
	StartedTime *string `pulumi:"startedTime"`
}

type LaunchExecutionArgs struct {
	// The date and time that the launch ended.
	EndedTime pulumix.Input[*string] `pulumi:"endedTime"`
	// The date and time that the launch started.
	StartedTime pulumix.Input[*string] `pulumi:"startedTime"`
}

func (LaunchExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchExecution)(nil)).Elem()
}

func (i LaunchExecutionArgs) ToLaunchExecutionOutput() LaunchExecutionOutput {
	return i.ToLaunchExecutionOutputWithContext(context.Background())
}

func (i LaunchExecutionArgs) ToLaunchExecutionOutputWithContext(ctx context.Context) LaunchExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchExecutionOutput)
}

func (i *LaunchExecutionArgs) ToOutput(ctx context.Context) pulumix.Output[*LaunchExecutionArgs] {
	return pulumix.Val(i)
}

type LaunchExecutionOutput struct{ *pulumi.OutputState }

func (LaunchExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchExecution)(nil)).Elem()
}

func (o LaunchExecutionOutput) ToLaunchExecutionOutput() LaunchExecutionOutput {
	return o
}

func (o LaunchExecutionOutput) ToLaunchExecutionOutputWithContext(ctx context.Context) LaunchExecutionOutput {
	return o
}

func (o LaunchExecutionOutput) ToOutput(ctx context.Context) pulumix.Output[LaunchExecution] {
	return pulumix.Output[LaunchExecution]{
		OutputState: o.OutputState,
	}
}

// The date and time that the launch ended.
func (o LaunchExecutionOutput) EndedTime() pulumix.Output[*string] {
	return pulumix.Apply[LaunchExecution](o, func(v LaunchExecution) *string { return v.EndedTime })
}

// The date and time that the launch started.
func (o LaunchExecutionOutput) StartedTime() pulumix.Output[*string] {
	return pulumix.Apply[LaunchExecution](o, func(v LaunchExecution) *string { return v.StartedTime })
}

type LaunchGroup struct {
	// Specifies the description of the launch group.
	Description *string `pulumi:"description"`
	// Specifies the name of the feature that the launch is using.
	Feature string `pulumi:"feature"`
	// Specifies the name of the lahnch group.
	Name string `pulumi:"name"`
	// Specifies the feature variation to use for this launch group.
	Variation string `pulumi:"variation"`
}

type LaunchGroupArgs struct {
	// Specifies the description of the launch group.
	Description pulumix.Input[*string] `pulumi:"description"`
	// Specifies the name of the feature that the launch is using.
	Feature pulumix.Input[string] `pulumi:"feature"`
	// Specifies the name of the lahnch group.
	Name pulumix.Input[string] `pulumi:"name"`
	// Specifies the feature variation to use for this launch group.
	Variation pulumix.Input[string] `pulumi:"variation"`
}

func (LaunchGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchGroup)(nil)).Elem()
}

func (i LaunchGroupArgs) ToLaunchGroupOutput() LaunchGroupOutput {
	return i.ToLaunchGroupOutputWithContext(context.Background())
}

func (i LaunchGroupArgs) ToLaunchGroupOutputWithContext(ctx context.Context) LaunchGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchGroupOutput)
}

func (i *LaunchGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*LaunchGroupArgs] {
	return pulumix.Val(i)
}

type LaunchGroupOutput struct{ *pulumi.OutputState }

func (LaunchGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchGroup)(nil)).Elem()
}

func (o LaunchGroupOutput) ToLaunchGroupOutput() LaunchGroupOutput {
	return o
}

func (o LaunchGroupOutput) ToLaunchGroupOutputWithContext(ctx context.Context) LaunchGroupOutput {
	return o
}

func (o LaunchGroupOutput) ToOutput(ctx context.Context) pulumix.Output[LaunchGroup] {
	return pulumix.Output[LaunchGroup]{
		OutputState: o.OutputState,
	}
}

// Specifies the description of the launch group.
func (o LaunchGroupOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[LaunchGroup](o, func(v LaunchGroup) *string { return v.Description })
}

// Specifies the name of the feature that the launch is using.
func (o LaunchGroupOutput) Feature() pulumix.Output[string] {
	return pulumix.Apply[LaunchGroup](o, func(v LaunchGroup) string { return v.Feature })
}

// Specifies the name of the lahnch group.
func (o LaunchGroupOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[LaunchGroup](o, func(v LaunchGroup) string { return v.Name })
}

// Specifies the feature variation to use for this launch group.
func (o LaunchGroupOutput) Variation() pulumix.Output[string] {
	return pulumix.Apply[LaunchGroup](o, func(v LaunchGroup) string { return v.Variation })
}

type LaunchMetricMonitor struct {
	// A block that defines the metric. Detailed below.
	MetricDefinition LaunchMetricMonitorMetricDefinition `pulumi:"metricDefinition"`
}

type LaunchMetricMonitorArgs struct {
	// A block that defines the metric. Detailed below.
	MetricDefinition pulumix.Input[*LaunchMetricMonitorMetricDefinitionArgs] `pulumi:"metricDefinition"`
}

func (LaunchMetricMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchMetricMonitor)(nil)).Elem()
}

func (i LaunchMetricMonitorArgs) ToLaunchMetricMonitorOutput() LaunchMetricMonitorOutput {
	return i.ToLaunchMetricMonitorOutputWithContext(context.Background())
}

func (i LaunchMetricMonitorArgs) ToLaunchMetricMonitorOutputWithContext(ctx context.Context) LaunchMetricMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchMetricMonitorOutput)
}

func (i *LaunchMetricMonitorArgs) ToOutput(ctx context.Context) pulumix.Output[*LaunchMetricMonitorArgs] {
	return pulumix.Val(i)
}

type LaunchMetricMonitorOutput struct{ *pulumi.OutputState }

func (LaunchMetricMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchMetricMonitor)(nil)).Elem()
}

func (o LaunchMetricMonitorOutput) ToLaunchMetricMonitorOutput() LaunchMetricMonitorOutput {
	return o
}

func (o LaunchMetricMonitorOutput) ToLaunchMetricMonitorOutputWithContext(ctx context.Context) LaunchMetricMonitorOutput {
	return o
}

func (o LaunchMetricMonitorOutput) ToOutput(ctx context.Context) pulumix.Output[LaunchMetricMonitor] {
	return pulumix.Output[LaunchMetricMonitor]{
		OutputState: o.OutputState,
	}
}

// A block that defines the metric. Detailed below.
func (o LaunchMetricMonitorOutput) MetricDefinition() pulumix.GPtrOutput[LaunchMetricMonitorMetricDefinition, LaunchMetricMonitorMetricDefinitionOutput] {
	value := pulumix.Apply[LaunchMetricMonitor](o, func(v LaunchMetricMonitor) LaunchMetricMonitorMetricDefinition { return v.MetricDefinition })
	return pulumix.GPtrOutput[LaunchMetricMonitorMetricDefinition, LaunchMetricMonitorMetricDefinitionOutput]{OutputState: value.OutputState}
}

type LaunchMetricMonitorMetricDefinition struct {
	// Specifies the entity, such as a user or session, that does an action that causes a metric value to be recorded. An example is `userDetails.userID`.
	EntityIdKey string `pulumi:"entityIdKey"`
	// Specifies The EventBridge event pattern that defines how the metric is recorded.
	EventPattern *string `pulumi:"eventPattern"`
	// Specifies the name for the metric.
	Name string `pulumi:"name"`
	// Specifies a label for the units that the metric is measuring.
	UnitLabel *string `pulumi:"unitLabel"`
	// Specifies the value that is tracked to produce the metric.
	ValueKey string `pulumi:"valueKey"`
}

type LaunchMetricMonitorMetricDefinitionArgs struct {
	// Specifies the entity, such as a user or session, that does an action that causes a metric value to be recorded. An example is `userDetails.userID`.
	EntityIdKey pulumix.Input[string] `pulumi:"entityIdKey"`
	// Specifies The EventBridge event pattern that defines how the metric is recorded.
	EventPattern pulumix.Input[*string] `pulumi:"eventPattern"`
	// Specifies the name for the metric.
	Name pulumix.Input[string] `pulumi:"name"`
	// Specifies a label for the units that the metric is measuring.
	UnitLabel pulumix.Input[*string] `pulumi:"unitLabel"`
	// Specifies the value that is tracked to produce the metric.
	ValueKey pulumix.Input[string] `pulumi:"valueKey"`
}

func (LaunchMetricMonitorMetricDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchMetricMonitorMetricDefinition)(nil)).Elem()
}

func (i LaunchMetricMonitorMetricDefinitionArgs) ToLaunchMetricMonitorMetricDefinitionOutput() LaunchMetricMonitorMetricDefinitionOutput {
	return i.ToLaunchMetricMonitorMetricDefinitionOutputWithContext(context.Background())
}

func (i LaunchMetricMonitorMetricDefinitionArgs) ToLaunchMetricMonitorMetricDefinitionOutputWithContext(ctx context.Context) LaunchMetricMonitorMetricDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchMetricMonitorMetricDefinitionOutput)
}

func (i *LaunchMetricMonitorMetricDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[*LaunchMetricMonitorMetricDefinitionArgs] {
	return pulumix.Val(i)
}

type LaunchMetricMonitorMetricDefinitionOutput struct{ *pulumi.OutputState }

func (LaunchMetricMonitorMetricDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchMetricMonitorMetricDefinition)(nil)).Elem()
}

func (o LaunchMetricMonitorMetricDefinitionOutput) ToLaunchMetricMonitorMetricDefinitionOutput() LaunchMetricMonitorMetricDefinitionOutput {
	return o
}

func (o LaunchMetricMonitorMetricDefinitionOutput) ToLaunchMetricMonitorMetricDefinitionOutputWithContext(ctx context.Context) LaunchMetricMonitorMetricDefinitionOutput {
	return o
}

func (o LaunchMetricMonitorMetricDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[LaunchMetricMonitorMetricDefinition] {
	return pulumix.Output[LaunchMetricMonitorMetricDefinition]{
		OutputState: o.OutputState,
	}
}

// Specifies the entity, such as a user or session, that does an action that causes a metric value to be recorded. An example is `userDetails.userID`.
func (o LaunchMetricMonitorMetricDefinitionOutput) EntityIdKey() pulumix.Output[string] {
	return pulumix.Apply[LaunchMetricMonitorMetricDefinition](o, func(v LaunchMetricMonitorMetricDefinition) string { return v.EntityIdKey })
}

// Specifies The EventBridge event pattern that defines how the metric is recorded.
func (o LaunchMetricMonitorMetricDefinitionOutput) EventPattern() pulumix.Output[*string] {
	return pulumix.Apply[LaunchMetricMonitorMetricDefinition](o, func(v LaunchMetricMonitorMetricDefinition) *string { return v.EventPattern })
}

// Specifies the name for the metric.
func (o LaunchMetricMonitorMetricDefinitionOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[LaunchMetricMonitorMetricDefinition](o, func(v LaunchMetricMonitorMetricDefinition) string { return v.Name })
}

// Specifies a label for the units that the metric is measuring.
func (o LaunchMetricMonitorMetricDefinitionOutput) UnitLabel() pulumix.Output[*string] {
	return pulumix.Apply[LaunchMetricMonitorMetricDefinition](o, func(v LaunchMetricMonitorMetricDefinition) *string { return v.UnitLabel })
}

// Specifies the value that is tracked to produce the metric.
func (o LaunchMetricMonitorMetricDefinitionOutput) ValueKey() pulumix.Output[string] {
	return pulumix.Apply[LaunchMetricMonitorMetricDefinition](o, func(v LaunchMetricMonitorMetricDefinition) string { return v.ValueKey })
}

type LaunchScheduledSplitsConfig struct {
	// One or up to six blocks that define the traffic allocation percentages among the feature variations during each step of the launch. This also defines the start time of each step. Detailed below.
	Steps []LaunchScheduledSplitsConfigStep `pulumi:"steps"`
}

type LaunchScheduledSplitsConfigArgs struct {
	// One or up to six blocks that define the traffic allocation percentages among the feature variations during each step of the launch. This also defines the start time of each step. Detailed below.
	Steps pulumix.Input[[]*LaunchScheduledSplitsConfigStepArgs] `pulumi:"steps"`
}

func (LaunchScheduledSplitsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchScheduledSplitsConfig)(nil)).Elem()
}

func (i LaunchScheduledSplitsConfigArgs) ToLaunchScheduledSplitsConfigOutput() LaunchScheduledSplitsConfigOutput {
	return i.ToLaunchScheduledSplitsConfigOutputWithContext(context.Background())
}

func (i LaunchScheduledSplitsConfigArgs) ToLaunchScheduledSplitsConfigOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchScheduledSplitsConfigOutput)
}

func (i *LaunchScheduledSplitsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*LaunchScheduledSplitsConfigArgs] {
	return pulumix.Val(i)
}

type LaunchScheduledSplitsConfigOutput struct{ *pulumi.OutputState }

func (LaunchScheduledSplitsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchScheduledSplitsConfig)(nil)).Elem()
}

func (o LaunchScheduledSplitsConfigOutput) ToLaunchScheduledSplitsConfigOutput() LaunchScheduledSplitsConfigOutput {
	return o
}

func (o LaunchScheduledSplitsConfigOutput) ToLaunchScheduledSplitsConfigOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigOutput {
	return o
}

func (o LaunchScheduledSplitsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[LaunchScheduledSplitsConfig] {
	return pulumix.Output[LaunchScheduledSplitsConfig]{
		OutputState: o.OutputState,
	}
}

// One or up to six blocks that define the traffic allocation percentages among the feature variations during each step of the launch. This also defines the start time of each step. Detailed below.
func (o LaunchScheduledSplitsConfigOutput) Steps() pulumix.GArrayOutput[LaunchScheduledSplitsConfigStep, LaunchScheduledSplitsConfigStepOutput] {
	value := pulumix.Apply[LaunchScheduledSplitsConfig](o, func(v LaunchScheduledSplitsConfig) []LaunchScheduledSplitsConfigStep { return v.Steps })
	return pulumix.GArrayOutput[LaunchScheduledSplitsConfigStep, LaunchScheduledSplitsConfigStepOutput]{OutputState: value.OutputState}
}

type LaunchScheduledSplitsConfigStep struct {
	// The traffic allocation percentages among the feature variations during one step of a launch. This is a set of key-value pairs. The keys are variation names. The values represent the percentage of traffic to allocate to that variation during this step. For more information, refer to the [AWS documentation for ScheduledSplitConfig groupWeights](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ScheduledSplitConfig.html).
	GroupWeights map[string]int `pulumi:"groupWeights"`
	// One or up to six blocks that specify different traffic splits for one or more audience segments. A segment is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users, users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects, such as age. Detailed below.
	SegmentOverrides []LaunchScheduledSplitsConfigStepSegmentOverride `pulumi:"segmentOverrides"`
	// Specifies the date and time that this step of the launch starts.
	StartTime string `pulumi:"startTime"`
}

type LaunchScheduledSplitsConfigStepArgs struct {
	// The traffic allocation percentages among the feature variations during one step of a launch. This is a set of key-value pairs. The keys are variation names. The values represent the percentage of traffic to allocate to that variation during this step. For more information, refer to the [AWS documentation for ScheduledSplitConfig groupWeights](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ScheduledSplitConfig.html).
	GroupWeights pulumix.Input[map[string]int] `pulumi:"groupWeights"`
	// One or up to six blocks that specify different traffic splits for one or more audience segments. A segment is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users, users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects, such as age. Detailed below.
	SegmentOverrides pulumix.Input[[]*LaunchScheduledSplitsConfigStepSegmentOverrideArgs] `pulumi:"segmentOverrides"`
	// Specifies the date and time that this step of the launch starts.
	StartTime pulumix.Input[string] `pulumi:"startTime"`
}

func (LaunchScheduledSplitsConfigStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchScheduledSplitsConfigStep)(nil)).Elem()
}

func (i LaunchScheduledSplitsConfigStepArgs) ToLaunchScheduledSplitsConfigStepOutput() LaunchScheduledSplitsConfigStepOutput {
	return i.ToLaunchScheduledSplitsConfigStepOutputWithContext(context.Background())
}

func (i LaunchScheduledSplitsConfigStepArgs) ToLaunchScheduledSplitsConfigStepOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchScheduledSplitsConfigStepOutput)
}

func (i *LaunchScheduledSplitsConfigStepArgs) ToOutput(ctx context.Context) pulumix.Output[*LaunchScheduledSplitsConfigStepArgs] {
	return pulumix.Val(i)
}

type LaunchScheduledSplitsConfigStepOutput struct{ *pulumi.OutputState }

func (LaunchScheduledSplitsConfigStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchScheduledSplitsConfigStep)(nil)).Elem()
}

func (o LaunchScheduledSplitsConfigStepOutput) ToLaunchScheduledSplitsConfigStepOutput() LaunchScheduledSplitsConfigStepOutput {
	return o
}

func (o LaunchScheduledSplitsConfigStepOutput) ToLaunchScheduledSplitsConfigStepOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigStepOutput {
	return o
}

func (o LaunchScheduledSplitsConfigStepOutput) ToOutput(ctx context.Context) pulumix.Output[LaunchScheduledSplitsConfigStep] {
	return pulumix.Output[LaunchScheduledSplitsConfigStep]{
		OutputState: o.OutputState,
	}
}

// The traffic allocation percentages among the feature variations during one step of a launch. This is a set of key-value pairs. The keys are variation names. The values represent the percentage of traffic to allocate to that variation during this step. For more information, refer to the [AWS documentation for ScheduledSplitConfig groupWeights](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ScheduledSplitConfig.html).
func (o LaunchScheduledSplitsConfigStepOutput) GroupWeights() pulumix.MapOutput[int] {
	value := pulumix.Apply[LaunchScheduledSplitsConfigStep](o, func(v LaunchScheduledSplitsConfigStep) map[string]int { return v.GroupWeights })
	return pulumix.MapOutput[int]{OutputState: value.OutputState}
}

// One or up to six blocks that specify different traffic splits for one or more audience segments. A segment is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users, users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects, such as age. Detailed below.
func (o LaunchScheduledSplitsConfigStepOutput) SegmentOverrides() pulumix.GArrayOutput[LaunchScheduledSplitsConfigStepSegmentOverride, LaunchScheduledSplitsConfigStepSegmentOverrideOutput] {
	value := pulumix.Apply[LaunchScheduledSplitsConfigStep](o, func(v LaunchScheduledSplitsConfigStep) []LaunchScheduledSplitsConfigStepSegmentOverride {
		return v.SegmentOverrides
	})
	return pulumix.GArrayOutput[LaunchScheduledSplitsConfigStepSegmentOverride, LaunchScheduledSplitsConfigStepSegmentOverrideOutput]{OutputState: value.OutputState}
}

// Specifies the date and time that this step of the launch starts.
func (o LaunchScheduledSplitsConfigStepOutput) StartTime() pulumix.Output[string] {
	return pulumix.Apply[LaunchScheduledSplitsConfigStep](o, func(v LaunchScheduledSplitsConfigStep) string { return v.StartTime })
}

type LaunchScheduledSplitsConfigStepSegmentOverride struct {
	// Specifies a number indicating the order to use to evaluate segment overrides, if there are more than one. Segment overrides with lower numbers are evaluated first.
	EvaluationOrder int `pulumi:"evaluationOrder"`
	// The name or ARN of the segment to use.
	Segment string `pulumi:"segment"`
	// The traffic allocation percentages among the feature variations to assign to this segment. This is a set of key-value pairs. The keys are variation names. The values represent the amount of traffic to allocate to that variation for this segment. This is expressed in thousandths of a percent, so a weight of 50000 represents 50% of traffic.
	Weights map[string]int `pulumi:"weights"`
}

type LaunchScheduledSplitsConfigStepSegmentOverrideArgs struct {
	// Specifies a number indicating the order to use to evaluate segment overrides, if there are more than one. Segment overrides with lower numbers are evaluated first.
	EvaluationOrder pulumix.Input[int] `pulumi:"evaluationOrder"`
	// The name or ARN of the segment to use.
	Segment pulumix.Input[string] `pulumi:"segment"`
	// The traffic allocation percentages among the feature variations to assign to this segment. This is a set of key-value pairs. The keys are variation names. The values represent the amount of traffic to allocate to that variation for this segment. This is expressed in thousandths of a percent, so a weight of 50000 represents 50% of traffic.
	Weights pulumix.Input[map[string]int] `pulumi:"weights"`
}

func (LaunchScheduledSplitsConfigStepSegmentOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchScheduledSplitsConfigStepSegmentOverride)(nil)).Elem()
}

func (i LaunchScheduledSplitsConfigStepSegmentOverrideArgs) ToLaunchScheduledSplitsConfigStepSegmentOverrideOutput() LaunchScheduledSplitsConfigStepSegmentOverrideOutput {
	return i.ToLaunchScheduledSplitsConfigStepSegmentOverrideOutputWithContext(context.Background())
}

func (i LaunchScheduledSplitsConfigStepSegmentOverrideArgs) ToLaunchScheduledSplitsConfigStepSegmentOverrideOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigStepSegmentOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchScheduledSplitsConfigStepSegmentOverrideOutput)
}

func (i *LaunchScheduledSplitsConfigStepSegmentOverrideArgs) ToOutput(ctx context.Context) pulumix.Output[*LaunchScheduledSplitsConfigStepSegmentOverrideArgs] {
	return pulumix.Val(i)
}

type LaunchScheduledSplitsConfigStepSegmentOverrideOutput struct{ *pulumi.OutputState }

func (LaunchScheduledSplitsConfigStepSegmentOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchScheduledSplitsConfigStepSegmentOverride)(nil)).Elem()
}

func (o LaunchScheduledSplitsConfigStepSegmentOverrideOutput) ToLaunchScheduledSplitsConfigStepSegmentOverrideOutput() LaunchScheduledSplitsConfigStepSegmentOverrideOutput {
	return o
}

func (o LaunchScheduledSplitsConfigStepSegmentOverrideOutput) ToLaunchScheduledSplitsConfigStepSegmentOverrideOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigStepSegmentOverrideOutput {
	return o
}

func (o LaunchScheduledSplitsConfigStepSegmentOverrideOutput) ToOutput(ctx context.Context) pulumix.Output[LaunchScheduledSplitsConfigStepSegmentOverride] {
	return pulumix.Output[LaunchScheduledSplitsConfigStepSegmentOverride]{
		OutputState: o.OutputState,
	}
}

// Specifies a number indicating the order to use to evaluate segment overrides, if there are more than one. Segment overrides with lower numbers are evaluated first.
func (o LaunchScheduledSplitsConfigStepSegmentOverrideOutput) EvaluationOrder() pulumix.Output[int] {
	return pulumix.Apply[LaunchScheduledSplitsConfigStepSegmentOverride](o, func(v LaunchScheduledSplitsConfigStepSegmentOverride) int { return v.EvaluationOrder })
}

// The name or ARN of the segment to use.
func (o LaunchScheduledSplitsConfigStepSegmentOverrideOutput) Segment() pulumix.Output[string] {
	return pulumix.Apply[LaunchScheduledSplitsConfigStepSegmentOverride](o, func(v LaunchScheduledSplitsConfigStepSegmentOverride) string { return v.Segment })
}

// The traffic allocation percentages among the feature variations to assign to this segment. This is a set of key-value pairs. The keys are variation names. The values represent the amount of traffic to allocate to that variation for this segment. This is expressed in thousandths of a percent, so a weight of 50000 represents 50% of traffic.
func (o LaunchScheduledSplitsConfigStepSegmentOverrideOutput) Weights() pulumix.MapOutput[int] {
	value := pulumix.Apply[LaunchScheduledSplitsConfigStepSegmentOverride](o, func(v LaunchScheduledSplitsConfigStepSegmentOverride) map[string]int { return v.Weights })
	return pulumix.MapOutput[int]{OutputState: value.OutputState}
}

type ProjectDataDelivery struct {
	// A block that defines the CloudWatch Log Group that stores the evaluation events. See below.
	CloudwatchLogs *ProjectDataDeliveryCloudwatchLogs `pulumi:"cloudwatchLogs"`
	// A block that defines the S3 bucket and prefix that stores the evaluation events. See below.
	S3Destination *ProjectDataDeliveryS3Destination `pulumi:"s3Destination"`
}

type ProjectDataDeliveryArgs struct {
	// A block that defines the CloudWatch Log Group that stores the evaluation events. See below.
	CloudwatchLogs pulumix.Input[*ProjectDataDeliveryCloudwatchLogsArgs] `pulumi:"cloudwatchLogs"`
	// A block that defines the S3 bucket and prefix that stores the evaluation events. See below.
	S3Destination pulumix.Input[*ProjectDataDeliveryS3DestinationArgs] `pulumi:"s3Destination"`
}

func (ProjectDataDeliveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDelivery)(nil)).Elem()
}

func (i ProjectDataDeliveryArgs) ToProjectDataDeliveryOutput() ProjectDataDeliveryOutput {
	return i.ToProjectDataDeliveryOutputWithContext(context.Background())
}

func (i ProjectDataDeliveryArgs) ToProjectDataDeliveryOutputWithContext(ctx context.Context) ProjectDataDeliveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryOutput)
}

func (i *ProjectDataDeliveryArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectDataDeliveryArgs] {
	return pulumix.Val(i)
}

type ProjectDataDeliveryOutput struct{ *pulumi.OutputState }

func (ProjectDataDeliveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDelivery)(nil)).Elem()
}

func (o ProjectDataDeliveryOutput) ToProjectDataDeliveryOutput() ProjectDataDeliveryOutput {
	return o
}

func (o ProjectDataDeliveryOutput) ToProjectDataDeliveryOutputWithContext(ctx context.Context) ProjectDataDeliveryOutput {
	return o
}

func (o ProjectDataDeliveryOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectDataDelivery] {
	return pulumix.Output[ProjectDataDelivery]{
		OutputState: o.OutputState,
	}
}

// A block that defines the CloudWatch Log Group that stores the evaluation events. See below.
func (o ProjectDataDeliveryOutput) CloudwatchLogs() pulumix.GPtrOutput[ProjectDataDeliveryCloudwatchLogs, ProjectDataDeliveryCloudwatchLogsOutput] {
	value := pulumix.Apply[ProjectDataDelivery](o, func(v ProjectDataDelivery) *ProjectDataDeliveryCloudwatchLogs { return v.CloudwatchLogs })
	return pulumix.GPtrOutput[ProjectDataDeliveryCloudwatchLogs, ProjectDataDeliveryCloudwatchLogsOutput]{OutputState: value.OutputState}
}

// A block that defines the S3 bucket and prefix that stores the evaluation events. See below.
func (o ProjectDataDeliveryOutput) S3Destination() pulumix.GPtrOutput[ProjectDataDeliveryS3Destination, ProjectDataDeliveryS3DestinationOutput] {
	value := pulumix.Apply[ProjectDataDelivery](o, func(v ProjectDataDelivery) *ProjectDataDeliveryS3Destination { return v.S3Destination })
	return pulumix.GPtrOutput[ProjectDataDeliveryS3Destination, ProjectDataDeliveryS3DestinationOutput]{OutputState: value.OutputState}
}

type ProjectDataDeliveryCloudwatchLogs struct {
	// The name of the log group where the project stores evaluation events.
	//
	// The `s3Destination` block supports the following arguments:
	LogGroup *string `pulumi:"logGroup"`
}

type ProjectDataDeliveryCloudwatchLogsArgs struct {
	// The name of the log group where the project stores evaluation events.
	//
	// The `s3Destination` block supports the following arguments:
	LogGroup pulumix.Input[*string] `pulumi:"logGroup"`
}

func (ProjectDataDeliveryCloudwatchLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDeliveryCloudwatchLogs)(nil)).Elem()
}

func (i ProjectDataDeliveryCloudwatchLogsArgs) ToProjectDataDeliveryCloudwatchLogsOutput() ProjectDataDeliveryCloudwatchLogsOutput {
	return i.ToProjectDataDeliveryCloudwatchLogsOutputWithContext(context.Background())
}

func (i ProjectDataDeliveryCloudwatchLogsArgs) ToProjectDataDeliveryCloudwatchLogsOutputWithContext(ctx context.Context) ProjectDataDeliveryCloudwatchLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryCloudwatchLogsOutput)
}

func (i *ProjectDataDeliveryCloudwatchLogsArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectDataDeliveryCloudwatchLogsArgs] {
	return pulumix.Val(i)
}

type ProjectDataDeliveryCloudwatchLogsOutput struct{ *pulumi.OutputState }

func (ProjectDataDeliveryCloudwatchLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDeliveryCloudwatchLogs)(nil)).Elem()
}

func (o ProjectDataDeliveryCloudwatchLogsOutput) ToProjectDataDeliveryCloudwatchLogsOutput() ProjectDataDeliveryCloudwatchLogsOutput {
	return o
}

func (o ProjectDataDeliveryCloudwatchLogsOutput) ToProjectDataDeliveryCloudwatchLogsOutputWithContext(ctx context.Context) ProjectDataDeliveryCloudwatchLogsOutput {
	return o
}

func (o ProjectDataDeliveryCloudwatchLogsOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectDataDeliveryCloudwatchLogs] {
	return pulumix.Output[ProjectDataDeliveryCloudwatchLogs]{
		OutputState: o.OutputState,
	}
}

// The name of the log group where the project stores evaluation events.
//
// The `s3Destination` block supports the following arguments:
func (o ProjectDataDeliveryCloudwatchLogsOutput) LogGroup() pulumix.Output[*string] {
	return pulumix.Apply[ProjectDataDeliveryCloudwatchLogs](o, func(v ProjectDataDeliveryCloudwatchLogs) *string { return v.LogGroup })
}

type ProjectDataDeliveryS3Destination struct {
	// The name of the bucket in which Evidently stores evaluation events.
	Bucket *string `pulumi:"bucket"`
	// The bucket prefix in which Evidently stores evaluation events.
	Prefix *string `pulumi:"prefix"`
}

type ProjectDataDeliveryS3DestinationArgs struct {
	// The name of the bucket in which Evidently stores evaluation events.
	Bucket pulumix.Input[*string] `pulumi:"bucket"`
	// The bucket prefix in which Evidently stores evaluation events.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
}

func (ProjectDataDeliveryS3DestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDeliveryS3Destination)(nil)).Elem()
}

func (i ProjectDataDeliveryS3DestinationArgs) ToProjectDataDeliveryS3DestinationOutput() ProjectDataDeliveryS3DestinationOutput {
	return i.ToProjectDataDeliveryS3DestinationOutputWithContext(context.Background())
}

func (i ProjectDataDeliveryS3DestinationArgs) ToProjectDataDeliveryS3DestinationOutputWithContext(ctx context.Context) ProjectDataDeliveryS3DestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryS3DestinationOutput)
}

func (i *ProjectDataDeliveryS3DestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectDataDeliveryS3DestinationArgs] {
	return pulumix.Val(i)
}

type ProjectDataDeliveryS3DestinationOutput struct{ *pulumi.OutputState }

func (ProjectDataDeliveryS3DestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDeliveryS3Destination)(nil)).Elem()
}

func (o ProjectDataDeliveryS3DestinationOutput) ToProjectDataDeliveryS3DestinationOutput() ProjectDataDeliveryS3DestinationOutput {
	return o
}

func (o ProjectDataDeliveryS3DestinationOutput) ToProjectDataDeliveryS3DestinationOutputWithContext(ctx context.Context) ProjectDataDeliveryS3DestinationOutput {
	return o
}

func (o ProjectDataDeliveryS3DestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectDataDeliveryS3Destination] {
	return pulumix.Output[ProjectDataDeliveryS3Destination]{
		OutputState: o.OutputState,
	}
}

// The name of the bucket in which Evidently stores evaluation events.
func (o ProjectDataDeliveryS3DestinationOutput) Bucket() pulumix.Output[*string] {
	return pulumix.Apply[ProjectDataDeliveryS3Destination](o, func(v ProjectDataDeliveryS3Destination) *string { return v.Bucket })
}

// The bucket prefix in which Evidently stores evaluation events.
func (o ProjectDataDeliveryS3DestinationOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[ProjectDataDeliveryS3Destination](o, func(v ProjectDataDeliveryS3Destination) *string { return v.Prefix })
}

func init() {
	pulumi.RegisterOutputType(FeatureEvaluationRuleOutput{})
	pulumi.RegisterOutputType(FeatureVariationOutput{})
	pulumi.RegisterOutputType(FeatureVariationValueOutput{})
	pulumi.RegisterOutputType(LaunchExecutionOutput{})
	pulumi.RegisterOutputType(LaunchGroupOutput{})
	pulumi.RegisterOutputType(LaunchMetricMonitorOutput{})
	pulumi.RegisterOutputType(LaunchMetricMonitorMetricDefinitionOutput{})
	pulumi.RegisterOutputType(LaunchScheduledSplitsConfigOutput{})
	pulumi.RegisterOutputType(LaunchScheduledSplitsConfigStepOutput{})
	pulumi.RegisterOutputType(LaunchScheduledSplitsConfigStepSegmentOverrideOutput{})
	pulumi.RegisterOutputType(ProjectDataDeliveryOutput{})
	pulumi.RegisterOutputType(ProjectDataDeliveryCloudwatchLogsOutput{})
	pulumi.RegisterOutputType(ProjectDataDeliveryS3DestinationOutput{})
}
