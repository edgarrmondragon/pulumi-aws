// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information for multiple EC2 Local Gateways, such as their identifiers.
func GetLocalGateways(ctx *pulumi.Context, args *GetLocalGatewaysArgs, opts ...pulumi.InvokeOption) (*GetLocalGatewaysResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLocalGatewaysResult
	err := ctx.Invoke("aws:ec2/getLocalGateways:getLocalGateways", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLocalGateways.
type GetLocalGatewaysArgs struct {
	// Custom filter block as described below.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Filters []GetLocalGatewaysFilter `pulumi:"filters"`
	// Mapping of tags, each pair of which must exactly match
	// a pair on the desired local_gateways.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getLocalGateways.
type GetLocalGatewaysResult struct {
	Filters []GetLocalGatewaysFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Set of all the Local Gateway identifiers
	Ids  []string          `pulumi:"ids"`
	Tags map[string]string `pulumi:"tags"`
}

func GetLocalGatewaysOutput(ctx *pulumi.Context, args GetLocalGatewaysOutputArgs, opts ...pulumi.InvokeOption) GetLocalGatewaysResultOutput {
	outputResult := pulumix.ApplyErr[*GetLocalGatewaysArgs](args.ToOutput(), func(plainArgs *GetLocalGatewaysArgs) (*GetLocalGatewaysResult, error) {
		return GetLocalGateways(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetLocalGatewaysResultOutput, *GetLocalGatewaysResult](outputResult)
}

// A collection of arguments for invoking getLocalGateways.
type GetLocalGatewaysOutputArgs struct {
	// Custom filter block as described below.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Filters pulumix.Input[[]*GetLocalGatewaysFilterArgs] `pulumi:"filters"`
	// Mapping of tags, each pair of which must exactly match
	// a pair on the desired local_gateways.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetLocalGatewaysOutputArgs) ToOutput() pulumix.Output[*GetLocalGatewaysArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetLocalGatewaysArgs {
		return &GetLocalGatewaysArgs{
			Filters: resolvedArgs[0].([]GetLocalGatewaysFilter),
			Tags:    resolvedArgs[1].(map[string]string),
		}
	})
}

type GetLocalGatewaysResultOutput struct{ *pulumi.OutputState }

func (GetLocalGatewaysResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLocalGatewaysResult)(nil)).Elem()
}

func (o GetLocalGatewaysResultOutput) ToOutput(context.Context) pulumix.Output[*GetLocalGatewaysResult] {
	return pulumix.Output[*GetLocalGatewaysResult]{
		OutputState: o.OutputState,
	}
}

func (o GetLocalGatewaysResultOutput) Filters() pulumix.GArrayOutput[GetLocalGatewaysFilter, GetLocalGatewaysFilterOutput] {
	value := pulumix.Apply[*GetLocalGatewaysResult](o, func(v *GetLocalGatewaysResult) []GetLocalGatewaysFilter { return v.Filters })
	return pulumix.GArrayOutput[GetLocalGatewaysFilter, GetLocalGatewaysFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetLocalGatewaysResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetLocalGatewaysResult](o, func(v *GetLocalGatewaysResult) string { return v.Id })
}

func (o GetLocalGatewaysResultOutput) Ids() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetLocalGatewaysResult](o, func(v *GetLocalGatewaysResult) []string { return v.Ids })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetLocalGatewaysResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetLocalGatewaysResult](o, func(v *GetLocalGatewaysResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
