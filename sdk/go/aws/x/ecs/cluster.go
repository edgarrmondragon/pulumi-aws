// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an ECS cluster.
type Cluster struct {
	pulumi.CustomResourceState

	// ARN that identifies the cluster.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The execute command configuration for the cluster. Detailed below.
	Configuration pulumix.GPtrOutput[ClusterConfiguration, ClusterConfigurationOutput] `pulumi:"configuration"`
	// Name of the cluster (up to 255 letters, numbers, hyphens, and underscores)
	Name pulumix.Output[string] `pulumi:"name"`
	// Configures a default Service Connect namespace. Detailed below.
	ServiceConnectDefaults pulumix.GPtrOutput[ClusterServiceConnectDefaults, ClusterServiceConnectDefaultsOutput] `pulumi:"serviceConnectDefaults"`
	// Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. Detailed below.
	Settings pulumix.GArrayOutput[ClusterSetting, ClusterSettingOutput] `pulumi:"settings"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		args = &ClusterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("aws:ecs/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws:ecs/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// ARN that identifies the cluster.
	Arn *string `pulumi:"arn"`
	// The execute command configuration for the cluster. Detailed below.
	Configuration *ClusterConfiguration `pulumi:"configuration"`
	// Name of the cluster (up to 255 letters, numbers, hyphens, and underscores)
	Name *string `pulumi:"name"`
	// Configures a default Service Connect namespace. Detailed below.
	ServiceConnectDefaults *ClusterServiceConnectDefaults `pulumi:"serviceConnectDefaults"`
	// Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. Detailed below.
	Settings []ClusterSetting `pulumi:"settings"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ClusterState struct {
	// ARN that identifies the cluster.
	Arn pulumix.Input[*string]
	// The execute command configuration for the cluster. Detailed below.
	Configuration pulumix.Input[*ClusterConfigurationArgs]
	// Name of the cluster (up to 255 letters, numbers, hyphens, and underscores)
	Name pulumix.Input[*string]
	// Configures a default Service Connect namespace. Detailed below.
	ServiceConnectDefaults pulumix.Input[*ClusterServiceConnectDefaultsArgs]
	// Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. Detailed below.
	Settings pulumix.Input[[]*ClusterSettingArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// The execute command configuration for the cluster. Detailed below.
	Configuration *ClusterConfiguration `pulumi:"configuration"`
	// Name of the cluster (up to 255 letters, numbers, hyphens, and underscores)
	Name *string `pulumi:"name"`
	// Configures a default Service Connect namespace. Detailed below.
	ServiceConnectDefaults *ClusterServiceConnectDefaults `pulumi:"serviceConnectDefaults"`
	// Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. Detailed below.
	Settings []ClusterSetting `pulumi:"settings"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The execute command configuration for the cluster. Detailed below.
	Configuration pulumix.Input[*ClusterConfigurationArgs]
	// Name of the cluster (up to 255 letters, numbers, hyphens, and underscores)
	Name pulumix.Input[*string]
	// Configures a default Service Connect namespace. Detailed below.
	ServiceConnectDefaults pulumix.Input[*ClusterServiceConnectDefaultsArgs]
	// Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. Detailed below.
	Settings pulumix.Input[[]*ClusterSettingArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) ToOutput(ctx context.Context) pulumix.Output[Cluster] {
	return pulumix.Output[Cluster]{
		OutputState: o.OutputState,
	}
}

// ARN that identifies the cluster.
func (o ClusterOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The execute command configuration for the cluster. Detailed below.
func (o ClusterOutput) Configuration() pulumix.GPtrOutput[ClusterConfiguration, ClusterConfigurationOutput] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.GPtrOutput[ClusterConfiguration, ClusterConfigurationOutput] {
		return v.Configuration
	})
	unwrapped := pulumix.Flatten[*ClusterConfiguration, pulumix.GPtrOutput[ClusterConfiguration, ClusterConfigurationOutput]](value)
	return pulumix.GPtrOutput[ClusterConfiguration, ClusterConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Name of the cluster (up to 255 letters, numbers, hyphens, and underscores)
func (o ClusterOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configures a default Service Connect namespace. Detailed below.
func (o ClusterOutput) ServiceConnectDefaults() pulumix.GPtrOutput[ClusterServiceConnectDefaults, ClusterServiceConnectDefaultsOutput] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.GPtrOutput[ClusterServiceConnectDefaults, ClusterServiceConnectDefaultsOutput] {
		return v.ServiceConnectDefaults
	})
	unwrapped := pulumix.Flatten[*ClusterServiceConnectDefaults, pulumix.GPtrOutput[ClusterServiceConnectDefaults, ClusterServiceConnectDefaultsOutput]](value)
	return pulumix.GPtrOutput[ClusterServiceConnectDefaults, ClusterServiceConnectDefaultsOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. Detailed below.
func (o ClusterOutput) Settings() pulumix.GArrayOutput[ClusterSetting, ClusterSettingOutput] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.GArrayOutput[ClusterSetting, ClusterSettingOutput] { return v.Settings })
	unwrapped := pulumix.Flatten[[]ClusterSetting, pulumix.GArrayOutput[ClusterSetting, ClusterSettingOutput]](value)
	return pulumix.GArrayOutput[ClusterSetting, ClusterSettingOutput]{OutputState: unwrapped.OutputState}
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ClusterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ClusterOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ClusterOutput{})
}
