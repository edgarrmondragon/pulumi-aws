// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The VPC Endpoint Service data source details about a specific service that
// can be specified when creating a VPC endpoint within the region configured in the provider.
func LookupVpcEndpointService(ctx *pulumi.Context, args *LookupVpcEndpointServiceArgs, opts ...pulumi.InvokeOption) (*LookupVpcEndpointServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpcEndpointServiceResult
	err := ctx.Invoke("aws:ec2/getVpcEndpointService:getVpcEndpointService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcEndpointService.
type LookupVpcEndpointServiceArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters []GetVpcEndpointServiceFilter `pulumi:"filters"`
	// Common name of an AWS service (e.g., `s3`).
	Service *string `pulumi:"service"`
	// Service name that is specified when creating a VPC endpoint. For AWS services the service name is usually in the form `com.amazonaws.<region>.<service>` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.<region>.notebook`).
	ServiceName *string `pulumi:"serviceName"`
	// Service type, `Gateway` or `Interface`.
	ServiceType *string `pulumi:"serviceType"`
	// Map of tags, each pair of which must exactly match a pair on the desired VPC Endpoint Service.
	//
	// > **NOTE:** Specifying `service` will not work for non-AWS services or AWS services that don't follow the standard `serviceName` pattern of `com.amazonaws.<region>.<service>`.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getVpcEndpointService.
type LookupVpcEndpointServiceResult struct {
	// Whether or not VPC endpoint connection requests to the service must be accepted by the service owner - `true` or `false`.
	AcceptanceRequired bool `pulumi:"acceptanceRequired"`
	// ARN of the VPC endpoint service.
	Arn string `pulumi:"arn"`
	// Availability Zones in which the service is available.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The DNS names for the service.
	BaseEndpointDnsNames []string                      `pulumi:"baseEndpointDnsNames"`
	Filters              []GetVpcEndpointServiceFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether or not the service manages its VPC endpoints - `true` or `false`.
	ManagesVpcEndpoints bool `pulumi:"managesVpcEndpoints"`
	// AWS account ID of the service owner or `amazon`.
	Owner string `pulumi:"owner"`
	// Private DNS name for the service.
	PrivateDnsName string  `pulumi:"privateDnsName"`
	Service        *string `pulumi:"service"`
	// ID of the endpoint service.
	ServiceId   string `pulumi:"serviceId"`
	ServiceName string `pulumi:"serviceName"`
	ServiceType string `pulumi:"serviceType"`
	// The supported IP address types.
	SupportedIpAddressTypes []string `pulumi:"supportedIpAddressTypes"`
	// Map of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Whether or not the service supports endpoint policies - `true` or `false`.
	VpcEndpointPolicySupported bool `pulumi:"vpcEndpointPolicySupported"`
}

func LookupVpcEndpointServiceOutput(ctx *pulumi.Context, args LookupVpcEndpointServiceOutputArgs, opts ...pulumi.InvokeOption) LookupVpcEndpointServiceResultOutput {
	outputResult := pulumix.ApplyErr[*LookupVpcEndpointServiceArgs](args.ToOutput(), func(plainArgs *LookupVpcEndpointServiceArgs) (*LookupVpcEndpointServiceResult, error) {
		return LookupVpcEndpointService(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupVpcEndpointServiceResultOutput, *LookupVpcEndpointServiceResult](outputResult)
}

// A collection of arguments for invoking getVpcEndpointService.
type LookupVpcEndpointServiceOutputArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters pulumix.Input[[]*GetVpcEndpointServiceFilterArgs] `pulumi:"filters"`
	// Common name of an AWS service (e.g., `s3`).
	Service pulumix.Input[*string] `pulumi:"service"`
	// Service name that is specified when creating a VPC endpoint. For AWS services the service name is usually in the form `com.amazonaws.<region>.<service>` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.<region>.notebook`).
	ServiceName pulumix.Input[*string] `pulumi:"serviceName"`
	// Service type, `Gateway` or `Interface`.
	ServiceType pulumix.Input[*string] `pulumi:"serviceType"`
	// Map of tags, each pair of which must exactly match a pair on the desired VPC Endpoint Service.
	//
	// > **NOTE:** Specifying `service` will not work for non-AWS services or AWS services that don't follow the standard `serviceName` pattern of `com.amazonaws.<region>.<service>`.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupVpcEndpointServiceOutputArgs) ToOutput() pulumix.Output[*LookupVpcEndpointServiceArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Service.ToOutput(context.Background()).AsAny(),
		args.ServiceName.ToOutput(context.Background()).AsAny(),
		args.ServiceType.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupVpcEndpointServiceArgs {
		return &LookupVpcEndpointServiceArgs{
			Filters:     resolvedArgs[0].([]GetVpcEndpointServiceFilter),
			Service:     resolvedArgs[1].(*string),
			ServiceName: resolvedArgs[2].(*string),
			ServiceType: resolvedArgs[3].(*string),
			Tags:        resolvedArgs[4].(map[string]string),
		}
	})
}

type LookupVpcEndpointServiceResultOutput struct{ *pulumi.OutputState }

func (LookupVpcEndpointServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcEndpointServiceResult)(nil)).Elem()
}

func (o LookupVpcEndpointServiceResultOutput) ToOutput(context.Context) pulumix.Output[*LookupVpcEndpointServiceResult] {
	return pulumix.Output[*LookupVpcEndpointServiceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVpcEndpointServiceResultOutput) AcceptanceRequired() pulumix.Output[bool] {
	return pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) bool { return v.AcceptanceRequired })
}

func (o LookupVpcEndpointServiceResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) string { return v.Arn })
}

func (o LookupVpcEndpointServiceResultOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) []string { return v.AvailabilityZones })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcEndpointServiceResultOutput) BaseEndpointDnsNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) []string { return v.BaseEndpointDnsNames })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcEndpointServiceResultOutput) Filters() pulumix.GArrayOutput[GetVpcEndpointServiceFilter, GetVpcEndpointServiceFilterOutput] {
	value := pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) []GetVpcEndpointServiceFilter { return v.Filters })
	return pulumix.GArrayOutput[GetVpcEndpointServiceFilter, GetVpcEndpointServiceFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcEndpointServiceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) string { return v.Id })
}

func (o LookupVpcEndpointServiceResultOutput) ManagesVpcEndpoints() pulumix.Output[bool] {
	return pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) bool { return v.ManagesVpcEndpoints })
}

func (o LookupVpcEndpointServiceResultOutput) Owner() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) string { return v.Owner })
}

func (o LookupVpcEndpointServiceResultOutput) PrivateDnsName() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) string { return v.PrivateDnsName })
}

func (o LookupVpcEndpointServiceResultOutput) Service() pulumix.Output[*string] {
	return pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) *string { return v.Service })
}

func (o LookupVpcEndpointServiceResultOutput) ServiceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) string { return v.ServiceId })
}

func (o LookupVpcEndpointServiceResultOutput) ServiceName() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) string { return v.ServiceName })
}

func (o LookupVpcEndpointServiceResultOutput) ServiceType() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) string { return v.ServiceType })
}

func (o LookupVpcEndpointServiceResultOutput) SupportedIpAddressTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) []string { return v.SupportedIpAddressTypes })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcEndpointServiceResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcEndpointServiceResultOutput) VpcEndpointPolicySupported() pulumix.Output[bool] {
	return pulumix.Apply[*LookupVpcEndpointServiceResult](o, func(v *LookupVpcEndpointServiceResult) bool { return v.VpcEndpointPolicySupported })
}
