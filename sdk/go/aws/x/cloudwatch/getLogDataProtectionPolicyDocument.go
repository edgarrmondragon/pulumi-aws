// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Generates a CloudWatch Log Group Data Protection Policy document in JSON format for use with the `cloudwatch.LogDataProtectionPolicy` resource.
//
// > For more information about data protection policies, see the [Help protect sensitive log data with masking](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data.html).
func GetLogDataProtectionPolicyDocument(ctx *pulumi.Context, args *GetLogDataProtectionPolicyDocumentArgs, opts ...pulumi.InvokeOption) (*GetLogDataProtectionPolicyDocumentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLogDataProtectionPolicyDocumentResult
	err := ctx.Invoke("aws:cloudwatch/getLogDataProtectionPolicyDocument:getLogDataProtectionPolicyDocument", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLogDataProtectionPolicyDocument.
type GetLogDataProtectionPolicyDocumentArgs struct {
	Description *string `pulumi:"description"`
	// The name of the data protection policy document.
	Name string `pulumi:"name"`
	// Configures the data protection policy.
	//
	// > There must be exactly two statements: the first with an `audit` operation, and the second with a `deidentify` operation.
	//
	// The following arguments are optional:
	Statements []GetLogDataProtectionPolicyDocumentStatement `pulumi:"statements"`
	Version    *string                                       `pulumi:"version"`
}

// A collection of values returned by getLogDataProtectionPolicyDocument.
type GetLogDataProtectionPolicyDocumentResult struct {
	Description *string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Standard JSON policy document rendered based on the arguments above.
	Json       string                                        `pulumi:"json"`
	Name       string                                        `pulumi:"name"`
	Statements []GetLogDataProtectionPolicyDocumentStatement `pulumi:"statements"`
	Version    *string                                       `pulumi:"version"`
}

func GetLogDataProtectionPolicyDocumentOutput(ctx *pulumi.Context, args GetLogDataProtectionPolicyDocumentOutputArgs, opts ...pulumi.InvokeOption) GetLogDataProtectionPolicyDocumentResultOutput {
	outputResult := pulumix.ApplyErr[*GetLogDataProtectionPolicyDocumentArgs](args.ToOutput(), func(plainArgs *GetLogDataProtectionPolicyDocumentArgs) (*GetLogDataProtectionPolicyDocumentResult, error) {
		return GetLogDataProtectionPolicyDocument(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetLogDataProtectionPolicyDocumentResultOutput, *GetLogDataProtectionPolicyDocumentResult](outputResult)
}

// A collection of arguments for invoking getLogDataProtectionPolicyDocument.
type GetLogDataProtectionPolicyDocumentOutputArgs struct {
	Description pulumix.Input[*string] `pulumi:"description"`
	// The name of the data protection policy document.
	Name pulumix.Input[string] `pulumi:"name"`
	// Configures the data protection policy.
	//
	// > There must be exactly two statements: the first with an `audit` operation, and the second with a `deidentify` operation.
	//
	// The following arguments are optional:
	Statements pulumix.Input[[]*GetLogDataProtectionPolicyDocumentStatementArgs] `pulumi:"statements"`
	Version    pulumix.Input[*string]                                            `pulumi:"version"`
}

func (args GetLogDataProtectionPolicyDocumentOutputArgs) ToOutput() pulumix.Output[*GetLogDataProtectionPolicyDocumentArgs] {
	allArgs := pulumix.All(
		args.Description.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Statements.ToOutput(context.Background()).AsAny(),
		args.Version.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetLogDataProtectionPolicyDocumentArgs {
		return &GetLogDataProtectionPolicyDocumentArgs{
			Description: resolvedArgs[0].(*string),
			Name:        resolvedArgs[1].(string),
			Statements:  resolvedArgs[2].([]GetLogDataProtectionPolicyDocumentStatement),
			Version:     resolvedArgs[3].(*string),
		}
	})
}

type GetLogDataProtectionPolicyDocumentResultOutput struct{ *pulumi.OutputState }

func (GetLogDataProtectionPolicyDocumentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentResult)(nil)).Elem()
}

func (o GetLogDataProtectionPolicyDocumentResultOutput) ToOutput(context.Context) pulumix.Output[*GetLogDataProtectionPolicyDocumentResult] {
	return pulumix.Output[*GetLogDataProtectionPolicyDocumentResult]{
		OutputState: o.OutputState,
	}
}

func (o GetLogDataProtectionPolicyDocumentResultOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[*GetLogDataProtectionPolicyDocumentResult](o, func(v *GetLogDataProtectionPolicyDocumentResult) *string { return v.Description })
}

func (o GetLogDataProtectionPolicyDocumentResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetLogDataProtectionPolicyDocumentResult](o, func(v *GetLogDataProtectionPolicyDocumentResult) string { return v.Id })
}

func (o GetLogDataProtectionPolicyDocumentResultOutput) Json() pulumix.Output[string] {
	return pulumix.Apply[*GetLogDataProtectionPolicyDocumentResult](o, func(v *GetLogDataProtectionPolicyDocumentResult) string { return v.Json })
}

func (o GetLogDataProtectionPolicyDocumentResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*GetLogDataProtectionPolicyDocumentResult](o, func(v *GetLogDataProtectionPolicyDocumentResult) string { return v.Name })
}

func (o GetLogDataProtectionPolicyDocumentResultOutput) Statements() pulumix.GArrayOutput[GetLogDataProtectionPolicyDocumentStatement, GetLogDataProtectionPolicyDocumentStatementOutput] {
	value := pulumix.Apply[*GetLogDataProtectionPolicyDocumentResult](o, func(v *GetLogDataProtectionPolicyDocumentResult) []GetLogDataProtectionPolicyDocumentStatement {
		return v.Statements
	})
	return pulumix.GArrayOutput[GetLogDataProtectionPolicyDocumentStatement, GetLogDataProtectionPolicyDocumentStatementOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetLogDataProtectionPolicyDocumentResultOutput) Version() pulumix.Output[*string] {
	return pulumix.Apply[*GetLogDataProtectionPolicyDocumentResult](o, func(v *GetLogDataProtectionPolicyDocumentResult) *string { return v.Version })
}
