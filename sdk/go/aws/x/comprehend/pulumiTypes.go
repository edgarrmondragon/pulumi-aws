// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package comprehend

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type DocumentClassifierInputDataConfig struct {
	// List of training datasets produced by Amazon SageMaker Ground Truth.
	// Used if `dataFormat` is `AUGMENTED_MANIFEST`.
	// See the `augmentedManifests` Configuration Block section below.
	AugmentedManifests []DocumentClassifierInputDataConfigAugmentedManifest `pulumi:"augmentedManifests"`
	// The format for the training data.
	// One of `COMPREHEND_CSV` or `AUGMENTED_MANIFEST`.
	DataFormat *string `pulumi:"dataFormat"`
	// Delimiter between labels when training a multi-label classifier.
	// Valid values are `|`, `~`, `!`, `@`, `#`, `$`, `%`, `^`, `*`, `-`, `_`, `+`, `=`, `\`, `:`, `;`, `>`, `?`, `/`, `<space>`, and `<tab>`.
	// Default is `|`.
	LabelDelimiter *string `pulumi:"labelDelimiter"`
	// Location of training documents.
	// Used if `dataFormat` is `COMPREHEND_CSV`.
	S3Uri     *string `pulumi:"s3Uri"`
	TestS3Uri *string `pulumi:"testS3Uri"`
}

type DocumentClassifierInputDataConfigArgs struct {
	// List of training datasets produced by Amazon SageMaker Ground Truth.
	// Used if `dataFormat` is `AUGMENTED_MANIFEST`.
	// See the `augmentedManifests` Configuration Block section below.
	AugmentedManifests pulumix.Input[[]*DocumentClassifierInputDataConfigAugmentedManifestArgs] `pulumi:"augmentedManifests"`
	// The format for the training data.
	// One of `COMPREHEND_CSV` or `AUGMENTED_MANIFEST`.
	DataFormat pulumix.Input[*string] `pulumi:"dataFormat"`
	// Delimiter between labels when training a multi-label classifier.
	// Valid values are `|`, `~`, `!`, `@`, `#`, `$`, `%`, `^`, `*`, `-`, `_`, `+`, `=`, `\`, `:`, `;`, `>`, `?`, `/`, `<space>`, and `<tab>`.
	// Default is `|`.
	LabelDelimiter pulumix.Input[*string] `pulumi:"labelDelimiter"`
	// Location of training documents.
	// Used if `dataFormat` is `COMPREHEND_CSV`.
	S3Uri     pulumix.Input[*string] `pulumi:"s3Uri"`
	TestS3Uri pulumix.Input[*string] `pulumi:"testS3Uri"`
}

func (DocumentClassifierInputDataConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentClassifierInputDataConfig)(nil)).Elem()
}

func (i DocumentClassifierInputDataConfigArgs) ToDocumentClassifierInputDataConfigOutput() DocumentClassifierInputDataConfigOutput {
	return i.ToDocumentClassifierInputDataConfigOutputWithContext(context.Background())
}

func (i DocumentClassifierInputDataConfigArgs) ToDocumentClassifierInputDataConfigOutputWithContext(ctx context.Context) DocumentClassifierInputDataConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentClassifierInputDataConfigOutput)
}

func (i *DocumentClassifierInputDataConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DocumentClassifierInputDataConfigArgs] {
	return pulumix.Val(i)
}

type DocumentClassifierInputDataConfigOutput struct{ *pulumi.OutputState }

func (DocumentClassifierInputDataConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentClassifierInputDataConfig)(nil)).Elem()
}

func (o DocumentClassifierInputDataConfigOutput) ToDocumentClassifierInputDataConfigOutput() DocumentClassifierInputDataConfigOutput {
	return o
}

func (o DocumentClassifierInputDataConfigOutput) ToDocumentClassifierInputDataConfigOutputWithContext(ctx context.Context) DocumentClassifierInputDataConfigOutput {
	return o
}

func (o DocumentClassifierInputDataConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DocumentClassifierInputDataConfig] {
	return pulumix.Output[DocumentClassifierInputDataConfig]{
		OutputState: o.OutputState,
	}
}

// List of training datasets produced by Amazon SageMaker Ground Truth.
// Used if `dataFormat` is `AUGMENTED_MANIFEST`.
// See the `augmentedManifests` Configuration Block section below.
func (o DocumentClassifierInputDataConfigOutput) AugmentedManifests() pulumix.GArrayOutput[DocumentClassifierInputDataConfigAugmentedManifest, DocumentClassifierInputDataConfigAugmentedManifestOutput] {
	value := pulumix.Apply[DocumentClassifierInputDataConfig](o, func(v DocumentClassifierInputDataConfig) []DocumentClassifierInputDataConfigAugmentedManifest {
		return v.AugmentedManifests
	})
	return pulumix.GArrayOutput[DocumentClassifierInputDataConfigAugmentedManifest, DocumentClassifierInputDataConfigAugmentedManifestOutput]{OutputState: value.OutputState}
}

// The format for the training data.
// One of `COMPREHEND_CSV` or `AUGMENTED_MANIFEST`.
func (o DocumentClassifierInputDataConfigOutput) DataFormat() pulumix.Output[*string] {
	return pulumix.Apply[DocumentClassifierInputDataConfig](o, func(v DocumentClassifierInputDataConfig) *string { return v.DataFormat })
}

// Delimiter between labels when training a multi-label classifier.
// Valid values are `|`, `~`, `!`, `@`, `#`, `$`, `%`, `^`, `*`, `-`, `_`, `+`, `=`, `\`, `:`, `;`, `>`, `?`, `/`, `<space>`, and `<tab>`.
// Default is `|`.
func (o DocumentClassifierInputDataConfigOutput) LabelDelimiter() pulumix.Output[*string] {
	return pulumix.Apply[DocumentClassifierInputDataConfig](o, func(v DocumentClassifierInputDataConfig) *string { return v.LabelDelimiter })
}

// Location of training documents.
// Used if `dataFormat` is `COMPREHEND_CSV`.
func (o DocumentClassifierInputDataConfigOutput) S3Uri() pulumix.Output[*string] {
	return pulumix.Apply[DocumentClassifierInputDataConfig](o, func(v DocumentClassifierInputDataConfig) *string { return v.S3Uri })
}

func (o DocumentClassifierInputDataConfigOutput) TestS3Uri() pulumix.Output[*string] {
	return pulumix.Apply[DocumentClassifierInputDataConfig](o, func(v DocumentClassifierInputDataConfig) *string { return v.TestS3Uri })
}

type DocumentClassifierInputDataConfigAugmentedManifest struct {
	// Location of annotation files.
	AnnotationDataS3Uri *string `pulumi:"annotationDataS3Uri"`
	// The JSON attribute that contains the annotations for the training documents.
	AttributeNames []string `pulumi:"attributeNames"`
	// Type of augmented manifest.
	// One of `PLAIN_TEXT_DOCUMENT` or `SEMI_STRUCTURED_DOCUMENT`.
	DocumentType *string `pulumi:"documentType"`
	// Location of augmented manifest file.
	S3Uri string `pulumi:"s3Uri"`
	// Location of source PDF files.
	SourceDocumentsS3Uri *string `pulumi:"sourceDocumentsS3Uri"`
	// Purpose of data in augmented manifest.
	// One of `TRAIN` or `TEST`.
	Split *string `pulumi:"split"`
}

type DocumentClassifierInputDataConfigAugmentedManifestArgs struct {
	// Location of annotation files.
	AnnotationDataS3Uri pulumix.Input[*string] `pulumi:"annotationDataS3Uri"`
	// The JSON attribute that contains the annotations for the training documents.
	AttributeNames pulumix.Input[[]string] `pulumi:"attributeNames"`
	// Type of augmented manifest.
	// One of `PLAIN_TEXT_DOCUMENT` or `SEMI_STRUCTURED_DOCUMENT`.
	DocumentType pulumix.Input[*string] `pulumi:"documentType"`
	// Location of augmented manifest file.
	S3Uri pulumix.Input[string] `pulumi:"s3Uri"`
	// Location of source PDF files.
	SourceDocumentsS3Uri pulumix.Input[*string] `pulumi:"sourceDocumentsS3Uri"`
	// Purpose of data in augmented manifest.
	// One of `TRAIN` or `TEST`.
	Split pulumix.Input[*string] `pulumi:"split"`
}

func (DocumentClassifierInputDataConfigAugmentedManifestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentClassifierInputDataConfigAugmentedManifest)(nil)).Elem()
}

func (i DocumentClassifierInputDataConfigAugmentedManifestArgs) ToDocumentClassifierInputDataConfigAugmentedManifestOutput() DocumentClassifierInputDataConfigAugmentedManifestOutput {
	return i.ToDocumentClassifierInputDataConfigAugmentedManifestOutputWithContext(context.Background())
}

func (i DocumentClassifierInputDataConfigAugmentedManifestArgs) ToDocumentClassifierInputDataConfigAugmentedManifestOutputWithContext(ctx context.Context) DocumentClassifierInputDataConfigAugmentedManifestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentClassifierInputDataConfigAugmentedManifestOutput)
}

func (i *DocumentClassifierInputDataConfigAugmentedManifestArgs) ToOutput(ctx context.Context) pulumix.Output[*DocumentClassifierInputDataConfigAugmentedManifestArgs] {
	return pulumix.Val(i)
}

type DocumentClassifierInputDataConfigAugmentedManifestOutput struct{ *pulumi.OutputState }

func (DocumentClassifierInputDataConfigAugmentedManifestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentClassifierInputDataConfigAugmentedManifest)(nil)).Elem()
}

func (o DocumentClassifierInputDataConfigAugmentedManifestOutput) ToDocumentClassifierInputDataConfigAugmentedManifestOutput() DocumentClassifierInputDataConfigAugmentedManifestOutput {
	return o
}

func (o DocumentClassifierInputDataConfigAugmentedManifestOutput) ToDocumentClassifierInputDataConfigAugmentedManifestOutputWithContext(ctx context.Context) DocumentClassifierInputDataConfigAugmentedManifestOutput {
	return o
}

func (o DocumentClassifierInputDataConfigAugmentedManifestOutput) ToOutput(ctx context.Context) pulumix.Output[DocumentClassifierInputDataConfigAugmentedManifest] {
	return pulumix.Output[DocumentClassifierInputDataConfigAugmentedManifest]{
		OutputState: o.OutputState,
	}
}

// Location of annotation files.
func (o DocumentClassifierInputDataConfigAugmentedManifestOutput) AnnotationDataS3Uri() pulumix.Output[*string] {
	return pulumix.Apply[DocumentClassifierInputDataConfigAugmentedManifest](o, func(v DocumentClassifierInputDataConfigAugmentedManifest) *string { return v.AnnotationDataS3Uri })
}

// The JSON attribute that contains the annotations for the training documents.
func (o DocumentClassifierInputDataConfigAugmentedManifestOutput) AttributeNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DocumentClassifierInputDataConfigAugmentedManifest](o, func(v DocumentClassifierInputDataConfigAugmentedManifest) []string { return v.AttributeNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Type of augmented manifest.
// One of `PLAIN_TEXT_DOCUMENT` or `SEMI_STRUCTURED_DOCUMENT`.
func (o DocumentClassifierInputDataConfigAugmentedManifestOutput) DocumentType() pulumix.Output[*string] {
	return pulumix.Apply[DocumentClassifierInputDataConfigAugmentedManifest](o, func(v DocumentClassifierInputDataConfigAugmentedManifest) *string { return v.DocumentType })
}

// Location of augmented manifest file.
func (o DocumentClassifierInputDataConfigAugmentedManifestOutput) S3Uri() pulumix.Output[string] {
	return pulumix.Apply[DocumentClassifierInputDataConfigAugmentedManifest](o, func(v DocumentClassifierInputDataConfigAugmentedManifest) string { return v.S3Uri })
}

// Location of source PDF files.
func (o DocumentClassifierInputDataConfigAugmentedManifestOutput) SourceDocumentsS3Uri() pulumix.Output[*string] {
	return pulumix.Apply[DocumentClassifierInputDataConfigAugmentedManifest](o, func(v DocumentClassifierInputDataConfigAugmentedManifest) *string { return v.SourceDocumentsS3Uri })
}

// Purpose of data in augmented manifest.
// One of `TRAIN` or `TEST`.
func (o DocumentClassifierInputDataConfigAugmentedManifestOutput) Split() pulumix.Output[*string] {
	return pulumix.Apply[DocumentClassifierInputDataConfigAugmentedManifest](o, func(v DocumentClassifierInputDataConfigAugmentedManifest) *string { return v.Split })
}

type DocumentClassifierOutputDataConfig struct {
	// KMS Key used to encrypt the output documents.
	// Can be a KMS Key ID, a KMS Key ARN, a KMS Alias name, or a KMS Alias ARN.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Full path for the output documents.
	OutputS3Uri *string `pulumi:"outputS3Uri"`
	// Destination path for the output documents.
	// The full path to the output file will be returned in `outputS3Uri`.
	S3Uri string `pulumi:"s3Uri"`
}

type DocumentClassifierOutputDataConfigArgs struct {
	// KMS Key used to encrypt the output documents.
	// Can be a KMS Key ID, a KMS Key ARN, a KMS Alias name, or a KMS Alias ARN.
	KmsKeyId pulumix.Input[*string] `pulumi:"kmsKeyId"`
	// Full path for the output documents.
	OutputS3Uri pulumix.Input[*string] `pulumi:"outputS3Uri"`
	// Destination path for the output documents.
	// The full path to the output file will be returned in `outputS3Uri`.
	S3Uri pulumix.Input[string] `pulumi:"s3Uri"`
}

func (DocumentClassifierOutputDataConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentClassifierOutputDataConfig)(nil)).Elem()
}

func (i DocumentClassifierOutputDataConfigArgs) ToDocumentClassifierOutputDataConfigOutput() DocumentClassifierOutputDataConfigOutput {
	return i.ToDocumentClassifierOutputDataConfigOutputWithContext(context.Background())
}

func (i DocumentClassifierOutputDataConfigArgs) ToDocumentClassifierOutputDataConfigOutputWithContext(ctx context.Context) DocumentClassifierOutputDataConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentClassifierOutputDataConfigOutput)
}

func (i *DocumentClassifierOutputDataConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DocumentClassifierOutputDataConfigArgs] {
	return pulumix.Val(i)
}

type DocumentClassifierOutputDataConfigOutput struct{ *pulumi.OutputState }

func (DocumentClassifierOutputDataConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentClassifierOutputDataConfig)(nil)).Elem()
}

func (o DocumentClassifierOutputDataConfigOutput) ToDocumentClassifierOutputDataConfigOutput() DocumentClassifierOutputDataConfigOutput {
	return o
}

func (o DocumentClassifierOutputDataConfigOutput) ToDocumentClassifierOutputDataConfigOutputWithContext(ctx context.Context) DocumentClassifierOutputDataConfigOutput {
	return o
}

func (o DocumentClassifierOutputDataConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DocumentClassifierOutputDataConfig] {
	return pulumix.Output[DocumentClassifierOutputDataConfig]{
		OutputState: o.OutputState,
	}
}

// KMS Key used to encrypt the output documents.
// Can be a KMS Key ID, a KMS Key ARN, a KMS Alias name, or a KMS Alias ARN.
func (o DocumentClassifierOutputDataConfigOutput) KmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[DocumentClassifierOutputDataConfig](o, func(v DocumentClassifierOutputDataConfig) *string { return v.KmsKeyId })
}

// Full path for the output documents.
func (o DocumentClassifierOutputDataConfigOutput) OutputS3Uri() pulumix.Output[*string] {
	return pulumix.Apply[DocumentClassifierOutputDataConfig](o, func(v DocumentClassifierOutputDataConfig) *string { return v.OutputS3Uri })
}

// Destination path for the output documents.
// The full path to the output file will be returned in `outputS3Uri`.
func (o DocumentClassifierOutputDataConfigOutput) S3Uri() pulumix.Output[string] {
	return pulumix.Apply[DocumentClassifierOutputDataConfig](o, func(v DocumentClassifierOutputDataConfig) string { return v.S3Uri })
}

type DocumentClassifierVpcConfig struct {
	// List of security group IDs.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// List of VPC subnets.
	Subnets []string `pulumi:"subnets"`
}

type DocumentClassifierVpcConfigArgs struct {
	// List of security group IDs.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// List of VPC subnets.
	Subnets pulumix.Input[[]string] `pulumi:"subnets"`
}

func (DocumentClassifierVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentClassifierVpcConfig)(nil)).Elem()
}

func (i DocumentClassifierVpcConfigArgs) ToDocumentClassifierVpcConfigOutput() DocumentClassifierVpcConfigOutput {
	return i.ToDocumentClassifierVpcConfigOutputWithContext(context.Background())
}

func (i DocumentClassifierVpcConfigArgs) ToDocumentClassifierVpcConfigOutputWithContext(ctx context.Context) DocumentClassifierVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentClassifierVpcConfigOutput)
}

func (i *DocumentClassifierVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DocumentClassifierVpcConfigArgs] {
	return pulumix.Val(i)
}

type DocumentClassifierVpcConfigOutput struct{ *pulumi.OutputState }

func (DocumentClassifierVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentClassifierVpcConfig)(nil)).Elem()
}

func (o DocumentClassifierVpcConfigOutput) ToDocumentClassifierVpcConfigOutput() DocumentClassifierVpcConfigOutput {
	return o
}

func (o DocumentClassifierVpcConfigOutput) ToDocumentClassifierVpcConfigOutputWithContext(ctx context.Context) DocumentClassifierVpcConfigOutput {
	return o
}

func (o DocumentClassifierVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DocumentClassifierVpcConfig] {
	return pulumix.Output[DocumentClassifierVpcConfig]{
		OutputState: o.OutputState,
	}
}

// List of security group IDs.
func (o DocumentClassifierVpcConfigOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DocumentClassifierVpcConfig](o, func(v DocumentClassifierVpcConfig) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// List of VPC subnets.
func (o DocumentClassifierVpcConfigOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DocumentClassifierVpcConfig](o, func(v DocumentClassifierVpcConfig) []string { return v.Subnets })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type EntityRecognizerInputDataConfig struct {
	// Specifies location of the document annotation data.
	// See the `annotations` Configuration Block section below.
	// One of `annotations` or `entityList` is required.
	Annotations *EntityRecognizerInputDataConfigAnnotations `pulumi:"annotations"`
	// List of training datasets produced by Amazon SageMaker Ground Truth.
	// Used if `dataFormat` is `AUGMENTED_MANIFEST`.
	// See the `augmentedManifests` Configuration Block section below.
	AugmentedManifests []EntityRecognizerInputDataConfigAugmentedManifest `pulumi:"augmentedManifests"`
	// The format for the training data.
	// One of `COMPREHEND_CSV` or `AUGMENTED_MANIFEST`.
	DataFormat *string `pulumi:"dataFormat"`
	// Specifies a collection of training documents.
	// Used if `dataFormat` is `COMPREHEND_CSV`.
	// See the `documents` Configuration Block section below.
	Documents *EntityRecognizerInputDataConfigDocuments `pulumi:"documents"`
	// Specifies location of the entity list data.
	// See the `entityList` Configuration Block section below.
	// One of `entityList` or `annotations` is required.
	EntityList *EntityRecognizerInputDataConfigEntityList `pulumi:"entityList"`
	// Set of entity types to be recognized.
	// Has a maximum of 25 items.
	// See the `entityTypes` Configuration Block section below.
	EntityTypes []EntityRecognizerInputDataConfigEntityType `pulumi:"entityTypes"`
}

type EntityRecognizerInputDataConfigArgs struct {
	// Specifies location of the document annotation data.
	// See the `annotations` Configuration Block section below.
	// One of `annotations` or `entityList` is required.
	Annotations pulumix.Input[*EntityRecognizerInputDataConfigAnnotationsArgs] `pulumi:"annotations"`
	// List of training datasets produced by Amazon SageMaker Ground Truth.
	// Used if `dataFormat` is `AUGMENTED_MANIFEST`.
	// See the `augmentedManifests` Configuration Block section below.
	AugmentedManifests pulumix.Input[[]*EntityRecognizerInputDataConfigAugmentedManifestArgs] `pulumi:"augmentedManifests"`
	// The format for the training data.
	// One of `COMPREHEND_CSV` or `AUGMENTED_MANIFEST`.
	DataFormat pulumix.Input[*string] `pulumi:"dataFormat"`
	// Specifies a collection of training documents.
	// Used if `dataFormat` is `COMPREHEND_CSV`.
	// See the `documents` Configuration Block section below.
	Documents pulumix.Input[*EntityRecognizerInputDataConfigDocumentsArgs] `pulumi:"documents"`
	// Specifies location of the entity list data.
	// See the `entityList` Configuration Block section below.
	// One of `entityList` or `annotations` is required.
	EntityList pulumix.Input[*EntityRecognizerInputDataConfigEntityListArgs] `pulumi:"entityList"`
	// Set of entity types to be recognized.
	// Has a maximum of 25 items.
	// See the `entityTypes` Configuration Block section below.
	EntityTypes pulumix.Input[[]*EntityRecognizerInputDataConfigEntityTypeArgs] `pulumi:"entityTypes"`
}

func (EntityRecognizerInputDataConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRecognizerInputDataConfig)(nil)).Elem()
}

func (i EntityRecognizerInputDataConfigArgs) ToEntityRecognizerInputDataConfigOutput() EntityRecognizerInputDataConfigOutput {
	return i.ToEntityRecognizerInputDataConfigOutputWithContext(context.Background())
}

func (i EntityRecognizerInputDataConfigArgs) ToEntityRecognizerInputDataConfigOutputWithContext(ctx context.Context) EntityRecognizerInputDataConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRecognizerInputDataConfigOutput)
}

func (i *EntityRecognizerInputDataConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*EntityRecognizerInputDataConfigArgs] {
	return pulumix.Val(i)
}

type EntityRecognizerInputDataConfigOutput struct{ *pulumi.OutputState }

func (EntityRecognizerInputDataConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRecognizerInputDataConfig)(nil)).Elem()
}

func (o EntityRecognizerInputDataConfigOutput) ToEntityRecognizerInputDataConfigOutput() EntityRecognizerInputDataConfigOutput {
	return o
}

func (o EntityRecognizerInputDataConfigOutput) ToEntityRecognizerInputDataConfigOutputWithContext(ctx context.Context) EntityRecognizerInputDataConfigOutput {
	return o
}

func (o EntityRecognizerInputDataConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EntityRecognizerInputDataConfig] {
	return pulumix.Output[EntityRecognizerInputDataConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies location of the document annotation data.
// See the `annotations` Configuration Block section below.
// One of `annotations` or `entityList` is required.
func (o EntityRecognizerInputDataConfigOutput) Annotations() pulumix.GPtrOutput[EntityRecognizerInputDataConfigAnnotations, EntityRecognizerInputDataConfigAnnotationsOutput] {
	value := pulumix.Apply[EntityRecognizerInputDataConfig](o, func(v EntityRecognizerInputDataConfig) *EntityRecognizerInputDataConfigAnnotations {
		return v.Annotations
	})
	return pulumix.GPtrOutput[EntityRecognizerInputDataConfigAnnotations, EntityRecognizerInputDataConfigAnnotationsOutput]{OutputState: value.OutputState}
}

// List of training datasets produced by Amazon SageMaker Ground Truth.
// Used if `dataFormat` is `AUGMENTED_MANIFEST`.
// See the `augmentedManifests` Configuration Block section below.
func (o EntityRecognizerInputDataConfigOutput) AugmentedManifests() pulumix.GArrayOutput[EntityRecognizerInputDataConfigAugmentedManifest, EntityRecognizerInputDataConfigAugmentedManifestOutput] {
	value := pulumix.Apply[EntityRecognizerInputDataConfig](o, func(v EntityRecognizerInputDataConfig) []EntityRecognizerInputDataConfigAugmentedManifest {
		return v.AugmentedManifests
	})
	return pulumix.GArrayOutput[EntityRecognizerInputDataConfigAugmentedManifest, EntityRecognizerInputDataConfigAugmentedManifestOutput]{OutputState: value.OutputState}
}

// The format for the training data.
// One of `COMPREHEND_CSV` or `AUGMENTED_MANIFEST`.
func (o EntityRecognizerInputDataConfigOutput) DataFormat() pulumix.Output[*string] {
	return pulumix.Apply[EntityRecognizerInputDataConfig](o, func(v EntityRecognizerInputDataConfig) *string { return v.DataFormat })
}

// Specifies a collection of training documents.
// Used if `dataFormat` is `COMPREHEND_CSV`.
// See the `documents` Configuration Block section below.
func (o EntityRecognizerInputDataConfigOutput) Documents() pulumix.GPtrOutput[EntityRecognizerInputDataConfigDocuments, EntityRecognizerInputDataConfigDocumentsOutput] {
	value := pulumix.Apply[EntityRecognizerInputDataConfig](o, func(v EntityRecognizerInputDataConfig) *EntityRecognizerInputDataConfigDocuments { return v.Documents })
	return pulumix.GPtrOutput[EntityRecognizerInputDataConfigDocuments, EntityRecognizerInputDataConfigDocumentsOutput]{OutputState: value.OutputState}
}

// Specifies location of the entity list data.
// See the `entityList` Configuration Block section below.
// One of `entityList` or `annotations` is required.
func (o EntityRecognizerInputDataConfigOutput) EntityList() pulumix.GPtrOutput[EntityRecognizerInputDataConfigEntityList, EntityRecognizerInputDataConfigEntityListOutput] {
	value := pulumix.Apply[EntityRecognizerInputDataConfig](o, func(v EntityRecognizerInputDataConfig) *EntityRecognizerInputDataConfigEntityList {
		return v.EntityList
	})
	return pulumix.GPtrOutput[EntityRecognizerInputDataConfigEntityList, EntityRecognizerInputDataConfigEntityListOutput]{OutputState: value.OutputState}
}

// Set of entity types to be recognized.
// Has a maximum of 25 items.
// See the `entityTypes` Configuration Block section below.
func (o EntityRecognizerInputDataConfigOutput) EntityTypes() pulumix.GArrayOutput[EntityRecognizerInputDataConfigEntityType, EntityRecognizerInputDataConfigEntityTypeOutput] {
	value := pulumix.Apply[EntityRecognizerInputDataConfig](o, func(v EntityRecognizerInputDataConfig) []EntityRecognizerInputDataConfigEntityType {
		return v.EntityTypes
	})
	return pulumix.GArrayOutput[EntityRecognizerInputDataConfigEntityType, EntityRecognizerInputDataConfigEntityTypeOutput]{OutputState: value.OutputState}
}

type EntityRecognizerInputDataConfigAnnotations struct {
	// Location of training annotations.
	S3Uri     string  `pulumi:"s3Uri"`
	TestS3Uri *string `pulumi:"testS3Uri"`
}

type EntityRecognizerInputDataConfigAnnotationsArgs struct {
	// Location of training annotations.
	S3Uri     pulumix.Input[string]  `pulumi:"s3Uri"`
	TestS3Uri pulumix.Input[*string] `pulumi:"testS3Uri"`
}

func (EntityRecognizerInputDataConfigAnnotationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRecognizerInputDataConfigAnnotations)(nil)).Elem()
}

func (i EntityRecognizerInputDataConfigAnnotationsArgs) ToEntityRecognizerInputDataConfigAnnotationsOutput() EntityRecognizerInputDataConfigAnnotationsOutput {
	return i.ToEntityRecognizerInputDataConfigAnnotationsOutputWithContext(context.Background())
}

func (i EntityRecognizerInputDataConfigAnnotationsArgs) ToEntityRecognizerInputDataConfigAnnotationsOutputWithContext(ctx context.Context) EntityRecognizerInputDataConfigAnnotationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRecognizerInputDataConfigAnnotationsOutput)
}

func (i *EntityRecognizerInputDataConfigAnnotationsArgs) ToOutput(ctx context.Context) pulumix.Output[*EntityRecognizerInputDataConfigAnnotationsArgs] {
	return pulumix.Val(i)
}

type EntityRecognizerInputDataConfigAnnotationsOutput struct{ *pulumi.OutputState }

func (EntityRecognizerInputDataConfigAnnotationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRecognizerInputDataConfigAnnotations)(nil)).Elem()
}

func (o EntityRecognizerInputDataConfigAnnotationsOutput) ToEntityRecognizerInputDataConfigAnnotationsOutput() EntityRecognizerInputDataConfigAnnotationsOutput {
	return o
}

func (o EntityRecognizerInputDataConfigAnnotationsOutput) ToEntityRecognizerInputDataConfigAnnotationsOutputWithContext(ctx context.Context) EntityRecognizerInputDataConfigAnnotationsOutput {
	return o
}

func (o EntityRecognizerInputDataConfigAnnotationsOutput) ToOutput(ctx context.Context) pulumix.Output[EntityRecognizerInputDataConfigAnnotations] {
	return pulumix.Output[EntityRecognizerInputDataConfigAnnotations]{
		OutputState: o.OutputState,
	}
}

// Location of training annotations.
func (o EntityRecognizerInputDataConfigAnnotationsOutput) S3Uri() pulumix.Output[string] {
	return pulumix.Apply[EntityRecognizerInputDataConfigAnnotations](o, func(v EntityRecognizerInputDataConfigAnnotations) string { return v.S3Uri })
}

func (o EntityRecognizerInputDataConfigAnnotationsOutput) TestS3Uri() pulumix.Output[*string] {
	return pulumix.Apply[EntityRecognizerInputDataConfigAnnotations](o, func(v EntityRecognizerInputDataConfigAnnotations) *string { return v.TestS3Uri })
}

type EntityRecognizerInputDataConfigAugmentedManifest struct {
	// Location of annotation files.
	AnnotationDataS3Uri *string `pulumi:"annotationDataS3Uri"`
	// The JSON attribute that contains the annotations for the training documents.
	AttributeNames []string `pulumi:"attributeNames"`
	// Type of augmented manifest.
	// One of `PLAIN_TEXT_DOCUMENT` or `SEMI_STRUCTURED_DOCUMENT`.
	DocumentType *string `pulumi:"documentType"`
	// Location of augmented manifest file.
	S3Uri string `pulumi:"s3Uri"`
	// Location of source PDF files.
	SourceDocumentsS3Uri *string `pulumi:"sourceDocumentsS3Uri"`
	// Purpose of data in augmented manifest.
	// One of `TRAIN` or `TEST`.
	Split *string `pulumi:"split"`
}

type EntityRecognizerInputDataConfigAugmentedManifestArgs struct {
	// Location of annotation files.
	AnnotationDataS3Uri pulumix.Input[*string] `pulumi:"annotationDataS3Uri"`
	// The JSON attribute that contains the annotations for the training documents.
	AttributeNames pulumix.Input[[]string] `pulumi:"attributeNames"`
	// Type of augmented manifest.
	// One of `PLAIN_TEXT_DOCUMENT` or `SEMI_STRUCTURED_DOCUMENT`.
	DocumentType pulumix.Input[*string] `pulumi:"documentType"`
	// Location of augmented manifest file.
	S3Uri pulumix.Input[string] `pulumi:"s3Uri"`
	// Location of source PDF files.
	SourceDocumentsS3Uri pulumix.Input[*string] `pulumi:"sourceDocumentsS3Uri"`
	// Purpose of data in augmented manifest.
	// One of `TRAIN` or `TEST`.
	Split pulumix.Input[*string] `pulumi:"split"`
}

func (EntityRecognizerInputDataConfigAugmentedManifestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRecognizerInputDataConfigAugmentedManifest)(nil)).Elem()
}

func (i EntityRecognizerInputDataConfigAugmentedManifestArgs) ToEntityRecognizerInputDataConfigAugmentedManifestOutput() EntityRecognizerInputDataConfigAugmentedManifestOutput {
	return i.ToEntityRecognizerInputDataConfigAugmentedManifestOutputWithContext(context.Background())
}

func (i EntityRecognizerInputDataConfigAugmentedManifestArgs) ToEntityRecognizerInputDataConfigAugmentedManifestOutputWithContext(ctx context.Context) EntityRecognizerInputDataConfigAugmentedManifestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRecognizerInputDataConfigAugmentedManifestOutput)
}

func (i *EntityRecognizerInputDataConfigAugmentedManifestArgs) ToOutput(ctx context.Context) pulumix.Output[*EntityRecognizerInputDataConfigAugmentedManifestArgs] {
	return pulumix.Val(i)
}

type EntityRecognizerInputDataConfigAugmentedManifestOutput struct{ *pulumi.OutputState }

func (EntityRecognizerInputDataConfigAugmentedManifestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRecognizerInputDataConfigAugmentedManifest)(nil)).Elem()
}

func (o EntityRecognizerInputDataConfigAugmentedManifestOutput) ToEntityRecognizerInputDataConfigAugmentedManifestOutput() EntityRecognizerInputDataConfigAugmentedManifestOutput {
	return o
}

func (o EntityRecognizerInputDataConfigAugmentedManifestOutput) ToEntityRecognizerInputDataConfigAugmentedManifestOutputWithContext(ctx context.Context) EntityRecognizerInputDataConfigAugmentedManifestOutput {
	return o
}

func (o EntityRecognizerInputDataConfigAugmentedManifestOutput) ToOutput(ctx context.Context) pulumix.Output[EntityRecognizerInputDataConfigAugmentedManifest] {
	return pulumix.Output[EntityRecognizerInputDataConfigAugmentedManifest]{
		OutputState: o.OutputState,
	}
}

// Location of annotation files.
func (o EntityRecognizerInputDataConfigAugmentedManifestOutput) AnnotationDataS3Uri() pulumix.Output[*string] {
	return pulumix.Apply[EntityRecognizerInputDataConfigAugmentedManifest](o, func(v EntityRecognizerInputDataConfigAugmentedManifest) *string { return v.AnnotationDataS3Uri })
}

// The JSON attribute that contains the annotations for the training documents.
func (o EntityRecognizerInputDataConfigAugmentedManifestOutput) AttributeNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EntityRecognizerInputDataConfigAugmentedManifest](o, func(v EntityRecognizerInputDataConfigAugmentedManifest) []string { return v.AttributeNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Type of augmented manifest.
// One of `PLAIN_TEXT_DOCUMENT` or `SEMI_STRUCTURED_DOCUMENT`.
func (o EntityRecognizerInputDataConfigAugmentedManifestOutput) DocumentType() pulumix.Output[*string] {
	return pulumix.Apply[EntityRecognizerInputDataConfigAugmentedManifest](o, func(v EntityRecognizerInputDataConfigAugmentedManifest) *string { return v.DocumentType })
}

// Location of augmented manifest file.
func (o EntityRecognizerInputDataConfigAugmentedManifestOutput) S3Uri() pulumix.Output[string] {
	return pulumix.Apply[EntityRecognizerInputDataConfigAugmentedManifest](o, func(v EntityRecognizerInputDataConfigAugmentedManifest) string { return v.S3Uri })
}

// Location of source PDF files.
func (o EntityRecognizerInputDataConfigAugmentedManifestOutput) SourceDocumentsS3Uri() pulumix.Output[*string] {
	return pulumix.Apply[EntityRecognizerInputDataConfigAugmentedManifest](o, func(v EntityRecognizerInputDataConfigAugmentedManifest) *string { return v.SourceDocumentsS3Uri })
}

// Purpose of data in augmented manifest.
// One of `TRAIN` or `TEST`.
func (o EntityRecognizerInputDataConfigAugmentedManifestOutput) Split() pulumix.Output[*string] {
	return pulumix.Apply[EntityRecognizerInputDataConfigAugmentedManifest](o, func(v EntityRecognizerInputDataConfigAugmentedManifest) *string { return v.Split })
}

type EntityRecognizerInputDataConfigDocuments struct {
	// Specifies how the input files should be processed.
	// One of `ONE_DOC_PER_LINE` or `ONE_DOC_PER_FILE`.
	InputFormat *string `pulumi:"inputFormat"`
	// Location of training documents.
	S3Uri     string  `pulumi:"s3Uri"`
	TestS3Uri *string `pulumi:"testS3Uri"`
}

type EntityRecognizerInputDataConfigDocumentsArgs struct {
	// Specifies how the input files should be processed.
	// One of `ONE_DOC_PER_LINE` or `ONE_DOC_PER_FILE`.
	InputFormat pulumix.Input[*string] `pulumi:"inputFormat"`
	// Location of training documents.
	S3Uri     pulumix.Input[string]  `pulumi:"s3Uri"`
	TestS3Uri pulumix.Input[*string] `pulumi:"testS3Uri"`
}

func (EntityRecognizerInputDataConfigDocumentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRecognizerInputDataConfigDocuments)(nil)).Elem()
}

func (i EntityRecognizerInputDataConfigDocumentsArgs) ToEntityRecognizerInputDataConfigDocumentsOutput() EntityRecognizerInputDataConfigDocumentsOutput {
	return i.ToEntityRecognizerInputDataConfigDocumentsOutputWithContext(context.Background())
}

func (i EntityRecognizerInputDataConfigDocumentsArgs) ToEntityRecognizerInputDataConfigDocumentsOutputWithContext(ctx context.Context) EntityRecognizerInputDataConfigDocumentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRecognizerInputDataConfigDocumentsOutput)
}

func (i *EntityRecognizerInputDataConfigDocumentsArgs) ToOutput(ctx context.Context) pulumix.Output[*EntityRecognizerInputDataConfigDocumentsArgs] {
	return pulumix.Val(i)
}

type EntityRecognizerInputDataConfigDocumentsOutput struct{ *pulumi.OutputState }

func (EntityRecognizerInputDataConfigDocumentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRecognizerInputDataConfigDocuments)(nil)).Elem()
}

func (o EntityRecognizerInputDataConfigDocumentsOutput) ToEntityRecognizerInputDataConfigDocumentsOutput() EntityRecognizerInputDataConfigDocumentsOutput {
	return o
}

func (o EntityRecognizerInputDataConfigDocumentsOutput) ToEntityRecognizerInputDataConfigDocumentsOutputWithContext(ctx context.Context) EntityRecognizerInputDataConfigDocumentsOutput {
	return o
}

func (o EntityRecognizerInputDataConfigDocumentsOutput) ToOutput(ctx context.Context) pulumix.Output[EntityRecognizerInputDataConfigDocuments] {
	return pulumix.Output[EntityRecognizerInputDataConfigDocuments]{
		OutputState: o.OutputState,
	}
}

// Specifies how the input files should be processed.
// One of `ONE_DOC_PER_LINE` or `ONE_DOC_PER_FILE`.
func (o EntityRecognizerInputDataConfigDocumentsOutput) InputFormat() pulumix.Output[*string] {
	return pulumix.Apply[EntityRecognizerInputDataConfigDocuments](o, func(v EntityRecognizerInputDataConfigDocuments) *string { return v.InputFormat })
}

// Location of training documents.
func (o EntityRecognizerInputDataConfigDocumentsOutput) S3Uri() pulumix.Output[string] {
	return pulumix.Apply[EntityRecognizerInputDataConfigDocuments](o, func(v EntityRecognizerInputDataConfigDocuments) string { return v.S3Uri })
}

func (o EntityRecognizerInputDataConfigDocumentsOutput) TestS3Uri() pulumix.Output[*string] {
	return pulumix.Apply[EntityRecognizerInputDataConfigDocuments](o, func(v EntityRecognizerInputDataConfigDocuments) *string { return v.TestS3Uri })
}

type EntityRecognizerInputDataConfigEntityList struct {
	// Location of entity list.
	S3Uri string `pulumi:"s3Uri"`
}

type EntityRecognizerInputDataConfigEntityListArgs struct {
	// Location of entity list.
	S3Uri pulumix.Input[string] `pulumi:"s3Uri"`
}

func (EntityRecognizerInputDataConfigEntityListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRecognizerInputDataConfigEntityList)(nil)).Elem()
}

func (i EntityRecognizerInputDataConfigEntityListArgs) ToEntityRecognizerInputDataConfigEntityListOutput() EntityRecognizerInputDataConfigEntityListOutput {
	return i.ToEntityRecognizerInputDataConfigEntityListOutputWithContext(context.Background())
}

func (i EntityRecognizerInputDataConfigEntityListArgs) ToEntityRecognizerInputDataConfigEntityListOutputWithContext(ctx context.Context) EntityRecognizerInputDataConfigEntityListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRecognizerInputDataConfigEntityListOutput)
}

func (i *EntityRecognizerInputDataConfigEntityListArgs) ToOutput(ctx context.Context) pulumix.Output[*EntityRecognizerInputDataConfigEntityListArgs] {
	return pulumix.Val(i)
}

type EntityRecognizerInputDataConfigEntityListOutput struct{ *pulumi.OutputState }

func (EntityRecognizerInputDataConfigEntityListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRecognizerInputDataConfigEntityList)(nil)).Elem()
}

func (o EntityRecognizerInputDataConfigEntityListOutput) ToEntityRecognizerInputDataConfigEntityListOutput() EntityRecognizerInputDataConfigEntityListOutput {
	return o
}

func (o EntityRecognizerInputDataConfigEntityListOutput) ToEntityRecognizerInputDataConfigEntityListOutputWithContext(ctx context.Context) EntityRecognizerInputDataConfigEntityListOutput {
	return o
}

func (o EntityRecognizerInputDataConfigEntityListOutput) ToOutput(ctx context.Context) pulumix.Output[EntityRecognizerInputDataConfigEntityList] {
	return pulumix.Output[EntityRecognizerInputDataConfigEntityList]{
		OutputState: o.OutputState,
	}
}

// Location of entity list.
func (o EntityRecognizerInputDataConfigEntityListOutput) S3Uri() pulumix.Output[string] {
	return pulumix.Apply[EntityRecognizerInputDataConfigEntityList](o, func(v EntityRecognizerInputDataConfigEntityList) string { return v.S3Uri })
}

type EntityRecognizerInputDataConfigEntityType struct {
	// An entity type to be matched by the Entity Recognizer.
	// Cannot contain a newline (`\n`), carriage return (`\r`), or tab (`\t`).
	Type string `pulumi:"type"`
}

type EntityRecognizerInputDataConfigEntityTypeArgs struct {
	// An entity type to be matched by the Entity Recognizer.
	// Cannot contain a newline (`\n`), carriage return (`\r`), or tab (`\t`).
	Type pulumix.Input[string] `pulumi:"type"`
}

func (EntityRecognizerInputDataConfigEntityTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRecognizerInputDataConfigEntityType)(nil)).Elem()
}

func (i EntityRecognizerInputDataConfigEntityTypeArgs) ToEntityRecognizerInputDataConfigEntityTypeOutput() EntityRecognizerInputDataConfigEntityTypeOutput {
	return i.ToEntityRecognizerInputDataConfigEntityTypeOutputWithContext(context.Background())
}

func (i EntityRecognizerInputDataConfigEntityTypeArgs) ToEntityRecognizerInputDataConfigEntityTypeOutputWithContext(ctx context.Context) EntityRecognizerInputDataConfigEntityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRecognizerInputDataConfigEntityTypeOutput)
}

func (i *EntityRecognizerInputDataConfigEntityTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*EntityRecognizerInputDataConfigEntityTypeArgs] {
	return pulumix.Val(i)
}

type EntityRecognizerInputDataConfigEntityTypeOutput struct{ *pulumi.OutputState }

func (EntityRecognizerInputDataConfigEntityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRecognizerInputDataConfigEntityType)(nil)).Elem()
}

func (o EntityRecognizerInputDataConfigEntityTypeOutput) ToEntityRecognizerInputDataConfigEntityTypeOutput() EntityRecognizerInputDataConfigEntityTypeOutput {
	return o
}

func (o EntityRecognizerInputDataConfigEntityTypeOutput) ToEntityRecognizerInputDataConfigEntityTypeOutputWithContext(ctx context.Context) EntityRecognizerInputDataConfigEntityTypeOutput {
	return o
}

func (o EntityRecognizerInputDataConfigEntityTypeOutput) ToOutput(ctx context.Context) pulumix.Output[EntityRecognizerInputDataConfigEntityType] {
	return pulumix.Output[EntityRecognizerInputDataConfigEntityType]{
		OutputState: o.OutputState,
	}
}

// An entity type to be matched by the Entity Recognizer.
// Cannot contain a newline (`\n`), carriage return (`\r`), or tab (`\t`).
func (o EntityRecognizerInputDataConfigEntityTypeOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[EntityRecognizerInputDataConfigEntityType](o, func(v EntityRecognizerInputDataConfigEntityType) string { return v.Type })
}

type EntityRecognizerVpcConfig struct {
	// List of security group IDs.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// List of VPC subnets.
	Subnets []string `pulumi:"subnets"`
}

type EntityRecognizerVpcConfigArgs struct {
	// List of security group IDs.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// List of VPC subnets.
	Subnets pulumix.Input[[]string] `pulumi:"subnets"`
}

func (EntityRecognizerVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRecognizerVpcConfig)(nil)).Elem()
}

func (i EntityRecognizerVpcConfigArgs) ToEntityRecognizerVpcConfigOutput() EntityRecognizerVpcConfigOutput {
	return i.ToEntityRecognizerVpcConfigOutputWithContext(context.Background())
}

func (i EntityRecognizerVpcConfigArgs) ToEntityRecognizerVpcConfigOutputWithContext(ctx context.Context) EntityRecognizerVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRecognizerVpcConfigOutput)
}

func (i *EntityRecognizerVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*EntityRecognizerVpcConfigArgs] {
	return pulumix.Val(i)
}

type EntityRecognizerVpcConfigOutput struct{ *pulumi.OutputState }

func (EntityRecognizerVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRecognizerVpcConfig)(nil)).Elem()
}

func (o EntityRecognizerVpcConfigOutput) ToEntityRecognizerVpcConfigOutput() EntityRecognizerVpcConfigOutput {
	return o
}

func (o EntityRecognizerVpcConfigOutput) ToEntityRecognizerVpcConfigOutputWithContext(ctx context.Context) EntityRecognizerVpcConfigOutput {
	return o
}

func (o EntityRecognizerVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EntityRecognizerVpcConfig] {
	return pulumix.Output[EntityRecognizerVpcConfig]{
		OutputState: o.OutputState,
	}
}

// List of security group IDs.
func (o EntityRecognizerVpcConfigOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EntityRecognizerVpcConfig](o, func(v EntityRecognizerVpcConfig) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// List of VPC subnets.
func (o EntityRecognizerVpcConfigOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EntityRecognizerVpcConfig](o, func(v EntityRecognizerVpcConfig) []string { return v.Subnets })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func init() {
	pulumi.RegisterOutputType(DocumentClassifierInputDataConfigOutput{})
	pulumi.RegisterOutputType(DocumentClassifierInputDataConfigAugmentedManifestOutput{})
	pulumi.RegisterOutputType(DocumentClassifierOutputDataConfigOutput{})
	pulumi.RegisterOutputType(DocumentClassifierVpcConfigOutput{})
	pulumi.RegisterOutputType(EntityRecognizerInputDataConfigOutput{})
	pulumi.RegisterOutputType(EntityRecognizerInputDataConfigAnnotationsOutput{})
	pulumi.RegisterOutputType(EntityRecognizerInputDataConfigAugmentedManifestOutput{})
	pulumi.RegisterOutputType(EntityRecognizerInputDataConfigDocumentsOutput{})
	pulumi.RegisterOutputType(EntityRecognizerInputDataConfigEntityListOutput{})
	pulumi.RegisterOutputType(EntityRecognizerInputDataConfigEntityTypeOutput{})
	pulumi.RegisterOutputType(EntityRecognizerVpcConfigOutput{})
}
