// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about an EC2 Local Gateway.
func GetLocalGateway(ctx *pulumi.Context, args *GetLocalGatewayArgs, opts ...pulumi.InvokeOption) (*GetLocalGatewayResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLocalGatewayResult
	err := ctx.Invoke("aws:ec2/getLocalGateway:getLocalGateway", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLocalGateway.
type GetLocalGatewayArgs struct {
	// Custom filter block as described below.
	Filters []GetLocalGatewayFilter `pulumi:"filters"`
	// Id of the specific Local Gateway to retrieve.
	Id *string `pulumi:"id"`
	// Current state of the desired Local Gateway.
	// Can be either `"pending"` or `"available"`.
	State *string `pulumi:"state"`
	// Mapping of tags, each pair of which must exactly match
	// a pair on the desired Local Gateway.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getLocalGateway.
type GetLocalGatewayResult struct {
	Filters []GetLocalGatewayFilter `pulumi:"filters"`
	Id      string                  `pulumi:"id"`
	// ARN of Outpost
	OutpostArn string `pulumi:"outpostArn"`
	// AWS account identifier that owns the Local Gateway.
	OwnerId string `pulumi:"ownerId"`
	// State of the local gateway.
	State string            `pulumi:"state"`
	Tags  map[string]string `pulumi:"tags"`
}

func GetLocalGatewayOutput(ctx *pulumi.Context, args GetLocalGatewayOutputArgs, opts ...pulumi.InvokeOption) GetLocalGatewayResultOutput {
	outputResult := pulumix.ApplyErr[*GetLocalGatewayArgs](args.ToOutput(), func(plainArgs *GetLocalGatewayArgs) (*GetLocalGatewayResult, error) {
		return GetLocalGateway(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetLocalGatewayResultOutput, *GetLocalGatewayResult](outputResult)
}

// A collection of arguments for invoking getLocalGateway.
type GetLocalGatewayOutputArgs struct {
	// Custom filter block as described below.
	Filters pulumix.Input[[]*GetLocalGatewayFilterArgs] `pulumi:"filters"`
	// Id of the specific Local Gateway to retrieve.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Current state of the desired Local Gateway.
	// Can be either `"pending"` or `"available"`.
	State pulumix.Input[*string] `pulumi:"state"`
	// Mapping of tags, each pair of which must exactly match
	// a pair on the desired Local Gateway.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetLocalGatewayOutputArgs) ToOutput() pulumix.Output[*GetLocalGatewayArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.State.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetLocalGatewayArgs {
		return &GetLocalGatewayArgs{
			Filters: resolvedArgs[0].([]GetLocalGatewayFilter),
			Id:      resolvedArgs[1].(*string),
			State:   resolvedArgs[2].(*string),
			Tags:    resolvedArgs[3].(map[string]string),
		}
	})
}

type GetLocalGatewayResultOutput struct{ *pulumi.OutputState }

func (GetLocalGatewayResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLocalGatewayResult)(nil)).Elem()
}

func (o GetLocalGatewayResultOutput) ToOutput(context.Context) pulumix.Output[*GetLocalGatewayResult] {
	return pulumix.Output[*GetLocalGatewayResult]{
		OutputState: o.OutputState,
	}
}

func (o GetLocalGatewayResultOutput) Filters() pulumix.GArrayOutput[GetLocalGatewayFilter, GetLocalGatewayFilterOutput] {
	value := pulumix.Apply[*GetLocalGatewayResult](o, func(v *GetLocalGatewayResult) []GetLocalGatewayFilter { return v.Filters })
	return pulumix.GArrayOutput[GetLocalGatewayFilter, GetLocalGatewayFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetLocalGatewayResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetLocalGatewayResult](o, func(v *GetLocalGatewayResult) string { return v.Id })
}

func (o GetLocalGatewayResultOutput) OutpostArn() pulumix.Output[string] {
	return pulumix.Apply[*GetLocalGatewayResult](o, func(v *GetLocalGatewayResult) string { return v.OutpostArn })
}

func (o GetLocalGatewayResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*GetLocalGatewayResult](o, func(v *GetLocalGatewayResult) string { return v.OwnerId })
}

func (o GetLocalGatewayResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*GetLocalGatewayResult](o, func(v *GetLocalGatewayResult) string { return v.State })
}

func (o GetLocalGatewayResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetLocalGatewayResult](o, func(v *GetLocalGatewayResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
