// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appmesh

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type GatewayRouteSpec struct {
	// Specification of a gRPC gateway route.
	GrpcRoute *GatewayRouteSpecGrpcRoute `pulumi:"grpcRoute"`
	// Specification of an HTTP/2 gateway route.
	Http2Route *GatewayRouteSpecHttp2Route `pulumi:"http2Route"`
	// Specification of an HTTP gateway route.
	HttpRoute *GatewayRouteSpecHttpRoute `pulumi:"httpRoute"`
	// Priority for the gateway route, between `0` and `1000`.
	Priority *int `pulumi:"priority"`
}

type GatewayRouteSpecArgs struct {
	// Specification of a gRPC gateway route.
	GrpcRoute pulumix.Input[*GatewayRouteSpecGrpcRouteArgs] `pulumi:"grpcRoute"`
	// Specification of an HTTP/2 gateway route.
	Http2Route pulumix.Input[*GatewayRouteSpecHttp2RouteArgs] `pulumi:"http2Route"`
	// Specification of an HTTP gateway route.
	HttpRoute pulumix.Input[*GatewayRouteSpecHttpRouteArgs] `pulumi:"httpRoute"`
	// Priority for the gateway route, between `0` and `1000`.
	Priority pulumix.Input[*int] `pulumi:"priority"`
}

func (GatewayRouteSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpec)(nil)).Elem()
}

func (i GatewayRouteSpecArgs) ToGatewayRouteSpecOutput() GatewayRouteSpecOutput {
	return i.ToGatewayRouteSpecOutputWithContext(context.Background())
}

func (i GatewayRouteSpecArgs) ToGatewayRouteSpecOutputWithContext(ctx context.Context) GatewayRouteSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecOutput)
}

func (i *GatewayRouteSpecArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpec)(nil)).Elem()
}

func (o GatewayRouteSpecOutput) ToGatewayRouteSpecOutput() GatewayRouteSpecOutput {
	return o
}

func (o GatewayRouteSpecOutput) ToGatewayRouteSpecOutputWithContext(ctx context.Context) GatewayRouteSpecOutput {
	return o
}

func (o GatewayRouteSpecOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpec] {
	return pulumix.Output[GatewayRouteSpec]{
		OutputState: o.OutputState,
	}
}

// Specification of a gRPC gateway route.
func (o GatewayRouteSpecOutput) GrpcRoute() pulumix.GPtrOutput[GatewayRouteSpecGrpcRoute, GatewayRouteSpecGrpcRouteOutput] {
	value := pulumix.Apply[GatewayRouteSpec](o, func(v GatewayRouteSpec) *GatewayRouteSpecGrpcRoute { return v.GrpcRoute })
	return pulumix.GPtrOutput[GatewayRouteSpecGrpcRoute, GatewayRouteSpecGrpcRouteOutput]{OutputState: value.OutputState}
}

// Specification of an HTTP/2 gateway route.
func (o GatewayRouteSpecOutput) Http2Route() pulumix.GPtrOutput[GatewayRouteSpecHttp2Route, GatewayRouteSpecHttp2RouteOutput] {
	value := pulumix.Apply[GatewayRouteSpec](o, func(v GatewayRouteSpec) *GatewayRouteSpecHttp2Route { return v.Http2Route })
	return pulumix.GPtrOutput[GatewayRouteSpecHttp2Route, GatewayRouteSpecHttp2RouteOutput]{OutputState: value.OutputState}
}

// Specification of an HTTP gateway route.
func (o GatewayRouteSpecOutput) HttpRoute() pulumix.GPtrOutput[GatewayRouteSpecHttpRoute, GatewayRouteSpecHttpRouteOutput] {
	value := pulumix.Apply[GatewayRouteSpec](o, func(v GatewayRouteSpec) *GatewayRouteSpecHttpRoute { return v.HttpRoute })
	return pulumix.GPtrOutput[GatewayRouteSpecHttpRoute, GatewayRouteSpecHttpRouteOutput]{OutputState: value.OutputState}
}

// Priority for the gateway route, between `0` and `1000`.
func (o GatewayRouteSpecOutput) Priority() pulumix.Output[*int] {
	return pulumix.Apply[GatewayRouteSpec](o, func(v GatewayRouteSpec) *int { return v.Priority })
}

type GatewayRouteSpecGrpcRoute struct {
	// Action to take if a match is determined.
	Action GatewayRouteSpecGrpcRouteAction `pulumi:"action"`
	// Criteria for determining a request match.
	Match GatewayRouteSpecGrpcRouteMatch `pulumi:"match"`
}

type GatewayRouteSpecGrpcRouteArgs struct {
	// Action to take if a match is determined.
	Action pulumix.Input[*GatewayRouteSpecGrpcRouteActionArgs] `pulumi:"action"`
	// Criteria for determining a request match.
	Match pulumix.Input[*GatewayRouteSpecGrpcRouteMatchArgs] `pulumi:"match"`
}

func (GatewayRouteSpecGrpcRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecGrpcRoute)(nil)).Elem()
}

func (i GatewayRouteSpecGrpcRouteArgs) ToGatewayRouteSpecGrpcRouteOutput() GatewayRouteSpecGrpcRouteOutput {
	return i.ToGatewayRouteSpecGrpcRouteOutputWithContext(context.Background())
}

func (i GatewayRouteSpecGrpcRouteArgs) ToGatewayRouteSpecGrpcRouteOutputWithContext(ctx context.Context) GatewayRouteSpecGrpcRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecGrpcRouteOutput)
}

func (i *GatewayRouteSpecGrpcRouteArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecGrpcRouteArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecGrpcRouteOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecGrpcRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecGrpcRoute)(nil)).Elem()
}

func (o GatewayRouteSpecGrpcRouteOutput) ToGatewayRouteSpecGrpcRouteOutput() GatewayRouteSpecGrpcRouteOutput {
	return o
}

func (o GatewayRouteSpecGrpcRouteOutput) ToGatewayRouteSpecGrpcRouteOutputWithContext(ctx context.Context) GatewayRouteSpecGrpcRouteOutput {
	return o
}

func (o GatewayRouteSpecGrpcRouteOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecGrpcRoute] {
	return pulumix.Output[GatewayRouteSpecGrpcRoute]{
		OutputState: o.OutputState,
	}
}

// Action to take if a match is determined.
func (o GatewayRouteSpecGrpcRouteOutput) Action() pulumix.GPtrOutput[GatewayRouteSpecGrpcRouteAction, GatewayRouteSpecGrpcRouteActionOutput] {
	value := pulumix.Apply[GatewayRouteSpecGrpcRoute](o, func(v GatewayRouteSpecGrpcRoute) GatewayRouteSpecGrpcRouteAction { return v.Action })
	return pulumix.GPtrOutput[GatewayRouteSpecGrpcRouteAction, GatewayRouteSpecGrpcRouteActionOutput]{OutputState: value.OutputState}
}

// Criteria for determining a request match.
func (o GatewayRouteSpecGrpcRouteOutput) Match() pulumix.GPtrOutput[GatewayRouteSpecGrpcRouteMatch, GatewayRouteSpecGrpcRouteMatchOutput] {
	value := pulumix.Apply[GatewayRouteSpecGrpcRoute](o, func(v GatewayRouteSpecGrpcRoute) GatewayRouteSpecGrpcRouteMatch { return v.Match })
	return pulumix.GPtrOutput[GatewayRouteSpecGrpcRouteMatch, GatewayRouteSpecGrpcRouteMatchOutput]{OutputState: value.OutputState}
}

type GatewayRouteSpecGrpcRouteAction struct {
	// Target that traffic is routed to when a request matches the gateway route.
	Target GatewayRouteSpecGrpcRouteActionTarget `pulumi:"target"`
}

type GatewayRouteSpecGrpcRouteActionArgs struct {
	// Target that traffic is routed to when a request matches the gateway route.
	Target pulumix.Input[*GatewayRouteSpecGrpcRouteActionTargetArgs] `pulumi:"target"`
}

func (GatewayRouteSpecGrpcRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecGrpcRouteAction)(nil)).Elem()
}

func (i GatewayRouteSpecGrpcRouteActionArgs) ToGatewayRouteSpecGrpcRouteActionOutput() GatewayRouteSpecGrpcRouteActionOutput {
	return i.ToGatewayRouteSpecGrpcRouteActionOutputWithContext(context.Background())
}

func (i GatewayRouteSpecGrpcRouteActionArgs) ToGatewayRouteSpecGrpcRouteActionOutputWithContext(ctx context.Context) GatewayRouteSpecGrpcRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecGrpcRouteActionOutput)
}

func (i *GatewayRouteSpecGrpcRouteActionArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecGrpcRouteActionArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecGrpcRouteActionOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecGrpcRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecGrpcRouteAction)(nil)).Elem()
}

func (o GatewayRouteSpecGrpcRouteActionOutput) ToGatewayRouteSpecGrpcRouteActionOutput() GatewayRouteSpecGrpcRouteActionOutput {
	return o
}

func (o GatewayRouteSpecGrpcRouteActionOutput) ToGatewayRouteSpecGrpcRouteActionOutputWithContext(ctx context.Context) GatewayRouteSpecGrpcRouteActionOutput {
	return o
}

func (o GatewayRouteSpecGrpcRouteActionOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecGrpcRouteAction] {
	return pulumix.Output[GatewayRouteSpecGrpcRouteAction]{
		OutputState: o.OutputState,
	}
}

// Target that traffic is routed to when a request matches the gateway route.
func (o GatewayRouteSpecGrpcRouteActionOutput) Target() pulumix.GPtrOutput[GatewayRouteSpecGrpcRouteActionTarget, GatewayRouteSpecGrpcRouteActionTargetOutput] {
	value := pulumix.Apply[GatewayRouteSpecGrpcRouteAction](o, func(v GatewayRouteSpecGrpcRouteAction) GatewayRouteSpecGrpcRouteActionTarget { return v.Target })
	return pulumix.GPtrOutput[GatewayRouteSpecGrpcRouteActionTarget, GatewayRouteSpecGrpcRouteActionTargetOutput]{OutputState: value.OutputState}
}

type GatewayRouteSpecGrpcRouteActionTarget struct {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	Port *int `pulumi:"port"`
	// Virtual service gateway route target.
	VirtualService GatewayRouteSpecGrpcRouteActionTargetVirtualService `pulumi:"virtualService"`
}

type GatewayRouteSpecGrpcRouteActionTargetArgs struct {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Virtual service gateway route target.
	VirtualService pulumix.Input[*GatewayRouteSpecGrpcRouteActionTargetVirtualServiceArgs] `pulumi:"virtualService"`
}

func (GatewayRouteSpecGrpcRouteActionTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecGrpcRouteActionTarget)(nil)).Elem()
}

func (i GatewayRouteSpecGrpcRouteActionTargetArgs) ToGatewayRouteSpecGrpcRouteActionTargetOutput() GatewayRouteSpecGrpcRouteActionTargetOutput {
	return i.ToGatewayRouteSpecGrpcRouteActionTargetOutputWithContext(context.Background())
}

func (i GatewayRouteSpecGrpcRouteActionTargetArgs) ToGatewayRouteSpecGrpcRouteActionTargetOutputWithContext(ctx context.Context) GatewayRouteSpecGrpcRouteActionTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecGrpcRouteActionTargetOutput)
}

func (i *GatewayRouteSpecGrpcRouteActionTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecGrpcRouteActionTargetArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecGrpcRouteActionTargetOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecGrpcRouteActionTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecGrpcRouteActionTarget)(nil)).Elem()
}

func (o GatewayRouteSpecGrpcRouteActionTargetOutput) ToGatewayRouteSpecGrpcRouteActionTargetOutput() GatewayRouteSpecGrpcRouteActionTargetOutput {
	return o
}

func (o GatewayRouteSpecGrpcRouteActionTargetOutput) ToGatewayRouteSpecGrpcRouteActionTargetOutputWithContext(ctx context.Context) GatewayRouteSpecGrpcRouteActionTargetOutput {
	return o
}

func (o GatewayRouteSpecGrpcRouteActionTargetOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecGrpcRouteActionTarget] {
	return pulumix.Output[GatewayRouteSpecGrpcRouteActionTarget]{
		OutputState: o.OutputState,
	}
}

// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
func (o GatewayRouteSpecGrpcRouteActionTargetOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[GatewayRouteSpecGrpcRouteActionTarget](o, func(v GatewayRouteSpecGrpcRouteActionTarget) *int { return v.Port })
}

// Virtual service gateway route target.
func (o GatewayRouteSpecGrpcRouteActionTargetOutput) VirtualService() pulumix.GPtrOutput[GatewayRouteSpecGrpcRouteActionTargetVirtualService, GatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput] {
	value := pulumix.Apply[GatewayRouteSpecGrpcRouteActionTarget](o, func(v GatewayRouteSpecGrpcRouteActionTarget) GatewayRouteSpecGrpcRouteActionTargetVirtualService {
		return v.VirtualService
	})
	return pulumix.GPtrOutput[GatewayRouteSpecGrpcRouteActionTargetVirtualService, GatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput]{OutputState: value.OutputState}
}

type GatewayRouteSpecGrpcRouteActionTargetVirtualService struct {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	VirtualServiceName string `pulumi:"virtualServiceName"`
}

type GatewayRouteSpecGrpcRouteActionTargetVirtualServiceArgs struct {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	VirtualServiceName pulumix.Input[string] `pulumi:"virtualServiceName"`
}

func (GatewayRouteSpecGrpcRouteActionTargetVirtualServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecGrpcRouteActionTargetVirtualService)(nil)).Elem()
}

func (i GatewayRouteSpecGrpcRouteActionTargetVirtualServiceArgs) ToGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput() GatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput {
	return i.ToGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutputWithContext(context.Background())
}

func (i GatewayRouteSpecGrpcRouteActionTargetVirtualServiceArgs) ToGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutputWithContext(ctx context.Context) GatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput)
}

func (i *GatewayRouteSpecGrpcRouteActionTargetVirtualServiceArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecGrpcRouteActionTargetVirtualServiceArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecGrpcRouteActionTargetVirtualService)(nil)).Elem()
}

func (o GatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput) ToGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput() GatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput {
	return o
}

func (o GatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput) ToGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutputWithContext(ctx context.Context) GatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput {
	return o
}

func (o GatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecGrpcRouteActionTargetVirtualService] {
	return pulumix.Output[GatewayRouteSpecGrpcRouteActionTargetVirtualService]{
		OutputState: o.OutputState,
	}
}

// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
func (o GatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput) VirtualServiceName() pulumix.Output[string] {
	return pulumix.Apply[GatewayRouteSpecGrpcRouteActionTargetVirtualService](o, func(v GatewayRouteSpecGrpcRouteActionTargetVirtualService) string { return v.VirtualServiceName })
}

type GatewayRouteSpecGrpcRouteMatch struct {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	Port *int `pulumi:"port"`
	// Fully qualified domain name for the service to match from the request.
	ServiceName string `pulumi:"serviceName"`
}

type GatewayRouteSpecGrpcRouteMatchArgs struct {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Fully qualified domain name for the service to match from the request.
	ServiceName pulumix.Input[string] `pulumi:"serviceName"`
}

func (GatewayRouteSpecGrpcRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecGrpcRouteMatch)(nil)).Elem()
}

func (i GatewayRouteSpecGrpcRouteMatchArgs) ToGatewayRouteSpecGrpcRouteMatchOutput() GatewayRouteSpecGrpcRouteMatchOutput {
	return i.ToGatewayRouteSpecGrpcRouteMatchOutputWithContext(context.Background())
}

func (i GatewayRouteSpecGrpcRouteMatchArgs) ToGatewayRouteSpecGrpcRouteMatchOutputWithContext(ctx context.Context) GatewayRouteSpecGrpcRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecGrpcRouteMatchOutput)
}

func (i *GatewayRouteSpecGrpcRouteMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecGrpcRouteMatchArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecGrpcRouteMatchOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecGrpcRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecGrpcRouteMatch)(nil)).Elem()
}

func (o GatewayRouteSpecGrpcRouteMatchOutput) ToGatewayRouteSpecGrpcRouteMatchOutput() GatewayRouteSpecGrpcRouteMatchOutput {
	return o
}

func (o GatewayRouteSpecGrpcRouteMatchOutput) ToGatewayRouteSpecGrpcRouteMatchOutputWithContext(ctx context.Context) GatewayRouteSpecGrpcRouteMatchOutput {
	return o
}

func (o GatewayRouteSpecGrpcRouteMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecGrpcRouteMatch] {
	return pulumix.Output[GatewayRouteSpecGrpcRouteMatch]{
		OutputState: o.OutputState,
	}
}

// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
func (o GatewayRouteSpecGrpcRouteMatchOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[GatewayRouteSpecGrpcRouteMatch](o, func(v GatewayRouteSpecGrpcRouteMatch) *int { return v.Port })
}

// Fully qualified domain name for the service to match from the request.
func (o GatewayRouteSpecGrpcRouteMatchOutput) ServiceName() pulumix.Output[string] {
	return pulumix.Apply[GatewayRouteSpecGrpcRouteMatch](o, func(v GatewayRouteSpecGrpcRouteMatch) string { return v.ServiceName })
}

type GatewayRouteSpecHttp2Route struct {
	// Action to take if a match is determined.
	Action GatewayRouteSpecHttp2RouteAction `pulumi:"action"`
	// Criteria for determining a request match.
	Match GatewayRouteSpecHttp2RouteMatch `pulumi:"match"`
}

type GatewayRouteSpecHttp2RouteArgs struct {
	// Action to take if a match is determined.
	Action pulumix.Input[*GatewayRouteSpecHttp2RouteActionArgs] `pulumi:"action"`
	// Criteria for determining a request match.
	Match pulumix.Input[*GatewayRouteSpecHttp2RouteMatchArgs] `pulumi:"match"`
}

func (GatewayRouteSpecHttp2RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2Route)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteArgs) ToGatewayRouteSpecHttp2RouteOutput() GatewayRouteSpecHttp2RouteOutput {
	return i.ToGatewayRouteSpecHttp2RouteOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteArgs) ToGatewayRouteSpecHttp2RouteOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteOutput)
}

func (i *GatewayRouteSpecHttp2RouteArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2Route)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteOutput) ToGatewayRouteSpecHttp2RouteOutput() GatewayRouteSpecHttp2RouteOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteOutput) ToGatewayRouteSpecHttp2RouteOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2Route] {
	return pulumix.Output[GatewayRouteSpecHttp2Route]{
		OutputState: o.OutputState,
	}
}

// Action to take if a match is determined.
func (o GatewayRouteSpecHttp2RouteOutput) Action() pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteAction, GatewayRouteSpecHttp2RouteActionOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttp2Route](o, func(v GatewayRouteSpecHttp2Route) GatewayRouteSpecHttp2RouteAction { return v.Action })
	return pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteAction, GatewayRouteSpecHttp2RouteActionOutput]{OutputState: value.OutputState}
}

// Criteria for determining a request match.
func (o GatewayRouteSpecHttp2RouteOutput) Match() pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteMatch, GatewayRouteSpecHttp2RouteMatchOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttp2Route](o, func(v GatewayRouteSpecHttp2Route) GatewayRouteSpecHttp2RouteMatch { return v.Match })
	return pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteMatch, GatewayRouteSpecHttp2RouteMatchOutput]{OutputState: value.OutputState}
}

type GatewayRouteSpecHttp2RouteAction struct {
	// Gateway route action to rewrite.
	Rewrite *GatewayRouteSpecHttp2RouteActionRewrite `pulumi:"rewrite"`
	// Target that traffic is routed to when a request matches the gateway route.
	Target GatewayRouteSpecHttp2RouteActionTarget `pulumi:"target"`
}

type GatewayRouteSpecHttp2RouteActionArgs struct {
	// Gateway route action to rewrite.
	Rewrite pulumix.Input[*GatewayRouteSpecHttp2RouteActionRewriteArgs] `pulumi:"rewrite"`
	// Target that traffic is routed to when a request matches the gateway route.
	Target pulumix.Input[*GatewayRouteSpecHttp2RouteActionTargetArgs] `pulumi:"target"`
}

func (GatewayRouteSpecHttp2RouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteAction)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteActionArgs) ToGatewayRouteSpecHttp2RouteActionOutput() GatewayRouteSpecHttp2RouteActionOutput {
	return i.ToGatewayRouteSpecHttp2RouteActionOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteActionArgs) ToGatewayRouteSpecHttp2RouteActionOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteActionOutput)
}

func (i *GatewayRouteSpecHttp2RouteActionArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteActionArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteActionOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteAction)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteActionOutput) ToGatewayRouteSpecHttp2RouteActionOutput() GatewayRouteSpecHttp2RouteActionOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteActionOutput) ToGatewayRouteSpecHttp2RouteActionOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteActionOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteActionOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2RouteAction] {
	return pulumix.Output[GatewayRouteSpecHttp2RouteAction]{
		OutputState: o.OutputState,
	}
}

// Gateway route action to rewrite.
func (o GatewayRouteSpecHttp2RouteActionOutput) Rewrite() pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteActionRewrite, GatewayRouteSpecHttp2RouteActionRewriteOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttp2RouteAction](o, func(v GatewayRouteSpecHttp2RouteAction) *GatewayRouteSpecHttp2RouteActionRewrite { return v.Rewrite })
	return pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteActionRewrite, GatewayRouteSpecHttp2RouteActionRewriteOutput]{OutputState: value.OutputState}
}

// Target that traffic is routed to when a request matches the gateway route.
func (o GatewayRouteSpecHttp2RouteActionOutput) Target() pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteActionTarget, GatewayRouteSpecHttp2RouteActionTargetOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttp2RouteAction](o, func(v GatewayRouteSpecHttp2RouteAction) GatewayRouteSpecHttp2RouteActionTarget { return v.Target })
	return pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteActionTarget, GatewayRouteSpecHttp2RouteActionTargetOutput]{OutputState: value.OutputState}
}

type GatewayRouteSpecHttp2RouteActionRewrite struct {
	// Host name to rewrite.
	Hostname *GatewayRouteSpecHttp2RouteActionRewriteHostname `pulumi:"hostname"`
	// Exact path to rewrite.
	Path *GatewayRouteSpecHttp2RouteActionRewritePath `pulumi:"path"`
	// Specified beginning characters to rewrite.
	Prefix *GatewayRouteSpecHttp2RouteActionRewritePrefix `pulumi:"prefix"`
}

type GatewayRouteSpecHttp2RouteActionRewriteArgs struct {
	// Host name to rewrite.
	Hostname pulumix.Input[*GatewayRouteSpecHttp2RouteActionRewriteHostnameArgs] `pulumi:"hostname"`
	// Exact path to rewrite.
	Path pulumix.Input[*GatewayRouteSpecHttp2RouteActionRewritePathArgs] `pulumi:"path"`
	// Specified beginning characters to rewrite.
	Prefix pulumix.Input[*GatewayRouteSpecHttp2RouteActionRewritePrefixArgs] `pulumi:"prefix"`
}

func (GatewayRouteSpecHttp2RouteActionRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteActionRewrite)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteActionRewriteArgs) ToGatewayRouteSpecHttp2RouteActionRewriteOutput() GatewayRouteSpecHttp2RouteActionRewriteOutput {
	return i.ToGatewayRouteSpecHttp2RouteActionRewriteOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteActionRewriteArgs) ToGatewayRouteSpecHttp2RouteActionRewriteOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteActionRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteActionRewriteOutput)
}

func (i *GatewayRouteSpecHttp2RouteActionRewriteArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteActionRewriteArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteActionRewriteOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteActionRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteActionRewrite)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteActionRewriteOutput) ToGatewayRouteSpecHttp2RouteActionRewriteOutput() GatewayRouteSpecHttp2RouteActionRewriteOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteActionRewriteOutput) ToGatewayRouteSpecHttp2RouteActionRewriteOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteActionRewriteOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteActionRewriteOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2RouteActionRewrite] {
	return pulumix.Output[GatewayRouteSpecHttp2RouteActionRewrite]{
		OutputState: o.OutputState,
	}
}

// Host name to rewrite.
func (o GatewayRouteSpecHttp2RouteActionRewriteOutput) Hostname() pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteActionRewriteHostname, GatewayRouteSpecHttp2RouteActionRewriteHostnameOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttp2RouteActionRewrite](o, func(v GatewayRouteSpecHttp2RouteActionRewrite) *GatewayRouteSpecHttp2RouteActionRewriteHostname {
		return v.Hostname
	})
	return pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteActionRewriteHostname, GatewayRouteSpecHttp2RouteActionRewriteHostnameOutput]{OutputState: value.OutputState}
}

// Exact path to rewrite.
func (o GatewayRouteSpecHttp2RouteActionRewriteOutput) Path() pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteActionRewritePath, GatewayRouteSpecHttp2RouteActionRewritePathOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttp2RouteActionRewrite](o, func(v GatewayRouteSpecHttp2RouteActionRewrite) *GatewayRouteSpecHttp2RouteActionRewritePath {
		return v.Path
	})
	return pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteActionRewritePath, GatewayRouteSpecHttp2RouteActionRewritePathOutput]{OutputState: value.OutputState}
}

// Specified beginning characters to rewrite.
func (o GatewayRouteSpecHttp2RouteActionRewriteOutput) Prefix() pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteActionRewritePrefix, GatewayRouteSpecHttp2RouteActionRewritePrefixOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttp2RouteActionRewrite](o, func(v GatewayRouteSpecHttp2RouteActionRewrite) *GatewayRouteSpecHttp2RouteActionRewritePrefix {
		return v.Prefix
	})
	return pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteActionRewritePrefix, GatewayRouteSpecHttp2RouteActionRewritePrefixOutput]{OutputState: value.OutputState}
}

type GatewayRouteSpecHttp2RouteActionRewriteHostname struct {
	// Default target host name to write to. Valid values: `ENABLED`, `DISABLED`.
	DefaultTargetHostname string `pulumi:"defaultTargetHostname"`
}

type GatewayRouteSpecHttp2RouteActionRewriteHostnameArgs struct {
	// Default target host name to write to. Valid values: `ENABLED`, `DISABLED`.
	DefaultTargetHostname pulumix.Input[string] `pulumi:"defaultTargetHostname"`
}

func (GatewayRouteSpecHttp2RouteActionRewriteHostnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteActionRewriteHostname)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteActionRewriteHostnameArgs) ToGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput() GatewayRouteSpecHttp2RouteActionRewriteHostnameOutput {
	return i.ToGatewayRouteSpecHttp2RouteActionRewriteHostnameOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteActionRewriteHostnameArgs) ToGatewayRouteSpecHttp2RouteActionRewriteHostnameOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteActionRewriteHostnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteActionRewriteHostnameOutput)
}

func (i *GatewayRouteSpecHttp2RouteActionRewriteHostnameArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteActionRewriteHostnameArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteActionRewriteHostnameOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteActionRewriteHostnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteActionRewriteHostname)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteActionRewriteHostnameOutput) ToGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput() GatewayRouteSpecHttp2RouteActionRewriteHostnameOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteActionRewriteHostnameOutput) ToGatewayRouteSpecHttp2RouteActionRewriteHostnameOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteActionRewriteHostnameOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteActionRewriteHostnameOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2RouteActionRewriteHostname] {
	return pulumix.Output[GatewayRouteSpecHttp2RouteActionRewriteHostname]{
		OutputState: o.OutputState,
	}
}

// Default target host name to write to. Valid values: `ENABLED`, `DISABLED`.
func (o GatewayRouteSpecHttp2RouteActionRewriteHostnameOutput) DefaultTargetHostname() pulumix.Output[string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteActionRewriteHostname](o, func(v GatewayRouteSpecHttp2RouteActionRewriteHostname) string { return v.DefaultTargetHostname })
}

type GatewayRouteSpecHttp2RouteActionRewritePath struct {
	// The exact path to match on.
	Exact string `pulumi:"exact"`
}

type GatewayRouteSpecHttp2RouteActionRewritePathArgs struct {
	// The exact path to match on.
	Exact pulumix.Input[string] `pulumi:"exact"`
}

func (GatewayRouteSpecHttp2RouteActionRewritePathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteActionRewritePath)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteActionRewritePathArgs) ToGatewayRouteSpecHttp2RouteActionRewritePathOutput() GatewayRouteSpecHttp2RouteActionRewritePathOutput {
	return i.ToGatewayRouteSpecHttp2RouteActionRewritePathOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteActionRewritePathArgs) ToGatewayRouteSpecHttp2RouteActionRewritePathOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteActionRewritePathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteActionRewritePathOutput)
}

func (i *GatewayRouteSpecHttp2RouteActionRewritePathArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteActionRewritePathArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteActionRewritePathOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteActionRewritePathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteActionRewritePath)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteActionRewritePathOutput) ToGatewayRouteSpecHttp2RouteActionRewritePathOutput() GatewayRouteSpecHttp2RouteActionRewritePathOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteActionRewritePathOutput) ToGatewayRouteSpecHttp2RouteActionRewritePathOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteActionRewritePathOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteActionRewritePathOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2RouteActionRewritePath] {
	return pulumix.Output[GatewayRouteSpecHttp2RouteActionRewritePath]{
		OutputState: o.OutputState,
	}
}

// The exact path to match on.
func (o GatewayRouteSpecHttp2RouteActionRewritePathOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteActionRewritePath](o, func(v GatewayRouteSpecHttp2RouteActionRewritePath) string { return v.Exact })
}

type GatewayRouteSpecHttp2RouteActionRewritePrefix struct {
	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: `ENABLED`, `DISABLED`.
	DefaultPrefix *string `pulumi:"defaultPrefix"`
	// Value used to replace the incoming route prefix when rewritten.
	Value *string `pulumi:"value"`
}

type GatewayRouteSpecHttp2RouteActionRewritePrefixArgs struct {
	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: `ENABLED`, `DISABLED`.
	DefaultPrefix pulumix.Input[*string] `pulumi:"defaultPrefix"`
	// Value used to replace the incoming route prefix when rewritten.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (GatewayRouteSpecHttp2RouteActionRewritePrefixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteActionRewritePrefix)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteActionRewritePrefixArgs) ToGatewayRouteSpecHttp2RouteActionRewritePrefixOutput() GatewayRouteSpecHttp2RouteActionRewritePrefixOutput {
	return i.ToGatewayRouteSpecHttp2RouteActionRewritePrefixOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteActionRewritePrefixArgs) ToGatewayRouteSpecHttp2RouteActionRewritePrefixOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteActionRewritePrefixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteActionRewritePrefixOutput)
}

func (i *GatewayRouteSpecHttp2RouteActionRewritePrefixArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteActionRewritePrefixArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteActionRewritePrefixOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteActionRewritePrefixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteActionRewritePrefix)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteActionRewritePrefixOutput) ToGatewayRouteSpecHttp2RouteActionRewritePrefixOutput() GatewayRouteSpecHttp2RouteActionRewritePrefixOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteActionRewritePrefixOutput) ToGatewayRouteSpecHttp2RouteActionRewritePrefixOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteActionRewritePrefixOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteActionRewritePrefixOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2RouteActionRewritePrefix] {
	return pulumix.Output[GatewayRouteSpecHttp2RouteActionRewritePrefix]{
		OutputState: o.OutputState,
	}
}

// Default prefix used to replace the incoming route prefix when rewritten. Valid values: `ENABLED`, `DISABLED`.
func (o GatewayRouteSpecHttp2RouteActionRewritePrefixOutput) DefaultPrefix() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteActionRewritePrefix](o, func(v GatewayRouteSpecHttp2RouteActionRewritePrefix) *string { return v.DefaultPrefix })
}

// Value used to replace the incoming route prefix when rewritten.
func (o GatewayRouteSpecHttp2RouteActionRewritePrefixOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteActionRewritePrefix](o, func(v GatewayRouteSpecHttp2RouteActionRewritePrefix) *string { return v.Value })
}

type GatewayRouteSpecHttp2RouteActionTarget struct {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	Port *int `pulumi:"port"`
	// Virtual service gateway route target.
	VirtualService GatewayRouteSpecHttp2RouteActionTargetVirtualService `pulumi:"virtualService"`
}

type GatewayRouteSpecHttp2RouteActionTargetArgs struct {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Virtual service gateway route target.
	VirtualService pulumix.Input[*GatewayRouteSpecHttp2RouteActionTargetVirtualServiceArgs] `pulumi:"virtualService"`
}

func (GatewayRouteSpecHttp2RouteActionTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteActionTarget)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteActionTargetArgs) ToGatewayRouteSpecHttp2RouteActionTargetOutput() GatewayRouteSpecHttp2RouteActionTargetOutput {
	return i.ToGatewayRouteSpecHttp2RouteActionTargetOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteActionTargetArgs) ToGatewayRouteSpecHttp2RouteActionTargetOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteActionTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteActionTargetOutput)
}

func (i *GatewayRouteSpecHttp2RouteActionTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteActionTargetArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteActionTargetOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteActionTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteActionTarget)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteActionTargetOutput) ToGatewayRouteSpecHttp2RouteActionTargetOutput() GatewayRouteSpecHttp2RouteActionTargetOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteActionTargetOutput) ToGatewayRouteSpecHttp2RouteActionTargetOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteActionTargetOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteActionTargetOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2RouteActionTarget] {
	return pulumix.Output[GatewayRouteSpecHttp2RouteActionTarget]{
		OutputState: o.OutputState,
	}
}

// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
func (o GatewayRouteSpecHttp2RouteActionTargetOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteActionTarget](o, func(v GatewayRouteSpecHttp2RouteActionTarget) *int { return v.Port })
}

// Virtual service gateway route target.
func (o GatewayRouteSpecHttp2RouteActionTargetOutput) VirtualService() pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteActionTargetVirtualService, GatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttp2RouteActionTarget](o, func(v GatewayRouteSpecHttp2RouteActionTarget) GatewayRouteSpecHttp2RouteActionTargetVirtualService {
		return v.VirtualService
	})
	return pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteActionTargetVirtualService, GatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput]{OutputState: value.OutputState}
}

type GatewayRouteSpecHttp2RouteActionTargetVirtualService struct {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	VirtualServiceName string `pulumi:"virtualServiceName"`
}

type GatewayRouteSpecHttp2RouteActionTargetVirtualServiceArgs struct {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	VirtualServiceName pulumix.Input[string] `pulumi:"virtualServiceName"`
}

func (GatewayRouteSpecHttp2RouteActionTargetVirtualServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteActionTargetVirtualService)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteActionTargetVirtualServiceArgs) ToGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput() GatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput {
	return i.ToGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteActionTargetVirtualServiceArgs) ToGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput)
}

func (i *GatewayRouteSpecHttp2RouteActionTargetVirtualServiceArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteActionTargetVirtualServiceArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteActionTargetVirtualService)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput) ToGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput() GatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput) ToGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2RouteActionTargetVirtualService] {
	return pulumix.Output[GatewayRouteSpecHttp2RouteActionTargetVirtualService]{
		OutputState: o.OutputState,
	}
}

// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
func (o GatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput) VirtualServiceName() pulumix.Output[string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteActionTargetVirtualService](o, func(v GatewayRouteSpecHttp2RouteActionTargetVirtualService) string { return v.VirtualServiceName })
}

type GatewayRouteSpecHttp2RouteMatch struct {
	// Client request headers to match on.
	Headers []GatewayRouteSpecHttp2RouteMatchHeader `pulumi:"headers"`
	// Host name to rewrite.
	Hostname *GatewayRouteSpecHttp2RouteMatchHostname `pulumi:"hostname"`
	// Exact path to rewrite.
	Path *GatewayRouteSpecHttp2RouteMatchPath `pulumi:"path"`
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	Port *int `pulumi:"port"`
	// Specified beginning characters to rewrite.
	Prefix *string `pulumi:"prefix"`
	// Client request query parameters to match on.
	QueryParameters []GatewayRouteSpecHttp2RouteMatchQueryParameter `pulumi:"queryParameters"`
}

type GatewayRouteSpecHttp2RouteMatchArgs struct {
	// Client request headers to match on.
	Headers pulumix.Input[[]*GatewayRouteSpecHttp2RouteMatchHeaderArgs] `pulumi:"headers"`
	// Host name to rewrite.
	Hostname pulumix.Input[*GatewayRouteSpecHttp2RouteMatchHostnameArgs] `pulumi:"hostname"`
	// Exact path to rewrite.
	Path pulumix.Input[*GatewayRouteSpecHttp2RouteMatchPathArgs] `pulumi:"path"`
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Specified beginning characters to rewrite.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Client request query parameters to match on.
	QueryParameters pulumix.Input[[]*GatewayRouteSpecHttp2RouteMatchQueryParameterArgs] `pulumi:"queryParameters"`
}

func (GatewayRouteSpecHttp2RouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatch)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteMatchArgs) ToGatewayRouteSpecHttp2RouteMatchOutput() GatewayRouteSpecHttp2RouteMatchOutput {
	return i.ToGatewayRouteSpecHttp2RouteMatchOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteMatchArgs) ToGatewayRouteSpecHttp2RouteMatchOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteMatchOutput)
}

func (i *GatewayRouteSpecHttp2RouteMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteMatchArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteMatchOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatch)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteMatchOutput) ToGatewayRouteSpecHttp2RouteMatchOutput() GatewayRouteSpecHttp2RouteMatchOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchOutput) ToGatewayRouteSpecHttp2RouteMatchOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2RouteMatch] {
	return pulumix.Output[GatewayRouteSpecHttp2RouteMatch]{
		OutputState: o.OutputState,
	}
}

// Client request headers to match on.
func (o GatewayRouteSpecHttp2RouteMatchOutput) Headers() pulumix.GArrayOutput[GatewayRouteSpecHttp2RouteMatchHeader, GatewayRouteSpecHttp2RouteMatchHeaderOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttp2RouteMatch](o, func(v GatewayRouteSpecHttp2RouteMatch) []GatewayRouteSpecHttp2RouteMatchHeader { return v.Headers })
	return pulumix.GArrayOutput[GatewayRouteSpecHttp2RouteMatchHeader, GatewayRouteSpecHttp2RouteMatchHeaderOutput]{OutputState: value.OutputState}
}

// Host name to rewrite.
func (o GatewayRouteSpecHttp2RouteMatchOutput) Hostname() pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteMatchHostname, GatewayRouteSpecHttp2RouteMatchHostnameOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttp2RouteMatch](o, func(v GatewayRouteSpecHttp2RouteMatch) *GatewayRouteSpecHttp2RouteMatchHostname { return v.Hostname })
	return pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteMatchHostname, GatewayRouteSpecHttp2RouteMatchHostnameOutput]{OutputState: value.OutputState}
}

// Exact path to rewrite.
func (o GatewayRouteSpecHttp2RouteMatchOutput) Path() pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteMatchPath, GatewayRouteSpecHttp2RouteMatchPathOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttp2RouteMatch](o, func(v GatewayRouteSpecHttp2RouteMatch) *GatewayRouteSpecHttp2RouteMatchPath { return v.Path })
	return pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteMatchPath, GatewayRouteSpecHttp2RouteMatchPathOutput]{OutputState: value.OutputState}
}

// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
func (o GatewayRouteSpecHttp2RouteMatchOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatch](o, func(v GatewayRouteSpecHttp2RouteMatch) *int { return v.Port })
}

// Specified beginning characters to rewrite.
func (o GatewayRouteSpecHttp2RouteMatchOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatch](o, func(v GatewayRouteSpecHttp2RouteMatch) *string { return v.Prefix })
}

// Client request query parameters to match on.
func (o GatewayRouteSpecHttp2RouteMatchOutput) QueryParameters() pulumix.GArrayOutput[GatewayRouteSpecHttp2RouteMatchQueryParameter, GatewayRouteSpecHttp2RouteMatchQueryParameterOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttp2RouteMatch](o, func(v GatewayRouteSpecHttp2RouteMatch) []GatewayRouteSpecHttp2RouteMatchQueryParameter {
		return v.QueryParameters
	})
	return pulumix.GArrayOutput[GatewayRouteSpecHttp2RouteMatchQueryParameter, GatewayRouteSpecHttp2RouteMatchQueryParameterOutput]{OutputState: value.OutputState}
}

type GatewayRouteSpecHttp2RouteMatchHeader struct {
	// If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
	Invert *bool `pulumi:"invert"`
	// Method and value to match the header value sent with a request. Specify one match method.
	Match *GatewayRouteSpecHttp2RouteMatchHeaderMatch `pulumi:"match"`
	// Name for the HTTP header in the client request that will be matched on.
	Name string `pulumi:"name"`
}

type GatewayRouteSpecHttp2RouteMatchHeaderArgs struct {
	// If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
	Invert pulumix.Input[*bool] `pulumi:"invert"`
	// Method and value to match the header value sent with a request. Specify one match method.
	Match pulumix.Input[*GatewayRouteSpecHttp2RouteMatchHeaderMatchArgs] `pulumi:"match"`
	// Name for the HTTP header in the client request that will be matched on.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GatewayRouteSpecHttp2RouteMatchHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatchHeader)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteMatchHeaderArgs) ToGatewayRouteSpecHttp2RouteMatchHeaderOutput() GatewayRouteSpecHttp2RouteMatchHeaderOutput {
	return i.ToGatewayRouteSpecHttp2RouteMatchHeaderOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteMatchHeaderArgs) ToGatewayRouteSpecHttp2RouteMatchHeaderOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteMatchHeaderOutput)
}

func (i *GatewayRouteSpecHttp2RouteMatchHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteMatchHeaderArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteMatchHeaderOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteMatchHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatchHeader)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteMatchHeaderOutput) ToGatewayRouteSpecHttp2RouteMatchHeaderOutput() GatewayRouteSpecHttp2RouteMatchHeaderOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchHeaderOutput) ToGatewayRouteSpecHttp2RouteMatchHeaderOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchHeaderOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2RouteMatchHeader] {
	return pulumix.Output[GatewayRouteSpecHttp2RouteMatchHeader]{
		OutputState: o.OutputState,
	}
}

// If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
func (o GatewayRouteSpecHttp2RouteMatchHeaderOutput) Invert() pulumix.Output[*bool] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatchHeader](o, func(v GatewayRouteSpecHttp2RouteMatchHeader) *bool { return v.Invert })
}

// Method and value to match the header value sent with a request. Specify one match method.
func (o GatewayRouteSpecHttp2RouteMatchHeaderOutput) Match() pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteMatchHeaderMatch, GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttp2RouteMatchHeader](o, func(v GatewayRouteSpecHttp2RouteMatchHeader) *GatewayRouteSpecHttp2RouteMatchHeaderMatch {
		return v.Match
	})
	return pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteMatchHeaderMatch, GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput]{OutputState: value.OutputState}
}

// Name for the HTTP header in the client request that will be matched on.
func (o GatewayRouteSpecHttp2RouteMatchHeaderOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatchHeader](o, func(v GatewayRouteSpecHttp2RouteMatchHeader) string { return v.Name })
}

type GatewayRouteSpecHttp2RouteMatchHeaderMatch struct {
	// Value used to replace matched path.
	Exact *string `pulumi:"exact"`
	// Specified beginning characters to rewrite.
	Prefix *string `pulumi:"prefix"`
	// Object that specifies the range of numbers that the header value sent by the client must be included in.
	Range *GatewayRouteSpecHttp2RouteMatchHeaderMatchRange `pulumi:"range"`
	// Header value sent by the client must include the specified characters.
	Regex *string `pulumi:"regex"`
	// Header value sent by the client must end with the specified characters.
	Suffix *string `pulumi:"suffix"`
}

type GatewayRouteSpecHttp2RouteMatchHeaderMatchArgs struct {
	// Value used to replace matched path.
	Exact pulumix.Input[*string] `pulumi:"exact"`
	// Specified beginning characters to rewrite.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Object that specifies the range of numbers that the header value sent by the client must be included in.
	Range pulumix.Input[*GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeArgs] `pulumi:"range"`
	// Header value sent by the client must include the specified characters.
	Regex pulumix.Input[*string] `pulumi:"regex"`
	// Header value sent by the client must end with the specified characters.
	Suffix pulumix.Input[*string] `pulumi:"suffix"`
}

func (GatewayRouteSpecHttp2RouteMatchHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatchHeaderMatch)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteMatchHeaderMatchArgs) ToGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput() GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput {
	return i.ToGatewayRouteSpecHttp2RouteMatchHeaderMatchOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteMatchHeaderMatchArgs) ToGatewayRouteSpecHttp2RouteMatchHeaderMatchOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput)
}

func (i *GatewayRouteSpecHttp2RouteMatchHeaderMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteMatchHeaderMatchArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatchHeaderMatch)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) ToGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput() GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) ToGatewayRouteSpecHttp2RouteMatchHeaderMatchOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2RouteMatchHeaderMatch] {
	return pulumix.Output[GatewayRouteSpecHttp2RouteMatchHeaderMatch]{
		OutputState: o.OutputState,
	}
}

// Value used to replace matched path.
func (o GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatchHeaderMatch](o, func(v GatewayRouteSpecHttp2RouteMatchHeaderMatch) *string { return v.Exact })
}

// Specified beginning characters to rewrite.
func (o GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatchHeaderMatch](o, func(v GatewayRouteSpecHttp2RouteMatchHeaderMatch) *string { return v.Prefix })
}

// Object that specifies the range of numbers that the header value sent by the client must be included in.
func (o GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) Range() pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteMatchHeaderMatchRange, GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttp2RouteMatchHeaderMatch](o, func(v GatewayRouteSpecHttp2RouteMatchHeaderMatch) *GatewayRouteSpecHttp2RouteMatchHeaderMatchRange {
		return v.Range
	})
	return pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteMatchHeaderMatchRange, GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput]{OutputState: value.OutputState}
}

// Header value sent by the client must include the specified characters.
func (o GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) Regex() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatchHeaderMatch](o, func(v GatewayRouteSpecHttp2RouteMatchHeaderMatch) *string { return v.Regex })
}

// Header value sent by the client must end with the specified characters.
func (o GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) Suffix() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatchHeaderMatch](o, func(v GatewayRouteSpecHttp2RouteMatchHeaderMatch) *string { return v.Suffix })
}

type GatewayRouteSpecHttp2RouteMatchHeaderMatchRange struct {
	// End of the range.
	End int `pulumi:"end"`
	// Start of the range.
	Start int `pulumi:"start"`
}

type GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeArgs struct {
	// End of the range.
	End pulumix.Input[int] `pulumi:"end"`
	// Start of the range.
	Start pulumix.Input[int] `pulumi:"start"`
}

func (GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatchHeaderMatchRange)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ToGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput() GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return i.ToGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ToGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput)
}

func (i *GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatchHeaderMatchRange)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ToGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput() GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ToGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2RouteMatchHeaderMatchRange] {
	return pulumix.Output[GatewayRouteSpecHttp2RouteMatchHeaderMatchRange]{
		OutputState: o.OutputState,
	}
}

// End of the range.
func (o GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) End() pulumix.Output[int] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatchHeaderMatchRange](o, func(v GatewayRouteSpecHttp2RouteMatchHeaderMatchRange) int { return v.End })
}

// Start of the range.
func (o GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) Start() pulumix.Output[int] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatchHeaderMatchRange](o, func(v GatewayRouteSpecHttp2RouteMatchHeaderMatchRange) int { return v.Start })
}

type GatewayRouteSpecHttp2RouteMatchHostname struct {
	// Exact host name to match on.
	Exact *string `pulumi:"exact"`
	// Specified ending characters of the host name to match on.
	Suffix *string `pulumi:"suffix"`
}

type GatewayRouteSpecHttp2RouteMatchHostnameArgs struct {
	// Exact host name to match on.
	Exact pulumix.Input[*string] `pulumi:"exact"`
	// Specified ending characters of the host name to match on.
	Suffix pulumix.Input[*string] `pulumi:"suffix"`
}

func (GatewayRouteSpecHttp2RouteMatchHostnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatchHostname)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteMatchHostnameArgs) ToGatewayRouteSpecHttp2RouteMatchHostnameOutput() GatewayRouteSpecHttp2RouteMatchHostnameOutput {
	return i.ToGatewayRouteSpecHttp2RouteMatchHostnameOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteMatchHostnameArgs) ToGatewayRouteSpecHttp2RouteMatchHostnameOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchHostnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteMatchHostnameOutput)
}

func (i *GatewayRouteSpecHttp2RouteMatchHostnameArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteMatchHostnameArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteMatchHostnameOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteMatchHostnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatchHostname)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteMatchHostnameOutput) ToGatewayRouteSpecHttp2RouteMatchHostnameOutput() GatewayRouteSpecHttp2RouteMatchHostnameOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchHostnameOutput) ToGatewayRouteSpecHttp2RouteMatchHostnameOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchHostnameOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchHostnameOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2RouteMatchHostname] {
	return pulumix.Output[GatewayRouteSpecHttp2RouteMatchHostname]{
		OutputState: o.OutputState,
	}
}

// Exact host name to match on.
func (o GatewayRouteSpecHttp2RouteMatchHostnameOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatchHostname](o, func(v GatewayRouteSpecHttp2RouteMatchHostname) *string { return v.Exact })
}

// Specified ending characters of the host name to match on.
func (o GatewayRouteSpecHttp2RouteMatchHostnameOutput) Suffix() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatchHostname](o, func(v GatewayRouteSpecHttp2RouteMatchHostname) *string { return v.Suffix })
}

type GatewayRouteSpecHttp2RouteMatchPath struct {
	// The exact path to match on.
	Exact *string `pulumi:"exact"`
	// The regex used to match the path.
	Regex *string `pulumi:"regex"`
}

type GatewayRouteSpecHttp2RouteMatchPathArgs struct {
	// The exact path to match on.
	Exact pulumix.Input[*string] `pulumi:"exact"`
	// The regex used to match the path.
	Regex pulumix.Input[*string] `pulumi:"regex"`
}

func (GatewayRouteSpecHttp2RouteMatchPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatchPath)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteMatchPathArgs) ToGatewayRouteSpecHttp2RouteMatchPathOutput() GatewayRouteSpecHttp2RouteMatchPathOutput {
	return i.ToGatewayRouteSpecHttp2RouteMatchPathOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteMatchPathArgs) ToGatewayRouteSpecHttp2RouteMatchPathOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteMatchPathOutput)
}

func (i *GatewayRouteSpecHttp2RouteMatchPathArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteMatchPathArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteMatchPathOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteMatchPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatchPath)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteMatchPathOutput) ToGatewayRouteSpecHttp2RouteMatchPathOutput() GatewayRouteSpecHttp2RouteMatchPathOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchPathOutput) ToGatewayRouteSpecHttp2RouteMatchPathOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchPathOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchPathOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2RouteMatchPath] {
	return pulumix.Output[GatewayRouteSpecHttp2RouteMatchPath]{
		OutputState: o.OutputState,
	}
}

// The exact path to match on.
func (o GatewayRouteSpecHttp2RouteMatchPathOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatchPath](o, func(v GatewayRouteSpecHttp2RouteMatchPath) *string { return v.Exact })
}

// The regex used to match the path.
func (o GatewayRouteSpecHttp2RouteMatchPathOutput) Regex() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatchPath](o, func(v GatewayRouteSpecHttp2RouteMatchPath) *string { return v.Regex })
}

type GatewayRouteSpecHttp2RouteMatchQueryParameter struct {
	// The query parameter to match on.
	Match *GatewayRouteSpecHttp2RouteMatchQueryParameterMatch `pulumi:"match"`
	// Name for the query parameter that will be matched on.
	Name string `pulumi:"name"`
}

type GatewayRouteSpecHttp2RouteMatchQueryParameterArgs struct {
	// The query parameter to match on.
	Match pulumix.Input[*GatewayRouteSpecHttp2RouteMatchQueryParameterMatchArgs] `pulumi:"match"`
	// Name for the query parameter that will be matched on.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GatewayRouteSpecHttp2RouteMatchQueryParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatchQueryParameter)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteMatchQueryParameterArgs) ToGatewayRouteSpecHttp2RouteMatchQueryParameterOutput() GatewayRouteSpecHttp2RouteMatchQueryParameterOutput {
	return i.ToGatewayRouteSpecHttp2RouteMatchQueryParameterOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteMatchQueryParameterArgs) ToGatewayRouteSpecHttp2RouteMatchQueryParameterOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchQueryParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteMatchQueryParameterOutput)
}

func (i *GatewayRouteSpecHttp2RouteMatchQueryParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteMatchQueryParameterArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteMatchQueryParameterOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteMatchQueryParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatchQueryParameter)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteMatchQueryParameterOutput) ToGatewayRouteSpecHttp2RouteMatchQueryParameterOutput() GatewayRouteSpecHttp2RouteMatchQueryParameterOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchQueryParameterOutput) ToGatewayRouteSpecHttp2RouteMatchQueryParameterOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchQueryParameterOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchQueryParameterOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2RouteMatchQueryParameter] {
	return pulumix.Output[GatewayRouteSpecHttp2RouteMatchQueryParameter]{
		OutputState: o.OutputState,
	}
}

// The query parameter to match on.
func (o GatewayRouteSpecHttp2RouteMatchQueryParameterOutput) Match() pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteMatchQueryParameterMatch, GatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttp2RouteMatchQueryParameter](o, func(v GatewayRouteSpecHttp2RouteMatchQueryParameter) *GatewayRouteSpecHttp2RouteMatchQueryParameterMatch {
		return v.Match
	})
	return pulumix.GPtrOutput[GatewayRouteSpecHttp2RouteMatchQueryParameterMatch, GatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput]{OutputState: value.OutputState}
}

// Name for the query parameter that will be matched on.
func (o GatewayRouteSpecHttp2RouteMatchQueryParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatchQueryParameter](o, func(v GatewayRouteSpecHttp2RouteMatchQueryParameter) string { return v.Name })
}

type GatewayRouteSpecHttp2RouteMatchQueryParameterMatch struct {
	// Value used to replace matched path.
	Exact *string `pulumi:"exact"`
}

type GatewayRouteSpecHttp2RouteMatchQueryParameterMatchArgs struct {
	// Value used to replace matched path.
	Exact pulumix.Input[*string] `pulumi:"exact"`
}

func (GatewayRouteSpecHttp2RouteMatchQueryParameterMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatchQueryParameterMatch)(nil)).Elem()
}

func (i GatewayRouteSpecHttp2RouteMatchQueryParameterMatchArgs) ToGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput() GatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return i.ToGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttp2RouteMatchQueryParameterMatchArgs) ToGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput)
}

func (i *GatewayRouteSpecHttp2RouteMatchQueryParameterMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttp2RouteMatchQueryParameterMatchArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttp2RouteMatchQueryParameterMatch)(nil)).Elem()
}

func (o GatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput) ToGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput() GatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput) ToGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) GatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return o
}

func (o GatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttp2RouteMatchQueryParameterMatch] {
	return pulumix.Output[GatewayRouteSpecHttp2RouteMatchQueryParameterMatch]{
		OutputState: o.OutputState,
	}
}

// Value used to replace matched path.
func (o GatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttp2RouteMatchQueryParameterMatch](o, func(v GatewayRouteSpecHttp2RouteMatchQueryParameterMatch) *string { return v.Exact })
}

type GatewayRouteSpecHttpRoute struct {
	// Action to take if a match is determined.
	Action GatewayRouteSpecHttpRouteAction `pulumi:"action"`
	// Criteria for determining a request match.
	Match GatewayRouteSpecHttpRouteMatch `pulumi:"match"`
}

type GatewayRouteSpecHttpRouteArgs struct {
	// Action to take if a match is determined.
	Action pulumix.Input[*GatewayRouteSpecHttpRouteActionArgs] `pulumi:"action"`
	// Criteria for determining a request match.
	Match pulumix.Input[*GatewayRouteSpecHttpRouteMatchArgs] `pulumi:"match"`
}

func (GatewayRouteSpecHttpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRoute)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteArgs) ToGatewayRouteSpecHttpRouteOutput() GatewayRouteSpecHttpRouteOutput {
	return i.ToGatewayRouteSpecHttpRouteOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteArgs) ToGatewayRouteSpecHttpRouteOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteOutput)
}

func (i *GatewayRouteSpecHttpRouteArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRoute)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteOutput) ToGatewayRouteSpecHttpRouteOutput() GatewayRouteSpecHttpRouteOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteOutput) ToGatewayRouteSpecHttpRouteOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRoute] {
	return pulumix.Output[GatewayRouteSpecHttpRoute]{
		OutputState: o.OutputState,
	}
}

// Action to take if a match is determined.
func (o GatewayRouteSpecHttpRouteOutput) Action() pulumix.GPtrOutput[GatewayRouteSpecHttpRouteAction, GatewayRouteSpecHttpRouteActionOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttpRoute](o, func(v GatewayRouteSpecHttpRoute) GatewayRouteSpecHttpRouteAction { return v.Action })
	return pulumix.GPtrOutput[GatewayRouteSpecHttpRouteAction, GatewayRouteSpecHttpRouteActionOutput]{OutputState: value.OutputState}
}

// Criteria for determining a request match.
func (o GatewayRouteSpecHttpRouteOutput) Match() pulumix.GPtrOutput[GatewayRouteSpecHttpRouteMatch, GatewayRouteSpecHttpRouteMatchOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttpRoute](o, func(v GatewayRouteSpecHttpRoute) GatewayRouteSpecHttpRouteMatch { return v.Match })
	return pulumix.GPtrOutput[GatewayRouteSpecHttpRouteMatch, GatewayRouteSpecHttpRouteMatchOutput]{OutputState: value.OutputState}
}

type GatewayRouteSpecHttpRouteAction struct {
	// Gateway route action to rewrite.
	Rewrite *GatewayRouteSpecHttpRouteActionRewrite `pulumi:"rewrite"`
	// Target that traffic is routed to when a request matches the gateway route.
	Target GatewayRouteSpecHttpRouteActionTarget `pulumi:"target"`
}

type GatewayRouteSpecHttpRouteActionArgs struct {
	// Gateway route action to rewrite.
	Rewrite pulumix.Input[*GatewayRouteSpecHttpRouteActionRewriteArgs] `pulumi:"rewrite"`
	// Target that traffic is routed to when a request matches the gateway route.
	Target pulumix.Input[*GatewayRouteSpecHttpRouteActionTargetArgs] `pulumi:"target"`
}

func (GatewayRouteSpecHttpRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteAction)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteActionArgs) ToGatewayRouteSpecHttpRouteActionOutput() GatewayRouteSpecHttpRouteActionOutput {
	return i.ToGatewayRouteSpecHttpRouteActionOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteActionArgs) ToGatewayRouteSpecHttpRouteActionOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteActionOutput)
}

func (i *GatewayRouteSpecHttpRouteActionArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteActionArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteActionOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteAction)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteActionOutput) ToGatewayRouteSpecHttpRouteActionOutput() GatewayRouteSpecHttpRouteActionOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteActionOutput) ToGatewayRouteSpecHttpRouteActionOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteActionOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteActionOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRouteAction] {
	return pulumix.Output[GatewayRouteSpecHttpRouteAction]{
		OutputState: o.OutputState,
	}
}

// Gateway route action to rewrite.
func (o GatewayRouteSpecHttpRouteActionOutput) Rewrite() pulumix.GPtrOutput[GatewayRouteSpecHttpRouteActionRewrite, GatewayRouteSpecHttpRouteActionRewriteOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttpRouteAction](o, func(v GatewayRouteSpecHttpRouteAction) *GatewayRouteSpecHttpRouteActionRewrite { return v.Rewrite })
	return pulumix.GPtrOutput[GatewayRouteSpecHttpRouteActionRewrite, GatewayRouteSpecHttpRouteActionRewriteOutput]{OutputState: value.OutputState}
}

// Target that traffic is routed to when a request matches the gateway route.
func (o GatewayRouteSpecHttpRouteActionOutput) Target() pulumix.GPtrOutput[GatewayRouteSpecHttpRouteActionTarget, GatewayRouteSpecHttpRouteActionTargetOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttpRouteAction](o, func(v GatewayRouteSpecHttpRouteAction) GatewayRouteSpecHttpRouteActionTarget { return v.Target })
	return pulumix.GPtrOutput[GatewayRouteSpecHttpRouteActionTarget, GatewayRouteSpecHttpRouteActionTargetOutput]{OutputState: value.OutputState}
}

type GatewayRouteSpecHttpRouteActionRewrite struct {
	// Host name to rewrite.
	Hostname *GatewayRouteSpecHttpRouteActionRewriteHostname `pulumi:"hostname"`
	// Exact path to rewrite.
	Path *GatewayRouteSpecHttpRouteActionRewritePath `pulumi:"path"`
	// Specified beginning characters to rewrite.
	Prefix *GatewayRouteSpecHttpRouteActionRewritePrefix `pulumi:"prefix"`
}

type GatewayRouteSpecHttpRouteActionRewriteArgs struct {
	// Host name to rewrite.
	Hostname pulumix.Input[*GatewayRouteSpecHttpRouteActionRewriteHostnameArgs] `pulumi:"hostname"`
	// Exact path to rewrite.
	Path pulumix.Input[*GatewayRouteSpecHttpRouteActionRewritePathArgs] `pulumi:"path"`
	// Specified beginning characters to rewrite.
	Prefix pulumix.Input[*GatewayRouteSpecHttpRouteActionRewritePrefixArgs] `pulumi:"prefix"`
}

func (GatewayRouteSpecHttpRouteActionRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteActionRewrite)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteActionRewriteArgs) ToGatewayRouteSpecHttpRouteActionRewriteOutput() GatewayRouteSpecHttpRouteActionRewriteOutput {
	return i.ToGatewayRouteSpecHttpRouteActionRewriteOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteActionRewriteArgs) ToGatewayRouteSpecHttpRouteActionRewriteOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteActionRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteActionRewriteOutput)
}

func (i *GatewayRouteSpecHttpRouteActionRewriteArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteActionRewriteArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteActionRewriteOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteActionRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteActionRewrite)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteActionRewriteOutput) ToGatewayRouteSpecHttpRouteActionRewriteOutput() GatewayRouteSpecHttpRouteActionRewriteOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteActionRewriteOutput) ToGatewayRouteSpecHttpRouteActionRewriteOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteActionRewriteOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteActionRewriteOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRouteActionRewrite] {
	return pulumix.Output[GatewayRouteSpecHttpRouteActionRewrite]{
		OutputState: o.OutputState,
	}
}

// Host name to rewrite.
func (o GatewayRouteSpecHttpRouteActionRewriteOutput) Hostname() pulumix.GPtrOutput[GatewayRouteSpecHttpRouteActionRewriteHostname, GatewayRouteSpecHttpRouteActionRewriteHostnameOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttpRouteActionRewrite](o, func(v GatewayRouteSpecHttpRouteActionRewrite) *GatewayRouteSpecHttpRouteActionRewriteHostname {
		return v.Hostname
	})
	return pulumix.GPtrOutput[GatewayRouteSpecHttpRouteActionRewriteHostname, GatewayRouteSpecHttpRouteActionRewriteHostnameOutput]{OutputState: value.OutputState}
}

// Exact path to rewrite.
func (o GatewayRouteSpecHttpRouteActionRewriteOutput) Path() pulumix.GPtrOutput[GatewayRouteSpecHttpRouteActionRewritePath, GatewayRouteSpecHttpRouteActionRewritePathOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttpRouteActionRewrite](o, func(v GatewayRouteSpecHttpRouteActionRewrite) *GatewayRouteSpecHttpRouteActionRewritePath {
		return v.Path
	})
	return pulumix.GPtrOutput[GatewayRouteSpecHttpRouteActionRewritePath, GatewayRouteSpecHttpRouteActionRewritePathOutput]{OutputState: value.OutputState}
}

// Specified beginning characters to rewrite.
func (o GatewayRouteSpecHttpRouteActionRewriteOutput) Prefix() pulumix.GPtrOutput[GatewayRouteSpecHttpRouteActionRewritePrefix, GatewayRouteSpecHttpRouteActionRewritePrefixOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttpRouteActionRewrite](o, func(v GatewayRouteSpecHttpRouteActionRewrite) *GatewayRouteSpecHttpRouteActionRewritePrefix {
		return v.Prefix
	})
	return pulumix.GPtrOutput[GatewayRouteSpecHttpRouteActionRewritePrefix, GatewayRouteSpecHttpRouteActionRewritePrefixOutput]{OutputState: value.OutputState}
}

type GatewayRouteSpecHttpRouteActionRewriteHostname struct {
	// Default target host name to write to. Valid values: `ENABLED`, `DISABLED`.
	DefaultTargetHostname string `pulumi:"defaultTargetHostname"`
}

type GatewayRouteSpecHttpRouteActionRewriteHostnameArgs struct {
	// Default target host name to write to. Valid values: `ENABLED`, `DISABLED`.
	DefaultTargetHostname pulumix.Input[string] `pulumi:"defaultTargetHostname"`
}

func (GatewayRouteSpecHttpRouteActionRewriteHostnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteActionRewriteHostname)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteActionRewriteHostnameArgs) ToGatewayRouteSpecHttpRouteActionRewriteHostnameOutput() GatewayRouteSpecHttpRouteActionRewriteHostnameOutput {
	return i.ToGatewayRouteSpecHttpRouteActionRewriteHostnameOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteActionRewriteHostnameArgs) ToGatewayRouteSpecHttpRouteActionRewriteHostnameOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteActionRewriteHostnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteActionRewriteHostnameOutput)
}

func (i *GatewayRouteSpecHttpRouteActionRewriteHostnameArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteActionRewriteHostnameArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteActionRewriteHostnameOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteActionRewriteHostnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteActionRewriteHostname)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteActionRewriteHostnameOutput) ToGatewayRouteSpecHttpRouteActionRewriteHostnameOutput() GatewayRouteSpecHttpRouteActionRewriteHostnameOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteActionRewriteHostnameOutput) ToGatewayRouteSpecHttpRouteActionRewriteHostnameOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteActionRewriteHostnameOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteActionRewriteHostnameOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRouteActionRewriteHostname] {
	return pulumix.Output[GatewayRouteSpecHttpRouteActionRewriteHostname]{
		OutputState: o.OutputState,
	}
}

// Default target host name to write to. Valid values: `ENABLED`, `DISABLED`.
func (o GatewayRouteSpecHttpRouteActionRewriteHostnameOutput) DefaultTargetHostname() pulumix.Output[string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteActionRewriteHostname](o, func(v GatewayRouteSpecHttpRouteActionRewriteHostname) string { return v.DefaultTargetHostname })
}

type GatewayRouteSpecHttpRouteActionRewritePath struct {
	// The exact path to match on.
	Exact string `pulumi:"exact"`
}

type GatewayRouteSpecHttpRouteActionRewritePathArgs struct {
	// The exact path to match on.
	Exact pulumix.Input[string] `pulumi:"exact"`
}

func (GatewayRouteSpecHttpRouteActionRewritePathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteActionRewritePath)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteActionRewritePathArgs) ToGatewayRouteSpecHttpRouteActionRewritePathOutput() GatewayRouteSpecHttpRouteActionRewritePathOutput {
	return i.ToGatewayRouteSpecHttpRouteActionRewritePathOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteActionRewritePathArgs) ToGatewayRouteSpecHttpRouteActionRewritePathOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteActionRewritePathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteActionRewritePathOutput)
}

func (i *GatewayRouteSpecHttpRouteActionRewritePathArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteActionRewritePathArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteActionRewritePathOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteActionRewritePathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteActionRewritePath)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteActionRewritePathOutput) ToGatewayRouteSpecHttpRouteActionRewritePathOutput() GatewayRouteSpecHttpRouteActionRewritePathOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteActionRewritePathOutput) ToGatewayRouteSpecHttpRouteActionRewritePathOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteActionRewritePathOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteActionRewritePathOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRouteActionRewritePath] {
	return pulumix.Output[GatewayRouteSpecHttpRouteActionRewritePath]{
		OutputState: o.OutputState,
	}
}

// The exact path to match on.
func (o GatewayRouteSpecHttpRouteActionRewritePathOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteActionRewritePath](o, func(v GatewayRouteSpecHttpRouteActionRewritePath) string { return v.Exact })
}

type GatewayRouteSpecHttpRouteActionRewritePrefix struct {
	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: `ENABLED`, `DISABLED`.
	DefaultPrefix *string `pulumi:"defaultPrefix"`
	// Value used to replace the incoming route prefix when rewritten.
	Value *string `pulumi:"value"`
}

type GatewayRouteSpecHttpRouteActionRewritePrefixArgs struct {
	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: `ENABLED`, `DISABLED`.
	DefaultPrefix pulumix.Input[*string] `pulumi:"defaultPrefix"`
	// Value used to replace the incoming route prefix when rewritten.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (GatewayRouteSpecHttpRouteActionRewritePrefixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteActionRewritePrefix)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteActionRewritePrefixArgs) ToGatewayRouteSpecHttpRouteActionRewritePrefixOutput() GatewayRouteSpecHttpRouteActionRewritePrefixOutput {
	return i.ToGatewayRouteSpecHttpRouteActionRewritePrefixOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteActionRewritePrefixArgs) ToGatewayRouteSpecHttpRouteActionRewritePrefixOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteActionRewritePrefixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteActionRewritePrefixOutput)
}

func (i *GatewayRouteSpecHttpRouteActionRewritePrefixArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteActionRewritePrefixArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteActionRewritePrefixOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteActionRewritePrefixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteActionRewritePrefix)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteActionRewritePrefixOutput) ToGatewayRouteSpecHttpRouteActionRewritePrefixOutput() GatewayRouteSpecHttpRouteActionRewritePrefixOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteActionRewritePrefixOutput) ToGatewayRouteSpecHttpRouteActionRewritePrefixOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteActionRewritePrefixOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteActionRewritePrefixOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRouteActionRewritePrefix] {
	return pulumix.Output[GatewayRouteSpecHttpRouteActionRewritePrefix]{
		OutputState: o.OutputState,
	}
}

// Default prefix used to replace the incoming route prefix when rewritten. Valid values: `ENABLED`, `DISABLED`.
func (o GatewayRouteSpecHttpRouteActionRewritePrefixOutput) DefaultPrefix() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteActionRewritePrefix](o, func(v GatewayRouteSpecHttpRouteActionRewritePrefix) *string { return v.DefaultPrefix })
}

// Value used to replace the incoming route prefix when rewritten.
func (o GatewayRouteSpecHttpRouteActionRewritePrefixOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteActionRewritePrefix](o, func(v GatewayRouteSpecHttpRouteActionRewritePrefix) *string { return v.Value })
}

type GatewayRouteSpecHttpRouteActionTarget struct {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	Port *int `pulumi:"port"`
	// Virtual service gateway route target.
	VirtualService GatewayRouteSpecHttpRouteActionTargetVirtualService `pulumi:"virtualService"`
}

type GatewayRouteSpecHttpRouteActionTargetArgs struct {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Virtual service gateway route target.
	VirtualService pulumix.Input[*GatewayRouteSpecHttpRouteActionTargetVirtualServiceArgs] `pulumi:"virtualService"`
}

func (GatewayRouteSpecHttpRouteActionTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteActionTarget)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteActionTargetArgs) ToGatewayRouteSpecHttpRouteActionTargetOutput() GatewayRouteSpecHttpRouteActionTargetOutput {
	return i.ToGatewayRouteSpecHttpRouteActionTargetOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteActionTargetArgs) ToGatewayRouteSpecHttpRouteActionTargetOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteActionTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteActionTargetOutput)
}

func (i *GatewayRouteSpecHttpRouteActionTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteActionTargetArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteActionTargetOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteActionTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteActionTarget)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteActionTargetOutput) ToGatewayRouteSpecHttpRouteActionTargetOutput() GatewayRouteSpecHttpRouteActionTargetOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteActionTargetOutput) ToGatewayRouteSpecHttpRouteActionTargetOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteActionTargetOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteActionTargetOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRouteActionTarget] {
	return pulumix.Output[GatewayRouteSpecHttpRouteActionTarget]{
		OutputState: o.OutputState,
	}
}

// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
func (o GatewayRouteSpecHttpRouteActionTargetOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteActionTarget](o, func(v GatewayRouteSpecHttpRouteActionTarget) *int { return v.Port })
}

// Virtual service gateway route target.
func (o GatewayRouteSpecHttpRouteActionTargetOutput) VirtualService() pulumix.GPtrOutput[GatewayRouteSpecHttpRouteActionTargetVirtualService, GatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttpRouteActionTarget](o, func(v GatewayRouteSpecHttpRouteActionTarget) GatewayRouteSpecHttpRouteActionTargetVirtualService {
		return v.VirtualService
	})
	return pulumix.GPtrOutput[GatewayRouteSpecHttpRouteActionTargetVirtualService, GatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput]{OutputState: value.OutputState}
}

type GatewayRouteSpecHttpRouteActionTargetVirtualService struct {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	VirtualServiceName string `pulumi:"virtualServiceName"`
}

type GatewayRouteSpecHttpRouteActionTargetVirtualServiceArgs struct {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	VirtualServiceName pulumix.Input[string] `pulumi:"virtualServiceName"`
}

func (GatewayRouteSpecHttpRouteActionTargetVirtualServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteActionTargetVirtualService)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteActionTargetVirtualServiceArgs) ToGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput() GatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput {
	return i.ToGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteActionTargetVirtualServiceArgs) ToGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput)
}

func (i *GatewayRouteSpecHttpRouteActionTargetVirtualServiceArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteActionTargetVirtualServiceArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteActionTargetVirtualService)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput) ToGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput() GatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput) ToGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRouteActionTargetVirtualService] {
	return pulumix.Output[GatewayRouteSpecHttpRouteActionTargetVirtualService]{
		OutputState: o.OutputState,
	}
}

// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
func (o GatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput) VirtualServiceName() pulumix.Output[string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteActionTargetVirtualService](o, func(v GatewayRouteSpecHttpRouteActionTargetVirtualService) string { return v.VirtualServiceName })
}

type GatewayRouteSpecHttpRouteMatch struct {
	// Client request headers to match on.
	Headers []GatewayRouteSpecHttpRouteMatchHeader `pulumi:"headers"`
	// Host name to rewrite.
	Hostname *GatewayRouteSpecHttpRouteMatchHostname `pulumi:"hostname"`
	// Exact path to rewrite.
	Path *GatewayRouteSpecHttpRouteMatchPath `pulumi:"path"`
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	Port *int `pulumi:"port"`
	// Specified beginning characters to rewrite.
	Prefix *string `pulumi:"prefix"`
	// Client request query parameters to match on.
	QueryParameters []GatewayRouteSpecHttpRouteMatchQueryParameter `pulumi:"queryParameters"`
}

type GatewayRouteSpecHttpRouteMatchArgs struct {
	// Client request headers to match on.
	Headers pulumix.Input[[]*GatewayRouteSpecHttpRouteMatchHeaderArgs] `pulumi:"headers"`
	// Host name to rewrite.
	Hostname pulumix.Input[*GatewayRouteSpecHttpRouteMatchHostnameArgs] `pulumi:"hostname"`
	// Exact path to rewrite.
	Path pulumix.Input[*GatewayRouteSpecHttpRouteMatchPathArgs] `pulumi:"path"`
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Specified beginning characters to rewrite.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Client request query parameters to match on.
	QueryParameters pulumix.Input[[]*GatewayRouteSpecHttpRouteMatchQueryParameterArgs] `pulumi:"queryParameters"`
}

func (GatewayRouteSpecHttpRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatch)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteMatchArgs) ToGatewayRouteSpecHttpRouteMatchOutput() GatewayRouteSpecHttpRouteMatchOutput {
	return i.ToGatewayRouteSpecHttpRouteMatchOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteMatchArgs) ToGatewayRouteSpecHttpRouteMatchOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteMatchOutput)
}

func (i *GatewayRouteSpecHttpRouteMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteMatchArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteMatchOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatch)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteMatchOutput) ToGatewayRouteSpecHttpRouteMatchOutput() GatewayRouteSpecHttpRouteMatchOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchOutput) ToGatewayRouteSpecHttpRouteMatchOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRouteMatch] {
	return pulumix.Output[GatewayRouteSpecHttpRouteMatch]{
		OutputState: o.OutputState,
	}
}

// Client request headers to match on.
func (o GatewayRouteSpecHttpRouteMatchOutput) Headers() pulumix.GArrayOutput[GatewayRouteSpecHttpRouteMatchHeader, GatewayRouteSpecHttpRouteMatchHeaderOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttpRouteMatch](o, func(v GatewayRouteSpecHttpRouteMatch) []GatewayRouteSpecHttpRouteMatchHeader { return v.Headers })
	return pulumix.GArrayOutput[GatewayRouteSpecHttpRouteMatchHeader, GatewayRouteSpecHttpRouteMatchHeaderOutput]{OutputState: value.OutputState}
}

// Host name to rewrite.
func (o GatewayRouteSpecHttpRouteMatchOutput) Hostname() pulumix.GPtrOutput[GatewayRouteSpecHttpRouteMatchHostname, GatewayRouteSpecHttpRouteMatchHostnameOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttpRouteMatch](o, func(v GatewayRouteSpecHttpRouteMatch) *GatewayRouteSpecHttpRouteMatchHostname { return v.Hostname })
	return pulumix.GPtrOutput[GatewayRouteSpecHttpRouteMatchHostname, GatewayRouteSpecHttpRouteMatchHostnameOutput]{OutputState: value.OutputState}
}

// Exact path to rewrite.
func (o GatewayRouteSpecHttpRouteMatchOutput) Path() pulumix.GPtrOutput[GatewayRouteSpecHttpRouteMatchPath, GatewayRouteSpecHttpRouteMatchPathOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttpRouteMatch](o, func(v GatewayRouteSpecHttpRouteMatch) *GatewayRouteSpecHttpRouteMatchPath { return v.Path })
	return pulumix.GPtrOutput[GatewayRouteSpecHttpRouteMatchPath, GatewayRouteSpecHttpRouteMatchPathOutput]{OutputState: value.OutputState}
}

// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
func (o GatewayRouteSpecHttpRouteMatchOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatch](o, func(v GatewayRouteSpecHttpRouteMatch) *int { return v.Port })
}

// Specified beginning characters to rewrite.
func (o GatewayRouteSpecHttpRouteMatchOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatch](o, func(v GatewayRouteSpecHttpRouteMatch) *string { return v.Prefix })
}

// Client request query parameters to match on.
func (o GatewayRouteSpecHttpRouteMatchOutput) QueryParameters() pulumix.GArrayOutput[GatewayRouteSpecHttpRouteMatchQueryParameter, GatewayRouteSpecHttpRouteMatchQueryParameterOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttpRouteMatch](o, func(v GatewayRouteSpecHttpRouteMatch) []GatewayRouteSpecHttpRouteMatchQueryParameter {
		return v.QueryParameters
	})
	return pulumix.GArrayOutput[GatewayRouteSpecHttpRouteMatchQueryParameter, GatewayRouteSpecHttpRouteMatchQueryParameterOutput]{OutputState: value.OutputState}
}

type GatewayRouteSpecHttpRouteMatchHeader struct {
	// If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
	Invert *bool `pulumi:"invert"`
	// Method and value to match the header value sent with a request. Specify one match method.
	Match *GatewayRouteSpecHttpRouteMatchHeaderMatch `pulumi:"match"`
	// Name for the HTTP header in the client request that will be matched on.
	Name string `pulumi:"name"`
}

type GatewayRouteSpecHttpRouteMatchHeaderArgs struct {
	// If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
	Invert pulumix.Input[*bool] `pulumi:"invert"`
	// Method and value to match the header value sent with a request. Specify one match method.
	Match pulumix.Input[*GatewayRouteSpecHttpRouteMatchHeaderMatchArgs] `pulumi:"match"`
	// Name for the HTTP header in the client request that will be matched on.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GatewayRouteSpecHttpRouteMatchHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatchHeader)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteMatchHeaderArgs) ToGatewayRouteSpecHttpRouteMatchHeaderOutput() GatewayRouteSpecHttpRouteMatchHeaderOutput {
	return i.ToGatewayRouteSpecHttpRouteMatchHeaderOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteMatchHeaderArgs) ToGatewayRouteSpecHttpRouteMatchHeaderOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteMatchHeaderOutput)
}

func (i *GatewayRouteSpecHttpRouteMatchHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteMatchHeaderArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteMatchHeaderOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteMatchHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatchHeader)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteMatchHeaderOutput) ToGatewayRouteSpecHttpRouteMatchHeaderOutput() GatewayRouteSpecHttpRouteMatchHeaderOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchHeaderOutput) ToGatewayRouteSpecHttpRouteMatchHeaderOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchHeaderOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRouteMatchHeader] {
	return pulumix.Output[GatewayRouteSpecHttpRouteMatchHeader]{
		OutputState: o.OutputState,
	}
}

// If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
func (o GatewayRouteSpecHttpRouteMatchHeaderOutput) Invert() pulumix.Output[*bool] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatchHeader](o, func(v GatewayRouteSpecHttpRouteMatchHeader) *bool { return v.Invert })
}

// Method and value to match the header value sent with a request. Specify one match method.
func (o GatewayRouteSpecHttpRouteMatchHeaderOutput) Match() pulumix.GPtrOutput[GatewayRouteSpecHttpRouteMatchHeaderMatch, GatewayRouteSpecHttpRouteMatchHeaderMatchOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttpRouteMatchHeader](o, func(v GatewayRouteSpecHttpRouteMatchHeader) *GatewayRouteSpecHttpRouteMatchHeaderMatch {
		return v.Match
	})
	return pulumix.GPtrOutput[GatewayRouteSpecHttpRouteMatchHeaderMatch, GatewayRouteSpecHttpRouteMatchHeaderMatchOutput]{OutputState: value.OutputState}
}

// Name for the HTTP header in the client request that will be matched on.
func (o GatewayRouteSpecHttpRouteMatchHeaderOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatchHeader](o, func(v GatewayRouteSpecHttpRouteMatchHeader) string { return v.Name })
}

type GatewayRouteSpecHttpRouteMatchHeaderMatch struct {
	// Value used to replace matched path.
	Exact *string `pulumi:"exact"`
	// Specified beginning characters to rewrite.
	Prefix *string `pulumi:"prefix"`
	// Object that specifies the range of numbers that the header value sent by the client must be included in.
	Range *GatewayRouteSpecHttpRouteMatchHeaderMatchRange `pulumi:"range"`
	// Header value sent by the client must include the specified characters.
	Regex *string `pulumi:"regex"`
	// Header value sent by the client must end with the specified characters.
	Suffix *string `pulumi:"suffix"`
}

type GatewayRouteSpecHttpRouteMatchHeaderMatchArgs struct {
	// Value used to replace matched path.
	Exact pulumix.Input[*string] `pulumi:"exact"`
	// Specified beginning characters to rewrite.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Object that specifies the range of numbers that the header value sent by the client must be included in.
	Range pulumix.Input[*GatewayRouteSpecHttpRouteMatchHeaderMatchRangeArgs] `pulumi:"range"`
	// Header value sent by the client must include the specified characters.
	Regex pulumix.Input[*string] `pulumi:"regex"`
	// Header value sent by the client must end with the specified characters.
	Suffix pulumix.Input[*string] `pulumi:"suffix"`
}

func (GatewayRouteSpecHttpRouteMatchHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatchHeaderMatch)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteMatchHeaderMatchArgs) ToGatewayRouteSpecHttpRouteMatchHeaderMatchOutput() GatewayRouteSpecHttpRouteMatchHeaderMatchOutput {
	return i.ToGatewayRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteMatchHeaderMatchArgs) ToGatewayRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteMatchHeaderMatchOutput)
}

func (i *GatewayRouteSpecHttpRouteMatchHeaderMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteMatchHeaderMatchArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteMatchHeaderMatchOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteMatchHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatchHeaderMatch)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteMatchHeaderMatchOutput) ToGatewayRouteSpecHttpRouteMatchHeaderMatchOutput() GatewayRouteSpecHttpRouteMatchHeaderMatchOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchHeaderMatchOutput) ToGatewayRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchHeaderMatchOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchHeaderMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRouteMatchHeaderMatch] {
	return pulumix.Output[GatewayRouteSpecHttpRouteMatchHeaderMatch]{
		OutputState: o.OutputState,
	}
}

// Value used to replace matched path.
func (o GatewayRouteSpecHttpRouteMatchHeaderMatchOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatchHeaderMatch](o, func(v GatewayRouteSpecHttpRouteMatchHeaderMatch) *string { return v.Exact })
}

// Specified beginning characters to rewrite.
func (o GatewayRouteSpecHttpRouteMatchHeaderMatchOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatchHeaderMatch](o, func(v GatewayRouteSpecHttpRouteMatchHeaderMatch) *string { return v.Prefix })
}

// Object that specifies the range of numbers that the header value sent by the client must be included in.
func (o GatewayRouteSpecHttpRouteMatchHeaderMatchOutput) Range() pulumix.GPtrOutput[GatewayRouteSpecHttpRouteMatchHeaderMatchRange, GatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttpRouteMatchHeaderMatch](o, func(v GatewayRouteSpecHttpRouteMatchHeaderMatch) *GatewayRouteSpecHttpRouteMatchHeaderMatchRange {
		return v.Range
	})
	return pulumix.GPtrOutput[GatewayRouteSpecHttpRouteMatchHeaderMatchRange, GatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput]{OutputState: value.OutputState}
}

// Header value sent by the client must include the specified characters.
func (o GatewayRouteSpecHttpRouteMatchHeaderMatchOutput) Regex() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatchHeaderMatch](o, func(v GatewayRouteSpecHttpRouteMatchHeaderMatch) *string { return v.Regex })
}

// Header value sent by the client must end with the specified characters.
func (o GatewayRouteSpecHttpRouteMatchHeaderMatchOutput) Suffix() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatchHeaderMatch](o, func(v GatewayRouteSpecHttpRouteMatchHeaderMatch) *string { return v.Suffix })
}

type GatewayRouteSpecHttpRouteMatchHeaderMatchRange struct {
	// End of the range.
	End int `pulumi:"end"`
	// Start of the range.
	Start int `pulumi:"start"`
}

type GatewayRouteSpecHttpRouteMatchHeaderMatchRangeArgs struct {
	// End of the range.
	End pulumix.Input[int] `pulumi:"end"`
	// Start of the range.
	Start pulumix.Input[int] `pulumi:"start"`
}

func (GatewayRouteSpecHttpRouteMatchHeaderMatchRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatchHeaderMatchRange)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput() GatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return i.ToGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput)
}

func (i *GatewayRouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteMatchHeaderMatchRangeArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatchHeaderMatchRange)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput() GatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRouteMatchHeaderMatchRange] {
	return pulumix.Output[GatewayRouteSpecHttpRouteMatchHeaderMatchRange]{
		OutputState: o.OutputState,
	}
}

// End of the range.
func (o GatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput) End() pulumix.Output[int] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatchHeaderMatchRange](o, func(v GatewayRouteSpecHttpRouteMatchHeaderMatchRange) int { return v.End })
}

// Start of the range.
func (o GatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput) Start() pulumix.Output[int] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatchHeaderMatchRange](o, func(v GatewayRouteSpecHttpRouteMatchHeaderMatchRange) int { return v.Start })
}

type GatewayRouteSpecHttpRouteMatchHostname struct {
	// Exact host name to match on.
	Exact *string `pulumi:"exact"`
	// Specified ending characters of the host name to match on.
	Suffix *string `pulumi:"suffix"`
}

type GatewayRouteSpecHttpRouteMatchHostnameArgs struct {
	// Exact host name to match on.
	Exact pulumix.Input[*string] `pulumi:"exact"`
	// Specified ending characters of the host name to match on.
	Suffix pulumix.Input[*string] `pulumi:"suffix"`
}

func (GatewayRouteSpecHttpRouteMatchHostnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatchHostname)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteMatchHostnameArgs) ToGatewayRouteSpecHttpRouteMatchHostnameOutput() GatewayRouteSpecHttpRouteMatchHostnameOutput {
	return i.ToGatewayRouteSpecHttpRouteMatchHostnameOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteMatchHostnameArgs) ToGatewayRouteSpecHttpRouteMatchHostnameOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchHostnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteMatchHostnameOutput)
}

func (i *GatewayRouteSpecHttpRouteMatchHostnameArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteMatchHostnameArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteMatchHostnameOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteMatchHostnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatchHostname)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteMatchHostnameOutput) ToGatewayRouteSpecHttpRouteMatchHostnameOutput() GatewayRouteSpecHttpRouteMatchHostnameOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchHostnameOutput) ToGatewayRouteSpecHttpRouteMatchHostnameOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchHostnameOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchHostnameOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRouteMatchHostname] {
	return pulumix.Output[GatewayRouteSpecHttpRouteMatchHostname]{
		OutputState: o.OutputState,
	}
}

// Exact host name to match on.
func (o GatewayRouteSpecHttpRouteMatchHostnameOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatchHostname](o, func(v GatewayRouteSpecHttpRouteMatchHostname) *string { return v.Exact })
}

// Specified ending characters of the host name to match on.
func (o GatewayRouteSpecHttpRouteMatchHostnameOutput) Suffix() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatchHostname](o, func(v GatewayRouteSpecHttpRouteMatchHostname) *string { return v.Suffix })
}

type GatewayRouteSpecHttpRouteMatchPath struct {
	// The exact path to match on.
	Exact *string `pulumi:"exact"`
	// The regex used to match the path.
	Regex *string `pulumi:"regex"`
}

type GatewayRouteSpecHttpRouteMatchPathArgs struct {
	// The exact path to match on.
	Exact pulumix.Input[*string] `pulumi:"exact"`
	// The regex used to match the path.
	Regex pulumix.Input[*string] `pulumi:"regex"`
}

func (GatewayRouteSpecHttpRouteMatchPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatchPath)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteMatchPathArgs) ToGatewayRouteSpecHttpRouteMatchPathOutput() GatewayRouteSpecHttpRouteMatchPathOutput {
	return i.ToGatewayRouteSpecHttpRouteMatchPathOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteMatchPathArgs) ToGatewayRouteSpecHttpRouteMatchPathOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteMatchPathOutput)
}

func (i *GatewayRouteSpecHttpRouteMatchPathArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteMatchPathArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteMatchPathOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteMatchPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatchPath)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteMatchPathOutput) ToGatewayRouteSpecHttpRouteMatchPathOutput() GatewayRouteSpecHttpRouteMatchPathOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchPathOutput) ToGatewayRouteSpecHttpRouteMatchPathOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchPathOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchPathOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRouteMatchPath] {
	return pulumix.Output[GatewayRouteSpecHttpRouteMatchPath]{
		OutputState: o.OutputState,
	}
}

// The exact path to match on.
func (o GatewayRouteSpecHttpRouteMatchPathOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatchPath](o, func(v GatewayRouteSpecHttpRouteMatchPath) *string { return v.Exact })
}

// The regex used to match the path.
func (o GatewayRouteSpecHttpRouteMatchPathOutput) Regex() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatchPath](o, func(v GatewayRouteSpecHttpRouteMatchPath) *string { return v.Regex })
}

type GatewayRouteSpecHttpRouteMatchQueryParameter struct {
	// The query parameter to match on.
	Match *GatewayRouteSpecHttpRouteMatchQueryParameterMatch `pulumi:"match"`
	// Name for the query parameter that will be matched on.
	Name string `pulumi:"name"`
}

type GatewayRouteSpecHttpRouteMatchQueryParameterArgs struct {
	// The query parameter to match on.
	Match pulumix.Input[*GatewayRouteSpecHttpRouteMatchQueryParameterMatchArgs] `pulumi:"match"`
	// Name for the query parameter that will be matched on.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GatewayRouteSpecHttpRouteMatchQueryParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatchQueryParameter)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteMatchQueryParameterArgs) ToGatewayRouteSpecHttpRouteMatchQueryParameterOutput() GatewayRouteSpecHttpRouteMatchQueryParameterOutput {
	return i.ToGatewayRouteSpecHttpRouteMatchQueryParameterOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteMatchQueryParameterArgs) ToGatewayRouteSpecHttpRouteMatchQueryParameterOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchQueryParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteMatchQueryParameterOutput)
}

func (i *GatewayRouteSpecHttpRouteMatchQueryParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteMatchQueryParameterArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteMatchQueryParameterOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteMatchQueryParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatchQueryParameter)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteMatchQueryParameterOutput) ToGatewayRouteSpecHttpRouteMatchQueryParameterOutput() GatewayRouteSpecHttpRouteMatchQueryParameterOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchQueryParameterOutput) ToGatewayRouteSpecHttpRouteMatchQueryParameterOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchQueryParameterOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchQueryParameterOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRouteMatchQueryParameter] {
	return pulumix.Output[GatewayRouteSpecHttpRouteMatchQueryParameter]{
		OutputState: o.OutputState,
	}
}

// The query parameter to match on.
func (o GatewayRouteSpecHttpRouteMatchQueryParameterOutput) Match() pulumix.GPtrOutput[GatewayRouteSpecHttpRouteMatchQueryParameterMatch, GatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput] {
	value := pulumix.Apply[GatewayRouteSpecHttpRouteMatchQueryParameter](o, func(v GatewayRouteSpecHttpRouteMatchQueryParameter) *GatewayRouteSpecHttpRouteMatchQueryParameterMatch {
		return v.Match
	})
	return pulumix.GPtrOutput[GatewayRouteSpecHttpRouteMatchQueryParameterMatch, GatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput]{OutputState: value.OutputState}
}

// Name for the query parameter that will be matched on.
func (o GatewayRouteSpecHttpRouteMatchQueryParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatchQueryParameter](o, func(v GatewayRouteSpecHttpRouteMatchQueryParameter) string { return v.Name })
}

type GatewayRouteSpecHttpRouteMatchQueryParameterMatch struct {
	// Value used to replace matched path.
	Exact *string `pulumi:"exact"`
}

type GatewayRouteSpecHttpRouteMatchQueryParameterMatchArgs struct {
	// Value used to replace matched path.
	Exact pulumix.Input[*string] `pulumi:"exact"`
}

func (GatewayRouteSpecHttpRouteMatchQueryParameterMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatchQueryParameterMatch)(nil)).Elem()
}

func (i GatewayRouteSpecHttpRouteMatchQueryParameterMatchArgs) ToGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput() GatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return i.ToGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutputWithContext(context.Background())
}

func (i GatewayRouteSpecHttpRouteMatchQueryParameterMatchArgs) ToGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput)
}

func (i *GatewayRouteSpecHttpRouteMatchQueryParameterMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GatewayRouteSpecHttpRouteMatchQueryParameterMatchArgs] {
	return pulumix.Val(i)
}

type GatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput struct{ *pulumi.OutputState }

func (GatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRouteSpecHttpRouteMatchQueryParameterMatch)(nil)).Elem()
}

func (o GatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput) ToGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput() GatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput) ToGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) GatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return o
}

func (o GatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayRouteSpecHttpRouteMatchQueryParameterMatch] {
	return pulumix.Output[GatewayRouteSpecHttpRouteMatchQueryParameterMatch]{
		OutputState: o.OutputState,
	}
}

// Value used to replace matched path.
func (o GatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[GatewayRouteSpecHttpRouteMatchQueryParameterMatch](o, func(v GatewayRouteSpecHttpRouteMatchQueryParameterMatch) *string { return v.Exact })
}

type MeshSpec struct {
	// Egress filter rules for the service mesh.
	EgressFilter *MeshSpecEgressFilter `pulumi:"egressFilter"`
}

type MeshSpecArgs struct {
	// Egress filter rules for the service mesh.
	EgressFilter pulumix.Input[*MeshSpecEgressFilterArgs] `pulumi:"egressFilter"`
}

func (MeshSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshSpec)(nil)).Elem()
}

func (i MeshSpecArgs) ToMeshSpecOutput() MeshSpecOutput {
	return i.ToMeshSpecOutputWithContext(context.Background())
}

func (i MeshSpecArgs) ToMeshSpecOutputWithContext(ctx context.Context) MeshSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshSpecOutput)
}

func (i *MeshSpecArgs) ToOutput(ctx context.Context) pulumix.Output[*MeshSpecArgs] {
	return pulumix.Val(i)
}

type MeshSpecOutput struct{ *pulumi.OutputState }

func (MeshSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshSpec)(nil)).Elem()
}

func (o MeshSpecOutput) ToMeshSpecOutput() MeshSpecOutput {
	return o
}

func (o MeshSpecOutput) ToMeshSpecOutputWithContext(ctx context.Context) MeshSpecOutput {
	return o
}

func (o MeshSpecOutput) ToOutput(ctx context.Context) pulumix.Output[MeshSpec] {
	return pulumix.Output[MeshSpec]{
		OutputState: o.OutputState,
	}
}

// Egress filter rules for the service mesh.
func (o MeshSpecOutput) EgressFilter() pulumix.GPtrOutput[MeshSpecEgressFilter, MeshSpecEgressFilterOutput] {
	value := pulumix.Apply[MeshSpec](o, func(v MeshSpec) *MeshSpecEgressFilter { return v.EgressFilter })
	return pulumix.GPtrOutput[MeshSpecEgressFilter, MeshSpecEgressFilterOutput]{OutputState: value.OutputState}
}

type MeshSpecEgressFilter struct {
	// Egress filter type. By default, the type is `DROP_ALL`.
	// Valid values are `ALLOW_ALL` and `DROP_ALL`.
	Type *string `pulumi:"type"`
}

type MeshSpecEgressFilterArgs struct {
	// Egress filter type. By default, the type is `DROP_ALL`.
	// Valid values are `ALLOW_ALL` and `DROP_ALL`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (MeshSpecEgressFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshSpecEgressFilter)(nil)).Elem()
}

func (i MeshSpecEgressFilterArgs) ToMeshSpecEgressFilterOutput() MeshSpecEgressFilterOutput {
	return i.ToMeshSpecEgressFilterOutputWithContext(context.Background())
}

func (i MeshSpecEgressFilterArgs) ToMeshSpecEgressFilterOutputWithContext(ctx context.Context) MeshSpecEgressFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshSpecEgressFilterOutput)
}

func (i *MeshSpecEgressFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*MeshSpecEgressFilterArgs] {
	return pulumix.Val(i)
}

type MeshSpecEgressFilterOutput struct{ *pulumi.OutputState }

func (MeshSpecEgressFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshSpecEgressFilter)(nil)).Elem()
}

func (o MeshSpecEgressFilterOutput) ToMeshSpecEgressFilterOutput() MeshSpecEgressFilterOutput {
	return o
}

func (o MeshSpecEgressFilterOutput) ToMeshSpecEgressFilterOutputWithContext(ctx context.Context) MeshSpecEgressFilterOutput {
	return o
}

func (o MeshSpecEgressFilterOutput) ToOutput(ctx context.Context) pulumix.Output[MeshSpecEgressFilter] {
	return pulumix.Output[MeshSpecEgressFilter]{
		OutputState: o.OutputState,
	}
}

// Egress filter type. By default, the type is `DROP_ALL`.
// Valid values are `ALLOW_ALL` and `DROP_ALL`.
func (o MeshSpecEgressFilterOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[MeshSpecEgressFilter](o, func(v MeshSpecEgressFilter) *string { return v.Type })
}

type RouteSpec struct {
	// GRPC routing information for the route.
	GrpcRoute *RouteSpecGrpcRoute `pulumi:"grpcRoute"`
	// HTTP/2 routing information for the route.
	Http2Route *RouteSpecHttp2Route `pulumi:"http2Route"`
	// HTTP routing information for the route.
	HttpRoute *RouteSpecHttpRoute `pulumi:"httpRoute"`
	// Priority for the route, between `0` and `1000`.
	// Routes are matched based on the specified value, where `0` is the highest priority.
	Priority *int `pulumi:"priority"`
	// TCP routing information for the route.
	TcpRoute *RouteSpecTcpRoute `pulumi:"tcpRoute"`
}

type RouteSpecArgs struct {
	// GRPC routing information for the route.
	GrpcRoute pulumix.Input[*RouteSpecGrpcRouteArgs] `pulumi:"grpcRoute"`
	// HTTP/2 routing information for the route.
	Http2Route pulumix.Input[*RouteSpecHttp2RouteArgs] `pulumi:"http2Route"`
	// HTTP routing information for the route.
	HttpRoute pulumix.Input[*RouteSpecHttpRouteArgs] `pulumi:"httpRoute"`
	// Priority for the route, between `0` and `1000`.
	// Routes are matched based on the specified value, where `0` is the highest priority.
	Priority pulumix.Input[*int] `pulumi:"priority"`
	// TCP routing information for the route.
	TcpRoute pulumix.Input[*RouteSpecTcpRouteArgs] `pulumi:"tcpRoute"`
}

func (RouteSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpec)(nil)).Elem()
}

func (i RouteSpecArgs) ToRouteSpecOutput() RouteSpecOutput {
	return i.ToRouteSpecOutputWithContext(context.Background())
}

func (i RouteSpecArgs) ToRouteSpecOutputWithContext(ctx context.Context) RouteSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecOutput)
}

func (i *RouteSpecArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecArgs] {
	return pulumix.Val(i)
}

type RouteSpecOutput struct{ *pulumi.OutputState }

func (RouteSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpec)(nil)).Elem()
}

func (o RouteSpecOutput) ToRouteSpecOutput() RouteSpecOutput {
	return o
}

func (o RouteSpecOutput) ToRouteSpecOutputWithContext(ctx context.Context) RouteSpecOutput {
	return o
}

func (o RouteSpecOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpec] {
	return pulumix.Output[RouteSpec]{
		OutputState: o.OutputState,
	}
}

// GRPC routing information for the route.
func (o RouteSpecOutput) GrpcRoute() pulumix.GPtrOutput[RouteSpecGrpcRoute, RouteSpecGrpcRouteOutput] {
	value := pulumix.Apply[RouteSpec](o, func(v RouteSpec) *RouteSpecGrpcRoute { return v.GrpcRoute })
	return pulumix.GPtrOutput[RouteSpecGrpcRoute, RouteSpecGrpcRouteOutput]{OutputState: value.OutputState}
}

// HTTP/2 routing information for the route.
func (o RouteSpecOutput) Http2Route() pulumix.GPtrOutput[RouteSpecHttp2Route, RouteSpecHttp2RouteOutput] {
	value := pulumix.Apply[RouteSpec](o, func(v RouteSpec) *RouteSpecHttp2Route { return v.Http2Route })
	return pulumix.GPtrOutput[RouteSpecHttp2Route, RouteSpecHttp2RouteOutput]{OutputState: value.OutputState}
}

// HTTP routing information for the route.
func (o RouteSpecOutput) HttpRoute() pulumix.GPtrOutput[RouteSpecHttpRoute, RouteSpecHttpRouteOutput] {
	value := pulumix.Apply[RouteSpec](o, func(v RouteSpec) *RouteSpecHttpRoute { return v.HttpRoute })
	return pulumix.GPtrOutput[RouteSpecHttpRoute, RouteSpecHttpRouteOutput]{OutputState: value.OutputState}
}

// Priority for the route, between `0` and `1000`.
// Routes are matched based on the specified value, where `0` is the highest priority.
func (o RouteSpecOutput) Priority() pulumix.Output[*int] {
	return pulumix.Apply[RouteSpec](o, func(v RouteSpec) *int { return v.Priority })
}

// TCP routing information for the route.
func (o RouteSpecOutput) TcpRoute() pulumix.GPtrOutput[RouteSpecTcpRoute, RouteSpecTcpRouteOutput] {
	value := pulumix.Apply[RouteSpec](o, func(v RouteSpec) *RouteSpecTcpRoute { return v.TcpRoute })
	return pulumix.GPtrOutput[RouteSpecTcpRoute, RouteSpecTcpRouteOutput]{OutputState: value.OutputState}
}

type RouteSpecGrpcRoute struct {
	// Action to take if a match is determined.
	Action RouteSpecGrpcRouteAction `pulumi:"action"`
	// Criteria for determining an gRPC request match.
	Match *RouteSpecGrpcRouteMatch `pulumi:"match"`
	// Retry policy.
	RetryPolicy *RouteSpecGrpcRouteRetryPolicy `pulumi:"retryPolicy"`
	// Types of timeouts.
	Timeout *RouteSpecGrpcRouteTimeout `pulumi:"timeout"`
}

type RouteSpecGrpcRouteArgs struct {
	// Action to take if a match is determined.
	Action pulumix.Input[*RouteSpecGrpcRouteActionArgs] `pulumi:"action"`
	// Criteria for determining an gRPC request match.
	Match pulumix.Input[*RouteSpecGrpcRouteMatchArgs] `pulumi:"match"`
	// Retry policy.
	RetryPolicy pulumix.Input[*RouteSpecGrpcRouteRetryPolicyArgs] `pulumi:"retryPolicy"`
	// Types of timeouts.
	Timeout pulumix.Input[*RouteSpecGrpcRouteTimeoutArgs] `pulumi:"timeout"`
}

func (RouteSpecGrpcRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRoute)(nil)).Elem()
}

func (i RouteSpecGrpcRouteArgs) ToRouteSpecGrpcRouteOutput() RouteSpecGrpcRouteOutput {
	return i.ToRouteSpecGrpcRouteOutputWithContext(context.Background())
}

func (i RouteSpecGrpcRouteArgs) ToRouteSpecGrpcRouteOutputWithContext(ctx context.Context) RouteSpecGrpcRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecGrpcRouteOutput)
}

func (i *RouteSpecGrpcRouteArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecGrpcRouteArgs] {
	return pulumix.Val(i)
}

type RouteSpecGrpcRouteOutput struct{ *pulumi.OutputState }

func (RouteSpecGrpcRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRoute)(nil)).Elem()
}

func (o RouteSpecGrpcRouteOutput) ToRouteSpecGrpcRouteOutput() RouteSpecGrpcRouteOutput {
	return o
}

func (o RouteSpecGrpcRouteOutput) ToRouteSpecGrpcRouteOutputWithContext(ctx context.Context) RouteSpecGrpcRouteOutput {
	return o
}

func (o RouteSpecGrpcRouteOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecGrpcRoute] {
	return pulumix.Output[RouteSpecGrpcRoute]{
		OutputState: o.OutputState,
	}
}

// Action to take if a match is determined.
func (o RouteSpecGrpcRouteOutput) Action() pulumix.GPtrOutput[RouteSpecGrpcRouteAction, RouteSpecGrpcRouteActionOutput] {
	value := pulumix.Apply[RouteSpecGrpcRoute](o, func(v RouteSpecGrpcRoute) RouteSpecGrpcRouteAction { return v.Action })
	return pulumix.GPtrOutput[RouteSpecGrpcRouteAction, RouteSpecGrpcRouteActionOutput]{OutputState: value.OutputState}
}

// Criteria for determining an gRPC request match.
func (o RouteSpecGrpcRouteOutput) Match() pulumix.GPtrOutput[RouteSpecGrpcRouteMatch, RouteSpecGrpcRouteMatchOutput] {
	value := pulumix.Apply[RouteSpecGrpcRoute](o, func(v RouteSpecGrpcRoute) *RouteSpecGrpcRouteMatch { return v.Match })
	return pulumix.GPtrOutput[RouteSpecGrpcRouteMatch, RouteSpecGrpcRouteMatchOutput]{OutputState: value.OutputState}
}

// Retry policy.
func (o RouteSpecGrpcRouteOutput) RetryPolicy() pulumix.GPtrOutput[RouteSpecGrpcRouteRetryPolicy, RouteSpecGrpcRouteRetryPolicyOutput] {
	value := pulumix.Apply[RouteSpecGrpcRoute](o, func(v RouteSpecGrpcRoute) *RouteSpecGrpcRouteRetryPolicy { return v.RetryPolicy })
	return pulumix.GPtrOutput[RouteSpecGrpcRouteRetryPolicy, RouteSpecGrpcRouteRetryPolicyOutput]{OutputState: value.OutputState}
}

// Types of timeouts.
func (o RouteSpecGrpcRouteOutput) Timeout() pulumix.GPtrOutput[RouteSpecGrpcRouteTimeout, RouteSpecGrpcRouteTimeoutOutput] {
	value := pulumix.Apply[RouteSpecGrpcRoute](o, func(v RouteSpecGrpcRoute) *RouteSpecGrpcRouteTimeout { return v.Timeout })
	return pulumix.GPtrOutput[RouteSpecGrpcRouteTimeout, RouteSpecGrpcRouteTimeoutOutput]{OutputState: value.OutputState}
}

type RouteSpecGrpcRouteAction struct {
	// Targets that traffic is routed to when a request matches the route.
	// You can specify one or more targets and their relative weights with which to distribute traffic.
	WeightedTargets []RouteSpecGrpcRouteActionWeightedTarget `pulumi:"weightedTargets"`
}

type RouteSpecGrpcRouteActionArgs struct {
	// Targets that traffic is routed to when a request matches the route.
	// You can specify one or more targets and their relative weights with which to distribute traffic.
	WeightedTargets pulumix.Input[[]*RouteSpecGrpcRouteActionWeightedTargetArgs] `pulumi:"weightedTargets"`
}

func (RouteSpecGrpcRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteAction)(nil)).Elem()
}

func (i RouteSpecGrpcRouteActionArgs) ToRouteSpecGrpcRouteActionOutput() RouteSpecGrpcRouteActionOutput {
	return i.ToRouteSpecGrpcRouteActionOutputWithContext(context.Background())
}

func (i RouteSpecGrpcRouteActionArgs) ToRouteSpecGrpcRouteActionOutputWithContext(ctx context.Context) RouteSpecGrpcRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecGrpcRouteActionOutput)
}

func (i *RouteSpecGrpcRouteActionArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecGrpcRouteActionArgs] {
	return pulumix.Val(i)
}

type RouteSpecGrpcRouteActionOutput struct{ *pulumi.OutputState }

func (RouteSpecGrpcRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteAction)(nil)).Elem()
}

func (o RouteSpecGrpcRouteActionOutput) ToRouteSpecGrpcRouteActionOutput() RouteSpecGrpcRouteActionOutput {
	return o
}

func (o RouteSpecGrpcRouteActionOutput) ToRouteSpecGrpcRouteActionOutputWithContext(ctx context.Context) RouteSpecGrpcRouteActionOutput {
	return o
}

func (o RouteSpecGrpcRouteActionOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecGrpcRouteAction] {
	return pulumix.Output[RouteSpecGrpcRouteAction]{
		OutputState: o.OutputState,
	}
}

// Targets that traffic is routed to when a request matches the route.
// You can specify one or more targets and their relative weights with which to distribute traffic.
func (o RouteSpecGrpcRouteActionOutput) WeightedTargets() pulumix.GArrayOutput[RouteSpecGrpcRouteActionWeightedTarget, RouteSpecGrpcRouteActionWeightedTargetOutput] {
	value := pulumix.Apply[RouteSpecGrpcRouteAction](o, func(v RouteSpecGrpcRouteAction) []RouteSpecGrpcRouteActionWeightedTarget { return v.WeightedTargets })
	return pulumix.GArrayOutput[RouteSpecGrpcRouteActionWeightedTarget, RouteSpecGrpcRouteActionWeightedTargetOutput]{OutputState: value.OutputState}
}

type RouteSpecGrpcRouteActionWeightedTarget struct {
	// The targeted port of the weighted object.
	Port *int `pulumi:"port"`
	// Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
	VirtualNode string `pulumi:"virtualNode"`
	// Relative weight of the weighted target. An integer between 0 and 100.
	Weight int `pulumi:"weight"`
}

type RouteSpecGrpcRouteActionWeightedTargetArgs struct {
	// The targeted port of the weighted object.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
	VirtualNode pulumix.Input[string] `pulumi:"virtualNode"`
	// Relative weight of the weighted target. An integer between 0 and 100.
	Weight pulumix.Input[int] `pulumi:"weight"`
}

func (RouteSpecGrpcRouteActionWeightedTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteActionWeightedTarget)(nil)).Elem()
}

func (i RouteSpecGrpcRouteActionWeightedTargetArgs) ToRouteSpecGrpcRouteActionWeightedTargetOutput() RouteSpecGrpcRouteActionWeightedTargetOutput {
	return i.ToRouteSpecGrpcRouteActionWeightedTargetOutputWithContext(context.Background())
}

func (i RouteSpecGrpcRouteActionWeightedTargetArgs) ToRouteSpecGrpcRouteActionWeightedTargetOutputWithContext(ctx context.Context) RouteSpecGrpcRouteActionWeightedTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecGrpcRouteActionWeightedTargetOutput)
}

func (i *RouteSpecGrpcRouteActionWeightedTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecGrpcRouteActionWeightedTargetArgs] {
	return pulumix.Val(i)
}

type RouteSpecGrpcRouteActionWeightedTargetOutput struct{ *pulumi.OutputState }

func (RouteSpecGrpcRouteActionWeightedTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteActionWeightedTarget)(nil)).Elem()
}

func (o RouteSpecGrpcRouteActionWeightedTargetOutput) ToRouteSpecGrpcRouteActionWeightedTargetOutput() RouteSpecGrpcRouteActionWeightedTargetOutput {
	return o
}

func (o RouteSpecGrpcRouteActionWeightedTargetOutput) ToRouteSpecGrpcRouteActionWeightedTargetOutputWithContext(ctx context.Context) RouteSpecGrpcRouteActionWeightedTargetOutput {
	return o
}

func (o RouteSpecGrpcRouteActionWeightedTargetOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecGrpcRouteActionWeightedTarget] {
	return pulumix.Output[RouteSpecGrpcRouteActionWeightedTarget]{
		OutputState: o.OutputState,
	}
}

// The targeted port of the weighted object.
func (o RouteSpecGrpcRouteActionWeightedTargetOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[RouteSpecGrpcRouteActionWeightedTarget](o, func(v RouteSpecGrpcRouteActionWeightedTarget) *int { return v.Port })
}

// Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
func (o RouteSpecGrpcRouteActionWeightedTargetOutput) VirtualNode() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecGrpcRouteActionWeightedTarget](o, func(v RouteSpecGrpcRouteActionWeightedTarget) string { return v.VirtualNode })
}

// Relative weight of the weighted target. An integer between 0 and 100.
func (o RouteSpecGrpcRouteActionWeightedTargetOutput) Weight() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecGrpcRouteActionWeightedTarget](o, func(v RouteSpecGrpcRouteActionWeightedTarget) int { return v.Weight })
}

type RouteSpecGrpcRouteMatch struct {
	// Data to match from the gRPC request.
	Metadatas []RouteSpecGrpcRouteMatchMetadata `pulumi:"metadatas"`
	// Method name to match from the request. If you specify a name, you must also specify a `serviceName`.
	MethodName *string `pulumi:"methodName"`
	// The port number to match from the request.
	Port *int `pulumi:"port"`
	// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	Prefix *string `pulumi:"prefix"`
	// Fully qualified domain name for the service to match from the request.
	ServiceName *string `pulumi:"serviceName"`
}

type RouteSpecGrpcRouteMatchArgs struct {
	// Data to match from the gRPC request.
	Metadatas pulumix.Input[[]*RouteSpecGrpcRouteMatchMetadataArgs] `pulumi:"metadatas"`
	// Method name to match from the request. If you specify a name, you must also specify a `serviceName`.
	MethodName pulumix.Input[*string] `pulumi:"methodName"`
	// The port number to match from the request.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Fully qualified domain name for the service to match from the request.
	ServiceName pulumix.Input[*string] `pulumi:"serviceName"`
}

func (RouteSpecGrpcRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteMatch)(nil)).Elem()
}

func (i RouteSpecGrpcRouteMatchArgs) ToRouteSpecGrpcRouteMatchOutput() RouteSpecGrpcRouteMatchOutput {
	return i.ToRouteSpecGrpcRouteMatchOutputWithContext(context.Background())
}

func (i RouteSpecGrpcRouteMatchArgs) ToRouteSpecGrpcRouteMatchOutputWithContext(ctx context.Context) RouteSpecGrpcRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecGrpcRouteMatchOutput)
}

func (i *RouteSpecGrpcRouteMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecGrpcRouteMatchArgs] {
	return pulumix.Val(i)
}

type RouteSpecGrpcRouteMatchOutput struct{ *pulumi.OutputState }

func (RouteSpecGrpcRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteMatch)(nil)).Elem()
}

func (o RouteSpecGrpcRouteMatchOutput) ToRouteSpecGrpcRouteMatchOutput() RouteSpecGrpcRouteMatchOutput {
	return o
}

func (o RouteSpecGrpcRouteMatchOutput) ToRouteSpecGrpcRouteMatchOutputWithContext(ctx context.Context) RouteSpecGrpcRouteMatchOutput {
	return o
}

func (o RouteSpecGrpcRouteMatchOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecGrpcRouteMatch] {
	return pulumix.Output[RouteSpecGrpcRouteMatch]{
		OutputState: o.OutputState,
	}
}

// Data to match from the gRPC request.
func (o RouteSpecGrpcRouteMatchOutput) Metadatas() pulumix.GArrayOutput[RouteSpecGrpcRouteMatchMetadata, RouteSpecGrpcRouteMatchMetadataOutput] {
	value := pulumix.Apply[RouteSpecGrpcRouteMatch](o, func(v RouteSpecGrpcRouteMatch) []RouteSpecGrpcRouteMatchMetadata { return v.Metadatas })
	return pulumix.GArrayOutput[RouteSpecGrpcRouteMatchMetadata, RouteSpecGrpcRouteMatchMetadataOutput]{OutputState: value.OutputState}
}

// Method name to match from the request. If you specify a name, you must also specify a `serviceName`.
func (o RouteSpecGrpcRouteMatchOutput) MethodName() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecGrpcRouteMatch](o, func(v RouteSpecGrpcRouteMatch) *string { return v.MethodName })
}

// The port number to match from the request.
func (o RouteSpecGrpcRouteMatchOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[RouteSpecGrpcRouteMatch](o, func(v RouteSpecGrpcRouteMatch) *int { return v.Port })
}

// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
func (o RouteSpecGrpcRouteMatchOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecGrpcRouteMatch](o, func(v RouteSpecGrpcRouteMatch) *string { return v.Prefix })
}

// Fully qualified domain name for the service to match from the request.
func (o RouteSpecGrpcRouteMatchOutput) ServiceName() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecGrpcRouteMatch](o, func(v RouteSpecGrpcRouteMatch) *string { return v.ServiceName })
}

type RouteSpecGrpcRouteMatchMetadata struct {
	// If `true`, the match is on the opposite of the `match` criteria. Default is `false`.
	Invert *bool `pulumi:"invert"`
	// Data to match from the request.
	Match *RouteSpecGrpcRouteMatchMetadataMatch `pulumi:"match"`
	// Name of the route. Must be between 1 and 50 characters in length.
	Name string `pulumi:"name"`
}

type RouteSpecGrpcRouteMatchMetadataArgs struct {
	// If `true`, the match is on the opposite of the `match` criteria. Default is `false`.
	Invert pulumix.Input[*bool] `pulumi:"invert"`
	// Data to match from the request.
	Match pulumix.Input[*RouteSpecGrpcRouteMatchMetadataMatchArgs] `pulumi:"match"`
	// Name of the route. Must be between 1 and 50 characters in length.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (RouteSpecGrpcRouteMatchMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteMatchMetadata)(nil)).Elem()
}

func (i RouteSpecGrpcRouteMatchMetadataArgs) ToRouteSpecGrpcRouteMatchMetadataOutput() RouteSpecGrpcRouteMatchMetadataOutput {
	return i.ToRouteSpecGrpcRouteMatchMetadataOutputWithContext(context.Background())
}

func (i RouteSpecGrpcRouteMatchMetadataArgs) ToRouteSpecGrpcRouteMatchMetadataOutputWithContext(ctx context.Context) RouteSpecGrpcRouteMatchMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecGrpcRouteMatchMetadataOutput)
}

func (i *RouteSpecGrpcRouteMatchMetadataArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecGrpcRouteMatchMetadataArgs] {
	return pulumix.Val(i)
}

type RouteSpecGrpcRouteMatchMetadataOutput struct{ *pulumi.OutputState }

func (RouteSpecGrpcRouteMatchMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteMatchMetadata)(nil)).Elem()
}

func (o RouteSpecGrpcRouteMatchMetadataOutput) ToRouteSpecGrpcRouteMatchMetadataOutput() RouteSpecGrpcRouteMatchMetadataOutput {
	return o
}

func (o RouteSpecGrpcRouteMatchMetadataOutput) ToRouteSpecGrpcRouteMatchMetadataOutputWithContext(ctx context.Context) RouteSpecGrpcRouteMatchMetadataOutput {
	return o
}

func (o RouteSpecGrpcRouteMatchMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecGrpcRouteMatchMetadata] {
	return pulumix.Output[RouteSpecGrpcRouteMatchMetadata]{
		OutputState: o.OutputState,
	}
}

// If `true`, the match is on the opposite of the `match` criteria. Default is `false`.
func (o RouteSpecGrpcRouteMatchMetadataOutput) Invert() pulumix.Output[*bool] {
	return pulumix.Apply[RouteSpecGrpcRouteMatchMetadata](o, func(v RouteSpecGrpcRouteMatchMetadata) *bool { return v.Invert })
}

// Data to match from the request.
func (o RouteSpecGrpcRouteMatchMetadataOutput) Match() pulumix.GPtrOutput[RouteSpecGrpcRouteMatchMetadataMatch, RouteSpecGrpcRouteMatchMetadataMatchOutput] {
	value := pulumix.Apply[RouteSpecGrpcRouteMatchMetadata](o, func(v RouteSpecGrpcRouteMatchMetadata) *RouteSpecGrpcRouteMatchMetadataMatch { return v.Match })
	return pulumix.GPtrOutput[RouteSpecGrpcRouteMatchMetadataMatch, RouteSpecGrpcRouteMatchMetadataMatchOutput]{OutputState: value.OutputState}
}

// Name of the route. Must be between 1 and 50 characters in length.
func (o RouteSpecGrpcRouteMatchMetadataOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecGrpcRouteMatchMetadata](o, func(v RouteSpecGrpcRouteMatchMetadata) string { return v.Name })
}

type RouteSpecGrpcRouteMatchMetadataMatch struct {
	// The exact path to match on.
	Exact *string `pulumi:"exact"`
	// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	Prefix *string `pulumi:"prefix"`
	// Object that specifies the range of numbers that the value sent by the client must be included in.
	Range *RouteSpecGrpcRouteMatchMetadataMatchRange `pulumi:"range"`
	// The regex used to match the path.
	Regex *string `pulumi:"regex"`
	// Value sent by the client must end with the specified characters. Must be between 1 and 255 characters in length.
	Suffix *string `pulumi:"suffix"`
}

type RouteSpecGrpcRouteMatchMetadataMatchArgs struct {
	// The exact path to match on.
	Exact pulumix.Input[*string] `pulumi:"exact"`
	// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Object that specifies the range of numbers that the value sent by the client must be included in.
	Range pulumix.Input[*RouteSpecGrpcRouteMatchMetadataMatchRangeArgs] `pulumi:"range"`
	// The regex used to match the path.
	Regex pulumix.Input[*string] `pulumi:"regex"`
	// Value sent by the client must end with the specified characters. Must be between 1 and 255 characters in length.
	Suffix pulumix.Input[*string] `pulumi:"suffix"`
}

func (RouteSpecGrpcRouteMatchMetadataMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteMatchMetadataMatch)(nil)).Elem()
}

func (i RouteSpecGrpcRouteMatchMetadataMatchArgs) ToRouteSpecGrpcRouteMatchMetadataMatchOutput() RouteSpecGrpcRouteMatchMetadataMatchOutput {
	return i.ToRouteSpecGrpcRouteMatchMetadataMatchOutputWithContext(context.Background())
}

func (i RouteSpecGrpcRouteMatchMetadataMatchArgs) ToRouteSpecGrpcRouteMatchMetadataMatchOutputWithContext(ctx context.Context) RouteSpecGrpcRouteMatchMetadataMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecGrpcRouteMatchMetadataMatchOutput)
}

func (i *RouteSpecGrpcRouteMatchMetadataMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecGrpcRouteMatchMetadataMatchArgs] {
	return pulumix.Val(i)
}

type RouteSpecGrpcRouteMatchMetadataMatchOutput struct{ *pulumi.OutputState }

func (RouteSpecGrpcRouteMatchMetadataMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteMatchMetadataMatch)(nil)).Elem()
}

func (o RouteSpecGrpcRouteMatchMetadataMatchOutput) ToRouteSpecGrpcRouteMatchMetadataMatchOutput() RouteSpecGrpcRouteMatchMetadataMatchOutput {
	return o
}

func (o RouteSpecGrpcRouteMatchMetadataMatchOutput) ToRouteSpecGrpcRouteMatchMetadataMatchOutputWithContext(ctx context.Context) RouteSpecGrpcRouteMatchMetadataMatchOutput {
	return o
}

func (o RouteSpecGrpcRouteMatchMetadataMatchOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecGrpcRouteMatchMetadataMatch] {
	return pulumix.Output[RouteSpecGrpcRouteMatchMetadataMatch]{
		OutputState: o.OutputState,
	}
}

// The exact path to match on.
func (o RouteSpecGrpcRouteMatchMetadataMatchOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecGrpcRouteMatchMetadataMatch](o, func(v RouteSpecGrpcRouteMatchMetadataMatch) *string { return v.Exact })
}

// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
func (o RouteSpecGrpcRouteMatchMetadataMatchOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecGrpcRouteMatchMetadataMatch](o, func(v RouteSpecGrpcRouteMatchMetadataMatch) *string { return v.Prefix })
}

// Object that specifies the range of numbers that the value sent by the client must be included in.
func (o RouteSpecGrpcRouteMatchMetadataMatchOutput) Range() pulumix.GPtrOutput[RouteSpecGrpcRouteMatchMetadataMatchRange, RouteSpecGrpcRouteMatchMetadataMatchRangeOutput] {
	value := pulumix.Apply[RouteSpecGrpcRouteMatchMetadataMatch](o, func(v RouteSpecGrpcRouteMatchMetadataMatch) *RouteSpecGrpcRouteMatchMetadataMatchRange {
		return v.Range
	})
	return pulumix.GPtrOutput[RouteSpecGrpcRouteMatchMetadataMatchRange, RouteSpecGrpcRouteMatchMetadataMatchRangeOutput]{OutputState: value.OutputState}
}

// The regex used to match the path.
func (o RouteSpecGrpcRouteMatchMetadataMatchOutput) Regex() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecGrpcRouteMatchMetadataMatch](o, func(v RouteSpecGrpcRouteMatchMetadataMatch) *string { return v.Regex })
}

// Value sent by the client must end with the specified characters. Must be between 1 and 255 characters in length.
func (o RouteSpecGrpcRouteMatchMetadataMatchOutput) Suffix() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecGrpcRouteMatchMetadataMatch](o, func(v RouteSpecGrpcRouteMatchMetadataMatch) *string { return v.Suffix })
}

type RouteSpecGrpcRouteMatchMetadataMatchRange struct {
	// End of the range.
	End int `pulumi:"end"`
	// Start of the range.
	Start int `pulumi:"start"`
}

type RouteSpecGrpcRouteMatchMetadataMatchRangeArgs struct {
	// End of the range.
	End pulumix.Input[int] `pulumi:"end"`
	// Start of the range.
	Start pulumix.Input[int] `pulumi:"start"`
}

func (RouteSpecGrpcRouteMatchMetadataMatchRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteMatchMetadataMatchRange)(nil)).Elem()
}

func (i RouteSpecGrpcRouteMatchMetadataMatchRangeArgs) ToRouteSpecGrpcRouteMatchMetadataMatchRangeOutput() RouteSpecGrpcRouteMatchMetadataMatchRangeOutput {
	return i.ToRouteSpecGrpcRouteMatchMetadataMatchRangeOutputWithContext(context.Background())
}

func (i RouteSpecGrpcRouteMatchMetadataMatchRangeArgs) ToRouteSpecGrpcRouteMatchMetadataMatchRangeOutputWithContext(ctx context.Context) RouteSpecGrpcRouteMatchMetadataMatchRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecGrpcRouteMatchMetadataMatchRangeOutput)
}

func (i *RouteSpecGrpcRouteMatchMetadataMatchRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecGrpcRouteMatchMetadataMatchRangeArgs] {
	return pulumix.Val(i)
}

type RouteSpecGrpcRouteMatchMetadataMatchRangeOutput struct{ *pulumi.OutputState }

func (RouteSpecGrpcRouteMatchMetadataMatchRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteMatchMetadataMatchRange)(nil)).Elem()
}

func (o RouteSpecGrpcRouteMatchMetadataMatchRangeOutput) ToRouteSpecGrpcRouteMatchMetadataMatchRangeOutput() RouteSpecGrpcRouteMatchMetadataMatchRangeOutput {
	return o
}

func (o RouteSpecGrpcRouteMatchMetadataMatchRangeOutput) ToRouteSpecGrpcRouteMatchMetadataMatchRangeOutputWithContext(ctx context.Context) RouteSpecGrpcRouteMatchMetadataMatchRangeOutput {
	return o
}

func (o RouteSpecGrpcRouteMatchMetadataMatchRangeOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecGrpcRouteMatchMetadataMatchRange] {
	return pulumix.Output[RouteSpecGrpcRouteMatchMetadataMatchRange]{
		OutputState: o.OutputState,
	}
}

// End of the range.
func (o RouteSpecGrpcRouteMatchMetadataMatchRangeOutput) End() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecGrpcRouteMatchMetadataMatchRange](o, func(v RouteSpecGrpcRouteMatchMetadataMatchRange) int { return v.End })
}

// Start of the range.
func (o RouteSpecGrpcRouteMatchMetadataMatchRangeOutput) Start() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecGrpcRouteMatchMetadataMatchRange](o, func(v RouteSpecGrpcRouteMatchMetadataMatchRange) int { return v.Start })
}

type RouteSpecGrpcRouteRetryPolicy struct {
	// List of gRPC retry events.
	// Valid values: `cancelled`, `deadline-exceeded`, `internal`, `resource-exhausted`, `unavailable`.
	GrpcRetryEvents []string `pulumi:"grpcRetryEvents"`
	// List of HTTP retry events.
	// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
	// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
	HttpRetryEvents []string `pulumi:"httpRetryEvents"`
	// Maximum number of retries.
	MaxRetries int `pulumi:"maxRetries"`
	// Per-retry timeout.
	PerRetryTimeout RouteSpecGrpcRouteRetryPolicyPerRetryTimeout `pulumi:"perRetryTimeout"`
	// List of TCP retry events. The only valid value is `connection-error`.
	//
	// You must specify at least one value for `httpRetryEvents`, or at least one value for `tcpRetryEvents`.
	TcpRetryEvents []string `pulumi:"tcpRetryEvents"`
}

type RouteSpecGrpcRouteRetryPolicyArgs struct {
	// List of gRPC retry events.
	// Valid values: `cancelled`, `deadline-exceeded`, `internal`, `resource-exhausted`, `unavailable`.
	GrpcRetryEvents pulumix.Input[[]string] `pulumi:"grpcRetryEvents"`
	// List of HTTP retry events.
	// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
	// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
	HttpRetryEvents pulumix.Input[[]string] `pulumi:"httpRetryEvents"`
	// Maximum number of retries.
	MaxRetries pulumix.Input[int] `pulumi:"maxRetries"`
	// Per-retry timeout.
	PerRetryTimeout pulumix.Input[*RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs] `pulumi:"perRetryTimeout"`
	// List of TCP retry events. The only valid value is `connection-error`.
	//
	// You must specify at least one value for `httpRetryEvents`, or at least one value for `tcpRetryEvents`.
	TcpRetryEvents pulumix.Input[[]string] `pulumi:"tcpRetryEvents"`
}

func (RouteSpecGrpcRouteRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteRetryPolicy)(nil)).Elem()
}

func (i RouteSpecGrpcRouteRetryPolicyArgs) ToRouteSpecGrpcRouteRetryPolicyOutput() RouteSpecGrpcRouteRetryPolicyOutput {
	return i.ToRouteSpecGrpcRouteRetryPolicyOutputWithContext(context.Background())
}

func (i RouteSpecGrpcRouteRetryPolicyArgs) ToRouteSpecGrpcRouteRetryPolicyOutputWithContext(ctx context.Context) RouteSpecGrpcRouteRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecGrpcRouteRetryPolicyOutput)
}

func (i *RouteSpecGrpcRouteRetryPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecGrpcRouteRetryPolicyArgs] {
	return pulumix.Val(i)
}

type RouteSpecGrpcRouteRetryPolicyOutput struct{ *pulumi.OutputState }

func (RouteSpecGrpcRouteRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteRetryPolicy)(nil)).Elem()
}

func (o RouteSpecGrpcRouteRetryPolicyOutput) ToRouteSpecGrpcRouteRetryPolicyOutput() RouteSpecGrpcRouteRetryPolicyOutput {
	return o
}

func (o RouteSpecGrpcRouteRetryPolicyOutput) ToRouteSpecGrpcRouteRetryPolicyOutputWithContext(ctx context.Context) RouteSpecGrpcRouteRetryPolicyOutput {
	return o
}

func (o RouteSpecGrpcRouteRetryPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecGrpcRouteRetryPolicy] {
	return pulumix.Output[RouteSpecGrpcRouteRetryPolicy]{
		OutputState: o.OutputState,
	}
}

// List of gRPC retry events.
// Valid values: `cancelled`, `deadline-exceeded`, `internal`, `resource-exhausted`, `unavailable`.
func (o RouteSpecGrpcRouteRetryPolicyOutput) GrpcRetryEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RouteSpecGrpcRouteRetryPolicy](o, func(v RouteSpecGrpcRouteRetryPolicy) []string { return v.GrpcRetryEvents })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// List of HTTP retry events.
// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
func (o RouteSpecGrpcRouteRetryPolicyOutput) HttpRetryEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RouteSpecGrpcRouteRetryPolicy](o, func(v RouteSpecGrpcRouteRetryPolicy) []string { return v.HttpRetryEvents })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Maximum number of retries.
func (o RouteSpecGrpcRouteRetryPolicyOutput) MaxRetries() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecGrpcRouteRetryPolicy](o, func(v RouteSpecGrpcRouteRetryPolicy) int { return v.MaxRetries })
}

// Per-retry timeout.
func (o RouteSpecGrpcRouteRetryPolicyOutput) PerRetryTimeout() pulumix.GPtrOutput[RouteSpecGrpcRouteRetryPolicyPerRetryTimeout, RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput] {
	value := pulumix.Apply[RouteSpecGrpcRouteRetryPolicy](o, func(v RouteSpecGrpcRouteRetryPolicy) RouteSpecGrpcRouteRetryPolicyPerRetryTimeout {
		return v.PerRetryTimeout
	})
	return pulumix.GPtrOutput[RouteSpecGrpcRouteRetryPolicyPerRetryTimeout, RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput]{OutputState: value.OutputState}
}

// List of TCP retry events. The only valid value is `connection-error`.
//
// You must specify at least one value for `httpRetryEvents`, or at least one value for `tcpRetryEvents`.
func (o RouteSpecGrpcRouteRetryPolicyOutput) TcpRetryEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RouteSpecGrpcRouteRetryPolicy](o, func(v RouteSpecGrpcRouteRetryPolicy) []string { return v.TcpRetryEvents })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type RouteSpecGrpcRouteRetryPolicyPerRetryTimeout struct {
	// Retry unit. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// Retry value.
	Value int `pulumi:"value"`
}

type RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs struct {
	// Retry unit. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Retry value.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteRetryPolicyPerRetryTimeout)(nil)).Elem()
}

func (i RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs) ToRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput() RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput {
	return i.ToRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutputWithContext(context.Background())
}

func (i RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs) ToRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutputWithContext(ctx context.Context) RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput)
}

func (i *RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs] {
	return pulumix.Val(i)
}

type RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput struct{ *pulumi.OutputState }

func (RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteRetryPolicyPerRetryTimeout)(nil)).Elem()
}

func (o RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput) ToRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput() RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput {
	return o
}

func (o RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput) ToRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutputWithContext(ctx context.Context) RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput {
	return o
}

func (o RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecGrpcRouteRetryPolicyPerRetryTimeout] {
	return pulumix.Output[RouteSpecGrpcRouteRetryPolicyPerRetryTimeout]{
		OutputState: o.OutputState,
	}
}

// Retry unit. Valid values: `ms`, `s`.
func (o RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecGrpcRouteRetryPolicyPerRetryTimeout](o, func(v RouteSpecGrpcRouteRetryPolicyPerRetryTimeout) string { return v.Unit })
}

// Retry value.
func (o RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecGrpcRouteRetryPolicyPerRetryTimeout](o, func(v RouteSpecGrpcRouteRetryPolicyPerRetryTimeout) int { return v.Value })
}

type RouteSpecGrpcRouteTimeout struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle *RouteSpecGrpcRouteTimeoutIdle `pulumi:"idle"`
	// Per request timeout.
	PerRequest *RouteSpecGrpcRouteTimeoutPerRequest `pulumi:"perRequest"`
}

type RouteSpecGrpcRouteTimeoutArgs struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle pulumix.Input[*RouteSpecGrpcRouteTimeoutIdleArgs] `pulumi:"idle"`
	// Per request timeout.
	PerRequest pulumix.Input[*RouteSpecGrpcRouteTimeoutPerRequestArgs] `pulumi:"perRequest"`
}

func (RouteSpecGrpcRouteTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteTimeout)(nil)).Elem()
}

func (i RouteSpecGrpcRouteTimeoutArgs) ToRouteSpecGrpcRouteTimeoutOutput() RouteSpecGrpcRouteTimeoutOutput {
	return i.ToRouteSpecGrpcRouteTimeoutOutputWithContext(context.Background())
}

func (i RouteSpecGrpcRouteTimeoutArgs) ToRouteSpecGrpcRouteTimeoutOutputWithContext(ctx context.Context) RouteSpecGrpcRouteTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecGrpcRouteTimeoutOutput)
}

func (i *RouteSpecGrpcRouteTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecGrpcRouteTimeoutArgs] {
	return pulumix.Val(i)
}

type RouteSpecGrpcRouteTimeoutOutput struct{ *pulumi.OutputState }

func (RouteSpecGrpcRouteTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteTimeout)(nil)).Elem()
}

func (o RouteSpecGrpcRouteTimeoutOutput) ToRouteSpecGrpcRouteTimeoutOutput() RouteSpecGrpcRouteTimeoutOutput {
	return o
}

func (o RouteSpecGrpcRouteTimeoutOutput) ToRouteSpecGrpcRouteTimeoutOutputWithContext(ctx context.Context) RouteSpecGrpcRouteTimeoutOutput {
	return o
}

func (o RouteSpecGrpcRouteTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecGrpcRouteTimeout] {
	return pulumix.Output[RouteSpecGrpcRouteTimeout]{
		OutputState: o.OutputState,
	}
}

// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
func (o RouteSpecGrpcRouteTimeoutOutput) Idle() pulumix.GPtrOutput[RouteSpecGrpcRouteTimeoutIdle, RouteSpecGrpcRouteTimeoutIdleOutput] {
	value := pulumix.Apply[RouteSpecGrpcRouteTimeout](o, func(v RouteSpecGrpcRouteTimeout) *RouteSpecGrpcRouteTimeoutIdle { return v.Idle })
	return pulumix.GPtrOutput[RouteSpecGrpcRouteTimeoutIdle, RouteSpecGrpcRouteTimeoutIdleOutput]{OutputState: value.OutputState}
}

// Per request timeout.
func (o RouteSpecGrpcRouteTimeoutOutput) PerRequest() pulumix.GPtrOutput[RouteSpecGrpcRouteTimeoutPerRequest, RouteSpecGrpcRouteTimeoutPerRequestOutput] {
	value := pulumix.Apply[RouteSpecGrpcRouteTimeout](o, func(v RouteSpecGrpcRouteTimeout) *RouteSpecGrpcRouteTimeoutPerRequest { return v.PerRequest })
	return pulumix.GPtrOutput[RouteSpecGrpcRouteTimeoutPerRequest, RouteSpecGrpcRouteTimeoutPerRequestOutput]{OutputState: value.OutputState}
}

type RouteSpecGrpcRouteTimeoutIdle struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value int `pulumi:"value"`
}

type RouteSpecGrpcRouteTimeoutIdleArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (RouteSpecGrpcRouteTimeoutIdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteTimeoutIdle)(nil)).Elem()
}

func (i RouteSpecGrpcRouteTimeoutIdleArgs) ToRouteSpecGrpcRouteTimeoutIdleOutput() RouteSpecGrpcRouteTimeoutIdleOutput {
	return i.ToRouteSpecGrpcRouteTimeoutIdleOutputWithContext(context.Background())
}

func (i RouteSpecGrpcRouteTimeoutIdleArgs) ToRouteSpecGrpcRouteTimeoutIdleOutputWithContext(ctx context.Context) RouteSpecGrpcRouteTimeoutIdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecGrpcRouteTimeoutIdleOutput)
}

func (i *RouteSpecGrpcRouteTimeoutIdleArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecGrpcRouteTimeoutIdleArgs] {
	return pulumix.Val(i)
}

type RouteSpecGrpcRouteTimeoutIdleOutput struct{ *pulumi.OutputState }

func (RouteSpecGrpcRouteTimeoutIdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteTimeoutIdle)(nil)).Elem()
}

func (o RouteSpecGrpcRouteTimeoutIdleOutput) ToRouteSpecGrpcRouteTimeoutIdleOutput() RouteSpecGrpcRouteTimeoutIdleOutput {
	return o
}

func (o RouteSpecGrpcRouteTimeoutIdleOutput) ToRouteSpecGrpcRouteTimeoutIdleOutputWithContext(ctx context.Context) RouteSpecGrpcRouteTimeoutIdleOutput {
	return o
}

func (o RouteSpecGrpcRouteTimeoutIdleOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecGrpcRouteTimeoutIdle] {
	return pulumix.Output[RouteSpecGrpcRouteTimeoutIdle]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o RouteSpecGrpcRouteTimeoutIdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecGrpcRouteTimeoutIdle](o, func(v RouteSpecGrpcRouteTimeoutIdle) string { return v.Unit })
}

// Number of time units. Minimum value of `0`.
func (o RouteSpecGrpcRouteTimeoutIdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecGrpcRouteTimeoutIdle](o, func(v RouteSpecGrpcRouteTimeoutIdle) int { return v.Value })
}

type RouteSpecGrpcRouteTimeoutPerRequest struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value int `pulumi:"value"`
}

type RouteSpecGrpcRouteTimeoutPerRequestArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (RouteSpecGrpcRouteTimeoutPerRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteTimeoutPerRequest)(nil)).Elem()
}

func (i RouteSpecGrpcRouteTimeoutPerRequestArgs) ToRouteSpecGrpcRouteTimeoutPerRequestOutput() RouteSpecGrpcRouteTimeoutPerRequestOutput {
	return i.ToRouteSpecGrpcRouteTimeoutPerRequestOutputWithContext(context.Background())
}

func (i RouteSpecGrpcRouteTimeoutPerRequestArgs) ToRouteSpecGrpcRouteTimeoutPerRequestOutputWithContext(ctx context.Context) RouteSpecGrpcRouteTimeoutPerRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecGrpcRouteTimeoutPerRequestOutput)
}

func (i *RouteSpecGrpcRouteTimeoutPerRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecGrpcRouteTimeoutPerRequestArgs] {
	return pulumix.Val(i)
}

type RouteSpecGrpcRouteTimeoutPerRequestOutput struct{ *pulumi.OutputState }

func (RouteSpecGrpcRouteTimeoutPerRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecGrpcRouteTimeoutPerRequest)(nil)).Elem()
}

func (o RouteSpecGrpcRouteTimeoutPerRequestOutput) ToRouteSpecGrpcRouteTimeoutPerRequestOutput() RouteSpecGrpcRouteTimeoutPerRequestOutput {
	return o
}

func (o RouteSpecGrpcRouteTimeoutPerRequestOutput) ToRouteSpecGrpcRouteTimeoutPerRequestOutputWithContext(ctx context.Context) RouteSpecGrpcRouteTimeoutPerRequestOutput {
	return o
}

func (o RouteSpecGrpcRouteTimeoutPerRequestOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecGrpcRouteTimeoutPerRequest] {
	return pulumix.Output[RouteSpecGrpcRouteTimeoutPerRequest]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o RouteSpecGrpcRouteTimeoutPerRequestOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecGrpcRouteTimeoutPerRequest](o, func(v RouteSpecGrpcRouteTimeoutPerRequest) string { return v.Unit })
}

// Number of time units. Minimum value of `0`.
func (o RouteSpecGrpcRouteTimeoutPerRequestOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecGrpcRouteTimeoutPerRequest](o, func(v RouteSpecGrpcRouteTimeoutPerRequest) int { return v.Value })
}

type RouteSpecHttp2Route struct {
	// Action to take if a match is determined.
	Action RouteSpecHttp2RouteAction `pulumi:"action"`
	// Criteria for determining an gRPC request match.
	Match RouteSpecHttp2RouteMatch `pulumi:"match"`
	// Retry policy.
	RetryPolicy *RouteSpecHttp2RouteRetryPolicy `pulumi:"retryPolicy"`
	// Types of timeouts.
	Timeout *RouteSpecHttp2RouteTimeout `pulumi:"timeout"`
}

type RouteSpecHttp2RouteArgs struct {
	// Action to take if a match is determined.
	Action pulumix.Input[*RouteSpecHttp2RouteActionArgs] `pulumi:"action"`
	// Criteria for determining an gRPC request match.
	Match pulumix.Input[*RouteSpecHttp2RouteMatchArgs] `pulumi:"match"`
	// Retry policy.
	RetryPolicy pulumix.Input[*RouteSpecHttp2RouteRetryPolicyArgs] `pulumi:"retryPolicy"`
	// Types of timeouts.
	Timeout pulumix.Input[*RouteSpecHttp2RouteTimeoutArgs] `pulumi:"timeout"`
}

func (RouteSpecHttp2RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2Route)(nil)).Elem()
}

func (i RouteSpecHttp2RouteArgs) ToRouteSpecHttp2RouteOutput() RouteSpecHttp2RouteOutput {
	return i.ToRouteSpecHttp2RouteOutputWithContext(context.Background())
}

func (i RouteSpecHttp2RouteArgs) ToRouteSpecHttp2RouteOutputWithContext(ctx context.Context) RouteSpecHttp2RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttp2RouteOutput)
}

func (i *RouteSpecHttp2RouteArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttp2RouteArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttp2RouteOutput struct{ *pulumi.OutputState }

func (RouteSpecHttp2RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2Route)(nil)).Elem()
}

func (o RouteSpecHttp2RouteOutput) ToRouteSpecHttp2RouteOutput() RouteSpecHttp2RouteOutput {
	return o
}

func (o RouteSpecHttp2RouteOutput) ToRouteSpecHttp2RouteOutputWithContext(ctx context.Context) RouteSpecHttp2RouteOutput {
	return o
}

func (o RouteSpecHttp2RouteOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttp2Route] {
	return pulumix.Output[RouteSpecHttp2Route]{
		OutputState: o.OutputState,
	}
}

// Action to take if a match is determined.
func (o RouteSpecHttp2RouteOutput) Action() pulumix.GPtrOutput[RouteSpecHttp2RouteAction, RouteSpecHttp2RouteActionOutput] {
	value := pulumix.Apply[RouteSpecHttp2Route](o, func(v RouteSpecHttp2Route) RouteSpecHttp2RouteAction { return v.Action })
	return pulumix.GPtrOutput[RouteSpecHttp2RouteAction, RouteSpecHttp2RouteActionOutput]{OutputState: value.OutputState}
}

// Criteria for determining an gRPC request match.
func (o RouteSpecHttp2RouteOutput) Match() pulumix.GPtrOutput[RouteSpecHttp2RouteMatch, RouteSpecHttp2RouteMatchOutput] {
	value := pulumix.Apply[RouteSpecHttp2Route](o, func(v RouteSpecHttp2Route) RouteSpecHttp2RouteMatch { return v.Match })
	return pulumix.GPtrOutput[RouteSpecHttp2RouteMatch, RouteSpecHttp2RouteMatchOutput]{OutputState: value.OutputState}
}

// Retry policy.
func (o RouteSpecHttp2RouteOutput) RetryPolicy() pulumix.GPtrOutput[RouteSpecHttp2RouteRetryPolicy, RouteSpecHttp2RouteRetryPolicyOutput] {
	value := pulumix.Apply[RouteSpecHttp2Route](o, func(v RouteSpecHttp2Route) *RouteSpecHttp2RouteRetryPolicy { return v.RetryPolicy })
	return pulumix.GPtrOutput[RouteSpecHttp2RouteRetryPolicy, RouteSpecHttp2RouteRetryPolicyOutput]{OutputState: value.OutputState}
}

// Types of timeouts.
func (o RouteSpecHttp2RouteOutput) Timeout() pulumix.GPtrOutput[RouteSpecHttp2RouteTimeout, RouteSpecHttp2RouteTimeoutOutput] {
	value := pulumix.Apply[RouteSpecHttp2Route](o, func(v RouteSpecHttp2Route) *RouteSpecHttp2RouteTimeout { return v.Timeout })
	return pulumix.GPtrOutput[RouteSpecHttp2RouteTimeout, RouteSpecHttp2RouteTimeoutOutput]{OutputState: value.OutputState}
}

type RouteSpecHttp2RouteAction struct {
	// Targets that traffic is routed to when a request matches the route.
	// You can specify one or more targets and their relative weights with which to distribute traffic.
	WeightedTargets []RouteSpecHttp2RouteActionWeightedTarget `pulumi:"weightedTargets"`
}

type RouteSpecHttp2RouteActionArgs struct {
	// Targets that traffic is routed to when a request matches the route.
	// You can specify one or more targets and their relative weights with which to distribute traffic.
	WeightedTargets pulumix.Input[[]*RouteSpecHttp2RouteActionWeightedTargetArgs] `pulumi:"weightedTargets"`
}

func (RouteSpecHttp2RouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteAction)(nil)).Elem()
}

func (i RouteSpecHttp2RouteActionArgs) ToRouteSpecHttp2RouteActionOutput() RouteSpecHttp2RouteActionOutput {
	return i.ToRouteSpecHttp2RouteActionOutputWithContext(context.Background())
}

func (i RouteSpecHttp2RouteActionArgs) ToRouteSpecHttp2RouteActionOutputWithContext(ctx context.Context) RouteSpecHttp2RouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttp2RouteActionOutput)
}

func (i *RouteSpecHttp2RouteActionArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttp2RouteActionArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttp2RouteActionOutput struct{ *pulumi.OutputState }

func (RouteSpecHttp2RouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteAction)(nil)).Elem()
}

func (o RouteSpecHttp2RouteActionOutput) ToRouteSpecHttp2RouteActionOutput() RouteSpecHttp2RouteActionOutput {
	return o
}

func (o RouteSpecHttp2RouteActionOutput) ToRouteSpecHttp2RouteActionOutputWithContext(ctx context.Context) RouteSpecHttp2RouteActionOutput {
	return o
}

func (o RouteSpecHttp2RouteActionOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttp2RouteAction] {
	return pulumix.Output[RouteSpecHttp2RouteAction]{
		OutputState: o.OutputState,
	}
}

// Targets that traffic is routed to when a request matches the route.
// You can specify one or more targets and their relative weights with which to distribute traffic.
func (o RouteSpecHttp2RouteActionOutput) WeightedTargets() pulumix.GArrayOutput[RouteSpecHttp2RouteActionWeightedTarget, RouteSpecHttp2RouteActionWeightedTargetOutput] {
	value := pulumix.Apply[RouteSpecHttp2RouteAction](o, func(v RouteSpecHttp2RouteAction) []RouteSpecHttp2RouteActionWeightedTarget { return v.WeightedTargets })
	return pulumix.GArrayOutput[RouteSpecHttp2RouteActionWeightedTarget, RouteSpecHttp2RouteActionWeightedTargetOutput]{OutputState: value.OutputState}
}

type RouteSpecHttp2RouteActionWeightedTarget struct {
	// The targeted port of the weighted object.
	Port *int `pulumi:"port"`
	// Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
	VirtualNode string `pulumi:"virtualNode"`
	// Relative weight of the weighted target. An integer between 0 and 100.
	Weight int `pulumi:"weight"`
}

type RouteSpecHttp2RouteActionWeightedTargetArgs struct {
	// The targeted port of the weighted object.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
	VirtualNode pulumix.Input[string] `pulumi:"virtualNode"`
	// Relative weight of the weighted target. An integer between 0 and 100.
	Weight pulumix.Input[int] `pulumi:"weight"`
}

func (RouteSpecHttp2RouteActionWeightedTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteActionWeightedTarget)(nil)).Elem()
}

func (i RouteSpecHttp2RouteActionWeightedTargetArgs) ToRouteSpecHttp2RouteActionWeightedTargetOutput() RouteSpecHttp2RouteActionWeightedTargetOutput {
	return i.ToRouteSpecHttp2RouteActionWeightedTargetOutputWithContext(context.Background())
}

func (i RouteSpecHttp2RouteActionWeightedTargetArgs) ToRouteSpecHttp2RouteActionWeightedTargetOutputWithContext(ctx context.Context) RouteSpecHttp2RouteActionWeightedTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttp2RouteActionWeightedTargetOutput)
}

func (i *RouteSpecHttp2RouteActionWeightedTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttp2RouteActionWeightedTargetArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttp2RouteActionWeightedTargetOutput struct{ *pulumi.OutputState }

func (RouteSpecHttp2RouteActionWeightedTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteActionWeightedTarget)(nil)).Elem()
}

func (o RouteSpecHttp2RouteActionWeightedTargetOutput) ToRouteSpecHttp2RouteActionWeightedTargetOutput() RouteSpecHttp2RouteActionWeightedTargetOutput {
	return o
}

func (o RouteSpecHttp2RouteActionWeightedTargetOutput) ToRouteSpecHttp2RouteActionWeightedTargetOutputWithContext(ctx context.Context) RouteSpecHttp2RouteActionWeightedTargetOutput {
	return o
}

func (o RouteSpecHttp2RouteActionWeightedTargetOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttp2RouteActionWeightedTarget] {
	return pulumix.Output[RouteSpecHttp2RouteActionWeightedTarget]{
		OutputState: o.OutputState,
	}
}

// The targeted port of the weighted object.
func (o RouteSpecHttp2RouteActionWeightedTargetOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[RouteSpecHttp2RouteActionWeightedTarget](o, func(v RouteSpecHttp2RouteActionWeightedTarget) *int { return v.Port })
}

// Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
func (o RouteSpecHttp2RouteActionWeightedTargetOutput) VirtualNode() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecHttp2RouteActionWeightedTarget](o, func(v RouteSpecHttp2RouteActionWeightedTarget) string { return v.VirtualNode })
}

// Relative weight of the weighted target. An integer between 0 and 100.
func (o RouteSpecHttp2RouteActionWeightedTargetOutput) Weight() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecHttp2RouteActionWeightedTarget](o, func(v RouteSpecHttp2RouteActionWeightedTarget) int { return v.Weight })
}

type RouteSpecHttp2RouteMatch struct {
	// Client request headers to match on.
	Headers []RouteSpecHttp2RouteMatchHeader `pulumi:"headers"`
	// Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
	Method *string `pulumi:"method"`
	// Client request path to match on.
	Path *RouteSpecHttp2RouteMatchPath `pulumi:"path"`
	// The port number to match from the request.
	Port *int `pulumi:"port"`
	// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	Prefix *string `pulumi:"prefix"`
	// Client request query parameters to match on.
	QueryParameters []RouteSpecHttp2RouteMatchQueryParameter `pulumi:"queryParameters"`
	// Client request header scheme to match on. Valid values: `http`, `https`.
	Scheme *string `pulumi:"scheme"`
}

type RouteSpecHttp2RouteMatchArgs struct {
	// Client request headers to match on.
	Headers pulumix.Input[[]*RouteSpecHttp2RouteMatchHeaderArgs] `pulumi:"headers"`
	// Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
	Method pulumix.Input[*string] `pulumi:"method"`
	// Client request path to match on.
	Path pulumix.Input[*RouteSpecHttp2RouteMatchPathArgs] `pulumi:"path"`
	// The port number to match from the request.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Client request query parameters to match on.
	QueryParameters pulumix.Input[[]*RouteSpecHttp2RouteMatchQueryParameterArgs] `pulumi:"queryParameters"`
	// Client request header scheme to match on. Valid values: `http`, `https`.
	Scheme pulumix.Input[*string] `pulumi:"scheme"`
}

func (RouteSpecHttp2RouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteMatch)(nil)).Elem()
}

func (i RouteSpecHttp2RouteMatchArgs) ToRouteSpecHttp2RouteMatchOutput() RouteSpecHttp2RouteMatchOutput {
	return i.ToRouteSpecHttp2RouteMatchOutputWithContext(context.Background())
}

func (i RouteSpecHttp2RouteMatchArgs) ToRouteSpecHttp2RouteMatchOutputWithContext(ctx context.Context) RouteSpecHttp2RouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttp2RouteMatchOutput)
}

func (i *RouteSpecHttp2RouteMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttp2RouteMatchArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttp2RouteMatchOutput struct{ *pulumi.OutputState }

func (RouteSpecHttp2RouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteMatch)(nil)).Elem()
}

func (o RouteSpecHttp2RouteMatchOutput) ToRouteSpecHttp2RouteMatchOutput() RouteSpecHttp2RouteMatchOutput {
	return o
}

func (o RouteSpecHttp2RouteMatchOutput) ToRouteSpecHttp2RouteMatchOutputWithContext(ctx context.Context) RouteSpecHttp2RouteMatchOutput {
	return o
}

func (o RouteSpecHttp2RouteMatchOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttp2RouteMatch] {
	return pulumix.Output[RouteSpecHttp2RouteMatch]{
		OutputState: o.OutputState,
	}
}

// Client request headers to match on.
func (o RouteSpecHttp2RouteMatchOutput) Headers() pulumix.GArrayOutput[RouteSpecHttp2RouteMatchHeader, RouteSpecHttp2RouteMatchHeaderOutput] {
	value := pulumix.Apply[RouteSpecHttp2RouteMatch](o, func(v RouteSpecHttp2RouteMatch) []RouteSpecHttp2RouteMatchHeader { return v.Headers })
	return pulumix.GArrayOutput[RouteSpecHttp2RouteMatchHeader, RouteSpecHttp2RouteMatchHeaderOutput]{OutputState: value.OutputState}
}

// Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
func (o RouteSpecHttp2RouteMatchOutput) Method() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttp2RouteMatch](o, func(v RouteSpecHttp2RouteMatch) *string { return v.Method })
}

// Client request path to match on.
func (o RouteSpecHttp2RouteMatchOutput) Path() pulumix.GPtrOutput[RouteSpecHttp2RouteMatchPath, RouteSpecHttp2RouteMatchPathOutput] {
	value := pulumix.Apply[RouteSpecHttp2RouteMatch](o, func(v RouteSpecHttp2RouteMatch) *RouteSpecHttp2RouteMatchPath { return v.Path })
	return pulumix.GPtrOutput[RouteSpecHttp2RouteMatchPath, RouteSpecHttp2RouteMatchPathOutput]{OutputState: value.OutputState}
}

// The port number to match from the request.
func (o RouteSpecHttp2RouteMatchOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[RouteSpecHttp2RouteMatch](o, func(v RouteSpecHttp2RouteMatch) *int { return v.Port })
}

// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
func (o RouteSpecHttp2RouteMatchOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttp2RouteMatch](o, func(v RouteSpecHttp2RouteMatch) *string { return v.Prefix })
}

// Client request query parameters to match on.
func (o RouteSpecHttp2RouteMatchOutput) QueryParameters() pulumix.GArrayOutput[RouteSpecHttp2RouteMatchQueryParameter, RouteSpecHttp2RouteMatchQueryParameterOutput] {
	value := pulumix.Apply[RouteSpecHttp2RouteMatch](o, func(v RouteSpecHttp2RouteMatch) []RouteSpecHttp2RouteMatchQueryParameter { return v.QueryParameters })
	return pulumix.GArrayOutput[RouteSpecHttp2RouteMatchQueryParameter, RouteSpecHttp2RouteMatchQueryParameterOutput]{OutputState: value.OutputState}
}

// Client request header scheme to match on. Valid values: `http`, `https`.
func (o RouteSpecHttp2RouteMatchOutput) Scheme() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttp2RouteMatch](o, func(v RouteSpecHttp2RouteMatch) *string { return v.Scheme })
}

type RouteSpecHttp2RouteMatchHeader struct {
	// If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
	Invert *bool `pulumi:"invert"`
	// Method and value to match the header value sent with a request. Specify one match method.
	Match *RouteSpecHttp2RouteMatchHeaderMatch `pulumi:"match"`
	// Name for the HTTP header in the client request that will be matched on.
	Name string `pulumi:"name"`
}

type RouteSpecHttp2RouteMatchHeaderArgs struct {
	// If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
	Invert pulumix.Input[*bool] `pulumi:"invert"`
	// Method and value to match the header value sent with a request. Specify one match method.
	Match pulumix.Input[*RouteSpecHttp2RouteMatchHeaderMatchArgs] `pulumi:"match"`
	// Name for the HTTP header in the client request that will be matched on.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (RouteSpecHttp2RouteMatchHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteMatchHeader)(nil)).Elem()
}

func (i RouteSpecHttp2RouteMatchHeaderArgs) ToRouteSpecHttp2RouteMatchHeaderOutput() RouteSpecHttp2RouteMatchHeaderOutput {
	return i.ToRouteSpecHttp2RouteMatchHeaderOutputWithContext(context.Background())
}

func (i RouteSpecHttp2RouteMatchHeaderArgs) ToRouteSpecHttp2RouteMatchHeaderOutputWithContext(ctx context.Context) RouteSpecHttp2RouteMatchHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttp2RouteMatchHeaderOutput)
}

func (i *RouteSpecHttp2RouteMatchHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttp2RouteMatchHeaderArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttp2RouteMatchHeaderOutput struct{ *pulumi.OutputState }

func (RouteSpecHttp2RouteMatchHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteMatchHeader)(nil)).Elem()
}

func (o RouteSpecHttp2RouteMatchHeaderOutput) ToRouteSpecHttp2RouteMatchHeaderOutput() RouteSpecHttp2RouteMatchHeaderOutput {
	return o
}

func (o RouteSpecHttp2RouteMatchHeaderOutput) ToRouteSpecHttp2RouteMatchHeaderOutputWithContext(ctx context.Context) RouteSpecHttp2RouteMatchHeaderOutput {
	return o
}

func (o RouteSpecHttp2RouteMatchHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttp2RouteMatchHeader] {
	return pulumix.Output[RouteSpecHttp2RouteMatchHeader]{
		OutputState: o.OutputState,
	}
}

// If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
func (o RouteSpecHttp2RouteMatchHeaderOutput) Invert() pulumix.Output[*bool] {
	return pulumix.Apply[RouteSpecHttp2RouteMatchHeader](o, func(v RouteSpecHttp2RouteMatchHeader) *bool { return v.Invert })
}

// Method and value to match the header value sent with a request. Specify one match method.
func (o RouteSpecHttp2RouteMatchHeaderOutput) Match() pulumix.GPtrOutput[RouteSpecHttp2RouteMatchHeaderMatch, RouteSpecHttp2RouteMatchHeaderMatchOutput] {
	value := pulumix.Apply[RouteSpecHttp2RouteMatchHeader](o, func(v RouteSpecHttp2RouteMatchHeader) *RouteSpecHttp2RouteMatchHeaderMatch { return v.Match })
	return pulumix.GPtrOutput[RouteSpecHttp2RouteMatchHeaderMatch, RouteSpecHttp2RouteMatchHeaderMatchOutput]{OutputState: value.OutputState}
}

// Name for the HTTP header in the client request that will be matched on.
func (o RouteSpecHttp2RouteMatchHeaderOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecHttp2RouteMatchHeader](o, func(v RouteSpecHttp2RouteMatchHeader) string { return v.Name })
}

type RouteSpecHttp2RouteMatchHeaderMatch struct {
	// The exact path to match on.
	Exact *string `pulumi:"exact"`
	// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	Prefix *string `pulumi:"prefix"`
	// Object that specifies the range of numbers that the value sent by the client must be included in.
	Range *RouteSpecHttp2RouteMatchHeaderMatchRange `pulumi:"range"`
	// The regex used to match the path.
	Regex *string `pulumi:"regex"`
	// Value sent by the client must end with the specified characters. Must be between 1 and 255 characters in length.
	Suffix *string `pulumi:"suffix"`
}

type RouteSpecHttp2RouteMatchHeaderMatchArgs struct {
	// The exact path to match on.
	Exact pulumix.Input[*string] `pulumi:"exact"`
	// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Object that specifies the range of numbers that the value sent by the client must be included in.
	Range pulumix.Input[*RouteSpecHttp2RouteMatchHeaderMatchRangeArgs] `pulumi:"range"`
	// The regex used to match the path.
	Regex pulumix.Input[*string] `pulumi:"regex"`
	// Value sent by the client must end with the specified characters. Must be between 1 and 255 characters in length.
	Suffix pulumix.Input[*string] `pulumi:"suffix"`
}

func (RouteSpecHttp2RouteMatchHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteMatchHeaderMatch)(nil)).Elem()
}

func (i RouteSpecHttp2RouteMatchHeaderMatchArgs) ToRouteSpecHttp2RouteMatchHeaderMatchOutput() RouteSpecHttp2RouteMatchHeaderMatchOutput {
	return i.ToRouteSpecHttp2RouteMatchHeaderMatchOutputWithContext(context.Background())
}

func (i RouteSpecHttp2RouteMatchHeaderMatchArgs) ToRouteSpecHttp2RouteMatchHeaderMatchOutputWithContext(ctx context.Context) RouteSpecHttp2RouteMatchHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttp2RouteMatchHeaderMatchOutput)
}

func (i *RouteSpecHttp2RouteMatchHeaderMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttp2RouteMatchHeaderMatchArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttp2RouteMatchHeaderMatchOutput struct{ *pulumi.OutputState }

func (RouteSpecHttp2RouteMatchHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteMatchHeaderMatch)(nil)).Elem()
}

func (o RouteSpecHttp2RouteMatchHeaderMatchOutput) ToRouteSpecHttp2RouteMatchHeaderMatchOutput() RouteSpecHttp2RouteMatchHeaderMatchOutput {
	return o
}

func (o RouteSpecHttp2RouteMatchHeaderMatchOutput) ToRouteSpecHttp2RouteMatchHeaderMatchOutputWithContext(ctx context.Context) RouteSpecHttp2RouteMatchHeaderMatchOutput {
	return o
}

func (o RouteSpecHttp2RouteMatchHeaderMatchOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttp2RouteMatchHeaderMatch] {
	return pulumix.Output[RouteSpecHttp2RouteMatchHeaderMatch]{
		OutputState: o.OutputState,
	}
}

// The exact path to match on.
func (o RouteSpecHttp2RouteMatchHeaderMatchOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttp2RouteMatchHeaderMatch](o, func(v RouteSpecHttp2RouteMatchHeaderMatch) *string { return v.Exact })
}

// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
func (o RouteSpecHttp2RouteMatchHeaderMatchOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttp2RouteMatchHeaderMatch](o, func(v RouteSpecHttp2RouteMatchHeaderMatch) *string { return v.Prefix })
}

// Object that specifies the range of numbers that the value sent by the client must be included in.
func (o RouteSpecHttp2RouteMatchHeaderMatchOutput) Range() pulumix.GPtrOutput[RouteSpecHttp2RouteMatchHeaderMatchRange, RouteSpecHttp2RouteMatchHeaderMatchRangeOutput] {
	value := pulumix.Apply[RouteSpecHttp2RouteMatchHeaderMatch](o, func(v RouteSpecHttp2RouteMatchHeaderMatch) *RouteSpecHttp2RouteMatchHeaderMatchRange { return v.Range })
	return pulumix.GPtrOutput[RouteSpecHttp2RouteMatchHeaderMatchRange, RouteSpecHttp2RouteMatchHeaderMatchRangeOutput]{OutputState: value.OutputState}
}

// The regex used to match the path.
func (o RouteSpecHttp2RouteMatchHeaderMatchOutput) Regex() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttp2RouteMatchHeaderMatch](o, func(v RouteSpecHttp2RouteMatchHeaderMatch) *string { return v.Regex })
}

// Value sent by the client must end with the specified characters. Must be between 1 and 255 characters in length.
func (o RouteSpecHttp2RouteMatchHeaderMatchOutput) Suffix() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttp2RouteMatchHeaderMatch](o, func(v RouteSpecHttp2RouteMatchHeaderMatch) *string { return v.Suffix })
}

type RouteSpecHttp2RouteMatchHeaderMatchRange struct {
	// End of the range.
	End int `pulumi:"end"`
	// Start of the range.
	Start int `pulumi:"start"`
}

type RouteSpecHttp2RouteMatchHeaderMatchRangeArgs struct {
	// End of the range.
	End pulumix.Input[int] `pulumi:"end"`
	// Start of the range.
	Start pulumix.Input[int] `pulumi:"start"`
}

func (RouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteMatchHeaderMatchRange)(nil)).Elem()
}

func (i RouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ToRouteSpecHttp2RouteMatchHeaderMatchRangeOutput() RouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return i.ToRouteSpecHttp2RouteMatchHeaderMatchRangeOutputWithContext(context.Background())
}

func (i RouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ToRouteSpecHttp2RouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) RouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttp2RouteMatchHeaderMatchRangeOutput)
}

func (i *RouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttp2RouteMatchHeaderMatchRangeArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttp2RouteMatchHeaderMatchRangeOutput struct{ *pulumi.OutputState }

func (RouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteMatchHeaderMatchRange)(nil)).Elem()
}

func (o RouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ToRouteSpecHttp2RouteMatchHeaderMatchRangeOutput() RouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return o
}

func (o RouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ToRouteSpecHttp2RouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) RouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return o
}

func (o RouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttp2RouteMatchHeaderMatchRange] {
	return pulumix.Output[RouteSpecHttp2RouteMatchHeaderMatchRange]{
		OutputState: o.OutputState,
	}
}

// End of the range.
func (o RouteSpecHttp2RouteMatchHeaderMatchRangeOutput) End() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecHttp2RouteMatchHeaderMatchRange](o, func(v RouteSpecHttp2RouteMatchHeaderMatchRange) int { return v.End })
}

// Start of the range.
func (o RouteSpecHttp2RouteMatchHeaderMatchRangeOutput) Start() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecHttp2RouteMatchHeaderMatchRange](o, func(v RouteSpecHttp2RouteMatchHeaderMatchRange) int { return v.Start })
}

type RouteSpecHttp2RouteMatchPath struct {
	// Value sent by the client must match the specified value exactly. Must be between 1 and 255 characters in length.
	Exact *string `pulumi:"exact"`
	// Value sent by the client must include the specified characters. Must be between 1 and 255 characters in length.
	Regex *string `pulumi:"regex"`
}

type RouteSpecHttp2RouteMatchPathArgs struct {
	// Value sent by the client must match the specified value exactly. Must be between 1 and 255 characters in length.
	Exact pulumix.Input[*string] `pulumi:"exact"`
	// Value sent by the client must include the specified characters. Must be between 1 and 255 characters in length.
	Regex pulumix.Input[*string] `pulumi:"regex"`
}

func (RouteSpecHttp2RouteMatchPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteMatchPath)(nil)).Elem()
}

func (i RouteSpecHttp2RouteMatchPathArgs) ToRouteSpecHttp2RouteMatchPathOutput() RouteSpecHttp2RouteMatchPathOutput {
	return i.ToRouteSpecHttp2RouteMatchPathOutputWithContext(context.Background())
}

func (i RouteSpecHttp2RouteMatchPathArgs) ToRouteSpecHttp2RouteMatchPathOutputWithContext(ctx context.Context) RouteSpecHttp2RouteMatchPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttp2RouteMatchPathOutput)
}

func (i *RouteSpecHttp2RouteMatchPathArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttp2RouteMatchPathArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttp2RouteMatchPathOutput struct{ *pulumi.OutputState }

func (RouteSpecHttp2RouteMatchPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteMatchPath)(nil)).Elem()
}

func (o RouteSpecHttp2RouteMatchPathOutput) ToRouteSpecHttp2RouteMatchPathOutput() RouteSpecHttp2RouteMatchPathOutput {
	return o
}

func (o RouteSpecHttp2RouteMatchPathOutput) ToRouteSpecHttp2RouteMatchPathOutputWithContext(ctx context.Context) RouteSpecHttp2RouteMatchPathOutput {
	return o
}

func (o RouteSpecHttp2RouteMatchPathOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttp2RouteMatchPath] {
	return pulumix.Output[RouteSpecHttp2RouteMatchPath]{
		OutputState: o.OutputState,
	}
}

// Value sent by the client must match the specified value exactly. Must be between 1 and 255 characters in length.
func (o RouteSpecHttp2RouteMatchPathOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttp2RouteMatchPath](o, func(v RouteSpecHttp2RouteMatchPath) *string { return v.Exact })
}

// Value sent by the client must include the specified characters. Must be between 1 and 255 characters in length.
func (o RouteSpecHttp2RouteMatchPathOutput) Regex() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttp2RouteMatchPath](o, func(v RouteSpecHttp2RouteMatchPath) *string { return v.Regex })
}

type RouteSpecHttp2RouteMatchQueryParameter struct {
	// Criteria for determining an gRPC request match.
	Match *RouteSpecHttp2RouteMatchQueryParameterMatch `pulumi:"match"`
	// Name to use for the route. Must be between 1 and 255 characters in length.
	Name string `pulumi:"name"`
}

type RouteSpecHttp2RouteMatchQueryParameterArgs struct {
	// Criteria for determining an gRPC request match.
	Match pulumix.Input[*RouteSpecHttp2RouteMatchQueryParameterMatchArgs] `pulumi:"match"`
	// Name to use for the route. Must be between 1 and 255 characters in length.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (RouteSpecHttp2RouteMatchQueryParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteMatchQueryParameter)(nil)).Elem()
}

func (i RouteSpecHttp2RouteMatchQueryParameterArgs) ToRouteSpecHttp2RouteMatchQueryParameterOutput() RouteSpecHttp2RouteMatchQueryParameterOutput {
	return i.ToRouteSpecHttp2RouteMatchQueryParameterOutputWithContext(context.Background())
}

func (i RouteSpecHttp2RouteMatchQueryParameterArgs) ToRouteSpecHttp2RouteMatchQueryParameterOutputWithContext(ctx context.Context) RouteSpecHttp2RouteMatchQueryParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttp2RouteMatchQueryParameterOutput)
}

func (i *RouteSpecHttp2RouteMatchQueryParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttp2RouteMatchQueryParameterArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttp2RouteMatchQueryParameterOutput struct{ *pulumi.OutputState }

func (RouteSpecHttp2RouteMatchQueryParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteMatchQueryParameter)(nil)).Elem()
}

func (o RouteSpecHttp2RouteMatchQueryParameterOutput) ToRouteSpecHttp2RouteMatchQueryParameterOutput() RouteSpecHttp2RouteMatchQueryParameterOutput {
	return o
}

func (o RouteSpecHttp2RouteMatchQueryParameterOutput) ToRouteSpecHttp2RouteMatchQueryParameterOutputWithContext(ctx context.Context) RouteSpecHttp2RouteMatchQueryParameterOutput {
	return o
}

func (o RouteSpecHttp2RouteMatchQueryParameterOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttp2RouteMatchQueryParameter] {
	return pulumix.Output[RouteSpecHttp2RouteMatchQueryParameter]{
		OutputState: o.OutputState,
	}
}

// Criteria for determining an gRPC request match.
func (o RouteSpecHttp2RouteMatchQueryParameterOutput) Match() pulumix.GPtrOutput[RouteSpecHttp2RouteMatchQueryParameterMatch, RouteSpecHttp2RouteMatchQueryParameterMatchOutput] {
	value := pulumix.Apply[RouteSpecHttp2RouteMatchQueryParameter](o, func(v RouteSpecHttp2RouteMatchQueryParameter) *RouteSpecHttp2RouteMatchQueryParameterMatch {
		return v.Match
	})
	return pulumix.GPtrOutput[RouteSpecHttp2RouteMatchQueryParameterMatch, RouteSpecHttp2RouteMatchQueryParameterMatchOutput]{OutputState: value.OutputState}
}

// Name to use for the route. Must be between 1 and 255 characters in length.
func (o RouteSpecHttp2RouteMatchQueryParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecHttp2RouteMatchQueryParameter](o, func(v RouteSpecHttp2RouteMatchQueryParameter) string { return v.Name })
}

type RouteSpecHttp2RouteMatchQueryParameterMatch struct {
	// The exact path to match on.
	Exact *string `pulumi:"exact"`
}

type RouteSpecHttp2RouteMatchQueryParameterMatchArgs struct {
	// The exact path to match on.
	Exact pulumix.Input[*string] `pulumi:"exact"`
}

func (RouteSpecHttp2RouteMatchQueryParameterMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteMatchQueryParameterMatch)(nil)).Elem()
}

func (i RouteSpecHttp2RouteMatchQueryParameterMatchArgs) ToRouteSpecHttp2RouteMatchQueryParameterMatchOutput() RouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return i.ToRouteSpecHttp2RouteMatchQueryParameterMatchOutputWithContext(context.Background())
}

func (i RouteSpecHttp2RouteMatchQueryParameterMatchArgs) ToRouteSpecHttp2RouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) RouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttp2RouteMatchQueryParameterMatchOutput)
}

func (i *RouteSpecHttp2RouteMatchQueryParameterMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttp2RouteMatchQueryParameterMatchArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttp2RouteMatchQueryParameterMatchOutput struct{ *pulumi.OutputState }

func (RouteSpecHttp2RouteMatchQueryParameterMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteMatchQueryParameterMatch)(nil)).Elem()
}

func (o RouteSpecHttp2RouteMatchQueryParameterMatchOutput) ToRouteSpecHttp2RouteMatchQueryParameterMatchOutput() RouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return o
}

func (o RouteSpecHttp2RouteMatchQueryParameterMatchOutput) ToRouteSpecHttp2RouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) RouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return o
}

func (o RouteSpecHttp2RouteMatchQueryParameterMatchOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttp2RouteMatchQueryParameterMatch] {
	return pulumix.Output[RouteSpecHttp2RouteMatchQueryParameterMatch]{
		OutputState: o.OutputState,
	}
}

// The exact path to match on.
func (o RouteSpecHttp2RouteMatchQueryParameterMatchOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttp2RouteMatchQueryParameterMatch](o, func(v RouteSpecHttp2RouteMatchQueryParameterMatch) *string { return v.Exact })
}

type RouteSpecHttp2RouteRetryPolicy struct {
	// List of HTTP retry events.
	// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
	// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
	HttpRetryEvents []string `pulumi:"httpRetryEvents"`
	// Maximum number of retries.
	MaxRetries int `pulumi:"maxRetries"`
	// Per-retry timeout.
	PerRetryTimeout RouteSpecHttp2RouteRetryPolicyPerRetryTimeout `pulumi:"perRetryTimeout"`
	// List of TCP retry events. The only valid value is `connection-error`.
	//
	// You must specify at least one value for `httpRetryEvents`, or at least one value for `tcpRetryEvents`.
	TcpRetryEvents []string `pulumi:"tcpRetryEvents"`
}

type RouteSpecHttp2RouteRetryPolicyArgs struct {
	// List of HTTP retry events.
	// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
	// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
	HttpRetryEvents pulumix.Input[[]string] `pulumi:"httpRetryEvents"`
	// Maximum number of retries.
	MaxRetries pulumix.Input[int] `pulumi:"maxRetries"`
	// Per-retry timeout.
	PerRetryTimeout pulumix.Input[*RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutArgs] `pulumi:"perRetryTimeout"`
	// List of TCP retry events. The only valid value is `connection-error`.
	//
	// You must specify at least one value for `httpRetryEvents`, or at least one value for `tcpRetryEvents`.
	TcpRetryEvents pulumix.Input[[]string] `pulumi:"tcpRetryEvents"`
}

func (RouteSpecHttp2RouteRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteRetryPolicy)(nil)).Elem()
}

func (i RouteSpecHttp2RouteRetryPolicyArgs) ToRouteSpecHttp2RouteRetryPolicyOutput() RouteSpecHttp2RouteRetryPolicyOutput {
	return i.ToRouteSpecHttp2RouteRetryPolicyOutputWithContext(context.Background())
}

func (i RouteSpecHttp2RouteRetryPolicyArgs) ToRouteSpecHttp2RouteRetryPolicyOutputWithContext(ctx context.Context) RouteSpecHttp2RouteRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttp2RouteRetryPolicyOutput)
}

func (i *RouteSpecHttp2RouteRetryPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttp2RouteRetryPolicyArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttp2RouteRetryPolicyOutput struct{ *pulumi.OutputState }

func (RouteSpecHttp2RouteRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteRetryPolicy)(nil)).Elem()
}

func (o RouteSpecHttp2RouteRetryPolicyOutput) ToRouteSpecHttp2RouteRetryPolicyOutput() RouteSpecHttp2RouteRetryPolicyOutput {
	return o
}

func (o RouteSpecHttp2RouteRetryPolicyOutput) ToRouteSpecHttp2RouteRetryPolicyOutputWithContext(ctx context.Context) RouteSpecHttp2RouteRetryPolicyOutput {
	return o
}

func (o RouteSpecHttp2RouteRetryPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttp2RouteRetryPolicy] {
	return pulumix.Output[RouteSpecHttp2RouteRetryPolicy]{
		OutputState: o.OutputState,
	}
}

// List of HTTP retry events.
// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
func (o RouteSpecHttp2RouteRetryPolicyOutput) HttpRetryEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RouteSpecHttp2RouteRetryPolicy](o, func(v RouteSpecHttp2RouteRetryPolicy) []string { return v.HttpRetryEvents })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Maximum number of retries.
func (o RouteSpecHttp2RouteRetryPolicyOutput) MaxRetries() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecHttp2RouteRetryPolicy](o, func(v RouteSpecHttp2RouteRetryPolicy) int { return v.MaxRetries })
}

// Per-retry timeout.
func (o RouteSpecHttp2RouteRetryPolicyOutput) PerRetryTimeout() pulumix.GPtrOutput[RouteSpecHttp2RouteRetryPolicyPerRetryTimeout, RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput] {
	value := pulumix.Apply[RouteSpecHttp2RouteRetryPolicy](o, func(v RouteSpecHttp2RouteRetryPolicy) RouteSpecHttp2RouteRetryPolicyPerRetryTimeout {
		return v.PerRetryTimeout
	})
	return pulumix.GPtrOutput[RouteSpecHttp2RouteRetryPolicyPerRetryTimeout, RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput]{OutputState: value.OutputState}
}

// List of TCP retry events. The only valid value is `connection-error`.
//
// You must specify at least one value for `httpRetryEvents`, or at least one value for `tcpRetryEvents`.
func (o RouteSpecHttp2RouteRetryPolicyOutput) TcpRetryEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RouteSpecHttp2RouteRetryPolicy](o, func(v RouteSpecHttp2RouteRetryPolicy) []string { return v.TcpRetryEvents })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type RouteSpecHttp2RouteRetryPolicyPerRetryTimeout struct {
	// Retry unit. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// Retry value.
	Value int `pulumi:"value"`
}

type RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutArgs struct {
	// Retry unit. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Retry value.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteRetryPolicyPerRetryTimeout)(nil)).Elem()
}

func (i RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutArgs) ToRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput() RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput {
	return i.ToRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutputWithContext(context.Background())
}

func (i RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutArgs) ToRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutputWithContext(ctx context.Context) RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput)
}

func (i *RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput struct{ *pulumi.OutputState }

func (RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteRetryPolicyPerRetryTimeout)(nil)).Elem()
}

func (o RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput) ToRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput() RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput {
	return o
}

func (o RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput) ToRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutputWithContext(ctx context.Context) RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput {
	return o
}

func (o RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttp2RouteRetryPolicyPerRetryTimeout] {
	return pulumix.Output[RouteSpecHttp2RouteRetryPolicyPerRetryTimeout]{
		OutputState: o.OutputState,
	}
}

// Retry unit. Valid values: `ms`, `s`.
func (o RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecHttp2RouteRetryPolicyPerRetryTimeout](o, func(v RouteSpecHttp2RouteRetryPolicyPerRetryTimeout) string { return v.Unit })
}

// Retry value.
func (o RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecHttp2RouteRetryPolicyPerRetryTimeout](o, func(v RouteSpecHttp2RouteRetryPolicyPerRetryTimeout) int { return v.Value })
}

type RouteSpecHttp2RouteTimeout struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle *RouteSpecHttp2RouteTimeoutIdle `pulumi:"idle"`
	// Per request timeout.
	PerRequest *RouteSpecHttp2RouteTimeoutPerRequest `pulumi:"perRequest"`
}

type RouteSpecHttp2RouteTimeoutArgs struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle pulumix.Input[*RouteSpecHttp2RouteTimeoutIdleArgs] `pulumi:"idle"`
	// Per request timeout.
	PerRequest pulumix.Input[*RouteSpecHttp2RouteTimeoutPerRequestArgs] `pulumi:"perRequest"`
}

func (RouteSpecHttp2RouteTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteTimeout)(nil)).Elem()
}

func (i RouteSpecHttp2RouteTimeoutArgs) ToRouteSpecHttp2RouteTimeoutOutput() RouteSpecHttp2RouteTimeoutOutput {
	return i.ToRouteSpecHttp2RouteTimeoutOutputWithContext(context.Background())
}

func (i RouteSpecHttp2RouteTimeoutArgs) ToRouteSpecHttp2RouteTimeoutOutputWithContext(ctx context.Context) RouteSpecHttp2RouteTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttp2RouteTimeoutOutput)
}

func (i *RouteSpecHttp2RouteTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttp2RouteTimeoutArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttp2RouteTimeoutOutput struct{ *pulumi.OutputState }

func (RouteSpecHttp2RouteTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteTimeout)(nil)).Elem()
}

func (o RouteSpecHttp2RouteTimeoutOutput) ToRouteSpecHttp2RouteTimeoutOutput() RouteSpecHttp2RouteTimeoutOutput {
	return o
}

func (o RouteSpecHttp2RouteTimeoutOutput) ToRouteSpecHttp2RouteTimeoutOutputWithContext(ctx context.Context) RouteSpecHttp2RouteTimeoutOutput {
	return o
}

func (o RouteSpecHttp2RouteTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttp2RouteTimeout] {
	return pulumix.Output[RouteSpecHttp2RouteTimeout]{
		OutputState: o.OutputState,
	}
}

// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
func (o RouteSpecHttp2RouteTimeoutOutput) Idle() pulumix.GPtrOutput[RouteSpecHttp2RouteTimeoutIdle, RouteSpecHttp2RouteTimeoutIdleOutput] {
	value := pulumix.Apply[RouteSpecHttp2RouteTimeout](o, func(v RouteSpecHttp2RouteTimeout) *RouteSpecHttp2RouteTimeoutIdle { return v.Idle })
	return pulumix.GPtrOutput[RouteSpecHttp2RouteTimeoutIdle, RouteSpecHttp2RouteTimeoutIdleOutput]{OutputState: value.OutputState}
}

// Per request timeout.
func (o RouteSpecHttp2RouteTimeoutOutput) PerRequest() pulumix.GPtrOutput[RouteSpecHttp2RouteTimeoutPerRequest, RouteSpecHttp2RouteTimeoutPerRequestOutput] {
	value := pulumix.Apply[RouteSpecHttp2RouteTimeout](o, func(v RouteSpecHttp2RouteTimeout) *RouteSpecHttp2RouteTimeoutPerRequest { return v.PerRequest })
	return pulumix.GPtrOutput[RouteSpecHttp2RouteTimeoutPerRequest, RouteSpecHttp2RouteTimeoutPerRequestOutput]{OutputState: value.OutputState}
}

type RouteSpecHttp2RouteTimeoutIdle struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value int `pulumi:"value"`
}

type RouteSpecHttp2RouteTimeoutIdleArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (RouteSpecHttp2RouteTimeoutIdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteTimeoutIdle)(nil)).Elem()
}

func (i RouteSpecHttp2RouteTimeoutIdleArgs) ToRouteSpecHttp2RouteTimeoutIdleOutput() RouteSpecHttp2RouteTimeoutIdleOutput {
	return i.ToRouteSpecHttp2RouteTimeoutIdleOutputWithContext(context.Background())
}

func (i RouteSpecHttp2RouteTimeoutIdleArgs) ToRouteSpecHttp2RouteTimeoutIdleOutputWithContext(ctx context.Context) RouteSpecHttp2RouteTimeoutIdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttp2RouteTimeoutIdleOutput)
}

func (i *RouteSpecHttp2RouteTimeoutIdleArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttp2RouteTimeoutIdleArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttp2RouteTimeoutIdleOutput struct{ *pulumi.OutputState }

func (RouteSpecHttp2RouteTimeoutIdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteTimeoutIdle)(nil)).Elem()
}

func (o RouteSpecHttp2RouteTimeoutIdleOutput) ToRouteSpecHttp2RouteTimeoutIdleOutput() RouteSpecHttp2RouteTimeoutIdleOutput {
	return o
}

func (o RouteSpecHttp2RouteTimeoutIdleOutput) ToRouteSpecHttp2RouteTimeoutIdleOutputWithContext(ctx context.Context) RouteSpecHttp2RouteTimeoutIdleOutput {
	return o
}

func (o RouteSpecHttp2RouteTimeoutIdleOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttp2RouteTimeoutIdle] {
	return pulumix.Output[RouteSpecHttp2RouteTimeoutIdle]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o RouteSpecHttp2RouteTimeoutIdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecHttp2RouteTimeoutIdle](o, func(v RouteSpecHttp2RouteTimeoutIdle) string { return v.Unit })
}

// Number of time units. Minimum value of `0`.
func (o RouteSpecHttp2RouteTimeoutIdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecHttp2RouteTimeoutIdle](o, func(v RouteSpecHttp2RouteTimeoutIdle) int { return v.Value })
}

type RouteSpecHttp2RouteTimeoutPerRequest struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value int `pulumi:"value"`
}

type RouteSpecHttp2RouteTimeoutPerRequestArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (RouteSpecHttp2RouteTimeoutPerRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteTimeoutPerRequest)(nil)).Elem()
}

func (i RouteSpecHttp2RouteTimeoutPerRequestArgs) ToRouteSpecHttp2RouteTimeoutPerRequestOutput() RouteSpecHttp2RouteTimeoutPerRequestOutput {
	return i.ToRouteSpecHttp2RouteTimeoutPerRequestOutputWithContext(context.Background())
}

func (i RouteSpecHttp2RouteTimeoutPerRequestArgs) ToRouteSpecHttp2RouteTimeoutPerRequestOutputWithContext(ctx context.Context) RouteSpecHttp2RouteTimeoutPerRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttp2RouteTimeoutPerRequestOutput)
}

func (i *RouteSpecHttp2RouteTimeoutPerRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttp2RouteTimeoutPerRequestArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttp2RouteTimeoutPerRequestOutput struct{ *pulumi.OutputState }

func (RouteSpecHttp2RouteTimeoutPerRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttp2RouteTimeoutPerRequest)(nil)).Elem()
}

func (o RouteSpecHttp2RouteTimeoutPerRequestOutput) ToRouteSpecHttp2RouteTimeoutPerRequestOutput() RouteSpecHttp2RouteTimeoutPerRequestOutput {
	return o
}

func (o RouteSpecHttp2RouteTimeoutPerRequestOutput) ToRouteSpecHttp2RouteTimeoutPerRequestOutputWithContext(ctx context.Context) RouteSpecHttp2RouteTimeoutPerRequestOutput {
	return o
}

func (o RouteSpecHttp2RouteTimeoutPerRequestOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttp2RouteTimeoutPerRequest] {
	return pulumix.Output[RouteSpecHttp2RouteTimeoutPerRequest]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o RouteSpecHttp2RouteTimeoutPerRequestOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecHttp2RouteTimeoutPerRequest](o, func(v RouteSpecHttp2RouteTimeoutPerRequest) string { return v.Unit })
}

// Number of time units. Minimum value of `0`.
func (o RouteSpecHttp2RouteTimeoutPerRequestOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecHttp2RouteTimeoutPerRequest](o, func(v RouteSpecHttp2RouteTimeoutPerRequest) int { return v.Value })
}

type RouteSpecHttpRoute struct {
	// Action to take if a match is determined.
	Action RouteSpecHttpRouteAction `pulumi:"action"`
	// Criteria for determining an HTTP request match.
	Match RouteSpecHttpRouteMatch `pulumi:"match"`
	// Retry policy.
	RetryPolicy *RouteSpecHttpRouteRetryPolicy `pulumi:"retryPolicy"`
	// Types of timeouts.
	Timeout *RouteSpecHttpRouteTimeout `pulumi:"timeout"`
}

type RouteSpecHttpRouteArgs struct {
	// Action to take if a match is determined.
	Action pulumix.Input[*RouteSpecHttpRouteActionArgs] `pulumi:"action"`
	// Criteria for determining an HTTP request match.
	Match pulumix.Input[*RouteSpecHttpRouteMatchArgs] `pulumi:"match"`
	// Retry policy.
	RetryPolicy pulumix.Input[*RouteSpecHttpRouteRetryPolicyArgs] `pulumi:"retryPolicy"`
	// Types of timeouts.
	Timeout pulumix.Input[*RouteSpecHttpRouteTimeoutArgs] `pulumi:"timeout"`
}

func (RouteSpecHttpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRoute)(nil)).Elem()
}

func (i RouteSpecHttpRouteArgs) ToRouteSpecHttpRouteOutput() RouteSpecHttpRouteOutput {
	return i.ToRouteSpecHttpRouteOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteArgs) ToRouteSpecHttpRouteOutputWithContext(ctx context.Context) RouteSpecHttpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteOutput)
}

func (i *RouteSpecHttpRouteArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttpRouteArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttpRouteOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRoute)(nil)).Elem()
}

func (o RouteSpecHttpRouteOutput) ToRouteSpecHttpRouteOutput() RouteSpecHttpRouteOutput {
	return o
}

func (o RouteSpecHttpRouteOutput) ToRouteSpecHttpRouteOutputWithContext(ctx context.Context) RouteSpecHttpRouteOutput {
	return o
}

func (o RouteSpecHttpRouteOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttpRoute] {
	return pulumix.Output[RouteSpecHttpRoute]{
		OutputState: o.OutputState,
	}
}

// Action to take if a match is determined.
func (o RouteSpecHttpRouteOutput) Action() pulumix.GPtrOutput[RouteSpecHttpRouteAction, RouteSpecHttpRouteActionOutput] {
	value := pulumix.Apply[RouteSpecHttpRoute](o, func(v RouteSpecHttpRoute) RouteSpecHttpRouteAction { return v.Action })
	return pulumix.GPtrOutput[RouteSpecHttpRouteAction, RouteSpecHttpRouteActionOutput]{OutputState: value.OutputState}
}

// Criteria for determining an HTTP request match.
func (o RouteSpecHttpRouteOutput) Match() pulumix.GPtrOutput[RouteSpecHttpRouteMatch, RouteSpecHttpRouteMatchOutput] {
	value := pulumix.Apply[RouteSpecHttpRoute](o, func(v RouteSpecHttpRoute) RouteSpecHttpRouteMatch { return v.Match })
	return pulumix.GPtrOutput[RouteSpecHttpRouteMatch, RouteSpecHttpRouteMatchOutput]{OutputState: value.OutputState}
}

// Retry policy.
func (o RouteSpecHttpRouteOutput) RetryPolicy() pulumix.GPtrOutput[RouteSpecHttpRouteRetryPolicy, RouteSpecHttpRouteRetryPolicyOutput] {
	value := pulumix.Apply[RouteSpecHttpRoute](o, func(v RouteSpecHttpRoute) *RouteSpecHttpRouteRetryPolicy { return v.RetryPolicy })
	return pulumix.GPtrOutput[RouteSpecHttpRouteRetryPolicy, RouteSpecHttpRouteRetryPolicyOutput]{OutputState: value.OutputState}
}

// Types of timeouts.
func (o RouteSpecHttpRouteOutput) Timeout() pulumix.GPtrOutput[RouteSpecHttpRouteTimeout, RouteSpecHttpRouteTimeoutOutput] {
	value := pulumix.Apply[RouteSpecHttpRoute](o, func(v RouteSpecHttpRoute) *RouteSpecHttpRouteTimeout { return v.Timeout })
	return pulumix.GPtrOutput[RouteSpecHttpRouteTimeout, RouteSpecHttpRouteTimeoutOutput]{OutputState: value.OutputState}
}

type RouteSpecHttpRouteAction struct {
	// Targets that traffic is routed to when a request matches the route.
	// You can specify one or more targets and their relative weights with which to distribute traffic.
	WeightedTargets []RouteSpecHttpRouteActionWeightedTarget `pulumi:"weightedTargets"`
}

type RouteSpecHttpRouteActionArgs struct {
	// Targets that traffic is routed to when a request matches the route.
	// You can specify one or more targets and their relative weights with which to distribute traffic.
	WeightedTargets pulumix.Input[[]*RouteSpecHttpRouteActionWeightedTargetArgs] `pulumi:"weightedTargets"`
}

func (RouteSpecHttpRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteAction)(nil)).Elem()
}

func (i RouteSpecHttpRouteActionArgs) ToRouteSpecHttpRouteActionOutput() RouteSpecHttpRouteActionOutput {
	return i.ToRouteSpecHttpRouteActionOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteActionArgs) ToRouteSpecHttpRouteActionOutputWithContext(ctx context.Context) RouteSpecHttpRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteActionOutput)
}

func (i *RouteSpecHttpRouteActionArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttpRouteActionArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttpRouteActionOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteAction)(nil)).Elem()
}

func (o RouteSpecHttpRouteActionOutput) ToRouteSpecHttpRouteActionOutput() RouteSpecHttpRouteActionOutput {
	return o
}

func (o RouteSpecHttpRouteActionOutput) ToRouteSpecHttpRouteActionOutputWithContext(ctx context.Context) RouteSpecHttpRouteActionOutput {
	return o
}

func (o RouteSpecHttpRouteActionOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttpRouteAction] {
	return pulumix.Output[RouteSpecHttpRouteAction]{
		OutputState: o.OutputState,
	}
}

// Targets that traffic is routed to when a request matches the route.
// You can specify one or more targets and their relative weights with which to distribute traffic.
func (o RouteSpecHttpRouteActionOutput) WeightedTargets() pulumix.GArrayOutput[RouteSpecHttpRouteActionWeightedTarget, RouteSpecHttpRouteActionWeightedTargetOutput] {
	value := pulumix.Apply[RouteSpecHttpRouteAction](o, func(v RouteSpecHttpRouteAction) []RouteSpecHttpRouteActionWeightedTarget { return v.WeightedTargets })
	return pulumix.GArrayOutput[RouteSpecHttpRouteActionWeightedTarget, RouteSpecHttpRouteActionWeightedTargetOutput]{OutputState: value.OutputState}
}

type RouteSpecHttpRouteActionWeightedTarget struct {
	// The targeted port of the weighted object.
	Port *int `pulumi:"port"`
	// Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
	VirtualNode string `pulumi:"virtualNode"`
	// Relative weight of the weighted target. An integer between 0 and 100.
	Weight int `pulumi:"weight"`
}

type RouteSpecHttpRouteActionWeightedTargetArgs struct {
	// The targeted port of the weighted object.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
	VirtualNode pulumix.Input[string] `pulumi:"virtualNode"`
	// Relative weight of the weighted target. An integer between 0 and 100.
	Weight pulumix.Input[int] `pulumi:"weight"`
}

func (RouteSpecHttpRouteActionWeightedTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteActionWeightedTarget)(nil)).Elem()
}

func (i RouteSpecHttpRouteActionWeightedTargetArgs) ToRouteSpecHttpRouteActionWeightedTargetOutput() RouteSpecHttpRouteActionWeightedTargetOutput {
	return i.ToRouteSpecHttpRouteActionWeightedTargetOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteActionWeightedTargetArgs) ToRouteSpecHttpRouteActionWeightedTargetOutputWithContext(ctx context.Context) RouteSpecHttpRouteActionWeightedTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteActionWeightedTargetOutput)
}

func (i *RouteSpecHttpRouteActionWeightedTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttpRouteActionWeightedTargetArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttpRouteActionWeightedTargetOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteActionWeightedTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteActionWeightedTarget)(nil)).Elem()
}

func (o RouteSpecHttpRouteActionWeightedTargetOutput) ToRouteSpecHttpRouteActionWeightedTargetOutput() RouteSpecHttpRouteActionWeightedTargetOutput {
	return o
}

func (o RouteSpecHttpRouteActionWeightedTargetOutput) ToRouteSpecHttpRouteActionWeightedTargetOutputWithContext(ctx context.Context) RouteSpecHttpRouteActionWeightedTargetOutput {
	return o
}

func (o RouteSpecHttpRouteActionWeightedTargetOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttpRouteActionWeightedTarget] {
	return pulumix.Output[RouteSpecHttpRouteActionWeightedTarget]{
		OutputState: o.OutputState,
	}
}

// The targeted port of the weighted object.
func (o RouteSpecHttpRouteActionWeightedTargetOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[RouteSpecHttpRouteActionWeightedTarget](o, func(v RouteSpecHttpRouteActionWeightedTarget) *int { return v.Port })
}

// Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
func (o RouteSpecHttpRouteActionWeightedTargetOutput) VirtualNode() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecHttpRouteActionWeightedTarget](o, func(v RouteSpecHttpRouteActionWeightedTarget) string { return v.VirtualNode })
}

// Relative weight of the weighted target. An integer between 0 and 100.
func (o RouteSpecHttpRouteActionWeightedTargetOutput) Weight() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecHttpRouteActionWeightedTarget](o, func(v RouteSpecHttpRouteActionWeightedTarget) int { return v.Weight })
}

type RouteSpecHttpRouteMatch struct {
	// Client request headers to match on.
	Headers []RouteSpecHttpRouteMatchHeader `pulumi:"headers"`
	// Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
	Method *string `pulumi:"method"`
	// Client request path to match on.
	Path *RouteSpecHttpRouteMatchPath `pulumi:"path"`
	// The port number to match from the request.
	Port *int `pulumi:"port"`
	// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	Prefix *string `pulumi:"prefix"`
	// Client request query parameters to match on.
	QueryParameters []RouteSpecHttpRouteMatchQueryParameter `pulumi:"queryParameters"`
	// Client request header scheme to match on. Valid values: `http`, `https`.
	Scheme *string `pulumi:"scheme"`
}

type RouteSpecHttpRouteMatchArgs struct {
	// Client request headers to match on.
	Headers pulumix.Input[[]*RouteSpecHttpRouteMatchHeaderArgs] `pulumi:"headers"`
	// Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
	Method pulumix.Input[*string] `pulumi:"method"`
	// Client request path to match on.
	Path pulumix.Input[*RouteSpecHttpRouteMatchPathArgs] `pulumi:"path"`
	// The port number to match from the request.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Client request query parameters to match on.
	QueryParameters pulumix.Input[[]*RouteSpecHttpRouteMatchQueryParameterArgs] `pulumi:"queryParameters"`
	// Client request header scheme to match on. Valid values: `http`, `https`.
	Scheme pulumix.Input[*string] `pulumi:"scheme"`
}

func (RouteSpecHttpRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatch)(nil)).Elem()
}

func (i RouteSpecHttpRouteMatchArgs) ToRouteSpecHttpRouteMatchOutput() RouteSpecHttpRouteMatchOutput {
	return i.ToRouteSpecHttpRouteMatchOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteMatchArgs) ToRouteSpecHttpRouteMatchOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchOutput)
}

func (i *RouteSpecHttpRouteMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttpRouteMatchArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttpRouteMatchOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatch)(nil)).Elem()
}

func (o RouteSpecHttpRouteMatchOutput) ToRouteSpecHttpRouteMatchOutput() RouteSpecHttpRouteMatchOutput {
	return o
}

func (o RouteSpecHttpRouteMatchOutput) ToRouteSpecHttpRouteMatchOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchOutput {
	return o
}

func (o RouteSpecHttpRouteMatchOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttpRouteMatch] {
	return pulumix.Output[RouteSpecHttpRouteMatch]{
		OutputState: o.OutputState,
	}
}

// Client request headers to match on.
func (o RouteSpecHttpRouteMatchOutput) Headers() pulumix.GArrayOutput[RouteSpecHttpRouteMatchHeader, RouteSpecHttpRouteMatchHeaderOutput] {
	value := pulumix.Apply[RouteSpecHttpRouteMatch](o, func(v RouteSpecHttpRouteMatch) []RouteSpecHttpRouteMatchHeader { return v.Headers })
	return pulumix.GArrayOutput[RouteSpecHttpRouteMatchHeader, RouteSpecHttpRouteMatchHeaderOutput]{OutputState: value.OutputState}
}

// Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
func (o RouteSpecHttpRouteMatchOutput) Method() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttpRouteMatch](o, func(v RouteSpecHttpRouteMatch) *string { return v.Method })
}

// Client request path to match on.
func (o RouteSpecHttpRouteMatchOutput) Path() pulumix.GPtrOutput[RouteSpecHttpRouteMatchPath, RouteSpecHttpRouteMatchPathOutput] {
	value := pulumix.Apply[RouteSpecHttpRouteMatch](o, func(v RouteSpecHttpRouteMatch) *RouteSpecHttpRouteMatchPath { return v.Path })
	return pulumix.GPtrOutput[RouteSpecHttpRouteMatchPath, RouteSpecHttpRouteMatchPathOutput]{OutputState: value.OutputState}
}

// The port number to match from the request.
func (o RouteSpecHttpRouteMatchOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[RouteSpecHttpRouteMatch](o, func(v RouteSpecHttpRouteMatch) *int { return v.Port })
}

// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
func (o RouteSpecHttpRouteMatchOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttpRouteMatch](o, func(v RouteSpecHttpRouteMatch) *string { return v.Prefix })
}

// Client request query parameters to match on.
func (o RouteSpecHttpRouteMatchOutput) QueryParameters() pulumix.GArrayOutput[RouteSpecHttpRouteMatchQueryParameter, RouteSpecHttpRouteMatchQueryParameterOutput] {
	value := pulumix.Apply[RouteSpecHttpRouteMatch](o, func(v RouteSpecHttpRouteMatch) []RouteSpecHttpRouteMatchQueryParameter { return v.QueryParameters })
	return pulumix.GArrayOutput[RouteSpecHttpRouteMatchQueryParameter, RouteSpecHttpRouteMatchQueryParameterOutput]{OutputState: value.OutputState}
}

// Client request header scheme to match on. Valid values: `http`, `https`.
func (o RouteSpecHttpRouteMatchOutput) Scheme() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttpRouteMatch](o, func(v RouteSpecHttpRouteMatch) *string { return v.Scheme })
}

type RouteSpecHttpRouteMatchHeader struct {
	// If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
	Invert *bool `pulumi:"invert"`
	// Method and value to match the header value sent with a request. Specify one match method.
	Match *RouteSpecHttpRouteMatchHeaderMatch `pulumi:"match"`
	// Name for the HTTP header in the client request that will be matched on.
	Name string `pulumi:"name"`
}

type RouteSpecHttpRouteMatchHeaderArgs struct {
	// If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
	Invert pulumix.Input[*bool] `pulumi:"invert"`
	// Method and value to match the header value sent with a request. Specify one match method.
	Match pulumix.Input[*RouteSpecHttpRouteMatchHeaderMatchArgs] `pulumi:"match"`
	// Name for the HTTP header in the client request that will be matched on.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (RouteSpecHttpRouteMatchHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchHeader)(nil)).Elem()
}

func (i RouteSpecHttpRouteMatchHeaderArgs) ToRouteSpecHttpRouteMatchHeaderOutput() RouteSpecHttpRouteMatchHeaderOutput {
	return i.ToRouteSpecHttpRouteMatchHeaderOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteMatchHeaderArgs) ToRouteSpecHttpRouteMatchHeaderOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchHeaderOutput)
}

func (i *RouteSpecHttpRouteMatchHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttpRouteMatchHeaderArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttpRouteMatchHeaderOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteMatchHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchHeader)(nil)).Elem()
}

func (o RouteSpecHttpRouteMatchHeaderOutput) ToRouteSpecHttpRouteMatchHeaderOutput() RouteSpecHttpRouteMatchHeaderOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderOutput) ToRouteSpecHttpRouteMatchHeaderOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttpRouteMatchHeader] {
	return pulumix.Output[RouteSpecHttpRouteMatchHeader]{
		OutputState: o.OutputState,
	}
}

// If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
func (o RouteSpecHttpRouteMatchHeaderOutput) Invert() pulumix.Output[*bool] {
	return pulumix.Apply[RouteSpecHttpRouteMatchHeader](o, func(v RouteSpecHttpRouteMatchHeader) *bool { return v.Invert })
}

// Method and value to match the header value sent with a request. Specify one match method.
func (o RouteSpecHttpRouteMatchHeaderOutput) Match() pulumix.GPtrOutput[RouteSpecHttpRouteMatchHeaderMatch, RouteSpecHttpRouteMatchHeaderMatchOutput] {
	value := pulumix.Apply[RouteSpecHttpRouteMatchHeader](o, func(v RouteSpecHttpRouteMatchHeader) *RouteSpecHttpRouteMatchHeaderMatch { return v.Match })
	return pulumix.GPtrOutput[RouteSpecHttpRouteMatchHeaderMatch, RouteSpecHttpRouteMatchHeaderMatchOutput]{OutputState: value.OutputState}
}

// Name for the HTTP header in the client request that will be matched on.
func (o RouteSpecHttpRouteMatchHeaderOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecHttpRouteMatchHeader](o, func(v RouteSpecHttpRouteMatchHeader) string { return v.Name })
}

type RouteSpecHttpRouteMatchHeaderMatch struct {
	// The exact path to match on.
	Exact *string `pulumi:"exact"`
	// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	Prefix *string `pulumi:"prefix"`
	// Object that specifies the range of numbers that the value sent by the client must be included in.
	Range *RouteSpecHttpRouteMatchHeaderMatchRange `pulumi:"range"`
	// The regex used to match the path.
	Regex *string `pulumi:"regex"`
	// Value sent by the client must end with the specified characters. Must be between 1 and 255 characters in length.
	Suffix *string `pulumi:"suffix"`
}

type RouteSpecHttpRouteMatchHeaderMatchArgs struct {
	// The exact path to match on.
	Exact pulumix.Input[*string] `pulumi:"exact"`
	// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Object that specifies the range of numbers that the value sent by the client must be included in.
	Range pulumix.Input[*RouteSpecHttpRouteMatchHeaderMatchRangeArgs] `pulumi:"range"`
	// The regex used to match the path.
	Regex pulumix.Input[*string] `pulumi:"regex"`
	// Value sent by the client must end with the specified characters. Must be between 1 and 255 characters in length.
	Suffix pulumix.Input[*string] `pulumi:"suffix"`
}

func (RouteSpecHttpRouteMatchHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchHeaderMatch)(nil)).Elem()
}

func (i RouteSpecHttpRouteMatchHeaderMatchArgs) ToRouteSpecHttpRouteMatchHeaderMatchOutput() RouteSpecHttpRouteMatchHeaderMatchOutput {
	return i.ToRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteMatchHeaderMatchArgs) ToRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchHeaderMatchOutput)
}

func (i *RouteSpecHttpRouteMatchHeaderMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttpRouteMatchHeaderMatchArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttpRouteMatchHeaderMatchOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteMatchHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchHeaderMatch)(nil)).Elem()
}

func (o RouteSpecHttpRouteMatchHeaderMatchOutput) ToRouteSpecHttpRouteMatchHeaderMatchOutput() RouteSpecHttpRouteMatchHeaderMatchOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderMatchOutput) ToRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderMatchOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttpRouteMatchHeaderMatch] {
	return pulumix.Output[RouteSpecHttpRouteMatchHeaderMatch]{
		OutputState: o.OutputState,
	}
}

// The exact path to match on.
func (o RouteSpecHttpRouteMatchHeaderMatchOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttpRouteMatchHeaderMatch](o, func(v RouteSpecHttpRouteMatchHeaderMatch) *string { return v.Exact })
}

// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
func (o RouteSpecHttpRouteMatchHeaderMatchOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttpRouteMatchHeaderMatch](o, func(v RouteSpecHttpRouteMatchHeaderMatch) *string { return v.Prefix })
}

// Object that specifies the range of numbers that the value sent by the client must be included in.
func (o RouteSpecHttpRouteMatchHeaderMatchOutput) Range() pulumix.GPtrOutput[RouteSpecHttpRouteMatchHeaderMatchRange, RouteSpecHttpRouteMatchHeaderMatchRangeOutput] {
	value := pulumix.Apply[RouteSpecHttpRouteMatchHeaderMatch](o, func(v RouteSpecHttpRouteMatchHeaderMatch) *RouteSpecHttpRouteMatchHeaderMatchRange { return v.Range })
	return pulumix.GPtrOutput[RouteSpecHttpRouteMatchHeaderMatchRange, RouteSpecHttpRouteMatchHeaderMatchRangeOutput]{OutputState: value.OutputState}
}

// The regex used to match the path.
func (o RouteSpecHttpRouteMatchHeaderMatchOutput) Regex() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttpRouteMatchHeaderMatch](o, func(v RouteSpecHttpRouteMatchHeaderMatch) *string { return v.Regex })
}

// Value sent by the client must end with the specified characters. Must be between 1 and 255 characters in length.
func (o RouteSpecHttpRouteMatchHeaderMatchOutput) Suffix() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttpRouteMatchHeaderMatch](o, func(v RouteSpecHttpRouteMatchHeaderMatch) *string { return v.Suffix })
}

type RouteSpecHttpRouteMatchHeaderMatchRange struct {
	// End of the range.
	End int `pulumi:"end"`
	// Start of the range.
	Start int `pulumi:"start"`
}

type RouteSpecHttpRouteMatchHeaderMatchRangeArgs struct {
	// End of the range.
	End pulumix.Input[int] `pulumi:"end"`
	// Start of the range.
	Start pulumix.Input[int] `pulumi:"start"`
}

func (RouteSpecHttpRouteMatchHeaderMatchRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchHeaderMatchRange)(nil)).Elem()
}

func (i RouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToRouteSpecHttpRouteMatchHeaderMatchRangeOutput() RouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return i.ToRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchHeaderMatchRangeOutput)
}

func (i *RouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttpRouteMatchHeaderMatchRangeArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttpRouteMatchHeaderMatchRangeOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteMatchHeaderMatchRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchHeaderMatchRange)(nil)).Elem()
}

func (o RouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToRouteSpecHttpRouteMatchHeaderMatchRangeOutput() RouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttpRouteMatchHeaderMatchRange] {
	return pulumix.Output[RouteSpecHttpRouteMatchHeaderMatchRange]{
		OutputState: o.OutputState,
	}
}

// End of the range.
func (o RouteSpecHttpRouteMatchHeaderMatchRangeOutput) End() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecHttpRouteMatchHeaderMatchRange](o, func(v RouteSpecHttpRouteMatchHeaderMatchRange) int { return v.End })
}

// Start of the range.
func (o RouteSpecHttpRouteMatchHeaderMatchRangeOutput) Start() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecHttpRouteMatchHeaderMatchRange](o, func(v RouteSpecHttpRouteMatchHeaderMatchRange) int { return v.Start })
}

type RouteSpecHttpRouteMatchPath struct {
	// Value sent by the client must match the specified value exactly. Must be between 1 and 255 characters in length.
	Exact *string `pulumi:"exact"`
	// Value sent by the client must include the specified characters. Must be between 1 and 255 characters in length.
	Regex *string `pulumi:"regex"`
}

type RouteSpecHttpRouteMatchPathArgs struct {
	// Value sent by the client must match the specified value exactly. Must be between 1 and 255 characters in length.
	Exact pulumix.Input[*string] `pulumi:"exact"`
	// Value sent by the client must include the specified characters. Must be between 1 and 255 characters in length.
	Regex pulumix.Input[*string] `pulumi:"regex"`
}

func (RouteSpecHttpRouteMatchPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchPath)(nil)).Elem()
}

func (i RouteSpecHttpRouteMatchPathArgs) ToRouteSpecHttpRouteMatchPathOutput() RouteSpecHttpRouteMatchPathOutput {
	return i.ToRouteSpecHttpRouteMatchPathOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteMatchPathArgs) ToRouteSpecHttpRouteMatchPathOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchPathOutput)
}

func (i *RouteSpecHttpRouteMatchPathArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttpRouteMatchPathArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttpRouteMatchPathOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteMatchPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchPath)(nil)).Elem()
}

func (o RouteSpecHttpRouteMatchPathOutput) ToRouteSpecHttpRouteMatchPathOutput() RouteSpecHttpRouteMatchPathOutput {
	return o
}

func (o RouteSpecHttpRouteMatchPathOutput) ToRouteSpecHttpRouteMatchPathOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchPathOutput {
	return o
}

func (o RouteSpecHttpRouteMatchPathOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttpRouteMatchPath] {
	return pulumix.Output[RouteSpecHttpRouteMatchPath]{
		OutputState: o.OutputState,
	}
}

// Value sent by the client must match the specified value exactly. Must be between 1 and 255 characters in length.
func (o RouteSpecHttpRouteMatchPathOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttpRouteMatchPath](o, func(v RouteSpecHttpRouteMatchPath) *string { return v.Exact })
}

// Value sent by the client must include the specified characters. Must be between 1 and 255 characters in length.
func (o RouteSpecHttpRouteMatchPathOutput) Regex() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttpRouteMatchPath](o, func(v RouteSpecHttpRouteMatchPath) *string { return v.Regex })
}

type RouteSpecHttpRouteMatchQueryParameter struct {
	// Criteria for determining an gRPC request match.
	Match *RouteSpecHttpRouteMatchQueryParameterMatch `pulumi:"match"`
	// Name to use for the route. Must be between 1 and 255 characters in length.
	Name string `pulumi:"name"`
}

type RouteSpecHttpRouteMatchQueryParameterArgs struct {
	// Criteria for determining an gRPC request match.
	Match pulumix.Input[*RouteSpecHttpRouteMatchQueryParameterMatchArgs] `pulumi:"match"`
	// Name to use for the route. Must be between 1 and 255 characters in length.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (RouteSpecHttpRouteMatchQueryParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchQueryParameter)(nil)).Elem()
}

func (i RouteSpecHttpRouteMatchQueryParameterArgs) ToRouteSpecHttpRouteMatchQueryParameterOutput() RouteSpecHttpRouteMatchQueryParameterOutput {
	return i.ToRouteSpecHttpRouteMatchQueryParameterOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteMatchQueryParameterArgs) ToRouteSpecHttpRouteMatchQueryParameterOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchQueryParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchQueryParameterOutput)
}

func (i *RouteSpecHttpRouteMatchQueryParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttpRouteMatchQueryParameterArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttpRouteMatchQueryParameterOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteMatchQueryParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchQueryParameter)(nil)).Elem()
}

func (o RouteSpecHttpRouteMatchQueryParameterOutput) ToRouteSpecHttpRouteMatchQueryParameterOutput() RouteSpecHttpRouteMatchQueryParameterOutput {
	return o
}

func (o RouteSpecHttpRouteMatchQueryParameterOutput) ToRouteSpecHttpRouteMatchQueryParameterOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchQueryParameterOutput {
	return o
}

func (o RouteSpecHttpRouteMatchQueryParameterOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttpRouteMatchQueryParameter] {
	return pulumix.Output[RouteSpecHttpRouteMatchQueryParameter]{
		OutputState: o.OutputState,
	}
}

// Criteria for determining an gRPC request match.
func (o RouteSpecHttpRouteMatchQueryParameterOutput) Match() pulumix.GPtrOutput[RouteSpecHttpRouteMatchQueryParameterMatch, RouteSpecHttpRouteMatchQueryParameterMatchOutput] {
	value := pulumix.Apply[RouteSpecHttpRouteMatchQueryParameter](o, func(v RouteSpecHttpRouteMatchQueryParameter) *RouteSpecHttpRouteMatchQueryParameterMatch {
		return v.Match
	})
	return pulumix.GPtrOutput[RouteSpecHttpRouteMatchQueryParameterMatch, RouteSpecHttpRouteMatchQueryParameterMatchOutput]{OutputState: value.OutputState}
}

// Name to use for the route. Must be between 1 and 255 characters in length.
func (o RouteSpecHttpRouteMatchQueryParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecHttpRouteMatchQueryParameter](o, func(v RouteSpecHttpRouteMatchQueryParameter) string { return v.Name })
}

type RouteSpecHttpRouteMatchQueryParameterMatch struct {
	// The exact path to match on.
	Exact *string `pulumi:"exact"`
}

type RouteSpecHttpRouteMatchQueryParameterMatchArgs struct {
	// The exact path to match on.
	Exact pulumix.Input[*string] `pulumi:"exact"`
}

func (RouteSpecHttpRouteMatchQueryParameterMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchQueryParameterMatch)(nil)).Elem()
}

func (i RouteSpecHttpRouteMatchQueryParameterMatchArgs) ToRouteSpecHttpRouteMatchQueryParameterMatchOutput() RouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return i.ToRouteSpecHttpRouteMatchQueryParameterMatchOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteMatchQueryParameterMatchArgs) ToRouteSpecHttpRouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchQueryParameterMatchOutput)
}

func (i *RouteSpecHttpRouteMatchQueryParameterMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttpRouteMatchQueryParameterMatchArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttpRouteMatchQueryParameterMatchOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteMatchQueryParameterMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchQueryParameterMatch)(nil)).Elem()
}

func (o RouteSpecHttpRouteMatchQueryParameterMatchOutput) ToRouteSpecHttpRouteMatchQueryParameterMatchOutput() RouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return o
}

func (o RouteSpecHttpRouteMatchQueryParameterMatchOutput) ToRouteSpecHttpRouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return o
}

func (o RouteSpecHttpRouteMatchQueryParameterMatchOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttpRouteMatchQueryParameterMatch] {
	return pulumix.Output[RouteSpecHttpRouteMatchQueryParameterMatch]{
		OutputState: o.OutputState,
	}
}

// The exact path to match on.
func (o RouteSpecHttpRouteMatchQueryParameterMatchOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[RouteSpecHttpRouteMatchQueryParameterMatch](o, func(v RouteSpecHttpRouteMatchQueryParameterMatch) *string { return v.Exact })
}

type RouteSpecHttpRouteRetryPolicy struct {
	// List of HTTP retry events.
	// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
	// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
	HttpRetryEvents []string `pulumi:"httpRetryEvents"`
	// Maximum number of retries.
	MaxRetries int `pulumi:"maxRetries"`
	// Per-retry timeout.
	PerRetryTimeout RouteSpecHttpRouteRetryPolicyPerRetryTimeout `pulumi:"perRetryTimeout"`
	// List of TCP retry events. The only valid value is `connection-error`.
	//
	// You must specify at least one value for `httpRetryEvents`, or at least one value for `tcpRetryEvents`.
	TcpRetryEvents []string `pulumi:"tcpRetryEvents"`
}

type RouteSpecHttpRouteRetryPolicyArgs struct {
	// List of HTTP retry events.
	// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
	// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
	HttpRetryEvents pulumix.Input[[]string] `pulumi:"httpRetryEvents"`
	// Maximum number of retries.
	MaxRetries pulumix.Input[int] `pulumi:"maxRetries"`
	// Per-retry timeout.
	PerRetryTimeout pulumix.Input[*RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs] `pulumi:"perRetryTimeout"`
	// List of TCP retry events. The only valid value is `connection-error`.
	//
	// You must specify at least one value for `httpRetryEvents`, or at least one value for `tcpRetryEvents`.
	TcpRetryEvents pulumix.Input[[]string] `pulumi:"tcpRetryEvents"`
}

func (RouteSpecHttpRouteRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteRetryPolicy)(nil)).Elem()
}

func (i RouteSpecHttpRouteRetryPolicyArgs) ToRouteSpecHttpRouteRetryPolicyOutput() RouteSpecHttpRouteRetryPolicyOutput {
	return i.ToRouteSpecHttpRouteRetryPolicyOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteRetryPolicyArgs) ToRouteSpecHttpRouteRetryPolicyOutputWithContext(ctx context.Context) RouteSpecHttpRouteRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteRetryPolicyOutput)
}

func (i *RouteSpecHttpRouteRetryPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttpRouteRetryPolicyArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttpRouteRetryPolicyOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteRetryPolicy)(nil)).Elem()
}

func (o RouteSpecHttpRouteRetryPolicyOutput) ToRouteSpecHttpRouteRetryPolicyOutput() RouteSpecHttpRouteRetryPolicyOutput {
	return o
}

func (o RouteSpecHttpRouteRetryPolicyOutput) ToRouteSpecHttpRouteRetryPolicyOutputWithContext(ctx context.Context) RouteSpecHttpRouteRetryPolicyOutput {
	return o
}

func (o RouteSpecHttpRouteRetryPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttpRouteRetryPolicy] {
	return pulumix.Output[RouteSpecHttpRouteRetryPolicy]{
		OutputState: o.OutputState,
	}
}

// List of HTTP retry events.
// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
func (o RouteSpecHttpRouteRetryPolicyOutput) HttpRetryEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RouteSpecHttpRouteRetryPolicy](o, func(v RouteSpecHttpRouteRetryPolicy) []string { return v.HttpRetryEvents })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Maximum number of retries.
func (o RouteSpecHttpRouteRetryPolicyOutput) MaxRetries() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecHttpRouteRetryPolicy](o, func(v RouteSpecHttpRouteRetryPolicy) int { return v.MaxRetries })
}

// Per-retry timeout.
func (o RouteSpecHttpRouteRetryPolicyOutput) PerRetryTimeout() pulumix.GPtrOutput[RouteSpecHttpRouteRetryPolicyPerRetryTimeout, RouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput] {
	value := pulumix.Apply[RouteSpecHttpRouteRetryPolicy](o, func(v RouteSpecHttpRouteRetryPolicy) RouteSpecHttpRouteRetryPolicyPerRetryTimeout {
		return v.PerRetryTimeout
	})
	return pulumix.GPtrOutput[RouteSpecHttpRouteRetryPolicyPerRetryTimeout, RouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput]{OutputState: value.OutputState}
}

// List of TCP retry events. The only valid value is `connection-error`.
//
// You must specify at least one value for `httpRetryEvents`, or at least one value for `tcpRetryEvents`.
func (o RouteSpecHttpRouteRetryPolicyOutput) TcpRetryEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RouteSpecHttpRouteRetryPolicy](o, func(v RouteSpecHttpRouteRetryPolicy) []string { return v.TcpRetryEvents })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type RouteSpecHttpRouteRetryPolicyPerRetryTimeout struct {
	// Retry unit. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// Retry value.
	Value int `pulumi:"value"`
}

type RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs struct {
	// Retry unit. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Retry value.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteRetryPolicyPerRetryTimeout)(nil)).Elem()
}

func (i RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs) ToRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput() RouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput {
	return i.ToRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs) ToRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutputWithContext(ctx context.Context) RouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput)
}

func (i *RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteRetryPolicyPerRetryTimeout)(nil)).Elem()
}

func (o RouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput) ToRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput() RouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput {
	return o
}

func (o RouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput) ToRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutputWithContext(ctx context.Context) RouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput {
	return o
}

func (o RouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttpRouteRetryPolicyPerRetryTimeout] {
	return pulumix.Output[RouteSpecHttpRouteRetryPolicyPerRetryTimeout]{
		OutputState: o.OutputState,
	}
}

// Retry unit. Valid values: `ms`, `s`.
func (o RouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecHttpRouteRetryPolicyPerRetryTimeout](o, func(v RouteSpecHttpRouteRetryPolicyPerRetryTimeout) string { return v.Unit })
}

// Retry value.
func (o RouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecHttpRouteRetryPolicyPerRetryTimeout](o, func(v RouteSpecHttpRouteRetryPolicyPerRetryTimeout) int { return v.Value })
}

type RouteSpecHttpRouteTimeout struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle *RouteSpecHttpRouteTimeoutIdle `pulumi:"idle"`
	// Per request timeout.
	PerRequest *RouteSpecHttpRouteTimeoutPerRequest `pulumi:"perRequest"`
}

type RouteSpecHttpRouteTimeoutArgs struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle pulumix.Input[*RouteSpecHttpRouteTimeoutIdleArgs] `pulumi:"idle"`
	// Per request timeout.
	PerRequest pulumix.Input[*RouteSpecHttpRouteTimeoutPerRequestArgs] `pulumi:"perRequest"`
}

func (RouteSpecHttpRouteTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteTimeout)(nil)).Elem()
}

func (i RouteSpecHttpRouteTimeoutArgs) ToRouteSpecHttpRouteTimeoutOutput() RouteSpecHttpRouteTimeoutOutput {
	return i.ToRouteSpecHttpRouteTimeoutOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteTimeoutArgs) ToRouteSpecHttpRouteTimeoutOutputWithContext(ctx context.Context) RouteSpecHttpRouteTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteTimeoutOutput)
}

func (i *RouteSpecHttpRouteTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttpRouteTimeoutArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttpRouteTimeoutOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteTimeout)(nil)).Elem()
}

func (o RouteSpecHttpRouteTimeoutOutput) ToRouteSpecHttpRouteTimeoutOutput() RouteSpecHttpRouteTimeoutOutput {
	return o
}

func (o RouteSpecHttpRouteTimeoutOutput) ToRouteSpecHttpRouteTimeoutOutputWithContext(ctx context.Context) RouteSpecHttpRouteTimeoutOutput {
	return o
}

func (o RouteSpecHttpRouteTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttpRouteTimeout] {
	return pulumix.Output[RouteSpecHttpRouteTimeout]{
		OutputState: o.OutputState,
	}
}

// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
func (o RouteSpecHttpRouteTimeoutOutput) Idle() pulumix.GPtrOutput[RouteSpecHttpRouteTimeoutIdle, RouteSpecHttpRouteTimeoutIdleOutput] {
	value := pulumix.Apply[RouteSpecHttpRouteTimeout](o, func(v RouteSpecHttpRouteTimeout) *RouteSpecHttpRouteTimeoutIdle { return v.Idle })
	return pulumix.GPtrOutput[RouteSpecHttpRouteTimeoutIdle, RouteSpecHttpRouteTimeoutIdleOutput]{OutputState: value.OutputState}
}

// Per request timeout.
func (o RouteSpecHttpRouteTimeoutOutput) PerRequest() pulumix.GPtrOutput[RouteSpecHttpRouteTimeoutPerRequest, RouteSpecHttpRouteTimeoutPerRequestOutput] {
	value := pulumix.Apply[RouteSpecHttpRouteTimeout](o, func(v RouteSpecHttpRouteTimeout) *RouteSpecHttpRouteTimeoutPerRequest { return v.PerRequest })
	return pulumix.GPtrOutput[RouteSpecHttpRouteTimeoutPerRequest, RouteSpecHttpRouteTimeoutPerRequestOutput]{OutputState: value.OutputState}
}

type RouteSpecHttpRouteTimeoutIdle struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value int `pulumi:"value"`
}

type RouteSpecHttpRouteTimeoutIdleArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (RouteSpecHttpRouteTimeoutIdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteTimeoutIdle)(nil)).Elem()
}

func (i RouteSpecHttpRouteTimeoutIdleArgs) ToRouteSpecHttpRouteTimeoutIdleOutput() RouteSpecHttpRouteTimeoutIdleOutput {
	return i.ToRouteSpecHttpRouteTimeoutIdleOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteTimeoutIdleArgs) ToRouteSpecHttpRouteTimeoutIdleOutputWithContext(ctx context.Context) RouteSpecHttpRouteTimeoutIdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteTimeoutIdleOutput)
}

func (i *RouteSpecHttpRouteTimeoutIdleArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttpRouteTimeoutIdleArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttpRouteTimeoutIdleOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteTimeoutIdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteTimeoutIdle)(nil)).Elem()
}

func (o RouteSpecHttpRouteTimeoutIdleOutput) ToRouteSpecHttpRouteTimeoutIdleOutput() RouteSpecHttpRouteTimeoutIdleOutput {
	return o
}

func (o RouteSpecHttpRouteTimeoutIdleOutput) ToRouteSpecHttpRouteTimeoutIdleOutputWithContext(ctx context.Context) RouteSpecHttpRouteTimeoutIdleOutput {
	return o
}

func (o RouteSpecHttpRouteTimeoutIdleOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttpRouteTimeoutIdle] {
	return pulumix.Output[RouteSpecHttpRouteTimeoutIdle]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o RouteSpecHttpRouteTimeoutIdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecHttpRouteTimeoutIdle](o, func(v RouteSpecHttpRouteTimeoutIdle) string { return v.Unit })
}

// Number of time units. Minimum value of `0`.
func (o RouteSpecHttpRouteTimeoutIdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecHttpRouteTimeoutIdle](o, func(v RouteSpecHttpRouteTimeoutIdle) int { return v.Value })
}

type RouteSpecHttpRouteTimeoutPerRequest struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value int `pulumi:"value"`
}

type RouteSpecHttpRouteTimeoutPerRequestArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (RouteSpecHttpRouteTimeoutPerRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteTimeoutPerRequest)(nil)).Elem()
}

func (i RouteSpecHttpRouteTimeoutPerRequestArgs) ToRouteSpecHttpRouteTimeoutPerRequestOutput() RouteSpecHttpRouteTimeoutPerRequestOutput {
	return i.ToRouteSpecHttpRouteTimeoutPerRequestOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteTimeoutPerRequestArgs) ToRouteSpecHttpRouteTimeoutPerRequestOutputWithContext(ctx context.Context) RouteSpecHttpRouteTimeoutPerRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteTimeoutPerRequestOutput)
}

func (i *RouteSpecHttpRouteTimeoutPerRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecHttpRouteTimeoutPerRequestArgs] {
	return pulumix.Val(i)
}

type RouteSpecHttpRouteTimeoutPerRequestOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteTimeoutPerRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteTimeoutPerRequest)(nil)).Elem()
}

func (o RouteSpecHttpRouteTimeoutPerRequestOutput) ToRouteSpecHttpRouteTimeoutPerRequestOutput() RouteSpecHttpRouteTimeoutPerRequestOutput {
	return o
}

func (o RouteSpecHttpRouteTimeoutPerRequestOutput) ToRouteSpecHttpRouteTimeoutPerRequestOutputWithContext(ctx context.Context) RouteSpecHttpRouteTimeoutPerRequestOutput {
	return o
}

func (o RouteSpecHttpRouteTimeoutPerRequestOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecHttpRouteTimeoutPerRequest] {
	return pulumix.Output[RouteSpecHttpRouteTimeoutPerRequest]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o RouteSpecHttpRouteTimeoutPerRequestOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecHttpRouteTimeoutPerRequest](o, func(v RouteSpecHttpRouteTimeoutPerRequest) string { return v.Unit })
}

// Number of time units. Minimum value of `0`.
func (o RouteSpecHttpRouteTimeoutPerRequestOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecHttpRouteTimeoutPerRequest](o, func(v RouteSpecHttpRouteTimeoutPerRequest) int { return v.Value })
}

type RouteSpecTcpRoute struct {
	// Action to take if a match is determined.
	Action RouteSpecTcpRouteAction `pulumi:"action"`
	// Criteria for determining an gRPC request match.
	Match *RouteSpecTcpRouteMatch `pulumi:"match"`
	// Types of timeouts.
	Timeout *RouteSpecTcpRouteTimeout `pulumi:"timeout"`
}

type RouteSpecTcpRouteArgs struct {
	// Action to take if a match is determined.
	Action pulumix.Input[*RouteSpecTcpRouteActionArgs] `pulumi:"action"`
	// Criteria for determining an gRPC request match.
	Match pulumix.Input[*RouteSpecTcpRouteMatchArgs] `pulumi:"match"`
	// Types of timeouts.
	Timeout pulumix.Input[*RouteSpecTcpRouteTimeoutArgs] `pulumi:"timeout"`
}

func (RouteSpecTcpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRoute)(nil)).Elem()
}

func (i RouteSpecTcpRouteArgs) ToRouteSpecTcpRouteOutput() RouteSpecTcpRouteOutput {
	return i.ToRouteSpecTcpRouteOutputWithContext(context.Background())
}

func (i RouteSpecTcpRouteArgs) ToRouteSpecTcpRouteOutputWithContext(ctx context.Context) RouteSpecTcpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecTcpRouteOutput)
}

func (i *RouteSpecTcpRouteArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecTcpRouteArgs] {
	return pulumix.Val(i)
}

type RouteSpecTcpRouteOutput struct{ *pulumi.OutputState }

func (RouteSpecTcpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRoute)(nil)).Elem()
}

func (o RouteSpecTcpRouteOutput) ToRouteSpecTcpRouteOutput() RouteSpecTcpRouteOutput {
	return o
}

func (o RouteSpecTcpRouteOutput) ToRouteSpecTcpRouteOutputWithContext(ctx context.Context) RouteSpecTcpRouteOutput {
	return o
}

func (o RouteSpecTcpRouteOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecTcpRoute] {
	return pulumix.Output[RouteSpecTcpRoute]{
		OutputState: o.OutputState,
	}
}

// Action to take if a match is determined.
func (o RouteSpecTcpRouteOutput) Action() pulumix.GPtrOutput[RouteSpecTcpRouteAction, RouteSpecTcpRouteActionOutput] {
	value := pulumix.Apply[RouteSpecTcpRoute](o, func(v RouteSpecTcpRoute) RouteSpecTcpRouteAction { return v.Action })
	return pulumix.GPtrOutput[RouteSpecTcpRouteAction, RouteSpecTcpRouteActionOutput]{OutputState: value.OutputState}
}

// Criteria for determining an gRPC request match.
func (o RouteSpecTcpRouteOutput) Match() pulumix.GPtrOutput[RouteSpecTcpRouteMatch, RouteSpecTcpRouteMatchOutput] {
	value := pulumix.Apply[RouteSpecTcpRoute](o, func(v RouteSpecTcpRoute) *RouteSpecTcpRouteMatch { return v.Match })
	return pulumix.GPtrOutput[RouteSpecTcpRouteMatch, RouteSpecTcpRouteMatchOutput]{OutputState: value.OutputState}
}

// Types of timeouts.
func (o RouteSpecTcpRouteOutput) Timeout() pulumix.GPtrOutput[RouteSpecTcpRouteTimeout, RouteSpecTcpRouteTimeoutOutput] {
	value := pulumix.Apply[RouteSpecTcpRoute](o, func(v RouteSpecTcpRoute) *RouteSpecTcpRouteTimeout { return v.Timeout })
	return pulumix.GPtrOutput[RouteSpecTcpRouteTimeout, RouteSpecTcpRouteTimeoutOutput]{OutputState: value.OutputState}
}

type RouteSpecTcpRouteAction struct {
	// Targets that traffic is routed to when a request matches the route.
	// You can specify one or more targets and their relative weights with which to distribute traffic.
	WeightedTargets []RouteSpecTcpRouteActionWeightedTarget `pulumi:"weightedTargets"`
}

type RouteSpecTcpRouteActionArgs struct {
	// Targets that traffic is routed to when a request matches the route.
	// You can specify one or more targets and their relative weights with which to distribute traffic.
	WeightedTargets pulumix.Input[[]*RouteSpecTcpRouteActionWeightedTargetArgs] `pulumi:"weightedTargets"`
}

func (RouteSpecTcpRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRouteAction)(nil)).Elem()
}

func (i RouteSpecTcpRouteActionArgs) ToRouteSpecTcpRouteActionOutput() RouteSpecTcpRouteActionOutput {
	return i.ToRouteSpecTcpRouteActionOutputWithContext(context.Background())
}

func (i RouteSpecTcpRouteActionArgs) ToRouteSpecTcpRouteActionOutputWithContext(ctx context.Context) RouteSpecTcpRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecTcpRouteActionOutput)
}

func (i *RouteSpecTcpRouteActionArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecTcpRouteActionArgs] {
	return pulumix.Val(i)
}

type RouteSpecTcpRouteActionOutput struct{ *pulumi.OutputState }

func (RouteSpecTcpRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRouteAction)(nil)).Elem()
}

func (o RouteSpecTcpRouteActionOutput) ToRouteSpecTcpRouteActionOutput() RouteSpecTcpRouteActionOutput {
	return o
}

func (o RouteSpecTcpRouteActionOutput) ToRouteSpecTcpRouteActionOutputWithContext(ctx context.Context) RouteSpecTcpRouteActionOutput {
	return o
}

func (o RouteSpecTcpRouteActionOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecTcpRouteAction] {
	return pulumix.Output[RouteSpecTcpRouteAction]{
		OutputState: o.OutputState,
	}
}

// Targets that traffic is routed to when a request matches the route.
// You can specify one or more targets and their relative weights with which to distribute traffic.
func (o RouteSpecTcpRouteActionOutput) WeightedTargets() pulumix.GArrayOutput[RouteSpecTcpRouteActionWeightedTarget, RouteSpecTcpRouteActionWeightedTargetOutput] {
	value := pulumix.Apply[RouteSpecTcpRouteAction](o, func(v RouteSpecTcpRouteAction) []RouteSpecTcpRouteActionWeightedTarget { return v.WeightedTargets })
	return pulumix.GArrayOutput[RouteSpecTcpRouteActionWeightedTarget, RouteSpecTcpRouteActionWeightedTargetOutput]{OutputState: value.OutputState}
}

type RouteSpecTcpRouteActionWeightedTarget struct {
	// The targeted port of the weighted object.
	Port *int `pulumi:"port"`
	// Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
	VirtualNode string `pulumi:"virtualNode"`
	// Relative weight of the weighted target. An integer between 0 and 100.
	Weight int `pulumi:"weight"`
}

type RouteSpecTcpRouteActionWeightedTargetArgs struct {
	// The targeted port of the weighted object.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
	VirtualNode pulumix.Input[string] `pulumi:"virtualNode"`
	// Relative weight of the weighted target. An integer between 0 and 100.
	Weight pulumix.Input[int] `pulumi:"weight"`
}

func (RouteSpecTcpRouteActionWeightedTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRouteActionWeightedTarget)(nil)).Elem()
}

func (i RouteSpecTcpRouteActionWeightedTargetArgs) ToRouteSpecTcpRouteActionWeightedTargetOutput() RouteSpecTcpRouteActionWeightedTargetOutput {
	return i.ToRouteSpecTcpRouteActionWeightedTargetOutputWithContext(context.Background())
}

func (i RouteSpecTcpRouteActionWeightedTargetArgs) ToRouteSpecTcpRouteActionWeightedTargetOutputWithContext(ctx context.Context) RouteSpecTcpRouteActionWeightedTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecTcpRouteActionWeightedTargetOutput)
}

func (i *RouteSpecTcpRouteActionWeightedTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecTcpRouteActionWeightedTargetArgs] {
	return pulumix.Val(i)
}

type RouteSpecTcpRouteActionWeightedTargetOutput struct{ *pulumi.OutputState }

func (RouteSpecTcpRouteActionWeightedTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRouteActionWeightedTarget)(nil)).Elem()
}

func (o RouteSpecTcpRouteActionWeightedTargetOutput) ToRouteSpecTcpRouteActionWeightedTargetOutput() RouteSpecTcpRouteActionWeightedTargetOutput {
	return o
}

func (o RouteSpecTcpRouteActionWeightedTargetOutput) ToRouteSpecTcpRouteActionWeightedTargetOutputWithContext(ctx context.Context) RouteSpecTcpRouteActionWeightedTargetOutput {
	return o
}

func (o RouteSpecTcpRouteActionWeightedTargetOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecTcpRouteActionWeightedTarget] {
	return pulumix.Output[RouteSpecTcpRouteActionWeightedTarget]{
		OutputState: o.OutputState,
	}
}

// The targeted port of the weighted object.
func (o RouteSpecTcpRouteActionWeightedTargetOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[RouteSpecTcpRouteActionWeightedTarget](o, func(v RouteSpecTcpRouteActionWeightedTarget) *int { return v.Port })
}

// Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
func (o RouteSpecTcpRouteActionWeightedTargetOutput) VirtualNode() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecTcpRouteActionWeightedTarget](o, func(v RouteSpecTcpRouteActionWeightedTarget) string { return v.VirtualNode })
}

// Relative weight of the weighted target. An integer between 0 and 100.
func (o RouteSpecTcpRouteActionWeightedTargetOutput) Weight() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecTcpRouteActionWeightedTarget](o, func(v RouteSpecTcpRouteActionWeightedTarget) int { return v.Weight })
}

type RouteSpecTcpRouteMatch struct {
	// The port number to match from the request.
	Port *int `pulumi:"port"`
}

type RouteSpecTcpRouteMatchArgs struct {
	// The port number to match from the request.
	Port pulumix.Input[*int] `pulumi:"port"`
}

func (RouteSpecTcpRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRouteMatch)(nil)).Elem()
}

func (i RouteSpecTcpRouteMatchArgs) ToRouteSpecTcpRouteMatchOutput() RouteSpecTcpRouteMatchOutput {
	return i.ToRouteSpecTcpRouteMatchOutputWithContext(context.Background())
}

func (i RouteSpecTcpRouteMatchArgs) ToRouteSpecTcpRouteMatchOutputWithContext(ctx context.Context) RouteSpecTcpRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecTcpRouteMatchOutput)
}

func (i *RouteSpecTcpRouteMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecTcpRouteMatchArgs] {
	return pulumix.Val(i)
}

type RouteSpecTcpRouteMatchOutput struct{ *pulumi.OutputState }

func (RouteSpecTcpRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRouteMatch)(nil)).Elem()
}

func (o RouteSpecTcpRouteMatchOutput) ToRouteSpecTcpRouteMatchOutput() RouteSpecTcpRouteMatchOutput {
	return o
}

func (o RouteSpecTcpRouteMatchOutput) ToRouteSpecTcpRouteMatchOutputWithContext(ctx context.Context) RouteSpecTcpRouteMatchOutput {
	return o
}

func (o RouteSpecTcpRouteMatchOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecTcpRouteMatch] {
	return pulumix.Output[RouteSpecTcpRouteMatch]{
		OutputState: o.OutputState,
	}
}

// The port number to match from the request.
func (o RouteSpecTcpRouteMatchOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[RouteSpecTcpRouteMatch](o, func(v RouteSpecTcpRouteMatch) *int { return v.Port })
}

type RouteSpecTcpRouteTimeout struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle *RouteSpecTcpRouteTimeoutIdle `pulumi:"idle"`
}

type RouteSpecTcpRouteTimeoutArgs struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle pulumix.Input[*RouteSpecTcpRouteTimeoutIdleArgs] `pulumi:"idle"`
}

func (RouteSpecTcpRouteTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRouteTimeout)(nil)).Elem()
}

func (i RouteSpecTcpRouteTimeoutArgs) ToRouteSpecTcpRouteTimeoutOutput() RouteSpecTcpRouteTimeoutOutput {
	return i.ToRouteSpecTcpRouteTimeoutOutputWithContext(context.Background())
}

func (i RouteSpecTcpRouteTimeoutArgs) ToRouteSpecTcpRouteTimeoutOutputWithContext(ctx context.Context) RouteSpecTcpRouteTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecTcpRouteTimeoutOutput)
}

func (i *RouteSpecTcpRouteTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecTcpRouteTimeoutArgs] {
	return pulumix.Val(i)
}

type RouteSpecTcpRouteTimeoutOutput struct{ *pulumi.OutputState }

func (RouteSpecTcpRouteTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRouteTimeout)(nil)).Elem()
}

func (o RouteSpecTcpRouteTimeoutOutput) ToRouteSpecTcpRouteTimeoutOutput() RouteSpecTcpRouteTimeoutOutput {
	return o
}

func (o RouteSpecTcpRouteTimeoutOutput) ToRouteSpecTcpRouteTimeoutOutputWithContext(ctx context.Context) RouteSpecTcpRouteTimeoutOutput {
	return o
}

func (o RouteSpecTcpRouteTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecTcpRouteTimeout] {
	return pulumix.Output[RouteSpecTcpRouteTimeout]{
		OutputState: o.OutputState,
	}
}

// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
func (o RouteSpecTcpRouteTimeoutOutput) Idle() pulumix.GPtrOutput[RouteSpecTcpRouteTimeoutIdle, RouteSpecTcpRouteTimeoutIdleOutput] {
	value := pulumix.Apply[RouteSpecTcpRouteTimeout](o, func(v RouteSpecTcpRouteTimeout) *RouteSpecTcpRouteTimeoutIdle { return v.Idle })
	return pulumix.GPtrOutput[RouteSpecTcpRouteTimeoutIdle, RouteSpecTcpRouteTimeoutIdleOutput]{OutputState: value.OutputState}
}

type RouteSpecTcpRouteTimeoutIdle struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value int `pulumi:"value"`
}

type RouteSpecTcpRouteTimeoutIdleArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (RouteSpecTcpRouteTimeoutIdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRouteTimeoutIdle)(nil)).Elem()
}

func (i RouteSpecTcpRouteTimeoutIdleArgs) ToRouteSpecTcpRouteTimeoutIdleOutput() RouteSpecTcpRouteTimeoutIdleOutput {
	return i.ToRouteSpecTcpRouteTimeoutIdleOutputWithContext(context.Background())
}

func (i RouteSpecTcpRouteTimeoutIdleArgs) ToRouteSpecTcpRouteTimeoutIdleOutputWithContext(ctx context.Context) RouteSpecTcpRouteTimeoutIdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecTcpRouteTimeoutIdleOutput)
}

func (i *RouteSpecTcpRouteTimeoutIdleArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteSpecTcpRouteTimeoutIdleArgs] {
	return pulumix.Val(i)
}

type RouteSpecTcpRouteTimeoutIdleOutput struct{ *pulumi.OutputState }

func (RouteSpecTcpRouteTimeoutIdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRouteTimeoutIdle)(nil)).Elem()
}

func (o RouteSpecTcpRouteTimeoutIdleOutput) ToRouteSpecTcpRouteTimeoutIdleOutput() RouteSpecTcpRouteTimeoutIdleOutput {
	return o
}

func (o RouteSpecTcpRouteTimeoutIdleOutput) ToRouteSpecTcpRouteTimeoutIdleOutputWithContext(ctx context.Context) RouteSpecTcpRouteTimeoutIdleOutput {
	return o
}

func (o RouteSpecTcpRouteTimeoutIdleOutput) ToOutput(ctx context.Context) pulumix.Output[RouteSpecTcpRouteTimeoutIdle] {
	return pulumix.Output[RouteSpecTcpRouteTimeoutIdle]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o RouteSpecTcpRouteTimeoutIdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[RouteSpecTcpRouteTimeoutIdle](o, func(v RouteSpecTcpRouteTimeoutIdle) string { return v.Unit })
}

// Number of time units. Minimum value of `0`.
func (o RouteSpecTcpRouteTimeoutIdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[RouteSpecTcpRouteTimeoutIdle](o, func(v RouteSpecTcpRouteTimeoutIdle) int { return v.Value })
}

type VirtualGatewaySpec struct {
	// Defaults for backends.
	BackendDefaults *VirtualGatewaySpecBackendDefaults `pulumi:"backendDefaults"`
	// Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
	Listeners []VirtualGatewaySpecListener `pulumi:"listeners"`
	// Inbound and outbound access logging information for the virtual gateway.
	Logging *VirtualGatewaySpecLogging `pulumi:"logging"`
}

type VirtualGatewaySpecArgs struct {
	// Defaults for backends.
	BackendDefaults pulumix.Input[*VirtualGatewaySpecBackendDefaultsArgs] `pulumi:"backendDefaults"`
	// Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
	Listeners pulumix.Input[[]*VirtualGatewaySpecListenerArgs] `pulumi:"listeners"`
	// Inbound and outbound access logging information for the virtual gateway.
	Logging pulumix.Input[*VirtualGatewaySpecLoggingArgs] `pulumi:"logging"`
}

func (VirtualGatewaySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpec)(nil)).Elem()
}

func (i VirtualGatewaySpecArgs) ToVirtualGatewaySpecOutput() VirtualGatewaySpecOutput {
	return i.ToVirtualGatewaySpecOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecArgs) ToVirtualGatewaySpecOutputWithContext(ctx context.Context) VirtualGatewaySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecOutput)
}

func (i *VirtualGatewaySpecArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpec)(nil)).Elem()
}

func (o VirtualGatewaySpecOutput) ToVirtualGatewaySpecOutput() VirtualGatewaySpecOutput {
	return o
}

func (o VirtualGatewaySpecOutput) ToVirtualGatewaySpecOutputWithContext(ctx context.Context) VirtualGatewaySpecOutput {
	return o
}

func (o VirtualGatewaySpecOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpec] {
	return pulumix.Output[VirtualGatewaySpec]{
		OutputState: o.OutputState,
	}
}

// Defaults for backends.
func (o VirtualGatewaySpecOutput) BackendDefaults() pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaults, VirtualGatewaySpecBackendDefaultsOutput] {
	value := pulumix.Apply[VirtualGatewaySpec](o, func(v VirtualGatewaySpec) *VirtualGatewaySpecBackendDefaults { return v.BackendDefaults })
	return pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaults, VirtualGatewaySpecBackendDefaultsOutput]{OutputState: value.OutputState}
}

// Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
func (o VirtualGatewaySpecOutput) Listeners() pulumix.GArrayOutput[VirtualGatewaySpecListener, VirtualGatewaySpecListenerOutput] {
	value := pulumix.Apply[VirtualGatewaySpec](o, func(v VirtualGatewaySpec) []VirtualGatewaySpecListener { return v.Listeners })
	return pulumix.GArrayOutput[VirtualGatewaySpecListener, VirtualGatewaySpecListenerOutput]{OutputState: value.OutputState}
}

// Inbound and outbound access logging information for the virtual gateway.
func (o VirtualGatewaySpecOutput) Logging() pulumix.GPtrOutput[VirtualGatewaySpecLogging, VirtualGatewaySpecLoggingOutput] {
	value := pulumix.Apply[VirtualGatewaySpec](o, func(v VirtualGatewaySpec) *VirtualGatewaySpecLogging { return v.Logging })
	return pulumix.GPtrOutput[VirtualGatewaySpecLogging, VirtualGatewaySpecLoggingOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecBackendDefaults struct {
	// Default client policy for virtual gateway backends.
	ClientPolicy *VirtualGatewaySpecBackendDefaultsClientPolicy `pulumi:"clientPolicy"`
}

type VirtualGatewaySpecBackendDefaultsArgs struct {
	// Default client policy for virtual gateway backends.
	ClientPolicy pulumix.Input[*VirtualGatewaySpecBackendDefaultsClientPolicyArgs] `pulumi:"clientPolicy"`
}

func (VirtualGatewaySpecBackendDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaults)(nil)).Elem()
}

func (i VirtualGatewaySpecBackendDefaultsArgs) ToVirtualGatewaySpecBackendDefaultsOutput() VirtualGatewaySpecBackendDefaultsOutput {
	return i.ToVirtualGatewaySpecBackendDefaultsOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecBackendDefaultsArgs) ToVirtualGatewaySpecBackendDefaultsOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecBackendDefaultsOutput)
}

func (i *VirtualGatewaySpecBackendDefaultsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecBackendDefaultsArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecBackendDefaultsOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecBackendDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaults)(nil)).Elem()
}

func (o VirtualGatewaySpecBackendDefaultsOutput) ToVirtualGatewaySpecBackendDefaultsOutput() VirtualGatewaySpecBackendDefaultsOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsOutput) ToVirtualGatewaySpecBackendDefaultsOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecBackendDefaults] {
	return pulumix.Output[VirtualGatewaySpecBackendDefaults]{
		OutputState: o.OutputState,
	}
}

// Default client policy for virtual gateway backends.
func (o VirtualGatewaySpecBackendDefaultsOutput) ClientPolicy() pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicy, VirtualGatewaySpecBackendDefaultsClientPolicyOutput] {
	value := pulumix.Apply[VirtualGatewaySpecBackendDefaults](o, func(v VirtualGatewaySpecBackendDefaults) *VirtualGatewaySpecBackendDefaultsClientPolicy {
		return v.ClientPolicy
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicy, VirtualGatewaySpecBackendDefaultsClientPolicyOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecBackendDefaultsClientPolicy struct {
	// Transport Layer Security (TLS) client policy.
	Tls *VirtualGatewaySpecBackendDefaultsClientPolicyTls `pulumi:"tls"`
}

type VirtualGatewaySpecBackendDefaultsClientPolicyArgs struct {
	// Transport Layer Security (TLS) client policy.
	Tls pulumix.Input[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs] `pulumi:"tls"`
}

func (VirtualGatewaySpecBackendDefaultsClientPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicy)(nil)).Elem()
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyOutput() VirtualGatewaySpecBackendDefaultsClientPolicyOutput {
	return i.ToVirtualGatewaySpecBackendDefaultsClientPolicyOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecBackendDefaultsClientPolicyOutput)
}

func (i *VirtualGatewaySpecBackendDefaultsClientPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecBackendDefaultsClientPolicyArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecBackendDefaultsClientPolicyOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecBackendDefaultsClientPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicy)(nil)).Elem()
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyOutput() VirtualGatewaySpecBackendDefaultsClientPolicyOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicy] {
	return pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicy]{
		OutputState: o.OutputState,
	}
}

// Transport Layer Security (TLS) client policy.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyOutput) Tls() pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTls, VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput] {
	value := pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicy](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicy) *VirtualGatewaySpecBackendDefaultsClientPolicyTls {
		return v.Tls
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTls, VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTls struct {
	// Listener's TLS certificate.
	Certificate *VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate `pulumi:"certificate"`
	// Whether the policy is enforced. Default is `true`.
	Enforce *bool `pulumi:"enforce"`
	// One or more ports that the policy is enforced for.
	Ports []int `pulumi:"ports"`
	// Listener's Transport Layer Security (TLS) validation context.
	Validation VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation `pulumi:"validation"`
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs struct {
	// Listener's TLS certificate.
	Certificate pulumix.Input[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateArgs] `pulumi:"certificate"`
	// Whether the policy is enforced. Default is `true`.
	Enforce pulumix.Input[*bool] `pulumi:"enforce"`
	// One or more ports that the policy is enforced for.
	Ports pulumix.Input[[]int] `pulumi:"ports"`
	// Listener's Transport Layer Security (TLS) validation context.
	Validation pulumix.Input[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationArgs] `pulumi:"validation"`
}

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTls)(nil)).Elem()
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput {
	return i.ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput)
}

func (i *VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTls)(nil)).Elem()
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTls] {
	return pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTls]{
		OutputState: o.OutputState,
	}
}

// Listener's TLS certificate.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput) Certificate() pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate, VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput] {
	value := pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTls](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTls) *VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate {
		return v.Certificate
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate, VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput]{OutputState: value.OutputState}
}

// Whether the policy is enforced. Default is `true`.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput) Enforce() pulumix.Output[*bool] {
	return pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTls](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTls) *bool { return v.Enforce })
}

// One or more ports that the policy is enforced for.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput) Ports() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTls](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTls) []int { return v.Ports })
	return pulumix.ArrayOutput[int]{OutputState: value.OutputState}
}

// Listener's Transport Layer Security (TLS) validation context.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput) Validation() pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation, VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput] {
	value := pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTls](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTls) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation {
		return v.Validation
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation, VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate struct {
	// Local file certificate.
	File *VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile `pulumi:"file"`
	// A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds *VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds `pulumi:"sds"`
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateArgs struct {
	// Local file certificate.
	File pulumix.Input[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileArgs] `pulumi:"file"`
	// A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds pulumix.Input[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsArgs] `pulumi:"sds"`
}

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate)(nil)).Elem()
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput {
	return i.ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput)
}

func (i *VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate)(nil)).Elem()
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate] {
	return pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate]{
		OutputState: o.OutputState,
	}
}

// Local file certificate.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput) File() pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile, VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput] {
	value := pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate) *VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile {
		return v.File
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile, VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput]{OutputState: value.OutputState}
}

// A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput) Sds() pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds, VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput] {
	value := pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate) *VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds {
		return v.Sds
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds, VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain string `pulumi:"certificateChain"`
	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	PrivateKey string `pulumi:"privateKey"`
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileArgs struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	PrivateKey pulumix.Input[string] `pulumi:"privateKey"`
}

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile)(nil)).Elem()
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput {
	return i.ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput)
}

func (i *VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile)(nil)).Elem()
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile] {
	return pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile]{
		OutputState: o.OutputState,
	}
}

// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile) string {
		return v.CertificateChain
	})
}

// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput) PrivateKey() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile) string { return v.PrivateKey })
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds struct {
	// Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName string `pulumi:"secretName"`
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsArgs struct {
	// Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds)(nil)).Elem()
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput {
	return i.ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput)
}

func (i *VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds)(nil)).Elem()
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds] {
	return pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds]{
		OutputState: o.OutputState,
	}
}

// Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds) string { return v.SecretName })
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation struct {
	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	SubjectAlternativeNames *VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames `pulumi:"subjectAlternativeNames"`
	// TLS validation context trust.
	Trust VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust `pulumi:"trust"`
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationArgs struct {
	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	SubjectAlternativeNames pulumix.Input[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesArgs] `pulumi:"subjectAlternativeNames"`
	// TLS validation context trust.
	Trust pulumix.Input[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustArgs] `pulumi:"trust"`
}

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation)(nil)).Elem()
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput {
	return i.ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput)
}

func (i *VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation)(nil)).Elem()
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation] {
	return pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation]{
		OutputState: o.OutputState,
	}
}

// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput) SubjectAlternativeNames() pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames, VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput] {
	value := pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation) *VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames {
		return v.SubjectAlternativeNames
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames, VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput]{OutputState: value.OutputState}
}

// TLS validation context trust.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput) Trust() pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust, VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput] {
	value := pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust {
		return v.Trust
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust, VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames struct {
	// Criteria for determining a SAN's match.
	Match VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch `pulumi:"match"`
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesArgs struct {
	// Criteria for determining a SAN's match.
	Match pulumix.Input[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs] `pulumi:"match"`
}

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames)(nil)).Elem()
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput {
	return i.ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput)
}

func (i *VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames)(nil)).Elem()
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames] {
	return pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames]{
		OutputState: o.OutputState,
	}
}

// Criteria for determining a SAN's match.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput) Match() pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch, VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput] {
	value := pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch {
		return v.Match
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch, VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch struct {
	// Values sent must match the specified values exactly.
	Exacts []string `pulumi:"exacts"`
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs struct {
	// Values sent must match the specified values exactly.
	Exacts pulumix.Input[[]string] `pulumi:"exacts"`
}

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch)(nil)).Elem()
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput {
	return i.ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput)
}

func (i *VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch)(nil)).Elem()
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch] {
	return pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch]{
		OutputState: o.OutputState,
	}
}

// Values sent must match the specified values exactly.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput) Exacts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch) []string {
		return v.Exacts
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust struct {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm *VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm `pulumi:"acm"`
	// TLS validation context trust for a local file certificate.
	File *VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile `pulumi:"file"`
	// TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds *VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds `pulumi:"sds"`
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustArgs struct {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm pulumix.Input[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmArgs] `pulumi:"acm"`
	// TLS validation context trust for a local file certificate.
	File pulumix.Input[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileArgs] `pulumi:"file"`
	// TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds pulumix.Input[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsArgs] `pulumi:"sds"`
}

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust)(nil)).Elem()
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput {
	return i.ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput)
}

func (i *VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust)(nil)).Elem()
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust] {
	return pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust]{
		OutputState: o.OutputState,
	}
}

// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput) Acm() pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm, VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput] {
	value := pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust) *VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm {
		return v.Acm
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm, VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput]{OutputState: value.OutputState}
}

// TLS validation context trust for a local file certificate.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput) File() pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile, VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput] {
	value := pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust) *VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile {
		return v.File
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile, VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput]{OutputState: value.OutputState}
}

// TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput) Sds() pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds, VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput] {
	value := pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust) *VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds {
		return v.Sds
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds, VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm struct {
	// One or more ACM ARNs.
	CertificateAuthorityArns []string `pulumi:"certificateAuthorityArns"`
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmArgs struct {
	// One or more ACM ARNs.
	CertificateAuthorityArns pulumix.Input[[]string] `pulumi:"certificateAuthorityArns"`
}

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm)(nil)).Elem()
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput {
	return i.ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput)
}

func (i *VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm)(nil)).Elem()
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm] {
	return pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm]{
		OutputState: o.OutputState,
	}
}

// One or more ACM ARNs.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput) CertificateAuthorityArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm) []string {
		return v.CertificateAuthorityArns
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain string `pulumi:"certificateChain"`
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileArgs struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
}

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile)(nil)).Elem()
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput {
	return i.ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput)
}

func (i *VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile)(nil)).Elem()
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile] {
	return pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile]{
		OutputState: o.OutputState,
	}
}

// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile) string {
		return v.CertificateChain
	})
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds struct {
	// Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName string `pulumi:"secretName"`
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsArgs struct {
	// Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds)(nil)).Elem()
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput {
	return i.ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsArgs) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput)
}

func (i *VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds)(nil)).Elem()
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput() VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput) ToVirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutputWithContext(ctx context.Context) VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput {
	return o
}

func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds] {
	return pulumix.Output[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds]{
		OutputState: o.OutputState,
	}
}

// Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
func (o VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds](o, func(v VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds) string { return v.SecretName })
}

type VirtualGatewaySpecListener struct {
	// Connection pool information for the listener.
	ConnectionPool *VirtualGatewaySpecListenerConnectionPool `pulumi:"connectionPool"`
	// Health check information for the listener.
	HealthCheck *VirtualGatewaySpecListenerHealthCheck `pulumi:"healthCheck"`
	// Port mapping information for the listener.
	PortMapping VirtualGatewaySpecListenerPortMapping `pulumi:"portMapping"`
	// Transport Layer Security (TLS) properties for the listener
	Tls *VirtualGatewaySpecListenerTls `pulumi:"tls"`
}

type VirtualGatewaySpecListenerArgs struct {
	// Connection pool information for the listener.
	ConnectionPool pulumix.Input[*VirtualGatewaySpecListenerConnectionPoolArgs] `pulumi:"connectionPool"`
	// Health check information for the listener.
	HealthCheck pulumix.Input[*VirtualGatewaySpecListenerHealthCheckArgs] `pulumi:"healthCheck"`
	// Port mapping information for the listener.
	PortMapping pulumix.Input[*VirtualGatewaySpecListenerPortMappingArgs] `pulumi:"portMapping"`
	// Transport Layer Security (TLS) properties for the listener
	Tls pulumix.Input[*VirtualGatewaySpecListenerTlsArgs] `pulumi:"tls"`
}

func (VirtualGatewaySpecListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListener)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerArgs) ToVirtualGatewaySpecListenerOutput() VirtualGatewaySpecListenerOutput {
	return i.ToVirtualGatewaySpecListenerOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerArgs) ToVirtualGatewaySpecListenerOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerOutput)
}

func (i *VirtualGatewaySpecListenerArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListener)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerOutput) ToVirtualGatewaySpecListenerOutput() VirtualGatewaySpecListenerOutput {
	return o
}

func (o VirtualGatewaySpecListenerOutput) ToVirtualGatewaySpecListenerOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerOutput {
	return o
}

func (o VirtualGatewaySpecListenerOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListener] {
	return pulumix.Output[VirtualGatewaySpecListener]{
		OutputState: o.OutputState,
	}
}

// Connection pool information for the listener.
func (o VirtualGatewaySpecListenerOutput) ConnectionPool() pulumix.GPtrOutput[VirtualGatewaySpecListenerConnectionPool, VirtualGatewaySpecListenerConnectionPoolOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListener](o, func(v VirtualGatewaySpecListener) *VirtualGatewaySpecListenerConnectionPool { return v.ConnectionPool })
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerConnectionPool, VirtualGatewaySpecListenerConnectionPoolOutput]{OutputState: value.OutputState}
}

// Health check information for the listener.
func (o VirtualGatewaySpecListenerOutput) HealthCheck() pulumix.GPtrOutput[VirtualGatewaySpecListenerHealthCheck, VirtualGatewaySpecListenerHealthCheckOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListener](o, func(v VirtualGatewaySpecListener) *VirtualGatewaySpecListenerHealthCheck { return v.HealthCheck })
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerHealthCheck, VirtualGatewaySpecListenerHealthCheckOutput]{OutputState: value.OutputState}
}

// Port mapping information for the listener.
func (o VirtualGatewaySpecListenerOutput) PortMapping() pulumix.GPtrOutput[VirtualGatewaySpecListenerPortMapping, VirtualGatewaySpecListenerPortMappingOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListener](o, func(v VirtualGatewaySpecListener) VirtualGatewaySpecListenerPortMapping { return v.PortMapping })
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerPortMapping, VirtualGatewaySpecListenerPortMappingOutput]{OutputState: value.OutputState}
}

// Transport Layer Security (TLS) properties for the listener
func (o VirtualGatewaySpecListenerOutput) Tls() pulumix.GPtrOutput[VirtualGatewaySpecListenerTls, VirtualGatewaySpecListenerTlsOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListener](o, func(v VirtualGatewaySpecListener) *VirtualGatewaySpecListenerTls { return v.Tls })
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerTls, VirtualGatewaySpecListenerTlsOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecListenerConnectionPool struct {
	// Connection pool information for gRPC listeners.
	Grpc *VirtualGatewaySpecListenerConnectionPoolGrpc `pulumi:"grpc"`
	// Connection pool information for HTTP listeners.
	Http *VirtualGatewaySpecListenerConnectionPoolHttp `pulumi:"http"`
	// Connection pool information for HTTP2 listeners.
	Http2 *VirtualGatewaySpecListenerConnectionPoolHttp2 `pulumi:"http2"`
}

type VirtualGatewaySpecListenerConnectionPoolArgs struct {
	// Connection pool information for gRPC listeners.
	Grpc pulumix.Input[*VirtualGatewaySpecListenerConnectionPoolGrpcArgs] `pulumi:"grpc"`
	// Connection pool information for HTTP listeners.
	Http pulumix.Input[*VirtualGatewaySpecListenerConnectionPoolHttpArgs] `pulumi:"http"`
	// Connection pool information for HTTP2 listeners.
	Http2 pulumix.Input[*VirtualGatewaySpecListenerConnectionPoolHttp2Args] `pulumi:"http2"`
}

func (VirtualGatewaySpecListenerConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerConnectionPool)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerConnectionPoolArgs) ToVirtualGatewaySpecListenerConnectionPoolOutput() VirtualGatewaySpecListenerConnectionPoolOutput {
	return i.ToVirtualGatewaySpecListenerConnectionPoolOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerConnectionPoolArgs) ToVirtualGatewaySpecListenerConnectionPoolOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerConnectionPoolOutput)
}

func (i *VirtualGatewaySpecListenerConnectionPoolArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerConnectionPoolArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerConnectionPoolOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerConnectionPool)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerConnectionPoolOutput) ToVirtualGatewaySpecListenerConnectionPoolOutput() VirtualGatewaySpecListenerConnectionPoolOutput {
	return o
}

func (o VirtualGatewaySpecListenerConnectionPoolOutput) ToVirtualGatewaySpecListenerConnectionPoolOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerConnectionPoolOutput {
	return o
}

func (o VirtualGatewaySpecListenerConnectionPoolOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerConnectionPool] {
	return pulumix.Output[VirtualGatewaySpecListenerConnectionPool]{
		OutputState: o.OutputState,
	}
}

// Connection pool information for gRPC listeners.
func (o VirtualGatewaySpecListenerConnectionPoolOutput) Grpc() pulumix.GPtrOutput[VirtualGatewaySpecListenerConnectionPoolGrpc, VirtualGatewaySpecListenerConnectionPoolGrpcOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListenerConnectionPool](o, func(v VirtualGatewaySpecListenerConnectionPool) *VirtualGatewaySpecListenerConnectionPoolGrpc {
		return v.Grpc
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerConnectionPoolGrpc, VirtualGatewaySpecListenerConnectionPoolGrpcOutput]{OutputState: value.OutputState}
}

// Connection pool information for HTTP listeners.
func (o VirtualGatewaySpecListenerConnectionPoolOutput) Http() pulumix.GPtrOutput[VirtualGatewaySpecListenerConnectionPoolHttp, VirtualGatewaySpecListenerConnectionPoolHttpOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListenerConnectionPool](o, func(v VirtualGatewaySpecListenerConnectionPool) *VirtualGatewaySpecListenerConnectionPoolHttp {
		return v.Http
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerConnectionPoolHttp, VirtualGatewaySpecListenerConnectionPoolHttpOutput]{OutputState: value.OutputState}
}

// Connection pool information for HTTP2 listeners.
func (o VirtualGatewaySpecListenerConnectionPoolOutput) Http2() pulumix.GPtrOutput[VirtualGatewaySpecListenerConnectionPoolHttp2, VirtualGatewaySpecListenerConnectionPoolHttp2Output] {
	value := pulumix.Apply[VirtualGatewaySpecListenerConnectionPool](o, func(v VirtualGatewaySpecListenerConnectionPool) *VirtualGatewaySpecListenerConnectionPoolHttp2 {
		return v.Http2
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerConnectionPoolHttp2, VirtualGatewaySpecListenerConnectionPoolHttp2Output]{OutputState: value.OutputState}
}

type VirtualGatewaySpecListenerConnectionPoolGrpc struct {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
	MaxRequests int `pulumi:"maxRequests"`
}

type VirtualGatewaySpecListenerConnectionPoolGrpcArgs struct {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
	MaxRequests pulumix.Input[int] `pulumi:"maxRequests"`
}

func (VirtualGatewaySpecListenerConnectionPoolGrpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerConnectionPoolGrpc)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerConnectionPoolGrpcArgs) ToVirtualGatewaySpecListenerConnectionPoolGrpcOutput() VirtualGatewaySpecListenerConnectionPoolGrpcOutput {
	return i.ToVirtualGatewaySpecListenerConnectionPoolGrpcOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerConnectionPoolGrpcArgs) ToVirtualGatewaySpecListenerConnectionPoolGrpcOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerConnectionPoolGrpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerConnectionPoolGrpcOutput)
}

func (i *VirtualGatewaySpecListenerConnectionPoolGrpcArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerConnectionPoolGrpcArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerConnectionPoolGrpcOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerConnectionPoolGrpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerConnectionPoolGrpc)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerConnectionPoolGrpcOutput) ToVirtualGatewaySpecListenerConnectionPoolGrpcOutput() VirtualGatewaySpecListenerConnectionPoolGrpcOutput {
	return o
}

func (o VirtualGatewaySpecListenerConnectionPoolGrpcOutput) ToVirtualGatewaySpecListenerConnectionPoolGrpcOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerConnectionPoolGrpcOutput {
	return o
}

func (o VirtualGatewaySpecListenerConnectionPoolGrpcOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerConnectionPoolGrpc] {
	return pulumix.Output[VirtualGatewaySpecListenerConnectionPoolGrpc]{
		OutputState: o.OutputState,
	}
}

// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
func (o VirtualGatewaySpecListenerConnectionPoolGrpcOutput) MaxRequests() pulumix.Output[int] {
	return pulumix.Apply[VirtualGatewaySpecListenerConnectionPoolGrpc](o, func(v VirtualGatewaySpecListenerConnectionPoolGrpc) int { return v.MaxRequests })
}

type VirtualGatewaySpecListenerConnectionPoolHttp2 struct {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
	MaxRequests int `pulumi:"maxRequests"`
}

type VirtualGatewaySpecListenerConnectionPoolHttp2Args struct {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
	MaxRequests pulumix.Input[int] `pulumi:"maxRequests"`
}

func (VirtualGatewaySpecListenerConnectionPoolHttp2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerConnectionPoolHttp2)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerConnectionPoolHttp2Args) ToVirtualGatewaySpecListenerConnectionPoolHttp2Output() VirtualGatewaySpecListenerConnectionPoolHttp2Output {
	return i.ToVirtualGatewaySpecListenerConnectionPoolHttp2OutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerConnectionPoolHttp2Args) ToVirtualGatewaySpecListenerConnectionPoolHttp2OutputWithContext(ctx context.Context) VirtualGatewaySpecListenerConnectionPoolHttp2Output {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerConnectionPoolHttp2Output)
}

func (i *VirtualGatewaySpecListenerConnectionPoolHttp2Args) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerConnectionPoolHttp2Args] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerConnectionPoolHttp2Output struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerConnectionPoolHttp2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerConnectionPoolHttp2)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerConnectionPoolHttp2Output) ToVirtualGatewaySpecListenerConnectionPoolHttp2Output() VirtualGatewaySpecListenerConnectionPoolHttp2Output {
	return o
}

func (o VirtualGatewaySpecListenerConnectionPoolHttp2Output) ToVirtualGatewaySpecListenerConnectionPoolHttp2OutputWithContext(ctx context.Context) VirtualGatewaySpecListenerConnectionPoolHttp2Output {
	return o
}

func (o VirtualGatewaySpecListenerConnectionPoolHttp2Output) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerConnectionPoolHttp2] {
	return pulumix.Output[VirtualGatewaySpecListenerConnectionPoolHttp2]{
		OutputState: o.OutputState,
	}
}

// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
func (o VirtualGatewaySpecListenerConnectionPoolHttp2Output) MaxRequests() pulumix.Output[int] {
	return pulumix.Apply[VirtualGatewaySpecListenerConnectionPoolHttp2](o, func(v VirtualGatewaySpecListenerConnectionPoolHttp2) int { return v.MaxRequests })
}

type VirtualGatewaySpecListenerConnectionPoolHttp struct {
	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.
	MaxConnections int `pulumi:"maxConnections"`
	// Number of overflowing requests after `maxConnections` Envoy will queue to upstream cluster. Minimum value of `1`.
	//
	// The `http2` connection pool object supports the following:
	MaxPendingRequests *int `pulumi:"maxPendingRequests"`
}

type VirtualGatewaySpecListenerConnectionPoolHttpArgs struct {
	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.
	MaxConnections pulumix.Input[int] `pulumi:"maxConnections"`
	// Number of overflowing requests after `maxConnections` Envoy will queue to upstream cluster. Minimum value of `1`.
	//
	// The `http2` connection pool object supports the following:
	MaxPendingRequests pulumix.Input[*int] `pulumi:"maxPendingRequests"`
}

func (VirtualGatewaySpecListenerConnectionPoolHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerConnectionPoolHttp)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerConnectionPoolHttpArgs) ToVirtualGatewaySpecListenerConnectionPoolHttpOutput() VirtualGatewaySpecListenerConnectionPoolHttpOutput {
	return i.ToVirtualGatewaySpecListenerConnectionPoolHttpOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerConnectionPoolHttpArgs) ToVirtualGatewaySpecListenerConnectionPoolHttpOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerConnectionPoolHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerConnectionPoolHttpOutput)
}

func (i *VirtualGatewaySpecListenerConnectionPoolHttpArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerConnectionPoolHttpArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerConnectionPoolHttpOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerConnectionPoolHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerConnectionPoolHttp)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerConnectionPoolHttpOutput) ToVirtualGatewaySpecListenerConnectionPoolHttpOutput() VirtualGatewaySpecListenerConnectionPoolHttpOutput {
	return o
}

func (o VirtualGatewaySpecListenerConnectionPoolHttpOutput) ToVirtualGatewaySpecListenerConnectionPoolHttpOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerConnectionPoolHttpOutput {
	return o
}

func (o VirtualGatewaySpecListenerConnectionPoolHttpOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerConnectionPoolHttp] {
	return pulumix.Output[VirtualGatewaySpecListenerConnectionPoolHttp]{
		OutputState: o.OutputState,
	}
}

// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.
func (o VirtualGatewaySpecListenerConnectionPoolHttpOutput) MaxConnections() pulumix.Output[int] {
	return pulumix.Apply[VirtualGatewaySpecListenerConnectionPoolHttp](o, func(v VirtualGatewaySpecListenerConnectionPoolHttp) int { return v.MaxConnections })
}

// Number of overflowing requests after `maxConnections` Envoy will queue to upstream cluster. Minimum value of `1`.
//
// The `http2` connection pool object supports the following:
func (o VirtualGatewaySpecListenerConnectionPoolHttpOutput) MaxPendingRequests() pulumix.Output[*int] {
	return pulumix.Apply[VirtualGatewaySpecListenerConnectionPoolHttp](o, func(v VirtualGatewaySpecListenerConnectionPoolHttp) *int { return v.MaxPendingRequests })
}

type VirtualGatewaySpecListenerHealthCheck struct {
	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// Time period in milliseconds between each health check execution.
	IntervalMillis int `pulumi:"intervalMillis"`
	// Destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.
	Path *string `pulumi:"path"`
	// Destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
	Port *int `pulumi:"port"`
	// Protocol for the health check request. Valid values are `http`, `http2`, and `grpc`.
	Protocol string `pulumi:"protocol"`
	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	TimeoutMillis int `pulumi:"timeoutMillis"`
	// Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
}

type VirtualGatewaySpecListenerHealthCheckArgs struct {
	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	HealthyThreshold pulumix.Input[int] `pulumi:"healthyThreshold"`
	// Time period in milliseconds between each health check execution.
	IntervalMillis pulumix.Input[int] `pulumi:"intervalMillis"`
	// Destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.
	Path pulumix.Input[*string] `pulumi:"path"`
	// Destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Protocol for the health check request. Valid values are `http`, `http2`, and `grpc`.
	Protocol pulumix.Input[string] `pulumi:"protocol"`
	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	TimeoutMillis pulumix.Input[int] `pulumi:"timeoutMillis"`
	// Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
	UnhealthyThreshold pulumix.Input[int] `pulumi:"unhealthyThreshold"`
}

func (VirtualGatewaySpecListenerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerHealthCheck)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerHealthCheckArgs) ToVirtualGatewaySpecListenerHealthCheckOutput() VirtualGatewaySpecListenerHealthCheckOutput {
	return i.ToVirtualGatewaySpecListenerHealthCheckOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerHealthCheckArgs) ToVirtualGatewaySpecListenerHealthCheckOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerHealthCheckOutput)
}

func (i *VirtualGatewaySpecListenerHealthCheckArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerHealthCheckArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerHealthCheckOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerHealthCheck)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerHealthCheckOutput) ToVirtualGatewaySpecListenerHealthCheckOutput() VirtualGatewaySpecListenerHealthCheckOutput {
	return o
}

func (o VirtualGatewaySpecListenerHealthCheckOutput) ToVirtualGatewaySpecListenerHealthCheckOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerHealthCheckOutput {
	return o
}

func (o VirtualGatewaySpecListenerHealthCheckOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerHealthCheck] {
	return pulumix.Output[VirtualGatewaySpecListenerHealthCheck]{
		OutputState: o.OutputState,
	}
}

// Number of consecutive successful health checks that must occur before declaring listener healthy.
func (o VirtualGatewaySpecListenerHealthCheckOutput) HealthyThreshold() pulumix.Output[int] {
	return pulumix.Apply[VirtualGatewaySpecListenerHealthCheck](o, func(v VirtualGatewaySpecListenerHealthCheck) int { return v.HealthyThreshold })
}

// Time period in milliseconds between each health check execution.
func (o VirtualGatewaySpecListenerHealthCheckOutput) IntervalMillis() pulumix.Output[int] {
	return pulumix.Apply[VirtualGatewaySpecListenerHealthCheck](o, func(v VirtualGatewaySpecListenerHealthCheck) int { return v.IntervalMillis })
}

// Destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.
func (o VirtualGatewaySpecListenerHealthCheckOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[VirtualGatewaySpecListenerHealthCheck](o, func(v VirtualGatewaySpecListenerHealthCheck) *string { return v.Path })
}

// Destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
func (o VirtualGatewaySpecListenerHealthCheckOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[VirtualGatewaySpecListenerHealthCheck](o, func(v VirtualGatewaySpecListenerHealthCheck) *int { return v.Port })
}

// Protocol for the health check request. Valid values are `http`, `http2`, and `grpc`.
func (o VirtualGatewaySpecListenerHealthCheckOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecListenerHealthCheck](o, func(v VirtualGatewaySpecListenerHealthCheck) string { return v.Protocol })
}

// Amount of time to wait when receiving a response from the health check, in milliseconds.
func (o VirtualGatewaySpecListenerHealthCheckOutput) TimeoutMillis() pulumix.Output[int] {
	return pulumix.Apply[VirtualGatewaySpecListenerHealthCheck](o, func(v VirtualGatewaySpecListenerHealthCheck) int { return v.TimeoutMillis })
}

// Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
func (o VirtualGatewaySpecListenerHealthCheckOutput) UnhealthyThreshold() pulumix.Output[int] {
	return pulumix.Apply[VirtualGatewaySpecListenerHealthCheck](o, func(v VirtualGatewaySpecListenerHealthCheck) int { return v.UnhealthyThreshold })
}

type VirtualGatewaySpecListenerPortMapping struct {
	// Port used for the port mapping.
	Port int `pulumi:"port"`
	// Protocol used for the port mapping. Valid values are `http`, `http2`, `tcp` and `grpc`.
	Protocol string `pulumi:"protocol"`
}

type VirtualGatewaySpecListenerPortMappingArgs struct {
	// Port used for the port mapping.
	Port pulumix.Input[int] `pulumi:"port"`
	// Protocol used for the port mapping. Valid values are `http`, `http2`, `tcp` and `grpc`.
	Protocol pulumix.Input[string] `pulumi:"protocol"`
}

func (VirtualGatewaySpecListenerPortMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerPortMapping)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerPortMappingArgs) ToVirtualGatewaySpecListenerPortMappingOutput() VirtualGatewaySpecListenerPortMappingOutput {
	return i.ToVirtualGatewaySpecListenerPortMappingOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerPortMappingArgs) ToVirtualGatewaySpecListenerPortMappingOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerPortMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerPortMappingOutput)
}

func (i *VirtualGatewaySpecListenerPortMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerPortMappingArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerPortMappingOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerPortMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerPortMapping)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerPortMappingOutput) ToVirtualGatewaySpecListenerPortMappingOutput() VirtualGatewaySpecListenerPortMappingOutput {
	return o
}

func (o VirtualGatewaySpecListenerPortMappingOutput) ToVirtualGatewaySpecListenerPortMappingOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerPortMappingOutput {
	return o
}

func (o VirtualGatewaySpecListenerPortMappingOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerPortMapping] {
	return pulumix.Output[VirtualGatewaySpecListenerPortMapping]{
		OutputState: o.OutputState,
	}
}

// Port used for the port mapping.
func (o VirtualGatewaySpecListenerPortMappingOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[VirtualGatewaySpecListenerPortMapping](o, func(v VirtualGatewaySpecListenerPortMapping) int { return v.Port })
}

// Protocol used for the port mapping. Valid values are `http`, `http2`, `tcp` and `grpc`.
func (o VirtualGatewaySpecListenerPortMappingOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecListenerPortMapping](o, func(v VirtualGatewaySpecListenerPortMapping) string { return v.Protocol })
}

type VirtualGatewaySpecListenerTls struct {
	// Listener's TLS certificate.
	Certificate VirtualGatewaySpecListenerTlsCertificate `pulumi:"certificate"`
	// Listener's TLS mode. Valid values: `DISABLED`, `PERMISSIVE`, `STRICT`.
	Mode string `pulumi:"mode"`
	// Listener's Transport Layer Security (TLS) validation context.
	Validation *VirtualGatewaySpecListenerTlsValidation `pulumi:"validation"`
}

type VirtualGatewaySpecListenerTlsArgs struct {
	// Listener's TLS certificate.
	Certificate pulumix.Input[*VirtualGatewaySpecListenerTlsCertificateArgs] `pulumi:"certificate"`
	// Listener's TLS mode. Valid values: `DISABLED`, `PERMISSIVE`, `STRICT`.
	Mode pulumix.Input[string] `pulumi:"mode"`
	// Listener's Transport Layer Security (TLS) validation context.
	Validation pulumix.Input[*VirtualGatewaySpecListenerTlsValidationArgs] `pulumi:"validation"`
}

func (VirtualGatewaySpecListenerTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTls)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerTlsArgs) ToVirtualGatewaySpecListenerTlsOutput() VirtualGatewaySpecListenerTlsOutput {
	return i.ToVirtualGatewaySpecListenerTlsOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerTlsArgs) ToVirtualGatewaySpecListenerTlsOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerTlsOutput)
}

func (i *VirtualGatewaySpecListenerTlsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerTlsArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerTlsOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTls)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerTlsOutput) ToVirtualGatewaySpecListenerTlsOutput() VirtualGatewaySpecListenerTlsOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsOutput) ToVirtualGatewaySpecListenerTlsOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerTls] {
	return pulumix.Output[VirtualGatewaySpecListenerTls]{
		OutputState: o.OutputState,
	}
}

// Listener's TLS certificate.
func (o VirtualGatewaySpecListenerTlsOutput) Certificate() pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsCertificate, VirtualGatewaySpecListenerTlsCertificateOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListenerTls](o, func(v VirtualGatewaySpecListenerTls) VirtualGatewaySpecListenerTlsCertificate { return v.Certificate })
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsCertificate, VirtualGatewaySpecListenerTlsCertificateOutput]{OutputState: value.OutputState}
}

// Listener's TLS mode. Valid values: `DISABLED`, `PERMISSIVE`, `STRICT`.
func (o VirtualGatewaySpecListenerTlsOutput) Mode() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecListenerTls](o, func(v VirtualGatewaySpecListenerTls) string { return v.Mode })
}

// Listener's Transport Layer Security (TLS) validation context.
func (o VirtualGatewaySpecListenerTlsOutput) Validation() pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsValidation, VirtualGatewaySpecListenerTlsValidationOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListenerTls](o, func(v VirtualGatewaySpecListenerTls) *VirtualGatewaySpecListenerTlsValidation { return v.Validation })
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsValidation, VirtualGatewaySpecListenerTlsValidationOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecListenerTlsCertificate struct {
	// An AWS Certificate Manager (ACM) certificate.
	Acm *VirtualGatewaySpecListenerTlsCertificateAcm `pulumi:"acm"`
	// Local file certificate.
	File *VirtualGatewaySpecListenerTlsCertificateFile `pulumi:"file"`
	// A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds *VirtualGatewaySpecListenerTlsCertificateSds `pulumi:"sds"`
}

type VirtualGatewaySpecListenerTlsCertificateArgs struct {
	// An AWS Certificate Manager (ACM) certificate.
	Acm pulumix.Input[*VirtualGatewaySpecListenerTlsCertificateAcmArgs] `pulumi:"acm"`
	// Local file certificate.
	File pulumix.Input[*VirtualGatewaySpecListenerTlsCertificateFileArgs] `pulumi:"file"`
	// A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds pulumix.Input[*VirtualGatewaySpecListenerTlsCertificateSdsArgs] `pulumi:"sds"`
}

func (VirtualGatewaySpecListenerTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsCertificate)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerTlsCertificateArgs) ToVirtualGatewaySpecListenerTlsCertificateOutput() VirtualGatewaySpecListenerTlsCertificateOutput {
	return i.ToVirtualGatewaySpecListenerTlsCertificateOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerTlsCertificateArgs) ToVirtualGatewaySpecListenerTlsCertificateOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerTlsCertificateOutput)
}

func (i *VirtualGatewaySpecListenerTlsCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerTlsCertificateArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerTlsCertificateOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsCertificate)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerTlsCertificateOutput) ToVirtualGatewaySpecListenerTlsCertificateOutput() VirtualGatewaySpecListenerTlsCertificateOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsCertificateOutput) ToVirtualGatewaySpecListenerTlsCertificateOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsCertificateOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerTlsCertificate] {
	return pulumix.Output[VirtualGatewaySpecListenerTlsCertificate]{
		OutputState: o.OutputState,
	}
}

// An AWS Certificate Manager (ACM) certificate.
func (o VirtualGatewaySpecListenerTlsCertificateOutput) Acm() pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsCertificateAcm, VirtualGatewaySpecListenerTlsCertificateAcmOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListenerTlsCertificate](o, func(v VirtualGatewaySpecListenerTlsCertificate) *VirtualGatewaySpecListenerTlsCertificateAcm {
		return v.Acm
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsCertificateAcm, VirtualGatewaySpecListenerTlsCertificateAcmOutput]{OutputState: value.OutputState}
}

// Local file certificate.
func (o VirtualGatewaySpecListenerTlsCertificateOutput) File() pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsCertificateFile, VirtualGatewaySpecListenerTlsCertificateFileOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListenerTlsCertificate](o, func(v VirtualGatewaySpecListenerTlsCertificate) *VirtualGatewaySpecListenerTlsCertificateFile {
		return v.File
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsCertificateFile, VirtualGatewaySpecListenerTlsCertificateFileOutput]{OutputState: value.OutputState}
}

// A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
func (o VirtualGatewaySpecListenerTlsCertificateOutput) Sds() pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsCertificateSds, VirtualGatewaySpecListenerTlsCertificateSdsOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListenerTlsCertificate](o, func(v VirtualGatewaySpecListenerTlsCertificate) *VirtualGatewaySpecListenerTlsCertificateSds {
		return v.Sds
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsCertificateSds, VirtualGatewaySpecListenerTlsCertificateSdsOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecListenerTlsCertificateAcm struct {
	// ARN for the certificate.
	CertificateArn string `pulumi:"certificateArn"`
}

type VirtualGatewaySpecListenerTlsCertificateAcmArgs struct {
	// ARN for the certificate.
	CertificateArn pulumix.Input[string] `pulumi:"certificateArn"`
}

func (VirtualGatewaySpecListenerTlsCertificateAcmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsCertificateAcm)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerTlsCertificateAcmArgs) ToVirtualGatewaySpecListenerTlsCertificateAcmOutput() VirtualGatewaySpecListenerTlsCertificateAcmOutput {
	return i.ToVirtualGatewaySpecListenerTlsCertificateAcmOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerTlsCertificateAcmArgs) ToVirtualGatewaySpecListenerTlsCertificateAcmOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsCertificateAcmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerTlsCertificateAcmOutput)
}

func (i *VirtualGatewaySpecListenerTlsCertificateAcmArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerTlsCertificateAcmArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerTlsCertificateAcmOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerTlsCertificateAcmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsCertificateAcm)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerTlsCertificateAcmOutput) ToVirtualGatewaySpecListenerTlsCertificateAcmOutput() VirtualGatewaySpecListenerTlsCertificateAcmOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsCertificateAcmOutput) ToVirtualGatewaySpecListenerTlsCertificateAcmOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsCertificateAcmOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsCertificateAcmOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerTlsCertificateAcm] {
	return pulumix.Output[VirtualGatewaySpecListenerTlsCertificateAcm]{
		OutputState: o.OutputState,
	}
}

// ARN for the certificate.
func (o VirtualGatewaySpecListenerTlsCertificateAcmOutput) CertificateArn() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecListenerTlsCertificateAcm](o, func(v VirtualGatewaySpecListenerTlsCertificateAcm) string { return v.CertificateArn })
}

type VirtualGatewaySpecListenerTlsCertificateFile struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain string `pulumi:"certificateChain"`
	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	PrivateKey string `pulumi:"privateKey"`
}

type VirtualGatewaySpecListenerTlsCertificateFileArgs struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	PrivateKey pulumix.Input[string] `pulumi:"privateKey"`
}

func (VirtualGatewaySpecListenerTlsCertificateFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsCertificateFile)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerTlsCertificateFileArgs) ToVirtualGatewaySpecListenerTlsCertificateFileOutput() VirtualGatewaySpecListenerTlsCertificateFileOutput {
	return i.ToVirtualGatewaySpecListenerTlsCertificateFileOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerTlsCertificateFileArgs) ToVirtualGatewaySpecListenerTlsCertificateFileOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsCertificateFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerTlsCertificateFileOutput)
}

func (i *VirtualGatewaySpecListenerTlsCertificateFileArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerTlsCertificateFileArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerTlsCertificateFileOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerTlsCertificateFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsCertificateFile)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerTlsCertificateFileOutput) ToVirtualGatewaySpecListenerTlsCertificateFileOutput() VirtualGatewaySpecListenerTlsCertificateFileOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsCertificateFileOutput) ToVirtualGatewaySpecListenerTlsCertificateFileOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsCertificateFileOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsCertificateFileOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerTlsCertificateFile] {
	return pulumix.Output[VirtualGatewaySpecListenerTlsCertificateFile]{
		OutputState: o.OutputState,
	}
}

// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
func (o VirtualGatewaySpecListenerTlsCertificateFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecListenerTlsCertificateFile](o, func(v VirtualGatewaySpecListenerTlsCertificateFile) string { return v.CertificateChain })
}

// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
func (o VirtualGatewaySpecListenerTlsCertificateFileOutput) PrivateKey() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecListenerTlsCertificateFile](o, func(v VirtualGatewaySpecListenerTlsCertificateFile) string { return v.PrivateKey })
}

type VirtualGatewaySpecListenerTlsCertificateSds struct {
	// Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName string `pulumi:"secretName"`
}

type VirtualGatewaySpecListenerTlsCertificateSdsArgs struct {
	// Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (VirtualGatewaySpecListenerTlsCertificateSdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsCertificateSds)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerTlsCertificateSdsArgs) ToVirtualGatewaySpecListenerTlsCertificateSdsOutput() VirtualGatewaySpecListenerTlsCertificateSdsOutput {
	return i.ToVirtualGatewaySpecListenerTlsCertificateSdsOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerTlsCertificateSdsArgs) ToVirtualGatewaySpecListenerTlsCertificateSdsOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsCertificateSdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerTlsCertificateSdsOutput)
}

func (i *VirtualGatewaySpecListenerTlsCertificateSdsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerTlsCertificateSdsArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerTlsCertificateSdsOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerTlsCertificateSdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsCertificateSds)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerTlsCertificateSdsOutput) ToVirtualGatewaySpecListenerTlsCertificateSdsOutput() VirtualGatewaySpecListenerTlsCertificateSdsOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsCertificateSdsOutput) ToVirtualGatewaySpecListenerTlsCertificateSdsOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsCertificateSdsOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsCertificateSdsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerTlsCertificateSds] {
	return pulumix.Output[VirtualGatewaySpecListenerTlsCertificateSds]{
		OutputState: o.OutputState,
	}
}

// Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
func (o VirtualGatewaySpecListenerTlsCertificateSdsOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecListenerTlsCertificateSds](o, func(v VirtualGatewaySpecListenerTlsCertificateSds) string { return v.SecretName })
}

type VirtualGatewaySpecListenerTlsValidation struct {
	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	SubjectAlternativeNames *VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNames `pulumi:"subjectAlternativeNames"`
	// TLS validation context trust.
	Trust VirtualGatewaySpecListenerTlsValidationTrust `pulumi:"trust"`
}

type VirtualGatewaySpecListenerTlsValidationArgs struct {
	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	SubjectAlternativeNames pulumix.Input[*VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesArgs] `pulumi:"subjectAlternativeNames"`
	// TLS validation context trust.
	Trust pulumix.Input[*VirtualGatewaySpecListenerTlsValidationTrustArgs] `pulumi:"trust"`
}

func (VirtualGatewaySpecListenerTlsValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsValidation)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerTlsValidationArgs) ToVirtualGatewaySpecListenerTlsValidationOutput() VirtualGatewaySpecListenerTlsValidationOutput {
	return i.ToVirtualGatewaySpecListenerTlsValidationOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerTlsValidationArgs) ToVirtualGatewaySpecListenerTlsValidationOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerTlsValidationOutput)
}

func (i *VirtualGatewaySpecListenerTlsValidationArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerTlsValidationArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerTlsValidationOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerTlsValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsValidation)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerTlsValidationOutput) ToVirtualGatewaySpecListenerTlsValidationOutput() VirtualGatewaySpecListenerTlsValidationOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsValidationOutput) ToVirtualGatewaySpecListenerTlsValidationOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsValidationOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsValidationOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerTlsValidation] {
	return pulumix.Output[VirtualGatewaySpecListenerTlsValidation]{
		OutputState: o.OutputState,
	}
}

// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
func (o VirtualGatewaySpecListenerTlsValidationOutput) SubjectAlternativeNames() pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNames, VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListenerTlsValidation](o, func(v VirtualGatewaySpecListenerTlsValidation) *VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNames {
		return v.SubjectAlternativeNames
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNames, VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput]{OutputState: value.OutputState}
}

// TLS validation context trust.
func (o VirtualGatewaySpecListenerTlsValidationOutput) Trust() pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsValidationTrust, VirtualGatewaySpecListenerTlsValidationTrustOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListenerTlsValidation](o, func(v VirtualGatewaySpecListenerTlsValidation) VirtualGatewaySpecListenerTlsValidationTrust {
		return v.Trust
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsValidationTrust, VirtualGatewaySpecListenerTlsValidationTrustOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNames struct {
	// Criteria for determining a SAN's match.
	Match VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatch `pulumi:"match"`
}

type VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesArgs struct {
	// Criteria for determining a SAN's match.
	Match pulumix.Input[*VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchArgs] `pulumi:"match"`
}

func (VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNames)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesArgs) ToVirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput() VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput {
	return i.ToVirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesArgs) ToVirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput)
}

func (i *VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNames)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput) ToVirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput() VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput) ToVirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNames] {
	return pulumix.Output[VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNames]{
		OutputState: o.OutputState,
	}
}

// Criteria for determining a SAN's match.
func (o VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput) Match() pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatch, VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNames](o, func(v VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNames) VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatch {
		return v.Match
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatch, VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatch struct {
	// Values sent must match the specified values exactly.
	Exacts []string `pulumi:"exacts"`
}

type VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchArgs struct {
	// Values sent must match the specified values exactly.
	Exacts pulumix.Input[[]string] `pulumi:"exacts"`
}

func (VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatch)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchArgs) ToVirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput() VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput {
	return i.ToVirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchArgs) ToVirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput)
}

func (i *VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatch)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput) ToVirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput() VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput) ToVirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatch] {
	return pulumix.Output[VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatch]{
		OutputState: o.OutputState,
	}
}

// Values sent must match the specified values exactly.
func (o VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput) Exacts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatch](o, func(v VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatch) []string { return v.Exacts })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type VirtualGatewaySpecListenerTlsValidationTrust struct {
	// TLS validation context trust for a local file certificate.
	File *VirtualGatewaySpecListenerTlsValidationTrustFile `pulumi:"file"`
	// TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds *VirtualGatewaySpecListenerTlsValidationTrustSds `pulumi:"sds"`
}

type VirtualGatewaySpecListenerTlsValidationTrustArgs struct {
	// TLS validation context trust for a local file certificate.
	File pulumix.Input[*VirtualGatewaySpecListenerTlsValidationTrustFileArgs] `pulumi:"file"`
	// TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds pulumix.Input[*VirtualGatewaySpecListenerTlsValidationTrustSdsArgs] `pulumi:"sds"`
}

func (VirtualGatewaySpecListenerTlsValidationTrustArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsValidationTrust)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerTlsValidationTrustArgs) ToVirtualGatewaySpecListenerTlsValidationTrustOutput() VirtualGatewaySpecListenerTlsValidationTrustOutput {
	return i.ToVirtualGatewaySpecListenerTlsValidationTrustOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerTlsValidationTrustArgs) ToVirtualGatewaySpecListenerTlsValidationTrustOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsValidationTrustOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerTlsValidationTrustOutput)
}

func (i *VirtualGatewaySpecListenerTlsValidationTrustArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerTlsValidationTrustArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerTlsValidationTrustOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerTlsValidationTrustOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsValidationTrust)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerTlsValidationTrustOutput) ToVirtualGatewaySpecListenerTlsValidationTrustOutput() VirtualGatewaySpecListenerTlsValidationTrustOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsValidationTrustOutput) ToVirtualGatewaySpecListenerTlsValidationTrustOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsValidationTrustOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsValidationTrustOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerTlsValidationTrust] {
	return pulumix.Output[VirtualGatewaySpecListenerTlsValidationTrust]{
		OutputState: o.OutputState,
	}
}

// TLS validation context trust for a local file certificate.
func (o VirtualGatewaySpecListenerTlsValidationTrustOutput) File() pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsValidationTrustFile, VirtualGatewaySpecListenerTlsValidationTrustFileOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListenerTlsValidationTrust](o, func(v VirtualGatewaySpecListenerTlsValidationTrust) *VirtualGatewaySpecListenerTlsValidationTrustFile {
		return v.File
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsValidationTrustFile, VirtualGatewaySpecListenerTlsValidationTrustFileOutput]{OutputState: value.OutputState}
}

// TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
func (o VirtualGatewaySpecListenerTlsValidationTrustOutput) Sds() pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsValidationTrustSds, VirtualGatewaySpecListenerTlsValidationTrustSdsOutput] {
	value := pulumix.Apply[VirtualGatewaySpecListenerTlsValidationTrust](o, func(v VirtualGatewaySpecListenerTlsValidationTrust) *VirtualGatewaySpecListenerTlsValidationTrustSds {
		return v.Sds
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecListenerTlsValidationTrustSds, VirtualGatewaySpecListenerTlsValidationTrustSdsOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecListenerTlsValidationTrustFile struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain string `pulumi:"certificateChain"`
}

type VirtualGatewaySpecListenerTlsValidationTrustFileArgs struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
}

func (VirtualGatewaySpecListenerTlsValidationTrustFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsValidationTrustFile)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerTlsValidationTrustFileArgs) ToVirtualGatewaySpecListenerTlsValidationTrustFileOutput() VirtualGatewaySpecListenerTlsValidationTrustFileOutput {
	return i.ToVirtualGatewaySpecListenerTlsValidationTrustFileOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerTlsValidationTrustFileArgs) ToVirtualGatewaySpecListenerTlsValidationTrustFileOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsValidationTrustFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerTlsValidationTrustFileOutput)
}

func (i *VirtualGatewaySpecListenerTlsValidationTrustFileArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerTlsValidationTrustFileArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerTlsValidationTrustFileOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerTlsValidationTrustFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsValidationTrustFile)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerTlsValidationTrustFileOutput) ToVirtualGatewaySpecListenerTlsValidationTrustFileOutput() VirtualGatewaySpecListenerTlsValidationTrustFileOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsValidationTrustFileOutput) ToVirtualGatewaySpecListenerTlsValidationTrustFileOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsValidationTrustFileOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsValidationTrustFileOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerTlsValidationTrustFile] {
	return pulumix.Output[VirtualGatewaySpecListenerTlsValidationTrustFile]{
		OutputState: o.OutputState,
	}
}

// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
func (o VirtualGatewaySpecListenerTlsValidationTrustFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecListenerTlsValidationTrustFile](o, func(v VirtualGatewaySpecListenerTlsValidationTrustFile) string { return v.CertificateChain })
}

type VirtualGatewaySpecListenerTlsValidationTrustSds struct {
	// Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName string `pulumi:"secretName"`
}

type VirtualGatewaySpecListenerTlsValidationTrustSdsArgs struct {
	// Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (VirtualGatewaySpecListenerTlsValidationTrustSdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsValidationTrustSds)(nil)).Elem()
}

func (i VirtualGatewaySpecListenerTlsValidationTrustSdsArgs) ToVirtualGatewaySpecListenerTlsValidationTrustSdsOutput() VirtualGatewaySpecListenerTlsValidationTrustSdsOutput {
	return i.ToVirtualGatewaySpecListenerTlsValidationTrustSdsOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecListenerTlsValidationTrustSdsArgs) ToVirtualGatewaySpecListenerTlsValidationTrustSdsOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsValidationTrustSdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecListenerTlsValidationTrustSdsOutput)
}

func (i *VirtualGatewaySpecListenerTlsValidationTrustSdsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecListenerTlsValidationTrustSdsArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecListenerTlsValidationTrustSdsOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecListenerTlsValidationTrustSdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecListenerTlsValidationTrustSds)(nil)).Elem()
}

func (o VirtualGatewaySpecListenerTlsValidationTrustSdsOutput) ToVirtualGatewaySpecListenerTlsValidationTrustSdsOutput() VirtualGatewaySpecListenerTlsValidationTrustSdsOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsValidationTrustSdsOutput) ToVirtualGatewaySpecListenerTlsValidationTrustSdsOutputWithContext(ctx context.Context) VirtualGatewaySpecListenerTlsValidationTrustSdsOutput {
	return o
}

func (o VirtualGatewaySpecListenerTlsValidationTrustSdsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecListenerTlsValidationTrustSds] {
	return pulumix.Output[VirtualGatewaySpecListenerTlsValidationTrustSds]{
		OutputState: o.OutputState,
	}
}

// Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
func (o VirtualGatewaySpecListenerTlsValidationTrustSdsOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecListenerTlsValidationTrustSds](o, func(v VirtualGatewaySpecListenerTlsValidationTrustSds) string { return v.SecretName })
}

type VirtualGatewaySpecLogging struct {
	// Access log configuration for a virtual gateway.
	AccessLog *VirtualGatewaySpecLoggingAccessLog `pulumi:"accessLog"`
}

type VirtualGatewaySpecLoggingArgs struct {
	// Access log configuration for a virtual gateway.
	AccessLog pulumix.Input[*VirtualGatewaySpecLoggingAccessLogArgs] `pulumi:"accessLog"`
}

func (VirtualGatewaySpecLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecLogging)(nil)).Elem()
}

func (i VirtualGatewaySpecLoggingArgs) ToVirtualGatewaySpecLoggingOutput() VirtualGatewaySpecLoggingOutput {
	return i.ToVirtualGatewaySpecLoggingOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecLoggingArgs) ToVirtualGatewaySpecLoggingOutputWithContext(ctx context.Context) VirtualGatewaySpecLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecLoggingOutput)
}

func (i *VirtualGatewaySpecLoggingArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecLoggingArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecLoggingOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecLogging)(nil)).Elem()
}

func (o VirtualGatewaySpecLoggingOutput) ToVirtualGatewaySpecLoggingOutput() VirtualGatewaySpecLoggingOutput {
	return o
}

func (o VirtualGatewaySpecLoggingOutput) ToVirtualGatewaySpecLoggingOutputWithContext(ctx context.Context) VirtualGatewaySpecLoggingOutput {
	return o
}

func (o VirtualGatewaySpecLoggingOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecLogging] {
	return pulumix.Output[VirtualGatewaySpecLogging]{
		OutputState: o.OutputState,
	}
}

// Access log configuration for a virtual gateway.
func (o VirtualGatewaySpecLoggingOutput) AccessLog() pulumix.GPtrOutput[VirtualGatewaySpecLoggingAccessLog, VirtualGatewaySpecLoggingAccessLogOutput] {
	value := pulumix.Apply[VirtualGatewaySpecLogging](o, func(v VirtualGatewaySpecLogging) *VirtualGatewaySpecLoggingAccessLog { return v.AccessLog })
	return pulumix.GPtrOutput[VirtualGatewaySpecLoggingAccessLog, VirtualGatewaySpecLoggingAccessLogOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecLoggingAccessLog struct {
	// File object to send virtual gateway access logs to.
	File *VirtualGatewaySpecLoggingAccessLogFile `pulumi:"file"`
}

type VirtualGatewaySpecLoggingAccessLogArgs struct {
	// File object to send virtual gateway access logs to.
	File pulumix.Input[*VirtualGatewaySpecLoggingAccessLogFileArgs] `pulumi:"file"`
}

func (VirtualGatewaySpecLoggingAccessLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecLoggingAccessLog)(nil)).Elem()
}

func (i VirtualGatewaySpecLoggingAccessLogArgs) ToVirtualGatewaySpecLoggingAccessLogOutput() VirtualGatewaySpecLoggingAccessLogOutput {
	return i.ToVirtualGatewaySpecLoggingAccessLogOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecLoggingAccessLogArgs) ToVirtualGatewaySpecLoggingAccessLogOutputWithContext(ctx context.Context) VirtualGatewaySpecLoggingAccessLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecLoggingAccessLogOutput)
}

func (i *VirtualGatewaySpecLoggingAccessLogArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecLoggingAccessLogArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecLoggingAccessLogOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecLoggingAccessLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecLoggingAccessLog)(nil)).Elem()
}

func (o VirtualGatewaySpecLoggingAccessLogOutput) ToVirtualGatewaySpecLoggingAccessLogOutput() VirtualGatewaySpecLoggingAccessLogOutput {
	return o
}

func (o VirtualGatewaySpecLoggingAccessLogOutput) ToVirtualGatewaySpecLoggingAccessLogOutputWithContext(ctx context.Context) VirtualGatewaySpecLoggingAccessLogOutput {
	return o
}

func (o VirtualGatewaySpecLoggingAccessLogOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecLoggingAccessLog] {
	return pulumix.Output[VirtualGatewaySpecLoggingAccessLog]{
		OutputState: o.OutputState,
	}
}

// File object to send virtual gateway access logs to.
func (o VirtualGatewaySpecLoggingAccessLogOutput) File() pulumix.GPtrOutput[VirtualGatewaySpecLoggingAccessLogFile, VirtualGatewaySpecLoggingAccessLogFileOutput] {
	value := pulumix.Apply[VirtualGatewaySpecLoggingAccessLog](o, func(v VirtualGatewaySpecLoggingAccessLog) *VirtualGatewaySpecLoggingAccessLogFile { return v.File })
	return pulumix.GPtrOutput[VirtualGatewaySpecLoggingAccessLogFile, VirtualGatewaySpecLoggingAccessLogFileOutput]{OutputState: value.OutputState}
}

type VirtualGatewaySpecLoggingAccessLogFile struct {
	// The specified format for the logs.
	Format *VirtualGatewaySpecLoggingAccessLogFileFormat `pulumi:"format"`
	// File path to write access logs to. You can use `/dev/stdout` to send access logs to standard out. Must be between 1 and 255 characters in length.
	Path string `pulumi:"path"`
}

type VirtualGatewaySpecLoggingAccessLogFileArgs struct {
	// The specified format for the logs.
	Format pulumix.Input[*VirtualGatewaySpecLoggingAccessLogFileFormatArgs] `pulumi:"format"`
	// File path to write access logs to. You can use `/dev/stdout` to send access logs to standard out. Must be between 1 and 255 characters in length.
	Path pulumix.Input[string] `pulumi:"path"`
}

func (VirtualGatewaySpecLoggingAccessLogFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecLoggingAccessLogFile)(nil)).Elem()
}

func (i VirtualGatewaySpecLoggingAccessLogFileArgs) ToVirtualGatewaySpecLoggingAccessLogFileOutput() VirtualGatewaySpecLoggingAccessLogFileOutput {
	return i.ToVirtualGatewaySpecLoggingAccessLogFileOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecLoggingAccessLogFileArgs) ToVirtualGatewaySpecLoggingAccessLogFileOutputWithContext(ctx context.Context) VirtualGatewaySpecLoggingAccessLogFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecLoggingAccessLogFileOutput)
}

func (i *VirtualGatewaySpecLoggingAccessLogFileArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecLoggingAccessLogFileArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecLoggingAccessLogFileOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecLoggingAccessLogFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecLoggingAccessLogFile)(nil)).Elem()
}

func (o VirtualGatewaySpecLoggingAccessLogFileOutput) ToVirtualGatewaySpecLoggingAccessLogFileOutput() VirtualGatewaySpecLoggingAccessLogFileOutput {
	return o
}

func (o VirtualGatewaySpecLoggingAccessLogFileOutput) ToVirtualGatewaySpecLoggingAccessLogFileOutputWithContext(ctx context.Context) VirtualGatewaySpecLoggingAccessLogFileOutput {
	return o
}

func (o VirtualGatewaySpecLoggingAccessLogFileOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecLoggingAccessLogFile] {
	return pulumix.Output[VirtualGatewaySpecLoggingAccessLogFile]{
		OutputState: o.OutputState,
	}
}

// The specified format for the logs.
func (o VirtualGatewaySpecLoggingAccessLogFileOutput) Format() pulumix.GPtrOutput[VirtualGatewaySpecLoggingAccessLogFileFormat, VirtualGatewaySpecLoggingAccessLogFileFormatOutput] {
	value := pulumix.Apply[VirtualGatewaySpecLoggingAccessLogFile](o, func(v VirtualGatewaySpecLoggingAccessLogFile) *VirtualGatewaySpecLoggingAccessLogFileFormat {
		return v.Format
	})
	return pulumix.GPtrOutput[VirtualGatewaySpecLoggingAccessLogFileFormat, VirtualGatewaySpecLoggingAccessLogFileFormatOutput]{OutputState: value.OutputState}
}

// File path to write access logs to. You can use `/dev/stdout` to send access logs to standard out. Must be between 1 and 255 characters in length.
func (o VirtualGatewaySpecLoggingAccessLogFileOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecLoggingAccessLogFile](o, func(v VirtualGatewaySpecLoggingAccessLogFile) string { return v.Path })
}

type VirtualGatewaySpecLoggingAccessLogFileFormat struct {
	// The logging format for JSON.
	Jsons []VirtualGatewaySpecLoggingAccessLogFileFormatJson `pulumi:"jsons"`
	// The logging format for text. Must be between 1 and 1000 characters in length.
	Text *string `pulumi:"text"`
}

type VirtualGatewaySpecLoggingAccessLogFileFormatArgs struct {
	// The logging format for JSON.
	Jsons pulumix.Input[[]*VirtualGatewaySpecLoggingAccessLogFileFormatJsonArgs] `pulumi:"jsons"`
	// The logging format for text. Must be between 1 and 1000 characters in length.
	Text pulumix.Input[*string] `pulumi:"text"`
}

func (VirtualGatewaySpecLoggingAccessLogFileFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecLoggingAccessLogFileFormat)(nil)).Elem()
}

func (i VirtualGatewaySpecLoggingAccessLogFileFormatArgs) ToVirtualGatewaySpecLoggingAccessLogFileFormatOutput() VirtualGatewaySpecLoggingAccessLogFileFormatOutput {
	return i.ToVirtualGatewaySpecLoggingAccessLogFileFormatOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecLoggingAccessLogFileFormatArgs) ToVirtualGatewaySpecLoggingAccessLogFileFormatOutputWithContext(ctx context.Context) VirtualGatewaySpecLoggingAccessLogFileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecLoggingAccessLogFileFormatOutput)
}

func (i *VirtualGatewaySpecLoggingAccessLogFileFormatArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecLoggingAccessLogFileFormatArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecLoggingAccessLogFileFormatOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecLoggingAccessLogFileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecLoggingAccessLogFileFormat)(nil)).Elem()
}

func (o VirtualGatewaySpecLoggingAccessLogFileFormatOutput) ToVirtualGatewaySpecLoggingAccessLogFileFormatOutput() VirtualGatewaySpecLoggingAccessLogFileFormatOutput {
	return o
}

func (o VirtualGatewaySpecLoggingAccessLogFileFormatOutput) ToVirtualGatewaySpecLoggingAccessLogFileFormatOutputWithContext(ctx context.Context) VirtualGatewaySpecLoggingAccessLogFileFormatOutput {
	return o
}

func (o VirtualGatewaySpecLoggingAccessLogFileFormatOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecLoggingAccessLogFileFormat] {
	return pulumix.Output[VirtualGatewaySpecLoggingAccessLogFileFormat]{
		OutputState: o.OutputState,
	}
}

// The logging format for JSON.
func (o VirtualGatewaySpecLoggingAccessLogFileFormatOutput) Jsons() pulumix.GArrayOutput[VirtualGatewaySpecLoggingAccessLogFileFormatJson, VirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput] {
	value := pulumix.Apply[VirtualGatewaySpecLoggingAccessLogFileFormat](o, func(v VirtualGatewaySpecLoggingAccessLogFileFormat) []VirtualGatewaySpecLoggingAccessLogFileFormatJson {
		return v.Jsons
	})
	return pulumix.GArrayOutput[VirtualGatewaySpecLoggingAccessLogFileFormatJson, VirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput]{OutputState: value.OutputState}
}

// The logging format for text. Must be between 1 and 1000 characters in length.
func (o VirtualGatewaySpecLoggingAccessLogFileFormatOutput) Text() pulumix.Output[*string] {
	return pulumix.Apply[VirtualGatewaySpecLoggingAccessLogFileFormat](o, func(v VirtualGatewaySpecLoggingAccessLogFileFormat) *string { return v.Text })
}

type VirtualGatewaySpecLoggingAccessLogFileFormatJson struct {
	// The specified key for the JSON. Must be between 1 and 100 characters in length.
	Key string `pulumi:"key"`
	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value string `pulumi:"value"`
}

type VirtualGatewaySpecLoggingAccessLogFileFormatJsonArgs struct {
	// The specified key for the JSON. Must be between 1 and 100 characters in length.
	Key pulumix.Input[string] `pulumi:"key"`
	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (VirtualGatewaySpecLoggingAccessLogFileFormatJsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecLoggingAccessLogFileFormatJson)(nil)).Elem()
}

func (i VirtualGatewaySpecLoggingAccessLogFileFormatJsonArgs) ToVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput() VirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput {
	return i.ToVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutputWithContext(context.Background())
}

func (i VirtualGatewaySpecLoggingAccessLogFileFormatJsonArgs) ToVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutputWithContext(ctx context.Context) VirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput)
}

func (i *VirtualGatewaySpecLoggingAccessLogFileFormatJsonArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualGatewaySpecLoggingAccessLogFileFormatJsonArgs] {
	return pulumix.Val(i)
}

type VirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput struct{ *pulumi.OutputState }

func (VirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGatewaySpecLoggingAccessLogFileFormatJson)(nil)).Elem()
}

func (o VirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput) ToVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput() VirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput {
	return o
}

func (o VirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput) ToVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutputWithContext(ctx context.Context) VirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput {
	return o
}

func (o VirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGatewaySpecLoggingAccessLogFileFormatJson] {
	return pulumix.Output[VirtualGatewaySpecLoggingAccessLogFileFormatJson]{
		OutputState: o.OutputState,
	}
}

// The specified key for the JSON. Must be between 1 and 100 characters in length.
func (o VirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecLoggingAccessLogFileFormatJson](o, func(v VirtualGatewaySpecLoggingAccessLogFileFormatJson) string { return v.Key })
}

// The specified value for the JSON. Must be between 1 and 100 characters in length.
func (o VirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[VirtualGatewaySpecLoggingAccessLogFileFormatJson](o, func(v VirtualGatewaySpecLoggingAccessLogFileFormatJson) string { return v.Value })
}

type VirtualNodeSpec struct {
	// Defaults for backends.
	BackendDefaults *VirtualNodeSpecBackendDefaults `pulumi:"backendDefaults"`
	// Backends to which the virtual node is expected to send outbound traffic.
	Backends []VirtualNodeSpecBackend `pulumi:"backends"`
	// Listeners from which the virtual node is expected to receive inbound traffic.
	Listeners []VirtualNodeSpecListener `pulumi:"listeners"`
	// Inbound and outbound access logging information for the virtual node.
	Logging *VirtualNodeSpecLogging `pulumi:"logging"`
	// Service discovery information for the virtual node.
	ServiceDiscovery *VirtualNodeSpecServiceDiscovery `pulumi:"serviceDiscovery"`
}

type VirtualNodeSpecArgs struct {
	// Defaults for backends.
	BackendDefaults pulumix.Input[*VirtualNodeSpecBackendDefaultsArgs] `pulumi:"backendDefaults"`
	// Backends to which the virtual node is expected to send outbound traffic.
	Backends pulumix.Input[[]*VirtualNodeSpecBackendArgs] `pulumi:"backends"`
	// Listeners from which the virtual node is expected to receive inbound traffic.
	Listeners pulumix.Input[[]*VirtualNodeSpecListenerArgs] `pulumi:"listeners"`
	// Inbound and outbound access logging information for the virtual node.
	Logging pulumix.Input[*VirtualNodeSpecLoggingArgs] `pulumi:"logging"`
	// Service discovery information for the virtual node.
	ServiceDiscovery pulumix.Input[*VirtualNodeSpecServiceDiscoveryArgs] `pulumi:"serviceDiscovery"`
}

func (VirtualNodeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpec)(nil)).Elem()
}

func (i VirtualNodeSpecArgs) ToVirtualNodeSpecOutput() VirtualNodeSpecOutput {
	return i.ToVirtualNodeSpecOutputWithContext(context.Background())
}

func (i VirtualNodeSpecArgs) ToVirtualNodeSpecOutputWithContext(ctx context.Context) VirtualNodeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecOutput)
}

func (i *VirtualNodeSpecArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpec)(nil)).Elem()
}

func (o VirtualNodeSpecOutput) ToVirtualNodeSpecOutput() VirtualNodeSpecOutput {
	return o
}

func (o VirtualNodeSpecOutput) ToVirtualNodeSpecOutputWithContext(ctx context.Context) VirtualNodeSpecOutput {
	return o
}

func (o VirtualNodeSpecOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpec] {
	return pulumix.Output[VirtualNodeSpec]{
		OutputState: o.OutputState,
	}
}

// Defaults for backends.
func (o VirtualNodeSpecOutput) BackendDefaults() pulumix.GPtrOutput[VirtualNodeSpecBackendDefaults, VirtualNodeSpecBackendDefaultsOutput] {
	value := pulumix.Apply[VirtualNodeSpec](o, func(v VirtualNodeSpec) *VirtualNodeSpecBackendDefaults { return v.BackendDefaults })
	return pulumix.GPtrOutput[VirtualNodeSpecBackendDefaults, VirtualNodeSpecBackendDefaultsOutput]{OutputState: value.OutputState}
}

// Backends to which the virtual node is expected to send outbound traffic.
func (o VirtualNodeSpecOutput) Backends() pulumix.GArrayOutput[VirtualNodeSpecBackend, VirtualNodeSpecBackendOutput] {
	value := pulumix.Apply[VirtualNodeSpec](o, func(v VirtualNodeSpec) []VirtualNodeSpecBackend { return v.Backends })
	return pulumix.GArrayOutput[VirtualNodeSpecBackend, VirtualNodeSpecBackendOutput]{OutputState: value.OutputState}
}

// Listeners from which the virtual node is expected to receive inbound traffic.
func (o VirtualNodeSpecOutput) Listeners() pulumix.GArrayOutput[VirtualNodeSpecListener, VirtualNodeSpecListenerOutput] {
	value := pulumix.Apply[VirtualNodeSpec](o, func(v VirtualNodeSpec) []VirtualNodeSpecListener { return v.Listeners })
	return pulumix.GArrayOutput[VirtualNodeSpecListener, VirtualNodeSpecListenerOutput]{OutputState: value.OutputState}
}

// Inbound and outbound access logging information for the virtual node.
func (o VirtualNodeSpecOutput) Logging() pulumix.GPtrOutput[VirtualNodeSpecLogging, VirtualNodeSpecLoggingOutput] {
	value := pulumix.Apply[VirtualNodeSpec](o, func(v VirtualNodeSpec) *VirtualNodeSpecLogging { return v.Logging })
	return pulumix.GPtrOutput[VirtualNodeSpecLogging, VirtualNodeSpecLoggingOutput]{OutputState: value.OutputState}
}

// Service discovery information for the virtual node.
func (o VirtualNodeSpecOutput) ServiceDiscovery() pulumix.GPtrOutput[VirtualNodeSpecServiceDiscovery, VirtualNodeSpecServiceDiscoveryOutput] {
	value := pulumix.Apply[VirtualNodeSpec](o, func(v VirtualNodeSpec) *VirtualNodeSpecServiceDiscovery { return v.ServiceDiscovery })
	return pulumix.GPtrOutput[VirtualNodeSpecServiceDiscovery, VirtualNodeSpecServiceDiscoveryOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackend struct {
	// Virtual service to use as a backend for a virtual node.
	VirtualService VirtualNodeSpecBackendVirtualService `pulumi:"virtualService"`
}

type VirtualNodeSpecBackendArgs struct {
	// Virtual service to use as a backend for a virtual node.
	VirtualService pulumix.Input[*VirtualNodeSpecBackendVirtualServiceArgs] `pulumi:"virtualService"`
}

func (VirtualNodeSpecBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackend)(nil)).Elem()
}

func (i VirtualNodeSpecBackendArgs) ToVirtualNodeSpecBackendOutput() VirtualNodeSpecBackendOutput {
	return i.ToVirtualNodeSpecBackendOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendArgs) ToVirtualNodeSpecBackendOutputWithContext(ctx context.Context) VirtualNodeSpecBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendOutput)
}

func (i *VirtualNodeSpecBackendArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackend)(nil)).Elem()
}

func (o VirtualNodeSpecBackendOutput) ToVirtualNodeSpecBackendOutput() VirtualNodeSpecBackendOutput {
	return o
}

func (o VirtualNodeSpecBackendOutput) ToVirtualNodeSpecBackendOutputWithContext(ctx context.Context) VirtualNodeSpecBackendOutput {
	return o
}

func (o VirtualNodeSpecBackendOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackend] {
	return pulumix.Output[VirtualNodeSpecBackend]{
		OutputState: o.OutputState,
	}
}

// Virtual service to use as a backend for a virtual node.
func (o VirtualNodeSpecBackendOutput) VirtualService() pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualService, VirtualNodeSpecBackendVirtualServiceOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackend](o, func(v VirtualNodeSpecBackend) VirtualNodeSpecBackendVirtualService { return v.VirtualService })
	return pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualService, VirtualNodeSpecBackendVirtualServiceOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendDefaults struct {
	// Default client policy for virtual service backends. See above for details.
	ClientPolicy *VirtualNodeSpecBackendDefaultsClientPolicy `pulumi:"clientPolicy"`
}

type VirtualNodeSpecBackendDefaultsArgs struct {
	// Default client policy for virtual service backends. See above for details.
	ClientPolicy pulumix.Input[*VirtualNodeSpecBackendDefaultsClientPolicyArgs] `pulumi:"clientPolicy"`
}

func (VirtualNodeSpecBackendDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaults)(nil)).Elem()
}

func (i VirtualNodeSpecBackendDefaultsArgs) ToVirtualNodeSpecBackendDefaultsOutput() VirtualNodeSpecBackendDefaultsOutput {
	return i.ToVirtualNodeSpecBackendDefaultsOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendDefaultsArgs) ToVirtualNodeSpecBackendDefaultsOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendDefaultsOutput)
}

func (i *VirtualNodeSpecBackendDefaultsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendDefaultsArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendDefaultsOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaults)(nil)).Elem()
}

func (o VirtualNodeSpecBackendDefaultsOutput) ToVirtualNodeSpecBackendDefaultsOutput() VirtualNodeSpecBackendDefaultsOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsOutput) ToVirtualNodeSpecBackendDefaultsOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendDefaults] {
	return pulumix.Output[VirtualNodeSpecBackendDefaults]{
		OutputState: o.OutputState,
	}
}

// Default client policy for virtual service backends. See above for details.
func (o VirtualNodeSpecBackendDefaultsOutput) ClientPolicy() pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicy, VirtualNodeSpecBackendDefaultsClientPolicyOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendDefaults](o, func(v VirtualNodeSpecBackendDefaults) *VirtualNodeSpecBackendDefaultsClientPolicy {
		return v.ClientPolicy
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicy, VirtualNodeSpecBackendDefaultsClientPolicyOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendDefaultsClientPolicy struct {
	// Transport Layer Security (TLS) client policy.
	Tls *VirtualNodeSpecBackendDefaultsClientPolicyTls `pulumi:"tls"`
}

type VirtualNodeSpecBackendDefaultsClientPolicyArgs struct {
	// Transport Layer Security (TLS) client policy.
	Tls pulumix.Input[*VirtualNodeSpecBackendDefaultsClientPolicyTlsArgs] `pulumi:"tls"`
}

func (VirtualNodeSpecBackendDefaultsClientPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicy)(nil)).Elem()
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyOutput() VirtualNodeSpecBackendDefaultsClientPolicyOutput {
	return i.ToVirtualNodeSpecBackendDefaultsClientPolicyOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendDefaultsClientPolicyOutput)
}

func (i *VirtualNodeSpecBackendDefaultsClientPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendDefaultsClientPolicyArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendDefaultsClientPolicyOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendDefaultsClientPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicy)(nil)).Elem()
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyOutput() VirtualNodeSpecBackendDefaultsClientPolicyOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicy] {
	return pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicy]{
		OutputState: o.OutputState,
	}
}

// Transport Layer Security (TLS) client policy.
func (o VirtualNodeSpecBackendDefaultsClientPolicyOutput) Tls() pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTls, VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicy](o, func(v VirtualNodeSpecBackendDefaultsClientPolicy) *VirtualNodeSpecBackendDefaultsClientPolicyTls {
		return v.Tls
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTls, VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendDefaultsClientPolicyTls struct {
	// Listener's TLS certificate.
	Certificate *VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate `pulumi:"certificate"`
	// Whether the policy is enforced. Default is `true`.
	Enforce *bool `pulumi:"enforce"`
	// One or more ports that the policy is enforced for.
	Ports []int `pulumi:"ports"`
	// Listener's Transport Layer Security (TLS) validation context.
	Validation VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation `pulumi:"validation"`
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsArgs struct {
	// Listener's TLS certificate.
	Certificate pulumix.Input[*VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateArgs] `pulumi:"certificate"`
	// Whether the policy is enforced. Default is `true`.
	Enforce pulumix.Input[*bool] `pulumi:"enforce"`
	// One or more ports that the policy is enforced for.
	Ports pulumix.Input[[]int] `pulumi:"ports"`
	// Listener's Transport Layer Security (TLS) validation context.
	Validation pulumix.Input[*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationArgs] `pulumi:"validation"`
}

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTls)(nil)).Elem()
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput {
	return i.ToVirtualNodeSpecBackendDefaultsClientPolicyTlsOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput)
}

func (i *VirtualNodeSpecBackendDefaultsClientPolicyTlsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendDefaultsClientPolicyTlsArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTls)(nil)).Elem()
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTls] {
	return pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTls]{
		OutputState: o.OutputState,
	}
}

// Listener's TLS certificate.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput) Certificate() pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate, VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTls](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTls) *VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate {
		return v.Certificate
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate, VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput]{OutputState: value.OutputState}
}

// Whether the policy is enforced. Default is `true`.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput) Enforce() pulumix.Output[*bool] {
	return pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTls](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTls) *bool { return v.Enforce })
}

// One or more ports that the policy is enforced for.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput) Ports() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTls](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTls) []int { return v.Ports })
	return pulumix.ArrayOutput[int]{OutputState: value.OutputState}
}

// Listener's Transport Layer Security (TLS) validation context.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput) Validation() pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation, VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTls](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTls) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation {
		return v.Validation
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation, VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate struct {
	// Local file certificate.
	File *VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile `pulumi:"file"`
	// A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds *VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds `pulumi:"sds"`
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateArgs struct {
	// Local file certificate.
	File pulumix.Input[*VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileArgs] `pulumi:"file"`
	// A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds pulumix.Input[*VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsArgs] `pulumi:"sds"`
}

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate)(nil)).Elem()
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput {
	return i.ToVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput)
}

func (i *VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate)(nil)).Elem()
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate] {
	return pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate]{
		OutputState: o.OutputState,
	}
}

// Local file certificate.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput) File() pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile, VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate) *VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile {
		return v.File
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile, VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput]{OutputState: value.OutputState}
}

// A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput) Sds() pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds, VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate) *VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds {
		return v.Sds
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds, VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain string `pulumi:"certificateChain"`
	// Private key for a certificate stored on the file system of the virtual node that the proxy is running on. Must be between 1 and 255 characters in length.
	PrivateKey string `pulumi:"privateKey"`
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileArgs struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
	// Private key for a certificate stored on the file system of the virtual node that the proxy is running on. Must be between 1 and 255 characters in length.
	PrivateKey pulumix.Input[string] `pulumi:"privateKey"`
}

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile)(nil)).Elem()
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput {
	return i.ToVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput)
}

func (i *VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile)(nil)).Elem()
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile] {
	return pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile]{
		OutputState: o.OutputState,
	}
}

// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile) string { return v.CertificateChain })
}

// Private key for a certificate stored on the file system of the virtual node that the proxy is running on. Must be between 1 and 255 characters in length.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput) PrivateKey() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile) string { return v.PrivateKey })
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds struct {
	// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName string `pulumi:"secretName"`
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsArgs struct {
	// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds)(nil)).Elem()
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput {
	return i.ToVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput)
}

func (i *VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds)(nil)).Elem()
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds] {
	return pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds]{
		OutputState: o.OutputState,
	}
}

// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds) string { return v.SecretName })
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation struct {
	// SANs for a TLS validation context.
	SubjectAlternativeNames *VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames `pulumi:"subjectAlternativeNames"`
	// TLS validation context trust.
	Trust VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust `pulumi:"trust"`
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationArgs struct {
	// SANs for a TLS validation context.
	SubjectAlternativeNames pulumix.Input[*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesArgs] `pulumi:"subjectAlternativeNames"`
	// TLS validation context trust.
	Trust pulumix.Input[*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustArgs] `pulumi:"trust"`
}

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation)(nil)).Elem()
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput {
	return i.ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput)
}

func (i *VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation)(nil)).Elem()
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation] {
	return pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation]{
		OutputState: o.OutputState,
	}
}

// SANs for a TLS validation context.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput) SubjectAlternativeNames() pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames, VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation) *VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames {
		return v.SubjectAlternativeNames
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames, VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput]{OutputState: value.OutputState}
}

// TLS validation context trust.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput) Trust() pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust, VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust {
		return v.Trust
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust, VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames struct {
	// Criteria for determining a SAN's match.
	Match VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch `pulumi:"match"`
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesArgs struct {
	// Criteria for determining a SAN's match.
	Match pulumix.Input[*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs] `pulumi:"match"`
}

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames)(nil)).Elem()
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput {
	return i.ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput)
}

func (i *VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames)(nil)).Elem()
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames] {
	return pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames]{
		OutputState: o.OutputState,
	}
}

// Criteria for determining a SAN's match.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput) Match() pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch, VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch {
		return v.Match
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch, VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch struct {
	// Values sent must match the specified values exactly.
	Exacts []string `pulumi:"exacts"`
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs struct {
	// Values sent must match the specified values exactly.
	Exacts pulumix.Input[[]string] `pulumi:"exacts"`
}

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch)(nil)).Elem()
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput {
	return i.ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput)
}

func (i *VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch)(nil)).Elem()
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch] {
	return pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch]{
		OutputState: o.OutputState,
	}
}

// Values sent must match the specified values exactly.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput) Exacts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch) []string {
		return v.Exacts
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust struct {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm *VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm `pulumi:"acm"`
	// TLS validation context trust for a local file certificate.
	File *VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile `pulumi:"file"`
	// TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds *VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds `pulumi:"sds"`
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustArgs struct {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm pulumix.Input[*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmArgs] `pulumi:"acm"`
	// TLS validation context trust for a local file certificate.
	File pulumix.Input[*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileArgs] `pulumi:"file"`
	// TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds pulumix.Input[*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsArgs] `pulumi:"sds"`
}

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust)(nil)).Elem()
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput {
	return i.ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput)
}

func (i *VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust)(nil)).Elem()
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust] {
	return pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust]{
		OutputState: o.OutputState,
	}
}

// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput) Acm() pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm, VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust) *VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm {
		return v.Acm
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm, VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput]{OutputState: value.OutputState}
}

// TLS validation context trust for a local file certificate.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput) File() pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile, VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust) *VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile {
		return v.File
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile, VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput]{OutputState: value.OutputState}
}

// TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput) Sds() pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds, VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust) *VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds {
		return v.Sds
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds, VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm struct {
	// One or more ACM ARNs.
	CertificateAuthorityArns []string `pulumi:"certificateAuthorityArns"`
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmArgs struct {
	// One or more ACM ARNs.
	CertificateAuthorityArns pulumix.Input[[]string] `pulumi:"certificateAuthorityArns"`
}

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm)(nil)).Elem()
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput {
	return i.ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput)
}

func (i *VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm)(nil)).Elem()
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm] {
	return pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm]{
		OutputState: o.OutputState,
	}
}

// One or more ACM ARNs.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput) CertificateAuthorityArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm) []string {
		return v.CertificateAuthorityArns
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain string `pulumi:"certificateChain"`
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileArgs struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
}

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile)(nil)).Elem()
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput {
	return i.ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput)
}

func (i *VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile)(nil)).Elem()
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile] {
	return pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile]{
		OutputState: o.OutputState,
	}
}

// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile) string {
		return v.CertificateChain
	})
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds struct {
	// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName string `pulumi:"secretName"`
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsArgs struct {
	// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds)(nil)).Elem()
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput {
	return i.ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsArgs) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput)
}

func (i *VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds)(nil)).Elem()
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput() VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput) ToVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutputWithContext(ctx context.Context) VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput {
	return o
}

func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds] {
	return pulumix.Output[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds]{
		OutputState: o.OutputState,
	}
}

// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
func (o VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds](o, func(v VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds) string { return v.SecretName })
}

type VirtualNodeSpecBackendVirtualService struct {
	// Client policy for the backend.
	ClientPolicy *VirtualNodeSpecBackendVirtualServiceClientPolicy `pulumi:"clientPolicy"`
	// Name of the virtual service that is acting as a virtual node backend. Must be between 1 and 255 characters in length.
	VirtualServiceName string `pulumi:"virtualServiceName"`
}

type VirtualNodeSpecBackendVirtualServiceArgs struct {
	// Client policy for the backend.
	ClientPolicy pulumix.Input[*VirtualNodeSpecBackendVirtualServiceClientPolicyArgs] `pulumi:"clientPolicy"`
	// Name of the virtual service that is acting as a virtual node backend. Must be between 1 and 255 characters in length.
	VirtualServiceName pulumix.Input[string] `pulumi:"virtualServiceName"`
}

func (VirtualNodeSpecBackendVirtualServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualService)(nil)).Elem()
}

func (i VirtualNodeSpecBackendVirtualServiceArgs) ToVirtualNodeSpecBackendVirtualServiceOutput() VirtualNodeSpecBackendVirtualServiceOutput {
	return i.ToVirtualNodeSpecBackendVirtualServiceOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendVirtualServiceArgs) ToVirtualNodeSpecBackendVirtualServiceOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServiceOutput)
}

func (i *VirtualNodeSpecBackendVirtualServiceArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendVirtualServiceArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendVirtualServiceOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendVirtualServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualService)(nil)).Elem()
}

func (o VirtualNodeSpecBackendVirtualServiceOutput) ToVirtualNodeSpecBackendVirtualServiceOutput() VirtualNodeSpecBackendVirtualServiceOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceOutput) ToVirtualNodeSpecBackendVirtualServiceOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendVirtualService] {
	return pulumix.Output[VirtualNodeSpecBackendVirtualService]{
		OutputState: o.OutputState,
	}
}

// Client policy for the backend.
func (o VirtualNodeSpecBackendVirtualServiceOutput) ClientPolicy() pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicy, VirtualNodeSpecBackendVirtualServiceClientPolicyOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendVirtualService](o, func(v VirtualNodeSpecBackendVirtualService) *VirtualNodeSpecBackendVirtualServiceClientPolicy {
		return v.ClientPolicy
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicy, VirtualNodeSpecBackendVirtualServiceClientPolicyOutput]{OutputState: value.OutputState}
}

// Name of the virtual service that is acting as a virtual node backend. Must be between 1 and 255 characters in length.
func (o VirtualNodeSpecBackendVirtualServiceOutput) VirtualServiceName() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecBackendVirtualService](o, func(v VirtualNodeSpecBackendVirtualService) string { return v.VirtualServiceName })
}

type VirtualNodeSpecBackendVirtualServiceClientPolicy struct {
	// Transport Layer Security (TLS) client policy.
	Tls *VirtualNodeSpecBackendVirtualServiceClientPolicyTls `pulumi:"tls"`
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyArgs struct {
	// Transport Layer Security (TLS) client policy.
	Tls pulumix.Input[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsArgs] `pulumi:"tls"`
}

func (VirtualNodeSpecBackendVirtualServiceClientPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicy)(nil)).Elem()
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyOutput {
	return i.ToVirtualNodeSpecBackendVirtualServiceClientPolicyOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServiceClientPolicyOutput)
}

func (i *VirtualNodeSpecBackendVirtualServiceClientPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendVirtualServiceClientPolicyArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendVirtualServiceClientPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicy)(nil)).Elem()
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicy] {
	return pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicy]{
		OutputState: o.OutputState,
	}
}

// Transport Layer Security (TLS) client policy.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyOutput) Tls() pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTls, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicy](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicy) *VirtualNodeSpecBackendVirtualServiceClientPolicyTls {
		return v.Tls
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTls, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTls struct {
	// Listener's TLS certificate.
	Certificate *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificate `pulumi:"certificate"`
	// Whether the policy is enforced. Default is `true`.
	Enforce *bool `pulumi:"enforce"`
	// One or more ports that the policy is enforced for.
	Ports []int `pulumi:"ports"`
	// Listener's Transport Layer Security (TLS) validation context.
	Validation VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation `pulumi:"validation"`
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsArgs struct {
	// Listener's TLS certificate.
	Certificate pulumix.Input[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateArgs] `pulumi:"certificate"`
	// Whether the policy is enforced. Default is `true`.
	Enforce pulumix.Input[*bool] `pulumi:"enforce"`
	// One or more ports that the policy is enforced for.
	Ports pulumix.Input[[]int] `pulumi:"ports"`
	// Listener's Transport Layer Security (TLS) validation context.
	Validation pulumix.Input[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationArgs] `pulumi:"validation"`
}

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTls)(nil)).Elem()
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput {
	return i.ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput)
}

func (i *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTls)(nil)).Elem()
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTls] {
	return pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTls]{
		OutputState: o.OutputState,
	}
}

// Listener's TLS certificate.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput) Certificate() pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificate, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTls](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTls) *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificate {
		return v.Certificate
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificate, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput]{OutputState: value.OutputState}
}

// Whether the policy is enforced. Default is `true`.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput) Enforce() pulumix.Output[*bool] {
	return pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTls](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTls) *bool { return v.Enforce })
}

// One or more ports that the policy is enforced for.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput) Ports() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTls](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTls) []int { return v.Ports })
	return pulumix.ArrayOutput[int]{OutputState: value.OutputState}
}

// Listener's Transport Layer Security (TLS) validation context.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput) Validation() pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTls](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTls) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation {
		return v.Validation
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificate struct {
	// Local file certificate.
	File *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFile `pulumi:"file"`
	// A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSds `pulumi:"sds"`
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateArgs struct {
	// Local file certificate.
	File pulumix.Input[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileArgs] `pulumi:"file"`
	// A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds pulumix.Input[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsArgs] `pulumi:"sds"`
}

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificate)(nil)).Elem()
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput {
	return i.ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput)
}

func (i *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificate)(nil)).Elem()
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificate] {
	return pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificate]{
		OutputState: o.OutputState,
	}
}

// Local file certificate.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput) File() pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFile, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificate](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificate) *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFile {
		return v.File
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFile, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput]{OutputState: value.OutputState}
}

// A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput) Sds() pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSds, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificate](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificate) *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSds {
		return v.Sds
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSds, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFile struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain string `pulumi:"certificateChain"`
	// Private key for a certificate stored on the file system of the virtual node that the proxy is running on. Must be between 1 and 255 characters in length.
	PrivateKey string `pulumi:"privateKey"`
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileArgs struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
	// Private key for a certificate stored on the file system of the virtual node that the proxy is running on. Must be between 1 and 255 characters in length.
	PrivateKey pulumix.Input[string] `pulumi:"privateKey"`
}

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFile)(nil)).Elem()
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput {
	return i.ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput)
}

func (i *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFile)(nil)).Elem()
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFile] {
	return pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFile]{
		OutputState: o.OutputState,
	}
}

// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFile](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFile) string {
		return v.CertificateChain
	})
}

// Private key for a certificate stored on the file system of the virtual node that the proxy is running on. Must be between 1 and 255 characters in length.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput) PrivateKey() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFile](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFile) string { return v.PrivateKey })
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSds struct {
	// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName string `pulumi:"secretName"`
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsArgs struct {
	// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSds)(nil)).Elem()
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput {
	return i.ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput)
}

func (i *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSds)(nil)).Elem()
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSds] {
	return pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSds]{
		OutputState: o.OutputState,
	}
}

// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSds](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSds) string { return v.SecretName })
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation struct {
	// SANs for a TLS validation context.
	SubjectAlternativeNames *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames `pulumi:"subjectAlternativeNames"`
	// TLS validation context trust.
	Trust VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust `pulumi:"trust"`
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationArgs struct {
	// SANs for a TLS validation context.
	SubjectAlternativeNames pulumix.Input[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesArgs] `pulumi:"subjectAlternativeNames"`
	// TLS validation context trust.
	Trust pulumix.Input[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustArgs] `pulumi:"trust"`
}

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation)(nil)).Elem()
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput {
	return i.ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput)
}

func (i *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation)(nil)).Elem()
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation] {
	return pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation]{
		OutputState: o.OutputState,
	}
}

// SANs for a TLS validation context.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput) SubjectAlternativeNames() pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation) *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames {
		return v.SubjectAlternativeNames
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput]{OutputState: value.OutputState}
}

// TLS validation context trust.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput) Trust() pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust {
		return v.Trust
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames struct {
	// Criteria for determining a SAN's match.
	Match VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch `pulumi:"match"`
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesArgs struct {
	// Criteria for determining a SAN's match.
	Match pulumix.Input[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs] `pulumi:"match"`
}

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames)(nil)).Elem()
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput {
	return i.ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput)
}

func (i *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames)(nil)).Elem()
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames] {
	return pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames]{
		OutputState: o.OutputState,
	}
}

// Criteria for determining a SAN's match.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput) Match() pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch {
		return v.Match
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch struct {
	// Values sent must match the specified values exactly.
	Exacts []string `pulumi:"exacts"`
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs struct {
	// Values sent must match the specified values exactly.
	Exacts pulumix.Input[[]string] `pulumi:"exacts"`
}

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch)(nil)).Elem()
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput {
	return i.ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput)
}

func (i *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch)(nil)).Elem()
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch] {
	return pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch]{
		OutputState: o.OutputState,
	}
}

// Values sent must match the specified values exactly.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput) Exacts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch) []string {
		return v.Exacts
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust struct {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm `pulumi:"acm"`
	// TLS validation context trust for a local file certificate.
	File *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile `pulumi:"file"`
	// TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSds `pulumi:"sds"`
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustArgs struct {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm pulumix.Input[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmArgs] `pulumi:"acm"`
	// TLS validation context trust for a local file certificate.
	File pulumix.Input[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileArgs] `pulumi:"file"`
	// TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds pulumix.Input[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsArgs] `pulumi:"sds"`
}

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust)(nil)).Elem()
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput {
	return i.ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput)
}

func (i *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust)(nil)).Elem()
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust] {
	return pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust]{
		OutputState: o.OutputState,
	}
}

// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput) Acm() pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust) *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm {
		return v.Acm
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput]{OutputState: value.OutputState}
}

// TLS validation context trust for a local file certificate.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput) File() pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust) *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile {
		return v.File
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput]{OutputState: value.OutputState}
}

// TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput) Sds() pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSds, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput] {
	value := pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust) *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSds {
		return v.Sds
	})
	return pulumix.GPtrOutput[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSds, VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm struct {
	// One or more ACM ARNs.
	CertificateAuthorityArns []string `pulumi:"certificateAuthorityArns"`
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmArgs struct {
	// One or more ACM ARNs.
	CertificateAuthorityArns pulumix.Input[[]string] `pulumi:"certificateAuthorityArns"`
}

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm)(nil)).Elem()
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput {
	return i.ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput)
}

func (i *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm)(nil)).Elem()
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm] {
	return pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm]{
		OutputState: o.OutputState,
	}
}

// One or more ACM ARNs.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput) CertificateAuthorityArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm) []string {
		return v.CertificateAuthorityArns
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain string `pulumi:"certificateChain"`
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileArgs struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
}

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile)(nil)).Elem()
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput {
	return i.ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput)
}

func (i *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile)(nil)).Elem()
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile] {
	return pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile]{
		OutputState: o.OutputState,
	}
}

// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile) string {
		return v.CertificateChain
	})
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSds struct {
	// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName string `pulumi:"secretName"`
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsArgs struct {
	// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSds)(nil)).Elem()
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput {
	return i.ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsArgs) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput)
}

func (i *VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSds)(nil)).Elem()
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput() VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput) ToVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSds] {
	return pulumix.Output[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSds]{
		OutputState: o.OutputState,
	}
}

// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
func (o VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSds](o, func(v VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSds) string {
		return v.SecretName
	})
}

type VirtualNodeSpecListener struct {
	// Connection pool information for the listener.
	ConnectionPool *VirtualNodeSpecListenerConnectionPool `pulumi:"connectionPool"`
	// Health check information for the listener.
	HealthCheck *VirtualNodeSpecListenerHealthCheck `pulumi:"healthCheck"`
	// Outlier detection information for the listener.
	OutlierDetection *VirtualNodeSpecListenerOutlierDetection `pulumi:"outlierDetection"`
	// Port mapping information for the listener.
	PortMapping VirtualNodeSpecListenerPortMapping `pulumi:"portMapping"`
	// Timeouts for different protocols.
	Timeout *VirtualNodeSpecListenerTimeout `pulumi:"timeout"`
	// Transport Layer Security (TLS) properties for the listener
	Tls *VirtualNodeSpecListenerTls `pulumi:"tls"`
}

type VirtualNodeSpecListenerArgs struct {
	// Connection pool information for the listener.
	ConnectionPool pulumix.Input[*VirtualNodeSpecListenerConnectionPoolArgs] `pulumi:"connectionPool"`
	// Health check information for the listener.
	HealthCheck pulumix.Input[*VirtualNodeSpecListenerHealthCheckArgs] `pulumi:"healthCheck"`
	// Outlier detection information for the listener.
	OutlierDetection pulumix.Input[*VirtualNodeSpecListenerOutlierDetectionArgs] `pulumi:"outlierDetection"`
	// Port mapping information for the listener.
	PortMapping pulumix.Input[*VirtualNodeSpecListenerPortMappingArgs] `pulumi:"portMapping"`
	// Timeouts for different protocols.
	Timeout pulumix.Input[*VirtualNodeSpecListenerTimeoutArgs] `pulumi:"timeout"`
	// Transport Layer Security (TLS) properties for the listener
	Tls pulumix.Input[*VirtualNodeSpecListenerTlsArgs] `pulumi:"tls"`
}

func (VirtualNodeSpecListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListener)(nil)).Elem()
}

func (i VirtualNodeSpecListenerArgs) ToVirtualNodeSpecListenerOutput() VirtualNodeSpecListenerOutput {
	return i.ToVirtualNodeSpecListenerOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerArgs) ToVirtualNodeSpecListenerOutputWithContext(ctx context.Context) VirtualNodeSpecListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerOutput)
}

func (i *VirtualNodeSpecListenerArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListener)(nil)).Elem()
}

func (o VirtualNodeSpecListenerOutput) ToVirtualNodeSpecListenerOutput() VirtualNodeSpecListenerOutput {
	return o
}

func (o VirtualNodeSpecListenerOutput) ToVirtualNodeSpecListenerOutputWithContext(ctx context.Context) VirtualNodeSpecListenerOutput {
	return o
}

func (o VirtualNodeSpecListenerOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListener] {
	return pulumix.Output[VirtualNodeSpecListener]{
		OutputState: o.OutputState,
	}
}

// Connection pool information for the listener.
func (o VirtualNodeSpecListenerOutput) ConnectionPool() pulumix.GPtrOutput[VirtualNodeSpecListenerConnectionPool, VirtualNodeSpecListenerConnectionPoolOutput] {
	value := pulumix.Apply[VirtualNodeSpecListener](o, func(v VirtualNodeSpecListener) *VirtualNodeSpecListenerConnectionPool { return v.ConnectionPool })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerConnectionPool, VirtualNodeSpecListenerConnectionPoolOutput]{OutputState: value.OutputState}
}

// Health check information for the listener.
func (o VirtualNodeSpecListenerOutput) HealthCheck() pulumix.GPtrOutput[VirtualNodeSpecListenerHealthCheck, VirtualNodeSpecListenerHealthCheckOutput] {
	value := pulumix.Apply[VirtualNodeSpecListener](o, func(v VirtualNodeSpecListener) *VirtualNodeSpecListenerHealthCheck { return v.HealthCheck })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerHealthCheck, VirtualNodeSpecListenerHealthCheckOutput]{OutputState: value.OutputState}
}

// Outlier detection information for the listener.
func (o VirtualNodeSpecListenerOutput) OutlierDetection() pulumix.GPtrOutput[VirtualNodeSpecListenerOutlierDetection, VirtualNodeSpecListenerOutlierDetectionOutput] {
	value := pulumix.Apply[VirtualNodeSpecListener](o, func(v VirtualNodeSpecListener) *VirtualNodeSpecListenerOutlierDetection { return v.OutlierDetection })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerOutlierDetection, VirtualNodeSpecListenerOutlierDetectionOutput]{OutputState: value.OutputState}
}

// Port mapping information for the listener.
func (o VirtualNodeSpecListenerOutput) PortMapping() pulumix.GPtrOutput[VirtualNodeSpecListenerPortMapping, VirtualNodeSpecListenerPortMappingOutput] {
	value := pulumix.Apply[VirtualNodeSpecListener](o, func(v VirtualNodeSpecListener) VirtualNodeSpecListenerPortMapping { return v.PortMapping })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerPortMapping, VirtualNodeSpecListenerPortMappingOutput]{OutputState: value.OutputState}
}

// Timeouts for different protocols.
func (o VirtualNodeSpecListenerOutput) Timeout() pulumix.GPtrOutput[VirtualNodeSpecListenerTimeout, VirtualNodeSpecListenerTimeoutOutput] {
	value := pulumix.Apply[VirtualNodeSpecListener](o, func(v VirtualNodeSpecListener) *VirtualNodeSpecListenerTimeout { return v.Timeout })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTimeout, VirtualNodeSpecListenerTimeoutOutput]{OutputState: value.OutputState}
}

// Transport Layer Security (TLS) properties for the listener
func (o VirtualNodeSpecListenerOutput) Tls() pulumix.GPtrOutput[VirtualNodeSpecListenerTls, VirtualNodeSpecListenerTlsOutput] {
	value := pulumix.Apply[VirtualNodeSpecListener](o, func(v VirtualNodeSpecListener) *VirtualNodeSpecListenerTls { return v.Tls })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTls, VirtualNodeSpecListenerTlsOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecListenerConnectionPool struct {
	// Connection pool information for gRPC listeners.
	Grpc *VirtualNodeSpecListenerConnectionPoolGrpc `pulumi:"grpc"`
	// Connection pool information for HTTP2 listeners.
	Http2s []VirtualNodeSpecListenerConnectionPoolHttp2 `pulumi:"http2s"`
	// Connection pool information for HTTP listeners.
	Https []VirtualNodeSpecListenerConnectionPoolHttp `pulumi:"https"`
	// Connection pool information for TCP listeners.
	Tcps []VirtualNodeSpecListenerConnectionPoolTcp `pulumi:"tcps"`
}

type VirtualNodeSpecListenerConnectionPoolArgs struct {
	// Connection pool information for gRPC listeners.
	Grpc pulumix.Input[*VirtualNodeSpecListenerConnectionPoolGrpcArgs] `pulumi:"grpc"`
	// Connection pool information for HTTP2 listeners.
	Http2s pulumix.Input[[]*VirtualNodeSpecListenerConnectionPoolHttp2Args] `pulumi:"http2s"`
	// Connection pool information for HTTP listeners.
	Https pulumix.Input[[]*VirtualNodeSpecListenerConnectionPoolHttpArgs] `pulumi:"https"`
	// Connection pool information for TCP listeners.
	Tcps pulumix.Input[[]*VirtualNodeSpecListenerConnectionPoolTcpArgs] `pulumi:"tcps"`
}

func (VirtualNodeSpecListenerConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerConnectionPool)(nil)).Elem()
}

func (i VirtualNodeSpecListenerConnectionPoolArgs) ToVirtualNodeSpecListenerConnectionPoolOutput() VirtualNodeSpecListenerConnectionPoolOutput {
	return i.ToVirtualNodeSpecListenerConnectionPoolOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerConnectionPoolArgs) ToVirtualNodeSpecListenerConnectionPoolOutputWithContext(ctx context.Context) VirtualNodeSpecListenerConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerConnectionPoolOutput)
}

func (i *VirtualNodeSpecListenerConnectionPoolArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerConnectionPoolArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerConnectionPoolOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerConnectionPool)(nil)).Elem()
}

func (o VirtualNodeSpecListenerConnectionPoolOutput) ToVirtualNodeSpecListenerConnectionPoolOutput() VirtualNodeSpecListenerConnectionPoolOutput {
	return o
}

func (o VirtualNodeSpecListenerConnectionPoolOutput) ToVirtualNodeSpecListenerConnectionPoolOutputWithContext(ctx context.Context) VirtualNodeSpecListenerConnectionPoolOutput {
	return o
}

func (o VirtualNodeSpecListenerConnectionPoolOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerConnectionPool] {
	return pulumix.Output[VirtualNodeSpecListenerConnectionPool]{
		OutputState: o.OutputState,
	}
}

// Connection pool information for gRPC listeners.
func (o VirtualNodeSpecListenerConnectionPoolOutput) Grpc() pulumix.GPtrOutput[VirtualNodeSpecListenerConnectionPoolGrpc, VirtualNodeSpecListenerConnectionPoolGrpcOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerConnectionPool](o, func(v VirtualNodeSpecListenerConnectionPool) *VirtualNodeSpecListenerConnectionPoolGrpc {
		return v.Grpc
	})
	return pulumix.GPtrOutput[VirtualNodeSpecListenerConnectionPoolGrpc, VirtualNodeSpecListenerConnectionPoolGrpcOutput]{OutputState: value.OutputState}
}

// Connection pool information for HTTP2 listeners.
func (o VirtualNodeSpecListenerConnectionPoolOutput) Http2s() pulumix.GArrayOutput[VirtualNodeSpecListenerConnectionPoolHttp2, VirtualNodeSpecListenerConnectionPoolHttp2Output] {
	value := pulumix.Apply[VirtualNodeSpecListenerConnectionPool](o, func(v VirtualNodeSpecListenerConnectionPool) []VirtualNodeSpecListenerConnectionPoolHttp2 {
		return v.Http2s
	})
	return pulumix.GArrayOutput[VirtualNodeSpecListenerConnectionPoolHttp2, VirtualNodeSpecListenerConnectionPoolHttp2Output]{OutputState: value.OutputState}
}

// Connection pool information for HTTP listeners.
func (o VirtualNodeSpecListenerConnectionPoolOutput) Https() pulumix.GArrayOutput[VirtualNodeSpecListenerConnectionPoolHttp, VirtualNodeSpecListenerConnectionPoolHttpOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerConnectionPool](o, func(v VirtualNodeSpecListenerConnectionPool) []VirtualNodeSpecListenerConnectionPoolHttp {
		return v.Https
	})
	return pulumix.GArrayOutput[VirtualNodeSpecListenerConnectionPoolHttp, VirtualNodeSpecListenerConnectionPoolHttpOutput]{OutputState: value.OutputState}
}

// Connection pool information for TCP listeners.
func (o VirtualNodeSpecListenerConnectionPoolOutput) Tcps() pulumix.GArrayOutput[VirtualNodeSpecListenerConnectionPoolTcp, VirtualNodeSpecListenerConnectionPoolTcpOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerConnectionPool](o, func(v VirtualNodeSpecListenerConnectionPool) []VirtualNodeSpecListenerConnectionPoolTcp {
		return v.Tcps
	})
	return pulumix.GArrayOutput[VirtualNodeSpecListenerConnectionPoolTcp, VirtualNodeSpecListenerConnectionPoolTcpOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecListenerConnectionPoolGrpc struct {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
	MaxRequests int `pulumi:"maxRequests"`
}

type VirtualNodeSpecListenerConnectionPoolGrpcArgs struct {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
	MaxRequests pulumix.Input[int] `pulumi:"maxRequests"`
}

func (VirtualNodeSpecListenerConnectionPoolGrpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerConnectionPoolGrpc)(nil)).Elem()
}

func (i VirtualNodeSpecListenerConnectionPoolGrpcArgs) ToVirtualNodeSpecListenerConnectionPoolGrpcOutput() VirtualNodeSpecListenerConnectionPoolGrpcOutput {
	return i.ToVirtualNodeSpecListenerConnectionPoolGrpcOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerConnectionPoolGrpcArgs) ToVirtualNodeSpecListenerConnectionPoolGrpcOutputWithContext(ctx context.Context) VirtualNodeSpecListenerConnectionPoolGrpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerConnectionPoolGrpcOutput)
}

func (i *VirtualNodeSpecListenerConnectionPoolGrpcArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerConnectionPoolGrpcArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerConnectionPoolGrpcOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerConnectionPoolGrpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerConnectionPoolGrpc)(nil)).Elem()
}

func (o VirtualNodeSpecListenerConnectionPoolGrpcOutput) ToVirtualNodeSpecListenerConnectionPoolGrpcOutput() VirtualNodeSpecListenerConnectionPoolGrpcOutput {
	return o
}

func (o VirtualNodeSpecListenerConnectionPoolGrpcOutput) ToVirtualNodeSpecListenerConnectionPoolGrpcOutputWithContext(ctx context.Context) VirtualNodeSpecListenerConnectionPoolGrpcOutput {
	return o
}

func (o VirtualNodeSpecListenerConnectionPoolGrpcOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerConnectionPoolGrpc] {
	return pulumix.Output[VirtualNodeSpecListenerConnectionPoolGrpc]{
		OutputState: o.OutputState,
	}
}

// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
func (o VirtualNodeSpecListenerConnectionPoolGrpcOutput) MaxRequests() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerConnectionPoolGrpc](o, func(v VirtualNodeSpecListenerConnectionPoolGrpc) int { return v.MaxRequests })
}

type VirtualNodeSpecListenerConnectionPoolHttp2 struct {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
	MaxRequests int `pulumi:"maxRequests"`
}

type VirtualNodeSpecListenerConnectionPoolHttp2Args struct {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
	MaxRequests pulumix.Input[int] `pulumi:"maxRequests"`
}

func (VirtualNodeSpecListenerConnectionPoolHttp2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerConnectionPoolHttp2)(nil)).Elem()
}

func (i VirtualNodeSpecListenerConnectionPoolHttp2Args) ToVirtualNodeSpecListenerConnectionPoolHttp2Output() VirtualNodeSpecListenerConnectionPoolHttp2Output {
	return i.ToVirtualNodeSpecListenerConnectionPoolHttp2OutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerConnectionPoolHttp2Args) ToVirtualNodeSpecListenerConnectionPoolHttp2OutputWithContext(ctx context.Context) VirtualNodeSpecListenerConnectionPoolHttp2Output {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerConnectionPoolHttp2Output)
}

func (i *VirtualNodeSpecListenerConnectionPoolHttp2Args) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerConnectionPoolHttp2Args] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerConnectionPoolHttp2Output struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerConnectionPoolHttp2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerConnectionPoolHttp2)(nil)).Elem()
}

func (o VirtualNodeSpecListenerConnectionPoolHttp2Output) ToVirtualNodeSpecListenerConnectionPoolHttp2Output() VirtualNodeSpecListenerConnectionPoolHttp2Output {
	return o
}

func (o VirtualNodeSpecListenerConnectionPoolHttp2Output) ToVirtualNodeSpecListenerConnectionPoolHttp2OutputWithContext(ctx context.Context) VirtualNodeSpecListenerConnectionPoolHttp2Output {
	return o
}

func (o VirtualNodeSpecListenerConnectionPoolHttp2Output) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerConnectionPoolHttp2] {
	return pulumix.Output[VirtualNodeSpecListenerConnectionPoolHttp2]{
		OutputState: o.OutputState,
	}
}

// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
func (o VirtualNodeSpecListenerConnectionPoolHttp2Output) MaxRequests() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerConnectionPoolHttp2](o, func(v VirtualNodeSpecListenerConnectionPoolHttp2) int { return v.MaxRequests })
}

type VirtualNodeSpecListenerConnectionPoolHttp struct {
	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.
	MaxConnections int `pulumi:"maxConnections"`
	// Number of overflowing requests after `maxConnections` Envoy will queue to upstream cluster. Minimum value of `1`.
	//
	// The `http2` connection pool object supports the following:
	MaxPendingRequests *int `pulumi:"maxPendingRequests"`
}

type VirtualNodeSpecListenerConnectionPoolHttpArgs struct {
	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.
	MaxConnections pulumix.Input[int] `pulumi:"maxConnections"`
	// Number of overflowing requests after `maxConnections` Envoy will queue to upstream cluster. Minimum value of `1`.
	//
	// The `http2` connection pool object supports the following:
	MaxPendingRequests pulumix.Input[*int] `pulumi:"maxPendingRequests"`
}

func (VirtualNodeSpecListenerConnectionPoolHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerConnectionPoolHttp)(nil)).Elem()
}

func (i VirtualNodeSpecListenerConnectionPoolHttpArgs) ToVirtualNodeSpecListenerConnectionPoolHttpOutput() VirtualNodeSpecListenerConnectionPoolHttpOutput {
	return i.ToVirtualNodeSpecListenerConnectionPoolHttpOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerConnectionPoolHttpArgs) ToVirtualNodeSpecListenerConnectionPoolHttpOutputWithContext(ctx context.Context) VirtualNodeSpecListenerConnectionPoolHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerConnectionPoolHttpOutput)
}

func (i *VirtualNodeSpecListenerConnectionPoolHttpArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerConnectionPoolHttpArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerConnectionPoolHttpOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerConnectionPoolHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerConnectionPoolHttp)(nil)).Elem()
}

func (o VirtualNodeSpecListenerConnectionPoolHttpOutput) ToVirtualNodeSpecListenerConnectionPoolHttpOutput() VirtualNodeSpecListenerConnectionPoolHttpOutput {
	return o
}

func (o VirtualNodeSpecListenerConnectionPoolHttpOutput) ToVirtualNodeSpecListenerConnectionPoolHttpOutputWithContext(ctx context.Context) VirtualNodeSpecListenerConnectionPoolHttpOutput {
	return o
}

func (o VirtualNodeSpecListenerConnectionPoolHttpOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerConnectionPoolHttp] {
	return pulumix.Output[VirtualNodeSpecListenerConnectionPoolHttp]{
		OutputState: o.OutputState,
	}
}

// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.
func (o VirtualNodeSpecListenerConnectionPoolHttpOutput) MaxConnections() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerConnectionPoolHttp](o, func(v VirtualNodeSpecListenerConnectionPoolHttp) int { return v.MaxConnections })
}

// Number of overflowing requests after `maxConnections` Envoy will queue to upstream cluster. Minimum value of `1`.
//
// The `http2` connection pool object supports the following:
func (o VirtualNodeSpecListenerConnectionPoolHttpOutput) MaxPendingRequests() pulumix.Output[*int] {
	return pulumix.Apply[VirtualNodeSpecListenerConnectionPoolHttp](o, func(v VirtualNodeSpecListenerConnectionPoolHttp) *int { return v.MaxPendingRequests })
}

type VirtualNodeSpecListenerConnectionPoolTcp struct {
	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.
	MaxConnections int `pulumi:"maxConnections"`
}

type VirtualNodeSpecListenerConnectionPoolTcpArgs struct {
	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.
	MaxConnections pulumix.Input[int] `pulumi:"maxConnections"`
}

func (VirtualNodeSpecListenerConnectionPoolTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerConnectionPoolTcp)(nil)).Elem()
}

func (i VirtualNodeSpecListenerConnectionPoolTcpArgs) ToVirtualNodeSpecListenerConnectionPoolTcpOutput() VirtualNodeSpecListenerConnectionPoolTcpOutput {
	return i.ToVirtualNodeSpecListenerConnectionPoolTcpOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerConnectionPoolTcpArgs) ToVirtualNodeSpecListenerConnectionPoolTcpOutputWithContext(ctx context.Context) VirtualNodeSpecListenerConnectionPoolTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerConnectionPoolTcpOutput)
}

func (i *VirtualNodeSpecListenerConnectionPoolTcpArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerConnectionPoolTcpArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerConnectionPoolTcpOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerConnectionPoolTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerConnectionPoolTcp)(nil)).Elem()
}

func (o VirtualNodeSpecListenerConnectionPoolTcpOutput) ToVirtualNodeSpecListenerConnectionPoolTcpOutput() VirtualNodeSpecListenerConnectionPoolTcpOutput {
	return o
}

func (o VirtualNodeSpecListenerConnectionPoolTcpOutput) ToVirtualNodeSpecListenerConnectionPoolTcpOutputWithContext(ctx context.Context) VirtualNodeSpecListenerConnectionPoolTcpOutput {
	return o
}

func (o VirtualNodeSpecListenerConnectionPoolTcpOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerConnectionPoolTcp] {
	return pulumix.Output[VirtualNodeSpecListenerConnectionPoolTcp]{
		OutputState: o.OutputState,
	}
}

// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.
func (o VirtualNodeSpecListenerConnectionPoolTcpOutput) MaxConnections() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerConnectionPoolTcp](o, func(v VirtualNodeSpecListenerConnectionPoolTcp) int { return v.MaxConnections })
}

type VirtualNodeSpecListenerHealthCheck struct {
	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// Time period in milliseconds between each health check execution.
	IntervalMillis int `pulumi:"intervalMillis"`
	// Destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.
	Path *string `pulumi:"path"`
	// Destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
	Port *int `pulumi:"port"`
	// Protocol for the health check request. Valid values are `http`, `http2`, `tcp` and `grpc`.
	Protocol string `pulumi:"protocol"`
	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	TimeoutMillis int `pulumi:"timeoutMillis"`
	// Number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
}

type VirtualNodeSpecListenerHealthCheckArgs struct {
	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	HealthyThreshold pulumix.Input[int] `pulumi:"healthyThreshold"`
	// Time period in milliseconds between each health check execution.
	IntervalMillis pulumix.Input[int] `pulumi:"intervalMillis"`
	// Destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.
	Path pulumix.Input[*string] `pulumi:"path"`
	// Destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Protocol for the health check request. Valid values are `http`, `http2`, `tcp` and `grpc`.
	Protocol pulumix.Input[string] `pulumi:"protocol"`
	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	TimeoutMillis pulumix.Input[int] `pulumi:"timeoutMillis"`
	// Number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
	UnhealthyThreshold pulumix.Input[int] `pulumi:"unhealthyThreshold"`
}

func (VirtualNodeSpecListenerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerHealthCheck)(nil)).Elem()
}

func (i VirtualNodeSpecListenerHealthCheckArgs) ToVirtualNodeSpecListenerHealthCheckOutput() VirtualNodeSpecListenerHealthCheckOutput {
	return i.ToVirtualNodeSpecListenerHealthCheckOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerHealthCheckArgs) ToVirtualNodeSpecListenerHealthCheckOutputWithContext(ctx context.Context) VirtualNodeSpecListenerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerHealthCheckOutput)
}

func (i *VirtualNodeSpecListenerHealthCheckArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerHealthCheckArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerHealthCheckOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerHealthCheck)(nil)).Elem()
}

func (o VirtualNodeSpecListenerHealthCheckOutput) ToVirtualNodeSpecListenerHealthCheckOutput() VirtualNodeSpecListenerHealthCheckOutput {
	return o
}

func (o VirtualNodeSpecListenerHealthCheckOutput) ToVirtualNodeSpecListenerHealthCheckOutputWithContext(ctx context.Context) VirtualNodeSpecListenerHealthCheckOutput {
	return o
}

func (o VirtualNodeSpecListenerHealthCheckOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerHealthCheck] {
	return pulumix.Output[VirtualNodeSpecListenerHealthCheck]{
		OutputState: o.OutputState,
	}
}

// Number of consecutive successful health checks that must occur before declaring listener healthy.
func (o VirtualNodeSpecListenerHealthCheckOutput) HealthyThreshold() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerHealthCheck](o, func(v VirtualNodeSpecListenerHealthCheck) int { return v.HealthyThreshold })
}

// Time period in milliseconds between each health check execution.
func (o VirtualNodeSpecListenerHealthCheckOutput) IntervalMillis() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerHealthCheck](o, func(v VirtualNodeSpecListenerHealthCheck) int { return v.IntervalMillis })
}

// Destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.
func (o VirtualNodeSpecListenerHealthCheckOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[VirtualNodeSpecListenerHealthCheck](o, func(v VirtualNodeSpecListenerHealthCheck) *string { return v.Path })
}

// Destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
func (o VirtualNodeSpecListenerHealthCheckOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[VirtualNodeSpecListenerHealthCheck](o, func(v VirtualNodeSpecListenerHealthCheck) *int { return v.Port })
}

// Protocol for the health check request. Valid values are `http`, `http2`, `tcp` and `grpc`.
func (o VirtualNodeSpecListenerHealthCheckOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerHealthCheck](o, func(v VirtualNodeSpecListenerHealthCheck) string { return v.Protocol })
}

// Amount of time to wait when receiving a response from the health check, in milliseconds.
func (o VirtualNodeSpecListenerHealthCheckOutput) TimeoutMillis() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerHealthCheck](o, func(v VirtualNodeSpecListenerHealthCheck) int { return v.TimeoutMillis })
}

// Number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
func (o VirtualNodeSpecListenerHealthCheckOutput) UnhealthyThreshold() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerHealthCheck](o, func(v VirtualNodeSpecListenerHealthCheck) int { return v.UnhealthyThreshold })
}

type VirtualNodeSpecListenerOutlierDetection struct {
	// Base amount of time for which a host is ejected.
	BaseEjectionDuration VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration `pulumi:"baseEjectionDuration"`
	// Time interval between ejection sweep analysis.
	Interval VirtualNodeSpecListenerOutlierDetectionInterval `pulumi:"interval"`
	// Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.
	// Minimum value of `0`. Maximum value of `100`.
	MaxEjectionPercent int `pulumi:"maxEjectionPercent"`
	// Number of consecutive `5xx` errors required for ejection. Minimum value of `1`.
	MaxServerErrors int `pulumi:"maxServerErrors"`
}

type VirtualNodeSpecListenerOutlierDetectionArgs struct {
	// Base amount of time for which a host is ejected.
	BaseEjectionDuration pulumix.Input[*VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationArgs] `pulumi:"baseEjectionDuration"`
	// Time interval between ejection sweep analysis.
	Interval pulumix.Input[*VirtualNodeSpecListenerOutlierDetectionIntervalArgs] `pulumi:"interval"`
	// Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.
	// Minimum value of `0`. Maximum value of `100`.
	MaxEjectionPercent pulumix.Input[int] `pulumi:"maxEjectionPercent"`
	// Number of consecutive `5xx` errors required for ejection. Minimum value of `1`.
	MaxServerErrors pulumix.Input[int] `pulumi:"maxServerErrors"`
}

func (VirtualNodeSpecListenerOutlierDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerOutlierDetection)(nil)).Elem()
}

func (i VirtualNodeSpecListenerOutlierDetectionArgs) ToVirtualNodeSpecListenerOutlierDetectionOutput() VirtualNodeSpecListenerOutlierDetectionOutput {
	return i.ToVirtualNodeSpecListenerOutlierDetectionOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerOutlierDetectionArgs) ToVirtualNodeSpecListenerOutlierDetectionOutputWithContext(ctx context.Context) VirtualNodeSpecListenerOutlierDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerOutlierDetectionOutput)
}

func (i *VirtualNodeSpecListenerOutlierDetectionArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerOutlierDetectionArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerOutlierDetectionOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerOutlierDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerOutlierDetection)(nil)).Elem()
}

func (o VirtualNodeSpecListenerOutlierDetectionOutput) ToVirtualNodeSpecListenerOutlierDetectionOutput() VirtualNodeSpecListenerOutlierDetectionOutput {
	return o
}

func (o VirtualNodeSpecListenerOutlierDetectionOutput) ToVirtualNodeSpecListenerOutlierDetectionOutputWithContext(ctx context.Context) VirtualNodeSpecListenerOutlierDetectionOutput {
	return o
}

func (o VirtualNodeSpecListenerOutlierDetectionOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerOutlierDetection] {
	return pulumix.Output[VirtualNodeSpecListenerOutlierDetection]{
		OutputState: o.OutputState,
	}
}

// Base amount of time for which a host is ejected.
func (o VirtualNodeSpecListenerOutlierDetectionOutput) BaseEjectionDuration() pulumix.GPtrOutput[VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration, VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerOutlierDetection](o, func(v VirtualNodeSpecListenerOutlierDetection) VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration {
		return v.BaseEjectionDuration
	})
	return pulumix.GPtrOutput[VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration, VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput]{OutputState: value.OutputState}
}

// Time interval between ejection sweep analysis.
func (o VirtualNodeSpecListenerOutlierDetectionOutput) Interval() pulumix.GPtrOutput[VirtualNodeSpecListenerOutlierDetectionInterval, VirtualNodeSpecListenerOutlierDetectionIntervalOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerOutlierDetection](o, func(v VirtualNodeSpecListenerOutlierDetection) VirtualNodeSpecListenerOutlierDetectionInterval {
		return v.Interval
	})
	return pulumix.GPtrOutput[VirtualNodeSpecListenerOutlierDetectionInterval, VirtualNodeSpecListenerOutlierDetectionIntervalOutput]{OutputState: value.OutputState}
}

// Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.
// Minimum value of `0`. Maximum value of `100`.
func (o VirtualNodeSpecListenerOutlierDetectionOutput) MaxEjectionPercent() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerOutlierDetection](o, func(v VirtualNodeSpecListenerOutlierDetection) int { return v.MaxEjectionPercent })
}

// Number of consecutive `5xx` errors required for ejection. Minimum value of `1`.
func (o VirtualNodeSpecListenerOutlierDetectionOutput) MaxServerErrors() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerOutlierDetection](o, func(v VirtualNodeSpecListenerOutlierDetection) int { return v.MaxServerErrors })
}

type VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value int `pulumi:"value"`
}

type VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration)(nil)).Elem()
}

func (i VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationArgs) ToVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput() VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput {
	return i.ToVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationArgs) ToVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutputWithContext(ctx context.Context) VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput)
}

func (i *VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration)(nil)).Elem()
}

func (o VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput) ToVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput() VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput {
	return o
}

func (o VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput) ToVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutputWithContext(ctx context.Context) VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput {
	return o
}

func (o VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration] {
	return pulumix.Output[VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration](o, func(v VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration) string { return v.Unit })
}

// Number of time units. Minimum value of `0`.
func (o VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration](o, func(v VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration) int { return v.Value })
}

type VirtualNodeSpecListenerOutlierDetectionInterval struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value int `pulumi:"value"`
}

type VirtualNodeSpecListenerOutlierDetectionIntervalArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (VirtualNodeSpecListenerOutlierDetectionIntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerOutlierDetectionInterval)(nil)).Elem()
}

func (i VirtualNodeSpecListenerOutlierDetectionIntervalArgs) ToVirtualNodeSpecListenerOutlierDetectionIntervalOutput() VirtualNodeSpecListenerOutlierDetectionIntervalOutput {
	return i.ToVirtualNodeSpecListenerOutlierDetectionIntervalOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerOutlierDetectionIntervalArgs) ToVirtualNodeSpecListenerOutlierDetectionIntervalOutputWithContext(ctx context.Context) VirtualNodeSpecListenerOutlierDetectionIntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerOutlierDetectionIntervalOutput)
}

func (i *VirtualNodeSpecListenerOutlierDetectionIntervalArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerOutlierDetectionIntervalArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerOutlierDetectionIntervalOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerOutlierDetectionIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerOutlierDetectionInterval)(nil)).Elem()
}

func (o VirtualNodeSpecListenerOutlierDetectionIntervalOutput) ToVirtualNodeSpecListenerOutlierDetectionIntervalOutput() VirtualNodeSpecListenerOutlierDetectionIntervalOutput {
	return o
}

func (o VirtualNodeSpecListenerOutlierDetectionIntervalOutput) ToVirtualNodeSpecListenerOutlierDetectionIntervalOutputWithContext(ctx context.Context) VirtualNodeSpecListenerOutlierDetectionIntervalOutput {
	return o
}

func (o VirtualNodeSpecListenerOutlierDetectionIntervalOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerOutlierDetectionInterval] {
	return pulumix.Output[VirtualNodeSpecListenerOutlierDetectionInterval]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o VirtualNodeSpecListenerOutlierDetectionIntervalOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerOutlierDetectionInterval](o, func(v VirtualNodeSpecListenerOutlierDetectionInterval) string { return v.Unit })
}

// The specified value for the JSON. Must be between 1 and 100 characters in length.
func (o VirtualNodeSpecListenerOutlierDetectionIntervalOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerOutlierDetectionInterval](o, func(v VirtualNodeSpecListenerOutlierDetectionInterval) int { return v.Value })
}

type VirtualNodeSpecListenerPortMapping struct {
	// Port used for the port mapping.
	Port int `pulumi:"port"`
	// Protocol used for the port mapping. Valid values are `http`, `http2`, `tcp` and `grpc`.
	Protocol string `pulumi:"protocol"`
}

type VirtualNodeSpecListenerPortMappingArgs struct {
	// Port used for the port mapping.
	Port pulumix.Input[int] `pulumi:"port"`
	// Protocol used for the port mapping. Valid values are `http`, `http2`, `tcp` and `grpc`.
	Protocol pulumix.Input[string] `pulumi:"protocol"`
}

func (VirtualNodeSpecListenerPortMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerPortMapping)(nil)).Elem()
}

func (i VirtualNodeSpecListenerPortMappingArgs) ToVirtualNodeSpecListenerPortMappingOutput() VirtualNodeSpecListenerPortMappingOutput {
	return i.ToVirtualNodeSpecListenerPortMappingOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerPortMappingArgs) ToVirtualNodeSpecListenerPortMappingOutputWithContext(ctx context.Context) VirtualNodeSpecListenerPortMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerPortMappingOutput)
}

func (i *VirtualNodeSpecListenerPortMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerPortMappingArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerPortMappingOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerPortMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerPortMapping)(nil)).Elem()
}

func (o VirtualNodeSpecListenerPortMappingOutput) ToVirtualNodeSpecListenerPortMappingOutput() VirtualNodeSpecListenerPortMappingOutput {
	return o
}

func (o VirtualNodeSpecListenerPortMappingOutput) ToVirtualNodeSpecListenerPortMappingOutputWithContext(ctx context.Context) VirtualNodeSpecListenerPortMappingOutput {
	return o
}

func (o VirtualNodeSpecListenerPortMappingOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerPortMapping] {
	return pulumix.Output[VirtualNodeSpecListenerPortMapping]{
		OutputState: o.OutputState,
	}
}

// Port used for the port mapping.
func (o VirtualNodeSpecListenerPortMappingOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerPortMapping](o, func(v VirtualNodeSpecListenerPortMapping) int { return v.Port })
}

// Protocol used for the port mapping. Valid values are `http`, `http2`, `tcp` and `grpc`.
func (o VirtualNodeSpecListenerPortMappingOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerPortMapping](o, func(v VirtualNodeSpecListenerPortMapping) string { return v.Protocol })
}

type VirtualNodeSpecListenerTimeout struct {
	// Timeouts for gRPC listeners.
	Grpc *VirtualNodeSpecListenerTimeoutGrpc `pulumi:"grpc"`
	// Timeouts for HTTP listeners.
	Http *VirtualNodeSpecListenerTimeoutHttp `pulumi:"http"`
	// Timeouts for HTTP2 listeners.
	Http2 *VirtualNodeSpecListenerTimeoutHttp2 `pulumi:"http2"`
	// Timeouts for TCP listeners.
	Tcp *VirtualNodeSpecListenerTimeoutTcp `pulumi:"tcp"`
}

type VirtualNodeSpecListenerTimeoutArgs struct {
	// Timeouts for gRPC listeners.
	Grpc pulumix.Input[*VirtualNodeSpecListenerTimeoutGrpcArgs] `pulumi:"grpc"`
	// Timeouts for HTTP listeners.
	Http pulumix.Input[*VirtualNodeSpecListenerTimeoutHttpArgs] `pulumi:"http"`
	// Timeouts for HTTP2 listeners.
	Http2 pulumix.Input[*VirtualNodeSpecListenerTimeoutHttp2Args] `pulumi:"http2"`
	// Timeouts for TCP listeners.
	Tcp pulumix.Input[*VirtualNodeSpecListenerTimeoutTcpArgs] `pulumi:"tcp"`
}

func (VirtualNodeSpecListenerTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeout)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTimeoutArgs) ToVirtualNodeSpecListenerTimeoutOutput() VirtualNodeSpecListenerTimeoutOutput {
	return i.ToVirtualNodeSpecListenerTimeoutOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTimeoutArgs) ToVirtualNodeSpecListenerTimeoutOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTimeoutOutput)
}

func (i *VirtualNodeSpecListenerTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTimeoutArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTimeoutOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeout)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTimeoutOutput) ToVirtualNodeSpecListenerTimeoutOutput() VirtualNodeSpecListenerTimeoutOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutOutput) ToVirtualNodeSpecListenerTimeoutOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTimeout] {
	return pulumix.Output[VirtualNodeSpecListenerTimeout]{
		OutputState: o.OutputState,
	}
}

// Timeouts for gRPC listeners.
func (o VirtualNodeSpecListenerTimeoutOutput) Grpc() pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutGrpc, VirtualNodeSpecListenerTimeoutGrpcOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTimeout](o, func(v VirtualNodeSpecListenerTimeout) *VirtualNodeSpecListenerTimeoutGrpc { return v.Grpc })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutGrpc, VirtualNodeSpecListenerTimeoutGrpcOutput]{OutputState: value.OutputState}
}

// Timeouts for HTTP listeners.
func (o VirtualNodeSpecListenerTimeoutOutput) Http() pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutHttp, VirtualNodeSpecListenerTimeoutHttpOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTimeout](o, func(v VirtualNodeSpecListenerTimeout) *VirtualNodeSpecListenerTimeoutHttp { return v.Http })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutHttp, VirtualNodeSpecListenerTimeoutHttpOutput]{OutputState: value.OutputState}
}

// Timeouts for HTTP2 listeners.
func (o VirtualNodeSpecListenerTimeoutOutput) Http2() pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutHttp2, VirtualNodeSpecListenerTimeoutHttp2Output] {
	value := pulumix.Apply[VirtualNodeSpecListenerTimeout](o, func(v VirtualNodeSpecListenerTimeout) *VirtualNodeSpecListenerTimeoutHttp2 { return v.Http2 })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutHttp2, VirtualNodeSpecListenerTimeoutHttp2Output]{OutputState: value.OutputState}
}

// Timeouts for TCP listeners.
func (o VirtualNodeSpecListenerTimeoutOutput) Tcp() pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutTcp, VirtualNodeSpecListenerTimeoutTcpOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTimeout](o, func(v VirtualNodeSpecListenerTimeout) *VirtualNodeSpecListenerTimeoutTcp { return v.Tcp })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutTcp, VirtualNodeSpecListenerTimeoutTcpOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecListenerTimeoutGrpc struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle *VirtualNodeSpecListenerTimeoutGrpcIdle `pulumi:"idle"`
	// Per request timeout.
	PerRequest *VirtualNodeSpecListenerTimeoutGrpcPerRequest `pulumi:"perRequest"`
}

type VirtualNodeSpecListenerTimeoutGrpcArgs struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle pulumix.Input[*VirtualNodeSpecListenerTimeoutGrpcIdleArgs] `pulumi:"idle"`
	// Per request timeout.
	PerRequest pulumix.Input[*VirtualNodeSpecListenerTimeoutGrpcPerRequestArgs] `pulumi:"perRequest"`
}

func (VirtualNodeSpecListenerTimeoutGrpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutGrpc)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTimeoutGrpcArgs) ToVirtualNodeSpecListenerTimeoutGrpcOutput() VirtualNodeSpecListenerTimeoutGrpcOutput {
	return i.ToVirtualNodeSpecListenerTimeoutGrpcOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTimeoutGrpcArgs) ToVirtualNodeSpecListenerTimeoutGrpcOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutGrpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTimeoutGrpcOutput)
}

func (i *VirtualNodeSpecListenerTimeoutGrpcArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTimeoutGrpcArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTimeoutGrpcOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTimeoutGrpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutGrpc)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTimeoutGrpcOutput) ToVirtualNodeSpecListenerTimeoutGrpcOutput() VirtualNodeSpecListenerTimeoutGrpcOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutGrpcOutput) ToVirtualNodeSpecListenerTimeoutGrpcOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutGrpcOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutGrpcOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTimeoutGrpc] {
	return pulumix.Output[VirtualNodeSpecListenerTimeoutGrpc]{
		OutputState: o.OutputState,
	}
}

// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
func (o VirtualNodeSpecListenerTimeoutGrpcOutput) Idle() pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutGrpcIdle, VirtualNodeSpecListenerTimeoutGrpcIdleOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTimeoutGrpc](o, func(v VirtualNodeSpecListenerTimeoutGrpc) *VirtualNodeSpecListenerTimeoutGrpcIdle { return v.Idle })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutGrpcIdle, VirtualNodeSpecListenerTimeoutGrpcIdleOutput]{OutputState: value.OutputState}
}

// Per request timeout.
func (o VirtualNodeSpecListenerTimeoutGrpcOutput) PerRequest() pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutGrpcPerRequest, VirtualNodeSpecListenerTimeoutGrpcPerRequestOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTimeoutGrpc](o, func(v VirtualNodeSpecListenerTimeoutGrpc) *VirtualNodeSpecListenerTimeoutGrpcPerRequest {
		return v.PerRequest
	})
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutGrpcPerRequest, VirtualNodeSpecListenerTimeoutGrpcPerRequestOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecListenerTimeoutGrpcIdle struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value int `pulumi:"value"`
}

type VirtualNodeSpecListenerTimeoutGrpcIdleArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (VirtualNodeSpecListenerTimeoutGrpcIdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutGrpcIdle)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTimeoutGrpcIdleArgs) ToVirtualNodeSpecListenerTimeoutGrpcIdleOutput() VirtualNodeSpecListenerTimeoutGrpcIdleOutput {
	return i.ToVirtualNodeSpecListenerTimeoutGrpcIdleOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTimeoutGrpcIdleArgs) ToVirtualNodeSpecListenerTimeoutGrpcIdleOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutGrpcIdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTimeoutGrpcIdleOutput)
}

func (i *VirtualNodeSpecListenerTimeoutGrpcIdleArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTimeoutGrpcIdleArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTimeoutGrpcIdleOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTimeoutGrpcIdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutGrpcIdle)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTimeoutGrpcIdleOutput) ToVirtualNodeSpecListenerTimeoutGrpcIdleOutput() VirtualNodeSpecListenerTimeoutGrpcIdleOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutGrpcIdleOutput) ToVirtualNodeSpecListenerTimeoutGrpcIdleOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutGrpcIdleOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutGrpcIdleOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTimeoutGrpcIdle] {
	return pulumix.Output[VirtualNodeSpecListenerTimeoutGrpcIdle]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o VirtualNodeSpecListenerTimeoutGrpcIdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerTimeoutGrpcIdle](o, func(v VirtualNodeSpecListenerTimeoutGrpcIdle) string { return v.Unit })
}

// Number of time units. Minimum value of `0`.
func (o VirtualNodeSpecListenerTimeoutGrpcIdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerTimeoutGrpcIdle](o, func(v VirtualNodeSpecListenerTimeoutGrpcIdle) int { return v.Value })
}

type VirtualNodeSpecListenerTimeoutGrpcPerRequest struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value int `pulumi:"value"`
}

type VirtualNodeSpecListenerTimeoutGrpcPerRequestArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (VirtualNodeSpecListenerTimeoutGrpcPerRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutGrpcPerRequest)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTimeoutGrpcPerRequestArgs) ToVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput() VirtualNodeSpecListenerTimeoutGrpcPerRequestOutput {
	return i.ToVirtualNodeSpecListenerTimeoutGrpcPerRequestOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTimeoutGrpcPerRequestArgs) ToVirtualNodeSpecListenerTimeoutGrpcPerRequestOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutGrpcPerRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTimeoutGrpcPerRequestOutput)
}

func (i *VirtualNodeSpecListenerTimeoutGrpcPerRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTimeoutGrpcPerRequestArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTimeoutGrpcPerRequestOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTimeoutGrpcPerRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutGrpcPerRequest)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTimeoutGrpcPerRequestOutput) ToVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput() VirtualNodeSpecListenerTimeoutGrpcPerRequestOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutGrpcPerRequestOutput) ToVirtualNodeSpecListenerTimeoutGrpcPerRequestOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutGrpcPerRequestOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutGrpcPerRequestOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTimeoutGrpcPerRequest] {
	return pulumix.Output[VirtualNodeSpecListenerTimeoutGrpcPerRequest]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o VirtualNodeSpecListenerTimeoutGrpcPerRequestOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerTimeoutGrpcPerRequest](o, func(v VirtualNodeSpecListenerTimeoutGrpcPerRequest) string { return v.Unit })
}

// The specified value for the JSON. Must be between 1 and 100 characters in length.
func (o VirtualNodeSpecListenerTimeoutGrpcPerRequestOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerTimeoutGrpcPerRequest](o, func(v VirtualNodeSpecListenerTimeoutGrpcPerRequest) int { return v.Value })
}

type VirtualNodeSpecListenerTimeoutHttp2 struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle *VirtualNodeSpecListenerTimeoutHttp2Idle `pulumi:"idle"`
	// Per request timeout.
	PerRequest *VirtualNodeSpecListenerTimeoutHttp2PerRequest `pulumi:"perRequest"`
}

type VirtualNodeSpecListenerTimeoutHttp2Args struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle pulumix.Input[*VirtualNodeSpecListenerTimeoutHttp2IdleArgs] `pulumi:"idle"`
	// Per request timeout.
	PerRequest pulumix.Input[*VirtualNodeSpecListenerTimeoutHttp2PerRequestArgs] `pulumi:"perRequest"`
}

func (VirtualNodeSpecListenerTimeoutHttp2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutHttp2)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTimeoutHttp2Args) ToVirtualNodeSpecListenerTimeoutHttp2Output() VirtualNodeSpecListenerTimeoutHttp2Output {
	return i.ToVirtualNodeSpecListenerTimeoutHttp2OutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTimeoutHttp2Args) ToVirtualNodeSpecListenerTimeoutHttp2OutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutHttp2Output {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTimeoutHttp2Output)
}

func (i *VirtualNodeSpecListenerTimeoutHttp2Args) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTimeoutHttp2Args] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTimeoutHttp2Output struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTimeoutHttp2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutHttp2)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTimeoutHttp2Output) ToVirtualNodeSpecListenerTimeoutHttp2Output() VirtualNodeSpecListenerTimeoutHttp2Output {
	return o
}

func (o VirtualNodeSpecListenerTimeoutHttp2Output) ToVirtualNodeSpecListenerTimeoutHttp2OutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutHttp2Output {
	return o
}

func (o VirtualNodeSpecListenerTimeoutHttp2Output) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTimeoutHttp2] {
	return pulumix.Output[VirtualNodeSpecListenerTimeoutHttp2]{
		OutputState: o.OutputState,
	}
}

// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
func (o VirtualNodeSpecListenerTimeoutHttp2Output) Idle() pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutHttp2Idle, VirtualNodeSpecListenerTimeoutHttp2IdleOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTimeoutHttp2](o, func(v VirtualNodeSpecListenerTimeoutHttp2) *VirtualNodeSpecListenerTimeoutHttp2Idle { return v.Idle })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutHttp2Idle, VirtualNodeSpecListenerTimeoutHttp2IdleOutput]{OutputState: value.OutputState}
}

// Per request timeout.
func (o VirtualNodeSpecListenerTimeoutHttp2Output) PerRequest() pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutHttp2PerRequest, VirtualNodeSpecListenerTimeoutHttp2PerRequestOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTimeoutHttp2](o, func(v VirtualNodeSpecListenerTimeoutHttp2) *VirtualNodeSpecListenerTimeoutHttp2PerRequest {
		return v.PerRequest
	})
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutHttp2PerRequest, VirtualNodeSpecListenerTimeoutHttp2PerRequestOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecListenerTimeoutHttp2Idle struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value int `pulumi:"value"`
}

type VirtualNodeSpecListenerTimeoutHttp2IdleArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (VirtualNodeSpecListenerTimeoutHttp2IdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutHttp2Idle)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTimeoutHttp2IdleArgs) ToVirtualNodeSpecListenerTimeoutHttp2IdleOutput() VirtualNodeSpecListenerTimeoutHttp2IdleOutput {
	return i.ToVirtualNodeSpecListenerTimeoutHttp2IdleOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTimeoutHttp2IdleArgs) ToVirtualNodeSpecListenerTimeoutHttp2IdleOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutHttp2IdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTimeoutHttp2IdleOutput)
}

func (i *VirtualNodeSpecListenerTimeoutHttp2IdleArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTimeoutHttp2IdleArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTimeoutHttp2IdleOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTimeoutHttp2IdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutHttp2Idle)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTimeoutHttp2IdleOutput) ToVirtualNodeSpecListenerTimeoutHttp2IdleOutput() VirtualNodeSpecListenerTimeoutHttp2IdleOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutHttp2IdleOutput) ToVirtualNodeSpecListenerTimeoutHttp2IdleOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutHttp2IdleOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutHttp2IdleOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTimeoutHttp2Idle] {
	return pulumix.Output[VirtualNodeSpecListenerTimeoutHttp2Idle]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o VirtualNodeSpecListenerTimeoutHttp2IdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerTimeoutHttp2Idle](o, func(v VirtualNodeSpecListenerTimeoutHttp2Idle) string { return v.Unit })
}

// Number of time units. Minimum value of `0`.
func (o VirtualNodeSpecListenerTimeoutHttp2IdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerTimeoutHttp2Idle](o, func(v VirtualNodeSpecListenerTimeoutHttp2Idle) int { return v.Value })
}

type VirtualNodeSpecListenerTimeoutHttp2PerRequest struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value int `pulumi:"value"`
}

type VirtualNodeSpecListenerTimeoutHttp2PerRequestArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (VirtualNodeSpecListenerTimeoutHttp2PerRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutHttp2PerRequest)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTimeoutHttp2PerRequestArgs) ToVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput() VirtualNodeSpecListenerTimeoutHttp2PerRequestOutput {
	return i.ToVirtualNodeSpecListenerTimeoutHttp2PerRequestOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTimeoutHttp2PerRequestArgs) ToVirtualNodeSpecListenerTimeoutHttp2PerRequestOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutHttp2PerRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTimeoutHttp2PerRequestOutput)
}

func (i *VirtualNodeSpecListenerTimeoutHttp2PerRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTimeoutHttp2PerRequestArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTimeoutHttp2PerRequestOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTimeoutHttp2PerRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutHttp2PerRequest)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTimeoutHttp2PerRequestOutput) ToVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput() VirtualNodeSpecListenerTimeoutHttp2PerRequestOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutHttp2PerRequestOutput) ToVirtualNodeSpecListenerTimeoutHttp2PerRequestOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutHttp2PerRequestOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutHttp2PerRequestOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTimeoutHttp2PerRequest] {
	return pulumix.Output[VirtualNodeSpecListenerTimeoutHttp2PerRequest]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o VirtualNodeSpecListenerTimeoutHttp2PerRequestOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerTimeoutHttp2PerRequest](o, func(v VirtualNodeSpecListenerTimeoutHttp2PerRequest) string { return v.Unit })
}

// The specified value for the JSON. Must be between 1 and 100 characters in length.
func (o VirtualNodeSpecListenerTimeoutHttp2PerRequestOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerTimeoutHttp2PerRequest](o, func(v VirtualNodeSpecListenerTimeoutHttp2PerRequest) int { return v.Value })
}

type VirtualNodeSpecListenerTimeoutHttp struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle *VirtualNodeSpecListenerTimeoutHttpIdle `pulumi:"idle"`
	// Per request timeout.
	PerRequest *VirtualNodeSpecListenerTimeoutHttpPerRequest `pulumi:"perRequest"`
}

type VirtualNodeSpecListenerTimeoutHttpArgs struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle pulumix.Input[*VirtualNodeSpecListenerTimeoutHttpIdleArgs] `pulumi:"idle"`
	// Per request timeout.
	PerRequest pulumix.Input[*VirtualNodeSpecListenerTimeoutHttpPerRequestArgs] `pulumi:"perRequest"`
}

func (VirtualNodeSpecListenerTimeoutHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutHttp)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTimeoutHttpArgs) ToVirtualNodeSpecListenerTimeoutHttpOutput() VirtualNodeSpecListenerTimeoutHttpOutput {
	return i.ToVirtualNodeSpecListenerTimeoutHttpOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTimeoutHttpArgs) ToVirtualNodeSpecListenerTimeoutHttpOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTimeoutHttpOutput)
}

func (i *VirtualNodeSpecListenerTimeoutHttpArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTimeoutHttpArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTimeoutHttpOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTimeoutHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutHttp)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTimeoutHttpOutput) ToVirtualNodeSpecListenerTimeoutHttpOutput() VirtualNodeSpecListenerTimeoutHttpOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutHttpOutput) ToVirtualNodeSpecListenerTimeoutHttpOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutHttpOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutHttpOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTimeoutHttp] {
	return pulumix.Output[VirtualNodeSpecListenerTimeoutHttp]{
		OutputState: o.OutputState,
	}
}

// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
func (o VirtualNodeSpecListenerTimeoutHttpOutput) Idle() pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutHttpIdle, VirtualNodeSpecListenerTimeoutHttpIdleOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTimeoutHttp](o, func(v VirtualNodeSpecListenerTimeoutHttp) *VirtualNodeSpecListenerTimeoutHttpIdle { return v.Idle })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutHttpIdle, VirtualNodeSpecListenerTimeoutHttpIdleOutput]{OutputState: value.OutputState}
}

// Per request timeout.
func (o VirtualNodeSpecListenerTimeoutHttpOutput) PerRequest() pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutHttpPerRequest, VirtualNodeSpecListenerTimeoutHttpPerRequestOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTimeoutHttp](o, func(v VirtualNodeSpecListenerTimeoutHttp) *VirtualNodeSpecListenerTimeoutHttpPerRequest {
		return v.PerRequest
	})
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutHttpPerRequest, VirtualNodeSpecListenerTimeoutHttpPerRequestOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecListenerTimeoutHttpIdle struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value int `pulumi:"value"`
}

type VirtualNodeSpecListenerTimeoutHttpIdleArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (VirtualNodeSpecListenerTimeoutHttpIdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutHttpIdle)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTimeoutHttpIdleArgs) ToVirtualNodeSpecListenerTimeoutHttpIdleOutput() VirtualNodeSpecListenerTimeoutHttpIdleOutput {
	return i.ToVirtualNodeSpecListenerTimeoutHttpIdleOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTimeoutHttpIdleArgs) ToVirtualNodeSpecListenerTimeoutHttpIdleOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutHttpIdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTimeoutHttpIdleOutput)
}

func (i *VirtualNodeSpecListenerTimeoutHttpIdleArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTimeoutHttpIdleArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTimeoutHttpIdleOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTimeoutHttpIdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutHttpIdle)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTimeoutHttpIdleOutput) ToVirtualNodeSpecListenerTimeoutHttpIdleOutput() VirtualNodeSpecListenerTimeoutHttpIdleOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutHttpIdleOutput) ToVirtualNodeSpecListenerTimeoutHttpIdleOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutHttpIdleOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutHttpIdleOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTimeoutHttpIdle] {
	return pulumix.Output[VirtualNodeSpecListenerTimeoutHttpIdle]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o VirtualNodeSpecListenerTimeoutHttpIdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerTimeoutHttpIdle](o, func(v VirtualNodeSpecListenerTimeoutHttpIdle) string { return v.Unit })
}

// Number of time units. Minimum value of `0`.
func (o VirtualNodeSpecListenerTimeoutHttpIdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerTimeoutHttpIdle](o, func(v VirtualNodeSpecListenerTimeoutHttpIdle) int { return v.Value })
}

type VirtualNodeSpecListenerTimeoutHttpPerRequest struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value int `pulumi:"value"`
}

type VirtualNodeSpecListenerTimeoutHttpPerRequestArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (VirtualNodeSpecListenerTimeoutHttpPerRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutHttpPerRequest)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTimeoutHttpPerRequestArgs) ToVirtualNodeSpecListenerTimeoutHttpPerRequestOutput() VirtualNodeSpecListenerTimeoutHttpPerRequestOutput {
	return i.ToVirtualNodeSpecListenerTimeoutHttpPerRequestOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTimeoutHttpPerRequestArgs) ToVirtualNodeSpecListenerTimeoutHttpPerRequestOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutHttpPerRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTimeoutHttpPerRequestOutput)
}

func (i *VirtualNodeSpecListenerTimeoutHttpPerRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTimeoutHttpPerRequestArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTimeoutHttpPerRequestOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTimeoutHttpPerRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutHttpPerRequest)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTimeoutHttpPerRequestOutput) ToVirtualNodeSpecListenerTimeoutHttpPerRequestOutput() VirtualNodeSpecListenerTimeoutHttpPerRequestOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutHttpPerRequestOutput) ToVirtualNodeSpecListenerTimeoutHttpPerRequestOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutHttpPerRequestOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutHttpPerRequestOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTimeoutHttpPerRequest] {
	return pulumix.Output[VirtualNodeSpecListenerTimeoutHttpPerRequest]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o VirtualNodeSpecListenerTimeoutHttpPerRequestOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerTimeoutHttpPerRequest](o, func(v VirtualNodeSpecListenerTimeoutHttpPerRequest) string { return v.Unit })
}

// The specified value for the JSON. Must be between 1 and 100 characters in length.
func (o VirtualNodeSpecListenerTimeoutHttpPerRequestOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerTimeoutHttpPerRequest](o, func(v VirtualNodeSpecListenerTimeoutHttpPerRequest) int { return v.Value })
}

type VirtualNodeSpecListenerTimeoutTcp struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle *VirtualNodeSpecListenerTimeoutTcpIdle `pulumi:"idle"`
}

type VirtualNodeSpecListenerTimeoutTcpArgs struct {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle pulumix.Input[*VirtualNodeSpecListenerTimeoutTcpIdleArgs] `pulumi:"idle"`
}

func (VirtualNodeSpecListenerTimeoutTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutTcp)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTimeoutTcpArgs) ToVirtualNodeSpecListenerTimeoutTcpOutput() VirtualNodeSpecListenerTimeoutTcpOutput {
	return i.ToVirtualNodeSpecListenerTimeoutTcpOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTimeoutTcpArgs) ToVirtualNodeSpecListenerTimeoutTcpOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTimeoutTcpOutput)
}

func (i *VirtualNodeSpecListenerTimeoutTcpArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTimeoutTcpArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTimeoutTcpOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTimeoutTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutTcp)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTimeoutTcpOutput) ToVirtualNodeSpecListenerTimeoutTcpOutput() VirtualNodeSpecListenerTimeoutTcpOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutTcpOutput) ToVirtualNodeSpecListenerTimeoutTcpOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutTcpOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutTcpOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTimeoutTcp] {
	return pulumix.Output[VirtualNodeSpecListenerTimeoutTcp]{
		OutputState: o.OutputState,
	}
}

// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
func (o VirtualNodeSpecListenerTimeoutTcpOutput) Idle() pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutTcpIdle, VirtualNodeSpecListenerTimeoutTcpIdleOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTimeoutTcp](o, func(v VirtualNodeSpecListenerTimeoutTcp) *VirtualNodeSpecListenerTimeoutTcpIdle { return v.Idle })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTimeoutTcpIdle, VirtualNodeSpecListenerTimeoutTcpIdleOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecListenerTimeoutTcpIdle struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit string `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value int `pulumi:"value"`
}

type VirtualNodeSpecListenerTimeoutTcpIdleArgs struct {
	// Unit of time. Valid values: `ms`, `s`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Number of time units. Minimum value of `0`.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (VirtualNodeSpecListenerTimeoutTcpIdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutTcpIdle)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTimeoutTcpIdleArgs) ToVirtualNodeSpecListenerTimeoutTcpIdleOutput() VirtualNodeSpecListenerTimeoutTcpIdleOutput {
	return i.ToVirtualNodeSpecListenerTimeoutTcpIdleOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTimeoutTcpIdleArgs) ToVirtualNodeSpecListenerTimeoutTcpIdleOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutTcpIdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTimeoutTcpIdleOutput)
}

func (i *VirtualNodeSpecListenerTimeoutTcpIdleArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTimeoutTcpIdleArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTimeoutTcpIdleOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTimeoutTcpIdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTimeoutTcpIdle)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTimeoutTcpIdleOutput) ToVirtualNodeSpecListenerTimeoutTcpIdleOutput() VirtualNodeSpecListenerTimeoutTcpIdleOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutTcpIdleOutput) ToVirtualNodeSpecListenerTimeoutTcpIdleOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTimeoutTcpIdleOutput {
	return o
}

func (o VirtualNodeSpecListenerTimeoutTcpIdleOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTimeoutTcpIdle] {
	return pulumix.Output[VirtualNodeSpecListenerTimeoutTcpIdle]{
		OutputState: o.OutputState,
	}
}

// Unit of time. Valid values: `ms`, `s`.
func (o VirtualNodeSpecListenerTimeoutTcpIdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerTimeoutTcpIdle](o, func(v VirtualNodeSpecListenerTimeoutTcpIdle) string { return v.Unit })
}

// Number of time units. Minimum value of `0`.
func (o VirtualNodeSpecListenerTimeoutTcpIdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[VirtualNodeSpecListenerTimeoutTcpIdle](o, func(v VirtualNodeSpecListenerTimeoutTcpIdle) int { return v.Value })
}

type VirtualNodeSpecListenerTls struct {
	// Listener's TLS certificate.
	Certificate VirtualNodeSpecListenerTlsCertificate `pulumi:"certificate"`
	// Listener's TLS mode. Valid values: `DISABLED`, `PERMISSIVE`, `STRICT`.
	Mode string `pulumi:"mode"`
	// Listener's Transport Layer Security (TLS) validation context.
	Validation *VirtualNodeSpecListenerTlsValidation `pulumi:"validation"`
}

type VirtualNodeSpecListenerTlsArgs struct {
	// Listener's TLS certificate.
	Certificate pulumix.Input[*VirtualNodeSpecListenerTlsCertificateArgs] `pulumi:"certificate"`
	// Listener's TLS mode. Valid values: `DISABLED`, `PERMISSIVE`, `STRICT`.
	Mode pulumix.Input[string] `pulumi:"mode"`
	// Listener's Transport Layer Security (TLS) validation context.
	Validation pulumix.Input[*VirtualNodeSpecListenerTlsValidationArgs] `pulumi:"validation"`
}

func (VirtualNodeSpecListenerTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTls)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTlsArgs) ToVirtualNodeSpecListenerTlsOutput() VirtualNodeSpecListenerTlsOutput {
	return i.ToVirtualNodeSpecListenerTlsOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTlsArgs) ToVirtualNodeSpecListenerTlsOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTlsOutput)
}

func (i *VirtualNodeSpecListenerTlsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTlsArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTlsOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTls)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTlsOutput) ToVirtualNodeSpecListenerTlsOutput() VirtualNodeSpecListenerTlsOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsOutput) ToVirtualNodeSpecListenerTlsOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTls] {
	return pulumix.Output[VirtualNodeSpecListenerTls]{
		OutputState: o.OutputState,
	}
}

// Listener's TLS certificate.
func (o VirtualNodeSpecListenerTlsOutput) Certificate() pulumix.GPtrOutput[VirtualNodeSpecListenerTlsCertificate, VirtualNodeSpecListenerTlsCertificateOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTls](o, func(v VirtualNodeSpecListenerTls) VirtualNodeSpecListenerTlsCertificate { return v.Certificate })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTlsCertificate, VirtualNodeSpecListenerTlsCertificateOutput]{OutputState: value.OutputState}
}

// Listener's TLS mode. Valid values: `DISABLED`, `PERMISSIVE`, `STRICT`.
func (o VirtualNodeSpecListenerTlsOutput) Mode() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerTls](o, func(v VirtualNodeSpecListenerTls) string { return v.Mode })
}

// Listener's Transport Layer Security (TLS) validation context.
func (o VirtualNodeSpecListenerTlsOutput) Validation() pulumix.GPtrOutput[VirtualNodeSpecListenerTlsValidation, VirtualNodeSpecListenerTlsValidationOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTls](o, func(v VirtualNodeSpecListenerTls) *VirtualNodeSpecListenerTlsValidation { return v.Validation })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTlsValidation, VirtualNodeSpecListenerTlsValidationOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecListenerTlsCertificate struct {
	// An AWS Certificate Manager (ACM) certificate.
	Acm *VirtualNodeSpecListenerTlsCertificateAcm `pulumi:"acm"`
	// Local file certificate.
	File *VirtualNodeSpecListenerTlsCertificateFile `pulumi:"file"`
	// A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds *VirtualNodeSpecListenerTlsCertificateSds `pulumi:"sds"`
}

type VirtualNodeSpecListenerTlsCertificateArgs struct {
	// An AWS Certificate Manager (ACM) certificate.
	Acm pulumix.Input[*VirtualNodeSpecListenerTlsCertificateAcmArgs] `pulumi:"acm"`
	// Local file certificate.
	File pulumix.Input[*VirtualNodeSpecListenerTlsCertificateFileArgs] `pulumi:"file"`
	// A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds pulumix.Input[*VirtualNodeSpecListenerTlsCertificateSdsArgs] `pulumi:"sds"`
}

func (VirtualNodeSpecListenerTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsCertificate)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTlsCertificateArgs) ToVirtualNodeSpecListenerTlsCertificateOutput() VirtualNodeSpecListenerTlsCertificateOutput {
	return i.ToVirtualNodeSpecListenerTlsCertificateOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTlsCertificateArgs) ToVirtualNodeSpecListenerTlsCertificateOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTlsCertificateOutput)
}

func (i *VirtualNodeSpecListenerTlsCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTlsCertificateArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTlsCertificateOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsCertificate)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTlsCertificateOutput) ToVirtualNodeSpecListenerTlsCertificateOutput() VirtualNodeSpecListenerTlsCertificateOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsCertificateOutput) ToVirtualNodeSpecListenerTlsCertificateOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsCertificateOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTlsCertificate] {
	return pulumix.Output[VirtualNodeSpecListenerTlsCertificate]{
		OutputState: o.OutputState,
	}
}

// An AWS Certificate Manager (ACM) certificate.
func (o VirtualNodeSpecListenerTlsCertificateOutput) Acm() pulumix.GPtrOutput[VirtualNodeSpecListenerTlsCertificateAcm, VirtualNodeSpecListenerTlsCertificateAcmOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTlsCertificate](o, func(v VirtualNodeSpecListenerTlsCertificate) *VirtualNodeSpecListenerTlsCertificateAcm { return v.Acm })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTlsCertificateAcm, VirtualNodeSpecListenerTlsCertificateAcmOutput]{OutputState: value.OutputState}
}

// Local file certificate.
func (o VirtualNodeSpecListenerTlsCertificateOutput) File() pulumix.GPtrOutput[VirtualNodeSpecListenerTlsCertificateFile, VirtualNodeSpecListenerTlsCertificateFileOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTlsCertificate](o, func(v VirtualNodeSpecListenerTlsCertificate) *VirtualNodeSpecListenerTlsCertificateFile {
		return v.File
	})
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTlsCertificateFile, VirtualNodeSpecListenerTlsCertificateFileOutput]{OutputState: value.OutputState}
}

// A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
func (o VirtualNodeSpecListenerTlsCertificateOutput) Sds() pulumix.GPtrOutput[VirtualNodeSpecListenerTlsCertificateSds, VirtualNodeSpecListenerTlsCertificateSdsOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTlsCertificate](o, func(v VirtualNodeSpecListenerTlsCertificate) *VirtualNodeSpecListenerTlsCertificateSds { return v.Sds })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTlsCertificateSds, VirtualNodeSpecListenerTlsCertificateSdsOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecListenerTlsCertificateAcm struct {
	// ARN for the certificate.
	CertificateArn string `pulumi:"certificateArn"`
}

type VirtualNodeSpecListenerTlsCertificateAcmArgs struct {
	// ARN for the certificate.
	CertificateArn pulumix.Input[string] `pulumi:"certificateArn"`
}

func (VirtualNodeSpecListenerTlsCertificateAcmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsCertificateAcm)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTlsCertificateAcmArgs) ToVirtualNodeSpecListenerTlsCertificateAcmOutput() VirtualNodeSpecListenerTlsCertificateAcmOutput {
	return i.ToVirtualNodeSpecListenerTlsCertificateAcmOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTlsCertificateAcmArgs) ToVirtualNodeSpecListenerTlsCertificateAcmOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsCertificateAcmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTlsCertificateAcmOutput)
}

func (i *VirtualNodeSpecListenerTlsCertificateAcmArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTlsCertificateAcmArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTlsCertificateAcmOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTlsCertificateAcmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsCertificateAcm)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTlsCertificateAcmOutput) ToVirtualNodeSpecListenerTlsCertificateAcmOutput() VirtualNodeSpecListenerTlsCertificateAcmOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsCertificateAcmOutput) ToVirtualNodeSpecListenerTlsCertificateAcmOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsCertificateAcmOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsCertificateAcmOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTlsCertificateAcm] {
	return pulumix.Output[VirtualNodeSpecListenerTlsCertificateAcm]{
		OutputState: o.OutputState,
	}
}

// ARN for the certificate.
func (o VirtualNodeSpecListenerTlsCertificateAcmOutput) CertificateArn() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerTlsCertificateAcm](o, func(v VirtualNodeSpecListenerTlsCertificateAcm) string { return v.CertificateArn })
}

type VirtualNodeSpecListenerTlsCertificateFile struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain string `pulumi:"certificateChain"`
	// Private key for a certificate stored on the file system of the virtual node that the proxy is running on. Must be between 1 and 255 characters in length.
	PrivateKey string `pulumi:"privateKey"`
}

type VirtualNodeSpecListenerTlsCertificateFileArgs struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
	// Private key for a certificate stored on the file system of the virtual node that the proxy is running on. Must be between 1 and 255 characters in length.
	PrivateKey pulumix.Input[string] `pulumi:"privateKey"`
}

func (VirtualNodeSpecListenerTlsCertificateFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsCertificateFile)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTlsCertificateFileArgs) ToVirtualNodeSpecListenerTlsCertificateFileOutput() VirtualNodeSpecListenerTlsCertificateFileOutput {
	return i.ToVirtualNodeSpecListenerTlsCertificateFileOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTlsCertificateFileArgs) ToVirtualNodeSpecListenerTlsCertificateFileOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsCertificateFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTlsCertificateFileOutput)
}

func (i *VirtualNodeSpecListenerTlsCertificateFileArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTlsCertificateFileArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTlsCertificateFileOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTlsCertificateFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsCertificateFile)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTlsCertificateFileOutput) ToVirtualNodeSpecListenerTlsCertificateFileOutput() VirtualNodeSpecListenerTlsCertificateFileOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsCertificateFileOutput) ToVirtualNodeSpecListenerTlsCertificateFileOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsCertificateFileOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsCertificateFileOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTlsCertificateFile] {
	return pulumix.Output[VirtualNodeSpecListenerTlsCertificateFile]{
		OutputState: o.OutputState,
	}
}

// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
func (o VirtualNodeSpecListenerTlsCertificateFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerTlsCertificateFile](o, func(v VirtualNodeSpecListenerTlsCertificateFile) string { return v.CertificateChain })
}

// Private key for a certificate stored on the file system of the virtual node that the proxy is running on. Must be between 1 and 255 characters in length.
func (o VirtualNodeSpecListenerTlsCertificateFileOutput) PrivateKey() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerTlsCertificateFile](o, func(v VirtualNodeSpecListenerTlsCertificateFile) string { return v.PrivateKey })
}

type VirtualNodeSpecListenerTlsCertificateSds struct {
	// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName string `pulumi:"secretName"`
}

type VirtualNodeSpecListenerTlsCertificateSdsArgs struct {
	// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (VirtualNodeSpecListenerTlsCertificateSdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsCertificateSds)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTlsCertificateSdsArgs) ToVirtualNodeSpecListenerTlsCertificateSdsOutput() VirtualNodeSpecListenerTlsCertificateSdsOutput {
	return i.ToVirtualNodeSpecListenerTlsCertificateSdsOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTlsCertificateSdsArgs) ToVirtualNodeSpecListenerTlsCertificateSdsOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsCertificateSdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTlsCertificateSdsOutput)
}

func (i *VirtualNodeSpecListenerTlsCertificateSdsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTlsCertificateSdsArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTlsCertificateSdsOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTlsCertificateSdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsCertificateSds)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTlsCertificateSdsOutput) ToVirtualNodeSpecListenerTlsCertificateSdsOutput() VirtualNodeSpecListenerTlsCertificateSdsOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsCertificateSdsOutput) ToVirtualNodeSpecListenerTlsCertificateSdsOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsCertificateSdsOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsCertificateSdsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTlsCertificateSds] {
	return pulumix.Output[VirtualNodeSpecListenerTlsCertificateSds]{
		OutputState: o.OutputState,
	}
}

// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
func (o VirtualNodeSpecListenerTlsCertificateSdsOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerTlsCertificateSds](o, func(v VirtualNodeSpecListenerTlsCertificateSds) string { return v.SecretName })
}

type VirtualNodeSpecListenerTlsValidation struct {
	// SANs for a TLS validation context.
	SubjectAlternativeNames *VirtualNodeSpecListenerTlsValidationSubjectAlternativeNames `pulumi:"subjectAlternativeNames"`
	// TLS validation context trust.
	Trust VirtualNodeSpecListenerTlsValidationTrust `pulumi:"trust"`
}

type VirtualNodeSpecListenerTlsValidationArgs struct {
	// SANs for a TLS validation context.
	SubjectAlternativeNames pulumix.Input[*VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesArgs] `pulumi:"subjectAlternativeNames"`
	// TLS validation context trust.
	Trust pulumix.Input[*VirtualNodeSpecListenerTlsValidationTrustArgs] `pulumi:"trust"`
}

func (VirtualNodeSpecListenerTlsValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsValidation)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTlsValidationArgs) ToVirtualNodeSpecListenerTlsValidationOutput() VirtualNodeSpecListenerTlsValidationOutput {
	return i.ToVirtualNodeSpecListenerTlsValidationOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTlsValidationArgs) ToVirtualNodeSpecListenerTlsValidationOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTlsValidationOutput)
}

func (i *VirtualNodeSpecListenerTlsValidationArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTlsValidationArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTlsValidationOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTlsValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsValidation)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTlsValidationOutput) ToVirtualNodeSpecListenerTlsValidationOutput() VirtualNodeSpecListenerTlsValidationOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsValidationOutput) ToVirtualNodeSpecListenerTlsValidationOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsValidationOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsValidationOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTlsValidation] {
	return pulumix.Output[VirtualNodeSpecListenerTlsValidation]{
		OutputState: o.OutputState,
	}
}

// SANs for a TLS validation context.
func (o VirtualNodeSpecListenerTlsValidationOutput) SubjectAlternativeNames() pulumix.GPtrOutput[VirtualNodeSpecListenerTlsValidationSubjectAlternativeNames, VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTlsValidation](o, func(v VirtualNodeSpecListenerTlsValidation) *VirtualNodeSpecListenerTlsValidationSubjectAlternativeNames {
		return v.SubjectAlternativeNames
	})
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTlsValidationSubjectAlternativeNames, VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput]{OutputState: value.OutputState}
}

// TLS validation context trust.
func (o VirtualNodeSpecListenerTlsValidationOutput) Trust() pulumix.GPtrOutput[VirtualNodeSpecListenerTlsValidationTrust, VirtualNodeSpecListenerTlsValidationTrustOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTlsValidation](o, func(v VirtualNodeSpecListenerTlsValidation) VirtualNodeSpecListenerTlsValidationTrust { return v.Trust })
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTlsValidationTrust, VirtualNodeSpecListenerTlsValidationTrustOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecListenerTlsValidationSubjectAlternativeNames struct {
	// Criteria for determining a SAN's match.
	Match VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatch `pulumi:"match"`
}

type VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesArgs struct {
	// Criteria for determining a SAN's match.
	Match pulumix.Input[*VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchArgs] `pulumi:"match"`
}

func (VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsValidationSubjectAlternativeNames)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesArgs) ToVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput() VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput {
	return i.ToVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesArgs) ToVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput)
}

func (i *VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsValidationSubjectAlternativeNames)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput) ToVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput() VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput) ToVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTlsValidationSubjectAlternativeNames] {
	return pulumix.Output[VirtualNodeSpecListenerTlsValidationSubjectAlternativeNames]{
		OutputState: o.OutputState,
	}
}

// Criteria for determining a SAN's match.
func (o VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput) Match() pulumix.GPtrOutput[VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatch, VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTlsValidationSubjectAlternativeNames](o, func(v VirtualNodeSpecListenerTlsValidationSubjectAlternativeNames) VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatch {
		return v.Match
	})
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatch, VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatch struct {
	// Values sent must match the specified values exactly.
	Exacts []string `pulumi:"exacts"`
}

type VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchArgs struct {
	// Values sent must match the specified values exactly.
	Exacts pulumix.Input[[]string] `pulumi:"exacts"`
}

func (VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatch)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchArgs) ToVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput() VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput {
	return i.ToVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchArgs) ToVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput)
}

func (i *VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatch)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput) ToVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput() VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput) ToVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatch] {
	return pulumix.Output[VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatch]{
		OutputState: o.OutputState,
	}
}

// Values sent must match the specified values exactly.
func (o VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput) Exacts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatch](o, func(v VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatch) []string { return v.Exacts })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type VirtualNodeSpecListenerTlsValidationTrust struct {
	// TLS validation context trust for a local file certificate.
	File *VirtualNodeSpecListenerTlsValidationTrustFile `pulumi:"file"`
	// TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds *VirtualNodeSpecListenerTlsValidationTrustSds `pulumi:"sds"`
}

type VirtualNodeSpecListenerTlsValidationTrustArgs struct {
	// TLS validation context trust for a local file certificate.
	File pulumix.Input[*VirtualNodeSpecListenerTlsValidationTrustFileArgs] `pulumi:"file"`
	// TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
	Sds pulumix.Input[*VirtualNodeSpecListenerTlsValidationTrustSdsArgs] `pulumi:"sds"`
}

func (VirtualNodeSpecListenerTlsValidationTrustArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsValidationTrust)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTlsValidationTrustArgs) ToVirtualNodeSpecListenerTlsValidationTrustOutput() VirtualNodeSpecListenerTlsValidationTrustOutput {
	return i.ToVirtualNodeSpecListenerTlsValidationTrustOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTlsValidationTrustArgs) ToVirtualNodeSpecListenerTlsValidationTrustOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsValidationTrustOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTlsValidationTrustOutput)
}

func (i *VirtualNodeSpecListenerTlsValidationTrustArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTlsValidationTrustArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTlsValidationTrustOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTlsValidationTrustOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsValidationTrust)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTlsValidationTrustOutput) ToVirtualNodeSpecListenerTlsValidationTrustOutput() VirtualNodeSpecListenerTlsValidationTrustOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsValidationTrustOutput) ToVirtualNodeSpecListenerTlsValidationTrustOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsValidationTrustOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsValidationTrustOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTlsValidationTrust] {
	return pulumix.Output[VirtualNodeSpecListenerTlsValidationTrust]{
		OutputState: o.OutputState,
	}
}

// TLS validation context trust for a local file certificate.
func (o VirtualNodeSpecListenerTlsValidationTrustOutput) File() pulumix.GPtrOutput[VirtualNodeSpecListenerTlsValidationTrustFile, VirtualNodeSpecListenerTlsValidationTrustFileOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTlsValidationTrust](o, func(v VirtualNodeSpecListenerTlsValidationTrust) *VirtualNodeSpecListenerTlsValidationTrustFile {
		return v.File
	})
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTlsValidationTrustFile, VirtualNodeSpecListenerTlsValidationTrustFileOutput]{OutputState: value.OutputState}
}

// TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
func (o VirtualNodeSpecListenerTlsValidationTrustOutput) Sds() pulumix.GPtrOutput[VirtualNodeSpecListenerTlsValidationTrustSds, VirtualNodeSpecListenerTlsValidationTrustSdsOutput] {
	value := pulumix.Apply[VirtualNodeSpecListenerTlsValidationTrust](o, func(v VirtualNodeSpecListenerTlsValidationTrust) *VirtualNodeSpecListenerTlsValidationTrustSds {
		return v.Sds
	})
	return pulumix.GPtrOutput[VirtualNodeSpecListenerTlsValidationTrustSds, VirtualNodeSpecListenerTlsValidationTrustSdsOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecListenerTlsValidationTrustFile struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain string `pulumi:"certificateChain"`
}

type VirtualNodeSpecListenerTlsValidationTrustFileArgs struct {
	// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
}

func (VirtualNodeSpecListenerTlsValidationTrustFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsValidationTrustFile)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTlsValidationTrustFileArgs) ToVirtualNodeSpecListenerTlsValidationTrustFileOutput() VirtualNodeSpecListenerTlsValidationTrustFileOutput {
	return i.ToVirtualNodeSpecListenerTlsValidationTrustFileOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTlsValidationTrustFileArgs) ToVirtualNodeSpecListenerTlsValidationTrustFileOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsValidationTrustFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTlsValidationTrustFileOutput)
}

func (i *VirtualNodeSpecListenerTlsValidationTrustFileArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTlsValidationTrustFileArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTlsValidationTrustFileOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTlsValidationTrustFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsValidationTrustFile)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTlsValidationTrustFileOutput) ToVirtualNodeSpecListenerTlsValidationTrustFileOutput() VirtualNodeSpecListenerTlsValidationTrustFileOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsValidationTrustFileOutput) ToVirtualNodeSpecListenerTlsValidationTrustFileOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsValidationTrustFileOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsValidationTrustFileOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTlsValidationTrustFile] {
	return pulumix.Output[VirtualNodeSpecListenerTlsValidationTrustFile]{
		OutputState: o.OutputState,
	}
}

// Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
func (o VirtualNodeSpecListenerTlsValidationTrustFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerTlsValidationTrustFile](o, func(v VirtualNodeSpecListenerTlsValidationTrustFile) string { return v.CertificateChain })
}

type VirtualNodeSpecListenerTlsValidationTrustSds struct {
	// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName string `pulumi:"secretName"`
}

type VirtualNodeSpecListenerTlsValidationTrustSdsArgs struct {
	// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (VirtualNodeSpecListenerTlsValidationTrustSdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsValidationTrustSds)(nil)).Elem()
}

func (i VirtualNodeSpecListenerTlsValidationTrustSdsArgs) ToVirtualNodeSpecListenerTlsValidationTrustSdsOutput() VirtualNodeSpecListenerTlsValidationTrustSdsOutput {
	return i.ToVirtualNodeSpecListenerTlsValidationTrustSdsOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerTlsValidationTrustSdsArgs) ToVirtualNodeSpecListenerTlsValidationTrustSdsOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsValidationTrustSdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerTlsValidationTrustSdsOutput)
}

func (i *VirtualNodeSpecListenerTlsValidationTrustSdsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecListenerTlsValidationTrustSdsArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecListenerTlsValidationTrustSdsOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerTlsValidationTrustSdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerTlsValidationTrustSds)(nil)).Elem()
}

func (o VirtualNodeSpecListenerTlsValidationTrustSdsOutput) ToVirtualNodeSpecListenerTlsValidationTrustSdsOutput() VirtualNodeSpecListenerTlsValidationTrustSdsOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsValidationTrustSdsOutput) ToVirtualNodeSpecListenerTlsValidationTrustSdsOutputWithContext(ctx context.Context) VirtualNodeSpecListenerTlsValidationTrustSdsOutput {
	return o
}

func (o VirtualNodeSpecListenerTlsValidationTrustSdsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecListenerTlsValidationTrustSds] {
	return pulumix.Output[VirtualNodeSpecListenerTlsValidationTrustSds]{
		OutputState: o.OutputState,
	}
}

// Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
func (o VirtualNodeSpecListenerTlsValidationTrustSdsOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecListenerTlsValidationTrustSds](o, func(v VirtualNodeSpecListenerTlsValidationTrustSds) string { return v.SecretName })
}

type VirtualNodeSpecLogging struct {
	// Access log configuration for a virtual node.
	AccessLog *VirtualNodeSpecLoggingAccessLog `pulumi:"accessLog"`
}

type VirtualNodeSpecLoggingArgs struct {
	// Access log configuration for a virtual node.
	AccessLog pulumix.Input[*VirtualNodeSpecLoggingAccessLogArgs] `pulumi:"accessLog"`
}

func (VirtualNodeSpecLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLogging)(nil)).Elem()
}

func (i VirtualNodeSpecLoggingArgs) ToVirtualNodeSpecLoggingOutput() VirtualNodeSpecLoggingOutput {
	return i.ToVirtualNodeSpecLoggingOutputWithContext(context.Background())
}

func (i VirtualNodeSpecLoggingArgs) ToVirtualNodeSpecLoggingOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecLoggingOutput)
}

func (i *VirtualNodeSpecLoggingArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecLoggingArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecLoggingOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLogging)(nil)).Elem()
}

func (o VirtualNodeSpecLoggingOutput) ToVirtualNodeSpecLoggingOutput() VirtualNodeSpecLoggingOutput {
	return o
}

func (o VirtualNodeSpecLoggingOutput) ToVirtualNodeSpecLoggingOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingOutput {
	return o
}

func (o VirtualNodeSpecLoggingOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecLogging] {
	return pulumix.Output[VirtualNodeSpecLogging]{
		OutputState: o.OutputState,
	}
}

// Access log configuration for a virtual node.
func (o VirtualNodeSpecLoggingOutput) AccessLog() pulumix.GPtrOutput[VirtualNodeSpecLoggingAccessLog, VirtualNodeSpecLoggingAccessLogOutput] {
	value := pulumix.Apply[VirtualNodeSpecLogging](o, func(v VirtualNodeSpecLogging) *VirtualNodeSpecLoggingAccessLog { return v.AccessLog })
	return pulumix.GPtrOutput[VirtualNodeSpecLoggingAccessLog, VirtualNodeSpecLoggingAccessLogOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecLoggingAccessLog struct {
	// File object to send virtual node access logs to.
	File *VirtualNodeSpecLoggingAccessLogFile `pulumi:"file"`
}

type VirtualNodeSpecLoggingAccessLogArgs struct {
	// File object to send virtual node access logs to.
	File pulumix.Input[*VirtualNodeSpecLoggingAccessLogFileArgs] `pulumi:"file"`
}

func (VirtualNodeSpecLoggingAccessLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLoggingAccessLog)(nil)).Elem()
}

func (i VirtualNodeSpecLoggingAccessLogArgs) ToVirtualNodeSpecLoggingAccessLogOutput() VirtualNodeSpecLoggingAccessLogOutput {
	return i.ToVirtualNodeSpecLoggingAccessLogOutputWithContext(context.Background())
}

func (i VirtualNodeSpecLoggingAccessLogArgs) ToVirtualNodeSpecLoggingAccessLogOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecLoggingAccessLogOutput)
}

func (i *VirtualNodeSpecLoggingAccessLogArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecLoggingAccessLogArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecLoggingAccessLogOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecLoggingAccessLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLoggingAccessLog)(nil)).Elem()
}

func (o VirtualNodeSpecLoggingAccessLogOutput) ToVirtualNodeSpecLoggingAccessLogOutput() VirtualNodeSpecLoggingAccessLogOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogOutput) ToVirtualNodeSpecLoggingAccessLogOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecLoggingAccessLog] {
	return pulumix.Output[VirtualNodeSpecLoggingAccessLog]{
		OutputState: o.OutputState,
	}
}

// File object to send virtual node access logs to.
func (o VirtualNodeSpecLoggingAccessLogOutput) File() pulumix.GPtrOutput[VirtualNodeSpecLoggingAccessLogFile, VirtualNodeSpecLoggingAccessLogFileOutput] {
	value := pulumix.Apply[VirtualNodeSpecLoggingAccessLog](o, func(v VirtualNodeSpecLoggingAccessLog) *VirtualNodeSpecLoggingAccessLogFile { return v.File })
	return pulumix.GPtrOutput[VirtualNodeSpecLoggingAccessLogFile, VirtualNodeSpecLoggingAccessLogFileOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecLoggingAccessLogFile struct {
	// The specified format for the logs.
	Format *VirtualNodeSpecLoggingAccessLogFileFormat `pulumi:"format"`
	// File path to write access logs to. You can use `/dev/stdout` to send access logs to standard out. Must be between 1 and 255 characters in length.
	Path string `pulumi:"path"`
}

type VirtualNodeSpecLoggingAccessLogFileArgs struct {
	// The specified format for the logs.
	Format pulumix.Input[*VirtualNodeSpecLoggingAccessLogFileFormatArgs] `pulumi:"format"`
	// File path to write access logs to. You can use `/dev/stdout` to send access logs to standard out. Must be between 1 and 255 characters in length.
	Path pulumix.Input[string] `pulumi:"path"`
}

func (VirtualNodeSpecLoggingAccessLogFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLoggingAccessLogFile)(nil)).Elem()
}

func (i VirtualNodeSpecLoggingAccessLogFileArgs) ToVirtualNodeSpecLoggingAccessLogFileOutput() VirtualNodeSpecLoggingAccessLogFileOutput {
	return i.ToVirtualNodeSpecLoggingAccessLogFileOutputWithContext(context.Background())
}

func (i VirtualNodeSpecLoggingAccessLogFileArgs) ToVirtualNodeSpecLoggingAccessLogFileOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecLoggingAccessLogFileOutput)
}

func (i *VirtualNodeSpecLoggingAccessLogFileArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecLoggingAccessLogFileArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecLoggingAccessLogFileOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecLoggingAccessLogFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLoggingAccessLogFile)(nil)).Elem()
}

func (o VirtualNodeSpecLoggingAccessLogFileOutput) ToVirtualNodeSpecLoggingAccessLogFileOutput() VirtualNodeSpecLoggingAccessLogFileOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogFileOutput) ToVirtualNodeSpecLoggingAccessLogFileOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogFileOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogFileOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecLoggingAccessLogFile] {
	return pulumix.Output[VirtualNodeSpecLoggingAccessLogFile]{
		OutputState: o.OutputState,
	}
}

// The specified format for the logs.
func (o VirtualNodeSpecLoggingAccessLogFileOutput) Format() pulumix.GPtrOutput[VirtualNodeSpecLoggingAccessLogFileFormat, VirtualNodeSpecLoggingAccessLogFileFormatOutput] {
	value := pulumix.Apply[VirtualNodeSpecLoggingAccessLogFile](o, func(v VirtualNodeSpecLoggingAccessLogFile) *VirtualNodeSpecLoggingAccessLogFileFormat {
		return v.Format
	})
	return pulumix.GPtrOutput[VirtualNodeSpecLoggingAccessLogFileFormat, VirtualNodeSpecLoggingAccessLogFileFormatOutput]{OutputState: value.OutputState}
}

// File path to write access logs to. You can use `/dev/stdout` to send access logs to standard out. Must be between 1 and 255 characters in length.
func (o VirtualNodeSpecLoggingAccessLogFileOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecLoggingAccessLogFile](o, func(v VirtualNodeSpecLoggingAccessLogFile) string { return v.Path })
}

type VirtualNodeSpecLoggingAccessLogFileFormat struct {
	// The logging format for JSON.
	Jsons []VirtualNodeSpecLoggingAccessLogFileFormatJson `pulumi:"jsons"`
	// The logging format for text. Must be between 1 and 1000 characters in length.
	Text *string `pulumi:"text"`
}

type VirtualNodeSpecLoggingAccessLogFileFormatArgs struct {
	// The logging format for JSON.
	Jsons pulumix.Input[[]*VirtualNodeSpecLoggingAccessLogFileFormatJsonArgs] `pulumi:"jsons"`
	// The logging format for text. Must be between 1 and 1000 characters in length.
	Text pulumix.Input[*string] `pulumi:"text"`
}

func (VirtualNodeSpecLoggingAccessLogFileFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLoggingAccessLogFileFormat)(nil)).Elem()
}

func (i VirtualNodeSpecLoggingAccessLogFileFormatArgs) ToVirtualNodeSpecLoggingAccessLogFileFormatOutput() VirtualNodeSpecLoggingAccessLogFileFormatOutput {
	return i.ToVirtualNodeSpecLoggingAccessLogFileFormatOutputWithContext(context.Background())
}

func (i VirtualNodeSpecLoggingAccessLogFileFormatArgs) ToVirtualNodeSpecLoggingAccessLogFileFormatOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogFileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecLoggingAccessLogFileFormatOutput)
}

func (i *VirtualNodeSpecLoggingAccessLogFileFormatArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecLoggingAccessLogFileFormatArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecLoggingAccessLogFileFormatOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecLoggingAccessLogFileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLoggingAccessLogFileFormat)(nil)).Elem()
}

func (o VirtualNodeSpecLoggingAccessLogFileFormatOutput) ToVirtualNodeSpecLoggingAccessLogFileFormatOutput() VirtualNodeSpecLoggingAccessLogFileFormatOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogFileFormatOutput) ToVirtualNodeSpecLoggingAccessLogFileFormatOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogFileFormatOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogFileFormatOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecLoggingAccessLogFileFormat] {
	return pulumix.Output[VirtualNodeSpecLoggingAccessLogFileFormat]{
		OutputState: o.OutputState,
	}
}

// The logging format for JSON.
func (o VirtualNodeSpecLoggingAccessLogFileFormatOutput) Jsons() pulumix.GArrayOutput[VirtualNodeSpecLoggingAccessLogFileFormatJson, VirtualNodeSpecLoggingAccessLogFileFormatJsonOutput] {
	value := pulumix.Apply[VirtualNodeSpecLoggingAccessLogFileFormat](o, func(v VirtualNodeSpecLoggingAccessLogFileFormat) []VirtualNodeSpecLoggingAccessLogFileFormatJson {
		return v.Jsons
	})
	return pulumix.GArrayOutput[VirtualNodeSpecLoggingAccessLogFileFormatJson, VirtualNodeSpecLoggingAccessLogFileFormatJsonOutput]{OutputState: value.OutputState}
}

// The logging format for text. Must be between 1 and 1000 characters in length.
func (o VirtualNodeSpecLoggingAccessLogFileFormatOutput) Text() pulumix.Output[*string] {
	return pulumix.Apply[VirtualNodeSpecLoggingAccessLogFileFormat](o, func(v VirtualNodeSpecLoggingAccessLogFileFormat) *string { return v.Text })
}

type VirtualNodeSpecLoggingAccessLogFileFormatJson struct {
	// The specified key for the JSON. Must be between 1 and 100 characters in length.
	Key string `pulumi:"key"`
	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value string `pulumi:"value"`
}

type VirtualNodeSpecLoggingAccessLogFileFormatJsonArgs struct {
	// The specified key for the JSON. Must be between 1 and 100 characters in length.
	Key pulumix.Input[string] `pulumi:"key"`
	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (VirtualNodeSpecLoggingAccessLogFileFormatJsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLoggingAccessLogFileFormatJson)(nil)).Elem()
}

func (i VirtualNodeSpecLoggingAccessLogFileFormatJsonArgs) ToVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput() VirtualNodeSpecLoggingAccessLogFileFormatJsonOutput {
	return i.ToVirtualNodeSpecLoggingAccessLogFileFormatJsonOutputWithContext(context.Background())
}

func (i VirtualNodeSpecLoggingAccessLogFileFormatJsonArgs) ToVirtualNodeSpecLoggingAccessLogFileFormatJsonOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogFileFormatJsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecLoggingAccessLogFileFormatJsonOutput)
}

func (i *VirtualNodeSpecLoggingAccessLogFileFormatJsonArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecLoggingAccessLogFileFormatJsonArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecLoggingAccessLogFileFormatJsonOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecLoggingAccessLogFileFormatJsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLoggingAccessLogFileFormatJson)(nil)).Elem()
}

func (o VirtualNodeSpecLoggingAccessLogFileFormatJsonOutput) ToVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput() VirtualNodeSpecLoggingAccessLogFileFormatJsonOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogFileFormatJsonOutput) ToVirtualNodeSpecLoggingAccessLogFileFormatJsonOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogFileFormatJsonOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogFileFormatJsonOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecLoggingAccessLogFileFormatJson] {
	return pulumix.Output[VirtualNodeSpecLoggingAccessLogFileFormatJson]{
		OutputState: o.OutputState,
	}
}

// The specified key for the JSON. Must be between 1 and 100 characters in length.
func (o VirtualNodeSpecLoggingAccessLogFileFormatJsonOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecLoggingAccessLogFileFormatJson](o, func(v VirtualNodeSpecLoggingAccessLogFileFormatJson) string { return v.Key })
}

// The specified value for the JSON. Must be between 1 and 100 characters in length.
func (o VirtualNodeSpecLoggingAccessLogFileFormatJsonOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecLoggingAccessLogFileFormatJson](o, func(v VirtualNodeSpecLoggingAccessLogFileFormatJson) string { return v.Value })
}

type VirtualNodeSpecServiceDiscovery struct {
	// Any AWS Cloud Map information for the virtual node.
	AwsCloudMap *VirtualNodeSpecServiceDiscoveryAwsCloudMap `pulumi:"awsCloudMap"`
	// DNS service name for the virtual node.
	Dns *VirtualNodeSpecServiceDiscoveryDns `pulumi:"dns"`
}

type VirtualNodeSpecServiceDiscoveryArgs struct {
	// Any AWS Cloud Map information for the virtual node.
	AwsCloudMap pulumix.Input[*VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs] `pulumi:"awsCloudMap"`
	// DNS service name for the virtual node.
	Dns pulumix.Input[*VirtualNodeSpecServiceDiscoveryDnsArgs] `pulumi:"dns"`
}

func (VirtualNodeSpecServiceDiscoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecServiceDiscovery)(nil)).Elem()
}

func (i VirtualNodeSpecServiceDiscoveryArgs) ToVirtualNodeSpecServiceDiscoveryOutput() VirtualNodeSpecServiceDiscoveryOutput {
	return i.ToVirtualNodeSpecServiceDiscoveryOutputWithContext(context.Background())
}

func (i VirtualNodeSpecServiceDiscoveryArgs) ToVirtualNodeSpecServiceDiscoveryOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecServiceDiscoveryOutput)
}

func (i *VirtualNodeSpecServiceDiscoveryArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecServiceDiscoveryArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecServiceDiscoveryOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecServiceDiscoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecServiceDiscovery)(nil)).Elem()
}

func (o VirtualNodeSpecServiceDiscoveryOutput) ToVirtualNodeSpecServiceDiscoveryOutput() VirtualNodeSpecServiceDiscoveryOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryOutput) ToVirtualNodeSpecServiceDiscoveryOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecServiceDiscovery] {
	return pulumix.Output[VirtualNodeSpecServiceDiscovery]{
		OutputState: o.OutputState,
	}
}

// Any AWS Cloud Map information for the virtual node.
func (o VirtualNodeSpecServiceDiscoveryOutput) AwsCloudMap() pulumix.GPtrOutput[VirtualNodeSpecServiceDiscoveryAwsCloudMap, VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput] {
	value := pulumix.Apply[VirtualNodeSpecServiceDiscovery](o, func(v VirtualNodeSpecServiceDiscovery) *VirtualNodeSpecServiceDiscoveryAwsCloudMap {
		return v.AwsCloudMap
	})
	return pulumix.GPtrOutput[VirtualNodeSpecServiceDiscoveryAwsCloudMap, VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput]{OutputState: value.OutputState}
}

// DNS service name for the virtual node.
func (o VirtualNodeSpecServiceDiscoveryOutput) Dns() pulumix.GPtrOutput[VirtualNodeSpecServiceDiscoveryDns, VirtualNodeSpecServiceDiscoveryDnsOutput] {
	value := pulumix.Apply[VirtualNodeSpecServiceDiscovery](o, func(v VirtualNodeSpecServiceDiscovery) *VirtualNodeSpecServiceDiscoveryDns { return v.Dns })
	return pulumix.GPtrOutput[VirtualNodeSpecServiceDiscoveryDns, VirtualNodeSpecServiceDiscoveryDnsOutput]{OutputState: value.OutputState}
}

type VirtualNodeSpecServiceDiscoveryAwsCloudMap struct {
	// String map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
	Attributes map[string]string `pulumi:"attributes"`
	// Name of the AWS Cloud Map namespace to use.
	// Use the `servicediscovery.HttpNamespace` resource to configure a Cloud Map namespace. Must be between 1 and 1024 characters in length.
	NamespaceName string `pulumi:"namespaceName"`
	// Name of the AWS Cloud Map service to use. Use the `servicediscovery.Service` resource to configure a Cloud Map service. Must be between 1 and 1024 characters in length.
	ServiceName string `pulumi:"serviceName"`
}

type VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs struct {
	// String map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
	Attributes pulumix.Input[map[string]string] `pulumi:"attributes"`
	// Name of the AWS Cloud Map namespace to use.
	// Use the `servicediscovery.HttpNamespace` resource to configure a Cloud Map namespace. Must be between 1 and 1024 characters in length.
	NamespaceName pulumix.Input[string] `pulumi:"namespaceName"`
	// Name of the AWS Cloud Map service to use. Use the `servicediscovery.Service` resource to configure a Cloud Map service. Must be between 1 and 1024 characters in length.
	ServiceName pulumix.Input[string] `pulumi:"serviceName"`
}

func (VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecServiceDiscoveryAwsCloudMap)(nil)).Elem()
}

func (i VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput() VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput {
	return i.ToVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputWithContext(context.Background())
}

func (i VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput)
}

func (i *VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecServiceDiscoveryAwsCloudMap)(nil)).Elem()
}

func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput() VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecServiceDiscoveryAwsCloudMap] {
	return pulumix.Output[VirtualNodeSpecServiceDiscoveryAwsCloudMap]{
		OutputState: o.OutputState,
	}
}

// String map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) Attributes() pulumix.MapOutput[string] {
	value := pulumix.Apply[VirtualNodeSpecServiceDiscoveryAwsCloudMap](o, func(v VirtualNodeSpecServiceDiscoveryAwsCloudMap) map[string]string { return v.Attributes })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Name of the AWS Cloud Map namespace to use.
// Use the `servicediscovery.HttpNamespace` resource to configure a Cloud Map namespace. Must be between 1 and 1024 characters in length.
func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) NamespaceName() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecServiceDiscoveryAwsCloudMap](o, func(v VirtualNodeSpecServiceDiscoveryAwsCloudMap) string { return v.NamespaceName })
}

// Name of the AWS Cloud Map service to use. Use the `servicediscovery.Service` resource to configure a Cloud Map service. Must be between 1 and 1024 characters in length.
func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ServiceName() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecServiceDiscoveryAwsCloudMap](o, func(v VirtualNodeSpecServiceDiscoveryAwsCloudMap) string { return v.ServiceName })
}

type VirtualNodeSpecServiceDiscoveryDns struct {
	// DNS host name for your virtual node.
	Hostname string `pulumi:"hostname"`
	// The preferred IP version that this virtual node uses. Valid values: `IPv6_PREFERRED`, `IPv4_PREFERRED`, `IPv4_ONLY`, `IPv6_ONLY`.
	IpPreference *string `pulumi:"ipPreference"`
	// The DNS response type for the virtual node. Valid values: `LOADBALANCER`, `ENDPOINTS`.
	ResponseType *string `pulumi:"responseType"`
}

type VirtualNodeSpecServiceDiscoveryDnsArgs struct {
	// DNS host name for your virtual node.
	Hostname pulumix.Input[string] `pulumi:"hostname"`
	// The preferred IP version that this virtual node uses. Valid values: `IPv6_PREFERRED`, `IPv4_PREFERRED`, `IPv4_ONLY`, `IPv6_ONLY`.
	IpPreference pulumix.Input[*string] `pulumi:"ipPreference"`
	// The DNS response type for the virtual node. Valid values: `LOADBALANCER`, `ENDPOINTS`.
	ResponseType pulumix.Input[*string] `pulumi:"responseType"`
}

func (VirtualNodeSpecServiceDiscoveryDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecServiceDiscoveryDns)(nil)).Elem()
}

func (i VirtualNodeSpecServiceDiscoveryDnsArgs) ToVirtualNodeSpecServiceDiscoveryDnsOutput() VirtualNodeSpecServiceDiscoveryDnsOutput {
	return i.ToVirtualNodeSpecServiceDiscoveryDnsOutputWithContext(context.Background())
}

func (i VirtualNodeSpecServiceDiscoveryDnsArgs) ToVirtualNodeSpecServiceDiscoveryDnsOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecServiceDiscoveryDnsOutput)
}

func (i *VirtualNodeSpecServiceDiscoveryDnsArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualNodeSpecServiceDiscoveryDnsArgs] {
	return pulumix.Val(i)
}

type VirtualNodeSpecServiceDiscoveryDnsOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecServiceDiscoveryDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecServiceDiscoveryDns)(nil)).Elem()
}

func (o VirtualNodeSpecServiceDiscoveryDnsOutput) ToVirtualNodeSpecServiceDiscoveryDnsOutput() VirtualNodeSpecServiceDiscoveryDnsOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryDnsOutput) ToVirtualNodeSpecServiceDiscoveryDnsOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryDnsOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryDnsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNodeSpecServiceDiscoveryDns] {
	return pulumix.Output[VirtualNodeSpecServiceDiscoveryDns]{
		OutputState: o.OutputState,
	}
}

// DNS host name for your virtual node.
func (o VirtualNodeSpecServiceDiscoveryDnsOutput) Hostname() pulumix.Output[string] {
	return pulumix.Apply[VirtualNodeSpecServiceDiscoveryDns](o, func(v VirtualNodeSpecServiceDiscoveryDns) string { return v.Hostname })
}

// The preferred IP version that this virtual node uses. Valid values: `IPv6_PREFERRED`, `IPv4_PREFERRED`, `IPv4_ONLY`, `IPv6_ONLY`.
func (o VirtualNodeSpecServiceDiscoveryDnsOutput) IpPreference() pulumix.Output[*string] {
	return pulumix.Apply[VirtualNodeSpecServiceDiscoveryDns](o, func(v VirtualNodeSpecServiceDiscoveryDns) *string { return v.IpPreference })
}

// The DNS response type for the virtual node. Valid values: `LOADBALANCER`, `ENDPOINTS`.
func (o VirtualNodeSpecServiceDiscoveryDnsOutput) ResponseType() pulumix.Output[*string] {
	return pulumix.Apply[VirtualNodeSpecServiceDiscoveryDns](o, func(v VirtualNodeSpecServiceDiscoveryDns) *string { return v.ResponseType })
}

type VirtualRouterSpec struct {
	// Listeners that the virtual router is expected to receive inbound traffic from.
	// Currently only one listener is supported per virtual router.
	Listeners []VirtualRouterSpecListener `pulumi:"listeners"`
}

type VirtualRouterSpecArgs struct {
	// Listeners that the virtual router is expected to receive inbound traffic from.
	// Currently only one listener is supported per virtual router.
	Listeners pulumix.Input[[]*VirtualRouterSpecListenerArgs] `pulumi:"listeners"`
}

func (VirtualRouterSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRouterSpec)(nil)).Elem()
}

func (i VirtualRouterSpecArgs) ToVirtualRouterSpecOutput() VirtualRouterSpecOutput {
	return i.ToVirtualRouterSpecOutputWithContext(context.Background())
}

func (i VirtualRouterSpecArgs) ToVirtualRouterSpecOutputWithContext(ctx context.Context) VirtualRouterSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRouterSpecOutput)
}

func (i *VirtualRouterSpecArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualRouterSpecArgs] {
	return pulumix.Val(i)
}

type VirtualRouterSpecOutput struct{ *pulumi.OutputState }

func (VirtualRouterSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRouterSpec)(nil)).Elem()
}

func (o VirtualRouterSpecOutput) ToVirtualRouterSpecOutput() VirtualRouterSpecOutput {
	return o
}

func (o VirtualRouterSpecOutput) ToVirtualRouterSpecOutputWithContext(ctx context.Context) VirtualRouterSpecOutput {
	return o
}

func (o VirtualRouterSpecOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualRouterSpec] {
	return pulumix.Output[VirtualRouterSpec]{
		OutputState: o.OutputState,
	}
}

// Listeners that the virtual router is expected to receive inbound traffic from.
// Currently only one listener is supported per virtual router.
func (o VirtualRouterSpecOutput) Listeners() pulumix.GArrayOutput[VirtualRouterSpecListener, VirtualRouterSpecListenerOutput] {
	value := pulumix.Apply[VirtualRouterSpec](o, func(v VirtualRouterSpec) []VirtualRouterSpecListener { return v.Listeners })
	return pulumix.GArrayOutput[VirtualRouterSpecListener, VirtualRouterSpecListenerOutput]{OutputState: value.OutputState}
}

type VirtualRouterSpecListener struct {
	// Port mapping information for the listener.
	PortMapping VirtualRouterSpecListenerPortMapping `pulumi:"portMapping"`
}

type VirtualRouterSpecListenerArgs struct {
	// Port mapping information for the listener.
	PortMapping pulumix.Input[*VirtualRouterSpecListenerPortMappingArgs] `pulumi:"portMapping"`
}

func (VirtualRouterSpecListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRouterSpecListener)(nil)).Elem()
}

func (i VirtualRouterSpecListenerArgs) ToVirtualRouterSpecListenerOutput() VirtualRouterSpecListenerOutput {
	return i.ToVirtualRouterSpecListenerOutputWithContext(context.Background())
}

func (i VirtualRouterSpecListenerArgs) ToVirtualRouterSpecListenerOutputWithContext(ctx context.Context) VirtualRouterSpecListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRouterSpecListenerOutput)
}

func (i *VirtualRouterSpecListenerArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualRouterSpecListenerArgs] {
	return pulumix.Val(i)
}

type VirtualRouterSpecListenerOutput struct{ *pulumi.OutputState }

func (VirtualRouterSpecListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRouterSpecListener)(nil)).Elem()
}

func (o VirtualRouterSpecListenerOutput) ToVirtualRouterSpecListenerOutput() VirtualRouterSpecListenerOutput {
	return o
}

func (o VirtualRouterSpecListenerOutput) ToVirtualRouterSpecListenerOutputWithContext(ctx context.Context) VirtualRouterSpecListenerOutput {
	return o
}

func (o VirtualRouterSpecListenerOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualRouterSpecListener] {
	return pulumix.Output[VirtualRouterSpecListener]{
		OutputState: o.OutputState,
	}
}

// Port mapping information for the listener.
func (o VirtualRouterSpecListenerOutput) PortMapping() pulumix.GPtrOutput[VirtualRouterSpecListenerPortMapping, VirtualRouterSpecListenerPortMappingOutput] {
	value := pulumix.Apply[VirtualRouterSpecListener](o, func(v VirtualRouterSpecListener) VirtualRouterSpecListenerPortMapping { return v.PortMapping })
	return pulumix.GPtrOutput[VirtualRouterSpecListenerPortMapping, VirtualRouterSpecListenerPortMappingOutput]{OutputState: value.OutputState}
}

type VirtualRouterSpecListenerPortMapping struct {
	// Port used for the port mapping.
	Port int `pulumi:"port"`
	// Protocol used for the port mapping. Valid values are `http`,`http2`, `tcp` and `grpc`.
	Protocol string `pulumi:"protocol"`
}

type VirtualRouterSpecListenerPortMappingArgs struct {
	// Port used for the port mapping.
	Port pulumix.Input[int] `pulumi:"port"`
	// Protocol used for the port mapping. Valid values are `http`,`http2`, `tcp` and `grpc`.
	Protocol pulumix.Input[string] `pulumi:"protocol"`
}

func (VirtualRouterSpecListenerPortMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRouterSpecListenerPortMapping)(nil)).Elem()
}

func (i VirtualRouterSpecListenerPortMappingArgs) ToVirtualRouterSpecListenerPortMappingOutput() VirtualRouterSpecListenerPortMappingOutput {
	return i.ToVirtualRouterSpecListenerPortMappingOutputWithContext(context.Background())
}

func (i VirtualRouterSpecListenerPortMappingArgs) ToVirtualRouterSpecListenerPortMappingOutputWithContext(ctx context.Context) VirtualRouterSpecListenerPortMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRouterSpecListenerPortMappingOutput)
}

func (i *VirtualRouterSpecListenerPortMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualRouterSpecListenerPortMappingArgs] {
	return pulumix.Val(i)
}

type VirtualRouterSpecListenerPortMappingOutput struct{ *pulumi.OutputState }

func (VirtualRouterSpecListenerPortMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRouterSpecListenerPortMapping)(nil)).Elem()
}

func (o VirtualRouterSpecListenerPortMappingOutput) ToVirtualRouterSpecListenerPortMappingOutput() VirtualRouterSpecListenerPortMappingOutput {
	return o
}

func (o VirtualRouterSpecListenerPortMappingOutput) ToVirtualRouterSpecListenerPortMappingOutputWithContext(ctx context.Context) VirtualRouterSpecListenerPortMappingOutput {
	return o
}

func (o VirtualRouterSpecListenerPortMappingOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualRouterSpecListenerPortMapping] {
	return pulumix.Output[VirtualRouterSpecListenerPortMapping]{
		OutputState: o.OutputState,
	}
}

// Port used for the port mapping.
func (o VirtualRouterSpecListenerPortMappingOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[VirtualRouterSpecListenerPortMapping](o, func(v VirtualRouterSpecListenerPortMapping) int { return v.Port })
}

// Protocol used for the port mapping. Valid values are `http`,`http2`, `tcp` and `grpc`.
func (o VirtualRouterSpecListenerPortMappingOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[VirtualRouterSpecListenerPortMapping](o, func(v VirtualRouterSpecListenerPortMapping) string { return v.Protocol })
}

type VirtualServiceSpec struct {
	// App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
	Provider *VirtualServiceSpecProvider `pulumi:"provider"`
}

type VirtualServiceSpecArgs struct {
	// App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
	Provider pulumix.Input[*VirtualServiceSpecProviderArgs] `pulumi:"provider"`
}

func (VirtualServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpec)(nil)).Elem()
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecOutput() VirtualServiceSpecOutput {
	return i.ToVirtualServiceSpecOutputWithContext(context.Background())
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecOutputWithContext(ctx context.Context) VirtualServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecOutput)
}

func (i *VirtualServiceSpecArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualServiceSpecArgs] {
	return pulumix.Val(i)
}

type VirtualServiceSpecOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpec)(nil)).Elem()
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecOutput() VirtualServiceSpecOutput {
	return o
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecOutputWithContext(ctx context.Context) VirtualServiceSpecOutput {
	return o
}

func (o VirtualServiceSpecOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualServiceSpec] {
	return pulumix.Output[VirtualServiceSpec]{
		OutputState: o.OutputState,
	}
}

// App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
func (o VirtualServiceSpecOutput) Provider() pulumix.GPtrOutput[VirtualServiceSpecProvider, VirtualServiceSpecProviderOutput] {
	value := pulumix.Apply[VirtualServiceSpec](o, func(v VirtualServiceSpec) *VirtualServiceSpecProvider { return v.Provider })
	return pulumix.GPtrOutput[VirtualServiceSpecProvider, VirtualServiceSpecProviderOutput]{OutputState: value.OutputState}
}

type VirtualServiceSpecProvider struct {
	// Virtual node associated with a virtual service.
	VirtualNode *VirtualServiceSpecProviderVirtualNode `pulumi:"virtualNode"`
	// Virtual router associated with a virtual service.
	VirtualRouter *VirtualServiceSpecProviderVirtualRouter `pulumi:"virtualRouter"`
}

type VirtualServiceSpecProviderArgs struct {
	// Virtual node associated with a virtual service.
	VirtualNode pulumix.Input[*VirtualServiceSpecProviderVirtualNodeArgs] `pulumi:"virtualNode"`
	// Virtual router associated with a virtual service.
	VirtualRouter pulumix.Input[*VirtualServiceSpecProviderVirtualRouterArgs] `pulumi:"virtualRouter"`
}

func (VirtualServiceSpecProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecProvider)(nil)).Elem()
}

func (i VirtualServiceSpecProviderArgs) ToVirtualServiceSpecProviderOutput() VirtualServiceSpecProviderOutput {
	return i.ToVirtualServiceSpecProviderOutputWithContext(context.Background())
}

func (i VirtualServiceSpecProviderArgs) ToVirtualServiceSpecProviderOutputWithContext(ctx context.Context) VirtualServiceSpecProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecProviderOutput)
}

func (i *VirtualServiceSpecProviderArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualServiceSpecProviderArgs] {
	return pulumix.Val(i)
}

type VirtualServiceSpecProviderOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecProvider)(nil)).Elem()
}

func (o VirtualServiceSpecProviderOutput) ToVirtualServiceSpecProviderOutput() VirtualServiceSpecProviderOutput {
	return o
}

func (o VirtualServiceSpecProviderOutput) ToVirtualServiceSpecProviderOutputWithContext(ctx context.Context) VirtualServiceSpecProviderOutput {
	return o
}

func (o VirtualServiceSpecProviderOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualServiceSpecProvider] {
	return pulumix.Output[VirtualServiceSpecProvider]{
		OutputState: o.OutputState,
	}
}

// Virtual node associated with a virtual service.
func (o VirtualServiceSpecProviderOutput) VirtualNode() pulumix.GPtrOutput[VirtualServiceSpecProviderVirtualNode, VirtualServiceSpecProviderVirtualNodeOutput] {
	value := pulumix.Apply[VirtualServiceSpecProvider](o, func(v VirtualServiceSpecProvider) *VirtualServiceSpecProviderVirtualNode { return v.VirtualNode })
	return pulumix.GPtrOutput[VirtualServiceSpecProviderVirtualNode, VirtualServiceSpecProviderVirtualNodeOutput]{OutputState: value.OutputState}
}

// Virtual router associated with a virtual service.
func (o VirtualServiceSpecProviderOutput) VirtualRouter() pulumix.GPtrOutput[VirtualServiceSpecProviderVirtualRouter, VirtualServiceSpecProviderVirtualRouterOutput] {
	value := pulumix.Apply[VirtualServiceSpecProvider](o, func(v VirtualServiceSpecProvider) *VirtualServiceSpecProviderVirtualRouter { return v.VirtualRouter })
	return pulumix.GPtrOutput[VirtualServiceSpecProviderVirtualRouter, VirtualServiceSpecProviderVirtualRouterOutput]{OutputState: value.OutputState}
}

type VirtualServiceSpecProviderVirtualNode struct {
	// Name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.
	VirtualNodeName string `pulumi:"virtualNodeName"`
}

type VirtualServiceSpecProviderVirtualNodeArgs struct {
	// Name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.
	VirtualNodeName pulumix.Input[string] `pulumi:"virtualNodeName"`
}

func (VirtualServiceSpecProviderVirtualNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecProviderVirtualNode)(nil)).Elem()
}

func (i VirtualServiceSpecProviderVirtualNodeArgs) ToVirtualServiceSpecProviderVirtualNodeOutput() VirtualServiceSpecProviderVirtualNodeOutput {
	return i.ToVirtualServiceSpecProviderVirtualNodeOutputWithContext(context.Background())
}

func (i VirtualServiceSpecProviderVirtualNodeArgs) ToVirtualServiceSpecProviderVirtualNodeOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecProviderVirtualNodeOutput)
}

func (i *VirtualServiceSpecProviderVirtualNodeArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualServiceSpecProviderVirtualNodeArgs] {
	return pulumix.Val(i)
}

type VirtualServiceSpecProviderVirtualNodeOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecProviderVirtualNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecProviderVirtualNode)(nil)).Elem()
}

func (o VirtualServiceSpecProviderVirtualNodeOutput) ToVirtualServiceSpecProviderVirtualNodeOutput() VirtualServiceSpecProviderVirtualNodeOutput {
	return o
}

func (o VirtualServiceSpecProviderVirtualNodeOutput) ToVirtualServiceSpecProviderVirtualNodeOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualNodeOutput {
	return o
}

func (o VirtualServiceSpecProviderVirtualNodeOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualServiceSpecProviderVirtualNode] {
	return pulumix.Output[VirtualServiceSpecProviderVirtualNode]{
		OutputState: o.OutputState,
	}
}

// Name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.
func (o VirtualServiceSpecProviderVirtualNodeOutput) VirtualNodeName() pulumix.Output[string] {
	return pulumix.Apply[VirtualServiceSpecProviderVirtualNode](o, func(v VirtualServiceSpecProviderVirtualNode) string { return v.VirtualNodeName })
}

type VirtualServiceSpecProviderVirtualRouter struct {
	// Name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.
	VirtualRouterName string `pulumi:"virtualRouterName"`
}

type VirtualServiceSpecProviderVirtualRouterArgs struct {
	// Name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.
	VirtualRouterName pulumix.Input[string] `pulumi:"virtualRouterName"`
}

func (VirtualServiceSpecProviderVirtualRouterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecProviderVirtualRouter)(nil)).Elem()
}

func (i VirtualServiceSpecProviderVirtualRouterArgs) ToVirtualServiceSpecProviderVirtualRouterOutput() VirtualServiceSpecProviderVirtualRouterOutput {
	return i.ToVirtualServiceSpecProviderVirtualRouterOutputWithContext(context.Background())
}

func (i VirtualServiceSpecProviderVirtualRouterArgs) ToVirtualServiceSpecProviderVirtualRouterOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualRouterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecProviderVirtualRouterOutput)
}

func (i *VirtualServiceSpecProviderVirtualRouterArgs) ToOutput(ctx context.Context) pulumix.Output[*VirtualServiceSpecProviderVirtualRouterArgs] {
	return pulumix.Val(i)
}

type VirtualServiceSpecProviderVirtualRouterOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecProviderVirtualRouterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecProviderVirtualRouter)(nil)).Elem()
}

func (o VirtualServiceSpecProviderVirtualRouterOutput) ToVirtualServiceSpecProviderVirtualRouterOutput() VirtualServiceSpecProviderVirtualRouterOutput {
	return o
}

func (o VirtualServiceSpecProviderVirtualRouterOutput) ToVirtualServiceSpecProviderVirtualRouterOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualRouterOutput {
	return o
}

func (o VirtualServiceSpecProviderVirtualRouterOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualServiceSpecProviderVirtualRouter] {
	return pulumix.Output[VirtualServiceSpecProviderVirtualRouter]{
		OutputState: o.OutputState,
	}
}

// Name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.
func (o VirtualServiceSpecProviderVirtualRouterOutput) VirtualRouterName() pulumix.Output[string] {
	return pulumix.Apply[VirtualServiceSpecProviderVirtualRouter](o, func(v VirtualServiceSpecProviderVirtualRouter) string { return v.VirtualRouterName })
}

type GetGatewayRouteSpec struct {
	GrpcRoutes  []GetGatewayRouteSpecGrpcRoute  `pulumi:"grpcRoutes"`
	Http2Routes []GetGatewayRouteSpecHttp2Route `pulumi:"http2Routes"`
	HttpRoutes  []GetGatewayRouteSpecHttpRoute  `pulumi:"httpRoutes"`
	Priority    int                             `pulumi:"priority"`
}

type GetGatewayRouteSpecArgs struct {
	GrpcRoutes  pulumix.Input[[]*GetGatewayRouteSpecGrpcRouteArgs]  `pulumi:"grpcRoutes"`
	Http2Routes pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteArgs] `pulumi:"http2Routes"`
	HttpRoutes  pulumix.Input[[]*GetGatewayRouteSpecHttpRouteArgs]  `pulumi:"httpRoutes"`
	Priority    pulumix.Input[int]                                  `pulumi:"priority"`
}

func (GetGatewayRouteSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpec)(nil)).Elem()
}

func (i GetGatewayRouteSpecArgs) ToGetGatewayRouteSpecOutput() GetGatewayRouteSpecOutput {
	return i.ToGetGatewayRouteSpecOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecArgs) ToGetGatewayRouteSpecOutputWithContext(ctx context.Context) GetGatewayRouteSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecOutput)
}

func (i *GetGatewayRouteSpecArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpec)(nil)).Elem()
}

func (o GetGatewayRouteSpecOutput) ToGetGatewayRouteSpecOutput() GetGatewayRouteSpecOutput {
	return o
}

func (o GetGatewayRouteSpecOutput) ToGetGatewayRouteSpecOutputWithContext(ctx context.Context) GetGatewayRouteSpecOutput {
	return o
}

func (o GetGatewayRouteSpecOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpec] {
	return pulumix.Output[GetGatewayRouteSpec]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecOutput) GrpcRoutes() pulumix.GArrayOutput[GetGatewayRouteSpecGrpcRoute, GetGatewayRouteSpecGrpcRouteOutput] {
	value := pulumix.Apply[GetGatewayRouteSpec](o, func(v GetGatewayRouteSpec) []GetGatewayRouteSpecGrpcRoute { return v.GrpcRoutes })
	return pulumix.GArrayOutput[GetGatewayRouteSpecGrpcRoute, GetGatewayRouteSpecGrpcRouteOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecOutput) Http2Routes() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2Route, GetGatewayRouteSpecHttp2RouteOutput] {
	value := pulumix.Apply[GetGatewayRouteSpec](o, func(v GetGatewayRouteSpec) []GetGatewayRouteSpecHttp2Route { return v.Http2Routes })
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2Route, GetGatewayRouteSpecHttp2RouteOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecOutput) HttpRoutes() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRoute, GetGatewayRouteSpecHttpRouteOutput] {
	value := pulumix.Apply[GetGatewayRouteSpec](o, func(v GetGatewayRouteSpec) []GetGatewayRouteSpecHttpRoute { return v.HttpRoutes })
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRoute, GetGatewayRouteSpecHttpRouteOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecOutput) Priority() pulumix.Output[int] {
	return pulumix.Apply[GetGatewayRouteSpec](o, func(v GetGatewayRouteSpec) int { return v.Priority })
}

type GetGatewayRouteSpecGrpcRoute struct {
	Actions []GetGatewayRouteSpecGrpcRouteAction `pulumi:"actions"`
	Matches []GetGatewayRouteSpecGrpcRouteMatch  `pulumi:"matches"`
}

type GetGatewayRouteSpecGrpcRouteArgs struct {
	Actions pulumix.Input[[]*GetGatewayRouteSpecGrpcRouteActionArgs] `pulumi:"actions"`
	Matches pulumix.Input[[]*GetGatewayRouteSpecGrpcRouteMatchArgs]  `pulumi:"matches"`
}

func (GetGatewayRouteSpecGrpcRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecGrpcRoute)(nil)).Elem()
}

func (i GetGatewayRouteSpecGrpcRouteArgs) ToGetGatewayRouteSpecGrpcRouteOutput() GetGatewayRouteSpecGrpcRouteOutput {
	return i.ToGetGatewayRouteSpecGrpcRouteOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecGrpcRouteArgs) ToGetGatewayRouteSpecGrpcRouteOutputWithContext(ctx context.Context) GetGatewayRouteSpecGrpcRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecGrpcRouteOutput)
}

func (i *GetGatewayRouteSpecGrpcRouteArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecGrpcRouteArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecGrpcRouteOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecGrpcRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecGrpcRoute)(nil)).Elem()
}

func (o GetGatewayRouteSpecGrpcRouteOutput) ToGetGatewayRouteSpecGrpcRouteOutput() GetGatewayRouteSpecGrpcRouteOutput {
	return o
}

func (o GetGatewayRouteSpecGrpcRouteOutput) ToGetGatewayRouteSpecGrpcRouteOutputWithContext(ctx context.Context) GetGatewayRouteSpecGrpcRouteOutput {
	return o
}

func (o GetGatewayRouteSpecGrpcRouteOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecGrpcRoute] {
	return pulumix.Output[GetGatewayRouteSpecGrpcRoute]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecGrpcRouteOutput) Actions() pulumix.GArrayOutput[GetGatewayRouteSpecGrpcRouteAction, GetGatewayRouteSpecGrpcRouteActionOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecGrpcRoute](o, func(v GetGatewayRouteSpecGrpcRoute) []GetGatewayRouteSpecGrpcRouteAction { return v.Actions })
	return pulumix.GArrayOutput[GetGatewayRouteSpecGrpcRouteAction, GetGatewayRouteSpecGrpcRouteActionOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecGrpcRouteOutput) Matches() pulumix.GArrayOutput[GetGatewayRouteSpecGrpcRouteMatch, GetGatewayRouteSpecGrpcRouteMatchOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecGrpcRoute](o, func(v GetGatewayRouteSpecGrpcRoute) []GetGatewayRouteSpecGrpcRouteMatch { return v.Matches })
	return pulumix.GArrayOutput[GetGatewayRouteSpecGrpcRouteMatch, GetGatewayRouteSpecGrpcRouteMatchOutput]{OutputState: value.OutputState}
}

type GetGatewayRouteSpecGrpcRouteAction struct {
	Targets []GetGatewayRouteSpecGrpcRouteActionTarget `pulumi:"targets"`
}

type GetGatewayRouteSpecGrpcRouteActionArgs struct {
	Targets pulumix.Input[[]*GetGatewayRouteSpecGrpcRouteActionTargetArgs] `pulumi:"targets"`
}

func (GetGatewayRouteSpecGrpcRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecGrpcRouteAction)(nil)).Elem()
}

func (i GetGatewayRouteSpecGrpcRouteActionArgs) ToGetGatewayRouteSpecGrpcRouteActionOutput() GetGatewayRouteSpecGrpcRouteActionOutput {
	return i.ToGetGatewayRouteSpecGrpcRouteActionOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecGrpcRouteActionArgs) ToGetGatewayRouteSpecGrpcRouteActionOutputWithContext(ctx context.Context) GetGatewayRouteSpecGrpcRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecGrpcRouteActionOutput)
}

func (i *GetGatewayRouteSpecGrpcRouteActionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecGrpcRouteActionArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecGrpcRouteActionOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecGrpcRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecGrpcRouteAction)(nil)).Elem()
}

func (o GetGatewayRouteSpecGrpcRouteActionOutput) ToGetGatewayRouteSpecGrpcRouteActionOutput() GetGatewayRouteSpecGrpcRouteActionOutput {
	return o
}

func (o GetGatewayRouteSpecGrpcRouteActionOutput) ToGetGatewayRouteSpecGrpcRouteActionOutputWithContext(ctx context.Context) GetGatewayRouteSpecGrpcRouteActionOutput {
	return o
}

func (o GetGatewayRouteSpecGrpcRouteActionOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecGrpcRouteAction] {
	return pulumix.Output[GetGatewayRouteSpecGrpcRouteAction]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecGrpcRouteActionOutput) Targets() pulumix.GArrayOutput[GetGatewayRouteSpecGrpcRouteActionTarget, GetGatewayRouteSpecGrpcRouteActionTargetOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecGrpcRouteAction](o, func(v GetGatewayRouteSpecGrpcRouteAction) []GetGatewayRouteSpecGrpcRouteActionTarget {
		return v.Targets
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecGrpcRouteActionTarget, GetGatewayRouteSpecGrpcRouteActionTargetOutput]{OutputState: value.OutputState}
}

type GetGatewayRouteSpecGrpcRouteActionTarget struct {
	Port            int                                                      `pulumi:"port"`
	VirtualServices []GetGatewayRouteSpecGrpcRouteActionTargetVirtualService `pulumi:"virtualServices"`
}

type GetGatewayRouteSpecGrpcRouteActionTargetArgs struct {
	Port            pulumix.Input[int]                                                           `pulumi:"port"`
	VirtualServices pulumix.Input[[]*GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceArgs] `pulumi:"virtualServices"`
}

func (GetGatewayRouteSpecGrpcRouteActionTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecGrpcRouteActionTarget)(nil)).Elem()
}

func (i GetGatewayRouteSpecGrpcRouteActionTargetArgs) ToGetGatewayRouteSpecGrpcRouteActionTargetOutput() GetGatewayRouteSpecGrpcRouteActionTargetOutput {
	return i.ToGetGatewayRouteSpecGrpcRouteActionTargetOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecGrpcRouteActionTargetArgs) ToGetGatewayRouteSpecGrpcRouteActionTargetOutputWithContext(ctx context.Context) GetGatewayRouteSpecGrpcRouteActionTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecGrpcRouteActionTargetOutput)
}

func (i *GetGatewayRouteSpecGrpcRouteActionTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecGrpcRouteActionTargetArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecGrpcRouteActionTargetOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecGrpcRouteActionTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecGrpcRouteActionTarget)(nil)).Elem()
}

func (o GetGatewayRouteSpecGrpcRouteActionTargetOutput) ToGetGatewayRouteSpecGrpcRouteActionTargetOutput() GetGatewayRouteSpecGrpcRouteActionTargetOutput {
	return o
}

func (o GetGatewayRouteSpecGrpcRouteActionTargetOutput) ToGetGatewayRouteSpecGrpcRouteActionTargetOutputWithContext(ctx context.Context) GetGatewayRouteSpecGrpcRouteActionTargetOutput {
	return o
}

func (o GetGatewayRouteSpecGrpcRouteActionTargetOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecGrpcRouteActionTarget] {
	return pulumix.Output[GetGatewayRouteSpecGrpcRouteActionTarget]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecGrpcRouteActionTargetOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetGatewayRouteSpecGrpcRouteActionTarget](o, func(v GetGatewayRouteSpecGrpcRouteActionTarget) int { return v.Port })
}

func (o GetGatewayRouteSpecGrpcRouteActionTargetOutput) VirtualServices() pulumix.GArrayOutput[GetGatewayRouteSpecGrpcRouteActionTargetVirtualService, GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecGrpcRouteActionTarget](o, func(v GetGatewayRouteSpecGrpcRouteActionTarget) []GetGatewayRouteSpecGrpcRouteActionTargetVirtualService {
		return v.VirtualServices
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecGrpcRouteActionTargetVirtualService, GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput]{OutputState: value.OutputState}
}

type GetGatewayRouteSpecGrpcRouteActionTargetVirtualService struct {
	VirtualServiceName string `pulumi:"virtualServiceName"`
}

type GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceArgs struct {
	VirtualServiceName pulumix.Input[string] `pulumi:"virtualServiceName"`
}

func (GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecGrpcRouteActionTargetVirtualService)(nil)).Elem()
}

func (i GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceArgs) ToGetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput() GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput {
	return i.ToGetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceArgs) ToGetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutputWithContext(ctx context.Context) GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput)
}

func (i *GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecGrpcRouteActionTargetVirtualService)(nil)).Elem()
}

func (o GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput) ToGetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput() GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput {
	return o
}

func (o GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput) ToGetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutputWithContext(ctx context.Context) GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput {
	return o
}

func (o GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecGrpcRouteActionTargetVirtualService] {
	return pulumix.Output[GetGatewayRouteSpecGrpcRouteActionTargetVirtualService]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput) VirtualServiceName() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecGrpcRouteActionTargetVirtualService](o, func(v GetGatewayRouteSpecGrpcRouteActionTargetVirtualService) string { return v.VirtualServiceName })
}

type GetGatewayRouteSpecGrpcRouteMatch struct {
	Port        int    `pulumi:"port"`
	ServiceName string `pulumi:"serviceName"`
}

type GetGatewayRouteSpecGrpcRouteMatchArgs struct {
	Port        pulumix.Input[int]    `pulumi:"port"`
	ServiceName pulumix.Input[string] `pulumi:"serviceName"`
}

func (GetGatewayRouteSpecGrpcRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecGrpcRouteMatch)(nil)).Elem()
}

func (i GetGatewayRouteSpecGrpcRouteMatchArgs) ToGetGatewayRouteSpecGrpcRouteMatchOutput() GetGatewayRouteSpecGrpcRouteMatchOutput {
	return i.ToGetGatewayRouteSpecGrpcRouteMatchOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecGrpcRouteMatchArgs) ToGetGatewayRouteSpecGrpcRouteMatchOutputWithContext(ctx context.Context) GetGatewayRouteSpecGrpcRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecGrpcRouteMatchOutput)
}

func (i *GetGatewayRouteSpecGrpcRouteMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecGrpcRouteMatchArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecGrpcRouteMatchOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecGrpcRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecGrpcRouteMatch)(nil)).Elem()
}

func (o GetGatewayRouteSpecGrpcRouteMatchOutput) ToGetGatewayRouteSpecGrpcRouteMatchOutput() GetGatewayRouteSpecGrpcRouteMatchOutput {
	return o
}

func (o GetGatewayRouteSpecGrpcRouteMatchOutput) ToGetGatewayRouteSpecGrpcRouteMatchOutputWithContext(ctx context.Context) GetGatewayRouteSpecGrpcRouteMatchOutput {
	return o
}

func (o GetGatewayRouteSpecGrpcRouteMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecGrpcRouteMatch] {
	return pulumix.Output[GetGatewayRouteSpecGrpcRouteMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecGrpcRouteMatchOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetGatewayRouteSpecGrpcRouteMatch](o, func(v GetGatewayRouteSpecGrpcRouteMatch) int { return v.Port })
}

func (o GetGatewayRouteSpecGrpcRouteMatchOutput) ServiceName() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecGrpcRouteMatch](o, func(v GetGatewayRouteSpecGrpcRouteMatch) string { return v.ServiceName })
}

type GetGatewayRouteSpecHttp2Route struct {
	Actions []GetGatewayRouteSpecHttp2RouteAction `pulumi:"actions"`
	Matches []GetGatewayRouteSpecHttp2RouteMatch  `pulumi:"matches"`
}

type GetGatewayRouteSpecHttp2RouteArgs struct {
	Actions pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteActionArgs] `pulumi:"actions"`
	Matches pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteMatchArgs]  `pulumi:"matches"`
}

func (GetGatewayRouteSpecHttp2RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2Route)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteArgs) ToGetGatewayRouteSpecHttp2RouteOutput() GetGatewayRouteSpecHttp2RouteOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteArgs) ToGetGatewayRouteSpecHttp2RouteOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2Route)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteOutput) ToGetGatewayRouteSpecHttp2RouteOutput() GetGatewayRouteSpecHttp2RouteOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteOutput) ToGetGatewayRouteSpecHttp2RouteOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2Route] {
	return pulumix.Output[GetGatewayRouteSpecHttp2Route]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteOutput) Actions() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteAction, GetGatewayRouteSpecHttp2RouteActionOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttp2Route](o, func(v GetGatewayRouteSpecHttp2Route) []GetGatewayRouteSpecHttp2RouteAction { return v.Actions })
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteAction, GetGatewayRouteSpecHttp2RouteActionOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttp2RouteOutput) Matches() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatch, GetGatewayRouteSpecHttp2RouteMatchOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttp2Route](o, func(v GetGatewayRouteSpecHttp2Route) []GetGatewayRouteSpecHttp2RouteMatch { return v.Matches })
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatch, GetGatewayRouteSpecHttp2RouteMatchOutput]{OutputState: value.OutputState}
}

type GetGatewayRouteSpecHttp2RouteAction struct {
	Rewrites []GetGatewayRouteSpecHttp2RouteActionRewrite `pulumi:"rewrites"`
	Targets  []GetGatewayRouteSpecHttp2RouteActionTarget  `pulumi:"targets"`
}

type GetGatewayRouteSpecHttp2RouteActionArgs struct {
	Rewrites pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteActionRewriteArgs] `pulumi:"rewrites"`
	Targets  pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteActionTargetArgs]  `pulumi:"targets"`
}

func (GetGatewayRouteSpecHttp2RouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteAction)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteActionArgs) ToGetGatewayRouteSpecHttp2RouteActionOutput() GetGatewayRouteSpecHttp2RouteActionOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteActionOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteActionArgs) ToGetGatewayRouteSpecHttp2RouteActionOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteActionOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteActionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteActionArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteActionOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteAction)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteActionOutput) ToGetGatewayRouteSpecHttp2RouteActionOutput() GetGatewayRouteSpecHttp2RouteActionOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteActionOutput) ToGetGatewayRouteSpecHttp2RouteActionOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteActionOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteActionOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2RouteAction] {
	return pulumix.Output[GetGatewayRouteSpecHttp2RouteAction]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteActionOutput) Rewrites() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteActionRewrite, GetGatewayRouteSpecHttp2RouteActionRewriteOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttp2RouteAction](o, func(v GetGatewayRouteSpecHttp2RouteAction) []GetGatewayRouteSpecHttp2RouteActionRewrite {
		return v.Rewrites
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteActionRewrite, GetGatewayRouteSpecHttp2RouteActionRewriteOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttp2RouteActionOutput) Targets() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteActionTarget, GetGatewayRouteSpecHttp2RouteActionTargetOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttp2RouteAction](o, func(v GetGatewayRouteSpecHttp2RouteAction) []GetGatewayRouteSpecHttp2RouteActionTarget {
		return v.Targets
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteActionTarget, GetGatewayRouteSpecHttp2RouteActionTargetOutput]{OutputState: value.OutputState}
}

type GetGatewayRouteSpecHttp2RouteActionRewrite struct {
	Hostnames []GetGatewayRouteSpecHttp2RouteActionRewriteHostname `pulumi:"hostnames"`
	Paths     []GetGatewayRouteSpecHttp2RouteActionRewritePath     `pulumi:"paths"`
	Prefixes  []GetGatewayRouteSpecHttp2RouteActionRewritePrefix   `pulumi:"prefixes"`
}

type GetGatewayRouteSpecHttp2RouteActionRewriteArgs struct {
	Hostnames pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteActionRewriteHostnameArgs] `pulumi:"hostnames"`
	Paths     pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteActionRewritePathArgs]     `pulumi:"paths"`
	Prefixes  pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteActionRewritePrefixArgs]   `pulumi:"prefixes"`
}

func (GetGatewayRouteSpecHttp2RouteActionRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteActionRewrite)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteActionRewriteArgs) ToGetGatewayRouteSpecHttp2RouteActionRewriteOutput() GetGatewayRouteSpecHttp2RouteActionRewriteOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteActionRewriteOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteActionRewriteArgs) ToGetGatewayRouteSpecHttp2RouteActionRewriteOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteActionRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteActionRewriteOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteActionRewriteArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteActionRewriteArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteActionRewriteOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteActionRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteActionRewrite)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteActionRewriteOutput) ToGetGatewayRouteSpecHttp2RouteActionRewriteOutput() GetGatewayRouteSpecHttp2RouteActionRewriteOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteActionRewriteOutput) ToGetGatewayRouteSpecHttp2RouteActionRewriteOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteActionRewriteOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteActionRewriteOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2RouteActionRewrite] {
	return pulumix.Output[GetGatewayRouteSpecHttp2RouteActionRewrite]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteActionRewriteOutput) Hostnames() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteActionRewriteHostname, GetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttp2RouteActionRewrite](o, func(v GetGatewayRouteSpecHttp2RouteActionRewrite) []GetGatewayRouteSpecHttp2RouteActionRewriteHostname {
		return v.Hostnames
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteActionRewriteHostname, GetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttp2RouteActionRewriteOutput) Paths() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteActionRewritePath, GetGatewayRouteSpecHttp2RouteActionRewritePathOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttp2RouteActionRewrite](o, func(v GetGatewayRouteSpecHttp2RouteActionRewrite) []GetGatewayRouteSpecHttp2RouteActionRewritePath {
		return v.Paths
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteActionRewritePath, GetGatewayRouteSpecHttp2RouteActionRewritePathOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttp2RouteActionRewriteOutput) Prefixes() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteActionRewritePrefix, GetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttp2RouteActionRewrite](o, func(v GetGatewayRouteSpecHttp2RouteActionRewrite) []GetGatewayRouteSpecHttp2RouteActionRewritePrefix {
		return v.Prefixes
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteActionRewritePrefix, GetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput]{OutputState: value.OutputState}
}

type GetGatewayRouteSpecHttp2RouteActionRewriteHostname struct {
	DefaultTargetHostname string `pulumi:"defaultTargetHostname"`
}

type GetGatewayRouteSpecHttp2RouteActionRewriteHostnameArgs struct {
	DefaultTargetHostname pulumix.Input[string] `pulumi:"defaultTargetHostname"`
}

func (GetGatewayRouteSpecHttp2RouteActionRewriteHostnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteActionRewriteHostname)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteActionRewriteHostnameArgs) ToGetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput() GetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteActionRewriteHostnameArgs) ToGetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteActionRewriteHostnameArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteActionRewriteHostnameArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteActionRewriteHostname)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput) ToGetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput() GetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput) ToGetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2RouteActionRewriteHostname] {
	return pulumix.Output[GetGatewayRouteSpecHttp2RouteActionRewriteHostname]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput) DefaultTargetHostname() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteActionRewriteHostname](o, func(v GetGatewayRouteSpecHttp2RouteActionRewriteHostname) string { return v.DefaultTargetHostname })
}

type GetGatewayRouteSpecHttp2RouteActionRewritePath struct {
	Exact string `pulumi:"exact"`
}

type GetGatewayRouteSpecHttp2RouteActionRewritePathArgs struct {
	Exact pulumix.Input[string] `pulumi:"exact"`
}

func (GetGatewayRouteSpecHttp2RouteActionRewritePathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteActionRewritePath)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteActionRewritePathArgs) ToGetGatewayRouteSpecHttp2RouteActionRewritePathOutput() GetGatewayRouteSpecHttp2RouteActionRewritePathOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteActionRewritePathOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteActionRewritePathArgs) ToGetGatewayRouteSpecHttp2RouteActionRewritePathOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteActionRewritePathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteActionRewritePathOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteActionRewritePathArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteActionRewritePathArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteActionRewritePathOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteActionRewritePathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteActionRewritePath)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteActionRewritePathOutput) ToGetGatewayRouteSpecHttp2RouteActionRewritePathOutput() GetGatewayRouteSpecHttp2RouteActionRewritePathOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteActionRewritePathOutput) ToGetGatewayRouteSpecHttp2RouteActionRewritePathOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteActionRewritePathOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteActionRewritePathOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2RouteActionRewritePath] {
	return pulumix.Output[GetGatewayRouteSpecHttp2RouteActionRewritePath]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteActionRewritePathOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteActionRewritePath](o, func(v GetGatewayRouteSpecHttp2RouteActionRewritePath) string { return v.Exact })
}

type GetGatewayRouteSpecHttp2RouteActionRewritePrefix struct {
	DefaultPrefix string `pulumi:"defaultPrefix"`
	Value         string `pulumi:"value"`
}

type GetGatewayRouteSpecHttp2RouteActionRewritePrefixArgs struct {
	DefaultPrefix pulumix.Input[string] `pulumi:"defaultPrefix"`
	Value         pulumix.Input[string] `pulumi:"value"`
}

func (GetGatewayRouteSpecHttp2RouteActionRewritePrefixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteActionRewritePrefix)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteActionRewritePrefixArgs) ToGetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput() GetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteActionRewritePrefixOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteActionRewritePrefixArgs) ToGetGatewayRouteSpecHttp2RouteActionRewritePrefixOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteActionRewritePrefixArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteActionRewritePrefixArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteActionRewritePrefix)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput) ToGetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput() GetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput) ToGetGatewayRouteSpecHttp2RouteActionRewritePrefixOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2RouteActionRewritePrefix] {
	return pulumix.Output[GetGatewayRouteSpecHttp2RouteActionRewritePrefix]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput) DefaultPrefix() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteActionRewritePrefix](o, func(v GetGatewayRouteSpecHttp2RouteActionRewritePrefix) string { return v.DefaultPrefix })
}

func (o GetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteActionRewritePrefix](o, func(v GetGatewayRouteSpecHttp2RouteActionRewritePrefix) string { return v.Value })
}

type GetGatewayRouteSpecHttp2RouteActionTarget struct {
	Port            int                                                       `pulumi:"port"`
	VirtualServices []GetGatewayRouteSpecHttp2RouteActionTargetVirtualService `pulumi:"virtualServices"`
}

type GetGatewayRouteSpecHttp2RouteActionTargetArgs struct {
	Port            pulumix.Input[int]                                                            `pulumi:"port"`
	VirtualServices pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceArgs] `pulumi:"virtualServices"`
}

func (GetGatewayRouteSpecHttp2RouteActionTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteActionTarget)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteActionTargetArgs) ToGetGatewayRouteSpecHttp2RouteActionTargetOutput() GetGatewayRouteSpecHttp2RouteActionTargetOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteActionTargetOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteActionTargetArgs) ToGetGatewayRouteSpecHttp2RouteActionTargetOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteActionTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteActionTargetOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteActionTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteActionTargetArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteActionTargetOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteActionTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteActionTarget)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteActionTargetOutput) ToGetGatewayRouteSpecHttp2RouteActionTargetOutput() GetGatewayRouteSpecHttp2RouteActionTargetOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteActionTargetOutput) ToGetGatewayRouteSpecHttp2RouteActionTargetOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteActionTargetOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteActionTargetOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2RouteActionTarget] {
	return pulumix.Output[GetGatewayRouteSpecHttp2RouteActionTarget]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteActionTargetOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteActionTarget](o, func(v GetGatewayRouteSpecHttp2RouteActionTarget) int { return v.Port })
}

func (o GetGatewayRouteSpecHttp2RouteActionTargetOutput) VirtualServices() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteActionTargetVirtualService, GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttp2RouteActionTarget](o, func(v GetGatewayRouteSpecHttp2RouteActionTarget) []GetGatewayRouteSpecHttp2RouteActionTargetVirtualService {
		return v.VirtualServices
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteActionTargetVirtualService, GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput]{OutputState: value.OutputState}
}

type GetGatewayRouteSpecHttp2RouteActionTargetVirtualService struct {
	VirtualServiceName string `pulumi:"virtualServiceName"`
}

type GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceArgs struct {
	VirtualServiceName pulumix.Input[string] `pulumi:"virtualServiceName"`
}

func (GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteActionTargetVirtualService)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceArgs) ToGetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput() GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceArgs) ToGetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteActionTargetVirtualService)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput) ToGetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput() GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput) ToGetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2RouteActionTargetVirtualService] {
	return pulumix.Output[GetGatewayRouteSpecHttp2RouteActionTargetVirtualService]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput) VirtualServiceName() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteActionTargetVirtualService](o, func(v GetGatewayRouteSpecHttp2RouteActionTargetVirtualService) string { return v.VirtualServiceName })
}

type GetGatewayRouteSpecHttp2RouteMatch struct {
	Headers         []GetGatewayRouteSpecHttp2RouteMatchHeader         `pulumi:"headers"`
	Hostnames       []GetGatewayRouteSpecHttp2RouteMatchHostname       `pulumi:"hostnames"`
	Paths           []GetGatewayRouteSpecHttp2RouteMatchPath           `pulumi:"paths"`
	Port            int                                                `pulumi:"port"`
	Prefix          string                                             `pulumi:"prefix"`
	QueryParameters []GetGatewayRouteSpecHttp2RouteMatchQueryParameter `pulumi:"queryParameters"`
}

type GetGatewayRouteSpecHttp2RouteMatchArgs struct {
	Headers         pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteMatchHeaderArgs]         `pulumi:"headers"`
	Hostnames       pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteMatchHostnameArgs]       `pulumi:"hostnames"`
	Paths           pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteMatchPathArgs]           `pulumi:"paths"`
	Port            pulumix.Input[int]                                                     `pulumi:"port"`
	Prefix          pulumix.Input[string]                                                  `pulumi:"prefix"`
	QueryParameters pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteMatchQueryParameterArgs] `pulumi:"queryParameters"`
}

func (GetGatewayRouteSpecHttp2RouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatch)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteMatchArgs) ToGetGatewayRouteSpecHttp2RouteMatchOutput() GetGatewayRouteSpecHttp2RouteMatchOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteMatchOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteMatchArgs) ToGetGatewayRouteSpecHttp2RouteMatchOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteMatchOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteMatchArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteMatchOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatch)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteMatchOutput) ToGetGatewayRouteSpecHttp2RouteMatchOutput() GetGatewayRouteSpecHttp2RouteMatchOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchOutput) ToGetGatewayRouteSpecHttp2RouteMatchOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2RouteMatch] {
	return pulumix.Output[GetGatewayRouteSpecHttp2RouteMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteMatchOutput) Headers() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatchHeader, GetGatewayRouteSpecHttp2RouteMatchHeaderOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatch](o, func(v GetGatewayRouteSpecHttp2RouteMatch) []GetGatewayRouteSpecHttp2RouteMatchHeader {
		return v.Headers
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatchHeader, GetGatewayRouteSpecHttp2RouteMatchHeaderOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttp2RouteMatchOutput) Hostnames() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatchHostname, GetGatewayRouteSpecHttp2RouteMatchHostnameOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatch](o, func(v GetGatewayRouteSpecHttp2RouteMatch) []GetGatewayRouteSpecHttp2RouteMatchHostname {
		return v.Hostnames
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatchHostname, GetGatewayRouteSpecHttp2RouteMatchHostnameOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttp2RouteMatchOutput) Paths() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatchPath, GetGatewayRouteSpecHttp2RouteMatchPathOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatch](o, func(v GetGatewayRouteSpecHttp2RouteMatch) []GetGatewayRouteSpecHttp2RouteMatchPath { return v.Paths })
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatchPath, GetGatewayRouteSpecHttp2RouteMatchPathOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttp2RouteMatchOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatch](o, func(v GetGatewayRouteSpecHttp2RouteMatch) int { return v.Port })
}

func (o GetGatewayRouteSpecHttp2RouteMatchOutput) Prefix() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatch](o, func(v GetGatewayRouteSpecHttp2RouteMatch) string { return v.Prefix })
}

func (o GetGatewayRouteSpecHttp2RouteMatchOutput) QueryParameters() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatchQueryParameter, GetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatch](o, func(v GetGatewayRouteSpecHttp2RouteMatch) []GetGatewayRouteSpecHttp2RouteMatchQueryParameter {
		return v.QueryParameters
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatchQueryParameter, GetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput]{OutputState: value.OutputState}
}

type GetGatewayRouteSpecHttp2RouteMatchHeader struct {
	Invert  bool                                            `pulumi:"invert"`
	Matches []GetGatewayRouteSpecHttp2RouteMatchHeaderMatch `pulumi:"matches"`
	// Name of the gateway route.
	Name string `pulumi:"name"`
}

type GetGatewayRouteSpecHttp2RouteMatchHeaderArgs struct {
	Invert  pulumix.Input[bool]                                                 `pulumi:"invert"`
	Matches pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteMatchHeaderMatchArgs] `pulumi:"matches"`
	// Name of the gateway route.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetGatewayRouteSpecHttp2RouteMatchHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatchHeader)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteMatchHeaderArgs) ToGetGatewayRouteSpecHttp2RouteMatchHeaderOutput() GetGatewayRouteSpecHttp2RouteMatchHeaderOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteMatchHeaderOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteMatchHeaderArgs) ToGetGatewayRouteSpecHttp2RouteMatchHeaderOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteMatchHeaderOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteMatchHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteMatchHeaderArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteMatchHeaderOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteMatchHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatchHeader)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderOutput) ToGetGatewayRouteSpecHttp2RouteMatchHeaderOutput() GetGatewayRouteSpecHttp2RouteMatchHeaderOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderOutput) ToGetGatewayRouteSpecHttp2RouteMatchHeaderOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchHeaderOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2RouteMatchHeader] {
	return pulumix.Output[GetGatewayRouteSpecHttp2RouteMatchHeader]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderOutput) Invert() pulumix.Output[bool] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchHeader](o, func(v GetGatewayRouteSpecHttp2RouteMatchHeader) bool { return v.Invert })
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderOutput) Matches() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatchHeaderMatch, GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchHeader](o, func(v GetGatewayRouteSpecHttp2RouteMatchHeader) []GetGatewayRouteSpecHttp2RouteMatchHeaderMatch {
		return v.Matches
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatchHeaderMatch, GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput]{OutputState: value.OutputState}
}

// Name of the gateway route.
func (o GetGatewayRouteSpecHttp2RouteMatchHeaderOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchHeader](o, func(v GetGatewayRouteSpecHttp2RouteMatchHeader) string { return v.Name })
}

type GetGatewayRouteSpecHttp2RouteMatchHeaderMatch struct {
	Exact  string                                               `pulumi:"exact"`
	Prefix string                                               `pulumi:"prefix"`
	Ranges []GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRange `pulumi:"ranges"`
	Regex  string                                               `pulumi:"regex"`
	Suffix string                                               `pulumi:"suffix"`
}

type GetGatewayRouteSpecHttp2RouteMatchHeaderMatchArgs struct {
	Exact  pulumix.Input[string]                                                    `pulumi:"exact"`
	Prefix pulumix.Input[string]                                                    `pulumi:"prefix"`
	Ranges pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeArgs] `pulumi:"ranges"`
	Regex  pulumix.Input[string]                                                    `pulumi:"regex"`
	Suffix pulumix.Input[string]                                                    `pulumi:"suffix"`
}

func (GetGatewayRouteSpecHttp2RouteMatchHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatchHeaderMatch)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteMatchHeaderMatchArgs) ToGetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput() GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteMatchHeaderMatchArgs) ToGetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteMatchHeaderMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteMatchHeaderMatchArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatchHeaderMatch)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) ToGetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput() GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) ToGetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2RouteMatchHeaderMatch] {
	return pulumix.Output[GetGatewayRouteSpecHttp2RouteMatchHeaderMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchHeaderMatch](o, func(v GetGatewayRouteSpecHttp2RouteMatchHeaderMatch) string { return v.Exact })
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) Prefix() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchHeaderMatch](o, func(v GetGatewayRouteSpecHttp2RouteMatchHeaderMatch) string { return v.Prefix })
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) Ranges() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRange, GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchHeaderMatch](o, func(v GetGatewayRouteSpecHttp2RouteMatchHeaderMatch) []GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRange {
		return v.Ranges
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRange, GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) Regex() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchHeaderMatch](o, func(v GetGatewayRouteSpecHttp2RouteMatchHeaderMatch) string { return v.Regex })
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput) Suffix() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchHeaderMatch](o, func(v GetGatewayRouteSpecHttp2RouteMatchHeaderMatch) string { return v.Suffix })
}

type GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRange struct {
	End   int `pulumi:"end"`
	Start int `pulumi:"start"`
}

type GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeArgs struct {
	End   pulumix.Input[int] `pulumi:"end"`
	Start pulumix.Input[int] `pulumi:"start"`
}

func (GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRange)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ToGetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput() GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ToGetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRange)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ToGetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput() GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ToGetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRange] {
	return pulumix.Output[GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRange]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) End() pulumix.Output[int] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRange](o, func(v GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRange) int { return v.End })
}

func (o GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) Start() pulumix.Output[int] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRange](o, func(v GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRange) int { return v.Start })
}

type GetGatewayRouteSpecHttp2RouteMatchHostname struct {
	Exact  string `pulumi:"exact"`
	Suffix string `pulumi:"suffix"`
}

type GetGatewayRouteSpecHttp2RouteMatchHostnameArgs struct {
	Exact  pulumix.Input[string] `pulumi:"exact"`
	Suffix pulumix.Input[string] `pulumi:"suffix"`
}

func (GetGatewayRouteSpecHttp2RouteMatchHostnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatchHostname)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteMatchHostnameArgs) ToGetGatewayRouteSpecHttp2RouteMatchHostnameOutput() GetGatewayRouteSpecHttp2RouteMatchHostnameOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteMatchHostnameOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteMatchHostnameArgs) ToGetGatewayRouteSpecHttp2RouteMatchHostnameOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchHostnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteMatchHostnameOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteMatchHostnameArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteMatchHostnameArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteMatchHostnameOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteMatchHostnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatchHostname)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteMatchHostnameOutput) ToGetGatewayRouteSpecHttp2RouteMatchHostnameOutput() GetGatewayRouteSpecHttp2RouteMatchHostnameOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchHostnameOutput) ToGetGatewayRouteSpecHttp2RouteMatchHostnameOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchHostnameOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchHostnameOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2RouteMatchHostname] {
	return pulumix.Output[GetGatewayRouteSpecHttp2RouteMatchHostname]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteMatchHostnameOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchHostname](o, func(v GetGatewayRouteSpecHttp2RouteMatchHostname) string { return v.Exact })
}

func (o GetGatewayRouteSpecHttp2RouteMatchHostnameOutput) Suffix() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchHostname](o, func(v GetGatewayRouteSpecHttp2RouteMatchHostname) string { return v.Suffix })
}

type GetGatewayRouteSpecHttp2RouteMatchPath struct {
	Exact string `pulumi:"exact"`
	Regex string `pulumi:"regex"`
}

type GetGatewayRouteSpecHttp2RouteMatchPathArgs struct {
	Exact pulumix.Input[string] `pulumi:"exact"`
	Regex pulumix.Input[string] `pulumi:"regex"`
}

func (GetGatewayRouteSpecHttp2RouteMatchPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatchPath)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteMatchPathArgs) ToGetGatewayRouteSpecHttp2RouteMatchPathOutput() GetGatewayRouteSpecHttp2RouteMatchPathOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteMatchPathOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteMatchPathArgs) ToGetGatewayRouteSpecHttp2RouteMatchPathOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteMatchPathOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteMatchPathArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteMatchPathArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteMatchPathOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteMatchPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatchPath)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteMatchPathOutput) ToGetGatewayRouteSpecHttp2RouteMatchPathOutput() GetGatewayRouteSpecHttp2RouteMatchPathOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchPathOutput) ToGetGatewayRouteSpecHttp2RouteMatchPathOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchPathOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchPathOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2RouteMatchPath] {
	return pulumix.Output[GetGatewayRouteSpecHttp2RouteMatchPath]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteMatchPathOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchPath](o, func(v GetGatewayRouteSpecHttp2RouteMatchPath) string { return v.Exact })
}

func (o GetGatewayRouteSpecHttp2RouteMatchPathOutput) Regex() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchPath](o, func(v GetGatewayRouteSpecHttp2RouteMatchPath) string { return v.Regex })
}

type GetGatewayRouteSpecHttp2RouteMatchQueryParameter struct {
	Matches []GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatch `pulumi:"matches"`
	// Name of the gateway route.
	Name string `pulumi:"name"`
}

type GetGatewayRouteSpecHttp2RouteMatchQueryParameterArgs struct {
	Matches pulumix.Input[[]*GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchArgs] `pulumi:"matches"`
	// Name of the gateway route.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetGatewayRouteSpecHttp2RouteMatchQueryParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatchQueryParameter)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteMatchQueryParameterArgs) ToGetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput() GetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteMatchQueryParameterOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteMatchQueryParameterArgs) ToGetGatewayRouteSpecHttp2RouteMatchQueryParameterOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteMatchQueryParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteMatchQueryParameterArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatchQueryParameter)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput) ToGetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput() GetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput) ToGetGatewayRouteSpecHttp2RouteMatchQueryParameterOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2RouteMatchQueryParameter] {
	return pulumix.Output[GetGatewayRouteSpecHttp2RouteMatchQueryParameter]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput) Matches() pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatch, GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchQueryParameter](o, func(v GetGatewayRouteSpecHttp2RouteMatchQueryParameter) []GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatch {
		return v.Matches
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatch, GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput]{OutputState: value.OutputState}
}

// Name of the gateway route.
func (o GetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchQueryParameter](o, func(v GetGatewayRouteSpecHttp2RouteMatchQueryParameter) string { return v.Name })
}

type GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatch struct {
	Exact string `pulumi:"exact"`
}

type GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchArgs struct {
	Exact pulumix.Input[string] `pulumi:"exact"`
}

func (GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatch)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchArgs) ToGetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput() GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return i.ToGetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchArgs) ToGetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput)
}

func (i *GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatch)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput) ToGetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput() GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput) ToGetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return o
}

func (o GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatch] {
	return pulumix.Output[GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatch](o, func(v GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatch) string { return v.Exact })
}

type GetGatewayRouteSpecHttpRoute struct {
	Actions []GetGatewayRouteSpecHttpRouteAction `pulumi:"actions"`
	Matches []GetGatewayRouteSpecHttpRouteMatch  `pulumi:"matches"`
}

type GetGatewayRouteSpecHttpRouteArgs struct {
	Actions pulumix.Input[[]*GetGatewayRouteSpecHttpRouteActionArgs] `pulumi:"actions"`
	Matches pulumix.Input[[]*GetGatewayRouteSpecHttpRouteMatchArgs]  `pulumi:"matches"`
}

func (GetGatewayRouteSpecHttpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRoute)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteArgs) ToGetGatewayRouteSpecHttpRouteOutput() GetGatewayRouteSpecHttpRouteOutput {
	return i.ToGetGatewayRouteSpecHttpRouteOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteArgs) ToGetGatewayRouteSpecHttpRouteOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteOutput)
}

func (i *GetGatewayRouteSpecHttpRouteArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRoute)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteOutput) ToGetGatewayRouteSpecHttpRouteOutput() GetGatewayRouteSpecHttpRouteOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteOutput) ToGetGatewayRouteSpecHttpRouteOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRoute] {
	return pulumix.Output[GetGatewayRouteSpecHttpRoute]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteOutput) Actions() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteAction, GetGatewayRouteSpecHttpRouteActionOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttpRoute](o, func(v GetGatewayRouteSpecHttpRoute) []GetGatewayRouteSpecHttpRouteAction { return v.Actions })
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteAction, GetGatewayRouteSpecHttpRouteActionOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttpRouteOutput) Matches() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatch, GetGatewayRouteSpecHttpRouteMatchOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttpRoute](o, func(v GetGatewayRouteSpecHttpRoute) []GetGatewayRouteSpecHttpRouteMatch { return v.Matches })
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatch, GetGatewayRouteSpecHttpRouteMatchOutput]{OutputState: value.OutputState}
}

type GetGatewayRouteSpecHttpRouteAction struct {
	Rewrites []GetGatewayRouteSpecHttpRouteActionRewrite `pulumi:"rewrites"`
	Targets  []GetGatewayRouteSpecHttpRouteActionTarget  `pulumi:"targets"`
}

type GetGatewayRouteSpecHttpRouteActionArgs struct {
	Rewrites pulumix.Input[[]*GetGatewayRouteSpecHttpRouteActionRewriteArgs] `pulumi:"rewrites"`
	Targets  pulumix.Input[[]*GetGatewayRouteSpecHttpRouteActionTargetArgs]  `pulumi:"targets"`
}

func (GetGatewayRouteSpecHttpRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteAction)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteActionArgs) ToGetGatewayRouteSpecHttpRouteActionOutput() GetGatewayRouteSpecHttpRouteActionOutput {
	return i.ToGetGatewayRouteSpecHttpRouteActionOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteActionArgs) ToGetGatewayRouteSpecHttpRouteActionOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteActionOutput)
}

func (i *GetGatewayRouteSpecHttpRouteActionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteActionArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteActionOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteAction)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteActionOutput) ToGetGatewayRouteSpecHttpRouteActionOutput() GetGatewayRouteSpecHttpRouteActionOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteActionOutput) ToGetGatewayRouteSpecHttpRouteActionOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteActionOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteActionOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRouteAction] {
	return pulumix.Output[GetGatewayRouteSpecHttpRouteAction]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteActionOutput) Rewrites() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteActionRewrite, GetGatewayRouteSpecHttpRouteActionRewriteOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttpRouteAction](o, func(v GetGatewayRouteSpecHttpRouteAction) []GetGatewayRouteSpecHttpRouteActionRewrite {
		return v.Rewrites
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteActionRewrite, GetGatewayRouteSpecHttpRouteActionRewriteOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttpRouteActionOutput) Targets() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteActionTarget, GetGatewayRouteSpecHttpRouteActionTargetOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttpRouteAction](o, func(v GetGatewayRouteSpecHttpRouteAction) []GetGatewayRouteSpecHttpRouteActionTarget {
		return v.Targets
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteActionTarget, GetGatewayRouteSpecHttpRouteActionTargetOutput]{OutputState: value.OutputState}
}

type GetGatewayRouteSpecHttpRouteActionRewrite struct {
	Hostnames []GetGatewayRouteSpecHttpRouteActionRewriteHostname `pulumi:"hostnames"`
	Paths     []GetGatewayRouteSpecHttpRouteActionRewritePath     `pulumi:"paths"`
	Prefixes  []GetGatewayRouteSpecHttpRouteActionRewritePrefix   `pulumi:"prefixes"`
}

type GetGatewayRouteSpecHttpRouteActionRewriteArgs struct {
	Hostnames pulumix.Input[[]*GetGatewayRouteSpecHttpRouteActionRewriteHostnameArgs] `pulumi:"hostnames"`
	Paths     pulumix.Input[[]*GetGatewayRouteSpecHttpRouteActionRewritePathArgs]     `pulumi:"paths"`
	Prefixes  pulumix.Input[[]*GetGatewayRouteSpecHttpRouteActionRewritePrefixArgs]   `pulumi:"prefixes"`
}

func (GetGatewayRouteSpecHttpRouteActionRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteActionRewrite)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteActionRewriteArgs) ToGetGatewayRouteSpecHttpRouteActionRewriteOutput() GetGatewayRouteSpecHttpRouteActionRewriteOutput {
	return i.ToGetGatewayRouteSpecHttpRouteActionRewriteOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteActionRewriteArgs) ToGetGatewayRouteSpecHttpRouteActionRewriteOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteActionRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteActionRewriteOutput)
}

func (i *GetGatewayRouteSpecHttpRouteActionRewriteArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteActionRewriteArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteActionRewriteOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteActionRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteActionRewrite)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteActionRewriteOutput) ToGetGatewayRouteSpecHttpRouteActionRewriteOutput() GetGatewayRouteSpecHttpRouteActionRewriteOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteActionRewriteOutput) ToGetGatewayRouteSpecHttpRouteActionRewriteOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteActionRewriteOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteActionRewriteOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRouteActionRewrite] {
	return pulumix.Output[GetGatewayRouteSpecHttpRouteActionRewrite]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteActionRewriteOutput) Hostnames() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteActionRewriteHostname, GetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttpRouteActionRewrite](o, func(v GetGatewayRouteSpecHttpRouteActionRewrite) []GetGatewayRouteSpecHttpRouteActionRewriteHostname {
		return v.Hostnames
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteActionRewriteHostname, GetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttpRouteActionRewriteOutput) Paths() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteActionRewritePath, GetGatewayRouteSpecHttpRouteActionRewritePathOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttpRouteActionRewrite](o, func(v GetGatewayRouteSpecHttpRouteActionRewrite) []GetGatewayRouteSpecHttpRouteActionRewritePath {
		return v.Paths
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteActionRewritePath, GetGatewayRouteSpecHttpRouteActionRewritePathOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttpRouteActionRewriteOutput) Prefixes() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteActionRewritePrefix, GetGatewayRouteSpecHttpRouteActionRewritePrefixOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttpRouteActionRewrite](o, func(v GetGatewayRouteSpecHttpRouteActionRewrite) []GetGatewayRouteSpecHttpRouteActionRewritePrefix {
		return v.Prefixes
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteActionRewritePrefix, GetGatewayRouteSpecHttpRouteActionRewritePrefixOutput]{OutputState: value.OutputState}
}

type GetGatewayRouteSpecHttpRouteActionRewriteHostname struct {
	DefaultTargetHostname string `pulumi:"defaultTargetHostname"`
}

type GetGatewayRouteSpecHttpRouteActionRewriteHostnameArgs struct {
	DefaultTargetHostname pulumix.Input[string] `pulumi:"defaultTargetHostname"`
}

func (GetGatewayRouteSpecHttpRouteActionRewriteHostnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteActionRewriteHostname)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteActionRewriteHostnameArgs) ToGetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput() GetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput {
	return i.ToGetGatewayRouteSpecHttpRouteActionRewriteHostnameOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteActionRewriteHostnameArgs) ToGetGatewayRouteSpecHttpRouteActionRewriteHostnameOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput)
}

func (i *GetGatewayRouteSpecHttpRouteActionRewriteHostnameArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteActionRewriteHostnameArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteActionRewriteHostname)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput) ToGetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput() GetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput) ToGetGatewayRouteSpecHttpRouteActionRewriteHostnameOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRouteActionRewriteHostname] {
	return pulumix.Output[GetGatewayRouteSpecHttpRouteActionRewriteHostname]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput) DefaultTargetHostname() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteActionRewriteHostname](o, func(v GetGatewayRouteSpecHttpRouteActionRewriteHostname) string { return v.DefaultTargetHostname })
}

type GetGatewayRouteSpecHttpRouteActionRewritePath struct {
	Exact string `pulumi:"exact"`
}

type GetGatewayRouteSpecHttpRouteActionRewritePathArgs struct {
	Exact pulumix.Input[string] `pulumi:"exact"`
}

func (GetGatewayRouteSpecHttpRouteActionRewritePathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteActionRewritePath)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteActionRewritePathArgs) ToGetGatewayRouteSpecHttpRouteActionRewritePathOutput() GetGatewayRouteSpecHttpRouteActionRewritePathOutput {
	return i.ToGetGatewayRouteSpecHttpRouteActionRewritePathOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteActionRewritePathArgs) ToGetGatewayRouteSpecHttpRouteActionRewritePathOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteActionRewritePathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteActionRewritePathOutput)
}

func (i *GetGatewayRouteSpecHttpRouteActionRewritePathArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteActionRewritePathArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteActionRewritePathOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteActionRewritePathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteActionRewritePath)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteActionRewritePathOutput) ToGetGatewayRouteSpecHttpRouteActionRewritePathOutput() GetGatewayRouteSpecHttpRouteActionRewritePathOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteActionRewritePathOutput) ToGetGatewayRouteSpecHttpRouteActionRewritePathOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteActionRewritePathOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteActionRewritePathOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRouteActionRewritePath] {
	return pulumix.Output[GetGatewayRouteSpecHttpRouteActionRewritePath]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteActionRewritePathOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteActionRewritePath](o, func(v GetGatewayRouteSpecHttpRouteActionRewritePath) string { return v.Exact })
}

type GetGatewayRouteSpecHttpRouteActionRewritePrefix struct {
	DefaultPrefix string `pulumi:"defaultPrefix"`
	Value         string `pulumi:"value"`
}

type GetGatewayRouteSpecHttpRouteActionRewritePrefixArgs struct {
	DefaultPrefix pulumix.Input[string] `pulumi:"defaultPrefix"`
	Value         pulumix.Input[string] `pulumi:"value"`
}

func (GetGatewayRouteSpecHttpRouteActionRewritePrefixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteActionRewritePrefix)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteActionRewritePrefixArgs) ToGetGatewayRouteSpecHttpRouteActionRewritePrefixOutput() GetGatewayRouteSpecHttpRouteActionRewritePrefixOutput {
	return i.ToGetGatewayRouteSpecHttpRouteActionRewritePrefixOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteActionRewritePrefixArgs) ToGetGatewayRouteSpecHttpRouteActionRewritePrefixOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteActionRewritePrefixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteActionRewritePrefixOutput)
}

func (i *GetGatewayRouteSpecHttpRouteActionRewritePrefixArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteActionRewritePrefixArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteActionRewritePrefixOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteActionRewritePrefixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteActionRewritePrefix)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteActionRewritePrefixOutput) ToGetGatewayRouteSpecHttpRouteActionRewritePrefixOutput() GetGatewayRouteSpecHttpRouteActionRewritePrefixOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteActionRewritePrefixOutput) ToGetGatewayRouteSpecHttpRouteActionRewritePrefixOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteActionRewritePrefixOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteActionRewritePrefixOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRouteActionRewritePrefix] {
	return pulumix.Output[GetGatewayRouteSpecHttpRouteActionRewritePrefix]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteActionRewritePrefixOutput) DefaultPrefix() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteActionRewritePrefix](o, func(v GetGatewayRouteSpecHttpRouteActionRewritePrefix) string { return v.DefaultPrefix })
}

func (o GetGatewayRouteSpecHttpRouteActionRewritePrefixOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteActionRewritePrefix](o, func(v GetGatewayRouteSpecHttpRouteActionRewritePrefix) string { return v.Value })
}

type GetGatewayRouteSpecHttpRouteActionTarget struct {
	Port            int                                                      `pulumi:"port"`
	VirtualServices []GetGatewayRouteSpecHttpRouteActionTargetVirtualService `pulumi:"virtualServices"`
}

type GetGatewayRouteSpecHttpRouteActionTargetArgs struct {
	Port            pulumix.Input[int]                                                           `pulumi:"port"`
	VirtualServices pulumix.Input[[]*GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceArgs] `pulumi:"virtualServices"`
}

func (GetGatewayRouteSpecHttpRouteActionTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteActionTarget)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteActionTargetArgs) ToGetGatewayRouteSpecHttpRouteActionTargetOutput() GetGatewayRouteSpecHttpRouteActionTargetOutput {
	return i.ToGetGatewayRouteSpecHttpRouteActionTargetOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteActionTargetArgs) ToGetGatewayRouteSpecHttpRouteActionTargetOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteActionTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteActionTargetOutput)
}

func (i *GetGatewayRouteSpecHttpRouteActionTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteActionTargetArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteActionTargetOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteActionTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteActionTarget)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteActionTargetOutput) ToGetGatewayRouteSpecHttpRouteActionTargetOutput() GetGatewayRouteSpecHttpRouteActionTargetOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteActionTargetOutput) ToGetGatewayRouteSpecHttpRouteActionTargetOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteActionTargetOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteActionTargetOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRouteActionTarget] {
	return pulumix.Output[GetGatewayRouteSpecHttpRouteActionTarget]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteActionTargetOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteActionTarget](o, func(v GetGatewayRouteSpecHttpRouteActionTarget) int { return v.Port })
}

func (o GetGatewayRouteSpecHttpRouteActionTargetOutput) VirtualServices() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteActionTargetVirtualService, GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttpRouteActionTarget](o, func(v GetGatewayRouteSpecHttpRouteActionTarget) []GetGatewayRouteSpecHttpRouteActionTargetVirtualService {
		return v.VirtualServices
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteActionTargetVirtualService, GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput]{OutputState: value.OutputState}
}

type GetGatewayRouteSpecHttpRouteActionTargetVirtualService struct {
	VirtualServiceName string `pulumi:"virtualServiceName"`
}

type GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceArgs struct {
	VirtualServiceName pulumix.Input[string] `pulumi:"virtualServiceName"`
}

func (GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteActionTargetVirtualService)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceArgs) ToGetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput() GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput {
	return i.ToGetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceArgs) ToGetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput)
}

func (i *GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteActionTargetVirtualService)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput) ToGetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput() GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput) ToGetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRouteActionTargetVirtualService] {
	return pulumix.Output[GetGatewayRouteSpecHttpRouteActionTargetVirtualService]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput) VirtualServiceName() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteActionTargetVirtualService](o, func(v GetGatewayRouteSpecHttpRouteActionTargetVirtualService) string { return v.VirtualServiceName })
}

type GetGatewayRouteSpecHttpRouteMatch struct {
	Headers         []GetGatewayRouteSpecHttpRouteMatchHeader         `pulumi:"headers"`
	Hostnames       []GetGatewayRouteSpecHttpRouteMatchHostname       `pulumi:"hostnames"`
	Paths           []GetGatewayRouteSpecHttpRouteMatchPath           `pulumi:"paths"`
	Port            int                                               `pulumi:"port"`
	Prefix          string                                            `pulumi:"prefix"`
	QueryParameters []GetGatewayRouteSpecHttpRouteMatchQueryParameter `pulumi:"queryParameters"`
}

type GetGatewayRouteSpecHttpRouteMatchArgs struct {
	Headers         pulumix.Input[[]*GetGatewayRouteSpecHttpRouteMatchHeaderArgs]         `pulumi:"headers"`
	Hostnames       pulumix.Input[[]*GetGatewayRouteSpecHttpRouteMatchHostnameArgs]       `pulumi:"hostnames"`
	Paths           pulumix.Input[[]*GetGatewayRouteSpecHttpRouteMatchPathArgs]           `pulumi:"paths"`
	Port            pulumix.Input[int]                                                    `pulumi:"port"`
	Prefix          pulumix.Input[string]                                                 `pulumi:"prefix"`
	QueryParameters pulumix.Input[[]*GetGatewayRouteSpecHttpRouteMatchQueryParameterArgs] `pulumi:"queryParameters"`
}

func (GetGatewayRouteSpecHttpRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatch)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteMatchArgs) ToGetGatewayRouteSpecHttpRouteMatchOutput() GetGatewayRouteSpecHttpRouteMatchOutput {
	return i.ToGetGatewayRouteSpecHttpRouteMatchOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteMatchArgs) ToGetGatewayRouteSpecHttpRouteMatchOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteMatchOutput)
}

func (i *GetGatewayRouteSpecHttpRouteMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteMatchArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteMatchOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatch)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteMatchOutput) ToGetGatewayRouteSpecHttpRouteMatchOutput() GetGatewayRouteSpecHttpRouteMatchOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchOutput) ToGetGatewayRouteSpecHttpRouteMatchOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRouteMatch] {
	return pulumix.Output[GetGatewayRouteSpecHttpRouteMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteMatchOutput) Headers() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatchHeader, GetGatewayRouteSpecHttpRouteMatchHeaderOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttpRouteMatch](o, func(v GetGatewayRouteSpecHttpRouteMatch) []GetGatewayRouteSpecHttpRouteMatchHeader { return v.Headers })
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatchHeader, GetGatewayRouteSpecHttpRouteMatchHeaderOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttpRouteMatchOutput) Hostnames() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatchHostname, GetGatewayRouteSpecHttpRouteMatchHostnameOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttpRouteMatch](o, func(v GetGatewayRouteSpecHttpRouteMatch) []GetGatewayRouteSpecHttpRouteMatchHostname {
		return v.Hostnames
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatchHostname, GetGatewayRouteSpecHttpRouteMatchHostnameOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttpRouteMatchOutput) Paths() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatchPath, GetGatewayRouteSpecHttpRouteMatchPathOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttpRouteMatch](o, func(v GetGatewayRouteSpecHttpRouteMatch) []GetGatewayRouteSpecHttpRouteMatchPath { return v.Paths })
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatchPath, GetGatewayRouteSpecHttpRouteMatchPathOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttpRouteMatchOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatch](o, func(v GetGatewayRouteSpecHttpRouteMatch) int { return v.Port })
}

func (o GetGatewayRouteSpecHttpRouteMatchOutput) Prefix() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatch](o, func(v GetGatewayRouteSpecHttpRouteMatch) string { return v.Prefix })
}

func (o GetGatewayRouteSpecHttpRouteMatchOutput) QueryParameters() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatchQueryParameter, GetGatewayRouteSpecHttpRouteMatchQueryParameterOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttpRouteMatch](o, func(v GetGatewayRouteSpecHttpRouteMatch) []GetGatewayRouteSpecHttpRouteMatchQueryParameter {
		return v.QueryParameters
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatchQueryParameter, GetGatewayRouteSpecHttpRouteMatchQueryParameterOutput]{OutputState: value.OutputState}
}

type GetGatewayRouteSpecHttpRouteMatchHeader struct {
	Invert  bool                                           `pulumi:"invert"`
	Matches []GetGatewayRouteSpecHttpRouteMatchHeaderMatch `pulumi:"matches"`
	// Name of the gateway route.
	Name string `pulumi:"name"`
}

type GetGatewayRouteSpecHttpRouteMatchHeaderArgs struct {
	Invert  pulumix.Input[bool]                                                `pulumi:"invert"`
	Matches pulumix.Input[[]*GetGatewayRouteSpecHttpRouteMatchHeaderMatchArgs] `pulumi:"matches"`
	// Name of the gateway route.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetGatewayRouteSpecHttpRouteMatchHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatchHeader)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteMatchHeaderArgs) ToGetGatewayRouteSpecHttpRouteMatchHeaderOutput() GetGatewayRouteSpecHttpRouteMatchHeaderOutput {
	return i.ToGetGatewayRouteSpecHttpRouteMatchHeaderOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteMatchHeaderArgs) ToGetGatewayRouteSpecHttpRouteMatchHeaderOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteMatchHeaderOutput)
}

func (i *GetGatewayRouteSpecHttpRouteMatchHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteMatchHeaderArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteMatchHeaderOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteMatchHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatchHeader)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderOutput) ToGetGatewayRouteSpecHttpRouteMatchHeaderOutput() GetGatewayRouteSpecHttpRouteMatchHeaderOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderOutput) ToGetGatewayRouteSpecHttpRouteMatchHeaderOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchHeaderOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRouteMatchHeader] {
	return pulumix.Output[GetGatewayRouteSpecHttpRouteMatchHeader]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderOutput) Invert() pulumix.Output[bool] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchHeader](o, func(v GetGatewayRouteSpecHttpRouteMatchHeader) bool { return v.Invert })
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderOutput) Matches() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatchHeaderMatch, GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchHeader](o, func(v GetGatewayRouteSpecHttpRouteMatchHeader) []GetGatewayRouteSpecHttpRouteMatchHeaderMatch {
		return v.Matches
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatchHeaderMatch, GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput]{OutputState: value.OutputState}
}

// Name of the gateway route.
func (o GetGatewayRouteSpecHttpRouteMatchHeaderOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchHeader](o, func(v GetGatewayRouteSpecHttpRouteMatchHeader) string { return v.Name })
}

type GetGatewayRouteSpecHttpRouteMatchHeaderMatch struct {
	Exact  string                                              `pulumi:"exact"`
	Prefix string                                              `pulumi:"prefix"`
	Ranges []GetGatewayRouteSpecHttpRouteMatchHeaderMatchRange `pulumi:"ranges"`
	Regex  string                                              `pulumi:"regex"`
	Suffix string                                              `pulumi:"suffix"`
}

type GetGatewayRouteSpecHttpRouteMatchHeaderMatchArgs struct {
	Exact  pulumix.Input[string]                                                   `pulumi:"exact"`
	Prefix pulumix.Input[string]                                                   `pulumi:"prefix"`
	Ranges pulumix.Input[[]*GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeArgs] `pulumi:"ranges"`
	Regex  pulumix.Input[string]                                                   `pulumi:"regex"`
	Suffix pulumix.Input[string]                                                   `pulumi:"suffix"`
}

func (GetGatewayRouteSpecHttpRouteMatchHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatchHeaderMatch)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteMatchHeaderMatchArgs) ToGetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput() GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput {
	return i.ToGetGatewayRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteMatchHeaderMatchArgs) ToGetGatewayRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput)
}

func (i *GetGatewayRouteSpecHttpRouteMatchHeaderMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteMatchHeaderMatchArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatchHeaderMatch)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput) ToGetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput() GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput) ToGetGatewayRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRouteMatchHeaderMatch] {
	return pulumix.Output[GetGatewayRouteSpecHttpRouteMatchHeaderMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchHeaderMatch](o, func(v GetGatewayRouteSpecHttpRouteMatchHeaderMatch) string { return v.Exact })
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput) Prefix() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchHeaderMatch](o, func(v GetGatewayRouteSpecHttpRouteMatchHeaderMatch) string { return v.Prefix })
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput) Ranges() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatchHeaderMatchRange, GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchHeaderMatch](o, func(v GetGatewayRouteSpecHttpRouteMatchHeaderMatch) []GetGatewayRouteSpecHttpRouteMatchHeaderMatchRange {
		return v.Ranges
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatchHeaderMatchRange, GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput]{OutputState: value.OutputState}
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput) Regex() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchHeaderMatch](o, func(v GetGatewayRouteSpecHttpRouteMatchHeaderMatch) string { return v.Regex })
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput) Suffix() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchHeaderMatch](o, func(v GetGatewayRouteSpecHttpRouteMatchHeaderMatch) string { return v.Suffix })
}

type GetGatewayRouteSpecHttpRouteMatchHeaderMatchRange struct {
	End   int `pulumi:"end"`
	Start int `pulumi:"start"`
}

type GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeArgs struct {
	End   pulumix.Input[int] `pulumi:"end"`
	Start pulumix.Input[int] `pulumi:"start"`
}

func (GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatchHeaderMatchRange)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToGetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput() GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return i.ToGetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToGetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput)
}

func (i *GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatchHeaderMatchRange)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToGetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput() GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToGetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRouteMatchHeaderMatchRange] {
	return pulumix.Output[GetGatewayRouteSpecHttpRouteMatchHeaderMatchRange]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput) End() pulumix.Output[int] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchHeaderMatchRange](o, func(v GetGatewayRouteSpecHttpRouteMatchHeaderMatchRange) int { return v.End })
}

func (o GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput) Start() pulumix.Output[int] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchHeaderMatchRange](o, func(v GetGatewayRouteSpecHttpRouteMatchHeaderMatchRange) int { return v.Start })
}

type GetGatewayRouteSpecHttpRouteMatchHostname struct {
	Exact  string `pulumi:"exact"`
	Suffix string `pulumi:"suffix"`
}

type GetGatewayRouteSpecHttpRouteMatchHostnameArgs struct {
	Exact  pulumix.Input[string] `pulumi:"exact"`
	Suffix pulumix.Input[string] `pulumi:"suffix"`
}

func (GetGatewayRouteSpecHttpRouteMatchHostnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatchHostname)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteMatchHostnameArgs) ToGetGatewayRouteSpecHttpRouteMatchHostnameOutput() GetGatewayRouteSpecHttpRouteMatchHostnameOutput {
	return i.ToGetGatewayRouteSpecHttpRouteMatchHostnameOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteMatchHostnameArgs) ToGetGatewayRouteSpecHttpRouteMatchHostnameOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchHostnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteMatchHostnameOutput)
}

func (i *GetGatewayRouteSpecHttpRouteMatchHostnameArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteMatchHostnameArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteMatchHostnameOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteMatchHostnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatchHostname)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteMatchHostnameOutput) ToGetGatewayRouteSpecHttpRouteMatchHostnameOutput() GetGatewayRouteSpecHttpRouteMatchHostnameOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchHostnameOutput) ToGetGatewayRouteSpecHttpRouteMatchHostnameOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchHostnameOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchHostnameOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRouteMatchHostname] {
	return pulumix.Output[GetGatewayRouteSpecHttpRouteMatchHostname]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteMatchHostnameOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchHostname](o, func(v GetGatewayRouteSpecHttpRouteMatchHostname) string { return v.Exact })
}

func (o GetGatewayRouteSpecHttpRouteMatchHostnameOutput) Suffix() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchHostname](o, func(v GetGatewayRouteSpecHttpRouteMatchHostname) string { return v.Suffix })
}

type GetGatewayRouteSpecHttpRouteMatchPath struct {
	Exact string `pulumi:"exact"`
	Regex string `pulumi:"regex"`
}

type GetGatewayRouteSpecHttpRouteMatchPathArgs struct {
	Exact pulumix.Input[string] `pulumi:"exact"`
	Regex pulumix.Input[string] `pulumi:"regex"`
}

func (GetGatewayRouteSpecHttpRouteMatchPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatchPath)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteMatchPathArgs) ToGetGatewayRouteSpecHttpRouteMatchPathOutput() GetGatewayRouteSpecHttpRouteMatchPathOutput {
	return i.ToGetGatewayRouteSpecHttpRouteMatchPathOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteMatchPathArgs) ToGetGatewayRouteSpecHttpRouteMatchPathOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteMatchPathOutput)
}

func (i *GetGatewayRouteSpecHttpRouteMatchPathArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteMatchPathArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteMatchPathOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteMatchPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatchPath)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteMatchPathOutput) ToGetGatewayRouteSpecHttpRouteMatchPathOutput() GetGatewayRouteSpecHttpRouteMatchPathOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchPathOutput) ToGetGatewayRouteSpecHttpRouteMatchPathOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchPathOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchPathOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRouteMatchPath] {
	return pulumix.Output[GetGatewayRouteSpecHttpRouteMatchPath]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteMatchPathOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchPath](o, func(v GetGatewayRouteSpecHttpRouteMatchPath) string { return v.Exact })
}

func (o GetGatewayRouteSpecHttpRouteMatchPathOutput) Regex() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchPath](o, func(v GetGatewayRouteSpecHttpRouteMatchPath) string { return v.Regex })
}

type GetGatewayRouteSpecHttpRouteMatchQueryParameter struct {
	Matches []GetGatewayRouteSpecHttpRouteMatchQueryParameterMatch `pulumi:"matches"`
	// Name of the gateway route.
	Name string `pulumi:"name"`
}

type GetGatewayRouteSpecHttpRouteMatchQueryParameterArgs struct {
	Matches pulumix.Input[[]*GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchArgs] `pulumi:"matches"`
	// Name of the gateway route.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetGatewayRouteSpecHttpRouteMatchQueryParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatchQueryParameter)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteMatchQueryParameterArgs) ToGetGatewayRouteSpecHttpRouteMatchQueryParameterOutput() GetGatewayRouteSpecHttpRouteMatchQueryParameterOutput {
	return i.ToGetGatewayRouteSpecHttpRouteMatchQueryParameterOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteMatchQueryParameterArgs) ToGetGatewayRouteSpecHttpRouteMatchQueryParameterOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchQueryParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteMatchQueryParameterOutput)
}

func (i *GetGatewayRouteSpecHttpRouteMatchQueryParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteMatchQueryParameterArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteMatchQueryParameterOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteMatchQueryParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatchQueryParameter)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteMatchQueryParameterOutput) ToGetGatewayRouteSpecHttpRouteMatchQueryParameterOutput() GetGatewayRouteSpecHttpRouteMatchQueryParameterOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchQueryParameterOutput) ToGetGatewayRouteSpecHttpRouteMatchQueryParameterOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchQueryParameterOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchQueryParameterOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRouteMatchQueryParameter] {
	return pulumix.Output[GetGatewayRouteSpecHttpRouteMatchQueryParameter]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteMatchQueryParameterOutput) Matches() pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatchQueryParameterMatch, GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput] {
	value := pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchQueryParameter](o, func(v GetGatewayRouteSpecHttpRouteMatchQueryParameter) []GetGatewayRouteSpecHttpRouteMatchQueryParameterMatch {
		return v.Matches
	})
	return pulumix.GArrayOutput[GetGatewayRouteSpecHttpRouteMatchQueryParameterMatch, GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput]{OutputState: value.OutputState}
}

// Name of the gateway route.
func (o GetGatewayRouteSpecHttpRouteMatchQueryParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchQueryParameter](o, func(v GetGatewayRouteSpecHttpRouteMatchQueryParameter) string { return v.Name })
}

type GetGatewayRouteSpecHttpRouteMatchQueryParameterMatch struct {
	Exact string `pulumi:"exact"`
}

type GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchArgs struct {
	Exact pulumix.Input[string] `pulumi:"exact"`
}

func (GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatchQueryParameterMatch)(nil)).Elem()
}

func (i GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchArgs) ToGetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput() GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return i.ToGetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutputWithContext(context.Background())
}

func (i GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchArgs) ToGetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput)
}

func (i *GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchArgs] {
	return pulumix.Val(i)
}

type GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput struct{ *pulumi.OutputState }

func (GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayRouteSpecHttpRouteMatchQueryParameterMatch)(nil)).Elem()
}

func (o GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput) ToGetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput() GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput) ToGetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return o
}

func (o GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayRouteSpecHttpRouteMatchQueryParameterMatch] {
	return pulumix.Output[GetGatewayRouteSpecHttpRouteMatchQueryParameterMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetGatewayRouteSpecHttpRouteMatchQueryParameterMatch](o, func(v GetGatewayRouteSpecHttpRouteMatchQueryParameterMatch) string { return v.Exact })
}

type GetMeshSpec struct {
	EgressFilters []GetMeshSpecEgressFilter `pulumi:"egressFilters"`
}

type GetMeshSpecArgs struct {
	EgressFilters pulumix.Input[[]*GetMeshSpecEgressFilterArgs] `pulumi:"egressFilters"`
}

func (GetMeshSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMeshSpec)(nil)).Elem()
}

func (i GetMeshSpecArgs) ToGetMeshSpecOutput() GetMeshSpecOutput {
	return i.ToGetMeshSpecOutputWithContext(context.Background())
}

func (i GetMeshSpecArgs) ToGetMeshSpecOutputWithContext(ctx context.Context) GetMeshSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMeshSpecOutput)
}

func (i *GetMeshSpecArgs) ToOutput(ctx context.Context) pulumix.Output[*GetMeshSpecArgs] {
	return pulumix.Val(i)
}

type GetMeshSpecOutput struct{ *pulumi.OutputState }

func (GetMeshSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMeshSpec)(nil)).Elem()
}

func (o GetMeshSpecOutput) ToGetMeshSpecOutput() GetMeshSpecOutput {
	return o
}

func (o GetMeshSpecOutput) ToGetMeshSpecOutputWithContext(ctx context.Context) GetMeshSpecOutput {
	return o
}

func (o GetMeshSpecOutput) ToOutput(ctx context.Context) pulumix.Output[GetMeshSpec] {
	return pulumix.Output[GetMeshSpec]{
		OutputState: o.OutputState,
	}
}

func (o GetMeshSpecOutput) EgressFilters() pulumix.GArrayOutput[GetMeshSpecEgressFilter, GetMeshSpecEgressFilterOutput] {
	value := pulumix.Apply[GetMeshSpec](o, func(v GetMeshSpec) []GetMeshSpecEgressFilter { return v.EgressFilters })
	return pulumix.GArrayOutput[GetMeshSpecEgressFilter, GetMeshSpecEgressFilterOutput]{OutputState: value.OutputState}
}

type GetMeshSpecEgressFilter struct {
	Type string `pulumi:"type"`
}

type GetMeshSpecEgressFilterArgs struct {
	Type pulumix.Input[string] `pulumi:"type"`
}

func (GetMeshSpecEgressFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMeshSpecEgressFilter)(nil)).Elem()
}

func (i GetMeshSpecEgressFilterArgs) ToGetMeshSpecEgressFilterOutput() GetMeshSpecEgressFilterOutput {
	return i.ToGetMeshSpecEgressFilterOutputWithContext(context.Background())
}

func (i GetMeshSpecEgressFilterArgs) ToGetMeshSpecEgressFilterOutputWithContext(ctx context.Context) GetMeshSpecEgressFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMeshSpecEgressFilterOutput)
}

func (i *GetMeshSpecEgressFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetMeshSpecEgressFilterArgs] {
	return pulumix.Val(i)
}

type GetMeshSpecEgressFilterOutput struct{ *pulumi.OutputState }

func (GetMeshSpecEgressFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMeshSpecEgressFilter)(nil)).Elem()
}

func (o GetMeshSpecEgressFilterOutput) ToGetMeshSpecEgressFilterOutput() GetMeshSpecEgressFilterOutput {
	return o
}

func (o GetMeshSpecEgressFilterOutput) ToGetMeshSpecEgressFilterOutputWithContext(ctx context.Context) GetMeshSpecEgressFilterOutput {
	return o
}

func (o GetMeshSpecEgressFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetMeshSpecEgressFilter] {
	return pulumix.Output[GetMeshSpecEgressFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetMeshSpecEgressFilterOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetMeshSpecEgressFilter](o, func(v GetMeshSpecEgressFilter) string { return v.Type })
}

type GetRouteSpec struct {
	GrpcRoutes  []GetRouteSpecGrpcRoute  `pulumi:"grpcRoutes"`
	Http2Routes []GetRouteSpecHttp2Route `pulumi:"http2Routes"`
	HttpRoutes  []GetRouteSpecHttpRoute  `pulumi:"httpRoutes"`
	Priority    int                      `pulumi:"priority"`
	TcpRoutes   []GetRouteSpecTcpRoute   `pulumi:"tcpRoutes"`
}

type GetRouteSpecArgs struct {
	GrpcRoutes  pulumix.Input[[]*GetRouteSpecGrpcRouteArgs]  `pulumi:"grpcRoutes"`
	Http2Routes pulumix.Input[[]*GetRouteSpecHttp2RouteArgs] `pulumi:"http2Routes"`
	HttpRoutes  pulumix.Input[[]*GetRouteSpecHttpRouteArgs]  `pulumi:"httpRoutes"`
	Priority    pulumix.Input[int]                           `pulumi:"priority"`
	TcpRoutes   pulumix.Input[[]*GetRouteSpecTcpRouteArgs]   `pulumi:"tcpRoutes"`
}

func (GetRouteSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpec)(nil)).Elem()
}

func (i GetRouteSpecArgs) ToGetRouteSpecOutput() GetRouteSpecOutput {
	return i.ToGetRouteSpecOutputWithContext(context.Background())
}

func (i GetRouteSpecArgs) ToGetRouteSpecOutputWithContext(ctx context.Context) GetRouteSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecOutput)
}

func (i *GetRouteSpecArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecOutput struct{ *pulumi.OutputState }

func (GetRouteSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpec)(nil)).Elem()
}

func (o GetRouteSpecOutput) ToGetRouteSpecOutput() GetRouteSpecOutput {
	return o
}

func (o GetRouteSpecOutput) ToGetRouteSpecOutputWithContext(ctx context.Context) GetRouteSpecOutput {
	return o
}

func (o GetRouteSpecOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpec] {
	return pulumix.Output[GetRouteSpec]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecOutput) GrpcRoutes() pulumix.GArrayOutput[GetRouteSpecGrpcRoute, GetRouteSpecGrpcRouteOutput] {
	value := pulumix.Apply[GetRouteSpec](o, func(v GetRouteSpec) []GetRouteSpecGrpcRoute { return v.GrpcRoutes })
	return pulumix.GArrayOutput[GetRouteSpecGrpcRoute, GetRouteSpecGrpcRouteOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecOutput) Http2Routes() pulumix.GArrayOutput[GetRouteSpecHttp2Route, GetRouteSpecHttp2RouteOutput] {
	value := pulumix.Apply[GetRouteSpec](o, func(v GetRouteSpec) []GetRouteSpecHttp2Route { return v.Http2Routes })
	return pulumix.GArrayOutput[GetRouteSpecHttp2Route, GetRouteSpecHttp2RouteOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecOutput) HttpRoutes() pulumix.GArrayOutput[GetRouteSpecHttpRoute, GetRouteSpecHttpRouteOutput] {
	value := pulumix.Apply[GetRouteSpec](o, func(v GetRouteSpec) []GetRouteSpecHttpRoute { return v.HttpRoutes })
	return pulumix.GArrayOutput[GetRouteSpecHttpRoute, GetRouteSpecHttpRouteOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecOutput) Priority() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpec](o, func(v GetRouteSpec) int { return v.Priority })
}

func (o GetRouteSpecOutput) TcpRoutes() pulumix.GArrayOutput[GetRouteSpecTcpRoute, GetRouteSpecTcpRouteOutput] {
	value := pulumix.Apply[GetRouteSpec](o, func(v GetRouteSpec) []GetRouteSpecTcpRoute { return v.TcpRoutes })
	return pulumix.GArrayOutput[GetRouteSpecTcpRoute, GetRouteSpecTcpRouteOutput]{OutputState: value.OutputState}
}

type GetRouteSpecGrpcRoute struct {
	Actions       []GetRouteSpecGrpcRouteAction      `pulumi:"actions"`
	Matches       []GetRouteSpecGrpcRouteMatch       `pulumi:"matches"`
	RetryPolicies []GetRouteSpecGrpcRouteRetryPolicy `pulumi:"retryPolicies"`
	Timeouts      []GetRouteSpecGrpcRouteTimeout     `pulumi:"timeouts"`
}

type GetRouteSpecGrpcRouteArgs struct {
	Actions       pulumix.Input[[]*GetRouteSpecGrpcRouteActionArgs]      `pulumi:"actions"`
	Matches       pulumix.Input[[]*GetRouteSpecGrpcRouteMatchArgs]       `pulumi:"matches"`
	RetryPolicies pulumix.Input[[]*GetRouteSpecGrpcRouteRetryPolicyArgs] `pulumi:"retryPolicies"`
	Timeouts      pulumix.Input[[]*GetRouteSpecGrpcRouteTimeoutArgs]     `pulumi:"timeouts"`
}

func (GetRouteSpecGrpcRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRoute)(nil)).Elem()
}

func (i GetRouteSpecGrpcRouteArgs) ToGetRouteSpecGrpcRouteOutput() GetRouteSpecGrpcRouteOutput {
	return i.ToGetRouteSpecGrpcRouteOutputWithContext(context.Background())
}

func (i GetRouteSpecGrpcRouteArgs) ToGetRouteSpecGrpcRouteOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecGrpcRouteOutput)
}

func (i *GetRouteSpecGrpcRouteArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecGrpcRouteArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecGrpcRouteOutput struct{ *pulumi.OutputState }

func (GetRouteSpecGrpcRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRoute)(nil)).Elem()
}

func (o GetRouteSpecGrpcRouteOutput) ToGetRouteSpecGrpcRouteOutput() GetRouteSpecGrpcRouteOutput {
	return o
}

func (o GetRouteSpecGrpcRouteOutput) ToGetRouteSpecGrpcRouteOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteOutput {
	return o
}

func (o GetRouteSpecGrpcRouteOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecGrpcRoute] {
	return pulumix.Output[GetRouteSpecGrpcRoute]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecGrpcRouteOutput) Actions() pulumix.GArrayOutput[GetRouteSpecGrpcRouteAction, GetRouteSpecGrpcRouteActionOutput] {
	value := pulumix.Apply[GetRouteSpecGrpcRoute](o, func(v GetRouteSpecGrpcRoute) []GetRouteSpecGrpcRouteAction { return v.Actions })
	return pulumix.GArrayOutput[GetRouteSpecGrpcRouteAction, GetRouteSpecGrpcRouteActionOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecGrpcRouteOutput) Matches() pulumix.GArrayOutput[GetRouteSpecGrpcRouteMatch, GetRouteSpecGrpcRouteMatchOutput] {
	value := pulumix.Apply[GetRouteSpecGrpcRoute](o, func(v GetRouteSpecGrpcRoute) []GetRouteSpecGrpcRouteMatch { return v.Matches })
	return pulumix.GArrayOutput[GetRouteSpecGrpcRouteMatch, GetRouteSpecGrpcRouteMatchOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecGrpcRouteOutput) RetryPolicies() pulumix.GArrayOutput[GetRouteSpecGrpcRouteRetryPolicy, GetRouteSpecGrpcRouteRetryPolicyOutput] {
	value := pulumix.Apply[GetRouteSpecGrpcRoute](o, func(v GetRouteSpecGrpcRoute) []GetRouteSpecGrpcRouteRetryPolicy { return v.RetryPolicies })
	return pulumix.GArrayOutput[GetRouteSpecGrpcRouteRetryPolicy, GetRouteSpecGrpcRouteRetryPolicyOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecGrpcRouteOutput) Timeouts() pulumix.GArrayOutput[GetRouteSpecGrpcRouteTimeout, GetRouteSpecGrpcRouteTimeoutOutput] {
	value := pulumix.Apply[GetRouteSpecGrpcRoute](o, func(v GetRouteSpecGrpcRoute) []GetRouteSpecGrpcRouteTimeout { return v.Timeouts })
	return pulumix.GArrayOutput[GetRouteSpecGrpcRouteTimeout, GetRouteSpecGrpcRouteTimeoutOutput]{OutputState: value.OutputState}
}

type GetRouteSpecGrpcRouteAction struct {
	WeightedTargets []GetRouteSpecGrpcRouteActionWeightedTarget `pulumi:"weightedTargets"`
}

type GetRouteSpecGrpcRouteActionArgs struct {
	WeightedTargets pulumix.Input[[]*GetRouteSpecGrpcRouteActionWeightedTargetArgs] `pulumi:"weightedTargets"`
}

func (GetRouteSpecGrpcRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteAction)(nil)).Elem()
}

func (i GetRouteSpecGrpcRouteActionArgs) ToGetRouteSpecGrpcRouteActionOutput() GetRouteSpecGrpcRouteActionOutput {
	return i.ToGetRouteSpecGrpcRouteActionOutputWithContext(context.Background())
}

func (i GetRouteSpecGrpcRouteActionArgs) ToGetRouteSpecGrpcRouteActionOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecGrpcRouteActionOutput)
}

func (i *GetRouteSpecGrpcRouteActionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecGrpcRouteActionArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecGrpcRouteActionOutput struct{ *pulumi.OutputState }

func (GetRouteSpecGrpcRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteAction)(nil)).Elem()
}

func (o GetRouteSpecGrpcRouteActionOutput) ToGetRouteSpecGrpcRouteActionOutput() GetRouteSpecGrpcRouteActionOutput {
	return o
}

func (o GetRouteSpecGrpcRouteActionOutput) ToGetRouteSpecGrpcRouteActionOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteActionOutput {
	return o
}

func (o GetRouteSpecGrpcRouteActionOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecGrpcRouteAction] {
	return pulumix.Output[GetRouteSpecGrpcRouteAction]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecGrpcRouteActionOutput) WeightedTargets() pulumix.GArrayOutput[GetRouteSpecGrpcRouteActionWeightedTarget, GetRouteSpecGrpcRouteActionWeightedTargetOutput] {
	value := pulumix.Apply[GetRouteSpecGrpcRouteAction](o, func(v GetRouteSpecGrpcRouteAction) []GetRouteSpecGrpcRouteActionWeightedTarget {
		return v.WeightedTargets
	})
	return pulumix.GArrayOutput[GetRouteSpecGrpcRouteActionWeightedTarget, GetRouteSpecGrpcRouteActionWeightedTargetOutput]{OutputState: value.OutputState}
}

type GetRouteSpecGrpcRouteActionWeightedTarget struct {
	Port        int    `pulumi:"port"`
	VirtualNode string `pulumi:"virtualNode"`
	Weight      int    `pulumi:"weight"`
}

type GetRouteSpecGrpcRouteActionWeightedTargetArgs struct {
	Port        pulumix.Input[int]    `pulumi:"port"`
	VirtualNode pulumix.Input[string] `pulumi:"virtualNode"`
	Weight      pulumix.Input[int]    `pulumi:"weight"`
}

func (GetRouteSpecGrpcRouteActionWeightedTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteActionWeightedTarget)(nil)).Elem()
}

func (i GetRouteSpecGrpcRouteActionWeightedTargetArgs) ToGetRouteSpecGrpcRouteActionWeightedTargetOutput() GetRouteSpecGrpcRouteActionWeightedTargetOutput {
	return i.ToGetRouteSpecGrpcRouteActionWeightedTargetOutputWithContext(context.Background())
}

func (i GetRouteSpecGrpcRouteActionWeightedTargetArgs) ToGetRouteSpecGrpcRouteActionWeightedTargetOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteActionWeightedTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecGrpcRouteActionWeightedTargetOutput)
}

func (i *GetRouteSpecGrpcRouteActionWeightedTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecGrpcRouteActionWeightedTargetArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecGrpcRouteActionWeightedTargetOutput struct{ *pulumi.OutputState }

func (GetRouteSpecGrpcRouteActionWeightedTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteActionWeightedTarget)(nil)).Elem()
}

func (o GetRouteSpecGrpcRouteActionWeightedTargetOutput) ToGetRouteSpecGrpcRouteActionWeightedTargetOutput() GetRouteSpecGrpcRouteActionWeightedTargetOutput {
	return o
}

func (o GetRouteSpecGrpcRouteActionWeightedTargetOutput) ToGetRouteSpecGrpcRouteActionWeightedTargetOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteActionWeightedTargetOutput {
	return o
}

func (o GetRouteSpecGrpcRouteActionWeightedTargetOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecGrpcRouteActionWeightedTarget] {
	return pulumix.Output[GetRouteSpecGrpcRouteActionWeightedTarget]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecGrpcRouteActionWeightedTargetOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecGrpcRouteActionWeightedTarget](o, func(v GetRouteSpecGrpcRouteActionWeightedTarget) int { return v.Port })
}

func (o GetRouteSpecGrpcRouteActionWeightedTargetOutput) VirtualNode() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecGrpcRouteActionWeightedTarget](o, func(v GetRouteSpecGrpcRouteActionWeightedTarget) string { return v.VirtualNode })
}

func (o GetRouteSpecGrpcRouteActionWeightedTargetOutput) Weight() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecGrpcRouteActionWeightedTarget](o, func(v GetRouteSpecGrpcRouteActionWeightedTarget) int { return v.Weight })
}

type GetRouteSpecGrpcRouteMatch struct {
	Metadatas   []GetRouteSpecGrpcRouteMatchMetadata `pulumi:"metadatas"`
	MethodName  string                               `pulumi:"methodName"`
	Port        int                                  `pulumi:"port"`
	Prefix      string                               `pulumi:"prefix"`
	ServiceName string                               `pulumi:"serviceName"`
}

type GetRouteSpecGrpcRouteMatchArgs struct {
	Metadatas   pulumix.Input[[]*GetRouteSpecGrpcRouteMatchMetadataArgs] `pulumi:"metadatas"`
	MethodName  pulumix.Input[string]                                    `pulumi:"methodName"`
	Port        pulumix.Input[int]                                       `pulumi:"port"`
	Prefix      pulumix.Input[string]                                    `pulumi:"prefix"`
	ServiceName pulumix.Input[string]                                    `pulumi:"serviceName"`
}

func (GetRouteSpecGrpcRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteMatch)(nil)).Elem()
}

func (i GetRouteSpecGrpcRouteMatchArgs) ToGetRouteSpecGrpcRouteMatchOutput() GetRouteSpecGrpcRouteMatchOutput {
	return i.ToGetRouteSpecGrpcRouteMatchOutputWithContext(context.Background())
}

func (i GetRouteSpecGrpcRouteMatchArgs) ToGetRouteSpecGrpcRouteMatchOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecGrpcRouteMatchOutput)
}

func (i *GetRouteSpecGrpcRouteMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecGrpcRouteMatchArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecGrpcRouteMatchOutput struct{ *pulumi.OutputState }

func (GetRouteSpecGrpcRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteMatch)(nil)).Elem()
}

func (o GetRouteSpecGrpcRouteMatchOutput) ToGetRouteSpecGrpcRouteMatchOutput() GetRouteSpecGrpcRouteMatchOutput {
	return o
}

func (o GetRouteSpecGrpcRouteMatchOutput) ToGetRouteSpecGrpcRouteMatchOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteMatchOutput {
	return o
}

func (o GetRouteSpecGrpcRouteMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecGrpcRouteMatch] {
	return pulumix.Output[GetRouteSpecGrpcRouteMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecGrpcRouteMatchOutput) Metadatas() pulumix.GArrayOutput[GetRouteSpecGrpcRouteMatchMetadata, GetRouteSpecGrpcRouteMatchMetadataOutput] {
	value := pulumix.Apply[GetRouteSpecGrpcRouteMatch](o, func(v GetRouteSpecGrpcRouteMatch) []GetRouteSpecGrpcRouteMatchMetadata { return v.Metadatas })
	return pulumix.GArrayOutput[GetRouteSpecGrpcRouteMatchMetadata, GetRouteSpecGrpcRouteMatchMetadataOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecGrpcRouteMatchOutput) MethodName() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecGrpcRouteMatch](o, func(v GetRouteSpecGrpcRouteMatch) string { return v.MethodName })
}

func (o GetRouteSpecGrpcRouteMatchOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecGrpcRouteMatch](o, func(v GetRouteSpecGrpcRouteMatch) int { return v.Port })
}

func (o GetRouteSpecGrpcRouteMatchOutput) Prefix() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecGrpcRouteMatch](o, func(v GetRouteSpecGrpcRouteMatch) string { return v.Prefix })
}

func (o GetRouteSpecGrpcRouteMatchOutput) ServiceName() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecGrpcRouteMatch](o, func(v GetRouteSpecGrpcRouteMatch) string { return v.ServiceName })
}

type GetRouteSpecGrpcRouteMatchMetadata struct {
	Invert  bool                                      `pulumi:"invert"`
	Matches []GetRouteSpecGrpcRouteMatchMetadataMatch `pulumi:"matches"`
	// Name of the route.
	Name string `pulumi:"name"`
}

type GetRouteSpecGrpcRouteMatchMetadataArgs struct {
	Invert  pulumix.Input[bool]                                           `pulumi:"invert"`
	Matches pulumix.Input[[]*GetRouteSpecGrpcRouteMatchMetadataMatchArgs] `pulumi:"matches"`
	// Name of the route.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetRouteSpecGrpcRouteMatchMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteMatchMetadata)(nil)).Elem()
}

func (i GetRouteSpecGrpcRouteMatchMetadataArgs) ToGetRouteSpecGrpcRouteMatchMetadataOutput() GetRouteSpecGrpcRouteMatchMetadataOutput {
	return i.ToGetRouteSpecGrpcRouteMatchMetadataOutputWithContext(context.Background())
}

func (i GetRouteSpecGrpcRouteMatchMetadataArgs) ToGetRouteSpecGrpcRouteMatchMetadataOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteMatchMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecGrpcRouteMatchMetadataOutput)
}

func (i *GetRouteSpecGrpcRouteMatchMetadataArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecGrpcRouteMatchMetadataArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecGrpcRouteMatchMetadataOutput struct{ *pulumi.OutputState }

func (GetRouteSpecGrpcRouteMatchMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteMatchMetadata)(nil)).Elem()
}

func (o GetRouteSpecGrpcRouteMatchMetadataOutput) ToGetRouteSpecGrpcRouteMatchMetadataOutput() GetRouteSpecGrpcRouteMatchMetadataOutput {
	return o
}

func (o GetRouteSpecGrpcRouteMatchMetadataOutput) ToGetRouteSpecGrpcRouteMatchMetadataOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteMatchMetadataOutput {
	return o
}

func (o GetRouteSpecGrpcRouteMatchMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecGrpcRouteMatchMetadata] {
	return pulumix.Output[GetRouteSpecGrpcRouteMatchMetadata]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecGrpcRouteMatchMetadataOutput) Invert() pulumix.Output[bool] {
	return pulumix.Apply[GetRouteSpecGrpcRouteMatchMetadata](o, func(v GetRouteSpecGrpcRouteMatchMetadata) bool { return v.Invert })
}

func (o GetRouteSpecGrpcRouteMatchMetadataOutput) Matches() pulumix.GArrayOutput[GetRouteSpecGrpcRouteMatchMetadataMatch, GetRouteSpecGrpcRouteMatchMetadataMatchOutput] {
	value := pulumix.Apply[GetRouteSpecGrpcRouteMatchMetadata](o, func(v GetRouteSpecGrpcRouteMatchMetadata) []GetRouteSpecGrpcRouteMatchMetadataMatch { return v.Matches })
	return pulumix.GArrayOutput[GetRouteSpecGrpcRouteMatchMetadataMatch, GetRouteSpecGrpcRouteMatchMetadataMatchOutput]{OutputState: value.OutputState}
}

// Name of the route.
func (o GetRouteSpecGrpcRouteMatchMetadataOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecGrpcRouteMatchMetadata](o, func(v GetRouteSpecGrpcRouteMatchMetadata) string { return v.Name })
}

type GetRouteSpecGrpcRouteMatchMetadataMatch struct {
	Exact  string                                         `pulumi:"exact"`
	Prefix string                                         `pulumi:"prefix"`
	Ranges []GetRouteSpecGrpcRouteMatchMetadataMatchRange `pulumi:"ranges"`
	Regex  string                                         `pulumi:"regex"`
	Suffix string                                         `pulumi:"suffix"`
}

type GetRouteSpecGrpcRouteMatchMetadataMatchArgs struct {
	Exact  pulumix.Input[string]                                              `pulumi:"exact"`
	Prefix pulumix.Input[string]                                              `pulumi:"prefix"`
	Ranges pulumix.Input[[]*GetRouteSpecGrpcRouteMatchMetadataMatchRangeArgs] `pulumi:"ranges"`
	Regex  pulumix.Input[string]                                              `pulumi:"regex"`
	Suffix pulumix.Input[string]                                              `pulumi:"suffix"`
}

func (GetRouteSpecGrpcRouteMatchMetadataMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteMatchMetadataMatch)(nil)).Elem()
}

func (i GetRouteSpecGrpcRouteMatchMetadataMatchArgs) ToGetRouteSpecGrpcRouteMatchMetadataMatchOutput() GetRouteSpecGrpcRouteMatchMetadataMatchOutput {
	return i.ToGetRouteSpecGrpcRouteMatchMetadataMatchOutputWithContext(context.Background())
}

func (i GetRouteSpecGrpcRouteMatchMetadataMatchArgs) ToGetRouteSpecGrpcRouteMatchMetadataMatchOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteMatchMetadataMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecGrpcRouteMatchMetadataMatchOutput)
}

func (i *GetRouteSpecGrpcRouteMatchMetadataMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecGrpcRouteMatchMetadataMatchArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecGrpcRouteMatchMetadataMatchOutput struct{ *pulumi.OutputState }

func (GetRouteSpecGrpcRouteMatchMetadataMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteMatchMetadataMatch)(nil)).Elem()
}

func (o GetRouteSpecGrpcRouteMatchMetadataMatchOutput) ToGetRouteSpecGrpcRouteMatchMetadataMatchOutput() GetRouteSpecGrpcRouteMatchMetadataMatchOutput {
	return o
}

func (o GetRouteSpecGrpcRouteMatchMetadataMatchOutput) ToGetRouteSpecGrpcRouteMatchMetadataMatchOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteMatchMetadataMatchOutput {
	return o
}

func (o GetRouteSpecGrpcRouteMatchMetadataMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecGrpcRouteMatchMetadataMatch] {
	return pulumix.Output[GetRouteSpecGrpcRouteMatchMetadataMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecGrpcRouteMatchMetadataMatchOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecGrpcRouteMatchMetadataMatch](o, func(v GetRouteSpecGrpcRouteMatchMetadataMatch) string { return v.Exact })
}

func (o GetRouteSpecGrpcRouteMatchMetadataMatchOutput) Prefix() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecGrpcRouteMatchMetadataMatch](o, func(v GetRouteSpecGrpcRouteMatchMetadataMatch) string { return v.Prefix })
}

func (o GetRouteSpecGrpcRouteMatchMetadataMatchOutput) Ranges() pulumix.GArrayOutput[GetRouteSpecGrpcRouteMatchMetadataMatchRange, GetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput] {
	value := pulumix.Apply[GetRouteSpecGrpcRouteMatchMetadataMatch](o, func(v GetRouteSpecGrpcRouteMatchMetadataMatch) []GetRouteSpecGrpcRouteMatchMetadataMatchRange {
		return v.Ranges
	})
	return pulumix.GArrayOutput[GetRouteSpecGrpcRouteMatchMetadataMatchRange, GetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecGrpcRouteMatchMetadataMatchOutput) Regex() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecGrpcRouteMatchMetadataMatch](o, func(v GetRouteSpecGrpcRouteMatchMetadataMatch) string { return v.Regex })
}

func (o GetRouteSpecGrpcRouteMatchMetadataMatchOutput) Suffix() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecGrpcRouteMatchMetadataMatch](o, func(v GetRouteSpecGrpcRouteMatchMetadataMatch) string { return v.Suffix })
}

type GetRouteSpecGrpcRouteMatchMetadataMatchRange struct {
	End   int `pulumi:"end"`
	Start int `pulumi:"start"`
}

type GetRouteSpecGrpcRouteMatchMetadataMatchRangeArgs struct {
	End   pulumix.Input[int] `pulumi:"end"`
	Start pulumix.Input[int] `pulumi:"start"`
}

func (GetRouteSpecGrpcRouteMatchMetadataMatchRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteMatchMetadataMatchRange)(nil)).Elem()
}

func (i GetRouteSpecGrpcRouteMatchMetadataMatchRangeArgs) ToGetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput() GetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput {
	return i.ToGetRouteSpecGrpcRouteMatchMetadataMatchRangeOutputWithContext(context.Background())
}

func (i GetRouteSpecGrpcRouteMatchMetadataMatchRangeArgs) ToGetRouteSpecGrpcRouteMatchMetadataMatchRangeOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput)
}

func (i *GetRouteSpecGrpcRouteMatchMetadataMatchRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecGrpcRouteMatchMetadataMatchRangeArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput struct{ *pulumi.OutputState }

func (GetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteMatchMetadataMatchRange)(nil)).Elem()
}

func (o GetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput) ToGetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput() GetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput {
	return o
}

func (o GetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput) ToGetRouteSpecGrpcRouteMatchMetadataMatchRangeOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput {
	return o
}

func (o GetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecGrpcRouteMatchMetadataMatchRange] {
	return pulumix.Output[GetRouteSpecGrpcRouteMatchMetadataMatchRange]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput) End() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecGrpcRouteMatchMetadataMatchRange](o, func(v GetRouteSpecGrpcRouteMatchMetadataMatchRange) int { return v.End })
}

func (o GetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput) Start() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecGrpcRouteMatchMetadataMatchRange](o, func(v GetRouteSpecGrpcRouteMatchMetadataMatchRange) int { return v.Start })
}

type GetRouteSpecGrpcRouteRetryPolicy struct {
	GrpcRetryEvents  []string                                          `pulumi:"grpcRetryEvents"`
	HttpRetryEvents  []string                                          `pulumi:"httpRetryEvents"`
	MaxRetries       int                                               `pulumi:"maxRetries"`
	PerRetryTimeouts []GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeout `pulumi:"perRetryTimeouts"`
	TcpRetryEvents   []string                                          `pulumi:"tcpRetryEvents"`
}

type GetRouteSpecGrpcRouteRetryPolicyArgs struct {
	GrpcRetryEvents  pulumix.Input[[]string]                                               `pulumi:"grpcRetryEvents"`
	HttpRetryEvents  pulumix.Input[[]string]                                               `pulumi:"httpRetryEvents"`
	MaxRetries       pulumix.Input[int]                                                    `pulumi:"maxRetries"`
	PerRetryTimeouts pulumix.Input[[]*GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs] `pulumi:"perRetryTimeouts"`
	TcpRetryEvents   pulumix.Input[[]string]                                               `pulumi:"tcpRetryEvents"`
}

func (GetRouteSpecGrpcRouteRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteRetryPolicy)(nil)).Elem()
}

func (i GetRouteSpecGrpcRouteRetryPolicyArgs) ToGetRouteSpecGrpcRouteRetryPolicyOutput() GetRouteSpecGrpcRouteRetryPolicyOutput {
	return i.ToGetRouteSpecGrpcRouteRetryPolicyOutputWithContext(context.Background())
}

func (i GetRouteSpecGrpcRouteRetryPolicyArgs) ToGetRouteSpecGrpcRouteRetryPolicyOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecGrpcRouteRetryPolicyOutput)
}

func (i *GetRouteSpecGrpcRouteRetryPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecGrpcRouteRetryPolicyArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecGrpcRouteRetryPolicyOutput struct{ *pulumi.OutputState }

func (GetRouteSpecGrpcRouteRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteRetryPolicy)(nil)).Elem()
}

func (o GetRouteSpecGrpcRouteRetryPolicyOutput) ToGetRouteSpecGrpcRouteRetryPolicyOutput() GetRouteSpecGrpcRouteRetryPolicyOutput {
	return o
}

func (o GetRouteSpecGrpcRouteRetryPolicyOutput) ToGetRouteSpecGrpcRouteRetryPolicyOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteRetryPolicyOutput {
	return o
}

func (o GetRouteSpecGrpcRouteRetryPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecGrpcRouteRetryPolicy] {
	return pulumix.Output[GetRouteSpecGrpcRouteRetryPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecGrpcRouteRetryPolicyOutput) GrpcRetryEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetRouteSpecGrpcRouteRetryPolicy](o, func(v GetRouteSpecGrpcRouteRetryPolicy) []string { return v.GrpcRetryEvents })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetRouteSpecGrpcRouteRetryPolicyOutput) HttpRetryEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetRouteSpecGrpcRouteRetryPolicy](o, func(v GetRouteSpecGrpcRouteRetryPolicy) []string { return v.HttpRetryEvents })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetRouteSpecGrpcRouteRetryPolicyOutput) MaxRetries() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecGrpcRouteRetryPolicy](o, func(v GetRouteSpecGrpcRouteRetryPolicy) int { return v.MaxRetries })
}

func (o GetRouteSpecGrpcRouteRetryPolicyOutput) PerRetryTimeouts() pulumix.GArrayOutput[GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeout, GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput] {
	value := pulumix.Apply[GetRouteSpecGrpcRouteRetryPolicy](o, func(v GetRouteSpecGrpcRouteRetryPolicy) []GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeout {
		return v.PerRetryTimeouts
	})
	return pulumix.GArrayOutput[GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeout, GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecGrpcRouteRetryPolicyOutput) TcpRetryEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetRouteSpecGrpcRouteRetryPolicy](o, func(v GetRouteSpecGrpcRouteRetryPolicy) []string { return v.TcpRetryEvents })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeout struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeout)(nil)).Elem()
}

func (i GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs) ToGetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput() GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput {
	return i.ToGetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutputWithContext(context.Background())
}

func (i GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs) ToGetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput)
}

func (i *GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput struct{ *pulumi.OutputState }

func (GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeout)(nil)).Elem()
}

func (o GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput) ToGetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput() GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput {
	return o
}

func (o GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput) ToGetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput {
	return o
}

func (o GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeout] {
	return pulumix.Output[GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeout]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeout](o, func(v GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeout) string { return v.Unit })
}

func (o GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeout](o, func(v GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeout) int { return v.Value })
}

type GetRouteSpecGrpcRouteTimeout struct {
	Idles       []GetRouteSpecGrpcRouteTimeoutIdle       `pulumi:"idles"`
	PerRequests []GetRouteSpecGrpcRouteTimeoutPerRequest `pulumi:"perRequests"`
}

type GetRouteSpecGrpcRouteTimeoutArgs struct {
	Idles       pulumix.Input[[]*GetRouteSpecGrpcRouteTimeoutIdleArgs]       `pulumi:"idles"`
	PerRequests pulumix.Input[[]*GetRouteSpecGrpcRouteTimeoutPerRequestArgs] `pulumi:"perRequests"`
}

func (GetRouteSpecGrpcRouteTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteTimeout)(nil)).Elem()
}

func (i GetRouteSpecGrpcRouteTimeoutArgs) ToGetRouteSpecGrpcRouteTimeoutOutput() GetRouteSpecGrpcRouteTimeoutOutput {
	return i.ToGetRouteSpecGrpcRouteTimeoutOutputWithContext(context.Background())
}

func (i GetRouteSpecGrpcRouteTimeoutArgs) ToGetRouteSpecGrpcRouteTimeoutOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecGrpcRouteTimeoutOutput)
}

func (i *GetRouteSpecGrpcRouteTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecGrpcRouteTimeoutArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecGrpcRouteTimeoutOutput struct{ *pulumi.OutputState }

func (GetRouteSpecGrpcRouteTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteTimeout)(nil)).Elem()
}

func (o GetRouteSpecGrpcRouteTimeoutOutput) ToGetRouteSpecGrpcRouteTimeoutOutput() GetRouteSpecGrpcRouteTimeoutOutput {
	return o
}

func (o GetRouteSpecGrpcRouteTimeoutOutput) ToGetRouteSpecGrpcRouteTimeoutOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteTimeoutOutput {
	return o
}

func (o GetRouteSpecGrpcRouteTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecGrpcRouteTimeout] {
	return pulumix.Output[GetRouteSpecGrpcRouteTimeout]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecGrpcRouteTimeoutOutput) Idles() pulumix.GArrayOutput[GetRouteSpecGrpcRouteTimeoutIdle, GetRouteSpecGrpcRouteTimeoutIdleOutput] {
	value := pulumix.Apply[GetRouteSpecGrpcRouteTimeout](o, func(v GetRouteSpecGrpcRouteTimeout) []GetRouteSpecGrpcRouteTimeoutIdle { return v.Idles })
	return pulumix.GArrayOutput[GetRouteSpecGrpcRouteTimeoutIdle, GetRouteSpecGrpcRouteTimeoutIdleOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecGrpcRouteTimeoutOutput) PerRequests() pulumix.GArrayOutput[GetRouteSpecGrpcRouteTimeoutPerRequest, GetRouteSpecGrpcRouteTimeoutPerRequestOutput] {
	value := pulumix.Apply[GetRouteSpecGrpcRouteTimeout](o, func(v GetRouteSpecGrpcRouteTimeout) []GetRouteSpecGrpcRouteTimeoutPerRequest { return v.PerRequests })
	return pulumix.GArrayOutput[GetRouteSpecGrpcRouteTimeoutPerRequest, GetRouteSpecGrpcRouteTimeoutPerRequestOutput]{OutputState: value.OutputState}
}

type GetRouteSpecGrpcRouteTimeoutIdle struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetRouteSpecGrpcRouteTimeoutIdleArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetRouteSpecGrpcRouteTimeoutIdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteTimeoutIdle)(nil)).Elem()
}

func (i GetRouteSpecGrpcRouteTimeoutIdleArgs) ToGetRouteSpecGrpcRouteTimeoutIdleOutput() GetRouteSpecGrpcRouteTimeoutIdleOutput {
	return i.ToGetRouteSpecGrpcRouteTimeoutIdleOutputWithContext(context.Background())
}

func (i GetRouteSpecGrpcRouteTimeoutIdleArgs) ToGetRouteSpecGrpcRouteTimeoutIdleOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteTimeoutIdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecGrpcRouteTimeoutIdleOutput)
}

func (i *GetRouteSpecGrpcRouteTimeoutIdleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecGrpcRouteTimeoutIdleArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecGrpcRouteTimeoutIdleOutput struct{ *pulumi.OutputState }

func (GetRouteSpecGrpcRouteTimeoutIdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteTimeoutIdle)(nil)).Elem()
}

func (o GetRouteSpecGrpcRouteTimeoutIdleOutput) ToGetRouteSpecGrpcRouteTimeoutIdleOutput() GetRouteSpecGrpcRouteTimeoutIdleOutput {
	return o
}

func (o GetRouteSpecGrpcRouteTimeoutIdleOutput) ToGetRouteSpecGrpcRouteTimeoutIdleOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteTimeoutIdleOutput {
	return o
}

func (o GetRouteSpecGrpcRouteTimeoutIdleOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecGrpcRouteTimeoutIdle] {
	return pulumix.Output[GetRouteSpecGrpcRouteTimeoutIdle]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecGrpcRouteTimeoutIdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecGrpcRouteTimeoutIdle](o, func(v GetRouteSpecGrpcRouteTimeoutIdle) string { return v.Unit })
}

func (o GetRouteSpecGrpcRouteTimeoutIdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecGrpcRouteTimeoutIdle](o, func(v GetRouteSpecGrpcRouteTimeoutIdle) int { return v.Value })
}

type GetRouteSpecGrpcRouteTimeoutPerRequest struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetRouteSpecGrpcRouteTimeoutPerRequestArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetRouteSpecGrpcRouteTimeoutPerRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteTimeoutPerRequest)(nil)).Elem()
}

func (i GetRouteSpecGrpcRouteTimeoutPerRequestArgs) ToGetRouteSpecGrpcRouteTimeoutPerRequestOutput() GetRouteSpecGrpcRouteTimeoutPerRequestOutput {
	return i.ToGetRouteSpecGrpcRouteTimeoutPerRequestOutputWithContext(context.Background())
}

func (i GetRouteSpecGrpcRouteTimeoutPerRequestArgs) ToGetRouteSpecGrpcRouteTimeoutPerRequestOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteTimeoutPerRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecGrpcRouteTimeoutPerRequestOutput)
}

func (i *GetRouteSpecGrpcRouteTimeoutPerRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecGrpcRouteTimeoutPerRequestArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecGrpcRouteTimeoutPerRequestOutput struct{ *pulumi.OutputState }

func (GetRouteSpecGrpcRouteTimeoutPerRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecGrpcRouteTimeoutPerRequest)(nil)).Elem()
}

func (o GetRouteSpecGrpcRouteTimeoutPerRequestOutput) ToGetRouteSpecGrpcRouteTimeoutPerRequestOutput() GetRouteSpecGrpcRouteTimeoutPerRequestOutput {
	return o
}

func (o GetRouteSpecGrpcRouteTimeoutPerRequestOutput) ToGetRouteSpecGrpcRouteTimeoutPerRequestOutputWithContext(ctx context.Context) GetRouteSpecGrpcRouteTimeoutPerRequestOutput {
	return o
}

func (o GetRouteSpecGrpcRouteTimeoutPerRequestOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecGrpcRouteTimeoutPerRequest] {
	return pulumix.Output[GetRouteSpecGrpcRouteTimeoutPerRequest]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecGrpcRouteTimeoutPerRequestOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecGrpcRouteTimeoutPerRequest](o, func(v GetRouteSpecGrpcRouteTimeoutPerRequest) string { return v.Unit })
}

func (o GetRouteSpecGrpcRouteTimeoutPerRequestOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecGrpcRouteTimeoutPerRequest](o, func(v GetRouteSpecGrpcRouteTimeoutPerRequest) int { return v.Value })
}

type GetRouteSpecHttp2Route struct {
	Actions       []GetRouteSpecHttp2RouteAction      `pulumi:"actions"`
	Matches       []GetRouteSpecHttp2RouteMatch       `pulumi:"matches"`
	RetryPolicies []GetRouteSpecHttp2RouteRetryPolicy `pulumi:"retryPolicies"`
	Timeouts      []GetRouteSpecHttp2RouteTimeout     `pulumi:"timeouts"`
}

type GetRouteSpecHttp2RouteArgs struct {
	Actions       pulumix.Input[[]*GetRouteSpecHttp2RouteActionArgs]      `pulumi:"actions"`
	Matches       pulumix.Input[[]*GetRouteSpecHttp2RouteMatchArgs]       `pulumi:"matches"`
	RetryPolicies pulumix.Input[[]*GetRouteSpecHttp2RouteRetryPolicyArgs] `pulumi:"retryPolicies"`
	Timeouts      pulumix.Input[[]*GetRouteSpecHttp2RouteTimeoutArgs]     `pulumi:"timeouts"`
}

func (GetRouteSpecHttp2RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2Route)(nil)).Elem()
}

func (i GetRouteSpecHttp2RouteArgs) ToGetRouteSpecHttp2RouteOutput() GetRouteSpecHttp2RouteOutput {
	return i.ToGetRouteSpecHttp2RouteOutputWithContext(context.Background())
}

func (i GetRouteSpecHttp2RouteArgs) ToGetRouteSpecHttp2RouteOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttp2RouteOutput)
}

func (i *GetRouteSpecHttp2RouteArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttp2RouteArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttp2RouteOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttp2RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2Route)(nil)).Elem()
}

func (o GetRouteSpecHttp2RouteOutput) ToGetRouteSpecHttp2RouteOutput() GetRouteSpecHttp2RouteOutput {
	return o
}

func (o GetRouteSpecHttp2RouteOutput) ToGetRouteSpecHttp2RouteOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteOutput {
	return o
}

func (o GetRouteSpecHttp2RouteOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttp2Route] {
	return pulumix.Output[GetRouteSpecHttp2Route]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttp2RouteOutput) Actions() pulumix.GArrayOutput[GetRouteSpecHttp2RouteAction, GetRouteSpecHttp2RouteActionOutput] {
	value := pulumix.Apply[GetRouteSpecHttp2Route](o, func(v GetRouteSpecHttp2Route) []GetRouteSpecHttp2RouteAction { return v.Actions })
	return pulumix.GArrayOutput[GetRouteSpecHttp2RouteAction, GetRouteSpecHttp2RouteActionOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttp2RouteOutput) Matches() pulumix.GArrayOutput[GetRouteSpecHttp2RouteMatch, GetRouteSpecHttp2RouteMatchOutput] {
	value := pulumix.Apply[GetRouteSpecHttp2Route](o, func(v GetRouteSpecHttp2Route) []GetRouteSpecHttp2RouteMatch { return v.Matches })
	return pulumix.GArrayOutput[GetRouteSpecHttp2RouteMatch, GetRouteSpecHttp2RouteMatchOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttp2RouteOutput) RetryPolicies() pulumix.GArrayOutput[GetRouteSpecHttp2RouteRetryPolicy, GetRouteSpecHttp2RouteRetryPolicyOutput] {
	value := pulumix.Apply[GetRouteSpecHttp2Route](o, func(v GetRouteSpecHttp2Route) []GetRouteSpecHttp2RouteRetryPolicy { return v.RetryPolicies })
	return pulumix.GArrayOutput[GetRouteSpecHttp2RouteRetryPolicy, GetRouteSpecHttp2RouteRetryPolicyOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttp2RouteOutput) Timeouts() pulumix.GArrayOutput[GetRouteSpecHttp2RouteTimeout, GetRouteSpecHttp2RouteTimeoutOutput] {
	value := pulumix.Apply[GetRouteSpecHttp2Route](o, func(v GetRouteSpecHttp2Route) []GetRouteSpecHttp2RouteTimeout { return v.Timeouts })
	return pulumix.GArrayOutput[GetRouteSpecHttp2RouteTimeout, GetRouteSpecHttp2RouteTimeoutOutput]{OutputState: value.OutputState}
}

type GetRouteSpecHttp2RouteAction struct {
	WeightedTargets []GetRouteSpecHttp2RouteActionWeightedTarget `pulumi:"weightedTargets"`
}

type GetRouteSpecHttp2RouteActionArgs struct {
	WeightedTargets pulumix.Input[[]*GetRouteSpecHttp2RouteActionWeightedTargetArgs] `pulumi:"weightedTargets"`
}

func (GetRouteSpecHttp2RouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteAction)(nil)).Elem()
}

func (i GetRouteSpecHttp2RouteActionArgs) ToGetRouteSpecHttp2RouteActionOutput() GetRouteSpecHttp2RouteActionOutput {
	return i.ToGetRouteSpecHttp2RouteActionOutputWithContext(context.Background())
}

func (i GetRouteSpecHttp2RouteActionArgs) ToGetRouteSpecHttp2RouteActionOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttp2RouteActionOutput)
}

func (i *GetRouteSpecHttp2RouteActionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttp2RouteActionArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttp2RouteActionOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttp2RouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteAction)(nil)).Elem()
}

func (o GetRouteSpecHttp2RouteActionOutput) ToGetRouteSpecHttp2RouteActionOutput() GetRouteSpecHttp2RouteActionOutput {
	return o
}

func (o GetRouteSpecHttp2RouteActionOutput) ToGetRouteSpecHttp2RouteActionOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteActionOutput {
	return o
}

func (o GetRouteSpecHttp2RouteActionOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttp2RouteAction] {
	return pulumix.Output[GetRouteSpecHttp2RouteAction]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttp2RouteActionOutput) WeightedTargets() pulumix.GArrayOutput[GetRouteSpecHttp2RouteActionWeightedTarget, GetRouteSpecHttp2RouteActionWeightedTargetOutput] {
	value := pulumix.Apply[GetRouteSpecHttp2RouteAction](o, func(v GetRouteSpecHttp2RouteAction) []GetRouteSpecHttp2RouteActionWeightedTarget {
		return v.WeightedTargets
	})
	return pulumix.GArrayOutput[GetRouteSpecHttp2RouteActionWeightedTarget, GetRouteSpecHttp2RouteActionWeightedTargetOutput]{OutputState: value.OutputState}
}

type GetRouteSpecHttp2RouteActionWeightedTarget struct {
	Port        int    `pulumi:"port"`
	VirtualNode string `pulumi:"virtualNode"`
	Weight      int    `pulumi:"weight"`
}

type GetRouteSpecHttp2RouteActionWeightedTargetArgs struct {
	Port        pulumix.Input[int]    `pulumi:"port"`
	VirtualNode pulumix.Input[string] `pulumi:"virtualNode"`
	Weight      pulumix.Input[int]    `pulumi:"weight"`
}

func (GetRouteSpecHttp2RouteActionWeightedTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteActionWeightedTarget)(nil)).Elem()
}

func (i GetRouteSpecHttp2RouteActionWeightedTargetArgs) ToGetRouteSpecHttp2RouteActionWeightedTargetOutput() GetRouteSpecHttp2RouteActionWeightedTargetOutput {
	return i.ToGetRouteSpecHttp2RouteActionWeightedTargetOutputWithContext(context.Background())
}

func (i GetRouteSpecHttp2RouteActionWeightedTargetArgs) ToGetRouteSpecHttp2RouteActionWeightedTargetOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteActionWeightedTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttp2RouteActionWeightedTargetOutput)
}

func (i *GetRouteSpecHttp2RouteActionWeightedTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttp2RouteActionWeightedTargetArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttp2RouteActionWeightedTargetOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttp2RouteActionWeightedTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteActionWeightedTarget)(nil)).Elem()
}

func (o GetRouteSpecHttp2RouteActionWeightedTargetOutput) ToGetRouteSpecHttp2RouteActionWeightedTargetOutput() GetRouteSpecHttp2RouteActionWeightedTargetOutput {
	return o
}

func (o GetRouteSpecHttp2RouteActionWeightedTargetOutput) ToGetRouteSpecHttp2RouteActionWeightedTargetOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteActionWeightedTargetOutput {
	return o
}

func (o GetRouteSpecHttp2RouteActionWeightedTargetOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttp2RouteActionWeightedTarget] {
	return pulumix.Output[GetRouteSpecHttp2RouteActionWeightedTarget]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttp2RouteActionWeightedTargetOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttp2RouteActionWeightedTarget](o, func(v GetRouteSpecHttp2RouteActionWeightedTarget) int { return v.Port })
}

func (o GetRouteSpecHttp2RouteActionWeightedTargetOutput) VirtualNode() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteActionWeightedTarget](o, func(v GetRouteSpecHttp2RouteActionWeightedTarget) string { return v.VirtualNode })
}

func (o GetRouteSpecHttp2RouteActionWeightedTargetOutput) Weight() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttp2RouteActionWeightedTarget](o, func(v GetRouteSpecHttp2RouteActionWeightedTarget) int { return v.Weight })
}

type GetRouteSpecHttp2RouteMatch struct {
	Headers         []GetRouteSpecHttp2RouteMatchHeader         `pulumi:"headers"`
	Method          string                                      `pulumi:"method"`
	Paths           []GetRouteSpecHttp2RouteMatchPath           `pulumi:"paths"`
	Port            int                                         `pulumi:"port"`
	Prefix          string                                      `pulumi:"prefix"`
	QueryParameters []GetRouteSpecHttp2RouteMatchQueryParameter `pulumi:"queryParameters"`
	Scheme          string                                      `pulumi:"scheme"`
}

type GetRouteSpecHttp2RouteMatchArgs struct {
	Headers         pulumix.Input[[]*GetRouteSpecHttp2RouteMatchHeaderArgs]         `pulumi:"headers"`
	Method          pulumix.Input[string]                                           `pulumi:"method"`
	Paths           pulumix.Input[[]*GetRouteSpecHttp2RouteMatchPathArgs]           `pulumi:"paths"`
	Port            pulumix.Input[int]                                              `pulumi:"port"`
	Prefix          pulumix.Input[string]                                           `pulumi:"prefix"`
	QueryParameters pulumix.Input[[]*GetRouteSpecHttp2RouteMatchQueryParameterArgs] `pulumi:"queryParameters"`
	Scheme          pulumix.Input[string]                                           `pulumi:"scheme"`
}

func (GetRouteSpecHttp2RouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteMatch)(nil)).Elem()
}

func (i GetRouteSpecHttp2RouteMatchArgs) ToGetRouteSpecHttp2RouteMatchOutput() GetRouteSpecHttp2RouteMatchOutput {
	return i.ToGetRouteSpecHttp2RouteMatchOutputWithContext(context.Background())
}

func (i GetRouteSpecHttp2RouteMatchArgs) ToGetRouteSpecHttp2RouteMatchOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttp2RouteMatchOutput)
}

func (i *GetRouteSpecHttp2RouteMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttp2RouteMatchArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttp2RouteMatchOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttp2RouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteMatch)(nil)).Elem()
}

func (o GetRouteSpecHttp2RouteMatchOutput) ToGetRouteSpecHttp2RouteMatchOutput() GetRouteSpecHttp2RouteMatchOutput {
	return o
}

func (o GetRouteSpecHttp2RouteMatchOutput) ToGetRouteSpecHttp2RouteMatchOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteMatchOutput {
	return o
}

func (o GetRouteSpecHttp2RouteMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttp2RouteMatch] {
	return pulumix.Output[GetRouteSpecHttp2RouteMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttp2RouteMatchOutput) Headers() pulumix.GArrayOutput[GetRouteSpecHttp2RouteMatchHeader, GetRouteSpecHttp2RouteMatchHeaderOutput] {
	value := pulumix.Apply[GetRouteSpecHttp2RouteMatch](o, func(v GetRouteSpecHttp2RouteMatch) []GetRouteSpecHttp2RouteMatchHeader { return v.Headers })
	return pulumix.GArrayOutput[GetRouteSpecHttp2RouteMatchHeader, GetRouteSpecHttp2RouteMatchHeaderOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttp2RouteMatchOutput) Method() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatch](o, func(v GetRouteSpecHttp2RouteMatch) string { return v.Method })
}

func (o GetRouteSpecHttp2RouteMatchOutput) Paths() pulumix.GArrayOutput[GetRouteSpecHttp2RouteMatchPath, GetRouteSpecHttp2RouteMatchPathOutput] {
	value := pulumix.Apply[GetRouteSpecHttp2RouteMatch](o, func(v GetRouteSpecHttp2RouteMatch) []GetRouteSpecHttp2RouteMatchPath { return v.Paths })
	return pulumix.GArrayOutput[GetRouteSpecHttp2RouteMatchPath, GetRouteSpecHttp2RouteMatchPathOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttp2RouteMatchOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatch](o, func(v GetRouteSpecHttp2RouteMatch) int { return v.Port })
}

func (o GetRouteSpecHttp2RouteMatchOutput) Prefix() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatch](o, func(v GetRouteSpecHttp2RouteMatch) string { return v.Prefix })
}

func (o GetRouteSpecHttp2RouteMatchOutput) QueryParameters() pulumix.GArrayOutput[GetRouteSpecHttp2RouteMatchQueryParameter, GetRouteSpecHttp2RouteMatchQueryParameterOutput] {
	value := pulumix.Apply[GetRouteSpecHttp2RouteMatch](o, func(v GetRouteSpecHttp2RouteMatch) []GetRouteSpecHttp2RouteMatchQueryParameter {
		return v.QueryParameters
	})
	return pulumix.GArrayOutput[GetRouteSpecHttp2RouteMatchQueryParameter, GetRouteSpecHttp2RouteMatchQueryParameterOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttp2RouteMatchOutput) Scheme() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatch](o, func(v GetRouteSpecHttp2RouteMatch) string { return v.Scheme })
}

type GetRouteSpecHttp2RouteMatchHeader struct {
	Invert  bool                                     `pulumi:"invert"`
	Matches []GetRouteSpecHttp2RouteMatchHeaderMatch `pulumi:"matches"`
	// Name of the route.
	Name string `pulumi:"name"`
}

type GetRouteSpecHttp2RouteMatchHeaderArgs struct {
	Invert  pulumix.Input[bool]                                          `pulumi:"invert"`
	Matches pulumix.Input[[]*GetRouteSpecHttp2RouteMatchHeaderMatchArgs] `pulumi:"matches"`
	// Name of the route.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetRouteSpecHttp2RouteMatchHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteMatchHeader)(nil)).Elem()
}

func (i GetRouteSpecHttp2RouteMatchHeaderArgs) ToGetRouteSpecHttp2RouteMatchHeaderOutput() GetRouteSpecHttp2RouteMatchHeaderOutput {
	return i.ToGetRouteSpecHttp2RouteMatchHeaderOutputWithContext(context.Background())
}

func (i GetRouteSpecHttp2RouteMatchHeaderArgs) ToGetRouteSpecHttp2RouteMatchHeaderOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteMatchHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttp2RouteMatchHeaderOutput)
}

func (i *GetRouteSpecHttp2RouteMatchHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttp2RouteMatchHeaderArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttp2RouteMatchHeaderOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttp2RouteMatchHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteMatchHeader)(nil)).Elem()
}

func (o GetRouteSpecHttp2RouteMatchHeaderOutput) ToGetRouteSpecHttp2RouteMatchHeaderOutput() GetRouteSpecHttp2RouteMatchHeaderOutput {
	return o
}

func (o GetRouteSpecHttp2RouteMatchHeaderOutput) ToGetRouteSpecHttp2RouteMatchHeaderOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteMatchHeaderOutput {
	return o
}

func (o GetRouteSpecHttp2RouteMatchHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttp2RouteMatchHeader] {
	return pulumix.Output[GetRouteSpecHttp2RouteMatchHeader]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttp2RouteMatchHeaderOutput) Invert() pulumix.Output[bool] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatchHeader](o, func(v GetRouteSpecHttp2RouteMatchHeader) bool { return v.Invert })
}

func (o GetRouteSpecHttp2RouteMatchHeaderOutput) Matches() pulumix.GArrayOutput[GetRouteSpecHttp2RouteMatchHeaderMatch, GetRouteSpecHttp2RouteMatchHeaderMatchOutput] {
	value := pulumix.Apply[GetRouteSpecHttp2RouteMatchHeader](o, func(v GetRouteSpecHttp2RouteMatchHeader) []GetRouteSpecHttp2RouteMatchHeaderMatch { return v.Matches })
	return pulumix.GArrayOutput[GetRouteSpecHttp2RouteMatchHeaderMatch, GetRouteSpecHttp2RouteMatchHeaderMatchOutput]{OutputState: value.OutputState}
}

// Name of the route.
func (o GetRouteSpecHttp2RouteMatchHeaderOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatchHeader](o, func(v GetRouteSpecHttp2RouteMatchHeader) string { return v.Name })
}

type GetRouteSpecHttp2RouteMatchHeaderMatch struct {
	Exact  string                                        `pulumi:"exact"`
	Prefix string                                        `pulumi:"prefix"`
	Ranges []GetRouteSpecHttp2RouteMatchHeaderMatchRange `pulumi:"ranges"`
	Regex  string                                        `pulumi:"regex"`
	Suffix string                                        `pulumi:"suffix"`
}

type GetRouteSpecHttp2RouteMatchHeaderMatchArgs struct {
	Exact  pulumix.Input[string]                                             `pulumi:"exact"`
	Prefix pulumix.Input[string]                                             `pulumi:"prefix"`
	Ranges pulumix.Input[[]*GetRouteSpecHttp2RouteMatchHeaderMatchRangeArgs] `pulumi:"ranges"`
	Regex  pulumix.Input[string]                                             `pulumi:"regex"`
	Suffix pulumix.Input[string]                                             `pulumi:"suffix"`
}

func (GetRouteSpecHttp2RouteMatchHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteMatchHeaderMatch)(nil)).Elem()
}

func (i GetRouteSpecHttp2RouteMatchHeaderMatchArgs) ToGetRouteSpecHttp2RouteMatchHeaderMatchOutput() GetRouteSpecHttp2RouteMatchHeaderMatchOutput {
	return i.ToGetRouteSpecHttp2RouteMatchHeaderMatchOutputWithContext(context.Background())
}

func (i GetRouteSpecHttp2RouteMatchHeaderMatchArgs) ToGetRouteSpecHttp2RouteMatchHeaderMatchOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteMatchHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttp2RouteMatchHeaderMatchOutput)
}

func (i *GetRouteSpecHttp2RouteMatchHeaderMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttp2RouteMatchHeaderMatchArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttp2RouteMatchHeaderMatchOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttp2RouteMatchHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteMatchHeaderMatch)(nil)).Elem()
}

func (o GetRouteSpecHttp2RouteMatchHeaderMatchOutput) ToGetRouteSpecHttp2RouteMatchHeaderMatchOutput() GetRouteSpecHttp2RouteMatchHeaderMatchOutput {
	return o
}

func (o GetRouteSpecHttp2RouteMatchHeaderMatchOutput) ToGetRouteSpecHttp2RouteMatchHeaderMatchOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteMatchHeaderMatchOutput {
	return o
}

func (o GetRouteSpecHttp2RouteMatchHeaderMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttp2RouteMatchHeaderMatch] {
	return pulumix.Output[GetRouteSpecHttp2RouteMatchHeaderMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttp2RouteMatchHeaderMatchOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatchHeaderMatch](o, func(v GetRouteSpecHttp2RouteMatchHeaderMatch) string { return v.Exact })
}

func (o GetRouteSpecHttp2RouteMatchHeaderMatchOutput) Prefix() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatchHeaderMatch](o, func(v GetRouteSpecHttp2RouteMatchHeaderMatch) string { return v.Prefix })
}

func (o GetRouteSpecHttp2RouteMatchHeaderMatchOutput) Ranges() pulumix.GArrayOutput[GetRouteSpecHttp2RouteMatchHeaderMatchRange, GetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput] {
	value := pulumix.Apply[GetRouteSpecHttp2RouteMatchHeaderMatch](o, func(v GetRouteSpecHttp2RouteMatchHeaderMatch) []GetRouteSpecHttp2RouteMatchHeaderMatchRange {
		return v.Ranges
	})
	return pulumix.GArrayOutput[GetRouteSpecHttp2RouteMatchHeaderMatchRange, GetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttp2RouteMatchHeaderMatchOutput) Regex() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatchHeaderMatch](o, func(v GetRouteSpecHttp2RouteMatchHeaderMatch) string { return v.Regex })
}

func (o GetRouteSpecHttp2RouteMatchHeaderMatchOutput) Suffix() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatchHeaderMatch](o, func(v GetRouteSpecHttp2RouteMatchHeaderMatch) string { return v.Suffix })
}

type GetRouteSpecHttp2RouteMatchHeaderMatchRange struct {
	End   int `pulumi:"end"`
	Start int `pulumi:"start"`
}

type GetRouteSpecHttp2RouteMatchHeaderMatchRangeArgs struct {
	End   pulumix.Input[int] `pulumi:"end"`
	Start pulumix.Input[int] `pulumi:"start"`
}

func (GetRouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteMatchHeaderMatchRange)(nil)).Elem()
}

func (i GetRouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ToGetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput() GetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return i.ToGetRouteSpecHttp2RouteMatchHeaderMatchRangeOutputWithContext(context.Background())
}

func (i GetRouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ToGetRouteSpecHttp2RouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput)
}

func (i *GetRouteSpecHttp2RouteMatchHeaderMatchRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttp2RouteMatchHeaderMatchRangeArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteMatchHeaderMatchRange)(nil)).Elem()
}

func (o GetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ToGetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput() GetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return o
}

func (o GetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ToGetRouteSpecHttp2RouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput {
	return o
}

func (o GetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttp2RouteMatchHeaderMatchRange] {
	return pulumix.Output[GetRouteSpecHttp2RouteMatchHeaderMatchRange]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) End() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatchHeaderMatchRange](o, func(v GetRouteSpecHttp2RouteMatchHeaderMatchRange) int { return v.End })
}

func (o GetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput) Start() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatchHeaderMatchRange](o, func(v GetRouteSpecHttp2RouteMatchHeaderMatchRange) int { return v.Start })
}

type GetRouteSpecHttp2RouteMatchPath struct {
	Exact string `pulumi:"exact"`
	Regex string `pulumi:"regex"`
}

type GetRouteSpecHttp2RouteMatchPathArgs struct {
	Exact pulumix.Input[string] `pulumi:"exact"`
	Regex pulumix.Input[string] `pulumi:"regex"`
}

func (GetRouteSpecHttp2RouteMatchPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteMatchPath)(nil)).Elem()
}

func (i GetRouteSpecHttp2RouteMatchPathArgs) ToGetRouteSpecHttp2RouteMatchPathOutput() GetRouteSpecHttp2RouteMatchPathOutput {
	return i.ToGetRouteSpecHttp2RouteMatchPathOutputWithContext(context.Background())
}

func (i GetRouteSpecHttp2RouteMatchPathArgs) ToGetRouteSpecHttp2RouteMatchPathOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteMatchPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttp2RouteMatchPathOutput)
}

func (i *GetRouteSpecHttp2RouteMatchPathArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttp2RouteMatchPathArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttp2RouteMatchPathOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttp2RouteMatchPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteMatchPath)(nil)).Elem()
}

func (o GetRouteSpecHttp2RouteMatchPathOutput) ToGetRouteSpecHttp2RouteMatchPathOutput() GetRouteSpecHttp2RouteMatchPathOutput {
	return o
}

func (o GetRouteSpecHttp2RouteMatchPathOutput) ToGetRouteSpecHttp2RouteMatchPathOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteMatchPathOutput {
	return o
}

func (o GetRouteSpecHttp2RouteMatchPathOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttp2RouteMatchPath] {
	return pulumix.Output[GetRouteSpecHttp2RouteMatchPath]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttp2RouteMatchPathOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatchPath](o, func(v GetRouteSpecHttp2RouteMatchPath) string { return v.Exact })
}

func (o GetRouteSpecHttp2RouteMatchPathOutput) Regex() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatchPath](o, func(v GetRouteSpecHttp2RouteMatchPath) string { return v.Regex })
}

type GetRouteSpecHttp2RouteMatchQueryParameter struct {
	Matches []GetRouteSpecHttp2RouteMatchQueryParameterMatch `pulumi:"matches"`
	// Name of the route.
	Name string `pulumi:"name"`
}

type GetRouteSpecHttp2RouteMatchQueryParameterArgs struct {
	Matches pulumix.Input[[]*GetRouteSpecHttp2RouteMatchQueryParameterMatchArgs] `pulumi:"matches"`
	// Name of the route.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetRouteSpecHttp2RouteMatchQueryParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteMatchQueryParameter)(nil)).Elem()
}

func (i GetRouteSpecHttp2RouteMatchQueryParameterArgs) ToGetRouteSpecHttp2RouteMatchQueryParameterOutput() GetRouteSpecHttp2RouteMatchQueryParameterOutput {
	return i.ToGetRouteSpecHttp2RouteMatchQueryParameterOutputWithContext(context.Background())
}

func (i GetRouteSpecHttp2RouteMatchQueryParameterArgs) ToGetRouteSpecHttp2RouteMatchQueryParameterOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteMatchQueryParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttp2RouteMatchQueryParameterOutput)
}

func (i *GetRouteSpecHttp2RouteMatchQueryParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttp2RouteMatchQueryParameterArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttp2RouteMatchQueryParameterOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttp2RouteMatchQueryParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteMatchQueryParameter)(nil)).Elem()
}

func (o GetRouteSpecHttp2RouteMatchQueryParameterOutput) ToGetRouteSpecHttp2RouteMatchQueryParameterOutput() GetRouteSpecHttp2RouteMatchQueryParameterOutput {
	return o
}

func (o GetRouteSpecHttp2RouteMatchQueryParameterOutput) ToGetRouteSpecHttp2RouteMatchQueryParameterOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteMatchQueryParameterOutput {
	return o
}

func (o GetRouteSpecHttp2RouteMatchQueryParameterOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttp2RouteMatchQueryParameter] {
	return pulumix.Output[GetRouteSpecHttp2RouteMatchQueryParameter]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttp2RouteMatchQueryParameterOutput) Matches() pulumix.GArrayOutput[GetRouteSpecHttp2RouteMatchQueryParameterMatch, GetRouteSpecHttp2RouteMatchQueryParameterMatchOutput] {
	value := pulumix.Apply[GetRouteSpecHttp2RouteMatchQueryParameter](o, func(v GetRouteSpecHttp2RouteMatchQueryParameter) []GetRouteSpecHttp2RouteMatchQueryParameterMatch {
		return v.Matches
	})
	return pulumix.GArrayOutput[GetRouteSpecHttp2RouteMatchQueryParameterMatch, GetRouteSpecHttp2RouteMatchQueryParameterMatchOutput]{OutputState: value.OutputState}
}

// Name of the route.
func (o GetRouteSpecHttp2RouteMatchQueryParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatchQueryParameter](o, func(v GetRouteSpecHttp2RouteMatchQueryParameter) string { return v.Name })
}

type GetRouteSpecHttp2RouteMatchQueryParameterMatch struct {
	Exact string `pulumi:"exact"`
}

type GetRouteSpecHttp2RouteMatchQueryParameterMatchArgs struct {
	Exact pulumix.Input[string] `pulumi:"exact"`
}

func (GetRouteSpecHttp2RouteMatchQueryParameterMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteMatchQueryParameterMatch)(nil)).Elem()
}

func (i GetRouteSpecHttp2RouteMatchQueryParameterMatchArgs) ToGetRouteSpecHttp2RouteMatchQueryParameterMatchOutput() GetRouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return i.ToGetRouteSpecHttp2RouteMatchQueryParameterMatchOutputWithContext(context.Background())
}

func (i GetRouteSpecHttp2RouteMatchQueryParameterMatchArgs) ToGetRouteSpecHttp2RouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttp2RouteMatchQueryParameterMatchOutput)
}

func (i *GetRouteSpecHttp2RouteMatchQueryParameterMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttp2RouteMatchQueryParameterMatchArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttp2RouteMatchQueryParameterMatchOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttp2RouteMatchQueryParameterMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteMatchQueryParameterMatch)(nil)).Elem()
}

func (o GetRouteSpecHttp2RouteMatchQueryParameterMatchOutput) ToGetRouteSpecHttp2RouteMatchQueryParameterMatchOutput() GetRouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return o
}

func (o GetRouteSpecHttp2RouteMatchQueryParameterMatchOutput) ToGetRouteSpecHttp2RouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteMatchQueryParameterMatchOutput {
	return o
}

func (o GetRouteSpecHttp2RouteMatchQueryParameterMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttp2RouteMatchQueryParameterMatch] {
	return pulumix.Output[GetRouteSpecHttp2RouteMatchQueryParameterMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttp2RouteMatchQueryParameterMatchOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteMatchQueryParameterMatch](o, func(v GetRouteSpecHttp2RouteMatchQueryParameterMatch) string { return v.Exact })
}

type GetRouteSpecHttp2RouteRetryPolicy struct {
	HttpRetryEvents  []string                                           `pulumi:"httpRetryEvents"`
	MaxRetries       int                                                `pulumi:"maxRetries"`
	PerRetryTimeouts []GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeout `pulumi:"perRetryTimeouts"`
	TcpRetryEvents   []string                                           `pulumi:"tcpRetryEvents"`
}

type GetRouteSpecHttp2RouteRetryPolicyArgs struct {
	HttpRetryEvents  pulumix.Input[[]string]                                                `pulumi:"httpRetryEvents"`
	MaxRetries       pulumix.Input[int]                                                     `pulumi:"maxRetries"`
	PerRetryTimeouts pulumix.Input[[]*GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutArgs] `pulumi:"perRetryTimeouts"`
	TcpRetryEvents   pulumix.Input[[]string]                                                `pulumi:"tcpRetryEvents"`
}

func (GetRouteSpecHttp2RouteRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteRetryPolicy)(nil)).Elem()
}

func (i GetRouteSpecHttp2RouteRetryPolicyArgs) ToGetRouteSpecHttp2RouteRetryPolicyOutput() GetRouteSpecHttp2RouteRetryPolicyOutput {
	return i.ToGetRouteSpecHttp2RouteRetryPolicyOutputWithContext(context.Background())
}

func (i GetRouteSpecHttp2RouteRetryPolicyArgs) ToGetRouteSpecHttp2RouteRetryPolicyOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttp2RouteRetryPolicyOutput)
}

func (i *GetRouteSpecHttp2RouteRetryPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttp2RouteRetryPolicyArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttp2RouteRetryPolicyOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttp2RouteRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteRetryPolicy)(nil)).Elem()
}

func (o GetRouteSpecHttp2RouteRetryPolicyOutput) ToGetRouteSpecHttp2RouteRetryPolicyOutput() GetRouteSpecHttp2RouteRetryPolicyOutput {
	return o
}

func (o GetRouteSpecHttp2RouteRetryPolicyOutput) ToGetRouteSpecHttp2RouteRetryPolicyOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteRetryPolicyOutput {
	return o
}

func (o GetRouteSpecHttp2RouteRetryPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttp2RouteRetryPolicy] {
	return pulumix.Output[GetRouteSpecHttp2RouteRetryPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttp2RouteRetryPolicyOutput) HttpRetryEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetRouteSpecHttp2RouteRetryPolicy](o, func(v GetRouteSpecHttp2RouteRetryPolicy) []string { return v.HttpRetryEvents })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttp2RouteRetryPolicyOutput) MaxRetries() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttp2RouteRetryPolicy](o, func(v GetRouteSpecHttp2RouteRetryPolicy) int { return v.MaxRetries })
}

func (o GetRouteSpecHttp2RouteRetryPolicyOutput) PerRetryTimeouts() pulumix.GArrayOutput[GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeout, GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput] {
	value := pulumix.Apply[GetRouteSpecHttp2RouteRetryPolicy](o, func(v GetRouteSpecHttp2RouteRetryPolicy) []GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeout {
		return v.PerRetryTimeouts
	})
	return pulumix.GArrayOutput[GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeout, GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttp2RouteRetryPolicyOutput) TcpRetryEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetRouteSpecHttp2RouteRetryPolicy](o, func(v GetRouteSpecHttp2RouteRetryPolicy) []string { return v.TcpRetryEvents })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeout struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeout)(nil)).Elem()
}

func (i GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutArgs) ToGetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput() GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput {
	return i.ToGetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutputWithContext(context.Background())
}

func (i GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutArgs) ToGetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput)
}

func (i *GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeout)(nil)).Elem()
}

func (o GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput) ToGetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput() GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput {
	return o
}

func (o GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput) ToGetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput {
	return o
}

func (o GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeout] {
	return pulumix.Output[GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeout]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeout](o, func(v GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeout) string { return v.Unit })
}

func (o GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeout](o, func(v GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeout) int { return v.Value })
}

type GetRouteSpecHttp2RouteTimeout struct {
	Idles       []GetRouteSpecHttp2RouteTimeoutIdle       `pulumi:"idles"`
	PerRequests []GetRouteSpecHttp2RouteTimeoutPerRequest `pulumi:"perRequests"`
}

type GetRouteSpecHttp2RouteTimeoutArgs struct {
	Idles       pulumix.Input[[]*GetRouteSpecHttp2RouteTimeoutIdleArgs]       `pulumi:"idles"`
	PerRequests pulumix.Input[[]*GetRouteSpecHttp2RouteTimeoutPerRequestArgs] `pulumi:"perRequests"`
}

func (GetRouteSpecHttp2RouteTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteTimeout)(nil)).Elem()
}

func (i GetRouteSpecHttp2RouteTimeoutArgs) ToGetRouteSpecHttp2RouteTimeoutOutput() GetRouteSpecHttp2RouteTimeoutOutput {
	return i.ToGetRouteSpecHttp2RouteTimeoutOutputWithContext(context.Background())
}

func (i GetRouteSpecHttp2RouteTimeoutArgs) ToGetRouteSpecHttp2RouteTimeoutOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttp2RouteTimeoutOutput)
}

func (i *GetRouteSpecHttp2RouteTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttp2RouteTimeoutArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttp2RouteTimeoutOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttp2RouteTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteTimeout)(nil)).Elem()
}

func (o GetRouteSpecHttp2RouteTimeoutOutput) ToGetRouteSpecHttp2RouteTimeoutOutput() GetRouteSpecHttp2RouteTimeoutOutput {
	return o
}

func (o GetRouteSpecHttp2RouteTimeoutOutput) ToGetRouteSpecHttp2RouteTimeoutOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteTimeoutOutput {
	return o
}

func (o GetRouteSpecHttp2RouteTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttp2RouteTimeout] {
	return pulumix.Output[GetRouteSpecHttp2RouteTimeout]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttp2RouteTimeoutOutput) Idles() pulumix.GArrayOutput[GetRouteSpecHttp2RouteTimeoutIdle, GetRouteSpecHttp2RouteTimeoutIdleOutput] {
	value := pulumix.Apply[GetRouteSpecHttp2RouteTimeout](o, func(v GetRouteSpecHttp2RouteTimeout) []GetRouteSpecHttp2RouteTimeoutIdle { return v.Idles })
	return pulumix.GArrayOutput[GetRouteSpecHttp2RouteTimeoutIdle, GetRouteSpecHttp2RouteTimeoutIdleOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttp2RouteTimeoutOutput) PerRequests() pulumix.GArrayOutput[GetRouteSpecHttp2RouteTimeoutPerRequest, GetRouteSpecHttp2RouteTimeoutPerRequestOutput] {
	value := pulumix.Apply[GetRouteSpecHttp2RouteTimeout](o, func(v GetRouteSpecHttp2RouteTimeout) []GetRouteSpecHttp2RouteTimeoutPerRequest { return v.PerRequests })
	return pulumix.GArrayOutput[GetRouteSpecHttp2RouteTimeoutPerRequest, GetRouteSpecHttp2RouteTimeoutPerRequestOutput]{OutputState: value.OutputState}
}

type GetRouteSpecHttp2RouteTimeoutIdle struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetRouteSpecHttp2RouteTimeoutIdleArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetRouteSpecHttp2RouteTimeoutIdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteTimeoutIdle)(nil)).Elem()
}

func (i GetRouteSpecHttp2RouteTimeoutIdleArgs) ToGetRouteSpecHttp2RouteTimeoutIdleOutput() GetRouteSpecHttp2RouteTimeoutIdleOutput {
	return i.ToGetRouteSpecHttp2RouteTimeoutIdleOutputWithContext(context.Background())
}

func (i GetRouteSpecHttp2RouteTimeoutIdleArgs) ToGetRouteSpecHttp2RouteTimeoutIdleOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteTimeoutIdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttp2RouteTimeoutIdleOutput)
}

func (i *GetRouteSpecHttp2RouteTimeoutIdleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttp2RouteTimeoutIdleArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttp2RouteTimeoutIdleOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttp2RouteTimeoutIdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteTimeoutIdle)(nil)).Elem()
}

func (o GetRouteSpecHttp2RouteTimeoutIdleOutput) ToGetRouteSpecHttp2RouteTimeoutIdleOutput() GetRouteSpecHttp2RouteTimeoutIdleOutput {
	return o
}

func (o GetRouteSpecHttp2RouteTimeoutIdleOutput) ToGetRouteSpecHttp2RouteTimeoutIdleOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteTimeoutIdleOutput {
	return o
}

func (o GetRouteSpecHttp2RouteTimeoutIdleOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttp2RouteTimeoutIdle] {
	return pulumix.Output[GetRouteSpecHttp2RouteTimeoutIdle]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttp2RouteTimeoutIdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteTimeoutIdle](o, func(v GetRouteSpecHttp2RouteTimeoutIdle) string { return v.Unit })
}

func (o GetRouteSpecHttp2RouteTimeoutIdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttp2RouteTimeoutIdle](o, func(v GetRouteSpecHttp2RouteTimeoutIdle) int { return v.Value })
}

type GetRouteSpecHttp2RouteTimeoutPerRequest struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetRouteSpecHttp2RouteTimeoutPerRequestArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetRouteSpecHttp2RouteTimeoutPerRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteTimeoutPerRequest)(nil)).Elem()
}

func (i GetRouteSpecHttp2RouteTimeoutPerRequestArgs) ToGetRouteSpecHttp2RouteTimeoutPerRequestOutput() GetRouteSpecHttp2RouteTimeoutPerRequestOutput {
	return i.ToGetRouteSpecHttp2RouteTimeoutPerRequestOutputWithContext(context.Background())
}

func (i GetRouteSpecHttp2RouteTimeoutPerRequestArgs) ToGetRouteSpecHttp2RouteTimeoutPerRequestOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteTimeoutPerRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttp2RouteTimeoutPerRequestOutput)
}

func (i *GetRouteSpecHttp2RouteTimeoutPerRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttp2RouteTimeoutPerRequestArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttp2RouteTimeoutPerRequestOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttp2RouteTimeoutPerRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttp2RouteTimeoutPerRequest)(nil)).Elem()
}

func (o GetRouteSpecHttp2RouteTimeoutPerRequestOutput) ToGetRouteSpecHttp2RouteTimeoutPerRequestOutput() GetRouteSpecHttp2RouteTimeoutPerRequestOutput {
	return o
}

func (o GetRouteSpecHttp2RouteTimeoutPerRequestOutput) ToGetRouteSpecHttp2RouteTimeoutPerRequestOutputWithContext(ctx context.Context) GetRouteSpecHttp2RouteTimeoutPerRequestOutput {
	return o
}

func (o GetRouteSpecHttp2RouteTimeoutPerRequestOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttp2RouteTimeoutPerRequest] {
	return pulumix.Output[GetRouteSpecHttp2RouteTimeoutPerRequest]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttp2RouteTimeoutPerRequestOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttp2RouteTimeoutPerRequest](o, func(v GetRouteSpecHttp2RouteTimeoutPerRequest) string { return v.Unit })
}

func (o GetRouteSpecHttp2RouteTimeoutPerRequestOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttp2RouteTimeoutPerRequest](o, func(v GetRouteSpecHttp2RouteTimeoutPerRequest) int { return v.Value })
}

type GetRouteSpecHttpRoute struct {
	Actions       []GetRouteSpecHttpRouteAction      `pulumi:"actions"`
	Matches       []GetRouteSpecHttpRouteMatch       `pulumi:"matches"`
	RetryPolicies []GetRouteSpecHttpRouteRetryPolicy `pulumi:"retryPolicies"`
	Timeouts      []GetRouteSpecHttpRouteTimeout     `pulumi:"timeouts"`
}

type GetRouteSpecHttpRouteArgs struct {
	Actions       pulumix.Input[[]*GetRouteSpecHttpRouteActionArgs]      `pulumi:"actions"`
	Matches       pulumix.Input[[]*GetRouteSpecHttpRouteMatchArgs]       `pulumi:"matches"`
	RetryPolicies pulumix.Input[[]*GetRouteSpecHttpRouteRetryPolicyArgs] `pulumi:"retryPolicies"`
	Timeouts      pulumix.Input[[]*GetRouteSpecHttpRouteTimeoutArgs]     `pulumi:"timeouts"`
}

func (GetRouteSpecHttpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRoute)(nil)).Elem()
}

func (i GetRouteSpecHttpRouteArgs) ToGetRouteSpecHttpRouteOutput() GetRouteSpecHttpRouteOutput {
	return i.ToGetRouteSpecHttpRouteOutputWithContext(context.Background())
}

func (i GetRouteSpecHttpRouteArgs) ToGetRouteSpecHttpRouteOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttpRouteOutput)
}

func (i *GetRouteSpecHttpRouteArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttpRouteArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttpRouteOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRoute)(nil)).Elem()
}

func (o GetRouteSpecHttpRouteOutput) ToGetRouteSpecHttpRouteOutput() GetRouteSpecHttpRouteOutput {
	return o
}

func (o GetRouteSpecHttpRouteOutput) ToGetRouteSpecHttpRouteOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteOutput {
	return o
}

func (o GetRouteSpecHttpRouteOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttpRoute] {
	return pulumix.Output[GetRouteSpecHttpRoute]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttpRouteOutput) Actions() pulumix.GArrayOutput[GetRouteSpecHttpRouteAction, GetRouteSpecHttpRouteActionOutput] {
	value := pulumix.Apply[GetRouteSpecHttpRoute](o, func(v GetRouteSpecHttpRoute) []GetRouteSpecHttpRouteAction { return v.Actions })
	return pulumix.GArrayOutput[GetRouteSpecHttpRouteAction, GetRouteSpecHttpRouteActionOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttpRouteOutput) Matches() pulumix.GArrayOutput[GetRouteSpecHttpRouteMatch, GetRouteSpecHttpRouteMatchOutput] {
	value := pulumix.Apply[GetRouteSpecHttpRoute](o, func(v GetRouteSpecHttpRoute) []GetRouteSpecHttpRouteMatch { return v.Matches })
	return pulumix.GArrayOutput[GetRouteSpecHttpRouteMatch, GetRouteSpecHttpRouteMatchOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttpRouteOutput) RetryPolicies() pulumix.GArrayOutput[GetRouteSpecHttpRouteRetryPolicy, GetRouteSpecHttpRouteRetryPolicyOutput] {
	value := pulumix.Apply[GetRouteSpecHttpRoute](o, func(v GetRouteSpecHttpRoute) []GetRouteSpecHttpRouteRetryPolicy { return v.RetryPolicies })
	return pulumix.GArrayOutput[GetRouteSpecHttpRouteRetryPolicy, GetRouteSpecHttpRouteRetryPolicyOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttpRouteOutput) Timeouts() pulumix.GArrayOutput[GetRouteSpecHttpRouteTimeout, GetRouteSpecHttpRouteTimeoutOutput] {
	value := pulumix.Apply[GetRouteSpecHttpRoute](o, func(v GetRouteSpecHttpRoute) []GetRouteSpecHttpRouteTimeout { return v.Timeouts })
	return pulumix.GArrayOutput[GetRouteSpecHttpRouteTimeout, GetRouteSpecHttpRouteTimeoutOutput]{OutputState: value.OutputState}
}

type GetRouteSpecHttpRouteAction struct {
	WeightedTargets []GetRouteSpecHttpRouteActionWeightedTarget `pulumi:"weightedTargets"`
}

type GetRouteSpecHttpRouteActionArgs struct {
	WeightedTargets pulumix.Input[[]*GetRouteSpecHttpRouteActionWeightedTargetArgs] `pulumi:"weightedTargets"`
}

func (GetRouteSpecHttpRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteAction)(nil)).Elem()
}

func (i GetRouteSpecHttpRouteActionArgs) ToGetRouteSpecHttpRouteActionOutput() GetRouteSpecHttpRouteActionOutput {
	return i.ToGetRouteSpecHttpRouteActionOutputWithContext(context.Background())
}

func (i GetRouteSpecHttpRouteActionArgs) ToGetRouteSpecHttpRouteActionOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttpRouteActionOutput)
}

func (i *GetRouteSpecHttpRouteActionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttpRouteActionArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttpRouteActionOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttpRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteAction)(nil)).Elem()
}

func (o GetRouteSpecHttpRouteActionOutput) ToGetRouteSpecHttpRouteActionOutput() GetRouteSpecHttpRouteActionOutput {
	return o
}

func (o GetRouteSpecHttpRouteActionOutput) ToGetRouteSpecHttpRouteActionOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteActionOutput {
	return o
}

func (o GetRouteSpecHttpRouteActionOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttpRouteAction] {
	return pulumix.Output[GetRouteSpecHttpRouteAction]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttpRouteActionOutput) WeightedTargets() pulumix.GArrayOutput[GetRouteSpecHttpRouteActionWeightedTarget, GetRouteSpecHttpRouteActionWeightedTargetOutput] {
	value := pulumix.Apply[GetRouteSpecHttpRouteAction](o, func(v GetRouteSpecHttpRouteAction) []GetRouteSpecHttpRouteActionWeightedTarget {
		return v.WeightedTargets
	})
	return pulumix.GArrayOutput[GetRouteSpecHttpRouteActionWeightedTarget, GetRouteSpecHttpRouteActionWeightedTargetOutput]{OutputState: value.OutputState}
}

type GetRouteSpecHttpRouteActionWeightedTarget struct {
	Port        int    `pulumi:"port"`
	VirtualNode string `pulumi:"virtualNode"`
	Weight      int    `pulumi:"weight"`
}

type GetRouteSpecHttpRouteActionWeightedTargetArgs struct {
	Port        pulumix.Input[int]    `pulumi:"port"`
	VirtualNode pulumix.Input[string] `pulumi:"virtualNode"`
	Weight      pulumix.Input[int]    `pulumi:"weight"`
}

func (GetRouteSpecHttpRouteActionWeightedTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteActionWeightedTarget)(nil)).Elem()
}

func (i GetRouteSpecHttpRouteActionWeightedTargetArgs) ToGetRouteSpecHttpRouteActionWeightedTargetOutput() GetRouteSpecHttpRouteActionWeightedTargetOutput {
	return i.ToGetRouteSpecHttpRouteActionWeightedTargetOutputWithContext(context.Background())
}

func (i GetRouteSpecHttpRouteActionWeightedTargetArgs) ToGetRouteSpecHttpRouteActionWeightedTargetOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteActionWeightedTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttpRouteActionWeightedTargetOutput)
}

func (i *GetRouteSpecHttpRouteActionWeightedTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttpRouteActionWeightedTargetArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttpRouteActionWeightedTargetOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttpRouteActionWeightedTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteActionWeightedTarget)(nil)).Elem()
}

func (o GetRouteSpecHttpRouteActionWeightedTargetOutput) ToGetRouteSpecHttpRouteActionWeightedTargetOutput() GetRouteSpecHttpRouteActionWeightedTargetOutput {
	return o
}

func (o GetRouteSpecHttpRouteActionWeightedTargetOutput) ToGetRouteSpecHttpRouteActionWeightedTargetOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteActionWeightedTargetOutput {
	return o
}

func (o GetRouteSpecHttpRouteActionWeightedTargetOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttpRouteActionWeightedTarget] {
	return pulumix.Output[GetRouteSpecHttpRouteActionWeightedTarget]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttpRouteActionWeightedTargetOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttpRouteActionWeightedTarget](o, func(v GetRouteSpecHttpRouteActionWeightedTarget) int { return v.Port })
}

func (o GetRouteSpecHttpRouteActionWeightedTargetOutput) VirtualNode() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteActionWeightedTarget](o, func(v GetRouteSpecHttpRouteActionWeightedTarget) string { return v.VirtualNode })
}

func (o GetRouteSpecHttpRouteActionWeightedTargetOutput) Weight() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttpRouteActionWeightedTarget](o, func(v GetRouteSpecHttpRouteActionWeightedTarget) int { return v.Weight })
}

type GetRouteSpecHttpRouteMatch struct {
	Headers         []GetRouteSpecHttpRouteMatchHeader         `pulumi:"headers"`
	Method          string                                     `pulumi:"method"`
	Paths           []GetRouteSpecHttpRouteMatchPath           `pulumi:"paths"`
	Port            int                                        `pulumi:"port"`
	Prefix          string                                     `pulumi:"prefix"`
	QueryParameters []GetRouteSpecHttpRouteMatchQueryParameter `pulumi:"queryParameters"`
	Scheme          string                                     `pulumi:"scheme"`
}

type GetRouteSpecHttpRouteMatchArgs struct {
	Headers         pulumix.Input[[]*GetRouteSpecHttpRouteMatchHeaderArgs]         `pulumi:"headers"`
	Method          pulumix.Input[string]                                          `pulumi:"method"`
	Paths           pulumix.Input[[]*GetRouteSpecHttpRouteMatchPathArgs]           `pulumi:"paths"`
	Port            pulumix.Input[int]                                             `pulumi:"port"`
	Prefix          pulumix.Input[string]                                          `pulumi:"prefix"`
	QueryParameters pulumix.Input[[]*GetRouteSpecHttpRouteMatchQueryParameterArgs] `pulumi:"queryParameters"`
	Scheme          pulumix.Input[string]                                          `pulumi:"scheme"`
}

func (GetRouteSpecHttpRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteMatch)(nil)).Elem()
}

func (i GetRouteSpecHttpRouteMatchArgs) ToGetRouteSpecHttpRouteMatchOutput() GetRouteSpecHttpRouteMatchOutput {
	return i.ToGetRouteSpecHttpRouteMatchOutputWithContext(context.Background())
}

func (i GetRouteSpecHttpRouteMatchArgs) ToGetRouteSpecHttpRouteMatchOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttpRouteMatchOutput)
}

func (i *GetRouteSpecHttpRouteMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttpRouteMatchArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttpRouteMatchOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttpRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteMatch)(nil)).Elem()
}

func (o GetRouteSpecHttpRouteMatchOutput) ToGetRouteSpecHttpRouteMatchOutput() GetRouteSpecHttpRouteMatchOutput {
	return o
}

func (o GetRouteSpecHttpRouteMatchOutput) ToGetRouteSpecHttpRouteMatchOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteMatchOutput {
	return o
}

func (o GetRouteSpecHttpRouteMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttpRouteMatch] {
	return pulumix.Output[GetRouteSpecHttpRouteMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttpRouteMatchOutput) Headers() pulumix.GArrayOutput[GetRouteSpecHttpRouteMatchHeader, GetRouteSpecHttpRouteMatchHeaderOutput] {
	value := pulumix.Apply[GetRouteSpecHttpRouteMatch](o, func(v GetRouteSpecHttpRouteMatch) []GetRouteSpecHttpRouteMatchHeader { return v.Headers })
	return pulumix.GArrayOutput[GetRouteSpecHttpRouteMatchHeader, GetRouteSpecHttpRouteMatchHeaderOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttpRouteMatchOutput) Method() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatch](o, func(v GetRouteSpecHttpRouteMatch) string { return v.Method })
}

func (o GetRouteSpecHttpRouteMatchOutput) Paths() pulumix.GArrayOutput[GetRouteSpecHttpRouteMatchPath, GetRouteSpecHttpRouteMatchPathOutput] {
	value := pulumix.Apply[GetRouteSpecHttpRouteMatch](o, func(v GetRouteSpecHttpRouteMatch) []GetRouteSpecHttpRouteMatchPath { return v.Paths })
	return pulumix.GArrayOutput[GetRouteSpecHttpRouteMatchPath, GetRouteSpecHttpRouteMatchPathOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttpRouteMatchOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatch](o, func(v GetRouteSpecHttpRouteMatch) int { return v.Port })
}

func (o GetRouteSpecHttpRouteMatchOutput) Prefix() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatch](o, func(v GetRouteSpecHttpRouteMatch) string { return v.Prefix })
}

func (o GetRouteSpecHttpRouteMatchOutput) QueryParameters() pulumix.GArrayOutput[GetRouteSpecHttpRouteMatchQueryParameter, GetRouteSpecHttpRouteMatchQueryParameterOutput] {
	value := pulumix.Apply[GetRouteSpecHttpRouteMatch](o, func(v GetRouteSpecHttpRouteMatch) []GetRouteSpecHttpRouteMatchQueryParameter {
		return v.QueryParameters
	})
	return pulumix.GArrayOutput[GetRouteSpecHttpRouteMatchQueryParameter, GetRouteSpecHttpRouteMatchQueryParameterOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttpRouteMatchOutput) Scheme() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatch](o, func(v GetRouteSpecHttpRouteMatch) string { return v.Scheme })
}

type GetRouteSpecHttpRouteMatchHeader struct {
	Invert  bool                                    `pulumi:"invert"`
	Matches []GetRouteSpecHttpRouteMatchHeaderMatch `pulumi:"matches"`
	// Name of the route.
	Name string `pulumi:"name"`
}

type GetRouteSpecHttpRouteMatchHeaderArgs struct {
	Invert  pulumix.Input[bool]                                         `pulumi:"invert"`
	Matches pulumix.Input[[]*GetRouteSpecHttpRouteMatchHeaderMatchArgs] `pulumi:"matches"`
	// Name of the route.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetRouteSpecHttpRouteMatchHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteMatchHeader)(nil)).Elem()
}

func (i GetRouteSpecHttpRouteMatchHeaderArgs) ToGetRouteSpecHttpRouteMatchHeaderOutput() GetRouteSpecHttpRouteMatchHeaderOutput {
	return i.ToGetRouteSpecHttpRouteMatchHeaderOutputWithContext(context.Background())
}

func (i GetRouteSpecHttpRouteMatchHeaderArgs) ToGetRouteSpecHttpRouteMatchHeaderOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteMatchHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttpRouteMatchHeaderOutput)
}

func (i *GetRouteSpecHttpRouteMatchHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttpRouteMatchHeaderArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttpRouteMatchHeaderOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttpRouteMatchHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteMatchHeader)(nil)).Elem()
}

func (o GetRouteSpecHttpRouteMatchHeaderOutput) ToGetRouteSpecHttpRouteMatchHeaderOutput() GetRouteSpecHttpRouteMatchHeaderOutput {
	return o
}

func (o GetRouteSpecHttpRouteMatchHeaderOutput) ToGetRouteSpecHttpRouteMatchHeaderOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteMatchHeaderOutput {
	return o
}

func (o GetRouteSpecHttpRouteMatchHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttpRouteMatchHeader] {
	return pulumix.Output[GetRouteSpecHttpRouteMatchHeader]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttpRouteMatchHeaderOutput) Invert() pulumix.Output[bool] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatchHeader](o, func(v GetRouteSpecHttpRouteMatchHeader) bool { return v.Invert })
}

func (o GetRouteSpecHttpRouteMatchHeaderOutput) Matches() pulumix.GArrayOutput[GetRouteSpecHttpRouteMatchHeaderMatch, GetRouteSpecHttpRouteMatchHeaderMatchOutput] {
	value := pulumix.Apply[GetRouteSpecHttpRouteMatchHeader](o, func(v GetRouteSpecHttpRouteMatchHeader) []GetRouteSpecHttpRouteMatchHeaderMatch { return v.Matches })
	return pulumix.GArrayOutput[GetRouteSpecHttpRouteMatchHeaderMatch, GetRouteSpecHttpRouteMatchHeaderMatchOutput]{OutputState: value.OutputState}
}

// Name of the route.
func (o GetRouteSpecHttpRouteMatchHeaderOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatchHeader](o, func(v GetRouteSpecHttpRouteMatchHeader) string { return v.Name })
}

type GetRouteSpecHttpRouteMatchHeaderMatch struct {
	Exact  string                                       `pulumi:"exact"`
	Prefix string                                       `pulumi:"prefix"`
	Ranges []GetRouteSpecHttpRouteMatchHeaderMatchRange `pulumi:"ranges"`
	Regex  string                                       `pulumi:"regex"`
	Suffix string                                       `pulumi:"suffix"`
}

type GetRouteSpecHttpRouteMatchHeaderMatchArgs struct {
	Exact  pulumix.Input[string]                                            `pulumi:"exact"`
	Prefix pulumix.Input[string]                                            `pulumi:"prefix"`
	Ranges pulumix.Input[[]*GetRouteSpecHttpRouteMatchHeaderMatchRangeArgs] `pulumi:"ranges"`
	Regex  pulumix.Input[string]                                            `pulumi:"regex"`
	Suffix pulumix.Input[string]                                            `pulumi:"suffix"`
}

func (GetRouteSpecHttpRouteMatchHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteMatchHeaderMatch)(nil)).Elem()
}

func (i GetRouteSpecHttpRouteMatchHeaderMatchArgs) ToGetRouteSpecHttpRouteMatchHeaderMatchOutput() GetRouteSpecHttpRouteMatchHeaderMatchOutput {
	return i.ToGetRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(context.Background())
}

func (i GetRouteSpecHttpRouteMatchHeaderMatchArgs) ToGetRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteMatchHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttpRouteMatchHeaderMatchOutput)
}

func (i *GetRouteSpecHttpRouteMatchHeaderMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttpRouteMatchHeaderMatchArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttpRouteMatchHeaderMatchOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttpRouteMatchHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteMatchHeaderMatch)(nil)).Elem()
}

func (o GetRouteSpecHttpRouteMatchHeaderMatchOutput) ToGetRouteSpecHttpRouteMatchHeaderMatchOutput() GetRouteSpecHttpRouteMatchHeaderMatchOutput {
	return o
}

func (o GetRouteSpecHttpRouteMatchHeaderMatchOutput) ToGetRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteMatchHeaderMatchOutput {
	return o
}

func (o GetRouteSpecHttpRouteMatchHeaderMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttpRouteMatchHeaderMatch] {
	return pulumix.Output[GetRouteSpecHttpRouteMatchHeaderMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttpRouteMatchHeaderMatchOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatchHeaderMatch](o, func(v GetRouteSpecHttpRouteMatchHeaderMatch) string { return v.Exact })
}

func (o GetRouteSpecHttpRouteMatchHeaderMatchOutput) Prefix() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatchHeaderMatch](o, func(v GetRouteSpecHttpRouteMatchHeaderMatch) string { return v.Prefix })
}

func (o GetRouteSpecHttpRouteMatchHeaderMatchOutput) Ranges() pulumix.GArrayOutput[GetRouteSpecHttpRouteMatchHeaderMatchRange, GetRouteSpecHttpRouteMatchHeaderMatchRangeOutput] {
	value := pulumix.Apply[GetRouteSpecHttpRouteMatchHeaderMatch](o, func(v GetRouteSpecHttpRouteMatchHeaderMatch) []GetRouteSpecHttpRouteMatchHeaderMatchRange {
		return v.Ranges
	})
	return pulumix.GArrayOutput[GetRouteSpecHttpRouteMatchHeaderMatchRange, GetRouteSpecHttpRouteMatchHeaderMatchRangeOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttpRouteMatchHeaderMatchOutput) Regex() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatchHeaderMatch](o, func(v GetRouteSpecHttpRouteMatchHeaderMatch) string { return v.Regex })
}

func (o GetRouteSpecHttpRouteMatchHeaderMatchOutput) Suffix() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatchHeaderMatch](o, func(v GetRouteSpecHttpRouteMatchHeaderMatch) string { return v.Suffix })
}

type GetRouteSpecHttpRouteMatchHeaderMatchRange struct {
	End   int `pulumi:"end"`
	Start int `pulumi:"start"`
}

type GetRouteSpecHttpRouteMatchHeaderMatchRangeArgs struct {
	End   pulumix.Input[int] `pulumi:"end"`
	Start pulumix.Input[int] `pulumi:"start"`
}

func (GetRouteSpecHttpRouteMatchHeaderMatchRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteMatchHeaderMatchRange)(nil)).Elem()
}

func (i GetRouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToGetRouteSpecHttpRouteMatchHeaderMatchRangeOutput() GetRouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return i.ToGetRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(context.Background())
}

func (i GetRouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToGetRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttpRouteMatchHeaderMatchRangeOutput)
}

func (i *GetRouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttpRouteMatchHeaderMatchRangeArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttpRouteMatchHeaderMatchRangeOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttpRouteMatchHeaderMatchRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteMatchHeaderMatchRange)(nil)).Elem()
}

func (o GetRouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToGetRouteSpecHttpRouteMatchHeaderMatchRangeOutput() GetRouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return o
}

func (o GetRouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToGetRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return o
}

func (o GetRouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttpRouteMatchHeaderMatchRange] {
	return pulumix.Output[GetRouteSpecHttpRouteMatchHeaderMatchRange]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttpRouteMatchHeaderMatchRangeOutput) End() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatchHeaderMatchRange](o, func(v GetRouteSpecHttpRouteMatchHeaderMatchRange) int { return v.End })
}

func (o GetRouteSpecHttpRouteMatchHeaderMatchRangeOutput) Start() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatchHeaderMatchRange](o, func(v GetRouteSpecHttpRouteMatchHeaderMatchRange) int { return v.Start })
}

type GetRouteSpecHttpRouteMatchPath struct {
	Exact string `pulumi:"exact"`
	Regex string `pulumi:"regex"`
}

type GetRouteSpecHttpRouteMatchPathArgs struct {
	Exact pulumix.Input[string] `pulumi:"exact"`
	Regex pulumix.Input[string] `pulumi:"regex"`
}

func (GetRouteSpecHttpRouteMatchPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteMatchPath)(nil)).Elem()
}

func (i GetRouteSpecHttpRouteMatchPathArgs) ToGetRouteSpecHttpRouteMatchPathOutput() GetRouteSpecHttpRouteMatchPathOutput {
	return i.ToGetRouteSpecHttpRouteMatchPathOutputWithContext(context.Background())
}

func (i GetRouteSpecHttpRouteMatchPathArgs) ToGetRouteSpecHttpRouteMatchPathOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteMatchPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttpRouteMatchPathOutput)
}

func (i *GetRouteSpecHttpRouteMatchPathArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttpRouteMatchPathArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttpRouteMatchPathOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttpRouteMatchPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteMatchPath)(nil)).Elem()
}

func (o GetRouteSpecHttpRouteMatchPathOutput) ToGetRouteSpecHttpRouteMatchPathOutput() GetRouteSpecHttpRouteMatchPathOutput {
	return o
}

func (o GetRouteSpecHttpRouteMatchPathOutput) ToGetRouteSpecHttpRouteMatchPathOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteMatchPathOutput {
	return o
}

func (o GetRouteSpecHttpRouteMatchPathOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttpRouteMatchPath] {
	return pulumix.Output[GetRouteSpecHttpRouteMatchPath]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttpRouteMatchPathOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatchPath](o, func(v GetRouteSpecHttpRouteMatchPath) string { return v.Exact })
}

func (o GetRouteSpecHttpRouteMatchPathOutput) Regex() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatchPath](o, func(v GetRouteSpecHttpRouteMatchPath) string { return v.Regex })
}

type GetRouteSpecHttpRouteMatchQueryParameter struct {
	Matches []GetRouteSpecHttpRouteMatchQueryParameterMatch `pulumi:"matches"`
	// Name of the route.
	Name string `pulumi:"name"`
}

type GetRouteSpecHttpRouteMatchQueryParameterArgs struct {
	Matches pulumix.Input[[]*GetRouteSpecHttpRouteMatchQueryParameterMatchArgs] `pulumi:"matches"`
	// Name of the route.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetRouteSpecHttpRouteMatchQueryParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteMatchQueryParameter)(nil)).Elem()
}

func (i GetRouteSpecHttpRouteMatchQueryParameterArgs) ToGetRouteSpecHttpRouteMatchQueryParameterOutput() GetRouteSpecHttpRouteMatchQueryParameterOutput {
	return i.ToGetRouteSpecHttpRouteMatchQueryParameterOutputWithContext(context.Background())
}

func (i GetRouteSpecHttpRouteMatchQueryParameterArgs) ToGetRouteSpecHttpRouteMatchQueryParameterOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteMatchQueryParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttpRouteMatchQueryParameterOutput)
}

func (i *GetRouteSpecHttpRouteMatchQueryParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttpRouteMatchQueryParameterArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttpRouteMatchQueryParameterOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttpRouteMatchQueryParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteMatchQueryParameter)(nil)).Elem()
}

func (o GetRouteSpecHttpRouteMatchQueryParameterOutput) ToGetRouteSpecHttpRouteMatchQueryParameterOutput() GetRouteSpecHttpRouteMatchQueryParameterOutput {
	return o
}

func (o GetRouteSpecHttpRouteMatchQueryParameterOutput) ToGetRouteSpecHttpRouteMatchQueryParameterOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteMatchQueryParameterOutput {
	return o
}

func (o GetRouteSpecHttpRouteMatchQueryParameterOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttpRouteMatchQueryParameter] {
	return pulumix.Output[GetRouteSpecHttpRouteMatchQueryParameter]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttpRouteMatchQueryParameterOutput) Matches() pulumix.GArrayOutput[GetRouteSpecHttpRouteMatchQueryParameterMatch, GetRouteSpecHttpRouteMatchQueryParameterMatchOutput] {
	value := pulumix.Apply[GetRouteSpecHttpRouteMatchQueryParameter](o, func(v GetRouteSpecHttpRouteMatchQueryParameter) []GetRouteSpecHttpRouteMatchQueryParameterMatch {
		return v.Matches
	})
	return pulumix.GArrayOutput[GetRouteSpecHttpRouteMatchQueryParameterMatch, GetRouteSpecHttpRouteMatchQueryParameterMatchOutput]{OutputState: value.OutputState}
}

// Name of the route.
func (o GetRouteSpecHttpRouteMatchQueryParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatchQueryParameter](o, func(v GetRouteSpecHttpRouteMatchQueryParameter) string { return v.Name })
}

type GetRouteSpecHttpRouteMatchQueryParameterMatch struct {
	Exact string `pulumi:"exact"`
}

type GetRouteSpecHttpRouteMatchQueryParameterMatchArgs struct {
	Exact pulumix.Input[string] `pulumi:"exact"`
}

func (GetRouteSpecHttpRouteMatchQueryParameterMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteMatchQueryParameterMatch)(nil)).Elem()
}

func (i GetRouteSpecHttpRouteMatchQueryParameterMatchArgs) ToGetRouteSpecHttpRouteMatchQueryParameterMatchOutput() GetRouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return i.ToGetRouteSpecHttpRouteMatchQueryParameterMatchOutputWithContext(context.Background())
}

func (i GetRouteSpecHttpRouteMatchQueryParameterMatchArgs) ToGetRouteSpecHttpRouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttpRouteMatchQueryParameterMatchOutput)
}

func (i *GetRouteSpecHttpRouteMatchQueryParameterMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttpRouteMatchQueryParameterMatchArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttpRouteMatchQueryParameterMatchOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttpRouteMatchQueryParameterMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteMatchQueryParameterMatch)(nil)).Elem()
}

func (o GetRouteSpecHttpRouteMatchQueryParameterMatchOutput) ToGetRouteSpecHttpRouteMatchQueryParameterMatchOutput() GetRouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return o
}

func (o GetRouteSpecHttpRouteMatchQueryParameterMatchOutput) ToGetRouteSpecHttpRouteMatchQueryParameterMatchOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteMatchQueryParameterMatchOutput {
	return o
}

func (o GetRouteSpecHttpRouteMatchQueryParameterMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttpRouteMatchQueryParameterMatch] {
	return pulumix.Output[GetRouteSpecHttpRouteMatchQueryParameterMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttpRouteMatchQueryParameterMatchOutput) Exact() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteMatchQueryParameterMatch](o, func(v GetRouteSpecHttpRouteMatchQueryParameterMatch) string { return v.Exact })
}

type GetRouteSpecHttpRouteRetryPolicy struct {
	HttpRetryEvents  []string                                          `pulumi:"httpRetryEvents"`
	MaxRetries       int                                               `pulumi:"maxRetries"`
	PerRetryTimeouts []GetRouteSpecHttpRouteRetryPolicyPerRetryTimeout `pulumi:"perRetryTimeouts"`
	TcpRetryEvents   []string                                          `pulumi:"tcpRetryEvents"`
}

type GetRouteSpecHttpRouteRetryPolicyArgs struct {
	HttpRetryEvents  pulumix.Input[[]string]                                               `pulumi:"httpRetryEvents"`
	MaxRetries       pulumix.Input[int]                                                    `pulumi:"maxRetries"`
	PerRetryTimeouts pulumix.Input[[]*GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs] `pulumi:"perRetryTimeouts"`
	TcpRetryEvents   pulumix.Input[[]string]                                               `pulumi:"tcpRetryEvents"`
}

func (GetRouteSpecHttpRouteRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteRetryPolicy)(nil)).Elem()
}

func (i GetRouteSpecHttpRouteRetryPolicyArgs) ToGetRouteSpecHttpRouteRetryPolicyOutput() GetRouteSpecHttpRouteRetryPolicyOutput {
	return i.ToGetRouteSpecHttpRouteRetryPolicyOutputWithContext(context.Background())
}

func (i GetRouteSpecHttpRouteRetryPolicyArgs) ToGetRouteSpecHttpRouteRetryPolicyOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttpRouteRetryPolicyOutput)
}

func (i *GetRouteSpecHttpRouteRetryPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttpRouteRetryPolicyArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttpRouteRetryPolicyOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttpRouteRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteRetryPolicy)(nil)).Elem()
}

func (o GetRouteSpecHttpRouteRetryPolicyOutput) ToGetRouteSpecHttpRouteRetryPolicyOutput() GetRouteSpecHttpRouteRetryPolicyOutput {
	return o
}

func (o GetRouteSpecHttpRouteRetryPolicyOutput) ToGetRouteSpecHttpRouteRetryPolicyOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteRetryPolicyOutput {
	return o
}

func (o GetRouteSpecHttpRouteRetryPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttpRouteRetryPolicy] {
	return pulumix.Output[GetRouteSpecHttpRouteRetryPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttpRouteRetryPolicyOutput) HttpRetryEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetRouteSpecHttpRouteRetryPolicy](o, func(v GetRouteSpecHttpRouteRetryPolicy) []string { return v.HttpRetryEvents })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttpRouteRetryPolicyOutput) MaxRetries() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttpRouteRetryPolicy](o, func(v GetRouteSpecHttpRouteRetryPolicy) int { return v.MaxRetries })
}

func (o GetRouteSpecHttpRouteRetryPolicyOutput) PerRetryTimeouts() pulumix.GArrayOutput[GetRouteSpecHttpRouteRetryPolicyPerRetryTimeout, GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput] {
	value := pulumix.Apply[GetRouteSpecHttpRouteRetryPolicy](o, func(v GetRouteSpecHttpRouteRetryPolicy) []GetRouteSpecHttpRouteRetryPolicyPerRetryTimeout {
		return v.PerRetryTimeouts
	})
	return pulumix.GArrayOutput[GetRouteSpecHttpRouteRetryPolicyPerRetryTimeout, GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttpRouteRetryPolicyOutput) TcpRetryEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetRouteSpecHttpRouteRetryPolicy](o, func(v GetRouteSpecHttpRouteRetryPolicy) []string { return v.TcpRetryEvents })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetRouteSpecHttpRouteRetryPolicyPerRetryTimeout struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteRetryPolicyPerRetryTimeout)(nil)).Elem()
}

func (i GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs) ToGetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput() GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput {
	return i.ToGetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutputWithContext(context.Background())
}

func (i GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs) ToGetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput)
}

func (i *GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteRetryPolicyPerRetryTimeout)(nil)).Elem()
}

func (o GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput) ToGetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput() GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput {
	return o
}

func (o GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput) ToGetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput {
	return o
}

func (o GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttpRouteRetryPolicyPerRetryTimeout] {
	return pulumix.Output[GetRouteSpecHttpRouteRetryPolicyPerRetryTimeout]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteRetryPolicyPerRetryTimeout](o, func(v GetRouteSpecHttpRouteRetryPolicyPerRetryTimeout) string { return v.Unit })
}

func (o GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttpRouteRetryPolicyPerRetryTimeout](o, func(v GetRouteSpecHttpRouteRetryPolicyPerRetryTimeout) int { return v.Value })
}

type GetRouteSpecHttpRouteTimeout struct {
	Idles       []GetRouteSpecHttpRouteTimeoutIdle       `pulumi:"idles"`
	PerRequests []GetRouteSpecHttpRouteTimeoutPerRequest `pulumi:"perRequests"`
}

type GetRouteSpecHttpRouteTimeoutArgs struct {
	Idles       pulumix.Input[[]*GetRouteSpecHttpRouteTimeoutIdleArgs]       `pulumi:"idles"`
	PerRequests pulumix.Input[[]*GetRouteSpecHttpRouteTimeoutPerRequestArgs] `pulumi:"perRequests"`
}

func (GetRouteSpecHttpRouteTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteTimeout)(nil)).Elem()
}

func (i GetRouteSpecHttpRouteTimeoutArgs) ToGetRouteSpecHttpRouteTimeoutOutput() GetRouteSpecHttpRouteTimeoutOutput {
	return i.ToGetRouteSpecHttpRouteTimeoutOutputWithContext(context.Background())
}

func (i GetRouteSpecHttpRouteTimeoutArgs) ToGetRouteSpecHttpRouteTimeoutOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttpRouteTimeoutOutput)
}

func (i *GetRouteSpecHttpRouteTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttpRouteTimeoutArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttpRouteTimeoutOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttpRouteTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteTimeout)(nil)).Elem()
}

func (o GetRouteSpecHttpRouteTimeoutOutput) ToGetRouteSpecHttpRouteTimeoutOutput() GetRouteSpecHttpRouteTimeoutOutput {
	return o
}

func (o GetRouteSpecHttpRouteTimeoutOutput) ToGetRouteSpecHttpRouteTimeoutOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteTimeoutOutput {
	return o
}

func (o GetRouteSpecHttpRouteTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttpRouteTimeout] {
	return pulumix.Output[GetRouteSpecHttpRouteTimeout]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttpRouteTimeoutOutput) Idles() pulumix.GArrayOutput[GetRouteSpecHttpRouteTimeoutIdle, GetRouteSpecHttpRouteTimeoutIdleOutput] {
	value := pulumix.Apply[GetRouteSpecHttpRouteTimeout](o, func(v GetRouteSpecHttpRouteTimeout) []GetRouteSpecHttpRouteTimeoutIdle { return v.Idles })
	return pulumix.GArrayOutput[GetRouteSpecHttpRouteTimeoutIdle, GetRouteSpecHttpRouteTimeoutIdleOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecHttpRouteTimeoutOutput) PerRequests() pulumix.GArrayOutput[GetRouteSpecHttpRouteTimeoutPerRequest, GetRouteSpecHttpRouteTimeoutPerRequestOutput] {
	value := pulumix.Apply[GetRouteSpecHttpRouteTimeout](o, func(v GetRouteSpecHttpRouteTimeout) []GetRouteSpecHttpRouteTimeoutPerRequest { return v.PerRequests })
	return pulumix.GArrayOutput[GetRouteSpecHttpRouteTimeoutPerRequest, GetRouteSpecHttpRouteTimeoutPerRequestOutput]{OutputState: value.OutputState}
}

type GetRouteSpecHttpRouteTimeoutIdle struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetRouteSpecHttpRouteTimeoutIdleArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetRouteSpecHttpRouteTimeoutIdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteTimeoutIdle)(nil)).Elem()
}

func (i GetRouteSpecHttpRouteTimeoutIdleArgs) ToGetRouteSpecHttpRouteTimeoutIdleOutput() GetRouteSpecHttpRouteTimeoutIdleOutput {
	return i.ToGetRouteSpecHttpRouteTimeoutIdleOutputWithContext(context.Background())
}

func (i GetRouteSpecHttpRouteTimeoutIdleArgs) ToGetRouteSpecHttpRouteTimeoutIdleOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteTimeoutIdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttpRouteTimeoutIdleOutput)
}

func (i *GetRouteSpecHttpRouteTimeoutIdleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttpRouteTimeoutIdleArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttpRouteTimeoutIdleOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttpRouteTimeoutIdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteTimeoutIdle)(nil)).Elem()
}

func (o GetRouteSpecHttpRouteTimeoutIdleOutput) ToGetRouteSpecHttpRouteTimeoutIdleOutput() GetRouteSpecHttpRouteTimeoutIdleOutput {
	return o
}

func (o GetRouteSpecHttpRouteTimeoutIdleOutput) ToGetRouteSpecHttpRouteTimeoutIdleOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteTimeoutIdleOutput {
	return o
}

func (o GetRouteSpecHttpRouteTimeoutIdleOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttpRouteTimeoutIdle] {
	return pulumix.Output[GetRouteSpecHttpRouteTimeoutIdle]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttpRouteTimeoutIdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteTimeoutIdle](o, func(v GetRouteSpecHttpRouteTimeoutIdle) string { return v.Unit })
}

func (o GetRouteSpecHttpRouteTimeoutIdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttpRouteTimeoutIdle](o, func(v GetRouteSpecHttpRouteTimeoutIdle) int { return v.Value })
}

type GetRouteSpecHttpRouteTimeoutPerRequest struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetRouteSpecHttpRouteTimeoutPerRequestArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetRouteSpecHttpRouteTimeoutPerRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteTimeoutPerRequest)(nil)).Elem()
}

func (i GetRouteSpecHttpRouteTimeoutPerRequestArgs) ToGetRouteSpecHttpRouteTimeoutPerRequestOutput() GetRouteSpecHttpRouteTimeoutPerRequestOutput {
	return i.ToGetRouteSpecHttpRouteTimeoutPerRequestOutputWithContext(context.Background())
}

func (i GetRouteSpecHttpRouteTimeoutPerRequestArgs) ToGetRouteSpecHttpRouteTimeoutPerRequestOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteTimeoutPerRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecHttpRouteTimeoutPerRequestOutput)
}

func (i *GetRouteSpecHttpRouteTimeoutPerRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecHttpRouteTimeoutPerRequestArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecHttpRouteTimeoutPerRequestOutput struct{ *pulumi.OutputState }

func (GetRouteSpecHttpRouteTimeoutPerRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecHttpRouteTimeoutPerRequest)(nil)).Elem()
}

func (o GetRouteSpecHttpRouteTimeoutPerRequestOutput) ToGetRouteSpecHttpRouteTimeoutPerRequestOutput() GetRouteSpecHttpRouteTimeoutPerRequestOutput {
	return o
}

func (o GetRouteSpecHttpRouteTimeoutPerRequestOutput) ToGetRouteSpecHttpRouteTimeoutPerRequestOutputWithContext(ctx context.Context) GetRouteSpecHttpRouteTimeoutPerRequestOutput {
	return o
}

func (o GetRouteSpecHttpRouteTimeoutPerRequestOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecHttpRouteTimeoutPerRequest] {
	return pulumix.Output[GetRouteSpecHttpRouteTimeoutPerRequest]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecHttpRouteTimeoutPerRequestOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecHttpRouteTimeoutPerRequest](o, func(v GetRouteSpecHttpRouteTimeoutPerRequest) string { return v.Unit })
}

func (o GetRouteSpecHttpRouteTimeoutPerRequestOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecHttpRouteTimeoutPerRequest](o, func(v GetRouteSpecHttpRouteTimeoutPerRequest) int { return v.Value })
}

type GetRouteSpecTcpRoute struct {
	Actions  []GetRouteSpecTcpRouteAction  `pulumi:"actions"`
	Matches  []GetRouteSpecTcpRouteMatch   `pulumi:"matches"`
	Timeouts []GetRouteSpecTcpRouteTimeout `pulumi:"timeouts"`
}

type GetRouteSpecTcpRouteArgs struct {
	Actions  pulumix.Input[[]*GetRouteSpecTcpRouteActionArgs]  `pulumi:"actions"`
	Matches  pulumix.Input[[]*GetRouteSpecTcpRouteMatchArgs]   `pulumi:"matches"`
	Timeouts pulumix.Input[[]*GetRouteSpecTcpRouteTimeoutArgs] `pulumi:"timeouts"`
}

func (GetRouteSpecTcpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecTcpRoute)(nil)).Elem()
}

func (i GetRouteSpecTcpRouteArgs) ToGetRouteSpecTcpRouteOutput() GetRouteSpecTcpRouteOutput {
	return i.ToGetRouteSpecTcpRouteOutputWithContext(context.Background())
}

func (i GetRouteSpecTcpRouteArgs) ToGetRouteSpecTcpRouteOutputWithContext(ctx context.Context) GetRouteSpecTcpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecTcpRouteOutput)
}

func (i *GetRouteSpecTcpRouteArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecTcpRouteArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecTcpRouteOutput struct{ *pulumi.OutputState }

func (GetRouteSpecTcpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecTcpRoute)(nil)).Elem()
}

func (o GetRouteSpecTcpRouteOutput) ToGetRouteSpecTcpRouteOutput() GetRouteSpecTcpRouteOutput {
	return o
}

func (o GetRouteSpecTcpRouteOutput) ToGetRouteSpecTcpRouteOutputWithContext(ctx context.Context) GetRouteSpecTcpRouteOutput {
	return o
}

func (o GetRouteSpecTcpRouteOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecTcpRoute] {
	return pulumix.Output[GetRouteSpecTcpRoute]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecTcpRouteOutput) Actions() pulumix.GArrayOutput[GetRouteSpecTcpRouteAction, GetRouteSpecTcpRouteActionOutput] {
	value := pulumix.Apply[GetRouteSpecTcpRoute](o, func(v GetRouteSpecTcpRoute) []GetRouteSpecTcpRouteAction { return v.Actions })
	return pulumix.GArrayOutput[GetRouteSpecTcpRouteAction, GetRouteSpecTcpRouteActionOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecTcpRouteOutput) Matches() pulumix.GArrayOutput[GetRouteSpecTcpRouteMatch, GetRouteSpecTcpRouteMatchOutput] {
	value := pulumix.Apply[GetRouteSpecTcpRoute](o, func(v GetRouteSpecTcpRoute) []GetRouteSpecTcpRouteMatch { return v.Matches })
	return pulumix.GArrayOutput[GetRouteSpecTcpRouteMatch, GetRouteSpecTcpRouteMatchOutput]{OutputState: value.OutputState}
}

func (o GetRouteSpecTcpRouteOutput) Timeouts() pulumix.GArrayOutput[GetRouteSpecTcpRouteTimeout, GetRouteSpecTcpRouteTimeoutOutput] {
	value := pulumix.Apply[GetRouteSpecTcpRoute](o, func(v GetRouteSpecTcpRoute) []GetRouteSpecTcpRouteTimeout { return v.Timeouts })
	return pulumix.GArrayOutput[GetRouteSpecTcpRouteTimeout, GetRouteSpecTcpRouteTimeoutOutput]{OutputState: value.OutputState}
}

type GetRouteSpecTcpRouteAction struct {
	WeightedTargets []GetRouteSpecTcpRouteActionWeightedTarget `pulumi:"weightedTargets"`
}

type GetRouteSpecTcpRouteActionArgs struct {
	WeightedTargets pulumix.Input[[]*GetRouteSpecTcpRouteActionWeightedTargetArgs] `pulumi:"weightedTargets"`
}

func (GetRouteSpecTcpRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecTcpRouteAction)(nil)).Elem()
}

func (i GetRouteSpecTcpRouteActionArgs) ToGetRouteSpecTcpRouteActionOutput() GetRouteSpecTcpRouteActionOutput {
	return i.ToGetRouteSpecTcpRouteActionOutputWithContext(context.Background())
}

func (i GetRouteSpecTcpRouteActionArgs) ToGetRouteSpecTcpRouteActionOutputWithContext(ctx context.Context) GetRouteSpecTcpRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecTcpRouteActionOutput)
}

func (i *GetRouteSpecTcpRouteActionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecTcpRouteActionArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecTcpRouteActionOutput struct{ *pulumi.OutputState }

func (GetRouteSpecTcpRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecTcpRouteAction)(nil)).Elem()
}

func (o GetRouteSpecTcpRouteActionOutput) ToGetRouteSpecTcpRouteActionOutput() GetRouteSpecTcpRouteActionOutput {
	return o
}

func (o GetRouteSpecTcpRouteActionOutput) ToGetRouteSpecTcpRouteActionOutputWithContext(ctx context.Context) GetRouteSpecTcpRouteActionOutput {
	return o
}

func (o GetRouteSpecTcpRouteActionOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecTcpRouteAction] {
	return pulumix.Output[GetRouteSpecTcpRouteAction]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecTcpRouteActionOutput) WeightedTargets() pulumix.GArrayOutput[GetRouteSpecTcpRouteActionWeightedTarget, GetRouteSpecTcpRouteActionWeightedTargetOutput] {
	value := pulumix.Apply[GetRouteSpecTcpRouteAction](o, func(v GetRouteSpecTcpRouteAction) []GetRouteSpecTcpRouteActionWeightedTarget {
		return v.WeightedTargets
	})
	return pulumix.GArrayOutput[GetRouteSpecTcpRouteActionWeightedTarget, GetRouteSpecTcpRouteActionWeightedTargetOutput]{OutputState: value.OutputState}
}

type GetRouteSpecTcpRouteActionWeightedTarget struct {
	Port        int    `pulumi:"port"`
	VirtualNode string `pulumi:"virtualNode"`
	Weight      int    `pulumi:"weight"`
}

type GetRouteSpecTcpRouteActionWeightedTargetArgs struct {
	Port        pulumix.Input[int]    `pulumi:"port"`
	VirtualNode pulumix.Input[string] `pulumi:"virtualNode"`
	Weight      pulumix.Input[int]    `pulumi:"weight"`
}

func (GetRouteSpecTcpRouteActionWeightedTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecTcpRouteActionWeightedTarget)(nil)).Elem()
}

func (i GetRouteSpecTcpRouteActionWeightedTargetArgs) ToGetRouteSpecTcpRouteActionWeightedTargetOutput() GetRouteSpecTcpRouteActionWeightedTargetOutput {
	return i.ToGetRouteSpecTcpRouteActionWeightedTargetOutputWithContext(context.Background())
}

func (i GetRouteSpecTcpRouteActionWeightedTargetArgs) ToGetRouteSpecTcpRouteActionWeightedTargetOutputWithContext(ctx context.Context) GetRouteSpecTcpRouteActionWeightedTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecTcpRouteActionWeightedTargetOutput)
}

func (i *GetRouteSpecTcpRouteActionWeightedTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecTcpRouteActionWeightedTargetArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecTcpRouteActionWeightedTargetOutput struct{ *pulumi.OutputState }

func (GetRouteSpecTcpRouteActionWeightedTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecTcpRouteActionWeightedTarget)(nil)).Elem()
}

func (o GetRouteSpecTcpRouteActionWeightedTargetOutput) ToGetRouteSpecTcpRouteActionWeightedTargetOutput() GetRouteSpecTcpRouteActionWeightedTargetOutput {
	return o
}

func (o GetRouteSpecTcpRouteActionWeightedTargetOutput) ToGetRouteSpecTcpRouteActionWeightedTargetOutputWithContext(ctx context.Context) GetRouteSpecTcpRouteActionWeightedTargetOutput {
	return o
}

func (o GetRouteSpecTcpRouteActionWeightedTargetOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecTcpRouteActionWeightedTarget] {
	return pulumix.Output[GetRouteSpecTcpRouteActionWeightedTarget]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecTcpRouteActionWeightedTargetOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecTcpRouteActionWeightedTarget](o, func(v GetRouteSpecTcpRouteActionWeightedTarget) int { return v.Port })
}

func (o GetRouteSpecTcpRouteActionWeightedTargetOutput) VirtualNode() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecTcpRouteActionWeightedTarget](o, func(v GetRouteSpecTcpRouteActionWeightedTarget) string { return v.VirtualNode })
}

func (o GetRouteSpecTcpRouteActionWeightedTargetOutput) Weight() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecTcpRouteActionWeightedTarget](o, func(v GetRouteSpecTcpRouteActionWeightedTarget) int { return v.Weight })
}

type GetRouteSpecTcpRouteMatch struct {
	Port int `pulumi:"port"`
}

type GetRouteSpecTcpRouteMatchArgs struct {
	Port pulumix.Input[int] `pulumi:"port"`
}

func (GetRouteSpecTcpRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecTcpRouteMatch)(nil)).Elem()
}

func (i GetRouteSpecTcpRouteMatchArgs) ToGetRouteSpecTcpRouteMatchOutput() GetRouteSpecTcpRouteMatchOutput {
	return i.ToGetRouteSpecTcpRouteMatchOutputWithContext(context.Background())
}

func (i GetRouteSpecTcpRouteMatchArgs) ToGetRouteSpecTcpRouteMatchOutputWithContext(ctx context.Context) GetRouteSpecTcpRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecTcpRouteMatchOutput)
}

func (i *GetRouteSpecTcpRouteMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecTcpRouteMatchArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecTcpRouteMatchOutput struct{ *pulumi.OutputState }

func (GetRouteSpecTcpRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecTcpRouteMatch)(nil)).Elem()
}

func (o GetRouteSpecTcpRouteMatchOutput) ToGetRouteSpecTcpRouteMatchOutput() GetRouteSpecTcpRouteMatchOutput {
	return o
}

func (o GetRouteSpecTcpRouteMatchOutput) ToGetRouteSpecTcpRouteMatchOutputWithContext(ctx context.Context) GetRouteSpecTcpRouteMatchOutput {
	return o
}

func (o GetRouteSpecTcpRouteMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecTcpRouteMatch] {
	return pulumix.Output[GetRouteSpecTcpRouteMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecTcpRouteMatchOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecTcpRouteMatch](o, func(v GetRouteSpecTcpRouteMatch) int { return v.Port })
}

type GetRouteSpecTcpRouteTimeout struct {
	Idles []GetRouteSpecTcpRouteTimeoutIdle `pulumi:"idles"`
}

type GetRouteSpecTcpRouteTimeoutArgs struct {
	Idles pulumix.Input[[]*GetRouteSpecTcpRouteTimeoutIdleArgs] `pulumi:"idles"`
}

func (GetRouteSpecTcpRouteTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecTcpRouteTimeout)(nil)).Elem()
}

func (i GetRouteSpecTcpRouteTimeoutArgs) ToGetRouteSpecTcpRouteTimeoutOutput() GetRouteSpecTcpRouteTimeoutOutput {
	return i.ToGetRouteSpecTcpRouteTimeoutOutputWithContext(context.Background())
}

func (i GetRouteSpecTcpRouteTimeoutArgs) ToGetRouteSpecTcpRouteTimeoutOutputWithContext(ctx context.Context) GetRouteSpecTcpRouteTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecTcpRouteTimeoutOutput)
}

func (i *GetRouteSpecTcpRouteTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecTcpRouteTimeoutArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecTcpRouteTimeoutOutput struct{ *pulumi.OutputState }

func (GetRouteSpecTcpRouteTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecTcpRouteTimeout)(nil)).Elem()
}

func (o GetRouteSpecTcpRouteTimeoutOutput) ToGetRouteSpecTcpRouteTimeoutOutput() GetRouteSpecTcpRouteTimeoutOutput {
	return o
}

func (o GetRouteSpecTcpRouteTimeoutOutput) ToGetRouteSpecTcpRouteTimeoutOutputWithContext(ctx context.Context) GetRouteSpecTcpRouteTimeoutOutput {
	return o
}

func (o GetRouteSpecTcpRouteTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecTcpRouteTimeout] {
	return pulumix.Output[GetRouteSpecTcpRouteTimeout]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecTcpRouteTimeoutOutput) Idles() pulumix.GArrayOutput[GetRouteSpecTcpRouteTimeoutIdle, GetRouteSpecTcpRouteTimeoutIdleOutput] {
	value := pulumix.Apply[GetRouteSpecTcpRouteTimeout](o, func(v GetRouteSpecTcpRouteTimeout) []GetRouteSpecTcpRouteTimeoutIdle { return v.Idles })
	return pulumix.GArrayOutput[GetRouteSpecTcpRouteTimeoutIdle, GetRouteSpecTcpRouteTimeoutIdleOutput]{OutputState: value.OutputState}
}

type GetRouteSpecTcpRouteTimeoutIdle struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetRouteSpecTcpRouteTimeoutIdleArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetRouteSpecTcpRouteTimeoutIdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecTcpRouteTimeoutIdle)(nil)).Elem()
}

func (i GetRouteSpecTcpRouteTimeoutIdleArgs) ToGetRouteSpecTcpRouteTimeoutIdleOutput() GetRouteSpecTcpRouteTimeoutIdleOutput {
	return i.ToGetRouteSpecTcpRouteTimeoutIdleOutputWithContext(context.Background())
}

func (i GetRouteSpecTcpRouteTimeoutIdleArgs) ToGetRouteSpecTcpRouteTimeoutIdleOutputWithContext(ctx context.Context) GetRouteSpecTcpRouteTimeoutIdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteSpecTcpRouteTimeoutIdleOutput)
}

func (i *GetRouteSpecTcpRouteTimeoutIdleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRouteSpecTcpRouteTimeoutIdleArgs] {
	return pulumix.Val(i)
}

type GetRouteSpecTcpRouteTimeoutIdleOutput struct{ *pulumi.OutputState }

func (GetRouteSpecTcpRouteTimeoutIdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteSpecTcpRouteTimeoutIdle)(nil)).Elem()
}

func (o GetRouteSpecTcpRouteTimeoutIdleOutput) ToGetRouteSpecTcpRouteTimeoutIdleOutput() GetRouteSpecTcpRouteTimeoutIdleOutput {
	return o
}

func (o GetRouteSpecTcpRouteTimeoutIdleOutput) ToGetRouteSpecTcpRouteTimeoutIdleOutputWithContext(ctx context.Context) GetRouteSpecTcpRouteTimeoutIdleOutput {
	return o
}

func (o GetRouteSpecTcpRouteTimeoutIdleOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteSpecTcpRouteTimeoutIdle] {
	return pulumix.Output[GetRouteSpecTcpRouteTimeoutIdle]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteSpecTcpRouteTimeoutIdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetRouteSpecTcpRouteTimeoutIdle](o, func(v GetRouteSpecTcpRouteTimeoutIdle) string { return v.Unit })
}

func (o GetRouteSpecTcpRouteTimeoutIdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetRouteSpecTcpRouteTimeoutIdle](o, func(v GetRouteSpecTcpRouteTimeoutIdle) int { return v.Value })
}

type GetVirtualGatewaySpec struct {
	BackendDefaults []GetVirtualGatewaySpecBackendDefault `pulumi:"backendDefaults"`
	Listeners       []GetVirtualGatewaySpecListener       `pulumi:"listeners"`
	Loggings        []GetVirtualGatewaySpecLogging        `pulumi:"loggings"`
}

type GetVirtualGatewaySpecArgs struct {
	BackendDefaults pulumix.Input[[]*GetVirtualGatewaySpecBackendDefaultArgs] `pulumi:"backendDefaults"`
	Listeners       pulumix.Input[[]*GetVirtualGatewaySpecListenerArgs]       `pulumi:"listeners"`
	Loggings        pulumix.Input[[]*GetVirtualGatewaySpecLoggingArgs]        `pulumi:"loggings"`
}

func (GetVirtualGatewaySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpec)(nil)).Elem()
}

func (i GetVirtualGatewaySpecArgs) ToGetVirtualGatewaySpecOutput() GetVirtualGatewaySpecOutput {
	return i.ToGetVirtualGatewaySpecOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecArgs) ToGetVirtualGatewaySpecOutputWithContext(ctx context.Context) GetVirtualGatewaySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecOutput)
}

func (i *GetVirtualGatewaySpecArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpec)(nil)).Elem()
}

func (o GetVirtualGatewaySpecOutput) ToGetVirtualGatewaySpecOutput() GetVirtualGatewaySpecOutput {
	return o
}

func (o GetVirtualGatewaySpecOutput) ToGetVirtualGatewaySpecOutputWithContext(ctx context.Context) GetVirtualGatewaySpecOutput {
	return o
}

func (o GetVirtualGatewaySpecOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpec] {
	return pulumix.Output[GetVirtualGatewaySpec]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecOutput) BackendDefaults() pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefault, GetVirtualGatewaySpecBackendDefaultOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpec](o, func(v GetVirtualGatewaySpec) []GetVirtualGatewaySpecBackendDefault { return v.BackendDefaults })
	return pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefault, GetVirtualGatewaySpecBackendDefaultOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecOutput) Listeners() pulumix.GArrayOutput[GetVirtualGatewaySpecListener, GetVirtualGatewaySpecListenerOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpec](o, func(v GetVirtualGatewaySpec) []GetVirtualGatewaySpecListener { return v.Listeners })
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListener, GetVirtualGatewaySpecListenerOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecOutput) Loggings() pulumix.GArrayOutput[GetVirtualGatewaySpecLogging, GetVirtualGatewaySpecLoggingOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpec](o, func(v GetVirtualGatewaySpec) []GetVirtualGatewaySpecLogging { return v.Loggings })
	return pulumix.GArrayOutput[GetVirtualGatewaySpecLogging, GetVirtualGatewaySpecLoggingOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecBackendDefault struct {
	ClientPolicies []GetVirtualGatewaySpecBackendDefaultClientPolicy `pulumi:"clientPolicies"`
}

type GetVirtualGatewaySpecBackendDefaultArgs struct {
	ClientPolicies pulumix.Input[[]*GetVirtualGatewaySpecBackendDefaultClientPolicyArgs] `pulumi:"clientPolicies"`
}

func (GetVirtualGatewaySpecBackendDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefault)(nil)).Elem()
}

func (i GetVirtualGatewaySpecBackendDefaultArgs) ToGetVirtualGatewaySpecBackendDefaultOutput() GetVirtualGatewaySpecBackendDefaultOutput {
	return i.ToGetVirtualGatewaySpecBackendDefaultOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecBackendDefaultArgs) ToGetVirtualGatewaySpecBackendDefaultOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecBackendDefaultOutput)
}

func (i *GetVirtualGatewaySpecBackendDefaultArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecBackendDefaultArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecBackendDefaultOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecBackendDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefault)(nil)).Elem()
}

func (o GetVirtualGatewaySpecBackendDefaultOutput) ToGetVirtualGatewaySpecBackendDefaultOutput() GetVirtualGatewaySpecBackendDefaultOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultOutput) ToGetVirtualGatewaySpecBackendDefaultOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecBackendDefault] {
	return pulumix.Output[GetVirtualGatewaySpecBackendDefault]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecBackendDefaultOutput) ClientPolicies() pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicy, GetVirtualGatewaySpecBackendDefaultClientPolicyOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecBackendDefault](o, func(v GetVirtualGatewaySpecBackendDefault) []GetVirtualGatewaySpecBackendDefaultClientPolicy {
		return v.ClientPolicies
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicy, GetVirtualGatewaySpecBackendDefaultClientPolicyOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecBackendDefaultClientPolicy struct {
	Tls []GetVirtualGatewaySpecBackendDefaultClientPolicyTl `pulumi:"tls"`
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyArgs struct {
	Tls pulumix.Input[[]*GetVirtualGatewaySpecBackendDefaultClientPolicyTlArgs] `pulumi:"tls"`
}

func (GetVirtualGatewaySpecBackendDefaultClientPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicy)(nil)).Elem()
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyOutput {
	return i.ToGetVirtualGatewaySpecBackendDefaultClientPolicyOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecBackendDefaultClientPolicyOutput)
}

func (i *GetVirtualGatewaySpecBackendDefaultClientPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecBackendDefaultClientPolicyArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecBackendDefaultClientPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicy)(nil)).Elem()
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicy] {
	return pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyOutput) Tls() pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTl, GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicy](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicy) []GetVirtualGatewaySpecBackendDefaultClientPolicyTl {
		return v.Tls
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTl, GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTl struct {
	Certificates []GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificate `pulumi:"certificates"`
	Enforce      bool                                                           `pulumi:"enforce"`
	Ports        []int                                                          `pulumi:"ports"`
	Validations  []GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidation  `pulumi:"validations"`
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlArgs struct {
	Certificates pulumix.Input[[]*GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateArgs] `pulumi:"certificates"`
	Enforce      pulumix.Input[bool]                                                                `pulumi:"enforce"`
	Ports        pulumix.Input[[]int]                                                               `pulumi:"ports"`
	Validations  pulumix.Input[[]*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationArgs]  `pulumi:"validations"`
}

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTl)(nil)).Elem()
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput {
	return i.ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput)
}

func (i *GetVirtualGatewaySpecBackendDefaultClientPolicyTlArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecBackendDefaultClientPolicyTlArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTl)(nil)).Elem()
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTl] {
	return pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTl]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput) Certificates() pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificate, GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTl](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTl) []GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificate {
		return v.Certificates
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificate, GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput) Enforce() pulumix.Output[bool] {
	return pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTl](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTl) bool { return v.Enforce })
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput) Ports() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTl](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTl) []int { return v.Ports })
	return pulumix.ArrayOutput[int]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput) Validations() pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidation, GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTl](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTl) []GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidation {
		return v.Validations
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidation, GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificate struct {
	Files []GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFile `pulumi:"files"`
	Sds   []GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSd   `pulumi:"sds"`
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateArgs struct {
	Files pulumix.Input[[]*GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileArgs] `pulumi:"files"`
	Sds   pulumix.Input[[]*GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdArgs]   `pulumi:"sds"`
}

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificate)(nil)).Elem()
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput {
	return i.ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput)
}

func (i *GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificate)(nil)).Elem()
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificate] {
	return pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificate]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput) Files() pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFile, GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificate](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificate) []GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFile {
		return v.Files
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFile, GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput) Sds() pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSd, GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificate](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificate) []GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSd {
		return v.Sds
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSd, GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFile struct {
	CertificateChain string `pulumi:"certificateChain"`
	PrivateKey       string `pulumi:"privateKey"`
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileArgs struct {
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
	PrivateKey       pulumix.Input[string] `pulumi:"privateKey"`
}

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFile)(nil)).Elem()
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput {
	return i.ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput)
}

func (i *GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFile)(nil)).Elem()
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFile] {
	return pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFile]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFile](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFile) string {
		return v.CertificateChain
	})
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput) PrivateKey() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFile](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFile) string { return v.PrivateKey })
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSd struct {
	SecretName string `pulumi:"secretName"`
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdArgs struct {
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSd)(nil)).Elem()
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput {
	return i.ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput)
}

func (i *GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSd)(nil)).Elem()
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSd] {
	return pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSd]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSd](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSd) string { return v.SecretName })
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidation struct {
	SubjectAlternativeNames []GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName `pulumi:"subjectAlternativeNames"`
	Trusts                  []GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrust                  `pulumi:"trusts"`
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationArgs struct {
	SubjectAlternativeNames pulumix.Input[[]*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameArgs] `pulumi:"subjectAlternativeNames"`
	Trusts                  pulumix.Input[[]*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustArgs]                  `pulumi:"trusts"`
}

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidation)(nil)).Elem()
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput {
	return i.ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput)
}

func (i *GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidation)(nil)).Elem()
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidation] {
	return pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidation]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput) SubjectAlternativeNames() pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName, GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidation](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidation) []GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName {
		return v.SubjectAlternativeNames
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName, GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput) Trusts() pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrust, GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidation](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidation) []GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrust {
		return v.Trusts
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrust, GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName struct {
	Matches []GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch `pulumi:"matches"`
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameArgs struct {
	Matches pulumix.Input[[]*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchArgs] `pulumi:"matches"`
}

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName)(nil)).Elem()
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput {
	return i.ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput)
}

func (i *GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName)(nil)).Elem()
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName] {
	return pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput) Matches() pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch, GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName) []GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch {
		return v.Matches
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch, GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch struct {
	Exacts []string `pulumi:"exacts"`
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchArgs struct {
	Exacts pulumix.Input[[]string] `pulumi:"exacts"`
}

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch)(nil)).Elem()
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput {
	return i.ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput)
}

func (i *GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch)(nil)).Elem()
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch] {
	return pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput) Exacts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch) []string {
		return v.Exacts
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrust struct {
	Acms  []GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcm  `pulumi:"acms"`
	Files []GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFile `pulumi:"files"`
	Sds   []GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSd   `pulumi:"sds"`
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustArgs struct {
	Acms  pulumix.Input[[]*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmArgs]  `pulumi:"acms"`
	Files pulumix.Input[[]*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileArgs] `pulumi:"files"`
	Sds   pulumix.Input[[]*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdArgs]   `pulumi:"sds"`
}

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrust)(nil)).Elem()
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput {
	return i.ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput)
}

func (i *GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrust)(nil)).Elem()
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrust] {
	return pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrust]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput) Acms() pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcm, GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrust](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrust) []GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcm {
		return v.Acms
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcm, GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput) Files() pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFile, GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrust](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrust) []GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFile {
		return v.Files
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFile, GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput) Sds() pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSd, GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrust](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrust) []GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSd {
		return v.Sds
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSd, GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcm struct {
	CertificateAuthorityArns []string `pulumi:"certificateAuthorityArns"`
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmArgs struct {
	CertificateAuthorityArns pulumix.Input[[]string] `pulumi:"certificateAuthorityArns"`
}

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcm)(nil)).Elem()
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput {
	return i.ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput)
}

func (i *GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcm)(nil)).Elem()
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcm] {
	return pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcm]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput) CertificateAuthorityArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcm](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcm) []string {
		return v.CertificateAuthorityArns
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFile struct {
	CertificateChain string `pulumi:"certificateChain"`
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileArgs struct {
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
}

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFile)(nil)).Elem()
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput {
	return i.ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput)
}

func (i *GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFile)(nil)).Elem()
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFile] {
	return pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFile]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFile](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFile) string {
		return v.CertificateChain
	})
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSd struct {
	SecretName string `pulumi:"secretName"`
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdArgs struct {
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSd)(nil)).Elem()
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput {
	return i.ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdArgs) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput)
}

func (i *GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSd)(nil)).Elem()
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput() GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput) ToGetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutputWithContext(ctx context.Context) GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput {
	return o
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSd] {
	return pulumix.Output[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSd]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSd](o, func(v GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSd) string { return v.SecretName })
}

type GetVirtualGatewaySpecListener struct {
	ConnectionPools []GetVirtualGatewaySpecListenerConnectionPool `pulumi:"connectionPools"`
	HealthChecks    []GetVirtualGatewaySpecListenerHealthCheck    `pulumi:"healthChecks"`
	PortMappings    []GetVirtualGatewaySpecListenerPortMapping    `pulumi:"portMappings"`
	Tls             []GetVirtualGatewaySpecListenerTl             `pulumi:"tls"`
}

type GetVirtualGatewaySpecListenerArgs struct {
	ConnectionPools pulumix.Input[[]*GetVirtualGatewaySpecListenerConnectionPoolArgs] `pulumi:"connectionPools"`
	HealthChecks    pulumix.Input[[]*GetVirtualGatewaySpecListenerHealthCheckArgs]    `pulumi:"healthChecks"`
	PortMappings    pulumix.Input[[]*GetVirtualGatewaySpecListenerPortMappingArgs]    `pulumi:"portMappings"`
	Tls             pulumix.Input[[]*GetVirtualGatewaySpecListenerTlArgs]             `pulumi:"tls"`
}

func (GetVirtualGatewaySpecListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListener)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerArgs) ToGetVirtualGatewaySpecListenerOutput() GetVirtualGatewaySpecListenerOutput {
	return i.ToGetVirtualGatewaySpecListenerOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerArgs) ToGetVirtualGatewaySpecListenerOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerOutput)
}

func (i *GetVirtualGatewaySpecListenerArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListener)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerOutput) ToGetVirtualGatewaySpecListenerOutput() GetVirtualGatewaySpecListenerOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerOutput) ToGetVirtualGatewaySpecListenerOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListener] {
	return pulumix.Output[GetVirtualGatewaySpecListener]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerOutput) ConnectionPools() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerConnectionPool, GetVirtualGatewaySpecListenerConnectionPoolOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListener](o, func(v GetVirtualGatewaySpecListener) []GetVirtualGatewaySpecListenerConnectionPool {
		return v.ConnectionPools
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerConnectionPool, GetVirtualGatewaySpecListenerConnectionPoolOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecListenerOutput) HealthChecks() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerHealthCheck, GetVirtualGatewaySpecListenerHealthCheckOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListener](o, func(v GetVirtualGatewaySpecListener) []GetVirtualGatewaySpecListenerHealthCheck {
		return v.HealthChecks
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerHealthCheck, GetVirtualGatewaySpecListenerHealthCheckOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecListenerOutput) PortMappings() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerPortMapping, GetVirtualGatewaySpecListenerPortMappingOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListener](o, func(v GetVirtualGatewaySpecListener) []GetVirtualGatewaySpecListenerPortMapping {
		return v.PortMappings
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerPortMapping, GetVirtualGatewaySpecListenerPortMappingOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecListenerOutput) Tls() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTl, GetVirtualGatewaySpecListenerTlOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListener](o, func(v GetVirtualGatewaySpecListener) []GetVirtualGatewaySpecListenerTl { return v.Tls })
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTl, GetVirtualGatewaySpecListenerTlOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecListenerConnectionPool struct {
	Grpcs  []GetVirtualGatewaySpecListenerConnectionPoolGrpc  `pulumi:"grpcs"`
	Http2s []GetVirtualGatewaySpecListenerConnectionPoolHttp2 `pulumi:"http2s"`
	Https  []GetVirtualGatewaySpecListenerConnectionPoolHttp  `pulumi:"https"`
}

type GetVirtualGatewaySpecListenerConnectionPoolArgs struct {
	Grpcs  pulumix.Input[[]*GetVirtualGatewaySpecListenerConnectionPoolGrpcArgs]  `pulumi:"grpcs"`
	Http2s pulumix.Input[[]*GetVirtualGatewaySpecListenerConnectionPoolHttp2Args] `pulumi:"http2s"`
	Https  pulumix.Input[[]*GetVirtualGatewaySpecListenerConnectionPoolHttpArgs]  `pulumi:"https"`
}

func (GetVirtualGatewaySpecListenerConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerConnectionPool)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerConnectionPoolArgs) ToGetVirtualGatewaySpecListenerConnectionPoolOutput() GetVirtualGatewaySpecListenerConnectionPoolOutput {
	return i.ToGetVirtualGatewaySpecListenerConnectionPoolOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerConnectionPoolArgs) ToGetVirtualGatewaySpecListenerConnectionPoolOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerConnectionPoolOutput)
}

func (i *GetVirtualGatewaySpecListenerConnectionPoolArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerConnectionPoolArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerConnectionPoolOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerConnectionPool)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerConnectionPoolOutput) ToGetVirtualGatewaySpecListenerConnectionPoolOutput() GetVirtualGatewaySpecListenerConnectionPoolOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerConnectionPoolOutput) ToGetVirtualGatewaySpecListenerConnectionPoolOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerConnectionPoolOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerConnectionPoolOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerConnectionPool] {
	return pulumix.Output[GetVirtualGatewaySpecListenerConnectionPool]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerConnectionPoolOutput) Grpcs() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerConnectionPoolGrpc, GetVirtualGatewaySpecListenerConnectionPoolGrpcOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListenerConnectionPool](o, func(v GetVirtualGatewaySpecListenerConnectionPool) []GetVirtualGatewaySpecListenerConnectionPoolGrpc {
		return v.Grpcs
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerConnectionPoolGrpc, GetVirtualGatewaySpecListenerConnectionPoolGrpcOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecListenerConnectionPoolOutput) Http2s() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerConnectionPoolHttp2, GetVirtualGatewaySpecListenerConnectionPoolHttp2Output] {
	value := pulumix.Apply[GetVirtualGatewaySpecListenerConnectionPool](o, func(v GetVirtualGatewaySpecListenerConnectionPool) []GetVirtualGatewaySpecListenerConnectionPoolHttp2 {
		return v.Http2s
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerConnectionPoolHttp2, GetVirtualGatewaySpecListenerConnectionPoolHttp2Output]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecListenerConnectionPoolOutput) Https() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerConnectionPoolHttp, GetVirtualGatewaySpecListenerConnectionPoolHttpOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListenerConnectionPool](o, func(v GetVirtualGatewaySpecListenerConnectionPool) []GetVirtualGatewaySpecListenerConnectionPoolHttp {
		return v.Https
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerConnectionPoolHttp, GetVirtualGatewaySpecListenerConnectionPoolHttpOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecListenerConnectionPoolGrpc struct {
	MaxRequests int `pulumi:"maxRequests"`
}

type GetVirtualGatewaySpecListenerConnectionPoolGrpcArgs struct {
	MaxRequests pulumix.Input[int] `pulumi:"maxRequests"`
}

func (GetVirtualGatewaySpecListenerConnectionPoolGrpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerConnectionPoolGrpc)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerConnectionPoolGrpcArgs) ToGetVirtualGatewaySpecListenerConnectionPoolGrpcOutput() GetVirtualGatewaySpecListenerConnectionPoolGrpcOutput {
	return i.ToGetVirtualGatewaySpecListenerConnectionPoolGrpcOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerConnectionPoolGrpcArgs) ToGetVirtualGatewaySpecListenerConnectionPoolGrpcOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerConnectionPoolGrpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerConnectionPoolGrpcOutput)
}

func (i *GetVirtualGatewaySpecListenerConnectionPoolGrpcArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerConnectionPoolGrpcArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerConnectionPoolGrpcOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerConnectionPoolGrpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerConnectionPoolGrpc)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerConnectionPoolGrpcOutput) ToGetVirtualGatewaySpecListenerConnectionPoolGrpcOutput() GetVirtualGatewaySpecListenerConnectionPoolGrpcOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerConnectionPoolGrpcOutput) ToGetVirtualGatewaySpecListenerConnectionPoolGrpcOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerConnectionPoolGrpcOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerConnectionPoolGrpcOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerConnectionPoolGrpc] {
	return pulumix.Output[GetVirtualGatewaySpecListenerConnectionPoolGrpc]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerConnectionPoolGrpcOutput) MaxRequests() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerConnectionPoolGrpc](o, func(v GetVirtualGatewaySpecListenerConnectionPoolGrpc) int { return v.MaxRequests })
}

type GetVirtualGatewaySpecListenerConnectionPoolHttp2 struct {
	MaxRequests int `pulumi:"maxRequests"`
}

type GetVirtualGatewaySpecListenerConnectionPoolHttp2Args struct {
	MaxRequests pulumix.Input[int] `pulumi:"maxRequests"`
}

func (GetVirtualGatewaySpecListenerConnectionPoolHttp2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerConnectionPoolHttp2)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerConnectionPoolHttp2Args) ToGetVirtualGatewaySpecListenerConnectionPoolHttp2Output() GetVirtualGatewaySpecListenerConnectionPoolHttp2Output {
	return i.ToGetVirtualGatewaySpecListenerConnectionPoolHttp2OutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerConnectionPoolHttp2Args) ToGetVirtualGatewaySpecListenerConnectionPoolHttp2OutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerConnectionPoolHttp2Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerConnectionPoolHttp2Output)
}

func (i *GetVirtualGatewaySpecListenerConnectionPoolHttp2Args) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerConnectionPoolHttp2Args] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerConnectionPoolHttp2Output struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerConnectionPoolHttp2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerConnectionPoolHttp2)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerConnectionPoolHttp2Output) ToGetVirtualGatewaySpecListenerConnectionPoolHttp2Output() GetVirtualGatewaySpecListenerConnectionPoolHttp2Output {
	return o
}

func (o GetVirtualGatewaySpecListenerConnectionPoolHttp2Output) ToGetVirtualGatewaySpecListenerConnectionPoolHttp2OutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerConnectionPoolHttp2Output {
	return o
}

func (o GetVirtualGatewaySpecListenerConnectionPoolHttp2Output) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerConnectionPoolHttp2] {
	return pulumix.Output[GetVirtualGatewaySpecListenerConnectionPoolHttp2]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerConnectionPoolHttp2Output) MaxRequests() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerConnectionPoolHttp2](o, func(v GetVirtualGatewaySpecListenerConnectionPoolHttp2) int { return v.MaxRequests })
}

type GetVirtualGatewaySpecListenerConnectionPoolHttp struct {
	MaxConnections     int `pulumi:"maxConnections"`
	MaxPendingRequests int `pulumi:"maxPendingRequests"`
}

type GetVirtualGatewaySpecListenerConnectionPoolHttpArgs struct {
	MaxConnections     pulumix.Input[int] `pulumi:"maxConnections"`
	MaxPendingRequests pulumix.Input[int] `pulumi:"maxPendingRequests"`
}

func (GetVirtualGatewaySpecListenerConnectionPoolHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerConnectionPoolHttp)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerConnectionPoolHttpArgs) ToGetVirtualGatewaySpecListenerConnectionPoolHttpOutput() GetVirtualGatewaySpecListenerConnectionPoolHttpOutput {
	return i.ToGetVirtualGatewaySpecListenerConnectionPoolHttpOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerConnectionPoolHttpArgs) ToGetVirtualGatewaySpecListenerConnectionPoolHttpOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerConnectionPoolHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerConnectionPoolHttpOutput)
}

func (i *GetVirtualGatewaySpecListenerConnectionPoolHttpArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerConnectionPoolHttpArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerConnectionPoolHttpOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerConnectionPoolHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerConnectionPoolHttp)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerConnectionPoolHttpOutput) ToGetVirtualGatewaySpecListenerConnectionPoolHttpOutput() GetVirtualGatewaySpecListenerConnectionPoolHttpOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerConnectionPoolHttpOutput) ToGetVirtualGatewaySpecListenerConnectionPoolHttpOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerConnectionPoolHttpOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerConnectionPoolHttpOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerConnectionPoolHttp] {
	return pulumix.Output[GetVirtualGatewaySpecListenerConnectionPoolHttp]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerConnectionPoolHttpOutput) MaxConnections() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerConnectionPoolHttp](o, func(v GetVirtualGatewaySpecListenerConnectionPoolHttp) int { return v.MaxConnections })
}

func (o GetVirtualGatewaySpecListenerConnectionPoolHttpOutput) MaxPendingRequests() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerConnectionPoolHttp](o, func(v GetVirtualGatewaySpecListenerConnectionPoolHttp) int { return v.MaxPendingRequests })
}

type GetVirtualGatewaySpecListenerHealthCheck struct {
	HealthyThreshold   int    `pulumi:"healthyThreshold"`
	IntervalMillis     int    `pulumi:"intervalMillis"`
	Path               string `pulumi:"path"`
	Port               int    `pulumi:"port"`
	Protocol           string `pulumi:"protocol"`
	TimeoutMillis      int    `pulumi:"timeoutMillis"`
	UnhealthyThreshold int    `pulumi:"unhealthyThreshold"`
}

type GetVirtualGatewaySpecListenerHealthCheckArgs struct {
	HealthyThreshold   pulumix.Input[int]    `pulumi:"healthyThreshold"`
	IntervalMillis     pulumix.Input[int]    `pulumi:"intervalMillis"`
	Path               pulumix.Input[string] `pulumi:"path"`
	Port               pulumix.Input[int]    `pulumi:"port"`
	Protocol           pulumix.Input[string] `pulumi:"protocol"`
	TimeoutMillis      pulumix.Input[int]    `pulumi:"timeoutMillis"`
	UnhealthyThreshold pulumix.Input[int]    `pulumi:"unhealthyThreshold"`
}

func (GetVirtualGatewaySpecListenerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerHealthCheck)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerHealthCheckArgs) ToGetVirtualGatewaySpecListenerHealthCheckOutput() GetVirtualGatewaySpecListenerHealthCheckOutput {
	return i.ToGetVirtualGatewaySpecListenerHealthCheckOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerHealthCheckArgs) ToGetVirtualGatewaySpecListenerHealthCheckOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerHealthCheckOutput)
}

func (i *GetVirtualGatewaySpecListenerHealthCheckArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerHealthCheckArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerHealthCheckOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerHealthCheck)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerHealthCheckOutput) ToGetVirtualGatewaySpecListenerHealthCheckOutput() GetVirtualGatewaySpecListenerHealthCheckOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerHealthCheckOutput) ToGetVirtualGatewaySpecListenerHealthCheckOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerHealthCheckOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerHealthCheckOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerHealthCheck] {
	return pulumix.Output[GetVirtualGatewaySpecListenerHealthCheck]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerHealthCheckOutput) HealthyThreshold() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerHealthCheck](o, func(v GetVirtualGatewaySpecListenerHealthCheck) int { return v.HealthyThreshold })
}

func (o GetVirtualGatewaySpecListenerHealthCheckOutput) IntervalMillis() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerHealthCheck](o, func(v GetVirtualGatewaySpecListenerHealthCheck) int { return v.IntervalMillis })
}

func (o GetVirtualGatewaySpecListenerHealthCheckOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerHealthCheck](o, func(v GetVirtualGatewaySpecListenerHealthCheck) string { return v.Path })
}

func (o GetVirtualGatewaySpecListenerHealthCheckOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerHealthCheck](o, func(v GetVirtualGatewaySpecListenerHealthCheck) int { return v.Port })
}

func (o GetVirtualGatewaySpecListenerHealthCheckOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerHealthCheck](o, func(v GetVirtualGatewaySpecListenerHealthCheck) string { return v.Protocol })
}

func (o GetVirtualGatewaySpecListenerHealthCheckOutput) TimeoutMillis() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerHealthCheck](o, func(v GetVirtualGatewaySpecListenerHealthCheck) int { return v.TimeoutMillis })
}

func (o GetVirtualGatewaySpecListenerHealthCheckOutput) UnhealthyThreshold() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerHealthCheck](o, func(v GetVirtualGatewaySpecListenerHealthCheck) int { return v.UnhealthyThreshold })
}

type GetVirtualGatewaySpecListenerPortMapping struct {
	Port     int    `pulumi:"port"`
	Protocol string `pulumi:"protocol"`
}

type GetVirtualGatewaySpecListenerPortMappingArgs struct {
	Port     pulumix.Input[int]    `pulumi:"port"`
	Protocol pulumix.Input[string] `pulumi:"protocol"`
}

func (GetVirtualGatewaySpecListenerPortMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerPortMapping)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerPortMappingArgs) ToGetVirtualGatewaySpecListenerPortMappingOutput() GetVirtualGatewaySpecListenerPortMappingOutput {
	return i.ToGetVirtualGatewaySpecListenerPortMappingOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerPortMappingArgs) ToGetVirtualGatewaySpecListenerPortMappingOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerPortMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerPortMappingOutput)
}

func (i *GetVirtualGatewaySpecListenerPortMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerPortMappingArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerPortMappingOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerPortMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerPortMapping)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerPortMappingOutput) ToGetVirtualGatewaySpecListenerPortMappingOutput() GetVirtualGatewaySpecListenerPortMappingOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerPortMappingOutput) ToGetVirtualGatewaySpecListenerPortMappingOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerPortMappingOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerPortMappingOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerPortMapping] {
	return pulumix.Output[GetVirtualGatewaySpecListenerPortMapping]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerPortMappingOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerPortMapping](o, func(v GetVirtualGatewaySpecListenerPortMapping) int { return v.Port })
}

func (o GetVirtualGatewaySpecListenerPortMappingOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerPortMapping](o, func(v GetVirtualGatewaySpecListenerPortMapping) string { return v.Protocol })
}

type GetVirtualGatewaySpecListenerTl struct {
	Certificates []GetVirtualGatewaySpecListenerTlCertificate `pulumi:"certificates"`
	Mode         string                                       `pulumi:"mode"`
	Validations  []GetVirtualGatewaySpecListenerTlValidation  `pulumi:"validations"`
}

type GetVirtualGatewaySpecListenerTlArgs struct {
	Certificates pulumix.Input[[]*GetVirtualGatewaySpecListenerTlCertificateArgs] `pulumi:"certificates"`
	Mode         pulumix.Input[string]                                            `pulumi:"mode"`
	Validations  pulumix.Input[[]*GetVirtualGatewaySpecListenerTlValidationArgs]  `pulumi:"validations"`
}

func (GetVirtualGatewaySpecListenerTlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTl)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerTlArgs) ToGetVirtualGatewaySpecListenerTlOutput() GetVirtualGatewaySpecListenerTlOutput {
	return i.ToGetVirtualGatewaySpecListenerTlOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerTlArgs) ToGetVirtualGatewaySpecListenerTlOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerTlOutput)
}

func (i *GetVirtualGatewaySpecListenerTlArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerTlArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerTlOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerTlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTl)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerTlOutput) ToGetVirtualGatewaySpecListenerTlOutput() GetVirtualGatewaySpecListenerTlOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlOutput) ToGetVirtualGatewaySpecListenerTlOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerTl] {
	return pulumix.Output[GetVirtualGatewaySpecListenerTl]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerTlOutput) Certificates() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlCertificate, GetVirtualGatewaySpecListenerTlCertificateOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListenerTl](o, func(v GetVirtualGatewaySpecListenerTl) []GetVirtualGatewaySpecListenerTlCertificate {
		return v.Certificates
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlCertificate, GetVirtualGatewaySpecListenerTlCertificateOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecListenerTlOutput) Mode() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerTl](o, func(v GetVirtualGatewaySpecListenerTl) string { return v.Mode })
}

func (o GetVirtualGatewaySpecListenerTlOutput) Validations() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlValidation, GetVirtualGatewaySpecListenerTlValidationOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListenerTl](o, func(v GetVirtualGatewaySpecListenerTl) []GetVirtualGatewaySpecListenerTlValidation {
		return v.Validations
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlValidation, GetVirtualGatewaySpecListenerTlValidationOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecListenerTlCertificate struct {
	Acms  []GetVirtualGatewaySpecListenerTlCertificateAcm  `pulumi:"acms"`
	Files []GetVirtualGatewaySpecListenerTlCertificateFile `pulumi:"files"`
	Sds   []GetVirtualGatewaySpecListenerTlCertificateSd   `pulumi:"sds"`
}

type GetVirtualGatewaySpecListenerTlCertificateArgs struct {
	Acms  pulumix.Input[[]*GetVirtualGatewaySpecListenerTlCertificateAcmArgs]  `pulumi:"acms"`
	Files pulumix.Input[[]*GetVirtualGatewaySpecListenerTlCertificateFileArgs] `pulumi:"files"`
	Sds   pulumix.Input[[]*GetVirtualGatewaySpecListenerTlCertificateSdArgs]   `pulumi:"sds"`
}

func (GetVirtualGatewaySpecListenerTlCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlCertificate)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerTlCertificateArgs) ToGetVirtualGatewaySpecListenerTlCertificateOutput() GetVirtualGatewaySpecListenerTlCertificateOutput {
	return i.ToGetVirtualGatewaySpecListenerTlCertificateOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerTlCertificateArgs) ToGetVirtualGatewaySpecListenerTlCertificateOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerTlCertificateOutput)
}

func (i *GetVirtualGatewaySpecListenerTlCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerTlCertificateArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerTlCertificateOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerTlCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlCertificate)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerTlCertificateOutput) ToGetVirtualGatewaySpecListenerTlCertificateOutput() GetVirtualGatewaySpecListenerTlCertificateOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlCertificateOutput) ToGetVirtualGatewaySpecListenerTlCertificateOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlCertificateOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerTlCertificate] {
	return pulumix.Output[GetVirtualGatewaySpecListenerTlCertificate]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerTlCertificateOutput) Acms() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlCertificateAcm, GetVirtualGatewaySpecListenerTlCertificateAcmOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListenerTlCertificate](o, func(v GetVirtualGatewaySpecListenerTlCertificate) []GetVirtualGatewaySpecListenerTlCertificateAcm {
		return v.Acms
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlCertificateAcm, GetVirtualGatewaySpecListenerTlCertificateAcmOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecListenerTlCertificateOutput) Files() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlCertificateFile, GetVirtualGatewaySpecListenerTlCertificateFileOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListenerTlCertificate](o, func(v GetVirtualGatewaySpecListenerTlCertificate) []GetVirtualGatewaySpecListenerTlCertificateFile {
		return v.Files
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlCertificateFile, GetVirtualGatewaySpecListenerTlCertificateFileOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecListenerTlCertificateOutput) Sds() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlCertificateSd, GetVirtualGatewaySpecListenerTlCertificateSdOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListenerTlCertificate](o, func(v GetVirtualGatewaySpecListenerTlCertificate) []GetVirtualGatewaySpecListenerTlCertificateSd {
		return v.Sds
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlCertificateSd, GetVirtualGatewaySpecListenerTlCertificateSdOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecListenerTlCertificateAcm struct {
	CertificateArn string `pulumi:"certificateArn"`
}

type GetVirtualGatewaySpecListenerTlCertificateAcmArgs struct {
	CertificateArn pulumix.Input[string] `pulumi:"certificateArn"`
}

func (GetVirtualGatewaySpecListenerTlCertificateAcmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlCertificateAcm)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerTlCertificateAcmArgs) ToGetVirtualGatewaySpecListenerTlCertificateAcmOutput() GetVirtualGatewaySpecListenerTlCertificateAcmOutput {
	return i.ToGetVirtualGatewaySpecListenerTlCertificateAcmOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerTlCertificateAcmArgs) ToGetVirtualGatewaySpecListenerTlCertificateAcmOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlCertificateAcmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerTlCertificateAcmOutput)
}

func (i *GetVirtualGatewaySpecListenerTlCertificateAcmArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerTlCertificateAcmArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerTlCertificateAcmOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerTlCertificateAcmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlCertificateAcm)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerTlCertificateAcmOutput) ToGetVirtualGatewaySpecListenerTlCertificateAcmOutput() GetVirtualGatewaySpecListenerTlCertificateAcmOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlCertificateAcmOutput) ToGetVirtualGatewaySpecListenerTlCertificateAcmOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlCertificateAcmOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlCertificateAcmOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerTlCertificateAcm] {
	return pulumix.Output[GetVirtualGatewaySpecListenerTlCertificateAcm]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerTlCertificateAcmOutput) CertificateArn() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerTlCertificateAcm](o, func(v GetVirtualGatewaySpecListenerTlCertificateAcm) string { return v.CertificateArn })
}

type GetVirtualGatewaySpecListenerTlCertificateFile struct {
	CertificateChain string `pulumi:"certificateChain"`
	PrivateKey       string `pulumi:"privateKey"`
}

type GetVirtualGatewaySpecListenerTlCertificateFileArgs struct {
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
	PrivateKey       pulumix.Input[string] `pulumi:"privateKey"`
}

func (GetVirtualGatewaySpecListenerTlCertificateFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlCertificateFile)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerTlCertificateFileArgs) ToGetVirtualGatewaySpecListenerTlCertificateFileOutput() GetVirtualGatewaySpecListenerTlCertificateFileOutput {
	return i.ToGetVirtualGatewaySpecListenerTlCertificateFileOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerTlCertificateFileArgs) ToGetVirtualGatewaySpecListenerTlCertificateFileOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlCertificateFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerTlCertificateFileOutput)
}

func (i *GetVirtualGatewaySpecListenerTlCertificateFileArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerTlCertificateFileArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerTlCertificateFileOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerTlCertificateFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlCertificateFile)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerTlCertificateFileOutput) ToGetVirtualGatewaySpecListenerTlCertificateFileOutput() GetVirtualGatewaySpecListenerTlCertificateFileOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlCertificateFileOutput) ToGetVirtualGatewaySpecListenerTlCertificateFileOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlCertificateFileOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlCertificateFileOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerTlCertificateFile] {
	return pulumix.Output[GetVirtualGatewaySpecListenerTlCertificateFile]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerTlCertificateFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerTlCertificateFile](o, func(v GetVirtualGatewaySpecListenerTlCertificateFile) string { return v.CertificateChain })
}

func (o GetVirtualGatewaySpecListenerTlCertificateFileOutput) PrivateKey() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerTlCertificateFile](o, func(v GetVirtualGatewaySpecListenerTlCertificateFile) string { return v.PrivateKey })
}

type GetVirtualGatewaySpecListenerTlCertificateSd struct {
	SecretName string `pulumi:"secretName"`
}

type GetVirtualGatewaySpecListenerTlCertificateSdArgs struct {
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (GetVirtualGatewaySpecListenerTlCertificateSdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlCertificateSd)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerTlCertificateSdArgs) ToGetVirtualGatewaySpecListenerTlCertificateSdOutput() GetVirtualGatewaySpecListenerTlCertificateSdOutput {
	return i.ToGetVirtualGatewaySpecListenerTlCertificateSdOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerTlCertificateSdArgs) ToGetVirtualGatewaySpecListenerTlCertificateSdOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlCertificateSdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerTlCertificateSdOutput)
}

func (i *GetVirtualGatewaySpecListenerTlCertificateSdArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerTlCertificateSdArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerTlCertificateSdOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerTlCertificateSdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlCertificateSd)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerTlCertificateSdOutput) ToGetVirtualGatewaySpecListenerTlCertificateSdOutput() GetVirtualGatewaySpecListenerTlCertificateSdOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlCertificateSdOutput) ToGetVirtualGatewaySpecListenerTlCertificateSdOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlCertificateSdOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlCertificateSdOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerTlCertificateSd] {
	return pulumix.Output[GetVirtualGatewaySpecListenerTlCertificateSd]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerTlCertificateSdOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerTlCertificateSd](o, func(v GetVirtualGatewaySpecListenerTlCertificateSd) string { return v.SecretName })
}

type GetVirtualGatewaySpecListenerTlValidation struct {
	SubjectAlternativeNames []GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeName `pulumi:"subjectAlternativeNames"`
	Trusts                  []GetVirtualGatewaySpecListenerTlValidationTrust                  `pulumi:"trusts"`
}

type GetVirtualGatewaySpecListenerTlValidationArgs struct {
	SubjectAlternativeNames pulumix.Input[[]*GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameArgs] `pulumi:"subjectAlternativeNames"`
	Trusts                  pulumix.Input[[]*GetVirtualGatewaySpecListenerTlValidationTrustArgs]                  `pulumi:"trusts"`
}

func (GetVirtualGatewaySpecListenerTlValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlValidation)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerTlValidationArgs) ToGetVirtualGatewaySpecListenerTlValidationOutput() GetVirtualGatewaySpecListenerTlValidationOutput {
	return i.ToGetVirtualGatewaySpecListenerTlValidationOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerTlValidationArgs) ToGetVirtualGatewaySpecListenerTlValidationOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerTlValidationOutput)
}

func (i *GetVirtualGatewaySpecListenerTlValidationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerTlValidationArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerTlValidationOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerTlValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlValidation)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerTlValidationOutput) ToGetVirtualGatewaySpecListenerTlValidationOutput() GetVirtualGatewaySpecListenerTlValidationOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlValidationOutput) ToGetVirtualGatewaySpecListenerTlValidationOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlValidationOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlValidationOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerTlValidation] {
	return pulumix.Output[GetVirtualGatewaySpecListenerTlValidation]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerTlValidationOutput) SubjectAlternativeNames() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeName, GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListenerTlValidation](o, func(v GetVirtualGatewaySpecListenerTlValidation) []GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeName {
		return v.SubjectAlternativeNames
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeName, GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecListenerTlValidationOutput) Trusts() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlValidationTrust, GetVirtualGatewaySpecListenerTlValidationTrustOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListenerTlValidation](o, func(v GetVirtualGatewaySpecListenerTlValidation) []GetVirtualGatewaySpecListenerTlValidationTrust {
		return v.Trusts
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlValidationTrust, GetVirtualGatewaySpecListenerTlValidationTrustOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeName struct {
	Matches []GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatch `pulumi:"matches"`
}

type GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameArgs struct {
	Matches pulumix.Input[[]*GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchArgs] `pulumi:"matches"`
}

func (GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeName)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameArgs) ToGetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput() GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput {
	return i.ToGetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameArgs) ToGetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput)
}

func (i *GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeName)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput) ToGetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput() GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput) ToGetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeName] {
	return pulumix.Output[GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeName]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput) Matches() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatch, GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeName](o, func(v GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeName) []GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatch {
		return v.Matches
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatch, GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatch struct {
	Exacts []string `pulumi:"exacts"`
}

type GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchArgs struct {
	Exacts pulumix.Input[[]string] `pulumi:"exacts"`
}

func (GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatch)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchArgs) ToGetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput() GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput {
	return i.ToGetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchArgs) ToGetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput)
}

func (i *GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatch)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput) ToGetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput() GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput) ToGetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatch] {
	return pulumix.Output[GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput) Exacts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatch](o, func(v GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatch) []string { return v.Exacts })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecListenerTlValidationTrust struct {
	Files []GetVirtualGatewaySpecListenerTlValidationTrustFile `pulumi:"files"`
	Sds   []GetVirtualGatewaySpecListenerTlValidationTrustSd   `pulumi:"sds"`
}

type GetVirtualGatewaySpecListenerTlValidationTrustArgs struct {
	Files pulumix.Input[[]*GetVirtualGatewaySpecListenerTlValidationTrustFileArgs] `pulumi:"files"`
	Sds   pulumix.Input[[]*GetVirtualGatewaySpecListenerTlValidationTrustSdArgs]   `pulumi:"sds"`
}

func (GetVirtualGatewaySpecListenerTlValidationTrustArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlValidationTrust)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerTlValidationTrustArgs) ToGetVirtualGatewaySpecListenerTlValidationTrustOutput() GetVirtualGatewaySpecListenerTlValidationTrustOutput {
	return i.ToGetVirtualGatewaySpecListenerTlValidationTrustOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerTlValidationTrustArgs) ToGetVirtualGatewaySpecListenerTlValidationTrustOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlValidationTrustOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerTlValidationTrustOutput)
}

func (i *GetVirtualGatewaySpecListenerTlValidationTrustArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerTlValidationTrustArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerTlValidationTrustOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerTlValidationTrustOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlValidationTrust)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerTlValidationTrustOutput) ToGetVirtualGatewaySpecListenerTlValidationTrustOutput() GetVirtualGatewaySpecListenerTlValidationTrustOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlValidationTrustOutput) ToGetVirtualGatewaySpecListenerTlValidationTrustOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlValidationTrustOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlValidationTrustOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerTlValidationTrust] {
	return pulumix.Output[GetVirtualGatewaySpecListenerTlValidationTrust]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerTlValidationTrustOutput) Files() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlValidationTrustFile, GetVirtualGatewaySpecListenerTlValidationTrustFileOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListenerTlValidationTrust](o, func(v GetVirtualGatewaySpecListenerTlValidationTrust) []GetVirtualGatewaySpecListenerTlValidationTrustFile {
		return v.Files
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlValidationTrustFile, GetVirtualGatewaySpecListenerTlValidationTrustFileOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecListenerTlValidationTrustOutput) Sds() pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlValidationTrustSd, GetVirtualGatewaySpecListenerTlValidationTrustSdOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecListenerTlValidationTrust](o, func(v GetVirtualGatewaySpecListenerTlValidationTrust) []GetVirtualGatewaySpecListenerTlValidationTrustSd {
		return v.Sds
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecListenerTlValidationTrustSd, GetVirtualGatewaySpecListenerTlValidationTrustSdOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecListenerTlValidationTrustFile struct {
	CertificateChain string `pulumi:"certificateChain"`
}

type GetVirtualGatewaySpecListenerTlValidationTrustFileArgs struct {
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
}

func (GetVirtualGatewaySpecListenerTlValidationTrustFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlValidationTrustFile)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerTlValidationTrustFileArgs) ToGetVirtualGatewaySpecListenerTlValidationTrustFileOutput() GetVirtualGatewaySpecListenerTlValidationTrustFileOutput {
	return i.ToGetVirtualGatewaySpecListenerTlValidationTrustFileOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerTlValidationTrustFileArgs) ToGetVirtualGatewaySpecListenerTlValidationTrustFileOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlValidationTrustFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerTlValidationTrustFileOutput)
}

func (i *GetVirtualGatewaySpecListenerTlValidationTrustFileArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerTlValidationTrustFileArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerTlValidationTrustFileOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerTlValidationTrustFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlValidationTrustFile)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerTlValidationTrustFileOutput) ToGetVirtualGatewaySpecListenerTlValidationTrustFileOutput() GetVirtualGatewaySpecListenerTlValidationTrustFileOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlValidationTrustFileOutput) ToGetVirtualGatewaySpecListenerTlValidationTrustFileOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlValidationTrustFileOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlValidationTrustFileOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerTlValidationTrustFile] {
	return pulumix.Output[GetVirtualGatewaySpecListenerTlValidationTrustFile]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerTlValidationTrustFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerTlValidationTrustFile](o, func(v GetVirtualGatewaySpecListenerTlValidationTrustFile) string { return v.CertificateChain })
}

type GetVirtualGatewaySpecListenerTlValidationTrustSd struct {
	SecretName string `pulumi:"secretName"`
}

type GetVirtualGatewaySpecListenerTlValidationTrustSdArgs struct {
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (GetVirtualGatewaySpecListenerTlValidationTrustSdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlValidationTrustSd)(nil)).Elem()
}

func (i GetVirtualGatewaySpecListenerTlValidationTrustSdArgs) ToGetVirtualGatewaySpecListenerTlValidationTrustSdOutput() GetVirtualGatewaySpecListenerTlValidationTrustSdOutput {
	return i.ToGetVirtualGatewaySpecListenerTlValidationTrustSdOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecListenerTlValidationTrustSdArgs) ToGetVirtualGatewaySpecListenerTlValidationTrustSdOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlValidationTrustSdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecListenerTlValidationTrustSdOutput)
}

func (i *GetVirtualGatewaySpecListenerTlValidationTrustSdArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecListenerTlValidationTrustSdArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecListenerTlValidationTrustSdOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecListenerTlValidationTrustSdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecListenerTlValidationTrustSd)(nil)).Elem()
}

func (o GetVirtualGatewaySpecListenerTlValidationTrustSdOutput) ToGetVirtualGatewaySpecListenerTlValidationTrustSdOutput() GetVirtualGatewaySpecListenerTlValidationTrustSdOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlValidationTrustSdOutput) ToGetVirtualGatewaySpecListenerTlValidationTrustSdOutputWithContext(ctx context.Context) GetVirtualGatewaySpecListenerTlValidationTrustSdOutput {
	return o
}

func (o GetVirtualGatewaySpecListenerTlValidationTrustSdOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecListenerTlValidationTrustSd] {
	return pulumix.Output[GetVirtualGatewaySpecListenerTlValidationTrustSd]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecListenerTlValidationTrustSdOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecListenerTlValidationTrustSd](o, func(v GetVirtualGatewaySpecListenerTlValidationTrustSd) string { return v.SecretName })
}

type GetVirtualGatewaySpecLogging struct {
	AccessLogs []GetVirtualGatewaySpecLoggingAccessLog `pulumi:"accessLogs"`
}

type GetVirtualGatewaySpecLoggingArgs struct {
	AccessLogs pulumix.Input[[]*GetVirtualGatewaySpecLoggingAccessLogArgs] `pulumi:"accessLogs"`
}

func (GetVirtualGatewaySpecLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecLogging)(nil)).Elem()
}

func (i GetVirtualGatewaySpecLoggingArgs) ToGetVirtualGatewaySpecLoggingOutput() GetVirtualGatewaySpecLoggingOutput {
	return i.ToGetVirtualGatewaySpecLoggingOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecLoggingArgs) ToGetVirtualGatewaySpecLoggingOutputWithContext(ctx context.Context) GetVirtualGatewaySpecLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecLoggingOutput)
}

func (i *GetVirtualGatewaySpecLoggingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecLoggingArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecLoggingOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecLogging)(nil)).Elem()
}

func (o GetVirtualGatewaySpecLoggingOutput) ToGetVirtualGatewaySpecLoggingOutput() GetVirtualGatewaySpecLoggingOutput {
	return o
}

func (o GetVirtualGatewaySpecLoggingOutput) ToGetVirtualGatewaySpecLoggingOutputWithContext(ctx context.Context) GetVirtualGatewaySpecLoggingOutput {
	return o
}

func (o GetVirtualGatewaySpecLoggingOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecLogging] {
	return pulumix.Output[GetVirtualGatewaySpecLogging]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecLoggingOutput) AccessLogs() pulumix.GArrayOutput[GetVirtualGatewaySpecLoggingAccessLog, GetVirtualGatewaySpecLoggingAccessLogOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecLogging](o, func(v GetVirtualGatewaySpecLogging) []GetVirtualGatewaySpecLoggingAccessLog { return v.AccessLogs })
	return pulumix.GArrayOutput[GetVirtualGatewaySpecLoggingAccessLog, GetVirtualGatewaySpecLoggingAccessLogOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecLoggingAccessLog struct {
	Files []GetVirtualGatewaySpecLoggingAccessLogFile `pulumi:"files"`
}

type GetVirtualGatewaySpecLoggingAccessLogArgs struct {
	Files pulumix.Input[[]*GetVirtualGatewaySpecLoggingAccessLogFileArgs] `pulumi:"files"`
}

func (GetVirtualGatewaySpecLoggingAccessLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecLoggingAccessLog)(nil)).Elem()
}

func (i GetVirtualGatewaySpecLoggingAccessLogArgs) ToGetVirtualGatewaySpecLoggingAccessLogOutput() GetVirtualGatewaySpecLoggingAccessLogOutput {
	return i.ToGetVirtualGatewaySpecLoggingAccessLogOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecLoggingAccessLogArgs) ToGetVirtualGatewaySpecLoggingAccessLogOutputWithContext(ctx context.Context) GetVirtualGatewaySpecLoggingAccessLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecLoggingAccessLogOutput)
}

func (i *GetVirtualGatewaySpecLoggingAccessLogArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecLoggingAccessLogArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecLoggingAccessLogOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecLoggingAccessLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecLoggingAccessLog)(nil)).Elem()
}

func (o GetVirtualGatewaySpecLoggingAccessLogOutput) ToGetVirtualGatewaySpecLoggingAccessLogOutput() GetVirtualGatewaySpecLoggingAccessLogOutput {
	return o
}

func (o GetVirtualGatewaySpecLoggingAccessLogOutput) ToGetVirtualGatewaySpecLoggingAccessLogOutputWithContext(ctx context.Context) GetVirtualGatewaySpecLoggingAccessLogOutput {
	return o
}

func (o GetVirtualGatewaySpecLoggingAccessLogOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecLoggingAccessLog] {
	return pulumix.Output[GetVirtualGatewaySpecLoggingAccessLog]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecLoggingAccessLogOutput) Files() pulumix.GArrayOutput[GetVirtualGatewaySpecLoggingAccessLogFile, GetVirtualGatewaySpecLoggingAccessLogFileOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecLoggingAccessLog](o, func(v GetVirtualGatewaySpecLoggingAccessLog) []GetVirtualGatewaySpecLoggingAccessLogFile {
		return v.Files
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecLoggingAccessLogFile, GetVirtualGatewaySpecLoggingAccessLogFileOutput]{OutputState: value.OutputState}
}

type GetVirtualGatewaySpecLoggingAccessLogFile struct {
	Formats []GetVirtualGatewaySpecLoggingAccessLogFileFormat `pulumi:"formats"`
	Path    string                                            `pulumi:"path"`
}

type GetVirtualGatewaySpecLoggingAccessLogFileArgs struct {
	Formats pulumix.Input[[]*GetVirtualGatewaySpecLoggingAccessLogFileFormatArgs] `pulumi:"formats"`
	Path    pulumix.Input[string]                                                 `pulumi:"path"`
}

func (GetVirtualGatewaySpecLoggingAccessLogFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecLoggingAccessLogFile)(nil)).Elem()
}

func (i GetVirtualGatewaySpecLoggingAccessLogFileArgs) ToGetVirtualGatewaySpecLoggingAccessLogFileOutput() GetVirtualGatewaySpecLoggingAccessLogFileOutput {
	return i.ToGetVirtualGatewaySpecLoggingAccessLogFileOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecLoggingAccessLogFileArgs) ToGetVirtualGatewaySpecLoggingAccessLogFileOutputWithContext(ctx context.Context) GetVirtualGatewaySpecLoggingAccessLogFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecLoggingAccessLogFileOutput)
}

func (i *GetVirtualGatewaySpecLoggingAccessLogFileArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecLoggingAccessLogFileArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecLoggingAccessLogFileOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecLoggingAccessLogFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecLoggingAccessLogFile)(nil)).Elem()
}

func (o GetVirtualGatewaySpecLoggingAccessLogFileOutput) ToGetVirtualGatewaySpecLoggingAccessLogFileOutput() GetVirtualGatewaySpecLoggingAccessLogFileOutput {
	return o
}

func (o GetVirtualGatewaySpecLoggingAccessLogFileOutput) ToGetVirtualGatewaySpecLoggingAccessLogFileOutputWithContext(ctx context.Context) GetVirtualGatewaySpecLoggingAccessLogFileOutput {
	return o
}

func (o GetVirtualGatewaySpecLoggingAccessLogFileOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecLoggingAccessLogFile] {
	return pulumix.Output[GetVirtualGatewaySpecLoggingAccessLogFile]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecLoggingAccessLogFileOutput) Formats() pulumix.GArrayOutput[GetVirtualGatewaySpecLoggingAccessLogFileFormat, GetVirtualGatewaySpecLoggingAccessLogFileFormatOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecLoggingAccessLogFile](o, func(v GetVirtualGatewaySpecLoggingAccessLogFile) []GetVirtualGatewaySpecLoggingAccessLogFileFormat {
		return v.Formats
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecLoggingAccessLogFileFormat, GetVirtualGatewaySpecLoggingAccessLogFileFormatOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecLoggingAccessLogFileOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecLoggingAccessLogFile](o, func(v GetVirtualGatewaySpecLoggingAccessLogFile) string { return v.Path })
}

type GetVirtualGatewaySpecLoggingAccessLogFileFormat struct {
	Jsons []GetVirtualGatewaySpecLoggingAccessLogFileFormatJson `pulumi:"jsons"`
	Text  string                                                `pulumi:"text"`
}

type GetVirtualGatewaySpecLoggingAccessLogFileFormatArgs struct {
	Jsons pulumix.Input[[]*GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonArgs] `pulumi:"jsons"`
	Text  pulumix.Input[string]                                                     `pulumi:"text"`
}

func (GetVirtualGatewaySpecLoggingAccessLogFileFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecLoggingAccessLogFileFormat)(nil)).Elem()
}

func (i GetVirtualGatewaySpecLoggingAccessLogFileFormatArgs) ToGetVirtualGatewaySpecLoggingAccessLogFileFormatOutput() GetVirtualGatewaySpecLoggingAccessLogFileFormatOutput {
	return i.ToGetVirtualGatewaySpecLoggingAccessLogFileFormatOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecLoggingAccessLogFileFormatArgs) ToGetVirtualGatewaySpecLoggingAccessLogFileFormatOutputWithContext(ctx context.Context) GetVirtualGatewaySpecLoggingAccessLogFileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecLoggingAccessLogFileFormatOutput)
}

func (i *GetVirtualGatewaySpecLoggingAccessLogFileFormatArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecLoggingAccessLogFileFormatArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecLoggingAccessLogFileFormatOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecLoggingAccessLogFileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecLoggingAccessLogFileFormat)(nil)).Elem()
}

func (o GetVirtualGatewaySpecLoggingAccessLogFileFormatOutput) ToGetVirtualGatewaySpecLoggingAccessLogFileFormatOutput() GetVirtualGatewaySpecLoggingAccessLogFileFormatOutput {
	return o
}

func (o GetVirtualGatewaySpecLoggingAccessLogFileFormatOutput) ToGetVirtualGatewaySpecLoggingAccessLogFileFormatOutputWithContext(ctx context.Context) GetVirtualGatewaySpecLoggingAccessLogFileFormatOutput {
	return o
}

func (o GetVirtualGatewaySpecLoggingAccessLogFileFormatOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecLoggingAccessLogFileFormat] {
	return pulumix.Output[GetVirtualGatewaySpecLoggingAccessLogFileFormat]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecLoggingAccessLogFileFormatOutput) Jsons() pulumix.GArrayOutput[GetVirtualGatewaySpecLoggingAccessLogFileFormatJson, GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput] {
	value := pulumix.Apply[GetVirtualGatewaySpecLoggingAccessLogFileFormat](o, func(v GetVirtualGatewaySpecLoggingAccessLogFileFormat) []GetVirtualGatewaySpecLoggingAccessLogFileFormatJson {
		return v.Jsons
	})
	return pulumix.GArrayOutput[GetVirtualGatewaySpecLoggingAccessLogFileFormatJson, GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput]{OutputState: value.OutputState}
}

func (o GetVirtualGatewaySpecLoggingAccessLogFileFormatOutput) Text() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecLoggingAccessLogFileFormat](o, func(v GetVirtualGatewaySpecLoggingAccessLogFileFormat) string { return v.Text })
}

type GetVirtualGatewaySpecLoggingAccessLogFileFormatJson struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecLoggingAccessLogFileFormatJson)(nil)).Elem()
}

func (i GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonArgs) ToGetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput() GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput {
	return i.ToGetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutputWithContext(context.Background())
}

func (i GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonArgs) ToGetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutputWithContext(ctx context.Context) GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput)
}

func (i *GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonArgs] {
	return pulumix.Val(i)
}

type GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput struct{ *pulumi.OutputState }

func (GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualGatewaySpecLoggingAccessLogFileFormatJson)(nil)).Elem()
}

func (o GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput) ToGetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput() GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput {
	return o
}

func (o GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput) ToGetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutputWithContext(ctx context.Context) GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput {
	return o
}

func (o GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualGatewaySpecLoggingAccessLogFileFormatJson] {
	return pulumix.Output[GetVirtualGatewaySpecLoggingAccessLogFileFormatJson]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecLoggingAccessLogFileFormatJson](o, func(v GetVirtualGatewaySpecLoggingAccessLogFileFormatJson) string { return v.Key })
}

func (o GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualGatewaySpecLoggingAccessLogFileFormatJson](o, func(v GetVirtualGatewaySpecLoggingAccessLogFileFormatJson) string { return v.Value })
}

type GetVirtualNodeSpec struct {
	BackendDefaults    []GetVirtualNodeSpecBackendDefault   `pulumi:"backendDefaults"`
	Backends           []GetVirtualNodeSpecBackend          `pulumi:"backends"`
	Listeners          []GetVirtualNodeSpecListener         `pulumi:"listeners"`
	Loggings           []GetVirtualNodeSpecLogging          `pulumi:"loggings"`
	ServiceDiscoveries []GetVirtualNodeSpecServiceDiscovery `pulumi:"serviceDiscoveries"`
}

type GetVirtualNodeSpecArgs struct {
	BackendDefaults    pulumix.Input[[]*GetVirtualNodeSpecBackendDefaultArgs]   `pulumi:"backendDefaults"`
	Backends           pulumix.Input[[]*GetVirtualNodeSpecBackendArgs]          `pulumi:"backends"`
	Listeners          pulumix.Input[[]*GetVirtualNodeSpecListenerArgs]         `pulumi:"listeners"`
	Loggings           pulumix.Input[[]*GetVirtualNodeSpecLoggingArgs]          `pulumi:"loggings"`
	ServiceDiscoveries pulumix.Input[[]*GetVirtualNodeSpecServiceDiscoveryArgs] `pulumi:"serviceDiscoveries"`
}

func (GetVirtualNodeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpec)(nil)).Elem()
}

func (i GetVirtualNodeSpecArgs) ToGetVirtualNodeSpecOutput() GetVirtualNodeSpecOutput {
	return i.ToGetVirtualNodeSpecOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecArgs) ToGetVirtualNodeSpecOutputWithContext(ctx context.Context) GetVirtualNodeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecOutput)
}

func (i *GetVirtualNodeSpecArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpec)(nil)).Elem()
}

func (o GetVirtualNodeSpecOutput) ToGetVirtualNodeSpecOutput() GetVirtualNodeSpecOutput {
	return o
}

func (o GetVirtualNodeSpecOutput) ToGetVirtualNodeSpecOutputWithContext(ctx context.Context) GetVirtualNodeSpecOutput {
	return o
}

func (o GetVirtualNodeSpecOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpec] {
	return pulumix.Output[GetVirtualNodeSpec]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecOutput) BackendDefaults() pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefault, GetVirtualNodeSpecBackendDefaultOutput] {
	value := pulumix.Apply[GetVirtualNodeSpec](o, func(v GetVirtualNodeSpec) []GetVirtualNodeSpecBackendDefault { return v.BackendDefaults })
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefault, GetVirtualNodeSpecBackendDefaultOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecOutput) Backends() pulumix.GArrayOutput[GetVirtualNodeSpecBackend, GetVirtualNodeSpecBackendOutput] {
	value := pulumix.Apply[GetVirtualNodeSpec](o, func(v GetVirtualNodeSpec) []GetVirtualNodeSpecBackend { return v.Backends })
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackend, GetVirtualNodeSpecBackendOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecOutput) Listeners() pulumix.GArrayOutput[GetVirtualNodeSpecListener, GetVirtualNodeSpecListenerOutput] {
	value := pulumix.Apply[GetVirtualNodeSpec](o, func(v GetVirtualNodeSpec) []GetVirtualNodeSpecListener { return v.Listeners })
	return pulumix.GArrayOutput[GetVirtualNodeSpecListener, GetVirtualNodeSpecListenerOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecOutput) Loggings() pulumix.GArrayOutput[GetVirtualNodeSpecLogging, GetVirtualNodeSpecLoggingOutput] {
	value := pulumix.Apply[GetVirtualNodeSpec](o, func(v GetVirtualNodeSpec) []GetVirtualNodeSpecLogging { return v.Loggings })
	return pulumix.GArrayOutput[GetVirtualNodeSpecLogging, GetVirtualNodeSpecLoggingOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecOutput) ServiceDiscoveries() pulumix.GArrayOutput[GetVirtualNodeSpecServiceDiscovery, GetVirtualNodeSpecServiceDiscoveryOutput] {
	value := pulumix.Apply[GetVirtualNodeSpec](o, func(v GetVirtualNodeSpec) []GetVirtualNodeSpecServiceDiscovery { return v.ServiceDiscoveries })
	return pulumix.GArrayOutput[GetVirtualNodeSpecServiceDiscovery, GetVirtualNodeSpecServiceDiscoveryOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackend struct {
	VirtualServices []GetVirtualNodeSpecBackendVirtualService `pulumi:"virtualServices"`
}

type GetVirtualNodeSpecBackendArgs struct {
	VirtualServices pulumix.Input[[]*GetVirtualNodeSpecBackendVirtualServiceArgs] `pulumi:"virtualServices"`
}

func (GetVirtualNodeSpecBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackend)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendArgs) ToGetVirtualNodeSpecBackendOutput() GetVirtualNodeSpecBackendOutput {
	return i.ToGetVirtualNodeSpecBackendOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendArgs) ToGetVirtualNodeSpecBackendOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendOutput)
}

func (i *GetVirtualNodeSpecBackendArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackend)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendOutput) ToGetVirtualNodeSpecBackendOutput() GetVirtualNodeSpecBackendOutput {
	return o
}

func (o GetVirtualNodeSpecBackendOutput) ToGetVirtualNodeSpecBackendOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendOutput {
	return o
}

func (o GetVirtualNodeSpecBackendOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackend] {
	return pulumix.Output[GetVirtualNodeSpecBackend]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendOutput) VirtualServices() pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualService, GetVirtualNodeSpecBackendVirtualServiceOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackend](o, func(v GetVirtualNodeSpecBackend) []GetVirtualNodeSpecBackendVirtualService { return v.VirtualServices })
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualService, GetVirtualNodeSpecBackendVirtualServiceOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendDefault struct {
	ClientPolicies []GetVirtualNodeSpecBackendDefaultClientPolicy `pulumi:"clientPolicies"`
}

type GetVirtualNodeSpecBackendDefaultArgs struct {
	ClientPolicies pulumix.Input[[]*GetVirtualNodeSpecBackendDefaultClientPolicyArgs] `pulumi:"clientPolicies"`
}

func (GetVirtualNodeSpecBackendDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefault)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendDefaultArgs) ToGetVirtualNodeSpecBackendDefaultOutput() GetVirtualNodeSpecBackendDefaultOutput {
	return i.ToGetVirtualNodeSpecBackendDefaultOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendDefaultArgs) ToGetVirtualNodeSpecBackendDefaultOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendDefaultOutput)
}

func (i *GetVirtualNodeSpecBackendDefaultArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendDefaultArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendDefaultOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefault)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendDefaultOutput) ToGetVirtualNodeSpecBackendDefaultOutput() GetVirtualNodeSpecBackendDefaultOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultOutput) ToGetVirtualNodeSpecBackendDefaultOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendDefault] {
	return pulumix.Output[GetVirtualNodeSpecBackendDefault]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendDefaultOutput) ClientPolicies() pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicy, GetVirtualNodeSpecBackendDefaultClientPolicyOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendDefault](o, func(v GetVirtualNodeSpecBackendDefault) []GetVirtualNodeSpecBackendDefaultClientPolicy {
		return v.ClientPolicies
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicy, GetVirtualNodeSpecBackendDefaultClientPolicyOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendDefaultClientPolicy struct {
	Tls []GetVirtualNodeSpecBackendDefaultClientPolicyTl `pulumi:"tls"`
}

type GetVirtualNodeSpecBackendDefaultClientPolicyArgs struct {
	Tls pulumix.Input[[]*GetVirtualNodeSpecBackendDefaultClientPolicyTlArgs] `pulumi:"tls"`
}

func (GetVirtualNodeSpecBackendDefaultClientPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicy)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyOutput() GetVirtualNodeSpecBackendDefaultClientPolicyOutput {
	return i.ToGetVirtualNodeSpecBackendDefaultClientPolicyOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendDefaultClientPolicyOutput)
}

func (i *GetVirtualNodeSpecBackendDefaultClientPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendDefaultClientPolicyArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendDefaultClientPolicyOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendDefaultClientPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicy)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyOutput() GetVirtualNodeSpecBackendDefaultClientPolicyOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicy] {
	return pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyOutput) Tls() pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTl, GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicy](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicy) []GetVirtualNodeSpecBackendDefaultClientPolicyTl {
		return v.Tls
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTl, GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTl struct {
	Certificates []GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificate `pulumi:"certificates"`
	Enforce      bool                                                        `pulumi:"enforce"`
	Ports        []int                                                       `pulumi:"ports"`
	Validations  []GetVirtualNodeSpecBackendDefaultClientPolicyTlValidation  `pulumi:"validations"`
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlArgs struct {
	Certificates pulumix.Input[[]*GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateArgs] `pulumi:"certificates"`
	Enforce      pulumix.Input[bool]                                                             `pulumi:"enforce"`
	Ports        pulumix.Input[[]int]                                                            `pulumi:"ports"`
	Validations  pulumix.Input[[]*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationArgs]  `pulumi:"validations"`
}

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTl)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput {
	return i.ToGetVirtualNodeSpecBackendDefaultClientPolicyTlOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput)
}

func (i *GetVirtualNodeSpecBackendDefaultClientPolicyTlArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendDefaultClientPolicyTlArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTl)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTl] {
	return pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTl]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput) Certificates() pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificate, GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTl](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTl) []GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificate {
		return v.Certificates
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificate, GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput) Enforce() pulumix.Output[bool] {
	return pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTl](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTl) bool { return v.Enforce })
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput) Ports() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTl](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTl) []int { return v.Ports })
	return pulumix.ArrayOutput[int]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput) Validations() pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidation, GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTl](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTl) []GetVirtualNodeSpecBackendDefaultClientPolicyTlValidation {
		return v.Validations
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidation, GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificate struct {
	Files []GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFile `pulumi:"files"`
	Sds   []GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSd   `pulumi:"sds"`
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateArgs struct {
	Files pulumix.Input[[]*GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileArgs] `pulumi:"files"`
	Sds   pulumix.Input[[]*GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdArgs]   `pulumi:"sds"`
}

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificate)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput {
	return i.ToGetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput)
}

func (i *GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificate)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificate] {
	return pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificate]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput) Files() pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFile, GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificate](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificate) []GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFile {
		return v.Files
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFile, GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput) Sds() pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSd, GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificate](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificate) []GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSd {
		return v.Sds
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSd, GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFile struct {
	CertificateChain string `pulumi:"certificateChain"`
	PrivateKey       string `pulumi:"privateKey"`
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileArgs struct {
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
	PrivateKey       pulumix.Input[string] `pulumi:"privateKey"`
}

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFile)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput {
	return i.ToGetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput)
}

func (i *GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFile)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFile] {
	return pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFile]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFile](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFile) string {
		return v.CertificateChain
	})
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput) PrivateKey() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFile](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFile) string { return v.PrivateKey })
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSd struct {
	SecretName string `pulumi:"secretName"`
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdArgs struct {
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSd)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput {
	return i.ToGetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput)
}

func (i *GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSd)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSd] {
	return pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSd]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSd](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSd) string { return v.SecretName })
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidation struct {
	SubjectAlternativeNames []GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName `pulumi:"subjectAlternativeNames"`
	Trusts                  []GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrust                  `pulumi:"trusts"`
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationArgs struct {
	SubjectAlternativeNames pulumix.Input[[]*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameArgs] `pulumi:"subjectAlternativeNames"`
	Trusts                  pulumix.Input[[]*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustArgs]                  `pulumi:"trusts"`
}

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidation)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput {
	return i.ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput)
}

func (i *GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidation)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidation] {
	return pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidation]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput) SubjectAlternativeNames() pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName, GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidation](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTlValidation) []GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName {
		return v.SubjectAlternativeNames
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName, GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput) Trusts() pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrust, GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidation](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTlValidation) []GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrust {
		return v.Trusts
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrust, GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName struct {
	Matches []GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch `pulumi:"matches"`
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameArgs struct {
	Matches pulumix.Input[[]*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchArgs] `pulumi:"matches"`
}

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput {
	return i.ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput)
}

func (i *GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName] {
	return pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput) Matches() pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch, GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeName) []GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch {
		return v.Matches
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch, GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch struct {
	Exacts []string `pulumi:"exacts"`
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchArgs struct {
	Exacts pulumix.Input[[]string] `pulumi:"exacts"`
}

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput {
	return i.ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput)
}

func (i *GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch] {
	return pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput) Exacts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatch) []string {
		return v.Exacts
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrust struct {
	Acms  []GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcm  `pulumi:"acms"`
	Files []GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFile `pulumi:"files"`
	Sds   []GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSd   `pulumi:"sds"`
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustArgs struct {
	Acms  pulumix.Input[[]*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmArgs]  `pulumi:"acms"`
	Files pulumix.Input[[]*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileArgs] `pulumi:"files"`
	Sds   pulumix.Input[[]*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdArgs]   `pulumi:"sds"`
}

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrust)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput {
	return i.ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput)
}

func (i *GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrust)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrust] {
	return pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrust]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput) Acms() pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcm, GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrust](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrust) []GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcm {
		return v.Acms
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcm, GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput) Files() pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFile, GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrust](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrust) []GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFile {
		return v.Files
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFile, GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput) Sds() pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSd, GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrust](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrust) []GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSd {
		return v.Sds
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSd, GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcm struct {
	CertificateAuthorityArns []string `pulumi:"certificateAuthorityArns"`
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmArgs struct {
	CertificateAuthorityArns pulumix.Input[[]string] `pulumi:"certificateAuthorityArns"`
}

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcm)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput {
	return i.ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput)
}

func (i *GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcm)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcm] {
	return pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcm]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput) CertificateAuthorityArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcm](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcm) []string {
		return v.CertificateAuthorityArns
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFile struct {
	CertificateChain string `pulumi:"certificateChain"`
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileArgs struct {
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
}

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFile)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput {
	return i.ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput)
}

func (i *GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFile)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFile] {
	return pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFile]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFile](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFile) string {
		return v.CertificateChain
	})
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSd struct {
	SecretName string `pulumi:"secretName"`
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdArgs struct {
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSd)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput {
	return i.ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdArgs) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput)
}

func (i *GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSd)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput() GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput) ToGetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput {
	return o
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSd] {
	return pulumix.Output[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSd]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSd](o, func(v GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSd) string { return v.SecretName })
}

type GetVirtualNodeSpecBackendVirtualService struct {
	ClientPolicies     []GetVirtualNodeSpecBackendVirtualServiceClientPolicy `pulumi:"clientPolicies"`
	VirtualServiceName string                                                `pulumi:"virtualServiceName"`
}

type GetVirtualNodeSpecBackendVirtualServiceArgs struct {
	ClientPolicies     pulumix.Input[[]*GetVirtualNodeSpecBackendVirtualServiceClientPolicyArgs] `pulumi:"clientPolicies"`
	VirtualServiceName pulumix.Input[string]                                                     `pulumi:"virtualServiceName"`
}

func (GetVirtualNodeSpecBackendVirtualServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualService)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendVirtualServiceArgs) ToGetVirtualNodeSpecBackendVirtualServiceOutput() GetVirtualNodeSpecBackendVirtualServiceOutput {
	return i.ToGetVirtualNodeSpecBackendVirtualServiceOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendVirtualServiceArgs) ToGetVirtualNodeSpecBackendVirtualServiceOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendVirtualServiceOutput)
}

func (i *GetVirtualNodeSpecBackendVirtualServiceArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendVirtualServiceArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendVirtualServiceOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendVirtualServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualService)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendVirtualServiceOutput) ToGetVirtualNodeSpecBackendVirtualServiceOutput() GetVirtualNodeSpecBackendVirtualServiceOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceOutput) ToGetVirtualNodeSpecBackendVirtualServiceOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendVirtualService] {
	return pulumix.Output[GetVirtualNodeSpecBackendVirtualService]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendVirtualServiceOutput) ClientPolicies() pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicy, GetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendVirtualService](o, func(v GetVirtualNodeSpecBackendVirtualService) []GetVirtualNodeSpecBackendVirtualServiceClientPolicy {
		return v.ClientPolicies
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicy, GetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecBackendVirtualServiceOutput) VirtualServiceName() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecBackendVirtualService](o, func(v GetVirtualNodeSpecBackendVirtualService) string { return v.VirtualServiceName })
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicy struct {
	Tls []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl `pulumi:"tls"`
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyArgs struct {
	Tls pulumix.Input[[]*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlArgs] `pulumi:"tls"`
}

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicy)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput {
	return i.ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput)
}

func (i *GetVirtualNodeSpecBackendVirtualServiceClientPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendVirtualServiceClientPolicyArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicy)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicy] {
	return pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput) Tls() pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicy](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicy) []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl {
		return v.Tls
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl struct {
	Certificates []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificate `pulumi:"certificates"`
	Enforce      bool                                                               `pulumi:"enforce"`
	Ports        []int                                                              `pulumi:"ports"`
	Validations  []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidation  `pulumi:"validations"`
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlArgs struct {
	Certificates pulumix.Input[[]*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateArgs] `pulumi:"certificates"`
	Enforce      pulumix.Input[bool]                                                                    `pulumi:"enforce"`
	Ports        pulumix.Input[[]int]                                                                   `pulumi:"ports"`
	Validations  pulumix.Input[[]*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationArgs]  `pulumi:"validations"`
}

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput {
	return i.ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput)
}

func (i *GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl] {
	return pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput) Certificates() pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificate, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl) []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificate {
		return v.Certificates
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificate, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput) Enforce() pulumix.Output[bool] {
	return pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl) bool { return v.Enforce })
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput) Ports() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl) []int { return v.Ports })
	return pulumix.ArrayOutput[int]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput) Validations() pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidation, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTl) []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidation {
		return v.Validations
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidation, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificate struct {
	Files []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFile `pulumi:"files"`
	Sds   []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSd   `pulumi:"sds"`
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateArgs struct {
	Files pulumix.Input[[]*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileArgs] `pulumi:"files"`
	Sds   pulumix.Input[[]*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdArgs]   `pulumi:"sds"`
}

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificate)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput {
	return i.ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput)
}

func (i *GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificate)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificate] {
	return pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificate]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput) Files() pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFile, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificate](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificate) []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFile {
		return v.Files
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFile, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput) Sds() pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSd, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificate](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificate) []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSd {
		return v.Sds
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSd, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFile struct {
	CertificateChain string `pulumi:"certificateChain"`
	PrivateKey       string `pulumi:"privateKey"`
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileArgs struct {
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
	PrivateKey       pulumix.Input[string] `pulumi:"privateKey"`
}

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFile)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput {
	return i.ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput)
}

func (i *GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFile)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFile] {
	return pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFile]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFile](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFile) string {
		return v.CertificateChain
	})
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput) PrivateKey() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFile](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFile) string {
		return v.PrivateKey
	})
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSd struct {
	SecretName string `pulumi:"secretName"`
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdArgs struct {
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSd)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput {
	return i.ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput)
}

func (i *GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSd)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSd] {
	return pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSd]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSd](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSd) string { return v.SecretName })
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidation struct {
	SubjectAlternativeNames []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeName `pulumi:"subjectAlternativeNames"`
	Trusts                  []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrust                  `pulumi:"trusts"`
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationArgs struct {
	SubjectAlternativeNames pulumix.Input[[]*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameArgs] `pulumi:"subjectAlternativeNames"`
	Trusts                  pulumix.Input[[]*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustArgs]                  `pulumi:"trusts"`
}

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidation)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput {
	return i.ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput)
}

func (i *GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidation)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidation] {
	return pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidation]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput) SubjectAlternativeNames() pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeName, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidation](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidation) []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeName {
		return v.SubjectAlternativeNames
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeName, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput) Trusts() pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrust, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidation](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidation) []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrust {
		return v.Trusts
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrust, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeName struct {
	Matches []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatch `pulumi:"matches"`
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameArgs struct {
	Matches pulumix.Input[[]*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchArgs] `pulumi:"matches"`
}

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeName)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput {
	return i.ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput)
}

func (i *GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeName)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeName] {
	return pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeName]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput) Matches() pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatch, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeName](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeName) []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatch {
		return v.Matches
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatch, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatch struct {
	Exacts []string `pulumi:"exacts"`
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchArgs struct {
	Exacts pulumix.Input[[]string] `pulumi:"exacts"`
}

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatch)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput {
	return i.ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput)
}

func (i *GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatch)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatch] {
	return pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput) Exacts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatch](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatch) []string {
		return v.Exacts
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrust struct {
	Acms  []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcm  `pulumi:"acms"`
	Files []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFile `pulumi:"files"`
	Sds   []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSd   `pulumi:"sds"`
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustArgs struct {
	Acms  pulumix.Input[[]*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmArgs]  `pulumi:"acms"`
	Files pulumix.Input[[]*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileArgs] `pulumi:"files"`
	Sds   pulumix.Input[[]*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdArgs]   `pulumi:"sds"`
}

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrust)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput {
	return i.ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput)
}

func (i *GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrust)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrust] {
	return pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrust]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput) Acms() pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcm, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrust](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrust) []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcm {
		return v.Acms
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcm, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput) Files() pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFile, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrust](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrust) []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFile {
		return v.Files
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFile, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput) Sds() pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSd, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrust](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrust) []GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSd {
		return v.Sds
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSd, GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcm struct {
	CertificateAuthorityArns []string `pulumi:"certificateAuthorityArns"`
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmArgs struct {
	CertificateAuthorityArns pulumix.Input[[]string] `pulumi:"certificateAuthorityArns"`
}

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcm)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput {
	return i.ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput)
}

func (i *GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcm)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcm] {
	return pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcm]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput) CertificateAuthorityArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcm](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcm) []string {
		return v.CertificateAuthorityArns
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFile struct {
	CertificateChain string `pulumi:"certificateChain"`
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileArgs struct {
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
}

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFile)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput {
	return i.ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput)
}

func (i *GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFile)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFile] {
	return pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFile]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFile](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFile) string {
		return v.CertificateChain
	})
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSd struct {
	SecretName string `pulumi:"secretName"`
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdArgs struct {
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSd)(nil)).Elem()
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput {
	return i.ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdArgs) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput)
}

func (i *GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSd)(nil)).Elem()
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput() GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput) ToGetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutputWithContext(ctx context.Context) GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput {
	return o
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSd] {
	return pulumix.Output[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSd]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSd](o, func(v GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSd) string {
		return v.SecretName
	})
}

type GetVirtualNodeSpecListener struct {
	ConnectionPools   []GetVirtualNodeSpecListenerConnectionPool   `pulumi:"connectionPools"`
	HealthChecks      []GetVirtualNodeSpecListenerHealthCheck      `pulumi:"healthChecks"`
	OutlierDetections []GetVirtualNodeSpecListenerOutlierDetection `pulumi:"outlierDetections"`
	PortMappings      []GetVirtualNodeSpecListenerPortMapping      `pulumi:"portMappings"`
	Timeouts          []GetVirtualNodeSpecListenerTimeout          `pulumi:"timeouts"`
	Tls               []GetVirtualNodeSpecListenerTl               `pulumi:"tls"`
}

type GetVirtualNodeSpecListenerArgs struct {
	ConnectionPools   pulumix.Input[[]*GetVirtualNodeSpecListenerConnectionPoolArgs]   `pulumi:"connectionPools"`
	HealthChecks      pulumix.Input[[]*GetVirtualNodeSpecListenerHealthCheckArgs]      `pulumi:"healthChecks"`
	OutlierDetections pulumix.Input[[]*GetVirtualNodeSpecListenerOutlierDetectionArgs] `pulumi:"outlierDetections"`
	PortMappings      pulumix.Input[[]*GetVirtualNodeSpecListenerPortMappingArgs]      `pulumi:"portMappings"`
	Timeouts          pulumix.Input[[]*GetVirtualNodeSpecListenerTimeoutArgs]          `pulumi:"timeouts"`
	Tls               pulumix.Input[[]*GetVirtualNodeSpecListenerTlArgs]               `pulumi:"tls"`
}

func (GetVirtualNodeSpecListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListener)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerArgs) ToGetVirtualNodeSpecListenerOutput() GetVirtualNodeSpecListenerOutput {
	return i.ToGetVirtualNodeSpecListenerOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerArgs) ToGetVirtualNodeSpecListenerOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerOutput)
}

func (i *GetVirtualNodeSpecListenerArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListener)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerOutput) ToGetVirtualNodeSpecListenerOutput() GetVirtualNodeSpecListenerOutput {
	return o
}

func (o GetVirtualNodeSpecListenerOutput) ToGetVirtualNodeSpecListenerOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerOutput {
	return o
}

func (o GetVirtualNodeSpecListenerOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListener] {
	return pulumix.Output[GetVirtualNodeSpecListener]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerOutput) ConnectionPools() pulumix.GArrayOutput[GetVirtualNodeSpecListenerConnectionPool, GetVirtualNodeSpecListenerConnectionPoolOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListener](o, func(v GetVirtualNodeSpecListener) []GetVirtualNodeSpecListenerConnectionPool {
		return v.ConnectionPools
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerConnectionPool, GetVirtualNodeSpecListenerConnectionPoolOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerOutput) HealthChecks() pulumix.GArrayOutput[GetVirtualNodeSpecListenerHealthCheck, GetVirtualNodeSpecListenerHealthCheckOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListener](o, func(v GetVirtualNodeSpecListener) []GetVirtualNodeSpecListenerHealthCheck { return v.HealthChecks })
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerHealthCheck, GetVirtualNodeSpecListenerHealthCheckOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerOutput) OutlierDetections() pulumix.GArrayOutput[GetVirtualNodeSpecListenerOutlierDetection, GetVirtualNodeSpecListenerOutlierDetectionOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListener](o, func(v GetVirtualNodeSpecListener) []GetVirtualNodeSpecListenerOutlierDetection {
		return v.OutlierDetections
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerOutlierDetection, GetVirtualNodeSpecListenerOutlierDetectionOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerOutput) PortMappings() pulumix.GArrayOutput[GetVirtualNodeSpecListenerPortMapping, GetVirtualNodeSpecListenerPortMappingOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListener](o, func(v GetVirtualNodeSpecListener) []GetVirtualNodeSpecListenerPortMapping { return v.PortMappings })
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerPortMapping, GetVirtualNodeSpecListenerPortMappingOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerOutput) Timeouts() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeout, GetVirtualNodeSpecListenerTimeoutOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListener](o, func(v GetVirtualNodeSpecListener) []GetVirtualNodeSpecListenerTimeout { return v.Timeouts })
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeout, GetVirtualNodeSpecListenerTimeoutOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerOutput) Tls() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTl, GetVirtualNodeSpecListenerTlOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListener](o, func(v GetVirtualNodeSpecListener) []GetVirtualNodeSpecListenerTl { return v.Tls })
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTl, GetVirtualNodeSpecListenerTlOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecListenerConnectionPool struct {
	Grpcs  []GetVirtualNodeSpecListenerConnectionPoolGrpc  `pulumi:"grpcs"`
	Http2s []GetVirtualNodeSpecListenerConnectionPoolHttp2 `pulumi:"http2s"`
	Https  []GetVirtualNodeSpecListenerConnectionPoolHttp  `pulumi:"https"`
	Tcps   []GetVirtualNodeSpecListenerConnectionPoolTcp   `pulumi:"tcps"`
}

type GetVirtualNodeSpecListenerConnectionPoolArgs struct {
	Grpcs  pulumix.Input[[]*GetVirtualNodeSpecListenerConnectionPoolGrpcArgs]  `pulumi:"grpcs"`
	Http2s pulumix.Input[[]*GetVirtualNodeSpecListenerConnectionPoolHttp2Args] `pulumi:"http2s"`
	Https  pulumix.Input[[]*GetVirtualNodeSpecListenerConnectionPoolHttpArgs]  `pulumi:"https"`
	Tcps   pulumix.Input[[]*GetVirtualNodeSpecListenerConnectionPoolTcpArgs]   `pulumi:"tcps"`
}

func (GetVirtualNodeSpecListenerConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerConnectionPool)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerConnectionPoolArgs) ToGetVirtualNodeSpecListenerConnectionPoolOutput() GetVirtualNodeSpecListenerConnectionPoolOutput {
	return i.ToGetVirtualNodeSpecListenerConnectionPoolOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerConnectionPoolArgs) ToGetVirtualNodeSpecListenerConnectionPoolOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerConnectionPoolOutput)
}

func (i *GetVirtualNodeSpecListenerConnectionPoolArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerConnectionPoolArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerConnectionPoolOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerConnectionPool)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerConnectionPoolOutput) ToGetVirtualNodeSpecListenerConnectionPoolOutput() GetVirtualNodeSpecListenerConnectionPoolOutput {
	return o
}

func (o GetVirtualNodeSpecListenerConnectionPoolOutput) ToGetVirtualNodeSpecListenerConnectionPoolOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerConnectionPoolOutput {
	return o
}

func (o GetVirtualNodeSpecListenerConnectionPoolOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerConnectionPool] {
	return pulumix.Output[GetVirtualNodeSpecListenerConnectionPool]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerConnectionPoolOutput) Grpcs() pulumix.GArrayOutput[GetVirtualNodeSpecListenerConnectionPoolGrpc, GetVirtualNodeSpecListenerConnectionPoolGrpcOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerConnectionPool](o, func(v GetVirtualNodeSpecListenerConnectionPool) []GetVirtualNodeSpecListenerConnectionPoolGrpc {
		return v.Grpcs
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerConnectionPoolGrpc, GetVirtualNodeSpecListenerConnectionPoolGrpcOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerConnectionPoolOutput) Http2s() pulumix.GArrayOutput[GetVirtualNodeSpecListenerConnectionPoolHttp2, GetVirtualNodeSpecListenerConnectionPoolHttp2Output] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerConnectionPool](o, func(v GetVirtualNodeSpecListenerConnectionPool) []GetVirtualNodeSpecListenerConnectionPoolHttp2 {
		return v.Http2s
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerConnectionPoolHttp2, GetVirtualNodeSpecListenerConnectionPoolHttp2Output]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerConnectionPoolOutput) Https() pulumix.GArrayOutput[GetVirtualNodeSpecListenerConnectionPoolHttp, GetVirtualNodeSpecListenerConnectionPoolHttpOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerConnectionPool](o, func(v GetVirtualNodeSpecListenerConnectionPool) []GetVirtualNodeSpecListenerConnectionPoolHttp {
		return v.Https
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerConnectionPoolHttp, GetVirtualNodeSpecListenerConnectionPoolHttpOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerConnectionPoolOutput) Tcps() pulumix.GArrayOutput[GetVirtualNodeSpecListenerConnectionPoolTcp, GetVirtualNodeSpecListenerConnectionPoolTcpOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerConnectionPool](o, func(v GetVirtualNodeSpecListenerConnectionPool) []GetVirtualNodeSpecListenerConnectionPoolTcp {
		return v.Tcps
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerConnectionPoolTcp, GetVirtualNodeSpecListenerConnectionPoolTcpOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecListenerConnectionPoolGrpc struct {
	MaxRequests int `pulumi:"maxRequests"`
}

type GetVirtualNodeSpecListenerConnectionPoolGrpcArgs struct {
	MaxRequests pulumix.Input[int] `pulumi:"maxRequests"`
}

func (GetVirtualNodeSpecListenerConnectionPoolGrpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerConnectionPoolGrpc)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerConnectionPoolGrpcArgs) ToGetVirtualNodeSpecListenerConnectionPoolGrpcOutput() GetVirtualNodeSpecListenerConnectionPoolGrpcOutput {
	return i.ToGetVirtualNodeSpecListenerConnectionPoolGrpcOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerConnectionPoolGrpcArgs) ToGetVirtualNodeSpecListenerConnectionPoolGrpcOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerConnectionPoolGrpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerConnectionPoolGrpcOutput)
}

func (i *GetVirtualNodeSpecListenerConnectionPoolGrpcArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerConnectionPoolGrpcArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerConnectionPoolGrpcOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerConnectionPoolGrpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerConnectionPoolGrpc)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerConnectionPoolGrpcOutput) ToGetVirtualNodeSpecListenerConnectionPoolGrpcOutput() GetVirtualNodeSpecListenerConnectionPoolGrpcOutput {
	return o
}

func (o GetVirtualNodeSpecListenerConnectionPoolGrpcOutput) ToGetVirtualNodeSpecListenerConnectionPoolGrpcOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerConnectionPoolGrpcOutput {
	return o
}

func (o GetVirtualNodeSpecListenerConnectionPoolGrpcOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerConnectionPoolGrpc] {
	return pulumix.Output[GetVirtualNodeSpecListenerConnectionPoolGrpc]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerConnectionPoolGrpcOutput) MaxRequests() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerConnectionPoolGrpc](o, func(v GetVirtualNodeSpecListenerConnectionPoolGrpc) int { return v.MaxRequests })
}

type GetVirtualNodeSpecListenerConnectionPoolHttp2 struct {
	MaxRequests int `pulumi:"maxRequests"`
}

type GetVirtualNodeSpecListenerConnectionPoolHttp2Args struct {
	MaxRequests pulumix.Input[int] `pulumi:"maxRequests"`
}

func (GetVirtualNodeSpecListenerConnectionPoolHttp2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerConnectionPoolHttp2)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerConnectionPoolHttp2Args) ToGetVirtualNodeSpecListenerConnectionPoolHttp2Output() GetVirtualNodeSpecListenerConnectionPoolHttp2Output {
	return i.ToGetVirtualNodeSpecListenerConnectionPoolHttp2OutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerConnectionPoolHttp2Args) ToGetVirtualNodeSpecListenerConnectionPoolHttp2OutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerConnectionPoolHttp2Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerConnectionPoolHttp2Output)
}

func (i *GetVirtualNodeSpecListenerConnectionPoolHttp2Args) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerConnectionPoolHttp2Args] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerConnectionPoolHttp2Output struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerConnectionPoolHttp2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerConnectionPoolHttp2)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerConnectionPoolHttp2Output) ToGetVirtualNodeSpecListenerConnectionPoolHttp2Output() GetVirtualNodeSpecListenerConnectionPoolHttp2Output {
	return o
}

func (o GetVirtualNodeSpecListenerConnectionPoolHttp2Output) ToGetVirtualNodeSpecListenerConnectionPoolHttp2OutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerConnectionPoolHttp2Output {
	return o
}

func (o GetVirtualNodeSpecListenerConnectionPoolHttp2Output) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerConnectionPoolHttp2] {
	return pulumix.Output[GetVirtualNodeSpecListenerConnectionPoolHttp2]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerConnectionPoolHttp2Output) MaxRequests() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerConnectionPoolHttp2](o, func(v GetVirtualNodeSpecListenerConnectionPoolHttp2) int { return v.MaxRequests })
}

type GetVirtualNodeSpecListenerConnectionPoolHttp struct {
	MaxConnections     int `pulumi:"maxConnections"`
	MaxPendingRequests int `pulumi:"maxPendingRequests"`
}

type GetVirtualNodeSpecListenerConnectionPoolHttpArgs struct {
	MaxConnections     pulumix.Input[int] `pulumi:"maxConnections"`
	MaxPendingRequests pulumix.Input[int] `pulumi:"maxPendingRequests"`
}

func (GetVirtualNodeSpecListenerConnectionPoolHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerConnectionPoolHttp)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerConnectionPoolHttpArgs) ToGetVirtualNodeSpecListenerConnectionPoolHttpOutput() GetVirtualNodeSpecListenerConnectionPoolHttpOutput {
	return i.ToGetVirtualNodeSpecListenerConnectionPoolHttpOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerConnectionPoolHttpArgs) ToGetVirtualNodeSpecListenerConnectionPoolHttpOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerConnectionPoolHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerConnectionPoolHttpOutput)
}

func (i *GetVirtualNodeSpecListenerConnectionPoolHttpArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerConnectionPoolHttpArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerConnectionPoolHttpOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerConnectionPoolHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerConnectionPoolHttp)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerConnectionPoolHttpOutput) ToGetVirtualNodeSpecListenerConnectionPoolHttpOutput() GetVirtualNodeSpecListenerConnectionPoolHttpOutput {
	return o
}

func (o GetVirtualNodeSpecListenerConnectionPoolHttpOutput) ToGetVirtualNodeSpecListenerConnectionPoolHttpOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerConnectionPoolHttpOutput {
	return o
}

func (o GetVirtualNodeSpecListenerConnectionPoolHttpOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerConnectionPoolHttp] {
	return pulumix.Output[GetVirtualNodeSpecListenerConnectionPoolHttp]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerConnectionPoolHttpOutput) MaxConnections() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerConnectionPoolHttp](o, func(v GetVirtualNodeSpecListenerConnectionPoolHttp) int { return v.MaxConnections })
}

func (o GetVirtualNodeSpecListenerConnectionPoolHttpOutput) MaxPendingRequests() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerConnectionPoolHttp](o, func(v GetVirtualNodeSpecListenerConnectionPoolHttp) int { return v.MaxPendingRequests })
}

type GetVirtualNodeSpecListenerConnectionPoolTcp struct {
	MaxConnections int `pulumi:"maxConnections"`
}

type GetVirtualNodeSpecListenerConnectionPoolTcpArgs struct {
	MaxConnections pulumix.Input[int] `pulumi:"maxConnections"`
}

func (GetVirtualNodeSpecListenerConnectionPoolTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerConnectionPoolTcp)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerConnectionPoolTcpArgs) ToGetVirtualNodeSpecListenerConnectionPoolTcpOutput() GetVirtualNodeSpecListenerConnectionPoolTcpOutput {
	return i.ToGetVirtualNodeSpecListenerConnectionPoolTcpOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerConnectionPoolTcpArgs) ToGetVirtualNodeSpecListenerConnectionPoolTcpOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerConnectionPoolTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerConnectionPoolTcpOutput)
}

func (i *GetVirtualNodeSpecListenerConnectionPoolTcpArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerConnectionPoolTcpArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerConnectionPoolTcpOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerConnectionPoolTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerConnectionPoolTcp)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerConnectionPoolTcpOutput) ToGetVirtualNodeSpecListenerConnectionPoolTcpOutput() GetVirtualNodeSpecListenerConnectionPoolTcpOutput {
	return o
}

func (o GetVirtualNodeSpecListenerConnectionPoolTcpOutput) ToGetVirtualNodeSpecListenerConnectionPoolTcpOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerConnectionPoolTcpOutput {
	return o
}

func (o GetVirtualNodeSpecListenerConnectionPoolTcpOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerConnectionPoolTcp] {
	return pulumix.Output[GetVirtualNodeSpecListenerConnectionPoolTcp]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerConnectionPoolTcpOutput) MaxConnections() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerConnectionPoolTcp](o, func(v GetVirtualNodeSpecListenerConnectionPoolTcp) int { return v.MaxConnections })
}

type GetVirtualNodeSpecListenerHealthCheck struct {
	HealthyThreshold   int    `pulumi:"healthyThreshold"`
	IntervalMillis     int    `pulumi:"intervalMillis"`
	Path               string `pulumi:"path"`
	Port               int    `pulumi:"port"`
	Protocol           string `pulumi:"protocol"`
	TimeoutMillis      int    `pulumi:"timeoutMillis"`
	UnhealthyThreshold int    `pulumi:"unhealthyThreshold"`
}

type GetVirtualNodeSpecListenerHealthCheckArgs struct {
	HealthyThreshold   pulumix.Input[int]    `pulumi:"healthyThreshold"`
	IntervalMillis     pulumix.Input[int]    `pulumi:"intervalMillis"`
	Path               pulumix.Input[string] `pulumi:"path"`
	Port               pulumix.Input[int]    `pulumi:"port"`
	Protocol           pulumix.Input[string] `pulumi:"protocol"`
	TimeoutMillis      pulumix.Input[int]    `pulumi:"timeoutMillis"`
	UnhealthyThreshold pulumix.Input[int]    `pulumi:"unhealthyThreshold"`
}

func (GetVirtualNodeSpecListenerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerHealthCheck)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerHealthCheckArgs) ToGetVirtualNodeSpecListenerHealthCheckOutput() GetVirtualNodeSpecListenerHealthCheckOutput {
	return i.ToGetVirtualNodeSpecListenerHealthCheckOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerHealthCheckArgs) ToGetVirtualNodeSpecListenerHealthCheckOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerHealthCheckOutput)
}

func (i *GetVirtualNodeSpecListenerHealthCheckArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerHealthCheckArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerHealthCheckOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerHealthCheck)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerHealthCheckOutput) ToGetVirtualNodeSpecListenerHealthCheckOutput() GetVirtualNodeSpecListenerHealthCheckOutput {
	return o
}

func (o GetVirtualNodeSpecListenerHealthCheckOutput) ToGetVirtualNodeSpecListenerHealthCheckOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerHealthCheckOutput {
	return o
}

func (o GetVirtualNodeSpecListenerHealthCheckOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerHealthCheck] {
	return pulumix.Output[GetVirtualNodeSpecListenerHealthCheck]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerHealthCheckOutput) HealthyThreshold() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerHealthCheck](o, func(v GetVirtualNodeSpecListenerHealthCheck) int { return v.HealthyThreshold })
}

func (o GetVirtualNodeSpecListenerHealthCheckOutput) IntervalMillis() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerHealthCheck](o, func(v GetVirtualNodeSpecListenerHealthCheck) int { return v.IntervalMillis })
}

func (o GetVirtualNodeSpecListenerHealthCheckOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerHealthCheck](o, func(v GetVirtualNodeSpecListenerHealthCheck) string { return v.Path })
}

func (o GetVirtualNodeSpecListenerHealthCheckOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerHealthCheck](o, func(v GetVirtualNodeSpecListenerHealthCheck) int { return v.Port })
}

func (o GetVirtualNodeSpecListenerHealthCheckOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerHealthCheck](o, func(v GetVirtualNodeSpecListenerHealthCheck) string { return v.Protocol })
}

func (o GetVirtualNodeSpecListenerHealthCheckOutput) TimeoutMillis() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerHealthCheck](o, func(v GetVirtualNodeSpecListenerHealthCheck) int { return v.TimeoutMillis })
}

func (o GetVirtualNodeSpecListenerHealthCheckOutput) UnhealthyThreshold() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerHealthCheck](o, func(v GetVirtualNodeSpecListenerHealthCheck) int { return v.UnhealthyThreshold })
}

type GetVirtualNodeSpecListenerOutlierDetection struct {
	BaseEjectionDurations []GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration `pulumi:"baseEjectionDurations"`
	Intervals             []GetVirtualNodeSpecListenerOutlierDetectionInterval             `pulumi:"intervals"`
	MaxEjectionPercent    int                                                              `pulumi:"maxEjectionPercent"`
	MaxServerErrors       int                                                              `pulumi:"maxServerErrors"`
}

type GetVirtualNodeSpecListenerOutlierDetectionArgs struct {
	BaseEjectionDurations pulumix.Input[[]*GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationArgs] `pulumi:"baseEjectionDurations"`
	Intervals             pulumix.Input[[]*GetVirtualNodeSpecListenerOutlierDetectionIntervalArgs]             `pulumi:"intervals"`
	MaxEjectionPercent    pulumix.Input[int]                                                                   `pulumi:"maxEjectionPercent"`
	MaxServerErrors       pulumix.Input[int]                                                                   `pulumi:"maxServerErrors"`
}

func (GetVirtualNodeSpecListenerOutlierDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerOutlierDetection)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerOutlierDetectionArgs) ToGetVirtualNodeSpecListenerOutlierDetectionOutput() GetVirtualNodeSpecListenerOutlierDetectionOutput {
	return i.ToGetVirtualNodeSpecListenerOutlierDetectionOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerOutlierDetectionArgs) ToGetVirtualNodeSpecListenerOutlierDetectionOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerOutlierDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerOutlierDetectionOutput)
}

func (i *GetVirtualNodeSpecListenerOutlierDetectionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerOutlierDetectionArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerOutlierDetectionOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerOutlierDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerOutlierDetection)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerOutlierDetectionOutput) ToGetVirtualNodeSpecListenerOutlierDetectionOutput() GetVirtualNodeSpecListenerOutlierDetectionOutput {
	return o
}

func (o GetVirtualNodeSpecListenerOutlierDetectionOutput) ToGetVirtualNodeSpecListenerOutlierDetectionOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerOutlierDetectionOutput {
	return o
}

func (o GetVirtualNodeSpecListenerOutlierDetectionOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerOutlierDetection] {
	return pulumix.Output[GetVirtualNodeSpecListenerOutlierDetection]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerOutlierDetectionOutput) BaseEjectionDurations() pulumix.GArrayOutput[GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration, GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerOutlierDetection](o, func(v GetVirtualNodeSpecListenerOutlierDetection) []GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration {
		return v.BaseEjectionDurations
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration, GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerOutlierDetectionOutput) Intervals() pulumix.GArrayOutput[GetVirtualNodeSpecListenerOutlierDetectionInterval, GetVirtualNodeSpecListenerOutlierDetectionIntervalOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerOutlierDetection](o, func(v GetVirtualNodeSpecListenerOutlierDetection) []GetVirtualNodeSpecListenerOutlierDetectionInterval {
		return v.Intervals
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerOutlierDetectionInterval, GetVirtualNodeSpecListenerOutlierDetectionIntervalOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerOutlierDetectionOutput) MaxEjectionPercent() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerOutlierDetection](o, func(v GetVirtualNodeSpecListenerOutlierDetection) int { return v.MaxEjectionPercent })
}

func (o GetVirtualNodeSpecListenerOutlierDetectionOutput) MaxServerErrors() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerOutlierDetection](o, func(v GetVirtualNodeSpecListenerOutlierDetection) int { return v.MaxServerErrors })
}

type GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationArgs) ToGetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput() GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput {
	return i.ToGetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationArgs) ToGetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput)
}

func (i *GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput) ToGetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput() GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput {
	return o
}

func (o GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput) ToGetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput {
	return o
}

func (o GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration] {
	return pulumix.Output[GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration](o, func(v GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration) string { return v.Unit })
}

func (o GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration](o, func(v GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration) int { return v.Value })
}

type GetVirtualNodeSpecListenerOutlierDetectionInterval struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetVirtualNodeSpecListenerOutlierDetectionIntervalArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetVirtualNodeSpecListenerOutlierDetectionIntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerOutlierDetectionInterval)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerOutlierDetectionIntervalArgs) ToGetVirtualNodeSpecListenerOutlierDetectionIntervalOutput() GetVirtualNodeSpecListenerOutlierDetectionIntervalOutput {
	return i.ToGetVirtualNodeSpecListenerOutlierDetectionIntervalOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerOutlierDetectionIntervalArgs) ToGetVirtualNodeSpecListenerOutlierDetectionIntervalOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerOutlierDetectionIntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerOutlierDetectionIntervalOutput)
}

func (i *GetVirtualNodeSpecListenerOutlierDetectionIntervalArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerOutlierDetectionIntervalArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerOutlierDetectionIntervalOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerOutlierDetectionIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerOutlierDetectionInterval)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerOutlierDetectionIntervalOutput) ToGetVirtualNodeSpecListenerOutlierDetectionIntervalOutput() GetVirtualNodeSpecListenerOutlierDetectionIntervalOutput {
	return o
}

func (o GetVirtualNodeSpecListenerOutlierDetectionIntervalOutput) ToGetVirtualNodeSpecListenerOutlierDetectionIntervalOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerOutlierDetectionIntervalOutput {
	return o
}

func (o GetVirtualNodeSpecListenerOutlierDetectionIntervalOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerOutlierDetectionInterval] {
	return pulumix.Output[GetVirtualNodeSpecListenerOutlierDetectionInterval]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerOutlierDetectionIntervalOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerOutlierDetectionInterval](o, func(v GetVirtualNodeSpecListenerOutlierDetectionInterval) string { return v.Unit })
}

func (o GetVirtualNodeSpecListenerOutlierDetectionIntervalOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerOutlierDetectionInterval](o, func(v GetVirtualNodeSpecListenerOutlierDetectionInterval) int { return v.Value })
}

type GetVirtualNodeSpecListenerPortMapping struct {
	Port     int    `pulumi:"port"`
	Protocol string `pulumi:"protocol"`
}

type GetVirtualNodeSpecListenerPortMappingArgs struct {
	Port     pulumix.Input[int]    `pulumi:"port"`
	Protocol pulumix.Input[string] `pulumi:"protocol"`
}

func (GetVirtualNodeSpecListenerPortMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerPortMapping)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerPortMappingArgs) ToGetVirtualNodeSpecListenerPortMappingOutput() GetVirtualNodeSpecListenerPortMappingOutput {
	return i.ToGetVirtualNodeSpecListenerPortMappingOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerPortMappingArgs) ToGetVirtualNodeSpecListenerPortMappingOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerPortMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerPortMappingOutput)
}

func (i *GetVirtualNodeSpecListenerPortMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerPortMappingArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerPortMappingOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerPortMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerPortMapping)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerPortMappingOutput) ToGetVirtualNodeSpecListenerPortMappingOutput() GetVirtualNodeSpecListenerPortMappingOutput {
	return o
}

func (o GetVirtualNodeSpecListenerPortMappingOutput) ToGetVirtualNodeSpecListenerPortMappingOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerPortMappingOutput {
	return o
}

func (o GetVirtualNodeSpecListenerPortMappingOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerPortMapping] {
	return pulumix.Output[GetVirtualNodeSpecListenerPortMapping]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerPortMappingOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerPortMapping](o, func(v GetVirtualNodeSpecListenerPortMapping) int { return v.Port })
}

func (o GetVirtualNodeSpecListenerPortMappingOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerPortMapping](o, func(v GetVirtualNodeSpecListenerPortMapping) string { return v.Protocol })
}

type GetVirtualNodeSpecListenerTimeout struct {
	Grpcs  []GetVirtualNodeSpecListenerTimeoutGrpc  `pulumi:"grpcs"`
	Http2s []GetVirtualNodeSpecListenerTimeoutHttp2 `pulumi:"http2s"`
	Https  []GetVirtualNodeSpecListenerTimeoutHttp  `pulumi:"https"`
	Tcps   []GetVirtualNodeSpecListenerTimeoutTcp   `pulumi:"tcps"`
}

type GetVirtualNodeSpecListenerTimeoutArgs struct {
	Grpcs  pulumix.Input[[]*GetVirtualNodeSpecListenerTimeoutGrpcArgs]  `pulumi:"grpcs"`
	Http2s pulumix.Input[[]*GetVirtualNodeSpecListenerTimeoutHttp2Args] `pulumi:"http2s"`
	Https  pulumix.Input[[]*GetVirtualNodeSpecListenerTimeoutHttpArgs]  `pulumi:"https"`
	Tcps   pulumix.Input[[]*GetVirtualNodeSpecListenerTimeoutTcpArgs]   `pulumi:"tcps"`
}

func (GetVirtualNodeSpecListenerTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeout)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTimeoutArgs) ToGetVirtualNodeSpecListenerTimeoutOutput() GetVirtualNodeSpecListenerTimeoutOutput {
	return i.ToGetVirtualNodeSpecListenerTimeoutOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTimeoutArgs) ToGetVirtualNodeSpecListenerTimeoutOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTimeoutOutput)
}

func (i *GetVirtualNodeSpecListenerTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTimeoutArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTimeoutOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeout)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTimeoutOutput) ToGetVirtualNodeSpecListenerTimeoutOutput() GetVirtualNodeSpecListenerTimeoutOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutOutput) ToGetVirtualNodeSpecListenerTimeoutOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTimeout] {
	return pulumix.Output[GetVirtualNodeSpecListenerTimeout]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTimeoutOutput) Grpcs() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutGrpc, GetVirtualNodeSpecListenerTimeoutGrpcOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTimeout](o, func(v GetVirtualNodeSpecListenerTimeout) []GetVirtualNodeSpecListenerTimeoutGrpc { return v.Grpcs })
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutGrpc, GetVirtualNodeSpecListenerTimeoutGrpcOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerTimeoutOutput) Http2s() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutHttp2, GetVirtualNodeSpecListenerTimeoutHttp2Output] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTimeout](o, func(v GetVirtualNodeSpecListenerTimeout) []GetVirtualNodeSpecListenerTimeoutHttp2 { return v.Http2s })
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutHttp2, GetVirtualNodeSpecListenerTimeoutHttp2Output]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerTimeoutOutput) Https() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutHttp, GetVirtualNodeSpecListenerTimeoutHttpOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTimeout](o, func(v GetVirtualNodeSpecListenerTimeout) []GetVirtualNodeSpecListenerTimeoutHttp { return v.Https })
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutHttp, GetVirtualNodeSpecListenerTimeoutHttpOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerTimeoutOutput) Tcps() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutTcp, GetVirtualNodeSpecListenerTimeoutTcpOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTimeout](o, func(v GetVirtualNodeSpecListenerTimeout) []GetVirtualNodeSpecListenerTimeoutTcp { return v.Tcps })
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutTcp, GetVirtualNodeSpecListenerTimeoutTcpOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecListenerTimeoutGrpc struct {
	Idles       []GetVirtualNodeSpecListenerTimeoutGrpcIdle       `pulumi:"idles"`
	PerRequests []GetVirtualNodeSpecListenerTimeoutGrpcPerRequest `pulumi:"perRequests"`
}

type GetVirtualNodeSpecListenerTimeoutGrpcArgs struct {
	Idles       pulumix.Input[[]*GetVirtualNodeSpecListenerTimeoutGrpcIdleArgs]       `pulumi:"idles"`
	PerRequests pulumix.Input[[]*GetVirtualNodeSpecListenerTimeoutGrpcPerRequestArgs] `pulumi:"perRequests"`
}

func (GetVirtualNodeSpecListenerTimeoutGrpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutGrpc)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTimeoutGrpcArgs) ToGetVirtualNodeSpecListenerTimeoutGrpcOutput() GetVirtualNodeSpecListenerTimeoutGrpcOutput {
	return i.ToGetVirtualNodeSpecListenerTimeoutGrpcOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTimeoutGrpcArgs) ToGetVirtualNodeSpecListenerTimeoutGrpcOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutGrpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTimeoutGrpcOutput)
}

func (i *GetVirtualNodeSpecListenerTimeoutGrpcArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTimeoutGrpcArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTimeoutGrpcOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTimeoutGrpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutGrpc)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTimeoutGrpcOutput) ToGetVirtualNodeSpecListenerTimeoutGrpcOutput() GetVirtualNodeSpecListenerTimeoutGrpcOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutGrpcOutput) ToGetVirtualNodeSpecListenerTimeoutGrpcOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutGrpcOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutGrpcOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTimeoutGrpc] {
	return pulumix.Output[GetVirtualNodeSpecListenerTimeoutGrpc]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTimeoutGrpcOutput) Idles() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutGrpcIdle, GetVirtualNodeSpecListenerTimeoutGrpcIdleOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTimeoutGrpc](o, func(v GetVirtualNodeSpecListenerTimeoutGrpc) []GetVirtualNodeSpecListenerTimeoutGrpcIdle {
		return v.Idles
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutGrpcIdle, GetVirtualNodeSpecListenerTimeoutGrpcIdleOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerTimeoutGrpcOutput) PerRequests() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutGrpcPerRequest, GetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTimeoutGrpc](o, func(v GetVirtualNodeSpecListenerTimeoutGrpc) []GetVirtualNodeSpecListenerTimeoutGrpcPerRequest {
		return v.PerRequests
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutGrpcPerRequest, GetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecListenerTimeoutGrpcIdle struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetVirtualNodeSpecListenerTimeoutGrpcIdleArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetVirtualNodeSpecListenerTimeoutGrpcIdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutGrpcIdle)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTimeoutGrpcIdleArgs) ToGetVirtualNodeSpecListenerTimeoutGrpcIdleOutput() GetVirtualNodeSpecListenerTimeoutGrpcIdleOutput {
	return i.ToGetVirtualNodeSpecListenerTimeoutGrpcIdleOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTimeoutGrpcIdleArgs) ToGetVirtualNodeSpecListenerTimeoutGrpcIdleOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutGrpcIdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTimeoutGrpcIdleOutput)
}

func (i *GetVirtualNodeSpecListenerTimeoutGrpcIdleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTimeoutGrpcIdleArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTimeoutGrpcIdleOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTimeoutGrpcIdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutGrpcIdle)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTimeoutGrpcIdleOutput) ToGetVirtualNodeSpecListenerTimeoutGrpcIdleOutput() GetVirtualNodeSpecListenerTimeoutGrpcIdleOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutGrpcIdleOutput) ToGetVirtualNodeSpecListenerTimeoutGrpcIdleOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutGrpcIdleOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutGrpcIdleOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTimeoutGrpcIdle] {
	return pulumix.Output[GetVirtualNodeSpecListenerTimeoutGrpcIdle]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTimeoutGrpcIdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTimeoutGrpcIdle](o, func(v GetVirtualNodeSpecListenerTimeoutGrpcIdle) string { return v.Unit })
}

func (o GetVirtualNodeSpecListenerTimeoutGrpcIdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTimeoutGrpcIdle](o, func(v GetVirtualNodeSpecListenerTimeoutGrpcIdle) int { return v.Value })
}

type GetVirtualNodeSpecListenerTimeoutGrpcPerRequest struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetVirtualNodeSpecListenerTimeoutGrpcPerRequestArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetVirtualNodeSpecListenerTimeoutGrpcPerRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutGrpcPerRequest)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTimeoutGrpcPerRequestArgs) ToGetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput() GetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput {
	return i.ToGetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTimeoutGrpcPerRequestArgs) ToGetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput)
}

func (i *GetVirtualNodeSpecListenerTimeoutGrpcPerRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTimeoutGrpcPerRequestArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutGrpcPerRequest)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput) ToGetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput() GetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput) ToGetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTimeoutGrpcPerRequest] {
	return pulumix.Output[GetVirtualNodeSpecListenerTimeoutGrpcPerRequest]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTimeoutGrpcPerRequest](o, func(v GetVirtualNodeSpecListenerTimeoutGrpcPerRequest) string { return v.Unit })
}

func (o GetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTimeoutGrpcPerRequest](o, func(v GetVirtualNodeSpecListenerTimeoutGrpcPerRequest) int { return v.Value })
}

type GetVirtualNodeSpecListenerTimeoutHttp2 struct {
	Idles       []GetVirtualNodeSpecListenerTimeoutHttp2Idle       `pulumi:"idles"`
	PerRequests []GetVirtualNodeSpecListenerTimeoutHttp2PerRequest `pulumi:"perRequests"`
}

type GetVirtualNodeSpecListenerTimeoutHttp2Args struct {
	Idles       pulumix.Input[[]*GetVirtualNodeSpecListenerTimeoutHttp2IdleArgs]       `pulumi:"idles"`
	PerRequests pulumix.Input[[]*GetVirtualNodeSpecListenerTimeoutHttp2PerRequestArgs] `pulumi:"perRequests"`
}

func (GetVirtualNodeSpecListenerTimeoutHttp2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutHttp2)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTimeoutHttp2Args) ToGetVirtualNodeSpecListenerTimeoutHttp2Output() GetVirtualNodeSpecListenerTimeoutHttp2Output {
	return i.ToGetVirtualNodeSpecListenerTimeoutHttp2OutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTimeoutHttp2Args) ToGetVirtualNodeSpecListenerTimeoutHttp2OutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutHttp2Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTimeoutHttp2Output)
}

func (i *GetVirtualNodeSpecListenerTimeoutHttp2Args) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTimeoutHttp2Args] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTimeoutHttp2Output struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTimeoutHttp2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutHttp2)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTimeoutHttp2Output) ToGetVirtualNodeSpecListenerTimeoutHttp2Output() GetVirtualNodeSpecListenerTimeoutHttp2Output {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutHttp2Output) ToGetVirtualNodeSpecListenerTimeoutHttp2OutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutHttp2Output {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutHttp2Output) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTimeoutHttp2] {
	return pulumix.Output[GetVirtualNodeSpecListenerTimeoutHttp2]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTimeoutHttp2Output) Idles() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutHttp2Idle, GetVirtualNodeSpecListenerTimeoutHttp2IdleOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTimeoutHttp2](o, func(v GetVirtualNodeSpecListenerTimeoutHttp2) []GetVirtualNodeSpecListenerTimeoutHttp2Idle {
		return v.Idles
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutHttp2Idle, GetVirtualNodeSpecListenerTimeoutHttp2IdleOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerTimeoutHttp2Output) PerRequests() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutHttp2PerRequest, GetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTimeoutHttp2](o, func(v GetVirtualNodeSpecListenerTimeoutHttp2) []GetVirtualNodeSpecListenerTimeoutHttp2PerRequest {
		return v.PerRequests
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutHttp2PerRequest, GetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecListenerTimeoutHttp2Idle struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetVirtualNodeSpecListenerTimeoutHttp2IdleArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetVirtualNodeSpecListenerTimeoutHttp2IdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutHttp2Idle)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTimeoutHttp2IdleArgs) ToGetVirtualNodeSpecListenerTimeoutHttp2IdleOutput() GetVirtualNodeSpecListenerTimeoutHttp2IdleOutput {
	return i.ToGetVirtualNodeSpecListenerTimeoutHttp2IdleOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTimeoutHttp2IdleArgs) ToGetVirtualNodeSpecListenerTimeoutHttp2IdleOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutHttp2IdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTimeoutHttp2IdleOutput)
}

func (i *GetVirtualNodeSpecListenerTimeoutHttp2IdleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTimeoutHttp2IdleArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTimeoutHttp2IdleOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTimeoutHttp2IdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutHttp2Idle)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTimeoutHttp2IdleOutput) ToGetVirtualNodeSpecListenerTimeoutHttp2IdleOutput() GetVirtualNodeSpecListenerTimeoutHttp2IdleOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutHttp2IdleOutput) ToGetVirtualNodeSpecListenerTimeoutHttp2IdleOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutHttp2IdleOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutHttp2IdleOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTimeoutHttp2Idle] {
	return pulumix.Output[GetVirtualNodeSpecListenerTimeoutHttp2Idle]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTimeoutHttp2IdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTimeoutHttp2Idle](o, func(v GetVirtualNodeSpecListenerTimeoutHttp2Idle) string { return v.Unit })
}

func (o GetVirtualNodeSpecListenerTimeoutHttp2IdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTimeoutHttp2Idle](o, func(v GetVirtualNodeSpecListenerTimeoutHttp2Idle) int { return v.Value })
}

type GetVirtualNodeSpecListenerTimeoutHttp2PerRequest struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetVirtualNodeSpecListenerTimeoutHttp2PerRequestArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetVirtualNodeSpecListenerTimeoutHttp2PerRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutHttp2PerRequest)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTimeoutHttp2PerRequestArgs) ToGetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput() GetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput {
	return i.ToGetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTimeoutHttp2PerRequestArgs) ToGetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput)
}

func (i *GetVirtualNodeSpecListenerTimeoutHttp2PerRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTimeoutHttp2PerRequestArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutHttp2PerRequest)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput) ToGetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput() GetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput) ToGetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTimeoutHttp2PerRequest] {
	return pulumix.Output[GetVirtualNodeSpecListenerTimeoutHttp2PerRequest]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTimeoutHttp2PerRequest](o, func(v GetVirtualNodeSpecListenerTimeoutHttp2PerRequest) string { return v.Unit })
}

func (o GetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTimeoutHttp2PerRequest](o, func(v GetVirtualNodeSpecListenerTimeoutHttp2PerRequest) int { return v.Value })
}

type GetVirtualNodeSpecListenerTimeoutHttp struct {
	Idles       []GetVirtualNodeSpecListenerTimeoutHttpIdle       `pulumi:"idles"`
	PerRequests []GetVirtualNodeSpecListenerTimeoutHttpPerRequest `pulumi:"perRequests"`
}

type GetVirtualNodeSpecListenerTimeoutHttpArgs struct {
	Idles       pulumix.Input[[]*GetVirtualNodeSpecListenerTimeoutHttpIdleArgs]       `pulumi:"idles"`
	PerRequests pulumix.Input[[]*GetVirtualNodeSpecListenerTimeoutHttpPerRequestArgs] `pulumi:"perRequests"`
}

func (GetVirtualNodeSpecListenerTimeoutHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutHttp)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTimeoutHttpArgs) ToGetVirtualNodeSpecListenerTimeoutHttpOutput() GetVirtualNodeSpecListenerTimeoutHttpOutput {
	return i.ToGetVirtualNodeSpecListenerTimeoutHttpOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTimeoutHttpArgs) ToGetVirtualNodeSpecListenerTimeoutHttpOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTimeoutHttpOutput)
}

func (i *GetVirtualNodeSpecListenerTimeoutHttpArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTimeoutHttpArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTimeoutHttpOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTimeoutHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutHttp)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTimeoutHttpOutput) ToGetVirtualNodeSpecListenerTimeoutHttpOutput() GetVirtualNodeSpecListenerTimeoutHttpOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutHttpOutput) ToGetVirtualNodeSpecListenerTimeoutHttpOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutHttpOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutHttpOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTimeoutHttp] {
	return pulumix.Output[GetVirtualNodeSpecListenerTimeoutHttp]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTimeoutHttpOutput) Idles() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutHttpIdle, GetVirtualNodeSpecListenerTimeoutHttpIdleOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTimeoutHttp](o, func(v GetVirtualNodeSpecListenerTimeoutHttp) []GetVirtualNodeSpecListenerTimeoutHttpIdle {
		return v.Idles
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutHttpIdle, GetVirtualNodeSpecListenerTimeoutHttpIdleOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerTimeoutHttpOutput) PerRequests() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutHttpPerRequest, GetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTimeoutHttp](o, func(v GetVirtualNodeSpecListenerTimeoutHttp) []GetVirtualNodeSpecListenerTimeoutHttpPerRequest {
		return v.PerRequests
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutHttpPerRequest, GetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecListenerTimeoutHttpIdle struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetVirtualNodeSpecListenerTimeoutHttpIdleArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetVirtualNodeSpecListenerTimeoutHttpIdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutHttpIdle)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTimeoutHttpIdleArgs) ToGetVirtualNodeSpecListenerTimeoutHttpIdleOutput() GetVirtualNodeSpecListenerTimeoutHttpIdleOutput {
	return i.ToGetVirtualNodeSpecListenerTimeoutHttpIdleOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTimeoutHttpIdleArgs) ToGetVirtualNodeSpecListenerTimeoutHttpIdleOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutHttpIdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTimeoutHttpIdleOutput)
}

func (i *GetVirtualNodeSpecListenerTimeoutHttpIdleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTimeoutHttpIdleArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTimeoutHttpIdleOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTimeoutHttpIdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutHttpIdle)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTimeoutHttpIdleOutput) ToGetVirtualNodeSpecListenerTimeoutHttpIdleOutput() GetVirtualNodeSpecListenerTimeoutHttpIdleOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutHttpIdleOutput) ToGetVirtualNodeSpecListenerTimeoutHttpIdleOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutHttpIdleOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutHttpIdleOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTimeoutHttpIdle] {
	return pulumix.Output[GetVirtualNodeSpecListenerTimeoutHttpIdle]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTimeoutHttpIdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTimeoutHttpIdle](o, func(v GetVirtualNodeSpecListenerTimeoutHttpIdle) string { return v.Unit })
}

func (o GetVirtualNodeSpecListenerTimeoutHttpIdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTimeoutHttpIdle](o, func(v GetVirtualNodeSpecListenerTimeoutHttpIdle) int { return v.Value })
}

type GetVirtualNodeSpecListenerTimeoutHttpPerRequest struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetVirtualNodeSpecListenerTimeoutHttpPerRequestArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetVirtualNodeSpecListenerTimeoutHttpPerRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutHttpPerRequest)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTimeoutHttpPerRequestArgs) ToGetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput() GetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput {
	return i.ToGetVirtualNodeSpecListenerTimeoutHttpPerRequestOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTimeoutHttpPerRequestArgs) ToGetVirtualNodeSpecListenerTimeoutHttpPerRequestOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput)
}

func (i *GetVirtualNodeSpecListenerTimeoutHttpPerRequestArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTimeoutHttpPerRequestArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutHttpPerRequest)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput) ToGetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput() GetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput) ToGetVirtualNodeSpecListenerTimeoutHttpPerRequestOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTimeoutHttpPerRequest] {
	return pulumix.Output[GetVirtualNodeSpecListenerTimeoutHttpPerRequest]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTimeoutHttpPerRequest](o, func(v GetVirtualNodeSpecListenerTimeoutHttpPerRequest) string { return v.Unit })
}

func (o GetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTimeoutHttpPerRequest](o, func(v GetVirtualNodeSpecListenerTimeoutHttpPerRequest) int { return v.Value })
}

type GetVirtualNodeSpecListenerTimeoutTcp struct {
	Idles []GetVirtualNodeSpecListenerTimeoutTcpIdle `pulumi:"idles"`
}

type GetVirtualNodeSpecListenerTimeoutTcpArgs struct {
	Idles pulumix.Input[[]*GetVirtualNodeSpecListenerTimeoutTcpIdleArgs] `pulumi:"idles"`
}

func (GetVirtualNodeSpecListenerTimeoutTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutTcp)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTimeoutTcpArgs) ToGetVirtualNodeSpecListenerTimeoutTcpOutput() GetVirtualNodeSpecListenerTimeoutTcpOutput {
	return i.ToGetVirtualNodeSpecListenerTimeoutTcpOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTimeoutTcpArgs) ToGetVirtualNodeSpecListenerTimeoutTcpOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTimeoutTcpOutput)
}

func (i *GetVirtualNodeSpecListenerTimeoutTcpArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTimeoutTcpArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTimeoutTcpOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTimeoutTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutTcp)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTimeoutTcpOutput) ToGetVirtualNodeSpecListenerTimeoutTcpOutput() GetVirtualNodeSpecListenerTimeoutTcpOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutTcpOutput) ToGetVirtualNodeSpecListenerTimeoutTcpOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutTcpOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutTcpOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTimeoutTcp] {
	return pulumix.Output[GetVirtualNodeSpecListenerTimeoutTcp]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTimeoutTcpOutput) Idles() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutTcpIdle, GetVirtualNodeSpecListenerTimeoutTcpIdleOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTimeoutTcp](o, func(v GetVirtualNodeSpecListenerTimeoutTcp) []GetVirtualNodeSpecListenerTimeoutTcpIdle {
		return v.Idles
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTimeoutTcpIdle, GetVirtualNodeSpecListenerTimeoutTcpIdleOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecListenerTimeoutTcpIdle struct {
	Unit  string `pulumi:"unit"`
	Value int    `pulumi:"value"`
}

type GetVirtualNodeSpecListenerTimeoutTcpIdleArgs struct {
	Unit  pulumix.Input[string] `pulumi:"unit"`
	Value pulumix.Input[int]    `pulumi:"value"`
}

func (GetVirtualNodeSpecListenerTimeoutTcpIdleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutTcpIdle)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTimeoutTcpIdleArgs) ToGetVirtualNodeSpecListenerTimeoutTcpIdleOutput() GetVirtualNodeSpecListenerTimeoutTcpIdleOutput {
	return i.ToGetVirtualNodeSpecListenerTimeoutTcpIdleOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTimeoutTcpIdleArgs) ToGetVirtualNodeSpecListenerTimeoutTcpIdleOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutTcpIdleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTimeoutTcpIdleOutput)
}

func (i *GetVirtualNodeSpecListenerTimeoutTcpIdleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTimeoutTcpIdleArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTimeoutTcpIdleOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTimeoutTcpIdleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTimeoutTcpIdle)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTimeoutTcpIdleOutput) ToGetVirtualNodeSpecListenerTimeoutTcpIdleOutput() GetVirtualNodeSpecListenerTimeoutTcpIdleOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutTcpIdleOutput) ToGetVirtualNodeSpecListenerTimeoutTcpIdleOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTimeoutTcpIdleOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTimeoutTcpIdleOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTimeoutTcpIdle] {
	return pulumix.Output[GetVirtualNodeSpecListenerTimeoutTcpIdle]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTimeoutTcpIdleOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTimeoutTcpIdle](o, func(v GetVirtualNodeSpecListenerTimeoutTcpIdle) string { return v.Unit })
}

func (o GetVirtualNodeSpecListenerTimeoutTcpIdleOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTimeoutTcpIdle](o, func(v GetVirtualNodeSpecListenerTimeoutTcpIdle) int { return v.Value })
}

type GetVirtualNodeSpecListenerTl struct {
	Certificates []GetVirtualNodeSpecListenerTlCertificate `pulumi:"certificates"`
	Mode         string                                    `pulumi:"mode"`
	Validations  []GetVirtualNodeSpecListenerTlValidation  `pulumi:"validations"`
}

type GetVirtualNodeSpecListenerTlArgs struct {
	Certificates pulumix.Input[[]*GetVirtualNodeSpecListenerTlCertificateArgs] `pulumi:"certificates"`
	Mode         pulumix.Input[string]                                         `pulumi:"mode"`
	Validations  pulumix.Input[[]*GetVirtualNodeSpecListenerTlValidationArgs]  `pulumi:"validations"`
}

func (GetVirtualNodeSpecListenerTlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTl)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTlArgs) ToGetVirtualNodeSpecListenerTlOutput() GetVirtualNodeSpecListenerTlOutput {
	return i.ToGetVirtualNodeSpecListenerTlOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTlArgs) ToGetVirtualNodeSpecListenerTlOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTlOutput)
}

func (i *GetVirtualNodeSpecListenerTlArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTlArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTlOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTl)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTlOutput) ToGetVirtualNodeSpecListenerTlOutput() GetVirtualNodeSpecListenerTlOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlOutput) ToGetVirtualNodeSpecListenerTlOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTl] {
	return pulumix.Output[GetVirtualNodeSpecListenerTl]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTlOutput) Certificates() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlCertificate, GetVirtualNodeSpecListenerTlCertificateOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTl](o, func(v GetVirtualNodeSpecListenerTl) []GetVirtualNodeSpecListenerTlCertificate { return v.Certificates })
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlCertificate, GetVirtualNodeSpecListenerTlCertificateOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerTlOutput) Mode() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTl](o, func(v GetVirtualNodeSpecListenerTl) string { return v.Mode })
}

func (o GetVirtualNodeSpecListenerTlOutput) Validations() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlValidation, GetVirtualNodeSpecListenerTlValidationOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTl](o, func(v GetVirtualNodeSpecListenerTl) []GetVirtualNodeSpecListenerTlValidation { return v.Validations })
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlValidation, GetVirtualNodeSpecListenerTlValidationOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecListenerTlCertificate struct {
	Acms  []GetVirtualNodeSpecListenerTlCertificateAcm  `pulumi:"acms"`
	Files []GetVirtualNodeSpecListenerTlCertificateFile `pulumi:"files"`
	Sds   []GetVirtualNodeSpecListenerTlCertificateSd   `pulumi:"sds"`
}

type GetVirtualNodeSpecListenerTlCertificateArgs struct {
	Acms  pulumix.Input[[]*GetVirtualNodeSpecListenerTlCertificateAcmArgs]  `pulumi:"acms"`
	Files pulumix.Input[[]*GetVirtualNodeSpecListenerTlCertificateFileArgs] `pulumi:"files"`
	Sds   pulumix.Input[[]*GetVirtualNodeSpecListenerTlCertificateSdArgs]   `pulumi:"sds"`
}

func (GetVirtualNodeSpecListenerTlCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlCertificate)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTlCertificateArgs) ToGetVirtualNodeSpecListenerTlCertificateOutput() GetVirtualNodeSpecListenerTlCertificateOutput {
	return i.ToGetVirtualNodeSpecListenerTlCertificateOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTlCertificateArgs) ToGetVirtualNodeSpecListenerTlCertificateOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTlCertificateOutput)
}

func (i *GetVirtualNodeSpecListenerTlCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTlCertificateArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTlCertificateOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTlCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlCertificate)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTlCertificateOutput) ToGetVirtualNodeSpecListenerTlCertificateOutput() GetVirtualNodeSpecListenerTlCertificateOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlCertificateOutput) ToGetVirtualNodeSpecListenerTlCertificateOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlCertificateOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTlCertificate] {
	return pulumix.Output[GetVirtualNodeSpecListenerTlCertificate]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTlCertificateOutput) Acms() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlCertificateAcm, GetVirtualNodeSpecListenerTlCertificateAcmOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTlCertificate](o, func(v GetVirtualNodeSpecListenerTlCertificate) []GetVirtualNodeSpecListenerTlCertificateAcm {
		return v.Acms
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlCertificateAcm, GetVirtualNodeSpecListenerTlCertificateAcmOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerTlCertificateOutput) Files() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlCertificateFile, GetVirtualNodeSpecListenerTlCertificateFileOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTlCertificate](o, func(v GetVirtualNodeSpecListenerTlCertificate) []GetVirtualNodeSpecListenerTlCertificateFile {
		return v.Files
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlCertificateFile, GetVirtualNodeSpecListenerTlCertificateFileOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerTlCertificateOutput) Sds() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlCertificateSd, GetVirtualNodeSpecListenerTlCertificateSdOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTlCertificate](o, func(v GetVirtualNodeSpecListenerTlCertificate) []GetVirtualNodeSpecListenerTlCertificateSd {
		return v.Sds
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlCertificateSd, GetVirtualNodeSpecListenerTlCertificateSdOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecListenerTlCertificateAcm struct {
	CertificateArn string `pulumi:"certificateArn"`
}

type GetVirtualNodeSpecListenerTlCertificateAcmArgs struct {
	CertificateArn pulumix.Input[string] `pulumi:"certificateArn"`
}

func (GetVirtualNodeSpecListenerTlCertificateAcmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlCertificateAcm)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTlCertificateAcmArgs) ToGetVirtualNodeSpecListenerTlCertificateAcmOutput() GetVirtualNodeSpecListenerTlCertificateAcmOutput {
	return i.ToGetVirtualNodeSpecListenerTlCertificateAcmOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTlCertificateAcmArgs) ToGetVirtualNodeSpecListenerTlCertificateAcmOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlCertificateAcmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTlCertificateAcmOutput)
}

func (i *GetVirtualNodeSpecListenerTlCertificateAcmArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTlCertificateAcmArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTlCertificateAcmOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTlCertificateAcmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlCertificateAcm)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTlCertificateAcmOutput) ToGetVirtualNodeSpecListenerTlCertificateAcmOutput() GetVirtualNodeSpecListenerTlCertificateAcmOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlCertificateAcmOutput) ToGetVirtualNodeSpecListenerTlCertificateAcmOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlCertificateAcmOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlCertificateAcmOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTlCertificateAcm] {
	return pulumix.Output[GetVirtualNodeSpecListenerTlCertificateAcm]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTlCertificateAcmOutput) CertificateArn() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTlCertificateAcm](o, func(v GetVirtualNodeSpecListenerTlCertificateAcm) string { return v.CertificateArn })
}

type GetVirtualNodeSpecListenerTlCertificateFile struct {
	CertificateChain string `pulumi:"certificateChain"`
	PrivateKey       string `pulumi:"privateKey"`
}

type GetVirtualNodeSpecListenerTlCertificateFileArgs struct {
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
	PrivateKey       pulumix.Input[string] `pulumi:"privateKey"`
}

func (GetVirtualNodeSpecListenerTlCertificateFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlCertificateFile)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTlCertificateFileArgs) ToGetVirtualNodeSpecListenerTlCertificateFileOutput() GetVirtualNodeSpecListenerTlCertificateFileOutput {
	return i.ToGetVirtualNodeSpecListenerTlCertificateFileOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTlCertificateFileArgs) ToGetVirtualNodeSpecListenerTlCertificateFileOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlCertificateFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTlCertificateFileOutput)
}

func (i *GetVirtualNodeSpecListenerTlCertificateFileArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTlCertificateFileArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTlCertificateFileOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTlCertificateFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlCertificateFile)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTlCertificateFileOutput) ToGetVirtualNodeSpecListenerTlCertificateFileOutput() GetVirtualNodeSpecListenerTlCertificateFileOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlCertificateFileOutput) ToGetVirtualNodeSpecListenerTlCertificateFileOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlCertificateFileOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlCertificateFileOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTlCertificateFile] {
	return pulumix.Output[GetVirtualNodeSpecListenerTlCertificateFile]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTlCertificateFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTlCertificateFile](o, func(v GetVirtualNodeSpecListenerTlCertificateFile) string { return v.CertificateChain })
}

func (o GetVirtualNodeSpecListenerTlCertificateFileOutput) PrivateKey() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTlCertificateFile](o, func(v GetVirtualNodeSpecListenerTlCertificateFile) string { return v.PrivateKey })
}

type GetVirtualNodeSpecListenerTlCertificateSd struct {
	SecretName string `pulumi:"secretName"`
}

type GetVirtualNodeSpecListenerTlCertificateSdArgs struct {
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (GetVirtualNodeSpecListenerTlCertificateSdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlCertificateSd)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTlCertificateSdArgs) ToGetVirtualNodeSpecListenerTlCertificateSdOutput() GetVirtualNodeSpecListenerTlCertificateSdOutput {
	return i.ToGetVirtualNodeSpecListenerTlCertificateSdOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTlCertificateSdArgs) ToGetVirtualNodeSpecListenerTlCertificateSdOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlCertificateSdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTlCertificateSdOutput)
}

func (i *GetVirtualNodeSpecListenerTlCertificateSdArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTlCertificateSdArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTlCertificateSdOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTlCertificateSdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlCertificateSd)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTlCertificateSdOutput) ToGetVirtualNodeSpecListenerTlCertificateSdOutput() GetVirtualNodeSpecListenerTlCertificateSdOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlCertificateSdOutput) ToGetVirtualNodeSpecListenerTlCertificateSdOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlCertificateSdOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlCertificateSdOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTlCertificateSd] {
	return pulumix.Output[GetVirtualNodeSpecListenerTlCertificateSd]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTlCertificateSdOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTlCertificateSd](o, func(v GetVirtualNodeSpecListenerTlCertificateSd) string { return v.SecretName })
}

type GetVirtualNodeSpecListenerTlValidation struct {
	SubjectAlternativeNames []GetVirtualNodeSpecListenerTlValidationSubjectAlternativeName `pulumi:"subjectAlternativeNames"`
	Trusts                  []GetVirtualNodeSpecListenerTlValidationTrust                  `pulumi:"trusts"`
}

type GetVirtualNodeSpecListenerTlValidationArgs struct {
	SubjectAlternativeNames pulumix.Input[[]*GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameArgs] `pulumi:"subjectAlternativeNames"`
	Trusts                  pulumix.Input[[]*GetVirtualNodeSpecListenerTlValidationTrustArgs]                  `pulumi:"trusts"`
}

func (GetVirtualNodeSpecListenerTlValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlValidation)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTlValidationArgs) ToGetVirtualNodeSpecListenerTlValidationOutput() GetVirtualNodeSpecListenerTlValidationOutput {
	return i.ToGetVirtualNodeSpecListenerTlValidationOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTlValidationArgs) ToGetVirtualNodeSpecListenerTlValidationOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTlValidationOutput)
}

func (i *GetVirtualNodeSpecListenerTlValidationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTlValidationArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTlValidationOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTlValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlValidation)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTlValidationOutput) ToGetVirtualNodeSpecListenerTlValidationOutput() GetVirtualNodeSpecListenerTlValidationOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlValidationOutput) ToGetVirtualNodeSpecListenerTlValidationOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlValidationOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlValidationOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTlValidation] {
	return pulumix.Output[GetVirtualNodeSpecListenerTlValidation]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTlValidationOutput) SubjectAlternativeNames() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlValidationSubjectAlternativeName, GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTlValidation](o, func(v GetVirtualNodeSpecListenerTlValidation) []GetVirtualNodeSpecListenerTlValidationSubjectAlternativeName {
		return v.SubjectAlternativeNames
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlValidationSubjectAlternativeName, GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerTlValidationOutput) Trusts() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlValidationTrust, GetVirtualNodeSpecListenerTlValidationTrustOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTlValidation](o, func(v GetVirtualNodeSpecListenerTlValidation) []GetVirtualNodeSpecListenerTlValidationTrust {
		return v.Trusts
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlValidationTrust, GetVirtualNodeSpecListenerTlValidationTrustOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecListenerTlValidationSubjectAlternativeName struct {
	Matches []GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatch `pulumi:"matches"`
}

type GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameArgs struct {
	Matches pulumix.Input[[]*GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchArgs] `pulumi:"matches"`
}

func (GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlValidationSubjectAlternativeName)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameArgs) ToGetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput() GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput {
	return i.ToGetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameArgs) ToGetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput)
}

func (i *GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlValidationSubjectAlternativeName)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput) ToGetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput() GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput) ToGetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTlValidationSubjectAlternativeName] {
	return pulumix.Output[GetVirtualNodeSpecListenerTlValidationSubjectAlternativeName]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput) Matches() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatch, GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTlValidationSubjectAlternativeName](o, func(v GetVirtualNodeSpecListenerTlValidationSubjectAlternativeName) []GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatch {
		return v.Matches
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatch, GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatch struct {
	Exacts []string `pulumi:"exacts"`
}

type GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchArgs struct {
	Exacts pulumix.Input[[]string] `pulumi:"exacts"`
}

func (GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatch)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchArgs) ToGetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput() GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput {
	return i.ToGetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchArgs) ToGetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput)
}

func (i *GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatch)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput) ToGetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput() GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput) ToGetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatch] {
	return pulumix.Output[GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatch]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput) Exacts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatch](o, func(v GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatch) []string { return v.Exacts })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecListenerTlValidationTrust struct {
	Files []GetVirtualNodeSpecListenerTlValidationTrustFile `pulumi:"files"`
	Sds   []GetVirtualNodeSpecListenerTlValidationTrustSd   `pulumi:"sds"`
}

type GetVirtualNodeSpecListenerTlValidationTrustArgs struct {
	Files pulumix.Input[[]*GetVirtualNodeSpecListenerTlValidationTrustFileArgs] `pulumi:"files"`
	Sds   pulumix.Input[[]*GetVirtualNodeSpecListenerTlValidationTrustSdArgs]   `pulumi:"sds"`
}

func (GetVirtualNodeSpecListenerTlValidationTrustArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlValidationTrust)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTlValidationTrustArgs) ToGetVirtualNodeSpecListenerTlValidationTrustOutput() GetVirtualNodeSpecListenerTlValidationTrustOutput {
	return i.ToGetVirtualNodeSpecListenerTlValidationTrustOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTlValidationTrustArgs) ToGetVirtualNodeSpecListenerTlValidationTrustOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlValidationTrustOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTlValidationTrustOutput)
}

func (i *GetVirtualNodeSpecListenerTlValidationTrustArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTlValidationTrustArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTlValidationTrustOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTlValidationTrustOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlValidationTrust)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTlValidationTrustOutput) ToGetVirtualNodeSpecListenerTlValidationTrustOutput() GetVirtualNodeSpecListenerTlValidationTrustOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlValidationTrustOutput) ToGetVirtualNodeSpecListenerTlValidationTrustOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlValidationTrustOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlValidationTrustOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTlValidationTrust] {
	return pulumix.Output[GetVirtualNodeSpecListenerTlValidationTrust]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTlValidationTrustOutput) Files() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlValidationTrustFile, GetVirtualNodeSpecListenerTlValidationTrustFileOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTlValidationTrust](o, func(v GetVirtualNodeSpecListenerTlValidationTrust) []GetVirtualNodeSpecListenerTlValidationTrustFile {
		return v.Files
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlValidationTrustFile, GetVirtualNodeSpecListenerTlValidationTrustFileOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecListenerTlValidationTrustOutput) Sds() pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlValidationTrustSd, GetVirtualNodeSpecListenerTlValidationTrustSdOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecListenerTlValidationTrust](o, func(v GetVirtualNodeSpecListenerTlValidationTrust) []GetVirtualNodeSpecListenerTlValidationTrustSd {
		return v.Sds
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecListenerTlValidationTrustSd, GetVirtualNodeSpecListenerTlValidationTrustSdOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecListenerTlValidationTrustFile struct {
	CertificateChain string `pulumi:"certificateChain"`
}

type GetVirtualNodeSpecListenerTlValidationTrustFileArgs struct {
	CertificateChain pulumix.Input[string] `pulumi:"certificateChain"`
}

func (GetVirtualNodeSpecListenerTlValidationTrustFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlValidationTrustFile)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTlValidationTrustFileArgs) ToGetVirtualNodeSpecListenerTlValidationTrustFileOutput() GetVirtualNodeSpecListenerTlValidationTrustFileOutput {
	return i.ToGetVirtualNodeSpecListenerTlValidationTrustFileOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTlValidationTrustFileArgs) ToGetVirtualNodeSpecListenerTlValidationTrustFileOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlValidationTrustFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTlValidationTrustFileOutput)
}

func (i *GetVirtualNodeSpecListenerTlValidationTrustFileArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTlValidationTrustFileArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTlValidationTrustFileOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTlValidationTrustFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlValidationTrustFile)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTlValidationTrustFileOutput) ToGetVirtualNodeSpecListenerTlValidationTrustFileOutput() GetVirtualNodeSpecListenerTlValidationTrustFileOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlValidationTrustFileOutput) ToGetVirtualNodeSpecListenerTlValidationTrustFileOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlValidationTrustFileOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlValidationTrustFileOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTlValidationTrustFile] {
	return pulumix.Output[GetVirtualNodeSpecListenerTlValidationTrustFile]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTlValidationTrustFileOutput) CertificateChain() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTlValidationTrustFile](o, func(v GetVirtualNodeSpecListenerTlValidationTrustFile) string { return v.CertificateChain })
}

type GetVirtualNodeSpecListenerTlValidationTrustSd struct {
	SecretName string `pulumi:"secretName"`
}

type GetVirtualNodeSpecListenerTlValidationTrustSdArgs struct {
	SecretName pulumix.Input[string] `pulumi:"secretName"`
}

func (GetVirtualNodeSpecListenerTlValidationTrustSdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlValidationTrustSd)(nil)).Elem()
}

func (i GetVirtualNodeSpecListenerTlValidationTrustSdArgs) ToGetVirtualNodeSpecListenerTlValidationTrustSdOutput() GetVirtualNodeSpecListenerTlValidationTrustSdOutput {
	return i.ToGetVirtualNodeSpecListenerTlValidationTrustSdOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecListenerTlValidationTrustSdArgs) ToGetVirtualNodeSpecListenerTlValidationTrustSdOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlValidationTrustSdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecListenerTlValidationTrustSdOutput)
}

func (i *GetVirtualNodeSpecListenerTlValidationTrustSdArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecListenerTlValidationTrustSdArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecListenerTlValidationTrustSdOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecListenerTlValidationTrustSdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecListenerTlValidationTrustSd)(nil)).Elem()
}

func (o GetVirtualNodeSpecListenerTlValidationTrustSdOutput) ToGetVirtualNodeSpecListenerTlValidationTrustSdOutput() GetVirtualNodeSpecListenerTlValidationTrustSdOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlValidationTrustSdOutput) ToGetVirtualNodeSpecListenerTlValidationTrustSdOutputWithContext(ctx context.Context) GetVirtualNodeSpecListenerTlValidationTrustSdOutput {
	return o
}

func (o GetVirtualNodeSpecListenerTlValidationTrustSdOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecListenerTlValidationTrustSd] {
	return pulumix.Output[GetVirtualNodeSpecListenerTlValidationTrustSd]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecListenerTlValidationTrustSdOutput) SecretName() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecListenerTlValidationTrustSd](o, func(v GetVirtualNodeSpecListenerTlValidationTrustSd) string { return v.SecretName })
}

type GetVirtualNodeSpecLogging struct {
	AccessLogs []GetVirtualNodeSpecLoggingAccessLog `pulumi:"accessLogs"`
}

type GetVirtualNodeSpecLoggingArgs struct {
	AccessLogs pulumix.Input[[]*GetVirtualNodeSpecLoggingAccessLogArgs] `pulumi:"accessLogs"`
}

func (GetVirtualNodeSpecLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecLogging)(nil)).Elem()
}

func (i GetVirtualNodeSpecLoggingArgs) ToGetVirtualNodeSpecLoggingOutput() GetVirtualNodeSpecLoggingOutput {
	return i.ToGetVirtualNodeSpecLoggingOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecLoggingArgs) ToGetVirtualNodeSpecLoggingOutputWithContext(ctx context.Context) GetVirtualNodeSpecLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecLoggingOutput)
}

func (i *GetVirtualNodeSpecLoggingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecLoggingArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecLoggingOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecLogging)(nil)).Elem()
}

func (o GetVirtualNodeSpecLoggingOutput) ToGetVirtualNodeSpecLoggingOutput() GetVirtualNodeSpecLoggingOutput {
	return o
}

func (o GetVirtualNodeSpecLoggingOutput) ToGetVirtualNodeSpecLoggingOutputWithContext(ctx context.Context) GetVirtualNodeSpecLoggingOutput {
	return o
}

func (o GetVirtualNodeSpecLoggingOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecLogging] {
	return pulumix.Output[GetVirtualNodeSpecLogging]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecLoggingOutput) AccessLogs() pulumix.GArrayOutput[GetVirtualNodeSpecLoggingAccessLog, GetVirtualNodeSpecLoggingAccessLogOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecLogging](o, func(v GetVirtualNodeSpecLogging) []GetVirtualNodeSpecLoggingAccessLog { return v.AccessLogs })
	return pulumix.GArrayOutput[GetVirtualNodeSpecLoggingAccessLog, GetVirtualNodeSpecLoggingAccessLogOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecLoggingAccessLog struct {
	Files []GetVirtualNodeSpecLoggingAccessLogFile `pulumi:"files"`
}

type GetVirtualNodeSpecLoggingAccessLogArgs struct {
	Files pulumix.Input[[]*GetVirtualNodeSpecLoggingAccessLogFileArgs] `pulumi:"files"`
}

func (GetVirtualNodeSpecLoggingAccessLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecLoggingAccessLog)(nil)).Elem()
}

func (i GetVirtualNodeSpecLoggingAccessLogArgs) ToGetVirtualNodeSpecLoggingAccessLogOutput() GetVirtualNodeSpecLoggingAccessLogOutput {
	return i.ToGetVirtualNodeSpecLoggingAccessLogOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecLoggingAccessLogArgs) ToGetVirtualNodeSpecLoggingAccessLogOutputWithContext(ctx context.Context) GetVirtualNodeSpecLoggingAccessLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecLoggingAccessLogOutput)
}

func (i *GetVirtualNodeSpecLoggingAccessLogArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecLoggingAccessLogArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecLoggingAccessLogOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecLoggingAccessLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecLoggingAccessLog)(nil)).Elem()
}

func (o GetVirtualNodeSpecLoggingAccessLogOutput) ToGetVirtualNodeSpecLoggingAccessLogOutput() GetVirtualNodeSpecLoggingAccessLogOutput {
	return o
}

func (o GetVirtualNodeSpecLoggingAccessLogOutput) ToGetVirtualNodeSpecLoggingAccessLogOutputWithContext(ctx context.Context) GetVirtualNodeSpecLoggingAccessLogOutput {
	return o
}

func (o GetVirtualNodeSpecLoggingAccessLogOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecLoggingAccessLog] {
	return pulumix.Output[GetVirtualNodeSpecLoggingAccessLog]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecLoggingAccessLogOutput) Files() pulumix.GArrayOutput[GetVirtualNodeSpecLoggingAccessLogFile, GetVirtualNodeSpecLoggingAccessLogFileOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecLoggingAccessLog](o, func(v GetVirtualNodeSpecLoggingAccessLog) []GetVirtualNodeSpecLoggingAccessLogFile { return v.Files })
	return pulumix.GArrayOutput[GetVirtualNodeSpecLoggingAccessLogFile, GetVirtualNodeSpecLoggingAccessLogFileOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecLoggingAccessLogFile struct {
	Formats []GetVirtualNodeSpecLoggingAccessLogFileFormat `pulumi:"formats"`
	Path    string                                         `pulumi:"path"`
}

type GetVirtualNodeSpecLoggingAccessLogFileArgs struct {
	Formats pulumix.Input[[]*GetVirtualNodeSpecLoggingAccessLogFileFormatArgs] `pulumi:"formats"`
	Path    pulumix.Input[string]                                              `pulumi:"path"`
}

func (GetVirtualNodeSpecLoggingAccessLogFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecLoggingAccessLogFile)(nil)).Elem()
}

func (i GetVirtualNodeSpecLoggingAccessLogFileArgs) ToGetVirtualNodeSpecLoggingAccessLogFileOutput() GetVirtualNodeSpecLoggingAccessLogFileOutput {
	return i.ToGetVirtualNodeSpecLoggingAccessLogFileOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecLoggingAccessLogFileArgs) ToGetVirtualNodeSpecLoggingAccessLogFileOutputWithContext(ctx context.Context) GetVirtualNodeSpecLoggingAccessLogFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecLoggingAccessLogFileOutput)
}

func (i *GetVirtualNodeSpecLoggingAccessLogFileArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecLoggingAccessLogFileArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecLoggingAccessLogFileOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecLoggingAccessLogFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecLoggingAccessLogFile)(nil)).Elem()
}

func (o GetVirtualNodeSpecLoggingAccessLogFileOutput) ToGetVirtualNodeSpecLoggingAccessLogFileOutput() GetVirtualNodeSpecLoggingAccessLogFileOutput {
	return o
}

func (o GetVirtualNodeSpecLoggingAccessLogFileOutput) ToGetVirtualNodeSpecLoggingAccessLogFileOutputWithContext(ctx context.Context) GetVirtualNodeSpecLoggingAccessLogFileOutput {
	return o
}

func (o GetVirtualNodeSpecLoggingAccessLogFileOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecLoggingAccessLogFile] {
	return pulumix.Output[GetVirtualNodeSpecLoggingAccessLogFile]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecLoggingAccessLogFileOutput) Formats() pulumix.GArrayOutput[GetVirtualNodeSpecLoggingAccessLogFileFormat, GetVirtualNodeSpecLoggingAccessLogFileFormatOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecLoggingAccessLogFile](o, func(v GetVirtualNodeSpecLoggingAccessLogFile) []GetVirtualNodeSpecLoggingAccessLogFileFormat {
		return v.Formats
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecLoggingAccessLogFileFormat, GetVirtualNodeSpecLoggingAccessLogFileFormatOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecLoggingAccessLogFileOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecLoggingAccessLogFile](o, func(v GetVirtualNodeSpecLoggingAccessLogFile) string { return v.Path })
}

type GetVirtualNodeSpecLoggingAccessLogFileFormat struct {
	Jsons []GetVirtualNodeSpecLoggingAccessLogFileFormatJson `pulumi:"jsons"`
	Text  string                                             `pulumi:"text"`
}

type GetVirtualNodeSpecLoggingAccessLogFileFormatArgs struct {
	Jsons pulumix.Input[[]*GetVirtualNodeSpecLoggingAccessLogFileFormatJsonArgs] `pulumi:"jsons"`
	Text  pulumix.Input[string]                                                  `pulumi:"text"`
}

func (GetVirtualNodeSpecLoggingAccessLogFileFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecLoggingAccessLogFileFormat)(nil)).Elem()
}

func (i GetVirtualNodeSpecLoggingAccessLogFileFormatArgs) ToGetVirtualNodeSpecLoggingAccessLogFileFormatOutput() GetVirtualNodeSpecLoggingAccessLogFileFormatOutput {
	return i.ToGetVirtualNodeSpecLoggingAccessLogFileFormatOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecLoggingAccessLogFileFormatArgs) ToGetVirtualNodeSpecLoggingAccessLogFileFormatOutputWithContext(ctx context.Context) GetVirtualNodeSpecLoggingAccessLogFileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecLoggingAccessLogFileFormatOutput)
}

func (i *GetVirtualNodeSpecLoggingAccessLogFileFormatArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecLoggingAccessLogFileFormatArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecLoggingAccessLogFileFormatOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecLoggingAccessLogFileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecLoggingAccessLogFileFormat)(nil)).Elem()
}

func (o GetVirtualNodeSpecLoggingAccessLogFileFormatOutput) ToGetVirtualNodeSpecLoggingAccessLogFileFormatOutput() GetVirtualNodeSpecLoggingAccessLogFileFormatOutput {
	return o
}

func (o GetVirtualNodeSpecLoggingAccessLogFileFormatOutput) ToGetVirtualNodeSpecLoggingAccessLogFileFormatOutputWithContext(ctx context.Context) GetVirtualNodeSpecLoggingAccessLogFileFormatOutput {
	return o
}

func (o GetVirtualNodeSpecLoggingAccessLogFileFormatOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecLoggingAccessLogFileFormat] {
	return pulumix.Output[GetVirtualNodeSpecLoggingAccessLogFileFormat]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecLoggingAccessLogFileFormatOutput) Jsons() pulumix.GArrayOutput[GetVirtualNodeSpecLoggingAccessLogFileFormatJson, GetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecLoggingAccessLogFileFormat](o, func(v GetVirtualNodeSpecLoggingAccessLogFileFormat) []GetVirtualNodeSpecLoggingAccessLogFileFormatJson {
		return v.Jsons
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecLoggingAccessLogFileFormatJson, GetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecLoggingAccessLogFileFormatOutput) Text() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecLoggingAccessLogFileFormat](o, func(v GetVirtualNodeSpecLoggingAccessLogFileFormat) string { return v.Text })
}

type GetVirtualNodeSpecLoggingAccessLogFileFormatJson struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type GetVirtualNodeSpecLoggingAccessLogFileFormatJsonArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetVirtualNodeSpecLoggingAccessLogFileFormatJsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecLoggingAccessLogFileFormatJson)(nil)).Elem()
}

func (i GetVirtualNodeSpecLoggingAccessLogFileFormatJsonArgs) ToGetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput() GetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput {
	return i.ToGetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecLoggingAccessLogFileFormatJsonArgs) ToGetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutputWithContext(ctx context.Context) GetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput)
}

func (i *GetVirtualNodeSpecLoggingAccessLogFileFormatJsonArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecLoggingAccessLogFileFormatJsonArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecLoggingAccessLogFileFormatJson)(nil)).Elem()
}

func (o GetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput) ToGetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput() GetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput {
	return o
}

func (o GetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput) ToGetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutputWithContext(ctx context.Context) GetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput {
	return o
}

func (o GetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecLoggingAccessLogFileFormatJson] {
	return pulumix.Output[GetVirtualNodeSpecLoggingAccessLogFileFormatJson]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecLoggingAccessLogFileFormatJson](o, func(v GetVirtualNodeSpecLoggingAccessLogFileFormatJson) string { return v.Key })
}

func (o GetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecLoggingAccessLogFileFormatJson](o, func(v GetVirtualNodeSpecLoggingAccessLogFileFormatJson) string { return v.Value })
}

type GetVirtualNodeSpecServiceDiscovery struct {
	AwsCloudMaps []GetVirtualNodeSpecServiceDiscoveryAwsCloudMap `pulumi:"awsCloudMaps"`
	Dns          []GetVirtualNodeSpecServiceDiscoveryDn          `pulumi:"dns"`
}

type GetVirtualNodeSpecServiceDiscoveryArgs struct {
	AwsCloudMaps pulumix.Input[[]*GetVirtualNodeSpecServiceDiscoveryAwsCloudMapArgs] `pulumi:"awsCloudMaps"`
	Dns          pulumix.Input[[]*GetVirtualNodeSpecServiceDiscoveryDnArgs]          `pulumi:"dns"`
}

func (GetVirtualNodeSpecServiceDiscoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecServiceDiscovery)(nil)).Elem()
}

func (i GetVirtualNodeSpecServiceDiscoveryArgs) ToGetVirtualNodeSpecServiceDiscoveryOutput() GetVirtualNodeSpecServiceDiscoveryOutput {
	return i.ToGetVirtualNodeSpecServiceDiscoveryOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecServiceDiscoveryArgs) ToGetVirtualNodeSpecServiceDiscoveryOutputWithContext(ctx context.Context) GetVirtualNodeSpecServiceDiscoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecServiceDiscoveryOutput)
}

func (i *GetVirtualNodeSpecServiceDiscoveryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecServiceDiscoveryArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecServiceDiscoveryOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecServiceDiscoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecServiceDiscovery)(nil)).Elem()
}

func (o GetVirtualNodeSpecServiceDiscoveryOutput) ToGetVirtualNodeSpecServiceDiscoveryOutput() GetVirtualNodeSpecServiceDiscoveryOutput {
	return o
}

func (o GetVirtualNodeSpecServiceDiscoveryOutput) ToGetVirtualNodeSpecServiceDiscoveryOutputWithContext(ctx context.Context) GetVirtualNodeSpecServiceDiscoveryOutput {
	return o
}

func (o GetVirtualNodeSpecServiceDiscoveryOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecServiceDiscovery] {
	return pulumix.Output[GetVirtualNodeSpecServiceDiscovery]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecServiceDiscoveryOutput) AwsCloudMaps() pulumix.GArrayOutput[GetVirtualNodeSpecServiceDiscoveryAwsCloudMap, GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecServiceDiscovery](o, func(v GetVirtualNodeSpecServiceDiscovery) []GetVirtualNodeSpecServiceDiscoveryAwsCloudMap {
		return v.AwsCloudMaps
	})
	return pulumix.GArrayOutput[GetVirtualNodeSpecServiceDiscoveryAwsCloudMap, GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecServiceDiscoveryOutput) Dns() pulumix.GArrayOutput[GetVirtualNodeSpecServiceDiscoveryDn, GetVirtualNodeSpecServiceDiscoveryDnOutput] {
	value := pulumix.Apply[GetVirtualNodeSpecServiceDiscovery](o, func(v GetVirtualNodeSpecServiceDiscovery) []GetVirtualNodeSpecServiceDiscoveryDn { return v.Dns })
	return pulumix.GArrayOutput[GetVirtualNodeSpecServiceDiscoveryDn, GetVirtualNodeSpecServiceDiscoveryDnOutput]{OutputState: value.OutputState}
}

type GetVirtualNodeSpecServiceDiscoveryAwsCloudMap struct {
	Attributes    map[string]string `pulumi:"attributes"`
	NamespaceName string            `pulumi:"namespaceName"`
	ServiceName   string            `pulumi:"serviceName"`
}

type GetVirtualNodeSpecServiceDiscoveryAwsCloudMapArgs struct {
	Attributes    pulumix.Input[map[string]string] `pulumi:"attributes"`
	NamespaceName pulumix.Input[string]            `pulumi:"namespaceName"`
	ServiceName   pulumix.Input[string]            `pulumi:"serviceName"`
}

func (GetVirtualNodeSpecServiceDiscoveryAwsCloudMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecServiceDiscoveryAwsCloudMap)(nil)).Elem()
}

func (i GetVirtualNodeSpecServiceDiscoveryAwsCloudMapArgs) ToGetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput() GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput {
	return i.ToGetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecServiceDiscoveryAwsCloudMapArgs) ToGetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputWithContext(ctx context.Context) GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput)
}

func (i *GetVirtualNodeSpecServiceDiscoveryAwsCloudMapArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecServiceDiscoveryAwsCloudMapArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecServiceDiscoveryAwsCloudMap)(nil)).Elem()
}

func (o GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ToGetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput() GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput {
	return o
}

func (o GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ToGetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputWithContext(ctx context.Context) GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput {
	return o
}

func (o GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecServiceDiscoveryAwsCloudMap] {
	return pulumix.Output[GetVirtualNodeSpecServiceDiscoveryAwsCloudMap]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) Attributes() pulumix.MapOutput[string] {
	value := pulumix.Apply[GetVirtualNodeSpecServiceDiscoveryAwsCloudMap](o, func(v GetVirtualNodeSpecServiceDiscoveryAwsCloudMap) map[string]string { return v.Attributes })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

func (o GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) NamespaceName() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecServiceDiscoveryAwsCloudMap](o, func(v GetVirtualNodeSpecServiceDiscoveryAwsCloudMap) string { return v.NamespaceName })
}

func (o GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ServiceName() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecServiceDiscoveryAwsCloudMap](o, func(v GetVirtualNodeSpecServiceDiscoveryAwsCloudMap) string { return v.ServiceName })
}

type GetVirtualNodeSpecServiceDiscoveryDn struct {
	Hostname     string `pulumi:"hostname"`
	IpPreference string `pulumi:"ipPreference"`
	ResponseType string `pulumi:"responseType"`
}

type GetVirtualNodeSpecServiceDiscoveryDnArgs struct {
	Hostname     pulumix.Input[string] `pulumi:"hostname"`
	IpPreference pulumix.Input[string] `pulumi:"ipPreference"`
	ResponseType pulumix.Input[string] `pulumi:"responseType"`
}

func (GetVirtualNodeSpecServiceDiscoveryDnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecServiceDiscoveryDn)(nil)).Elem()
}

func (i GetVirtualNodeSpecServiceDiscoveryDnArgs) ToGetVirtualNodeSpecServiceDiscoveryDnOutput() GetVirtualNodeSpecServiceDiscoveryDnOutput {
	return i.ToGetVirtualNodeSpecServiceDiscoveryDnOutputWithContext(context.Background())
}

func (i GetVirtualNodeSpecServiceDiscoveryDnArgs) ToGetVirtualNodeSpecServiceDiscoveryDnOutputWithContext(ctx context.Context) GetVirtualNodeSpecServiceDiscoveryDnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNodeSpecServiceDiscoveryDnOutput)
}

func (i *GetVirtualNodeSpecServiceDiscoveryDnArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualNodeSpecServiceDiscoveryDnArgs] {
	return pulumix.Val(i)
}

type GetVirtualNodeSpecServiceDiscoveryDnOutput struct{ *pulumi.OutputState }

func (GetVirtualNodeSpecServiceDiscoveryDnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNodeSpecServiceDiscoveryDn)(nil)).Elem()
}

func (o GetVirtualNodeSpecServiceDiscoveryDnOutput) ToGetVirtualNodeSpecServiceDiscoveryDnOutput() GetVirtualNodeSpecServiceDiscoveryDnOutput {
	return o
}

func (o GetVirtualNodeSpecServiceDiscoveryDnOutput) ToGetVirtualNodeSpecServiceDiscoveryDnOutputWithContext(ctx context.Context) GetVirtualNodeSpecServiceDiscoveryDnOutput {
	return o
}

func (o GetVirtualNodeSpecServiceDiscoveryDnOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualNodeSpecServiceDiscoveryDn] {
	return pulumix.Output[GetVirtualNodeSpecServiceDiscoveryDn]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualNodeSpecServiceDiscoveryDnOutput) Hostname() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecServiceDiscoveryDn](o, func(v GetVirtualNodeSpecServiceDiscoveryDn) string { return v.Hostname })
}

func (o GetVirtualNodeSpecServiceDiscoveryDnOutput) IpPreference() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecServiceDiscoveryDn](o, func(v GetVirtualNodeSpecServiceDiscoveryDn) string { return v.IpPreference })
}

func (o GetVirtualNodeSpecServiceDiscoveryDnOutput) ResponseType() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualNodeSpecServiceDiscoveryDn](o, func(v GetVirtualNodeSpecServiceDiscoveryDn) string { return v.ResponseType })
}

type GetVirtualRouterSpec struct {
	Listeners []GetVirtualRouterSpecListener `pulumi:"listeners"`
}

type GetVirtualRouterSpecArgs struct {
	Listeners pulumix.Input[[]*GetVirtualRouterSpecListenerArgs] `pulumi:"listeners"`
}

func (GetVirtualRouterSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualRouterSpec)(nil)).Elem()
}

func (i GetVirtualRouterSpecArgs) ToGetVirtualRouterSpecOutput() GetVirtualRouterSpecOutput {
	return i.ToGetVirtualRouterSpecOutputWithContext(context.Background())
}

func (i GetVirtualRouterSpecArgs) ToGetVirtualRouterSpecOutputWithContext(ctx context.Context) GetVirtualRouterSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualRouterSpecOutput)
}

func (i *GetVirtualRouterSpecArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualRouterSpecArgs] {
	return pulumix.Val(i)
}

type GetVirtualRouterSpecOutput struct{ *pulumi.OutputState }

func (GetVirtualRouterSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualRouterSpec)(nil)).Elem()
}

func (o GetVirtualRouterSpecOutput) ToGetVirtualRouterSpecOutput() GetVirtualRouterSpecOutput {
	return o
}

func (o GetVirtualRouterSpecOutput) ToGetVirtualRouterSpecOutputWithContext(ctx context.Context) GetVirtualRouterSpecOutput {
	return o
}

func (o GetVirtualRouterSpecOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualRouterSpec] {
	return pulumix.Output[GetVirtualRouterSpec]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualRouterSpecOutput) Listeners() pulumix.GArrayOutput[GetVirtualRouterSpecListener, GetVirtualRouterSpecListenerOutput] {
	value := pulumix.Apply[GetVirtualRouterSpec](o, func(v GetVirtualRouterSpec) []GetVirtualRouterSpecListener { return v.Listeners })
	return pulumix.GArrayOutput[GetVirtualRouterSpecListener, GetVirtualRouterSpecListenerOutput]{OutputState: value.OutputState}
}

type GetVirtualRouterSpecListener struct {
	PortMappings []GetVirtualRouterSpecListenerPortMapping `pulumi:"portMappings"`
}

type GetVirtualRouterSpecListenerArgs struct {
	PortMappings pulumix.Input[[]*GetVirtualRouterSpecListenerPortMappingArgs] `pulumi:"portMappings"`
}

func (GetVirtualRouterSpecListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualRouterSpecListener)(nil)).Elem()
}

func (i GetVirtualRouterSpecListenerArgs) ToGetVirtualRouterSpecListenerOutput() GetVirtualRouterSpecListenerOutput {
	return i.ToGetVirtualRouterSpecListenerOutputWithContext(context.Background())
}

func (i GetVirtualRouterSpecListenerArgs) ToGetVirtualRouterSpecListenerOutputWithContext(ctx context.Context) GetVirtualRouterSpecListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualRouterSpecListenerOutput)
}

func (i *GetVirtualRouterSpecListenerArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualRouterSpecListenerArgs] {
	return pulumix.Val(i)
}

type GetVirtualRouterSpecListenerOutput struct{ *pulumi.OutputState }

func (GetVirtualRouterSpecListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualRouterSpecListener)(nil)).Elem()
}

func (o GetVirtualRouterSpecListenerOutput) ToGetVirtualRouterSpecListenerOutput() GetVirtualRouterSpecListenerOutput {
	return o
}

func (o GetVirtualRouterSpecListenerOutput) ToGetVirtualRouterSpecListenerOutputWithContext(ctx context.Context) GetVirtualRouterSpecListenerOutput {
	return o
}

func (o GetVirtualRouterSpecListenerOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualRouterSpecListener] {
	return pulumix.Output[GetVirtualRouterSpecListener]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualRouterSpecListenerOutput) PortMappings() pulumix.GArrayOutput[GetVirtualRouterSpecListenerPortMapping, GetVirtualRouterSpecListenerPortMappingOutput] {
	value := pulumix.Apply[GetVirtualRouterSpecListener](o, func(v GetVirtualRouterSpecListener) []GetVirtualRouterSpecListenerPortMapping { return v.PortMappings })
	return pulumix.GArrayOutput[GetVirtualRouterSpecListenerPortMapping, GetVirtualRouterSpecListenerPortMappingOutput]{OutputState: value.OutputState}
}

type GetVirtualRouterSpecListenerPortMapping struct {
	Port     int    `pulumi:"port"`
	Protocol string `pulumi:"protocol"`
}

type GetVirtualRouterSpecListenerPortMappingArgs struct {
	Port     pulumix.Input[int]    `pulumi:"port"`
	Protocol pulumix.Input[string] `pulumi:"protocol"`
}

func (GetVirtualRouterSpecListenerPortMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualRouterSpecListenerPortMapping)(nil)).Elem()
}

func (i GetVirtualRouterSpecListenerPortMappingArgs) ToGetVirtualRouterSpecListenerPortMappingOutput() GetVirtualRouterSpecListenerPortMappingOutput {
	return i.ToGetVirtualRouterSpecListenerPortMappingOutputWithContext(context.Background())
}

func (i GetVirtualRouterSpecListenerPortMappingArgs) ToGetVirtualRouterSpecListenerPortMappingOutputWithContext(ctx context.Context) GetVirtualRouterSpecListenerPortMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualRouterSpecListenerPortMappingOutput)
}

func (i *GetVirtualRouterSpecListenerPortMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualRouterSpecListenerPortMappingArgs] {
	return pulumix.Val(i)
}

type GetVirtualRouterSpecListenerPortMappingOutput struct{ *pulumi.OutputState }

func (GetVirtualRouterSpecListenerPortMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualRouterSpecListenerPortMapping)(nil)).Elem()
}

func (o GetVirtualRouterSpecListenerPortMappingOutput) ToGetVirtualRouterSpecListenerPortMappingOutput() GetVirtualRouterSpecListenerPortMappingOutput {
	return o
}

func (o GetVirtualRouterSpecListenerPortMappingOutput) ToGetVirtualRouterSpecListenerPortMappingOutputWithContext(ctx context.Context) GetVirtualRouterSpecListenerPortMappingOutput {
	return o
}

func (o GetVirtualRouterSpecListenerPortMappingOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualRouterSpecListenerPortMapping] {
	return pulumix.Output[GetVirtualRouterSpecListenerPortMapping]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualRouterSpecListenerPortMappingOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetVirtualRouterSpecListenerPortMapping](o, func(v GetVirtualRouterSpecListenerPortMapping) int { return v.Port })
}

func (o GetVirtualRouterSpecListenerPortMappingOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualRouterSpecListenerPortMapping](o, func(v GetVirtualRouterSpecListenerPortMapping) string { return v.Protocol })
}

type GetVirtualServiceSpec struct {
	Providers []GetVirtualServiceSpecProvider `pulumi:"providers"`
}

type GetVirtualServiceSpecArgs struct {
	Providers pulumix.Input[[]*GetVirtualServiceSpecProviderArgs] `pulumi:"providers"`
}

func (GetVirtualServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualServiceSpec)(nil)).Elem()
}

func (i GetVirtualServiceSpecArgs) ToGetVirtualServiceSpecOutput() GetVirtualServiceSpecOutput {
	return i.ToGetVirtualServiceSpecOutputWithContext(context.Background())
}

func (i GetVirtualServiceSpecArgs) ToGetVirtualServiceSpecOutputWithContext(ctx context.Context) GetVirtualServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualServiceSpecOutput)
}

func (i *GetVirtualServiceSpecArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualServiceSpecArgs] {
	return pulumix.Val(i)
}

type GetVirtualServiceSpecOutput struct{ *pulumi.OutputState }

func (GetVirtualServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualServiceSpec)(nil)).Elem()
}

func (o GetVirtualServiceSpecOutput) ToGetVirtualServiceSpecOutput() GetVirtualServiceSpecOutput {
	return o
}

func (o GetVirtualServiceSpecOutput) ToGetVirtualServiceSpecOutputWithContext(ctx context.Context) GetVirtualServiceSpecOutput {
	return o
}

func (o GetVirtualServiceSpecOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualServiceSpec] {
	return pulumix.Output[GetVirtualServiceSpec]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualServiceSpecOutput) Providers() pulumix.GArrayOutput[GetVirtualServiceSpecProvider, GetVirtualServiceSpecProviderOutput] {
	value := pulumix.Apply[GetVirtualServiceSpec](o, func(v GetVirtualServiceSpec) []GetVirtualServiceSpecProvider { return v.Providers })
	return pulumix.GArrayOutput[GetVirtualServiceSpecProvider, GetVirtualServiceSpecProviderOutput]{OutputState: value.OutputState}
}

type GetVirtualServiceSpecProvider struct {
	VirtualNodes   []GetVirtualServiceSpecProviderVirtualNode   `pulumi:"virtualNodes"`
	VirtualRouters []GetVirtualServiceSpecProviderVirtualRouter `pulumi:"virtualRouters"`
}

type GetVirtualServiceSpecProviderArgs struct {
	VirtualNodes   pulumix.Input[[]*GetVirtualServiceSpecProviderVirtualNodeArgs]   `pulumi:"virtualNodes"`
	VirtualRouters pulumix.Input[[]*GetVirtualServiceSpecProviderVirtualRouterArgs] `pulumi:"virtualRouters"`
}

func (GetVirtualServiceSpecProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualServiceSpecProvider)(nil)).Elem()
}

func (i GetVirtualServiceSpecProviderArgs) ToGetVirtualServiceSpecProviderOutput() GetVirtualServiceSpecProviderOutput {
	return i.ToGetVirtualServiceSpecProviderOutputWithContext(context.Background())
}

func (i GetVirtualServiceSpecProviderArgs) ToGetVirtualServiceSpecProviderOutputWithContext(ctx context.Context) GetVirtualServiceSpecProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualServiceSpecProviderOutput)
}

func (i *GetVirtualServiceSpecProviderArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualServiceSpecProviderArgs] {
	return pulumix.Val(i)
}

type GetVirtualServiceSpecProviderOutput struct{ *pulumi.OutputState }

func (GetVirtualServiceSpecProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualServiceSpecProvider)(nil)).Elem()
}

func (o GetVirtualServiceSpecProviderOutput) ToGetVirtualServiceSpecProviderOutput() GetVirtualServiceSpecProviderOutput {
	return o
}

func (o GetVirtualServiceSpecProviderOutput) ToGetVirtualServiceSpecProviderOutputWithContext(ctx context.Context) GetVirtualServiceSpecProviderOutput {
	return o
}

func (o GetVirtualServiceSpecProviderOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualServiceSpecProvider] {
	return pulumix.Output[GetVirtualServiceSpecProvider]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualServiceSpecProviderOutput) VirtualNodes() pulumix.GArrayOutput[GetVirtualServiceSpecProviderVirtualNode, GetVirtualServiceSpecProviderVirtualNodeOutput] {
	value := pulumix.Apply[GetVirtualServiceSpecProvider](o, func(v GetVirtualServiceSpecProvider) []GetVirtualServiceSpecProviderVirtualNode {
		return v.VirtualNodes
	})
	return pulumix.GArrayOutput[GetVirtualServiceSpecProviderVirtualNode, GetVirtualServiceSpecProviderVirtualNodeOutput]{OutputState: value.OutputState}
}

func (o GetVirtualServiceSpecProviderOutput) VirtualRouters() pulumix.GArrayOutput[GetVirtualServiceSpecProviderVirtualRouter, GetVirtualServiceSpecProviderVirtualRouterOutput] {
	value := pulumix.Apply[GetVirtualServiceSpecProvider](o, func(v GetVirtualServiceSpecProvider) []GetVirtualServiceSpecProviderVirtualRouter {
		return v.VirtualRouters
	})
	return pulumix.GArrayOutput[GetVirtualServiceSpecProviderVirtualRouter, GetVirtualServiceSpecProviderVirtualRouterOutput]{OutputState: value.OutputState}
}

type GetVirtualServiceSpecProviderVirtualNode struct {
	VirtualNodeName string `pulumi:"virtualNodeName"`
}

type GetVirtualServiceSpecProviderVirtualNodeArgs struct {
	VirtualNodeName pulumix.Input[string] `pulumi:"virtualNodeName"`
}

func (GetVirtualServiceSpecProviderVirtualNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualServiceSpecProviderVirtualNode)(nil)).Elem()
}

func (i GetVirtualServiceSpecProviderVirtualNodeArgs) ToGetVirtualServiceSpecProviderVirtualNodeOutput() GetVirtualServiceSpecProviderVirtualNodeOutput {
	return i.ToGetVirtualServiceSpecProviderVirtualNodeOutputWithContext(context.Background())
}

func (i GetVirtualServiceSpecProviderVirtualNodeArgs) ToGetVirtualServiceSpecProviderVirtualNodeOutputWithContext(ctx context.Context) GetVirtualServiceSpecProviderVirtualNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualServiceSpecProviderVirtualNodeOutput)
}

func (i *GetVirtualServiceSpecProviderVirtualNodeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualServiceSpecProviderVirtualNodeArgs] {
	return pulumix.Val(i)
}

type GetVirtualServiceSpecProviderVirtualNodeOutput struct{ *pulumi.OutputState }

func (GetVirtualServiceSpecProviderVirtualNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualServiceSpecProviderVirtualNode)(nil)).Elem()
}

func (o GetVirtualServiceSpecProviderVirtualNodeOutput) ToGetVirtualServiceSpecProviderVirtualNodeOutput() GetVirtualServiceSpecProviderVirtualNodeOutput {
	return o
}

func (o GetVirtualServiceSpecProviderVirtualNodeOutput) ToGetVirtualServiceSpecProviderVirtualNodeOutputWithContext(ctx context.Context) GetVirtualServiceSpecProviderVirtualNodeOutput {
	return o
}

func (o GetVirtualServiceSpecProviderVirtualNodeOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualServiceSpecProviderVirtualNode] {
	return pulumix.Output[GetVirtualServiceSpecProviderVirtualNode]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualServiceSpecProviderVirtualNodeOutput) VirtualNodeName() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualServiceSpecProviderVirtualNode](o, func(v GetVirtualServiceSpecProviderVirtualNode) string { return v.VirtualNodeName })
}

type GetVirtualServiceSpecProviderVirtualRouter struct {
	VirtualRouterName string `pulumi:"virtualRouterName"`
}

type GetVirtualServiceSpecProviderVirtualRouterArgs struct {
	VirtualRouterName pulumix.Input[string] `pulumi:"virtualRouterName"`
}

func (GetVirtualServiceSpecProviderVirtualRouterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualServiceSpecProviderVirtualRouter)(nil)).Elem()
}

func (i GetVirtualServiceSpecProviderVirtualRouterArgs) ToGetVirtualServiceSpecProviderVirtualRouterOutput() GetVirtualServiceSpecProviderVirtualRouterOutput {
	return i.ToGetVirtualServiceSpecProviderVirtualRouterOutputWithContext(context.Background())
}

func (i GetVirtualServiceSpecProviderVirtualRouterArgs) ToGetVirtualServiceSpecProviderVirtualRouterOutputWithContext(ctx context.Context) GetVirtualServiceSpecProviderVirtualRouterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualServiceSpecProviderVirtualRouterOutput)
}

func (i *GetVirtualServiceSpecProviderVirtualRouterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVirtualServiceSpecProviderVirtualRouterArgs] {
	return pulumix.Val(i)
}

type GetVirtualServiceSpecProviderVirtualRouterOutput struct{ *pulumi.OutputState }

func (GetVirtualServiceSpecProviderVirtualRouterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualServiceSpecProviderVirtualRouter)(nil)).Elem()
}

func (o GetVirtualServiceSpecProviderVirtualRouterOutput) ToGetVirtualServiceSpecProviderVirtualRouterOutput() GetVirtualServiceSpecProviderVirtualRouterOutput {
	return o
}

func (o GetVirtualServiceSpecProviderVirtualRouterOutput) ToGetVirtualServiceSpecProviderVirtualRouterOutputWithContext(ctx context.Context) GetVirtualServiceSpecProviderVirtualRouterOutput {
	return o
}

func (o GetVirtualServiceSpecProviderVirtualRouterOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualServiceSpecProviderVirtualRouter] {
	return pulumix.Output[GetVirtualServiceSpecProviderVirtualRouter]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualServiceSpecProviderVirtualRouterOutput) VirtualRouterName() pulumix.Output[string] {
	return pulumix.Apply[GetVirtualServiceSpecProviderVirtualRouter](o, func(v GetVirtualServiceSpecProviderVirtualRouter) string { return v.VirtualRouterName })
}

func init() {
	pulumi.RegisterOutputType(GatewayRouteSpecOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecGrpcRouteOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecGrpcRouteActionOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecGrpcRouteActionTargetOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecGrpcRouteMatchOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteActionOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteActionRewriteOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteActionRewriteHostnameOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteActionRewritePathOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteActionRewritePrefixOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteActionTargetOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteMatchOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteMatchHeaderOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteMatchHeaderMatchOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteMatchHostnameOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteMatchPathOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteMatchQueryParameterOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteActionOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteActionRewriteOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteActionRewriteHostnameOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteActionRewritePathOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteActionRewritePrefixOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteActionTargetOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteMatchOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteMatchHeaderOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteMatchHeaderMatchOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteMatchHostnameOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteMatchPathOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteMatchQueryParameterOutput{})
	pulumi.RegisterOutputType(GatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput{})
	pulumi.RegisterOutputType(MeshSpecOutput{})
	pulumi.RegisterOutputType(MeshSpecEgressFilterOutput{})
	pulumi.RegisterOutputType(RouteSpecOutput{})
	pulumi.RegisterOutputType(RouteSpecGrpcRouteOutput{})
	pulumi.RegisterOutputType(RouteSpecGrpcRouteActionOutput{})
	pulumi.RegisterOutputType(RouteSpecGrpcRouteActionWeightedTargetOutput{})
	pulumi.RegisterOutputType(RouteSpecGrpcRouteMatchOutput{})
	pulumi.RegisterOutputType(RouteSpecGrpcRouteMatchMetadataOutput{})
	pulumi.RegisterOutputType(RouteSpecGrpcRouteMatchMetadataMatchOutput{})
	pulumi.RegisterOutputType(RouteSpecGrpcRouteMatchMetadataMatchRangeOutput{})
	pulumi.RegisterOutputType(RouteSpecGrpcRouteRetryPolicyOutput{})
	pulumi.RegisterOutputType(RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput{})
	pulumi.RegisterOutputType(RouteSpecGrpcRouteTimeoutOutput{})
	pulumi.RegisterOutputType(RouteSpecGrpcRouteTimeoutIdleOutput{})
	pulumi.RegisterOutputType(RouteSpecGrpcRouteTimeoutPerRequestOutput{})
	pulumi.RegisterOutputType(RouteSpecHttp2RouteOutput{})
	pulumi.RegisterOutputType(RouteSpecHttp2RouteActionOutput{})
	pulumi.RegisterOutputType(RouteSpecHttp2RouteActionWeightedTargetOutput{})
	pulumi.RegisterOutputType(RouteSpecHttp2RouteMatchOutput{})
	pulumi.RegisterOutputType(RouteSpecHttp2RouteMatchHeaderOutput{})
	pulumi.RegisterOutputType(RouteSpecHttp2RouteMatchHeaderMatchOutput{})
	pulumi.RegisterOutputType(RouteSpecHttp2RouteMatchHeaderMatchRangeOutput{})
	pulumi.RegisterOutputType(RouteSpecHttp2RouteMatchPathOutput{})
	pulumi.RegisterOutputType(RouteSpecHttp2RouteMatchQueryParameterOutput{})
	pulumi.RegisterOutputType(RouteSpecHttp2RouteMatchQueryParameterMatchOutput{})
	pulumi.RegisterOutputType(RouteSpecHttp2RouteRetryPolicyOutput{})
	pulumi.RegisterOutputType(RouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput{})
	pulumi.RegisterOutputType(RouteSpecHttp2RouteTimeoutOutput{})
	pulumi.RegisterOutputType(RouteSpecHttp2RouteTimeoutIdleOutput{})
	pulumi.RegisterOutputType(RouteSpecHttp2RouteTimeoutPerRequestOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteActionOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteActionWeightedTargetOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteMatchOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteMatchHeaderOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteMatchHeaderMatchOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteMatchHeaderMatchRangeOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteMatchPathOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteMatchQueryParameterOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteMatchQueryParameterMatchOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteRetryPolicyOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteTimeoutOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteTimeoutIdleOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteTimeoutPerRequestOutput{})
	pulumi.RegisterOutputType(RouteSpecTcpRouteOutput{})
	pulumi.RegisterOutputType(RouteSpecTcpRouteActionOutput{})
	pulumi.RegisterOutputType(RouteSpecTcpRouteActionWeightedTargetOutput{})
	pulumi.RegisterOutputType(RouteSpecTcpRouteMatchOutput{})
	pulumi.RegisterOutputType(RouteSpecTcpRouteTimeoutOutput{})
	pulumi.RegisterOutputType(RouteSpecTcpRouteTimeoutIdleOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecBackendDefaultsOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecBackendDefaultsClientPolicyOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecBackendDefaultsClientPolicyTlsOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFileOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSdsOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerConnectionPoolOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerConnectionPoolGrpcOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerConnectionPoolHttp2Output{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerConnectionPoolHttpOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerHealthCheckOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerPortMappingOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerTlsOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerTlsCertificateOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerTlsCertificateAcmOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerTlsCertificateFileOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerTlsCertificateSdsOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerTlsValidationOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatchOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerTlsValidationTrustOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerTlsValidationTrustFileOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecListenerTlsValidationTrustSdsOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecLoggingOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecLoggingAccessLogOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecLoggingAccessLogFileOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecLoggingAccessLogFileFormatOutput{})
	pulumi.RegisterOutputType(VirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendDefaultsOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendDefaultsClientPolicyOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendDefaultsClientPolicyTlsOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendVirtualServiceOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendVirtualServiceClientPolicyOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerConnectionPoolOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerConnectionPoolGrpcOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerConnectionPoolHttp2Output{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerConnectionPoolHttpOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerConnectionPoolTcpOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerHealthCheckOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerOutlierDetectionOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerOutlierDetectionIntervalOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerPortMappingOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTimeoutOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTimeoutGrpcOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTimeoutGrpcIdleOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTimeoutGrpcPerRequestOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTimeoutHttp2Output{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTimeoutHttp2IdleOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTimeoutHttp2PerRequestOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTimeoutHttpOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTimeoutHttpIdleOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTimeoutHttpPerRequestOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTimeoutTcpOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTimeoutTcpIdleOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTlsOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTlsCertificateOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTlsCertificateAcmOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTlsCertificateFileOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTlsCertificateSdsOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTlsValidationOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTlsValidationTrustOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTlsValidationTrustFileOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerTlsValidationTrustSdsOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecLoggingOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecLoggingAccessLogOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecLoggingAccessLogFileOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecLoggingAccessLogFileFormatOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecLoggingAccessLogFileFormatJsonOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecServiceDiscoveryOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecServiceDiscoveryDnsOutput{})
	pulumi.RegisterOutputType(VirtualRouterSpecOutput{})
	pulumi.RegisterOutputType(VirtualRouterSpecListenerOutput{})
	pulumi.RegisterOutputType(VirtualRouterSpecListenerPortMappingOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecProviderOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecProviderVirtualNodeOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecProviderVirtualRouterOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecGrpcRouteOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecGrpcRouteActionOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecGrpcRouteActionTargetOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecGrpcRouteActionTargetVirtualServiceOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecGrpcRouteMatchOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteActionOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteActionRewriteOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteActionRewriteHostnameOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteActionRewritePathOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteActionRewritePrefixOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteActionTargetOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteActionTargetVirtualServiceOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteMatchOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteMatchHeaderOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteMatchHeaderMatchOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteMatchHeaderMatchRangeOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteMatchHostnameOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteMatchPathOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteMatchQueryParameterOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttp2RouteMatchQueryParameterMatchOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteActionOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteActionRewriteOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteActionRewriteHostnameOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteActionRewritePathOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteActionRewritePrefixOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteActionTargetOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteActionTargetVirtualServiceOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteMatchOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteMatchHeaderOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteMatchHeaderMatchOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteMatchHeaderMatchRangeOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteMatchHostnameOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteMatchPathOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteMatchQueryParameterOutput{})
	pulumi.RegisterOutputType(GetGatewayRouteSpecHttpRouteMatchQueryParameterMatchOutput{})
	pulumi.RegisterOutputType(GetMeshSpecOutput{})
	pulumi.RegisterOutputType(GetMeshSpecEgressFilterOutput{})
	pulumi.RegisterOutputType(GetRouteSpecOutput{})
	pulumi.RegisterOutputType(GetRouteSpecGrpcRouteOutput{})
	pulumi.RegisterOutputType(GetRouteSpecGrpcRouteActionOutput{})
	pulumi.RegisterOutputType(GetRouteSpecGrpcRouteActionWeightedTargetOutput{})
	pulumi.RegisterOutputType(GetRouteSpecGrpcRouteMatchOutput{})
	pulumi.RegisterOutputType(GetRouteSpecGrpcRouteMatchMetadataOutput{})
	pulumi.RegisterOutputType(GetRouteSpecGrpcRouteMatchMetadataMatchOutput{})
	pulumi.RegisterOutputType(GetRouteSpecGrpcRouteMatchMetadataMatchRangeOutput{})
	pulumi.RegisterOutputType(GetRouteSpecGrpcRouteRetryPolicyOutput{})
	pulumi.RegisterOutputType(GetRouteSpecGrpcRouteRetryPolicyPerRetryTimeoutOutput{})
	pulumi.RegisterOutputType(GetRouteSpecGrpcRouteTimeoutOutput{})
	pulumi.RegisterOutputType(GetRouteSpecGrpcRouteTimeoutIdleOutput{})
	pulumi.RegisterOutputType(GetRouteSpecGrpcRouteTimeoutPerRequestOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttp2RouteOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttp2RouteActionOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttp2RouteActionWeightedTargetOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttp2RouteMatchOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttp2RouteMatchHeaderOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttp2RouteMatchHeaderMatchOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttp2RouteMatchHeaderMatchRangeOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttp2RouteMatchPathOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttp2RouteMatchQueryParameterOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttp2RouteMatchQueryParameterMatchOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttp2RouteRetryPolicyOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttp2RouteRetryPolicyPerRetryTimeoutOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttp2RouteTimeoutOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttp2RouteTimeoutIdleOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttp2RouteTimeoutPerRequestOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttpRouteOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttpRouteActionOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttpRouteActionWeightedTargetOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttpRouteMatchOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttpRouteMatchHeaderOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttpRouteMatchHeaderMatchOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttpRouteMatchHeaderMatchRangeOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttpRouteMatchPathOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttpRouteMatchQueryParameterOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttpRouteMatchQueryParameterMatchOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttpRouteRetryPolicyOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttpRouteRetryPolicyPerRetryTimeoutOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttpRouteTimeoutOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttpRouteTimeoutIdleOutput{})
	pulumi.RegisterOutputType(GetRouteSpecHttpRouteTimeoutPerRequestOutput{})
	pulumi.RegisterOutputType(GetRouteSpecTcpRouteOutput{})
	pulumi.RegisterOutputType(GetRouteSpecTcpRouteActionOutput{})
	pulumi.RegisterOutputType(GetRouteSpecTcpRouteActionWeightedTargetOutput{})
	pulumi.RegisterOutputType(GetRouteSpecTcpRouteMatchOutput{})
	pulumi.RegisterOutputType(GetRouteSpecTcpRouteTimeoutOutput{})
	pulumi.RegisterOutputType(GetRouteSpecTcpRouteTimeoutIdleOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecBackendDefaultOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecBackendDefaultClientPolicyOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecBackendDefaultClientPolicyTlOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateFileOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecBackendDefaultClientPolicyTlCertificateSdOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustAcmOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustFileOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecBackendDefaultClientPolicyTlValidationTrustSdOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerConnectionPoolOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerConnectionPoolGrpcOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerConnectionPoolHttp2Output{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerConnectionPoolHttpOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerHealthCheckOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerPortMappingOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerTlOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerTlCertificateOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerTlCertificateAcmOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerTlCertificateFileOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerTlCertificateSdOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerTlValidationOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerTlValidationSubjectAlternativeNameMatchOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerTlValidationTrustOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerTlValidationTrustFileOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecListenerTlValidationTrustSdOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecLoggingOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecLoggingAccessLogOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecLoggingAccessLogFileOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecLoggingAccessLogFileFormatOutput{})
	pulumi.RegisterOutputType(GetVirtualGatewaySpecLoggingAccessLogFileFormatJsonOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendDefaultOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendDefaultClientPolicyOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendDefaultClientPolicyTlOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateFileOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendDefaultClientPolicyTlCertificateSdOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationSubjectAlternativeNameMatchOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustAcmOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustFileOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendDefaultClientPolicyTlValidationTrustSdOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendVirtualServiceOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendVirtualServiceClientPolicyOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateFileOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlCertificateSdOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationSubjectAlternativeNameMatchOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustAcmOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustFileOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecBackendVirtualServiceClientPolicyTlValidationTrustSdOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerConnectionPoolOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerConnectionPoolGrpcOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerConnectionPoolHttp2Output{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerConnectionPoolHttpOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerConnectionPoolTcpOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerHealthCheckOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerOutlierDetectionOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerOutlierDetectionIntervalOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerPortMappingOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTimeoutOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTimeoutGrpcOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTimeoutGrpcIdleOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTimeoutGrpcPerRequestOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTimeoutHttp2Output{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTimeoutHttp2IdleOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTimeoutHttp2PerRequestOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTimeoutHttpOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTimeoutHttpIdleOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTimeoutHttpPerRequestOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTimeoutTcpOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTimeoutTcpIdleOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTlOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTlCertificateOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTlCertificateAcmOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTlCertificateFileOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTlCertificateSdOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTlValidationOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTlValidationSubjectAlternativeNameMatchOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTlValidationTrustOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTlValidationTrustFileOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecListenerTlValidationTrustSdOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecLoggingOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecLoggingAccessLogOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecLoggingAccessLogFileOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecLoggingAccessLogFileFormatOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecLoggingAccessLogFileFormatJsonOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecServiceDiscoveryOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput{})
	pulumi.RegisterOutputType(GetVirtualNodeSpecServiceDiscoveryDnOutput{})
	pulumi.RegisterOutputType(GetVirtualRouterSpecOutput{})
	pulumi.RegisterOutputType(GetVirtualRouterSpecListenerOutput{})
	pulumi.RegisterOutputType(GetVirtualRouterSpecListenerPortMappingOutput{})
	pulumi.RegisterOutputType(GetVirtualServiceSpecOutput{})
	pulumi.RegisterOutputType(GetVirtualServiceSpecProviderOutput{})
	pulumi.RegisterOutputType(GetVirtualServiceSpecProviderVirtualNodeOutput{})
	pulumi.RegisterOutputType(GetVirtualServiceSpecProviderVirtualRouterOutput{})
}
