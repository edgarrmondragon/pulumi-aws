// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2clientvpn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get information on an EC2 Client VPN endpoint.
func LookupEndpoint(ctx *pulumi.Context, args *LookupEndpointArgs, opts ...pulumi.InvokeOption) (*LookupEndpointResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEndpointResult
	err := ctx.Invoke("aws:ec2clientvpn/getEndpoint:getEndpoint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEndpoint.
type LookupEndpointArgs struct {
	// ID of the Client VPN endpoint.
	ClientVpnEndpointId *string `pulumi:"clientVpnEndpointId"`
	// One or more configuration blocks containing name-values filters. Detailed below.
	Filters []GetEndpointFilter `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match a pair on the desired endpoint.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getEndpoint.
type LookupEndpointResult struct {
	// The ARN of the Client VPN endpoint.
	Arn string `pulumi:"arn"`
	// Information about the authentication method used by the Client VPN endpoint.
	AuthenticationOptions []GetEndpointAuthenticationOption `pulumi:"authenticationOptions"`
	// IPv4 address range, in CIDR notation, from which client IP addresses are assigned.
	ClientCidrBlock string `pulumi:"clientCidrBlock"`
	// The options for managing connection authorization for new client connections.
	ClientConnectOptions []GetEndpointClientConnectOption `pulumi:"clientConnectOptions"`
	// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
	ClientLoginBannerOptions []GetEndpointClientLoginBannerOption `pulumi:"clientLoginBannerOptions"`
	ClientVpnEndpointId      string                               `pulumi:"clientVpnEndpointId"`
	// Information about the client connection logging options for the Client VPN endpoint.
	ConnectionLogOptions []GetEndpointConnectionLogOption `pulumi:"connectionLogOptions"`
	// Brief description of the endpoint.
	Description string `pulumi:"description"`
	// DNS name to be used by clients when connecting to the Client VPN endpoint.
	DnsName string `pulumi:"dnsName"`
	// Information about the DNS servers to be used for DNS resolution.
	DnsServers []string            `pulumi:"dnsServers"`
	Filters    []GetEndpointFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// IDs of the security groups for the target network associated with the Client VPN endpoint.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Whether the self-service portal for the Client VPN endpoint is enabled.
	SelfServicePortal string `pulumi:"selfServicePortal"`
	// The ARN of the server certificate.
	ServerCertificateArn string `pulumi:"serverCertificateArn"`
	// The maximum VPN session duration time in hours.
	SessionTimeoutHours int `pulumi:"sessionTimeoutHours"`
	// Whether split-tunnel is enabled in the AWS Client VPN endpoint.
	SplitTunnel bool              `pulumi:"splitTunnel"`
	Tags        map[string]string `pulumi:"tags"`
	// Transport protocol used by the Client VPN endpoint.
	TransportProtocol string `pulumi:"transportProtocol"`
	// ID of the VPC associated with the Client VPN endpoint.
	VpcId string `pulumi:"vpcId"`
	// Port number for the Client VPN endpoint.
	VpnPort int `pulumi:"vpnPort"`
}

func LookupEndpointOutput(ctx *pulumi.Context, args LookupEndpointOutputArgs, opts ...pulumi.InvokeOption) LookupEndpointResultOutput {
	outputResult := pulumix.ApplyErr[*LookupEndpointArgs](args.ToOutput(), func(plainArgs *LookupEndpointArgs) (*LookupEndpointResult, error) {
		return LookupEndpoint(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupEndpointResultOutput, *LookupEndpointResult](outputResult)
}

// A collection of arguments for invoking getEndpoint.
type LookupEndpointOutputArgs struct {
	// ID of the Client VPN endpoint.
	ClientVpnEndpointId pulumix.Input[*string] `pulumi:"clientVpnEndpointId"`
	// One or more configuration blocks containing name-values filters. Detailed below.
	Filters pulumix.Input[[]*GetEndpointFilterArgs] `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match a pair on the desired endpoint.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupEndpointOutputArgs) ToOutput() pulumix.Output[*LookupEndpointArgs] {
	allArgs := pulumix.All(
		args.ClientVpnEndpointId.ToOutput(context.Background()).AsAny(),
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupEndpointArgs {
		return &LookupEndpointArgs{
			ClientVpnEndpointId: resolvedArgs[0].(*string),
			Filters:             resolvedArgs[1].([]GetEndpointFilter),
			Tags:                resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupEndpointResultOutput struct{ *pulumi.OutputState }

func (LookupEndpointResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEndpointResult)(nil)).Elem()
}

func (o LookupEndpointResultOutput) ToOutput(context.Context) pulumix.Output[*LookupEndpointResult] {
	return pulumix.Output[*LookupEndpointResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupEndpointResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.Arn })
}

func (o LookupEndpointResultOutput) AuthenticationOptions() pulumix.GArrayOutput[GetEndpointAuthenticationOption, GetEndpointAuthenticationOptionOutput] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) []GetEndpointAuthenticationOption { return v.AuthenticationOptions })
	return pulumix.GArrayOutput[GetEndpointAuthenticationOption, GetEndpointAuthenticationOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) ClientCidrBlock() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.ClientCidrBlock })
}

func (o LookupEndpointResultOutput) ClientConnectOptions() pulumix.GArrayOutput[GetEndpointClientConnectOption, GetEndpointClientConnectOptionOutput] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) []GetEndpointClientConnectOption { return v.ClientConnectOptions })
	return pulumix.GArrayOutput[GetEndpointClientConnectOption, GetEndpointClientConnectOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) ClientLoginBannerOptions() pulumix.GArrayOutput[GetEndpointClientLoginBannerOption, GetEndpointClientLoginBannerOptionOutput] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) []GetEndpointClientLoginBannerOption { return v.ClientLoginBannerOptions })
	return pulumix.GArrayOutput[GetEndpointClientLoginBannerOption, GetEndpointClientLoginBannerOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) ClientVpnEndpointId() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.ClientVpnEndpointId })
}

func (o LookupEndpointResultOutput) ConnectionLogOptions() pulumix.GArrayOutput[GetEndpointConnectionLogOption, GetEndpointConnectionLogOptionOutput] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) []GetEndpointConnectionLogOption { return v.ConnectionLogOptions })
	return pulumix.GArrayOutput[GetEndpointConnectionLogOption, GetEndpointConnectionLogOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.Description })
}

func (o LookupEndpointResultOutput) DnsName() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.DnsName })
}

func (o LookupEndpointResultOutput) DnsServers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) []string { return v.DnsServers })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) Filters() pulumix.GArrayOutput[GetEndpointFilter, GetEndpointFilterOutput] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) []GetEndpointFilter { return v.Filters })
	return pulumix.GArrayOutput[GetEndpointFilter, GetEndpointFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.Id })
}

func (o LookupEndpointResultOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) SelfServicePortal() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.SelfServicePortal })
}

func (o LookupEndpointResultOutput) ServerCertificateArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.ServerCertificateArn })
}

func (o LookupEndpointResultOutput) SessionTimeoutHours() pulumix.Output[int] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) int { return v.SessionTimeoutHours })
}

func (o LookupEndpointResultOutput) SplitTunnel() pulumix.Output[bool] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) bool { return v.SplitTunnel })
}

func (o LookupEndpointResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupEndpointResultOutput) TransportProtocol() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.TransportProtocol })
}

func (o LookupEndpointResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) string { return v.VpcId })
}

func (o LookupEndpointResultOutput) VpnPort() pulumix.Output[int] {
	return pulumix.Apply[*LookupEndpointResult](o, func(v *LookupEndpointResult) int { return v.VpnPort })
}
