// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CodeBuild Source Credentials Resource.
//
// > **NOTE:**
// [Codebuild only allows a single credential per given server type in a given region](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_codebuild.GitHubSourceCredentials.html). Therefore, when you define `codebuild.SourceCredential`, `codebuild.Project` resource defined in the same module will use it.
type SourceCredential struct {
	pulumi.CustomResourceState

	// The ARN of Source Credential.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API.
	AuthType pulumix.Output[string] `pulumi:"authType"`
	// The source provider used for this project.
	ServerType pulumix.Output[string] `pulumi:"serverType"`
	// For `GitHub` or `GitHub Enterprise`, this is the personal access token. For `Bitbucket`, this is the app password.
	Token pulumix.Output[string] `pulumi:"token"`
	// The Bitbucket username when the authType is `BASIC_AUTH`. This parameter is not valid for other types of source providers or connections.
	UserName pulumix.Output[*string] `pulumi:"userName"`
}

// NewSourceCredential registers a new resource with the given unique name, arguments, and options.
func NewSourceCredential(ctx *pulumi.Context,
	name string, args *SourceCredentialArgs, opts ...pulumi.ResourceOption) (*SourceCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthType == nil {
		return nil, errors.New("invalid value for required argument 'AuthType'")
	}
	if args.ServerType == nil {
		return nil, errors.New("invalid value for required argument 'ServerType'")
	}
	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	if args.Token != nil {
		untypedSecretValue := pulumi.ToSecret(args.Token.ToOutput(ctx.Context()).Untyped())
		args.Token = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceCredential
	err := ctx.RegisterResource("aws:codebuild/sourceCredential:SourceCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceCredential gets an existing SourceCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceCredentialState, opts ...pulumi.ResourceOption) (*SourceCredential, error) {
	var resource SourceCredential
	err := ctx.ReadResource("aws:codebuild/sourceCredential:SourceCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceCredential resources.
type sourceCredentialState struct {
	// The ARN of Source Credential.
	Arn *string `pulumi:"arn"`
	// The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API.
	AuthType *string `pulumi:"authType"`
	// The source provider used for this project.
	ServerType *string `pulumi:"serverType"`
	// For `GitHub` or `GitHub Enterprise`, this is the personal access token. For `Bitbucket`, this is the app password.
	Token *string `pulumi:"token"`
	// The Bitbucket username when the authType is `BASIC_AUTH`. This parameter is not valid for other types of source providers or connections.
	UserName *string `pulumi:"userName"`
}

type SourceCredentialState struct {
	// The ARN of Source Credential.
	Arn pulumix.Input[*string]
	// The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API.
	AuthType pulumix.Input[*string]
	// The source provider used for this project.
	ServerType pulumix.Input[*string]
	// For `GitHub` or `GitHub Enterprise`, this is the personal access token. For `Bitbucket`, this is the app password.
	Token pulumix.Input[*string]
	// The Bitbucket username when the authType is `BASIC_AUTH`. This parameter is not valid for other types of source providers or connections.
	UserName pulumix.Input[*string]
}

func (SourceCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceCredentialState)(nil)).Elem()
}

type sourceCredentialArgs struct {
	// The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API.
	AuthType string `pulumi:"authType"`
	// The source provider used for this project.
	ServerType string `pulumi:"serverType"`
	// For `GitHub` or `GitHub Enterprise`, this is the personal access token. For `Bitbucket`, this is the app password.
	Token string `pulumi:"token"`
	// The Bitbucket username when the authType is `BASIC_AUTH`. This parameter is not valid for other types of source providers or connections.
	UserName *string `pulumi:"userName"`
}

// The set of arguments for constructing a SourceCredential resource.
type SourceCredentialArgs struct {
	// The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API.
	AuthType pulumix.Input[string]
	// The source provider used for this project.
	ServerType pulumix.Input[string]
	// For `GitHub` or `GitHub Enterprise`, this is the personal access token. For `Bitbucket`, this is the app password.
	Token pulumix.Input[string]
	// The Bitbucket username when the authType is `BASIC_AUTH`. This parameter is not valid for other types of source providers or connections.
	UserName pulumix.Input[*string]
}

func (SourceCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceCredentialArgs)(nil)).Elem()
}

type SourceCredentialOutput struct{ *pulumi.OutputState }

func (SourceCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceCredential)(nil)).Elem()
}

func (o SourceCredentialOutput) ToSourceCredentialOutput() SourceCredentialOutput {
	return o
}

func (o SourceCredentialOutput) ToSourceCredentialOutputWithContext(ctx context.Context) SourceCredentialOutput {
	return o
}

func (o SourceCredentialOutput) ToOutput(ctx context.Context) pulumix.Output[SourceCredential] {
	return pulumix.Output[SourceCredential]{
		OutputState: o.OutputState,
	}
}

// The ARN of Source Credential.
func (o SourceCredentialOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[SourceCredential](o, func(v SourceCredential) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API.
func (o SourceCredentialOutput) AuthType() pulumix.Output[string] {
	value := pulumix.Apply[SourceCredential](o, func(v SourceCredential) pulumix.Output[string] { return v.AuthType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The source provider used for this project.
func (o SourceCredentialOutput) ServerType() pulumix.Output[string] {
	value := pulumix.Apply[SourceCredential](o, func(v SourceCredential) pulumix.Output[string] { return v.ServerType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// For `GitHub` or `GitHub Enterprise`, this is the personal access token. For `Bitbucket`, this is the app password.
func (o SourceCredentialOutput) Token() pulumix.Output[string] {
	value := pulumix.Apply[SourceCredential](o, func(v SourceCredential) pulumix.Output[string] { return v.Token })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Bitbucket username when the authType is `BASIC_AUTH`. This parameter is not valid for other types of source providers or connections.
func (o SourceCredentialOutput) UserName() pulumix.Output[*string] {
	value := pulumix.Apply[SourceCredential](o, func(v SourceCredential) pulumix.Output[*string] { return v.UserName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(SourceCredentialOutput{})
}
