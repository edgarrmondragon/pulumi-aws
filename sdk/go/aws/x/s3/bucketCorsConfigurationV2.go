// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an S3 bucket CORS configuration resource. For more information about CORS, go to [Enabling Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/userguide/cors.html) in the Amazon S3 User Guide.
//
// > **NOTE:** S3 Buckets only support a single CORS configuration. Declaring multiple `s3.BucketCorsConfigurationV2` resources to the same S3 Bucket will cause a perpetual difference in configuration.
type BucketCorsConfigurationV2 struct {
	pulumi.CustomResourceState

	// Name of the bucket.
	Bucket pulumix.Output[string] `pulumi:"bucket"`
	// Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
	CorsRules pulumix.GArrayOutput[BucketCorsConfigurationV2CorsRule, BucketCorsConfigurationV2CorsRuleOutput] `pulumi:"corsRules"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumix.Output[*string] `pulumi:"expectedBucketOwner"`
}

// NewBucketCorsConfigurationV2 registers a new resource with the given unique name, arguments, and options.
func NewBucketCorsConfigurationV2(ctx *pulumi.Context,
	name string, args *BucketCorsConfigurationV2Args, opts ...pulumi.ResourceOption) (*BucketCorsConfigurationV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.CorsRules == nil {
		return nil, errors.New("invalid value for required argument 'CorsRules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketCorsConfigurationV2
	err := ctx.RegisterResource("aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketCorsConfigurationV2 gets an existing BucketCorsConfigurationV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketCorsConfigurationV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketCorsConfigurationV2State, opts ...pulumi.ResourceOption) (*BucketCorsConfigurationV2, error) {
	var resource BucketCorsConfigurationV2
	err := ctx.ReadResource("aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketCorsConfigurationV2 resources.
type bucketCorsConfigurationV2State struct {
	// Name of the bucket.
	Bucket *string `pulumi:"bucket"`
	// Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
	CorsRules []BucketCorsConfigurationV2CorsRule `pulumi:"corsRules"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
}

type BucketCorsConfigurationV2State struct {
	// Name of the bucket.
	Bucket pulumix.Input[*string]
	// Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
	CorsRules pulumix.Input[[]*BucketCorsConfigurationV2CorsRuleArgs]
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumix.Input[*string]
}

func (BucketCorsConfigurationV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketCorsConfigurationV2State)(nil)).Elem()
}

type bucketCorsConfigurationV2Args struct {
	// Name of the bucket.
	Bucket string `pulumi:"bucket"`
	// Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
	CorsRules []BucketCorsConfigurationV2CorsRule `pulumi:"corsRules"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
}

// The set of arguments for constructing a BucketCorsConfigurationV2 resource.
type BucketCorsConfigurationV2Args struct {
	// Name of the bucket.
	Bucket pulumix.Input[string]
	// Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
	CorsRules pulumix.Input[[]*BucketCorsConfigurationV2CorsRuleArgs]
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumix.Input[*string]
}

func (BucketCorsConfigurationV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketCorsConfigurationV2Args)(nil)).Elem()
}

type BucketCorsConfigurationV2Output struct{ *pulumi.OutputState }

func (BucketCorsConfigurationV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketCorsConfigurationV2)(nil)).Elem()
}

func (o BucketCorsConfigurationV2Output) ToBucketCorsConfigurationV2Output() BucketCorsConfigurationV2Output {
	return o
}

func (o BucketCorsConfigurationV2Output) ToBucketCorsConfigurationV2OutputWithContext(ctx context.Context) BucketCorsConfigurationV2Output {
	return o
}

func (o BucketCorsConfigurationV2Output) ToOutput(ctx context.Context) pulumix.Output[BucketCorsConfigurationV2] {
	return pulumix.Output[BucketCorsConfigurationV2]{
		OutputState: o.OutputState,
	}
}

// Name of the bucket.
func (o BucketCorsConfigurationV2Output) Bucket() pulumix.Output[string] {
	value := pulumix.Apply[BucketCorsConfigurationV2](o, func(v BucketCorsConfigurationV2) pulumix.Output[string] { return v.Bucket })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
func (o BucketCorsConfigurationV2Output) CorsRules() pulumix.GArrayOutput[BucketCorsConfigurationV2CorsRule, BucketCorsConfigurationV2CorsRuleOutput] {
	value := pulumix.Apply[BucketCorsConfigurationV2](o, func(v BucketCorsConfigurationV2) pulumix.GArrayOutput[BucketCorsConfigurationV2CorsRule, BucketCorsConfigurationV2CorsRuleOutput] {
		return v.CorsRules
	})
	unwrapped := pulumix.Flatten[[]BucketCorsConfigurationV2CorsRule, pulumix.GArrayOutput[BucketCorsConfigurationV2CorsRule, BucketCorsConfigurationV2CorsRuleOutput]](value)
	return pulumix.GArrayOutput[BucketCorsConfigurationV2CorsRule, BucketCorsConfigurationV2CorsRuleOutput]{OutputState: unwrapped.OutputState}
}

// Account ID of the expected bucket owner.
func (o BucketCorsConfigurationV2Output) ExpectedBucketOwner() pulumix.Output[*string] {
	value := pulumix.Apply[BucketCorsConfigurationV2](o, func(v BucketCorsConfigurationV2) pulumix.Output[*string] { return v.ExpectedBucketOwner })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(BucketCorsConfigurationV2Output{})
}
