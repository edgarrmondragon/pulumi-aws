// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SnapshotScheduleAssociation struct {
	pulumi.CustomResourceState

	// The cluster identifier.
	ClusterIdentifier pulumix.Output[string] `pulumi:"clusterIdentifier"`
	// The snapshot schedule identifier.
	ScheduleIdentifier pulumix.Output[string] `pulumi:"scheduleIdentifier"`
}

// NewSnapshotScheduleAssociation registers a new resource with the given unique name, arguments, and options.
func NewSnapshotScheduleAssociation(ctx *pulumi.Context,
	name string, args *SnapshotScheduleAssociationArgs, opts ...pulumi.ResourceOption) (*SnapshotScheduleAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ClusterIdentifier'")
	}
	if args.ScheduleIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ScheduleIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnapshotScheduleAssociation
	err := ctx.RegisterResource("aws:redshift/snapshotScheduleAssociation:SnapshotScheduleAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotScheduleAssociation gets an existing SnapshotScheduleAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotScheduleAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotScheduleAssociationState, opts ...pulumi.ResourceOption) (*SnapshotScheduleAssociation, error) {
	var resource SnapshotScheduleAssociation
	err := ctx.ReadResource("aws:redshift/snapshotScheduleAssociation:SnapshotScheduleAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotScheduleAssociation resources.
type snapshotScheduleAssociationState struct {
	// The cluster identifier.
	ClusterIdentifier *string `pulumi:"clusterIdentifier"`
	// The snapshot schedule identifier.
	ScheduleIdentifier *string `pulumi:"scheduleIdentifier"`
}

type SnapshotScheduleAssociationState struct {
	// The cluster identifier.
	ClusterIdentifier pulumix.Input[*string]
	// The snapshot schedule identifier.
	ScheduleIdentifier pulumix.Input[*string]
}

func (SnapshotScheduleAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotScheduleAssociationState)(nil)).Elem()
}

type snapshotScheduleAssociationArgs struct {
	// The cluster identifier.
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
	// The snapshot schedule identifier.
	ScheduleIdentifier string `pulumi:"scheduleIdentifier"`
}

// The set of arguments for constructing a SnapshotScheduleAssociation resource.
type SnapshotScheduleAssociationArgs struct {
	// The cluster identifier.
	ClusterIdentifier pulumix.Input[string]
	// The snapshot schedule identifier.
	ScheduleIdentifier pulumix.Input[string]
}

func (SnapshotScheduleAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotScheduleAssociationArgs)(nil)).Elem()
}

type SnapshotScheduleAssociationOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleAssociation)(nil)).Elem()
}

func (o SnapshotScheduleAssociationOutput) ToSnapshotScheduleAssociationOutput() SnapshotScheduleAssociationOutput {
	return o
}

func (o SnapshotScheduleAssociationOutput) ToSnapshotScheduleAssociationOutputWithContext(ctx context.Context) SnapshotScheduleAssociationOutput {
	return o
}

func (o SnapshotScheduleAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[SnapshotScheduleAssociation] {
	return pulumix.Output[SnapshotScheduleAssociation]{
		OutputState: o.OutputState,
	}
}

// The cluster identifier.
func (o SnapshotScheduleAssociationOutput) ClusterIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotScheduleAssociation](o, func(v SnapshotScheduleAssociation) pulumix.Output[string] { return v.ClusterIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The snapshot schedule identifier.
func (o SnapshotScheduleAssociationOutput) ScheduleIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotScheduleAssociation](o, func(v SnapshotScheduleAssociation) pulumix.Output[string] { return v.ScheduleIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SnapshotScheduleAssociationOutput{})
}
