// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package timestreamwrite

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type TableMagneticStoreWriteProperties struct {
	// A flag to enable magnetic store writes.
	EnableMagneticStoreWrites *bool `pulumi:"enableMagneticStoreWrites"`
	// The location to write error reports for records rejected asynchronously during magnetic store writes. See Magnetic Store Rejected Data Location below for more details.
	MagneticStoreRejectedDataLocation *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation `pulumi:"magneticStoreRejectedDataLocation"`
}

type TableMagneticStoreWritePropertiesArgs struct {
	// A flag to enable magnetic store writes.
	EnableMagneticStoreWrites pulumix.Input[*bool] `pulumi:"enableMagneticStoreWrites"`
	// The location to write error reports for records rejected asynchronously during magnetic store writes. See Magnetic Store Rejected Data Location below for more details.
	MagneticStoreRejectedDataLocation pulumix.Input[*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs] `pulumi:"magneticStoreRejectedDataLocation"`
}

func (TableMagneticStoreWritePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMagneticStoreWriteProperties)(nil)).Elem()
}

func (i TableMagneticStoreWritePropertiesArgs) ToTableMagneticStoreWritePropertiesOutput() TableMagneticStoreWritePropertiesOutput {
	return i.ToTableMagneticStoreWritePropertiesOutputWithContext(context.Background())
}

func (i TableMagneticStoreWritePropertiesArgs) ToTableMagneticStoreWritePropertiesOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMagneticStoreWritePropertiesOutput)
}

func (i *TableMagneticStoreWritePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*TableMagneticStoreWritePropertiesArgs] {
	return pulumix.Val(i)
}

type TableMagneticStoreWritePropertiesOutput struct{ *pulumi.OutputState }

func (TableMagneticStoreWritePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMagneticStoreWriteProperties)(nil)).Elem()
}

func (o TableMagneticStoreWritePropertiesOutput) ToTableMagneticStoreWritePropertiesOutput() TableMagneticStoreWritePropertiesOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesOutput) ToTableMagneticStoreWritePropertiesOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[TableMagneticStoreWriteProperties] {
	return pulumix.Output[TableMagneticStoreWriteProperties]{
		OutputState: o.OutputState,
	}
}

// A flag to enable magnetic store writes.
func (o TableMagneticStoreWritePropertiesOutput) EnableMagneticStoreWrites() pulumix.Output[*bool] {
	return pulumix.Apply[TableMagneticStoreWriteProperties](o, func(v TableMagneticStoreWriteProperties) *bool { return v.EnableMagneticStoreWrites })
}

// The location to write error reports for records rejected asynchronously during magnetic store writes. See Magnetic Store Rejected Data Location below for more details.
func (o TableMagneticStoreWritePropertiesOutput) MagneticStoreRejectedDataLocation() pulumix.GPtrOutput[TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation, TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput] {
	value := pulumix.Apply[TableMagneticStoreWriteProperties](o, func(v TableMagneticStoreWriteProperties) *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation {
		return v.MagneticStoreRejectedDataLocation
	})
	return pulumix.GPtrOutput[TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation, TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput]{OutputState: value.OutputState}
}

type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation struct {
	// Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes. See S3 Configuration below for more details.
	S3Configuration *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration `pulumi:"s3Configuration"`
}

type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs struct {
	// Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes. See S3 Configuration below for more details.
	S3Configuration pulumix.Input[*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs] `pulumi:"s3Configuration"`
}

func (TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation)(nil)).Elem()
}

func (i TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput {
	return i.ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutputWithContext(context.Background())
}

func (i TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput)
}

func (i *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs] {
	return pulumix.Val(i)
}

type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput struct{ *pulumi.OutputState }

func (TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation)(nil)).Elem()
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput) ToOutput(ctx context.Context) pulumix.Output[TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation] {
	return pulumix.Output[TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation]{
		OutputState: o.OutputState,
	}
}

// Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes. See S3 Configuration below for more details.
func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput) S3Configuration() pulumix.GPtrOutput[TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration, TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput] {
	value := pulumix.Apply[TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation](o, func(v TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation) *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration {
		return v.S3Configuration
	})
	return pulumix.GPtrOutput[TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration, TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput]{OutputState: value.OutputState}
}

type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration struct {
	// Bucket name of the customer S3 bucket.
	BucketName *string `pulumi:"bucketName"`
	// Encryption option for the customer s3 location. Options are S3 server side encryption with an S3-managed key or KMS managed key. Valid values are `SSE_KMS` and `SSE_S3`.
	EncryptionOption *string `pulumi:"encryptionOption"`
	// KMS key arn for the customer s3 location when encrypting with a KMS managed key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Object key prefix for the customer S3 location.
	ObjectKeyPrefix *string `pulumi:"objectKeyPrefix"`
}

type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs struct {
	// Bucket name of the customer S3 bucket.
	BucketName pulumix.Input[*string] `pulumi:"bucketName"`
	// Encryption option for the customer s3 location. Options are S3 server side encryption with an S3-managed key or KMS managed key. Valid values are `SSE_KMS` and `SSE_S3`.
	EncryptionOption pulumix.Input[*string] `pulumi:"encryptionOption"`
	// KMS key arn for the customer s3 location when encrypting with a KMS managed key.
	KmsKeyId pulumix.Input[*string] `pulumi:"kmsKeyId"`
	// Object key prefix for the customer S3 location.
	ObjectKeyPrefix pulumix.Input[*string] `pulumi:"objectKeyPrefix"`
}

func (TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration)(nil)).Elem()
}

func (i TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput {
	return i.ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutputWithContext(context.Background())
}

func (i TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput)
}

func (i *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs] {
	return pulumix.Val(i)
}

type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput struct{ *pulumi.OutputState }

func (TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration)(nil)).Elem()
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration] {
	return pulumix.Output[TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration]{
		OutputState: o.OutputState,
	}
}

// Bucket name of the customer S3 bucket.
func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) BucketName() pulumix.Output[*string] {
	return pulumix.Apply[TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration](o, func(v TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration) *string {
		return v.BucketName
	})
}

// Encryption option for the customer s3 location. Options are S3 server side encryption with an S3-managed key or KMS managed key. Valid values are `SSE_KMS` and `SSE_S3`.
func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) EncryptionOption() pulumix.Output[*string] {
	return pulumix.Apply[TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration](o, func(v TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration) *string {
		return v.EncryptionOption
	})
}

// KMS key arn for the customer s3 location when encrypting with a KMS managed key.
func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) KmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration](o, func(v TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration) *string {
		return v.KmsKeyId
	})
}

// Object key prefix for the customer S3 location.
func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) ObjectKeyPrefix() pulumix.Output[*string] {
	return pulumix.Apply[TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration](o, func(v TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration) *string {
		return v.ObjectKeyPrefix
	})
}

type TableRetentionProperties struct {
	// The duration for which data must be stored in the magnetic store. Minimum value of 1. Maximum value of 73000.
	MagneticStoreRetentionPeriodInDays int `pulumi:"magneticStoreRetentionPeriodInDays"`
	// The duration for which data must be stored in the memory store. Minimum value of 1. Maximum value of 8766.
	MemoryStoreRetentionPeriodInHours int `pulumi:"memoryStoreRetentionPeriodInHours"`
}

type TableRetentionPropertiesArgs struct {
	// The duration for which data must be stored in the magnetic store. Minimum value of 1. Maximum value of 73000.
	MagneticStoreRetentionPeriodInDays pulumix.Input[int] `pulumi:"magneticStoreRetentionPeriodInDays"`
	// The duration for which data must be stored in the memory store. Minimum value of 1. Maximum value of 8766.
	MemoryStoreRetentionPeriodInHours pulumix.Input[int] `pulumi:"memoryStoreRetentionPeriodInHours"`
}

func (TableRetentionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRetentionProperties)(nil)).Elem()
}

func (i TableRetentionPropertiesArgs) ToTableRetentionPropertiesOutput() TableRetentionPropertiesOutput {
	return i.ToTableRetentionPropertiesOutputWithContext(context.Background())
}

func (i TableRetentionPropertiesArgs) ToTableRetentionPropertiesOutputWithContext(ctx context.Context) TableRetentionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRetentionPropertiesOutput)
}

func (i *TableRetentionPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*TableRetentionPropertiesArgs] {
	return pulumix.Val(i)
}

type TableRetentionPropertiesOutput struct{ *pulumi.OutputState }

func (TableRetentionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRetentionProperties)(nil)).Elem()
}

func (o TableRetentionPropertiesOutput) ToTableRetentionPropertiesOutput() TableRetentionPropertiesOutput {
	return o
}

func (o TableRetentionPropertiesOutput) ToTableRetentionPropertiesOutputWithContext(ctx context.Context) TableRetentionPropertiesOutput {
	return o
}

func (o TableRetentionPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[TableRetentionProperties] {
	return pulumix.Output[TableRetentionProperties]{
		OutputState: o.OutputState,
	}
}

// The duration for which data must be stored in the magnetic store. Minimum value of 1. Maximum value of 73000.
func (o TableRetentionPropertiesOutput) MagneticStoreRetentionPeriodInDays() pulumix.Output[int] {
	return pulumix.Apply[TableRetentionProperties](o, func(v TableRetentionProperties) int { return v.MagneticStoreRetentionPeriodInDays })
}

// The duration for which data must be stored in the memory store. Minimum value of 1. Maximum value of 8766.
func (o TableRetentionPropertiesOutput) MemoryStoreRetentionPeriodInHours() pulumix.Output[int] {
	return pulumix.Apply[TableRetentionProperties](o, func(v TableRetentionProperties) int { return v.MemoryStoreRetentionPeriodInHours })
}

type TableSchema struct {
	// A non-empty list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed. See Composite Partition Key below for more details.
	CompositePartitionKey *TableSchemaCompositePartitionKey `pulumi:"compositePartitionKey"`
}

type TableSchemaArgs struct {
	// A non-empty list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed. See Composite Partition Key below for more details.
	CompositePartitionKey pulumix.Input[*TableSchemaCompositePartitionKeyArgs] `pulumi:"compositePartitionKey"`
}

func (TableSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchema)(nil)).Elem()
}

func (i TableSchemaArgs) ToTableSchemaOutput() TableSchemaOutput {
	return i.ToTableSchemaOutputWithContext(context.Background())
}

func (i TableSchemaArgs) ToTableSchemaOutputWithContext(ctx context.Context) TableSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaOutput)
}

func (i *TableSchemaArgs) ToOutput(ctx context.Context) pulumix.Output[*TableSchemaArgs] {
	return pulumix.Val(i)
}

type TableSchemaOutput struct{ *pulumi.OutputState }

func (TableSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchema)(nil)).Elem()
}

func (o TableSchemaOutput) ToTableSchemaOutput() TableSchemaOutput {
	return o
}

func (o TableSchemaOutput) ToTableSchemaOutputWithContext(ctx context.Context) TableSchemaOutput {
	return o
}

func (o TableSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[TableSchema] {
	return pulumix.Output[TableSchema]{
		OutputState: o.OutputState,
	}
}

// A non-empty list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed. See Composite Partition Key below for more details.
func (o TableSchemaOutput) CompositePartitionKey() pulumix.GPtrOutput[TableSchemaCompositePartitionKey, TableSchemaCompositePartitionKeyOutput] {
	value := pulumix.Apply[TableSchema](o, func(v TableSchema) *TableSchemaCompositePartitionKey { return v.CompositePartitionKey })
	return pulumix.GPtrOutput[TableSchemaCompositePartitionKey, TableSchemaCompositePartitionKeyOutput]{OutputState: value.OutputState}
}

type TableSchemaCompositePartitionKey struct {
	// The level of enforcement for the specification of a dimension key in ingested records. Valid values: `REQUIRED`, `OPTIONAL`.
	EnforcementInRecord *string `pulumi:"enforcementInRecord"`
	// The name of the attribute used for a dimension key.
	Name *string `pulumi:"name"`
	// The type of the partition key. Valid values: `DIMENSION`, `MEASURE`.
	Type string `pulumi:"type"`
}

type TableSchemaCompositePartitionKeyArgs struct {
	// The level of enforcement for the specification of a dimension key in ingested records. Valid values: `REQUIRED`, `OPTIONAL`.
	EnforcementInRecord pulumix.Input[*string] `pulumi:"enforcementInRecord"`
	// The name of the attribute used for a dimension key.
	Name pulumix.Input[*string] `pulumi:"name"`
	// The type of the partition key. Valid values: `DIMENSION`, `MEASURE`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (TableSchemaCompositePartitionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaCompositePartitionKey)(nil)).Elem()
}

func (i TableSchemaCompositePartitionKeyArgs) ToTableSchemaCompositePartitionKeyOutput() TableSchemaCompositePartitionKeyOutput {
	return i.ToTableSchemaCompositePartitionKeyOutputWithContext(context.Background())
}

func (i TableSchemaCompositePartitionKeyArgs) ToTableSchemaCompositePartitionKeyOutputWithContext(ctx context.Context) TableSchemaCompositePartitionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaCompositePartitionKeyOutput)
}

func (i *TableSchemaCompositePartitionKeyArgs) ToOutput(ctx context.Context) pulumix.Output[*TableSchemaCompositePartitionKeyArgs] {
	return pulumix.Val(i)
}

type TableSchemaCompositePartitionKeyOutput struct{ *pulumi.OutputState }

func (TableSchemaCompositePartitionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaCompositePartitionKey)(nil)).Elem()
}

func (o TableSchemaCompositePartitionKeyOutput) ToTableSchemaCompositePartitionKeyOutput() TableSchemaCompositePartitionKeyOutput {
	return o
}

func (o TableSchemaCompositePartitionKeyOutput) ToTableSchemaCompositePartitionKeyOutputWithContext(ctx context.Context) TableSchemaCompositePartitionKeyOutput {
	return o
}

func (o TableSchemaCompositePartitionKeyOutput) ToOutput(ctx context.Context) pulumix.Output[TableSchemaCompositePartitionKey] {
	return pulumix.Output[TableSchemaCompositePartitionKey]{
		OutputState: o.OutputState,
	}
}

// The level of enforcement for the specification of a dimension key in ingested records. Valid values: `REQUIRED`, `OPTIONAL`.
func (o TableSchemaCompositePartitionKeyOutput) EnforcementInRecord() pulumix.Output[*string] {
	return pulumix.Apply[TableSchemaCompositePartitionKey](o, func(v TableSchemaCompositePartitionKey) *string { return v.EnforcementInRecord })
}

// The name of the attribute used for a dimension key.
func (o TableSchemaCompositePartitionKeyOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[TableSchemaCompositePartitionKey](o, func(v TableSchemaCompositePartitionKey) *string { return v.Name })
}

// The type of the partition key. Valid values: `DIMENSION`, `MEASURE`.
func (o TableSchemaCompositePartitionKeyOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[TableSchemaCompositePartitionKey](o, func(v TableSchemaCompositePartitionKey) string { return v.Type })
}

func init() {
	pulumi.RegisterOutputType(TableMagneticStoreWritePropertiesOutput{})
	pulumi.RegisterOutputType(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput{})
	pulumi.RegisterOutputType(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput{})
	pulumi.RegisterOutputType(TableRetentionPropertiesOutput{})
	pulumi.RegisterOutputType(TableSchemaOutput{})
	pulumi.RegisterOutputType(TableSchemaCompositePartitionKeyOutput{})
}
