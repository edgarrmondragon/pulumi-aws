// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a Lambda Layer Version.
func LookupLayerVersion(ctx *pulumi.Context, args *LookupLayerVersionArgs, opts ...pulumi.InvokeOption) (*LookupLayerVersionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLayerVersionResult
	err := ctx.Invoke("aws:lambda/getLayerVersion:getLayerVersion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLayerVersion.
type LookupLayerVersionArgs struct {
	// Specific architecture the layer version could support. Conflicts with `version`. If specified, the latest available layer version supporting the provided architecture will be used.
	CompatibleArchitecture *string `pulumi:"compatibleArchitecture"`
	// Specific runtime the layer version must support. Conflicts with `version`. If specified, the latest available layer version supporting the provided runtime will be used.
	CompatibleRuntime *string `pulumi:"compatibleRuntime"`
	// Name of the lambda layer.
	LayerName string `pulumi:"layerName"`
	// Specific layer version. Conflicts with `compatibleRuntime` and `compatibleArchitecture`. If omitted, the latest available layer version will be used.
	Version *int `pulumi:"version"`
}

// A collection of values returned by getLayerVersion.
type LookupLayerVersionResult struct {
	// ARN of the Lambda Layer with version.
	Arn                    string  `pulumi:"arn"`
	CompatibleArchitecture *string `pulumi:"compatibleArchitecture"`
	// A list of [Architectures](https://docs.aws.amazon.com/lambda/latest/dg/API_GetLayerVersion.html#SSS-GetLayerVersion-response-CompatibleArchitectures) the specific Lambda Layer version is compatible with.
	CompatibleArchitectures []string `pulumi:"compatibleArchitectures"`
	CompatibleRuntime       *string  `pulumi:"compatibleRuntime"`
	// List of [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_GetLayerVersion.html#SSS-GetLayerVersion-response-CompatibleRuntimes) the specific Lambda Layer version is compatible with.
	CompatibleRuntimes []string `pulumi:"compatibleRuntimes"`
	// Date this resource was created.
	CreatedDate string `pulumi:"createdDate"`
	// Description of the specific Lambda Layer version.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN of the Lambda Layer without version.
	LayerArn  string `pulumi:"layerArn"`
	LayerName string `pulumi:"layerName"`
	// License info associated with the specific Lambda Layer version.
	LicenseInfo string `pulumi:"licenseInfo"`
	// ARN of a signing job.
	SigningJobArn string `pulumi:"signingJobArn"`
	// The ARN for a signing profile version.
	SigningProfileVersionArn string `pulumi:"signingProfileVersionArn"`
	// Base64-encoded representation of raw SHA-256 sum of the zip file.
	SourceCodeHash string `pulumi:"sourceCodeHash"`
	// Size in bytes of the function .zip file.
	SourceCodeSize int `pulumi:"sourceCodeSize"`
	// This Lamba Layer version.
	Version int `pulumi:"version"`
}

func LookupLayerVersionOutput(ctx *pulumi.Context, args LookupLayerVersionOutputArgs, opts ...pulumi.InvokeOption) LookupLayerVersionResultOutput {
	outputResult := pulumix.ApplyErr[*LookupLayerVersionArgs](args.ToOutput(), func(plainArgs *LookupLayerVersionArgs) (*LookupLayerVersionResult, error) {
		return LookupLayerVersion(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupLayerVersionResultOutput, *LookupLayerVersionResult](outputResult)
}

// A collection of arguments for invoking getLayerVersion.
type LookupLayerVersionOutputArgs struct {
	// Specific architecture the layer version could support. Conflicts with `version`. If specified, the latest available layer version supporting the provided architecture will be used.
	CompatibleArchitecture pulumix.Input[*string] `pulumi:"compatibleArchitecture"`
	// Specific runtime the layer version must support. Conflicts with `version`. If specified, the latest available layer version supporting the provided runtime will be used.
	CompatibleRuntime pulumix.Input[*string] `pulumi:"compatibleRuntime"`
	// Name of the lambda layer.
	LayerName pulumix.Input[string] `pulumi:"layerName"`
	// Specific layer version. Conflicts with `compatibleRuntime` and `compatibleArchitecture`. If omitted, the latest available layer version will be used.
	Version pulumix.Input[*int] `pulumi:"version"`
}

func (args LookupLayerVersionOutputArgs) ToOutput() pulumix.Output[*LookupLayerVersionArgs] {
	allArgs := pulumix.All(
		args.CompatibleArchitecture.ToOutput(context.Background()).AsAny(),
		args.CompatibleRuntime.ToOutput(context.Background()).AsAny(),
		args.LayerName.ToOutput(context.Background()).AsAny(),
		args.Version.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupLayerVersionArgs {
		return &LookupLayerVersionArgs{
			CompatibleArchitecture: resolvedArgs[0].(*string),
			CompatibleRuntime:      resolvedArgs[1].(*string),
			LayerName:              resolvedArgs[2].(string),
			Version:                resolvedArgs[3].(*int),
		}
	})
}

type LookupLayerVersionResultOutput struct{ *pulumi.OutputState }

func (LookupLayerVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLayerVersionResult)(nil)).Elem()
}

func (o LookupLayerVersionResultOutput) ToOutput(context.Context) pulumix.Output[*LookupLayerVersionResult] {
	return pulumix.Output[*LookupLayerVersionResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupLayerVersionResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) string { return v.Arn })
}

func (o LookupLayerVersionResultOutput) CompatibleArchitecture() pulumix.Output[*string] {
	return pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) *string { return v.CompatibleArchitecture })
}

func (o LookupLayerVersionResultOutput) CompatibleArchitectures() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) []string { return v.CompatibleArchitectures })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupLayerVersionResultOutput) CompatibleRuntime() pulumix.Output[*string] {
	return pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) *string { return v.CompatibleRuntime })
}

func (o LookupLayerVersionResultOutput) CompatibleRuntimes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) []string { return v.CompatibleRuntimes })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupLayerVersionResultOutput) CreatedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) string { return v.CreatedDate })
}

func (o LookupLayerVersionResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) string { return v.Description })
}

func (o LookupLayerVersionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) string { return v.Id })
}

func (o LookupLayerVersionResultOutput) LayerArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) string { return v.LayerArn })
}

func (o LookupLayerVersionResultOutput) LayerName() pulumix.Output[string] {
	return pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) string { return v.LayerName })
}

func (o LookupLayerVersionResultOutput) LicenseInfo() pulumix.Output[string] {
	return pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) string { return v.LicenseInfo })
}

func (o LookupLayerVersionResultOutput) SigningJobArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) string { return v.SigningJobArn })
}

func (o LookupLayerVersionResultOutput) SigningProfileVersionArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) string { return v.SigningProfileVersionArn })
}

func (o LookupLayerVersionResultOutput) SourceCodeHash() pulumix.Output[string] {
	return pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) string { return v.SourceCodeHash })
}

func (o LookupLayerVersionResultOutput) SourceCodeSize() pulumix.Output[int] {
	return pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) int { return v.SourceCodeSize })
}

func (o LookupLayerVersionResultOutput) Version() pulumix.Output[int] {
	return pulumix.Apply[*LookupLayerVersionResult](o, func(v *LookupLayerVersionResult) int { return v.Version })
}
