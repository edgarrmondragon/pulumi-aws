// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Network Insights Path resource. Part of the "Reachability Analyzer" service in the AWS VPC console.
type NetworkInsightsPath struct {
	pulumi.CustomResourceState

	// ARN of the Network Insights Path.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
	Destination pulumix.Output[string] `pulumi:"destination"`
	// ARN of the destination.
	DestinationArn pulumix.Output[string] `pulumi:"destinationArn"`
	// IP address of the destination resource.
	DestinationIp pulumix.Output[*string] `pulumi:"destinationIp"`
	// Destination port to analyze access to.
	DestinationPort pulumix.Output[*int] `pulumi:"destinationPort"`
	// Protocol to use for analysis. Valid options are `tcp` or `udp`.
	//
	// The following arguments are optional:
	Protocol pulumix.Output[string] `pulumi:"protocol"`
	// ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
	Source pulumix.Output[string] `pulumi:"source"`
	// ARN of the source.
	SourceArn pulumix.Output[string] `pulumi:"sourceArn"`
	// IP address of the source resource.
	SourceIp pulumix.Output[*string] `pulumi:"sourceIp"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewNetworkInsightsPath registers a new resource with the given unique name, arguments, and options.
func NewNetworkInsightsPath(ctx *pulumi.Context,
	name string, args *NetworkInsightsPathArgs, opts ...pulumi.ResourceOption) (*NetworkInsightsPath, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkInsightsPath
	err := ctx.RegisterResource("aws:ec2/networkInsightsPath:NetworkInsightsPath", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInsightsPath gets an existing NetworkInsightsPath resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInsightsPath(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkInsightsPathState, opts ...pulumi.ResourceOption) (*NetworkInsightsPath, error) {
	var resource NetworkInsightsPath
	err := ctx.ReadResource("aws:ec2/networkInsightsPath:NetworkInsightsPath", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkInsightsPath resources.
type networkInsightsPathState struct {
	// ARN of the Network Insights Path.
	Arn *string `pulumi:"arn"`
	// ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
	Destination *string `pulumi:"destination"`
	// ARN of the destination.
	DestinationArn *string `pulumi:"destinationArn"`
	// IP address of the destination resource.
	DestinationIp *string `pulumi:"destinationIp"`
	// Destination port to analyze access to.
	DestinationPort *int `pulumi:"destinationPort"`
	// Protocol to use for analysis. Valid options are `tcp` or `udp`.
	//
	// The following arguments are optional:
	Protocol *string `pulumi:"protocol"`
	// ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
	Source *string `pulumi:"source"`
	// ARN of the source.
	SourceArn *string `pulumi:"sourceArn"`
	// IP address of the source resource.
	SourceIp *string `pulumi:"sourceIp"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type NetworkInsightsPathState struct {
	// ARN of the Network Insights Path.
	Arn pulumix.Input[*string]
	// ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
	Destination pulumix.Input[*string]
	// ARN of the destination.
	DestinationArn pulumix.Input[*string]
	// IP address of the destination resource.
	DestinationIp pulumix.Input[*string]
	// Destination port to analyze access to.
	DestinationPort pulumix.Input[*int]
	// Protocol to use for analysis. Valid options are `tcp` or `udp`.
	//
	// The following arguments are optional:
	Protocol pulumix.Input[*string]
	// ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
	Source pulumix.Input[*string]
	// ARN of the source.
	SourceArn pulumix.Input[*string]
	// IP address of the source resource.
	SourceIp pulumix.Input[*string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (NetworkInsightsPathState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInsightsPathState)(nil)).Elem()
}

type networkInsightsPathArgs struct {
	// ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
	Destination string `pulumi:"destination"`
	// IP address of the destination resource.
	DestinationIp *string `pulumi:"destinationIp"`
	// Destination port to analyze access to.
	DestinationPort *int `pulumi:"destinationPort"`
	// Protocol to use for analysis. Valid options are `tcp` or `udp`.
	//
	// The following arguments are optional:
	Protocol string `pulumi:"protocol"`
	// ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
	Source string `pulumi:"source"`
	// IP address of the source resource.
	SourceIp *string `pulumi:"sourceIp"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a NetworkInsightsPath resource.
type NetworkInsightsPathArgs struct {
	// ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
	Destination pulumix.Input[string]
	// IP address of the destination resource.
	DestinationIp pulumix.Input[*string]
	// Destination port to analyze access to.
	DestinationPort pulumix.Input[*int]
	// Protocol to use for analysis. Valid options are `tcp` or `udp`.
	//
	// The following arguments are optional:
	Protocol pulumix.Input[string]
	// ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
	Source pulumix.Input[string]
	// IP address of the source resource.
	SourceIp pulumix.Input[*string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (NetworkInsightsPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInsightsPathArgs)(nil)).Elem()
}

type NetworkInsightsPathOutput struct{ *pulumi.OutputState }

func (NetworkInsightsPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInsightsPath)(nil)).Elem()
}

func (o NetworkInsightsPathOutput) ToNetworkInsightsPathOutput() NetworkInsightsPathOutput {
	return o
}

func (o NetworkInsightsPathOutput) ToNetworkInsightsPathOutputWithContext(ctx context.Context) NetworkInsightsPathOutput {
	return o
}

func (o NetworkInsightsPathOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkInsightsPath] {
	return pulumix.Output[NetworkInsightsPath]{
		OutputState: o.OutputState,
	}
}

// ARN of the Network Insights Path.
func (o NetworkInsightsPathOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInsightsPath](o, func(v NetworkInsightsPath) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
func (o NetworkInsightsPathOutput) Destination() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInsightsPath](o, func(v NetworkInsightsPath) pulumix.Output[string] { return v.Destination })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the destination.
func (o NetworkInsightsPathOutput) DestinationArn() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInsightsPath](o, func(v NetworkInsightsPath) pulumix.Output[string] { return v.DestinationArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// IP address of the destination resource.
func (o NetworkInsightsPathOutput) DestinationIp() pulumix.Output[*string] {
	value := pulumix.Apply[NetworkInsightsPath](o, func(v NetworkInsightsPath) pulumix.Output[*string] { return v.DestinationIp })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Destination port to analyze access to.
func (o NetworkInsightsPathOutput) DestinationPort() pulumix.Output[*int] {
	value := pulumix.Apply[NetworkInsightsPath](o, func(v NetworkInsightsPath) pulumix.Output[*int] { return v.DestinationPort })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Protocol to use for analysis. Valid options are `tcp` or `udp`.
//
// The following arguments are optional:
func (o NetworkInsightsPathOutput) Protocol() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInsightsPath](o, func(v NetworkInsightsPath) pulumix.Output[string] { return v.Protocol })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
func (o NetworkInsightsPathOutput) Source() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInsightsPath](o, func(v NetworkInsightsPath) pulumix.Output[string] { return v.Source })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the source.
func (o NetworkInsightsPathOutput) SourceArn() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInsightsPath](o, func(v NetworkInsightsPath) pulumix.Output[string] { return v.SourceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// IP address of the source resource.
func (o NetworkInsightsPathOutput) SourceIp() pulumix.Output[*string] {
	value := pulumix.Apply[NetworkInsightsPath](o, func(v NetworkInsightsPath) pulumix.Output[*string] { return v.SourceIp })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o NetworkInsightsPathOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[NetworkInsightsPath](o, func(v NetworkInsightsPath) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o NetworkInsightsPathOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[NetworkInsightsPath](o, func(v NetworkInsightsPath) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(NetworkInsightsPathOutput{})
}
