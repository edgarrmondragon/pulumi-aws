// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Route 53 Resolver query logging configuration association resource.
type ResolverQueryLogConfigAssociation struct {
	pulumi.CustomResourceState

	// The ID of the Route 53 Resolver query logging configuration that you want to associate a VPC with.
	ResolverQueryLogConfigId pulumix.Output[string] `pulumi:"resolverQueryLogConfigId"`
	// The ID of a VPC that you want this query logging configuration to log queries for.
	ResourceId pulumix.Output[string] `pulumi:"resourceId"`
}

// NewResolverQueryLogConfigAssociation registers a new resource with the given unique name, arguments, and options.
func NewResolverQueryLogConfigAssociation(ctx *pulumi.Context,
	name string, args *ResolverQueryLogConfigAssociationArgs, opts ...pulumi.ResourceOption) (*ResolverQueryLogConfigAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResolverQueryLogConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ResolverQueryLogConfigId'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResolverQueryLogConfigAssociation
	err := ctx.RegisterResource("aws:route53/resolverQueryLogConfigAssociation:ResolverQueryLogConfigAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverQueryLogConfigAssociation gets an existing ResolverQueryLogConfigAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverQueryLogConfigAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverQueryLogConfigAssociationState, opts ...pulumi.ResourceOption) (*ResolverQueryLogConfigAssociation, error) {
	var resource ResolverQueryLogConfigAssociation
	err := ctx.ReadResource("aws:route53/resolverQueryLogConfigAssociation:ResolverQueryLogConfigAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverQueryLogConfigAssociation resources.
type resolverQueryLogConfigAssociationState struct {
	// The ID of the Route 53 Resolver query logging configuration that you want to associate a VPC with.
	ResolverQueryLogConfigId *string `pulumi:"resolverQueryLogConfigId"`
	// The ID of a VPC that you want this query logging configuration to log queries for.
	ResourceId *string `pulumi:"resourceId"`
}

type ResolverQueryLogConfigAssociationState struct {
	// The ID of the Route 53 Resolver query logging configuration that you want to associate a VPC with.
	ResolverQueryLogConfigId pulumix.Input[*string]
	// The ID of a VPC that you want this query logging configuration to log queries for.
	ResourceId pulumix.Input[*string]
}

func (ResolverQueryLogConfigAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverQueryLogConfigAssociationState)(nil)).Elem()
}

type resolverQueryLogConfigAssociationArgs struct {
	// The ID of the Route 53 Resolver query logging configuration that you want to associate a VPC with.
	ResolverQueryLogConfigId string `pulumi:"resolverQueryLogConfigId"`
	// The ID of a VPC that you want this query logging configuration to log queries for.
	ResourceId string `pulumi:"resourceId"`
}

// The set of arguments for constructing a ResolverQueryLogConfigAssociation resource.
type ResolverQueryLogConfigAssociationArgs struct {
	// The ID of the Route 53 Resolver query logging configuration that you want to associate a VPC with.
	ResolverQueryLogConfigId pulumix.Input[string]
	// The ID of a VPC that you want this query logging configuration to log queries for.
	ResourceId pulumix.Input[string]
}

func (ResolverQueryLogConfigAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverQueryLogConfigAssociationArgs)(nil)).Elem()
}

type ResolverQueryLogConfigAssociationOutput struct{ *pulumi.OutputState }

func (ResolverQueryLogConfigAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverQueryLogConfigAssociation)(nil)).Elem()
}

func (o ResolverQueryLogConfigAssociationOutput) ToResolverQueryLogConfigAssociationOutput() ResolverQueryLogConfigAssociationOutput {
	return o
}

func (o ResolverQueryLogConfigAssociationOutput) ToResolverQueryLogConfigAssociationOutputWithContext(ctx context.Context) ResolverQueryLogConfigAssociationOutput {
	return o
}

func (o ResolverQueryLogConfigAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[ResolverQueryLogConfigAssociation] {
	return pulumix.Output[ResolverQueryLogConfigAssociation]{
		OutputState: o.OutputState,
	}
}

// The ID of the Route 53 Resolver query logging configuration that you want to associate a VPC with.
func (o ResolverQueryLogConfigAssociationOutput) ResolverQueryLogConfigId() pulumix.Output[string] {
	value := pulumix.Apply[ResolverQueryLogConfigAssociation](o, func(v ResolverQueryLogConfigAssociation) pulumix.Output[string] { return v.ResolverQueryLogConfigId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of a VPC that you want this query logging configuration to log queries for.
func (o ResolverQueryLogConfigAssociationOutput) ResourceId() pulumix.Output[string] {
	value := pulumix.Apply[ResolverQueryLogConfigAssociation](o, func(v ResolverQueryLogConfigAssociation) pulumix.Output[string] { return v.ResourceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ResolverQueryLogConfigAssociationOutput{})
}
