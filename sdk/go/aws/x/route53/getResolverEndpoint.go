// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `route53.ResolverEndpoint` provides details about a specific Route53 Resolver Endpoint.
//
// This data source allows to find a list of IPaddresses associated with a specific Route53 Resolver Endpoint.
func LookupResolverEndpoint(ctx *pulumi.Context, args *LookupResolverEndpointArgs, opts ...pulumi.InvokeOption) (*LookupResolverEndpointResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResolverEndpointResult
	err := ctx.Invoke("aws:route53/getResolverEndpoint:getResolverEndpoint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResolverEndpoint.
type LookupResolverEndpointArgs struct {
	// One or more name/value pairs to use as filters. There are
	// several valid keys, for a full reference, check out
	// [Route53resolver Filter value in the AWS API reference][1].
	//
	// In addition to all arguments above, the following attributes are exported:
	Filters []GetResolverEndpointFilter `pulumi:"filters"`
	// ID of the Route53 Resolver Endpoint.
	ResolverEndpointId *string `pulumi:"resolverEndpointId"`
}

// A collection of values returned by getResolverEndpoint.
type LookupResolverEndpointResult struct {
	Arn       string                      `pulumi:"arn"`
	Direction string                      `pulumi:"direction"`
	Filters   []GetResolverEndpointFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                 string   `pulumi:"id"`
	IpAddresses        []string `pulumi:"ipAddresses"`
	Name               string   `pulumi:"name"`
	ResolverEndpointId *string  `pulumi:"resolverEndpointId"`
	Status             string   `pulumi:"status"`
	VpcId              string   `pulumi:"vpcId"`
}

func LookupResolverEndpointOutput(ctx *pulumi.Context, args LookupResolverEndpointOutputArgs, opts ...pulumi.InvokeOption) LookupResolverEndpointResultOutput {
	outputResult := pulumix.ApplyErr[*LookupResolverEndpointArgs](args.ToOutput(), func(plainArgs *LookupResolverEndpointArgs) (*LookupResolverEndpointResult, error) {
		return LookupResolverEndpoint(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupResolverEndpointResultOutput, *LookupResolverEndpointResult](outputResult)
}

// A collection of arguments for invoking getResolverEndpoint.
type LookupResolverEndpointOutputArgs struct {
	// One or more name/value pairs to use as filters. There are
	// several valid keys, for a full reference, check out
	// [Route53resolver Filter value in the AWS API reference][1].
	//
	// In addition to all arguments above, the following attributes are exported:
	Filters pulumix.Input[[]*GetResolverEndpointFilterArgs] `pulumi:"filters"`
	// ID of the Route53 Resolver Endpoint.
	ResolverEndpointId pulumix.Input[*string] `pulumi:"resolverEndpointId"`
}

func (args LookupResolverEndpointOutputArgs) ToOutput() pulumix.Output[*LookupResolverEndpointArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.ResolverEndpointId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupResolverEndpointArgs {
		return &LookupResolverEndpointArgs{
			Filters:            resolvedArgs[0].([]GetResolverEndpointFilter),
			ResolverEndpointId: resolvedArgs[1].(*string),
		}
	})
}

type LookupResolverEndpointResultOutput struct{ *pulumi.OutputState }

func (LookupResolverEndpointResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResolverEndpointResult)(nil)).Elem()
}

func (o LookupResolverEndpointResultOutput) ToOutput(context.Context) pulumix.Output[*LookupResolverEndpointResult] {
	return pulumix.Output[*LookupResolverEndpointResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupResolverEndpointResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverEndpointResult](o, func(v *LookupResolverEndpointResult) string { return v.Arn })
}

func (o LookupResolverEndpointResultOutput) Direction() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverEndpointResult](o, func(v *LookupResolverEndpointResult) string { return v.Direction })
}

func (o LookupResolverEndpointResultOutput) Filters() pulumix.GArrayOutput[GetResolverEndpointFilter, GetResolverEndpointFilterOutput] {
	value := pulumix.Apply[*LookupResolverEndpointResult](o, func(v *LookupResolverEndpointResult) []GetResolverEndpointFilter { return v.Filters })
	return pulumix.GArrayOutput[GetResolverEndpointFilter, GetResolverEndpointFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupResolverEndpointResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverEndpointResult](o, func(v *LookupResolverEndpointResult) string { return v.Id })
}

func (o LookupResolverEndpointResultOutput) IpAddresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupResolverEndpointResult](o, func(v *LookupResolverEndpointResult) []string { return v.IpAddresses })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupResolverEndpointResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverEndpointResult](o, func(v *LookupResolverEndpointResult) string { return v.Name })
}

func (o LookupResolverEndpointResultOutput) ResolverEndpointId() pulumix.Output[*string] {
	return pulumix.Apply[*LookupResolverEndpointResult](o, func(v *LookupResolverEndpointResult) *string { return v.ResolverEndpointId })
}

func (o LookupResolverEndpointResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverEndpointResult](o, func(v *LookupResolverEndpointResult) string { return v.Status })
}

func (o LookupResolverEndpointResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverEndpointResult](o, func(v *LookupResolverEndpointResult) string { return v.VpcId })
}
