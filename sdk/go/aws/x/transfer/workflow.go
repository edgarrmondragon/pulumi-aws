// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a AWS Transfer Workflow resource.
type Workflow struct {
	pulumi.CustomResourceState

	// The Workflow ARN.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A textual description for the workflow.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
	OnExceptionSteps pulumix.GArrayOutput[WorkflowOnExceptionStep, WorkflowOnExceptionStepOutput] `pulumi:"onExceptionSteps"`
	// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
	Steps pulumix.GArrayOutput[WorkflowStep, WorkflowStepOutput] `pulumi:"steps"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewWorkflow registers a new resource with the given unique name, arguments, and options.
func NewWorkflow(ctx *pulumi.Context,
	name string, args *WorkflowArgs, opts ...pulumi.ResourceOption) (*Workflow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Steps == nil {
		return nil, errors.New("invalid value for required argument 'Steps'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workflow
	err := ctx.RegisterResource("aws:transfer/workflow:Workflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflow gets an existing Workflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowState, opts ...pulumi.ResourceOption) (*Workflow, error) {
	var resource Workflow
	err := ctx.ReadResource("aws:transfer/workflow:Workflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workflow resources.
type workflowState struct {
	// The Workflow ARN.
	Arn *string `pulumi:"arn"`
	// A textual description for the workflow.
	Description *string `pulumi:"description"`
	// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
	OnExceptionSteps []WorkflowOnExceptionStep `pulumi:"onExceptionSteps"`
	// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
	Steps []WorkflowStep `pulumi:"steps"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type WorkflowState struct {
	// The Workflow ARN.
	Arn pulumix.Input[*string]
	// A textual description for the workflow.
	Description pulumix.Input[*string]
	// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
	OnExceptionSteps pulumix.Input[[]*WorkflowOnExceptionStepArgs]
	// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
	Steps pulumix.Input[[]*WorkflowStepArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (WorkflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowState)(nil)).Elem()
}

type workflowArgs struct {
	// A textual description for the workflow.
	Description *string `pulumi:"description"`
	// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
	OnExceptionSteps []WorkflowOnExceptionStep `pulumi:"onExceptionSteps"`
	// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
	Steps []WorkflowStep `pulumi:"steps"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Workflow resource.
type WorkflowArgs struct {
	// A textual description for the workflow.
	Description pulumix.Input[*string]
	// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
	OnExceptionSteps pulumix.Input[[]*WorkflowOnExceptionStepArgs]
	// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
	Steps pulumix.Input[[]*WorkflowStepArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (WorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowArgs)(nil)).Elem()
}

type WorkflowOutput struct{ *pulumi.OutputState }

func (WorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Workflow)(nil)).Elem()
}

func (o WorkflowOutput) ToWorkflowOutput() WorkflowOutput {
	return o
}

func (o WorkflowOutput) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return o
}

func (o WorkflowOutput) ToOutput(ctx context.Context) pulumix.Output[Workflow] {
	return pulumix.Output[Workflow]{
		OutputState: o.OutputState,
	}
}

// The Workflow ARN.
func (o WorkflowOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Workflow](o, func(v Workflow) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A textual description for the workflow.
func (o WorkflowOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Workflow](o, func(v Workflow) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
func (o WorkflowOutput) OnExceptionSteps() pulumix.GArrayOutput[WorkflowOnExceptionStep, WorkflowOnExceptionStepOutput] {
	value := pulumix.Apply[Workflow](o, func(v Workflow) pulumix.GArrayOutput[WorkflowOnExceptionStep, WorkflowOnExceptionStepOutput] {
		return v.OnExceptionSteps
	})
	unwrapped := pulumix.Flatten[[]WorkflowOnExceptionStep, pulumix.GArrayOutput[WorkflowOnExceptionStep, WorkflowOnExceptionStepOutput]](value)
	return pulumix.GArrayOutput[WorkflowOnExceptionStep, WorkflowOnExceptionStepOutput]{OutputState: unwrapped.OutputState}
}

// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
func (o WorkflowOutput) Steps() pulumix.GArrayOutput[WorkflowStep, WorkflowStepOutput] {
	value := pulumix.Apply[Workflow](o, func(v Workflow) pulumix.GArrayOutput[WorkflowStep, WorkflowStepOutput] { return v.Steps })
	unwrapped := pulumix.Flatten[[]WorkflowStep, pulumix.GArrayOutput[WorkflowStep, WorkflowStepOutput]](value)
	return pulumix.GArrayOutput[WorkflowStep, WorkflowStepOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o WorkflowOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Workflow](o, func(v Workflow) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o WorkflowOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Workflow](o, func(v Workflow) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(WorkflowOutput{})
}
