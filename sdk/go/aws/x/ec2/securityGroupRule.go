// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a security group rule resource. Represents a single `ingress` or
// `egress` group rule, which can be added to external Security Groups.
//
// > **NOTE on Security Groups and Security Group Rules:** This provider currently provides a Security Group resource with `ingress` and `egress` rules defined in-line and a Security Group Rule resource which manages one or more `ingress` or
// `egress` rules. Both of these resource were added before AWS assigned a [security group rule unique ID](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules.html), and they do not work well in all scenarios using the`description` and `tags` attributes, which rely on the unique ID.
// The `vpc.SecurityGroupEgressRule` and `vpc.SecurityGroupIngressRule` resources have been added to address these limitations and should be used for all new security group rules.
// You should not use the `vpc.SecurityGroupEgressRule` and `vpc.SecurityGroupIngressRule` resources in conjunction with an `ec2.SecurityGroup` resource with in-line rules or with `ec2.SecurityGroupRule` resources defined for the same Security Group, as rule conflicts may occur and rules will be overwritten.
//
// > **NOTE:** Setting `protocol = "all"` or `protocol = -1` with `fromPort` and `toPort` will result in the EC2 API creating a security group rule with all ports open. This API behavior cannot be controlled by this provider and may generate warnings in the future.
//
// > **NOTE:** Referencing Security Groups across VPC peering has certain restrictions. More information is available in the [VPC Peering User Guide](https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-security-groups.html).
type SecurityGroupRule struct {
	pulumi.CustomResourceState

	// List of CIDR blocks. Cannot be specified with `sourceSecurityGroupId` or `self`.
	CidrBlocks pulumix.ArrayOutput[string] `pulumi:"cidrBlocks"`
	// Description of the rule.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Start port (or ICMP type number if protocol is "icmp" or "icmpv6").
	FromPort pulumix.Output[int] `pulumi:"fromPort"`
	// List of IPv6 CIDR blocks. Cannot be specified with `sourceSecurityGroupId` or `self`.
	Ipv6CidrBlocks pulumix.ArrayOutput[string] `pulumi:"ipv6CidrBlocks"`
	// List of Prefix List IDs.
	PrefixListIds pulumix.ArrayOutput[string] `pulumi:"prefixListIds"`
	// Protocol. If not icmp, icmpv6, tcp, udp, or all use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
	Protocol pulumix.Output[string] `pulumi:"protocol"`
	// Security group to apply this rule to.
	SecurityGroupId pulumix.Output[string] `pulumi:"securityGroupId"`
	// If the `ec2.SecurityGroupRule` resource has a single source or destination then this is the AWS Security Group Rule resource ID. Otherwise it is empty.
	SecurityGroupRuleId pulumix.Output[string] `pulumi:"securityGroupRuleId"`
	// Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with `cidrBlocks`, `ipv6CidrBlocks`, or `sourceSecurityGroupId`.
	Self pulumix.Output[*bool] `pulumi:"self"`
	// Security group id to allow access to/from, depending on the `type`. Cannot be specified with `cidrBlocks`, `ipv6CidrBlocks`, or `self`.
	SourceSecurityGroupId pulumix.Output[string] `pulumi:"sourceSecurityGroupId"`
	// End port (or ICMP code if protocol is "icmp").
	ToPort pulumix.Output[int] `pulumi:"toPort"`
	// Type of rule being created. Valid options are `ingress` (inbound)
	// or `egress` (outbound).
	//
	// The following arguments are optional:
	//
	// > **Note** Although `cidrBlocks`, `ipv6CidrBlocks`, `prefixListIds`, and `sourceSecurityGroupId` are all marked as optional, you _must_ provide one of them in order to configure the source of the traffic.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewSecurityGroupRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupRule(ctx *pulumi.Context,
	name string, args *SecurityGroupRuleArgs, opts ...pulumi.ResourceOption) (*SecurityGroupRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FromPort == nil {
		return nil, errors.New("invalid value for required argument 'FromPort'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	if args.ToPort == nil {
		return nil, errors.New("invalid value for required argument 'ToPort'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityGroupRule
	err := ctx.RegisterResource("aws:ec2/securityGroupRule:SecurityGroupRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroupRule gets an existing SecurityGroupRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupRuleState, opts ...pulumi.ResourceOption) (*SecurityGroupRule, error) {
	var resource SecurityGroupRule
	err := ctx.ReadResource("aws:ec2/securityGroupRule:SecurityGroupRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroupRule resources.
type securityGroupRuleState struct {
	// List of CIDR blocks. Cannot be specified with `sourceSecurityGroupId` or `self`.
	CidrBlocks []string `pulumi:"cidrBlocks"`
	// Description of the rule.
	Description *string `pulumi:"description"`
	// Start port (or ICMP type number if protocol is "icmp" or "icmpv6").
	FromPort *int `pulumi:"fromPort"`
	// List of IPv6 CIDR blocks. Cannot be specified with `sourceSecurityGroupId` or `self`.
	Ipv6CidrBlocks []string `pulumi:"ipv6CidrBlocks"`
	// List of Prefix List IDs.
	PrefixListIds []string `pulumi:"prefixListIds"`
	// Protocol. If not icmp, icmpv6, tcp, udp, or all use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
	Protocol *string `pulumi:"protocol"`
	// Security group to apply this rule to.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// If the `ec2.SecurityGroupRule` resource has a single source or destination then this is the AWS Security Group Rule resource ID. Otherwise it is empty.
	SecurityGroupRuleId *string `pulumi:"securityGroupRuleId"`
	// Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with `cidrBlocks`, `ipv6CidrBlocks`, or `sourceSecurityGroupId`.
	Self *bool `pulumi:"self"`
	// Security group id to allow access to/from, depending on the `type`. Cannot be specified with `cidrBlocks`, `ipv6CidrBlocks`, or `self`.
	SourceSecurityGroupId *string `pulumi:"sourceSecurityGroupId"`
	// End port (or ICMP code if protocol is "icmp").
	ToPort *int `pulumi:"toPort"`
	// Type of rule being created. Valid options are `ingress` (inbound)
	// or `egress` (outbound).
	//
	// The following arguments are optional:
	//
	// > **Note** Although `cidrBlocks`, `ipv6CidrBlocks`, `prefixListIds`, and `sourceSecurityGroupId` are all marked as optional, you _must_ provide one of them in order to configure the source of the traffic.
	Type *string `pulumi:"type"`
}

type SecurityGroupRuleState struct {
	// List of CIDR blocks. Cannot be specified with `sourceSecurityGroupId` or `self`.
	CidrBlocks pulumix.Input[[]string]
	// Description of the rule.
	Description pulumix.Input[*string]
	// Start port (or ICMP type number if protocol is "icmp" or "icmpv6").
	FromPort pulumix.Input[*int]
	// List of IPv6 CIDR blocks. Cannot be specified with `sourceSecurityGroupId` or `self`.
	Ipv6CidrBlocks pulumix.Input[[]string]
	// List of Prefix List IDs.
	PrefixListIds pulumix.Input[[]string]
	// Protocol. If not icmp, icmpv6, tcp, udp, or all use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
	Protocol pulumix.Input[*string]
	// Security group to apply this rule to.
	SecurityGroupId pulumix.Input[*string]
	// If the `ec2.SecurityGroupRule` resource has a single source or destination then this is the AWS Security Group Rule resource ID. Otherwise it is empty.
	SecurityGroupRuleId pulumix.Input[*string]
	// Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with `cidrBlocks`, `ipv6CidrBlocks`, or `sourceSecurityGroupId`.
	Self pulumix.Input[*bool]
	// Security group id to allow access to/from, depending on the `type`. Cannot be specified with `cidrBlocks`, `ipv6CidrBlocks`, or `self`.
	SourceSecurityGroupId pulumix.Input[*string]
	// End port (or ICMP code if protocol is "icmp").
	ToPort pulumix.Input[*int]
	// Type of rule being created. Valid options are `ingress` (inbound)
	// or `egress` (outbound).
	//
	// The following arguments are optional:
	//
	// > **Note** Although `cidrBlocks`, `ipv6CidrBlocks`, `prefixListIds`, and `sourceSecurityGroupId` are all marked as optional, you _must_ provide one of them in order to configure the source of the traffic.
	Type pulumix.Input[*string]
}

func (SecurityGroupRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupRuleState)(nil)).Elem()
}

type securityGroupRuleArgs struct {
	// List of CIDR blocks. Cannot be specified with `sourceSecurityGroupId` or `self`.
	CidrBlocks []string `pulumi:"cidrBlocks"`
	// Description of the rule.
	Description *string `pulumi:"description"`
	// Start port (or ICMP type number if protocol is "icmp" or "icmpv6").
	FromPort int `pulumi:"fromPort"`
	// List of IPv6 CIDR blocks. Cannot be specified with `sourceSecurityGroupId` or `self`.
	Ipv6CidrBlocks []string `pulumi:"ipv6CidrBlocks"`
	// List of Prefix List IDs.
	PrefixListIds []string `pulumi:"prefixListIds"`
	// Protocol. If not icmp, icmpv6, tcp, udp, or all use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
	Protocol string `pulumi:"protocol"`
	// Security group to apply this rule to.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with `cidrBlocks`, `ipv6CidrBlocks`, or `sourceSecurityGroupId`.
	Self *bool `pulumi:"self"`
	// Security group id to allow access to/from, depending on the `type`. Cannot be specified with `cidrBlocks`, `ipv6CidrBlocks`, or `self`.
	SourceSecurityGroupId *string `pulumi:"sourceSecurityGroupId"`
	// End port (or ICMP code if protocol is "icmp").
	ToPort int `pulumi:"toPort"`
	// Type of rule being created. Valid options are `ingress` (inbound)
	// or `egress` (outbound).
	//
	// The following arguments are optional:
	//
	// > **Note** Although `cidrBlocks`, `ipv6CidrBlocks`, `prefixListIds`, and `sourceSecurityGroupId` are all marked as optional, you _must_ provide one of them in order to configure the source of the traffic.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a SecurityGroupRule resource.
type SecurityGroupRuleArgs struct {
	// List of CIDR blocks. Cannot be specified with `sourceSecurityGroupId` or `self`.
	CidrBlocks pulumix.Input[[]string]
	// Description of the rule.
	Description pulumix.Input[*string]
	// Start port (or ICMP type number if protocol is "icmp" or "icmpv6").
	FromPort pulumix.Input[int]
	// List of IPv6 CIDR blocks. Cannot be specified with `sourceSecurityGroupId` or `self`.
	Ipv6CidrBlocks pulumix.Input[[]string]
	// List of Prefix List IDs.
	PrefixListIds pulumix.Input[[]string]
	// Protocol. If not icmp, icmpv6, tcp, udp, or all use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
	Protocol pulumix.Input[string]
	// Security group to apply this rule to.
	SecurityGroupId pulumix.Input[string]
	// Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with `cidrBlocks`, `ipv6CidrBlocks`, or `sourceSecurityGroupId`.
	Self pulumix.Input[*bool]
	// Security group id to allow access to/from, depending on the `type`. Cannot be specified with `cidrBlocks`, `ipv6CidrBlocks`, or `self`.
	SourceSecurityGroupId pulumix.Input[*string]
	// End port (or ICMP code if protocol is "icmp").
	ToPort pulumix.Input[int]
	// Type of rule being created. Valid options are `ingress` (inbound)
	// or `egress` (outbound).
	//
	// The following arguments are optional:
	//
	// > **Note** Although `cidrBlocks`, `ipv6CidrBlocks`, `prefixListIds`, and `sourceSecurityGroupId` are all marked as optional, you _must_ provide one of them in order to configure the source of the traffic.
	Type pulumix.Input[string]
}

func (SecurityGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupRuleArgs)(nil)).Elem()
}

type SecurityGroupRuleOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleOutput) ToSecurityGroupRuleOutput() SecurityGroupRuleOutput {
	return o
}

func (o SecurityGroupRuleOutput) ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput {
	return o
}

func (o SecurityGroupRuleOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityGroupRule] {
	return pulumix.Output[SecurityGroupRule]{
		OutputState: o.OutputState,
	}
}

// List of CIDR blocks. Cannot be specified with `sourceSecurityGroupId` or `self`.
func (o SecurityGroupRuleOutput) CidrBlocks() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SecurityGroupRule](o, func(v SecurityGroupRule) pulumix.ArrayOutput[string] { return v.CidrBlocks })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Description of the rule.
func (o SecurityGroupRuleOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[SecurityGroupRule](o, func(v SecurityGroupRule) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Start port (or ICMP type number if protocol is "icmp" or "icmpv6").
func (o SecurityGroupRuleOutput) FromPort() pulumix.Output[int] {
	value := pulumix.Apply[SecurityGroupRule](o, func(v SecurityGroupRule) pulumix.Output[int] { return v.FromPort })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// List of IPv6 CIDR blocks. Cannot be specified with `sourceSecurityGroupId` or `self`.
func (o SecurityGroupRuleOutput) Ipv6CidrBlocks() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SecurityGroupRule](o, func(v SecurityGroupRule) pulumix.ArrayOutput[string] { return v.Ipv6CidrBlocks })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// List of Prefix List IDs.
func (o SecurityGroupRuleOutput) PrefixListIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SecurityGroupRule](o, func(v SecurityGroupRule) pulumix.ArrayOutput[string] { return v.PrefixListIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Protocol. If not icmp, icmpv6, tcp, udp, or all use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
func (o SecurityGroupRuleOutput) Protocol() pulumix.Output[string] {
	value := pulumix.Apply[SecurityGroupRule](o, func(v SecurityGroupRule) pulumix.Output[string] { return v.Protocol })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Security group to apply this rule to.
func (o SecurityGroupRuleOutput) SecurityGroupId() pulumix.Output[string] {
	value := pulumix.Apply[SecurityGroupRule](o, func(v SecurityGroupRule) pulumix.Output[string] { return v.SecurityGroupId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If the `ec2.SecurityGroupRule` resource has a single source or destination then this is the AWS Security Group Rule resource ID. Otherwise it is empty.
func (o SecurityGroupRuleOutput) SecurityGroupRuleId() pulumix.Output[string] {
	value := pulumix.Apply[SecurityGroupRule](o, func(v SecurityGroupRule) pulumix.Output[string] { return v.SecurityGroupRuleId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with `cidrBlocks`, `ipv6CidrBlocks`, or `sourceSecurityGroupId`.
func (o SecurityGroupRuleOutput) Self() pulumix.Output[*bool] {
	value := pulumix.Apply[SecurityGroupRule](o, func(v SecurityGroupRule) pulumix.Output[*bool] { return v.Self })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Security group id to allow access to/from, depending on the `type`. Cannot be specified with `cidrBlocks`, `ipv6CidrBlocks`, or `self`.
func (o SecurityGroupRuleOutput) SourceSecurityGroupId() pulumix.Output[string] {
	value := pulumix.Apply[SecurityGroupRule](o, func(v SecurityGroupRule) pulumix.Output[string] { return v.SourceSecurityGroupId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// End port (or ICMP code if protocol is "icmp").
func (o SecurityGroupRuleOutput) ToPort() pulumix.Output[int] {
	value := pulumix.Apply[SecurityGroupRule](o, func(v SecurityGroupRule) pulumix.Output[int] { return v.ToPort })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Type of rule being created. Valid options are `ingress` (inbound)
// or `egress` (outbound).
//
// The following arguments are optional:
//
// > **Note** Although `cidrBlocks`, `ipv6CidrBlocks`, `prefixListIds`, and `sourceSecurityGroupId` are all marked as optional, you _must_ provide one of them in order to configure the source of the traffic.
func (o SecurityGroupRuleOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[SecurityGroupRule](o, func(v SecurityGroupRule) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SecurityGroupRuleOutput{})
}
