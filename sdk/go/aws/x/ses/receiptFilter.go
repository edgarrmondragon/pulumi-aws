// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an SES receipt filter resource
type ReceiptFilter struct {
	pulumi.CustomResourceState

	// The SES receipt filter ARN.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The IP address or address range to filter, in CIDR notation
	Cidr pulumix.Output[string] `pulumi:"cidr"`
	// The name of the filter
	Name pulumix.Output[string] `pulumi:"name"`
	// Block or Allow
	Policy pulumix.Output[string] `pulumi:"policy"`
}

// NewReceiptFilter registers a new resource with the given unique name, arguments, and options.
func NewReceiptFilter(ctx *pulumi.Context,
	name string, args *ReceiptFilterArgs, opts ...pulumi.ResourceOption) (*ReceiptFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReceiptFilter
	err := ctx.RegisterResource("aws:ses/receiptFilter:ReceiptFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReceiptFilter gets an existing ReceiptFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReceiptFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReceiptFilterState, opts ...pulumi.ResourceOption) (*ReceiptFilter, error) {
	var resource ReceiptFilter
	err := ctx.ReadResource("aws:ses/receiptFilter:ReceiptFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReceiptFilter resources.
type receiptFilterState struct {
	// The SES receipt filter ARN.
	Arn *string `pulumi:"arn"`
	// The IP address or address range to filter, in CIDR notation
	Cidr *string `pulumi:"cidr"`
	// The name of the filter
	Name *string `pulumi:"name"`
	// Block or Allow
	Policy *string `pulumi:"policy"`
}

type ReceiptFilterState struct {
	// The SES receipt filter ARN.
	Arn pulumix.Input[*string]
	// The IP address or address range to filter, in CIDR notation
	Cidr pulumix.Input[*string]
	// The name of the filter
	Name pulumix.Input[*string]
	// Block or Allow
	Policy pulumix.Input[*string]
}

func (ReceiptFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*receiptFilterState)(nil)).Elem()
}

type receiptFilterArgs struct {
	// The IP address or address range to filter, in CIDR notation
	Cidr string `pulumi:"cidr"`
	// The name of the filter
	Name *string `pulumi:"name"`
	// Block or Allow
	Policy string `pulumi:"policy"`
}

// The set of arguments for constructing a ReceiptFilter resource.
type ReceiptFilterArgs struct {
	// The IP address or address range to filter, in CIDR notation
	Cidr pulumix.Input[string]
	// The name of the filter
	Name pulumix.Input[*string]
	// Block or Allow
	Policy pulumix.Input[string]
}

func (ReceiptFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*receiptFilterArgs)(nil)).Elem()
}

type ReceiptFilterOutput struct{ *pulumi.OutputState }

func (ReceiptFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiptFilter)(nil)).Elem()
}

func (o ReceiptFilterOutput) ToReceiptFilterOutput() ReceiptFilterOutput {
	return o
}

func (o ReceiptFilterOutput) ToReceiptFilterOutputWithContext(ctx context.Context) ReceiptFilterOutput {
	return o
}

func (o ReceiptFilterOutput) ToOutput(ctx context.Context) pulumix.Output[ReceiptFilter] {
	return pulumix.Output[ReceiptFilter]{
		OutputState: o.OutputState,
	}
}

// The SES receipt filter ARN.
func (o ReceiptFilterOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ReceiptFilter](o, func(v ReceiptFilter) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IP address or address range to filter, in CIDR notation
func (o ReceiptFilterOutput) Cidr() pulumix.Output[string] {
	value := pulumix.Apply[ReceiptFilter](o, func(v ReceiptFilter) pulumix.Output[string] { return v.Cidr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the filter
func (o ReceiptFilterOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ReceiptFilter](o, func(v ReceiptFilter) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Block or Allow
func (o ReceiptFilterOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[ReceiptFilter](o, func(v ReceiptFilter) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ReceiptFilterOutput{})
}
