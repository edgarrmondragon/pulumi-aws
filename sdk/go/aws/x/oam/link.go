// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS CloudWatch Observability Access Manager Link.
type Link struct {
	pulumi.CustomResourceState

	// ARN of the link.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Label that is assigned to this link.
	Label pulumix.Output[string] `pulumi:"label"`
	// Human-readable name to use to identify this source account when you are viewing data from it in the monitoring account.
	LabelTemplate pulumix.Output[string] `pulumi:"labelTemplate"`
	// ID string that AWS generated as part of the link ARN.
	LinkId pulumix.Output[string] `pulumi:"linkId"`
	// Types of data that the source account shares with the monitoring account.
	ResourceTypes pulumix.ArrayOutput[string] `pulumi:"resourceTypes"`
	// ARN of the sink that is used for this link.
	SinkArn pulumix.Output[string] `pulumi:"sinkArn"`
	// Identifier of the sink to use to create this link.
	//
	// The following arguments are optional:
	SinkIdentifier pulumix.Output[string] `pulumi:"sinkIdentifier"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewLink registers a new resource with the given unique name, arguments, and options.
func NewLink(ctx *pulumi.Context,
	name string, args *LinkArgs, opts ...pulumi.ResourceOption) (*Link, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LabelTemplate == nil {
		return nil, errors.New("invalid value for required argument 'LabelTemplate'")
	}
	if args.ResourceTypes == nil {
		return nil, errors.New("invalid value for required argument 'ResourceTypes'")
	}
	if args.SinkIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'SinkIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Link
	err := ctx.RegisterResource("aws:oam/link:Link", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLink gets an existing Link resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkState, opts ...pulumi.ResourceOption) (*Link, error) {
	var resource Link
	err := ctx.ReadResource("aws:oam/link:Link", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Link resources.
type linkState struct {
	// ARN of the link.
	Arn *string `pulumi:"arn"`
	// Label that is assigned to this link.
	Label *string `pulumi:"label"`
	// Human-readable name to use to identify this source account when you are viewing data from it in the monitoring account.
	LabelTemplate *string `pulumi:"labelTemplate"`
	// ID string that AWS generated as part of the link ARN.
	LinkId *string `pulumi:"linkId"`
	// Types of data that the source account shares with the monitoring account.
	ResourceTypes []string `pulumi:"resourceTypes"`
	// ARN of the sink that is used for this link.
	SinkArn *string `pulumi:"sinkArn"`
	// Identifier of the sink to use to create this link.
	//
	// The following arguments are optional:
	SinkIdentifier *string `pulumi:"sinkIdentifier"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type LinkState struct {
	// ARN of the link.
	Arn pulumix.Input[*string]
	// Label that is assigned to this link.
	Label pulumix.Input[*string]
	// Human-readable name to use to identify this source account when you are viewing data from it in the monitoring account.
	LabelTemplate pulumix.Input[*string]
	// ID string that AWS generated as part of the link ARN.
	LinkId pulumix.Input[*string]
	// Types of data that the source account shares with the monitoring account.
	ResourceTypes pulumix.Input[[]string]
	// ARN of the sink that is used for this link.
	SinkArn pulumix.Input[*string]
	// Identifier of the sink to use to create this link.
	//
	// The following arguments are optional:
	SinkIdentifier pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
}

func (LinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkState)(nil)).Elem()
}

type linkArgs struct {
	// Human-readable name to use to identify this source account when you are viewing data from it in the monitoring account.
	LabelTemplate string `pulumi:"labelTemplate"`
	// Types of data that the source account shares with the monitoring account.
	ResourceTypes []string `pulumi:"resourceTypes"`
	// Identifier of the sink to use to create this link.
	//
	// The following arguments are optional:
	SinkIdentifier string `pulumi:"sinkIdentifier"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Link resource.
type LinkArgs struct {
	// Human-readable name to use to identify this source account when you are viewing data from it in the monitoring account.
	LabelTemplate pulumix.Input[string]
	// Types of data that the source account shares with the monitoring account.
	ResourceTypes pulumix.Input[[]string]
	// Identifier of the sink to use to create this link.
	//
	// The following arguments are optional:
	SinkIdentifier pulumix.Input[string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (LinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkArgs)(nil)).Elem()
}

type LinkOutput struct{ *pulumi.OutputState }

func (LinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Link)(nil)).Elem()
}

func (o LinkOutput) ToLinkOutput() LinkOutput {
	return o
}

func (o LinkOutput) ToLinkOutputWithContext(ctx context.Context) LinkOutput {
	return o
}

func (o LinkOutput) ToOutput(ctx context.Context) pulumix.Output[Link] {
	return pulumix.Output[Link]{
		OutputState: o.OutputState,
	}
}

// ARN of the link.
func (o LinkOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Label that is assigned to this link.
func (o LinkOutput) Label() pulumix.Output[string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.Output[string] { return v.Label })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Human-readable name to use to identify this source account when you are viewing data from it in the monitoring account.
func (o LinkOutput) LabelTemplate() pulumix.Output[string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.Output[string] { return v.LabelTemplate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID string that AWS generated as part of the link ARN.
func (o LinkOutput) LinkId() pulumix.Output[string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.Output[string] { return v.LinkId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Types of data that the source account shares with the monitoring account.
func (o LinkOutput) ResourceTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.ArrayOutput[string] { return v.ResourceTypes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// ARN of the sink that is used for this link.
func (o LinkOutput) SinkArn() pulumix.Output[string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.Output[string] { return v.SinkArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identifier of the sink to use to create this link.
//
// The following arguments are optional:
func (o LinkOutput) SinkIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.Output[string] { return v.SinkIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LinkOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o LinkOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(LinkOutput{})
}
